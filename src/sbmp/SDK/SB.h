
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

#pragma once
/// dependency: BasicType
/// dependency: AIModule
/// dependency: ApexDestruction
/// dependency: BinkMediaPlayer
/// dependency: CableComponent
/// dependency: CinematicCamera
/// dependency: CoreUObject
/// dependency: DeveloperSettings
/// dependency: Engine
/// dependency: Foliage
/// dependency: InputCore
/// dependency: LevelSequence
/// dependency: MovieScene
/// dependency: MovieSceneTracks
/// dependency: Niagara
/// dependency: PhysicsCore
/// dependency: ProceduralMeshComponent
/// dependency: SBAnimation
/// dependency: SignificanceManager
/// dependency: SlateCore
/// dependency: UMG

#pragma pack(push, 0x1)

/// Enum /Script/SB.ESBInputAxisType
/// Size: 0x01 (1 bytes)
enum class ESBInputAxisType : uint8_t
{
	LeftX                                                                            = 0,
	LeftY                                                                            = 1,
	RightX                                                                           = 2,
	RightY                                                                           = 3,
	TouchX                                                                           = 4,
	TouchY                                                                           = 5
};

/// Enum /Script/SB.ESBAreaControlVolumeBlockType
/// Size: 0x01 (1 bytes)
enum class ESBAreaControlVolumeBlockType : uint8_t
{
	SBAreaControlVolumeBlockType_InnerBlock                                          = 0,
	SBAreaControlVolumeBlockType_OuterBlock                                          = 1
};

/// Enum /Script/SB.ESBBGMFinishSoundCondition
/// Size: 0x01 (1 bytes)
enum class ESBBGMFinishSoundCondition : uint8_t
{
	Battle                                                                           = 0,
	EventBattle                                                                      = 1
};

/// Enum /Script/SB.ESBEventBattleConditionType
/// Size: 0x01 (1 bytes)
enum class ESBEventBattleConditionType : uint8_t
{
	EnemyRank                                                                        = 0,
	EnemyCharacterAlias                                                              = 1
};

/// Enum /Script/SB.ESBDecoratorBlackboardSetValueType
/// Size: 0x01 (1 bytes)
enum class ESBDecoratorBlackboardSetValueType : uint8_t
{
	None                                                                             = 0,
	Additive                                                                         = 1
};

/// Enum /Script/SB.ESBActorTagCheckType
/// Size: 0x01 (1 bytes)
enum class ESBActorTagCheckType : uint8_t
{
	Floor                                                                            = 0
};

/// Enum /Script/SB.ESBCheckStanceCompareType
/// Size: 0x01 (1 bytes)
enum class ESBCheckStanceCompareType : uint8_t
{
	SBCheckStanceCompareType_OR                                                      = 0,
	SBCheckStanceCompareType_AND                                                     = 1
};

/// Enum /Script/SB.ESBBTDecoratorAliveCheckType
/// Size: 0x01 (1 bytes)
enum class ESBBTDecoratorAliveCheckType : uint8_t
{
	Alive                                                                            = 0,
	Dead                                                                             = 1,
	Coma                                                                             = 2
};

/// Enum /Script/SB.ESBNotifyBPCrowdControl
/// Size: 0x01 (1 bytes)
enum class ESBNotifyBPCrowdControl : uint8_t
{
	None                                                                             = 0,
	Airborne                                                                         = 1,
	KnockBack                                                                        = 2,
	Down                                                                             = 3,
	Groggy                                                                           = 4
};

/// Enum /Script/SB.ESBCharacterAnimChannel
/// Size: 0x01 (1 bytes)
enum class ESBCharacterAnimChannel : uint8_t
{
	SBAnimChannel_Upper                                                              = 0,
	SBAnimChannel_Lower                                                              = 1,
	SBAnimChannel_All                                                                = 2
};

/// Enum /Script/SB.ESBCharacterFlyingActionState
/// Size: 0x01 (1 bytes)
enum class ESBCharacterFlyingActionState : uint8_t
{
	FlyingAction_None                                                                = 0,
	FlyingAction_Prepare                                                             = 1,
	FlyingAction_Play                                                                = 2
};

/// Enum /Script/SB.ESBCharacterWireModeState
/// Size: 0x01 (1 bytes)
enum class ESBCharacterWireModeState : uint8_t
{
	WireState_Ready                                                                  = 0,
	WireState_Flying                                                                 = 1,
	WireState_Set                                                                    = 2,
	WireState_Recharging                                                             = 3
};

/// Enum /Script/SB.ESBCharacterMovementCheckPoint
/// Size: 0x01 (1 bytes)
enum class ESBCharacterMovementCheckPoint : uint8_t
{
	MCheck_CenterBottom                                                              = 0,
	MCheck_0DegBottom                                                                = 1,
	MCheck_45DegBottom                                                               = 2,
	MCheck_90DegBottom                                                               = 3,
	MCheck_135DegBottom                                                              = 4,
	MCheck_180DegBottom                                                              = 5,
	MCheck_225DegBottom                                                              = 6,
	MCheck_270DegBottom                                                              = 7,
	MCheck_315DegBottom                                                              = 8,
	MCheck_CenterTop                                                                 = 9,
	MCheck_0DegTop                                                                   = 10,
	MCheck_45DegTop                                                                  = 11,
	MCheck_90DegTop                                                                  = 12,
	MCheck_135DegTop                                                                 = 13,
	MCheck_180DegTop                                                                 = 14,
	MCheck_225DegTop                                                                 = 15,
	MCheck_270DegTop                                                                 = 16,
	MCheck_315DegTop                                                                 = 17,
	MCheck_Num                                                                       = 18
};

/// Enum /Script/SB.ESBCharacterMoveAnimBlendMode
/// Size: 0x01 (1 bytes)
enum class ESBCharacterMoveAnimBlendMode : uint8_t
{
	SBCharacterMoveAnimBlend_MoveDirection                                           = 0,
	SBCharacterMoveAnimBlend_ActorRotation                                           = 1,
	SBCharacterMoveAnimBlend_SprintMoveDirection                                     = 2,
	SBCharacterMoveAnimBlend_SprintActorRotation                                     = 3
};

/// Enum /Script/SB.ESBLockOnType
/// Size: 0x01 (1 bytes)
enum class ESBLockOnType : uint8_t
{
	MinDistance                                                                      = 0,
	MinDegree                                                                        = 1
};

/// Enum /Script/SB.ESBCharacterMoveType
/// Size: 0x01 (1 bytes)
enum class ESBCharacterMoveType : uint8_t
{
	None                                                                             = 0,
	Normal                                                                           = 1,
	MoveToIdle                                                                       = 2,
	Fall                                                                             = 3,
	FlyingAction                                                                     = 4,
	LogicRule                                                                        = 5,
	EventMove                                                                        = 6,
	SlopeMove                                                                        = 7,
	Sprint                                                                           = 8,
	Grab                                                                             = 9
};

/// Enum /Script/SB.ESBCharacterCollisionShapeType
/// Size: 0x01 (1 bytes)
enum class ESBCharacterCollisionShapeType : uint8_t
{
	CharacterCollisionShapeType_Box                                                  = 0,
	CharacterCollisionShapeType_Capsule                                              = 1
};

/// Enum /Script/SB.ESBEventMoveType
/// Size: 0x01 (1 bytes)
enum class ESBEventMoveType : uint8_t
{
	SBEventMove_SideToSide                                                           = 0,
	SBEventMove_Rod                                                                  = 1,
	SBEventMove_SideRod                                                              = 2,
	SBEventMove_BalanceBeam                                                          = 3
};

/// Enum /Script/SB.ESBCharacterHitSoundType
/// Size: 0x01 (1 bytes)
enum class ESBCharacterHitSoundType : uint8_t
{
	ESBHitSound_Common                                                               = 0,
	ESBHitSound_Down                                                                 = 1,
	ESBHitSound_Groggy                                                               = 2,
	ESBHitSound_Air                                                                  = 3,
	ESBHitSound_Critical                                                             = 4,
	ESBHitSound_Finish                                                               = 5
};

/// Enum /Script/SB.ESBCharMovingStanceForceType
/// Size: 0x01 (1 bytes)
enum class ESBCharMovingStanceForceType : uint8_t
{
	SBMovingStance_None                                                              = 0,
	SBMovingStance_Pull                                                              = 1,
	SBMovingStance_Push                                                              = 2
};

/// Enum /Script/SB.ESBCommonCreditState
/// Size: 0x01 (1 bytes)
enum class ESBCommonCreditState : uint8_t
{
	None                                                                             = 0,
	Leader                                                                           = 1,
	Scroll                                                                           = 2
};

/// Enum /Script/SB.ESBData
/// Size: 0x01 (1 bytes)
enum class ESBData : uint8_t
{
	DATA_Skill                                                                       = 0,
	DATA_TargetFilter                                                                = 1,
	DATA_SkillActiveStep                                                             = 2,
	DATA_Effect                                                                      = 3,
	DATA_CharacterMove                                                               = 4,
	DATA_SkillCommand                                                                = 5,
	DATA_Character                                                                   = 6,
	DATA_Equipment                                                                   = 7,
	DATA_EquipmentMaterial                                                           = 8,
	DATA_CharacterAnimSet                                                            = 9,
	DATA_CharacterStance                                                             = 10,
	DATA_Projectile                                                                  = 11,
	DATA_World                                                                       = 12,
	DATA_Zone                                                                        = 13,
	DATA_ZoneEvent                                                                   = 14,
	DATA_ZoneTrigger                                                                 = 15,
	DATA_ZoneEventActor                                                              = 16,
	DATA_EventActorEffect                                                            = 17,
	DATA_EventLevelSeq                                                               = 18,
	DATA_EventSpawn                                                                  = 19,
	DATA_EventZoneControl                                                            = 20,
	DATA_EventTheater                                                                = 21,
	DATA_EventItem                                                                   = 22,
	DATA_EventAIDecorator                                                            = 23,
	DATA_EventObjControl                                                             = 24,
	DATA_EventUIAction                                                               = 25,
	DATA_EventActorActive                                                            = 26,
	DATA_EventZoneEventActorControl                                                  = 27,
	DATA_CharacterAppearance                                                         = 28,
	DATA_CharacterWeight                                                             = 29,
	DATA_ConditionTrigger                                                            = 30,
	DATA_EventQuest                                                                  = 31,
	DATA_QuestMission                                                                = 32,
	DATA_Quest                                                                       = 33,
	DATA_QuestTask                                                                   = 34,
	DATA_QuestTaskGroup                                                              = 35,
	DATA_LevelTargetFilter                                                           = 36,
	DATA_EffectVolume                                                                = 37,
	DATA_Condition                                                                   = 38,
	DATA_ConditionGroup                                                              = 39,
	DATA_ZoneEnv                                                                     = 40,
	DATA_ZoneEnvSpawn                                                                = 41,
	DATA_Item                                                                        = 42,
	DATA_ItemEquipable                                                               = 43,
	DATA_ItemConsumable                                                              = 44,
	DATA_RewardGroup                                                                 = 45,
	DATA_DropRateAdjust                                                              = 46,
	DATA_EventEnvControl                                                             = 47,
	DATA_CharacterTribe                                                              = 48,
	DATA_EventEffectVolumeControl                                                    = 49,
	DATA_EventItemAction                                                             = 50,
	DATA_AIGroup                                                                     = 51,
	DATA_AcquisitionSkill                                                            = 52,
	DATA_PassiveSkillFunction                                                        = 53,
	DATA_SkillPriority                                                               = 54,
	DATA_SkillResult                                                                 = 55,
	DATA_CharacterAnimMoveInfo                                                       = 56,
	DATA_EffectCombination                                                           = 57,
	DATA_GearStat                                                                    = 58,
	DATA_GearStatGroup                                                               = 59,
	DATA_EventRequestPathWay                                                         = 60,
	DATA_ZoneLayerGroup                                                              = 61,
	DATA_AreaControlVolume                                                           = 62,
	DATA_EventAreaControlVolumeControl                                               = 63,
	DATA_ActorStatText                                                               = 64,
	DATA_EquipStatViewer                                                             = 65,
	DATA_EventActorBattleState                                                       = 66,
	DATA_GuideAction                                                                 = 67,
	DATA_EventGuideAction                                                            = 68,
	DATA_PuzzleStringArray                                                           = 69,
	DATA_ZonePhaseEvent                                                              = 70,
	DATA_CharacterLevel                                                              = 71,
	DATA_DifficultyStatGroup                                                         = 72,
	DATA_Achievement                                                                 = 73,
	DATA_Activity                                                                    = 74,
	DATA_Trophy                                                                      = 75,
	Data_CheatCommand                                                                = 76,
	DATA_ItemSkillEquipable                                                          = 77,
	DATA_CharacterDetectAI                                                           = 78,
	DATA_CharacterDead                                                               = 79,
	DATA_EventInteractCamp                                                           = 80,
	DATA_EventLaserControl                                                           = 81,
	DATA_SpawnGroupRule                                                              = 82,
	DATA_SPLevel                                                                     = 83,
	DATA_Shop                                                                        = 84,
	DATA_ShopItem                                                                    = 85,
	DATA_ZoneCamp                                                                    = 86,
	DATA_ItemBullet                                                                  = 87,
	DATA_EventZoneWarp                                                               = 88,
	DATA_TransformCharacter                                                          = 89,
	DATA_MultiMap                                                                    = 90,
	DATA_MultiPlayRule                                                               = 91,
	DATA_ItemLure                                                                    = 92,
	DATA_ItemReplacement                                                             = 93,
	DATA_MetaAI                                                                      = 94,
	DATA_EventMetaAI                                                                 = 95,
	DATA_MetaAIBehavior                                                              = 96,
	DATA_UIActionRequest                                                             = 97,
	DATA_UITextActionFormat                                                          = 98,
	DATA_UITextInputDefine                                                           = 99,
	DATA_UIKeyImageAsset                                                             = 100,
	DATA_Album                                                                       = 101,
	DATA_TheaterSelectData                                                           = 102,
	DATA_ItemFish                                                                    = 103,
	DATA_ItemSpawn                                                                   = 104,
	DATA_SoundEvent                                                                  = 105,
	DATA_SoundEventQuest                                                             = 106,
	DATA_SoundEventLevelSequence                                                     = 107,
	DATA_SoundAttenuationEvent                                                       = 108,
	DATA_SoundEquipmentSet                                                           = 109,
	DATA_EditorTooltip                                                               = 110,
	DATA_GamePlayProgressRecord                                                      = 111,
	DATA_CheatProgressQuestCommands                                                  = 112,
	DATA_ReStartRuleTable                                                            = 113,
	DATA_Hint                                                                        = 114,
	DATA_WorldTransition                                                             = 115,
	DATA_StudioTransition                                                            = 116,
	DATA_GuideMessage                                                                = 117,
	DATA_Can                                                                         = 118,
	DATA_ShowParam                                                                   = 119,
	DATA_WorldMap                                                                    = 120,
	DATA_SocialAnim                                                                  = 121,
	DATA_CheatQuestTable                                                             = 122,
	DATA_UITutorial                                                                  = 123,
	DATA_EffectVolumeProperty                                                        = 124,
	DATA_ResourceCacheSequence                                                       = 125,
	DATA_TrainningRoomSetting                                                        = 126,
	DATA_IsolatedArea                                                                = 127,
	DATA_Manual                                                                      = 128,
	DATA_Credit                                                                      = 129,
	DATA_SequenceActorTag                                                            = 130,
	DATA_LevelGraphicsOptions                                                        = 131,
	DATA_NGPlusEventSpawn                                                            = 132,
	DATA_NGPlusAlreadySetup                                                          = 133,
	DATA_GamePlayProgressCheat                                                       = 134,
	DATA_ActorPlayPreset                                                             = 135,
	DATA_BossChallenge                                                               = 136,
	DATA_EventGift                                                                   = 137,
	DATA_PhotoModeImageFilter                                                        = 138,
	DATA_PhotoModeFacialAnimation                                                    = 139,
	DATA_PhotoModeEyesPositionByPose                                                 = 140,
	DATA_PhotoChallenge                                                              = 141,
	DATA_PhotoModeOption                                                             = 142,
	DATA_PhotoModeImage                                                              = 143,
	DATA_PhotoModeMovement                                                           = 144,
	DATA_KeyMapping                                                                  = 145,
	DATA_KeyMappingRollover                                                          = 146,
	DATA_TurntableSound                                                              = 147,
	DATA_LoadingScreenGameTip                                                        = 148,
	DATA_NikkeStage                                                                  = 149,
	DATA_MailBoxGift                                                                 = 150,
	DATA_ArtBook                                                                     = 151,
	DATA_NikkeLostArticle                                                            = 152
};

/// Enum /Script/SB.ESBOnlineStoreType
/// Size: 0x01 (1 bytes)
enum class ESBOnlineStoreType : uint8_t
{
	None                                                                             = 0,
	Steam                                                                            = 1,
	EpicGames                                                                        = 2,
	PlayStation                                                                      = 3
};

/// Enum /Script/SB.ESBMeshStudioType
/// Size: 0x01 (1 bytes)
enum class ESBMeshStudioType : uint8_t
{
	Can                                                                              = 0,
	Character                                                                        = 1
};

/// Enum /Script/SB.ESBSequenceContentType
/// Size: 0x01 (1 bytes)
enum class ESBSequenceContentType : uint8_t
{
	Default                                                                          = 0,
	Nikke                                                                            = 1
};

/// Enum /Script/SB.ESBKeyboardType
/// Size: 0x01 (1 bytes)
enum class ESBKeyboardType : uint8_t
{
	QWERTY                                                                           = 0,
	AZERTY                                                                           = 1
};

/// Enum /Script/SB.ESBCouponFailResponseType
/// Size: 0x01 (1 bytes)
enum class ESBCouponFailResponseType : uint8_t
{
	IssuanceError                                                                    = 0,
	PurchaseInfoError                                                                = 1,
	Expired                                                                          = 2,
	DataVerificationError                                                            = 3,
	NetworkError                                                                     = 4
};

/// Enum /Script/SB.ESBCouponNotAvailableType
/// Size: 0x01 (1 bytes)
enum class ESBCouponNotAvailableType : uint8_t
{
	None                                                                             = 0,
	NotEnoughPlayTime                                                                = 1,
	Expired                                                                          = 2,
	NetworkError                                                                     = 3
};

/// Enum /Script/SB.ESBCouponState
/// Size: 0x01 (1 bytes)
enum class ESBCouponState : uint8_t
{
	None                                                                             = 0,
	NotAvailable                                                                     = 1,
	Available                                                                        = 2,
	WaitRequest                                                                      = 3,
	Acquired                                                                         = 4
};

/// Enum /Script/SB.ESBFrameLimit
/// Size: 0x01 (1 bytes)
enum class ESBFrameLimit : uint8_t
{
	FrameLimit                                                                       = 0,
	FrameLimit2                                                                      = 1,
	FrameLimit3                                                                      = 2,
	FrameLimit4                                                                      = 3,
	FrameLimit5                                                                      = 4,
	FrameLimit6                                                                      = 5,
	FrameLimit_Unlimited                                                             = 6
};

/// Enum /Script/SB.ESBAspectRatio
/// Size: 0x01 (1 bytes)
enum class ESBAspectRatio : uint8_t
{
	AspectRatio_Auto                                                                 = 0,
	AspectRatio_32                                                                   = 1,
	AspectRatio_21                                                                   = 2,
	AspectRatio_16                                                                   = 3,
	AspectRatio_165                                                                  = 4,
	AspectRatio_4                                                                    = 5,
	AspectRatio_5                                                                    = 6
};

/// Enum /Script/SB.ESBGameUserSettingsQuality
/// Size: 0x01 (1 bytes)
enum class ESBGameUserSettingsQuality : uint8_t
{
	SB_GAMEUSERSETTINGS_OFF                                                          = 0,
	SB_GAMEUSERSETTINGS_LOW                                                          = 1,
	SB_GAMEUSERSETTINGS_MEDIUM                                                       = 2,
	SB_GAMEUSERSETTINGS_HIGH                                                         = 3,
	SB_GAMEUSERSETTINGS_VERYHIGH                                                     = 4,
	SB_GAMEUSERSETTINGS_EXTENSION1                                                   = 5,
	SB_GAMEUSERSETTINGS_EXTENSION2                                                   = 6,
	SB_GAMEUSERSETTINGS_EXTENSION3                                                   = 7
};

/// Enum /Script/SB.ESBEventContentsType
/// Size: 0x01 (1 bytes)
enum class ESBEventContentsType : uint8_t
{
	Summer                                                                           = 0,
	Christmas                                                                        = 1,
	Max                                                                              = 2
};

/// Enum /Script/SB.ESBPhotoModeNotifyType
/// Size: 0x01 (1 bytes)
enum class ESBPhotoModeNotifyType : uint8_t
{
	ESBPhotoModeNotifyType_FailSweepCheck                                            = 0,
	ESBPhotoModeNotifyType_AutoFocus                                                 = 1,
	ESBPhotoModeNotifyType_Cancel                                                    = 2,
	ESBPhotoModeNotifyType_AutoFocus_OutsideCameraFrustum                            = 3
};

/// Enum /Script/SB.ESBPhotoModeInteractionAllowType
/// Size: 0x01 (1 bytes)
enum class ESBPhotoModeInteractionAllowType : uint8_t
{
	EnableFree                                                                       = 0,
	EnableCutScene                                                                   = 1,
	Disable                                                                          = 2
};

/// Enum /Script/SB.ESBInputActionItemUseType
/// Size: 0x01 (1 bytes)
enum class ESBInputActionItemUseType : uint8_t
{
	None                                                                             = 0,
	Heal                                                                             = 1,
	Util                                                                             = 2,
	Bullet                                                                           = 3
};

/// Enum /Script/SB.ESBKeyCombinationType
/// Size: 0x01 (1 bytes)
enum class ESBKeyCombinationType : uint8_t
{
	None                                                                             = 0,
	Shift                                                                            = 1,
	Ctrl                                                                             = 2,
	Alt                                                                              = 3,
	Cmd                                                                              = 4
};

/// Enum /Script/SB.ESBKeyMappingPresetType
/// Size: 0x01 (1 bytes)
enum class ESBKeyMappingPresetType : uint8_t
{
	Default                                                                          = 0,
	AzertyKeyboard                                                                   = 1
};

/// Enum /Script/SB.ESBKeyMappingWarningType
/// Size: 0x01 (1 bytes)
enum class ESBKeyMappingWarningType : uint8_t
{
	None                                                                             = 0,
	DuplicateWarning                                                                 = 1,
	EssentialWarning                                                                 = 2,
	RecommendCaution                                                                 = 3
};

/// Enum /Script/SB.ESBKeyMappingAxisScaleType
/// Size: 0x01 (1 bytes)
enum class ESBKeyMappingAxisScaleType : uint8_t
{
	Positive                                                                         = 0,
	Negative                                                                         = 1
};

/// Enum /Script/SB.ESBKeyMappingChannelType
/// Size: 0x01 (1 bytes)
enum class ESBKeyMappingChannelType : uint8_t
{
	Main                                                                             = 0,
	Sub                                                                              = 1
};

/// Enum /Script/SB.ESBKeyMappingStrengthType
/// Size: 0x01 (1 bytes)
enum class ESBKeyMappingStrengthType : uint8_t
{
	Free                                                                             = 0,
	Recommend                                                                        = 1,
	Essential                                                                        = 2,
	UnmappableAll                                                                    = 3
};

/// Enum /Script/SB.ESBBossChallengePresetType
/// Size: 0x01 (1 bytes)
enum class ESBBossChallengePresetType : uint8_t
{
	LastSaveSlot                                                                     = 0,
	Maximum                                                                          = 1,
	MaximumWithNewGamePlus                                                           = 2,
	Minimum                                                                          = 3
};

/// Enum /Script/SB.ESBBossChallengePlayerSettingType
/// Size: 0x01 (1 bytes)
enum class ESBBossChallengePlayerSettingType : uint8_t
{
	None                                                                             = 0,
	LastPlaySlot                                                                     = 1,
	PresetMaximum                                                                    = 2,
	PresetMaximumNGPlus                                                              = 3,
	PresetMinimum                                                                    = 4
};

/// Enum /Script/SB.ESBBossChallengeStep
/// Size: 0x01 (1 bytes)
enum class ESBBossChallengeStep : uint8_t
{
	None                                                                             = 0,
	RequestEnter                                                                     = 1,
	EnterComplete                                                                    = 2,
	FinishStep                                                                       = 3,
	CompleteFinishStep                                                               = 4
};

/// Enum /Script/SB.ESBEventGiftType
/// Size: 0x01 (1 bytes)
enum class ESBEventGiftType : uint8_t
{
	None                                                                             = 0,
	BossChallenge                                                                    = 1,
	Event                                                                            = 2,
	FusionEndingGift                                                                 = 3,
	PSN                                                                              = 4
};

/// Enum /Script/SB.ESBNGPlusAlreadySetupType
/// Size: 0x01 (1 bytes)
enum class ESBNGPlusAlreadySetupType : uint8_t
{
	None                                                                             = 0,
	Env                                                                              = 1,
	Trigger                                                                          = 2
};

/// Enum /Script/SB.ESBGameProgressRecordFilter
/// Size: 0x01 (1 bytes)
enum class ESBGameProgressRecordFilter : uint8_t
{
	None                                                                             = 0,
	DifferientZoneEvent                                                              = 1
};

/// Enum /Script/SB.ESBFSR2QualityMode
/// Size: 0x01 (1 bytes)
enum class ESBFSR2QualityMode : uint8_t
{
	SBFSR2QualityMode_None                                                           = 0,
	SBFSR2QualityMode_Quality                                                        = 1,
	SBFSR2QualityMode_Balanced                                                       = 2,
	SBFSR2QualityMode_Performance                                                    = 3,
	SBFSR2QualityMode_UltraPerformance                                               = 4
};

/// Enum /Script/SB.ESBGameEndingType
/// Size: 0x01 (1 bytes)
enum class ESBGameEndingType : uint8_t
{
	None                                                                             = 0,
	KillElder                                                                        = 1,
	KillLily                                                                         = 2,
	SaveLily                                                                         = 3
};

/// Enum /Script/SB.ESBMeshClipingApplyType
/// Size: 0x01 (1 bytes)
enum class ESBMeshClipingApplyType : uint8_t
{
	None                                                                             = 0,
	Ponytail                                                                         = 1,
	Body                                                                             = 2,
	All                                                                              = 3
};

/// Enum /Script/SB.ESBClipMatParamIndex
/// Size: 0x01 (1 bytes)
enum class ESBClipMatParamIndex : uint8_t
{
	Location                                                                         = 0,
	Bounds                                                                           = 1,
	BasisX                                                                           = 2,
	BasisY                                                                           = 3,
	BasisZ                                                                           = 4,
	ExclusivePlaneNormal                                                             = 5,
	ExclusivePlaneOrigin                                                             = 6,
	Num                                                                              = 7
};

/// Enum /Script/SB.ESBQuestSymbolUIType
/// Size: 0x01 (1 bytes)
enum class ESBQuestSymbolUIType : uint8_t
{
	None                                                                             = 0,
	Epic                                                                             = 1,
	Sub                                                                              = 2,
	Request                                                                          = 3
};

/// Enum /Script/SB.ESBDebugHistoryLogType
/// Size: 0x01 (1 bytes)
enum class ESBDebugHistoryLogType : uint8_t
{
	ESBDebugHistoryType_None                                                         = 0,
	ESBDebugHistoryType_Enable                                                       = 1,
	ESBDebugHistoryType_State                                                        = 2,
	ESBDebugHistoryType_EnvActiveState                                               = 3,
	ESBDebugHistoryType_TriggerDoingCount                                            = 4,
	ESBDebugHistoryType_TriggerDoingEvent                                            = 5,
	ESBDebugHistoryType_Reset                                                        = 6,
	ESBDebugHistoryType_LefeState                                                    = 7,
	ESBDebugHistoryType_Num                                                          = 8
};

/// Enum /Script/SB.ESBAcquisitionSkillVisibleCondition
/// Size: 0x01 (1 bytes)
enum class ESBAcquisitionSkillVisibleCondition : uint8_t
{
	AlwaysShow                                                                       = 0,
	OnlyNewGamePlus                                                                  = 1
};

/// Enum /Script/SB.ESBPhotoModeShowHiddenFlag
/// Size: 0x01 (1 bytes)
enum class ESBPhotoModeShowHiddenFlag : uint8_t
{
	None                                                                             = 0,
	ShowHiddenOnPoseChange                                                           = 1
};

/// Enum /Script/SB.ESBPhotoModeInputDirection
/// Size: 0x01 (1 bytes)
enum class ESBPhotoModeInputDirection : uint8_t
{
	None                                                                             = 0,
	FB                                                                               = 1,
	LR                                                                               = 2,
	Up                                                                               = 3,
	Down                                                                             = 4,
	Turn                                                                             = 5,
	Look                                                                             = 6,
	MouseX                                                                           = 7,
	MouseY                                                                           = 8,
	Light_F                                                                          = 9,
	Light_B                                                                          = 10,
	Light_LR                                                                         = 11,
	Light_Up                                                                         = 12,
	Light_Down                                                                       = 13,
	Selfie_Arm_UD                                                                    = 14,
	Selfie_Char_LR                                                                   = 15,
	Selfie_CharHead_LR                                                               = 16,
	Selfie_Cam_LR                                                                    = 17,
	Selfie_CharHead_UD                                                               = 18,
	Selfie_Cam_UD                                                                    = 19,
	Max                                                                              = 20
};

/// Enum /Script/SB.ESBPhotoModeSelfieDirection
/// Size: 0x01 (1 bytes)
enum class ESBPhotoModeSelfieDirection : uint8_t
{
	ESBPhotoModeSelfieDirection_None                                                 = 0,
	ESBPhotoModeSelfieDirection_Left                                                 = 1,
	ESBPhotoModeSelfieDirection_Right                                                = 2
};

/// Enum /Script/SB.ESBPhotoModeOptionUISlotType
/// Size: 0x01 (1 bytes)
enum class ESBPhotoModeOptionUISlotType : uint8_t
{
	None                                                                             = 0,
	SliderSlot                                                                       = 1,
	RollingSlot                                                                      = 2,
	ButtonSlot                                                                       = 3,
	Max                                                                              = 4
};

/// Enum /Script/SB.ESBPhotoModeCameraType
/// Size: 0x01 (1 bytes)
enum class ESBPhotoModeCameraType : uint8_t
{
	None                                                                             = 0,
	FreeCamera                                                                       = 1,
	SelfieCamera                                                                     = 2,
	CutSceneCamera                                                                   = 3,
	Max                                                                              = 4
};

/// Enum /Script/SB.ESBPhotoModeOptionType
/// Size: 0x01 (1 bytes)
enum class ESBPhotoModeOptionType : uint8_t
{
	None                                                                             = 0,
	CameraRoll                                                                       = 1,
	CameraFOV                                                                        = 2,
	Dither                                                                           = 3,
	DOFOverride                                                                      = 4,
	DOFVisualize                                                                     = 5,
	DOFFocalDistance                                                                 = 6,
	DOFAperture                                                                      = 7,
	ImageHDR                                                                         = 8,
	ImageExposure                                                                    = 9,
	ImageContrast                                                                    = 10,
	ImageColorSaturation                                                             = 11,
	ImageHue                                                                         = 12,
	ImageHueIntensity                                                                = 13,
	ImageBrightness                                                                  = 14,
	ImageBloomIntensity                                                              = 15,
	ImageTonemapperSharpen                                                           = 16,
	ImageFilter                                                                      = 17,
	ImageFilterIntensity                                                             = 18,
	ImageFilterMaskEVE                                                               = 19,
	ImageFilterMaskNPC                                                               = 20,
	ImageFilterMaskMonster                                                           = 21,
	ImageFilterZoomBlur                                                              = 22,
	ImageFilterZoomBlurIntensity                                                     = 23,
	ImageMotionBlur                                                                  = 24,
	ImageMotionBlurScale                                                             = 25,
	ImageChromaticAberration                                                         = 26,
	ImageFilmGrain                                                                   = 27,
	ImageFilmGrainIntensity                                                          = 28,
	DecoBorder                                                                       = 29,
	DecoCopyright                                                                    = 30,
	DecoLogo1                                                                        = 31,
	DecoLogo2                                                                        = 32,
	DecoLogo3                                                                        = 33,
	DecoLogo4                                                                        = 34,
	DecoLogo5                                                                        = 35,
	DecoVignette                                                                     = 36,
	CharacterEveFacial                                                               = 37,
	CharacterLilyFacial                                                              = 38,
	CharacterAdamFacial                                                              = 39,
	CharacterEvePose                                                                 = 40,
	CharacterLilyPose                                                                = 41,
	CharacterAdamPose                                                                = 42,
	CharacterEVE                                                                     = 43,
	CharacterDrone                                                                   = 44,
	CharacterLily                                                                    = 45,
	CharacterAdam                                                                    = 46,
	CharacterExtra                                                                   = 47,
	CharacterDroneLight                                                              = 48,
	CharacterDroneLightIntensity                                                     = 49,
	CharacterEVELookCamera                                                           = 50,
	CharacterAdamLookCamera                                                          = 51,
	CharacterLilyLookCamera                                                          = 52,
	LightSelect                                                                      = 53,
	LightActive                                                                      = 54,
	LightChannels                                                                    = 55,
	LightShadow                                                                      = 56,
	LightIntensity                                                                   = 57,
	LightAttenuationRadius                                                           = 58,
	LightPresetColor                                                                 = 59,
	LightCustomColorH                                                                = 60,
	LightCustomColorS                                                                = 61,
	LightCustomColorL                                                                = 62,
	LightVolumetricScatteringIntensity                                               = 63,
	LightWorldLightIntensity                                                         = 64,
	EyeControl                                                                       = 65,
	EyeControl_Target                                                                = 66,
	Preset_Save                                                                      = 67,
	Preset_Load                                                                      = 68,
	Max                                                                              = 69
};

/// Enum /Script/SB.ESBPhotoModeFacialAnimType
/// Size: 0x01 (1 bytes)
enum class ESBPhotoModeFacialAnimType : uint8_t
{
	ESBPhotoModeFacialAnim_Default                                                   = 0,
	ESBPhotoModeFacialAnim_Peace                                                     = 1,
	ESBPhotoModeFacialAnim_Smile                                                     = 2,
	ESBPhotoModeFacialAnim_Battle                                                    = 3,
	ESBPhotoModeFacialAnim_Groggy                                                    = 4,
	ESBPhotoModeFacialAnim_Think                                                     = 5,
	ESBPhotoModeFacialAnim_Chat                                                      = 6
};

/// Enum /Script/SB.ESBIdleAnimType
/// Size: 0x01 (1 bytes)
enum class ESBIdleAnimType : uint8_t
{
	ESBIdleAnim_Peace                                                                = 0,
	ESBIdleAnim_Battle                                                               = 1,
	ESBIdleAnim_Groggy                                                               = 2,
	ESBIdleAnim_Dead                                                                 = 3,
	ESBIdleAnim_Custom0                                                              = 4,
	ESBIdleAnim_Custom1                                                              = 5
};

/// Enum /Script/SB.ESBManualType
/// Size: 0x01 (1 bytes)
enum class ESBManualType : uint8_t
{
	None                                                                             = 0,
	Combat                                                                           = 1,
	Skill                                                                            = 2,
	Ranged                                                                           = 3,
	Item                                                                             = 4,
	Expedition                                                                       = 5,
	Combo                                                                            = 6,
	Max                                                                              = 7
};

/// Enum /Script/SB.ESBGameDifficultyType
/// Size: 0x01 (1 bytes)
enum class ESBGameDifficultyType : uint8_t
{
	NormalMode                                                                       = 0,
	StoryMode                                                                        = 1,
	HardMode                                                                         = 2
};

/// Enum /Script/SB.ESBStopEffectEvent
/// Size: 0x01 (1 bytes)
enum class ESBStopEffectEvent : uint8_t
{
	Force                                                                            = 0,
	OnDead                                                                           = 1,
	OnRevival                                                                        = 2
};

/// Enum /Script/SB.ESBTheaterInteractionLineMarkerType
/// Size: 0x01 (1 bytes)
enum class ESBTheaterInteractionLineMarkerType : uint8_t
{
	ESBTheaterInteractionLineMarker_None                                             = 0,
	ESBTheaterInteractionLineMarker_EpicQuest                                        = 1,
	ESBTheaterInteractionLineMarker_SubQuest                                         = 2,
	ESBTheaterInteractionLineMarker_RequestQuest                                     = 3
};

/// Enum /Script/SB.ESBEffectVolumeResetType
/// Size: 0x01 (1 bytes)
enum class ESBEffectVolumeResetType : uint8_t
{
	ESBEffectVolumeReset_None                                                        = 0,
	ESBEffectVolumeReset_ActorDead                                                   = 1,
	ESBEffectVolumeReset_ChangeEnvState                                              = 2,
	ESBEffectVolumeReset_Trigger                                                     = 3
};

/// Enum /Script/SB.ESBEffectVolumeType
/// Size: 0x01 (1 bytes)
enum class ESBEffectVolumeType : uint8_t
{
	ESBEffectVolume_None                                                             = 0,
	ESBEffectVolume_Trigger                                                          = 1,
	ESBEffectVolume_DeadCounter                                                      = 2
};

/// Enum /Script/SB.ESBTutorialType
/// Size: 0x01 (1 bytes)
enum class ESBTutorialType : uint8_t
{
	On                                                                               = 0,
	Off                                                                              = 1
};

/// Enum /Script/SB.ESBGuideStartType
/// Size: 0x01 (1 bytes)
enum class ESBGuideStartType : uint8_t
{
	None                                                                             = 0,
	BetaGauge                                                                        = 1,
	Aggro                                                                            = 2,
	Battle                                                                           = 3,
	Fishing                                                                          = 4,
	EventMove                                                                        = 5,
	Swimming                                                                         = 6,
	UWSwimming                                                                       = 7,
	SlopeSliding                                                                     = 8,
	Interaction                                                                      = 9,
	Effect                                                                           = 10
};

/// Enum /Script/SB.ESBGuideCompleteType
/// Size: 0x01 (1 bytes)
enum class ESBGuideCompleteType : uint8_t
{
	None                                                                             = 0,
	Command                                                                          = 1,
	SkillActiveStep                                                                  = 2,
	ActorCondition                                                                   = 3,
	EventMove                                                                        = 4,
	Effect                                                                           = 5,
	Scan                                                                             = 6,
	LockOn                                                                           = 7,
	AcquireItem                                                                      = 8,
	Swimming                                                                         = 9,
	UWSwimming                                                                       = 10,
	SlopeSliding                                                                     = 11,
	SlopeJumping                                                                     = 12,
	Fishing                                                                          = 13,
	Interaction                                                                      = 14
};

/// Enum /Script/SB.ESBScanControlOwner
/// Size: 0x01 (1 bytes)
enum class ESBScanControlOwner : uint8_t
{
	None                                                                             = 0,
	Drone                                                                            = 1,
	Studio                                                                           = 2,
	Sequence                                                                         = 3
};

/// Enum /Script/SB.ESBSequencerSubtitleType
/// Size: 0x01 (1 bytes)
enum class ESBSequencerSubtitleType : uint8_t
{
	ShowImmidate                                                                     = 0,
	TypewriteVoice                                                                   = 1,
	TypewriteOnly                                                                    = 2
};

/// Enum /Script/SB.ESBAlbumType
/// Size: 0x01 (1 bytes)
enum class ESBAlbumType : uint8_t
{
	None                                                                             = 0,
	MemoryStick                                                                      = 1,
	Document                                                                         = 2,
	PassCode                                                                         = 3,
	Native                                                                           = 4,
	Fish                                                                             = 5,
	Character                                                                        = 6,
	ETC                                                                              = 7,
	PhotoChallenge                                                                   = 8,
	Nier                                                                             = 9,
	Max                                                                              = 10
};

/// Enum /Script/SB.ESBShopType
/// Size: 0x01 (1 bytes)
enum class ESBShopType : uint8_t
{
	None                                                                             = 0,
	Buy                                                                              = 1,
	Exchange                                                                         = 2,
	Sell                                                                             = 3,
	Max                                                                              = 4
};

/// Enum /Script/SB.ESBEventZoneEventActorControlType
/// Size: 0x01 (1 bytes)
enum class ESBEventZoneEventActorControlType : uint8_t
{
	None                                                                             = 0,
	DestructionTimer                                                                 = 1,
	DisableDestruction                                                               = 2
};

/// Enum /Script/SB.ESBRetryGameStateType
/// Size: 0x01 (1 bytes)
enum class ESBRetryGameStateType : uint8_t
{
	None                                                                             = 0,
	Start                                                                            = 1,
	Cancel                                                                           = 2,
	Finish                                                                           = 3
};

/// Enum /Script/SB.ESBShowSoundOwnerTarget
/// Size: 0x01 (1 bytes)
enum class ESBShowSoundOwnerTarget : uint8_t
{
	Auto                                                                             = 0,
	MainActor                                                                        = 1,
	OtherActor                                                                       = 2
};

/// Enum /Script/SB.ESBShowVibrationTarget
/// Size: 0x01 (1 bytes)
enum class ESBShowVibrationTarget : uint8_t
{
	ShowVibrationTarget_MainActor                                                    = 0,
	ShowVibrationTarget_OtherActor                                                   = 1
};

/// Enum /Script/SB.ESBEquipStatViewerType
/// Size: 0x01 (1 bytes)
enum class ESBEquipStatViewerType : uint8_t
{
	Attack                                                                           = 0,
	Survival                                                                         = 1,
	Ability                                                                          = 2
};

/// Enum /Script/SB.ESBHintType
/// Size: 0x01 (1 bytes)
enum class ESBHintType : uint8_t
{
	Normal                                                                           = 0,
	Disable                                                                          = 1,
	LongTime                                                                         = 2
};

/// Enum /Script/SB.ESBWorldTransitionType
/// Size: 0x01 (1 bytes)
enum class ESBWorldTransitionType : uint8_t
{
	None                                                                             = 0,
	Event                                                                            = 1,
	Tetrapod                                                                         = 2
};

/// Enum /Script/SB.ESBRuleMoveBlockAreaTarget
/// Size: 0x01 (1 bytes)
enum class ESBRuleMoveBlockAreaTarget : uint8_t
{
	SBRuleMoveBlockAreaTarget_All                                                    = 0,
	SBRuleMoveBlockAreaTarget_PCOnly                                                 = 1
};

/// Enum /Script/SB.ESBQuestTaskEventActionType
/// Size: 0x01 (1 bytes)
enum class ESBQuestTaskEventActionType : uint8_t
{
	SBQuestTaskEventAction_None                                                      = 0,
	SBQuestTaskEventAction_NpcSpawn                                                  = 1,
	SBQuestTaskEventAction_NpcDespawn                                                = 2
};

/// Enum /Script/SB.ESBQuestTaskNotifyType
/// Size: 0x01 (1 bytes)
enum class ESBQuestTaskNotifyType : uint8_t
{
	SBQuestTaskNotify_None                                                           = 0,
	SBQuestTaskNotify_Start                                                          = 1,
	SBQuestTaskNotify_Update                                                         = 2,
	SBQuestTaskNotify_Complete                                                       = 3,
	SBQuestTaskNotify_ForceUpdate                                                    = 4
};

/// Enum /Script/SB.ESBScreenEffectType
/// Size: 0x01 (1 bytes)
enum class ESBScreenEffectType : uint8_t
{
	ScreenEffectType_None                                                            = 0,
	ScreenEffectType_DeadZoneAlert                                                   = 1,
	ScreenEffectType_TachyMode                                                       = 2,
	ScreenEffectType_LowHealthAlert                                                  = 3,
	ScreenEffectType_SafetyDistance                                                  = 4,
	ScreenEffectType_FusionMode                                                      = 5,
	ScreenEffectType_TachyFusionMode                                                 = 6
};

/// Enum /Script/SB.ESBGameRuleType
/// Size: 0x01 (1 bytes)
enum class ESBGameRuleType : uint8_t
{
	GameRuleType_None                                                                = 0,
	GameRuleType_MonsterTransform                                                    = 1,
	GameRuleType_NightOperation                                                      = 2
};

/// Enum /Script/SB.ESBInputType
/// Size: 0x01 (1 bytes)
enum class ESBInputType : uint8_t
{
	InputType_MouseKeyboard                                                          = 0,
	InputType_Gamepad                                                                = 1,
	InputType_Gamepad_DualSense                                                      = 2,
	InputType_Unknown                                                                = 3,
	InputType_Max                                                                    = 4
};

/// Enum /Script/SB.ESBSkillActiveStepUIEvent
/// Size: 0x01 (1 bytes)
enum class ESBSkillActiveStepUIEvent : uint8_t
{
	SkillActiveStepUIEvent_None                                                      = 0,
	SkillActiveStepUIEvent_ExecuteEffect                                             = 1
};

/// Enum /Script/SB.ESBUIChargingVisibleType
/// Size: 0x01 (1 bytes)
enum class ESBUIChargingVisibleType : uint8_t
{
	UIChargingVisibleType_None                                                       = 0,
	UIChargingVisibleType_Duration                                                   = 1,
	UIChargingVisibleType_FullCharging                                               = 2
};

/// Enum /Script/SB.ESBPS5AccessibilityTriggerEffect
/// Size: 0x01 (1 bytes)
enum class ESBPS5AccessibilityTriggerEffect : uint8_t
{
	PS5AccessibilityTriggerEffect_Off                                                = 0,
	PS5AccessibilityTriggerEffect_Strong                                             = 1,
	PS5AccessibilityTriggerEffect_Medium                                             = 2,
	PS5AccessibilityTriggerEffect_Weak                                               = 3
};

/// Enum /Script/SB.ESBDualSenseTriggerEffectState
/// Size: 0x01 (1 bytes)
enum class ESBDualSenseTriggerEffectState : uint8_t
{
	DualSenseTriggerEffectState_None                                                 = -2,
	DualSenseTriggerEffectState_Intercepted                                          = -1,
	DualSenseTriggerEffectState_Off                                                  = 0,
	DualSenseTriggerEffectState_FeedbackStandby                                      = 1,
	DualSenseTriggerEffectState_FeedbackActive                                       = 2,
	DualSenseTriggerEffectState_WeaponStandby                                        = 3,
	DualSenseTriggerEffectState_WeaponPulling                                        = 4,
	DualSenseTriggerEffectState_WeaponFired                                          = 5,
	DualSenseTriggerEffectState_VibrationStandby                                     = 6,
	DualSenseTriggerEffectState_VibrationActive                                      = 7
};

/// Enum /Script/SB.ESBDualSenseTriggerEffect
/// Size: 0x01 (1 bytes)
enum class ESBDualSenseTriggerEffect : uint8_t
{
	DualSenseTriggerEffect_None                                                      = 0,
	DualSenseTriggerEffect_Clear                                                     = 1,
	DualSenseTriggerEffect_Feedback                                                  = 2,
	DualSenseTriggerEffect_Weapon                                                    = 3,
	DualSenseTriggerEffect_Vibration                                                 = 4,
	DualSenseTriggerEffect_MultiPositionFeedback                                     = 5,
	DualSenseTriggerEffect_SlopeFeedback                                             = 6,
	DualSenseTriggerEffect_MultiPositionVibration                                    = 7
};

/// Enum /Script/SB.ESBDualSenseTrigger
/// Size: 0x01 (1 bytes)
enum class ESBDualSenseTrigger : uint8_t
{
	DualSenseTrigger_None                                                            = 0,
	DualSenseTrigger_Left                                                            = 1,
	DualSenseTrigger_Right                                                           = 2
};

/// Enum /Script/SB.ESBResourceDebugSubType
/// Size: 0x01 (1 bytes)
enum class ESBResourceDebugSubType : uint8_t
{
	None                                                                             = 0,
	ToolData_Start                                                                   = 1,
	ToolData_EventSpawn                                                              = 2,
	ToolData_EventItem                                                               = 3,
	ToolData_ZoneEnvSpawn                                                            = 4,
	ToolData_ZoneEffectVolume                                                        = 5,
	ToolData_AreaControlVolume                                                       = 6,
	ToolData_ZoneTrigger                                                             = 7,
	ToolData_GuideAction                                                             = 8,
	ToolData_LevelTargetFilter                                                       = 9,
	ToolData_Condition                                                               = 10,
	ToolData_ConditionGroup                                                          = 11,
	ToolData_ZoneEvent                                                               = 12,
	ToolData_EventObjControl                                                         = 13,
	ToolData_EventRequestPathWay                                                     = 14,
	ToolData_ZonePhaseEvent                                                          = 15,
	ToolData_EventEffectVolumeControl                                                = 16,
	ToolData_EventEnvControl                                                         = 17,
	ToolData_EventAreaControlVolumeControl                                           = 18,
	ToolData_EventActorEffect                                                        = 19,
	ToolData_EventGuideAction                                                        = 20,
	ToolData_EventInteractCamp                                                       = 21,
	ToolData_EventItemAction                                                         = 22,
	ToolData_EventQuest                                                              = 23,
	ToolData_EventLevelSeq                                                           = 24,
	ToolData_EventTheater                                                            = 25,
	ToolData_EventUIAction                                                           = 26,
	ToolData_EventZoneWarp                                                           = 27,
	ToolData_End                                                                     = 28,
	DataTable_Start                                                                  = 29,
	DataTable_GamePlayProgressRecord                                                 = 30,
	DataTable_EventEnvControl                                                        = 31,
	DataTable_Achievement                                                            = 32,
	DataTable_QuestTask                                                              = 33,
	DataTable_End                                                                    = 34,
	InteractionGraph_Start                                                           = 35,
	InteractionGraph_ZoneEvent                                                       = 36,
	InteractionGraph_QuestEvent                                                      = 37,
	InteractionGraph_End                                                             = 38,
	Num                                                                              = 39,
	Duration                                                                         = 40
};

/// Enum /Script/SB.ESBResourceDebugMainType
/// Size: 0x01 (1 bytes)
enum class ESBResourceDebugMainType : uint8_t
{
	None                                                                             = 0,
	ToolData                                                                         = 1,
	DataTable                                                                        = 2,
	InteractionGraph                                                                 = 3,
	Num                                                                              = 4
};

/// Enum /Script/SB.ESBGameOptionPuzzleTimeLimitType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionPuzzleTimeLimitType : uint8_t
{
	Normal                                                                           = 0,
	Infinite                                                                         = 1
};

/// Enum /Script/SB.ESBGameOptionReverseLRStickType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionReverseLRStickType : uint8_t
{
	Disable                                                                          = 0,
	Enable                                                                           = 1
};

/// Enum /Script/SB.ESBGameOptionReverseOKCancelType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionReverseOKCancelType : uint8_t
{
	Disable                                                                          = 0,
	Enable                                                                           = 1
};

/// Enum /Script/SB.ESBGameOptionSwipeShortCutType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionSwipeShortCutType : uint8_t
{
	None                                                                             = 0,
	GameMenu                                                                         = 1,
	Scan                                                                             = 2,
	Hint                                                                             = 3,
	PhotoMode                                                                        = 4,
	GameMenuMap                                                                      = 5,
	GameMenuQuestJournal                                                             = 6,
	GameMenuSkill                                                                    = 7,
	GameMenuInventory                                                                = 8
};

/// Enum /Script/SB.ESBGameOptionLockMouseOnWindowType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionLockMouseOnWindowType : uint8_t
{
	Hide                                                                             = 0,
	Show                                                                             = 1
};

/// Enum /Script/SB.ESBGameOptionVisibleSkipUIType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionVisibleSkipUIType : uint8_t
{
	Disable                                                                          = 0,
	Enable                                                                           = 1
};

/// Enum /Script/SB.ESBGameOptionAutoLockOnAfterTPSType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionAutoLockOnAfterTPSType : uint8_t
{
	Enable                                                                           = 0,
	Disable                                                                          = 1
};

/// Enum /Script/SB.ESBGameOptionActionAssistType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionActionAssistType : uint8_t
{
	Disable                                                                          = 0,
	Enable                                                                           = 1
};

/// Enum /Script/SB.ESBGameOptionAudioDeviceType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionAudioDeviceType : uint8_t
{
	Auto                                                                             = 0,
	TV                                                                               = 1,
	Headphone                                                                        = 2
};

/// Enum /Script/SB.ESBGameOptionHighContrastType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionHighContrastType : uint8_t
{
	Off                                                                              = 0,
	Preset1                                                                          = 1,
	Preset2                                                                          = 2,
	Preset3                                                                          = 3
};

/// Enum /Script/SB.ESBGameOptionPonytailLengthType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionPonytailLengthType : uint8_t
{
	ESBGameOptionPonytailLengthType_Long                                             = 0,
	ESBGameOptionPonytailLengthType_Short                                            = 1,
	ESBGameOptionPonytailLengthType_RemovePonyTail                                   = 2
};

/// Enum /Script/SB.ESBGameOptionRecordPopupType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionRecordPopupType : uint8_t
{
	ESBGameOptionRecordPopupType_On                                                  = 0,
	ESBGameOptionRecordPopupType_Off                                                 = 1
};

/// Enum /Script/SB.ESBGameOptionTutorialType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionTutorialType : uint8_t
{
	ESBGameOptionTutorialType_On                                                     = 0,
	ESBGameOptionTutorialType_Off                                                    = 1
};

/// Enum /Script/SB.ESBGameOptionColorBlindType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionColorBlindType : uint8_t
{
	Normal                                                                           = 0,
	Green                                                                            = 1,
	Red                                                                              = 2,
	Blue                                                                             = 3
};

/// Enum /Script/SB.ESBGameOptionHintType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionHintType : uint8_t
{
	ESBGameOptionHintType_Normal                                                     = 0,
	ESBGameOptionHintType_Disable                                                    = 1,
	ESBGameOptionHintType_LongTime                                                   = 2
};

/// Enum /Script/SB.ESBGameOptionAdaptiveTriggerType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionAdaptiveTriggerType : uint8_t
{
	ExperienceFirst                                                                  = 0,
	FunctionFirst                                                                    = 1,
	Disable                                                                          = 2
};

/// Enum /Script/SB.ESBGameOptionCompassType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionCompassType : uint8_t
{
	Disable                                                                          = 0,
	Enable                                                                           = 1
};

/// Enum /Script/SB.ESBGameOptionHUDCenterDotType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionHUDCenterDotType : uint8_t
{
	Enable                                                                           = 0,
	Disable                                                                          = 1
};

/// Enum /Script/SB.ESBGameOptionMouseLockOnMove
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionMouseLockOnMove : uint8_t
{
	Enable                                                                           = 0,
	Disable                                                                          = 1
};

/// Enum /Script/SB.ESBGameOptionFishingSystem
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionFishingSystem : uint8_t
{
	PrecisionTrigger                                                                 = 0,
	Timing                                                                           = 1
};

/// Enum /Script/SB.ESBGameOptionFishingAssistType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionFishingAssistType : uint8_t
{
	Enable                                                                           = 0,
	Disable                                                                          = 1
};

/// Enum /Script/SB.ESBGameOptionQTEForceSuccessType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionQTEForceSuccessType : uint8_t
{
	Enable                                                                           = 0,
	Disable                                                                          = 1
};

/// Enum /Script/SB.ESBGameOptionItemAutoInteractionType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionItemAutoInteractionType : uint8_t
{
	Enable                                                                           = 0,
	Disable                                                                          = 1
};

/// Enum /Script/SB.ESBGameOptionHUDShowType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionHUDShowType : uint8_t
{
	Default                                                                          = 0,
	AlwaysBattle                                                                     = 1,
	AlwaysPeace                                                                      = 2
};

/// Enum /Script/SB.ESBGameOptionSubtitleAuthorType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionSubtitleAuthorType : uint8_t
{
	Show                                                                             = 0,
	Hide                                                                             = 1
};

/// Enum /Script/SB.ESBGameOptionHUDSizeType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionHUDSizeType : uint8_t
{
	Large                                                                            = 0,
	Medium                                                                           = 1,
	Small                                                                            = 2
};

/// Enum /Script/SB.ESBGameOptionSubtitleBGType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionSubtitleBGType : uint8_t
{
	Hide                                                                             = 0,
	Translucent                                                                      = 1,
	Opacity                                                                          = 2
};

/// Enum /Script/SB.ESBGameOptionSubtitleSizeType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionSubtitleSizeType : uint8_t
{
	Large                                                                            = 0,
	Medium                                                                           = 1,
	Small                                                                            = 2
};

/// Enum /Script/SB.ESBGameOptionSubtitleVisibleType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionSubtitleVisibleType : uint8_t
{
	Enable                                                                           = 0,
	Disable                                                                          = 1
};

/// Enum /Script/SB.ESBGameOptionCommonToggleDisableType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionCommonToggleDisableType : uint8_t
{
	Disable                                                                          = 0,
	Enable                                                                           = 1
};

/// Enum /Script/SB.ESBGameOptionCommonToggleEnableType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionCommonToggleEnableType : uint8_t
{
	Enable                                                                           = 0,
	Disable                                                                          = 1
};

/// Enum /Script/SB.ESBGameOptionDifficultyType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionDifficultyType : uint8_t
{
	NormalMode                                                                       = 0,
	StoryMode                                                                        = 1
};

/// Enum /Script/SB.ESBGameOptionType
/// Size: 0x01 (1 bytes)
enum class ESBGameOptionType : uint8_t
{
	None                                                                             = 0,
	Version                                                                          = 1,
	Display_Resolution                                                               = 2,
	Display_AspectRatio                                                              = 3,
	Display_ScreenType                                                               = 4,
	Display_VSync                                                                    = 5,
	Display_FrameLimit                                                               = 6,
	Display_MonitorSwitch                                                            = 7,
	Display_Gamma                                                                    = 8,
	Display_HDR                                                                      = 9,
	Display_HDRBrightness                                                            = 10,
	Display_HDRContrast                                                              = 11,
	Display_HDRClampMin                                                              = 12,
	Display_HDRClampMax                                                              = 13,
	Display_HDRAdditionalMinLuminance                                                = 14,
	Display_HDRAdditionalMaxLuminance                                                = 15,
	Display_HDRUILevel                                                               = 16,
	Display_GraphicMode                                                              = 17,
	Display_GraphicPreset                                                            = 18,
	Display_GraphicEnviromentObjectDetail                                            = 19,
	Display_GraphicCharacterObjectDetail                                             = 20,
	Display_GraphicEnviromentTextures                                                = 21,
	Display_GraphicCharacterTextures                                                 = 22,
	Display_GraphicAnisotropicFiltering                                              = 23,
	Display_GraphicVolumetricFog                                                     = 24,
	Display_GraphicShadowQuality                                                     = 25,
	Display_GraphicEffectQuality                                                     = 26,
	Display_GraphicEnvironmentQuality                                                = 27,
	Display_GraphicLighting                                                          = 28,
	Display_GraphicFoliageQuality                                                    = 29,
	Display_GraphicAmbientOcclusion                                                  = 30,
	Display_GraphicDepthOfField                                                      = 31,
	Display_GraphicScreenSpaceReflection                                             = 32,
	Display_GraphicAntiAliasing                                                      = 33,
	Display_GraphicResolutionScale                                                   = 34,
	Display_GraphicResolutionScalingType                                             = 35,
	Display_GraphicSharpen                                                           = 36,
	Display_GraphicSharpen_DLSS                                                      = 37,
	Display_GraphicSharpen_FSR3                                                      = 38,
	Display_GraphicNvidiaDLSS                                                        = 39,
	Display_GraphicNvidiaFrameGeneration                                             = 40,
	Display_GraphicNvidiaReflexLowLatency                                            = 41,
	Display_GraphicAmdFSR3                                                           = 42,
	Display_GraphicAmdFrameInterpolation                                             = 43,
	Display_GraphicIntelXeSS                                                         = 44,
	Display_GraphicAnimationQuality                                                  = 45,
	Display_GraphicCharacterViewDistance                                             = 46,
	Display_GraphicEnviromentObjectViewDistance                                      = 47,
	Display_HDDMode                                                                  = 48,
	Display_SubtitleVisible                                                          = 49,
	Display_SubtitleSize                                                             = 50,
	Display_SubtitleBG                                                               = 51,
	Display_SubtitleAuthor                                                           = 52,
	Display_HUDSize                                                                  = 53,
	Display_HUDBG                                                                    = 54,
	Display_HUDShow                                                                  = 55,
	Display_Compass                                                                  = 56,
	Display_AntiAliasingQuality                                                      = 57,
	Display_ResolutionQuality                                                        = 58,
	Display_FilmGrain                                                                = 59,
	Display_ColorFringe                                                              = 60,
	Display_HFR                                                                      = 61,
	Display_HUDAspectRatio                                                           = 62,
	Display_LockMouseOnWindow                                                        = 63,
	Localize_Language                                                                = 64,
	Localize_Voice                                                                   = 65,
	Sound_MasterVolume                                                               = 66,
	Sound_BGMVolume                                                                  = 67,
	Sound_DialogVolume                                                               = 68,
	Sound_SEVolume                                                                   = 69,
	Sound_HapticVolume                                                               = 70,
	Sound_AudioDeviceType                                                            = 71,
	Sound_ControllerSpeaker                                                          = 72,
	Sound_MuteWhenUnfocus                                                            = 73,
	Develop_RecordMode                                                               = 74,
	Develop_MinimizeUI                                                               = 75,
	Develop_NetworkPlay                                                              = 76,
	Develop_JiraAuthorize                                                            = 77,
	GamePlay_Difficulty                                                              = 78,
	GamePlay_Hint                                                                    = 79,
	GamePlay_Restart                                                                 = 80,
	GamePlay_NightOperationGiveUp                                                    = 81,
	GamePlay_Tutorial                                                                = 82,
	GamePlay_RecordPopup                                                             = 83,
	GamePlay_PonytailLength                                                          = 84,
	GamePlay_ActionAssist                                                            = 85,
	GamePlay_Demo_TrialCleared                                                       = 86,
	GamePlay_Demo_UseBossChallengeMessagePopup                                       = 87,
	GamePlay_ReachEnding                                                             = 88,
	GamePlay_NoticeReachEnding                                                       = 89,
	GamePlay_VisibleSkipUI                                                           = 90,
	GamePlay_EventContents                                                           = 91,
	GamePlay_DLCContents                                                             = 92,
	Accessibility_ItemAutoInteraction                                                = 93,
	Accessibility_MotionBlurScale                                                    = 94,
	Accessibility_QTEForceSuccess                                                    = 95,
	Accessibility_HUDCenterDot                                                       = 96,
	Accessibility_ColorBlind                                                         = 97,
	Accessibility_ColorBlindScale                                                    = 98,
	Accessibility_HighContrast                                                       = 99,
	Accessibility_HighContrastOnOff                                                  = 100,
	Accessibility_FishingAssist                                                      = 101,
	Accessibility_PuzzleTimeLimit                                                    = 102,
	Accessibility_ItemEquipHold                                                      = 103,
	Accessibility_EasyPlatformAction                                                 = 104,
	Accessibility_HUDViewStatValue                                                   = 105,
	Accessibility_MotionSicknessPreset                                               = 106,
	Accessibility_MotorPreset                                                        = 107,
	Accessibility_VisualPreset                                                       = 108,
	Accessibility_SoundPreset                                                        = 109,
	Interface_UMPCMode                                                               = 110,
	CameraNormalSensitivity_Horizental                                               = 111,
	CameraNormalSensitivity_Vertical                                                 = 112,
	CameraTPSSensitivity_Horizental                                                  = 113,
	CameraTPSSensitivity_Vertical                                                    = 114,
	CameraHorizentalInvert                                                           = 115,
	CameraVerticalnvert                                                              = 116,
	CameraAutoRotate                                                                 = 117,
	CameraAutoRotate_Mouse                                                           = 118,
	AdaptiveTrigger                                                                  = 119,
	Control_TPSAimSlowDownAdditiveScale                                              = 120,
	Control_TPSAimSlowDownAdditiveScale_Mouse                                        = 121,
	Control_AutoLockOn                                                               = 122,
	Control_AutoLockOn_Mouse                                                         = 123,
	Control_AutoLockOnAfterTPS                                                       = 124,
	Control_AutoLockOnAfterTPS_Mouse                                                 = 125,
	Control_SwipeShortCutUp                                                          = 126,
	Control_SwipeShortCutDown                                                        = 127,
	Control_SwipeShortCutLeft                                                        = 128,
	Control_SwipeShortCutRight                                                       = 129,
	Control_ReverseOKCancel                                                          = 130,
	Control_ReverseLRStick                                                           = 131,
	Control_WalkKeyInputType_Pad                                                     = 132,
	Control_TPSKeyInputType_Pad                                                      = 133,
	Control_WalkKeyInputType_Mouse                                                   = 134,
	Control_TPSKeyInputType_Mouse                                                    = 135,
	Control_ControllerSpeakerVolume                                                  = 136,
	Control_FishingSystem                                                            = 137,
	Control_RangeModeAimAlign                                                        = 138,
	Control_RangeModeAimAlign_Mouse                                                  = 139,
	Control_RangeModeShotCorrection                                                  = 140,
	Control_RangeModeShotCorrection_Mouse                                            = 141,
	Control_MouseLockOnMove                                                          = 142,
	Control_LockOnMoveSensitivity                                                    = 143,
	Control_KeyMapping                                                               = 144,
	CameraShake_Intensity                                                            = 145,
	Game_Quit                                                                        = 146,
	Game_ApplicationQuit                                                             = 147,
	PhotoMode_EnterPhotoMode                                                         = 148,
	GlobalData_NoticeReward_1_003                                                    = 149,
	GlobalData_NoticeBossChallengeReward                                             = 150,
	GlobalData_NoticeUnlockBossChallenge                                             = 151,
	GlobalData_NoticeUnlockArtBook                                                   = 152,
	GlobalData_NoticeFusionEnding                                                    = 153,
	GlobalData_NoticeInAppPurchase                                                   = 154,
	GlobalData_NoticeSteamInput                                                      = 155,
	GlobalData_NoticeLaunchingReward                                                 = 156,
	GlobalData_ReachFusionEnding                                                     = 157,
	GlobalData_MigrateFlag_1_008                                                     = 158,
	GlobalData_CanNoticeScreenSkip                                                   = 159,
	GlobalData_NeedInitialSetup                                                      = 160,
	GlobalData_NeedInitialContentsSetup                                              = 161,
	GlobalData_PSNAccount                                                            = 162,
	GlobalData_PersonalInformation                                                   = 163,
	MouseCameraNormalSensitivity_Horizental                                          = 164,
	MouseCameraNormalSensitivity_Vertical                                            = 165,
	MouseCameraTPSSensitivity_Horizental                                             = 166,
	MouseCameraTPSSensitivity_Vertical                                               = 167,
	MouseCameraHorizentalInvert                                                      = 168,
	MouseCameraVerticalnvert                                                         = 169,
	Num                                                                              = 170
};

/// Enum /Script/SB.ESBConditionResultVisibleType
/// Size: 0x01 (1 bytes)
enum class ESBConditionResultVisibleType : uint8_t
{
	None                                                                             = 0,
	IsVisibility                                                                     = 1,
	IsEnable                                                                         = 2
};

/// Enum /Script/SB.ESBTheaterInteractionSelectType
/// Size: 0x01 (1 bytes)
enum class ESBTheaterInteractionSelectType : uint8_t
{
	None                                                                             = 0,
	Show                                                                             = 1,
	Lock                                                                             = 2,
	Hide                                                                             = 3
};

/// Enum /Script/SB.ESBTheaterInteractionDesignType
/// Size: 0x01 (1 bytes)
enum class ESBTheaterInteractionDesignType : uint8_t
{
	None                                                                             = 0,
	Select                                                                           = 1,
	YesNo                                                                            = 2,
	AdamFusion                                                                       = 3
};

/// Enum /Script/SB.ESBFixedRotationAxisType
/// Size: 0x01 (1 bytes)
enum class ESBFixedRotationAxisType : uint8_t
{
	ESBFixedRotAxis_None                                                             = 0,
	ESBFixedRotAxis_Yaw                                                              = 1,
	ESBFixedRotAxis_Pitch                                                            = 2,
	ESBFixedRotAxis_Roll                                                             = 3,
	ESBFixedRotAxis_LookAt                                                           = 4
};

/// Enum /Script/SB.ESBMetaAIEventType
/// Size: 0x01 (1 bytes)
enum class ESBMetaAIEventType : uint8_t
{
	SpecialBehavior                                                                  = 0,
	ForceThink                                                                       = 1,
	AddTag                                                                           = 2
};

/// Enum /Script/SB.ESBDebugViewerDataCategory
/// Size: 0x01 (1 bytes)
enum class ESBDebugViewerDataCategory : uint8_t
{
	Object                                                                           = 0,
	Instance                                                                         = 1,
	Property                                                                         = 2
};

/// Enum /Script/SB.ESBDebugDataState
/// Size: 0x01 (1 bytes)
enum class ESBDebugDataState : uint8_t
{
	None                                                                             = 0,
	Normal                                                                           = 1,
	Warning                                                                          = 2,
	Critical                                                                         = 3
};

/// Enum /Script/SB.ESBDebugData
/// Size: 0x01 (1 bytes)
enum class ESBDebugData : uint8_t
{
	Character                                                                        = 0,
	ZoneEnv                                                                          = 1,
	ZoneTrigger                                                                      = 2,
	ZoneEventActor                                                                   = 3,
	ZoneItem                                                                         = 4,
	AreaControlVolume                                                                = 5,
	LevelStreaming                                                                   = 6,
	Trophy                                                                           = 7,
	Log                                                                              = 8
};

/// Enum /Script/SB.ESBSignificanceLevel
/// Size: 0x01 (1 bytes)
enum class ESBSignificanceLevel : uint8_t
{
	VeryLow                                                                          = 0,
	Low                                                                              = 1,
	Medium                                                                           = 2,
	High                                                                             = 3,
	VeryHigh                                                                         = 4
};

/// Enum /Script/SB.ESBMetaAIBehaviorStance
/// Size: 0x01 (1 bytes)
enum class ESBMetaAIBehaviorStance : uint8_t
{
	Default                                                                          = 0,
	Stand                                                                            = 1,
	Sit                                                                              = 2,
	Crouch                                                                           = 3,
	Flop                                                                             = 4,
	Silence                                                                          = 5,
	RailLean                                                                         = 6,
	WallLean                                                                         = 7,
	Sing                                                                             = 8
};

/// Enum /Script/SB.ESBMetaAILookAtType
/// Size: 0x01 (1 bytes)
enum class ESBMetaAILookAtType : uint8_t
{
	None                                                                             = 0,
	Ignore                                                                           = 1,
	Once                                                                             = 2,
	Always                                                                           = 3
};

/// Enum /Script/SB.ESBAIWorldNodeType
/// Size: 0x01 (1 bytes)
enum class ESBAIWorldNodeType : uint8_t
{
	Road                                                                             = 0,
	Behavior                                                                         = 1,
	BehaviorPosition                                                                 = 2,
	SubBehavior                                                                      = 3,
	InteractionPosition                                                              = 4,
	Root_BehaviorPosition                                                            = 5,
	Root_SubBehavior                                                                 = 6
};

/// Enum /Script/SB.ESBMetaAIBehavior
/// Size: 0x01 (1 bytes)
enum class ESBMetaAIBehavior : uint8_t
{
	None                                                                             = 0,
	Wait                                                                             = 1,
	Walk                                                                             = 2,
	Behavior                                                                         = 3,
	SpecialBehavior                                                                  = 4,
	InteractionWithPlayer                                                            = 5,
	Follow                                                                           = 6,
	ReadyInteractionGraph                                                            = 7,
	HideAndSeek                                                                      = 8,
	HideAndSeekWait                                                                  = 9
};

/// Enum /Script/SB.ESBMetaAIThink
/// Size: 0x01 (1 bytes)
enum class ESBMetaAIThink : uint8_t
{
	None                                                                             = 0,
	MoveAround                                                                       = 1,
	FollowGroupLeader                                                                = 2,
	Behavior                                                                         = 3,
	SpecialBehavior                                                                  = 4,
	HideAndSeek                                                                      = 5
};

/// Enum /Script/SB.ESBJob
/// Size: 0x01 (1 bytes)
enum class ESBJob : uint8_t
{
	None                                                                             = 0,
	Citizen                                                                          = 1,
	Guard                                                                            = 2,
	Engineer                                                                         = 3,
	Scavenger                                                                        = 4,
	Merchant                                                                         = 5
};

/// Enum /Script/SB.ESBShowSESoundAttachType
/// Size: 0x01 (1 bytes)
enum class ESBShowSESoundAttachType : uint8_t
{
	SESoundSetTarget                                                                 = 0,
	AttachProperty                                                                   = 1
};

/// Enum /Script/SB.ESBShowCharacterParticleTarget
/// Size: 0x01 (1 bytes)
enum class ESBShowCharacterParticleTarget : uint8_t
{
	ShowCharParticleTarget_MainActor                                                 = 0,
	ShowCharParticleTarget_OtherActor                                                = 1
};

/// Enum /Script/SB.ESBConditionItemCheckRangeType
/// Size: 0x01 (1 bytes)
enum class ESBConditionItemCheckRangeType : uint8_t
{
	Inven                                                                            = 0,
	InvenZone                                                                        = 1,
	InvenZoneWorld                                                                   = 2
};

/// Enum /Script/SB.ESBWorldGlobalValueType
/// Size: 0x01 (1 bytes)
enum class ESBWorldGlobalValueType : uint8_t
{
	None                                                                             = 0,
	DitherWeight                                                                     = 1,
	MotinBlurScale                                                                   = 2,
	Max                                                                              = 3
};

/// Enum /Script/SB.ESBWorldEnvCounterType
/// Size: 0x01 (1 bytes)
enum class ESBWorldEnvCounterType : uint8_t
{
	None                                                                             = 0,
	DitherDisable                                                                    = 1,
	VolumetricRenderTargetDisable                                                    = 2,
	MouseCursorVisible                                                               = 3,
	PostProcessingDisable                                                            = 4,
	MouseCursorVisibleWhenKeyboardInput                                              = 5,
	Max                                                                              = 6
};

/// Enum /Script/SB.ESBFishingBobberState
/// Size: 0x01 (1 bytes)
enum class ESBFishingBobberState : uint8_t
{
	None                                                                             = 0,
	Casting                                                                          = 1,
	Waiting                                                                          = 2,
	Touch                                                                            = 3,
	Bite                                                                             = 4,
	Fighting                                                                         = 5,
	RunAway                                                                          = 6,
	Pulling                                                                          = 7,
	FinalPulling                                                                     = 8,
	LiftUpReady                                                                      = 9,
	LiftUp                                                                           = 10
};

/// Enum /Script/SB.ESBFishingCameraModeType
/// Size: 0x01 (1 bytes)
enum class ESBFishingCameraModeType : uint8_t
{
	Default                                                                          = 0,
	Aim                                                                              = 1,
	Waiting                                                                          = 2,
	Fighting                                                                         = 3,
	LiftUpReady                                                                      = 4,
	LiftUp                                                                           = 5
};

/// Enum /Script/SB.ESBFishingCommandType
/// Size: 0x01 (1 bytes)
enum class ESBFishingCommandType : uint8_t
{
	None                                                                             = 0,
	Cancel                                                                           = 1,
	Casting                                                                          = 2,
	Reel                                                                             = 3,
	Attack                                                                           = 4,
	TimingPull                                                                       = 5,
	LiftUp                                                                           = 6
};

/// Enum /Script/SB.ESBFishingTakeBackType
/// Size: 0x01 (1 bytes)
enum class ESBFishingTakeBackType : uint8_t
{
	MotionTilt                                                                       = 0,
	ButtonPress                                                                      = 1,
	MoveInput                                                                        = 2
};

/// Enum /Script/SB.ESBFishingModeType
/// Size: 0x01 (1 bytes)
enum class ESBFishingModeType : uint8_t
{
	None                                                                             = 0,
	Idle                                                                             = 1,
	Aim                                                                              = 2,
	TakeBack                                                                         = 3,
	Casting                                                                          = 4,
	Waiting                                                                          = 5,
	Fighting                                                                         = 6,
	RunAway                                                                          = 7,
	Pulling                                                                          = 8,
	FinalPulling                                                                     = 9,
	LiftUpReady                                                                      = 10,
	LiftUp                                                                           = 11
};

/// Enum /Script/SB.ESBFishRarityType
/// Size: 0x01 (1 bytes)
enum class ESBFishRarityType : uint8_t
{
	None                                                                             = 0,
	Common                                                                           = 1,
	Uncommon                                                                         = 2,
	Rare                                                                             = 3,
	Epic                                                                             = 4,
	Legendary                                                                        = 5
};

/// Enum /Script/SB.ESBScanActorType
/// Size: 0x01 (1 bytes)
enum class ESBScanActorType : uint8_t
{
	None                                                                             = 0,
	Character                                                                        = 1,
	Item                                                                             = 2,
	EventMove                                                                        = 3,
	ZoneEnv                                                                          = 4
};

/// Enum /Script/SB.ESBScanDisplayType
/// Size: 0x01 (1 bytes)
enum class ESBScanDisplayType : uint8_t
{
	None                                                                             = 0,
	CharNative                                                                       = 1,
	CharRobotEnemy                                                                   = 2,
	CharRobotAlly                                                                    = 3,
	CharAEEnemy                                                                      = 4,
	CharAEAlly                                                                       = 5,
	CharUnknownAlly                                                                  = 6,
	EnvMachine                                                                       = 50,
	EnvCrate                                                                         = 51,
	EnvAE                                                                            = 52,
	EnvRobot                                                                         = 53,
	ItemNormal                                                                       = 100,
	ItemEquipment                                                                    = 101,
	ItemFusionCell                                                                   = 102,
	ItemAmmo                                                                         = 103,
	ItemGold                                                                         = 104,
	ItemCore                                                                         = 105,
	ItemValuables                                                                    = 106,
	ItemMaterial                                                                     = 107,
	EventMovePath                                                                    = 150,
	Max                                                                              = 255
};

/// Enum /Script/SB.ESBMovementModeBlockType
/// Size: 0x01 (1 bytes)
enum class ESBMovementModeBlockType : uint8_t
{
	ESBBlockMovementMode_FirstEnter                                                  = 1,
	ESBBlockMovementMode_Warp                                                        = 2
};

/// Enum /Script/SB.ESBTPSModeType
/// Size: 0x01 (1 bytes)
enum class ESBTPSModeType : uint8_t
{
	Default                                                                          = 0,
	MiniGame                                                                         = 1,
	Nikke                                                                            = 2
};

/// Enum /Script/SB.ESBWeaponStepType
/// Size: 0x01 (1 bytes)
enum class ESBWeaponStepType : uint8_t
{
	Step1                                                                            = 0,
	Step2                                                                            = 1,
	Step3                                                                            = 2
};

/// Enum /Script/SB.ESBSoundStatSortType
/// Size: 0x01 (1 bytes)
enum class ESBSoundStatSortType : uint8_t
{
	None                                                                             = 0,
	Volume                                                                           = 1,
	SoundName                                                                        = 2,
	SoundPath                                                                        = 3,
	Distance                                                                         = 4,
	Priority                                                                         = 5,
	PlaybackTime                                                                     = 6,
	PlaybackTimeNonVirtualized                                                       = 7,
	ClassName                                                                        = 8
};

/// Enum /Script/SB.ESBSoundDebuggerSettingEnumType
/// Size: 0x01 (1 bytes)
enum class ESBSoundDebuggerSettingEnumType : uint8_t
{
	LogViewerEnable                                                                  = 0,
	StatLogEnableType                                                                = 1
};

/// Enum /Script/SB.ESBSoundStatLogType
/// Size: 0x01 (1 bytes)
enum class ESBSoundStatLogType : uint8_t
{
	None                                                                             = 0,
	Sounds                                                                           = 1,
	Wave                                                                             = 2,
	Cue                                                                              = 4,
	Vibration                                                                        = 8,
	ForceFeedback                                                                    = 16
};

/// Enum /Script/SB.ESBSoundLogViewerType
/// Size: 0x01 (1 bytes)
enum class ESBSoundLogViewerType : uint8_t
{
	None                                                                             = 0,
	EventLog                                                                         = 1,
	FixedLog                                                                         = 2,
	StatLog                                                                          = 4,
	WorldLog                                                                         = 8,
	All                                                                              = 15
};

/// Enum /Script/SB.ESBSoundEventLevelSequenceType
/// Size: 0x01 (1 bytes)
enum class ESBSoundEventLevelSequenceType : uint8_t
{
	Begin                                                                            = 0,
	Finish                                                                           = 1
};

/// Enum /Script/SB.ESBSoundEventQuestType
/// Size: 0x01 (1 bytes)
enum class ESBSoundEventQuestType : uint8_t
{
	Acquire                                                                          = 0,
	Complete                                                                         = 1
};

/// Enum /Script/SB.ESBSoundEventSystemType
/// Size: 0x01 (1 bytes)
enum class ESBSoundEventSystemType : uint8_t
{
	None                                                                             = 0,
	MainBGM                                                                          = 1,
	AmbientBGM                                                                       = 2,
	AmbientSound                                                                     = 3,
	BGMState                                                                         = 4,
	SoundClass                                                                       = 5,
	Num                                                                              = 6
};

/// Enum /Script/SB.ESBSoundClassType
/// Size: 0x01 (1 bytes)
enum class ESBSoundClassType : uint8_t
{
	None                                                                             = 0,
	DialogVoice                                                                      = 1,
	ActionVoice                                                                      = 2,
	PCFootstepSound                                                                  = 3,
	MonFootstepSound                                                                 = 4,
	Num                                                                              = 5
};

/// Enum /Script/SB.ESBSoundBGMStateRule
/// Size: 0x01 (1 bytes)
enum class ESBSoundBGMStateRule : uint8_t
{
	None                                                                             = 0,
	Auto                                                                             = 1,
	ForceDefault                                                                     = 2,
	ForceBattle                                                                      = 3,
	ForceEventBattle                                                                 = 4,
	RequestFinishSound                                                               = 5,
	AutoWithResetEvent                                                               = 6
};

/// Enum /Script/SB.ESBSoundBGMState
/// Size: 0x01 (1 bytes)
enum class ESBSoundBGMState : uint8_t
{
	None                                                                             = 0,
	Default                                                                          = 1,
	Battle                                                                           = 2,
	EventBattle                                                                      = 3,
	BattleFinish                                                                     = 4
};

/// Enum /Script/SB.ESBAmbientSoundControlType
/// Size: 0x01 (1 bytes)
enum class ESBAmbientSoundControlType : uint8_t
{
	Enable                                                                           = 0,
	Priority                                                                         = 1
};

/// Enum /Script/SB.ESBSoundRestartType
/// Size: 0x01 (1 bytes)
enum class ESBSoundRestartType : uint8_t
{
	Default                                                                          = 0,
	Alway                                                                            = 1
};

/// Enum /Script/SB.ESBSoundParamType
/// Size: 0x01 (1 bytes)
enum class ESBSoundParamType : uint8_t
{
	None                                                                             = 0,
	BossHPRate                                                                       = 1,
	SBVelocityX                                                                      = 2,
	SBVelocityY                                                                      = 3,
	SlidingSlipTurnRate                                                              = 4,
	SlopeSlidingTurnRate                                                             = 5,
	ChangeBattleBGMElapsedTime                                                       = 6,
	ChangeDefaultBGMElapsedTime                                                      = 7,
	TopDownRopeMoveRate                                                              = 8,
	Num                                                                              = 9
};

/// Enum /Script/SB.ESBSoundVolumeChannel
/// Size: 0x01 (1 bytes)
enum class ESBSoundVolumeChannel : uint8_t
{
	None                                                                             = 0,
	Master                                                                           = 1,
	BGM                                                                              = 2,
	TurntableMusic                                                                   = 3,
	PlayerCharacterSE                                                                = 4,
	MonsterSE                                                                        = 5,
	NpcSE                                                                            = 6,
	WorldSE                                                                          = 7,
	Ambience                                                                         = 8,
	General                                                                          = 9,
	Boss                                                                             = 10,
	Dialog                                                                           = 11,
	UI                                                                               = 12,
	TrainingUI                                                                       = 13,
	Cinema                                                                           = 14,
	ActionVoice                                                                      = 15,
	TurntableMusicDuck                                                               = 16,
	Haptic                                                                           = 17,
	Num                                                                              = 18
};

/// Enum /Script/SB.ESBSoundVolumeControlType
/// Size: 0x01 (1 bytes)
enum class ESBSoundVolumeControlType : uint8_t
{
	None                                                                             = 0,
	System                                                                           = 1,
	User                                                                             = 2,
	Loading                                                                          = 3,
	Timer                                                                            = 4,
	Num                                                                              = 5
};

/// Enum /Script/SB.ESBRuleState
/// Size: 0x01 (1 bytes)
enum class ESBRuleState : uint8_t
{
	None                                                                             = 0,
	StartWait                                                                        = 1,
	Playing                                                                          = 2,
	EndWait                                                                          = 3,
	End                                                                              = 4
};

/// Enum /Script/SB.ESBEventMoveRopeType
/// Size: 0x01 (1 bytes)
enum class ESBEventMoveRopeType : uint8_t
{
	ESBEventMoveRope_TopDown                                                         = 0,
	ESBEventMoveRope_Swing                                                           = 1,
	ESBEventMoveRope_TopDown2                                                        = 2
};

/// Enum /Script/SB.ESBShowClientEvent
/// Size: 0x01 (1 bytes)
enum class ESBShowClientEvent : uint8_t
{
	CompletedMountingEquipment                                                       = 0,
	CompleteChangeEquipmentShow                                                      = 1,
	SetAIDecoratorData                                                               = 2
};

/// Enum /Script/SB.ESBSpiderNavigationPlaceType
/// Size: 0x01 (1 bytes)
enum class ESBSpiderNavigationPlaceType : uint8_t
{
	SpiderNavigationPlaceType_AnyWhere                                               = 0,
	SpiderNavigationPlaceType_Floor                                                  = 1,
	SpiderNavigationPlaceType_Wall                                                   = 2,
	SpiderNavigationPlaceType_Ceiling                                                = 3
};

/// Enum /Script/SB.ESBTargetLocationTransformType
/// Size: 0x01 (1 bytes)
enum class ESBTargetLocationTransformType : uint8_t
{
	Base                                                                             = 0,
	Socket                                                                           = 1,
	Component                                                                        = 2
};

/// Enum /Script/SB.ESBRequestGameModeType
/// Size: 0x01 (1 bytes)
enum class ESBRequestGameModeType : uint8_t
{
	None                                                                             = 0,
	StoryMode                                                                        = 1,
	NormalMode                                                                       = 2,
	HardMode                                                                         = 3
};

/// Enum /Script/SB.ESBRequestGameDataType
/// Size: 0x01 (1 bytes)
enum class ESBRequestGameDataType : uint8_t
{
	None                                                                             = 0,
	NewGame                                                                          = 1,
	LoadGame                                                                         = 2,
	LoadMap                                                                          = 3
};

/// Enum /Script/SB.ESBEnterZoneStepResultType
/// Size: 0x01 (1 bytes)
enum class ESBEnterZoneStepResultType : uint8_t
{
	ESBEnterZoneStepResult_None                                                      = 0,
	ESBEnterZoneStepResult_FailDestroyZone                                           = 1,
	ESBEnterZoneStepResult_FailChangeWorld                                           = 2,
	ESBEnterZoneStepResult_FailCreateZone                                            = 3,
	ESBEnterZoneStepResult_Success                                                   = 4
};

/// Enum /Script/SB.ESBZoneProcessState
/// Size: 0x01 (1 bytes)
enum class ESBZoneProcessState : uint8_t
{
	None                                                                             = 0,
	EnterRequest                                                                     = 1,
	ResetRequest                                                                     = 2,
	Complete                                                                         = 3
};

/// Enum /Script/SB.ESBGameWorldState
/// Size: 0x01 (1 bytes)
enum class ESBGameWorldState : uint8_t
{
	None                                                                             = 0,
	BeginCreateZone                                                                  = 1,
	CreatingZoneObject                                                               = 2,
	CreateZoneComplete                                                               = 3,
	BeginDestoryZone                                                                 = 4,
	RequestDestroyZone                                                               = 5,
	DestoryZoneComplete                                                              = 6,
	BeginChangeWorld                                                                 = 7,
	ChangingWorld                                                                    = 8,
	ChangeWorldComplete                                                              = 9,
	RequestInteractZone                                                              = 10,
	RequestDestroyZoneObject                                                         = 11,
	RunningResetZoneObject                                                           = 12,
	RequestCreateResetZoneObject                                                     = 13,
	CompleteResetZone                                                                = 14,
	RequestResourceCacheAsyncLoad                                                    = 15,
	CompleteResourceCacheAsyncLoad                                                   = 16,
	Complete                                                                         = 17
};

/// Enum /Script/SB.ESBTargetGameWorldState
/// Size: 0x01 (1 bytes)
enum class ESBTargetGameWorldState : uint8_t
{
	None                                                                             = 0,
	CreateZone                                                                       = 1,
	DestoryZone                                                                      = 2,
	InteractZone                                                                     = 3
};

/// Enum /Script/SB.ESBClientLobbyFlowState
/// Size: 0x01 (1 bytes)
enum class ESBClientLobbyFlowState : uint8_t
{
	None                                                                             = 0,
	LeaveGame                                                                        = 1,
	PostLeaveProcessing                                                              = 2,
	CompleteLeaveGame                                                                = 3,
	RequestLobbyLevel                                                                = 4,
	LoadCompleteLobbyLevel                                                           = 5,
	CompleteEnterLobby                                                               = 6
};

/// Enum /Script/SB.ESBClientEnterGameFlowState
/// Size: 0x01 (1 bytes)
enum class ESBClientEnterGameFlowState : uint8_t
{
	ESBClientGameFlowState_None                                                      = 0,
	ESBClientGameFlowState_RequestChangeLevel                                        = 1,
	ESBClientGameFlowState_LoadingLevels                                             = 2,
	ESBClientGameFlowState_LoadLevelComplete                                         = 3,
	ESBClientGameFlowState_CreateLocalPlayer                                         = 4,
	ESBClientGameFlowState_CompleteLocalPlayer                                       = 5,
	ESBClientGameFlowState_RequestEnterZone                                          = 6,
	ESBClientGameFlowState_CompleteEnterZone                                         = 7,
	ESBClientGameFlowState_EventZoneTransitWrold                                     = 8,
	ESBClientGameFlowState_RequestWarpToLocation                                     = 9,
	ESBClientGameFlowState_SetWarpToLocation                                         = 10,
	ESBClientGameFlowState_WarpPendingLevels                                         = 11,
	ESBClientGameFlowState_AdjustWarpPositionWithStream                              = 12,
	ESBClientGameFlowState_CompleteWarp                                              = 13,
	ESBClientGameFlowState_Complete                                                  = 14,
	ESBClientGameFlowState_RequestResourceCacheLongWarpAsyncLoad                     = 15,
	ESBClientGameFlowState_CompleteResourceCacheLongWarpAsyncLoad                    = 16,
	ESBClientGameFlowState_RequestResourceCacheShortWarpAsyncLoad                    = 17,
	ESBClientGameFlowState_CompleteResourceCacheShortWarpAsyncLoad                   = 18
};

/// Enum /Script/SB.ESBClientTargetGameStep
/// Size: 0x01 (1 bytes)
enum class ESBClientTargetGameStep : uint8_t
{
	None                                                                             = 0,
	EnterLevel                                                                       = 1,
	EnterZone                                                                        = 2,
	EnterLobby                                                                       = 3
};

/// Enum /Script/SB.ESBLocalClientStageType
/// Size: 0x01 (1 bytes)
enum class ESBLocalClientStageType : uint8_t
{
	ESBLocalClientStage_None                                                         = 0,
	ESBLocalClientStage_Lobby                                                        = 1,
	ESBLocalClientStage_Game                                                         = 2
};

/// Enum /Script/SB.ESBRequestZoneState
/// Size: 0x01 (1 bytes)
enum class ESBRequestZoneState : uint8_t
{
	None                                                                             = 0,
	Create                                                                           = 1,
	Reset                                                                            = 2,
	CreateComplete                                                                   = 3,
	ResetComplete                                                                    = 4
};

/// Enum /Script/SB.ESBActorWarpType
/// Size: 0x01 (1 bytes)
enum class ESBActorWarpType : uint8_t
{
	EngineHandle                                                                     = 0,
	ActorGUID                                                                        = 1
};

/// Enum /Script/SB.ESBActorSpeedType
/// Size: 0x01 (1 bytes)
enum class ESBActorSpeedType : uint8_t
{
	None                                                                             = 0,
	Run                                                                              = 1,
	Walk                                                                             = 2,
	LockOnRun                                                                        = 3,
	LockOnWalk                                                                       = 4,
	JoggingRun                                                                       = 5,
	RotateAnglePerSecond                                                             = 6
};

/// Enum /Script/SB.ESBBodySuitToggleEventType
/// Size: 0x01 (1 bytes)
enum class ESBBodySuitToggleEventType : uint8_t
{
	Visible                                                                          = 0,
	Change                                                                           = 1
};

/// Enum /Script/SB.ESBZoneTriggerFilterType
/// Size: 0x01 (1 bytes)
enum class ESBZoneTriggerFilterType : uint8_t
{
	ESBTriggerFilter_None                                                            = 0,
	ESBTriggerFilter_BattleState                                                     = 1,
	ESBTriggerFilter_BattleStateByEnemyNpc                                           = 2,
	ESBTriggerFilter_IsSwiming                                                       = 3,
	ESBTriggerFilter_DisableObject                                                   = 4
};

/// Enum /Script/SB.ESBCharacterObjectStateType
/// Size: 0x01 (1 bytes)
enum class ESBCharacterObjectStateType : uint8_t
{
	ESBCharacterObjState_None                                                        = 0,
	ESBCharacterObjState_PreSpawn                                                    = 1,
	ESBCharacterObjState_PostSpawn                                                   = 2,
	ESBCharacterObjState_Spawn                                                       = 3
};

/// Enum /Script/SB.ESBBroadcastMoveType
/// Size: 0x01 (1 bytes)
enum class ESBBroadcastMoveType : uint8_t
{
	None                                                                             = 0,
	LeaveEventVolume                                                                 = 1
};

/// Enum /Script/SB.ESBEventMoveIKApplySlot
/// Size: 0x01 (1 bytes)
enum class ESBEventMoveIKApplySlot : uint8_t
{
	ESBEventMoveIK_Hand_L                                                            = 0,
	ESBEventMoveIK_Hand_R                                                            = 1,
	ESBEventMoveIK_Foot_L                                                            = 2,
	ESBEventMoveIK_Foot_R                                                            = 3,
	ESBEventMoveIK_All                                                               = 4
};

/// Enum /Script/SB.ESBRewardGiveType
/// Size: 0x01 (1 bytes)
enum class ESBRewardGiveType : uint8_t
{
	Drop                                                                             = 0,
	Direct                                                                           = 1
};

/// Enum /Script/SB.ESBPhaseFlowProcessEvent
/// Size: 0x01 (1 bytes)
enum class ESBPhaseFlowProcessEvent : uint8_t
{
	Start                                                                            = 0,
	CompleteShowLoadingScreen                                                        = 1,
	CompleteHideLoadingScreen                                                        = 2,
	CompleteClearSB                                                                  = 3,
	CompleteClearEngine                                                              = 4,
	CompleteLoadMap                                                                  = 5,
	CompleteEngineInit                                                               = 6,
	CompleteClientInit                                                               = 7,
	CompleteClientReset                                                              = 8,
	CompleteEnterZone                                                                = 9,
	FailEnterZone                                                                    = 10,
	CompleteResetZone                                                                = 11,
	CompleteLoadSaveFileProc                                                         = 12,
	CompletePlayerActorSpawn                                                         = 13,
	PlayIntroSequence                                                                = 14
};

/// Enum /Script/SB.ESBPhaseFlowEvent
/// Size: 0x01 (1 bytes)
enum class ESBPhaseFlowEvent : uint8_t
{
	EnterPhase                                                                       = 0,
	ChangeGameMap                                                                    = 1,
	Revival                                                                          = 2,
	Quit                                                                             = 3,
	CompleteLoading                                                                  = 4,
	CompleteRevival                                                                  = 5,
	ConnectToMultiPlay                                                               = 6,
	ReturnToSinglePlay                                                               = 7
};

/// Enum /Script/SB.ESBCameraVoumeMoveConstraintDirectionType
/// Size: 0x01 (1 bytes)
enum class ESBCameraVoumeMoveConstraintDirectionType : uint8_t
{
	NotControl                                                                       = 0,
	Vector                                                                           = 1,
	ActorPoint                                                                       = 2,
	TargetLocation                                                                   = 3
};

/// Enum /Script/SB.ESBCameraSlopeMoveType
/// Size: 0x01 (1 bytes)
enum class ESBCameraSlopeMoveType : uint8_t
{
	ESBCameraSlopeMove_None                                                          = 0,
	ESBCameraSlopeMove_CamDownPlayerDown                                             = 1,
	ESBCameraSlopeMove_CamDownPlayerUp                                               = 2,
	ESBCameraSlopeMove_CamUpPlayerDown                                               = 3,
	ESBCameraSlopeMove_CamUpPlayerUp                                                 = 4
};

/// Enum /Script/SB.ESBKeepDataType
/// Size: 0x01 (1 bytes)
enum class ESBKeepDataType : uint8_t
{
	None                                                                             = 0,
	Actor                                                                            = 1
};

/// Enum /Script/SB.ESBEffectUIType
/// Size: 0x01 (1 bytes)
enum class ESBEffectUIType : uint8_t
{
	EffectUIType_None                                                                = 0,
	EffectUIType_OverDrive                                                           = 1
};

/// Enum /Script/SB.ESBEffectExpansionType
/// Size: 0x01 (1 bytes)
enum class ESBEffectExpansionType : uint8_t
{
	EffectExpansionType_AdditiveLifeTime                                             = 0,
	EffectExpansionType_AdditiveCalculationValue                                     = 1
};

/// Enum /Script/SB.ESBSkillExpansionType
/// Size: 0x01 (1 bytes)
enum class ESBSkillExpansionType : uint8_t
{
	SkillExpansionType_JustActionTime                                                = 0,
	SkillExpansionType_ResultSelfEffect                                              = 1,
	SkillExpansionType_ResultTargetEffect                                            = 2,
	SkillExpansionType_AdditiveEnergyRate                                            = 3,
	SkillExpansionType_AdditiveSkillDamageRate                                       = 4,
	SkillExpansionType_AdditiveAimLockOnTargetCount                                  = 5,
	SkillExpansionType_DecreaseCoolTime                                              = 6
};

/// Enum /Script/SB.ESBOperationType
/// Size: 0x01 (1 bytes)
enum class ESBOperationType : uint8_t
{
	ESBOperation_EQ                                                                  = 0,
	ESBOperation_NE                                                                  = 1,
	ESBOperation_LT                                                                  = 2,
	ESBOperation_GT                                                                  = 3,
	ESBOperation_LE                                                                  = 4,
	ESBOperation_GE                                                                  = 5
};

/// Enum /Script/SB.ESBAchievementParamType
/// Size: 0x01 (1 bytes)
enum class ESBAchievementParamType : uint8_t
{
	None                                                                             = 0,
	QuestAlias                                                                       = 1,
	ItemAlias                                                                        = 2,
	ItemCategory                                                                     = 3,
	CharacterAlias                                                                   = 4,
	ZoneEnvAlias                                                                     = 5,
	ZoneEnvSpawnAlias                                                                = 6,
	SkillAlias                                                                       = 7,
	ZoneAlias                                                                        = 8,
	EffectVolumnAlias                                                                = 9,
	AchievementAlias                                                                 = 10,
	LevelType                                                                        = 11,
	LevelValue                                                                       = 12,
	EnvState                                                                         = 13,
	ZoneEventActorAlias                                                              = 14,
	CharacterRank                                                                    = 15,
	ZoneTriggerAlias                                                                 = 16,
	SkillAchievementTag                                                              = 17,
	SkillHitResult                                                                   = 18,
	SkillActiveStepAlias                                                             = 19,
	ItemAmount                                                                       = 20,
	FishWeight                                                                       = 21,
	ItemCategoryTag                                                                  = 22,
	ShopTag                                                                          = 23,
	WorldAlias                                                                       = 24,
	AcquisitionSkillAchievementTag                                                   = 25,
	AcquiredSkillCount                                                               = 26,
	NikkeStageAlias                                                                  = 27
};

/// Enum /Script/SB.ESBAchievementCategoryType
/// Size: 0x01 (1 bytes)
enum class ESBAchievementCategoryType : uint8_t
{
	None                                                                             = 0,
	Quest                                                                            = 1,
	Item                                                                             = 2,
	Character                                                                        = 3,
	ZoneEnv                                                                          = 4,
	Skill                                                                            = 5,
	Zone                                                                             = 6,
	EffectVolumn                                                                     = 7,
	Achievement                                                                      = 8,
	ZoneEventActor                                                                   = 9,
	ZoneTrigger                                                                      = 10,
	SkillActiveStep                                                                  = 11,
	World                                                                            = 12,
	FriendShip                                                                       = 13,
	PhotoChallenge                                                                   = 14,
	NikkeStage                                                                       = 15
};

/// Enum /Script/SB.ESBAchievementEventType
/// Size: 0x01 (1 bytes)
enum class ESBAchievementEventType : uint8_t
{
	None                                                                             = 0,
	Complete                                                                         = 1,
	Acquire                                                                          = 2,
	Interact                                                                         = 3,
	Kill                                                                             = 4,
	Enter                                                                            = 5,
	LevelUp                                                                          = 6,
	ChangeState                                                                      = 7,
	Hit                                                                              = 8,
	BeHit                                                                            = 9,
	Remove                                                                           = 10,
	CheckAmount                                                                      = 11,
	Start                                                                            = 12,
	Fishing                                                                          = 13,
	ConsumeInShop                                                                    = 14,
	SellItem                                                                         = 15,
	BuyItem                                                                          = 16
};

/// Enum /Script/SB.ESBCharacterLevelType
/// Size: 0x01 (1 bytes)
enum class ESBCharacterLevelType : uint8_t
{
	None                                                                             = 0,
	Body                                                                             = 1,
	Beta                                                                             = 2,
	RechargeablePotion                                                               = 3,
	Weapon                                                                           = 4,
	GearSlot                                                                         = 5,
	ProtectorSlot                                                                    = 6
};

/// Enum /Script/SB.ESBGamePhaseEvent
/// Size: 0x01 (1 bytes)
enum class ESBGamePhaseEvent : uint8_t
{
	None                                                                             = 0,
	EnterGame                                                                        = 1,
	Quit                                                                             = 2,
	Restart                                                                          = 3,
	PostLoadMap                                                                      = 4,
	ChangeMap                                                                        = 5
};

/// Enum /Script/SB.ESBGamePhaseState
/// Size: 0x01 (1 bytes)
enum class ESBGamePhaseState : uint8_t
{
	None                                                                             = 0,
	Lobby                                                                            = 1,
	PlayGame                                                                         = 2
};

/// Enum /Script/SB.ESBDroneFollowLocationType
/// Size: 0x01 (1 bytes)
enum class ESBDroneFollowLocationType : uint8_t
{
	SBDroneFollowLocationType_System                                                 = 0,
	SBDroneFollowLocationType_TargetLocation                                         = 1
};

/// Enum /Script/SB.ESBMoveInputType
/// Size: 0x01 (1 bytes)
enum class ESBMoveInputType : uint8_t
{
	SBMoveInputType_Walk                                                             = 0,
	SBMoveInputType_Jogging                                                          = 1,
	SBMoveInputType_Run                                                              = 2
};

/// Enum /Script/SB.ESBPhaseEventState
/// Size: 0x01 (1 bytes)
enum class ESBPhaseEventState : uint8_t
{
	None                                                                             = 0,
	Pending                                                                          = 1,
	Running                                                                          = 2,
	Complete                                                                         = 3
};

/// Enum /Script/SB.ESBPhaseEventCompleteType
/// Size: 0x01 (1 bytes)
enum class ESBPhaseEventCompleteType : uint8_t
{
	None                                                                             = 0,
	AllDie                                                                           = 1,
	KillCount                                                                        = 2,
	DurationTime                                                                     = 3
};

/// Enum /Script/SB.ESBPhaseEventType
/// Size: 0x01 (1 bytes)
enum class ESBPhaseEventType : uint8_t
{
	General                                                                          = 0,
	Nikke                                                                            = 1
};

/// Enum /Script/SB.ESBPhaseEventStepType
/// Size: 0x01 (1 bytes)
enum class ESBPhaseEventStepType : uint8_t
{
	None                                                                             = 0,
	Event                                                                            = 1,
	StartEvent                                                                       = 2,
	EndEvent                                                                         = 3
};

/// Enum /Script/SB.ESBNotifyBPEvent
/// Size: 0x01 (1 bytes)
enum class ESBNotifyBPEvent : uint8_t
{
	GuideAction_Start                                                                = 0,
	GuideAction_Wait                                                                 = 1,
	GuideAction_Cancel                                                               = 2,
	GuideAction_End                                                                  = 3,
	ActorDead                                                                        = 4,
	CharacterBindingOn                                                               = 5,
	CharacterBindingOff                                                              = 6,
	ActorHitMe                                                                       = 7
};

/// Enum /Script/SB.ESBWarpStepState
/// Size: 0x01 (1 bytes)
enum class ESBWarpStepState : uint8_t
{
	None                                                                             = 0,
	StartWarp                                                                        = 1,
	RequestChangeWrold                                                               = 2,
	ChangeWrold                                                                      = 3,
	CompleteChangeWrold                                                              = 4,
	RequestLocation                                                                  = 5,
	PendingStreamLevel                                                               = 6,
	SetupZone                                                                        = 7,
	Complete                                                                         = 8
};

/// Enum /Script/SB.ESBResetZoneStepState
/// Size: 0x01 (1 bytes)
enum class ESBResetZoneStepState : uint8_t
{
	ESBResetZoneState_UnLoadLevel                                                    = 0,
	ESBResetZoneState_RemoveObjects                                                  = 1,
	ESBResetZoneState_CreateObjects                                                  = 2,
	ESBResetZoneState_PostReset                                                      = 3,
	ESBResetZoneState_Complete                                                       = 4
};

/// Enum /Script/SB.ESBWorldObjectType
/// Size: 0x01 (1 bytes)
enum class ESBWorldObjectType : uint8_t
{
	None                                                                             = 0,
	EffectVolume                                                                     = 1,
	ZoneEventActor                                                                   = 2,
	AreaControlVolume                                                                = 3,
	RestorationWorldActor                                                            = 4,
	BlockingVolume                                                                   = 5
};

/// Enum /Script/SB.ESBSoundChannel
/// Size: 0x01 (1 bytes)
enum class ESBSoundChannel : uint8_t
{
	Default                                                                          = 0,
	BGM                                                                              = 1,
	Ambient                                                                          = 2
};

/// Enum /Script/SB.ESBMenuCommonButtonType
/// Size: 0x01 (1 bytes)
enum class ESBMenuCommonButtonType : uint8_t
{
	ESBMenuCommonButton_Triangle                                                     = 1,
	ESBMenuCommonButton_Cross                                                        = 2,
	ESBMenuCommonButton_Rectangle                                                    = 3,
	ESBMenuCommonButton_Circle                                                       = 4,
	ESBMenuCommonButton_Max                                                          = 5
};

/// Enum /Script/SB.ESBMenuUIType
/// Size: 0x01 (1 bytes)
enum class ESBMenuUIType : uint8_t
{
	Equip                                                                            = 1,
	Skill                                                                            = 2,
	Max                                                                              = 3
};

/// Enum /Script/SB.ESBFootIKApplyType
/// Size: 0x01 (1 bytes)
enum class ESBFootIKApplyType : uint8_t
{
	ESBFootIK_Use                                                                    = 0,
	ESBFootIK_Off                                                                    = 1,
	ESBFootIK_BlendOff                                                               = 2
};

/// Enum /Script/SB.ESBEquipType
/// Size: 0x01 (1 bytes)
enum class ESBEquipType : uint8_t
{
	None                                                                             = 0,
	GearCommon1                                                                      = 1,
	GearCommon2                                                                      = 2,
	GearCommon3                                                                      = 3,
	GearCommon4                                                                      = 4,
	NanoSuit                                                                         = 5,
	Protector1                                                                       = 6,
	Protector2                                                                       = 7,
	Hair1                                                                            = 8,
	Ponytail                                                                         = 9,
	Accessory1                                                                       = 10,
	Accessory2                                                                       = 11,
	Accessory3                                                                       = 12,
	Accessory4                                                                       = 13,
	Accessory5                                                                       = 14,
	Lily                                                                             = 15,
	Adam                                                                             = 16,
	Drone                                                                            = 17
};

/// Enum /Script/SB.ESBGearStatType
/// Size: 0x01 (1 bytes)
enum class ESBGearStatType : uint8_t
{
	None                                                                             = 0,
	ActorStat                                                                        = 1,
	Effect                                                                           = 2
};

/// Enum /Script/SB.ESBGearType
/// Size: 0x01 (1 bytes)
enum class ESBGearType : uint8_t
{
	None                                                                             = 0,
	Common                                                                           = 1
};

/// Enum /Script/SB.ESBTheaterSequenceEventType
/// Size: 0x01 (1 bytes)
enum class ESBTheaterSequenceEventType : uint8_t
{
	InputCounter_Hit                                                                 = 0
};

/// Enum /Script/SB.ESBTheaterTakeStateType
/// Size: 0x01 (1 bytes)
enum class ESBTheaterTakeStateType : uint8_t
{
	Init                                                                             = 0,
	Playing                                                                          = 1,
	Finish                                                                           = 2,
	Stop                                                                             = 3
};

/// Enum /Script/SB.ESBCreateEffectAxis
/// Size: 0x01 (1 bytes)
enum class ESBCreateEffectAxis : uint8_t
{
	WorldAxis                                                                        = 0,
	CreatorAxis                                                                      = 1,
	TargetEnemyAxis                                                                  = 2,
	EffectAxis                                                                       = 3
};

/// Enum /Script/SB.ESBCreateEffectPosition
/// Size: 0x01 (1 bytes)
enum class ESBCreateEffectPosition : uint8_t
{
	ConstructorActor                                                                 = 0,
	MainActor                                                                        = 1,
	WorldPosition                                                                    = 2
};

/// Enum /Script/SB.ESBPuzzleTextType
/// Size: 0x01 (1 bytes)
enum class ESBPuzzleTextType : uint8_t
{
	Text1                                                                            = 0,
	Text2                                                                            = 1,
	Text3                                                                            = 2,
	Text4                                                                            = 3,
	Text5                                                                            = 4,
	End                                                                              = 5
};

/// Enum /Script/SB.ESBPuzzleDataType
/// Size: 0x01 (1 bytes)
enum class ESBPuzzleDataType : uint8_t
{
	None                                                                             = 0,
	String                                                                           = 1,
	Float                                                                            = 2,
	Int                                                                              = 3,
	Bool                                                                             = 4
};

/// Enum /Script/SB.ESBBufferDataSlot
/// Size: 0x01 (1 bytes)
enum class ESBBufferDataSlot : uint8_t
{
	Slot0                                                                            = 0,
	Slot1                                                                            = 1,
	Slot2                                                                            = 2,
	Slot3                                                                            = 3,
	Slot4                                                                            = 4,
	Slot5                                                                            = 5,
	Slot6                                                                            = 6,
	Slot7                                                                            = 7,
	Slot8                                                                            = 8,
	Slot9                                                                            = 9,
	Slot10                                                                           = 10,
	Slot11                                                                           = 11,
	Slot12                                                                           = 12,
	Slot13                                                                           = 13,
	Slot14                                                                           = 14,
	Slot15                                                                           = 15,
	Slot16                                                                           = 16,
	Slot17                                                                           = 17,
	Slot18                                                                           = 18,
	Slot19                                                                           = 19,
	Slot20                                                                           = 20,
	End                                                                              = 21
};

/// Enum /Script/SB.ESBZoneEnvDataSlot
/// Size: 0x01 (1 bytes)
enum class ESBZoneEnvDataSlot : uint8_t
{
	Slot1                                                                            = 0,
	Slot2                                                                            = 1,
	Slot3                                                                            = 2,
	Slot4                                                                            = 3,
	Slot5                                                                            = 4,
	Slot6                                                                            = 5,
	Slot7                                                                            = 6,
	Slot8                                                                            = 7,
	Slot9                                                                            = 8,
	Slot10                                                                           = 9,
	Slot11                                                                           = 10,
	Slot12                                                                           = 11,
	Slot13                                                                           = 12,
	Slot14                                                                           = 13,
	Slot15                                                                           = 14,
	Slot16                                                                           = 15,
	Slot17                                                                           = 16,
	Slot18                                                                           = 17,
	Slot19                                                                           = 18,
	Slot20                                                                           = 19,
	End                                                                              = 20
};

/// Enum /Script/SB.ESBCautionToTargetMoveType
/// Size: 0x01 (1 bytes)
enum class ESBCautionToTargetMoveType : uint8_t
{
	All                                                                              = 0,
	Side                                                                             = 1,
	ForwardAndSide                                                                   = 2
};

/// Enum /Script/SB.ESBSummonActorSpawnRotationType
/// Size: 0x01 (1 bytes)
enum class ESBSummonActorSpawnRotationType : uint8_t
{
	SummonActorSpawnRotationType_Default                                             = 0,
	SummonActorSpawnRotationType_ConstructorActorToSpawnLocation                     = 1,
	SummonActorSpawnRotationType_MainActorToSpawnLocation                            = 2
};

/// Enum /Script/SB.ESBSummonActorSpawnLocationType
/// Size: 0x01 (1 bytes)
enum class ESBSummonActorSpawnLocationType : uint8_t
{
	SummonActorSpawnLocationType_BasedOnOwnerActor                                   = 0,
	SummonActorSpawnLocationType_BasedOnTargetActor                                  = 1,
	SummonActorSpawnLocationType_SpawnPoint                                          = 2,
	SummonActorSpawnLocationType_SpawnAreaCloseToTarget                              = 3,
	SummonActorSpawnLocationType_SpawnAreaRandomLocation                             = 4,
	SummonActorSpawnLocationType_EffectLocation                                      = 5
};

/// Enum /Script/SB.ESBRagdollLockLocationType
/// Size: 0x01 (1 bytes)
enum class ESBRagdollLockLocationType : uint8_t
{
	None                                                                             = 0,
	XY                                                                               = 1,
	XYZ                                                                              = 2
};

/// Enum /Script/SB.ESBTextureStyleType
/// Size: 0x01 (1 bytes)
enum class ESBTextureStyleType : uint8_t
{
	Default                                                                          = 0,
	StanardKeyboard                                                                  = 1,
	StanardJoystic                                                                   = 2,
	PS4                                                                              = 3,
	XBox                                                                             = 4
};

/// Enum /Script/SB.ESBSkillSlotType
/// Size: 0x01 (1 bytes)
enum class ESBSkillSlotType : uint8_t
{
	None                                                                             = 0,
	Slot                                                                             = 1,
	Slot3                                                                            = 2,
	Slot4                                                                            = 3,
	Slot5                                                                            = 4,
	BurstSlot                                                                        = 5,
	BurstSlot7                                                                       = 6,
	BurstSlot8                                                                       = 7,
	BurstSlot9                                                                       = 8,
	TachySlot                                                                        = 9,
	TachySlot11                                                                      = 10,
	TachySlot12                                                                      = 11,
	TachySlot13                                                                      = 12,
	FusionSlot                                                                       = 13,
	FusionSlot15                                                                     = 14,
	FusionSlot16                                                                     = 15,
	FusionSlot17                                                                     = 16,
	Dash                                                                             = 17,
	NikkeBurstSlot                                                                   = 18,
	NikkeBurstSlot20                                                                 = 19,
	NikkeBurstSlot21                                                                 = 20,
	All                                                                              = 21
};

/// Enum /Script/SB.ESBSkillImportanceType
/// Size: 0x01 (1 bytes)
enum class ESBSkillImportanceType : uint8_t
{
	Medium                                                                           = 0,
	High                                                                             = 1
};

/// Enum /Script/SB.ESBSkillEnergyVisibleType
/// Size: 0x01 (1 bytes)
enum class ESBSkillEnergyVisibleType : uint8_t
{
	Hidden                                                                           = 0,
	Visible                                                                          = 1
};

/// Enum /Script/SB.ESBAcquisitionSkillType
/// Size: 0x01 (1 bytes)
enum class ESBAcquisitionSkillType : uint8_t
{
	Active                                                                           = 0,
	Passive                                                                          = 1
};

/// Enum /Script/SB.ESBAIGroupTargetShareCondition
/// Size: 0x01 (1 bytes)
enum class ESBAIGroupTargetShareCondition : uint8_t
{
	Detect                                                                           = 0,
	UnderHPRate                                                                      = 1
};

/// Enum /Script/SB.ESBAttackerSelectMethod
/// Size: 0x01 (1 bytes)
enum class ESBAttackerSelectMethod : uint8_t
{
	NearDistance                                                                     = 0
};

/// Enum /Script/SB.ESBItemActionType
/// Size: 0x01 (1 bytes)
enum class ESBItemActionType : uint8_t
{
	None                                                                             = 0,
	Acquire                                                                          = 1,
	Remove                                                                           = 2,
	Consume                                                                          = 3,
	MustAcquisition                                                                  = 4
};

/// Enum /Script/SB.ESBEventUIActionType
/// Size: 0x01 (1 bytes)
enum class ESBEventUIActionType : uint8_t
{
	None                                                                             = 0,
	OpenUI                                                                           = 1,
	ActionEvent                                                                      = 2,
	AlbumNotifyUpdate                                                                = 3,
	HUDInputLock                                                                     = 4,
	GameMenuInputLock                                                                = 5,
	NikkeHUDSendUIWidgetEvent                                                        = 6
};

/// Enum /Script/SB.ESBQuestMissionDataType
/// Size: 0x01 (1 bytes)
enum class ESBQuestMissionDataType : uint8_t
{
	None                                                                             = 0,
	Int                                                                              = 1,
	Float                                                                            = 2,
	String                                                                           = 3
};

/// Enum /Script/SB.ESBLevelSequenceContentsType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceContentsType : uint8_t
{
	Default                                                                          = 0,
	SubTitle                                                                         = 1
};

/// Enum /Script/SB.ESBLevelSequencePlayType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequencePlayType : uint8_t
{
	ESBPlayType_Play                                                                 = 0,
	ESBPlayType_Jump                                                                 = 1,
	ESBPlayType_Stop                                                                 = 2
};

/// Enum /Script/SB.ESBEngineTheaterInput
/// Size: 0x01 (1 bytes)
enum class ESBEngineTheaterInput : uint8_t
{
	Key1                                                                             = 1,
	Key2                                                                             = 2,
	Key3                                                                             = 3,
	Key4                                                                             = 4
};

/// Enum /Script/SB.ESBEngineTheaterEvent
/// Size: 0x01 (1 bytes)
enum class ESBEngineTheaterEvent : uint8_t
{
	Play                                                                             = 0,
	End                                                                              = 1,
	ShotSubtitle                                                                     = 2,
	ShotDialogue                                                                     = 3,
	ShotInputCounter                                                                 = 4,
	Input                                                                            = 5
};

/// Enum /Script/SB.ESBZoneEventActorTriggerType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventActorTriggerType : uint8_t
{
	None                                                                             = 0,
	DestructionFromActorAttack                                                       = 1,
	DestructionFromActorMove                                                         = 2,
	DestructionFromActorRuleMove                                                     = 3,
	DestructionFromActorRangedAttack                                                 = 4
};

/// Enum /Script/SB.ESBRewardUIType
/// Size: 0x01 (1 bytes)
enum class ESBRewardUIType : uint8_t
{
	Default                                                                          = 0,
	Special                                                                          = 1
};

/// Enum /Script/SB.ESBRewardGroupDropType
/// Size: 0x01 (1 bytes)
enum class ESBRewardGroupDropType : uint8_t
{
	ESBRewardGroupDrop_All                                                           = 0,
	ESBRewardGroupDrop_RandomEach                                                    = 1,
	ESBRewardGroupDrop_RandomWeight                                                  = 2,
	ESBRewardGroupDrop_DropRateRandomEach                                            = 3
};

/// Enum /Script/SB.ESBRewardGroupPickType
/// Size: 0x01 (1 bytes)
enum class ESBRewardGroupPickType : uint8_t
{
	ESBRewardGroupPick_Fixed                                                         = 0,
	ESBRewardGroupPick_Group                                                         = 1
};

/// Enum /Script/SB.ESBInteractionQuestEventType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionQuestEventType : uint8_t
{
	ProgressCounterTask                                                              = 0
};

/// Enum /Script/SB.ESBInteractionUIDataType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionUIDataType : uint8_t
{
	None                                                                             = 0,
	Description                                                                      = 1
};

/// Enum /Script/SB.ESBInteractionTargetShopData
/// Size: 0x01 (1 bytes)
enum class ESBInteractionTargetShopData : uint8_t
{
	ESBIAOverrideField_None                                                          = 0,
	ESBIAOverrideField_Owner                                                         = 1
};

/// Enum /Script/SB.ESBInteractionValueApplyType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionValueApplyType : uint8_t
{
	ESBIAValueApply_None                                                             = 0,
	ESBIAValueApply_Absolute                                                         = 1,
	ESBIAValueApply_Add                                                              = 2
};

/// Enum /Script/SB.ESBInteractionConditionCheckType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionConditionCheckType : uint8_t
{
	ESBIAConditionCheck_None                                                         = 0,
	ESBIAConditionCheck_First                                                        = 1,
	ESBIAConditionCheck_Second                                                       = 2
};

/// Enum /Script/SB.ESBInteractionPreDataType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionPreDataType : uint8_t
{
	None                                                                             = 0,
	InteractionUIData_Description                                                    = 1
};

/// Enum /Script/SB.ESBInteractionNodeType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionNodeType : uint8_t
{
	ESBIANode_None                                                                   = 0,
	ESBIANode_RootNode                                                               = 1,
	ESBIANode_EventNode                                                              = 2,
	ESBIANode_ConditionNode                                                          = 3,
	ESBIANode_Switch                                                                 = 4,
	ESBIANode_ResultSwitch                                                           = 5,
	ESBIANode_Root                                                                   = 6,
	ESBIANode_Action                                                                 = 7,
	ESBIANode_ChangeProperty                                                         = 8,
	ESBIANode_Puzzle                                                                 = 9,
	ESBIANode_UI                                                                     = 10,
	ESBIANode_InteractCamp                                                           = 11,
	ESBIANode_SaveGame                                                               = 12,
	ESBIANode_ChangeStateLinkEnv                                                     = 13,
	ESBIANode_DebugPrintStringNode                                                   = 14,
	ESBIANode_Cancel                                                                 = 15,
	ESBIANode_SetCustomValue                                                         = 16,
	ESBIANode_IntCompare                                                             = 17,
	ESBIANode_Grab                                                                   = 18,
	ESBIANode_PreDataNode                                                            = 19,
	ESBIANode_InteractionUIData                                                      = 20,
	ESBIANode_QuestEvent                                                             = 21,
	ESBIANode_GetRandomInt                                                           = 22,
	ESBIANode_SwitchInt                                                              = 23,
	ESBIANode_TemplateStart                                                          = 24,
	ESBIANode_TemplateEnd                                                            = 25,
	ESBIANode_TemplateInst                                                           = 26,
	ESBIANode_FailNotify                                                             = 27,
	ESBIANode_Goto                                                                   = 28,
	ESBIANode_GotoLabel                                                              = 29,
	ESBIANode_Tick                                                                   = 30,
	ESBIANode_SelectDataSwitch                                                       = 31,
	ESBIANode_ShopUI                                                                 = 32,
	ESBIANode_TemplateInstV2                                                         = 33,
	ESBIANode_TemplateV2                                                             = 34,
	ESBIANode_UISystemNotice                                                         = 35,
	ESBIANode_EnterNikkeStage                                                        = 36,
	ESBIANode_ClearedNikkeStage                                                      = 37,
	ESBIANode_Num                                                                    = 38
};

/// Enum /Script/SB.ESBInteractionEventType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionEventType : uint8_t
{
	ESBIAEvent_None                                                                  = 0,
	ESBIAEvent_ZoneEvent                                                             = 1,
	ESBIAEvent_PlayTheater                                                           = 2,
	ESBIAEvent_AcquireQuest                                                          = 3,
	ESBIAEvent_PlayLevelSeq                                                          = 4,
	ESBIAEvent_ChangeEnvState                                                        = 5,
	ESBIAEvent_SetEnvActive                                                          = 6,
	ESBIAEvent_ConsumeItem                                                           = 7,
	ESBIAEvent_AcquireItem                                                           = 8,
	ESBIAEvent_RemoveItem                                                            = 9,
	ESBIAEvent_RewardGroup                                                           = 10,
	ESBIAEvent_DespawnItem                                                           = 11,
	ESBIAEvent_SupplyChargeItem                                                      = 12,
	ESBIAEvent_Num                                                                   = 13
};

/// Enum /Script/SB.ESBInteractionHoldDurationType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionHoldDurationType : uint8_t
{
	ESBInteractionHoldDuration_Slow                                                  = 0,
	ESBInteractionHoldDuration_Normal                                                = 1,
	ESBInteractionHoldDuration_Fast                                                  = 2,
	ESBInteractionHoldDuration_Immediate                                             = 3
};

/// Enum /Script/SB.ESBInteractionMoveType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionMoveType : uint8_t
{
	ESBInteractionMove_None                                                          = 0,
	ESBInteractionMove_Walk                                                          = 1,
	ESBInteractionMove_Warp                                                          = 2
};

/// Enum /Script/SB.ESBInteractionOwnerRotationType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionOwnerRotationType : uint8_t
{
	ESBInteractionOwnerRotation_None                                                 = 0,
	ESBInteractionOwnerRotation_ToCaster                                             = 1,
	ESBInteractionOwnerRotation_DoNotRotate                                          = 2
};

/// Enum /Script/SB.ESBInteractShowPlayRuleType
/// Size: 0x01 (1 bytes)
enum class ESBInteractShowPlayRuleType : uint8_t
{
	None                                                                             = 0,
	Static                                                                           = 1,
	PointName                                                                        = 2
};

/// Enum /Script/SB.ESBInteractionStepState
/// Size: 0x01 (1 bytes)
enum class ESBInteractionStepState : uint8_t
{
	ESBInteraction_None                                                              = 0,
	ESBInteraction_Executable                                                        = 1,
	ESBInteraction_Ready                                                             = 2,
	ESBInteraction_SuccessHoldTime                                                   = 3,
	ESBInteraction_DoAction                                                          = 4,
	ESBInteraction_Running                                                           = 5,
	ESBInteraction_Cancel                                                            = 6
};

/// Enum /Script/SB.ESBInteractionInputState
/// Size: 0x01 (1 bytes)
enum class ESBInteractionInputState : uint8_t
{
	ESBInteraction_Released                                                          = 0,
	ESBInteraction_Pressed                                                           = 1
};

/// Enum /Script/SB.ESBInteractionCancelFilterType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionCancelFilterType : uint8_t
{
	None                                                                             = 0,
	Laser                                                                            = 1
};

/// Enum /Script/SB.ESBInteractionRelevantType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionRelevantType : uint8_t
{
	ESBInteractionRelevant_None                                                      = 0,
	ESBInteractionRelevant_AcquireEpicQuest                                          = 1,
	ESBInteractionRelevant_AcquireSubQuest                                           = 2,
	ESBInteractionRelevant_UpdateEpicQuest                                           = 3,
	ESBInteractionRelevant_UpdateSubQuest                                            = 4,
	ESBInteractionRelevant_Enhance                                                   = 5,
	ESBInteractionRelevant_Exospine                                                  = 6,
	ESBInteractionRelevant_PlayerSkill                                               = 7,
	ESBInteractionRelevant_DronUpgrade                                               = 8,
	ESBInteractionRelevant_CraftNanosuit                                             = 9,
	ESBInteractionRelevant_UITutorial                                                = 10,
	ESBInteractionRelevant_FirstInteraction                                          = 11,
	ESBInteractionRelevant_UnlockSkillShow                                           = 12
};

/// Enum /Script/SB.ESBInteractionResultType
/// Size: 0x01 (1 bytes)
enum class ESBInteractionResultType : uint8_t
{
	ESBInteractionResult_None                                                        = 0,
	ESBInteractionResult_Success                                                     = 1,
	ESBInteractionResult_Cancel                                                      = 2,
	ESBInteractionResult_Fail                                                        = 3
};

/// Enum /Script/SB.ESBInteractionActionCategory
/// Size: 0x01 (1 bytes)
enum class ESBInteractionActionCategory : uint8_t
{
	ESBInteractionCategory_None                                                      = 0,
	ESBInteractionCategory_Main                                                      = 1,
	ESBInteractionCategory_Sub                                                       = 2
};

/// Enum /Script/SB.ESBActorInteractionStepEvent
/// Size: 0x01 (1 bytes)
enum class ESBActorInteractionStepEvent : uint8_t
{
	None                                                                             = 0,
	Start                                                                            = 1,
	Finish                                                                           = 2
};

/// Enum /Script/SB.ESBItemLureWeightUpType
/// Size: 0x01 (1 bytes)
enum class ESBItemLureWeightUpType : uint8_t
{
	None                                                                             = 0,
	Small                                                                            = 1,
	Medium                                                                           = 2,
	Large                                                                            = 3
};

/// Enum /Script/SB.ESBItemOverrideSaveType
/// Size: 0x01 (1 bytes)
enum class ESBItemOverrideSaveType : uint8_t
{
	None                                                                             = 0,
	Save                                                                             = 1,
	NoneSave                                                                         = 2
};

/// Enum /Script/SB.ESBItemSaveType
/// Size: 0x01 (1 bytes)
enum class ESBItemSaveType : uint8_t
{
	None                                                                             = 0,
	Save                                                                             = 1
};

/// Enum /Script/SB.ESBItemNotificationType
/// Size: 0x01 (1 bytes)
enum class ESBItemNotificationType : uint8_t
{
	Default                                                                          = 0,
	Always                                                                           = 1,
	Ignore                                                                           = 2,
	Hidden                                                                           = 3,
	CharLevel                                                                        = 4
};

/// Enum /Script/SB.ESBItemSpawnRangeType
/// Size: 0x01 (1 bytes)
enum class ESBItemSpawnRangeType : uint8_t
{
	None                                                                             = 0,
	RandomRange                                                                      = 1,
	SequentialArc                                                                    = 2
};

/// Enum /Script/SB.ESBItemBucketEvent
/// Size: 0x01 (1 bytes)
enum class ESBItemBucketEvent : uint8_t
{
	None                                                                             = -1,
	Load                                                                             = 0,
	Add                                                                              = 1,
	Remove                                                                           = 2,
	Consume                                                                          = 3
};

/// Enum /Script/SB.ESBItemBucketType
/// Size: 0x01 (1 bytes)
enum class ESBItemBucketType : uint8_t
{
	None                                                                             = 0,
	Inventory                                                                        = 1,
	Zone                                                                             = 2,
	World                                                                            = 3,
	Max                                                                              = 4
};

/// Enum /Script/SB.ESBItemEquipStatType
/// Size: 0x01 (1 bytes)
enum class ESBItemEquipStatType : uint8_t
{
	BaseStat                                                                         = 1,
	MainStat1                                                                        = 11,
	MainStat2                                                                        = 12,
	SubStat1                                                                         = 21,
	SubStat2                                                                         = 22,
	SubStat3                                                                         = 23,
	SubStat4                                                                         = 24,
	SubStat5                                                                         = 25
};

/// Enum /Script/SB.ESBItemRarityType
/// Size: 0x01 (1 bytes)
enum class ESBItemRarityType : uint8_t
{
	None                                                                             = 0,
	Common                                                                           = 1,
	Uncommon                                                                         = 2,
	Rare                                                                             = 3,
	Epic                                                                             = 4,
	Legendary                                                                        = 5
};

/// Enum /Script/SB.ESBItemCategory
/// Size: 0x01 (1 bytes)
enum class ESBItemCategory : uint8_t
{
	None                                                                             = 0,
	BetaCrystal                                                                      = 1,
	Gear                                                                             = 2,
	ExoSpine                                                                         = 3,
	NanoSuit                                                                         = 4,
	Potion                                                                           = 5,
	SkillPoint                                                                       = 6,
	Quest                                                                            = 7,
	SubQuest                                                                         = 8,
	Weapon                                                                           = 9,
	Material                                                                         = 10,
	Core                                                                             = 11,
	RecoveryPotion                                                                   = 12,
	Bullet                                                                           = 13,
	BulletPackage                                                                    = 14,
	Revival                                                                          = 15,
	Grenade                                                                          = 16,
	Tool                                                                             = 17,
	Fish                                                                             = 18,
	Lure                                                                             = 19,
	ETC                                                                              = 20,
	Hair                                                                             = 21,
	FaceAccessory                                                                    = 22,
	EarRing                                                                          = 23,
	Recipe                                                                           = 24,
	Can                                                                              = 25,
	Lily                                                                             = 26,
	Adam                                                                             = 27,
	Drone                                                                            = 28,
	SPLevel                                                                          = 29,
	Record                                                                           = 30
};

/// Enum /Script/SB.ESBConditionTriggerRunType
/// Size: 0x01 (1 bytes)
enum class ESBConditionTriggerRunType : uint8_t
{
	None                                                                             = 0,
	Once                                                                             = 1,
	Repeat                                                                           = 2
};

/// Enum /Script/SB.ESBConditionTriggerExecType
/// Size: 0x01 (1 bytes)
enum class ESBConditionTriggerExecType : uint8_t
{
	None                                                                             = 0,
	ToTrue                                                                           = 1,
	ToFalse                                                                          = 2,
	RunTime                                                                          = 3
};

/// Enum /Script/SB.ESBZoneObjControlActionType
/// Size: 0x01 (1 bytes)
enum class ESBZoneObjControlActionType : uint8_t
{
	ESBObjCtrlActionType_None                                                        = 0,
	ESBObjCtrlActionType_Reset                                                       = 1,
	ESBObjCtrlActionType_ResetConditionTrigger                                       = 2,
	ESBObjCtrlActionType_RetargetSpawnPoint                                          = 3,
	ESBObjCtrlActionType_ResetWithTransform                                          = 4,
	ESBObjCtrlActionType_ResetStencil                                                = 5
};

/// Enum /Script/SB.ESBObjectState
/// Size: 0x01 (1 bytes)
enum class ESBObjectState : uint8_t
{
	ESBObject_None                                                                   = 0,
	ESBObject_Enable                                                                 = 1,
	ESBObject_Disable                                                                = 2
};

/// Enum /Script/SB.ESBZoneCampObjectType
/// Size: 0x01 (1 bytes)
enum class ESBZoneCampObjectType : uint8_t
{
	None                                                                             = 0,
	VendingMachine                                                                   = 1,
	FullCampTeleportMachine                                                          = 2,
	TetrapodTeleportMachine                                                          = 3,
	SkillMachine                                                                     = 4,
	Turntable                                                                        = 5,
	Storage                                                                          = 6,
	Chair                                                                            = 7
};

/// Enum /Script/SB.ESBZoneEnvChildObjectType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEnvChildObjectType : uint8_t
{
	ESBZoneEnvChildObjType_None                                                      = 0,
	ESBZoneEnvChildObjType_PhysicMainComp                                            = 1,
	ESBZoneEnvChildObjType_Num                                                       = 2
};

/// Enum /Script/SB.ESBSaveGameCompModeType
/// Size: 0x01 (1 bytes)
enum class ESBSaveGameCompModeType : uint8_t
{
	ESBSaveGameCompMode_Save                                                         = 0,
	ESBSaveGameCompMode_DontSave                                                     = 1
};

/// Enum /Script/SB.ESBZoneCampType
/// Size: 0x01 (1 bytes)
enum class ESBZoneCampType : uint8_t
{
	None                                                                             = 0,
	SaveVolume                                                                       = 1,
	SimplyCamp                                                                       = 2,
	FullCamp                                                                         = 3,
	Tetrapod                                                                         = 4,
	PhoneBooth                                                                       = 5
};

/// Enum /Script/SB.ESBInteractCampType
/// Size: 0x01 (1 bytes)
enum class ESBInteractCampType : uint8_t
{
	ESBInteractCamp_Interact                                                         = 0,
	ESBInteractCamp_InteractWithResetZone                                            = 1,
	ESBInteractCamp_OnlyResetZone                                                    = 2
};

/// Enum /Script/SB.ESBZoneEventInteractSaveType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventInteractSaveType : uint8_t
{
	ESBZoneEventInteractSave_None                                                    = 0,
	ESBZoneEventInteractSave_Immediate                                               = 1,
	ESBZoneEventInteractSave_FinishSequence                                          = 2
};

/// Enum /Script/SB.ESBAdjustInteractPosType
/// Size: 0x01 (1 bytes)
enum class ESBAdjustInteractPosType : uint8_t
{
	None                                                                             = 0,
	TargetRange                                                                      = 1,
	TargetRangeForce                                                                 = 2,
	AxisX                                                                            = 3,
	AxisY                                                                            = 4,
	AxisZ                                                                            = 5
};

/// Enum /Script/SB.ESBEnvProgressNotifyFireType
/// Size: 0x01 (1 bytes)
enum class ESBEnvProgressNotifyFireType : uint8_t
{
	ESBEnvProgressNotifyFire_Always                                                  = 0,
	ESBEnvProgressNotifyFire_Once                                                    = 1,
	ESBEnvProgressNotifyFire_Ignore                                                  = 2
};

/// Enum /Script/SB.ESBZoneEnvProgressNotifyType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEnvProgressNotifyType : uint8_t
{
	ESBEnvProgressNotify_ZoneEvent                                                   = 0
};

/// Enum /Script/SB.ESBZoneEnvControlType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEnvControlType : uint8_t
{
	ESBZoneEnvCtrlType_None                                                          = 0,
	ESBZoneEnvCtrlType_BaseState                                                     = 1,
	ESBZoneEnvCtrlType_StateProgress                                                 = 2,
	ESBZoneEnvCtrlType_SetStateProgress                                              = 3,
	ESBZoneEnvCtrlType_ProgressSpeed                                                 = 4,
	ESBZoneEnvCtrlType_ProgressCurValue                                              = 5,
	ESBZoneEnvCtrlType_ProgressRange                                                 = 6,
	ESBZoneEnvCtrlType_CampProperty                                                  = 7
};

/// Enum /Script/SB.ESBZoneEnvResetFilterType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEnvResetFilterType : uint8_t
{
	None                                                                             = 0,
	EnvEnable                                                                        = 1,
	EnvDisable                                                                       = 2
};

/// Enum /Script/SB.ESBZoneEnvNotifyType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEnvNotifyType : uint8_t
{
	GrabCancel                                                                       = 0
};

/// Enum /Script/SB.ESBSpawnRuleType
/// Size: 0x01 (1 bytes)
enum class ESBSpawnRuleType : uint8_t
{
	ESBSpawnRule_Once                                                                = 0,
	ESBSpawnRule_RespawnAfterDead                                                    = 1
};

/// Enum /Script/SB.ESBZoneEnvStateIndex
/// Size: 0x01 (1 bytes)
enum class ESBZoneEnvStateIndex : uint8_t
{
	ESBEnvState_None                                                                 = -1,
	ESBEnvState_Slot0                                                                = 0,
	ESBEnvState_Slot1                                                                = 1,
	ESBEnvState_Slot2                                                                = 2,
	ESBEnvState_Slot3                                                                = 3,
	ESBEnvState_Slot4                                                                = 4,
	ESBEnvState_Slot5                                                                = 5,
	ESBEnvState_Slot6                                                                = 6,
	ESBEnvState_Slot7                                                                = 7,
	ESBEnvState_Slot8                                                                = 8,
	ESBEnvState_Slot9                                                                = 9,
	ESBEnvState_Num                                                                  = 10
};

/// Enum /Script/SB.ESBZoneEnvLinkIndex
/// Size: 0x01 (1 bytes)
enum class ESBZoneEnvLinkIndex : uint8_t
{
	ESBEnvLinkIndex                                                                  = 0,
	ESBEnvLinkIndex2                                                                 = 1,
	ESBEnvLinkIndex3                                                                 = 2,
	ESBEnvLinkIndex4                                                                 = 3,
	ESBEnvLinkIndex5                                                                 = 4,
	ESBEnvLinkIndex6                                                                 = 5,
	ESBEnvLinkIndex7                                                                 = 6,
	ESBEnvLinkIndex8                                                                 = 7,
	ESBEnvLinkIndex9                                                                 = 8,
	ESBEnvLinkIndex10                                                                = 9
};

/// Enum /Script/SB.ESBZoneEnvActiveBoundType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEnvActiveBoundType : uint8_t
{
	ESBENV_BoundType_None                                                            = 0,
	ESBENV_BoundType_Sphere                                                          = 1,
	ESBENV_BoundType_Box                                                             = 2
};

/// Enum /Script/SB.ESBZoneEnvActiveState
/// Size: 0x01 (1 bytes)
enum class ESBZoneEnvActiveState : uint8_t
{
	ESBENV_State_None                                                                = 0,
	ESBENV_State_Active                                                              = 1,
	ESBENV_State_Deactive                                                            = 2
};

/// Enum /Script/SB.ESBEnvironmentType
/// Size: 0x01 (1 bytes)
enum class ESBEnvironmentType : uint8_t
{
	ESBENV_Switch                                                                    = 0,
	ESBENV_Camp                                                                      = 1,
	ESBENV_Progress                                                                  = 2,
	ESBENV_Trigger                                                                   = 3,
	ESBENV_Can                                                                       = 4,
	ESBENV_NikkeDefenseArea                                                          = 5,
	ESBENV_NikkeLostGoods_Normal                                                     = 6,
	ESBENV_NikkeLostGoods_Request                                                    = 7
};

/// Enum /Script/SB.ESBConditionCalcuationType
/// Size: 0x01 (1 bytes)
enum class ESBConditionCalcuationType : uint8_t
{
	None                                                                             = 0,
	Self                                                                             = 1,
	Percent                                                                          = 2,
	Absolute                                                                         = 3
};

/// Enum /Script/SB.ESBConditionType
/// Size: 0x01 (1 bytes)
enum class ESBConditionType : uint8_t
{
	None                                                                             = 0,
	RequireItem                                                                      = 1,
	QuestState                                                                       = 2,
	EnvState                                                                         = 3,
	PlayerLevel                                                                      = 4,
	ActorHP                                                                          = 5,
	ActorBeta                                                                        = 6,
	ActorShield                                                                      = 7,
	ActorStamina                                                                     = 8,
	ActorState                                                                       = 9,
	ActorCondition                                                                   = 10,
	ActorMovement                                                                    = 11,
	ActorEffect                                                                      = 12,
	ActorAchievement                                                                 = 13,
	ActorIsBattle                                                                    = 14,
	ItemSpawnCheck                                                                   = 15,
	ItemChargeCheck                                                                  = 16,
	NetworkEnable                                                                    = 17,
	PlayerIsDead                                                                     = 18,
	ActorInRange                                                                     = 19,
	TheaterPlaying                                                                   = 20,
	QuestTaskProgress                                                                = 21,
	QuestTaskGroupProgress                                                           = 22,
	AchievementProgress                                                              = 23,
	ActorBurst                                                                       = 24,
	IsInWorld                                                                        = 25,
	IsAliveSpawnActor                                                                = 26,
	InteractionCustomValue                                                           = 27,
	GameOption                                                                       = 28,
	ActorFishingMode                                                                 = 29,
	IsValidActor                                                                     = 30,
	HUDNotifyCoreComplete                                                            = 31,
	PlayGo                                                                           = 32,
	Entitlement                                                                      = 33,
	FirstTimeTrainingRoom                                                            = 34,
	HasAggro                                                                         = 35,
	ActiveUI                                                                         = 36,
	IsHUDNotifyEmpty                                                                 = 37,
	OnlyQuestState                                                                   = 38,
	EquipLure                                                                        = 39,
	CanOpenWorldMap                                                                  = 40,
	IsTrialVersion                                                                   = 41,
	EnvStateProgress                                                                 = 42,
	IsNewGamePlus                                                                    = 43,
	PlayerLevelArray                                                                 = 44,
	IsInZone                                                                         = 45,
	ActivateDLC                                                                      = 46,
	SummerEventContents                                                              = 47,
	ChristmasEventContents                                                           = 48,
	ItemEquipCheck                                                                   = 49,
	PlayTime                                                                         = 50,
	HasReceivedCoupon                                                                = 51,
	IsPhotoModeOn                                                                    = 52
};

/// Enum /Script/SB.ESBLevelObjectType
/// Size: 0x01 (1 bytes)
enum class ESBLevelObjectType : uint8_t
{
	ESBLevelObjType_None                                                             = 0,
	ESBLevelObjType_Zone                                                             = 1,
	ESBLevelObjType_Env                                                              = 2,
	ESBLevelObjType_Npc                                                              = 3,
	ESBLevelObjType_Player                                                           = 4,
	ESBLevelObjType_Trigger                                                          = 5,
	ESBLevelObjType_Item                                                             = 6,
	ESBLevelObjType_ZoneEventActor                                                   = 7,
	ESBLevelObjType_WorldObject                                                      = 8,
	ESBLevelObjType_Num                                                              = 9
};

/// Enum /Script/SB.ESBCharacterFootPlacement
/// Size: 0x01 (1 bytes)
enum class ESBCharacterFootPlacement : uint8_t
{
	ESBCharacter_Foot_None                                                           = 0,
	ESBCharacter_Foot_LFront                                                         = 1,
	ESBCharacter_Foot_RFront                                                         = 2
};

/// Enum /Script/SB.ESBCharacterBattleMode
/// Size: 0x01 (1 bytes)
enum class ESBCharacterBattleMode : uint8_t
{
	ESBCharacterBattle_None                                                          = 0,
	ESBCharacterBattle_Battle                                                        = 1
};

/// Enum /Script/SB.ESBMaterialParamType
/// Size: 0x01 (1 bytes)
enum class ESBMaterialParamType : uint8_t
{
	Param_none                                                                       = 0,
	Param_float                                                                      = 1,
	Param_vector                                                                     = 2
};

/// Enum /Script/SB.ESBBlackboardVarType
/// Size: 0x01 (1 bytes)
enum class ESBBlackboardVarType : uint8_t
{
	INT                                                                              = 0,
	FLOAT                                                                            = 1,
	VECTOR                                                                           = 2,
	BOOL                                                                             = 3
};

/// Enum /Script/SB.ESBEquation
/// Size: 0x01 (1 bytes)
enum class ESBEquation : uint8_t
{
	ESBEQ_None                                                                       = 0,
	ESBEQ_Equal                                                                      = 1,
	ESBEQ_NOT                                                                        = 2,
	ESBEQ_OR                                                                         = 3,
	ESBEQ_AND                                                                        = 4,
	ESBEQ_GEQ                                                                        = 5,
	ESBEQ_LEQ                                                                        = 6,
	ESBEQ_LESS                                                                       = 7,
	ESBEQ_GREATER                                                                    = 8
};

/// Enum /Script/SB.ESBQuestWarpType
/// Size: 0x01 (1 bytes)
enum class ESBQuestWarpType : uint8_t
{
	None                                                                             = 0,
	ToLocation                                                                       = 1,
	ToSpawnPoint                                                                     = 2,
	ToZoneCamp                                                                       = 3,
	ToRequestBoard                                                                   = 4
};

/// Enum /Script/SB.ESBQuestUIType
/// Size: 0x01 (1 bytes)
enum class ESBQuestUIType : uint8_t
{
	ShowAll                                                                          = 0,
	HideAll                                                                          = 1,
	TaskNoticeOnly                                                                   = 2
};

/// Enum /Script/SB.ESBQuestTaskDescriptionUIType
/// Size: 0x01 (1 bytes)
enum class ESBQuestTaskDescriptionUIType : uint8_t
{
	Always                                                                           = 0,
	AfterComplete                                                                    = 1
};

/// Enum /Script/SB.ESBQuestTaskUIType
/// Size: 0x01 (1 bytes)
enum class ESBQuestTaskUIType : uint8_t
{
	ESBTaskUI_Default                                                                = 0,
	ESBTaskUI_HideProgress                                                           = 1,
	ESBTaskUI_ShowProgress                                                           = 2
};

/// Enum /Script/SB.ESBQuestStepType
/// Size: 0x01 (1 bytes)
enum class ESBQuestStepType : uint8_t
{
	ESBMissionStep_Linear                                                            = 0,
	ESBMissionStep_Paraller                                                          = 1
};

/// Enum /Script/SB.ESBQuestTaskState
/// Size: 0x01 (1 bytes)
enum class ESBQuestTaskState : uint8_t
{
	None                                                                             = 0,
	Progress                                                                         = 1,
	Complete                                                                         = 2,
	Failed                                                                           = 3,
	Inactive                                                                         = 4
};

/// Enum /Script/SB.ESBQuestTaskGroupState
/// Size: 0x01 (1 bytes)
enum class ESBQuestTaskGroupState : uint8_t
{
	TaskGroup_None                                                                   = 0,
	TaskGroup_Progress                                                               = 1,
	TaskGroup_Complete                                                               = 2,
	TaskGroup_Failed                                                                 = 3
};

/// Enum /Script/SB.ESBQuestState
/// Size: 0x01 (1 bytes)
enum class ESBQuestState : uint8_t
{
	ESBState_None                                                                    = -1,
	ESBState_NotAcquire                                                              = 0,
	ESBState_Progress                                                                = 1,
	ESBState_CanComplete                                                             = 2,
	ESBState_Complete                                                                = 3,
	ESBState_AcquireReward                                                           = 4,
	ESBState_Failed                                                                  = 5,
	ESBState_Num                                                                     = 6
};

/// Enum /Script/SB.ESBDisplayRequestBoardType
/// Size: 0x01 (1 bytes)
enum class ESBDisplayRequestBoardType : uint8_t
{
	BaseBoard                                                                        = 0,
	NikkeCollaboBoard                                                                = 1
};

/// Enum /Script/SB.ESBQuestRequestType
/// Size: 0x01 (1 bytes)
enum class ESBQuestRequestType : uint8_t
{
	Normal                                                                           = 0,
	CantAccept                                                                       = 1
};

/// Enum /Script/SB.ESBQuestType
/// Size: 0x01 (1 bytes)
enum class ESBQuestType : uint8_t
{
	ESBQuest_Epic                                                                    = 0,
	ESBQuest_Sub                                                                     = 1,
	ESBQuest_Request                                                                 = 2,
	ESBQuest_Instant                                                                 = 3
};

/// Enum /Script/SB.ESBConditionResultType
/// Size: 0x01 (1 bytes)
enum class ESBConditionResultType : uint8_t
{
	ESBResult_None                                                                   = 0,
	ESBResult_Equal                                                                  = 1,
	ESBResult_Not                                                                    = 2,
	ESBResult_Touch                                                                  = 3,
	ESBResult_UnTouch                                                                = 4,
	ESBResult_Success                                                                = 5,
	ESBResult_Fail                                                                   = 6,
	ESBResult_Num                                                                    = 7
};

/// Enum /Script/SB.ESBQuestRequireItemTaskCheckType
/// Size: 0x01 (1 bytes)
enum class ESBQuestRequireItemTaskCheckType : uint8_t
{
	ItemAlias                                                                        = 1,
	ItemCategory                                                                     = 2,
	ItemCategoryTag                                                                  = 3
};

/// Enum /Script/SB.ESBQuestRequireItemTaskCountType
/// Size: 0x01 (1 bytes)
enum class ESBQuestRequireItemTaskCountType : uint8_t
{
	InventoryAndObtain                                                               = 0,
	OnlyInventory                                                                    = 1,
	OnlyObtain                                                                       = 2
};

/// Enum /Script/SB.ESBQuestEventType
/// Size: 0x01 (1 bytes)
enum class ESBQuestEventType : uint8_t
{
	ProgressCounterTask                                                              = 0,
	CompleteRequest                                                                  = 1
};

/// Enum /Script/SB.ESBQuestTaskConditonType
/// Size: 0x01 (1 bytes)
enum class ESBQuestTaskConditonType : uint8_t
{
	CompleteCount                                                                    = 0
};

/// Enum /Script/SB.ESBQuestMissionType
/// Size: 0x01 (1 bytes)
enum class ESBQuestMissionType : uint8_t
{
	ESBMission_None                                                                  = 0,
	ESBMission_KillTarget                                                            = 1,
	ESBMission_EnterZone                                                             = 2,
	ESBMission_LeaveZone                                                             = 3,
	ESBMission_EnterTrigger                                                          = 4,
	ESBMission_LeaveTrigger                                                          = 5,
	ESBMission_DelayTime                                                             = 6,
	ESBMission_ActorInBounds                                                         = 7,
	ESBMission_RequireItem                                                           = 8,
	ESBMission_Interaction                                                           = 9,
	ESBMission_EnvState                                                              = 10,
	ESBMission_TaskCondition                                                         = 11,
	ESBMission_Counter                                                               = 12,
	ESBMission_Scan                                                                  = 13,
	ESBMission_Achievement                                                           = 14,
	ESBMission_ChangeStateAreaVolume                                                 = 15,
	ESBMission_InteractionChangeCustomValue                                          = 16,
	ESBMission_RequestCompleteCondition                                              = 17,
	ESBMission_HitCameraVolume                                                       = 18,
	ESBMission_Num                                                                   = 19
};

/// Enum /Script/SB.ESBPhysicHitType
/// Size: 0x01 (1 bytes)
enum class ESBPhysicHitType : uint8_t
{
	AddForceDir                                                                      = 0,
	AddForceImpactPoint                                                              = 1
};

/// Enum /Script/SB.ESBConditionEventType
/// Size: 0x01 (1 bytes)
enum class ESBConditionEventType : uint8_t
{
	ESBCondition_None                                                                = -1,
	ESBCondition_EnterZone                                                           = 0,
	ESBCondition_LeaveZone                                                           = 1,
	ESBCondition_AttachEffect                                                        = 2,
	ESBCondition_DetachEffect                                                        = 3,
	ESBCondition_CharacterDead                                                       = 4,
	ESBCondition_UseSkill                                                            = 5,
	ESBCondition_TouchTrigger                                                        = 6,
	ESBCondition_SpawnActor                                                          = 7,
	ESBCondition_SpawnItem                                                           = 8,
	ESBCondition_EngineEventTheater                                                  = 9,
	ESBCondition_AcquireItem                                                         = 10,
	ESBCondition_FinishInteraction                                                   = 11,
	ESBCondition_AcquireQuest                                                        = 12,
	ESBCondition_UpdateQuest                                                         = 13,
	ESBCondition_CompleteQuest                                                       = 14,
	ESBCondition_FailQuest                                                           = 15,
	ESBCondition_QuestPathProgress                                                   = 16,
	ESBCondition_ChangeEnvState                                                      = 17,
	ESBCondition_FinishPuzzle                                                        = 18,
	ESBCondition_FinishGrab                                                          = 19,
	ESBCondition_CompleteInitializeZone                                              = 20,
	ESBCondition_Scan                                                                = 21,
	ESBCondition_UpdateAchievement                                                   = 22,
	ESBCondition_ChangeStateAreaVolume                                               = 23,
	ESBCondition_InteractionChangeCustomValue                                        = 24,
	ESBCondition_Num                                                                 = 25
};

/// Enum /Script/SB.ESBLevelTargetActor
/// Size: 0x01 (1 bytes)
enum class ESBLevelTargetActor : uint8_t
{
	ESBLevelTarget_None                                                              = 0,
	ESBLevelTarget_Self                                                              = 1,
	ESBLevelTarget_Specified                                                         = 2,
	ESBLevelTarget_SpecifiedEnv                                                      = 3,
	ESBLevelTarget_SpecifiedEventActor                                               = 4,
	ESBLevelTarget_LocalPlayer                                                       = 5
};

/// Enum /Script/SB.ESBAIDetectTargetCancel
/// Size: 0x01 (1 bytes)
enum class ESBAIDetectTargetCancel : uint8_t
{
	ZeroHP                                                                           = 0,
	Despawn                                                                          = 1,
	Destroy                                                                          = 2
};

/// Enum /Script/SB.ESBAIDetectTargetFindOP
/// Size: 0x01 (1 bytes)
enum class ESBAIDetectTargetFindOP : uint8_t
{
	Near                                                                             = 0,
	Far                                                                              = 1,
	MinHP                                                                            = 2,
	MaxHP                                                                            = 3
};

/// Enum /Script/SB.ESBCustomDepthStencilValue
/// Size: 0x04 (4 bytes)
enum class ESBCustomDepthStencilValue : uint32_t
{
	None                                                                             = 0,
	Enemy                                                                            = 1,
	Item                                                                             = 2,
	Interaction_WallBlock                                                            = 3,
	Interaction                                                                      = 4,
	Ally                                                                             = 5,
	Env                                                                              = 6,
	EnvDisable                                                                       = 7,
	Enemy_Stealth                                                                    = 9,
	PC                                                                               = 10,
	Drone                                                                            = 12
};

/// Enum /Script/SB.ESBKeyEvent
/// Size: 0x01 (1 bytes)
enum class ESBKeyEvent : uint8_t
{
	None                                                                             = 0,
	GameOption_Key                                                                   = 1,
	CrossKey_Up                                                                      = 2,
	CrossKey_Down                                                                    = 3,
	CrossKey_Left                                                                    = 4,
	CrossKey_Right                                                                   = 5,
	LeftKey_Click                                                                    = 6,
	RightKey_Up                                                                      = 7,
	RightKey_Down                                                                    = 8,
	RightKey_Left                                                                    = 9,
	RightKey_Right                                                                   = 10,
	RightKey_Click                                                                   = 11,
	LeftShoulderKey                                                                  = 12,
	RightShoulderKey                                                                 = 13,
	LeftTriggerKey                                                                   = 14,
	RightTriggerKey                                                                  = 15,
	FocusChangeKey                                                                   = 16,
	SystemFunction1                                                                  = 17,
	SystemFunction2                                                                  = 18,
	Max                                                                              = 19
};

/// Enum /Script/SB.ESBAnimState
/// Size: 0x01 (1 bytes)
enum class ESBAnimState : uint8_t
{
	Walk                                                                             = 0,
	Swimming                                                                         = 1,
	UnderWaterSwimming                                                               = 2,
	Sliding                                                                          = 3,
	SlopeMoving                                                                      = 4,
	EventMove_SideToSide                                                             = 5,
	EventMove_Rod                                                                    = 6,
	EventMove_SideRod                                                                = 7
};

/// Enum /Script/SB.ESBAISkillComboType
/// Size: 0x01 (1 bytes)
enum class ESBAISkillComboType : uint8_t
{
	None                                                                             = 0,
	TableCommand                                                                     = 1,
	TableSkillFlag                                                                   = 2
};

/// Enum /Script/SB.ESBAIActorType
/// Size: 0x01 (1 bytes)
enum class ESBAIActorType : uint8_t
{
	Self                                                                             = 0,
	Target                                                                           = 1,
	Owner                                                                            = 2,
	SubTarget                                                                        = 3
};

/// Enum /Script/SB.ESBCompare
/// Size: 0x01 (1 bytes)
enum class ESBCompare : uint8_t
{
	Equal                                                                            = 0,
	NotEqual                                                                         = 1,
	Less                                                                             = 2,
	LessOrEqual                                                                      = 3,
	Greater                                                                          = 4,
	GreaterOrEqual                                                                   = 5
};

/// Enum /Script/SB.ESBProjectileMovementType
/// Size: 0x01 (1 bytes)
enum class ESBProjectileMovementType : uint8_t
{
	Velocity                                                                         = 0,
	ParabolicMotion                                                                  = 1,
	GuidedMissile                                                                    = 2
};

/// Enum /Script/SB.ESBProjectileTarget
/// Size: 0x01 (1 bytes)
enum class ESBProjectileTarget : uint8_t
{
	MainActor                                                                        = 0,
	OtherActor                                                                       = 1,
	SetLocation                                                                      = 2,
	StartToDestDirection                                                             = 3,
	SkillTargetLocation                                                              = 4,
	InputTransform                                                                   = 5
};

/// Enum /Script/SB.ESBAIAggroLevel
/// Size: 0x01 (1 bytes)
enum class ESBAIAggroLevel : uint8_t
{
	AIAggroLevel_Peaceful                                                            = 0,
	AIAggroLevel_Battle                                                              = 1
};

/// Enum /Script/SB.ESBAIDetectResultType
/// Size: 0x01 (1 bytes)
enum class ESBAIDetectResultType : uint8_t
{
	AIDetectResult_NotDetect                                                         = 0,
	AIDetectResult_Doubt                                                             = 1,
	AIDetectResult_Observe                                                           = 2,
	AIDetectResult_Detect                                                            = 3
};

/// Enum /Script/SB.ESBActorStatCheckType
/// Size: 0x01 (1 bytes)
enum class ESBActorStatCheckType : uint8_t
{
	ActorStatCheckType_None                                                          = 0,
	ActorStatCheckType_OverRate                                                      = 1,
	ActorStatCheckType_UnderRate                                                     = 2,
	ActorStatCheckType_Over                                                          = 3,
	ActorStatCheckType_Under                                                         = 4
};

/// Enum /Script/SB.ESBBoneBlendType
/// Size: 0x01 (1 bytes)
enum class ESBBoneBlendType : uint8_t
{
	BoneBlendType                                                                    = 0,
	BoneBlendType2                                                                   = 1,
	BoneBlendType3                                                                   = 2,
	BoneBlendType4                                                                   = 3,
	BoneBlendType5                                                                   = 4
};

/// Enum /Script/SB.ESBSkelMeshSlot
/// Size: 0x01 (1 bytes)
enum class ESBSkelMeshSlot : uint8_t
{
	ESBMesh_Body                                                                     = 0,
	ESBMesh_Face                                                                     = 1,
	ESBMesh_Hair1                                                                    = 2,
	ESBMesh_Ponytail                                                                 = 3,
	ESBMesh_PonytailShort                                                            = 4,
	ESBMesh_Weapon1                                                                  = 5,
	ESBMesh_Weapon2                                                                  = 6,
	ESBMesh_Weapon3                                                                  = 7,
	ESBMesh_Weapon4                                                                  = 8,
	ESBMesh_Accessory1                                                               = 9,
	ESBMesh_Accessory2                                                               = 10,
	ESBMesh_Accessory3                                                               = 11,
	ESBMesh_Accessory4                                                               = 12,
	ESBMesh_Accessory5                                                               = 13,
	ESBMesh_Etc1                                                                     = 14,
	ESBMesh_Etc2                                                                     = 15,
	ESBMesh_Num                                                                      = 16,
	ESBMesh_All                                                                      = 100
};

/// Enum /Script/SB.ESBSequencePlayTransformCastType
/// Size: 0x01 (1 bytes)
enum class ESBSequencePlayTransformCastType : uint8_t
{
	None                                                                             = 0,
	SBActorCenter                                                                    = 1
};

/// Enum /Script/SB.ESBZoneEventPendingType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventPendingType : uint8_t
{
	None                                                                             = 0,
	LevelStream                                                                      = 1,
	BindActors                                                                       = 2,
	BindActorsWithLevelStream                                                        = 3
};

/// Enum /Script/SB.ESBSequenceBindTargetType
/// Size: 0x01 (1 bytes)
enum class ESBSequenceBindTargetType : uint8_t
{
	None                                                                             = 0,
	ZoneEnv                                                                          = 1,
	LastInteractCamp                                                                 = 2,
	LastInteractFullCamp                                                             = 3,
	ActorTag                                                                         = 4,
	ActorTagLevel                                                                    = 5
};

/// Enum /Script/SB.ESBSequencePlayTransformType
/// Size: 0x01 (1 bytes)
enum class ESBSequencePlayTransformType : uint8_t
{
	ESBSeqPlayTransform_None                                                         = 0,
	ESBSeqPlayTransform_Owner                                                        = 1,
	ESBSeqPlayTransform_Caster                                                       = 2,
	ESBSeqPlayTransform_LocalPlayer                                                  = 3,
	ESBSeqPlayTransform_SpawnAlias                                                   = 4,
	ESBSeqPlayTransform_SpawnPointActor                                              = 5,
	ESBSeqPlayTransform_ZoneEnvActor                                                 = 6
};

/// Enum /Script/SB.ESBMeshAttachType
/// Size: 0x01 (1 bytes)
enum class ESBMeshAttachType : uint8_t
{
	Root                                                                             = 0,
	Socket                                                                           = 1
};

/// Enum /Script/SB.ESBZoneEventHitAttackerType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventHitAttackerType : uint8_t
{
	ZoneEvent_Hit_Default                                                            = 0,
	ZoneEvent_Hit_Projectile                                                         = 1,
	ZoneEvent_Hit_Laser                                                              = 2
};

/// Enum /Script/SB.ESBZoneEventItemType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventItemType : uint8_t
{
	ZoneEvent_Item_Spawn                                                             = 0
};

/// Enum /Script/SB.ESBZoneEventTheaterType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventTheaterType : uint8_t
{
	ZoneEvent_Theater_Play                                                           = 0,
	ZoneEvent_Theater_Stop                                                           = 1
};

/// Enum /Script/SB.ESBZoneEventLevelSeqType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventLevelSeqType : uint8_t
{
	ZoneEvent_LevelSeq_Play                                                          = 0,
	ZoneEvent_LevelSeq_Stop                                                          = 1
};

/// Enum /Script/SB.ESBZoneEventZoneControlTarget
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventZoneControlTarget : uint8_t
{
	ZoneEvent_ZoneControl_Active                                                     = 0,
	ZoneEvent_ZoneControl_Deactive                                                   = 1
};

/// Enum /Script/SB.ESBZoneEventActorCaster
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventActorCaster : uint8_t
{
	None                                                                             = 0,
	ActorTargetToPlayer                                                              = 1,
	ActorTargetToTag                                                                 = 2
};

/// Enum /Script/SB.ESBZoneEventEventorType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventEventorType : uint8_t
{
	ZoneEventEventorType_None                                                        = 0,
	ZoneEventEventorType_Eventor                                                     = 1,
	ZoneEventEventorType_LocalPlayer                                                 = 2
};

/// Enum /Script/SB.ESBQuestEventTargetType
/// Size: 0x01 (1 bytes)
enum class ESBQuestEventTargetType : uint8_t
{
	None                                                                             = 0,
	Eventor                                                                          = 1,
	LocalPlayer                                                                      = 2
};

/// Enum /Script/SB.ESBZoneEventActorTarget
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventActorTarget : uint8_t
{
	ZoneEvent_ActorTargetToPlayer                                                    = 0,
	ZoneEvent_ActorTargetToTag                                                       = 1,
	ZoneEvent_ActorTargetToEventor                                                   = 2,
	ZoneEvent_ActorTargetToTagContain                                                = 3
};

/// Enum /Script/SB.ESBZoneResetKeepObjTMType
/// Size: 0x01 (1 bytes)
enum class ESBZoneResetKeepObjTMType : uint8_t
{
	None                                                                             = 0,
	SpawnPoint                                                                       = 1
};

/// Enum /Script/SB.ESBInteractRelevantType
/// Size: 0x01 (1 bytes)
enum class ESBInteractRelevantType : uint8_t
{
	None                                                                             = 0,
	Quest                                                                            = 1
};

/// Enum /Script/SB.ESBSpawnRotationType
/// Size: 0x01 (1 bytes)
enum class ESBSpawnRotationType : uint8_t
{
	None                                                                             = 0,
	SpawnPointRot                                                                    = 1,
	ToEventor                                                                        = 2
};

/// Enum /Script/SB.ESBZoneSpawnType
/// Size: 0x01 (1 bytes)
enum class ESBZoneSpawnType : uint8_t
{
	ESBSpawn_EnterZone                                                               = 0,
	ESBSpawn_ZoneEvent                                                               = 1,
	ESBSpawn_QuestEvent                                                              = 2
};

/// Enum /Script/SB.ESBZoneEventType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventType : uint8_t
{
	ZoneEvent_Spawn                                                                  = 0,
	ZoneEvent_PlayLevelSeq                                                           = 1,
	ZoneEvent_AttachActorEffect                                                      = 2,
	ZoneEvent_ZoneControl                                                            = 3,
	ZoneEvent_AcquireQuest                                                           = 4,
	ZoneEvent_Despawn                                                                = 5,
	ZoneEvent_Theater                                                                = 6,
	ZoneEvent_Item                                                                   = 7,
	ZoneEvent_AIDecorator                                                            = 8,
	ZoneEvent_ZoneObjControl                                                         = 9,
	ZoneEvent_ZoneEnvControl                                                         = 10,
	ZoneEvent_UIAction                                                               = 11,
	ZoneEvent_EffectVolumeControl                                                    = 12,
	ZoneEvent_ItemAction                                                             = 13,
	ZoneEvent_Interaction                                                            = 14,
	ZoneEvent_StartMatchMaking                                                       = 15,
	ZoneEvent_StopMatchMaking                                                        = 16,
	ZoneEvent_RequestPathWay                                                         = 17,
	ZoneEvent_AreaControlVolumeControl                                               = 18,
	ZoneEvent_ReturnToSinglePlay                                                     = 19,
	ZoneEvent_ActorBattleState                                                       = 20,
	ZoneEvent_GuideAction                                                            = 21,
	ZoneEvent_ZonePhaseEvent                                                         = 22,
	ZoneEvent_ActorActive                                                            = 23,
	ZoneEvent_InteractCamp                                                           = 24,
	ZoneEvent_LaserControl                                                           = 25,
	ZoneEvent_PlayerWarp                                                             = 26,
	ZoneEvent_MetaAI                                                                 = 27,
	ZoneEvent_ActivateHint                                                           = 28,
	ZoneEvent_CompleteHint                                                           = 29,
	ZoneEvent_ZoneEventActorControl                                                  = 30,
	ZoneEvent_ChangeZone                                                             = 31,
	ZoneEvent_FinishBossChallenge                                                    = 32,
	ZoneEvent_NikkeNextWave                                                          = 33,
	ZoneEvent_FlushNikkePendingEvent                                                 = 34
};

/// Enum /Script/SB.ESBZoneEventConditionCheckType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventConditionCheckType : uint8_t
{
	RunEvent                                                                         = 0,
	RequestEvent                                                                     = 1,
	None                                                                             = 2
};

/// Enum /Script/SB.ESBTrainningRoomCommandType
/// Size: 0x01 (1 bytes)
enum class ESBTrainningRoomCommandType : uint8_t
{
	ESBTrainningRoomCommand_None                                                     = 0,
	ESBTrainningRoomCommand_RetryRoom                                                = 1,
	ESBTrainningRoomCommand_TogglePlayerInfinity                                     = 2,
	ESBTrainningRoomCommand_AIType_Left                                              = 3,
	ESBTrainningRoomCommand_AIType_Right                                             = 4,
	ESBTrainningRoomCommand_RightTrigger                                             = 5,
	ESBTrainningRoomCommand_HideHUD                                                  = 6,
	ESBTrainningRoomCommand_Exit                                                     = 7
};

/// Enum /Script/SB.ESBTrainningRoomNpcAIType
/// Size: 0x01 (1 bytes)
enum class ESBTrainningRoomNpcAIType : uint8_t
{
	TrainningRoomNpcAI_None                                                          = 0,
	TrainningRoomNpcAI_SkillStop                                                     = 1,
	TrainningRoomNpcAI_SkillNormal                                                   = 2,
	TrainningRoomNpcAI_SkillSpecial                                                  = 3,
	TrainningRoomNpcAI_SkillAll                                                      = 4,
	TrainningRoomNpcAI_Num                                                           = 5
};

/// Enum /Script/SB.ESBTrainningRoomChangeType
/// Size: 0x01 (1 bytes)
enum class ESBTrainningRoomChangeType : uint8_t
{
	ESBTrainningRoomChange_None                                                      = 0,
	ESBTrainningRoomChange_PlayerInfiniteEffect                                      = 1,
	ESBTrainningRoomChange_EnemyAIType                                               = 2
};

/// Enum /Script/SB.ESBTrainningRoomState
/// Size: 0x01 (1 bytes)
enum class ESBTrainningRoomState : uint8_t
{
	None                                                                             = 0,
	RequestEnter                                                                     = 1,
	Entered                                                                          = 2,
	RequestLeave                                                                     = 3
};

/// Enum /Script/SB.ESBZoneState
/// Size: 0x01 (1 bytes)
enum class ESBZoneState : uint8_t
{
	None                                                                             = 0,
	CreateZone                                                                       = 1,
	ResetZone                                                                        = 2,
	CompleteCreateZone                                                               = 3,
	CompleteResetZone                                                                = 4,
	DestroyZone                                                                      = 5
};

/// Enum /Script/SB.ESBStayZoneSaveType
/// Size: 0x01 (1 bytes)
enum class ESBStayZoneSaveType : uint8_t
{
	StayZoneSaveType_None                                                            = 0,
	StayZoneSaveType_Save                                                            = 1
};

/// Enum /Script/SB.ESBZoneNpcTransitType
/// Size: 0x01 (1 bytes)
enum class ESBZoneNpcTransitType : uint8_t
{
	ESBZoneObjectTransitType_None                                                    = 0,
	ESBZoneObjectTransitType_TargetEnemy                                             = 1
};

/// Enum /Script/SB.ESBZoneEffectLeaveState
/// Size: 0x01 (1 bytes)
enum class ESBZoneEffectLeaveState : uint8_t
{
	ZoneEffectLeaveState_None                                                        = 0,
	ZoneEffectLeaveState_KeepState                                                   = 1
};

/// Enum /Script/SB.ESBZoneEffectTargetType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEffectTargetType : uint8_t
{
	ZoneEffectTargetType_None                                                        = 0,
	ZoneEffectTargetType_Player                                                      = 1,
	ZoneEffectTargetType_EveryActors                                                 = 2
};

/// Enum /Script/SB.ESBNikkeStageType
/// Size: 0x01 (1 bytes)
enum class ESBNikkeStageType : uint8_t
{
	NikkeStageType_None                                                              = 0,
	NikkeStageType_Annihilation                                                      = 1,
	NikkeStageType_BossBattle                                                        = 2,
	NikkeStageType_Occupation                                                        = 3
};

/// Enum /Script/SB.ESBNikkeStageEntryType
/// Size: 0x01 (1 bytes)
enum class ESBNikkeStageEntryType : uint8_t
{
	ESBNikkeStageRequestType_Entry                                                   = 0,
	ESBNikkeStageRequestType_ReEntry                                                 = 1
};

/// Enum /Script/SB.ESBZoneType
/// Size: 0x01 (1 bytes)
enum class ESBZoneType : uint8_t
{
	Zone_None                                                                        = 0,
	Zone_Public                                                                      = 1,
	Zone_TrainningRoom                                                               = 2,
	Zone_SpiritRoom                                                                  = 3,
	Zone_TestZone                                                                    = 4,
	Zone_BossChallenge                                                               = 5,
	Zone_Nikke                                                                       = 6
};

/// Enum /Script/SB.ESBZoneTriggerDoingType
/// Size: 0x01 (1 bytes)
enum class ESBZoneTriggerDoingType : uint8_t
{
	ZoneTrigger_Do_Interaction                                                       = 0,
	ZoneTrigger_Do_InRange                                                           = 1,
	ZoneTrigger_Do_Box                                                               = 2
};

/// Enum /Script/SB.ESBZoneTriggerType
/// Size: 0x01 (1 bytes)
enum class ESBZoneTriggerType : uint8_t
{
	ZoneTriggerType_Character                                                        = 0,
	ZoneTriggerType_ZoneObject                                                       = 1,
	ZoneTriggerType_WithInteraction                                                  = 2,
	ZoneTriggerType_Max                                                              = 3
};

/// Enum /Script/SB.ESBProjectileType
/// Size: 0x01 (1 bytes)
enum class ESBProjectileType : uint8_t
{
	ProjectileType_Missile                                                           = 0,
	ProjectileType_Beam                                                              = 1,
	ProjectileType_Boids                                                             = 2
};

/// Enum /Script/SB.ESBProjectileHitType
/// Size: 0x01 (1 bytes)
enum class ESBProjectileHitType : uint8_t
{
	ProjectileHitType_Once                                                           = 0,
	ProjectileHitType_Repeat                                                         = 1,
	ProjectileHitType_NoHit                                                          = 2
};

/// Enum /Script/SB.ESBConditionCheckType
/// Size: 0x01 (1 bytes)
enum class ESBConditionCheckType : uint8_t
{
	ConditionCheckType_None                                                          = 0,
	ConditionCheckType_False                                                         = 1,
	ConditionCheckType_True                                                          = 2
};

/// Enum /Script/SB.ESBSkillCommandInputType
/// Size: 0x01 (1 bytes)
enum class ESBSkillCommandInputType : uint8_t
{
	SkillCommandInputType_Press                                                      = 0,
	SkillCommandInputType_Release                                                    = 1,
	SkillCommandInputType_Hold                                                       = 2,
	SkillCommandInputType_HoldKeep                                                   = 3,
	SkillCommandInputType_HoldAndRelease                                             = 4
};

/// Enum /Script/SB.ESBEquipmentForceBody
/// Size: 0x01 (1 bytes)
enum class ESBEquipmentForceBody : uint8_t
{
	EquipmentForceBody_None                                                          = 0,
	EquipmentForceBody_Type1                                                         = 1
};

/// Enum /Script/SB.ESBEquipmentSubType
/// Size: 0x01 (1 bytes)
enum class ESBEquipmentSubType : uint8_t
{
	EquipmentSubType_None                                                            = 0,
	EquipmentSubType_OneHandSword                                                    = 1
};

/// Enum /Script/SB.ESBEquipmentType
/// Size: 0x01 (1 bytes)
enum class ESBEquipmentType : uint8_t
{
	EquipmentType_None                                                               = 0,
	EquipmentType_Weapon                                                             = 1,
	EquipmentType_SecondaryWeapon                                                    = 2,
	EquipmentType_ThirdlyWeapon                                                      = 3,
	EquipmentType_FourthlyWeapon                                                     = 4,
	EquipmentType_Hair1                                                              = 5,
	EquipmentType_Ponytail                                                           = 6,
	EquipmentType_PonytailShort                                                      = 7,
	EquipmentType_Accessory1                                                         = 8,
	EquipmentType_Accessory2                                                         = 9,
	EquipmentType_Accessory3                                                         = 10,
	EquipmentType_Accessory4                                                         = 11,
	EquipmentType_Accessory5                                                         = 12,
	EquipmentType_Body                                                               = 13,
	EquipmentType_Num                                                                = 14
};

/// Enum /Script/SB.ESBAttackedCollisionGroupResultType
/// Size: 0x01 (1 bytes)
enum class ESBAttackedCollisionGroupResultType : uint8_t
{
	AttackedCollisionGroupResultType_Default                                         = 0,
	AttackedCollisionGroupResultType_Parry                                           = 1,
	AttackedCollisionGroupResultType_Guard                                           = 2
};

/// Enum /Script/SB.ESBSkillHitResult
/// Size: 0x01 (1 bytes)
enum class ESBSkillHitResult : uint8_t
{
	SkillHitResult_None                                                              = 0,
	SkillHitResult_Hit                                                               = 1,
	SkillHitResult_Miss                                                              = 2,
	SkillHitResult_Parry                                                             = 3,
	SkillHitResult_SuperParry                                                        = 4,
	SkillHitResult_Guard                                                             = 5,
	SkillHitResult_GuardBlock                                                        = 6
};

/// Enum /Script/SB.ESBMoveRotationDirectionType
/// Size: 0x01 (1 bytes)
enum class ESBMoveRotationDirectionType : uint8_t
{
	MoveRotationDirectionType_Both                                                   = 0,
	MoveRotationDirectionType_Left                                                   = 1,
	MoveRotationDirectionType_Right                                                  = 2
};

/// Enum /Script/SB.ESBMoveRotationType
/// Size: 0x01 (1 bytes)
enum class ESBMoveRotationType : uint8_t
{
	MoveRotationType_None                                                            = 0,
	MoveRotationType_Target                                                          = 1,
	MoveRotationType_Target_TimeBase                                                 = 2,
	MoveRotationType_Target_FirstPosition                                            = 3,
	MoveRotationType_InputDirection                                                  = 4,
	MoveRotationType_Saved                                                           = 5,
	MoveRotationType_LocalAxis                                                       = 6,
	MoveRotationType_4Directions                                                     = 7,
	MoveRotationType_4DirectionsAndIgnoreFront                                       = 8,
	MoveRotationType_MoveDirection                                                   = 9,
	MoveRotationType_MoveInverseDirection                                            = 10,
	MoveRotationType_SafeAreaCheckWhenLinkFrom                                       = 11,
	MoveRotationType_LinkTo                                                          = 12,
	MoveRotationType_WorldAxis                                                       = 13
};

/// Enum /Script/SB.ESBMovePositionType
/// Size: 0x01 (1 bytes)
enum class ESBMovePositionType : uint8_t
{
	MovePositionType_Self                                                            = 0,
	MovePositionType_Target                                                          = 1,
	MovePositionType_Saved                                                           = 2,
	MovePositionType_InsideTargetOrSelf                                              = 3,
	MovePositionType_TargetSocket                                                    = 4,
	MovePositionType_WorldPosition                                                   = 5
};

/// Enum /Script/SB.ESBMoveTransformType
/// Size: 0x01 (1 bytes)
enum class ESBMoveTransformType : uint8_t
{
	MoveTransformType_None                                                           = 0,
	MoveTransformType_Static                                                         = 1,
	MoveTransformType_LinkTo                                                         = 2,
	MoveTransformType_LinkTo_Velocity                                                = 3,
	MoveTransformType_LinkFrom                                                       = 4,
	MoveTransformType_ZeroVelocity                                                   = 5,
	MoveTransformType_LocalAxis                                                      = 6,
	MoveTransformType_Airborne                                                       = 7,
	MoveTransformType_Fly                                                            = 8,
	MoveTransformType_Fall                                                           = 9,
	MoveTransformType_RootMotion                                                     = 10,
	MoveTransformType_WorldLocation                                                  = 11,
	MoveTransformType_TargetAround                                                   = 12,
	MoveTransformType_PathWay                                                        = 13,
	MoveTransformType_SwimmingDash                                                   = 14
};

/// Enum /Script/SB.ESBMoveDefaultInputDirection
/// Size: 0x01 (1 bytes)
enum class ESBMoveDefaultInputDirection : uint8_t
{
	MoveDefaultInputDirection_SelfForward                                            = 0,
	MoveDefaultInputDirection_SelfBack                                               = 1
};

/// Enum /Script/SB.ESBMoveDirectionAxis
/// Size: 0x01 (1 bytes)
enum class ESBMoveDirectionAxis : uint8_t
{
	MoveDirectionAxis_Self                                                           = 0,
	MoveDirectionAxis_Target                                                         = 1,
	MoveDirectionAxis_SelfToTarget                                                   = 2,
	MoveDirectionAxis_InputDirectionWorld                                            = 3,
	MoveDirectionAxis_InputDirectionLocal                                            = 4,
	MoveDirectionAxis_HitDirection                                                   = 5,
	MoveDirectionAxis_Velocity                                                       = 6,
	MoveDirectionAxis_Velocity2D                                                     = 7,
	MoveDirectionAxis_SelfToTarget2D                                                 = 8,
	MoveDirectionAxis_InputDirectionWorldWithoutZ                                    = 9
};

/// Enum /Script/SB.ESBIKTraceDirection
/// Size: 0x01 (1 bytes)
enum class ESBIKTraceDirection : uint8_t
{
	ESBIKTrace_Forward                                                               = 0,
	ESBIKTrace_Right                                                                 = 1,
	ESBIKTrace_Up                                                                    = 2,
	ESBIKTrace_InverseForward                                                        = 3,
	ESBIKTrace_InverseRight                                                          = 4,
	ESBIKTrace_InverseUp                                                             = 5
};

/// Enum /Script/SB.ESBCollisionShapeCheckType
/// Size: 0x01 (1 bytes)
enum class ESBCollisionShapeCheckType : uint8_t
{
	MeleeAttack                                                                      = 0,
	RangeAttack                                                                      = 1,
	None                                                                             = 2
};

/// Enum /Script/SB.ESBCollisionShape
/// Size: 0x01 (1 bytes)
enum class ESBCollisionShape : uint8_t
{
	Line                                                                             = 0,
	Box                                                                              = 1,
	Sphere                                                                           = 2,
	Capsule                                                                          = 3
};

/// Enum /Script/SB.ESBCheckShape
/// Size: 0x01 (1 bytes)
enum class ESBCheckShape : uint8_t
{
	CheckShape_None                                                                  = 0,
	CheckShape_2DBox                                                                 = 1,
	CheckShape_3DBox                                                                 = 2,
	CheckShape_2DArc                                                                 = 3,
	CheckShape_3DArc                                                                 = 4,
	CheckShape_2DCircle                                                              = 5,
	CheckShape_3DCircle                                                              = 6,
	CheckShape_3DCylinder                                                            = 7
};

/// Enum /Script/SB.ESBActorSortType
/// Size: 0x01 (1 bytes)
enum class ESBActorSortType : uint8_t
{
	ActorSortType_None                                                               = 0,
	ActorSortType_Near                                                               = 1,
	ActorSortType_Far                                                                = 2,
	ActorSortType_LowHp                                                              = 3,
	ActorSortType_HighHp                                                             = 4,
	ActorSortType_Parry                                                              = 5,
	ActorSortType_Block                                                              = 6,
	ActorSortType_SmallAngle                                                         = 7
};

/// Enum /Script/SB.ESBActorStatTextType
/// Size: 0x01 (1 bytes)
enum class ESBActorStatTextType : uint8_t
{
	Static                                                                           = 0,
	Percent                                                                          = 1
};

/// Enum /Script/SB.ESBActorCalculatedStatType
/// Size: 0x01 (1 bytes)
enum class ESBActorCalculatedStatType : uint8_t
{
	None                                                                             = 0,
	MaxDamageReduction                                                               = 1,
	Num                                                                              = 2
};

/// Enum /Script/SB.ESBActorStatType
/// Size: 0x01 (1 bytes)
enum class ESBActorStatType : uint8_t
{
	ActorStatType_None                                                               = 0,
	ActorStatType_HP                                                                 = 1,
	ActorStatType_MaxHP                                                              = 2,
	ActorStatType_MaxHPValue                                                         = 3,
	ActorStatType_MaxHPRate                                                          = 4,
	ActorStatType_SP                                                                 = 5,
	ActorStatType_MoveSpeedRate                                                      = 6,
	ActorStatType_Shield                                                             = 7,
	ActorStatType_MaxShield                                                          = 8,
	ActorStatType_MaxShieldValue                                                     = 9,
	ActorStatType_MaxShieldRate                                                      = 10,
	ActorStatType_ShieldBlock                                                        = 11,
	ActorStatType_Stamina                                                            = 12,
	ActorStatType_MaxStamina                                                         = 13,
	ActorStatType_BetaGauge                                                          = 14,
	ActorStatType_MaxBetaGauge                                                       = 15,
	ActorStatType_MaxBetaGaugeValue                                                  = 16,
	ActorStatType_MaxBetaGaugeRate                                                   = 17,
	ActorStatType_BurstGauge                                                         = 18,
	ActorStatType_MaxBurstGauge                                                      = 19,
	ActorStatType_MaxBurstGaugeValue                                                 = 20,
	ActorStatType_MaxBurstGaugeRate                                                  = 21,
	ActorStatType_TachyGauge                                                         = 22,
	ActorStatType_MaxTachyGauge                                                      = 23,
	ActorStatType_MaxTachyGaugeValue                                                 = 24,
	ActorStatType_MaxTachyGaugeRate                                                  = 25,
	ActorStatType_PhysicAttackPower                                                  = 26,
	ActorStatType_PhysicAttackPowerValue                                             = 27,
	ActorStatType_PhysicAttackPowerRate                                              = 28,
	ActorStatType_RangeAttackPower                                                   = 29,
	ActorStatType_RangeAttackPowerValue                                              = 30,
	ActorStatType_RangeAttackPowerRate                                               = 31,
	ActorStatType_ShieldAttackPower                                                  = 32,
	ActorStatType_ShieldAttackPowerValue                                             = 33,
	ActorStatType_ShieldAttackPowerRate                                              = 34,
	ActorStatType_StaminaAttackPower                                                 = 35,
	ActorStatType_AttackSpeed                                                        = 36,
	ActorStatType_HitDefenseLevel                                                    = 37,
	ActorStatType_CriticalPercentage                                                 = 38,
	ActorStatType_CriticalValueRate                                                  = 39,
	ActorStatType_ShieldIgnorePercentage                                             = 40,
	ActorStatType_AdditiveSkillDamageRate                                            = 41,
	ActorStatType_ShieldRegenPerSecond                                               = 42,
	ActorStatType_ShieldRegenPerSecondValue                                          = 43,
	ActorStatType_ShieldRegenPerSecondRate                                           = 44,
	ActorStatType_ShieldRegenPerSecondWhenBattle                                     = 45,
	ActorStatType_ShieldRegenPerSecondWhenBattleValue                                = 46,
	ActorStatType_ShieldRegenPerSecondWhenBattleRate                                 = 47,
	ActorStatType_StaminaRegenPerSecond                                              = 48,
	ActorStatType_HPRegenPerSecond                                                   = 49,
	ActorStatType_HPRegenPerSecondValue                                              = 50,
	ActorStatType_HPRegenPerSecondRate                                               = 51,
	ActorStatType_SmallWeightTypeDamageAdditiveRate                                  = 52,
	ActorStatType_LargeWeightTypeDamageAdditiveRate                                  = 53,
	ActorStatType_RangeAttackDamageAdditiveRate                                      = 54,
	ActorStatType_MeleeAttackDamageReductionRate                                     = 55,
	ActorStatType_RangeAttackDamageReductionRate                                     = 56,
	ActorStatType_DownStateDamageAdditiveRate                                        = 57,
	ActorStatType_GroggyStateDamageAdditiveRate                                      = 58,
	ActorStatType_AirborneStateDamageAdditiveRate                                    = 59,
	ActorStatType_FireAttributeDamageReductionRate                                   = 60,
	ActorStatType_IceAttributeDamageReductionRate                                    = 61,
	ActorStatType_LightningAttributeDamageReductionRate                              = 62,
	ActorStatType_PoisonAttributeDamageReductionRate                                 = 63,
	ActorStatType_BetaGaugeAdditiveRate                                              = 64,
	ActorStatType_AdditiveFixedDamage                                                = 65,
	ActorStatType_LowHpDamageAdditiveRate                                            = 66,
	ActorStatType_HighHpDamageAdditiveRate                                           = 67,
	ActorStatType_DOTDamageAdditiveRate                                              = 68,
	ActorStatType_TachyGaugeAdditiveGainRate                                         = 69,
	ActorStatType_TachyGaugeReduceConsumeRate                                        = 70,
	ActorStatType_FinalHPDamageReduceRate                                            = 71,
	ActorStatType_FinalShieldDamageReduceRate                                        = 72,
	ActorStatType_Luck                                                               = 73,
	ActorStatType_AdditiveSkillDamageGroup1                                          = 74,
	ActorStatType_AdditiveSkillDamageGroup2                                          = 75,
	ActorStatType_AdditiveSkillDamageGroup3                                          = 76,
	ActorStatType_AdditiveSkillDamageGroup4                                          = 77,
	ActorStatType_AdditiveSkillDamageGroup5                                          = 78,
	ActorStatType_AdditiveSkillDamageGroup6                                          = 79,
	ActorStatType_AdditiveSkillDamageGroup7                                          = 80,
	ActorStatType_AdditiveSkillDamageGroup8                                          = 81,
	ActorStatType_AdditiveSkillDamageGroup9                                          = 82,
	ActorStatType_AdditiveSkillDamageGroup10                                         = 83,
	ActorStatType_DrainHpByAttackPowerRate                                           = 84,
	ActorStatType_DrainHpFixedValue                                                  = 85,
	ActorStatType_SprintableStaminaValue                                             = 86,
	ActorStatType_ItemStackRecoveryPotion                                            = 87,
	ActorStatType_ItemStackBullet1                                                   = 88,
	ActorStatType_ItemStackBullet2                                                   = 89,
	ActorStatType_ItemStackBullet3                                                   = 90,
	ActorStatType_ItemStackBullet4                                                   = 91,
	ActorStatType_ItemStackBullet5                                                   = 92,
	ActorStatType_ItemStackBullet6                                                   = 93,
	ActorStatType_ItemStackConsumable1                                               = 94,
	ActorStatType_ItemStackConsumable2                                               = 95,
	ActorStatType_ItemStackConsumable3                                               = 96,
	ActorStatType_ItemStackConsumable4                                               = 97,
	ActorStatType_ItemStackConsumable5                                               = 98,
	ActorStatType_ItemStackConsumable6                                               = 99,
	ActorStatType_ItemStackConsumable7                                               = 100,
	ActorStatType_GearSlot                                                           = 101,
	ActorStatType_ProtectorSlot                                                      = 102,
	ActorStatType_AdditiveHitLevel                                                   = 103,
	ActorStatType_TimeScale                                                          = 104,
	ActorStatType_SPLevel                                                            = 105,
	ActorStatType_SPExp                                                              = 106,
	ActorStatType_MinimumHP                                                          = 107,
	ActorStatType_FishingAttackPower                                                 = 108,
	ActorStatType_GainBetaGaugeValueOnDamaged                                        = 109,
	ActorStatType_GainBurstGaugeValueOnDamaged                                       = 110,
	ActorStatType_BurstGaugeAdditiveRate                                             = 111,
	ActorStatType_BetaCrystalAdditiveRate                                            = 112,
	ActorStatType_SPExpAdditiveRate                                                  = 113,
	ActorStatType_HealAdditiveRate                                                   = 114,
	ActorStatType_ReduceSPExpRateOnDead                                              = 115,
	ActorStatType_UnlockBurstGauge                                                   = 116,
	ActorStatType_UnlockTachyGauge                                                   = 117,
	ActorStatType_UnlockTPSMode                                                      = 118,
	ActorStatType_AdditiveJustActionTime                                             = 119,
	ActorStatType_AdditiveValueOnHealMaxHPRateByTumbler                              = 120,
	ActorStatType_OnlyForStatViewer1                                                 = 121,
	ActorStatType_OnlyForStatViewer2                                                 = 122,
	ActorStatType_OnlyForStatViewer3                                                 = 123,
	ActorStatType_OnlyForStatViewer4                                                 = 124,
	ActorStatType_OnlyForStatViewer5                                                 = 125,
	ActorStatType_OnlyForStatViewer6                                                 = 126,
	ActorStatType_OnlyForStatViewer7                                                 = 127,
	ActorStatType_OnlyForStatViewer8                                                 = 128,
	ActorStatType_OnlyForStatViewer9                                                 = 129,
	ActorStatType_OnlyForStatViewer10                                                = 130,
	ActorStatType_Num                                                                = 131
};

/// Enum /Script/SB.ESBActorStance
/// Size: 0x01 (1 bytes)
enum class ESBActorStance : uint8_t
{
	ActorStance_None                                                                 = 0,
	ActorStance_Peaceful                                                             = 1,
	ActorStance_Battle                                                               = 2,
	ActorStance_Groggy                                                               = 3,
	ActorStance_Down                                                                 = 4,
	ActorStance_Dead                                                                 = 5,
	ActorStance_Airborne                                                             = 6,
	ActorStance_Num                                                                  = 7
};

/// Enum /Script/SB.ESBSaveSubProperty
/// Size: 0x01 (1 bytes)
enum class ESBSaveSubProperty : uint8_t
{
	None                                                                             = 0,
	Hidden                                                                           = 1,
	Active                                                                           = 2,
	All                                                                              = 3
};

/// Enum /Script/SB.ESBEnterGameResult
/// Size: 0x01 (1 bytes)
enum class ESBEnterGameResult : uint8_t
{
	None                                                                             = 0,
	NotExistSaveSlot                                                                 = 1,
	NotFoundTargetCamp                                                               = 2,
	NotFoundTargetZone                                                               = 3,
	EnterFail                                                                        = 4,
	EnterSuccess                                                                     = 5
};

/// Enum /Script/SB.ESBSaveGameDataType
/// Size: 0x01 (1 bytes)
enum class ESBSaveGameDataType : uint8_t
{
	None                                                                             = 0,
	GameData                                                                         = 1,
	OptionData                                                                       = 2
};

/// Enum /Script/SB.ESBZoneObjectSaveType
/// Size: 0x01 (1 bytes)
enum class ESBZoneObjectSaveType : uint8_t
{
	ESBZoneObjSaveType_None                                                          = 0,
	ESBZoneObjSaveType_Save                                                          = 1,
	ESBZoneObjSaveType_ResetZone                                                     = 2,
	ESBZoneObjSaveType_SaveWithTransform                                             = 3,
	ESBZoneObjSaveType_ResetZoneWithTransform                                        = 4
};

/// Enum /Script/SB.ESBActorLifeState
/// Size: 0x01 (1 bytes)
enum class ESBActorLifeState : uint8_t
{
	None                                                                             = 0,
	Spawn                                                                            = 1,
	Coma                                                                             = 2,
	Dead                                                                             = 3,
	Despawn                                                                          = 4,
	Destroy                                                                          = 5,
	Spawning                                                                         = 6
};

/// Enum /Script/SB.ESBActorCondition
/// Size: 0x01 (1 bytes)
enum class ESBActorCondition : uint8_t
{
	None                                                                             = 0,
	Jumping                                                                          = 1,
	WallRun                                                                          = 2,
	Falling                                                                          = 3,
	OnGround                                                                         = 4,
	Sprint                                                                           = 5,
	Run                                                                              = 6,
	Moving                                                                           = 7,
	BlockMove                                                                        = 8,
	BlockSkill                                                                       = 9,
	Stealth                                                                          = 10,
	BattleMode                                                                       = 11,
	Max                                                                              = 12
};

/// Enum /Script/SB.ESBActorState
/// Size: 0x01 (1 bytes)
enum class ESBActorState : uint8_t
{
	ActorState_None                                                                  = 0,
	ActorState_BlockMove                                                             = 1,
	ActorState_BlockSkill                                                            = 2,
	ActorState_NoDamageNoHit                                                         = 3,
	ActorState_NoDamage                                                              = 4,
	ActorState_Cloaking                                                              = 5,
	ActorState_Down                                                                  = 6,
	ActorState_Groggy                                                                = 7,
	ActorState_Airborne                                                              = 8,
	ActorState_KnockBack                                                             = 9,
	ActorState_BlockFalling                                                          = 10,
	ActorState_BlockShieldRegen                                                      = 11,
	ActorState_BlockRotation                                                         = 12,
	ActorState_ImmuneBlockMove                                                       = 13,
	ActorState_ImmuneBlockSkill                                                      = 14,
	ActorState_ImmuneDown                                                            = 15,
	ActorState_ImmuneGroggy                                                          = 16,
	ActorState_ImmuneSkillCancel                                                     = 17,
	ActorState_ImmuneAirborne                                                        = 18,
	ActorState_ImmuneKnockBack                                                       = 19,
	ActorState_BlockingBehavior                                                      = 20,
	ActorState_BlockSkillUnImmune                                                    = 21,
	ActorState_Tumble                                                                = 22,
	ActorState_Stealth                                                               = 23,
	ActorState_BlockStaminaRegen                                                     = 24,
	ActorState_BlockSprint                                                           = 25,
	ActorState_Breakfall                                                             = 26,
	ActorState_Immortal                                                              = 27,
	ActorState_BlockJump                                                             = 28,
	ActorState_BlockHPRegen                                                          = 29,
	ActorState_BattleMode                                                            = 30,
	ActorState_BlockParry                                                            = 31,
	ActorState_DelayDeath                                                            = 32,
	ActorState_BlockRuleMove                                                         = 33,
	ActorState_BlockRuleMoveRotation                                                 = 34,
	ActorState_BlockHuddleUpAction                                                   = 35,
	ActorState_DisableTimeScale                                                      = 36,
	ActorState_DisableLockOn                                                         = 37,
	ActorState_HideHUD                                                               = 38,
	ActorState_BlockAI                                                               = 39,
	ActorState_BlockOverlapMove                                                      = 40,
	ActorState_DisableLookAtTargetBySkill                                            = 41,
	ActorState_NoScan                                                                = 42,
	ActorState_NoScanHUD                                                             = 43,
	ActorState_KeepDetectTarget                                                      = 44,
	ActorState_DisableRuleMoveBlockArea                                              = 45,
	ActorState_NarrowVision                                                          = 46,
	ActorState_BlockBodySuitChange                                                   = 47,
	ActorState_NotTargeted                                                           = 48,
	ActorState_Rage                                                                  = 49,
	ActorState_DisableHitStop                                                        = 50,
	ActorState_DoubleJump                                                            = 51,
	ActorState_DisableLockonTarget                                                   = 52,
	ActorState_DisableMountingEquipment                                              = 53,
	ActorState_DisableLockOnMissile                                                  = 54,
	ActorState_BlockRevival                                                          = 55,
	ActorState_DisableTPSBulletChange                                                = 56,
	ActorState_BlockBetaGaugeEnergySkill                                             = 57,
	ActorState_BlockHPEnergySkill                                                    = 58,
	ActorState_BlockStaminaEnergySkill                                               = 59,
	ActorState_BlockBurstGaugeEnergySkill                                            = 60,
	ActorState_InfiniteBetaGaugeEnergy                                               = 61,
	ActorState_HideLockOnUI                                                          = 62,
	ActorState_DisableControllerInput                                                = 63,
	ActorState_ActiveWeakPointDamage                                                 = 64,
	ActorState_PeacefulMode                                                          = 65,
	ActorState_DisableAutoLockOnWhenUnlockon                                         = 66,
	ActorState_BlockItemUseHeal                                                      = 67,
	ActorState_BlockItemUseUtil                                                      = 68,
	ActorState_BlockItemInteraction                                                  = 69,
	ActorState_DisablePlayDeadShow                                                   = 70,
	ActorState_DisablePlayDespawnShow                                                = 71,
	ActorState_TachyMode                                                             = 72,
	ActorState_EnableFishingTakeBack                                                 = 73,
	ActorState_BlockInteraction                                                      = 74,
	ActorState_EnableDetectCamp                                                      = 75,
	ActorState_EnableDetectNikkeLostGoods                                            = 76,
	ActorState_NotUsedBattleAnimSwitchDelay                                          = 77,
	ActorState_DisableDetectCamp                                                     = 78,
	ActorState_DisableDeadSkill                                                      = 79,
	ActorState_DisableLookAtIK                                                       = 80,
	ActorState_EnableDetectCan                                                       = 81,
	ActorState_UseOnlyComboSkill                                                     = 82,
	ActorState_NotTPSAutoTargeted                                                    = 83,
	ActorState_NotTPSMagnet                                                          = 84,
	ActorState_BlockEventMove                                                        = 85,
	ActorState_BlockItemGainShow                                                     = 86,
	ActorState_EnableFishingMode                                                     = 87,
	ActorState_DisableScreenEffect                                                   = 88,
	ActorState_BlockDetectCan                                                        = 89,
	ActorState_DisableLowHealthAlertScreenEffect                                     = 90,
	ActorState_PossibleInteraction                                                   = 91,
	ActorState_Fusion1Mode                                                           = 92,
	ActorState_Fusion2Mode                                                           = 93,
	ActorState_EnableExtraSprint                                                     = 94,
	ActorState_DisableShield                                                         = 95,
	ActorState_DisableMonsterWarp                                                    = 96,
	ActorState_DisableActionAssist                                                   = 97,
	ActorState_BlockMoveInputBlock                                                   = 98,
	ActorState_DisableeLockOnControl                                                 = 99,
	ActorState_BlockItemUseBullet                                                    = 100,
	ActorState_AutoLockonTargetAfterTPS                                              = 101,
	ActorState_SelfiePhotoMode                                                       = 102,
	ActorState_ProjectileNoHit                                                       = 103,
	ActorState_UsePlayerAIPositioning                                                = 104,
	ActorState_Max                                                                   = 105
};

/// Enum /Script/SB.ESBActorWeightType
/// Size: 0x01 (1 bytes)
enum class ESBActorWeightType : uint8_t
{
	ActorWeightType_None                                                             = 0,
	ActorWeightType_Smallest                                                         = 1,
	ActorWeightType_Small                                                            = 2,
	ActorWeightType_Normal                                                           = 3,
	ActorWeightType_Medium                                                           = 4,
	ActorWeightType_Large                                                            = 5,
	ActorWeightType_SuperLarge                                                       = 6
};

/// Enum /Script/SB.ESBProjectilePhysicsType
/// Size: 0x01 (1 bytes)
enum class ESBProjectilePhysicsType : uint8_t
{
	ProjectilePhysicsType_None                                                       = 0,
	ProjectilePhysicsType_Arrive                                                     = 1
};

/// Enum /Script/SB.ESBProjectileDestroyType
/// Size: 0x01 (1 bytes)
enum class ESBProjectileDestroyType : uint8_t
{
	ProjectileDestroyType_Life                                                       = 0,
	ProjectileDestroyType_Hit                                                        = 1,
	ProjectileDestroyType_HitAndWait                                                 = 2,
	ProjectileDestroyType_Arrive                                                     = 3,
	ProjectileDestroyType_ArriveAndWait                                              = 4,
	ProjectileDestroyType_CharacterHit                                               = 5
};

/// Enum /Script/SB.ESBProjectileState
/// Size: 0x01 (1 bytes)
enum class ESBProjectileState : uint8_t
{
	ProjectileState_Wait                                                             = 0,
	ProjectileState_Create                                                           = 1,
	ProjectileState_Shot                                                             = 2,
	ProjectileState_EndWait                                                          = 3,
	ProjectileState_End                                                              = 4
};

/// Enum /Script/SB.ESBProjectileLifeType
/// Size: 0x01 (1 bytes)
enum class ESBProjectileLifeType : uint8_t
{
	ProjectileLifeType_SkillDependent                                                = 0,
	ProjectileLifeType_StepDependent                                                 = 1,
	ProjectileLifeType_IndependentTime                                               = 2,
	ProjectileLifeType_Infinite                                                      = 3
};

/// Enum /Script/SB.ESBEffectAttributeType
/// Size: 0x01 (1 bytes)
enum class ESBEffectAttributeType : uint8_t
{
	EffectAttributeType_None                                                         = 0,
	EffectAttributeType_Physic                                                       = 1
};

/// Enum /Script/SB.ESBEffectLifeType
/// Size: 0x01 (1 bytes)
enum class ESBEffectLifeType : uint8_t
{
	EffectLifeType_SkillDependent                                                    = 0,
	EffectLifeType_StepDependent                                                     = 1,
	EffectLifeType_IndependentTime                                                   = 2,
	EffectLifeType_Infinite                                                          = 3,
	EffectLifeType_StanceDependent                                                   = 4,
	EffectLifeType_CharacterGetupTime                                                = 5,
	EffectLifeType_ProjectileDependent                                               = 6,
	EffectLifeType_BeforeNextSkill                                                   = 7,
	EffectLifeType_CharacterGroggyEndTime                                            = 8,
	EffectLifeType_NextSkillDependent                                                = 9,
	EffectLifeType_LevelSequenceDependent                                            = 10,
	EffectLifeType_EquipmentDependent                                                = 11,
	EffectLifeType_LevelSequenceDependentWithoutPlayable                             = 12
};

/// Enum /Script/SB.ESBEffectAction
/// Size: 0x01 (1 bytes)
enum class ESBEffectAction : uint8_t
{
	EffectAction_None                                                                = 0,
	EffectAction_SkillCancel                                                         = 1,
	EffectAction_TimeScale                                                           = 2,
	EffectAction_SkillCancelUnImmune                                                 = 3,
	EffectAction_ResetSkillCommandCoolTime                                           = 4,
	EffectAction_ResetSkillCommandUsableCount                                        = 5,
	EffectAction_ResetSkillUsableGroup                                               = 6,
	EffectAction_ActiveSkillCombinationCrossKey                                      = 7,
	EffectAction_SummonActor                                                         = 8,
	EffectAction_ActiveInteraction                                                   = 9,
	EffectAction_RecoveryItems                                                       = 10,
	EffectAction_AreaTimeScale                                                       = 11,
	EffectAction_TargetEncroachment                                                  = 12,
	EffectAction_AdditiveSkillCommandCoolTime                                        = 13,
	EffectAction_AdditiveSkillCoolTime                                               = 14,
	EffectAction_ShowUI                                                              = 15,
	EffectAction_PlayTheater                                                         = 16,
	EffectAction_PlayTheaterParam                                                    = 17,
	EffectAction_StopTheater                                                         = 18,
	EffectAction_AdditiveSkillEnergyAmount                                           = 19,
	EffectAction_LockOnConstructorActor                                              = 20,
	EffectAction_LockOnMainActor                                                     = 21,
	EffectAction_ItemRefill                                                          = 22,
	EffectAction_WarpToSafeLocation                                                  = 23,
	EffectAction_MountingEquipment                                                   = 24,
	EffectAction_UnmountingEquipment                                                 = 25,
	EffectAction_WarpCamp                                                            = 26,
	EffectAction_TryLinkBreak                                                        = 27,
	EffectAction_ConstructorActorSkillCancelWhenDispel                               = 28,
	EffectAction_CancelEventMove                                                     = 29,
	EffectAction_Revival                                                             = 30,
	EffectAction_TransformCharacter                                                  = 31,
	EffectAction_Possess                                                             = 32,
	EffectAction_ChangeTribe                                                         = 33,
	EffectAction_TPSMiniGame                                                         = 34,
	EffectAction_TPSNikke                                                            = 35,
	EffectAction_TPSNikkeAimTriggerEffect                                            = 36,
	EffectAction_TPSNikkeBulletTriggerEffect                                         = 37,
	EffectAction_RecoveryCollisionGroup                                              = 38,
	EffectAction_Scan                                                                = 39,
	EffectAction_NotifyTagEvent                                                      = 40,
	EffectAction_FishingMode                                                         = 41,
	EffectAction_TPS_ZoomIn                                                          = 42,
	EffectAction_DroneFixedPosition                                                  = 43,
	EffectAction_CancelAllAttacks                                                    = 44,
	EffectAction_ClearAllProjectile                                                  = 45,
	EffectAction_FishingCasting                                                      = 46,
	EffectAction_FishingSuccess                                                      = 47,
	EffectAction_AttachEquipment                                                     = 48,
	EffectAction_ImmediateDeath                                                      = 49,
	EffectAction_ImmediateDeathPossibleRevival                                       = 50,
	EffectAction_ScreenEffect                                                        = 51,
	EffectAction_TPSTutorial                                                         = 52,
	EffectAction_UIClientEvent                                                       = 53,
	EffectAction_RetryPlayGame                                                       = 54,
	EffectAction_FixedLocation                                                       = 55,
	EffectAction_CancelInteraction                                                   = 56,
	EffectAction_DisableSliceMesh                                                    = 57,
	EffectAction_ClearAllTargetingMe                                                 = 58,
	EffectAction_ZoneEventActorDestruction                                           = 59,
	EffectAction_ArcEventSpawn                                                       = 60,
	EffectAction_Countdown                                                           = 61,
	EffectAction_ActionAssist_Repulse                                                = 62,
	EffectAction_ActionAssist_Blink                                                  = 63,
	EffectAction_MonsterWarp                                                         = 64,
	EffectAction_AttachOverrideStencil                                               = 65,
	EffectAction_ForceLOD0                                                           = 66,
	EffectAction_BlockCamera                                                         = 67,
	EffectAction_SelfiePhotoMode                                                     = 68,
	EffectAction_UseSkill                                                            = 69,
	EffectAction_SkillCoolTimeScale                                                  = 70,
	EffectAction_ResetTPSAimPosition                                                 = 71,
	EffectAction_HideAllProjectile                                                   = 72,
	EffectAction_ClearAllProjectileMadeBy                                            = 73
};

/// Enum /Script/SB.ESBEffectCalculationTarget
/// Size: 0x01 (1 bytes)
enum class ESBEffectCalculationTarget : uint8_t
{
	EffectCalculationTarget_Main                                                     = 0,
	EffectCalculationTarget_Constructor                                              = 1,
	EffectCalculationTarget_Target                                                   = 2
};

/// Enum /Script/SB.ESBEffectCalculationType
/// Size: 0x01 (1 bytes)
enum class ESBEffectCalculationType : uint8_t
{
	EffectCalculationType_Static                                                     = 0,
	EffectCalculationType_PhysicDamage                                               = 1,
	EffectCalculationType_ShieldDamage                                               = 2,
	EffectCalculationType_StaminaDamage                                              = 3,
	EffectCalculationType_MaxHPRate                                                  = 4,
	EffectCalculationType_MaxHPValue                                                 = 5,
	EffectCalculationType_FallingDamage                                              = 6,
	EffectCalculationType_StaticPercent                                              = 7,
	EffectCalculationType_StaticPercentRate                                          = 8,
	EffectCalculationType_EffectAttackPower                                          = 9,
	EffectCalculationType_MaxShieldRate                                              = 10,
	EffectCalculationType_HealStatic                                                 = 11,
	EffectCalculationType_HealMaxHPRate                                              = 12,
	EffectCalculationType_CurrentTachyGaugeRate                                      = 13,
	EffectCalculationType_SetStatValue                                               = 14,
	EffectCalculationType_MaxStaminaRate                                             = 15,
	EffectCalculationType_HealMaxHPRateByTumbler                                     = 16
};

/// Enum /Script/SB.ESBEffectConditionChainType
/// Size: 0x01 (1 bytes)
enum class ESBEffectConditionChainType : uint8_t
{
	EffectConditionChainType_None                                                    = 0,
	EffectConditionChainType_HitTarget                                               = 1,
	EffectConditionChainType_HitMe                                                   = 2,
	EffectConditionChainType_HitActiveCollisionToParry                               = 3,
	EffectConditionChainType_HitActiveCollisionToGuard                               = 4,
	EffectConditionChainType_DeadTarget                                              = 5,
	EffectConditionChainType_DeadMe                                                  = 6,
	EffectConditionChainType_HitMeDamaged                                            = 7,
	EffectConditionChainType_HitMeProjectile                                         = 8
};

/// Enum /Script/SB.ESBEffectOverlap
/// Size: 0x01 (1 bytes)
enum class ESBEffectOverlap : uint8_t
{
	EffectOverlap_Overlap                                                            = 0,
	EffectOverlap_Change                                                             = 1,
	EffectOverlap_Unique                                                             = 2
};

/// Enum /Script/SB.ESBElementReaction
/// Size: 0x01 (1 bytes)
enum class ESBElementReaction : uint8_t
{
	ElementReaction_None                                                             = 0,
	ElementReaction_Burn                                                             = 1,
	ElementReaction_Vaporization                                                     = 2
};

/// Enum /Script/SB.ESBSkillTargetType
/// Size: 0x01 (1 bytes)
enum class ESBSkillTargetType : uint8_t
{
	SkillTargetType_Target                                                           = 0,
	SkillTargetType_NonTarget                                                        = 1
};

/// Enum /Script/SB.ESBActorAction
/// Size: 0x01 (1 bytes)
enum class ESBActorAction : uint8_t
{
	ActorAction_None                                                                 = 0,
	ActorAction_Jump                                                                 = 1
};

/// Enum /Script/SB.ESBEffectAttackType
/// Size: 0x01 (1 bytes)
enum class ESBEffectAttackType : uint8_t
{
	EffectAttackType_None                                                            = 0,
	EffectAttackType_MeleeAttack                                                     = 1,
	EffectAttackType_RangeAttack                                                     = 2
};

/// Enum /Script/SB.ESBSkillType
/// Size: 0x01 (1 bytes)
enum class ESBSkillType : uint8_t
{
	SkillType_None                                                                   = 0,
	SkillType_MeleeAttack                                                            = 1,
	SkillType_RangeAttack                                                            = 2,
	SkillType_Parry                                                                  = 3,
	SkillType_Evade                                                                  = 4,
	SkillType_Link                                                                   = 5,
	SkillType_DropAttack                                                             = 6,
	SkillType_BackStab                                                               = 7
};

/// Enum /Script/SB.ESBSkillEnergyType
/// Size: 0x01 (1 bytes)
enum class ESBSkillEnergyType : uint8_t
{
	SkillEnergyType_None                                                             = 0,
	SkillEnergyType_Mp                                                               = 1,
	SkillEnergyType_Hp                                                               = 2,
	SkillEnergyType_BetaGauge                                                        = 3,
	SkillEnergyType_Stamina                                                          = 4,
	SkillEnergyType_BurstGauge                                                       = 5
};

/// Enum /Script/SB.ESBSkillCommandActionType
/// Size: 0x01 (1 bytes)
enum class ESBSkillCommandActionType : uint8_t
{
	SkillCommandAction_Skill                                                         = 0,
	SkillCommandAction_RangedFireItem                                                = 1,
	SkillCommandAction_RangedFireSkill                                               = 2
};

/// Enum /Script/SB.ESBSkillCommandState
/// Size: 0x01 (1 bytes)
enum class ESBSkillCommandState : uint8_t
{
	SkillCommandState_None                                                           = 0,
	SkillCommandState_Skill1                                                         = 1,
	SkillCommandState_Skill2                                                         = 2,
	SkillCommandState_Skill3                                                         = 3,
	SkillCommandState_Skill4                                                         = 4,
	SkillCommandState_Skill5                                                         = 5,
	SkillCommandState_Skill6                                                         = 6,
	SkillCommandState_Skill7                                                         = 7,
	SkillCommandState_Skill8                                                         = 8,
	SkillCommandState_Skill9                                                         = 9,
	SkillCommandState_Skill10                                                        = 10,
	SkillCommandState_Skill11                                                        = 11,
	SkillCommandState_Skill12                                                        = 12,
	SkillCommandState_Combination1                                                   = 13,
	SkillCommandState_Combination2                                                   = 14,
	SkillCommandState_CombinationCrossUp                                             = 15,
	SkillCommandState_CombinationCrossDown                                           = 16,
	SkillCommandState_CombinationCrossLeft                                           = 17,
	SkillCommandState_CombinationCrossRight                                          = 18,
	SkillCommandState_Interaction                                                    = 19,
	SkillCommandState_NoneInputCommand                                               = 20,
	SkillCommandState_ToggleSprint                                                   = 21,
	SkillCommandState_AttackLight                                                    = 22,
	SkillCommandState_AttackStrong                                                   = 23,
	SkillCommandState_Evade                                                          = 24,
	SkillCommandState_Jump                                                           = 25,
	SkillCommandState_Guard                                                          = 26,
	SkillCommandState_SpecialCommand1                                                = 27,
	SkillCommandState_SpecialCommand2                                                = 28,
	SkillCommandState_Scan                                                           = 29,
	SkillCommandState_BetaSkillPreCommand                                            = 30,
	SkillCommandState_BetaSkill1                                                     = 31,
	SkillCommandState_BetaSkill2                                                     = 32,
	SkillCommandState_BetaSkill3                                                     = 33,
	SkillCommandState_BetaSkill4                                                     = 34,
	SkillCommandState_BurstSkillPreCommand                                           = 35,
	SkillCommandState_BurstSkill1                                                    = 36,
	SkillCommandState_BurstSkill2                                                    = 37,
	SkillCommandState_BurstSkill3                                                    = 38,
	SkillCommandState_BurstSkill4                                                    = 39,
	SkillCommandState_TachyModeTwoKey1                                               = 40,
	SkillCommandState_TachyModeTwoKey2                                               = 41,
	SkillCommandState_FishingModeCancel                                              = 42,
	SkillCommandState_TPSMode                                                        = 43,
	SkillCommandState_TPSFire                                                        = 44,
	SkillCommandState_BetaSkillView                                                  = 45,
	SkillCommandState_BurstSkillView                                                 = 46,
	SkillCommandState_SwimDash                                                       = 47,
	SkillCommandState_Num                                                            = 48
};

/// Enum /Script/SB.ESBSkillTargetDetectionType
/// Size: 0x01 (1 bytes)
enum class ESBSkillTargetDetectionType : uint8_t
{
	SkillTargetDetectionType_TargetFilter                                            = 0,
	SkillTargetDetectionType_AimLockOnTarget                                         = 1,
	SkillTargetDetectionType_AimLockOnBounds                                         = 2
};

/// Enum /Script/SB.ESBSkillHitDetectionType
/// Size: 0x01 (1 bytes)
enum class ESBSkillHitDetectionType : uint8_t
{
	SkillHitDetectionType_None                                                       = 0,
	SkillHitDetectionType_TargetFilter                                               = 1,
	SkillHitDetectionType_ActiveCollision                                            = 2,
	SkillHitDetectionType_TargetFilter_ActiveCollision                               = 3
};

/// Enum /Script/SB.ESBSkillProjectileTargetType
/// Size: 0x01 (1 bytes)
enum class ESBSkillProjectileTargetType : uint8_t
{
	SkillProjectileTargetType_MainTarget                                             = 0,
	SkillProjectileTargetType_OnePerTarget                                           = 1,
	SkillProjectileTargetType_NonTarget                                              = 2
};

/// Enum /Script/SB.ESBSkillAttackDirection
/// Size: 0x01 (1 bytes)
enum class ESBSkillAttackDirection : uint8_t
{
	SkillAttackDirection_None                                                        = 0,
	SkillAttackDirection_LeftToRight                                                 = 1,
	SkillAttackDirection_RightToLeft                                                 = 2,
	SkillAttackDirection_Front                                                       = 3
};

/// Enum /Script/SB.ESBSkillConsumeItemCount
/// Size: 0x01 (1 bytes)
enum class ESBSkillConsumeItemCount : uint8_t
{
	SkillConsumeItemCount_Default                                                    = 0,
	SkillConsumeItemCount_ProjectileCount                                            = 1
};

/// Enum /Script/SB.ESBSkillActiveStepType
/// Size: 0x01 (1 bytes)
enum class ESBSkillActiveStepType : uint8_t
{
	SkillActiveStepType_None                                                         = 0,
	SkillActiveStepType_Hit                                                          = 1,
	SkillActiveStepType_Parry                                                        = 2,
	SkillActiveStepType_SuperParry                                                   = 3,
	SkillActiveStepType_Hold                                                         = 4,
	SkillActiveStepType_Guard                                                        = 5,
	SkillActiveStepType_Item                                                         = 6
};

/// Enum /Script/SB.ESBAttributeType
/// Size: 0x01 (1 bytes)
enum class ESBAttributeType : uint8_t
{
	AttributeType_None                                                               = 0,
	AttributeType_Fire                                                               = 1,
	AttributeType_Ice                                                                = 2,
	AttributeType_Lightning                                                          = 3,
	AttributeType_Poison                                                             = 4,
	AttributeType_Physic                                                             = 5
};

/// Enum /Script/SB.ESBElementType
/// Size: 0x01 (1 bytes)
enum class ESBElementType : uint8_t
{
	Element_None                                                                     = 0,
	Element_Fire                                                                     = 1,
	Element_Water                                                                    = 2,
	Element_Wood                                                                     = 3,
	Element_Oil                                                                      = 4,
	Element_Num                                                                      = 5
};

/// Enum /Script/SB.ESBMovementTargetRelativeAxisType
/// Size: 0x01 (1 bytes)
enum class ESBMovementTargetRelativeAxisType : uint8_t
{
	MovementTargetRelativeAxisType_World                                             = 0,
	MovementTargetRelativeAxisType_ParentAxis                                        = 1,
	MovementTargetRelativeAxisType_RootAxis                                          = 2,
	MovementTargetRelativeAxisType_InputDirection                                    = 3
};

/// Enum /Script/SB.ESBMovementTargetUpdate
/// Size: 0x01 (1 bytes)
enum class ESBMovementTargetUpdate : uint8_t
{
	MovementTargetUpdate_FirstTime                                                   = 0,
	MovementTargetUpdate_Following                                                   = 1
};

/// Enum /Script/SB.ESBMovementCurveType
/// Size: 0x01 (1 bytes)
enum class ESBMovementCurveType : uint8_t
{
	ESBMovementCurve_None                                                            = 0,
	ESBMovementCurve_Repeat                                                          = 1,
	ESBMovementCurve_Scaling                                                         = 2
};

/// Enum /Script/SB.ESBMovementTarget
/// Size: 0x01 (1 bytes)
enum class ESBMovementTarget : uint8_t
{
	MovementTarget_World                                                             = 0,
	MovementTarget_MainActor                                                         = 1,
	MovementTarget_OtherActor                                                        = 2
};

/// Enum /Script/SB.ESBActorPropertyInitType
/// Size: 0x01 (1 bytes)
enum class ESBActorPropertyInitType : uint8_t
{
	ActorPropertyInitType_None                                                       = 0,
	ActorPropertyInitType_Dead                                                       = 1,
	ActorPropertyInitType_Revival                                                    = 2,
	ActorPropertyInitType_InteractionCamp                                            = 3,
	ActorPropertyInitType_RevivalWhenComa                                            = 4,
	ActorPropertyInitType_AfterWarp                                                  = 5,
	ActorPropertyInitType_ReStart                                                    = 6
};

/// Enum /Script/SB.ESBActorType
/// Size: 0x01 (1 bytes)
enum class ESBActorType : uint8_t
{
	ActorType_None                                                                   = 0,
	ActorType_PC                                                                     = 1,
	ActorType_NPC                                                                    = 2,
	ActorType_Monster                                                                = 3,
	ActorType_BossMonster                                                            = 4
};

/// Enum /Script/SB.ESBActorCombatType
/// Size: 0x01 (1 bytes)
enum class ESBActorCombatType : uint8_t
{
	ESBCombatType_Melee                                                              = 0,
	ESBCombatType_Ranged                                                             = 1,
	ESBCombatType_None                                                               = 2
};

/// Enum /Script/SB.ESBPathWayRequestState
/// Size: 0x01 (1 bytes)
enum class ESBPathWayRequestState : uint8_t
{
	ESBPathWayState_None                                                             = 0,
	ESBPathWayState_Request                                                          = 1,
	ESBPathWayState_AISuccess                                                        = 2
};

/// Enum /Script/SB.ESBZoneEventPathWayActionType
/// Size: 0x01 (1 bytes)
enum class ESBZoneEventPathWayActionType : uint8_t
{
	ESBZoneEventPathWayAction_None                                                   = 0,
	ESBZoneEventPathWayAction_Start                                                  = 1,
	ESBZoneEventPathWayAction_Stop                                                   = 2
};

/// Enum /Script/SB.ESBPathWayEventType
/// Size: 0x01 (1 bytes)
enum class ESBPathWayEventType : uint8_t
{
	ESBPathEvent_StartEvent                                                          = 0,
	ESBPathEvent_StopEvent                                                           = 1
};

/// Enum /Script/SB.ESBWayPointTurnType
/// Size: 0x01 (1 bytes)
enum class ESBWayPointTurnType : uint8_t
{
	ESBWayPointTurn_None                                                             = 0,
	ESBWayPointTurn_Left                                                             = 1,
	ESBWayPointTurn_Right                                                            = 2
};

/// Enum /Script/SB.ESBPathWayEntryType
/// Size: 0x01 (1 bytes)
enum class ESBPathWayEntryType : uint8_t
{
	ESBEntry_StartPoint                                                              = 0,
	ESBEntry_Nearby                                                                  = 1,
	ESBEntry_FarBy                                                                   = 2
};

/// Enum /Script/SB.ESBWayInterpType
/// Size: 0x01 (1 bytes)
enum class ESBWayInterpType : uint8_t
{
	ESBInterp_Linear                                                                 = 0,
	ESBInterp_CatmullRom                                                             = 1,
	ESBInterp_Sin                                                                    = 2,
	ESBInterp_Round                                                                  = 3,
	ESBInterp_SplineComponent                                                        = 4
};

/// Enum /Script/SB.ESBMoveState
/// Size: 0x01 (1 bytes)
enum class ESBMoveState : uint8_t
{
	MoveState_None                                                                   = 0,
	MoveState_Walk                                                                   = 1,
	MoveState_Run                                                                    = 2,
	MoveState_Sprint                                                                 = 3,
	MoveState_Spider                                                                 = 4,
	MoveState_Fly                                                                    = 5,
	MoveState_Jog                                                                    = 6
};

/// Enum /Script/SB.ESBCharaterMovementCustom
/// Size: 0x01 (1 bytes)
enum class ESBCharaterMovementCustom : uint8_t
{
	Custom_None                                                                      = 0,
	Custom_Climbing                                                                  = 1,
	Custom_WallRun                                                                   = 2,
	Custom_Event                                                                     = 3,
	Custom_Slope                                                                     = 4,
	Custom_Fly                                                                       = 5,
	Custom_Spider                                                                    = 6,
	Custom_GrabObject                                                                = 7
};

/// Enum /Script/SB.ESBCharaterAdditiveBodyType
/// Size: 0x01 (1 bytes)
enum class ESBCharaterAdditiveBodyType : uint8_t
{
	AdditiveBody_None                                                                = 0,
	AdditiveBody_Type1                                                               = 1,
	AdditiveBody_Type2                                                               = 2,
	AdditiveBody_Type3                                                               = 3
};

/// Enum /Script/SB.ESBInterpType
/// Size: 0x01 (1 bytes)
enum class ESBInterpType : uint8_t
{
	InterpType_Liner                                                                 = 0,
	InterpType_Step                                                                  = 1,
	InterpType_SinIn                                                                 = 2,
	InterpType_SinOut                                                                = 3,
	InterpType_SinInOut                                                              = 4,
	InterpType_ExpoIn                                                                = 5,
	InterpType_ExpoOut                                                               = 6,
	InterpType_ExpoInOut                                                             = 7,
	InterpType_CircularIn                                                            = 8,
	InterpType_CircularOut                                                           = 9,
	InterpType_CircularInOut                                                         = 10,
	InterpType_EaseIn                                                                = 11,
	InterpType_EaseOut                                                               = 12,
	InterpType_EaseInOut                                                             = 13,
	InterpType_CurveData                                                             = 14
};

/// Enum /Script/SB.ESBWaterVolumeType
/// Size: 0x01 (1 bytes)
enum class ESBWaterVolumeType : uint8_t
{
	SBWater_Normal                                                                   = 0,
	SBWater_Swamp                                                                    = 1,
	SBWater_Dead                                                                     = 2
};

/// Enum /Script/SB.ESBTribeRelation
/// Size: 0x01 (1 bytes)
enum class ESBTribeRelation : uint8_t
{
	TribeRelation_None                                                               = 0,
	TribeRelation_Ally                                                               = 1,
	TribeRelation_Enemy                                                              = 2
};

/// Enum /Script/SB.ESBSkillStep
/// Size: 0x01 (1 bytes)
enum class ESBSkillStep : uint8_t
{
	SkillStep_None                                                                   = 0,
	SkillStep_Cast                                                                   = 1,
	SkillStep_PreExec                                                                = 2,
	SkillStep_Exec                                                                   = 3,
	SkillStep_Finish                                                                 = 4,
	SkillStep_Complete                                                               = 5
};

/// Enum /Script/SB.ESBTargetActor
/// Size: 0x01 (1 bytes)
enum class ESBTargetActor : uint8_t
{
	Target_None                                                                      = 0,
	Target_Self                                                                      = 1,
	Target_SpecifiedTargetes                                                         = 2,
	Target_Ally                                                                      = 3,
	Target_AllyWithSelf                                                              = 4,
	Target_Enemy                                                                     = 5,
	Target_All                                                                       = 6,
	Target_AllWithoutSelf                                                            = 7,
	Target_Owner                                                                     = 8,
	Target_LockOn                                                                    = 9,
	Target_AIDetectTarget                                                            = 10,
	Target_AIDetectSubTarget                                                         = 11
};

/// Enum /Script/SB.ESBShowPlayerCheck
/// Size: 0x01 (1 bytes)
enum class ESBShowPlayerCheck : uint8_t
{
	ShowPlayerCheck_None                                                             = 0,
	ShowPlayerCheck_PlayerOnly                                                       = 1,
	ShowPlayerCheck_PlayerIgnore                                                     = 2
};

/// Enum /Script/SB.ESBShowActorTarget
/// Size: 0x01 (1 bytes)
enum class ESBShowActorTarget : uint8_t
{
	ShowActorTarget_MainActor                                                        = 0,
	ShowActorTarget_OtherActor                                                       = 1,
	ShowActorTarget_Input                                                            = 2
};

/// Enum /Script/SB.ESBFindNodeSearchType
/// Size: 0x01 (1 bytes)
enum class ESBFindNodeSearchType : uint8_t
{
	Text                                                                             = 0,
	NodeName                                                                         = 1,
	Num                                                                              = 2
};

/// Enum /Script/SB.ESBAssetSearchBubbleContain
/// Size: 0x01 (1 bytes)
enum class ESBAssetSearchBubbleContain : uint8_t
{
	Exclusion                                                                        = 0,
	Inclusion                                                                        = 1
};

/// Enum /Script/SB.ESBAssetSearchCaseSensitive
/// Size: 0x01 (1 bytes)
enum class ESBAssetSearchCaseSensitive : uint8_t
{
	CaseSensitive                                                                    = 0,
	CaseIgnore                                                                       = 1
};

/// Enum /Script/SB.ESBAssetSearchContainWord
/// Size: 0x01 (1 bytes)
enum class ESBAssetSearchContainWord : uint8_t
{
	Contain                                                                          = 0,
	Identical                                                                        = 1
};

/// Enum /Script/SB.ESBAssetSearchResultPresentation
/// Size: 0x01 (1 bytes)
enum class ESBAssetSearchResultPresentation : uint8_t
{
	AssetUnit                                                                        = 0,
	NodeUnit                                                                         = 1
};

/// Enum /Script/SB.ESBAssetSearchScopeType
/// Size: 0x01 (1 bytes)
enum class ESBAssetSearchScopeType : uint8_t
{
	EntireScopeSearch                                                                = 0,
	LocalScopeSearch                                                                 = 1
};

/// Enum /Script/SB.ESBRopePendulumVelocityAxis
/// Size: 0x01 (1 bytes)
enum class ESBRopePendulumVelocityAxis : uint8_t
{
	ESBRopePendulumAxis_XYZ                                                          = 0,
	ESBRopePendulumAxis_XY                                                           = 1,
	ESBRopePendulumAxis_Z                                                            = 2
};

/// Enum /Script/SB.ESBEventMove_CableForceType
/// Size: 0x01 (1 bytes)
enum class ESBEventMove_CableForceType : uint8_t
{
	CableForce_None                                                                  = 0,
	CableForce_X                                                                     = 1,
	CableForce_Y                                                                     = 2,
	CableForce_Z                                                                     = 3,
	CableForce_CharacterDir                                                          = 4
};

/// Enum /Script/SB.ESBFeedbackActorState
/// Size: 0x01 (1 bytes)
enum class ESBFeedbackActorState : uint8_t
{
	Tray                                                                             = 0,
	Show                                                                             = 1,
	Hide                                                                             = 2,
	Max                                                                              = 3
};

/// Enum /Script/SB.ESBFeedbackUIState
/// Size: 0x01 (1 bytes)
enum class ESBFeedbackUIState : uint8_t
{
	None                                                                             = 0,
	ViewerOpen                                                                       = 1
};

/// Enum /Script/SB.ESBFeedbackIssuePriority
/// Size: 0x01 (1 bytes)
enum class ESBFeedbackIssuePriority : uint8_t
{
	None                                                                             = 0,
	Highest                                                                          = 1,
	High                                                                             = 2,
	Midium                                                                           = 3,
	Low                                                                              = 4,
	Lowest                                                                           = 5
};

/// Enum /Script/SB.ESBFeedbackIssueUpdate
/// Size: 0x01 (1 bytes)
enum class ESBFeedbackIssueUpdate : uint8_t
{
	None                                                                             = 0,
	Summary                                                                          = 1,
	Description                                                                      = 2,
	Priority                                                                         = 4,
	Like                                                                             = 8
};

/// Enum /Script/SB.ESBFeedbackEvent
/// Size: 0x01 (1 bytes)
enum class ESBFeedbackEvent : uint8_t
{
	CategoryRefresh                                                                  = 0,
	IssueCreate                                                                      = 1,
	IssueClose                                                                       = 2,
	IssueUpdate                                                                      = 3,
	IssueRefresh                                                                     = 4,
	CommentsRefresh                                                                  = 5,
	CommentAdd                                                                       = 6,
	CommentRemove                                                                    = 7,
	CommentEdit                                                                      = 8,
	LikeUpdate                                                                       = 9,
	AssignIssue                                                                      = 10,
	StatusChange                                                                     = 11,
	IssueMapChange                                                                   = 12
};

/// Enum /Script/SB.ESBFeedbackCategory
/// Size: 0x01 (1 bytes)
enum class ESBFeedbackCategory : uint8_t
{
	None                                                                             = 0,
	UMap                                                                             = 1
};

/// Enum /Script/SB.ESBForceFeedbackConcurrencyRule
/// Size: 0x01 (1 bytes)
enum class ESBForceFeedbackConcurrencyRule : uint8_t
{
	PreventNew                                                                       = 0,
	StopOldest                                                                       = 1,
	StopLowestPriority                                                               = 2
};

/// Enum /Script/SB.ESBResourceCacheCommandletMode
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheCommandletMode : uint8_t
{
	ESBResourceCacheCommandletMode_PlayerAndDrone                                    = 0,
	ESBResourceCacheCommandletMode_Character                                         = 1,
	ESBResourceCacheCommandletMode_World                                             = 2,
	ESBResourceCacheCommandletMode_World_ClusteringOnly                              = 3,
	ESBResourceCacheCommandletMode_AllWorld                                          = 4,
	ESBResourceCacheCommandletMode_AllWorld_ClusteringOnly                           = 5,
	ESBResourceCacheCommandletMode_Whitelist                                         = 6,
	ESBResourceCacheCommandletMode_Configuration                                     = 7,
	ESBResourceCacheCommandletMode_TrainingRoom                                      = 8,
	ESBResourceCacheCommandletMode_All                                               = 9,
	ESBResourceCacheCommandletMode_Max                                               = 10
};

/// Enum /Script/SB.ESBGraphicsOptionsDebugger_FrameLimit
/// Size: 0x01 (1 bytes)
enum class ESBGraphicsOptionsDebugger_FrameLimit : uint8_t
{
	LimitFrame                                                                       = 0,
	LimitFrame2                                                                      = 1,
	LimitFrame3                                                                      = 2,
	LimitFrame4                                                                      = 3,
	LimitFrame5                                                                      = 4,
	Unlimited                                                                        = 5
};

/// Enum /Script/SB.ESBGraphicsOptionsDebugger
/// Size: 0x01 (1 bytes)
enum class ESBGraphicsOptionsDebugger : uint8_t
{
	VSync                                                                            = 0,
	FrameLimit                                                                       = 1,
	Preset                                                                           = 2,
	EnviromentObjectDetail                                                           = 3,
	CharacterObjectDetail                                                            = 4,
	EnviromentTextures                                                               = 5,
	CharacterTextures                                                                = 6,
	AnisotropicFiltering                                                             = 7,
	VolumetricFog                                                                    = 8,
	ShadowQuality                                                                    = 9,
	EffectQuality                                                                    = 10,
	EnvironmentQuality                                                               = 11,
	Lighting                                                                         = 12,
	FoliageQuality                                                                   = 13,
	AmbientOcclusion                                                                 = 14,
	DepthOfField                                                                     = 15,
	ScreenSpaceReflection                                                            = 16,
	SceneColorFringeQuality                                                          = 17,
	GrainQuality                                                                     = 18,
	MaterialQuality                                                                  = 19,
	AntiAliasing                                                                     = 20,
	ResolutionScale                                                                  = 21,
	NvidiaDLSS                                                                       = 22,
	NvidiaFrameGeneration                                                            = 23,
	NvidiaReflexLowLatency                                                           = 24,
	AmdFSR3                                                                          = 25,
	AmdFrameInterpolation                                                            = 26,
	IntelXeSS                                                                        = 27,
	AnimationQuality                                                                 = 28,
	CharacterViewDistance                                                            = 29,
	EnviromentObjectViewDistance                                                     = 30,
	Num                                                                              = 31
};

/// Enum /Script/SB.ESBIndicatorButtonType
/// Size: 0x04 (4 bytes)
enum class ESBIndicatorButtonType : uint32_t
{
	Default                                                                          = 0,
	Hold                                                                             = 1
};

/// Enum /Script/SB.ESBLaserBounceType
/// Size: 0x01 (1 bytes)
enum class ESBLaserBounceType : uint8_t
{
	AngleOfIncidence                                                                 = 0,
	FixedDirection                                                                   = 1
};

/// Enum /Script/SB.ESBLevelSequenceCharacterActionType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceCharacterActionType : uint8_t
{
	SBLevelSequenceCharacterActionType_CharacterControl                              = 0,
	SBLevelSequenceCharacterActionType_ValidLandingLocation                          = 1,
	SBLevelSequenceCharacterActionType_LockCharacterHiddenInGame                     = 2,
	SBLevelSequenceCharacterActionType_FinishSequence                                = 3,
	SBLevelSequenceCharacterActionType_LookAtTargetForceDisable                      = 4,
	SBLevelSequenceCharacterActionType_NotifyShowEvent                               = 5
};

/// Enum /Script/SB.ESBLevelSequenceEventHUDActionType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceEventHUDActionType : uint8_t
{
	ControlHideUI                                                                    = 0,
	HUDInputLock                                                                     = 1
};

/// Enum /Script/SB.ESBLevelSequenceEventPlayerActionType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceEventPlayerActionType : uint8_t
{
	SBLevelSequenceEventPlayerActionType_SetCamaraLock                               = 0,
	SBLevelSequenceEventPlayerActionType_SlopeMoveImmidateAccel                      = 1,
	SBLevelSequenceEventPlayerActionType_FinishSequence                              = 2,
	SBLevelSequenceEventPlayerActionType_PlayerControl                               = 3,
	SBLevelSequenceEventPlayerActionType_UpdateVolumeInfo                            = 4,
	SBLevelSequenceEventPlayerActionType_ViewTargetPlayer                            = 5,
	SBLevelSequenceEventPlayerActionType_ClearCameraCurrentArmLength                 = 6,
	SBLevelSequenceEventPlayerActionType_ResetLastMoveFowardInput                    = 7,
	SBLevelSequenceEventPlayerActionType_PauseSequence                               = 8,
	SBLevelSequenceEventPlayerActionType_ValidLandingLocation                        = 9,
	SBLevelSequenceEventPlayerActionType_AllMeshSlotForceLOD                         = 10,
	SBLevelSequenceEventPlayerActionType_OpenCredit                                  = 11,
	SBLevelSequenceEventPlayerActionType_EnterLobby                                  = 12
};

/// Enum /Script/SB.ESBLevelSequenceLookAtTargetType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceLookAtTargetType : uint8_t
{
	SBLevelSequenceLookAtTargetType_Head                                             = 0,
	SBLevelSequenceLookAtTargetType_Eye                                              = 1,
	SBLevelSequenceLookAtTargetType_Body                                             = 2
};

/// Enum /Script/SB.ESBLevelSequenceMoveToLocationType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceMoveToLocationType : uint8_t
{
	Play                                                                             = 0,
	Stop                                                                             = 1
};

/// Enum /Script/SB.ESBLevelSequenceSkeletalAnimationAssetType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceSkeletalAnimationAssetType : uint8_t
{
	Asset                                                                            = 0,
	SocialAnim                                                                       = 1
};

/// Enum /Script/SB.ESBLevelSequenceSkeletalAnimationFootIKType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceSkeletalAnimationFootIKType : uint8_t
{
	SBLevelSequenceSkeletalAnimationFootIKType_Deactive                              = 0,
	SBLevelSequenceSkeletalAnimationFootIKType_Active                                = 1,
	SBLevelSequenceSkeletalAnimationFootIKType_Default                               = 2
};

/// Enum /Script/SB.ESBLevelSequenceSkeletalAnimationPlayType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceSkeletalAnimationPlayType : uint8_t
{
	CustomPlay                                                                       = 0,
	CustomMeshSlotPlay                                                               = 1
};

/// Enum /Script/SB.ESBLevelSequenceTheaterInputCounterAlignmentType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceTheaterInputCounterAlignmentType : uint8_t
{
	None                                                                             = 0,
	LeftTop                                                                          = 1,
	Top                                                                              = 2,
	RightTop                                                                         = 3,
	LeftCenter                                                                       = 4,
	Center                                                                           = 5,
	RightCenter                                                                      = 6,
	LeftBottom                                                                       = 7,
	Bottom                                                                           = 8,
	RightBottom                                                                      = 9
};

/// Enum /Script/SB.ESBLevelSequenceTheaterInputCounterLocationType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceTheaterInputCounterLocationType : uint8_t
{
	Screen                                                                           = 0,
	Actor                                                                            = 1
};

/// Enum /Script/SB.ESBLevelSequenceTheaterInputCounterType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceTheaterInputCounterType : uint8_t
{
	GamePad_FaceButton_Left                                                          = 0,
	GamePad_FaceButton_Top                                                           = 1,
	SBLevelSequenceTheaterInputCounterType_GamePad_FaceButton_Right                  = 2,
	SBLevelSequenceTheaterInputCounterType_GamePad_FaceButton_Bottom                 = 3,
	SBLevelSequenceTheaterInputCounterType_Gamepad_LeftShoulder                      = 4,
	SBLevelSequenceTheaterInputCounterType_Gamepad_RightShoulder                     = 5,
	SBLevelSequenceTheaterInputCounterType_GamePad_LeftStick                         = 6,
	SBLevelSequenceTheaterInputCounterType_GamePad_RightStick                        = 7,
	SBLevelSequenceTheaterInputCounterType_Gamepad_LeftTrigger                       = 8,
	SBLevelSequenceTheaterInputCounterType_Gamepad_RightTrigger                      = 9
};

/// Enum /Script/SB.ESBLevelSequenceTheaterInputCounterActionType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceTheaterInputCounterActionType : uint8_t
{
	None                                                                             = 0,
	SinglePress                                                                      = 1,
	DoublePress                                                                      = 2,
	FlowPress                                                                        = 3
};

/// Enum /Script/SB.FSBLevelSequenceEventInputFeedbackActionType
/// Size: 0x01 (1 bytes)
enum class FSBLevelSequenceEventInputFeedbackActionType : uint8_t
{
	LevelSequencePlay                                                                = 0,
	ProgressState                                                                    = 1
};

/// Enum /Script/SB.ESBLevelSequenceTheaterQTEAlignmentType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceTheaterQTEAlignmentType : uint8_t
{
	None                                                                             = 0,
	LeftTop                                                                          = 1,
	Top                                                                              = 2,
	RightTop                                                                         = 3,
	LeftCenter                                                                       = 4,
	Center                                                                           = 5,
	RightCenter                                                                      = 6,
	LeftBottom                                                                       = 7,
	Bottom                                                                           = 8,
	RightBottom                                                                      = 9
};

/// Enum /Script/SB.ESBLevelSequenceTheaterQTELocationType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceTheaterQTELocationType : uint8_t
{
	Screen                                                                           = 0,
	Actor                                                                            = 1
};

/// Enum /Script/SB.ESBLevelSequenceTheaterQTEType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceTheaterQTEType : uint8_t
{
	GamePad_FaceButton_Left                                                          = 0,
	GamePad_FaceButton_Top                                                           = 1,
	SBLevelSequenceTheaterQTEType_GamePad_FaceButton_Right                           = 2,
	SBLevelSequenceTheaterQTEType_GamePad_FaceButton_Bottom                          = 3,
	SBLevelSequenceTheaterQTEType_Gamepad_LeftShoulder                               = 4,
	SBLevelSequenceTheaterQTEType_Gamepad_RightShoulder                              = 5,
	SBLevelSequenceTheaterQTEType_GamePad_LeftStick                                  = 6,
	SBLevelSequenceTheaterQTEType_GamePad_RightStick                                 = 7,
	SBLevelSequenceTheaterQTEType_Gamepad_LeftTrigger                                = 8,
	SBLevelSequenceTheaterQTEType_Gamepad_RightTrigger                               = 9
};

/// Enum /Script/SB.ESBLevelSequenceTheaterQTEActionType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceTheaterQTEActionType : uint8_t
{
	None                                                                             = 0,
	SinglePress                                                                      = 1,
	DoublePress                                                                      = 2,
	FlowPress                                                                        = 3
};

/// Enum /Script/SB.ESBLevelSequenceTheaterReactionTriggerType
/// Size: 0x01 (1 bytes)
enum class ESBLevelSequenceTheaterReactionTriggerType : uint8_t
{
	SBLevelSequenceTheaterReactionTriggerType_None                                   = 0,
	SBLevelSequenceTheaterReactionTriggerType_Gamepad_LeftTrigger                    = 1,
	SBLevelSequenceTheaterReactionTriggerType_Gamepad_RightTrigger                   = 2
};

/// Enum /Script/SB.ESBLevelStreamingProfileTarget
/// Size: 0x01 (1 bytes)
enum class ESBLevelStreamingProfileTarget : uint8_t
{
	Texture                                                                          = 0,
	StaticMeshComponent                                                              = 1,
	StaticMeshComponent_StaticMesh                                                   = 2,
	StaticMeshComponent_Material                                                     = 3
};

/// Enum /Script/SB.ESBLevelStreamProfilerMode
/// Size: 0x01 (1 bytes)
enum class ESBLevelStreamProfilerMode : uint8_t
{
	All                                                                              = 0,
	Single                                                                           = 1
};

/// Enum /Script/SB.ESBLevelStreamProfilerState
/// Size: 0x01 (1 bytes)
enum class ESBLevelStreamProfilerState : uint8_t
{
	Idle                                                                             = 0,
	Ready                                                                            = 1,
	UnloadIterative                                                                  = 2,
	GCAndWait                                                                        = 3,
	CheckUnloadedAll                                                                 = 4,
	Profiling                                                                        = 5,
	Loading                                                                          = 6,
	PostLoadWait                                                                     = 7,
	ProfileLevel                                                                     = 8,
	Unloading                                                                        = 9,
	PostUnloadWaitForGC                                                              = 10,
	PrepareForNextLevel                                                              = 11,
	Finished                                                                         = 12,
	ErrorOccured                                                                     = 13
};

/// Enum /Script/SB.ESBLocalize
/// Size: 0x01 (1 bytes)
enum class ESBLocalize : uint8_t
{
	AcquisitionSkill                                                                 = 0,
	ActorStat                                                                        = 1,
	Character                                                                        = 2,
	Cheat                                                                            = 3,
	Effect                                                                           = 4,
	Item                                                                             = 5,
	Quest                                                                            = 6,
	Skill                                                                            = 7,
	Activity                                                                         = 8,
	AreaName                                                                         = 9,
	GameHelp                                                                         = 10,
	Guide                                                                            = 11,
	Operation                                                                        = 12,
	Puzzle                                                                           = 13,
	Records                                                                          = 14,
	Seq                                                                              = 15,
	Trophy                                                                           = 16,
	UI                                                                               = 17
};

/// Enum /Script/SB.ESBOObjectDensityType
/// Size: 0x01 (1 bytes)
enum class ESBOObjectDensityType : uint8_t
{
	ESBObjectDensity_All                                                             = 0,
	ESBObjectDensity_High                                                            = 1,
	ESBObjectDensity_Mid                                                             = 2,
	ESBObjectDensity_Low                                                             = 3
};

/// Enum /Script/SB.ESBParticleDynamicInstanceParameterType
/// Size: 0x01 (1 bytes)
enum class ESBParticleDynamicInstanceParameterType : uint8_t
{
	Scalar                                                                           = 0,
	Vector                                                                           = 1,
	SocketLocation                                                                   = 2
};

/// Enum /Script/SB.ESBResourceCacheActorState
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheActorState : uint8_t
{
	ESBResourceCacheActorState_OutOfRange                                            = 0,
	ESBResourceCacheActorState_InRange                                               = 1
};

/// Enum /Script/SB.ESBResourceCacheAsyncBulkProcessorWorkMode
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheAsyncBulkProcessorWorkMode : uint8_t
{
	SBResourceCacheAsyncBulkProcessorWorkMode_Invalid                                = 0,
	SBResourceCacheAsyncBulkProcessorWorkMode_Cache                                  = 1,
	SBResourceCacheAsyncBulkProcessorWorkMode_Uncache                                = 2
};

/// Enum /Script/SB.ESBResourceCacheAsyncLoadState
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheAsyncLoadState : uint8_t
{
	SBResourceCacheAsyncLoadState_Invalid                                            = 0,
	SBResourceCacheAsyncLoadState_Unloaded                                           = 1,
	SBResourceCacheAsyncLoadState_LoadStalled                                        = 2,
	SBResourceCacheAsyncLoadState_Loading                                            = 3,
	SBResourceCacheAsyncLoadState_Completed                                          = 4,
	SBResourceCacheAsyncLoadState_Processing                                         = 5,
	SBResourceCacheAsyncLoadState_Cached                                             = 6,
	SBResourceCacheAsyncLoadState_PendingUnprocessing                                = 7,
	SBResourceCacheAsyncLoadState_Unprocessing                                       = 8
};

/// Enum /Script/SB.ESBResourceCacheLockType
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheLockType : uint8_t
{
	Unlocked                                                                         = 0,
	WorldLocked                                                                      = 1,
	GameLocked                                                                       = 2
};

/// Enum /Script/SB.ESBResourceCacheType
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheType : uint8_t
{
	ESBResourceCacheType_Uninitialized                                               = 0,
	ESBResourceCacheType_General                                                     = 1,
	ESBResourceCacheType_Animation                                                   = 2,
	ESBResourceCacheType_BehaviorTree                                                = 3,
	ESBResourceCacheType_Blueprint                                                   = 4,
	ESBResourceCacheType_Blueprint_Character                                         = 5,
	ESBResourceCacheType_Blueprint_Projectile                                        = 6,
	ESBResourceCacheType_Blueprint_Item                                              = 7,
	ESBResourceCacheType_Curve                                                       = 8,
	ESBResourceCacheType_InteractionGraph                                            = 9,
	ESBResourceCacheType_LevelSequence                                               = 10,
	ESBResourceCacheType_Material                                                    = 11,
	ESBResourceCacheType_NiagaraSystem                                               = 12,
	ESBResourceCacheType_ParticleSystem                                              = 12,
	ESBResourceCacheType_PhysParticleSet                                             = 13,
	ESBResourceCacheType_Projectile                                                  = 14,
	ESBResourceCacheType_RewardGroupSpawnFormation                                   = 15,
	ESBResourceCacheType_Show                                                        = 16,
	ESBResourceCacheType_Skelmesh                                                    = 17,
	ESBResourceCacheType_PhysicsAsset                                                = 18,
	ESBResourceCacheType_Texture                                                     = 19,
	ESBResourceCacheType_Theater                                                     = 20,
	ESBResourceCacheType_TheaterTemplate                                             = 21,
	ESBResourceCacheType_VibrationSet                                                = 22,
	ESBResourceCacheType_SoundMix                                                    = 23,
	ESBResourceCacheType_CharacterSoundSet                                           = 24,
	ESBResourceCacheType_RootMotionData                                              = 25
};

/// Enum /Script/SB.ESBResourceCacheManagerGameFloatNotificationState
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheManagerGameFloatNotificationState : uint8_t
{
	ESBResourceCacheManagerGameFloatNotificationState_Idle                           = 0,
	ESBResourceCacheManagerGameFloatNotificationState_AsyncStarted                   = 1,
	ESBResourceCacheManagerGameFloatNotificationState_AsyncFinished                  = 2
};

/// Enum /Script/SB.ESBResourceCacheManagerPauseState
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheManagerPauseState : uint8_t
{
	ESBResourceCacheManagerPauseState_None                                           = 0,
	ESBResourceCacheManagerPauseState_Paused                                         = 1,
	ESBResourceCacheManagerPauseState_Unpaused                                       = 2
};

/// Enum /Script/SB.ESBResourceCacheManagerPhaseState
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheManagerPhaseState : uint8_t
{
	SBResourceCacheManagerPhaseState_Init                                            = 0,
	SBResourceCacheManagerPhaseState_WaitingForStartLevelToStart                     = 1,
	SBResourceCacheManagerPhaseState_WaitingForInitialCaching                        = 2,
	SBResourceCacheManagerPhaseState_CachingInitials                                 = 3,
	SBResourceCacheManagerPhaseState_FinishedInitialCaching                          = 4,
	SBResourceCacheManagerPhaseState_WaitingForStartZoneToCache                      = 5,
	SBResourceCacheManagerPhaseState_CachingStartZone                                = 6,
	SBResourceCacheManagerPhaseState_PoolingBP                                       = 7,
	SBResourceCacheManagerPhaseState_FinishedStartZoneCaching                        = 8,
	SBResourceCacheManagerPhaseState_Operating                                       = 9,
	SBResourceCacheManagerPhaseState_Operating_Server                                = 10,
	SBResourceCacheManagerPhaseState_Terminated                                      = 11
};

/// Enum /Script/SB.ESBResourceCacheSBCharacterSpawnerState
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheSBCharacterSpawnerState : uint8_t
{
	ESBResourceCacheSBCharacterSpawnerState_Idle                                     = 0,
	ESBResourceCacheSBCharacterSpawnerState_Spawnning                                = 1,
	ESBResourceCacheSBCharacterSpawnerState_Pooling                                  = 2,
	ESBResourceCacheSBCharacterSpawnerState_Finished                                 = 3
};

/// Enum /Script/SB.ESBResourceCacheSkeletalMeshManagerFailedReason
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheSkeletalMeshManagerFailedReason : uint8_t
{
	ESBResourceCacheSkeletalMeshManagerFailedReason_Unknown                          = 0,
	ESBResourceCacheSkeletalMeshManagerFailedReason_HandleInvalidWhenRequested       = 1,
	ESBResourceCacheSkeletalMeshManagerFailedReason_HandleInactive                   = 2,
	ESBResourceCacheSkeletalMeshManagerFailedReason_HandleNotLoading                 = 3,
	ESBResourceCacheSkeletalMeshManagerFailedReason_HandleInvalidWhileLoading        = 4,
	ESBResourceCacheSkeletalMeshManagerFailedReason_HandleAssetIsInvalid             = 5,
	ESBResourceCacheSkeletalMeshManagerFailedReason_HandleInvalidAfterCompleteLoading = 6,
	ESBResourceCacheSkeletalMeshManagerFailedReason_FailedToRequestAsyncClothFabric  = 7,
	ESBResourceCacheSkeletalMeshManagerFailedReason_Max                              = 8
};

/// Enum /Script/SB.ESBResourceCacheSkeletalMeshManagerLoadState
/// Size: 0x01 (1 bytes)
enum class ESBResourceCacheSkeletalMeshManagerLoadState : uint8_t
{
	ESBResourceCacheSkeletalMeshManagerLoadState_Idle                                = 0,
	ESBResourceCacheSkeletalMeshManagerLoadState_Requested                           = 1,
	ESBResourceCacheSkeletalMeshManagerLoadState_AsyncAssetLoadStarted               = 2,
	ESBResourceCacheSkeletalMeshManagerLoadState_AsyncAssetLoadFinished              = 3,
	ESBResourceCacheSkeletalMeshManagerLoadState_AsyncClothLoadStarted               = 4,
	ESBResourceCacheSkeletalMeshManagerLoadState_AsyncClothLoadFinished              = 5,
	ESBResourceCacheSkeletalMeshManagerLoadState_LoadComplete                        = 6,
	ESBResourceCacheSkeletalMeshManagerLoadState_Finished                            = 7,
	ESBResourceCacheSkeletalMeshManagerLoadState_Failed                              = 8,
	ESBResourceCacheSkeletalMeshManagerLoadState_Max                                 = 9
};

/// Enum /Script/SB.ESBClothWindDirectionType
/// Size: 0x01 (1 bytes)
enum class ESBClothWindDirectionType : uint8_t
{
	ClothWindDirectionType_Direction                                                 = 0,
	ClothWindDirectionType_Velocity                                                  = 1
};

/// Enum /Script/SB.ESBBlendSpaceChannel
/// Size: 0x01 (1 bytes)
enum class ESBBlendSpaceChannel : uint8_t
{
	Upper                                                                            = 0,
	Lower                                                                            = 1,
	All                                                                              = 2
};

/// Enum /Script/SB.ESBShowAnimSequencePlayType
/// Size: 0x01 (1 bytes)
enum class ESBShowAnimSequencePlayType : uint8_t
{
	Default                                                                          = 0,
	UseDirectionalBlend                                                              = 1,
	UseMoveWeight                                                                    = 2,
	UseAreaDirectionCheck                                                            = 3,
	DirectionalAnimation                                                             = 4,
	CheckFootLeftRight                                                               = 5,
	XZ_DirectionalBlend                                                              = 6
};

/// Enum /Script/SB.ESBShowAnimCheckActiveType
/// Size: 0x01 (1 bytes)
enum class ESBShowAnimCheckActiveType : uint8_t
{
	NoneCheck                                                                        = 0,
	SelfForwardVectorAndSelfToTargetAngle                                            = 1
};

/// Enum /Script/SB.ESBShowAnimDirectionalAnimationType
/// Size: 0x01 (1 bytes)
enum class ESBShowAnimDirectionalAnimationType : uint8_t
{
	Velocity                                                                         = 0,
	InverseHitDirection                                                              = 1,
	HitDirection                                                                     = 2,
	VelocityInSwimming                                                               = 3,
	SkillAttackDirection                                                             = 4,
	EventDirection                                                                   = 5,
	CameraDirection                                                                  = 6
};

/// Enum /Script/SB.ESBShowAnimAreaDirectionCheckType
/// Size: 0x01 (1 bytes)
enum class ESBShowAnimAreaDirectionCheckType : uint8_t
{
	FourSide                                                                         = 0,
	TwoSideRL                                                                        = 1
};

/// Enum /Script/SB.ESBShowAnimPlayBody
/// Size: 0x01 (1 bytes)
enum class ESBShowAnimPlayBody : uint8_t
{
	AllBody                                                                          = 0,
	UpperBody                                                                        = 1
};

/// Enum /Script/SB.ESBAnimTransitChannel
/// Size: 0x01 (1 bytes)
enum class ESBAnimTransitChannel : uint8_t
{
	Upper                                                                            = 0,
	Lower                                                                            = 1,
	All                                                                              = 2
};

/// Enum /Script/SB.ESBShowCamAnimCheckTarget
/// Size: 0x01 (1 bytes)
enum class ESBShowCamAnimCheckTarget : uint8_t
{
	ShowCamAnimCheckTarget_MainActor                                                 = 0,
	ShowCamAnimCheckTarget_OtherActor                                                = 1,
	ShowCamAnimCheckTarget_Input                                                     = 2
};

/// Enum /Script/SB.ESBShowCamShakeTarget
/// Size: 0x01 (1 bytes)
enum class ESBShowCamShakeTarget : uint8_t
{
	ShowCamShakeTarget_MainActor                                                     = 0,
	ShowCamShakeTarget_OtherActor                                                    = 1,
	ShowCamShakeTarget_Input                                                         = 2
};

/// Enum /Script/SB.ESBShowControlLagSpeedTarget
/// Size: 0x01 (1 bytes)
enum class ESBShowControlLagSpeedTarget : uint8_t
{
	ShowControlLagSpeedTarget_MainActor                                              = 0,
	ShowControlLagSpeedTarget_OtherActor                                             = 1
};

/// Enum /Script/SB.ESBShowControlLockonTargetBone
/// Size: 0x01 (1 bytes)
enum class ESBShowControlLockonTargetBone : uint8_t
{
	ShowControlLockonTargetBone_MainActor                                            = 0,
	ShowControlLockonTargetBone_OtherActor                                           = 1
};

/// Enum /Script/SB.ESBShowKeyGroupType
/// Size: 0x01 (1 bytes)
enum class ESBShowKeyGroupType : uint8_t
{
	ShowKeyGroup_Animation                                                           = 0,
	ShowKeyGroup_Action                                                              = 1,
	ShowKeyGroup_Fx                                                                  = 2,
	ShowKeyGroup_Sound                                                               = 3,
	ShowKeyGroup_Etc                                                                 = 4,
	ShowKeyGroup_Num                                                                 = 5
};

/// Enum /Script/SB.ESBShowKey
/// Size: 0x01 (1 bytes)
enum class ESBShowKey : uint8_t
{
	ShowKey_None                                                                     = -1,
	ShowKey_Particle                                                                 = 0,
	ShowKey_Animation                                                                = 1,
	ShowKey_HitReaction                                                              = 2,
	ShowKey_Projectile                                                               = 3,
	ShowKey_CameraAnim                                                               = 4,
	ShowKey_PostProcess                                                              = 5,
	ShowKey_TimeScale                                                                = 6,
	ShowKey_Trail                                                                    = 7,
	ShowKey_MaterialParam                                                            = 8,
	ShowKey_CameraShake                                                              = 9,
	ShowKey_Sound                                                                    = 10,
	ShowKey_MaterialChange                                                           = 11,
	ShowKey_ForceFeedback                                                            = 12,
	ShowKey_DynamicPhysicBone                                                        = 13,
	ShowKey_Niagara                                                                  = 14,
	ShowKey_RootMotion                                                               = 15,
	ShowKey_DynamicPhysicStop                                                        = 16,
	ShowKey_Decal                                                                    = 17,
	ShowKey_MeshVertexShake                                                          = 18,
	ShowKey_BoneScaleIgnore                                                          = 19,
	ShowKey_AnimationBlendSpace                                                      = 20,
	ShowKey_AnimationTransit                                                         = 21,
	ShowKey_RadialForce                                                              = 22,
	ShowKey_Ragdoll                                                                  = 23,
	ShowKey_ChangeAttachTo                                                           = 24,
	ShowKey_AnimationByMeshSlot                                                      = 25,
	ShowKey_DepthOfField                                                             = 26,
	ShowKey_PlayShow                                                                 = 27,
	ShowKey_AnimNodeGroundCollision                                                  = 28,
	ShowKey_AnimNodeTargetTracking                                                   = 29,
	ShowKey_CreateDestructible                                                       = 30,
	ShowKey_RuleMove                                                                 = 31,
	ShowKey_MovementBone                                                             = 32,
	ShowKey_PostProcessMaterial                                                      = 33,
	ShowKey_MaterialCollectionParam                                                  = 34,
	ShowKey_DeactiveParticle                                                         = 35,
	ShowKey_SoundVolumeAdjuster                                                      = 36,
	ShowKey_Actor                                                                    = 37,
	ShowKey_LockOnTarget                                                             = 38,
	ShowKey_Effect                                                                   = 39,
	ShowKey_SkillResult                                                              = 40,
	ShowKey_ControlCamLagSpeed                                                       = 41,
	ShowKey_Cable                                                                    = 42,
	ShowKey_LockOnTargetBone                                                         = 43,
	ShowKey_Vibration                                                                = 44,
	ShowKey_CreateStaticMesh                                                         = 45,
	ShowKey_PlayTheater                                                              = 46,
	ShowKey_Visibility                                                               = 47,
	ShowKey_ClientEvent                                                              = 48,
	ShowKey_AnimBPSetValue                                                           = 49,
	ShowKey_PoseSnapshot                                                             = 50,
	ShowKey_NotifyEvent                                                              = 51,
	ShowKey_Delete1                                                                  = 52,
	ShowKey_SetAIDecorator                                                           = 53,
	ShowKey_Delete2                                                                  = 54,
	ShowKey_AttachSocketToSocket                                                     = 55,
	ShowKey_CharacterSE                                                              = 56,
	ShowKey_Fly                                                                      = 57,
	ShowKey_ActorAnim                                                                = 58,
	ShowKey_ActorEventNotification                                                   = 59,
	ShowKey_UIStudioSequence                                                         = 60,
	ShowKey_ActorCompVisible                                                         = 61,
	ShowKey_WindVolume                                                               = 62,
	ShowKey_ControlLockOnBlend                                                       = 63,
	ShowKey_SoundEvent                                                               = 64,
	ShowKey_AnimBPSetValue_String                                                    = 65,
	ShowKey_CameraEyeTracking                                                        = 66,
	ShowKey_ControlCameraVolume                                                      = 67,
	ShowKey_Num                                                                      = 68
};

/// Enum /Script/SB.ESBDOFFocalDistanceType
/// Size: 0x01 (1 bytes)
enum class ESBDOFFocalDistanceType : uint8_t
{
	Value                                                                            = 0,
	ToTargetDistance                                                                 = 1
};

/// Enum /Script/SB.ESBShowEffectTableFieldType
/// Size: 0x01 (1 bytes)
enum class ESBShowEffectTableFieldType : uint8_t
{
	StartSelfEffect                                                                  = 0,
	StartTargetEffect                                                                = 1,
	SelfPositionEffect                                                               = 2,
	TargetPositionEffect                                                             = 3
};

/// Enum /Script/SB.ESBParticleRelativeAxis
/// Size: 0x01 (1 bytes)
enum class ESBParticleRelativeAxis : uint8_t
{
	Default                                                                          = 0,
	World                                                                            = 1,
	Socket                                                                           = 2,
	Actor                                                                            = 3,
	HitDirection                                                                     = 4,
	WeaponDirection                                                                  = 5
};

/// Enum /Script/SB.ESBShowParticleTarget
/// Size: 0x01 (1 bytes)
enum class ESBShowParticleTarget : uint8_t
{
	ShowParticleTarget_MainActor                                                     = 0,
	ShowParticleTarget_OtherActor                                                    = 1,
	ShowParticleTarget_Input                                                         = 2,
	ShowParticleTarget_World                                                         = 3,
	ShowParticleTarget_HitLocation                                                   = 4,
	ShowParticleTarget_PlayerCamera                                                  = 5
};

/// Enum /Script/SB.ESBShowParticlePhysCheckDirectionType
/// Size: 0x01 (1 bytes)
enum class ESBShowParticlePhysCheckDirectionType : uint8_t
{
	DownVector                                                                       = 0,
	InverseHitDirection                                                              = 1
};

/// Enum /Script/SB.ESBShowRagdollDirectionType
/// Size: 0x01 (1 bytes)
enum class ESBShowRagdollDirectionType : uint8_t
{
	Static                                                                           = 0,
	HitDirection                                                                     = 1,
	TargetToSelf                                                                     = 2,
	HitLocationToSelf                                                                = 3,
	Velocity                                                                         = 4,
	StaticLocal                                                                      = 5
};

/// Enum /Script/SB.ESBShowSkillResultTableFieldType
/// Size: 0x01 (1 bytes)
enum class ESBShowSkillResultTableFieldType : uint8_t
{
	Default                                                                          = 0,
	WhenParry                                                                        = 1,
	WhenJustParry                                                                    = 2,
	WhenGuard                                                                        = 3,
	WhenBreakGuard                                                                   = 4,
	WhenPerfectParry                                                                 = 5
};

/// Enum /Script/SB.ESBSoundRelativeAxis
/// Size: 0x01 (1 bytes)
enum class ESBSoundRelativeAxis : uint8_t
{
	Default                                                                          = 0,
	World                                                                            = 1,
	Socket                                                                           = 2,
	Actor                                                                            = 3,
	HitDirection                                                                     = 4,
	WeaponDirection                                                                  = 5
};

/// Enum /Script/SB.ESBShowSoundTarget
/// Size: 0x01 (1 bytes)
enum class ESBShowSoundTarget : uint8_t
{
	ShowSoundTarget_MainActor                                                        = 0,
	ShowSoundTarget_OtherActor                                                       = 1,
	ShowSoundTarget_Input                                                            = 2,
	ShowSoundTarget_World                                                            = 3,
	ShowSoundTarget_HitLocation                                                      = 4
};

/// Enum /Script/SB.ESBShowUIStudioSequenceType
/// Size: 0x01 (1 bytes)
enum class ESBShowUIStudioSequenceType : uint8_t
{
	SBShowUIStudioSequence_Play                                                      = 0,
	SBShowUIStudioSequence_Stop                                                      = 1
};

/// Enum /Script/SB.ESBShowWindVolumeDirectionType
/// Size: 0x01 (1 bytes)
enum class ESBShowWindVolumeDirectionType : uint8_t
{
	World                                                                            = 0,
	Local                                                                            = 1
};

/// Enum /Script/SB.ESBSignificanceUpdateTarget
/// Size: 0x01 (1 bytes)
enum class ESBSignificanceUpdateTarget : uint8_t
{
	None                                                                             = 0,
	MovementComponent                                                                = 1,
	SkeletalMeshComponent_Tick                                                       = 2,
	SkeletalMeshComponent_Shadow                                                     = 3,
	SkeletalMeshComponent_VisibilityBasedAnimTickOption                              = 4,
	CollisionGroupComponent                                                          = 5,
	AnimURO                                                                          = 6,
	Actor                                                                            = 7,
	LaserComponent                                                                   = 8,
	DestructibleComponent                                                            = 9,
	CableComponent                                                                   = 10
};

/// Enum /Script/SB.ESBSignificanceTimerKey
/// Size: 0x01 (1 bytes)
enum class ESBSignificanceTimerKey : uint8_t
{
	None                                                                             = 0,
	SkipTick                                                                         = 1,
	IgnoreOptimization                                                               = 2,
	ActiveTimeAfterInteraction                                                       = 3,
	MovementComponentAfterGrabFinished                                               = 4,
	MovementComponentAfterLandOnFloor                                                = 5,
	CompleteShowStage                                                                = 6,
	CustomTickInterval                                                               = 7,
	SBActorTickInterval                                                              = 8
};

/// Enum /Script/SB.ESBSignificanceObjectType
/// Size: 0x01 (1 bytes)
enum class ESBSignificanceObjectType : uint8_t
{
	None                                                                             = 0,
	Character                                                                        = 1,
	ZoneEnvActor                                                                     = 2,
	ZoneEventActor                                                                   = 3,
	LaserComponent                                                                   = 4,
	DestructibleComponent                                                            = 5,
	OptimizationActor                                                                = 6,
	SBItem                                                                           = 7,
	Max                                                                              = 8
};

/// Enum /Script/SB.ESBSingleSoundTransitType
/// Size: 0x04 (4 bytes)
enum class ESBSingleSoundTransitType : uint32_t
{
	FadeInOut                                                                        = 0,
	Switching                                                                        = 1
};

/// Enum /Script/SB.ESBSkillTreeUnlockAnimationType
/// Size: 0x04 (4 bytes)
enum class ESBSkillTreeUnlockAnimationType : uint32_t
{
	LowerSlotWithLine                                                                = 0,
	UpperSlotWithLine                                                                = 1,
	SlotAndLine                                                                      = 2
};

/// Enum /Script/SB.ESBSoundDebuggingKey
/// Size: 0x01 (1 bytes)
enum class ESBSoundDebuggingKey : uint8_t
{
	None                                                                             = 0,
	SoundEvent                                                                       = 1,
	SoundEvent_Zone                                                                  = 2,
	SoundEvent_ZoneTrigger                                                           = 3,
	SoundEvent_LevelSequence                                                         = 4,
	SoundEvent_Quest                                                                 = 5,
	SoundEvent_Dialogue                                                              = 6,
	SoundEvent_Camp                                                                  = 7,
	SoundEvent_ActorStance                                                           = 8,
	SoundEvent_ZoneEvent                                                             = 9,
	SoundEvent_Achievement                                                           = 10,
	SoundEvent_GameProgress                                                          = 11,
	SoundEvent_AreaControlVolume                                                     = 12,
	SoundEvent_Show                                                                  = 13,
	SoundEvent_Equipment                                                             = 14,
	MainBGMTrack                                                                     = 15,
	AmbientBGMTrack                                                                  = 16,
	BGMState                                                                         = 17,
	BGMEventBattle                                                                   = 18,
	BGMStateRule                                                                     = 19,
	FootStep                                                                         = 20,
	IsHeadphonePluggedIn                                                             = 21,
	AspectRatio                                                                      = 22,
	ETC                                                                              = 23
};

/// Enum /Script/SB.ESBSoundEventType
/// Size: 0x01 (1 bytes)
enum class ESBSoundEventType : uint8_t
{
	GenerateSound                                                                    = 1,
	PlaySound                                                                        = 2,
	StopSound                                                                        = 3,
	AdjustVolume                                                                     = 4,
	AdjustLPF                                                                        = 5,
	ChangeBGMTrack                                                                   = 6,
	ChangeBGMStateRule                                                               = 7,
	ModifyTargetedByEnemy                                                            = 8,
	ChangeOverrideAttenuation                                                        = 9,
	ReserveAmbientSound                                                              = 10,
	CancelAmbientSound                                                               = 11,
	Pause                                                                            = 12
};

/// Enum /Script/SB.ESBSoundNodeConditionBranchType
/// Size: 0x01 (1 bytes)
enum class ESBSoundNodeConditionBranchType : uint8_t
{
	None                                                                             = 0,
	EntertedNikkeMiniGame                                                            = 1
};

/// Enum /Script/SB.ESBHighPassFilterSoundNodeType
/// Size: 0x04 (4 bytes)
enum class ESBHighPassFilterSoundNodeType : uint32_t
{
	Replace                                                                          = 0,
	Multiply                                                                         = 1
};

/// Enum /Script/SB.ESBLowPassFilterSoundNodeType
/// Size: 0x04 (4 bytes)
enum class ESBLowPassFilterSoundNodeType : uint32_t
{
	Replace                                                                          = 0,
	Multiply                                                                         = 1
};

/// Enum /Script/SB.ESBSoundOcclusionActorShapeType
/// Size: 0x01 (1 bytes)
enum class ESBSoundOcclusionActorShapeType : uint8_t
{
	Box                                                                              = 0,
	Sphere                                                                           = 1,
	Capsule                                                                          = 2
};

/// Enum /Script/SB.ESBCameraDollySplineExtra
/// Size: 0x01 (1 bytes)
enum class ESBCameraDollySplineExtra : uint8_t
{
	CameraDollySpline_Flying                                                         = 0,
	CameraDollySpline_Swim                                                           = 1,
	CameraDollySpline_UnderWaterSwim                                                 = 2,
	CameraDollySpline_SlopeMoving                                                    = 3,
	CameraDollySpline_SlopeMoving2                                                   = 4,
	CameraDollySpline_SideRod                                                        = 5,
	CameraDollySpline_Rod                                                            = 6,
	CameraDollySpline_SideToSide                                                     = 7,
	CameraDollySpline_BalanceBeam                                                    = 8,
	CameraDollySpline_SlidingSlip                                                    = 9,
	CameraDollySpline_HoldBalanceBeam                                                = 10,
	CameraDollySpline_WallRun                                                        = 11,
	CameraDollySpline_Num                                                            = 12
};

/// Enum /Script/SB.ESBTheaterLevelSequenceStopType
/// Size: 0x01 (1 bytes)
enum class ESBTheaterLevelSequenceStopType : uint8_t
{
	TakeChange                                                                       = 0,
	ShotEnd                                                                          = 1,
	TheaterEnd                                                                       = 2
};

/// Enum /Script/SB.ESBTheaterShort
/// Size: 0x01 (1 bytes)
enum class ESBTheaterShort : uint8_t
{
	TheaterShort_None                                                                = -1,
	TheaterShort_LevelSequence                                                       = 0,
	TheaterShort_Dialogue                                                            = 1,
	TheaterShort_SubTitle                                                            = 2,
	TheaterShort_Num                                                                 = 3
};

/// Enum /Script/SB.ESBUIActionEventType
/// Size: 0x01 (1 bytes)
enum class ESBUIActionEventType : uint8_t
{
	None                                                                             = 0,
	UnlockBurst                                                                      = 1,
	UpdateIndicator                                                                  = 2,
	SkillTreeUnlock                                                                  = 3,
	AcquireSkill                                                                     = 4,
	ChangedAcquisitionSkill                                                          = 5,
	QuestTaskUpdate                                                                  = 6,
	QuestTaskGroupChangedState                                                       = 7,
	NotifyUpdate                                                                     = 8,
	WorkshopPopupOpen                                                                = 9,
	WorkshopPopupClosed                                                              = 10,
	WorkshopCoveredByPopup                                                           = 11,
	WorkshopUnlockTabClosed                                                          = 12,
	TopTabSetVisibility                                                              = 13,
	CurrencyUpdateCancel                                                             = 14,
	LobbyStateUpdate                                                                 = 15,
	LobbySlotPopupUpdate                                                             = 16,
	EnableInput                                                                      = 17,
	HUDVisible                                                                       = 18,
	HUDRefresh                                                                       = 19,
	HUDItemSlotRefreshItemInfo                                                       = 20,
	HUDSizeChange                                                                    = 21,
	HUDBGChange                                                                      = 22,
	HUDShowChange                                                                    = 23,
	HUDUnlockItemUtil                                                                = 24,
	HUDItemVisible                                                                   = 25,
	HUDSkillVisible                                                                  = 26,
	HUDSkillDashVisible                                                              = 27,
	HUDPlayerInfoBetaVisible                                                         = 28,
	WarpComplete                                                                     = 29,
	HUDCenterDot                                                                     = 30,
	RefreshSettingUI                                                                 = 31,
	CloseSettingPopup                                                                = 32,
	HUDQuestInfo                                                                     = 33,
	HUDGuideMessageRequest                                                           = 34,
	HUDGuideMessage                                                                  = 35,
	HUDGuideMessageVisiblity                                                         = 36,
	GameMenuOpen                                                                     = 37,
	HUDResetZoneNotice                                                               = 38,
	PlayerLevelUp                                                                    = 39,
	ItemGainClose                                                                    = 40,
	HUDNotifyCanGain                                                                 = 41,
	ManualUnlock                                                                     = 42,
	HUDDroneGuideAction                                                              = 43,
	SetDeadUIDelayTime                                                               = 44,
	TrainingRoomSkillCommand                                                         = 45,
	TrainingRoomActiveStep                                                           = 46,
	TrainingRoomJump                                                                 = 47,
	GainFriendShip                                                                   = 48,
	HUDCountDownActive                                                               = 49,
	HUDTPSState                                                                      = 50,
	ActionAssistStart                                                                = 51,
	ActionAssistStop                                                                 = 52,
	AchieveNewQuestByFriendShip                                                      = 53,
	ItemAdd                                                                          = 54,
	ShowSpecialRewardUI                                                              = 55,
	PlayerHit                                                                        = 56,
	UpdateTracking                                                                   = 57,
	SaveState                                                                        = 58,
	HUDItemEquipVisible                                                              = 59,
	TutorialTPSMode                                                                  = 60,
	TrainingRoomVisible                                                              = 61,
	LinkedItemUnlock                                                                 = 62,
	ItemUse                                                                          = 63,
	HintShow                                                                         = 64,
	AutoFocus                                                                        = 65,
	AutoFocusCancel                                                                  = 66,
	ScreenShotCapture                                                                = 67,
	HUDGetNikkeLostArticle                                                           = 68,
	HUDViewStatValue                                                                 = 69,
	RefreshNikkeLostGoodsIndicator                                                   = 70,
	HUDClearInput                                                                    = 71
};

/// Enum /Script/SB.ESBUIMessageBoxAppearanceType
/// Size: 0x01 (1 bytes)
enum class ESBUIMessageBoxAppearanceType : uint8_t
{
	Default                                                                          = 0,
	LaunchingReward                                                                  = 1
};

/// Enum /Script/SB.ESBUIDLCPurchasePopupType
/// Size: 0x01 (1 bytes)
enum class ESBUIDLCPurchasePopupType : uint8_t
{
	None                                                                             = 0,
	NierDLC                                                                          = 1,
	NikkeDLC                                                                         = 2
};

/// Enum /Script/SB.ESBUIAcceptMessageBoxConditionType
/// Size: 0x01 (1 bytes)
enum class ESBUIAcceptMessageBoxConditionType : uint8_t
{
	None                                                                             = 0,
	ChangedFrameGeneration                                                           = 1,
	Count                                                                            = 2
};

/// Enum /Script/SB.ESBUIInputAxisType
/// Size: 0x01 (1 bytes)
enum class ESBUIInputAxisType : uint8_t
{
	LeftAxisX                                                                        = 0,
	LeftAxisY                                                                        = 1,
	RightAxisX                                                                       = 2,
	RightAxisY                                                                       = 3,
	Max                                                                              = 4
};

/// Enum /Script/SB.ESBUIPhotoModeTab
/// Size: 0x01 (1 bytes)
enum class ESBUIPhotoModeTab : uint8_t
{
	None                                                                             = 0,
	Camera                                                                           = 1,
	Shutter                                                                          = 2,
	Scene                                                                            = 3,
	Deco                                                                             = 4,
	Character                                                                        = 5,
	Light                                                                            = 6,
	Preset                                                                           = 7,
	Max                                                                              = 8
};

/// Enum /Script/SB.ESBUIKeyInputDeviceType
/// Size: 0x01 (1 bytes)
enum class ESBUIKeyInputDeviceType : uint8_t
{
	GamePad                                                                          = 0,
	KeyboardMouse                                                                    = 1
};

/// Enum /Script/SB.ESBUIKeyMappingViewerManualSlotCondition
/// Size: 0x01 (1 bytes)
enum class ESBUIKeyMappingViewerManualSlotCondition : uint8_t
{
	None                                                                             = 0,
	EnableReverseThumbStick                                                          = 1,
	DisableReverseThumbStick                                                         = 2,
	Count                                                                            = 3
};

/// Enum /Script/SB.ESBUIKeyMappingViewerCategoryType
/// Size: 0x01 (1 bytes)
enum class ESBUIKeyMappingViewerCategoryType : uint8_t
{
	All                                                                              = 0,
	Main                                                                             = 1,
	TPSMode                                                                          = 2,
	Swim                                                                             = 3,
	Interaction                                                                      = 4,
	Fishing                                                                          = 5
};

/// Enum /Script/SB.ESBUIKeyMappingListDataType
/// Size: 0x01 (1 bytes)
enum class ESBUIKeyMappingListDataType : uint8_t
{
	Category                                                                         = 0,
	KeyMap                                                                           = 1
};

/// Enum /Script/SB.ESBUIBossChallengeItemState
/// Size: 0x01 (1 bytes)
enum class ESBUIBossChallengeItemState : uint8_t
{
	Available                                                                        = 0,
	Unavailable                                                                      = 1,
	Cleared                                                                          = 2
};

/// Enum /Script/SB.ESBUIEnhanceCharacterTabType
/// Size: 0x01 (1 bytes)
enum class ESBUIEnhanceCharacterTabType : uint8_t
{
	None                                                                             = 0,
	Weapon                                                                           = 1,
	Tumbler                                                                          = 2,
	ExtendedTumbler                                                                  = 3,
	GearSlot                                                                         = 4,
	Count                                                                            = 5
};

/// Enum /Script/SB.ESBUIActionAssistSignalType
/// Size: 0x01 (1 bytes)
enum class ESBUIActionAssistSignalType : uint8_t
{
	Parry                                                                            = 0,
	Evade                                                                            = 1,
	Repulse                                                                          = 2,
	Blink                                                                            = 3
};

/// Enum /Script/SB.ESBUIQuestTrackingMessageOwnerType
/// Size: 0x01 (1 bytes)
enum class ESBUIQuestTrackingMessageOwnerType : uint8_t
{
	QuestMenu                                                                        = 0,
	RequestBoard                                                                     = 1
};

/// Enum /Script/SB.ESBUIQuestJournalTitleType
/// Size: 0x01 (1 bytes)
enum class ESBUIQuestJournalTitleType : uint8_t
{
	Epic                                                                             = 0,
	Sub                                                                              = 1,
	Request                                                                          = 2
};

/// Enum /Script/SB.ESBUIGuideMessageDisplayType
/// Size: 0x01 (1 bytes)
enum class ESBUIGuideMessageDisplayType : uint8_t
{
	Default                                                                          = 0,
	Mini                                                                             = 1
};

/// Enum /Script/SB.ESBUIGameMenuEquipPresentationEventType
/// Size: 0x01 (1 bytes)
enum class ESBUIGameMenuEquipPresentationEventType : uint8_t
{
	None                                                                             = 0,
	Open                                                                             = 1,
	Unlock                                                                           = 2
};

/// Enum /Script/SB.ESBUIGameMenuEquipPresentationWidgetType
/// Size: 0x01 (1 bytes)
enum class ESBUIGameMenuEquipPresentationWidgetType : uint8_t
{
	None                                                                             = 0,
	Popup                                                                            = 1,
	Slot                                                                             = 2
};

/// Enum /Script/SB.ESBUIWorldMapTargetQuestState
/// Size: 0x01 (1 bytes)
enum class ESBUIWorldMapTargetQuestState : uint8_t
{
	None                                                                             = 0,
	NotTrackingNotComplete                                                           = 1,
	TrackingNotComplete                                                              = 2,
	NotTrackingComplete                                                              = 3,
	TrackingComplete                                                                 = 4
};

/// Enum /Script/SB.ESBUIWorldMapTargetDisplayType
/// Size: 0x01 (1 bytes)
enum class ESBUIWorldMapTargetDisplayType : uint8_t
{
	None                                                                             = 0,
	Always                                                                           = 1,
	WhenActive                                                                       = 2,
	Never                                                                            = 3
};

/// Enum /Script/SB.ESBUICampWorldMapDisplayType
/// Size: 0x01 (1 bytes)
enum class ESBUICampWorldMapDisplayType : uint8_t
{
	None                                                                             = 0,
	WhenActive                                                                       = 1,
	WhenLinkActive                                                                   = 2,
	WhenLinkDeactive                                                                 = 3,
	Always                                                                           = 4,
	Never                                                                            = 5
};

/// Enum /Script/SB.ESBUIWorldMapTargetType
/// Size: 0x01 (1 bytes)
enum class ESBUIWorldMapTargetType : uint8_t
{
	None                                                                             = 0,
	Epic                                                                             = 1,
	Sub                                                                              = 2,
	Request                                                                          = 3,
	Portal                                                                           = 4,
	TetraPod                                                                         = 5,
	FullCamp                                                                         = 6,
	SimpleCamp                                                                       = 7,
	SaveVolume                                                                       = 8,
	NewQuest                                                                         = 9,
	EnvSpawn                                                                         = 10,
	CharacterSpawn                                                                   = 11,
	PhoneBooth                                                                       = 12,
	CustomPin                                                                        = 13
};

/// Enum /Script/SB.ESBUITaskConditionDisplayType
/// Size: 0x01 (1 bytes)
enum class ESBUITaskConditionDisplayType : uint8_t
{
	ShowChild                                                                        = 0,
	ShowSelf                                                                         = 1
};

/// Enum /Script/SB.ESBUIRequestPresentationState
/// Size: 0x01 (1 bytes)
enum class ESBUIRequestPresentationState : uint8_t
{
	None                                                                             = 0,
	ReadyTitleRefreshAni                                                             = 1,
	PlayingTitleRefreshAni                                                           = 2,
	FinishTitleRefreshAni                                                            = 3
};

/// Enum /Script/SB.ESBUIRequestState
/// Size: 0x01 (1 bytes)
enum class ESBUIRequestState : uint8_t
{
	None                                                                             = 0,
	CanAcquire                                                                       = 1,
	CantAcquire                                                                      = 2,
	Progress                                                                         = 3,
	CanComplete                                                                      = 4,
	Complete                                                                         = 5,
	Failed                                                                           = 6,
	Deny                                                                             = 7
};

/// Enum /Script/SB.ESBUIRequestMessageType
/// Size: 0x01 (1 bytes)
enum class ESBUIRequestMessageType : uint8_t
{
	Accept                                                                           = 0,
	Complete                                                                         = 1
};

/// Enum /Script/SB.ESBUIRequestBoardType
/// Size: 0x01 (1 bytes)
enum class ESBUIRequestBoardType : uint8_t
{
	Default                                                                          = 0,
	CantAcquire                                                                      = 1,
	NikkeCollabo                                                                     = 2
};

/// Enum /Script/SB.ESBUISoundDebuggerStatCategory
/// Size: 0x01 (1 bytes)
enum class ESBUISoundDebuggerStatCategory : uint8_t
{
	None                                                                             = 0,
	Index                                                                            = 1,
	Option                                                                           = 2,
	Class                                                                            = 3,
	SoundPath                                                                        = 4
};

/// Enum /Script/SB.ESBUIGuideMessageEventType
/// Size: 0x01 (1 bytes)
enum class ESBUIGuideMessageEventType : uint8_t
{
	ESBUIGuideMessageEvent_None                                                      = 0,
	ESBUIGuideMessageEvent_Start                                                     = 1,
	ESBUIGuideMessageEvent_Complete                                                  = 2,
	ESBUIGuideMessageEvent_Skip                                                      = 3
};

/// Enum /Script/SB.ESBUIGuideMessageType
/// Size: 0x01 (1 bytes)
enum class ESBUIGuideMessageType : uint8_t
{
	ESBUIGuideMessage_BasicMain                                                      = 0,
	ESBUIGuideMessage_BasicSub                                                       = 1,
	ESBUIGuideMessage_Force                                                          = 2
};

/// Enum /Script/SB.ESBUILogicGameMenuEquipMountType
/// Size: 0x01 (1 bytes)
enum class ESBUILogicGameMenuEquipMountType : uint8_t
{
	ESBUILogicGameMenuEquipMount_None                                                = 0,
	ESBUILogicGameMenuEquipMount_ExoSpine1                                           = 1,
	ESBUILogicGameMenuEquipMount_ExoSpine2                                           = 2,
	ESBUILogicGameMenuEquipMount_Gear1                                               = 3,
	ESBUILogicGameMenuEquipMount_Gear2                                               = 4,
	ESBUILogicGameMenuEquipMount_Gear3                                               = 5,
	ESBUILogicGameMenuEquipMount_Gear4                                               = 6,
	ESBUILogicGameMenuEquipMount_NanoSuit                                            = 7,
	ESBUILogicGameMenuEquipMount_Acc                                                 = 8,
	ESBUILogicGameMenuEquipMount_EarRing                                             = 9,
	ESBUILogicGameMenuEquipMount_Drone                                               = 10,
	ESBUILogicGameMenuEquipMount_Lily                                                = 11,
	ESBUILogicGameMenuEquipMount_Adam                                                = 12,
	ESBUILogicGameMenuEquipMount_Hair                                                = 13,
	ESBUILogicGameMenuEquipMount_Max                                                 = 14
};

/// Enum /Script/SB.ESBUIStudioState
/// Size: 0x01 (1 bytes)
enum class ESBUIStudioState : uint8_t
{
	None                                                                             = 0,
	GameMenuEquipDefault                                                             = 1,
	GameMenuEquipExospine                                                            = 2,
	GameMenuEquipGear                                                                = 3,
	GameMenuEquipNanoSuit                                                            = 4,
	GameMenuEquipAcc                                                                 = 5,
	GameMenuEquipEarring                                                             = 6,
	GameMenuEquipDrone                                                               = 7,
	GameMenuEquipLily                                                                = 8,
	GameMenuEquipAdam                                                                = 9
};

/// Enum /Script/SB.ESBUIHUDQuestEventType
/// Size: 0x01 (1 bytes)
enum class ESBUIHUDQuestEventType : uint8_t
{
	None                                                                             = 0,
	TaskStart                                                                        = 1,
	TaskUpdate                                                                       = 2,
	TaskDone                                                                         = 3,
	QuestStart                                                                       = 4,
	QuestDone                                                                        = 5,
	TrackingIn                                                                       = 6,
	TrackingOut                                                                      = 7,
	ForceUpdate                                                                      = 8
};

/// Enum /Script/SB.ESBUIStudioPlayType
/// Size: 0x01 (1 bytes)
enum class ESBUIStudioPlayType : uint8_t
{
	None                                                                             = 0,
	Start                                                                            = 1,
	Loop                                                                             = 2,
	End                                                                              = 3
};

/// Enum /Script/SB.ESBUIWorkshopEnhanceTabState
/// Size: 0x01 (1 bytes)
enum class ESBUIWorkshopEnhanceTabState : uint8_t
{
	None                                                                             = 0,
	CanEnhance                                                                       = 1,
	NotEnoughMaterial                                                                = 2,
	MaxLevel                                                                         = 3
};

/// Enum /Script/SB.ESBUISavePageType
/// Size: 0x01 (1 bytes)
enum class ESBUISavePageType : uint8_t
{
	None                                                                             = 0,
	NewGame                                                                          = 1,
	NewGamePlus                                                                      = 2,
	LoadGame                                                                         = 3,
	OverwriteGame                                                                    = 4,
	LoadTestMap                                                                      = 5
};

/// Enum /Script/SB.ESBUILobbyType
/// Size: 0x01 (1 bytes)
enum class ESBUILobbyType : uint8_t
{
	FirstStart                                                                       = 0,
	NormalStart                                                                      = 1
};

/// Enum /Script/SB.ESBUILobbyStep
/// Size: 0x01 (1 bytes)
enum class ESBUILobbyStep : uint8_t
{
	SelectMenu                                                                       = 0,
	SelectMode                                                                       = 1
};

/// Enum /Script/SB.ESBUILobbyState
/// Size: 0x01 (1 bytes)
enum class ESBUILobbyState : uint8_t
{
	None                                                                             = 0,
	InitialSetup                                                                     = 1,
	Splash                                                                           = 2,
	MainScreen                                                                       = 3,
	GameSetup                                                                        = 4,
	FirstMainScreen                                                                  = 5
};

/// Enum /Script/SB.ESBUIDevelopSummaryType
/// Size: 0x01 (1 bytes)
enum class ESBUIDevelopSummaryType : uint8_t
{
	Hide                                                                             = 0,
	BaseInfo                                                                         = 1,
	Max                                                                              = 2
};

/// Enum /Script/SB.ESBUIRedDotState
/// Size: 0x01 (1 bytes)
enum class ESBUIRedDotState : uint8_t
{
	None                                                                             = 0,
	New                                                                              = 1,
	Dirty                                                                            = 2,
	Enable                                                                           = 3
};

/// Enum /Script/SB.ESBUIPlatform
/// Size: 0x01 (1 bytes)
enum class ESBUIPlatform : uint8_t
{
	Unknown                                                                          = 0,
	Windows                                                                          = 1,
	PS4                                                                              = 2,
	PS5                                                                              = 4,
	XBoxOne                                                                          = 8,
	All                                                                              = 15
};

/// Enum /Script/SB.ESBUISettingPopupType
/// Size: 0x01 (1 bytes)
enum class ESBUISettingPopupType : uint8_t
{
	None                                                                             = 0,
	DisplaySetting                                                                   = 205,
	PersonalInfo                                                                     = 141
};

/// Enum /Script/SB.ESBUISettingShowInNightOperationType
/// Size: 0x01 (1 bytes)
enum class ESBUISettingShowInNightOperationType : uint8_t
{
	None                                                                             = 0,
	Hide                                                                             = 1,
	Show                                                                             = 2
};

/// Enum /Script/SB.ESBUISettingButtonType
/// Size: 0x01 (1 bytes)
enum class ESBUISettingButtonType : uint8_t
{
	None                                                                             = 0,
	OpenPopup                                                                        = 1,
	Game_Quit                                                                        = 2,
	Game_ApplicationQuit                                                             = 3,
	GamePlay_Restart                                                                 = 4,
	GamePlay_NightOperationGiveUp                                                    = 5,
	PhotoMode_EnterPhotoMode                                                         = 6,
	System_PersonalInfo                                                              = 7,
	CreateUI                                                                         = 8,
	CreateKeyMappingViewerPad                                                        = 9,
	CreateKeyMappingViewerKeyboardMouse                                              = 10,
	Accessibility_MotionSicknessPreset                                               = 11,
	Accessibility_MotorPreset                                                        = 12,
	Accessibility_VisualPreset                                                       = 13,
	Accessibility_SoundPreset                                                        = 14
};

/// Enum /Script/SB.ESBUISettingRadioBoxType
/// Size: 0x01 (1 bytes)
enum class ESBUISettingRadioBoxType : uint8_t
{
	None                                                                             = 0,
	Display_GraphicMode                                                              = 1,
	Display_HighContrastType                                                         = 2
};

/// Enum /Script/SB.ESBUISettingSliderType
/// Size: 0x01 (1 bytes)
enum class ESBUISettingSliderType : uint8_t
{
	None                                                                             = 0,
	Display_Gamma                                                                    = 1,
	Display_HDRBrightness                                                            = 2,
	Display_HDRContrast                                                              = 3,
	Display_HDRClampMin                                                              = 4,
	Display_HDRClampMax                                                              = 5,
	Display_HDRAdditionalMinLuminance                                                = 6,
	Display_HDRAdditionalMaxLuminance                                                = 7,
	Display_HDRUILevel                                                               = 8,
	Display_GraphicSharpen                                                           = 9,
	Display_GraphicSharpen_DLSS                                                      = 10,
	Display_GraphicSharpen_FSR3                                                      = 11,
	Display_GraphicResolutionScale                                                   = 12,
	Display_GraphicCharacterViewDistance                                             = 13,
	Display_GraphicEnviromentObjectViewDistance                                      = 14,
	Sound_MasterVolume                                                               = 15,
	Sound_BGMVolume                                                                  = 16,
	Sound_DialogVolume                                                               = 17,
	Sound_SEVolume                                                                   = 18,
	Accessibility_MotionBlurScale                                                    = 19,
	Accessibility_ColorBlindScale                                                    = 20,
	Accessibility_ItemEquipHold                                                      = 21,
	CameraNormalSensitivity_Horizental                                               = 22,
	CameraNormalSensitivity_Vertical                                                 = 23,
	CameraTPSSensitivity_Horizental                                                  = 24,
	CameraTPSSensitivity_Vertical                                                    = 25,
	Control_TPSAimSlowDownAdditiveScale                                              = 26,
	Control_TPSAimSlowDownAdditiveScale_Mouse                                        = 27,
	Control_HapticScale                                                              = 28,
	Control_ControllerSpeakerVolume                                                  = 29,
	Control_LockOnMoveSensitivity                                                    = 30,
	CameraShake_IntensityScale                                                       = 31,
	MouseCameraNormalSensitivity_Horizental                                          = 32,
	MouseCameraNormalSensitivity_Vertical                                            = 33,
	MouseCameraTPSSensitivity_Horizental                                             = 34,
	MouseCameraTPSSensitivity_Vertical                                               = 35,
	Num                                                                              = 36
};

/// Enum /Script/SB.ESBUISettingRollingWidgetType
/// Size: 0x01 (1 bytes)
enum class ESBUISettingRollingWidgetType : uint8_t
{
	Rolling                                                                          = 0,
	ComboBox                                                                         = 1
};

/// Enum /Script/SB.ESBUISettingRollingType
/// Size: 0x01 (1 bytes)
enum class ESBUISettingRollingType : uint8_t
{
	None                                                                             = 0,
	Display_Resolution                                                               = 1,
	Display_AspectRatio                                                              = 2,
	Display_ScreenType                                                               = 3,
	Display_VSync                                                                    = 4,
	Display_FrameLimit                                                               = 5,
	Display_MonitorSwitch                                                            = 6,
	Display_Gamma                                                                    = 7,
	Display_HDR                                                                      = 8,
	Display_GraphicMode                                                              = 9,
	Display_GraphicPreset                                                            = 10,
	Display_GraphicEnviromentObjectDetail                                            = 11,
	Display_GraphicCharacterObjectDetail                                             = 12,
	Display_GraphicEnviromentTextures                                                = 13,
	Display_GraphicCharacterTextures                                                 = 14,
	Display_GraphicAnisotropicFiltering                                              = 15,
	Display_GraphicVolumetricFog                                                     = 16,
	Display_GraphicShadowQuality                                                     = 17,
	Display_GraphicEffectQuality                                                     = 18,
	Display_GraphicEnvironmentQuality                                                = 19,
	Display_GraphicLighting                                                          = 20,
	Display_GraphicFoliageQuality                                                    = 21,
	Display_GraphicAmbientOcclusion                                                  = 22,
	Display_GraphicDepthOfField                                                      = 23,
	Display_GraphicScreenSpaceReflection                                             = 24,
	Display_GraphicAntiAliasing                                                      = 25,
	Display_GraphicResolutionScalingType                                             = 26,
	Display_GraphicNvidiaDLSS                                                        = 27,
	Display_GraphicNvidiaFrameGeneration                                             = 28,
	Display_GraphicNvidiaReflexLowLatency                                            = 29,
	Display_GraphicAmdFSR3                                                           = 30,
	Display_GraphicAmdFrameInterpolation                                             = 31,
	Display_GraphicIntelXeSS                                                         = 32,
	Display_GraphicAnimationQuality                                                  = 33,
	Display_HDDMode                                                                  = 34,
	Display_SubtitleVisible                                                          = 35,
	Display_SubtitleSize                                                             = 36,
	Display_SubtitleBG                                                               = 37,
	Display_SubtitleAuthor                                                           = 38,
	Display_HUDSize                                                                  = 39,
	Display_HUDBG                                                                    = 40,
	Display_HUDShow                                                                  = 41,
	Display_Compass                                                                  = 42,
	Display_AntiAliasingQuality                                                      = 43,
	Display_ResolutionQuality                                                        = 44,
	Display_FilmGrain                                                                = 45,
	Display_ColorFringe                                                              = 46,
	Display_HFR                                                                      = 47,
	Display_HUDAspectRatio                                                           = 48,
	Display_LockMouseOnWindow                                                        = 49,
	Localize_Language                                                                = 50,
	Localize_Voice                                                                   = 51,
	Sound_AudioDeviceType                                                            = 52,
	Sound_ControllerSpeaker                                                          = 53,
	Sound_MuteWhenUnfocus                                                            = 54,
	Develop_RecordMode                                                               = 55,
	Develop_MinimizeUI                                                               = 56,
	Develop_NetworkPlay                                                              = 57,
	GamePlay_Difficulty                                                              = 58,
	GamePlay_Hint                                                                    = 59,
	GamePlay_Restart                                                                 = 60,
	GamePlay_NightOperationGiveUp                                                    = 61,
	GamePlay_Tutorial                                                                = 62,
	GamePlay_RecordPopup                                                             = 63,
	GamePlay_PonytailLength                                                          = 64,
	GamePlay_ActionAssist                                                            = 65,
	GamePlay_VisibleSkipUI                                                           = 66,
	GamePlay_EventContents                                                           = 67,
	GamePlay_DLCContents                                                             = 68,
	Accessibility_ItemAutoInteraction                                                = 69,
	Accessibility_QTEForceSuccess                                                    = 70,
	Accessibility_HUDCenterDot                                                       = 71,
	Accessibility_ColorBlind                                                         = 72,
	Accessibility_HighContrast                                                       = 73,
	Accessibility_FishingAssist                                                      = 74,
	Accessibility_PuzzleTimeLimit                                                    = 75,
	Accessibility_ItemEquipHold                                                      = 76,
	Accessibility_EasyPlatformAction                                                 = 77,
	Accessibility_HUDViewStatValue                                                   = 78,
	Accessibility_MotionSicknessPreset                                               = 79,
	Accessibility_MotorPreset                                                        = 80,
	Accessibility_VisualPreset                                                       = 81,
	Accessibility_SoundPreset                                                        = 82,
	Interface_UMPCMode                                                               = 83,
	CameraHorizentalInvert                                                           = 84,
	CameraVerticalnvert                                                              = 85,
	CameraAutoRotate                                                                 = 86,
	CameraAutoRotate_Mouse                                                           = 87,
	AdaptiveTrigger                                                                  = 88,
	Control_AutoLockOn                                                               = 89,
	Control_AutoLockOn_Mouse                                                         = 90,
	Control_AutoLockOnAfterTPS                                                       = 91,
	Control_AutoLockOnAfterTPS_Mouse                                                 = 92,
	Control_SwipeShortCutUp                                                          = 93,
	Control_SwipeShortCutDown                                                        = 94,
	Control_SwipeShortCutLeft                                                        = 95,
	Control_SwipeShortCutRight                                                       = 96,
	Control_ReverseOKCancel                                                          = 97,
	Control_ReverseLRStick                                                           = 98,
	Control_WalkKeyInputType_Pad                                                     = 99,
	Control_TPSKeyInputType_Pad                                                      = 100,
	Control_WalkKeyInputType_Mouse                                                   = 101,
	Control_TPSKeyInputType_Mouse                                                    = 102,
	Control_FishingSystem                                                            = 103,
	Control_RangeModeAimAlign                                                        = 104,
	Control_RangeModeAimAlign_Mouse                                                  = 105,
	Control_RangeModeShotCorrection                                                  = 106,
	Control_RangeModeShotCorrection_Mouse                                            = 107,
	Control_MouseLockOnMove                                                          = 108,
	MouseCameraHorizentalInvert                                                      = 109,
	MouseCameraVerticalnvert                                                         = 110,
	Num                                                                              = 111
};

/// Enum /Script/SB.ESBUISettingState
/// Size: 0x01 (1 bytes)
enum class ESBUISettingState : uint8_t
{
	None                                                                             = 0,
	FocusSideTab                                                                     = 1,
	FocusDetail                                                                      = 2,
	SelectDetailSlot                                                                 = 3
};

/// Enum /Script/SB.ESBUISettingType
/// Size: 0x01 (1 bytes)
enum class ESBUISettingType : uint8_t
{
	None                                                                             = 0,
	GameMenu                                                                         = 1,
	Lobby                                                                            = 2,
	All                                                                              = 3
};

/// Enum /Script/SB.ESBUIExospineEnhanceState
/// Size: 0x01 (1 bytes)
enum class ESBUIExospineEnhanceState : uint8_t
{
	None                                                                             = 0,
	CanEnhance                                                                       = 1,
	MaxLevel                                                                         = 2,
	NotEnoughMaterial                                                                = 3
};

/// Enum /Script/SB.ESBUINanoSuitCraftState
/// Size: 0x01 (1 bytes)
enum class ESBUINanoSuitCraftState : uint8_t
{
	Enable                                                                           = 0,
	Disable                                                                          = 1,
	Complete                                                                         = 2
};

/// Enum /Script/SB.ESBUITrackingQuestType
/// Size: 0x01 (1 bytes)
enum class ESBUITrackingQuestType : uint8_t
{
	Epic                                                                             = 0,
	Sub                                                                              = 1,
	Request                                                                          = 2
};

/// Enum /Script/SB.ESBUITrackingContainerType
/// Size: 0x01 (1 bytes)
enum class ESBUITrackingContainerType : uint8_t
{
	None                                                                             = 0,
	Instance                                                                         = 1,
	SpawnPoint                                                                       = 2,
	SaveData                                                                         = 3
};

/// Enum /Script/SB.ESBUITrackingMarkerWidgetType
/// Size: 0x01 (1 bytes)
enum class ESBUITrackingMarkerWidgetType : uint8_t
{
	World                                                                            = 0,
	Compass                                                                          = 1
};

/// Enum /Script/SB.ESBUITrackingType
/// Size: 0x01 (1 bytes)
enum class ESBUITrackingType : uint8_t
{
	None                                                                             = 0,
	Character                                                                        = 1,
	ZoneEnv                                                                          = 2,
	ZoneTrigger                                                                      = 3,
	PathNode                                                                         = 4,
	Max                                                                              = 5
};

/// Enum /Script/SB.ESBUITrackingMarkerType
/// Size: 0x01 (1 bytes)
enum class ESBUITrackingMarkerType : uint8_t
{
	None                                                                             = 0,
	Target                                                                           = 1,
	Portal                                                                           = 2,
	Max                                                                              = 3
};

/// Enum /Script/SB.ESBUIHUDNotifyUpdateType
/// Size: 0x01 (1 bytes)
enum class ESBUIHUDNotifyUpdateType : uint8_t
{
	None                                                                             = 0,
	Album                                                                            = 1,
	Quest                                                                            = 2,
	Turntable                                                                        = 3
};

/// Enum /Script/SB.ESBUIHUDNotifyGroupType
/// Size: 0x01 (1 bytes)
enum class ESBUIHUDNotifyGroupType : uint8_t
{
	None                                                                             = 0,
	TopCenter1                                                                       = 1,
	TopCenter2                                                                       = 2,
	TopRight1                                                                        = 3,
	MiddleLeft1                                                                      = 4,
	MiddleCenter1                                                                    = 5,
	MiddleCenter2                                                                    = 6,
	MiddleRight1                                                                     = 7,
	Max                                                                              = 8
};

/// Enum /Script/SB.ESBUIActionFinishType
/// Size: 0x01 (1 bytes)
enum class ESBUIActionFinishType : uint8_t
{
	None                                                                             = 0,
	Time                                                                             = 1,
	Close                                                                            = 2,
	TimeWithClose                                                                    = 3
};

/// Enum /Script/SB.ESBUIActionExecuteType
/// Size: 0x01 (1 bytes)
enum class ESBUIActionExecuteType : uint8_t
{
	None                                                                             = 0,
	LogicCreate                                                                      = 1,
	LogicEvent                                                                       = 2,
	WidgetCreate                                                                     = 3,
	InputBlock                                                                       = 4
};

/// Enum /Script/SB.ESBUIDeadHUDState
/// Size: 0x01 (1 bytes)
enum class ESBUIDeadHUDState : uint8_t
{
	Hidden                                                                           = 0,
	Dead                                                                             = 1,
	DeadRespawn                                                                      = 2,
	Coma                                                                             = 3,
	ComaRevival                                                                      = 4,
	ComaRespawn                                                                      = 5,
	ExistBossChallenge                                                               = 6
};

/// Enum /Script/SB.ESBUILogicHUDSkillModeType
/// Size: 0x01 (1 bytes)
enum class ESBUILogicHUDSkillModeType : uint8_t
{
	Beta                                                                             = 0,
	Burst                                                                            = 1,
	Tachy                                                                            = 2,
	Dash                                                                             = 3
};

/// Enum /Script/SB.ESBUILoadingScreenTag
/// Size: 0x01 (1 bytes)
enum class ESBUILoadingScreenTag : uint8_t
{
	None                                                                             = 0,
	LevelSequence                                                                    = 1,
	Shop                                                                             = 2,
	StudioActor                                                                      = 3,
	PhotoMode                                                                        = 4,
	Load                                                                             = 5
};

/// Enum /Script/SB.ESBUILogicHUDScanFieldType
/// Size: 0x01 (1 bytes)
enum class ESBUILogicHUDScanFieldType : uint8_t
{
	None                                                                             = 0,
	Actor                                                                            = 1,
	Weak                                                                             = 2,
	Item                                                                             = 3,
	EventMove                                                                        = 4,
	ZoneEnv                                                                          = 5
};

/// Enum /Script/SB.ESBUIHUDModeType
/// Size: 0x01 (1 bytes)
enum class ESBUIHUDModeType : uint8_t
{
	Normal                                                                           = 0,
	HPOnly                                                                           = 1,
	ItemBlockOnly                                                                    = 2,
	Fishing                                                                          = 3,
	TachyMode                                                                        = 4,
	TPS                                                                              = 5,
	TPSNikke                                                                         = 6,
	Fusion2Mode                                                                      = 7
};

/// Enum /Script/SB.ESBUIInteractableState
/// Size: 0x01 (1 bytes)
enum class ESBUIInteractableState : uint8_t
{
	Interactable                                                                     = 0,
	Battle                                                                           = 1,
	Dialogue                                                                         = 2,
	Unknown                                                                          = 3
};

/// Enum /Script/SB.ESBUICommonMessageBoxButtonType
/// Size: 0x01 (1 bytes)
enum class ESBUICommonMessageBoxButtonType : uint8_t
{
	None                                                                             = 0,
	Close                                                                            = 1,
	PositiveNegative                                                                 = 2,
	YesNo                                                                            = 3,
	HoldYesNo                                                                        = 4,
	HoldIgnoreRetry                                                                  = 5,
	ConfirmCancel                                                                    = 6,
	HoldConfirmCancel                                                                = 7,
	ConfirmDontAgain                                                                 = 8
};

/// Enum /Script/SB.ESBUIHUDItemSlotType
/// Size: 0x01 (1 bytes)
enum class ESBUIHUDItemSlotType : uint8_t
{
	None                                                                             = 0,
	Heal                                                                             = 1,
	Util                                                                             = 2,
	Fishing                                                                          = 3,
	Bullet                                                                           = 4
};

/// Enum /Script/SB.ESBUIShopTabType
/// Size: 0x01 (1 bytes)
enum class ESBUIShopTabType : uint8_t
{
	All                                                                              = 0,
	Core                                                                             = 1,
	Quest                                                                            = 2,
	UsableItem                                                                       = 3,
	Bullet                                                                           = 4,
	Material                                                                         = 5,
	Gear                                                                             = 6,
	Recipe                                                                           = 7,
	Look                                                                             = 8,
	Fish                                                                             = 9,
	Etc                                                                              = 10,
	Sell                                                                             = 11,
	Max                                                                              = 12
};

/// Enum /Script/SB.ESBUIFillCurve
/// Size: 0x01 (1 bytes)
enum class ESBUIFillCurve : uint8_t
{
	Linear                                                                           = 0,
	Deceleration                                                                     = 1,
	Acceleration                                                                     = 2
};

/// Enum /Script/SB.ESBUIHoldButtonStateType
/// Size: 0x01 (1 bytes)
enum class ESBUIHoldButtonStateType : uint8_t
{
	None                                                                             = 0,
	Enable                                                                           = 1,
	Disable                                                                          = 2,
	Ready                                                                            = 3,
	Hold                                                                             = 4,
	Lock                                                                             = 5
};

/// Enum /Script/SB.ESBUIIndicatorHiddenChannel
/// Size: 0x01 (1 bytes)
enum class ESBUIIndicatorHiddenChannel : uint8_t
{
	None                                                                             = 0,
	                                                                                 = 2,
	3                                                                                = 4,
	4                                                                                = 8,
	5                                                                                = 16
};

/// Enum /Script/SB.ESBUIIndicatorLockChannel
/// Size: 0x01 (1 bytes)
enum class ESBUIIndicatorLockChannel : uint8_t
{
	None                                                                             = 0,
	                                                                                 = 2,
	3                                                                                = 4,
	4                                                                                = 8,
	5                                                                                = 16
};

/// Enum /Script/SB.ESBUISkillUnlockPresentationType
/// Size: 0x01 (1 bytes)
enum class ESBUISkillUnlockPresentationType : uint8_t
{
	None                                                                             = 0,
	UnlockTree                                                                       = 1,
	UnlockSlotByAchievement                                                          = 2,
	UnlockNewGamePlus                                                                = 3
};

/// Enum /Script/SB.ESBSkillTreeUnlockProgressType
/// Size: 0x01 (1 bytes)
enum class ESBSkillTreeUnlockProgressType : uint8_t
{
	None                                                                             = 0,
	Ready                                                                            = 1,
	Start                                                                            = 2,
	Complete                                                                         = 3
};

/// Enum /Script/SB.ESBUISkillTreeType
/// Size: 0x01 (1 bytes)
enum class ESBUISkillTreeType : uint8_t
{
	ETC                                                                              = 0,
	TPS                                                                              = 1,
	Burst                                                                            = 2,
	Tachy                                                                            = 3,
	Survive                                                                          = 4,
	Beta                                                                             = 5
};

/// Enum /Script/SB.ESBUISkillSlotState
/// Size: 0x01 (1 bytes)
enum class ESBUISkillSlotState : uint8_t
{
	None                                                                             = 0,
	Enable                                                                           = 1,
	Disable                                                                          = 2,
	Acquisition                                                                      = 3,
	Lock                                                                             = 4,
	LockByAchievement                                                                = 5,
	DisableByNewGamePlus                                                             = 6
};

/// Enum /Script/SB.ESBUIBodySuitSlotType
/// Size: 0x01 (1 bytes)
enum class ESBUIBodySuitSlotType : uint8_t
{
	Left                                                                             = 0,
	Top                                                                              = 1,
	Right                                                                            = 2,
	Bottom                                                                           = 3
};

/// Enum /Script/SB.ESBUIWorkshopPopupType
/// Size: 0x01 (1 bytes)
enum class ESBUIWorkshopPopupType : uint8_t
{
	None                                                                             = 0,
	CraftResult                                                                      = 1,
	EveEnhanceResult_RechargeablePotion                                              = 2,
	EveEnhanceResult_ExtendedTumbler                                                 = 3,
	EveEnhanceResult_Weapon                                                          = 4,
	EveEnhanceResult_GearSlot                                                        = 5
};

/// Enum /Script/SB.ESBUIWorkShopType
/// Size: 0x01 (1 bytes)
enum class ESBUIWorkShopType : uint8_t
{
	Default                                                                          = 0,
	EnhanceEve                                                                       = 1,
	NanoSuit                                                                         = 2,
	Exospine                                                                         = 3,
	Drone                                                                            = 4,
	Max                                                                              = 5
};

/// Enum /Script/SB.ESBUIBagTabType
/// Size: 0x01 (1 bytes)
enum class ESBUIBagTabType : uint8_t
{
	Material                                                                         = 0,
	Core                                                                             = 1,
	Quest                                                                            = 2
};

/// Enum /Script/SB.ESBUIEquipSlotType
/// Size: 0x01 (1 bytes)
enum class ESBUIEquipSlotType : uint8_t
{
	None                                                                             = 0,
	BodySuit                                                                         = 1,
	Weapon                                                                           = 2,
	Protector                                                                        = 3,
	Gear                                                                             = 4,
	Consume                                                                          = 5,
	Acc                                                                              = 6,
	EarRing                                                                          = 7,
	Drone                                                                            = 8,
	Lily                                                                             = 9,
	Adam                                                                             = 10,
	Hair                                                                             = 11
};

/// Enum /Script/SB.ESBUIGameMenuType
/// Size: 0x01 (1 bytes)
enum class ESBUIGameMenuType : uint8_t
{
	Default                                                                          = 0,
	Equip                                                                            = 1,
	QuestJournal                                                                     = 2,
	Map                                                                              = 3,
	Bag                                                                              = 4,
	NewSkill                                                                         = 5,
	Album                                                                            = 6,
	Manual                                                                           = 7,
	Setting                                                                          = 8,
	Max                                                                              = 9
};

/// Enum /Script/SB.ESBUIInputType
/// Size: 0x01 (1 bytes)
enum class ESBUIInputType : uint8_t
{
	Positive                                                                         = 0,
	Negative                                                                         = 1,
	Gamepad_X                                                                        = 2,
	Gamepad_Y                                                                        = 3,
	Gamepad_A                                                                        = 4,
	Gamepad_B                                                                        = 5
};

/// Enum /Script/SB.ESBUMGWidgetComboBox
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetComboBox : uint8_t
{
	None                                                                             = 0,
	Visibility                                                                       = 1,
	AddItem                                                                          = 2,
	RemoveItem                                                                       = 3,
	SelectItem                                                                       = 4,
	ClearList                                                                        = 5,
	FocusRow                                                                         = 6,
	ScrollToTop                                                                      = 7,
	ScrollToBottom                                                                   = 8,
	ScrollIndexIntoView                                                              = 9,
	GetSelectedIndex                                                                 = 10,
	GetHoveredIndex                                                                  = 11,
	GetFocusedIndex                                                                  = 12,
	GetNumItems                                                                      = 13,
	UpdateItem                                                                       = 14,
	RegenerateAllEntries                                                             = 15,
	SendWidgetEvent                                                                  = 16,
	RefreshItems                                                                     = 17,
	IsRefreshPending                                                                 = 18,
	OpenContentPopup                                                                 = 19,
	CloseContentPopup                                                                = 20,
	IsOpenContentPopup                                                               = 21,
	OnDoubleClicked                                                                  = 22,
	OnClicked                                                                        = 23,
	OnPressed                                                                        = 24,
	OnReleased                                                                       = 25
};

/// Enum /Script/SB.ESBUMGWidgetRichText
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetRichText : uint8_t
{
	None                                                                             = 0,
	Text                                                                             = 1,
	Visibility                                                                       = 2,
	ActionText                                                                       = 3
};

/// Enum /Script/SB.ESBUMGWidgetTileView
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetTileView : uint8_t
{
	None                                                                             = 0,
	Visibility                                                                       = 1,
	AddItem                                                                          = 2,
	RemoveItem                                                                       = 3,
	ClearList                                                                        = 4,
	FocusRow                                                                         = 5,
	ScrollToTop                                                                      = 6,
	ScrollToBottom                                                                   = 7,
	ScrollIndexIntoView                                                              = 8,
	GetSelectedIndex                                                                 = 9,
	UpdateItem                                                                       = 10,
	RegenerateAllEntries                                                             = 11,
	NavigateToIndex                                                                  = 12,
	SetEnableItemSelect                                                              = 13,
	GetNumItems                                                                      = 14,
	SendWidgetEvent                                                                  = 15,
	OnClicked                                                                        = 16,
	OnDoubleClicked                                                                  = 17,
	OnPressed                                                                        = 18,
	OnReleased                                                                       = 19,
	SetSelectedIndex                                                                 = 20
};

/// Enum /Script/SB.ESBUMGWidgetExtendedListView
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetExtendedListView : uint8_t
{
	None                                                                             = 19,
	FastFocusPrev                                                                    = 20,
	FastFocusNext                                                                    = 21
};

/// Enum /Script/SB.ESBUMGWidgetListView
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetListView : uint8_t
{
	None                                                                             = 0,
	Visibility                                                                       = 1,
	AddItem                                                                          = 2,
	RemoveItem                                                                       = 3,
	ClearList                                                                        = 4,
	FocusRow                                                                         = 5,
	ScrollToTop                                                                      = 6,
	ScrollToBottom                                                                   = 7,
	ScrollIndexIntoView                                                              = 8,
	GetSelectedIndex                                                                 = 9,
	GetNumItems                                                                      = 10,
	UpdateItem                                                                       = 11,
	RegenerateAllEntries                                                             = 12,
	SendWidgetEvent                                                                  = 13,
	IsRefreshPending                                                                 = 14,
	OnDoubleClicked                                                                  = 15,
	OnClicked                                                                        = 16,
	OnPressed                                                                        = 17,
	OnReleased                                                                       = 18,
	Max                                                                              = 19
};

/// Enum /Script/SB.ESBUMGWidgetMultiLineEditableText
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetMultiLineEditableText : uint8_t
{
	None                                                                             = 0,
	Text                                                                             = 1,
	SetKeyboardFocus                                                                 = 2,
	HasKeyboardFocus                                                                 = 3
};

/// Enum /Script/SB.ESBUMGWidgetEditableText
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetEditableText : uint8_t
{
	None                                                                             = 0,
	Text                                                                             = 1,
	SetKeyboardFocus                                                                 = 2,
	HasKeyboardFocus                                                                 = 3
};

/// Enum /Script/SB.ESBUMGWidgetBorder
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetBorder : uint8_t
{
	None                                                                             = 0,
	Visibility                                                                       = 1,
	BackgroundDrawAs                                                                 = 2,
	SetKeyboardFocus                                                                 = 3,
	BrushColor                                                                       = 4
};

/// Enum /Script/SB.ESBUMGWidgetSBUserWidget
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetSBUserWidget : uint8_t
{
	None                                                                             = 0,
	Visibility                                                                       = 1,
	InvalidateLayoutAndVolatility                                                    = 2
};

/// Enum /Script/SB.ESBUMGWidgetHorizontalBox
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetHorizontalBox : uint8_t
{
	None                                                                             = 0,
	Visibility                                                                       = 1,
	RebuildWidget                                                                    = 2
};

/// Enum /Script/SB.ESBUMGWidgetVerticalBox
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetVerticalBox : uint8_t
{
	None                                                                             = 0,
	Visibility                                                                       = 1,
	Translation                                                                      = 2
};

/// Enum /Script/SB.ESBUMGWidgetScaleBox
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetScaleBox : uint8_t
{
	None                                                                             = 0,
	Visibility                                                                       = 1
};

/// Enum /Script/SB.ESBUMGWidgetImage
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetImage : uint8_t
{
	None                                                                             = 0,
	BrushFromTexture                                                                 = 1,
	BrushFromMediaSource                                                             = 2,
	BrushFromMaterial                                                                = 3,
	Visibility                                                                       = 4,
	Translation                                                                      = 5,
	ColorAndOpacity                                                                  = 6,
	MatInstScalarParam                                                               = 7,
	SetBrushFromResourceAsset                                                        = 8
};

/// Enum /Script/SB.ESBUMGWidgetOverlay
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetOverlay : uint8_t
{
	None                                                                             = 0,
	Visibility                                                                       = 1,
	Translation                                                                      = 2,
	Invalidate                                                                       = 3,
	RenderOpacity                                                                    = 4
};

/// Enum /Script/SB.ESBUMGWidgetCanvasPanel
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetCanvasPanel : uint8_t
{
	None                                                                             = 0,
	Visibility                                                                       = 1
};

/// Enum /Script/SB.ESBUMGWidgetProgressBar
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetProgressBar : uint8_t
{
	None                                                                             = 0,
	Percent                                                                          = 1,
	Visibility                                                                       = 2,
	FillImage                                                                        = 3
};

/// Enum /Script/SB.ESBUMGWidgetText
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetText : uint8_t
{
	None                                                                             = 0,
	Text                                                                             = 1,
	Visibility                                                                       = 2,
	FontSize                                                                         = 3,
	ColorAndOpacity                                                                  = 4
};

/// Enum /Script/SB.ESBUMGWidgetButton
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetButton : uint8_t
{
	None                                                                             = 0,
	OnClicked                                                                        = 1,
	OnPressed                                                                        = 2,
	OnReleased                                                                       = 3,
	OnHovered                                                                        = 4,
	OnUnhovered                                                                      = 5,
	Visibility                                                                       = 6,
	NormalImage                                                                      = 7,
	HoveredImage                                                                     = 8,
	PressedImage                                                                     = 9,
	NormalColorAndOpacity                                                            = 10,
	HoveredColorAndOpacity                                                           = 11,
	PressedColorAndOpacity                                                           = 12,
	OnDoubleClicked                                                                  = 13
};

/// Enum /Script/SB.ESBUMGWidgetCommonActionDetail
/// Size: 0x02 (2 bytes)
enum class ESBUMGWidgetCommonActionDetail : uint16_t
{
	AttachChild                                                                      = 60000,
	DetachChild                                                                      = 60001
};

/// Enum /Script/SB.ESBUMGWidgetType
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetType : uint8_t
{
	None                                                                             = 0,
	Button                                                                           = 1,
	Text                                                                             = 2,
	Overlay                                                                          = 3,
	Image                                                                            = 4,
	ScaleBox                                                                         = 5,
	VerticalBox                                                                      = 6,
	HorizontalBox                                                                    = 7,
	SBUserWidget                                                                     = 8,
	CanvasPanel                                                                      = 9,
	ProgressBar                                                                      = 10,
	Border                                                                           = 11,
	EditableText                                                                     = 12,
	MultiLineEditableText                                                            = 13,
	ListView                                                                         = 14,
	ExtendedListView                                                                 = 15,
	RichText                                                                         = 16,
	TileView                                                                         = 17,
	ComboBox                                                                         = 18
};

/// Enum /Script/SB.ESBUMGWidgetAction
/// Size: 0x01 (1 bytes)
enum class ESBUMGWidgetAction : uint8_t
{
	None                                                                             = 0,
	Get                                                                              = 1,
	Set                                                                              = 2,
	Bind                                                                             = 3,
	Unbind                                                                           = 4,
	Call                                                                             = 5
};

/// Enum /Script/SB.ESBUILogicType
/// Size: 0x01 (1 bytes)
enum class ESBUILogicType : uint8_t
{
	NONE                                                                             = 0,
	HUD                                                                              = 1,
	HUDGetNotice                                                                     = 2,
	HUDGetNoticeSlot                                                                 = 3,
	HUDGetNewNotice                                                                  = 4,
	HUDGetNewNoticeSlot                                                              = 5,
	HUDSystemNotice                                                                  = 6,
	HUDSystemNoticeSlot                                                              = 7,
	HUDItemNotice                                                                    = 8,
	HUDItemNoticeSlot                                                                = 9,
	HUDItemNewNotice                                                                 = 10,
	HUDItemNewNoticeSlot                                                             = 11,
	HUDPlayerInfo                                                                    = 12,
	HUDEnemyInfo                                                                     = 13,
	HUDEnemyStateBar                                                                 = 14,
	HUDEffectIcon                                                                    = 15,
	HUDSave                                                                          = 16,
	HUDSaveList                                                                      = 17,
	HUDLoadList                                                                      = 18,
	HUDDead                                                                          = 19,
	HUDFade                                                                          = 20,
	HUDScanField                                                                     = 21,
	HUDScanFieldSlot                                                                 = 22,
	HUDInteractable                                                                  = 23,
	HUDInteractableSlot                                                              = 24,
	HUDSkill                                                                         = 25,
	HUDSkillSlot                                                                     = 26,
	HUDSkillMarker                                                                   = 27,
	HUDSkillEquipmentPopup                                                           = 28,
	HUDSkillEquipmentPopupSlot                                                       = 29,
	HUDSkillPoint                                                                    = 30,
	HUDSkillPreview                                                                  = 31,
	HUDSystemInfo                                                                    = 32,
	HUDBodySuit                                                                      = 33,
	HUDEnhanceResult                                                                 = 34,
	HUDItemSlot                                                                      = 35,
	HUDItemEquip                                                                     = 36,
	HUDMultiPlayPvp                                                                  = 37,
	HUDNightOperation                                                                = 38,
	HUDNightOperationFriendSlot                                                      = 39,
	HUDNightOperationFriendIndicator                                                 = 40,
	HUDTPSMode                                                                       = 41,
	HUDTPSBullet                                                                     = 42,
	HUDTPSBulletSlot                                                                 = 43,
	HUDTPSNikkeMode                                                                  = 44,
	HUDNikkeEnemy                                                                    = 45,
	HUDNikkeQte                                                                      = 46,
	HUDFishing                                                                       = 47,
	HUDFishingDebugger                                                               = 48,
	HUDTachySlot                                                                     = 49,
	HUDQuestDebugger                                                                 = 50,
	HUDNotifyCoreItem                                                                = 51,
	HUDNotifyQuest                                                                   = 52,
	HUDNotifyQuestTask                                                               = 53,
	HUDNotifyUpdate                                                                  = 54,
	HUDNotifySkillExp                                                                = 55,
	HUDNotifyCanGain                                                                 = 56,
	HUDNotifySpecialReward                                                           = 57,
	HUDNotifyReturn                                                                  = 58,
	HUDNotifyLilyExp                                                                 = 59,
	HUDTracking                                                                      = 60,
	HUDTrackingCompass                                                               = 61,
	HUDTrackingSlot                                                                  = 62,
	HUDOffScreenIndicator                                                            = 63,
	HUDOffScreenIndicatorSlot                                                        = 64,
	HUDHint                                                                          = 65,
	HUDCampIndicator                                                                 = 66,
	HUDQuestInfo                                                                     = 67,
	HUDQuestInfoSlot                                                                 = 68,
	HUDDroneIndicator                                                                = 69,
	HUDCountDown                                                                     = 70,
	HUDActionAssist                                                                  = 71,
	HUDNikkeLostGoodsIndicator                                                       = 72,
	HUDPostRoot                                                                      = 73,
	SequencePostRoot                                                                 = 74,
	SaveMarker                                                                       = 75,
	NotifyMessage                                                                    = 76,
	SkillAcquisition                                                                 = 77,
	InteractionPoint                                                                 = 78,
	Loading                                                                          = 79,
	GameMenu                                                                         = 80,
	GameMenuTab                                                                      = 81,
	GameMenuSkillPoint                                                               = 82,
	GameMenuNewSkill                                                                 = 83,
	GameMenuNewSkillTree                                                             = 84,
	GameMenuNewSkillTreeSlot                                                         = 85,
	GameMenuNewSkillResetPopup                                                       = 86,
	GameMenuEquip                                                                    = 87,
	GameMenuEquipCallOutGear                                                         = 88,
	GameMenuEquipCallOutExoSpine                                                     = 89,
	GameMenuEquipMount                                                               = 90,
	GameMenuEquipInven                                                               = 91,
	GameMenuEquipDetail                                                              = 92,
	GameMenuEquipIconSlot                                                            = 93,
	GameMenuEquipStatViewer                                                          = 94,
	GameMenuEquipStatViewerList                                                      = 95,
	GameMenuBag                                                                      = 96,
	GameMenuBagInven                                                                 = 97,
	GameMenuBagDetail                                                                = 98,
	GameMenuSetting                                                                  = 99,
	GameMenuQuestJournal                                                             = 100,
	GameMenuSave                                                                     = 101,
	GameMenuLoad                                                                     = 102,
	GameMenuManual                                                                   = 103,
	GameMenuManualDetail                                                             = 104,
	GameMenuStat                                                                     = 105,
	GameMenuStatSlot                                                                 = 106,
	GameMenuAlbum                                                                    = 107,
	GameMenuAlbumList                                                                = 108,
	GameMenuAlbumTileView                                                            = 109,
	GameMenuAlbumDetail                                                              = 110,
	GameMenuMap                                                                      = 111,
	GameMenuMapPointer                                                               = 112,
	GameMenuMapSelectCustomPin                                                       = 113,
	GameMenuPlayGo                                                                   = 114,
	CommonChoice                                                                     = 115,
	CommonMessageBox                                                                 = 116,
	CommonMessageBoxNew                                                              = 117,
	CommonMessageBoxV3                                                               = 118,
	CommonToastMessage                                                               = 119,
	CommonCurrency                                                                   = 120,
	CommonTab                                                                        = 121,
	CommonManualTab                                                                  = 122,
	First                                                                            = 123,
	FinishEve                                                                        = 124,
	FinishEve2                                                                       = 125,
	FinishTrial                                                                      = 126,
	Lobby                                                                            = 127,
	LobbyBackground                                                                  = 128,
	ShortcutGame                                                                     = 129,
	InitialSetup                                                                     = 130,
	LobbySetting                                                                     = 131,
	SaveSlot                                                                         = 132,
	SavePage                                                                         = 133,
	GameSplash                                                                       = 134,
	LoadDemoSaveData                                                                 = 135,
	MessageBoxList                                                                   = 136,
	ShaderCompile                                                                    = 137,
	ContentsSettingPopup                                                             = 138,
	AccessibilitySettingPopup                                                        = 139,
	PSNLoginPopup                                                                    = 140,
	PersonalInfoPopup                                                                = 141,
	WorkShop                                                                         = 142,
	WorkShopTab                                                                      = 143,
	WorkShopEnhanceEve                                                               = 144,
	WorkShopNanoSuit                                                                 = 145,
	WorkShopDrone                                                                    = 146,
	WorkShopExospine                                                                 = 147,
	WorkShopBodySuitResult                                                           = 148,
	WorkShopRecoveryPotionResultPopup                                                = 149,
	WorkShopWeaponResultPopup                                                        = 150,
	WorkShopTabUnlockPopup                                                           = 151,
	Puzzle                                                                           = 152,
	RecordPopup                                                                      = 153,
	FishingResult                                                                    = 154,
	FishingFishDetail                                                                = 155,
	FishingBoxReward                                                                 = 156,
	FishingBoxRewardSlot                                                             = 157,
	CanCollection                                                                    = 158,
	CanDetail                                                                        = 159,
	CanGain                                                                          = 160,
	TestNavigation                                                                   = 161,
	AreaName                                                                         = 162,
	GuideVideo                                                                       = 163,
	GuideUnlockMode                                                                  = 164,
	GuideMessage                                                                     = 165,
	GuideMessageSlot                                                                 = 166,
	GuideRewardList                                                                  = 167,
	TutorialFloater                                                                  = 168,
	Shop                                                                             = 169,
	Shop_ItemList                                                                    = 170,
	Shop_ItemDetail                                                                  = 171,
	Shop_Popup                                                                       = 172,
	ShopAll                                                                          = 173,
	ShopCore                                                                         = 174,
	ShopQuest                                                                        = 175,
	ShopUsableItem                                                                   = 176,
	ShopBullet                                                                       = 177,
	ShopMaterial                                                                     = 178,
	ShopGear                                                                         = 179,
	ShopRecipe                                                                       = 180,
	ShopLook                                                                         = 181,
	ShopFish                                                                         = 182,
	ShopEtc                                                                          = 183,
	ShopSell                                                                         = 184,
	TeleportCamp                                                                     = 185,
	TeleportRegion                                                                   = 186,
	TeleportRegionSlot                                                               = 187,
	Empty                                                                            = 188,
	DebugCommand                                                                     = 189,
	MiniGameGorgon                                                                   = 190,
	DebugViewer                                                                      = 191,
	HUDRealTimeDebug                                                                 = 192,
	HUDSoundDebugger                                                                 = 193,
	HUDSoundDebuggerSetting                                                          = 194,
	Indicator                                                                        = 195,
	RedDot                                                                           = 196,
	SettingSlotRadioBox                                                              = 197,
	SettingSlotRadioButton                                                           = 198,
	SettingV2                                                                        = 199,
	SettingSlotComboBox                                                              = 200,
	SettingSlotRollingV2                                                             = 201,
	SettingSlotSliderV2                                                              = 202,
	SettingSlotButtonV2                                                              = 203,
	SettingPopup                                                                     = 204,
	SettingPopupDisplay                                                              = 205,
	SettingPopupDisplaySDR                                                           = 206,
	SettingPopupDisplayHDR                                                           = 207,
	KeyMappingViewer                                                                 = 208,
	KeyMappingPadViewer                                                              = 209,
	KeyMappingPopup                                                                  = 210,
	KeyMappingSlotContainer                                                          = 211,
	KeyMappingSlot                                                                   = 212,
	RequestBoard                                                                     = 213,
	NextChapterPopup                                                                 = 214,
	NightOperationSelect                                                             = 215,
	HUDResetNotice                                                                   = 216,
	HUDResetNoticeSlot                                                               = 217,
	HairSalon                                                                        = 218,
	HairSalonDetail                                                                  = 219,
	TrainingRoom                                                                     = 220,
	TrainingRoomMenu                                                                 = 221,
	TrainingRoomSkillInfo                                                            = 222,
	TrainingRoomSkillStackSlot                                                       = 223,
	TestTextCorrect                                                                  = 224,
	Reward                                                                           = 225,
	RewardSlot                                                                       = 226,
	SpecialReward                                                                    = 227,
	DebugToastMessage                                                                = 228,
	InteractionMessageBox                                                            = 229,
	DebugPlayerInfo                                                                  = 230,
	GameSplashSaveGuide                                                              = 231,
	GameSplashTrialNotice                                                            = 232,
	TrialBossChallengeMessage                                                        = 233,
	TrialShopApp                                                                     = 234,
	DLCPurchasePopup                                                                 = 235,
	BossChallenge                                                                    = 236,
	BossChallengeFinishResult                                                        = 237,
	BossChallengeDebugInfo                                                           = 238,
	BossChallengeExit                                                                = 239,
	PhotoMode                                                                        = 240,
	PhotoModeSettingSlotSlider                                                       = 241,
	PhotoModeSettingSlotRolling                                                      = 242,
	PhotoModeSettingSlotButton                                                       = 243,
	Turntable                                                                        = 244,
	NikkeLostArticlePopup                                                            = 245,
	NikkeMinigameResult                                                              = 246,
	MailBox                                                                          = 247,
	Coupon                                                                           = 248,
	ArtBook                                                                          = 249,
	NikkeStagePoup                                                                   = 250,
	GamePause                                                                        = 251
};

/// Enum /Script/SB.ESBUIMessageBoxListBackgroundType
/// Size: 0x01 (1 bytes)
enum class ESBUIMessageBoxListBackgroundType : uint8_t
{
	None                                                                             = 0,
	BlackBoard                                                                       = 1,
	FadeBlackBoard                                                                   = 2
};

/// Enum /Script/SB.ESBWidgetGeometryMode
/// Size: 0x01 (1 bytes)
enum class ESBWidgetGeometryMode : uint8_t
{
	Plane                                                                            = 0,
	Cylinder                                                                         = 1,
	Billboard                                                                        = 2
};

/// Enum /Script/SB.ESBWidgetBlendMode
/// Size: 0x01 (1 bytes)
enum class ESBWidgetBlendMode : uint8_t
{
	Opaque                                                                           = 0,
	Masked                                                                           = 1,
	Transparent                                                                      = 2
};

/// Enum /Script/SB.ESBWidgetTimingPolicy
/// Size: 0x01 (1 bytes)
enum class ESBWidgetTimingPolicy : uint8_t
{
	RealTime                                                                         = 0,
	GameTime                                                                         = 1
};

/// Enum /Script/SB.ESBWidgetSpace
/// Size: 0x01 (1 bytes)
enum class ESBWidgetSpace : uint8_t
{
	World                                                                            = 0,
	Screen                                                                           = 1
};

/// Enum /Script/SB.ESBCharacterWindVolumeEncompassState
/// Size: 0x01 (1 bytes)
enum class ESBCharacterWindVolumeEncompassState : uint8_t
{
	ESBCharacterWindVolumeEncompassState_None                                        = 0,
	ESBCharacterWindVolumeEncompassState_Entering                                    = 1,
	ESBCharacterWindVolumeEncompassState_Entered                                     = 2,
	ESBCharacterWindVolumeEncompassState_Leaving                                     = 3,
	ESBCharacterWindVolumeEncompassState_FinishedLeaving                             = 4
};

/// Class /Script/SB.SBWidgetNavigationCustom
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBWidgetNavigationCustom : public UInterface
{ 
public:

	/// Functions
	// Function /Script/SB.SBWidgetNavigationCustom.GetNavigationTargetMap
	constexpr static const FunctionPointer<USBWidgetNavigationCustom, TMap<USBUserWidget*, FSBWidgetNavigationInfo>> GetNavigationTargetMap = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBWidgetNavigationCustom.GetNavigationRelay
	constexpr static const FunctionPointer<USBWidgetNavigationCustom, UWidget*, const EUINavigation, const USBUserWidget*, const USBUserWidget*> GetNavigationRelay = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBWidgetNavigationCustom.GetNavigation
	constexpr static const FunctionPointer<USBWidgetNavigationCustom, UWidget*, const EUINavigation> GetNavigation = { 0x2bbb090, 2 }; 
};

/// Class /Script/SB.SBWidgetNavigationCustomLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBWidgetNavigationCustomLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/SB.SBWidgetNavigationCustomLibrary.GetNavigationRelayDefault
	constexpr static const FunctionPointer<USBWidgetNavigationCustomLibrary, UWidget*, const TScriptInterface<Class>, const EUINavigation, const USBUserWidget*, const USBUserWidget*> GetNavigationRelayDefault = { 0x266cc90, 0 }; 
};

/// Struct /Script/SB.SBCineCameraActorBoundsBoneData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBCineCameraActorBoundsBoneData
{ 
	bool                                               bUseBoneData;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FName>                                      BoneArray;                                                  // 0x0008   (0x0010)  
	bool                                               bUseAutoFocus;                                              // 0x0018   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	FName                                              FocusBone;                                                  // 0x001C   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/SB.SBCineCameraActorBoundsBoneTemplateData
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class USBCineCameraActorBoundsBoneTemplateData : public UDataAsset
{ 
public:
	TArray<FSBCineCameraActorBoundsBoneData>           ActorBoneNameArray;                                         // 0x0030   (0x0010)  
};

/// Class /Script/SB.SBAIController
/// Size: 0x03E0 (992 bytes) (0x0003D0 - 0x0003E0) align n/a MaxSize: 0x03E0
class ASBAIController : public AAIController
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x03D0   (0x0010)  MISSED
};

/// Class /Script/SB.SBAIControlVolume
/// Size: 0x0320 (800 bytes) (0x000318 - 0x000320) align n/a MaxSize: 0x0320
class ASBAIControlVolume : public AVolume
{ 
public:
	bool                                               bNotDetectTarget;                                           // 0x0318   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0319   (0x0007)  MISSED
};

/// Struct /Script/SB.SBAIFormationInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAIFormationInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TArray<FVector>                                    LocationArray;                                              // 0x0008   (0x0010)  
};

/// Class /Script/SB.SBAIFormationData
/// Size: 0x0090 (144 bytes) (0x000030 - 0x000090) align n/a MaxSize: 0x0090
class USBAIFormationData : public UDataAsset
{ 
public:
	TArray<FSBAIFormationInfo>                         AIFormationInfoArray;                                       // 0x0030   (0x0010)  
	TMap<FName, int32_t>                               AIFormationInfoMap;                                         // 0x0040   (0x0050)  
};

/// Class /Script/SB.SBAIFormationDataPreviewComponent
/// Size: 0x0260 (608 bytes) (0x000260 - 0x000260) align n/a MaxSize: 0x0260
class USBAIFormationDataPreviewComponent : public USceneComponent
{ 
public:
};

/// Class /Script/SB.SBAIFormationDataPreviewActor
/// Size: 0x02E8 (744 bytes) (0x0002C8 - 0x0002E8) align n/a MaxSize: 0x02E8
class ASBAIFormationDataPreviewActor : public AActor
{ 
public:
	class USBAIFormationDataPreviewComponent*          ActorRootComponent;                                         // 0x02C8   (0x0008)  
	class UArrowComponent*                             ArrowComponent;                                             // 0x02D0   (0x0008)  
	class UBillboardComponent*                         SpriteComponent;                                            // 0x02D8   (0x0008)  
	class USBAIFormationData*                          AIFormationData;                                            // 0x02E0   (0x0008)  
};

/// Class /Script/SB.SBAimTargetComponent
/// Size: 0x0570 (1392 bytes) (0x000568 - 0x000570) align n/a MaxSize: 0x0570
class USBAimTargetComponent : public UBoxComponent
{ 
public:
	float                                              CheckTargetCollisionRadius;                                 // 0x0568   (0x0004)  
	float                                              AimSlowdownPercent;                                         // 0x056C   (0x0004)  
};

/// Struct /Script/SB.SBAppearanceShow
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBAppearanceShow
{ 
	FName                                              Appearance;                                                 // 0x0000   (0x0008)  
	class USBShowData*                                 BehaviorArriveShow;                                         // 0x0008   (0x0008)  
	class USBShowData*                                 BehaviorLeaveShow;                                          // 0x0010   (0x0008)  
	TArray<class USBShowData*>                         BehaviorActiveShowArray;                                    // 0x0018   (0x0010)  
	TArray<class USBShowData*>                         BehaviorIdleShowArray;                                      // 0x0028   (0x0010)  
};

/// Struct /Script/SB.SBBehaviorIterateShowInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBBehaviorIterateShowInfo
{ 
	float                                              Duration;                                                   // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            ShowPath;                                                   // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBBehaviorPositionInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBBehaviorPositionInfo
{ 
	FTransform                                         Transform;                                                  // 0x0000   (0x0030)  
	int32_t                                            ShowOtherActorIndex;                                        // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0034   (0x000C)  MISSED
};

/// Struct /Script/SB.SBAIWorldNode
/// Size: 0x02B0 (688 bytes) (0x000000 - 0x0002B0) align n/a MaxSize: 0x02B0
struct FSBAIWorldNode
{ 
	ESBAIWorldNodeType                                 NodeType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData11_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<ESBJob>                                     ValidJobArray;                                              // 0x0008   (0x0010)  
	TArray<FName>                                      ValidTagArray;                                              // 0x0018   (0x0010)  
	TArray<FName>                                      InvalidTagArray;                                            // 0x0028   (0x0010)  
	float                                              RoadWidth;                                                  // 0x0038   (0x0004)  
	float                                              RoadArriveBounds;                                           // 0x003C   (0x0004)  
	ESBMetaAIBehavior                                  Behavior;                                                   // 0x0040   (0x0001)  
	ESBMetaAIBehaviorStance                            BehaviorStance;                                             // 0x0041   (0x0001)  
	unsigned char                                      UnknownData12_6[0x6];                                       // 0x0042   (0x0006)  MISSED
	FString                                            BehaviorArriveShowPath;                                     // 0x0048   (0x0010)  
	FString                                            BehaviorLeaveShowPath;                                      // 0x0058   (0x0010)  
	TArray<class USBShowData*>                         BehaviorActiveShowArray;                                    // 0x0068   (0x0010)  
	TArray<class USBShowData*>                         BehaviorIdleShowArray;                                      // 0x0078   (0x0010)  
	TArray<FSBAppearanceShow>                          BehaviorShowByAppearance;                                   // 0x0088   (0x0010)  
	float                                              BehaviorIdleShowMinTime;                                    // 0x0098   (0x0004)  
	float                                              BehaviorIdleShowMaxTime;                                    // 0x009C   (0x0004)  
	FString                                            BehaviorRunBlendSpaceRelativePath;                          // 0x00A0   (0x0010)  
	float                                              BehaviorRunBlendSpaceBlendInTime;                           // 0x00B0   (0x0004)  
	float                                              BehaviorRunBlendSpaceBlendOutTime;                          // 0x00B4   (0x0004)  
	float                                              BehaviorRunBlendSpaceSetDelayTime;                          // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x00BC   (0x0004)  MISSED
	FString                                            ConditionActiveBehaviorNodeShowPath;                        // 0x00C0   (0x0010)  
	TArray<FSBBehaviorIterateShowInfo>                 BehaviorIterateShowInfoArray;                               // 0x00D0   (0x0010)  
	float                                              BehaviorRemainTime;                                         // 0x00E0   (0x0004)  
	bool                                               BehaviorInfinity;                                           // 0x00E4   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x00E5   (0x0003)  MISSED
	float                                              BehaviorNodeCoolTime;                                       // 0x00E8   (0x0004)  
	int32_t                                            BehaviorActivityMinActorCount;                              // 0x00EC   (0x0004)  
	float                                              BehaviorActivityWatingTime;                                 // 0x00F0   (0x0004)  
	int32_t                                            Condition_CheckActiveBehaviorNodeIndex;                     // 0x00F4   (0x0004)  
	TArray<int32_t>                                    ConditionActiveBehaviorNodeIndexArray;                      // 0x00F8   (0x0010)  
	FName                                              SpecialBehaviorTag;                                         // 0x0108   (0x0008)  
	FName                                              BehaviorAlias;                                              // 0x0110   (0x0008)  
	float                                              OverrideStopMoveDistanceWithPlayer;                         // 0x0118   (0x0004)  
	float                                              OverrideStopMoveAngleWithPlayer;                            // 0x011C   (0x0004)  
	ESBMetaAILookAtType                                OverrideLookAtType;                                         // 0x0120   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0121   (0x0003)  MISSED
	float                                              OverrideLookAtYawAngle;                                     // 0x0124   (0x0004)  
	float                                              OverrideLookAtPitchAngle;                                   // 0x0128   (0x0004)  
	float                                              OverrideLookAtOnceTime;                                     // 0x012C   (0x0004)  
	float                                              OverrideLookAtCooltime;                                     // 0x0130   (0x0004)  
	float                                              OverrideLookAtDistance;                                     // 0x0134   (0x0004)  
	float                                              LookAtZOffset;                                              // 0x0138   (0x0004)  
	float                                              OverrideLookAtStopDistance;                                 // 0x013C   (0x0004)  
	TEnumAsByte<ESBConditionCheckType>                 OverrideEnableShoulderCharge;                               // 0x0140   (0x0001)  
	bool                                               bBehaviorForceInvite;                                       // 0x0141   (0x0001)  
	unsigned char                                      UnknownData16_6[0x2];                                       // 0x0142   (0x0002)  MISSED
	float                                              BehaviorForceInviteDistance;                                // 0x0144   (0x0004)  
	float                                              BehaviorLocationSnapDistance;                               // 0x0148   (0x0004)  
	float                                              BehaviorKeepDistanceWhenArrived;                            // 0x014C   (0x0004)  
	bool                                               bDisablePawnCollisionWhenPlayArriveShow;                    // 0x0150   (0x0001)  
	bool                                               bDisablePawnCollisionWhenPlayLeaveShow;                     // 0x0151   (0x0001)  
	unsigned char                                      UnknownData17_6[0x6];                                       // 0x0152   (0x0006)  MISSED
	TArray<TWeakObjectPtr<AActor*>>                    IgnoreCollisionActorArray;                                  // 0x0158   (0x0010)  
	bool                                               bDisableInteraction;                                        // 0x0168   (0x0001)  
	bool                                               bDisableDistancePooling;                                    // 0x0169   (0x0001)  
	bool                                               bDisableSelfiePose;                                         // 0x016A   (0x0001)  
	unsigned char                                      UnknownData18_6[0x5];                                       // 0x016B   (0x0005)  MISSED
	FString                                            SubBehaviorArriveShowPath;                                  // 0x0170   (0x0010)  
	FString                                            SubBehaviorLeaveShowPath;                                   // 0x0180   (0x0010)  
	float                                              SubBehaviorRemainTime;                                      // 0x0190   (0x0004)  
	FVector                                            Location;                                                   // 0x0194   (0x000C)  
	FVector                                            ForwardVector;                                              // 0x01A0   (0x000C)  
	int32_t                                            NodeIndex;                                                  // 0x01AC   (0x0004)  
	int32_t                                            GroupIndex;                                                 // 0x01B0   (0x0004)  
	unsigned char                                      UnknownData19_6[0x4];                                       // 0x01B4   (0x0004)  MISSED
	TArray<int32_t>                                    LinkNodeIndexArray;                                         // 0x01B8   (0x0010)  
	TArray<int32_t>                                    LinkSubBehaviorNodeIndexArray;                              // 0x01C8   (0x0010)  
	TArray<int32_t>                                    LinkNextBehaviorNodeIndexArray;                             // 0x01D8   (0x0010)  
	TArray<FSBBehaviorPositionInfo>                    BehaviorTransformArray;                                     // 0x01E8   (0x0010)  
	unsigned char                                      UnknownData20_6[0x8];                                       // 0x01F8   (0x0008)  MISSED
	FTransform                                         InteractionTransform;                                       // 0x0200   (0x0030)  
	unsigned char                                      UnknownData21_7[0x80];                                      // 0x0230   (0x0080)  MISSED
};

/// Class /Script/SB.SBAIWorldManager
/// Size: 0x03B0 (944 bytes) (0x0002C8 - 0x0003B0) align n/a MaxSize: 0x03B0
class ASBAIWorldManager : public AActor
{ 
public:
	TArray<FSBAIWorldNode>                             NodeArray;                                                  // 0x02C8   (0x0010)  
	TArray<int32_t>                                    RoadNodeArray;                                              // 0x02D8   (0x0010)  
	TArray<int32_t>                                    BehaviorNodeArray;                                          // 0x02E8   (0x0010)  
	TArray<int32_t>                                    TagNodeArray;                                               // 0x02F8   (0x0010)  
	class USBAIFormationData*                          AIFormationData;                                            // 0x0308   (0x0008)  
	unsigned char                                      UnknownData01_7[0xA0];                                      // 0x0310   (0x00A0)  MISSED
};

/// Class /Script/SB.SBAIWorldNodeComponent
/// Size: 0x0260 (608 bytes) (0x000260 - 0x000260) align n/a MaxSize: 0x0260
class USBAIWorldNodeComponent : public USceneComponent
{ 
public:
};

/// Struct /Script/SB.SBAIWorldNodeBehaviorIterateShowInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBAIWorldNodeBehaviorIterateShowInfo
{ 
	float                                              Duration;                                                   // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class USBShowData*                                 Show;                                                       // 0x0008   (0x0008)  
};

/// Class /Script/SB.SBAIWorldNodeActor
/// Size: 0x0470 (1136 bytes) (0x0002C8 - 0x000470) align n/a MaxSize: 0x0470
class ASBAIWorldNodeActor : public AActor
{ 
public:
	class USBAIWorldNodeComponent*                     ActorRootComponent;                                         // 0x02C8   (0x0008)  
	class UStaticMeshComponent*                        StaticMeshComponent;                                        // 0x02D0   (0x0008)  
	class UTextRenderComponent*                        TextRenderComponent;                                        // 0x02D8   (0x0008)  
	FString                                            Description;                                                // 0x02E0   (0x0010)  
	TArray<TWeakObjectPtr<ASBAIWorldNodeActor*>>       LinkNodeArray;                                              // 0x02F0   (0x0010)  
	ESBAIWorldNodeType                                 NodeType;                                                   // 0x0300   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0301   (0x0003)  MISSED
	int32_t                                            NodeIndex;                                                  // 0x0304   (0x0004)  
	TArray<ESBJob>                                     ValidJobArray;                                              // 0x0308   (0x0010)  
	TArray<FName>                                      ValidTagArray;                                              // 0x0318   (0x0010)  
	TArray<FName>                                      InvalidTagArray;                                            // 0x0328   (0x0010)  
	float                                              RoadWidth;                                                  // 0x0338   (0x0004)  
	float                                              RoadArriveBounds;                                           // 0x033C   (0x0004)  
	ESBMetaAIBehavior                                  Behavior;                                                   // 0x0340   (0x0001)  
	ESBMetaAIBehaviorStance                            BehaviorStance;                                             // 0x0341   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x0342   (0x0002)  MISSED
	int32_t                                            BehaviorActivityMinActorCount;                              // 0x0344   (0x0004)  
	float                                              BehaviorActivityWatingTime;                                 // 0x0348   (0x0004)  
	float                                              BehaviorRemainTime;                                         // 0x034C   (0x0004)  
	bool                                               BehaviorInfinity;                                           // 0x0350   (0x0001)  
	bool                                               bDisablePawnCollisionWhenPlayArriveShow;                    // 0x0351   (0x0001)  
	bool                                               bDisablePawnCollisionWhenPlayLeaveShow;                     // 0x0352   (0x0001)  
	unsigned char                                      UnknownData09_6[0x5];                                       // 0x0353   (0x0005)  MISSED
	class USBShowData*                                 BehaviorArriveShow;                                         // 0x0358   (0x0008)  
	class USBShowData*                                 BehaviorLeaveShow;                                          // 0x0360   (0x0008)  
	TArray<class USBShowData*>                         BehaviorActiveShowArray;                                    // 0x0368   (0x0010)  
	TArray<class USBShowData*>                         BehaviorIdleShowArray;                                      // 0x0378   (0x0010)  
	TArray<FSBAppearanceShow>                          BehaviorShowByAppearance;                                   // 0x0388   (0x0010)  
	float                                              BehaviorIdleShowMinTime;                                    // 0x0398   (0x0004)  
	float                                              BehaviorIdleShowMaxTime;                                    // 0x039C   (0x0004)  
	FString                                            BehaviorRunBlendSpaceRelativePath;                          // 0x03A0   (0x0010)  
	float                                              BehaviorRunBlendSpaceBlendInTime;                           // 0x03B0   (0x0004)  
	float                                              BehaviorRunBlendSpaceBlendOutTime;                          // 0x03B4   (0x0004)  
	float                                              BehaviorRunBlendSpaceSetDelayTime;                          // 0x03B8   (0x0004)  
	float                                              BehaviorNodeCoolTime;                                       // 0x03BC   (0x0004)  
	TWeakObjectPtr<class ASBAIWorldNodeActor*>         Condition_CheckActiveBehaviorNode;                          // 0x03C0   (0x0008)  
	class USBShowData*                                 ConditionActiveBehaviorNodeShow;                            // 0x03C8   (0x0008)  
	TArray<FSBAIWorldNodeBehaviorIterateShowInfo>      BehaviorIterateShowArray;                                   // 0x03D0   (0x0010)  
	TArray<TWeakObjectPtr<AActor*>>                    IgnoreCollisionActorArray;                                  // 0x03E0   (0x0010)  
	bool                                               bDisableInteraction;                                        // 0x03F0   (0x0001)  
	bool                                               bDisableDistancePooling;                                    // 0x03F1   (0x0001)  
	bool                                               bDisableSelfiePose;                                         // 0x03F2   (0x0001)  
	unsigned char                                      UnknownData10_6[0x1];                                       // 0x03F3   (0x0001)  MISSED
	FName                                              BehaviorAlias;                                              // 0x03F4   (0x0008)  
	FName                                              SpecialBehaviorTag;                                         // 0x03FC   (0x0008)  
	float                                              OverrideStopMoveDistanceWithPlayer;                         // 0x0404   (0x0004)  
	float                                              OverrideStopMoveAngleWithPlayer;                            // 0x0408   (0x0004)  
	ESBMetaAILookAtType                                OverrideLookAtType;                                         // 0x040C   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x040D   (0x0003)  MISSED
	float                                              OverrideLookAtYawAngle;                                     // 0x0410   (0x0004)  
	float                                              OverrideLookAtPitchAngle;                                   // 0x0414   (0x0004)  
	float                                              OverrideLookAtOnceTime;                                     // 0x0418   (0x0004)  
	float                                              OverrideLookAtCooltime;                                     // 0x041C   (0x0004)  
	float                                              OverrideLookAtDistance;                                     // 0x0420   (0x0004)  
	float                                              LookAtZOffset;                                              // 0x0424   (0x0004)  
	float                                              OverrideLookAtStopDistance;                                 // 0x0428   (0x0004)  
	TEnumAsByte<ESBConditionCheckType>                 OverrideEnableShoulderCharge;                               // 0x042C   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x042D   (0x0003)  MISSED
	TArray<TWeakObjectPtr<ASBAIWorldNodeActor*>>       NextBehaviorNodeArray;                                      // 0x0430   (0x0010)  
	bool                                               bBehaviorForceInvite;                                       // 0x0440   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x0441   (0x0003)  MISSED
	float                                              BehaviorForceInviteDistance;                                // 0x0444   (0x0004)  
	float                                              BehaviorLocationSnapDistance;                               // 0x0448   (0x0004)  
	float                                              BehaviorKeepDistanceWhenArrived;                            // 0x044C   (0x0004)  
	TWeakObjectPtr<class ASBAIWorldNodeActor*>         NextSubBehaviorNode;                                        // 0x0450   (0x0008)  
	class USBShowData*                                 SubBehaviorArriveShow;                                      // 0x0458   (0x0008)  
	class USBShowData*                                 SubBehaviorLeaveShow;                                       // 0x0460   (0x0008)  
	float                                              SubBehaviorRemainTime;                                      // 0x0468   (0x0004)  
	int32_t                                            ShowOtherActorIndex;                                        // 0x046C   (0x0004)  
};

/// Class /Script/SB.SBAliasController
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class USBAliasController : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Class /Script/SB.SBAmbientSoundVolume
/// Size: 0x0370 (880 bytes) (0x000318 - 0x000370) align n/a MaxSize: 0x0370
class ASBAmbientSoundVolume : public AVolume
{ 
public:
	bool                                               bActiveVolume;                                              // 0x0318   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0319   (0x0003)  MISSED
	int32_t                                            Channel;                                                    // 0x031C   (0x0004)  
	float                                              Priority;                                                   // 0x0320   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0324   (0x0004)  MISSED
	class USoundBase*                                  Sound;                                                      // 0x0328   (0x0008)  
	float                                              FadeInDuration;                                             // 0x0330   (0x0004)  
	float                                              FadeOutDuration;                                            // 0x0334   (0x0004)  
	float                                              Volume;                                                     // 0x0338   (0x0004)  
	float                                              LPFFrequency;                                               // 0x033C   (0x0004)  
	unsigned char                                      UnknownData05_6[0x18];                                      // 0x0340   (0x0018)  MISSED
	FVector                                            LevelObjOrigin;                                             // 0x0358   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0364   (0x000C)  
};

/// Class /Script/SB.SBAnimInstance
/// Size: 0x0520 (1312 bytes) (0x0002C8 - 0x000520) align n/a MaxSize: 0x0520
class USBAnimInstance : public UAnimInstance
{ 
public:
	unsigned char                                      UnknownData01_1[0x258];                                     // 0x02C8   (0x0258)  MISSED

	/// Functions
	// Function /Script/SB.SBAnimInstance.Event_EventMove
	constexpr static const FunctionPointer<USBAnimInstance, void, const USBSkeletalMeshComponent*, const bool> Event_EventMove = { 0x2bbb090, 0 }; 
};

/// Class /Script/SB.SBAnimNotify_CharSESound
/// Size: 0x0090 (144 bytes) (0x000038 - 0x000090) align n/a MaxSize: 0x0090
class USBAnimNotify_CharSESound : public UAnimNotify
{ 
public:
	FName                                              VoiceKey;                                                   // 0x0038   (0x0008)  
	FName                                              ReactionKey;                                                // 0x0040   (0x0008)  
	FName                                              HitKey;                                                     // 0x0048   (0x0008)  
	TEnumAsByte<ESBCharacterHitSoundType>              HitType;                                                    // 0x0050   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	FName                                              ConditionKey;                                               // 0x0054   (0x0008)  
	bool                                               bFollow : 1;                                                // 0x005C:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x005D   (0x0003)  MISSED
	FVector                                            RelativeLocation;                                           // 0x0060   (0x000C)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	class USoundBase*                                  DefaultSound;                                               // 0x0070   (0x0008)  
	float                                              DefaultPitchMultiply;                                       // 0x0078   (0x0004)  
	float                                              DefaultVolumeMultiply;                                      // 0x007C   (0x0004)  
	class USoundClass*                                 DefaultSoundClass;                                          // 0x0080   (0x0008)  
	class USoundAttenuation*                           DefaultAttenuation;                                         // 0x0088   (0x0008)  
};

/// Class /Script/SB.SBAnimNotify_DisableIdleAdditiveAnim
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align n/a MaxSize: 0x0040
class USBAnimNotify_DisableIdleAdditiveAnim : public UAnimNotify
{ 
public:
	bool                                               bDisableIdleAdditiveAnim;                                   // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/SB.SBAnimNotify_EventMoveIK
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align n/a MaxSize: 0x0048
class USBAnimNotify_EventMoveIK : public UAnimNotify
{ 
public:
	TArray<FSBEventMoveIKData>                         EventMoveIKData;                                            // 0x0038   (0x0010)  
};

/// Class /Script/SB.SBAnimNotify_FeetIKControl
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class USBAnimNotify_FeetIKControl : public UAnimNotify
{ 
public:
	float                                              TraceScale_FeetIK;                                          // 0x0038   (0x0004)  
	float                                              TraceScale_Duration;                                        // 0x003C   (0x0004)  
	float                                              FootIKSetPriority;                                          // 0x0040   (0x0004)  
	bool                                               bEnableFeetIK;                                              // 0x0044   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              FlatGroundBlendTime;                                        // 0x0048   (0x0004)  
	float                                              SlantGroundBlendTime;                                       // 0x004C   (0x0004)  
	float                                              RecoverPendingDuration;                                     // 0x0050   (0x0004)  
	float                                              RecoverFlatGroundBlendTime;                                 // 0x0054   (0x0004)  
	float                                              RecoverSlantGroundBlendTime;                                // 0x0058   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBSoundIntParamInfo
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBSoundIntParamInfo
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	int32_t                                            ParamValue;                                                 // 0x0008   (0x0004)  
};

/// Class /Script/SB.SBAnimNotify_FootStep
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class USBAnimNotify_FootStep : public UAnimNotify
{ 
public:
	FName                                              FootStepSetKey;                                             // 0x0038   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0040   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x0044   (0x0004)  
	TArray<FSBSoundIntParamInfo>                       IntParams;                                                  // 0x0048   (0x0010)  
	bool                                               PlayVibrationOnlyLocalPlayer;                               // 0x0058   (0x0001)  
	bool                                               bPreviewVibration;                                          // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x005A   (0x0006)  MISSED
};

/// Class /Script/SB.SBAnimNotify_KawaiiPhysicsReset
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align n/a MaxSize: 0x0048
class USBAnimNotify_KawaiiPhysicsReset : public UAnimNotify
{ 
public:
	float                                              FadeInTime;                                                 // 0x0038   (0x0004)  
	float                                              FadeOutTime;                                                // 0x003C   (0x0004)  
	float                                              WaitingTime;                                                // 0x0040   (0x0004)  
	float                                              TargetAlpha;                                                // 0x0044   (0x0004)  
};

/// Class /Script/SB.SBAnimNotify_PhysicsReset
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align n/a MaxSize: 0x0048
class USBAnimNotify_PhysicsReset : public UAnimNotify
{ 
public:
	TEnumAsByte<ESBSkelMeshSlot>                       PhysicsResetSlot;                                           // 0x0038   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              PhysicsWeightFadeInTime;                                    // 0x003C   (0x0004)  
	float                                              PhysicsWeightFadeOutTime;                                   // 0x0040   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/SB.SBAnimNotify_PlayCustomAnimAdditive
/// Size: 0x0078 (120 bytes) (0x000038 - 0x000078) align n/a MaxSize: 0x0078
class USBAnimNotify_PlayCustomAnimAdditive : public UAnimNotify
{ 
public:
	FSoftObjectPath                                    AdditiveAnimation;                                          // 0x0038   (0x0018)  
	float                                              BlendInTime;                                                // 0x0050   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0054   (0x0004)  
	float                                              Priority;                                                   // 0x0058   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	TArray<TEnumAsByte<ESBCharaterAdditiveBodyType>>   AdditiveBodyTypeArray;                                      // 0x0060   (0x0010)  
	float                                              EndDelayTime;                                               // 0x0070   (0x0004)  
	bool                                               bDisableIdleAdditiveAnim;                                   // 0x0074   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0075   (0x0003)  MISSED
};

/// Class /Script/SB.SBAnimNotify_PlayMaterialParam
/// Size: 0x01F0 (496 bytes) (0x000038 - 0x0001F0) align n/a MaxSize: 0x01F0
class USBAnimNotify_PlayMaterialParam : public UAnimNotify
{ 
public:
	FName                                              ParameterName;                                              // 0x0038   (0x0008)  
	TEnumAsByte<ESBMaterialParamType>                  ParamType;                                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              Duration;                                                   // 0x0044   (0x0004)  
	FRuntimeFloatCurve                                 ParamValue1;                                                // 0x0048   (0x0088)  
	FRuntimeFloatCurve                                 ParamValue2;                                                // 0x00D0   (0x0088)  
	FRuntimeFloatCurve                                 ParamValue3;                                                // 0x0158   (0x0088)  
	int32_t                                            LoopCount;                                                  // 0x01E0   (0x0004)  
	int32_t                                            ApplyMaterialIndex;                                         // 0x01E4   (0x0004)  
	TEnumAsByte<ESBSkelMeshSlot>                       MeshSlotIndex;                                              // 0x01E8   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x01E9   (0x0007)  MISSED
};

/// Class /Script/SB.SBAnimNotify_SetAnimBPFloatProperty
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align n/a MaxSize: 0x0050
class USBAnimNotify_SetAnimBPFloatProperty : public UAnimNotify
{ 
public:
	FName                                              Name;                                                       // 0x0038   (0x0008)  
	float                                              Value;                                                      // 0x0040   (0x0004)  
	float                                              DefaultValue;                                               // 0x0044   (0x0004)  
	float                                              Duration;                                                   // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBAnimNotifyHapticProperty
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBAnimNotifyHapticProperty
{ 
	float                                              VolumeMultiplier;                                           // 0x0000   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x0004   (0x0004)  
	bool                                               bFollow : 1;                                                // 0x0008:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	FName                                              AttachName;                                                 // 0x000C   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	class USoundAttenuation*                           AttenuationOverride;                                        // 0x0018   (0x0008)  
};

/// Struct /Script/SB.SBAnimNotifyForceFeedbackProperty
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBAnimNotifyForceFeedbackProperty
{ 
	float                                              IntensityMultiplier;                                        // 0x0000   (0x0004)  
};

/// Class /Script/SB.SBAnimNotify_Vibration
/// Size: 0x0068 (104 bytes) (0x000038 - 0x000068) align n/a MaxSize: 0x0068
class USBAnimNotify_Vibration : public UAnimNotify
{ 
public:
	class USBVibrationSet*                             VibrationSet;                                               // 0x0038   (0x0008)  
	FSBAnimNotifyHapticProperty                        HapticProperty;                                             // 0x0040   (0x0020)  
	FSBAnimNotifyForceFeedbackProperty                 ForceFeedbackProperty;                                      // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/SB.SBAnimNotifyState_PlayAnimByMeshSlot
/// Size: 0x0070 (112 bytes) (0x000030 - 0x000070) align n/a MaxSize: 0x0070
class USBAnimNotifyState_PlayAnimByMeshSlot : public UAnimNotifyState
{ 
public:
	TEnumAsByte<ESBSkelMeshSlot>                       MeshSlot;                                                   // 0x0030   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0031   (0x0007)  MISSED
	FString                                            AnimResourcePath;                                           // 0x0038   (0x0010)  
	float                                              PlayRate;                                                   // 0x0048   (0x0004)  
	float                                              PlayStartTime;                                              // 0x004C   (0x0004)  
	float                                              PlayEndTime;                                                // 0x0050   (0x0004)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0054   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x0058   (0x0004)  
	float                                              PlayBlendInTime;                                            // 0x005C   (0x0004)  
	float                                              PlayBlendOutTime;                                           // 0x0060   (0x0004)  
	int32_t                                            Priority;                                                   // 0x0064   (0x0004)  
	bool                                               bPlayLoop;                                                  // 0x0068   (0x0001)  
	bool                                               bIgnoreStopAnimationWhenEnd;                                // 0x0069   (0x0001)  
	unsigned char                                      UnknownData05_7[0x6];                                       // 0x006A   (0x0006)  MISSED
};

/// Class /Script/SB.SBAnimNotifyState_PlaySound
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000B0) align n/a MaxSize: 0x00B0
class USBAnimNotifyState_PlaySound : public UAnimNotifyState
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x0030   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0038   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x003C   (0x0004)  
	float                                              FadeOutDuration;                                            // 0x0040   (0x0004)  
	bool                                               bFollow : 1;                                                // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	FName                                              AttachName;                                                 // 0x0048   (0x0008)  
	class USoundClass*                                 SoundClassOverride;                                         // 0x0050   (0x0008)  
	class USoundAttenuation*                           AttenuationOverride;                                        // 0x0058   (0x0008)  
	TMap<class USkeletalMeshComponent*, class UAudioComponent*> AudioComponentMap;                                 // 0x0060   (0x0050)  
};

/// Struct /Script/SB.SBAnimNotifyStateHapticProperty
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBAnimNotifyStateHapticProperty
{ 
	float                                              VolumeMultiplier;                                           // 0x0000   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x0004   (0x0004)  
	float                                              FadeOutDuration;                                            // 0x0008   (0x0004)  
	bool                                               bFollow : 1;                                                // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	FName                                              AttachName;                                                 // 0x0010   (0x0008)  
	class USoundAttenuation*                           AttenuationOverride;                                        // 0x0018   (0x0008)  
};

/// Struct /Script/SB.SBAnimNotifyStateForceFeedbackProperty
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBAnimNotifyStateForceFeedbackProperty
{ 
	float                                              IntensityMultiplier;                                        // 0x0000   (0x0004)  
	bool                                               bLooping;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	class UForceFeedbackAttenuation*                   AttenuationSettings;                                        // 0x0008   (0x0008)  
};

/// Class /Script/SB.SBAnimNotifyState_Vibration
/// Size: 0x00B8 (184 bytes) (0x000030 - 0x0000B8) align n/a MaxSize: 0x00B8
class USBAnimNotifyState_Vibration : public UAnimNotifyState
{ 
public:
	class USBVibrationSet*                             VibrationSet;                                               // 0x0030   (0x0008)  
	FSBAnimNotifyStateHapticProperty                   HapticProperty;                                             // 0x0038   (0x0020)  
	FSBAnimNotifyStateForceFeedbackProperty            ForceFeedbackProperty;                                      // 0x0058   (0x0010)  
	TMap<class USkeletalMeshComponent*, class USBVibrationComponent*> VibrationComponentMap;                       // 0x0068   (0x0050)  
};

/// Class /Script/SB.SBWorldActor
/// Size: 0x0308 (776 bytes) (0x0002C8 - 0x000308) align n/a MaxSize: 0x0308
class ASBWorldActor : public AActor
{ 
public:
	unsigned char                                      UnknownData01_1[0x40];                                      // 0x02C8   (0x0040)  MISSED
};

/// Struct /Script/SB.SBTableAliasName
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBTableAliasName
{ 
	FName                                              Alias;                                                      // 0x0000   (0x0008)  
	TEnumAsByte<ESBData>                               TableType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Class /Script/SB.SBAreaControlVolume
/// Size: 0x03A0 (928 bytes) (0x000308 - 0x0003A0) align n/a MaxSize: 0x03A0
class ASBAreaControlVolume : public ASBWorldActor
{ 
public:
	unsigned char                                      UnknownData06_8[0x8];                                       // 0x0308   (0x0008)  MISSED
	FSBTableAliasName                                  AreaControlVolumeAlias;                                     // 0x0310   (0x000C)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x031C   (0x0004)  MISSED
	FString                                            MainPrimitiveComponentName;                                 // 0x0320   (0x0010)  
	TEnumAsByte<ESBAreaControlVolumeBlockType>         BlockType;                                                  // 0x0330   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x0331   (0x0007)  MISSED
	TArray<FName>                                      AdmissionPossibleTribeArray;                                // 0x0338   (0x0010)  
	TArray<FName>                                      AdmissionPossibleCharacterTagArray;                         // 0x0348   (0x0010)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0358   (0x0001)  
	unsigned char                                      UnknownData09_6[0x7];                                       // 0x0359   (0x0007)  MISSED
	class USceneComponent*                             DummyRoot;                                                  // 0x0360   (0x0008)  
	class USceneComponent*                             MoveLocationWhenBlockingHitComponent;                       // 0x0368   (0x0008)  
	unsigned char                                      UnknownData10_6[0x8];                                       // 0x0370   (0x0008)  MISSED
	TArray<class UPrimitiveComponent*>                 CollisionControlComponents;                                 // 0x0378   (0x0010)  
	unsigned char                                      UnknownData11_6[0x10];                                      // 0x0388   (0x0010)  MISSED
	TWeakObjectPtr<class ASBCharacter*>                ForceMovePlayerCharacter;                                   // 0x0398   (0x0008)  

	/// Functions
	// Function /Script/SB.SBAreaControlVolume.EventSetActive
	constexpr static const FunctionPointer<ASBAreaControlVolume, void, const bool, const bool> EventSetActive = { 0x2bbb090, 0 }; 
};

/// Class /Script/SB.SBBehaviorTreeComponent
/// Size: 0x02A8 (680 bytes) (0x0002A8 - 0x0002A8) align n/a MaxSize: 0x02A8
class USBBehaviorTreeComponent : public UBehaviorTreeComponent
{ 
public:
};

/// Class /Script/SB.SBBGMSoundComponent
/// Size: 0x0580 (1408 bytes) (0x000568 - 0x000580) align n/a MaxSize: 0x0580
class USBBGMSoundComponent : public UBoxComponent
{ 
public:
	float                                              Priority;                                                   // 0x0568   (0x0004)  
	float                                              ChangedPeaceDelay;                                          // 0x056C   (0x0004)  
	class USBBGMSoundTrack*                            BGMTrack;                                                   // 0x0570   (0x0008)  
	class AActor*                                      AttachActor;                                                // 0x0578   (0x0008)  
};

/// Struct /Script/SB.SBBGMSoundInfo
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSBBGMSoundInfo
{ 
	class USoundBase*                                  SoundCue;                                                   // 0x0000   (0x0008)  
	float                                              PlayDelayTime;                                              // 0x0008   (0x0004)  
	bool                                               UseQuartzSystem;                                            // 0x000C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	float                                              FadeInDuration;                                             // 0x0010   (0x0004)  
	float                                              FadeOutDuration;                                            // 0x0014   (0x0004)  
	ESBSoundRestartType                                RestartType;                                                // 0x0018   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              StopDelayTime;                                              // 0x001C   (0x0004)  
	float                                              BPM;                                                        // 0x0020   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FQuartzClockSettings                               ClockSetting;                                               // 0x0028   (0x0020)  
	EQuartzCommandQuantization                         QuartzClockEventBoundary;                                   // 0x0048   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	uint32_t                                           StopDelayBeat;                                              // 0x004C   (0x0004)  
	bool                                               PlayMetronomeForDebug;                                      // 0x0050   (0x0001)  
	unsigned char                                      UnknownData09_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/SB.SBBGMEndSoundInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBBGMEndSoundInfo
{ 
	class USoundBase*                                  SoundCue;                                                   // 0x0000   (0x0008)  
	float                                              FadeInDuration;                                             // 0x0008   (0x0004)  
	float                                              OverlapTime;                                                // 0x000C   (0x0004)  
	uint32_t                                           OverlapBeat;                                                // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/SB.SBBGMSoundTrackInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBBGMSoundTrackInfo
{ 
	class USoundBase*                                  SoundCue;                                                   // 0x0000   (0x0008)  
	float                                              BPM;                                                        // 0x0008   (0x0004)  
	bool                                               StartDependencyBPM;                                         // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	float                                              FadeInDuration;                                             // 0x0010   (0x0004)  
	float                                              FadeOutDuration;                                            // 0x0014   (0x0004)  
	float                                              PlayDelay;                                                  // 0x0018   (0x0004)  
	float                                              StopDelay;                                                  // 0x001C   (0x0004)  
};

/// Class /Script/SB.SBBGMSoundTrack
/// Size: 0x01D0 (464 bytes) (0x000030 - 0x0001D0) align n/a MaxSize: 0x01D0
class USBBGMSoundTrack : public UDataAsset
{ 
public:
	FSBBGMSoundInfo                                    DefaultBGM;                                                 // 0x0030   (0x0058)  
	FSBBGMEndSoundInfo                                 DefaultBGMEnd;                                              // 0x0088   (0x0018)  
	FSBBGMSoundInfo                                    BattleBGM;                                                  // 0x00A0   (0x0058)  
	FSBBGMEndSoundInfo                                 BattleBGMEnd;                                               // 0x00F8   (0x0018)  
	FSBBGMEndSoundInfo                                 BattleBGMClear;                                             // 0x0110   (0x0018)  
	FSBBGMSoundTrackInfo                               DefaultBGMInfo;                                             // 0x0128   (0x0020)  
	FSBBGMSoundTrackInfo                               DefaultEndSoundInfo;                                        // 0x0148   (0x0020)  
	FSBBGMSoundTrackInfo                               BattleBGMInfo;                                              // 0x0168   (0x0020)  
	FSBBGMSoundTrackInfo                               BattleClearSoundInfo;                                       // 0x0188   (0x0020)  
	FSBBGMSoundTrackInfo                               BattleEndSoundInfo;                                         // 0x01A8   (0x0020)  
	bool                                               PlayEndSoundImmediately;                                    // 0x01C8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x01C9   (0x0003)  MISSED
	uint32_t                                           DataVersion;                                                // 0x01CC   (0x0004)  
};

/// Struct /Script/SB.SBBGMSoundInfoV2
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align n/a MaxSize: 0x0098
struct FSBBGMSoundInfoV2
{ 
	class USoundBase*                                  SoundBase;                                                  // 0x0000   (0x0008)  
	FName                                              KeepPlayTimeKey;                                            // 0x0008   (0x0008)  
	TMap<FName, int32_t>                               IntParams;                                                  // 0x0010   (0x0050)  
	float                                              Volume;                                                     // 0x0060   (0x0004)  
	float                                              FadeIn;                                                     // 0x0064   (0x0004)  
	float                                              FadeOut;                                                    // 0x0068   (0x0004)  
	float                                              BPM;                                                        // 0x006C   (0x0004)  
	FQuartzClockSettings                               ClockSetting;                                               // 0x0070   (0x0020)  
	bool                                               PlayMetronomeForDebug;                                      // 0x0090   (0x0001)  
	bool                                               PauseWhenOpenGameMenu;                                      // 0x0091   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0092   (0x0006)  MISSED
};

/// Struct /Script/SB.SBAlias
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAlias
{ 
	FName                                              Alias;                                                      // 0x0000   (0x0008)  
	int32_t                                            Type;                                                       // 0x0008   (0x0004)  
	bool                                               bReadOnly;                                                  // 0x000C   (0x0001)  
	bool                                               bCustom_BrowseButton;                                       // 0x000D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x000E   (0x0002)  MISSED
	FName                                              Custom_BrowseClassName;                                     // 0x0010   (0x0008)  
};

/// Struct /Script/SB.SBAliasCharacter
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasCharacter : FSBAlias
{ 
};

/// Struct /Script/SB.SBBGMEventBattleSoundInfo
/// Size: 0x00C8 (200 bytes) (0x000000 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FSBBGMEventBattleSoundInfo
{ 
	FName                                              EventBattleAlias;                                           // 0x0000   (0x0008)  
	ESBEventBattleConditionType                        ConditionType;                                              // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<FName>                                      TargetRankCondition;                                        // 0x0010   (0x0010)  
	TArray<FSBAliasCharacter>                          TargetCharacterAlias;                                       // 0x0020   (0x0010)  
	FSBBGMSoundInfoV2                                  BGMInfo;                                                    // 0x0030   (0x0098)  
};

/// Struct /Script/SB.SBBGMFinishSoundInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBBGMFinishSoundInfo
{ 
	class USoundBase*                                  SoundBase;                                                  // 0x0000   (0x0008)  
	ESBBGMFinishSoundCondition                         BGMStateCondition;                                          // 0x0008   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<FName>                                      EventBattleStates;                                          // 0x0010   (0x0010)  
	bool                                               KeepTheBeatByQuartz;                                        // 0x0020   (0x0001)  
	bool                                               ForceFadeOutCheck;                                          // 0x0021   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0022   (0x0002)  MISSED
	float                                              ForceFadeOutTime;                                           // 0x0024   (0x0004)  
};

/// Class /Script/SB.SBBGMSoundTrackV2
/// Size: 0x0180 (384 bytes) (0x000030 - 0x000180) align n/a MaxSize: 0x0180
class USBBGMSoundTrackV2 : public UDataAsset
{ 
public:
	FSBBGMSoundInfoV2                                  Default;                                                    // 0x0030   (0x0098)  
	FSBBGMSoundInfoV2                                  Battle;                                                     // 0x00C8   (0x0098)  
	TArray<FSBBGMEventBattleSoundInfo>                 EventBattleArray;                                           // 0x0160   (0x0010)  
	TArray<FSBBGMFinishSoundInfo>                      BattleFinishArray;                                          // 0x0170   (0x0010)  
};

/// Class /Script/SB.SBBGMSoundVolume
/// Size: 0x0338 (824 bytes) (0x000318 - 0x000338) align n/a MaxSize: 0x0338
class ASBBGMSoundVolume : public AVolume
{ 
public:
	bool                                               bActiveVolume;                                              // 0x0318   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0319   (0x0003)  MISSED
	float                                              Priority;                                                   // 0x031C   (0x0004)  
	float                                              ChangedPeaceDelay;                                          // 0x0320   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0324   (0x0004)  MISSED
	class USBBGMSoundTrack*                            BGMTrack;                                                   // 0x0328   (0x0008)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x0330   (0x0008)  MISSED
};

/// Class /Script/SB.SBWorldVolume
/// Size: 0x0358 (856 bytes) (0x000318 - 0x000358) align n/a MaxSize: 0x0358
class ASBWorldVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData01_1[0x40];                                      // 0x0318   (0x0040)  MISSED
};

/// Class /Script/SB.SBBlockingVolume
/// Size: 0x0388 (904 bytes) (0x000358 - 0x000388) align n/a MaxSize: 0x0388
class ASBBlockingVolume : public ASBWorldVolume
{ 
public:
	TArray<FName>                                      AdmissionPossibleTribeArray;                                // 0x0358   (0x0010)  
	bool                                               bOnlyBlock_RuleMove;                                        // 0x0368   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0369   (0x0007)  MISSED
	class AActor*                                      ControlActive_LaserOwnerActor;                              // 0x0370   (0x0008)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0378   (0x0010)  MISSED
};

/// Struct /Script/SB.SBMapSectorID
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBMapSectorID
{ 
	int32_t                                            SectorIDX;                                                  // 0x0000   (0x0004)  
	int32_t                                            SectorIDY;                                                  // 0x0004   (0x0004)  
};

/// Class /Script/SB.SBBlockSaveVolume
/// Size: 0x0340 (832 bytes) (0x000318 - 0x000340) align n/a MaxSize: 0x0340
class ASBBlockSaveVolume : public AVolume
{ 
public:
	FSBMapSectorID                                     SectorID;                                                   // 0x0318   (0x0008)  
	bool                                               bActive;                                                    // 0x0320   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0321   (0x0003)  MISSED
	FVector                                            LevelObjOrigin;                                             // 0x0324   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0330   (0x000C)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x033C   (0x0004)  MISSED
};

/// Class /Script/SB.SBMultithreaded
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBMultithreaded : public UInterface
{ 
public:

	/// Functions
	// Function /Script/SB.SBMultithreaded.MultithreadedFunction
	constexpr static const FunctionPointer<USBMultithreaded, void> MultithreadedFunction = { 0x2bbb090, 0 }; 
};

/// Class /Script/SB.SBBlueprintLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/SB.SBBlueprintLibrary.WaterBodyUpdate
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const UObject*, const USceneCaptureComponent2D*, const UTextureRenderTarget2D*, const UTextureRenderTarget2D*, const UTextureRenderTarget2D*, const UTextureRenderTarget2D*, const UMaterialInstanceDynamic*, const UMaterialInstanceDynamic*, const UMaterialInstanceDynamic*, const UMaterialInstanceDynamic*, const UMaterialParameterCollection*, const UMaterialParameterCollection*, const float, const float, const float, const bool> WaterBodyUpdate = { 0x2680f20, 0 }; 
	// Function /Script/SB.SBBlueprintLibrary.UseGroupingByCulture
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> UseGroupingByCulture = { 0x267ea40, 1 }; 
	// Function /Script/SB.SBBlueprintLibrary.UpdateWaterSceneCaptureComponent
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const float, const UClass*, const FName, const FName, const float, const USceneCaptureComponent2D*> UpdateWaterSceneCaptureComponent = { 0x268a810, 2 }; 
	// Function /Script/SB.SBBlueprintLibrary.UpdateWaterHeight
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const UObject*, const TArray<FName>&, const UStaticMeshComponent*, const float, const float, const float, const bool> UpdateWaterHeight = { 0x267c740, 3 }; 
	// Function /Script/SB.SBBlueprintLibrary.UpdateEventMoveInstance
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const USBEventMoveDataComponent*, const FVector, const FRotator, const FVector, const FRotator, const FVector, const FRotator, const FVector, const FRotator> UpdateEventMoveInstance = { 0x2688b80, 4 }; 
	// Function /Script/SB.SBBlueprintLibrary.UnApplySBEnvSettingDataToScene
	constexpr static const FunctionPointer<USBBlueprintLibrary, void> UnApplySBEnvSettingDataToScene = { 0x267fff0, 5 }; 
	// Function /Script/SB.SBBlueprintLibrary.TurntableRefreshMusic
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const bool> TurntableRefreshMusic = { 0x26834b0, 6 }; 
	// Function /Script/SB.SBBlueprintLibrary.TurntablePrevMusic
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const bool> TurntablePrevMusic = { 0x2683290, 7 }; 
	// Function /Script/SB.SBBlueprintLibrary.TurntableNextMusic
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const bool> TurntableNextMusic = { 0x26833a0, 8 }; 
	// Function /Script/SB.SBBlueprintLibrary.TimeSecondsToL10NTextWithHours
	constexpr static const FunctionPointer<USBBlueprintLibrary, FText, const float> TimeSecondsToL10NTextWithHours = { 0x267d540, 9 }; 
	// Function /Script/SB.SBBlueprintLibrary.TimeSecondsToL10NText
	constexpr static const FunctionPointer<USBBlueprintLibrary, FText, const float> TimeSecondsToL10NText = { 0x267d670, 10 }; 
	// Function /Script/SB.SBBlueprintLibrary.TextToStringArray
	constexpr static const FunctionPointer<USBBlueprintLibrary, TArray<FString>, const FText> TextToStringArray = { 0x267dd80, 11 }; 
	// Function /Script/SB.SBBlueprintLibrary.ShowHDRScene
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const UTexture*, const bool> ShowHDRScene = { 0x267dbd0, 12 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetWorldCompositionStreamPawnLocation
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const bool> SetWorldCompositionStreamPawnLocation = { 0x267e3b0, 13 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetUMGSharedValue
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const FName&, const float> SetUMGSharedValue = { 0x26868e0, 14 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetTurntableMusicIndex
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const int32_t> SetTurntableMusicIndex = { 0x2683600, 15 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetGamePuase
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const bool> SetGamePuase = { 0x2687bf0, 16 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetForceSubSteppingValue
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const bool> SetForceSubSteppingValue = { 0x267eff0, 17 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetForceMipLevelsToBeResidentFromSkeletalMesh
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const USkeletalMesh*, const float> SetForceMipLevelsToBeResidentFromSkeletalMesh = { 0x267bfe0, 18 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetForceMipLevelsToBeResident
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const UMeshComponent*, const float> SetForceMipLevelsToBeResident = { 0x267c190, 19 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetEventMoveInstanceEnableFlag
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const USBEventMoveDataComponent*, const bool> SetEventMoveInstanceEnableFlag = { 0x26893e0, 20 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetEventDirectionToPlayer
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const FVector> SetEventDirectionToPlayer = { 0x2689110, 21 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetDroneBodyMeshName
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const FName> SetDroneBodyMeshName = { 0x267ef00, 22 }; 
	// Function /Script/SB.SBBlueprintLibrary.SetControllerLightColor
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const FColor> SetControllerLightColor = { 0x2686f80, 23 }; 
	// Function /Script/SB.SBBlueprintLibrary.SaveStringsToTextFile
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const FString, const TArray<FString>&> SaveStringsToTextFile = { 0x267e110, 24 }; 
	// Function /Script/SB.SBBlueprintLibrary.ResetControllerLightColor
	constexpr static const FunctionPointer<USBBlueprintLibrary, void> ResetControllerLightColor = { 0x2686f40, 25 }; 
	// Function /Script/SB.SBBlueprintLibrary.RequestPlaySession
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const FVector> RequestPlaySession = { 0x267df20, 26 }; 
	// Function /Script/SB.SBBlueprintLibrary.RemoveUMGSharedValue
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const FName&> RemoveUMGSharedValue = { 0x26867f0, 27 }; 
	// Function /Script/SB.SBBlueprintLibrary.RemoveEventMoveInstance
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const USBEventMoveDataComponent*> RemoveEventMoveInstance = { 0x26895d0, 28 }; 
	// Function /Script/SB.SBBlueprintLibrary.RemoveDeactiveMovingInstance
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const USBDeactiveMovingComponent*> RemoveDeactiveMovingInstance = { 0x2687d60, 29 }; 
	// Function /Script/SB.SBBlueprintLibrary.PlayVibrationAtLocation
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const USBVibrationSet*, const FVector&> PlayVibrationAtLocation = { 0x2682850, 30 }; 
	// Function /Script/SB.SBBlueprintLibrary.PlayVibration
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const USBVibrationSet*> PlayVibration = { 0x2682d20, 31 }; 
	// Function /Script/SB.SBBlueprintLibrary.PlaySoundatLocation
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const USoundBase*, const FVector, const FRotator, const float, const float, const float, const USoundAttenuation*, const USoundConcurrency*, const AActor*> PlaySoundatLocation = { 0x2687680, 32 }; 
	// Function /Script/SB.SBBlueprintLibrary.PlaySBShowToPlayerCharacter
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const USBShowData*> PlaySBShowToPlayerCharacter = { 0x267bc70, 33 }; 
	// Function /Script/SB.SBBlueprintLibrary.MergeMeshes
	constexpr static const FunctionPointer<USBBlueprintLibrary, USkeletalMesh*, const FSkeletalMeshMergeParams&> MergeMeshes = { 0x267ed10, 34 }; 
	// Function /Script/SB.SBBlueprintLibrary.LoadingScreenFadeAuto
	constexpr static const FunctionPointer<USBBlueprintLibrary, FGuid, const float, const float, const float, const float, const float, const float, const float, const ESBUILoadingScreenTag> LoadingScreenFadeAuto = { 0x2683960, 35 }; 
	// Function /Script/SB.SBBlueprintLibrary.LastInputDeviceGamepad
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> LastInputDeviceGamepad = { 0x267cdc0, 36 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsUMGTargetReceiveWidget
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const USBUserWidget*> IsUMGTargetReceiveWidget = { 0x2686d40, 37 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsThumbStickKeyName
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const FName&> IsThumbStickKeyName = { 0x2684620, 38 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsSBUMGCursorVisible
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> IsSBUMGCursorVisible = { 0x26845f0, 39 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsSaving
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> IsSaving = { 0x267d9b0, 40 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsPortableGamingDevice
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> IsPortableGamingDevice = { 0x267c550, 41 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsPlayNewGamePlus
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> IsPlayNewGamePlus = { 0x267eec0, 42 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsPlayerSwimming
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> IsPlayerSwimming = { 0x26875e0, 43 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsLastInputDeviceGamepad
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> IsLastInputDeviceGamepad = { 0x267cdc0, 44 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsKeymappingCombination
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const FInputActionKeyMapping, const bool> IsKeymappingCombination = { 0x2684bb0, 45 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsEnabledHDR
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> IsEnabledHDR = { 0x267dac0, 46 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsCultureArab
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> IsCultureArab = { 0x267ea70, 47 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsActiveSBEnvCounter
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const TEnumAsByte<ESBWorldEnvCounterType>> IsActiveSBEnvCounter = { 0x2680260, 48 }; 
	// Function /Script/SB.SBBlueprintLibrary.IsActiveMinimizeUI
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> IsActiveMinimizeUI = { 0x2686b90, 49 }; 
	// Function /Script/SB.SBBlueprintLibrary.HUDAspectRatioGameOptionApply
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> HUDAspectRatioGameOptionApply = { 0x26845c0, 50 }; 
	// Function /Script/SB.SBBlueprintLibrary.HideHDRScene
	constexpr static const FunctionPointer<USBBlueprintLibrary, void> HideHDRScene = { 0x267db80, 51 }; 
	// Function /Script/SB.SBBlueprintLibrary.HasUMGSharedValue
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const FName&> HasUMGSharedValue = { 0x2686700, 52 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetWorldWaterHeight
	constexpr static const FunctionPointer<USBBlueprintLibrary, float, const FVector> GetWorldWaterHeight = { 0x268ab90, 53 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetWorldGlobalValue
	constexpr static const FunctionPointer<USBBlueprintLibrary, float, const TEnumAsByte<ESBWorldGlobalValueType>> GetWorldGlobalValue = { 0x267fd30, 54 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetWaterSimUpdateQuality
	constexpr static const FunctionPointer<USBBlueprintLibrary, int32_t> GetWaterSimUpdateQuality = { 0x267eb50, 55 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetUsedFoliageTypes
	constexpr static const FunctionPointer<USBBlueprintLibrary, TArray<UFoliageType*>, const AInstancedFoliageActor*> GetUsedFoliageTypes = { 0x267ce00, 56 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetUMGSharedValue
	constexpr static const FunctionPointer<USBBlueprintLibrary, float, const FName&> GetUMGSharedValue = { 0x2686a60, 57 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetTurntableMusicIndex
	constexpr static const FunctionPointer<USBBlueprintLibrary, int32_t> GetTurntableMusicIndex = { 0x26835c0, 58 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetTraceDirectionRigSpace
	constexpr static const FunctionPointer<USBBlueprintLibrary, FVector, const AActor*, const FSBEventMoveIKData&> GetTraceDirectionRigSpace = { 0x26809f0, 59 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetThumbStickReverseKeyName
	constexpr static const FunctionPointer<USBBlueprintLibrary, FName, const FName&> GetThumbStickReverseKeyName = { 0x2684850, 60 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetTextureFromUIKeyNameImageAsset
	constexpr static const FunctionPointer<USBBlueprintLibrary, UTexture2D*, const FName, const FName, const FName> GetTextureFromUIKeyNameImageAsset = { 0x2685a70, 61 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetTextureFromUIKeyImageAsset
	constexpr static const FunctionPointer<USBBlueprintLibrary, UTexture2D*, const FKey, const FName, const FName> GetTextureFromUIKeyImageAsset = { 0x2685c60, 62 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetTextureFromSwipeOption
	constexpr static const FunctionPointer<USBBlueprintLibrary, UTexture2D*, const ESBGameOptionSwipeShortCutType, const FName, const FName> GetTextureFromSwipeOption = { 0x2684e70, 63 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetTextureFromKeymappingCombination
	constexpr static const FunctionPointer<USBBlueprintLibrary, UTexture2D*, const FInputActionKeyMapping, const FName, const FName> GetTextureFromKeymappingCombination = { 0x26853c0, 64 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetTextureFromKeymapping
	constexpr static const FunctionPointer<USBBlueprintLibrary, UTexture2D*, const FInputActionKeyMapping, const FName, const FName> GetTextureFromKeymapping = { 0x2685710, 65 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetTextureFromAxisKeyMapping
	constexpr static const FunctionPointer<USBBlueprintLibrary, UTexture2D*, const FInputAxisKeyMapping, const FName, const FName> GetTextureFromAxisKeyMapping = { 0x2685050, 66 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetSplashScreenMinimumPlayTime
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetSplashScreenMinimumPlayTime = { 0x267c650, 67 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetSoundVolume
	constexpr static const FunctionPointer<USBBlueprintLibrary, float, const ESBSoundVolumeChannel> GetSoundVolume = { 0x2683190, 68 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetSlateBrushResourceType
	constexpr static const FunctionPointer<USBBlueprintLibrary, TEnumAsByte<ESlateBrushResourceType>> GetSlateBrushResourceType = { 0x2686ea0, 69 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetSettingRollingItemsValue
	constexpr static const FunctionPointer<USBBlueprintLibrary, TArray<FString>, const ESBUISettingRollingType> GetSettingRollingItemsValue = { 0x26836d0, 70 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetSettingRollingItemsDisplay
	constexpr static const FunctionPointer<USBBlueprintLibrary, TArray<FText>, const ESBUISettingRollingType> GetSettingRollingItemsDisplay = { 0x26837e0, 71 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetRuntimeFloatCurveValueRange
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const FRuntimeFloatCurve&, const float&, const float&> GetRuntimeFloatCurveValueRange = { 0x2681f10, 72 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetRuntimeFloatCurveValue
	constexpr static const FunctionPointer<USBBlueprintLibrary, float, const FRuntimeFloatCurve&, const float> GetRuntimeFloatCurveValue = { 0x2681c60, 73 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetRuntimeFloatCurveTimeRange
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const FRuntimeFloatCurve&, const float&, const float&> GetRuntimeFloatCurveTimeRange = { 0x2682250, 74 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetRightInputYAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetRightInputYAxis = { 0x2683fa0, 75 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetRightInputXAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetRightInputXAxis = { 0x2684120, 76 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetReverseLRStickOption
	constexpr static const FunctionPointer<USBBlueprintLibrary, ESBGameOptionReverseLRStickType> GetReverseLRStickOption = { 0x267e560, 77 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetPuzzleTimeLimitOption
	constexpr static const FunctionPointer<USBBlueprintLibrary, ESBGameOptionPuzzleTimeLimitType> GetPuzzleTimeLimitOption = { 0x267e630, 78 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetPlayerMeshInfoTag
	constexpr static const FunctionPointer<USBBlueprintLibrary, FName, const TEnumAsByte<ESBSkelMeshSlot>> GetPlayerMeshInfoTag = { 0x267c3e0, 79 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetOptionReverseLRStick
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> GetOptionReverseLRStick = { 0x267e7b0, 80 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetOptionLanguageCode
	constexpr static const FunctionPointer<USBBlueprintLibrary, FString> GetOptionLanguageCode = { 0x267e950, 81 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetOptionEnableEventContents
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> GetOptionEnableEventContents = { 0x267e880, 82 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetOnlineStoreStoreType
	constexpr static const FunctionPointer<USBBlueprintLibrary, ESBOnlineStoreType> GetOnlineStoreStoreType = { 0x267c520, 83 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetNiagaraSystem
	constexpr static const FunctionPointer<USBBlueprintLibrary, UNiagaraSystem*, const FSBNiagaraSystemWithOverrideParam> GetNiagaraSystem = { 0x2681800, 84 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetNiagaraQualityLevel
	constexpr static const FunctionPointer<USBBlueprintLibrary, int32_t> GetNiagaraQualityLevel = { 0x267eaa0, 85 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetMouseYAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetMouseYAxis = { 0x2687340, 86 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetMouseXAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetMouseXAxis = { 0x2687370, 87 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetMouseWheelAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetMouseWheelAxis = { 0x2687310, 88 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetMouseButtonKeyName
	constexpr static const FunctionPointer<USBBlueprintLibrary, FName, const FPointerEvent&> GetMouseButtonKeyName = { 0x2687040, 89 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetMaterialInterfaceBlendMode
	constexpr static const FunctionPointer<USBBlueprintLibrary, TEnumAsByte<EBlendMode>, const UMaterialInterface*> GetMaterialInterfaceBlendMode = { 0x267dfd0, 90 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetLocalizeText
	constexpr static const FunctionPointer<USBBlueprintLibrary, FText, const TEnumAsByte<ESBLocalize>, const FString> GetLocalizeText = { 0x2680650, 91 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetLocalizeActorStatValue
	constexpr static const FunctionPointer<USBBlueprintLibrary, FText, const TEnumAsByte<ESBActorStatType>, const float> GetLocalizeActorStatValue = { 0x2680360, 92 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetLocalizeActorStatName
	constexpr static const FunctionPointer<USBBlueprintLibrary, FText, const TEnumAsByte<ESBActorStatType>> GetLocalizeActorStatName = { 0x2680520, 93 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetLeftInputYAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetLeftInputYAxis = { 0x26842a0, 94 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetLeftInputXAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetLeftInputXAxis = { 0x2684430, 95 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetLastGamePadSlateBrushResourceType
	constexpr static const FunctionPointer<USBBlueprintLibrary, TEnumAsByte<ESlateBrushResourceType>> GetLastGamePadSlateBrushResourceType = { 0x2686e70, 96 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetKeyTextLastGamePad
	constexpr static const FunctionPointer<USBBlueprintLibrary, FText, const FName&> GetKeyTextLastGamePad = { 0x2684930, 97 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetKeyText
	constexpr static const FunctionPointer<USBBlueprintLibrary, FText, const FName&> GetKeyText = { 0x2684a70, 98 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetKeyName
	constexpr static const FunctionPointer<USBBlueprintLibrary, FName, const FKey&> GetKeyName = { 0x26871f0, 99 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetKeyMappingsFromInputAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, TArray<FInputAxisKeyMapping>, const FName, const ESBKeyMappingAxisScaleType, const bool, const bool> GetKeyMappingsFromInputAxis = { 0x2685ef0, 100 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetKeyMappingsFromInputAction
	constexpr static const FunctionPointer<USBBlueprintLibrary, TArray<FInputActionKeyMapping>, const FName, const bool, const bool> GetKeyMappingsFromInputAction = { 0x2686200, 101 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetKeyboardType
	constexpr static const FunctionPointer<USBBlueprintLibrary, ESBKeyboardType> GetKeyboardType = { 0x267cd90, 102 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetInstanceTransforms
	constexpr static const FunctionPointer<USBBlueprintLibrary, TArray<FTransform>, const AInstancedFoliageActor*, const UFoliageType*, const ULevel*> GetInstanceTransforms = { 0x267d140, 103 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetInputActionNameBack
	constexpr static const FunctionPointer<USBBlueprintLibrary, FName> GetInputActionNameBack = { 0x2686ec0, 104 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetInputActionNameAccept
	constexpr static const FunctionPointer<USBBlueprintLibrary, FName> GetInputActionNameAccept = { 0x2686f00, 105 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetHUDSizeType
	constexpr static const FunctionPointer<USBBlueprintLibrary, ESBGameOptionHUDSizeType> GetHUDSizeType = { 0x2686c60, 106 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetGamepadRightYAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetGamepadRightYAxis = { 0x2687400, 107 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetGamepadRightXAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetGamepadRightXAxis = { 0x2687430, 108 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetGamepadLeftYAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetGamepadLeftYAxis = { 0x26873a0, 109 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetGamepadLeftXAxis
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetGamepadLeftXAxis = { 0x26873d0, 110 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetGamepadBackKey
	constexpr static const FunctionPointer<USBBlueprintLibrary, FKey> GetGamepadBackKey = { 0x2687460, 111 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetGamepadAcceptKey
	constexpr static const FunctionPointer<USBBlueprintLibrary, FKey> GetGamepadAcceptKey = { 0x2687520, 112 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetFuidFluxQuality
	constexpr static const FunctionPointer<USBBlueprintLibrary, int32_t> GetFuidFluxQuality = { 0x267ec30, 113 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetFootStepPhySurface
	constexpr static const FunctionPointer<USBBlueprintLibrary, TEnumAsByte<EPhysicalSurface>, const FVector, const TEnumAsByte<EPhysicalSurface>> GetFootStepPhySurface = { 0x267fb90, 114 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetEquipLilyMeshAssetPath
	constexpr static const FunctionPointer<USBBlueprintLibrary, FString> GetEquipLilyMeshAssetPath = { 0x267c360, 115 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetEnableSummerEventContents
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> GetEnableSummerEventContents = { 0x267e770, 116 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetEnableDLCContents
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> GetEnableDLCContents = { 0x267e700, 117 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetEnableChristmasEventContents
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> GetEnableChristmasEventContents = { 0x267e730, 118 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetDroneBodyMeshName
	constexpr static const FunctionPointer<USBBlueprintLibrary, FName> GetDroneBodyMeshName = { 0x267efd0, 119 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetDisplayGamma
	constexpr static const FunctionPointer<USBBlueprintLibrary, float> GetDisplayGamma = { 0x267d9e0, 120 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetConfigBoolValue
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const FString, const bool> GetConfigBoolValue = { 0x267f750, 121 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetCollisionProfileNames
	constexpr static const FunctionPointer<USBBlueprintLibrary, TArray<FName>> GetCollisionProfileNames = { 0x267d340, 122 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetAllSBItemActors
	constexpr static const FunctionPointer<USBBlueprintLibrary, TArray<ASBItem*>> GetAllSBItemActors = { 0x267d7a0, 123 }; 
	// Function /Script/SB.SBBlueprintLibrary.GetActiveEnvControlSettings
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const TArray<FString>&, const TArray<float>&> GetActiveEnvControlSettings = { 0x267f960, 124 }; 
	// Function /Script/SB.SBBlueprintLibrary.FocusLockFrameCount
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const int32_t> FocusLockFrameCount = { 0x2683e90, 125 }; 
	// Function /Script/SB.SBBlueprintLibrary.FindUserWidgetByTag
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const FName, const TArray<USBUserWidget*>&> FindUserWidgetByTag = { 0x2686570, 126 }; 
	// Function /Script/SB.SBBlueprintLibrary.FindFirstUserWidgetByTag
	constexpr static const FunctionPointer<USBBlueprintLibrary, USBUserWidget*, const FName> FindFirstUserWidgetByTag = { 0x2686480, 127 }; 
	// Function /Script/SB.SBBlueprintLibrary.EntryNikkeStage
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> EntryNikkeStage = { 0x267e4a0, 128 }; 
	// Function /Script/SB.SBBlueprintLibrary.DelayFrames
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const UObject*, const int32_t, const FLatentActionInfo> DelayFrames = { 0x267cb80, 129 }; 
	// Function /Script/SB.SBBlueprintLibrary.CurrentCultureArab
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool> CurrentCultureArab = { 0x267ea70, 130 }; 
	// Function /Script/SB.SBBlueprintLibrary.CreateVibration2D
	constexpr static const FunctionPointer<USBBlueprintLibrary, USBVibrationComponent*, const USBVibrationSet*, const bool> CreateVibration2D = { 0x2682590, 131 }; 
	// Function /Script/SB.SBBlueprintLibrary.CreateSBZoneEvent
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const TEnumAsByte<ESBZoneEventType>, const FName> CreateSBZoneEvent = { 0x2689210, 132 }; 
	// Function /Script/SB.SBBlueprintLibrary.CreateProjectile
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const UClass*, const FTransform, const FTransform, const TEnumAsByte<ESBProjectileMovementType>, const FSBProjectileUpdateInfo, const float> CreateProjectile = { 0x267f0c0, 133 }; 
	// Function /Script/SB.SBBlueprintLibrary.CopySBEnvSettingData
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const USBEnvSettingData*, const USBEnvSettingData*> CopySBEnvSettingData = { 0x267feb0, 134 }; 
	// Function /Script/SB.SBBlueprintLibrary.CopyBackBufferToRenderTarget
	constexpr static const FunctionPointer<USBBlueprintLibrary, UTextureRenderTarget2D*> CopyBackBufferToRenderTarget = { 0x267dd50, 135 }; 
	// Function /Script/SB.SBBlueprintLibrary.ConvertTraceTypeToByte
	constexpr static const FunctionPointer<USBBlueprintLibrary, char, const FSBEventMoveIKData&> ConvertTraceTypeToByte = { 0x2680870, 136 }; 
	// Function /Script/SB.SBBlueprintLibrary.ConvertOpaqueToMaksedDitherMaterialInstance
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const UMaterialInstance*> ConvertOpaqueToMaksedDitherMaterialInstance = { 0x267e2e0, 137 }; 
	// Function /Script/SB.SBBlueprintLibrary.ConvertInvalidMaskedToOpaqueDitherMaterialInstance
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const UMaterialInstance*> ConvertInvalidMaskedToOpaqueDitherMaterialInstance = { 0x267e2e0, 138 }; 
	// Function /Script/SB.SBBlueprintLibrary.ConsoleCommand
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const FString, const bool> ConsoleCommand = { 0x2681a50, 139 }; 
	// Function /Script/SB.SBBlueprintLibrary.CallMultithreadedFunction
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const UObject*> CallMultithreadedFunction = { 0x267f620, 140 }; 
	// Function /Script/SB.SBBlueprintLibrary.ApplySBEnvSettingDataToScene
	constexpr static const FunctionPointer<USBBlueprintLibrary, void, const USBEnvSettingData*> ApplySBEnvSettingDataToScene = { 0x2680100, 141 }; 
	// Function /Script/SB.SBBlueprintLibrary.AddEventMoveInstance
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const USBEventMoveDataComponent*, const FVector, const FRotator, const FVector, const FRotator, const FVector, const FRotator, const FVector, const FRotator, const UPrimitiveComponent*, const AActor*, const USplineComponent*, const UPrimitiveComponent*> AddEventMoveInstance = { 0x2689ae0, 142 }; 
	// Function /Script/SB.SBBlueprintLibrary.AddDeactiveMovingInstance
	constexpr static const FunctionPointer<USBBlueprintLibrary, bool, const USBDeactiveMovingComponent*, const UPrimitiveComponent*> AddDeactiveMovingInstance = { 0x2688350, 143 }; 
};

/// Class /Script/SB.SBAutomationBlueprintFunctionLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBAutomationBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/SB.SBAutomationBlueprintFunctionLibrary.IsSelfieMode
	constexpr static const FunctionPointer<USBAutomationBlueprintFunctionLibrary, bool> IsSelfieMode = { 0x268cd30, 0 }; 
	// Function /Script/SB.SBAutomationBlueprintFunctionLibrary.IsPhotoMode
	constexpr static const FunctionPointer<USBAutomationBlueprintFunctionLibrary, bool> IsPhotoMode = { 0x268cd80, 1 }; 
	// Function /Script/SB.SBAutomationBlueprintFunctionLibrary.IsEnableHitStopIK
	constexpr static const FunctionPointer<USBAutomationBlueprintFunctionLibrary, bool> IsEnableHitStopIK = { 0x151b2d0, 2 }; 
	// Function /Script/SB.SBAutomationBlueprintFunctionLibrary.IsEnableFootIKWhenSequence
	constexpr static const FunctionPointer<USBAutomationBlueprintFunctionLibrary, bool> IsEnableFootIKWhenSequence = { 0x268cdb0, 3 }; 
	// Function /Script/SB.SBAutomationBlueprintFunctionLibrary.GetSelfieHeadLookAtTarget
	constexpr static const FunctionPointer<USBAutomationBlueprintFunctionLibrary, FVector> GetSelfieHeadLookAtTarget = { 0x268caf0, 4 }; 
	// Function /Script/SB.SBAutomationBlueprintFunctionLibrary.GetSelfieCameraRotation
	constexpr static const FunctionPointer<USBAutomationBlueprintFunctionLibrary, FRotator> GetSelfieCameraRotation = { 0x268cbb0, 5 }; 
	// Function /Script/SB.SBAutomationBlueprintFunctionLibrary.GetSelfieCameraLocation
	constexpr static const FunctionPointer<USBAutomationBlueprintFunctionLibrary, FVector> GetSelfieCameraLocation = { 0x268cc90, 6 }; 
	// Function /Script/SB.SBAutomationBlueprintFunctionLibrary.GetSelfieCameraDirection
	constexpr static const FunctionPointer<USBAutomationBlueprintFunctionLibrary, ESBPhotoModeSelfieDirection> GetSelfieCameraDirection = { 0x268cb60, 7 }; 
};

/// Class /Script/SB.SBBobber
/// Size: 0x0420 (1056 bytes) (0x000328 - 0x000420) align n/a MaxSize: 0x0420
class ASBBobber : public APawn
{ 
public:
	unsigned char                                      UnknownData05_8[0x8];                                       // 0x0328   (0x0008)  MISSED
	class AActor*                                      BindingFish;                                                // 0x0330   (0x0008)  
	TEnumAsByte<ESBFishingBobberState>                 State;                                                      // 0x0338   (0x0001)  
	bool                                               bReel;                                                      // 0x0339   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x033A   (0x0002)  MISSED
	FRotator                                           FishRotation;                                               // 0x033C   (0x000C)  
	float                                              FightingFishVelocity;                                       // 0x0348   (0x0004)  
	float                                              TensionRate;                                                // 0x034C   (0x0004)  
	float                                              LiftUpBobberScale;                                          // 0x0350   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0354   (0x0004)  MISSED
	TArray<class UCurveFloat*>                         FightingMovePatterns;                                       // 0x0358   (0x0010)  
	class UCurveFloat*                                 TimingFinalPullSpeed;                                       // 0x0368   (0x0008)  
	unsigned char                                      UnknownData08_6[0x58];                                      // 0x0370   (0x0058)  MISSED
	class UCurveFloat*                                 CurrentMovePattern;                                         // 0x03C8   (0x0008)  
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x03D0   (0x0008)  
	TWeakObjectPtr<class ASBCharacter*>                Caster;                                                     // 0x03D8   (0x0008)  
	unsigned char                                      UnknownData09_7[0x40];                                      // 0x03E0   (0x0040)  MISSED

	/// Functions
	// Function /Script/SB.SBBobber.NotifyBP_SetState
	constexpr static const FunctionPointer<ASBBobber, void, const TEnumAsByte<ESBFishingBobberState>> NotifyBP_SetState = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBBobber.NotifyBP_SetReel
	constexpr static const FunctionPointer<ASBBobber, void, const bool> NotifyBP_SetReel = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBBobber.NotifyBP_SetAttachEnd
	constexpr static const FunctionPointer<ASBBobber, void, const ASBCharacter*> NotifyBP_SetAttachEnd = { 0x2bbb090, 2 }; 
	// Function /Script/SB.SBBobber.NotifyBP_PullHit
	constexpr static const FunctionPointer<ASBBobber, void, const bool> NotifyBP_PullHit = { 0x2bbb090, 3 }; 
	// Function /Script/SB.SBBobber.NotifyBP_FishTurn
	constexpr static const FunctionPointer<ASBBobber, void, const float> NotifyBP_FishTurn = { 0x2bbb090, 4 }; 
	// Function /Script/SB.SBBobber.NotifyBP_CastingToWaiting
	constexpr static const FunctionPointer<ASBBobber, void> NotifyBP_CastingToWaiting = { 0x2bbb090, 5 }; 
	// Function /Script/SB.SBBobber.GetState
	constexpr static const FunctionPointer<ASBBobber, TEnumAsByte<ESBFishingBobberState>> GetState = { 0x268e310, 6 }; 
};

/// Class /Script/SB.SBBTDecorator_SbAggroLevel
/// Size: 0x0080 (128 bytes) (0x000068 - 0x000080) align n/a MaxSize: 0x0080
class USBBTDecorator_SbAggroLevel : public UBTDecorator
{ 
public:
	TArray<TEnumAsByte<ESBAIAggroLevel>>               CompareAggroLevelArray;                                     // 0x0068   (0x0010)  
	bool                                               bEqual;                                                     // 0x0078   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbAimMe
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align n/a MaxSize: 0x0068
class USBBTDecorator_SbAimMe : public UBTDecorator
{ 
public:
};

/// Class /Script/SB.SBBTDecorator_SbBlackboard
/// Size: 0x00A8 (168 bytes) (0x000068 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBBTDecorator_SbBlackboard : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	TEnumAsByte<ESBCompare>                            CompareOP;                                                  // 0x0069   (0x0001)  
	TEnumAsByte<ESBBlackboardVarType>                  VarType;                                                    // 0x006A   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x006B   (0x0001)  MISSED
	FName                                              KeyName;                                                    // 0x006C   (0x0008)  
	int32_t                                            IntValue;                                                   // 0x0074   (0x0004)  
	float                                              FloatValue;                                                 // 0x0078   (0x0004)  
	FVector                                            VectorValue;                                                // 0x007C   (0x000C)  
	bool                                               BoolValue;                                                  // 0x0088   (0x0001)  
	TEnumAsByte<ESBDecoratorBlackboardSetValueType>    SetValueType;                                               // 0x0089   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x008A   (0x0002)  MISSED
	int32_t                                            SetIntValue;                                                // 0x008C   (0x0004)  
	float                                              SetFloatValue;                                              // 0x0090   (0x0004)  
	FVector                                            SetVectorValue;                                             // 0x0094   (0x000C)  
	bool                                               SetBoolValue;                                               // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00A1   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckActorEffect
/// Size: 0x00A0 (160 bytes) (0x000068 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBBTDecorator_SbCheckActorEffect : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	FName                                              EffectAlias;                                                // 0x006C   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	TArray<FName>                                      AndCheck_EffectAliasArray;                                  // 0x0078   (0x0010)  
	TArray<FName>                                      OrCheck_EffectAliasArray;                                   // 0x0088   (0x0010)  
	bool                                               bActive;                                                    // 0x0098   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0099   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckActorStat
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align n/a MaxSize: 0x0078
class USBBTDecorator_SbCheckActorStat : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	TEnumAsByte<ESBActorStatType>                      CheckStat;                                                  // 0x0069   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x006A   (0x0002)  MISSED
	float                                              CheckValue;                                                 // 0x006C   (0x0004)  
	TEnumAsByte<ESBCompare>                            CompareOP;                                                  // 0x0070   (0x0001)  
	bool                                               bRateValue;                                                 // 0x0071   (0x0001)  
	unsigned char                                      UnknownData03_7[0x6];                                       // 0x0072   (0x0006)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckActorState
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbCheckActorState : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	TEnumAsByte<ESBActorState>                         CheckState;                                                 // 0x0069   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x006A   (0x0006)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckActorTag
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align n/a MaxSize: 0x0078
class USBBTDecorator_SbCheckActorTag : public UBTDecorator
{ 
public:
	ESBActorTagCheckType                               CheckType;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	FName                                              ActorTag;                                                   // 0x006C   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckAnimState
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbCheckAnimState : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	TEnumAsByte<ESBAnimState>                          AnimState;                                                  // 0x0069   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x006A   (0x0006)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckLastAttackedTime
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align n/a MaxSize: 0x0078
class USBBTDecorator_SbCheckLastAttackedTime : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	float                                              CheckTime;                                                  // 0x006C   (0x0004)  
	bool                                               bLess;                                                      // 0x0070   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckStance
/// Size: 0x0090 (144 bytes) (0x000068 - 0x000090) align n/a MaxSize: 0x0090
class USBBTDecorator_SbCheckStance : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	FName                                              StanceName;                                                 // 0x006C   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	TArray<FName>                                      StanceNameArray;                                            // 0x0078   (0x0010)  
	TEnumAsByte<ESBCheckStanceCompareType>             CompareType;                                                // 0x0088   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckSummonedCount
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbCheckSummonedCount : public UBTDecorator
{ 
public:
	int32_t                                            MinionCount;                                                // 0x0068   (0x0004)  
	TEnumAsByte<ESBCompare>                            CompareOP;                                                  // 0x006C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckTarget
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbCheckTarget : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBTribeRelation>                      TargetRelation;                                             // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckTargetAngleFromCamera
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbCheckTargetAngleFromCamera : public UBTDecorator
{ 
public:
	float                                              angle;                                                      // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbCheckZoneEnvState
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align n/a MaxSize: 0x0078
class USBBTDecorator_SbCheckZoneEnvState : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	FName                                              StateTagName;                                               // 0x006C   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbDetectResult
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbDetectResult : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIDetectResultType>                 CompareDetectResult;                                        // 0x0068   (0x0001)  
	bool                                               bEqual;                                                     // 0x0069   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x006A   (0x0006)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbDistanceToHome
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbDistanceToHome : public UBTDecorator
{ 
public:
	float                                              Distance;                                                   // 0x0068   (0x0004)  
	TEnumAsByte<ESBCompare>                            CompareOP;                                                  // 0x006C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbDistanceToTarget
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbDistanceToTarget : public UBTDecorator
{ 
public:
	float                                              Distance;                                                   // 0x0068   (0x0004)  
	TEnumAsByte<ESBCompare>                            CompareOP;                                                  // 0x006C   (0x0001)  
	bool                                               bSubTarget;                                                 // 0x006D   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x006E   (0x0002)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbIsActiveSkill
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbIsActiveSkill : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbIsAlive
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbIsAlive : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	TEnumAsByte<ESBBTDecoratorAliveCheckType>          CheckType;                                                  // 0x0069   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x006A   (0x0006)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbIsBattleMode
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbIsBattleMode : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbIsEmptyEquipment
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbIsEmptyEquipment : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBEquipmentType>                      EquipmentType;                                              // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbIsFindPathWay
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align n/a MaxSize: 0x0078
class USBBTDecorator_SbIsFindPathWay : public UBTDecorator
{ 
public:
	FName                                              PathWayAlias;                                               // 0x0068   (0x0008)  
	bool                                               bUseSpawnPath;                                              // 0x0070   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbIsFlying
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbIsFlying : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBAIActorType>                        ActorType;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbIsGroupAttacker
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align n/a MaxSize: 0x0068
class USBBTDecorator_SbIsGroupAttacker : public UBTDecorator
{ 
public:
};

/// Class /Script/SB.SBBTDecorator_SbIsGroupTarget
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align n/a MaxSize: 0x0068
class USBBTDecorator_SbIsGroupTarget : public UBTDecorator
{ 
public:
};

/// Class /Script/SB.SBBTDecorator_SbIsRunPathWay
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align n/a MaxSize: 0x0068
class USBBTDecorator_SbIsRunPathWay : public UBTDecorator
{ 
public:
};

/// Class /Script/SB.SBBTDecorator_SbIsRunSpiderNav
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbIsRunSpiderNav : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBSpiderNavigationPlaceType>          SpiderNavigationPlaceType;                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbIsTPS
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbIsTPS : public UBTDecorator
{ 
public:
	bool                                               bTPS;                                                       // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbLastSkillHitResult
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbLastSkillHitResult : public UBTDecorator
{ 
public:
	TEnumAsByte<ESBSkillHitResult>                     HitResult;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbLockOnMe
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align n/a MaxSize: 0x0068
class USBBTDecorator_SbLockOnMe : public UBTDecorator
{ 
public:
};

/// Class /Script/SB.SBBTDecorator_SbRandom
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align n/a MaxSize: 0x0078
class USBBTDecorator_SbRandom : public UBTDecorator
{ 
public:
	int32_t                                            RandomRange;                                                // 0x0068   (0x0004)  
	int32_t                                            CheckValue;                                                 // 0x006C   (0x0004)  
	TEnumAsByte<ESBCompare>                            CompareOP;                                                  // 0x0070   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbSpiderIsArrived
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbSpiderIsArrived : public UBTDecorator
{ 
public:
	float                                              Radius;                                                     // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTDecorator_SbTimeLimit
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align n/a MaxSize: 0x0078
class USBBTDecorator_SbTimeLimit : public UBTDecorator
{ 
public:
	FName                                              TimerName;                                                  // 0x0068   (0x0008)  
	float                                              LimitTime;                                                  // 0x0070   (0x0004)  
	float                                              ReactInterval;                                              // 0x0074   (0x0004)  
};

/// Class /Script/SB.SBBTDecorator_SbUseableTime
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
class USBBTDecorator_SbUseableTime : public UBTDecorator
{ 
public:
	FName                                              KeyName;                                                    // 0x0068   (0x0008)  
};

/// Class /Script/SB.SBBTTask_SbBlackboard
/// Size: 0x0098 (152 bytes) (0x000070 - 0x000098) align n/a MaxSize: 0x0098
class USBBTTask_SbBlackboard : public UBTTaskNode
{ 
public:
	bool                                               bReturnSucceeded;                                           // 0x0070   (0x0001)  
	TEnumAsByte<ESBBlackboardVarType>                  VarType;                                                    // 0x0071   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0072   (0x0002)  MISSED
	FName                                              KeyName;                                                    // 0x0074   (0x0008)  
	int32_t                                            IntValue;                                                   // 0x007C   (0x0004)  
	float                                              FloatValue;                                                 // 0x0080   (0x0004)  
	FVector                                            VectorValue;                                                // 0x0084   (0x000C)  
	bool                                               bAdditive;                                                  // 0x0090   (0x0001)  
	bool                                               bCheckContains;                                             // 0x0091   (0x0001)  
	bool                                               bCheckNoContains;                                           // 0x0092   (0x0001)  
	unsigned char                                      UnknownData03_7[0x5];                                       // 0x0093   (0x0005)  MISSED
};

/// Class /Script/SB.SBBTTask_SbCautionToTarget
/// Size: 0x00E8 (232 bytes) (0x000070 - 0x0000E8) align n/a MaxSize: 0x00E8
class USBBTTask_SbCautionToTarget : public UBTTaskNode
{ 
public:
	TEnumAsByte<ESBCautionToTargetMoveType>            SetMoveType;                                                // 0x0070   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0071   (0x0007)  MISSED
	FString                                            CheckSkillFlag;                                             // 0x0078   (0x0010)  
	float                                              MinDistance;                                                // 0x0088   (0x0004)  
	float                                              MaxDistance;                                                // 0x008C   (0x0004)  
	float                                              RunDistance;                                                // 0x0090   (0x0004)  
	bool                                               bLockOn;                                                    // 0x0094   (0x0001)  
	bool                                               bDisableLookAtIKWhenLockOn;                                 // 0x0095   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x0096   (0x0002)  MISSED
	float                                              WaitCheckTime;                                              // 0x0098   (0x0004)  
	bool                                               bWaitCheckRandomTime;                                       // 0x009C   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x009D   (0x0003)  MISSED
	float                                              WaitCheckTimeRandomMinTime;                                 // 0x00A0   (0x0004)  
	float                                              WaitCheckTimeRandomMaxTime;                                 // 0x00A4   (0x0004)  
	float                                              WaitRate;                                                   // 0x00A8   (0x0004)  
	int32_t                                            WaitCountByGroup;                                           // 0x00AC   (0x0004)  
	float                                              PlayShowRateWhenWait;                                       // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	FString                                            WaitShowPath;                                               // 0x00B8   (0x0010)  
	int32_t                                            SideMoveRepeatCount;                                        // 0x00C8   (0x0004)  
	float                                              SideMoveMinDistance;                                        // 0x00CC   (0x0004)  
	float                                              SideMoveMaxDistance;                                        // 0x00D0   (0x0004)  
	bool                                               bStayTargetView;                                            // 0x00D4   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x00D5   (0x0003)  MISSED
	FName                                              LeftSideMoveEndUseSkillCommandWhenTaskEnd;                  // 0x00D8   (0x0008)  
	FName                                              RightSideMoveEndUseSkillCommandWhenTaskEnd;                 // 0x00E0   (0x0008)  
};

/// Class /Script/SB.SBBTTask_SbDetectTarget
/// Size: 0x00A8 (168 bytes) (0x000070 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBBTTask_SbDetectTarget : public UBTTaskNode
{ 
public:
	FString                                            BaseBone;                                                   // 0x0070   (0x0010)  
	TEnumAsByte<ESBAIDetectTargetFindOP>               FindOP;                                                     // 0x0080   (0x0001)  
	TEnumAsByte<ESBAIDetectTargetCancel>               TargetCancel;                                               // 0x0081   (0x0001)  
	bool                                               bAlly;                                                      // 0x0082   (0x0001)  
	bool                                               bEnemy;                                                     // 0x0083   (0x0001)  
	bool                                               bDead;                                                      // 0x0084   (0x0001)  
	bool                                               bComa;                                                      // 0x0085   (0x0001)  
	bool                                               bEncroachmentable;                                          // 0x0086   (0x0001)  
	bool                                               bSubTarget;                                                 // 0x0087   (0x0001)  
	TArray<FName>                                      EffectAliasArray;                                           // 0x0088   (0x0010)  
	TArray<FName>                                      NoneEffectAliasArray;                                       // 0x0098   (0x0010)  
};

/// Class /Script/SB.SBBTTask_SbFollowTarget
/// Size: 0x00B8 (184 bytes) (0x000070 - 0x0000B8) align n/a MaxSize: 0x00B8
class USBBTTask_SbFollowTarget : public UBTTaskNode
{ 
public:
	TEnumAsByte<ESBMoveState>                          MoveState;                                                  // 0x0070   (0x0001)  
	TEnumAsByte<ESBAIActorType>                        TargetType;                                                 // 0x0071   (0x0001)  
	TEnumAsByte<ESBDroneFollowLocationType>            DroneFollowLocationType;                                    // 0x0072   (0x0001)  
	unsigned char                                      UnknownData03_6[0x5];                                       // 0x0073   (0x0005)  MISSED
	FString                                            SystemTypeKey;                                              // 0x0078   (0x0010)  
	float                                              LocationHoldingTime;                                        // 0x0088   (0x0004)  
	bool                                               bUseNavMesh;                                                // 0x008C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	float                                              DistanceOfApproach;                                         // 0x0090   (0x0004)  
	float                                              ExecutableDistanceToTarget;                                 // 0x0094   (0x0004)  
	float                                              TeleportDistance;                                           // 0x0098   (0x0004)  
	FVector                                            LocalRelativeLocation;                                      // 0x009C   (0x000C)  
	FVector                                            LookAtRelativeLocation;                                     // 0x00A8   (0x000C)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTTask_SbLookAtTarget
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align n/a MaxSize: 0x0078
class USBBTTask_SbLookAtTarget : public UBTTaskNode
{ 
public:
	float                                              YawRotationTime;                                            // 0x0070   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTTask_SbMetaAI
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align n/a MaxSize: 0x0078
class USBBTTask_SbMetaAI : public UBTTaskNode
{ 
public:
	bool                                               bBackgroundTask;                                            // 0x0070   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTTask_SbMountingEquipment
/// Size: 0x0090 (144 bytes) (0x000070 - 0x000090) align n/a MaxSize: 0x0090
class USBBTTask_SbMountingEquipment : public UBTTaskNode
{ 
public:
	TEnumAsByte<ESBMoveState>                          MoveState;                                                  // 0x0070   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0071   (0x0007)  MISSED
	FString                                            FindTargetFilterAlias;                                      // 0x0078   (0x0010)  
	float                                              MoveToDistanceOfApproach;                                   // 0x0088   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTTask_SbMoveToFlyingPoint
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBBTTask_SbMoveToFlyingPoint : public UBTTaskNode
{ 
public:
	TArray<FName>                                      FlyingPoints;                                               // 0x0070   (0x0010)  
	float                                              Duration;                                                   // 0x0080   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTTask_SbMoveToHome
/// Size: 0x00C0 (192 bytes) (0x000070 - 0x0000C0) align n/a MaxSize: 0x00C0
class USBBTTask_SbMoveToHome : public UBTTaskNode
{ 
public:
	FString                                            PathWayAlias;                                               // 0x0070   (0x0010)  
	bool                                               bUseSpawnPath;                                              // 0x0080   (0x0001)  
	TEnumAsByte<ESBMoveState>                          MoveState;                                                  // 0x0081   (0x0001)  
	bool                                               bDetectTarget;                                              // 0x0082   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0083   (0x0001)  MISSED
	float                                              DetectTargetDelayTime;                                      // 0x0084   (0x0004)  
	FString                                            BaseBone;                                                   // 0x0088   (0x0010)  
	TEnumAsByte<ESBAIDetectTargetFindOP>               FindOP;                                                     // 0x0098   (0x0001)  
	TEnumAsByte<ESBAIDetectTargetCancel>               TargetCancel;                                               // 0x0099   (0x0001)  
	bool                                               bAlly;                                                      // 0x009A   (0x0001)  
	bool                                               bEnemy;                                                     // 0x009B   (0x0001)  
	bool                                               bDead;                                                      // 0x009C   (0x0001)  
	bool                                               bEncroachmentable;                                          // 0x009D   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x009E   (0x0002)  MISSED
	TArray<FName>                                      EffectAliasArray;                                           // 0x00A0   (0x0010)  
	TArray<FName>                                      NoneEffectAliasArray;                                       // 0x00B0   (0x0010)  
};

/// Class /Script/SB.SBBTTask_SbMoveToTarget
/// Size: 0x00A8 (168 bytes) (0x000070 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBBTTask_SbMoveToTarget : public UBTTaskNode
{ 
public:
	TEnumAsByte<ESBMoveState>                          MoveState;                                                  // 0x0070   (0x0001)  
	bool                                               bSubTarget;                                                 // 0x0071   (0x0001)  
	bool                                               bCheckUseSkill;                                             // 0x0072   (0x0001)  
	bool                                               bIgnoreDistanceOfApproachWhenBlocking;                      // 0x0073   (0x0001)  
	float                                              DistanceOfApproach;                                         // 0x0074   (0x0004)  
	TArray<FString>                                    SkillType;                                                  // 0x0078   (0x0010)  
	bool                                               bBackgroundTask;                                            // 0x0088   (0x0001)  
	bool                                               bCheckBrokenPath;                                           // 0x0089   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x008A   (0x0006)  MISSED
	FString                                            BrokenPathShowPath;                                         // 0x0090   (0x0010)  
	float                                              WaitBrokenPathShowTime;                                     // 0x00A0   (0x0004)  
	float                                              KeepZeroSpeedForAnimGraphTime;                              // 0x00A4   (0x0004)  
};

/// Class /Script/SB.SBBTTask_SbPlayShow
/// Size: 0x00C8 (200 bytes) (0x000070 - 0x0000C8) align n/a MaxSize: 0x00C8
class USBBTTask_SbPlayShow : public UBTTaskNode
{ 
public:
	bool                                               bDetectTarget;                                              // 0x0070   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0071   (0x0007)  MISSED
	FString                                            BaseBone;                                                   // 0x0078   (0x0010)  
	TEnumAsByte<ESBAIDetectTargetFindOP>               FindOP;                                                     // 0x0088   (0x0001)  
	TEnumAsByte<ESBAIDetectTargetCancel>               TargetCancel;                                               // 0x0089   (0x0001)  
	bool                                               bAlly;                                                      // 0x008A   (0x0001)  
	bool                                               bEnemy;                                                     // 0x008B   (0x0001)  
	bool                                               bDead;                                                      // 0x008C   (0x0001)  
	bool                                               bEncroachmentable;                                          // 0x008D   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x008E   (0x0002)  MISSED
	TArray<FName>                                      EffectAliasArray;                                           // 0x0090   (0x0010)  
	TArray<FName>                                      NoneEffectAliasArray;                                       // 0x00A0   (0x0010)  
	FString                                            ShowPath;                                                   // 0x00B0   (0x0010)  
	bool                                               bWait;                                                      // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00C1   (0x0007)  MISSED
};

/// Class /Script/SB.SBBTTask_SBResetTimeLimit
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align n/a MaxSize: 0x0080
class USBBTTask_SBResetTimeLimit : public UBTTaskNode
{ 
public:
	FName                                              TimerName;                                                  // 0x0070   (0x0008)  
	float                                              SetReactInterval;                                           // 0x0078   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTTask_SbSpiderMoveStop
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align n/a MaxSize: 0x0070
class USBBTTask_SbSpiderMoveStop : public UBTTaskNode
{ 
public:
};

/// Class /Script/SB.SBBTTask_SbSpiderMoveToCeiling
/// Size: 0x00A8 (168 bytes) (0x000070 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBBTTask_SbSpiderMoveToCeiling : public UBTTaskNode
{ 
public:
	TEnumAsByte<ESBMoveState>                          MoveState;                                                  // 0x0070   (0x0001)  
	bool                                               bSubTarget;                                                 // 0x0071   (0x0001)  
	bool                                               bCheckUseSkill;                                             // 0x0072   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x0073   (0x0001)  MISSED
	float                                              DistanceOfApproach;                                         // 0x0074   (0x0004)  
	TArray<FString>                                    SkillType;                                                  // 0x0078   (0x0010)  
	bool                                               bBackgroundTask;                                            // 0x0088   (0x0001)  
	bool                                               bCheckBrokenPath;                                           // 0x0089   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x008A   (0x0006)  MISSED
	FString                                            BrokenPathShowPath;                                         // 0x0090   (0x0010)  
	float                                              WaitBrokenPathShowTime;                                     // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTTask_SbSpiderMoveToRandomLocation
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align n/a MaxSize: 0x0078
class USBBTTask_SbSpiderMoveToRandomLocation : public UBTTaskNode
{ 
public:
	float                                              MaxSearchDistance;                                          // 0x0070   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/SB.SBBTTask_SbSpiderMoveToTarget
/// Size: 0x00A8 (168 bytes) (0x000070 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBBTTask_SbSpiderMoveToTarget : public UBTTaskNode
{ 
public:
	TEnumAsByte<ESBMoveState>                          MoveState;                                                  // 0x0070   (0x0001)  
	bool                                               bSubTarget;                                                 // 0x0071   (0x0001)  
	bool                                               bCheckUseSkill;                                             // 0x0072   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x0073   (0x0001)  MISSED
	float                                              DistanceOfApproach;                                         // 0x0074   (0x0004)  
	TArray<FString>                                    SkillType;                                                  // 0x0078   (0x0010)  
	bool                                               bBackgroundTask;                                            // 0x0088   (0x0001)  
	bool                                               bCheckBrokenPath;                                           // 0x0089   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x008A   (0x0006)  MISSED
	FString                                            BrokenPathShowPath;                                         // 0x0090   (0x0010)  
	float                                              WaitBrokenPathShowTime;                                     // 0x00A0   (0x0004)  
	bool                                               bOnlyTargetInsideInVolume;                                  // 0x00A4   (0x0001)  
	unsigned char                                      UnknownData05_7[0x3];                                       // 0x00A5   (0x0003)  MISSED
};

/// Class /Script/SB.SBBTTask_SbSpiderRunFall
/// Size: 0x0070 (112 bytes) (0x000070 - 0x000070) align n/a MaxSize: 0x0070
class USBBTTask_SbSpiderRunFall : public UBTTaskNode
{ 
public:
};

/// Class /Script/SB.SBBTTask_SbUseableTimeReset
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align n/a MaxSize: 0x0080
class USBBTTask_SbUseableTimeReset : public UBTTaskNode
{ 
public:
	FName                                              KeyName;                                                    // 0x0070   (0x0008)  
	float                                              SetInitialTimeValue;                                        // 0x0078   (0x0004)  
	float                                              SetCycleTimeValue;                                          // 0x007C   (0x0004)  
};

/// Class /Script/SB.SBBTTask_SbUseEffect
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBBTTask_SbUseEffect : public UBTTaskNode
{ 
public:
	bool                                               bSelfActor;                                                 // 0x0070   (0x0001)  
	bool                                               bSubTarget;                                                 // 0x0071   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0072   (0x0006)  MISSED
	TArray<FString>                                    EffectAlias;                                                // 0x0078   (0x0010)  
};

/// Class /Script/SB.SBBTTask_SbUseSkill
/// Size: 0x00B0 (176 bytes) (0x000070 - 0x0000B0) align n/a MaxSize: 0x00B0
class USBBTTask_SbUseSkill : public UBTTaskNode
{ 
public:
	bool                                               bSubTarget;                                                 // 0x0070   (0x0001)  
	bool                                               bRageSkill;                                                 // 0x0071   (0x0001)  
	bool                                               bUseSkillCommand;                                           // 0x0072   (0x0001)  
	unsigned char                                      UnknownData02_6[0x5];                                       // 0x0073   (0x0005)  MISSED
	TArray<FString>                                    SkillName;                                                  // 0x0078   (0x0010)  
	bool                                               bUsePostStep;                                               // 0x0088   (0x0001)  
	bool                                               bAutoTarget;                                                // 0x0089   (0x0001)  
	TEnumAsByte<ESBAISkillComboType>                   SkillComboType;                                             // 0x008A   (0x0001)  
	unsigned char                                      UnknownData03_6[0x5];                                       // 0x008B   (0x0005)  MISSED
	TArray<FString>                                    SkillComboName;                                             // 0x0090   (0x0010)  
	FString                                            TargetingPointName;                                         // 0x00A0   (0x0010)  
};

/// Class /Script/SB.SBBTTask_SbWait
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align n/a MaxSize: 0x0078
class USBBTTask_SbWait : public UBTTaskNode
{ 
public:
	float                                              WaitTime;                                                   // 0x0070   (0x0004)  
	bool                                               bReturnSucceeded;                                           // 0x0074   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0075   (0x0003)  MISSED
};

/// Class /Script/SB.SBBTTask_SbWaitTimeRandom
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align n/a MaxSize: 0x0080
class USBBTTask_SbWaitTimeRandom : public UBTTaskNode
{ 
public:
	float                                              MinTime;                                                    // 0x0070   (0x0004)  
	float                                              MaxTime;                                                    // 0x0074   (0x0004)  
	bool                                               bReturnSucceeded;                                           // 0x0078   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/SB.SBCameraBasedUpdateComponent
/// Size: 0x0280 (640 bytes) (0x000260 - 0x000280) align n/a MaxSize: 0x0280
class USBCameraBasedUpdateComponent : public USceneComponent
{ 
public:
	bool                                               bAutoScale;                                                 // 0x0260   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0261   (0x0003)  MISSED
	float                                              AutoScaleUnitDistance;                                      // 0x0264   (0x0004)  
	float                                              UpdateGridDistance;                                         // 0x0268   (0x0004)  
	float                                              AutoScaleMinScale;                                          // 0x026C   (0x0004)  
	float                                              AutoScaleMaxScale;                                          // 0x0270   (0x0004)  
	float                                              AutoScaleIncreasePerUnit;                                   // 0x0274   (0x0004)  
	bool                                               bUsingForOceanPlane;                                        // 0x0278   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0279   (0x0007)  MISSED
};

/// Struct /Script/SB.CameraStampInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FCameraStampInfo
{ 
	float                                              DeltaTime;                                                  // 0x0000   (0x0004)  
	FVector                                            position;                                                   // 0x0004   (0x000C)  
	FVector                                            Direction;                                                  // 0x0010   (0x000C)  
};

/// Struct /Script/SB.SBAttachParticleInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBAttachParticleInfo
{ 
	FVector                                            RelativeLocation;                                           // 0x0000   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x000C   (0x000C)  
	class USceneComponent*                             pAttachedComponent;                                         // 0x0018   (0x0008)  
};

/// Struct /Script/SB.SBCameraMoveData
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FSBCameraMoveData
{ 
	FGuid                                              ID;                                                         // 0x0000   (0x0010)  
	float                                              CurrentTime;                                                // 0x0010   (0x0004)  
	float                                              FadeInDuration;                                             // 0x0014   (0x0004)  
	float                                              TotalDuration;                                              // 0x0018   (0x0004)  
	float                                              FadeOutDuration;                                            // 0x001C   (0x0004)  
	FVector                                            TargetLocation;                                             // 0x0020   (0x000C)  
	FRotator                                           TargetRotation;                                             // 0x002C   (0x000C)  
	bool                                               bUseBasedCharacterBone;                                     // 0x0038   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	class ASBCharacter*                                TargetCharacter;                                            // 0x0040   (0x0008)  
	FName                                              BoneName;                                                   // 0x0048   (0x0008)  
	FRotator                                           AttachedRelativeRot;                                        // 0x0050   (0x000C)  
	bool                                               bUseBasedCharacterCustomAnim;                               // 0x005C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x005D   (0x0003)  MISSED
	FName                                              CharacterCustomAnimName;                                    // 0x0060   (0x0008)  
	class UCurveFloat*                                 FovCurve;                                                   // 0x0068   (0x0008)  
};

/// Struct /Script/SB.SBPostProcessWeightedBlendables
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBPostProcessWeightedBlendables
{ 
	FWeightedBlendables                                WeightedBlendables;                                         // 0x0000   (0x0010)  
	float                                              Weight;                                                     // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/SB.SBCameraComponent
/// Size: 0x0F70 (3952 bytes) (0x0008C0 - 0x000F70) align n/a MaxSize: 0x0F70
class USBCameraComponent : public UCameraComponent
{ 
public:
	class USceneComponent*                             ParticleAttachComponent;                                    // 0x08C0   (0x0008)  
	float                                              CameraFov;                                                  // 0x08C8   (0x0004)  
	int32_t                                            MaxStampInfosNum;                                           // 0x08CC   (0x0004)  
	bool                                               bManualCameraFovMode;                                       // 0x08D0   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x08D1   (0x0003)  MISSED
	float                                              ManualCameraFov;                                            // 0x08D4   (0x0004)  
	int32_t                                            CurrentStampInfoIndex;                                      // 0x08D8   (0x0004)  
	float                                              InterpolHistoryDuration;                                    // 0x08DC   (0x0004)  
	int32_t                                            InterpolHistoryByFrame;                                     // 0x08E0   (0x0004)  
	float                                              CameraLeftRightControlMinDist;                              // 0x08E4   (0x0004)  
	float                                              CameraLeftRightControlMaxDist;                              // 0x08E8   (0x0004)  
	unsigned char                                      UnknownData15_6[0x4];                                       // 0x08EC   (0x0004)  MISSED
	TArray<FCameraStampInfo>                           CameraStampInfos;                                           // 0x08F0   (0x0010)  
	float                                              PlayInterpolHistoryDuration;                                // 0x0900   (0x0004)  
	float                                              PlayInterpolHistoryFadeInSec;                               // 0x0904   (0x0004)  
	float                                              PlayInterpolHistoryFadeOutSec;                              // 0x0908   (0x0004)  
	float                                              PlayInterpolHistoryPlaySec;                                 // 0x090C   (0x0004)  
	bool                                               bPlayInterpolHistory;                                       // 0x0910   (0x0001)  
	bool                                               bPlayInterpolHistoryInfinite;                               // 0x0911   (0x0001)  
	unsigned char                                      UnknownData16_6[0x6];                                       // 0x0912   (0x0006)  MISSED
	TArray<FSBAttachParticleInfo>                      AttachedParticles;                                          // 0x0918   (0x0010)  
	bool                                               bPlayInterpolHistoryCalcNewTargetDir;                       // 0x0928   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x0929   (0x0003)  MISSED
	float                                              CurrentPlayInterpolHistorySec;                              // 0x092C   (0x0004)  
	FVector                                            DesiredViewLocFromLegacy;                                   // 0x0930   (0x000C)  
	FVector                                            DesiredViewLocDirFromLegacy;                                // 0x093C   (0x000C)  
	float                                              DesiredViewLocLengthFromLegacy;                             // 0x0948   (0x0004)  
	FVector                                            DesiredBeforeViewLocFromNew;                                // 0x094C   (0x000C)  
	FRotator                                           DesiredViewRotFromLegacy;                                   // 0x0958   (0x000C)  
	int32_t                                            LastDesiredViewMode;                                        // 0x0964   (0x0004)  
	unsigned char                                      UnknownData18_6[0x4];                                       // 0x0968   (0x0004)  MISSED
	float                                              CurrentHistoryFadeValue;                                    // 0x096C   (0x0004)  
	float                                              CameraFovOverride;                                          // 0x0970   (0x0004)  
	float                                              CameraFovOverrideBlendTime;                                 // 0x0974   (0x0004)  
	float                                              CurrentArmLength;                                           // 0x0978   (0x0004)  
	float                                              CurrentUpdateArmLengthSpeed;                                // 0x097C   (0x0004)  
	bool                                               bNeedUpdateArmLength;                                       // 0x0980   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x0981   (0x0003)  MISSED
	float                                              CurrentFov;                                                 // 0x0984   (0x0004)  
	float                                              CameraShakingOverride;                                      // 0x0988   (0x0004)  
	float                                              CameraShakingOverrideBlendTime;                             // 0x098C   (0x0004)  
	float                                              CurrentShaking;                                             // 0x0990   (0x0004)  
	float                                              CameraRollTargetValue;                                      // 0x0994   (0x0004)  
	float                                              CameraRollCurrentValue;                                     // 0x0998   (0x0004)  
	float                                              CameraPitchTargetValue;                                     // 0x099C   (0x0004)  
	float                                              CameraPitchCurrentValue;                                    // 0x09A0   (0x0004)  
	unsigned char                                      UnknownData20_6[0xC];                                       // 0x09A4   (0x000C)  MISSED
	FTransform                                         CurrentCameraTM;                                            // 0x09B0   (0x0030)  
	FVector                                            CurrentCameraLocation;                                      // 0x09E0   (0x000C)  
	FRotator                                           CurrentCameraRotation;                                      // 0x09EC   (0x000C)  
	float                                              CurrentAspectRatio;                                         // 0x09F8   (0x0004)  
	float                                              OverrideCameraBlendDuration;                                // 0x09FC   (0x0004)  
	float                                              RemainOverrideCameraBlendDuration;                          // 0x0A00   (0x0004)  
	unsigned char                                      UnknownData21_6[0x4];                                       // 0x0A04   (0x0004)  MISSED
	TArray<FSBCameraMoveData>                          ActiveCameraMoveData;                                       // 0x0A08   (0x0010)  
	float                                              OrientTime;                                                 // 0x0A18   (0x0004)  
	float                                              OrientCurrentTime;                                          // 0x0A1C   (0x0004)  
	FRotator                                           OrientStartRot;                                             // 0x0A20   (0x000C)  
	unsigned char                                      UnknownData22_6[0x4];                                       // 0x0A2C   (0x0004)  MISSED
	class USceneComponent*                             OriginParentComponent;                                      // 0x0A30   (0x0008)  
	unsigned char                                      UnknownData23_6[0x20];                                      // 0x0A38   (0x0020)  MISSED
	TMap<FGuid, FSBPostProcessWeightedBlendables>      PostProcessWeightedBlendablesMap;                           // 0x0A58   (0x0050)  
	class UCurveFloat*                                 LockOnCamBlendScaleCurve;                                   // 0x0AA8   (0x0008)  
	class UCurveFloat*                                 PlayerSlopeControlAlphaBlendCurve;                          // 0x0AB0   (0x0008)  
	FVector                                            CurrentDesiredViewLocation;                                 // 0x0AB8   (0x000C)  
	FRotator                                           CurrentDesiredViewRotation;                                 // 0x0AC4   (0x000C)  
	bool                                               bCurrentCameraTPSMode;                                      // 0x0AD0   (0x0001)  
	TEnumAsByte<ESBTPSModeType>                        CurrentCameraTPSModeType;                                   // 0x0AD1   (0x0001)  
	bool                                               bCurrentCameraTPSZoomIn;                                    // 0x0AD2   (0x0001)  
	unsigned char                                      UnknownData24_6[0x1];                                       // 0x0AD3   (0x0001)  MISSED
	float                                              TSPCameraDisableViewTime;                                   // 0x0AD4   (0x0004)  
	FVector                                            TSPStartCameraLocation;                                     // 0x0AD8   (0x000C)  
	FRotator                                           TSPStartCameraRotation;                                     // 0x0AE4   (0x000C)  
	float                                              TSPCameraSwitchCurrentBlendTime;                            // 0x0AF0   (0x0004)  
	float                                              TSPCameraSwitchMaxBlendTime;                                // 0x0AF4   (0x0004)  
	bool                                               bTPSCameraCollisionHit;                                     // 0x0AF8   (0x0001)  
	unsigned char                                      UnknownData25_6[0x3];                                       // 0x0AF9   (0x0003)  MISSED
	FVector                                            TPSCameraCollisionHitLocation;                              // 0x0AFC   (0x000C)  
	float                                              TPSCameraCollisionHitBlendTime;                             // 0x0B08   (0x0004)  
	float                                              TPSCameraCollisionHitCurrentBlendTime;                      // 0x0B0C   (0x0004)  
	uint64_t                                           TPSCameraStopFrameCounter;                                  // 0x0B10   (0x0008)  
	TEnumAsByte<ESBFishingModeType>                    CurrentFishingMode;                                         // 0x0B18   (0x0001)  
	TEnumAsByte<ESBFishingCameraModeType>              PrevFishingCameraMode;                                      // 0x0B19   (0x0001)  
	TEnumAsByte<ESBFishingCameraModeType>              CurrentFishingCameraMode;                                   // 0x0B1A   (0x0001)  
	unsigned char                                      UnknownData26_6[0x1];                                       // 0x0B1B   (0x0001)  MISSED
	float                                              ConfigFishingAimCameraSwitchBlendTime;                      // 0x0B1C   (0x0004)  
	float                                              FishingCameraSwitchCurrentBlendTime;                        // 0x0B20   (0x0004)  
	FVector                                            FishingCameraStartLocation;                                 // 0x0B24   (0x000C)  
	FRotator                                           FishingCameraStartRotation;                                 // 0x0B30   (0x000C)  
	bool                                               bSBPlayerCamera;                                            // 0x0B3C   (0x0001)  
	unsigned char                                      UnknownData27_7[0x433];                                     // 0x0B3D   (0x0433)  MISSED
};

/// Class /Script/SB.SBCameraActor
/// Size: 0x08A0 (2208 bytes) (0x0008A0 - 0x0008A0) align n/a MaxSize: 0x08A0
class ASBCameraActor : public ACameraActor
{ 
public:
};

/// Struct /Script/SB.SBCameraDollyFovData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCameraDollyFovData
{ 
	class UCurveFloat*                                 FovCurve;                                                   // 0x0000   (0x0008)  
	bool                                               bActive;                                                    // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Struct /Script/SB.SBCameraDollyPitchData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCameraDollyPitchData
{ 
	class UCurveFloat*                                 PitchCurve;                                                 // 0x0000   (0x0008)  
	bool                                               bActive;                                                    // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Struct /Script/SB.SBCameraDollyYawData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCameraDollyYawData
{ 
	class UCurveFloat*                                 YawCurve;                                                   // 0x0000   (0x0008)  
	bool                                               bActive;                                                    // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Struct /Script/SB.SBCameraDollyPositionData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCameraDollyPositionData
{ 
	class UCurveVector*                                PositionCurve;                                              // 0x0000   (0x0008)  
	bool                                               bActive;                                                    // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/SB.SBCameraDollyTrackData
/// Size: 0x0070 (112 bytes) (0x000030 - 0x000070) align n/a MaxSize: 0x0070
class USBCameraDollyTrackData : public UDataAsset
{ 
public:
	FSBCameraDollyFovData                              FovData;                                                    // 0x0030   (0x0010)  
	FSBCameraDollyPitchData                            PitchData;                                                  // 0x0040   (0x0010)  
	FSBCameraDollyYawData                              YawData;                                                    // 0x0050   (0x0010)  
	FSBCameraDollyPositionData                         PositionData;                                               // 0x0060   (0x0010)  
};

/// Class /Script/SB.SBCameraVolume
/// Size: 0x0458 (1112 bytes) (0x000318 - 0x000458) align n/a MaxSize: 0x0458
class ASBCameraVolume : public AVolume
{ 
public:
	bool                                               bActiveVolume;                                              // 0x0318   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0319   (0x0003)  MISSED
	float                                              Priority;                                                   // 0x031C   (0x0004)  
	bool                                               bNotDetachWhenLeaveVolume;                                  // 0x0320   (0x0001)  
	unsigned char                                      UnknownData15_6[0x7];                                       // 0x0321   (0x0007)  MISSED
	class ACameraActor*                                TargetCameraActor;                                          // 0x0328   (0x0008)  
	bool                                               bUsePlayerMoveDirFromCam;                                   // 0x0330   (0x0001)  
	TEnumAsByte<EViewTargetBlendFunction>              AttachBlendFunc;                                            // 0x0331   (0x0001)  
	unsigned char                                      UnknownData16_6[0x2];                                       // 0x0332   (0x0002)  MISSED
	float                                              AttachBlendTime;                                            // 0x0334   (0x0004)  
	TEnumAsByte<EViewTargetBlendFunction>              DetachBlendFunc;                                            // 0x0338   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x0339   (0x0003)  MISSED
	float                                              DetachBlendTime;                                            // 0x033C   (0x0004)  
	bool                                               bLookAtTargetCamMode;                                       // 0x0340   (0x0001)  
	unsigned char                                      UnknownData18_6[0x7];                                       // 0x0341   (0x0007)  MISSED
	class AActor*                                      pLookAtTargetActor;                                         // 0x0348   (0x0008)  
	float                                              LookAtTargetDistance;                                       // 0x0350   (0x0004)  
	FVector                                            LookAtTargetOffset;                                         // 0x0354   (0x000C)  
	int32_t                                            LookAtTargetEnableActiveCount;                              // 0x0360   (0x0004)  
	int32_t                                            DeactiveCameraVolumeCameraResetMode;                        // 0x0364   (0x0004)  
	float                                              DeactiveCameraVolumeCameraResetAlpha;                       // 0x0368   (0x0004)  
	float                                              DeactiveCameraVolumeCameraResetYawInDegree;                 // 0x036C   (0x0004)  
	int32_t                                            RemainLookAtTargetEnableActiveCount;                        // 0x0370   (0x0004)  
	float                                              LookAtStartInDegree;                                        // 0x0374   (0x0004)  
	float                                              LookAtBlendSpeedScale;                                      // 0x0378   (0x0004)  
	float                                              LookAtBlendInDuration;                                      // 0x037C   (0x0004)  
	float                                              ChangeDirectionInputSize;                                   // 0x0380   (0x0004)  
	bool                                               bUseCancelByUserCamControl;                                 // 0x0384   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x0385   (0x0003)  MISSED
	float                                              CancelByUserCamControlTime;                                 // 0x0388   (0x0004)  
	float                                              LookAtMaxSpeedScale;                                        // 0x038C   (0x0004)  
	float                                              LookAtControlCamSpeedScale;                                 // 0x0390   (0x0004)  
	bool                                               LookAtControlForceWalkMode;                                 // 0x0394   (0x0001)  
	bool                                               LookAtControlDisableJump;                                   // 0x0395   (0x0001)  
	bool                                               LookAtControlBlockSkill;                                    // 0x0396   (0x0001)  
	bool                                               ForceWalkModeInVolume;                                      // 0x0397   (0x0001)  
	bool                                               DisableSprintInVolume;                                      // 0x0398   (0x0001)  
	bool                                               DisableJumpInVolume;                                        // 0x0399   (0x0001)  
	bool                                               BlockSkillInVolume;                                         // 0x039A   (0x0001)  
	bool                                               BlockEventMoveLeave;                                        // 0x039B   (0x0001)  
	bool                                               bUseMoveConstraint;                                         // 0x039C   (0x0001)  
	bool                                               bMoveConstraintDirXYOnly;                                   // 0x039D   (0x0001)  
	unsigned char                                      UnknownData20_6[0x2];                                       // 0x039E   (0x0002)  MISSED
	class UCurveFloat*                                 MoveConstraintForwardFactor;                                // 0x03A0   (0x0008)  
	class UCurveFloat*                                 MoveConstraintRightFactor;                                  // 0x03A8   (0x0008)  
	TEnumAsByte<ESBCameraVoumeMoveConstraintDirectionType> MoveConstraintDirectionType;                            // 0x03B0   (0x0001)  
	unsigned char                                      UnknownData21_6[0x3];                                       // 0x03B1   (0x0003)  MISSED
	FVector                                            MoveConstraintForwardDirection;                             // 0x03B4   (0x000C)  
	class AActor*                                      MoveConstraintDirectionEnd;                                 // 0x03C0   (0x0008)  
	class AActor*                                      MoveConstraintDirectionStart;                               // 0x03C8   (0x0008)  
	bool                                               MoveConstraintRightDotCalcuate;                             // 0x03D0   (0x0001)  
	bool                                               MoveConstraintEveryUpdate;                                  // 0x03D1   (0x0001)  
	unsigned char                                      UnknownData22_6[0x2];                                       // 0x03D2   (0x0002)  MISSED
	bool                                               visibleMoveConstraintDirectionVector : 1;                   // 0x03D4:0 (0x0001)  
	bool                                               visibleMoveConstraintDirectionStart : 1;                    // 0x03D4:1 (0x0001)  
	bool                                               visibleMoveConstraintDirectionEnd : 1;                      // 0x03D4:2 (0x0001)  
	unsigned char                                      UnknownData23_5[0x3];                                       // 0x03D5   (0x0003)  MISSED
	bool                                               bUseJumpConstraint;                                         // 0x03D8   (0x0001)  
	unsigned char                                      UnknownData24_6[0x3];                                       // 0x03D9   (0x0003)  MISSED
	float                                              JumpConstraintMaxJump;                                      // 0x03DC   (0x0004)  
	float                                              JumpConstraintMaxXY;                                        // 0x03E0   (0x0004)  
	unsigned char                                      UnknownData25_6[0x4];                                       // 0x03E4   (0x0004)  MISSED
	FString                                            JumpConstraintJumpFrontPath;                                // 0x03E8   (0x0010)  
	float                                              JumpConstraintUnlockJumpFromSplineProgress;                 // 0x03F8   (0x0004)  
	bool                                               bUsePhysicsConstraint;                                      // 0x03FC   (0x0001)  
	bool                                               bIgnoreImpartBaseVelocityX;                                 // 0x03FD   (0x0001)  
	bool                                               bIgnoreImpartBaseVelocityY;                                 // 0x03FE   (0x0001)  
	bool                                               bIgnoreImpartBaseVelocityZ;                                 // 0x03FF   (0x0001)  
	bool                                               EnableTPSFlag;                                              // 0x0400   (0x0001)  
	unsigned char                                      UnknownData26_6[0x3];                                       // 0x0401   (0x0003)  MISSED
	float                                              TPS_SwitchableTime;                                         // 0x0404   (0x0004)  
	bool                                               bControlScreenPositionRatio;                                // 0x0408   (0x0001)  
	unsigned char                                      UnknownData27_6[0x7];                                       // 0x0409   (0x0007)  MISSED
	class UCurveFloat*                                 PitchAddCurveByScreenPosY;                                  // 0x0410   (0x0008)  
	class UCurveFloat*                                 YawAddCurveByScreenPosX;                                    // 0x0418   (0x0008)  
	class UCurveFloat*                                 PositionYAddCurveByScreenPosY;                              // 0x0420   (0x0008)  
	class UCurveFloat*                                 PositionXAddCurveByScreenPosX;                              // 0x0428   (0x0008)  
	FName                                              EffectAlias;                                                // 0x0430   (0x0008)  
	FSBMapSectorID                                     SectorID;                                                   // 0x0438   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x0440   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x044C   (0x000C)  
};

/// Class /Script/SB.SBCameraVolumeMoveConstraintComponent
/// Size: 0x0260 (608 bytes) (0x000260 - 0x000260) align n/a MaxSize: 0x0260
class USBCameraVolumeMoveConstraintComponent : public USceneComponent
{ 
public:
};

/// Struct /Script/SB.SBAnimSyncBoneInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBAnimSyncBoneInfo
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	FVector                                            PositionInCS;                                               // 0x0008   (0x000C)  
	FVector                                            VelocityInCS;                                               // 0x0014   (0x000C)  
};

/// Struct /Script/SB.SBAnimSyncSetAnimSeqInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAnimSyncSetAnimSeqInfo
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FSBAnimSyncBoneInfo>                        BoneInfos;                                                  // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBAnimSyncSetAnimSeqCache
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBAnimSyncSetAnimSeqCache
{ 
	TArray<FSBAnimSyncSetAnimSeqInfo>                  CacheInfos;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBAnimSyncSet
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FSBAnimSyncSet
{ 
	TArray<FSBAnimSyncBoneInfo>                        BoneInfos;                                                  // 0x0000   (0x0010)  
	class USkeletalMeshComponent*                      BaseMeshComponent;                                          // 0x0010   (0x0008)  
	TMap<FName, FSBAnimSyncSetAnimSeqCache>            CacheSeqMap;                                                // 0x0018   (0x0050)  
};

/// Struct /Script/SB.SBCharacterCuttingMeshInfo
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FSBCharacterCuttingMeshInfo
{ 
	class UProceduralMeshComponent*                    ProcMeshComp;                                               // 0x0000   (0x0008)  
	FName                                              AttachBone;                                                 // 0x0008   (0x0008)  
	FTransform                                         AttachedTM;                                                 // 0x0010   (0x0030)  
	FVector                                            SliceNormal;                                                // 0x0040   (0x000C)  
	bool                                               bIsAttachedParentBone;                                      // 0x004C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	int32_t                                            LOD;                                                        // 0x0050   (0x0004)  
	unsigned char                                      UnknownData03_7[0xC];                                       // 0x0054   (0x000C)  MISSED
};

/// Struct /Script/SB.SBCharacterSplineExtraData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCharacterSplineExtraData
{ 
	float                                              BlendDuration;                                              // 0x0000   (0x0004)  
	bool                                               bOverrideBlendDuration;                                     // 0x0004   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	float                                              OverrideProbeSize;                                          // 0x0008   (0x0004)  
	bool                                               bOverrideProbeSize;                                         // 0x000C   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/SB.SBSelfiePoseInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSelfiePoseInfo
{ 
	FName                                              PoseName;                                                   // 0x0000   (0x0008)  
	FSoftObjectPath                                    BlendSpace;                                                 // 0x0008   (0x0018)  
};

/// Struct /Script/SB.SBOverrideFootStepPhySurfaceInfo
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FSBOverrideFootStepPhySurfaceInfo
{ 
	unsigned char                                      UnknownData01_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/SB.SBCharacterInteractionMoveInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBCharacterInteractionMoveInfo
{ 
	float                                              StartTime;                                                  // 0x0000   (0x0004)  
	float                                              Duration;                                                   // 0x0004   (0x0004)  
	FVector                                            Velocity;                                                   // 0x0008   (0x000C)  
	FVector                                            StartLoc;                                                   // 0x0014   (0x000C)  
	FVector                                            TargetLoc;                                                  // 0x0020   (0x000C)  
	FVector                                            Forward;                                                    // 0x002C   (0x000C)  
};

/// Struct /Script/SB.MaterialParamID
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMaterialParamID
{ 
	int32_t                                            MaterialIndex;                                              // 0x0000   (0x0004)  
	int32_t                                            MeshSlotIndex;                                              // 0x0004   (0x0004)  
	FName                                              Name;                                                       // 0x0008   (0x0008)  
};

/// Struct /Script/SB.SBCharacterMaterialParamInfo
/// Size: 0x01D8 (472 bytes) (0x000000 - 0x0001D8) align n/a MaxSize: 0x01D8
struct FSBCharacterMaterialParamInfo
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	TEnumAsByte<ESBMaterialParamType>                  ParamType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              CurrentDuration;                                            // 0x000C   (0x0004)  
	float                                              Duration;                                                   // 0x0010   (0x0004)  
	int32_t                                            RemainLoopCount;                                            // 0x0014   (0x0004)  
	int32_t                                            MaterialIndex;                                              // 0x0018   (0x0004)  
	int32_t                                            MeshIndex;                                                  // 0x001C   (0x0004)  
	bool                                               bRestoreParamWhenFinished;                                  // 0x0020   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	FGuid                                              ControlGUID;                                                // 0x0024   (0x0010)  
	bool                                               bPause;                                                     // 0x0034   (0x0001)  
	bool                                               bParamCurveNormalizedAge;                                   // 0x0035   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x0036   (0x0002)  MISSED
	FRuntimeFloatCurve                                 ParamValue1;                                                // 0x0038   (0x0088)  
	FRuntimeFloatCurve                                 ParamValue2;                                                // 0x00C0   (0x0088)  
	FRuntimeFloatCurve                                 ParamValue3;                                                // 0x0148   (0x0088)  
	bool                                               bUpdatedTick;                                               // 0x01D0   (0x0001)  
	unsigned char                                      UnknownData07_7[0x7];                                       // 0x01D1   (0x0007)  MISSED
};

/// Struct /Script/SB.SBCharacterMaterialParamInfoList
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCharacterMaterialParamInfoList
{ 
	TArray<FSBCharacterMaterialParamInfo>              Data;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/SB.MaterialChangeID
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FMaterialChangeID
{ 
	int32_t                                            MaterialIndex;                                              // 0x0000   (0x0004)  
	int32_t                                            MeshIndex;                                                  // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBCharacterMaterialChangeInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBCharacterMaterialChangeInfo
{ 
	int32_t                                            MaterialIndex;                                              // 0x0000   (0x0004)  
	int32_t                                            MeshIndex;                                                  // 0x0004   (0x0004)  
	class UMaterialInterface*                          ChangeMaterial;                                             // 0x0008   (0x0008)  
	float                                              CurrentDuration;                                            // 0x0010   (0x0004)  
	float                                              Duration;                                                   // 0x0014   (0x0004)  
	int32_t                                            RemainLoopCount;                                            // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCharacterMaterialChangeInfoList
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCharacterMaterialChangeInfoList
{ 
	TArray<FSBCharacterMaterialChangeInfo>             Data;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBCameraEventBaseScreenPosition
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBCameraEventBaseScreenPosition
{ 
	class UCurveFloat*                                 AddOffsetYCurve;                                            // 0x0000   (0x0008)  
	class UCurveFloat*                                 AddOffsetXCurve;                                            // 0x0008   (0x0008)  
	class UCurveFloat*                                 AddFovCurve;                                                // 0x0010   (0x0008)  
	class UCurveFloat*                                 YawToPivotCurve;                                            // 0x0018   (0x0008)  
	class UCurveFloat*                                 PitchToPivotCurve;                                          // 0x0020   (0x0008)  
	float                                              Duration;                                                   // 0x0028   (0x0004)  
	float                                              CurrentDuration;                                            // 0x002C   (0x0004)  
	bool                                               bHoldDuration;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              HoldDuration;                                               // 0x0034   (0x0004)  
	bool                                               bInverse;                                                   // 0x0038   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/SB.SBCameraEventBaseScreenPosData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSBCameraEventBaseScreenPosData
{ 
	FSBCameraEventBaseScreenPosition                   Data;                                                       // 0x0000   (0x0040)  
	float                                              DelayStartDuration;                                         // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCharMovingStanceData
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align n/a MaxSize: 0x0098
struct FSBCharMovingStanceData
{ 
	TEnumAsByte<ESBCharMovingStanceForceType>          ForceType;                                                  // 0x0000   (0x0001)  
	bool                                               bManualForceCenter;                                         // 0x0001   (0x0001)  
	unsigned char                                      UnknownData09_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	FVector                                            ForceCenter;                                                // 0x0004   (0x000C)  
	float                                              ForceRadius;                                                // 0x0010   (0x0004)  
	bool                                               bEffectInMinRadius;                                         // 0x0014   (0x0001)  
	bool                                               bActiveEffectInVolume;                                      // 0x0015   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	float                                              ForceMinRadius;                                             // 0x0018   (0x0004)  
	FSBTableAliasName                                  EffectVolumeAlias;                                          // 0x001C   (0x000C)  
	float                                              InitialForce;                                               // 0x0028   (0x0004)  
	float                                              ForceDeltaForSec;                                           // 0x002C   (0x0004)  
	float                                              MaxForce;                                                   // 0x0030   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	class UCurveFloat*                                 MoveMaxSpeedCurveAtDuration;                                // 0x0038   (0x0008)  
	bool                                               bForceOnlyXY;                                               // 0x0040   (0x0001)  
	bool                                               bApplyForceAtCharacterPhysWalking;                          // 0x0041   (0x0001)  
	bool                                               bApplyForceAtCharacterPhysFalling;                          // 0x0042   (0x0001)  
	bool                                               bApplyForceAtCharacterPhysSwimming;                         // 0x0043   (0x0001)  
	bool                                               bUseMoveSpeedScaleCurve;                                    // 0x0044   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	class UCurveFloat*                                 MoveSpeedScaleCurve;                                        // 0x0048   (0x0008)  
	FRotator                                           MoveSpeedScaleBaseRotation;                                 // 0x0050   (0x000C)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	class UCurveFloat*                                 MoveSpeedScaleBetweenBaseRot;                               // 0x0060   (0x0008)  
	bool                                               bBlockSkill;                                                // 0x0068   (0x0001)  
	bool                                               bBlockJump;                                                 // 0x0069   (0x0001)  
	bool                                               bBlockSprint;                                               // 0x006A   (0x0001)  
	bool                                               bBlockMoveInput;                                            // 0x006B   (0x0001)  
	bool                                               bForceWalkingMode;                                          // 0x006C   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	float                                              NormalAnimRangeDegree;                                      // 0x0070   (0x0004)  
	FName                                              OverrideStanceAnim;                                         // 0x0074   (0x0008)  
	bool                                               bUseMoveStruggleAnim;                                       // 0x007C   (0x0001)  
	bool                                               bBlockMoveTransitAnimAtSturggle;                            // 0x007D   (0x0001)  
	unsigned char                                      UnknownData15_6[0x2];                                       // 0x007E   (0x0002)  MISSED
	float                                              MoveStruggleInDegreeForceToVelocity;                        // 0x0080   (0x0004)  
	bool                                               bApplySpeedForIdleAnim;                                     // 0x0084   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x0085   (0x0003)  MISSED
	float                                              ApplySpeedForIdleAnimScale;                                 // 0x0088   (0x0004)  
	float                                              ApplySpeedForIdleAnimDegree;                                // 0x008C   (0x0004)  
	bool                                               bUseShotMoveToIdleDuration;                                 // 0x0090   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	float                                              ShotMoveToIdleDuration;                                     // 0x0094   (0x0004)  
};

/// Struct /Script/SB.AddControllerValue
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FAddControllerValue
{ 
	float                                              DeltaTime;                                                  // 0x0000   (0x0004)  
	float                                              Value;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBCharacterEventMoveInterface
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCharacterEventMoveInterface
{ 
	class ASBCharacterEventMovVolume*                  CurrentVolumeActor;                                         // 0x0000   (0x0008)  
	class USBEventMoveDataComponent*                   CurrentComponent;                                           // 0x0008   (0x0008)  
};

/// Struct /Script/SB.SBManualBlendCamInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBManualBlendCamInfo
{ 
	float                                              Length[3];                                                  // 0x0000   (0x000C)  
	float                                              Height[3];                                                  // 0x000C   (0x000C)  
	float                                              LeftRight[3];                                               // 0x0018   (0x000C)  
	bool                                               bActive;                                                    // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	float                                              Duration;                                                   // 0x0028   (0x0004)  
	float                                              CurrentTime;                                                // 0x002C   (0x0004)  
};

/// Struct /Script/SB.ControlledForceObjectInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FControlledForceObjectInfo
{ 
	TWeakObjectPtr<class UPrimitiveComponent*>         ControlledObject;                                           // 0x0000   (0x0008)  
	FName                                              CenterBoneName;                                             // 0x0008   (0x0008)  
	FVector                                            RelativeDelta;                                              // 0x0010   (0x000C)  
	float                                              ForcePerSec;                                                // 0x001C   (0x0004)  
	float                                              ForceScale;                                                 // 0x0020   (0x0004)  
	float                                              ForceActiveRadian;                                          // 0x0024   (0x0004)  
	float                                              RemainBlockForce;                                           // 0x0028   (0x0004)  
	float                                              BlockForceDuration;                                         // 0x002C   (0x0004)  
};

/// Struct /Script/SB.SBCharacterMovementCheckInfo
/// Size: 0x0658 (1624 bytes) (0x000000 - 0x000658) align n/a MaxSize: 0x0658
struct FSBCharacterMovementCheckInfo
{ 
	FVector                                            LastUpdateLocation;                                         // 0x0000   (0x000C)  
	FVector                                            LocalPoints[18];                                            // 0x000C   (0x00D8)  
	FVector                                            WorldPoints[18];                                            // 0x00E4   (0x00D8)  
	FVector                                            WorldNormals[18];                                           // 0x01BC   (0x00D8)  
	FVector                                            WorldTopDownHeightPoints[18];                               // 0x0294   (0x00D8)  
	FVector                                            FutureMovingPoint[2];                                       // 0x036C   (0x0018)  
	FVector                                            FutureMovingPointNormal[2];                                 // 0x0384   (0x0018)  
	int32_t                                            FutureMovingPointEnableHuddleUp[2];                         // 0x039C   (0x0008)  
	float                                              FutureMovingPointSlopeDegree[2];                            // 0x03A4   (0x0008)  
	float                                              FutureMovingPointDiff[2];                                   // 0x03AC   (0x0008)  
	FVector                                            FutureCamDirPoint[2];                                       // 0x03B4   (0x0018)  
	float                                              FutureCamDirPointSlopeDegree[2];                            // 0x03CC   (0x0008)  
	int32_t                                            CurrentFollowTargetIndex;                                   // 0x03D4   (0x0004)  
	int32_t                                            NextFollowTargetIndex;                                      // 0x03D8   (0x0004)  
	float                                              RemainCalcNextFollowTargetIndexSec;                         // 0x03DC   (0x0004)  
	float                                              RemainNextTargetMove;                                       // 0x03E0   (0x0004)  
	float                                              AverageSlopeDegree;                                         // 0x03E4   (0x0004)  
	float                                              AverageSlopeDegreeAtCamDir;                                 // 0x03E8   (0x0004)  
	TEnumAsByte<ESBCameraSlopeMoveType>                CameraSlopeMoveType;                                        // 0x03EC   (0x0001)  
	bool                                               bRunCameraSlopeMoveAlpha;                                   // 0x03ED   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x03EE   (0x0002)  MISSED
	float                                              CurrentCameraSlopeMoveAlpha;                                // 0x03F0   (0x0004)  
	float                                              CurrentCameraSlopeMoveRunningTime;                          // 0x03F4   (0x0004)  
	float                                              RemainBlockCameraSlopeMove;                                 // 0x03F8   (0x0004)  
	float                                              CameraSlopeRunTimeFromStart;                                // 0x03FC   (0x0004)  
	FVector                                            HistoryFollowTargetLoc[15];                                 // 0x0400   (0x00B4)  
	FVector                                            HistoryFollowTargetDir[15];                                 // 0x04B4   (0x00B4)  
	int32_t                                            CurrentHistoryFollowCount;                                  // 0x0568   (0x0004)  
	FVector                                            CurrentFollowTargetLocation;                                // 0x056C   (0x000C)  
	FRotator                                           CurrentFollowTargetRotation;                                // 0x0578   (0x000C)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0584   (0x0004)  MISSED
	class UParticleSystemComponent*                    pFollowParticle;                                            // 0x0588   (0x0008)  
	class USpotLightComponent*                         pFollowSpotLight;                                           // 0x0590   (0x0008)  
	float                                              WorldHeightFromCenter;                                      // 0x0598   (0x0004)  
	float                                              WorldHeightFromTargetCharacterForward;                      // 0x059C   (0x0004)  
	float                                              WorldHeightFromTargetCharacterForwardForSprint;             // 0x05A0   (0x0004)  
	FVector                                            ActorBottomLocation;                                        // 0x05A4   (0x000C)  
	class UStaticMeshComponent*                        CheckerComponents[18];                                      // 0x05B0   (0x0090)  
	class UStaticMeshComponent*                        CheckerFutureComponents[2];                                 // 0x0640   (0x0010)  
	bool                                               bInit;                                                      // 0x0650   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0651   (0x0007)  MISSED
};

/// Struct /Script/SB.SBMeshClipingInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBMeshClipingInfo
{ 
	bool                                               bApplyValue;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FVector>                                    MaterialVectorParamList;                                    // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBMeshInfo
/// Size: 0x02F0 (752 bytes) (0x000000 - 0x0002F0) align n/a MaxSize: 0x02F0
struct FSBMeshInfo
{ 
	FName                                              AttachSocketName;                                           // 0x0000   (0x0008)  
	TEnumAsByte<ESBMeshAttachType>                     AttachType;                                                 // 0x0008   (0x0001)  
	TEnumAsByte<ESBSkelMeshSlot>                       MeshSlot;                                                   // 0x0009   (0x0001)  
	unsigned char                                      UnknownData11_6[0x2];                                       // 0x000A   (0x0002)  MISSED
	FVector                                            PositionOffset;                                             // 0x000C   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x0018   (0x000C)  
	unsigned char                                      UnknownData12_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	class USBSkeletalMeshComponent*                    MeshComponent;                                              // 0x0028   (0x0008)  
	FTransform                                         InitRelativeTransform;                                      // 0x0030   (0x0030)  
	FCollisionResponseContainer                        CollisionResponseContainer;                                 // 0x0060   (0x0020)  
	TEnumAsByte<ECollisionChannel>                     CollisionObjectType;                                        // 0x0080   (0x0001)  
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x0081   (0x0001)  
	bool                                               bBodyNoCollisionIfNotKeep;                                  // 0x0082   (0x0001)  
	unsigned char                                      UnknownData13_6[0x1];                                       // 0x0083   (0x0001)  MISSED
	int32_t                                            CustomDepthStencilValue;                                    // 0x0084   (0x0004)  
	bool                                               bDetachWhenReleaseActor;                                    // 0x0088   (0x0001)  
	unsigned char                                      UnknownData14_6[0x7];                                       // 0x0089   (0x0007)  MISSED
	TArray<class UMaterialInterface*>                  OriginMaterials;                                            // 0x0090   (0x0010)  
	TArray<class UFXSystemComponent*>                  OriginFXSystemArray;                                        // 0x00A0   (0x0010)  
	class UPhysicsAsset*                               OverrideClothPhysicsAsset;                                  // 0x00B0   (0x0008)  
	bool                                               bOverrideMinLod;                                            // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x00B9   (0x0003)  MISSED
	int32_t                                            ForcedLodModel;                                             // 0x00BC   (0x0004)  
	int32_t                                            MinLodModel;                                                // 0x00C0   (0x0004)  
	int32_t                                            CurrentForceLodIndex;                                       // 0x00C4   (0x0004)  
	float                                              TempPhysicsBlendWeight;                                     // 0x00C8   (0x0004)  
	float                                              TempClothBlendWeight;                                       // 0x00CC   (0x0004)  
	bool                                               bPhysicsReset;                                              // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x00D1   (0x0003)  MISSED
	float                                              PhysicsResetFadeInTime;                                     // 0x00D4   (0x0004)  
	float                                              PhysicsResetFadeOutTime;                                    // 0x00D8   (0x0004)  
	bool                                               bRefreshMaskFilter;                                         // 0x00DC   (0x0001)  
	bool                                               bBlueprintComponent;                                        // 0x00DD   (0x0001)  
	unsigned char                                      UnknownData17_6[0x2];                                       // 0x00DE   (0x0002)  MISSED
	FSBMeshClipingInfo                                 BackupMeshClipingInfo[4];                                   // 0x00E0   (0x0060)  
	FSBMeshClipingInfo                                 MeshClipingInfo[4];                                         // 0x0140   (0x0060)  
	unsigned char                                      UnknownData18_6[0xE0];                                      // 0x01A0   (0x00E0)  MISSED
	bool                                               bTempHiddenInGame;                                          // 0x0280   (0x0001)  
	unsigned char                                      UnknownData19_6[0x7];                                       // 0x0281   (0x0007)  MISSED
	TMap<FName, bool>                                  bTempHiddenInGameMap;                                       // 0x0288   (0x0050)  
	bool                                               bLongHair;                                                  // 0x02D8   (0x0001)  
	TEnumAsByte<ESBEquipmentForceBody>                 ForceBodyType;                                              // 0x02D9   (0x0001)  
	unsigned char                                      UnknownData20_6[0x2];                                       // 0x02DA   (0x0002)  MISSED
	FName                                              Tag;                                                        // 0x02DC   (0x0008)  
	unsigned char                                      UnknownData21_7[0xC];                                       // 0x02E4   (0x000C)  MISSED
};

/// Struct /Script/SB.SBCharacterEventMoveInfo
/// Size: 0x01B0 (432 bytes) (0x000000 - 0x0001B0) align n/a MaxSize: 0x01B0
struct FSBCharacterEventMoveInfo
{ 
	FVector                                            MoveForwardWS;                                              // 0x0000   (0x000C)  
	float                                              MoveForwardApplyValue;                                      // 0x000C   (0x0004)  
	FVector                                            MoveRightWS;                                                // 0x0010   (0x000C)  
	float                                              MoveRightApplyValue;                                        // 0x001C   (0x0004)  
	FName                                              IdleRunBlendSpaceName;                                      // 0x0020   (0x0008)  
	float                                              JumpLength;                                                 // 0x0028   (0x0004)  
	FRotator                                           StartPointRotation;                                         // 0x002C   (0x000C)  
	FVector                                            StartPointLocation;                                         // 0x0038   (0x000C)  
	FRotator                                           EndPointRotation;                                           // 0x0044   (0x000C)  
	FVector                                            EndPointLocation;                                           // 0x0050   (0x000C)  
	FRotator                                           StartLeaveRotation;                                         // 0x005C   (0x000C)  
	FVector                                            StartLeaveLocation;                                         // 0x0068   (0x000C)  
	FRotator                                           EndLeaveRotation;                                           // 0x0074   (0x000C)  
	FVector                                            EndLeaveLocation;                                           // 0x0080   (0x000C)  
	float                                              SlidingTime;                                                // 0x008C   (0x0004)  
	bool                                               bRequestStopSliding;                                        // 0x0090   (0x0001)  
	bool                                               bEnableSliding;                                             // 0x0091   (0x0001)  
	bool                                               SlidingStopping;                                            // 0x0092   (0x0001)  
	unsigned char                                      UnknownData11_6[0x5];                                       // 0x0093   (0x0005)  MISSED
	class AActor*                                      CollisionControlActor;                                      // 0x0098   (0x0008)  
	float                                              EnableCancelJumpDirDegToCharDir;                            // 0x00A0   (0x0004)  
	float                                              CancelJumpXYPower;                                          // 0x00A4   (0x0004)  
	bool                                               bJumping;                                                   // 0x00A8   (0x0001)  
	bool                                               bSideRodUpJumping;                                          // 0x00A9   (0x0001)  
	TEnumAsByte<ESBEventMoveType>                      EventMoveType;                                              // 0x00AA   (0x0001)  
	unsigned char                                      UnknownData12_6[0x1];                                       // 0x00AB   (0x0001)  MISSED
	float                                              RodMoveDamping;                                             // 0x00AC   (0x0004)  
	float                                              RodMoveJumpRadian;                                          // 0x00B0   (0x0004)  
	float                                              RodMoveBackJumpRadian;                                      // 0x00B4   (0x0004)  
	float                                              RodMoveBackJumpLength;                                      // 0x00B8   (0x0004)  
	bool                                               bRequestRodMoveJump;                                        // 0x00BC   (0x0001)  
	bool                                               bCanRodMoveJump;                                            // 0x00BD   (0x0001)  
	unsigned char                                      UnknownData13_6[0x2];                                       // 0x00BE   (0x0002)  MISSED
	float                                              RodMoveSwingSpeed;                                          // 0x00C0   (0x0004)  
	float                                              RodFallLength;                                              // 0x00C4   (0x0004)  
	FString                                            EventMoveTurnAnimName;                                      // 0x00C8   (0x0010)  
	float                                              EventMoveTurnDuration;                                      // 0x00D8   (0x0004)  
	float                                              SideRodeForwardRadian;                                      // 0x00DC   (0x0004)  
	FVector                                            CurrentSideRodCamOffsetSpeed;                               // 0x00E0   (0x000C)  
	float                                              SideRodeRightRadian;                                        // 0x00EC   (0x0004)  
	float                                              SideRodeBackSearchRadian;                                   // 0x00F0   (0x0004)  
	FName                                              SideRodeSearchBoneName;                                     // 0x00F4   (0x0008)  
	float                                              SideRodCrossDistance;                                       // 0x00FC   (0x0004)  
	FName                                              SideRodCrossAnimTagName;                                    // 0x0100   (0x0008)  
	FName                                              SideRodJumpAnimTagName;                                     // 0x0108   (0x0008)  
	bool                                               bEnableSideRodUpJump;                                       // 0x0110   (0x0001)  
	bool                                               bEnableSideRodDownAttach;                                   // 0x0111   (0x0001)  
	bool                                               bDisableSideRodJumpLanding;                                 // 0x0112   (0x0001)  
	unsigned char                                      UnknownData14_6[0x1];                                       // 0x0113   (0x0001)  MISSED
	float                                              SideRodSearchDistance;                                      // 0x0114   (0x0004)  
	float                                              SideRodSearchRightDistance;                                 // 0x0118   (0x0004)  
	float                                              SideRodeBackSearchDistance;                                 // 0x011C   (0x0004)  
	float                                              SideRodSearchFrontBackDistance;                             // 0x0120   (0x0004)  
	bool                                               bSideRodWallless;                                           // 0x0124   (0x0001)  
	bool                                               bBlockForwardInputAtFirst;                                  // 0x0125   (0x0001)  
	bool                                               bBlockBackwardInputAtFirst;                                 // 0x0126   (0x0001)  
	unsigned char                                      UnknownData15_6[0x1];                                       // 0x0127   (0x0001)  MISSED
	int32_t                                            LastSideRodZeroDirAnimIndex;                                // 0x0128   (0x0004)  
	int32_t                                            LastSideToSideUnitMoveAnimIndex;                            // 0x012C   (0x0004)  
	int32_t                                            LastSideToSideUnitMoveSideValue;                            // 0x0130   (0x0004)  
	bool                                               bHoldBalanceBeam;                                           // 0x0134   (0x0001)  
	bool                                               bPendingHoldUpBalanceBeam;                                  // 0x0135   (0x0001)  
	bool                                               bRequestRodTurn;                                            // 0x0136   (0x0001)  
	unsigned char                                      UnknownData16_6[0x1];                                       // 0x0137   (0x0001)  MISSED
	float                                              RemainDelayHoldBalanceBeam;                                 // 0x0138   (0x0004)  
	int32_t                                            BalanceBeamForwardValue;                                    // 0x013C   (0x0004)  
	int32_t                                            LastNormalBalanceBeamForwardValue;                          // 0x0140   (0x0004)  
	float                                              BalanceBeamMoveInputForwardDegree;                          // 0x0144   (0x0004)  
	float                                              BalanceBeamSplineLength;                                    // 0x0148   (0x0004)  
	bool                                               bDisableHoldBalanceBeam;                                    // 0x014C   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x014D   (0x0003)  MISSED
	float                                              BalanceBeamCurrentMoveLength;                               // 0x0150   (0x0004)  
	int32_t                                            TargetCableSegmentIndex;                                    // 0x0154   (0x0004)  
	int32_t                                            CurrentCableSegmentIndex;                                   // 0x0158   (0x0004)  
	float                                              CurrentCablePerSegment;                                     // 0x015C   (0x0004)  
	float                                              LastCableForwardValue;                                      // 0x0160   (0x0004)  
	bool                                               bPendingStopAnimAtChangedMovementMode;                      // 0x0164   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x0165   (0x0003)  MISSED
	float                                              RopeDetachDelayTime;                                        // 0x0168   (0x0004)  
	float                                              CurrentRopeSwingStartForceKeepTime;                         // 0x016C   (0x0004)  
	class USBEventMoveDataComponent*                   PendingDetachMoveDataComp;                                  // 0x0170   (0x0008)  
	bool                                               bRopeForwardSwing;                                          // 0x0178   (0x0001)  
	bool                                               bRopeTruning;                                               // 0x0179   (0x0001)  
	bool                                               bRopeSwingIgnorePhysic;                                     // 0x017A   (0x0001)  
	bool                                               bCanRopeTrun;                                               // 0x017B   (0x0001)  
	bool                                               bRopeForwardMoving;                                         // 0x017C   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x017D   (0x0003)  MISSED
	FQuat                                              LastRopeSwingRotation;                                      // 0x0180   (0x0010)  
	float                                              BlockTimeAfterEventMove;                                    // 0x0190   (0x0004)  
	bool                                               bKeepEventMoveWhenDead;                                     // 0x0194   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x0195   (0x0003)  MISSED
	FString                                            DeadShowPath;                                               // 0x0198   (0x0010)  
	unsigned char                                      UnknownData21_7[0x8];                                       // 0x01A8   (0x0008)  MISSED
};

/// Struct /Script/SB.SBEventMoveResultExtraInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBEventMoveResultExtraInfo
{ 
	int32_t                                            EventMoveHitCollisionIndex;                                 // 0x0000   (0x0004)  
	float                                              DistanceToPoint;                                            // 0x0004   (0x0004)  
	FVector                                            EventMoveHitLocation;                                       // 0x0008   (0x000C)  
};

/// Struct /Script/SB.SBRagdollInfo
/// Size: 0x0100 (256 bytes) (0x000000 - 0x000100) align n/a MaxSize: 0x0100
struct FSBRagdollInfo
{ 
	int32_t                                            EnableRagdollCount;                                         // 0x0000   (0x0004)  
	bool                                               bRagdollStopWhenZeroVelocity;                               // 0x0004   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	float                                              WaitZeroVelocityTime;                                       // 0x0008   (0x0004)  
	FName                                              ImpulseBoneName;                                            // 0x000C   (0x0008)  
	FVector                                            ImpulseValue;                                               // 0x0014   (0x000C)  
	FVector                                            HitLocation;                                                // 0x0020   (0x000C)  
	float                                              ImpulseDelayTime;                                           // 0x002C   (0x0004)  
	bool                                               bRegisterPoseSnapshot;                                      // 0x0030   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              PoseSnapshotDelayTime;                                      // 0x0034   (0x0004)  
	bool                                               bPoseSnapshot;                                              // 0x0038   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            RegisterStopFrameDelay;                                     // 0x003C   (0x0004)  
	float                                              FadeInTime;                                                 // 0x0040   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0044   (0x0004)  
	float                                              BlendWeight;                                                // 0x0048   (0x0004)  
	bool                                               bAllBodies;                                                 // 0x004C   (0x0001)  
	bool                                               bStopSimulatePhysics;                                       // 0x004D   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x004E   (0x0002)  MISSED
	float                                              CurrentActiveTime;                                          // 0x0050   (0x0004)  
	bool                                               bUseMassScale;                                              // 0x0054   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	FRuntimeFloatCurve                                 MassScaleCurve;                                             // 0x0058   (0x0088)  
	FName                                              CapsuleComponentFollowingSocket;                            // 0x00E0   (0x0008)  
	FVector                                            CapsuleComponentLocation;                                   // 0x00E8   (0x000C)  
	float                                              ImpulseLimitVelocity;                                       // 0x00F4   (0x0004)  
	FName                                              RootBoneName;                                               // 0x00F8   (0x0008)  
};

/// Struct /Script/SB.SBActorMoveData
/// Size: 0x0270 (624 bytes) (0x000000 - 0x000270) align n/a MaxSize: 0x0270
struct FSBActorMoveData
{ 
	unsigned char                                      UnknownData06_7[0x88];                                      // 0x0000   (0x0088)  MISSED
	TWeakObjectPtr<class ASBCharacter*>                pAttachCharacter;                                           // 0x0088   (0x0008)  
	unsigned char                                      UnknownData07_6[0xC];                                       // 0x0090   (0x000C)  MISSED
	TWeakObjectPtr<class ASBCharacter*>                pRotationTargetCharacter;                                   // 0x009C   (0x0008)  
	unsigned char                                      UnknownData08_6[0x44];                                      // 0x00A4   (0x0044)  MISSED
	class UCurveFloat*                                 PositionInterpCurveData;                                    // 0x00E8   (0x0008)  
	unsigned char                                      UnknownData09_6[0x8];                                       // 0x00F0   (0x0008)  MISSED
	class UCurveFloat*                                 RotationInterpCurveData;                                    // 0x00F8   (0x0008)  
	class UCurveFloat*                                 StaticMoveZVAlueCurveData;                                  // 0x0100   (0x0008)  
	unsigned char                                      UnknownData10_6[0x8];                                       // 0x0108   (0x0008)  MISSED
	class UCurveVector*                                MoveOffsetCurveData;                                        // 0x0110   (0x0008)  
	unsigned char                                      UnknownData11_7[0x158];                                     // 0x0118   (0x0158)  MISSED
};

/// Struct /Script/SB.SBLastSetBlendSpace
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FSBLastSetBlendSpace
{ 
	TEnumAsByte<ESBCharacterAnimChannel>               Channel;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            LowerBlendSpaceResource;                                    // 0x0008   (0x0010)  
	FString                                            UpperBlendSpaceResource;                                    // 0x0018   (0x0010)  
	FGuid                                              LastOverlapGUID;                                            // 0x0028   (0x0010)  
	bool                                               bLowerOverlap;                                              // 0x0038   (0x0001)  
	bool                                               bUpperOverlap;                                              // 0x0039   (0x0001)  
	bool                                               bUpperOnly;                                                 // 0x003A   (0x0001)  
	unsigned char                                      UnknownData05_6[0x1];                                       // 0x003B   (0x0001)  MISSED
	float                                              PlayRate;                                                   // 0x003C   (0x0004)  
	int32_t                                            Priority;                                                   // 0x0040   (0x0004)  
	bool                                               bStopWhenJump;                                              // 0x0044   (0x0001)  
	bool                                               bBlockPlayTransitAnim;                                      // 0x0045   (0x0001)  
	bool                                               bNeedApply;                                                 // 0x0046   (0x0001)  
	bool                                               bNeedRemove;                                                // 0x0047   (0x0001)  
	bool                                               bResetPlayTime;                                             // 0x0048   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              DelayTime;                                                  // 0x004C   (0x0004)  
	TEnumAsByte<ESBAnimNodeBlendSpaceSlot>             Slot;                                                       // 0x0050   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0051   (0x0007)  MISSED
	class UBlendSpaceBase*                             pBlendSpaceAsset;                                           // 0x0058   (0x0008)  
};

/// Struct /Script/SB.SBOverrideAnimTransit
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBOverrideAnimTransit
{ 
	FString                                            LowerTransitAnimResource;                                   // 0x0000   (0x0010)  
	FString                                            UpperTransitAnimResource;                                   // 0x0010   (0x0010)  
	FGuid                                              Guid;                                                       // 0x0020   (0x0010)  
};

/// Struct /Script/SB.SBCharacterBindingInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBCharacterBindingInfo
{ 
	FName                                              CharacterBindingSocket;                                     // 0x0000   (0x0008)  
	FVector                                            CharacterBindingRelativeLocation;                           // 0x0008   (0x000C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	class UBlendSpaceBase*                             CharacterBindingIdleBlendSpace;                             // 0x0018   (0x0008)  
	class UPhysicsAsset*                               CharacterBindingPhysicsAsset;                               // 0x0020   (0x0008)  
	bool                                               bBinding;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x0029   (0x000F)  MISSED
};

/// Struct /Script/SB.SBTransitAnimBlendTime
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBTransitAnimBlendTime
{ 
	TEnumAsByte<ESBCharacterTransitAnim>               TransitID;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              BlendInSec;                                                 // 0x0004   (0x0004)  
	float                                              BlendOutSec;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/SB.SBFixedTargetRotationAnimInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBFixedTargetRotationAnimInfo
{ 
	class UAnimSequenceBase*                           AnimSequence_L;                                             // 0x0000   (0x0008)  
	class UAnimSequenceBase*                           AnimSequence_R;                                             // 0x0008   (0x0008)  
	float                                              BelowDegree;                                                // 0x0010   (0x0004)  
	float                                              Duration;                                                   // 0x0014   (0x0004)  
};

/// Struct /Script/SB.SBFixedTargetRotationAxisInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBFixedTargetRotationAxisInfo
{ 
	TArray<FSBFixedTargetRotationAnimInfo>             RotationInfo_Yaw;                                           // 0x0000   (0x0010)  
	TArray<FSBFixedTargetRotationAnimInfo>             RotationInfo_Pitch;                                         // 0x0010   (0x0010)  
	TArray<FSBFixedTargetRotationAnimInfo>             RotationInfo_Roll;                                          // 0x0020   (0x0010)  
};

/// Struct /Script/SB.SBFixedTargetRotationMoveInfo
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSBFixedTargetRotationMoveInfo
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
	bool                                               bDoneRotation;                                              // 0x0001   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              StartDelayTime;                                             // 0x0004   (0x0004)  
	float                                              CurrentDuration;                                            // 0x0008   (0x0004)  
	float                                              CurrentAnimDuration;                                        // 0x000C   (0x0004)  
	float                                              DelayTime;                                                  // 0x0010   (0x0004)  
	float                                              RotatinoRate;                                               // 0x0014   (0x0004)  
	float                                              RotationRateScale;                                          // 0x0018   (0x0004)  
	TEnumAsByte<ESBFixedRotationAxisType>              AxisType;                                                   // 0x001C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	int32_t                                            ActiveSlotIndex;                                            // 0x0020   (0x0004)  
	FVector                                            PreCharacterForwardVector;                                  // 0x0024   (0x000C)  
	FVector                                            DesiredDirection;                                           // 0x0030   (0x000C)  
	bool                                               bBlockRequestPathMove;                                      // 0x003C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	float                                              AnimBlendInTime;                                            // 0x0040   (0x0004)  
	float                                              AnimBlendOutTime;                                           // 0x0044   (0x0004)  
};

/// Struct /Script/SB.SBShapeCollisionInfo
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align n/a MaxSize: 0x002C
struct FSBShapeCollisionInfo
{ 
	TWeakObjectPtr<class UShapeComponent*>             ShapeComponent;                                             // 0x0000   (0x0008)  
	TEnumAsByte<ECollisionEnabled>                     CollisionEnableType;                                        // 0x0008   (0x0001)  
	FCollisionResponseContainer                        CollisionResponseContainer;                                 // 0x0009   (0x0020)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0029   (0x0003)  MISSED
};

/// Struct /Script/SB.SBCharacterDeactiveMovingInfo
/// Size: 0x0003 (3 bytes) (0x000000 - 0x000003) align n/a MaxSize: 0x0003
struct FSBCharacterDeactiveMovingInfo
{ 
	bool                                               BlockWallAction;                                            // 0x0000   (0x0001)  
	bool                                               CliffAction;                                                // 0x0001   (0x0001)  
	bool                                               SlideSlip;                                                  // 0x0002   (0x0001)  
};

/// Struct /Script/SB.HitStopIK
/// Size: 0x0100 (256 bytes) (0x000000 - 0x000100) align n/a MaxSize: 0x0100
struct FHitStopIK
{ 
	bool                                               bIsHitStop;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FHitResult                                         HitResult;                                                  // 0x0004   (0x008C)  
	FTransform                                         RecordRootTransform0;                                       // 0x0090   (0x0030)  
	FTransform                                         RecordRootTransform1;                                       // 0x00C0   (0x0030)  
	float                                              RecordPositionRate;                                         // 0x00F0   (0x0004)  
	FName                                              CollisionGroupName;                                         // 0x00F4   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00FC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBBroadcastSpawnInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBBroadcastSpawnInfo
{ 
	uint32_t                                           ActorGuid;                                                  // 0x0000   (0x0004)  
	uint32_t                                           CharacterDataId;                                            // 0x0004   (0x0004)  
	uint32_t                                           EventSpawnId;                                               // 0x0008   (0x0004)  
	uint32_t                                           PlayerId;                                                   // 0x000C   (0x0004)  
	FVector                                            SpawnPosition;                                              // 0x0010   (0x000C)  
	FRotator                                           SpawnRotation;                                              // 0x001C   (0x000C)  
};

/// Class /Script/SB.SBCharacter
/// Size: 0x3880 (14464 bytes) (0x000558 - 0x003880) align n/a MaxSize: 0x3880
class ASBCharacter : public ACharacter
{ 
public:
	unsigned char                                      UnknownData176_8[0x4C];                                     // 0x0558   (0x004C)  MISSED
	float                                              BaseTurnRate;                                               // 0x05A4   (0x0004)  
	float                                              BaseLookUpRate;                                             // 0x05A8   (0x0004)  
	float                                              CurrentLockOnDistance;                                      // 0x05AC   (0x0004)  
	class UCameraComponent*                            FollowCamera;                                               // 0x05B0   (0x0008)  
	class USpringArmComponent*                         CameraBoom;                                                 // 0x05B8   (0x0008)  
	class USBCollisionGroupComponent*                  CollisionGroupComponent;                                    // 0x05C0   (0x0008)  
	class USplineComponent*                            CameraDollySpline;                                          // 0x05C8   (0x0008)  
	bool                                               bUseInteractionCamClamp;                                    // 0x05D0   (0x0001)  
	bool                                               bEyeTrackingToCam;                                          // 0x05D1   (0x0001)  
	unsigned char                                      UnknownData177_6[0x2];                                      // 0x05D2   (0x0002)  MISSED
	float                                              RemainEyeTrackingToCam;                                     // 0x05D4   (0x0004)  
	float                                              RemainNextCheckEyeTrackingToCam;                            // 0x05D8   (0x0004)  
	float                                              RemainNextCheckPlayIdleEventAnim;                           // 0x05DC   (0x0004)  
	bool                                               bDisableIdleEventAnim;                                      // 0x05E0   (0x0001)  
	unsigned char                                      UnknownData178_6[0x3];                                      // 0x05E1   (0x0003)  MISSED
	float                                              MouseWheelLockOnBlockDuration;                              // 0x05E4   (0x0004)  
	FRotator                                           EyeTrackingToCamRot_R;                                      // 0x05E8   (0x000C)  
	FRotator                                           EyeTrackingToCamRot_L;                                      // 0x05F4   (0x000C)  
	FRotator                                           EyeTrackingToCamRot_Neck;                                   // 0x0600   (0x000C)  
	float                                              EyeTrackingAlpha;                                           // 0x060C   (0x0004)  
	FSBAnimSyncSet                                     AnimSetSyncData;                                            // 0x0610   (0x0068)  
	bool                                               bInitAnimSetSyncData;                                       // 0x0678   (0x0001)  
	unsigned char                                      UnknownData179_6[0x7];                                      // 0x0679   (0x0007)  MISSED
	TArray<FName>                                      CuttingBones;                                               // 0x0680   (0x0010)  
	TArray<FColor>                                     CuttingVertiesColor;                                        // 0x0690   (0x0010)  
	int32_t                                            CuttingMeshLOD;                                             // 0x06A0   (0x0004)  
	unsigned char                                      UnknownData180_6[0x4];                                      // 0x06A4   (0x0004)  MISSED
	TArray<FSBCharacterCuttingMeshInfo>                CuttingMeshInfos;                                           // 0x06A8   (0x0010)  
	FName                                              CuttingMeshBreakBoneName;                                   // 0x06B8   (0x0008)  
	FVector                                            CuttingMeshBreakLocation;                                   // 0x06C0   (0x000C)  
	float                                              CuttingMeshImpulsePower;                                    // 0x06CC   (0x0004)  
	bool                                               bIsCuttedMesh;                                              // 0x06D0   (0x0001)  
	bool                                               bUseControlCollisionAtSwim;                                 // 0x06D1   (0x0001)  
	bool                                               bActiveFlyingSpline;                                        // 0x06D2   (0x0001)  
	bool                                               bActiveSwimSpline;                                          // 0x06D3   (0x0001)  
	bool                                               bActiveUnderWaterSwimSpline;                                // 0x06D4   (0x0001)  
	bool                                               bActiveSlopeMovingSpline;                                   // 0x06D5   (0x0001)  
	bool                                               bActiveSlopeMovingSpline2;                                  // 0x06D6   (0x0001)  
	bool                                               bActiveSideRodSpline;                                       // 0x06D7   (0x0001)  
	bool                                               bActiveRodSpline;                                           // 0x06D8   (0x0001)  
	bool                                               bActiveSideToSideSpline;                                    // 0x06D9   (0x0001)  
	bool                                               bActiveBalanceBeamSpline;                                   // 0x06DA   (0x0001)  
	bool                                               bActiveSlidingSlipSpline;                                   // 0x06DB   (0x0001)  
	bool                                               bActiveHoldBalanceBeamSpline;                               // 0x06DC   (0x0001)  
	bool                                               bActiveWallRunSpline;                                       // 0x06DD   (0x0001)  
	unsigned char                                      UnknownData181_6[0x2];                                      // 0x06DE   (0x0002)  MISSED
	FSBCharacterSplineExtraData                        FlyingSplineExtraData;                                      // 0x06E0   (0x0010)  
	FSBCharacterSplineExtraData                        SwimSplineExtraData;                                        // 0x06F0   (0x0010)  
	FSBCharacterSplineExtraData                        UnderWaterSwimSplineExtraData;                              // 0x0700   (0x0010)  
	FSBCharacterSplineExtraData                        SlopeMovingSplineExtraData;                                 // 0x0710   (0x0010)  
	FSBCharacterSplineExtraData                        SideRodSplineExtraData;                                     // 0x0720   (0x0010)  
	FSBCharacterSplineExtraData                        RodSplineExtraData;                                         // 0x0730   (0x0010)  
	FSBCharacterSplineExtraData                        SideToSideSplineExtraData;                                  // 0x0740   (0x0010)  
	FSBCharacterSplineExtraData                        BalanceBeamSplineExtraData;                                 // 0x0750   (0x0010)  
	FSBCharacterSplineExtraData                        SlidingSlipSplineExtraData;                                 // 0x0760   (0x0010)  
	FSBCharacterSplineExtraData                        HoldBalanceBeamSplineExtraData;                             // 0x0770   (0x0010)  
	FSBCharacterSplineExtraData                        WallRunSplineExtraData;                                     // 0x0780   (0x0010)  
	float                                              OverrideLockOnMaxDistance;                                  // 0x0790   (0x0004)  
	float                                              OverrideLockOnReleaseDistance;                              // 0x0794   (0x0004)  
	float                                              OverrideLockOnArmLength;                                    // 0x0798   (0x0004)  
	float                                              OverrideLockOnPitchAdd;                                     // 0x079C   (0x0004)  
	FName                                              LockOnTargetBoneSocketName;                                 // 0x07A0   (0x0008)  
	FName                                              LockOnUIDisplayBoneSocketName;                              // 0x07A8   (0x0008)  
	bool                                               bOverrideLockOnPitchMin;                                    // 0x07B0   (0x0001)  
	unsigned char                                      UnknownData182_6[0x3];                                      // 0x07B1   (0x0003)  MISSED
	float                                              OverrideLockOnPitchMinValue;                                // 0x07B4   (0x0004)  
	bool                                               bOverrideLockOnPitchMax;                                    // 0x07B8   (0x0001)  
	unsigned char                                      UnknownData183_6[0x3];                                      // 0x07B9   (0x0003)  MISSED
	float                                              OverrideLockOnPitchMaxValue;                                // 0x07BC   (0x0004)  
	bool                                               bOverrideLockOnCamBoomHeight;                               // 0x07C0   (0x0001)  
	unsigned char                                      UnknownData184_6[0x3];                                      // 0x07C1   (0x0003)  MISSED
	float                                              OverrideLockOnCamBoomHeight;                                // 0x07C4   (0x0004)  
	bool                                               bOverrideLockOnCamBoomLeftRight;                            // 0x07C8   (0x0001)  
	unsigned char                                      UnknownData185_6[0x3];                                      // 0x07C9   (0x0003)  MISSED
	float                                              OverrideLockOnCamBoomLeftRight;                             // 0x07CC   (0x0004)  
	FName                                              GaugeDisplayBoneSocketName;                                 // 0x07D0   (0x0008)  
	FName                                              CustomLockOnTargetBoneSocketName;                           // 0x07D8   (0x0008)  
	float                                              LockOnPitchMaxAtCustomTargetBoneSocket;                     // 0x07E0   (0x0004)  
	bool                                               bShortPonyTail;                                             // 0x07E4   (0x0001)  
	bool                                               bApplyShortPonyTailPhysics;                                 // 0x07E5   (0x0001)  
	unsigned char                                      UnknownData186_6[0x2];                                      // 0x07E6   (0x0002)  MISSED
	FVector                                            LockOnJumpToMoveDir;                                        // 0x07E8   (0x000C)  
	float                                              RemainCustomLockOnTargetDuration;                           // 0x07F4   (0x0004)  
	float                                              CustomLockOnTargetDuration;                                 // 0x07F8   (0x0004)  
	float                                              CustomLockOnTargetBlendInDuration;                          // 0x07FC   (0x0004)  
	float                                              CustomLockOnTargetBlendOutDuration;                         // 0x0800   (0x0004)  
	FName                                              BlendSrcCustomLockOnTargetBoneName;                         // 0x0804   (0x0008)  
	float                                              RemainRunningLockOnRotation;                                // 0x080C   (0x0004)  
	FName                                              LockOnPitchOffsetBaseBoneSocketName;                        // 0x0810   (0x0008)  
	class UCurveFloat*                                 LockOnPointCurveByDistance;                                 // 0x0818   (0x0008)  
	class UCurveFloat*                                 LockOnPointCurveByDir;                                      // 0x0820   (0x0008)  
	class UCurveFloat*                                 LockOnPointWeightCurveByDir;                                // 0x0828   (0x0008)  
	class UCurveFloat*                                 AimLockOnPointCurveByDistance;                              // 0x0830   (0x0008)  
	class UCurveFloat*                                 AimLockOnPointCurveByDir;                                   // 0x0838   (0x0008)  
	class UCurveFloat*                                 AimLockOnPointWeightCurveByDir;                             // 0x0840   (0x0008)  
	class UCapsuleComponent*                           OverlapBodyCollision;                                       // 0x0848   (0x0008)  
	class UCapsuleComponent*                           PhysicsCapsuleCollision;                                    // 0x0850   (0x0008)  
	bool                                               bLockOnRunRotationEnable;                                   // 0x0858   (0x0001)  
	unsigned char                                      UnknownData187_6[0x3];                                      // 0x0859   (0x0003)  MISSED
	float                                              LockOnRunRotationDegree;                                    // 0x085C   (0x0004)  
	float                                              LockOnRunRotationDuration;                                  // 0x0860   (0x0004)  
	float                                              LockOnRunRotToCharDuration;                                 // 0x0864   (0x0004)  
	bool                                               bLockOnRunRotationLowerAnim;                                // 0x0868   (0x0001)  
	unsigned char                                      UnknownData188_6[0x3];                                      // 0x0869   (0x0003)  MISSED
	FVector                                            EventDirection;                                             // 0x086C   (0x000C)  
	bool                                               bFreeCamMode;                                               // 0x0878   (0x0001)  
	bool                                               bIgnoreSetMeshInfoCorrectionCapsuleZ;                       // 0x0879   (0x0001)  
	bool                                               bUseSetMeshInfoCapsuleHeight;                               // 0x087A   (0x0001)  
	unsigned char                                      UnknownData189_6[0x5];                                      // 0x087B   (0x0005)  MISSED
	class USplineComponent*                            CameraDollySplineFlying;                                    // 0x0880   (0x0008)  
	class USplineComponent*                            CameraDollySplineSwim;                                      // 0x0888   (0x0008)  
	class USplineComponent*                            CameraDollySplineUnderWaterSwim;                            // 0x0890   (0x0008)  
	class USplineComponent*                            CameraDollySplineSlopeMoving;                               // 0x0898   (0x0008)  
	class USplineComponent*                            CameraDollySplineSlopeMoving2;                              // 0x08A0   (0x0008)  
	class USplineComponent*                            CameraDollySplineSideRod;                                   // 0x08A8   (0x0008)  
	class USplineComponent*                            CameraDollySplineRod;                                       // 0x08B0   (0x0008)  
	class USplineComponent*                            CameraDollySplineSideToSide;                                // 0x08B8   (0x0008)  
	class USplineComponent*                            CameraDollySplineBalanceBeam;                               // 0x08C0   (0x0008)  
	class USplineComponent*                            CameraDollySplineSlidingSlip;                               // 0x08C8   (0x0008)  
	class USplineComponent*                            CameraDollySplineHoldBalanceBeam;                           // 0x08D0   (0x0008)  
	class USplineComponent*                            CameraDollySplineWallRun;                                   // 0x08D8   (0x0008)  
	bool                                               bSetExtraSpline;                                            // 0x08E0   (0x0001)  
	bool                                               bSequencerPlacement;                                        // 0x08E1   (0x0001)  
	bool                                               UseConstructMeshSetting;                                    // 0x08E2   (0x0001)  
	unsigned char                                      UnknownData190_6[0x5];                                      // 0x08E3   (0x0005)  MISSED
	class USBBehaviorTreeComponent*                    BrainComponent;                                             // 0x08E8   (0x0008)  
	bool                                               bPhotoModeCloseRange;                                       // 0x08F0   (0x0001)  
	unsigned char                                      UnknownData191_6[0x7];                                      // 0x08F1   (0x0007)  MISSED
	TArray<FSBSelfiePoseInfo>                          SelfiePoseArray;                                            // 0x08F8   (0x0010)  
	float                                              SelfieAnimBSValue;                                          // 0x0908   (0x0004)  
	unsigned char                                      UnknownData192_6[0x4];                                      // 0x090C   (0x0004)  MISSED
	TArray<FSoftObjectPath>                            NPCSelfieIdlePoseArray;                                     // 0x0910   (0x0010)  
	float                                              NPCSelfieIdlePoseCheckTime;                                 // 0x0920   (0x0004)  
	unsigned char                                      UnknownData193_6[0x24];                                     // 0x0924   (0x0024)  MISSED
	TMap<FName, float>                                 PerPoseCloseRangeUpVectorOffset;                            // 0x0948   (0x0050)  
	TMap<FName, float>                                 PerPoseCloseRangeYawRangeOffset;                            // 0x0998   (0x0050)  
	unsigned char                                      UnknownData194_6[0x80];                                     // 0x09E8   (0x0080)  MISSED
	float                                              RemainMoveInputBlockDuraion;                                // 0x0A68   (0x0004)  
	FVector                                            CurrentSwimForce;                                           // 0x0A6C   (0x000C)  
	float                                              CurrentMovingForceDuration;                                 // 0x0A78   (0x0004)  
	int32_t                                            MoveInputBlockCount;                                        // 0x0A7C   (0x0004)  
	float                                              LastMoveRightInput;                                         // 0x0A80   (0x0004)  
	float                                              LastMoveSmoothRightInput;                                   // 0x0A84   (0x0004)  
	float                                              LastNonZeroMoveRightInput;                                  // 0x0A88   (0x0004)  
	float                                              LastMoveFowardInput;                                        // 0x0A8C   (0x0004)  
	float                                              BlockWallMoveFowardInput;                                   // 0x0A90   (0x0004)  
	float                                              BlockWallMoveRightInput;                                    // 0x0A94   (0x0004)  
	float                                              PreLastMoveFowardInput;                                     // 0x0A98   (0x0004)  
	int32_t                                            DisableLockOnCharacterRotaion;                              // 0x0A9C   (0x0004)  
	int32_t                                            DisableLookAtIK;                                            // 0x0AA0   (0x0004)  
	int32_t                                            DisableHoldBalanceBeamAction;                               // 0x0AA4   (0x0004)  
	bool                                               bSoftDisableLockOnCharacterRotation;                        // 0x0AA8   (0x0001)  
	unsigned char                                      UnknownData195_6[0x7];                                      // 0x0AA9   (0x0007)  MISSED
	uint64_t                                           LastFrameCountFalseSoftDisableLockOnCharacterRotation;      // 0x0AB0   (0x0008)  
	float                                              RemainClimbDuration;                                        // 0x0AB8   (0x0004)  
	bool                                               bRequestFallStartTransit;                                   // 0x0ABC   (0x0001)  
	unsigned char                                      UnknownData196_6[0x3];                                      // 0x0ABD   (0x0003)  MISSED
	int32_t                                            RequestCancelWallRunFlag;                                   // 0x0AC0   (0x0004)  
	float                                              PhysWalkingMovingTime;                                      // 0x0AC4   (0x0004)  
	bool                                               bDisableMovingTransit;                                      // 0x0AC8   (0x0001)  
	bool                                               bDisableLandingTransit;                                     // 0x0AC9   (0x0001)  
	bool                                               bDisableLockonTarget;                                       // 0x0ACA   (0x0001)  
	bool                                               bDisableLockOnControl;                                      // 0x0ACB   (0x0001)  
	float                                              WalkInputDuration;                                          // 0x0ACC   (0x0004)  
	float                                              RunInputDuration;                                           // 0x0AD0   (0x0004)  
	float                                              PhysWalkInputDuration;                                      // 0x0AD4   (0x0004)  
	TArray<FName>                                      OverrideEffectAlias;                                        // 0x0AD8   (0x0010)  
	TArray<uint32_t>                                   OverrideEffectID;                                           // 0x0AE8   (0x0010)  
	float                                              GamePadLTriggerAxisValue;                                   // 0x0AF8   (0x0004)  
	float                                              GamePadRTriggerAxisValue;                                   // 0x0AFC   (0x0004)  
	TArray<TWeakObjectPtr<ASBFootStepPhySurfaceVolume*>> OverrideFootStepPhySurfaceVolumeArray;                    // 0x0B00   (0x0010)  
	TArray<FSBOverrideFootStepPhySurfaceInfo>          OverrideFootStepPhySurfaceInfoArray;                        // 0x0B10   (0x0010)  
	unsigned char                                      UnknownData197_6[0x4];                                      // 0x0B20   (0x0004)  MISSED
	int32_t                                            BlockingModeCount;                                          // 0x0B24   (0x0004)  
	float                                              RemainJumpToSprintHoldDuration;                             // 0x0B28   (0x0004)  
	float                                              RemainHoldLastMoveInputDuration;                            // 0x0B2C   (0x0004)  
	float                                              RemainBlockJumpDuration;                                    // 0x0B30   (0x0004)  
	bool                                               bEnableJumpToSprintHoldJump;                                // 0x0B34   (0x0001)  
	unsigned char                                      UnknownData198_6[0x3];                                      // 0x0B35   (0x0003)  MISSED
	float                                              RemainSlopeDashDuration;                                    // 0x0B38   (0x0004)  
	bool                                               bRunningSlopeAutoMove;                                      // 0x0B3C   (0x0001)  
	unsigned char                                      UnknownData199_6[0x3];                                      // 0x0B3D   (0x0003)  MISSED
	float                                              RemainBlockSlopeDashDuration;                               // 0x0B40   (0x0004)  
	float                                              RemainBlockStartEventMove;                                  // 0x0B44   (0x0004)  
	float                                              SlopeDashInputValue;                                        // 0x0B48   (0x0004)  
	int32_t                                            BlockPlayTransitAnimCount;                                  // 0x0B4C   (0x0004)  
	float                                              DefaultCameraArmLength;                                     // 0x0B50   (0x0004)  
	float                                              RotationYawRate;                                            // 0x0B54   (0x0004)  
	float                                              RotationYawRateScale;                                       // 0x0B58   (0x0004)  
	unsigned char                                      UnknownData200_6[0x4];                                      // 0x0B5C   (0x0004)  MISSED
	class UCurveFloat*                                 RotationYawRateCurveByWalkSpeed;                            // 0x0B60   (0x0008)  
	class UCurveFloat*                                 RotationYawScaleCurveByMoveInputDegree;                     // 0x0B68   (0x0008)  
	class UCurveFloat*                                 CameraFovCurveByDistance;                                   // 0x0B70   (0x0008)  
	bool                                               UsePathWayFloorCheck;                                       // 0x0B78   (0x0001)  
	unsigned char                                      UnknownData201_6[0x3];                                      // 0x0B79   (0x0003)  MISSED
	float                                              MoveSmoothRightInputLerpValue;                              // 0x0B7C   (0x0004)  
	float                                              FallingRotationYawRate;                                     // 0x0B80   (0x0004)  
	float                                              RepeatBlockTurnTime;                                        // 0x0B84   (0x0004)  
	float                                              RunTurnDuration;                                            // 0x0B88   (0x0004)  
	float                                              WalkTurnDuration;                                           // 0x0B8C   (0x0004)  
	float                                              IdleTurnDuration;                                           // 0x0B90   (0x0004)  
	float                                              SprintTurnDuration;                                         // 0x0B94   (0x0004)  
	float                                              RemainTurnDuration;                                         // 0x0B98   (0x0004)  
	float                                              RemainHoldWalkingDuration;                                  // 0x0B9C   (0x0004)  
	float                                              RemainHoldLockOnAtChatDuration;                             // 0x0BA0   (0x0004)  
	float                                              RemainBlockStartSprint;                                     // 0x0BA4   (0x0004)  
	float                                              RemainBlockStartHoldSwim;                                   // 0x0BA8   (0x0004)  
	float                                              RemainActiveRunStartAfterEvade;                             // 0x0BAC   (0x0004)  
	float                                              RemainUpdateProceduralDelay;                                // 0x0BB0   (0x0004)  
	float                                              RemainTurnDeltaRotDuration;                                 // 0x0BB4   (0x0004)  
	float                                              TurnDeltaRotPower;                                          // 0x0BB8   (0x0004)  
	float                                              WaitTimeSwimToGroundValue;                                  // 0x0BBC   (0x0004)  
	bool                                               bEnableChangeInteraction;                                   // 0x0BC0   (0x0001)  
	bool                                               bRequestEnableChangeInteraction;                            // 0x0BC1   (0x0001)  
	bool                                               bEnableMeshCollision;                                       // 0x0BC2   (0x0001)  
	bool                                               bDisableMeshCollisionByDistanceToPlayer;                    // 0x0BC3   (0x0001)  
	bool                                               bEnablePhysicsCapsuleCollision;                             // 0x0BC4   (0x0001)  
	unsigned char                                      UnknownData202_6[0x3];                                      // 0x0BC5   (0x0003)  MISSED
	float                                              RemainInteractionActionDuration;                            // 0x0BC8   (0x0004)  
	float                                              CurrentInteractionActionDuration;                           // 0x0BCC   (0x0004)  
	bool                                               bInCliffArea;                                               // 0x0BD0   (0x0001)  
	bool                                               bCliffActionInArea;                                         // 0x0BD1   (0x0001)  
	unsigned char                                      UnknownData203_6[0x2];                                      // 0x0BD2   (0x0002)  MISSED
	float                                              CliffActionCancelBlockDurationValue;                        // 0x0BD4   (0x0004)  
	bool                                               bInWallArea;                                                // 0x0BD8   (0x0001)  
	bool                                               bBlockWallActionInArea;                                     // 0x0BD9   (0x0001)  
	bool                                               bInExclusiveWaterVolume;                                    // 0x0BDA   (0x0001)  
	unsigned char                                      UnknownData204_6[0x5];                                      // 0x0BDB   (0x0005)  MISSED
	TArray<FSBCharacterInteractionMoveInfo>            InteractionMoveInfo;                                        // 0x0BE0   (0x0010)  
	bool                                               bInteractionMoveToTargetLoc;                                // 0x0BF0   (0x0001)  
	unsigned char                                      UnknownData205_6[0x3];                                      // 0x0BF1   (0x0003)  MISSED
	float                                              RemainBlockChangeInteraction;                               // 0x0BF4   (0x0004)  
	float                                              RemainBlockStartSideRod;                                    // 0x0BF8   (0x0004)  
	float                                              RemainBlockStartSlopeMove;                                  // 0x0BFC   (0x0004)  
	float                                              RemainBlockSlopeJumpEnd;                                    // 0x0C00   (0x0004)  
	bool                                               bForceBlockStartSlopeMove;                                  // 0x0C04   (0x0001)  
	bool                                               bCliffAction;                                               // 0x0C05   (0x0001)  
	unsigned char                                      UnknownData206_6[0x2];                                      // 0x0C06   (0x0002)  MISSED
	float                                              CurrentCliffActionTime;                                     // 0x0C08   (0x0004)  
	bool                                               bBlockWallFrontAction;                                      // 0x0C0C   (0x0001)  
	unsigned char                                      UnknownData207_6[0x3];                                      // 0x0C0D   (0x0003)  MISSED
	float                                              RemainBlockWallNextAction;                                  // 0x0C10   (0x0004)  
	bool                                               bHuddleUpAction;                                            // 0x0C14   (0x0001)  
	bool                                               bHuddleUpActionOnGround;                                    // 0x0C15   (0x0001)  
	bool                                               bCancelHuddleUpByJump;                                      // 0x0C16   (0x0001)  
	unsigned char                                      UnknownData208_6[0x1];                                      // 0x0C17   (0x0001)  MISSED
	FVector                                            HuddleUpActionTargetLocation;                               // 0x0C18   (0x000C)  
	FVector                                            HuddleUpActionMidTargetLocation;                            // 0x0C24   (0x000C)  
	bool                                               HuddleUpActionToLow;                                        // 0x0C30   (0x0001)  
	unsigned char                                      UnknownData209_6[0x3];                                      // 0x0C31   (0x0003)  MISSED
	int32_t                                            HuddleUpActionIndex;                                        // 0x0C34   (0x0004)  
	bool                                               bEnableHuddleUpByJump;                                      // 0x0C38   (0x0001)  
	unsigned char                                      UnknownData210_6[0x3];                                      // 0x0C39   (0x0003)  MISSED
	float                                              HuddleUpActionStartSpeed;                                   // 0x0C3C   (0x0004)  
	float                                              HuddleUpGroundCancelBlockDuration;                          // 0x0C40   (0x0004)  
	float                                              CurrentRopeSwingJumpInputBlockDuration;                     // 0x0C44   (0x0004)  
	FVector                                            RopeSwingJumpVelocity;                                      // 0x0C48   (0x000C)  
	bool                                               bIdleTurning;                                               // 0x0C54   (0x0001)  
	unsigned char                                      UnknownData211_6[0x3];                                      // 0x0C55   (0x0003)  MISSED
	float                                              SpeedForAnimGraph;                                          // 0x0C58   (0x0004)  
	float                                              CurrentSpeedForAnimGraph;                                   // 0x0C5C   (0x0004)  
	bool                                               bUseOverrideSpeedForAnimGraph;                              // 0x0C60   (0x0001)  
	unsigned char                                      UnknownData212_6[0x3];                                      // 0x0C61   (0x0003)  MISSED
	float                                              OverrideSpeedForAnimGraph;                                  // 0x0C64   (0x0004)  
	float                                              KeepZeroSpeedForAnimGraphTime;                              // 0x0C68   (0x0004)  
	float                                              LastGetCurrentSpeedForAnimGraph;                            // 0x0C6C   (0x0004)  
	float                                              ReturnLastSpeedForAnimGraphTime;                            // 0x0C70   (0x0004)  
	float                                              AnimControllerSpringWeight;                                 // 0x0C74   (0x0004)  
	float                                              AnimControllerFootIKFactor;                                 // 0x0C78   (0x0004)  
	float                                              AnimControllerFullBodyIKFactor;                             // 0x0C7C   (0x0004)  
	bool                                               bHideWhenSequenceCameraNear;                                // 0x0C80   (0x0001)  
	bool                                               bSlidePhysWalk;                                             // 0x0C81   (0x0001)  
	unsigned char                                      UnknownData213_6[0x2];                                      // 0x0C82   (0x0002)  MISSED
	float                                              SlideSideValue;                                             // 0x0C84   (0x0004)  
	float                                              RemainBeginSlideSideDuration;                               // 0x0C88   (0x0004)  
	float                                              RemainCustomSlideSideValueBlendTime;                        // 0x0C8C   (0x0004)  
	float                                              CurrentWallSlideSideValue;                                  // 0x0C90   (0x0004)  
	int32_t                                            AttachedToLevelSequenceRefCount;                            // 0x0C94   (0x0004)  
	int32_t                                            LookAtTargetLevelSequenceRefCount;                          // 0x0C98   (0x0004)  
	bool                                               bSequencerAnimMode;                                         // 0x0C9C   (0x0001)  
	unsigned char                                      UnknownData214_6[0x3];                                      // 0x0C9D   (0x0003)  MISSED
	int32_t                                            PlayableWhenLevelSequenceRefCount;                          // 0x0CA0   (0x0004)  
	bool                                               bStartMovementNoneWhenLevelSequence;                        // 0x0CA4   (0x0001)  
	unsigned char                                      UnknownData215_6[0x3];                                      // 0x0CA5   (0x0003)  MISSED
	int32_t                                            DisableRootClothCollision;                                  // 0x0CA8   (0x0004)  
	bool                                               bCustomOverrideClothPhysicsAsset;                           // 0x0CAC   (0x0001)  
	unsigned char                                      UnknownData216_6[0x3];                                      // 0x0CAD   (0x0003)  MISSED
	FString                                            CustomOverrideClothPhysicsMeshPath;                         // 0x0CB0   (0x0010)  
	float                                              AverageMoveInputSize;                                       // 0x0CC0   (0x0004)  
	FVector                                            AverageMoveInput;                                           // 0x0CC4   (0x000C)  
	int32_t                                            AverageMoveInputCount;                                      // 0x0CD0   (0x0004)  
	bool                                               bRunningSkill;                                              // 0x0CD4   (0x0001)  
	bool                                               bRunningSkillForceCancelWhenAttachedToLevelSequence;        // 0x0CD5   (0x0001)  
	bool                                               bAttackParried;                                             // 0x0CD6   (0x0001)  
	unsigned char                                      UnknownData217_6[0x1];                                      // 0x0CD7   (0x0001)  MISSED
	TMap<FMaterialParamID, FSBCharacterMaterialParamInfoList> ActiveMaterialParamsMap;                             // 0x0CD8   (0x0050)  
	TMap<FMaterialChangeID, FSBCharacterMaterialChangeInfoList> ActiveMaterialChangeMap;                           // 0x0D28   (0x0050)  
	TEnumAsByte<ESBCharacterFootPlacement>             FootPlacementValue;                                         // 0x0D78   (0x0001)  
	TEnumAsByte<ESBCharacterFootPlacement>             MoveToIdleFootPlacementValue;                               // 0x0D79   (0x0001)  
	unsigned char                                      UnknownData218_6[0x2];                                      // 0x0D7A   (0x0002)  MISSED
	FVector                                            LastVelocityOnMove;                                         // 0x0D7C   (0x000C)  
	TEnumAsByte<ESBCharacterWireModeState>             WireModeState;                                              // 0x0D88   (0x0001)  
	TEnumAsByte<ESBCharacterFlyingActionState>         FlyingActionState;                                          // 0x0D89   (0x0001)  
	unsigned char                                      UnknownData219_6[0x2];                                      // 0x0D8A   (0x0002)  MISSED
	FVector                                            FlyingActionLastAccel;                                      // 0x0D8C   (0x000C)  
	FVector                                            WireFlyTargetPosition;                                      // 0x0D98   (0x000C)  
	FVector                                            WireSetPosition;                                            // 0x0DA4   (0x000C)  
	float                                              WireFlyingSpeed;                                            // 0x0DB0   (0x0004)  
	float                                              WireFlyingAccelSpeed;                                       // 0x0DB4   (0x0004)  
	float                                              WireFlyingMinSpeed;                                         // 0x0DB8   (0x0004)  
	float                                              WireFlyingMaxSpeed;                                         // 0x0DBC   (0x0004)  
	float                                              WireMovingSpeed;                                            // 0x0DC0   (0x0004)  
	float                                              WireMovingAccelSpeed;                                       // 0x0DC4   (0x0004)  
	float                                              WireMovingMinSpeed;                                         // 0x0DC8   (0x0004)  
	float                                              WireMovingMaxSpeed;                                         // 0x0DCC   (0x0004)  
	float                                              WireMoveReachDistance;                                      // 0x0DD0   (0x0004)  
	float                                              WireRechargingSec;                                          // 0x0DD4   (0x0004)  
	float                                              CurrentWireRechargingSec;                                   // 0x0DD8   (0x0004)  
	float                                              CurrentWireFlyingSpeed;                                     // 0x0DDC   (0x0004)  
	float                                              CurrentWireMovingSpeed;                                     // 0x0DE0   (0x0004)  
	FVector                                            CurrentWireMovingVelocity;                                  // 0x0DE4   (0x000C)  
	FVector                                            CurrentWireFlyingPosition;                                  // 0x0DF0   (0x000C)  
	FVector                                            CurrentUpVector;                                            // 0x0DFC   (0x000C)  
	float                                              CurrentRotationPower;                                       // 0x0E08   (0x0004)  
	float                                              RotationPowerSensetive;                                     // 0x0E0C   (0x0004)  
	class ASBCameraVolume*                             CurrentCameraVolume;                                        // 0x0E10   (0x0008)  
	FRotator                                           CameraVolumeActorOriginRot;                                 // 0x0E18   (0x000C)  
	FVector                                            CameraVolumeActorOriginLoc;                                 // 0x0E24   (0x000C)  
	FVector                                            CameraVolumeBasedScreenPosPivot;                            // 0x0E30   (0x000C)  
	FVector2D                                          CameraVolumeBasedLastScreenPos;                             // 0x0E3C   (0x0008)  
	float                                              CameraVolumeActorOriginFov;                                 // 0x0E44   (0x0004)  
	FSBCameraEventBaseScreenPosition                   CameraVolumeBasedScreenPosEventData;                        // 0x0E48   (0x0040)  
	TArray<FSBCameraEventBaseScreenPosData>            CameraVolumeBasedScreenPosDataQueue;                        // 0x0E88   (0x0010)  
	class ASBCharMovingStanceVolume*                   CurrentMovingStanceVolume;                                  // 0x0E98   (0x0008)  
	FSBCharMovingStanceData                            CustomMovingStanceData;                                     // 0x0EA0   (0x0098)  
	bool                                               bSetCustomMovingStanceData;                                 // 0x0F38   (0x0001)  
	bool                                               CurrentCameraVolumeLookAtMode;                              // 0x0F39   (0x0001)  
	unsigned char                                      UnknownData220_6[0x2];                                      // 0x0F3A   (0x0002)  MISSED
	float                                              CustomLookAtMaxSpeedScale;                                  // 0x0F3C   (0x0004)  
	bool                                               CustomLookAtForceWalkMode;                                  // 0x0F40   (0x0001)  
	bool                                               CustomLookAtDisableSprint;                                  // 0x0F41   (0x0001)  
	bool                                               CustomLookAtDisableJump;                                    // 0x0F42   (0x0001)  
	bool                                               CustomLookAtBlockSkill;                                     // 0x0F43   (0x0001)  
	bool                                               CustomLookAtActive;                                         // 0x0F44   (0x0001)  
	unsigned char                                      UnknownData221_6[0x3];                                      // 0x0F45   (0x0003)  MISSED
	float                                              CustomCameraLockOnSecondBlendScale;                         // 0x0F48   (0x0004)  
	float                                              CustomCameraLockOnSecondBlendDuration;                      // 0x0F4C   (0x0004)  
	float                                              CustomCameraLockOnSecondBlendOutDuration;                   // 0x0F50   (0x0004)  
	unsigned char                                      UnknownData222_6[0x4];                                      // 0x0F54   (0x0004)  MISSED
	TArray<FAddControllerValue>                        AddYawControllerValueHistory;                               // 0x0F58   (0x0010)  
	TArray<FAddControllerValue>                        AddPitchControllerValueHistory;                             // 0x0F68   (0x0010)  
	float                                              ControllerValueHistoryDuration;                             // 0x0F78   (0x0004)  
	int32_t                                            MaxControllerValueHistoryNum;                               // 0x0F7C   (0x0004)  
	int32_t                                            CurrentAddYawControllerValueNum;                            // 0x0F80   (0x0004)  
	int32_t                                            CurrentAddPitchControllerValueNum;                          // 0x0F84   (0x0004)  
	float                                              CustomLookAtControlCameraScale;                             // 0x0F88   (0x0004)  
	bool                                               bCustomLookAtControlCam;                                    // 0x0F8C   (0x0001)  
	unsigned char                                      UnknownData223_6[0x3];                                      // 0x0F8D   (0x0003)  MISSED
	float                                              CustomLookAtControlCamDuration;                             // 0x0F90   (0x0004)  
	float                                              LookAtCustomTargetBlendScale;                               // 0x0F94   (0x0004)  
	float                                              LookAtCustomTargetDetachDuration;                           // 0x0F98   (0x0004)  
	float                                              LookAtCustomTargetBlendDuration;                            // 0x0F9C   (0x0004)  
	float                                              RemainLookAtCustomTargetDuration;                           // 0x0FA0   (0x0004)  
	unsigned char                                      UnknownData224_6[0x4];                                      // 0x0FA4   (0x0004)  MISSED
	class AActor*                                      LookAtCustomTargetActor;                                    // 0x0FA8   (0x0008)  
	float                                              LookAtCustomTargetDistance;                                 // 0x0FB0   (0x0004)  
	FVector                                            LookAtCustomTargetOffset;                                   // 0x0FB4   (0x000C)  
	FVector                                            LookAtCustomTargetBackupCameraInfo;                         // 0x0FC0   (0x000C)  
	FVector                                            LookAtCustomTargetStartDirection;                           // 0x0FCC   (0x000C)  
	FVector2D                                          LookAtCustomTargetStartInputValue;                          // 0x0FD8   (0x0008)  
	float                                              LookAtCustomTargetStartDirectionCancelSize;                 // 0x0FE0   (0x0004)  
	bool                                               bUseCancelByUserCamControl;                                 // 0x0FE4   (0x0001)  
	unsigned char                                      UnknownData225_6[0x3];                                      // 0x0FE5   (0x0003)  MISSED
	float                                              CancelByUserCamControlTime;                                 // 0x0FE8   (0x0004)  
	unsigned char                                      UnknownData226_6[0x4];                                      // 0x0FEC   (0x0004)  MISSED
	TSet<ASBAmbientSoundVolume*>                       AmbientSoundVolumeSet;                                      // 0x0FF0   (0x0050)  
	FSBCharacterEventMoveInterface                     CurrentEventMovVolume;                                      // 0x1040   (0x0010)  
	FSBCharacterEventMoveInterface                     BlockEnterEventMovVolume;                                   // 0x1050   (0x0010)  
	FSBCharacterEventMoveInterface                     SideRodJumpEnableEventMovVolume;                            // 0x1060   (0x0010)  
	bool                                               bSideRodJumpEnableEventMovVolumeToBack;                     // 0x1070   (0x0001)  
	unsigned char                                      UnknownData227_6[0x3];                                      // 0x1071   (0x0003)  MISSED
	FVector                                            SideRodJumpEnableEventMovVolumeClosetLoc;                   // 0x1074   (0x000C)  
	float                                              CurrentSideRodSearchDegreeValue;                            // 0x1080   (0x0004)  
	bool                                               bCurrentStretchSideRodSearch;                               // 0x1084   (0x0001)  
	bool                                               bEnableSideRodHuddleUp;                                     // 0x1085   (0x0001)  
	unsigned char                                      UnknownData228_6[0x2];                                      // 0x1086   (0x0002)  MISSED
	TWeakObjectPtr<class AActor*>                      DisableWallRunActor;                                        // 0x1088   (0x0008)  
	float                                              RemainDisableWallRunActorDuration;                          // 0x1090   (0x0004)  
	float                                              RemainPendingJumpDuration;                                  // 0x1094   (0x0004)  
	bool                                               bPendingRunJump;                                            // 0x1098   (0x0001)  
	unsigned char                                      UnknownData229_6[0x7];                                      // 0x1099   (0x0007)  MISSED
	class ASBCharacterSlopeMovVolume*                  CurrentSlopeMovVolume;                                      // 0x10A0   (0x0008)  
	class ASBCharacterOverrideSlopeVolume*             CurrentSlopeOverrideDataVolume;                             // 0x10A8   (0x0008)  
	float                                              BackupCollisionRadiusForSlopeMove;                          // 0x10B0   (0x0004)  
	float                                              BackupCollisionHalfHeightForSlopeMove;                      // 0x10B4   (0x0004)  
	float                                              BackupRelativeZForSlopeMove;                                // 0x10B8   (0x0004)  
	unsigned char                                      UnknownData230_6[0x4];                                      // 0x10BC   (0x0004)  MISSED
	class ASBSoundEventVolume*                         CurrentSoundEventVolume;                                    // 0x10C0   (0x0008)  
	class ASBZoneVolume*                               CurrentZoneVolume;                                          // 0x10C8   (0x0008)  
	class ASBRegionVolume*                             CurrentRegionVolume;                                        // 0x10D0   (0x0008)  
	FVector                                            TargetUpVector;                                             // 0x10D8   (0x000C)  
	bool                                               bSprint;                                                    // 0x10E4   (0x0001)  
	bool                                               bToggledSprint;                                             // 0x10E5   (0x0001)  
	bool                                               bEnableExtraSprint;                                         // 0x10E6   (0x0001)  
	unsigned char                                      UnknownData231_6[0x1];                                      // 0x10E7   (0x0001)  MISSED
	float                                              DisableExtraSprintDuration;                                 // 0x10E8   (0x0004)  
	float                                              SprintDuration;                                             // 0x10EC   (0x0004)  
	bool                                               bChangeSprintFlag;                                          // 0x10F0   (0x0001)  
	bool                                               bSprintJump;                                                // 0x10F1   (0x0001)  
	bool                                               bWallRunJump;                                               // 0x10F2   (0x0001)  
	unsigned char                                      UnknownData232_6[0x1];                                      // 0x10F3   (0x0001)  MISSED
	float                                              OverrideWallRunJumpScale;                                   // 0x10F4   (0x0004)  
	bool                                               bGlide;                                                     // 0x10F8   (0x0001)  
	bool                                               bFlyingAction;                                              // 0x10F9   (0x0001)  
	bool                                               bForceCancelFlyingAction;                                   // 0x10FA   (0x0001)  
	bool                                               bFlyingActionMoving;                                        // 0x10FB   (0x0001)  
	float                                              RemainFlyingActionTime;                                     // 0x10FC   (0x0004)  
	float                                              CurrentFlyingActionTime;                                    // 0x1100   (0x0004)  
	float                                              FlyingActionPrepareDuration;                                // 0x1104   (0x0004)  
	float                                              FlyingActionLandedMoveBlockSec;                             // 0x1108   (0x0004)  
	float                                              FlyingActionMaxTime;                                        // 0x110C   (0x0004)  
	float                                              FlyingActionAddTimePerSec;                                  // 0x1110   (0x0004)  
	float                                              FlyingActionCoolTime;                                       // 0x1114   (0x0004)  
	float                                              FlyingActionEnableRemainTime;                               // 0x1118   (0x0004)  
	bool                                               bWallHitAction;                                             // 0x111C   (0x0001)  
	unsigned char                                      UnknownData233_6[0x3];                                      // 0x111D   (0x0003)  MISSED
	float                                              WallHitRemainTimeValue;                                     // 0x1120   (0x0004)  
	float                                              WallHitBounceVelocity;                                      // 0x1124   (0x0004)  
	float                                              WallHitBounceDelay;                                         // 0x1128   (0x0004)  
	bool                                               bDrawMoveTracker;                                           // 0x112C   (0x0001)  
	unsigned char                                      UnknownData234_6[0x3];                                      // 0x112D   (0x0003)  MISSED
	float                                              TargetCameraBoomLength;                                     // 0x1130   (0x0004)  
	float                                              RelativeCameraBoomHeight;                                   // 0x1134   (0x0004)  
	float                                              RelativeCameraBoomLeftRight;                                // 0x1138   (0x0004)  
	float                                              TargetRelativeCameraBoomHeight;                             // 0x113C   (0x0004)  
	float                                              TargetRelativeCameraBoomLeftRight;                          // 0x1140   (0x0004)  
	FSBManualBlendCamInfo                              ManualTargetCameraBlendInfo;                                // 0x1144   (0x0030)  
	float                                              RemainRequestFlyingActionEvade;                             // 0x1174   (0x0004)  
	FVector                                            RequestFlyingActionEvadeAcceleration;                       // 0x1178   (0x000C)  
	FVector                                            BackupFlyingActionVelocity;                                 // 0x1184   (0x000C)  
	bool                                               bDisableNormalMoveTransit;                                  // 0x1190   (0x0001)  
	bool                                               bChangedJump;                                               // 0x1191   (0x0001)  
	unsigned char                                      UnknownData235_6[0x2];                                      // 0x1192   (0x0002)  MISSED
	float                                              LockOnRotationYawUnit;                                      // 0x1194   (0x0004)  
	float                                              BlockLockOnMoveTargetDuration;                              // 0x1198   (0x0004)  
	float                                              LockOnMoveTargetMouseMoveSize;                              // 0x119C   (0x0004)  
	float                                              LockOnMoveTargetPadRateSize;                                // 0x11A0   (0x0004)  
	float                                              LockOnBlendCamHistoryDuration;                              // 0x11A4   (0x0004)  
	bool                                               bLockOnPitchControlling;                                    // 0x11A8   (0x0001)  
	unsigned char                                      UnknownData236_6[0x7];                                      // 0x11A9   (0x0007)  MISSED
	TMap<FName, FControlledForceObjectInfo>            ControlledForceObjectsMap;                                  // 0x11B0   (0x0050)  
	FVector                                            LockOnStart2DDirection;                                     // 0x1200   (0x000C)  
	bool                                               bLockOnCheckVisible;                                        // 0x120C   (0x0001)  
	unsigned char                                      UnknownData237_6[0x3];                                      // 0x120D   (0x0003)  MISSED
	float                                              HideTimeForLockOnCharacter;                                 // 0x1210   (0x0004)  
	int32_t                                            FacialAnimTypeIndex;                                        // 0x1214   (0x0004)  
	int32_t                                            FacialAnimTypeIndex_PhotoMode;                              // 0x1218   (0x0004)  
	float                                              FacialAnimPosition_PhotoMode;                               // 0x121C   (0x0004)  
	bool                                               bHideMaterialParts;                                         // 0x1220   (0x0001)  
	bool                                               bPrevHideMaterialParts;                                     // 0x1221   (0x0001)  
	unsigned char                                      UnknownData238_6[0x2];                                      // 0x1222   (0x0002)  MISSED
	FName                                              PoseName_PhotoMode;                                         // 0x1224   (0x0008)  
	bool                                               bPhotoModeDefaultSnapshot;                                  // 0x122C   (0x0001)  
	bool                                               bPhotoModeDefaultWeaponSnapshot;                            // 0x122D   (0x0001)  
	bool                                               bChangedPose_PhotoMode;                                     // 0x122E   (0x0001)  
	unsigned char                                      UnknownData239_6[0x21];                                     // 0x122F   (0x0021)  MISSED
	bool                                               bDisableIdleAdditiveAnimWhenAttachedToLevelSeq;             // 0x1250   (0x0001)  
	bool                                               bDefaultDisableIdleAdditiveAnimWhenAttachedToLevelSeq;      // 0x1251   (0x0001)  
	bool                                               bDisableIdleAdditiveAnimFromStance;                         // 0x1252   (0x0001)  
	unsigned char                                      UnknownData240_6[0x1];                                      // 0x1253   (0x0001)  MISSED
	float                                              BackupTargetRelativeCameraBoomHeight;                       // 0x1254   (0x0004)  
	float                                              BackupTargetRelativeCameraBoomLeftRight;                    // 0x1258   (0x0004)  
	float                                              BackupTargetCamArmLength;                                   // 0x125C   (0x0004)  
	FRotator                                           LockOnPitchControllingRot;                                  // 0x1260   (0x000C)  
	bool                                               bLockOnAlwaysPitchControl;                                  // 0x126C   (0x0001)  
	bool                                               bLockOnCameraEnable;                                        // 0x126D   (0x0001)  
	unsigned char                                      UnknownData241_6[0x2];                                      // 0x126E   (0x0002)  MISSED
	float                                              RunToIdleLFootFrontMoveTime;                                // 0x1270   (0x0004)  
	float                                              RunToIdleLFootFrontVelocity;                                // 0x1274   (0x0004)  
	float                                              RunToIdleRFootFrontMoveTime;                                // 0x1278   (0x0004)  
	float                                              RunToIdleRFootFrontVelocity;                                // 0x127C   (0x0004)  
	float                                              WalkToIdleLFootFrontMoveTime;                               // 0x1280   (0x0004)  
	float                                              WalkToIdleLFootFrontVelocity;                               // 0x1284   (0x0004)  
	float                                              WalkToIdleRFootFrontMoveTime;                               // 0x1288   (0x0004)  
	float                                              WalkToIdleRFootFrontVelocity;                               // 0x128C   (0x0004)  
	float                                              ShortMoveToIdleLFootFrontMoveTime;                          // 0x1290   (0x0004)  
	float                                              ShortMoveToIdleLFootFrontVelocity;                          // 0x1294   (0x0004)  
	float                                              ShortMoveToIdleRFootFrontMoveTime;                          // 0x1298   (0x0004)  
	float                                              ShortMoveToIdleRFootFrontVelocity;                          // 0x129C   (0x0004)  
	float                                              MoveDurationCheckShortMove;                                 // 0x12A0   (0x0004)  
	float                                              SprintToIdleMoveTime;                                       // 0x12A4   (0x0004)  
	float                                              SprintToIdleVelocity;                                       // 0x12A8   (0x0004)  
	float                                              LockOnSprintToIdleMoveTime;                                 // 0x12AC   (0x0004)  
	float                                              LockOnSprintToIdleVelocity;                                 // 0x12B0   (0x0004)  
	float                                              LockOnRunWalkToIdleMoveTime;                                // 0x12B4   (0x0004)  
	float                                              LockOnRunWalkToIdleVelocity;                                // 0x12B8   (0x0004)  
	float                                              OverrideRunToIdleLFootFrontMoveTime;                        // 0x12BC   (0x0004)  
	float                                              OverrideRunToIdleLFootFrontVelocity;                        // 0x12C0   (0x0004)  
	float                                              OverrideRunToIdleRFootFrontMoveTime;                        // 0x12C4   (0x0004)  
	float                                              OverrideRunToIdleRFootFrontVelocity;                        // 0x12C8   (0x0004)  
	float                                              OverrideWalkToIdleLFootFrontMoveTime;                       // 0x12CC   (0x0004)  
	float                                              OverrideWalkToIdleLFootFrontVelocity;                       // 0x12D0   (0x0004)  
	float                                              OverrideWalkToIdleRFootFrontMoveTime;                       // 0x12D4   (0x0004)  
	float                                              OverrideWalkToIdleRFootFrontVelocity;                       // 0x12D8   (0x0004)  
	float                                              OverrideShortMoveToIdleLFootFrontMoveTime;                  // 0x12DC   (0x0004)  
	float                                              OverrideShortMoveToIdleLFootFrontVelocity;                  // 0x12E0   (0x0004)  
	float                                              OverrideShortMoveToIdleRFootFrontMoveTime;                  // 0x12E4   (0x0004)  
	float                                              OverrideShortMoveToIdleRFootFrontVelocity;                  // 0x12E8   (0x0004)  
	unsigned char                                      UnknownData242_6[0x34];                                     // 0x12EC   (0x0034)  MISSED
	TArray<float>                                      TransitAnimPriority;                                        // 0x1320   (0x0010)  
	bool                                               bDisableTransitAnimByStanceVolume;                          // 0x1330   (0x0001)  
	unsigned char                                      UnknownData243_6[0x3];                                      // 0x1331   (0x0003)  MISSED
	float                                              LockOnRunAnimRefSpeed;                                      // 0x1334   (0x0004)  
	float                                              LockOnWalkAnimRefSpeed;                                     // 0x1338   (0x0004)  
	float                                              RunAnimRefSpeed;                                            // 0x133C   (0x0004)  
	float                                              WalkAnimRefSpeed;                                           // 0x1340   (0x0004)  
	float                                              ClimbingAnimRefSpeed;                                       // 0x1344   (0x0004)  
	float                                              LockOnCameraApplyVelocityRatio;                             // 0x1348   (0x0004)  
	float                                              SprintHoldKeyDurationOnMove;                                // 0x134C   (0x0004)  
	float                                              SprintHoldKeyDurationOnLockOnMove;                          // 0x1350   (0x0004)  
	float                                              RemainSprintKeyHoldDuration;                                // 0x1354   (0x0004)  
	float                                              GlideHoldKeyDurationOnJump;                                 // 0x1358   (0x0004)  
	float                                              RemainGlideKeyHoldDuration;                                 // 0x135C   (0x0004)  
	bool                                               bWalkingMode;                                               // 0x1360   (0x0001)  
	unsigned char                                      UnknownData244_6[0x3];                                      // 0x1361   (0x0003)  MISSED
	uint32_t                                           ActiveWalkingModeTime;                                      // 0x1364   (0x0004)  
	bool                                               bActiveMetaAI;                                              // 0x1368   (0x0001)  
	ESBMetaAIBehaviorStance                            MetaAIBehaviorStance;                                       // 0x1369   (0x0001)  
	bool                                               bArriveMetaAIBehaviorNode;                                  // 0x136A   (0x0001)  
	bool                                               bDisableInteractionFromMetaAI;                              // 0x136B   (0x0001)  
	unsigned char                                      UnknownData245_6[0x4];                                      // 0x136C   (0x0004)  MISSED
	uint64_t                                           MetaAIPenetratingMoveFrame;                                 // 0x1370   (0x0008)  
	bool                                               bMetaAITiredState;                                          // 0x1378   (0x0001)  
	bool                                               bUseCrowdVelocityLerpPower;                                 // 0x1379   (0x0001)  
	bool                                               bJoggingRun;                                                // 0x137A   (0x0001)  
	bool                                               bForceJoggingRun;                                           // 0x137B   (0x0001)  
	bool                                               bWalkingWhenMoving;                                         // 0x137C   (0x0001)  
	bool                                               bForceWalkWhenMoving;                                       // 0x137D   (0x0001)  
	bool                                               bLockOn;                                                    // 0x137E   (0x0001)  
	bool                                               bLockOnAtChat;                                              // 0x137F   (0x0001)  
	FGuid                                              LockOnAtChatGuid;                                           // 0x1380   (0x0010)  
	FGuid                                              LockOnAtChatBlendSpaceID;                                   // 0x1390   (0x0010)  
	FVector                                            LockOnAtChatPivotLocation;                                  // 0x13A0   (0x000C)  
	FVector                                            LockOnAtChatPivotDirection;                                 // 0x13AC   (0x000C)  
	float                                              LockOnAtChatPivotMoveDegRange;                              // 0x13B8   (0x0004)  
	float                                              LockOnAtChatMoveRange;                                      // 0x13BC   (0x0004)  
	bool                                               bUnlockAtChatInOutRange;                                    // 0x13C0   (0x0001)  
	unsigned char                                      UnknownData246_6[0x3];                                      // 0x13C1   (0x0003)  MISSED
	float                                              JumpStartZ;                                                 // 0x13C4   (0x0004)  
	float                                              JumpingTime;                                                // 0x13C8   (0x0004)  
	float                                              FallingTime;                                                // 0x13CC   (0x0004)  
	bool                                               bSlopeJumping;                                              // 0x13D0   (0x0001)  
	unsigned char                                      UnknownData247_6[0x3];                                      // 0x13D1   (0x0003)  MISSED
	int32_t                                            SlopeDollyIndex;                                            // 0x13D4   (0x0004)  
	bool                                               bSlopeJumpOut;                                              // 0x13D8   (0x0001)  
	unsigned char                                      UnknownData248_6[0x3];                                      // 0x13D9   (0x0003)  MISSED
	float                                              RequestSlopeOutMaxSpeed;                                    // 0x13DC   (0x0004)  
	bool                                               bSlopeJumpingCustomLanding;                                 // 0x13E0   (0x0001)  
	unsigned char                                      UnknownData249_6[0x3];                                      // 0x13E1   (0x0003)  MISSED
	float                                              SlopeJumpingCustomLandingDeg;                               // 0x13E4   (0x0004)  
	FVector                                            SplineForceAtSlopeJump;                                     // 0x13E8   (0x000C)  
	bool                                               bSwimJumping;                                               // 0x13F4   (0x0001)  
	unsigned char                                      UnknownData250_6[0x3];                                      // 0x13F5   (0x0003)  MISSED
	FVector                                            SlopeVelocityBeforeJump;                                    // 0x13F8   (0x000C)  
	bool                                               bSlideSlipJumping;                                          // 0x1404   (0x0001)  
	bool                                               bSlideSlipFalling;                                          // 0x1405   (0x0001)  
	bool                                               bSideRodFalling;                                            // 0x1406   (0x0001)  
	bool                                               bRodJumping;                                                // 0x1407   (0x0001)  
	bool                                               bSideRodJumping;                                            // 0x1408   (0x0001)  
	bool                                               bDisableSlopeStartMovingDeadZone;                           // 0x1409   (0x0001)  
	unsigned char                                      UnknownData251_6[0x2];                                      // 0x140A   (0x0002)  MISSED
	FVector                                            vecJumpMoveInput;                                           // 0x140C   (0x000C)  
	bool                                               bAccelSwimUp;                                               // 0x1418   (0x0001)  
	bool                                               bAccelSwimDown;                                             // 0x1419   (0x0001)  
	bool                                               bInputSwimming;                                             // 0x141A   (0x0001)  
	unsigned char                                      UnknownData252_6[0x1];                                      // 0x141B   (0x0001)  MISSED
	FVector                                            InputSwimmingAccel;                                         // 0x141C   (0x000C)  
	float                                              RemainFlyingActionCoolTime;                                 // 0x1428   (0x0004)  
	unsigned char                                      UnknownData253_6[0x4];                                      // 0x142C   (0x0004)  MISSED
	class ASBCharacter*                                LockOnCharacter;                                            // 0x1430   (0x0008)  
	float                                              RemainCustomLockOnCameraBlendTime;                          // 0x1438   (0x0004)  
	float                                              CustomLockOnCameraBlendTime;                                // 0x143C   (0x0004)  
	float                                              CustomLockOnCameraBlendMultifly;                            // 0x1440   (0x0004)  
	unsigned char                                      UnknownData254_6[0x4];                                      // 0x1444   (0x0004)  MISSED
	TArray<class ASBCharacter*>                        LookAtCandidates;                                           // 0x1448   (0x0010)  
	class ASBCharacter*                                CameraLookAtTarget;                                         // 0x1458   (0x0008)  
	float                                              CameraLookAtTargetTime;                                     // 0x1460   (0x0004)  
	unsigned char                                      UnknownData255_6[0x4];                                      // 0x1464   (0x0004)  MISSED
	class AActor*                                      AnimLookAtTarget;                                           // 0x1468   (0x0008)  
	FName                                              AnimLookAtTargetSocket;                                     // 0x1470   (0x0008)  
	float                                              AnimLookAtTargetZOffset;                                    // 0x1478   (0x0004)  
	FVector                                            HeadLookAtLocation;                                         // 0x147C   (0x000C)  
	FVector                                            HeadLookAtPosition;                                         // 0x1488   (0x000C)  
	bool                                               bUseHeadLookAtTargetPositionValue;                          // 0x1494   (0x0001)  
	unsigned char                                      UnknownData256_6[0x3];                                      // 0x1495   (0x0003)  MISSED
	float                                              HeadLookAtOverrideAlpha;                                    // 0x1498   (0x0004)  
	float                                              BodyLookAtOverrideAlpha;                                    // 0x149C   (0x0004)  
	float                                              Special1LookAtOverrideAlpha;                                // 0x14A0   (0x0004)  
	float                                              Special2LookAtOverrideAlpha;                                // 0x14A4   (0x0004)  
	class AActor*                                      EyeTrackingTarget;                                          // 0x14A8   (0x0008)  
	FName                                              EyeTrackingTargetSocket;                                    // 0x14B0   (0x0008)  
	FVector2D                                          EyePosition2D;                                              // 0x14B8   (0x0008)  
	bool                                               bEnableEyePositionUpdate;                                   // 0x14C0   (0x0001)  
	bool                                               bFixedBodyLookAtLocation;                                   // 0x14C1   (0x0001)  
	unsigned char                                      UnknownData257_6[0x2];                                      // 0x14C2   (0x0002)  MISSED
	FVector                                            LastBodyLookAtRelativeLocation;                             // 0x14C4   (0x000C)  
	bool                                               bSeqDisableDesireRotation : 1;                              // 0x14D0:0 (0x0001)  
	bool                                               bSeqFinishOnceForceMovement;                                // 0x14D1   (0x0001)  
	bool                                               bSeqFinishOnceStopActiveMovement;                           // 0x14D2   (0x0001)  
	TEnumAsByte<EMovementMode>                         SeqFinishOnceMovement;                                      // 0x14D3   (0x0001)  
	bool                                               bSeqFinishOnceSetPlayerCam;                                 // 0x14D4   (0x0001)  
	bool                                               bSeqFinishOnceSetPlayerCamReset;                            // 0x14D5   (0x0001)  
	bool                                               bSeqFinishOnceSetPlayerCamResetPitchBaseAlpha;              // 0x14D6   (0x0001)  
	bool                                               bSeqFinishOnceSetPlayerCamResetYawReset;                    // 0x14D7   (0x0001)  
	bool                                               bSeqFinishOnceSetPlayerCamResetForceSetBoom;                // 0x14D8   (0x0001)  
	unsigned char                                      UnknownData258_6[0x7];                                      // 0x14D9   (0x0007)  MISSED
	TArray<FName>                                      ActorActiveVolumeNameArray;                                 // 0x14E0   (0x0010)  
	bool                                               bActiveCharacter;                                           // 0x14F0   (0x0001)  
	bool                                               bDisableTickByLastRenderTimeOnScreen;                       // 0x14F1   (0x0001)  
	unsigned char                                      UnknownData259_6[0x6];                                      // 0x14F2   (0x0006)  MISSED
	uint64_t                                           LastCheckOcclusionFrameCount;                               // 0x14F8   (0x0008)  
	unsigned char                                      UnknownData260_6[0x4];                                      // 0x1500   (0x0004)  MISSED
	FVector                                            OverlapMoveVelocity;                                        // 0x1504   (0x000C)  
	FVector                                            CurrentOverlapMoveVelocity;                                 // 0x1510   (0x000C)  
	float                                              OverlapMoveVelocityDelayTime;                               // 0x151C   (0x0004)  
	bool                                               bTPSMode;                                                   // 0x1520   (0x0001)  
	unsigned char                                      UnknownData261_6[0x3];                                      // 0x1521   (0x0003)  MISSED
	float                                              LastTPSModeTime;                                            // 0x1524   (0x0004)  
	bool                                               bIsActiveTPSAimOffset;                                      // 0x1528   (0x0001)  
	TEnumAsByte<ESBTPSModeType>                        TPSModeType;                                                // 0x1529   (0x0001)  
	unsigned char                                      UnknownData262_6[0x2];                                      // 0x152A   (0x0002)  MISSED
	FVector                                            TPSLookAtDirection;                                         // 0x152C   (0x000C)  
	FVector                                            TPSInitLookAtDirection;                                     // 0x1538   (0x000C)  
	FVector                                            TPSDesiredLookAtDirection;                                  // 0x1544   (0x000C)  
	FVector                                            TPSDesiredDampingVelocity;                                  // 0x1550   (0x000C)  
	float                                              TPSDampingWaitTime;                                         // 0x155C   (0x0004)  
	float                                              TPSAimSlowDownValue;                                        // 0x1560   (0x0004)  
	bool                                               bDisableTPSAimSlowDownValue;                                // 0x1564   (0x0001)  
	unsigned char                                      UnknownData263_6[0x3];                                      // 0x1565   (0x0003)  MISSED
	TWeakObjectPtr<class ASBCharacter*>                TPSCollisionHitCharacter;                                   // 0x1568   (0x0008)  
	FVector                                            TPSCollisionHitLocation;                                    // 0x1570   (0x000C)  
	bool                                               bTPSFirstTurningTPSLookAt;                                  // 0x157C   (0x0001)  
	unsigned char                                      UnknownData264_6[0x3];                                      // 0x157D   (0x0003)  MISSED
	uint64_t                                           TPSLookAtPinLocationUpdateFrameCount;                       // 0x1580   (0x0008)  
	FVector                                            TPSLookAtPinLocation;                                       // 0x1588   (0x000C)  
	FVector2D                                          NikkeTPSPinScreenPoint;                                     // 0x1594   (0x0008)  
	unsigned char                                      UnknownData265_6[0x4];                                      // 0x159C   (0x0004)  MISSED
	uint64_t                                           TPSLookAtWorldLocationUpdateFrameCount;                     // 0x15A0   (0x0008)  
	FVector                                            TPSLookAtWorldLocation;                                     // 0x15A8   (0x000C)  
	float                                              TPSSwitchableTimeFromCameraVolume;                          // 0x15B4   (0x0004)  
	FVector                                            TPSDesiredLookAtFixedLocation;                              // 0x15B8   (0x000C)  
	float                                              TPSDesiredLookAtFixedLocationTime;                          // 0x15C4   (0x0004)  
	float                                              TPSDesiredLookAtFixedLocationCurrentTime;                   // 0x15C8   (0x0004)  
	bool                                               bTPSZoomIn;                                                 // 0x15CC   (0x0001)  
	unsigned char                                      UnknownData266_6[0x3];                                      // 0x15CD   (0x0003)  MISSED
	float                                              TPSCameraSwitchBlendTime;                                   // 0x15D0   (0x0004)  
	FVector                                            TPSAimSlowdownBoundingBoxExtentXYRate;                      // 0x15D4   (0x000C)  
	float                                              BulletMagnetCapsuleRadiusScale;                             // 0x15E0   (0x0004)  
	float                                              BulletMagnetCapsuleHeightScale;                             // 0x15E4   (0x0004)  
	class UNiagaraParameterCollection*                 NikkeMinigameNiagaraParameterCollection;                    // 0x15E8   (0x0008)  
	bool                                               bIgnoreTPSBodyRotationWhenSequence;                         // 0x15F0   (0x0001)  
	bool                                               bCameraVolumeOnceEnterImmidiate;                            // 0x15F1   (0x0001)  
	unsigned char                                      UnknownData267_6[0x2];                                      // 0x15F2   (0x0002)  MISSED
	float                                              GameOptionControllerCameraNormalHorizentalScale;            // 0x15F4   (0x0004)  
	float                                              GameOptionControllerCameraNormalVerticalScale;              // 0x15F8   (0x0004)  
	float                                              GameOptionControllerCameraTPSHorizentalScale;               // 0x15FC   (0x0004)  
	float                                              GameOptionControllerCameraTPSVerticalScale;                 // 0x1600   (0x0004)  
	bool                                               GameOptionControllerCameraHorizentalInvert;                 // 0x1604   (0x0001)  
	bool                                               GameOptionControllerCameraVerticalInvert;                   // 0x1605   (0x0001)  
	unsigned char                                      UnknownData268_6[0x2];                                      // 0x1606   (0x0002)  MISSED
	float                                              GameOptionMouseCameraNormalHorizentalScale;                 // 0x1608   (0x0004)  
	float                                              GameOptionMouseCameraNormalVerticalScale;                   // 0x160C   (0x0004)  
	float                                              GameOptionMouseCameraTPSHorizentalScale;                    // 0x1610   (0x0004)  
	float                                              GameOptionMouseCameraTPSVerticalScale;                      // 0x1614   (0x0004)  
	bool                                               GameOptionMouseCameraHorizentalInvert;                      // 0x1618   (0x0001)  
	bool                                               GameOptionMouseCameraVerticalInvert;                        // 0x1619   (0x0001)  
	unsigned char                                      UnknownData269_6[0x2];                                      // 0x161A   (0x0002)  MISSED
	float                                              StartTurningBlockTime;                                      // 0x161C   (0x0004)  
	unsigned char                                      UnknownData270_6[0x68];                                     // 0x1620   (0x0068)  MISSED
	TEnumAsByte<ESBFishingModeType>                    FishingModeType;                                            // 0x1688   (0x0001)  
	unsigned char                                      UnknownData271_6[0x3];                                      // 0x1689   (0x0003)  MISSED
	FVector                                            FishingLookAtDirection;                                     // 0x168C   (0x000C)  
	FVector                                            FishingCastingEnableLocation;                               // 0x1698   (0x000C)  
	unsigned char                                      UnknownData272_6[0x4];                                      // 0x16A4   (0x0004)  MISSED
	class UCurveFloat*                                 FishingCastingDistanceCurve;                                // 0x16A8   (0x0008)  
	float                                              RemainFishingReelTime;                                      // 0x16B0   (0x0004)  
	bool                                               bFishingReel;                                               // 0x16B4   (0x0001)  
	bool                                               bNeedFishingForceTurn;                                      // 0x16B5   (0x0001)  
	bool                                               bEnableSimpleFishing;                                       // 0x16B6   (0x0001)  
	unsigned char                                      UnknownData273_6[0x1];                                      // 0x16B7   (0x0001)  MISSED
	class ASBBobber*                                   FishingLookAtTarget;                                        // 0x16B8   (0x0008)  
	class USBCharacterPoseSnapshotDataAsset*           PoseSnapshotDataPtr;                                        // 0x16C0   (0x0008)  
	class USBCharacterPoseSnapshotDataAsset*           PonytailSnapshotDataPtr;                                    // 0x16C8   (0x0008)  
	class USBCharacterPoseSnapshotDataAsset*           HairSnapshotDataPtr;                                        // 0x16D0   (0x0008)  
	class USBCharacterPoseSnapshotDataAsset*           TachyWingSnapshotDataPtr;                                   // 0x16D8   (0x0008)  
	class USBCharacterSelfiePoseDataAsset*             SelfiePoseDataPtr;                                          // 0x16E0   (0x0008)  
	FName                                              LastGunRotationSeqName;                                     // 0x16E8   (0x0008)  
	FVector                                            LastGunRotationDirection;                                   // 0x16F0   (0x000C)  
	int32_t                                            DisableLookAtCount[4];                                      // 0x16FC   (0x0010)  
	int32_t                                            DisableTPSAimIKCount;                                       // 0x170C   (0x0004)  
	FName                                              DefaultHeadLookAtTargetSocket;                              // 0x1710   (0x0008)  
	FName                                              DefaultBodyLookAtTargetSocket;                              // 0x1718   (0x0008)  
	FVector                                            EyeOffsetFromHead;                                          // 0x1720   (0x000C)  
	TEnumAsByte<EAxis>                                 EyeForwardAxis;                                             // 0x172C   (0x0001)  
	bool                                               EyeForwardAxisInverse;                                      // 0x172D   (0x0001)  
	TEnumAsByte<EAxis>                                 EyeRightAxis;                                               // 0x172E   (0x0001)  
	bool                                               EyeRightAxisInverse;                                        // 0x172F   (0x0001)  
	float                                              EyeBetweenDistance;                                         // 0x1730   (0x0004)  
	float                                              EyeAngleHorizontal;                                         // 0x1734   (0x0004)  
	float                                              EyeAngleVertical;                                           // 0x1738   (0x0004)  
	bool                                               bActiveWeakPointCollision;                                  // 0x173C   (0x0001)  
	bool                                               bNotTPSAutoTargeted;                                        // 0x173D   (0x0001)  
	bool                                               bNotTPSMagnet;                                              // 0x173E   (0x0001)  
	unsigned char                                      UnknownData274_6[0x1];                                      // 0x173F   (0x0001)  MISSED
	FVector                                            OldWireFlyingPosition;                                      // 0x1740   (0x000C)  
	unsigned char                                      UnknownData275_6[0x4];                                      // 0x174C   (0x0004)  MISSED
	class USBMoveTracker*                              MoveTracker;                                                // 0x1750   (0x0008)  
	class USBMoveTracker*                              MoveTracker2;                                               // 0x1758   (0x0008)  
	bool                                               EnableMovementChecker;                                      // 0x1760   (0x0001)  
	unsigned char                                      UnknownData276_6[0x7];                                      // 0x1761   (0x0007)  MISSED
	FSBCharacterMovementCheckInfo                      MovementCheckInfo;                                          // 0x1768   (0x0658)  
	class USceneComponent*                             ClimbAttachedComponent;                                     // 0x1DC0   (0x0008)  
	FVector                                            ClimbAttachedLocalVector;                                   // 0x1DC8   (0x000C)  
	FName                                              ClimbAttachedSocketName;                                    // 0x1DD4   (0x0008)  
	unsigned char                                      UnknownData277_6[0x4];                                      // 0x1DDC   (0x0004)  MISSED
	FString                                            ResourcePath;                                               // 0x1DE0   (0x0010)  
	bool                                               bMovingTarget;                                              // 0x1DF0   (0x0001)  
	bool                                               bMovingTargetChangeState;                                   // 0x1DF1   (0x0001)  
	bool                                               bLocalMovingTarget;                                         // 0x1DF2   (0x0001)  
	bool                                               bIgnoreMoveingTargetUpdateTransfrom;                        // 0x1DF3   (0x0001)  
	unsigned char                                      UnknownData278_6[0x4];                                      // 0x1DF4   (0x0004)  MISSED
	TArray<FVector>                                    MovingTargetPath;                                           // 0x1DF8   (0x0010)  
	bool                                               bIgnoreMovingTargetPathLeave;                               // 0x1E08   (0x0001)  
	unsigned char                                      UnknownData279_6[0x3];                                      // 0x1E09   (0x0003)  MISSED
	TWeakObjectPtr<class USceneComponent*>             MovingTargetBaseComponent;                                  // 0x1E0C   (0x0008)  
	FVector                                            vecMovingTargetLocationForBaseComp;                         // 0x1E14   (0x000C)  
	FVector                                            vecMovingTargetDirectionForBaseComp;                        // 0x1E20   (0x000C)  
	bool                                               bMovingTargetLinearInterpol;                                // 0x1E2C   (0x0001)  
	unsigned char                                      UnknownData280_6[0x3];                                      // 0x1E2D   (0x0003)  MISSED
	float                                              MovingTargetDuration;                                       // 0x1E30   (0x0004)  
	float                                              MovingTargetDelayDuration;                                  // 0x1E34   (0x0004)  
	float                                              MovingTargetRotDelayDuration;                               // 0x1E38   (0x0004)  
	bool                                               MovingTargetAnimStopAtMoveInput;                            // 0x1E3C   (0x0001)  
	bool                                               bEventMoveDnamicTarget;                                     // 0x1E3D   (0x0001)  
	unsigned char                                      UnknownData281_6[0x2];                                      // 0x1E3E   (0x0002)  MISSED
	float                                              CurrentMovingTargetTime;                                    // 0x1E40   (0x0004)  
	float                                              CurrentRotTargetTime;                                       // 0x1E44   (0x0004)  
	FVector                                            MovingTargetStartDirection;                                 // 0x1E48   (0x000C)  
	FVector                                            MovingTargetEndDirection;                                   // 0x1E54   (0x000C)  
	float                                              MovingTargetDirectionCustomDuration;                        // 0x1E60   (0x0004)  
	bool                                               bRotationLinearInterp;                                      // 0x1E64   (0x0001)  
	unsigned char                                      UnknownData282_6[0x3];                                      // 0x1E65   (0x0003)  MISSED
	int32_t                                            MovingTargetRotationDirType;                                // 0x1E68   (0x0004)  
	bool                                               bMovingTargetEndPlayAnim;                                   // 0x1E6C   (0x0001)  
	bool                                               bDisableActorCollisionToMovingTarget;                       // 0x1E6D   (0x0001)  
	unsigned char                                      UnknownData283_6[0x2];                                      // 0x1E6E   (0x0002)  MISSED
	FString                                            MovingTargetEndAnimName;                                    // 0x1E70   (0x0010)  
	float                                              MovingTargetEndAnimBlendInTime;                             // 0x1E80   (0x0004)  
	float                                              MovingTargetEndAnimBlendOutTime;                            // 0x1E84   (0x0004)  
	float                                              MovingTargetEndAnimTime;                                    // 0x1E88   (0x0004)  
	float                                              MovingTargetEndAnimBlockInputDuration;                      // 0x1E8C   (0x0004)  
	float                                              MovingTargetAfterBlockInputDuration;                        // 0x1E90   (0x0004)  
	float                                              MovingTargetCameraInterpolTime;                             // 0x1E94   (0x0004)  
	FString                                            MovingTargetCustomAnimPath;                                 // 0x1E98   (0x0010)  
	float                                              MovingTargetCustomAnimBlendTime;                            // 0x1EA8   (0x0004)  
	float                                              MovingTargetCustomAnimDuration;                             // 0x1EAC   (0x0004)  
	bool                                               bSetMovingTargetCustomAnimTransitID;                        // 0x1EB0   (0x0001)  
	TEnumAsByte<ESBCharacterTransitAnim>               MovingTargetCustomAnimTransitID;                            // 0x1EB1   (0x0001)  
	bool                                               bMoveingTargetRefreshMovemodeAtEndMove;                     // 0x1EB2   (0x0001)  
	bool                                               bChangeMovingState;                                         // 0x1EB3   (0x0001)  
	bool                                               bLastMoveingState;                                          // 0x1EB4   (0x0001)  
	TEnumAsByte<ESBCharacterMoveType>                  LastMoveType;                                               // 0x1EB5   (0x0001)  
	unsigned char                                      UnknownData284_6[0x2];                                      // 0x1EB6   (0x0002)  MISSED
	float                                              MoveAnimSpeedInterpolAfterAction;                           // 0x1EB8   (0x0004)  
	float                                              RemainMoveAnimSpeedInterpolAfterAction;                     // 0x1EBC   (0x0004)  
	float                                              RemainChangeIdleMoveTime;                                   // 0x1EC0   (0x0004)  
	float                                              ChangeIdleMoveVelocity;                                     // 0x1EC4   (0x0004)  
	float                                              RemainTurnMoveTime;                                         // 0x1EC8   (0x0004)  
	float                                              SlopeLandingMoveTime;                                       // 0x1ECC   (0x0004)  
	float                                              RemainSlopeLandingMoveTime;                                 // 0x1ED0   (0x0004)  
	float                                              RemainBlockTurnTime;                                        // 0x1ED4   (0x0004)  
	float                                              RemainBlockHuddleUpTime;                                    // 0x1ED8   (0x0004)  
	float                                              TurnMoveVelocity;                                           // 0x1EDC   (0x0004)  
	float                                              RemainMotionMoveDuration;                                   // 0x1EE0   (0x0004)  
	bool                                               bEnableMotionMove;                                          // 0x1EE4   (0x0001)  
	bool                                               bUseMotionMoveOnlyVelocityChange;                           // 0x1EE5   (0x0001)  
	unsigned char                                      UnknownData285_6[0x2];                                      // 0x1EE6   (0x0002)  MISSED
	float                                              MotionMoveDuration;                                         // 0x1EE8   (0x0004)  
	bool                                               bWallRun;                                                   // 0x1EEC   (0x0001)  
	unsigned char                                      UnknownData286_6[0x3];                                      // 0x1EED   (0x0003)  MISSED
	float                                              CurrentWallRunTime;                                         // 0x1EF0   (0x0004)  
	bool                                               bUseWallRunYawControl;                                      // 0x1EF4   (0x0001)  
	unsigned char                                      UnknownData287_6[0x3];                                      // 0x1EF5   (0x0003)  MISSED
	float                                              SprintTurnMoveVelocity;                                     // 0x1EF8   (0x0004)  
	float                                              SprintTurnMoveTime;                                         // 0x1EFC   (0x0004)  
	float                                              RunTurnMoveVelocity;                                        // 0x1F00   (0x0004)  
	float                                              RunTurnMoveTime;                                            // 0x1F04   (0x0004)  
	float                                              WalkTurnMoveVelocity;                                       // 0x1F08   (0x0004)  
	float                                              WalkTurnMoveTime;                                           // 0x1F0C   (0x0004)  
	float                                              IdleTurnMoveVelocity;                                       // 0x1F10   (0x0004)  
	float                                              IdleTurnMoveTime;                                           // 0x1F14   (0x0004)  
	bool                                               bLockOnMoveSideNormal;                                      // 0x1F18   (0x0001)  
	bool                                               bEnableDoubleJump;                                          // 0x1F19   (0x0001)  
	unsigned char                                      UnknownData288_6[0x2];                                      // 0x1F1A   (0x0002)  MISSED
	FVector                                            PendingMoveLockOnTargetVector;                              // 0x1F1C   (0x000C)  
	float                                              CurrentLockOnCameraInputX;                                  // 0x1F28   (0x0004)  
	float                                              CurrentLockOnCameraInputY;                                  // 0x1F2C   (0x0004)  
	float                                              CurrentLockOnCameraInputMouseX;                             // 0x1F30   (0x0004)  
	float                                              CurrentLockOnCameraInputMouseY;                             // 0x1F34   (0x0004)  
	float                                              RemainBlockLockOnMoveTargetDuration;                        // 0x1F38   (0x0004)  
	bool                                               bVisibleSwordTrail;                                         // 0x1F3C   (0x0001)  
	unsigned char                                      UnknownData289_6[0x3];                                      // 0x1F3D   (0x0003)  MISSED
	float                                              GravityZScaleWhenActiveSkill;                               // 0x1F40   (0x0004)  
	int32_t                                            UnavailableLockOn;                                          // 0x1F44   (0x0004)  
	TMap<FName, bool>                                  TouchTriggerMap;                                            // 0x1F48   (0x0050)  
	int32_t                                            LockOnSprintStartPlayIndex;                                 // 0x1F98   (0x0004)  
	unsigned char                                      UnknownData290_6[0x4];                                      // 0x1F9C   (0x0004)  MISSED
	TArray<FSBMeshInfo>                                MeshInfoList;                                               // 0x1FA0   (0x0010)  
	FSBCharacterEventMoveInfo                          EventMoveInfo;                                              // 0x1FB0   (0x01B0)  
	FSBEventMoveResultExtraInfo                        EventMoveInterfaceResultInfo;                               // 0x2160   (0x0014)  
	FRotator                                           TargetCamRotator;                                           // 0x2174   (0x000C)  
	TEnumAsByte<ESBBoneBlendType>                      BoneBlendType;                                              // 0x2180   (0x0001)  
	unsigned char                                      UnknownData291_6[0x157];                                    // 0x2181   (0x0157)  MISSED
	bool                                               bBlockChangeMesh;                                           // 0x22D8   (0x0001)  
	unsigned char                                      UnknownData292_6[0x47];                                     // 0x22D9   (0x0047)  MISSED
	FTransform                                         MeshOriginRelativeTransform;                                // 0x2320   (0x0030)  
	FSBRagdollInfo                                     RagdollInfo;                                                // 0x2350   (0x0100)  
	float                                              CustomPoseSnapBlendWeight;                                  // 0x2450   (0x0004)  
	unsigned char                                      UnknownData293_6[0xC];                                      // 0x2454   (0x000C)  MISSED
	FSBActorMoveData                                   ActorMoveData;                                              // 0x2460   (0x0270)  
	unsigned char                                      UnknownData294_6[0xC];                                      // 0x26D0   (0x000C)  MISSED
	bool                                               bIgnoreCharacterCollision;                                  // 0x26DC   (0x0001)  
	bool                                               bDisableLocationFromOverlapCollision;                       // 0x26DD   (0x0001)  
	bool                                               bNoSweepOverlapCollisionWhenZeroVelocity;                   // 0x26DE   (0x0001)  
	unsigned char                                      UnknownData295_6[0x1];                                      // 0x26DF   (0x0001)  MISSED
	float                                              RuleMoveAdditiveZFromProjectPointToNavigation;              // 0x26E0   (0x0004)  
	float                                              AcceptanceRadius;                                           // 0x26E4   (0x0004)  
	bool                                               bUseFlyPathWayForAnimGraphSpeed;                            // 0x26E8   (0x0001)  
	unsigned char                                      UnknownData296_6[0xE3];                                     // 0x26E9   (0x00E3)  MISSED
	int32_t                                            MoveBackByTargetOverlap;                                    // 0x27CC   (0x0004)  
	int32_t                                            MoveBackByTargetOverlapNextFrameMinusValue;                 // 0x27D0   (0x0004)  
	unsigned char                                      UnknownData297_6[0x50];                                     // 0x27D4   (0x0050)  MISSED
	int32_t                                            JumpLock;                                                   // 0x2824   (0x0004)  
	bool                                               bBlockJumpAction;                                           // 0x2828   (0x0001)  
	unsigned char                                      UnknownData298_6[0x3];                                      // 0x2829   (0x0003)  MISSED
	int32_t                                            BlockJumpActionFrameCount;                                  // 0x282C   (0x0004)  
	int32_t                                            SprintLock;                                                 // 0x2830   (0x0004)  
	int32_t                                            MouseLock;                                                  // 0x2834   (0x0004)  
	int32_t                                            DisableCollisionOverlapMoving;                              // 0x2838   (0x0004)  
	unsigned char                                      UnknownData299_6[0x85];                                     // 0x283C   (0x0085)  MISSED
	bool                                               bFallingToLowDiff;                                          // 0x28C1   (0x0001)  
	bool                                               bFallingToLowDiffPlayAnim;                                  // 0x28C2   (0x0001)  
	unsigned char                                      UnknownData300_6[0x5];                                      // 0x28C3   (0x0005)  MISSED
	TMap<int32_t, FSBLastSetBlendSpace>                LastSetBlendSpaceMap;                                       // 0x28C8   (0x0050)  
	int32_t                                            OverrideBlendSpaceUpperOnlyCount;                           // 0x2918   (0x0004)  
	int32_t                                            OverrideBlendSpaceCount;                                    // 0x291C   (0x0004)  
	bool                                               bOverriddenBlendSpacePlayerActive;                          // 0x2920   (0x0001)  
	unsigned char                                      UnknownData301_6[0x7];                                      // 0x2921   (0x0007)  MISSED
	TMap<int32_t, FSBOverrideAnimTransit>              OverrideAnimTransitMap;                                     // 0x2928   (0x0050)  
	bool                                               IgnoreRenderControl;                                        // 0x2978   (0x0001)  
	bool                                               bUseOptimizationDisableTick;                                // 0x2979   (0x0001)  
	bool                                               bSimpleCharacter;                                           // 0x297A   (0x0001)  
	bool                                               bUseOptimizationharacterMinLOD1;                            // 0x297B   (0x0001)  
	bool                                               bIgnoreOcclusion;                                           // 0x297C   (0x0001)  
	unsigned char                                      UnknownData302_6[0xA];                                      // 0x297D   (0x000A)  MISSED
	bool                                               bRenderControl;                                             // 0x2987   (0x0001)  
	TArray<FName>                                      DisableInputActionStateArray;                               // 0x2988   (0x0010)  
	bool                                               bBlockingWhenOverlapMoving;                                 // 0x2998   (0x0001)  
	bool                                               bCheckRuleMoveWallHitPossible;                              // 0x2999   (0x0001)  
	unsigned char                                      UnknownData303_6[0x6];                                      // 0x299A   (0x0006)  MISSED
	class AActor*                                      VehicleActor;                                               // 0x29A0   (0x0008)  
	FVector                                            VehicleActorPrevLocation;                                   // 0x29A8   (0x000C)  
	FRotator                                           VehicleActorPrevRotation;                                   // 0x29B4   (0x000C)  
	bool                                               bVehicleTargetActorControlRotation;                         // 0x29C0   (0x0001)  
	unsigned char                                      UnknownData304_6[0x3];                                      // 0x29C1   (0x0003)  MISSED
	FVector                                            VehicleActorDiffLocation;                                   // 0x29C4   (0x000C)  
	FVector                                            VehicleTargetActorDiffLocation;                             // 0x29D0   (0x000C)  
	FVector                                            VehicleTargetActorPrevLocation;                             // 0x29DC   (0x000C)  
	FVector                                            ActorLocationOnVehicleActor;                                // 0x29E8   (0x000C)  
	bool                                               bBlockSimulatePhysicsFromVehicleTransform;                  // 0x29F4   (0x0001)  
	bool                                               bLockupSimulatePhysics;                                     // 0x29F5   (0x0001)  
	bool                                               bDisableFootIKWhenRideOnVehicle;                            // 0x29F6   (0x0001)  
	bool                                               bVehicleActorPhotoModeDiffLocation;                         // 0x29F7   (0x0001)  
	FVector                                            VehicleActorPhotoModeDiffLocation;                          // 0x29F8   (0x000C)  
	int32_t                                            KeepAllBodiesPhysicsPositionFrame;                          // 0x2A04   (0x0004)  
	int32_t                                            KeepAllBodiesPhysicsPositionZeroBlendWeightFrame;           // 0x2A08   (0x0004)  
	FName                                              Tribe;                                                      // 0x2A0C   (0x0008)  
	unsigned char                                      UnknownData305_6[0x4];                                      // 0x2A14   (0x0004)  MISSED
	TArray<FName>                                      CharacterTags;                                              // 0x2A18   (0x0010)  
	bool                                               bBattleState;                                               // 0x2A28   (0x0001)  
	bool                                               bImpossibleAutoLockOn;                                      // 0x2A29   (0x0001)  
	bool                                               bOnAutoLockOnPhase;                                         // 0x2A2A   (0x0001)  
	bool                                               bAutoLockOnAtAfterTPS;                                      // 0x2A2B   (0x0001)  
	FHitResult                                         MoveBlockedByHitInfo;                                       // 0x2A2C   (0x008C)  
	uint32_t                                           BlockMovementFlags;                                         // 0x2AB8   (0x0004)  
	bool                                               bPressedTrainingRoomTrigger;                                // 0x2ABC   (0x0001)  
	unsigned char                                      UnknownData306_6[0x15B];                                    // 0x2ABD   (0x015B)  MISSED
	class USBDroneLocationData*                        DroneLocationInfoData;                                      // 0x2C18   (0x0008)  
	bool                                               bUseMoveConstraint;                                         // 0x2C20   (0x0001)  
	unsigned char                                      UnknownData307_6[0x3];                                      // 0x2C21   (0x0003)  MISSED
	FVector                                            MoveConstraintForwardDirection;                             // 0x2C24   (0x000C)  
	bool                                               bMoveConstraintDirXYOnly;                                   // 0x2C30   (0x0001)  
	unsigned char                                      UnknownData308_6[0x7];                                      // 0x2C31   (0x0007)  MISSED
	class UCurveFloat*                                 MoveConstraintForwardFactor;                                // 0x2C38   (0x0008)  
	class UCurveFloat*                                 MoveConstraintRightFactor;                                  // 0x2C40   (0x0008)  
	TEnumAsByte<ESBCameraVoumeMoveConstraintDirectionType> MoveConstraintDirectionType;                            // 0x2C48   (0x0001)  
	unsigned char                                      UnknownData309_6[0x3];                                      // 0x2C49   (0x0003)  MISSED
	FVector                                            MoveConstraintDirectionStart;                               // 0x2C4C   (0x000C)  
	FVector                                            MoveConstraintDirectionEnd;                                 // 0x2C58   (0x000C)  
	bool                                               MoveConstraintRightDotCalcuate;                             // 0x2C64   (0x0001)  
	bool                                               MoveConstraintEveryUpdate;                                  // 0x2C65   (0x0001)  
	bool                                               bUseJumpConstraint;                                         // 0x2C66   (0x0001)  
	unsigned char                                      UnknownData310_6[0x1];                                      // 0x2C67   (0x0001)  MISSED
	float                                              JumpConstraintMaxJump;                                      // 0x2C68   (0x0004)  
	float                                              JumpConstraintMaxXY;                                        // 0x2C6C   (0x0004)  
	FString                                            JumpConstraintJumpFrontPath;                                // 0x2C70   (0x0010)  
	float                                              JumpConstraintUnlockJumpFromSplineProgress;                 // 0x2C80   (0x0004)  
	bool                                               bUsePhysicsConstraint;                                      // 0x2C84   (0x0001)  
	bool                                               bIgnoreImpartBaseVelocityX;                                 // 0x2C85   (0x0001)  
	bool                                               bIgnoreImpartBaseVelocityY;                                 // 0x2C86   (0x0001)  
	bool                                               bIgnoreImpartBaseVelocityZ;                                 // 0x2C87   (0x0001)  
	bool                                               bOrigImpartBaseVelocityX;                                   // 0x2C88   (0x0001)  
	bool                                               bOrigImpartBaseVelocityY;                                   // 0x2C89   (0x0001)  
	bool                                               bOrigImpartBaseVelocityZ;                                   // 0x2C8A   (0x0001)  
	unsigned char                                      UnknownData311_6[0x1];                                      // 0x2C8B   (0x0001)  MISSED
	int32_t                                            PriorityWhenSameWeightOverlap;                              // 0x2C8C   (0x0004)  
	class USBSaveGameComponent*                        ActiveSaveGameComponet;                                     // 0x2C90   (0x0008)  
	float                                              AlwaysTickDistance;                                         // 0x2C98   (0x0004)  
	unsigned char                                      UnknownData312_6[0x80];                                     // 0x2C9C   (0x0080)  MISSED
	FName                                              SpawnAreaName;                                              // 0x2D1C   (0x0008)  
	FVector                                            SpawnAreaLocation;                                          // 0x2D24   (0x000C)  
	FName                                              CharacterBindingSocket;                                     // 0x2D30   (0x0008)  
	FVector                                            CharacterBindingRelativeLocation;                           // 0x2D38   (0x000C)  
	unsigned char                                      UnknownData313_6[0x4];                                      // 0x2D44   (0x0004)  MISSED
	class UBlendSpaceBase*                             CharacterBindingIdleBlendSpace;                             // 0x2D48   (0x0008)  
	class UPhysicsAsset*                               CharacterBindingPhysicsAsset;                               // 0x2D50   (0x0008)  
	TArray<FSBCharacterBindingInfo>                    CharacterBindingInfoArray;                                  // 0x2D58   (0x0010)  
	unsigned char                                      UnknownData314_6[0xA8];                                     // 0x2D68   (0x00A8)  MISSED
	TArray<FSBTransitAnimBlendTime>                    TransitAnimBlendTimeArray;                                  // 0x2E10   (0x0010)  
	unsigned char                                      UnknownData315_6[0x50];                                     // 0x2E20   (0x0050)  MISSED
	class UPhysicsAsset*                               BodyMeshOriginPhysicsAsset;                                 // 0x2E70   (0x0008)  
	class USBCharacterParticleSet*                     ParticleSet;                                                // 0x2E78   (0x0008)  
	float                                              CharacterParticleScale;                                     // 0x2E80   (0x0004)  
	unsigned char                                      UnknownData316_6[0x4];                                      // 0x2E84   (0x0004)  MISSED
	TWeakObjectPtr<class USBCharacterSoundSet*>        SoundSet;                                                   // 0x2E88   (0x0008)  
	unsigned char                                      UnknownData317_6[0x20];                                     // 0x2E90   (0x0020)  MISSED
	class USBCharacterSoundSet*                        SoundSetHardRef;                                            // 0x2EB0   (0x0008)  
	unsigned char                                      UnknownData318_6[0x20];                                     // 0x2EB8   (0x0020)  MISSED
	class USBCharacterFactorSet*                       FactorSet;                                                  // 0x2ED8   (0x0008)  
	class USBCharacterFactorSetComponent*              FactorSetComponent;                                         // 0x2EE0   (0x0008)  
	class USBCharacterFootStepSet*                     FootStepSet;                                                // 0x2EE8   (0x0008)  
	class USBCharacterFootStepSet*                     FootStepSetOverride;                                        // 0x2EF0   (0x0008)  
	class USBCharacterDialogBoundsSet*                 DialogBoundsSet;                                            // 0x2EF8   (0x0008)  
	FSBFixedTargetRotationAxisInfo                     TargetRotationAxisAnimInfo;                                 // 0x2F00   (0x0030)  
	FSBFixedTargetRotationMoveInfo                     TargetRotationInfo;                                         // 0x2F30   (0x0048)  
	bool                                               bHidePonyTail;                                              // 0x2F78   (0x0001)  
	unsigned char                                      UnknownData319_6[0x3];                                      // 0x2F79   (0x0003)  MISSED
	FRotator                                           RotClimbControlOrig;                                        // 0x2F7C   (0x000C)  
	FVector                                            RotClimbControlUpVector;                                    // 0x2F88   (0x000C)  
	float                                              RuleMoveBlockAreaRadius;                                    // 0x2F94   (0x0004)  
	float                                              RuleMoveBlockAreaZHeight;                                   // 0x2F98   (0x0004)  
	FVector                                            RuleMoveBlockAreaOffset;                                    // 0x2F9C   (0x000C)  
	float                                              RuleMoveBlockTargetCheckRadius;                             // 0x2FA8   (0x0004)  
	int32_t                                            DisableRuleMoveBlockArea;                                   // 0x2FAC   (0x0004)  
	int32_t                                            DisableRuleMove;                                            // 0x2FB0   (0x0004)  
	int32_t                                            DisableRuleMoveRotation;                                    // 0x2FB4   (0x0004)  
	int32_t                                            DisableHuddleUpAction;                                      // 0x2FB8   (0x0004)  
	int32_t                                            DisableEventMove;                                           // 0x2FBC   (0x0004)  
	bool                                               bInvalidRuleMoveTarget;                                     // 0x2FC0   (0x0001)  
	bool                                               bExcludingRuleMoveIgnoreTarget;                             // 0x2FC1   (0x0001)  
	bool                                               bDisableMoveCollisionOverlap;                               // 0x2FC2   (0x0001)  
	bool                                               bDisableControllerInput;                                    // 0x2FC3   (0x0001)  
	bool                                               bIgnoreAttachedSequenceOverlabContrl;                       // 0x2FC4   (0x0001)  
	unsigned char                                      UnknownData320_6[0x3];                                      // 0x2FC5   (0x0003)  MISSED
	TSet<FName>                                        LimitedScanVolumeNameSet;                                   // 0x2FC8   (0x0050)  
	bool                                               bNoScan;                                                    // 0x3018   (0x0001)  
	bool                                               bScanIgnoreBusy;                                            // 0x3019   (0x0001)  
	bool                                               ScanRegistered;                                             // 0x301A   (0x0001)  
	bool                                               bScanTargeted;                                              // 0x301B   (0x0001)  
	float                                              LandingDamageHeight;                                        // 0x301C   (0x0004)  
	double                                             LandedTime;                                                 // 0x3020   (0x0008)  
	FName                                              CurrentStanceName;                                          // 0x3028   (0x0008)  
	bool                                               bCharacterHiddenInGame;                                     // 0x3030   (0x0001)  
	bool                                               bOriginCharacterHiddenInGame;                               // 0x3031   (0x0001)  
	bool                                               bLockCharacterHiddenInGame;                                 // 0x3032   (0x0001)  
	bool                                               bCharacterHiddenInGameUntilEvent;                           // 0x3033   (0x0001)  
	bool                                               bCharacterHiddenInActorStudio;                              // 0x3034   (0x0001)  
	bool                                               bCompletedCreateCharacter;                                  // 0x3035   (0x0001)  
	bool                                               bAlwaysActorTickWhenHidden;                                 // 0x3036   (0x0001)  
	unsigned char                                      UnknownData321_6[0x1];                                      // 0x3037   (0x0001)  MISSED
	float                                              RecreatePhysicsStateTime;                                   // 0x3038   (0x0004)  
	int32_t                                            RecordPhysXTaskCount;                                       // 0x303C   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     FloorCheckCollisionObjectType;                              // 0x3040   (0x0001)  
	bool                                               bIgnoreExistFloor;                                          // 0x3041   (0x0001)  
	bool                                               bExistFloor;                                                // 0x3042   (0x0001)  
	unsigned char                                      UnknownData322_6[0x5];                                      // 0x3043   (0x0005)  MISSED
	TArray<FVector>                                    FloorCheckMoveHistroy;                                      // 0x3048   (0x0010)  
	FName                                              FloorCheckFloorLevelName;                                   // 0x3058   (0x0008)  
	bool                                               bForceFoldWeapon;                                           // 0x3060   (0x0001)  
	bool                                               bForceFoldWeaponStance;                                     // 0x3061   (0x0001)  
	unsigned char                                      UnknownData323_6[0x2];                                      // 0x3062   (0x0002)  MISSED
	FVector                                            CachedCharacterBoundExtents;                                // 0x3064   (0x000C)  
	bool                                               bForceWeaponHide;                                           // 0x3070   (0x0001)  
	unsigned char                                      UnknownData324_6[0x3];                                      // 0x3071   (0x0003)  MISSED
	uint32_t                                           PauseRuleMoveGUID;                                          // 0x3074   (0x0004)  
	TMap<FName, bool>                                  CustomBoolMap;                                              // 0x3078   (0x0050)  
	TMap<FName, float>                                 CustomFloatMap;                                             // 0x30C8   (0x0050)  
	TMap<FName, int32_t>                               ShowKeyTagMap;                                              // 0x3118   (0x0050)  
	TArray<FSBShapeCollisionInfo>                      OriginShapeComponentArray;                                  // 0x3168   (0x0010)  
	TArray<TWeakObjectPtr<UPrimitiveComponent*>>       RuleMoveBlockShapeComponentArray;                           // 0x3178   (0x0010)  
	FVector                                            BodyRelativeLocation;                                       // 0x3188   (0x000C)  
	unsigned char                                      UnknownData325_6[0x4];                                      // 0x3194   (0x0004)  MISSED
	TArray<TWeakObjectPtr<UFXSystemComponent*>>        RegisterFXSystemArray;                                      // 0x3198   (0x0010)  
	FSBCharacterDeactiveMovingInfo                     DeactiveMovingInfo;                                         // 0x31A8   (0x0003)  
	bool                                               bIgnoreHiddenInGame;                                        // 0x31AB   (0x0001)  
	bool                                               bItemInteractionToggle;                                     // 0x31AC   (0x0001)  
	bool                                               bItemInteractionAllow;                                      // 0x31AD   (0x0001)  
	bool                                               bGrabPivotChange;                                           // 0x31AE   (0x0001)  
	bool                                               bGrabRotateLockChange;                                      // 0x31AF   (0x0001)  
	bool                                               bProcessedMoveState;                                        // 0x31B0   (0x0001)  
	unsigned char                                      UnknownData326_6[0x7];                                      // 0x31B1   (0x0007)  MISSED
	class USpotLightComponent*                         DroneSpotLightComp;                                         // 0x31B8   (0x0008)  
	FRotator                                           InitialDroneLightRotation;                                  // 0x31C0   (0x000C)  
	float                                              DroneLocationAddZ;                                          // 0x31CC   (0x0004)  
	class USceneComponent*                             InteractionOriginComponent;                                 // 0x31D0   (0x0008)  
	class USceneComponent*                             InteractionPointComponent;                                  // 0x31D8   (0x0008)  
	class USceneComponent*                             QuestMarkerComponent;                                       // 0x31E0   (0x0008)  
	unsigned char                                      UnknownData327_6[0x8];                                      // 0x31E8   (0x0008)  MISSED
	FHitStopIK                                         HitStopIK;                                                  // 0x31F0   (0x0100)  
	FVector                                            CharacterFixedLocation;                                     // 0x32F0   (0x000C)  
	bool                                               bCharacterFixedLocationOnGround;                            // 0x32FC   (0x0001)  
	bool                                               bCheckCharacterFixedLocationOnGround;                       // 0x32FD   (0x0001)  
	unsigned char                                      UnknownData328_6[0x2];                                      // 0x32FE   (0x0002)  MISSED
	float                                              RecorverSequenceLookAtIKDelayTime;                          // 0x3300   (0x0004)  
	bool                                               bInteractionPauseMetaAI;                                    // 0x3304   (0x0001)  
	bool                                               bActiveLevelSeqLookAtIK;                                    // 0x3305   (0x0001)  
	TEnumAsByte<ESBLookAtIKType>                       EnableLevelSequenceLookAtIKType;                            // 0x3306   (0x0001)  
	unsigned char                                      UnknownData329_6[0x1];                                      // 0x3307   (0x0001)  MISSED
	int32_t                                            SelectedSystemMenu;                                         // 0x3308   (0x0004)  
	bool                                               bIgnoreKeepAllBodiesPhysics;                                // 0x330C   (0x0001)  
	bool                                               bDisableAutoResetPhysics;                                   // 0x330D   (0x0001)  
	unsigned char                                      UnknownData330_6[0x2];                                      // 0x330E   (0x0002)  MISSED
	int32_t                                            AutoResetPhyiscsBasedVelocity;                              // 0x3310   (0x0004)  
	bool                                               bDisableKeepAllBodiesPhysics;                               // 0x3314   (0x0001)  
	bool                                               bResetPhysicsWithWeight;                                    // 0x3315   (0x0001)  
	bool                                               bUseAutoKeepAllBodiesPhysics;                               // 0x3316   (0x0001)  
	unsigned char                                      UnknownData331_6[0x1];                                      // 0x3317   (0x0001)  MISSED
	FName                                              KeepAllBodiesPhysicsTargetBone;                             // 0x3318   (0x0008)  
	float                                              KeepAllBodiesPhysicsDist;                                   // 0x3320   (0x0004)  
	bool                                               bSupportRagdollPoseSnapshot;                                // 0x3324   (0x0001)  
	unsigned char                                      UnknownData332_6[0x3];                                      // 0x3325   (0x0003)  MISSED
	FName                                              PoseSnapshotAdditionalCheckBone;                            // 0x3328   (0x0008)  
	float                                              UnderWaterLinearDamping;                                    // 0x3330   (0x0004)  
	float                                              UnderWaterAngularDamping;                                   // 0x3334   (0x0004)  
	bool                                               bPhysicsForceReInitWhenInitActor;                           // 0x3338   (0x0001)  
	unsigned char                                      UnknownData333_6[0x3];                                      // 0x3339   (0x0003)  MISSED
	FVector                                            LastWaterCheckLocation;                                     // 0x333C   (0x000C)  
	bool                                               bUnderWater;                                                // 0x3348   (0x0001)  
	unsigned char                                      UnknownData334_6[0x3];                                      // 0x3349   (0x0003)  MISSED
	FSBBroadcastSpawnInfo                              BroadcastSpawnInfo;                                         // 0x334C   (0x0028)  
	TEnumAsByte<ESBCharacterObjectStateType>           CharacterObjectState;                                       // 0x3374   (0x0001)  
	unsigned char                                      UnknownData335_6[0x3B];                                     // 0x3375   (0x003B)  MISSED
	class ASBWorldCompositionStreamingBlockingVolume*  CurrentSBWorldCompositionStreamingBlockingVolume;           // 0x33B0   (0x0008)  
	TWeakObjectPtr<class ASBZoneEnvActor*>             ObjectGrab;                                                 // 0x33B8   (0x0008)  
	TMap<int32_t, FGuid>                               GrabTransitGuidMap;                                         // 0x33C0   (0x0050)  
	float                                              GrabTransitEndBlockMoveDuration;                            // 0x3410   (0x0004)  
	float                                              GrabActiveDist;                                             // 0x3414   (0x0004)  
	float                                              GrabActiveYawDiff;                                          // 0x3418   (0x0004)  
	FVector                                            GrabLastForward;                                            // 0x341C   (0x000C)  
	FVector                                            GrabLastLocation;                                           // 0x3428   (0x000C)  
	FVector                                            GrabLastDeltaLoc;                                           // 0x3434   (0x000C)  
	float                                              GrabIKAlpha;                                                // 0x3440   (0x0004)  
	unsigned char                                      UnknownData336_6[0x4];                                      // 0x3444   (0x0004)  MISSED
	class UCurveFloat*                                 CurveGrabIK;                                                // 0x3448   (0x0008)  
	float                                              CurveGrabStartTime;                                         // 0x3450   (0x0004)  
	float                                              CurveGrabLength;                                            // 0x3454   (0x0004)  
	float                                              LastSetComponentTickInterval;                               // 0x3458   (0x0004)  
	unsigned char                                      UnknownData337_6[0x18];                                     // 0x345C   (0x0018)  MISSED
	FRotator                                           ParallelTick_SetActorRotation;                              // 0x3474   (0x000C)  
	bool                                               bPressedInteractionActionInput;                             // 0x3480   (0x0001)  
	bool                                               bEnableInteractionBlock;                                    // 0x3481   (0x0001)  
	TEnumAsByte<ESBInteractionStepState>               InteractionState;                                           // 0x3482   (0x0001)  
	bool                                               bRunningInteractionGraph;                                   // 0x3483   (0x0001)  
	bool                                               bEnableInteractionMove;                                     // 0x3484   (0x0001)  
	unsigned char                                      UnknownData338_6[0x3];                                      // 0x3485   (0x0003)  MISSED
	int32_t                                            NeedPonytailClothConfigUpdate;                              // 0x3488   (0x0004)  
	unsigned char                                      UnknownData339_6[0x4];                                      // 0x348C   (0x0004)  MISSED
	TArray<FName>                                      EquipmentDataList;                                          // 0x3490   (0x0010)  
	bool                                               bInitialCurve;                                              // 0x34A0   (0x0001)  
	unsigned char                                      UnknownData340_6[0x7];                                      // 0x34A1   (0x0007)  MISSED
	class UCurveFloat*                                 JumpToSprintMoveSpeedCurveData;                             // 0x34A8   (0x0008)  
	class UCurveFloat*                                 SlopeJumpToLandMoveSpeedCurveData;                          // 0x34B0   (0x0008)  
	class UCurveFloat*                                 SwimToGroundMoveSpeedCurveData;                             // 0x34B8   (0x0008)  
	class UCurveFloat*                                 JumpToSprintShortMoveSpeedCurveData;                        // 0x34C0   (0x0008)  
	class UCurveFloat*                                 JumpHighToMoveControlDurationData;                          // 0x34C8   (0x0008)  
	TMap<FName, int32_t>                               ActionBindSkillCmdStateMap;                                 // 0x34D0   (0x0050)  
	FName                                              CurrentBulletItemAlias;                                     // 0x3520   (0x0008)  
	FVector                                            LastKeepAllBodiesBoneLocation;                              // 0x3528   (0x000C)  
	unsigned char                                      UnknownData341_6[0xC];                                      // 0x3534   (0x000C)  MISSED
	FQuat                                              LastKeepAllBodiesBoneQuat;                                  // 0x3540   (0x0010)  
	TArray<float>                                      HistoryResetPhysVelocty;                                    // 0x3550   (0x0010)  
	TArray<float>                                      HistoryResetPhysDegree;                                     // 0x3560   (0x0010)  
	int32_t                                            CurrentHistoryResetPhysNum;                                 // 0x3570   (0x0004)  
	int32_t                                            CurrentMaxHistoryResetPhysNum;                              // 0x3574   (0x0004)  
	float                                              RemainResetPhysics;                                         // 0x3578   (0x0004)  
	bool                                               bManualResetPhysics;                                        // 0x357C   (0x0001)  
	bool                                               bResetPhyiscsWithControlWeight;                             // 0x357D   (0x0001)  
	unsigned char                                      UnknownData342_6[0x2];                                      // 0x357E   (0x0002)  MISSED
	float                                              LastSwimmingTime;                                           // 0x3580   (0x0004)  
	unsigned char                                      UnknownData343_6[0x5C];                                     // 0x3584   (0x005C)  MISSED
	FTransform                                         CapsuleComponentPreviousTransform;                          // 0x35E0   (0x0030)  
	FTransform                                         CapsuleComponentCurrentTransform;                           // 0x3610   (0x0030)  
	bool                                               bNeedInitializeAnimation;                                   // 0x3640   (0x0001)  
	bool                                               bRegisterSequentialTick;                                    // 0x3641   (0x0001)  
	unsigned char                                      UnknownData344_6[0x1E];                                     // 0x3642   (0x001E)  MISSED
	int32_t                                            SequenceAnimImmidateUpdateCount;                            // 0x3660   (0x0004)  
	unsigned char                                      UnknownData345_6[0x1C];                                     // 0x3664   (0x001C)  MISSED
	bool                                               bDisableKawaiiPhysicsResetWhenAttachedToLevelSeq;           // 0x3680   (0x0001)  
	unsigned char                                      UnknownData346_6[0x1F];                                     // 0x3681   (0x001F)  MISSED
	float                                              KawaiiPhysicsResetTargetAlpha;                              // 0x36A0   (0x0004)  
	unsigned char                                      UnknownData347_6[0xDC];                                     // 0x36A4   (0x00DC)  MISSED
	TSet<FName>                                        SBActivatedLevelStreamingVolumes;                           // 0x3780   (0x0050)  
	unsigned char                                      UnknownData348_6[0x18];                                     // 0x37D0   (0x0018)  MISSED
	bool                                               bUseSliceSkeletalMesh;                                      // 0x37E8   (0x0001)  
	unsigned char                                      UnknownData349_6[0x7];                                      // 0x37E9   (0x0007)  MISSED
	class USBSliceSkeletalMeshDataAsset*               SliceSkeletalMeshDataAsset;                                 // 0x37F0   (0x0008)  
	class USBSliceSkeletalMeshTemplateDataAsset*       SliceSkeletalMeshTemplateDataAsset;                         // 0x37F8   (0x0008)  
	bool                                               bForceMipLevelsToBeResidentWhenSequencer;                   // 0x3800   (0x0001)  
	unsigned char                                      UnknownData350_6[0x3];                                      // 0x3801   (0x0003)  MISSED
	float                                              SignificanceManagerOptimizationScale;                       // 0x3804   (0x0004)  
	unsigned char                                      UnknownData351_7[0x78];                                     // 0x3808   (0x0078)  MISSED

	/// Functions
	// Function /Script/SB.SBCharacter.WeaponForceHide
	constexpr static const FunctionPointer<ASBCharacter, void, const bool> WeaponForceHide = { 0x26a4a40, 0 }; 
	// Function /Script/SB.SBCharacter.UpdateEyePosition
	constexpr static const FunctionPointer<ASBCharacter, void, const bool> UpdateEyePosition = { 0x26ab5b0, 1 }; 
	// Function /Script/SB.SBCharacter.StartFlyingAction
	constexpr static const FunctionPointer<ASBCharacter, void> StartFlyingAction = { 0x26ac000, 2 }; 
	// Function /Script/SB.SBCharacter.StartClimbing
	constexpr static const FunctionPointer<ASBCharacter, void, const FHitResult> StartClimbing = { 0x26aa630, 3 }; 
	// Function /Script/SB.SBCharacter.SetOverridePonytailClothPhysicsAsset
	constexpr static const FunctionPointer<ASBCharacter, void, const UPhysicsAsset*> SetOverridePonytailClothPhysicsAsset = { 0x26ac190, 4 }; 
	// Function /Script/SB.SBCharacter.SetOverrideClothPhysicsAsset
	constexpr static const FunctionPointer<ASBCharacter, void, const FString, const bool, const bool> SetOverrideClothPhysicsAsset = { 0x26a6ed0, 5 }; 
	// Function /Script/SB.SBCharacter.SetMoveToTargetLocation
	constexpr static const FunctionPointer<ASBCharacter, void, const FVector, const FVector, const float, const float, const USceneComponent*, const float> SetMoveToTargetLocation = { 0x26a8ab0, 6 }; 
	// Function /Script/SB.SBCharacter.SetMoveInputBlockDuration
	constexpr static const FunctionPointer<ASBCharacter, void, const float> SetMoveInputBlockDuration = { 0x26ab2b0, 7 }; 
	// Function /Script/SB.SBCharacter.SetMoveInputBlock
	constexpr static const FunctionPointer<ASBCharacter, void, const bool> SetMoveInputBlock = { 0x26ab3d0, 8 }; 
	// Function /Script/SB.SBCharacter.SetLockupSimulatePhysics
	constexpr static const FunctionPointer<ASBCharacter, void, const bool> SetLockupSimulatePhysics = { 0x26ab9b0, 9 }; 
	// Function /Script/SB.SBCharacter.SetKinematicForShortPonytail
	constexpr static const FunctionPointer<ASBCharacter, void, const bool> SetKinematicForShortPonytail = { 0x26a7550, 10 }; 
	// Function /Script/SB.SBCharacter.SetKeepAllBodiesPhysicsTransform
	constexpr static const FunctionPointer<ASBCharacter, void, const int32_t> SetKeepAllBodiesPhysicsTransform = { 0x26abab0, 11 }; 
	// Function /Script/SB.SBCharacter.SetGlobalMaterialScalarParameterValue
	constexpr static const FunctionPointer<ASBCharacter, void, const FName, const float> SetGlobalMaterialScalarParameterValue = { 0x26a97d0, 12 }; 
	// Function /Script/SB.SBCharacter.SetEnableCollision
	constexpr static const FunctionPointer<ASBCharacter, void, const bool> SetEnableCollision = { 0x26ac070, 13 }; 
	// Function /Script/SB.SBCharacter.SetDroneSpotLight
	constexpr static const FunctionPointer<ASBCharacter, void, const USpotLightComponent*> SetDroneSpotLight = { 0x26a34d0, 14 }; 
	// Function /Script/SB.SBCharacter.SetDollyCamMode
	constexpr static const FunctionPointer<ASBCharacter, void, const bool> SetDollyCamMode = { 0x26a9510, 15 }; 
	// Function /Script/SB.SBCharacter.SetCustomFloat
	constexpr static const FunctionPointer<ASBCharacter, void, const FName, const float> SetCustomFloat = { 0x26a78b0, 16 }; 
	// Function /Script/SB.SBCharacter.SetCustomBool
	constexpr static const FunctionPointer<ASBCharacter, void, const FName, const bool> SetCustomBool = { 0x26a7650, 17 }; 
	// Function /Script/SB.SBCharacter.SetClothAdditiveWindDirection
	constexpr static const FunctionPointer<ASBCharacter, void, const FVector> SetClothAdditiveWindDirection = { 0x26abb90, 18 }; 
	// Function /Script/SB.SBCharacter.SetCamOverrideFovMode
	constexpr static const FunctionPointer<ASBCharacter, void, const float, const float> SetCamOverrideFovMode = { 0x26a91e0, 19 }; 
	// Function /Script/SB.SBCharacter.SetCameraLagSpeed
	constexpr static const FunctionPointer<ASBCharacter, void, const float> SetCameraLagSpeed = { 0x26a5140, 20 }; 
	// Function /Script/SB.SBCharacter.SetBlackboardVectorValue
	constexpr static const FunctionPointer<ASBCharacter, bool, const FName, const FVector> SetBlackboardVectorValue = { 0x26a7d80, 21 }; 
	// Function /Script/SB.SBCharacter.SetBlackboardIntValue
	constexpr static const FunctionPointer<ASBCharacter, bool, const FName, const int32_t> SetBlackboardIntValue = { 0x26a8180, 22 }; 
	// Function /Script/SB.SBCharacter.SetBlackboardFloatValue
	constexpr static const FunctionPointer<ASBCharacter, bool, const FName, const float> SetBlackboardFloatValue = { 0x26a7f90, 23 }; 
	// Function /Script/SB.SBCharacter.SetActiveEventMoveIK
	constexpr static const FunctionPointer<ASBCharacter, void, const bool, const float, const float, const float, const TEnumAsByte<ESBEventMoveIKApplySlot>> SetActiveEventMoveIK = { 0x26a5290, 24 }; 
	// Function /Script/SB.SBCharacter.SetActivateFootIK
	constexpr static const FunctionPointer<ASBCharacter, void, const FString, const bool, const float, const float, const float, const bool, const float> SetActivateFootIK = { 0x26a5a20, 25 }; 
	// Function /Script/SB.SBCharacter.SetActivateFeetIK
	constexpr static const FunctionPointer<ASBCharacter, void, const bool> SetActivateFeetIK = { 0x26a5e80, 26 }; 
	// Function /Script/SB.SBCharacter.ServerRequest_SetMoveInfo_Reliable
	constexpr static const FunctionPointer<ASBCharacter, void, const FSBCharacterMoveInfo> ServerRequest_SetMoveInfo_Reliable = { 0x26a4680, 27 }; 
	// Function /Script/SB.SBCharacter.ServerRequest_SetMoveInfo
	constexpr static const FunctionPointer<ASBCharacter, void, const FSBCharacterMoveInfo> ServerRequest_SetMoveInfo = { 0x26a47c0, 28 }; 
	// Function /Script/SB.SBCharacter.ServerRequest_DoJump
	constexpr static const FunctionPointer<ASBCharacter, void, const bool, const bool, const FVector> ServerRequest_DoJump = { 0x26a4470, 29 }; 
	// Function /Script/SB.SBCharacter.ServerMoveWrapper
	constexpr static const FunctionPointer<ASBCharacter, void, const float, const FVector_NetQuantize10, const FVector_NetQuantize100, const char, const char, const uint32_t, const UPrimitiveComponent*, const FName, const char> ServerMoveWrapper = { 0x26a3bc0, 30 }; 
	// Function /Script/SB.SBCharacter.ServerMoveNoBaseWrapper
	constexpr static const FunctionPointer<ASBCharacter, void, const float, const FVector_NetQuantize10, const FVector_NetQuantize100, const char, const char, const uint32_t, const char> ServerMoveNoBaseWrapper = { 0x26a3700, 31 }; 
	// Function /Script/SB.SBCharacter.RopeSwingPendulumAnglePerAlpha
	constexpr static const FunctionPointer<ASBCharacter, float> RopeSwingPendulumAnglePerAlpha = { 0x26aaf80, 32 }; 
	// Function /Script/SB.SBCharacter.ReturnToDefault
	constexpr static const FunctionPointer<ASBCharacter, void> ReturnToDefault = { 0x2bbb090, 33 }; 
	// Function /Script/SB.SBCharacter.RegisterFXSystem
	constexpr static const FunctionPointer<ASBCharacter, void, const UFXSystemComponent*> RegisterFXSystem = { 0x26a95d0, 34 }; 
	// Function /Script/SB.SBCharacter.OnToggleClimbCam
	constexpr static const FunctionPointer<ASBCharacter, void> OnToggleClimbCam = { 0x11615e0, 35 }; 
	// Function /Script/SB.SBCharacter.OnRep_BroadcastSpawnInfo
	constexpr static const FunctionPointer<ASBCharacter, void> OnRep_BroadcastSpawnInfo = { 0x26a41a0, 36 }; 
	// Function /Script/SB.SBCharacter.OnFinishedLevelSequence
	constexpr static const FunctionPointer<ASBCharacter, void> OnFinishedLevelSequence = { 0x26ac150, 37 }; 
	// Function /Script/SB.SBCharacter.OnCollisionOriginHit
	constexpr static const FunctionPointer<ASBCharacter, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const FVector, const FHitResult&> OnCollisionOriginHit = { 0x26ad2c0, 38 }; 
	// Function /Script/SB.SBCharacter.OnCollisionOriginEndOverlap
	constexpr static const FunctionPointer<ASBCharacter, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t> OnCollisionOriginEndOverlap = { 0x26aca80, 39 }; 
	// Function /Script/SB.SBCharacter.OnCollisionOriginBeginOverlap
	constexpr static const FunctionPointer<ASBCharacter, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t, const bool, const FHitResult&> OnCollisionOriginBeginOverlap = { 0x26acef0, 40 }; 
	// Function /Script/SB.SBCharacter.OnCapsuleComponentEndOverlap
	constexpr static const FunctionPointer<ASBCharacter, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t> OnCapsuleComponentEndOverlap = { 0x26ac370, 41 }; 
	// Function /Script/SB.SBCharacter.OnCapsuleComponentBeginOverlap
	constexpr static const FunctionPointer<ASBCharacter, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t, const bool, const FHitResult&> OnCapsuleComponentBeginOverlap = { 0x26ac6b0, 42 }; 
	// Function /Script/SB.SBCharacter.OnAIMoveComplete
	constexpr static const FunctionPointer<ASBCharacter, void, const FAIRequestID, const TEnumAsByte<EPathFollowingResult>> OnAIMoveComplete = { 0x26a6be0, 43 }; 
	// Function /Script/SB.SBCharacter.NotifyShowEvent
	constexpr static const FunctionPointer<ASBCharacter, void, const FName, const FName> NotifyShowEvent = { 0x2bbb090, 44 }; 
	// Function /Script/SB.SBCharacter.NotifyBPEvent
	constexpr static const FunctionPointer<ASBCharacter, void, const TEnumAsByte<ESBNotifyBPEvent>> NotifyBPEvent = { 0x2bbb090, 45 }; 
	// Function /Script/SB.SBCharacter.NotifyBP_SliceMesh
	constexpr static const FunctionPointer<ASBCharacter, void, const FName, const FName, const FVector&, const FName, const FVector&> NotifyBP_SliceMesh = { 0x2bbb090, 46 }; 
	// Function /Script/SB.SBCharacter.NotifyBP_SetMesh
	constexpr static const FunctionPointer<ASBCharacter, void, const TEnumAsByte<ESBSkelMeshSlot>> NotifyBP_SetMesh = { 0x2bbb090, 47 }; 
	// Function /Script/SB.SBCharacter.NotifyBP_ReleaseActor
	constexpr static const FunctionPointer<ASBCharacter, void> NotifyBP_ReleaseActor = { 0x2bbb090, 48 }; 
	// Function /Script/SB.SBCharacter.NotifyBP_ReInitActor
	constexpr static const FunctionPointer<ASBCharacter, void> NotifyBP_ReInitActor = { 0x2bbb090, 49 }; 
	// Function /Script/SB.SBCharacter.NotifyBP_PostInit
	constexpr static const FunctionPointer<ASBCharacter, void, const TArray<FTransform>&> NotifyBP_PostInit = { 0x2bbb090, 50 }; 
	// Function /Script/SB.SBCharacter.NotifyBP_InitActor
	constexpr static const FunctionPointer<ASBCharacter, void> NotifyBP_InitActor = { 0x2bbb090, 51 }; 
	// Function /Script/SB.SBCharacter.NotifyBP_ChangeCrowdControl
	constexpr static const FunctionPointer<ASBCharacter, void, const TEnumAsByte<ESBNotifyBPCrowdControl>> NotifyBP_ChangeCrowdControl = { 0x2bbb090, 52 }; 
	// Function /Script/SB.SBCharacter.IsWireMoving
	constexpr static const FunctionPointer<ASBCharacter, bool> IsWireMoving = { 0x26ab100, 53 }; 
	// Function /Script/SB.SBCharacter.IsWallRunJumpScaleOverrided
	constexpr static const FunctionPointer<ASBCharacter, bool, const float&> IsWallRunJumpScaleOverrided = { 0x26aa7c0, 54 }; 
	// Function /Script/SB.SBCharacter.IsWallRunJump
	constexpr static const FunctionPointer<ASBCharacter, bool> IsWallRunJump = { 0x26aa8b0, 55 }; 
	// Function /Script/SB.SBCharacter.IsWallRun
	constexpr static const FunctionPointer<ASBCharacter, bool> IsWallRun = { 0x26aaaf0, 56 }; 
	// Function /Script/SB.SBCharacter.IsWallHitAction
	constexpr static const FunctionPointer<ASBCharacter, bool> IsWallHitAction = { 0x26abf80, 57 }; 
	// Function /Script/SB.SBCharacter.IsVisibleSwordTrail
	constexpr static const FunctionPointer<ASBCharacter, bool> IsVisibleSwordTrail = { 0x26a6bc0, 58 }; 
	// Function /Script/SB.SBCharacter.IsValidTachyWingSnapshotDataPath
	constexpr static const FunctionPointer<ASBCharacter, bool> IsValidTachyWingSnapshotDataPath = { 0x26a6aa0, 59 }; 
	// Function /Script/SB.SBCharacter.IsValidMoveRightSmoothValue
	constexpr static const FunctionPointer<ASBCharacter, bool, const bool> IsValidMoveRightSmoothValue = { 0x26a4d50, 60 }; 
	// Function /Script/SB.SBCharacter.IsValidHairSnapshotDataPath
	constexpr static const FunctionPointer<ASBCharacter, bool> IsValidHairSnapshotDataPath = { 0x26a6ad0, 61 }; 
	// Function /Script/SB.SBCharacter.IsUseSlopeMovingCamera
	constexpr static const FunctionPointer<ASBCharacter, bool> IsUseSlopeMovingCamera = { 0x26aad70, 62 }; 
	// Function /Script/SB.SBCharacter.IsUnderWaterSwimming
	constexpr static const FunctionPointer<ASBCharacter, bool> IsUnderWaterSwimming = { 0x26aab90, 63 }; 
	// Function /Script/SB.SBCharacter.IsTPSMode
	constexpr static const FunctionPointer<ASBCharacter, bool> IsTPSMode = { 0x26a6a50, 64 }; 
	// Function /Script/SB.SBCharacter.IsSwimJumping
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSwimJumping = { 0x26aad10, 65 }; 
	// Function /Script/SB.SBCharacter.IsSprintJump
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSprintJump = { 0x26ab1b0, 66 }; 
	// Function /Script/SB.SBCharacter.IsSprint
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSprint = { 0x26ab200, 67 }; 
	// Function /Script/SB.SBCharacter.IsSlopeMoving
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSlopeMoving = { 0x26aada0, 68 }; 
	// Function /Script/SB.SBCharacter.IsSlopeJumpOut
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSlopeJumpOut = { 0x26aad30, 69 }; 
	// Function /Script/SB.SBCharacter.IsSlopeJumping
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSlopeJumping = { 0x26aad50, 70 }; 
	// Function /Script/SB.SBCharacter.IsSlideSlipJumping
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSlideSlipJumping = { 0x26aacf0, 71 }; 
	// Function /Script/SB.SBCharacter.IsSlideSlipFalling
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSlideSlipFalling = { 0x26aacd0, 72 }; 
	// Function /Script/SB.SBCharacter.IsSideRodWallless
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSideRodWallless = { 0x26aac50, 73 }; 
	// Function /Script/SB.SBCharacter.IsSideRodJumping
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSideRodJumping = { 0x26aac70, 74 }; 
	// Function /Script/SB.SBCharacter.IsSideRodFalling
	constexpr static const FunctionPointer<ASBCharacter, bool> IsSideRodFalling = { 0x26aacb0, 75 }; 
	// Function /Script/SB.SBCharacter.IsShowCharacter
	constexpr static const FunctionPointer<ASBCharacter, bool> IsShowCharacter = { 0x113b860, 76 }; 
	// Function /Script/SB.SBCharacter.IsShortPonyTail
	constexpr static const FunctionPointer<ASBCharacter, bool> IsShortPonyTail = { 0x26a7630, 77 }; 
	// Function /Script/SB.SBCharacter.IsRunSpiderNavWay
	constexpr static const FunctionPointer<ASBCharacter, bool> IsRunSpiderNavWay = { 0x26a6d40, 78 }; 
	// Function /Script/SB.SBCharacter.IsRunningSkill
	constexpr static const FunctionPointer<ASBCharacter, bool> IsRunningSkill = { 0x26a7c80, 79 }; 
	// Function /Script/SB.SBCharacter.IsRunningInteraction
	constexpr static const FunctionPointer<ASBCharacter, bool> IsRunningInteraction = { 0x26ac170, 80 }; 
	// Function /Script/SB.SBCharacter.IsRunHuddleUpAction
	constexpr static const FunctionPointer<ASBCharacter, bool> IsRunHuddleUpAction = { 0x26a6e90, 81 }; 
	// Function /Script/SB.SBCharacter.IsRun
	constexpr static const FunctionPointer<ASBCharacter, bool> IsRun = { 0x26aa5b0, 82 }; 
	// Function /Script/SB.SBCharacter.IsRopeSwing
	constexpr static const FunctionPointer<ASBCharacter, bool> IsRopeSwing = { 0x26aaff0, 83 }; 
	// Function /Script/SB.SBCharacter.IsRopeMoving
	constexpr static const FunctionPointer<ASBCharacter, bool> IsRopeMoving = { 0x26ab030, 84 }; 
	// Function /Script/SB.SBCharacter.IsRodJumping
	constexpr static const FunctionPointer<ASBCharacter, bool> IsRodJumping = { 0x26aac90, 85 }; 
	// Function /Script/SB.SBCharacter.IsRagdollSimulate
	constexpr static const FunctionPointer<ASBCharacter, bool, const bool> IsRagdollSimulate = { 0x26a6d90, 86 }; 
	// Function /Script/SB.SBCharacter.IsPlayJumpTransitAnim
	constexpr static const FunctionPointer<ASBCharacter, bool> IsPlayJumpTransitAnim = { 0x26aa550, 87 }; 
	// Function /Script/SB.SBCharacter.IsPlayingRunInteraction
	constexpr static const FunctionPointer<ASBCharacter, bool> IsPlayingRunInteraction = { 0x26a41c0, 88 }; 
	// Function /Script/SB.SBCharacter.IsPlayableWhenLevelSequence
	constexpr static const FunctionPointer<ASBCharacter, bool> IsPlayableWhenLevelSequence = { 0x26a6670, 89 }; 
	// Function /Script/SB.SBCharacter.IsPhotoModeFacialAnimationEnabled
	constexpr static const FunctionPointer<ASBCharacter, bool> IsPhotoModeFacialAnimationEnabled = { 0x26a65d0, 90 }; 
	// Function /Script/SB.SBCharacter.IsPhotoModeDefaultWeaponSnapshot
	constexpr static const FunctionPointer<ASBCharacter, bool> IsPhotoModeDefaultWeaponSnapshot = { 0x26a6b00, 91 }; 
	// Function /Script/SB.SBCharacter.IsPhotoModeDefaultSnapshot
	constexpr static const FunctionPointer<ASBCharacter, bool> IsPhotoModeDefaultSnapshot = { 0x26a6b20, 92 }; 
	// Function /Script/SB.SBCharacter.IsOverrideBlendSpaceUpper
	constexpr static const FunctionPointer<ASBCharacter, bool> IsOverrideBlendSpaceUpper = { 0x26a6510, 93 }; 
	// Function /Script/SB.SBCharacter.IsOverriddenBlendSpacePlayerActive
	constexpr static const FunctionPointer<ASBCharacter, bool> IsOverriddenBlendSpacePlayerActive = { 0x26a64f0, 94 }; 
	// Function /Script/SB.SBCharacter.IsNeedPlayTurnAnim
	constexpr static const FunctionPointer<ASBCharacter, bool> IsNeedPlayTurnAnim = { 0x113b860, 95 }; 
	// Function /Script/SB.SBCharacter.IsMovingTargetOn
	constexpr static const FunctionPointer<ASBCharacter, bool> IsMovingTargetOn = { 0x26aa610, 96 }; 
	// Function /Script/SB.SBCharacter.IsMoving
	constexpr static const FunctionPointer<ASBCharacter, bool> IsMoving = { 0x26aa5e0, 97 }; 
	// Function /Script/SB.SBCharacter.IsMoveInputBlock
	constexpr static const FunctionPointer<ASBCharacter, bool> IsMoveInputBlock = { 0x26ab260, 98 }; 
	// Function /Script/SB.SBCharacter.IsMoveBlockedByWall
	constexpr static const FunctionPointer<ASBCharacter, bool> IsMoveBlockedByWall = { 0x26ac040, 99 }; 
	// Function /Script/SB.SBCharacter.IsMoveBackByTargetOverlap
	constexpr static const FunctionPointer<ASBCharacter, bool> IsMoveBackByTargetOverlap = { 0x26ac2e0, 100 }; 
	// Function /Script/SB.SBCharacter.IsMotionMoving
	constexpr static const FunctionPointer<ASBCharacter, bool> IsMotionMoving = { 0x26ab1d0, 101 }; 
	// Function /Script/SB.SBCharacter.IsMetaAITiredState
	constexpr static const FunctionPointer<ASBCharacter, bool> IsMetaAITiredState = { 0x26a8a30, 102 }; 
	// Function /Script/SB.SBCharacter.IsLockOn
	constexpr static const FunctionPointer<ASBCharacter, bool> IsLockOn = { 0x26a9ec0, 103 }; 
	// Function /Script/SB.SBCharacter.IsJumping
	constexpr static const FunctionPointer<ASBCharacter, bool> IsJumping = { 0x26abd90, 104 }; 
	// Function /Script/SB.SBCharacter.IsJoggingRun
	constexpr static const FunctionPointer<ASBCharacter, bool> IsJoggingRun = { 0x26ab130, 105 }; 
	// Function /Script/SB.SBCharacter.IsHoldSwimming
	constexpr static const FunctionPointer<ASBCharacter, bool> IsHoldSwimming = { 0x26ab0d0, 106 }; 
	// Function /Script/SB.SBCharacter.IsHoldBalanceBeam
	constexpr static const FunctionPointer<ASBCharacter, bool> IsHoldBalanceBeam = { 0x26a8a50, 107 }; 
	// Function /Script/SB.SBCharacter.IsHidePonyTail
	constexpr static const FunctionPointer<ASBCharacter, bool> IsHidePonyTail = { 0x26a4b50, 108 }; 
	// Function /Script/SB.SBCharacter.IsGrabObjectMoving
	constexpr static const FunctionPointer<ASBCharacter, bool> IsGrabObjectMoving = { 0x26aabe0, 109 }; 
	// Function /Script/SB.SBCharacter.IsGlide
	constexpr static const FunctionPointer<ASBCharacter, bool> IsGlide = { 0x26ab190, 110 }; 
	// Function /Script/SB.SBCharacter.IsFlyingAction
	constexpr static const FunctionPointer<ASBCharacter, bool> IsFlyingAction = { 0x26ab170, 111 }; 
	// Function /Script/SB.SBCharacter.IsFishingReel
	constexpr static const FunctionPointer<ASBCharacter, bool> IsFishingReel = { 0x26a66d0, 112 }; 
	// Function /Script/SB.SBCharacter.IsExistFloor
	constexpr static const FunctionPointer<ASBCharacter, bool> IsExistFloor = { 0x26a5100, 113 }; 
	// Function /Script/SB.SBCharacter.IsEventMovingSlidingState
	constexpr static const FunctionPointer<ASBCharacter, bool> IsEventMovingSlidingState = { 0x26aab60, 114 }; 
	// Function /Script/SB.SBCharacter.IsEventMoving
	constexpr static const FunctionPointer<ASBCharacter, bool> IsEventMoving = { 0x26ab060, 115 }; 
	// Function /Script/SB.SBCharacter.IsEnableKneeIK
	constexpr static const FunctionPointer<ASBCharacter, bool> IsEnableKneeIK = { 0x26a6020, 116 }; 
	// Function /Script/SB.SBCharacter.IsDoubleJump
	constexpr static const FunctionPointer<ASBCharacter, bool> IsDoubleJump = { 0x26abd60, 117 }; 
	// Function /Script/SB.SBCharacter.IsDisableLookAtEye
	constexpr static const FunctionPointer<ASBCharacter, bool> IsDisableLookAtEye = { 0x26a9d90, 118 }; 
	// Function /Script/SB.SBCharacter.IsDisableIdleAdditiveAnim
	constexpr static const FunctionPointer<ASBCharacter, bool> IsDisableIdleAdditiveAnim = { 0x26a9d40, 119 }; 
	// Function /Script/SB.SBCharacter.IsDisableFootIKWhenRideOnVehicle
	constexpr static const FunctionPointer<ASBCharacter, bool> IsDisableFootIKWhenRideOnVehicle = { 0x26ab6d0, 120 }; 
	// Function /Script/SB.SBCharacter.IsCurrentStretchSideRodSearch
	constexpr static const FunctionPointer<ASBCharacter, bool> IsCurrentStretchSideRodSearch = { 0x26ab220, 121 }; 
	// Function /Script/SB.SBCharacter.IsClimbing
	constexpr static const FunctionPointer<ASBCharacter, bool> IsClimbing = { 0x113b860, 122 }; 
	// Function /Script/SB.SBCharacter.IsBlockingMode
	constexpr static const FunctionPointer<ASBCharacter, bool> IsBlockingMode = { 0x26a6a70, 123 }; 
	// Function /Script/SB.SBCharacter.IsbDoWallJump
	constexpr static const FunctionPointer<ASBCharacter, bool> IsbDoWallJump = { 0x113b860, 124 }; 
	// Function /Script/SB.SBCharacter.IsBattle
	constexpr static const FunctionPointer<ASBCharacter, bool> IsBattle = { 0x26a9d70, 125 }; 
	// Function /Script/SB.SBCharacter.IsAttackParried
	constexpr static const FunctionPointer<ASBCharacter, bool> IsAttackParried = { 0x26a7c60, 126 }; 
	// Function /Script/SB.SBCharacter.IsAttachedToLevelSequenceWithoutPlayable
	constexpr static const FunctionPointer<ASBCharacter, bool> IsAttachedToLevelSequenceWithoutPlayable = { 0x26a66a0, 127 }; 
	// Function /Script/SB.SBCharacter.IsAllowLookAtTargetWhenLevelSequence
	constexpr static const FunctionPointer<ASBCharacter, bool> IsAllowLookAtTargetWhenLevelSequence = { 0x26a6640, 128 }; 
	// Function /Script/SB.SBCharacter.IsActiveTPSAimOffset
	constexpr static const FunctionPointer<ASBCharacter, bool> IsActiveTPSAimOffset = { 0x26a6a20, 129 }; 
	// Function /Script/SB.SBCharacter.IsActiveOverlapMove
	constexpr static const FunctionPointer<ASBCharacter, bool> IsActiveOverlapMove = { 0x26a7bf0, 130 }; 
	// Function /Script/SB.SBCharacter.IsActiveFullBodyIK_ByName
	constexpr static const FunctionPointer<ASBCharacter, bool, const FString> IsActiveFullBodyIK_ByName = { 0x26a57a0, 131 }; 
	// Function /Script/SB.SBCharacter.IsActiveFullBodyIK
	constexpr static const FunctionPointer<ASBCharacter, bool> IsActiveFullBodyIK = { 0x26a58d0, 132 }; 
	// Function /Script/SB.SBCharacter.IsActiveFootIK
	constexpr static const FunctionPointer<ASBCharacter, bool> IsActiveFootIK = { 0x26a5940, 133 }; 
	// Function /Script/SB.SBCharacter.IsActiveFeetIK
	constexpr static const FunctionPointer<ASBCharacter, bool> IsActiveFeetIK = { 0x26a5910, 134 }; 
	// Function /Script/SB.SBCharacter.IsActiveCustomMovingStanceData
	constexpr static const FunctionPointer<ASBCharacter, bool> IsActiveCustomMovingStanceData = { 0x26abdc0, 135 }; 
	// Function /Script/SB.SBCharacter.IsActiveBoneBlend
	constexpr static const FunctionPointer<ASBCharacter, bool> IsActiveBoneBlend = { 0x26a7b50, 136 }; 
	// Function /Script/SB.SBCharacter.IsAccelSwimUp
	constexpr static const FunctionPointer<ASBCharacter, bool> IsAccelSwimUp = { 0x26ab4d0, 137 }; 
	// Function /Script/SB.SBCharacter.IsAccelSwimDown
	constexpr static const FunctionPointer<ASBCharacter, bool> IsAccelSwimDown = { 0x26ab4b0, 138 }; 
	// Function /Script/SB.SBCharacter.GetWallSlideSideValue
	constexpr static const FunctionPointer<ASBCharacter, float> GetWallSlideSideValue = { 0x26a7ba0, 139 }; 
	// Function /Script/SB.SBCharacter.GetWallRunNormal
	constexpr static const FunctionPointer<ASBCharacter, FVector> GetWallRunNormal = { 0x26aaa50, 140 }; 
	// Function /Script/SB.SBCharacter.GetWallRunDir
	constexpr static const FunctionPointer<ASBCharacter, FVector> GetWallRunDir = { 0x26aa9b0, 141 }; 
	// Function /Script/SB.SBCharacter.GetTPSModeType
	constexpr static const FunctionPointer<ASBCharacter, TEnumAsByte<ESBTPSModeType>> GetTPSModeType = { 0x26a6a00, 142 }; 
	// Function /Script/SB.SBCharacter.GetTPSLookAtWorldLocation
	constexpr static const FunctionPointer<ASBCharacter, FVector, const bool> GetTPSLookAtWorldLocation = { 0x26a67f0, 143 }; 
	// Function /Script/SB.SBCharacter.GetTPSLookAtLocalSpaceDirection
	constexpr static const FunctionPointer<ASBCharacter, FVector> GetTPSLookAtLocalSpaceDirection = { 0x26a6930, 144 }; 
	// Function /Script/SB.SBCharacter.GetTPSLookAtBlendSpaceXY
	constexpr static const FunctionPointer<ASBCharacter, FVector2D> GetTPSLookAtBlendSpaceXY = { 0x26a68f0, 145 }; 
	// Function /Script/SB.SBCharacter.GetSprintSpeedScale
	constexpr static const FunctionPointer<ASBCharacter, float> GetSprintSpeedScale = { 0x26ab4f0, 146 }; 
	// Function /Script/SB.SBCharacter.GetSequencerAnimMode
	constexpr static const FunctionPointer<ASBCharacter, bool> GetSequencerAnimMode = { 0x26a6620, 147 }; 
	// Function /Script/SB.SBCharacter.GetSelfieAnimBSValue
	constexpr static const FunctionPointer<ASBCharacter, float> GetSelfieAnimBSValue = { 0x26a4fd0, 148 }; 
	// Function /Script/SB.SBCharacter.GetSBSpeedForAnimGraph
	constexpr static const FunctionPointer<ASBCharacter, float> GetSBSpeedForAnimGraph = { 0x26a7bc0, 149 }; 
	// Function /Script/SB.SBCharacter.GetSBSkeletalMeshComponent
	constexpr static const FunctionPointer<ASBCharacter, USBSkeletalMeshComponent*, const TEnumAsByte<ESBSkelMeshSlot>> GetSBSkeletalMeshComponent = { 0x26a7130, 150 }; 
	// Function /Script/SB.SBCharacter.GetSBMovementComponent
	constexpr static const FunctionPointer<ASBCharacter, USBCharacterMovementComponent*> GetSBMovementComponent = { 0x26a7cc0, 151 }; 
	// Function /Script/SB.SBCharacter.GetSBCharacterRightVector
	constexpr static const FunctionPointer<ASBCharacter, FVector> GetSBCharacterRightVector = { 0x26aa8d0, 152 }; 
	// Function /Script/SB.SBCharacter.GetRunInputDuration
	constexpr static const FunctionPointer<ASBCharacter, float> GetRunInputDuration = { 0x26ac310, 153 }; 
	// Function /Script/SB.SBCharacter.GetPoseSnapBlendWeight
	constexpr static const FunctionPointer<ASBCharacter, float> GetPoseSnapBlendWeight = { 0x26a6d70, 154 }; 
	// Function /Script/SB.SBCharacter.GetPoseName_PhotoMode
	constexpr static const FunctionPointer<ASBCharacter, FName> GetPoseName_PhotoMode = { 0x26a6b40, 155 }; 
	// Function /Script/SB.SBCharacter.GetPonytailMeshName
	constexpr static const FunctionPointer<ASBCharacter, FName> GetPonytailMeshName = { 0x26a6060, 156 }; 
	// Function /Script/SB.SBCharacter.GetPhotoModeFacialAnimation
	constexpr static const FunctionPointer<ASBCharacter, UAnimSequence*> GetPhotoModeFacialAnimation = { 0x26a6540, 157 }; 
	// Function /Script/SB.SBCharacter.GetOverrideFootStepPhySurface
	constexpr static const FunctionPointer<ASBCharacter, TEnumAsByte<EPhysicalSurface>, const TEnumAsByte<EPhysicalSurface>> GetOverrideFootStepPhySurface = { 0x26a4ff0, 158 }; 
	// Function /Script/SB.SBCharacter.GetMoveToIdleFootPlace
	constexpr static const FunctionPointer<ASBCharacter, TEnumAsByte<ESBCharacterFootPlacement>> GetMoveToIdleFootPlace = { 0x26a7c40, 159 }; 
	// Function /Script/SB.SBCharacter.GetMoveInputDirectionAngle
	constexpr static const FunctionPointer<ASBCharacter, float> GetMoveInputDirectionAngle = { 0x26a4b70, 160 }; 
	// Function /Script/SB.SBCharacter.GetMoveAnimBlendMode
	constexpr static const FunctionPointer<ASBCharacter, TEnumAsByte<ESBCharacterMoveAnimBlendMode>> GetMoveAnimBlendMode = { 0x26aa580, 161 }; 
	// Function /Script/SB.SBCharacter.GetMetaAIBehaviorStance
	constexpr static const FunctionPointer<ASBCharacter, ESBMetaAIBehaviorStance> GetMetaAIBehaviorStance = { 0x26a8a10, 162 }; 
	// Function /Script/SB.SBCharacter.GetLookAtTargetCharacter
	constexpr static const FunctionPointer<ASBCharacter, ASBCharacter*> GetLookAtTargetCharacter = { 0x26a86f0, 163 }; 
	// Function /Script/SB.SBCharacter.GetLockOnTargetCharacter
	constexpr static const FunctionPointer<ASBCharacter, ASBCharacter*> GetLockOnTargetCharacter = { 0x26a8720, 164 }; 
	// Function /Script/SB.SBCharacter.GetLastMoveType
	constexpr static const FunctionPointer<ASBCharacter, TEnumAsByte<ESBCharacterMoveType>> GetLastMoveType = { 0x26a7c20, 165 }; 
	// Function /Script/SB.SBCharacter.GetKneeIKSearchDistanceForwardR
	constexpr static const FunctionPointer<ASBCharacter, float> GetKneeIKSearchDistanceForwardR = { 0x26a5fc0, 166 }; 
	// Function /Script/SB.SBCharacter.GetKneeIKSearchDistanceForwardL
	constexpr static const FunctionPointer<ASBCharacter, float> GetKneeIKSearchDistanceForwardL = { 0x26a5f80, 167 }; 
	// Function /Script/SB.SBCharacter.GetKneeIKSearchDistanceBackwardR
	constexpr static const FunctionPointer<ASBCharacter, float> GetKneeIKSearchDistanceBackwardR = { 0x26a5fa0, 168 }; 
	// Function /Script/SB.SBCharacter.GetKneeIKSearchDistanceBackwardL
	constexpr static const FunctionPointer<ASBCharacter, float> GetKneeIKSearchDistanceBackwardL = { 0x26a5f60, 169 }; 
	// Function /Script/SB.SBCharacter.GetKneeIKOffset_RToe
	constexpr static const FunctionPointer<ASBCharacter, float> GetKneeIKOffset_RToe = { 0x26a5fe0, 170 }; 
	// Function /Script/SB.SBCharacter.GetKneeIKOffset_RKnee
	constexpr static const FunctionPointer<ASBCharacter, float> GetKneeIKOffset_RKnee = { 0x26a6000, 171 }; 
	// Function /Script/SB.SBCharacter.GetKneeIKOffset_LToe
	constexpr static const FunctionPointer<ASBCharacter, float> GetKneeIKOffset_LToe = { 0x26a5fe0, 172 }; 
	// Function /Script/SB.SBCharacter.GetKneeIKOffset_LKnee
	constexpr static const FunctionPointer<ASBCharacter, float> GetKneeIKOffset_LKnee = { 0x26a6000, 173 }; 
	// Function /Script/SB.SBCharacter.GetKawaiiPhysicsAlpha
	constexpr static const FunctionPointer<ASBCharacter, float> GetKawaiiPhysicsAlpha = { 0x26a6eb0, 174 }; 
	// Function /Script/SB.SBCharacter.GetIdleAdditiveAnimType
	constexpr static const FunctionPointer<ASBCharacter, TEnumAsByte<ESBCharaterAdditiveBodyType>> GetIdleAdditiveAnimType = { 0x26a9d10, 175 }; 
	// Function /Script/SB.SBCharacter.GetIdleAdditiveAnimAlpha
	constexpr static const FunctionPointer<ASBCharacter, float> GetIdleAdditiveAnimAlpha = { 0x26a9c00, 176 }; 
	// Function /Script/SB.SBCharacter.GetHitStopIKData
	constexpr static const FunctionPointer<ASBCharacter, FHitStopIK> GetHitStopIKData = { 0x26a4920, 177 }; 
	// Function /Script/SB.SBCharacter.GetGrabIKAlpha
	constexpr static const FunctionPointer<ASBCharacter, float> GetGrabIKAlpha = { 0x26aabc0, 178 }; 
	// Function /Script/SB.SBCharacter.GetGlobalMaterialVectorParameterValue
	constexpr static const FunctionPointer<ASBCharacter, FVector, const FName> GetGlobalMaterialVectorParameterValue = { 0x26a9ab0, 179 }; 
	// Function /Script/SB.SBCharacter.GetGlobalMaterialScalarParameterValue
	constexpr static const FunctionPointer<ASBCharacter, float, const FName> GetGlobalMaterialScalarParameterValue = { 0x26a9980, 180 }; 
	// Function /Script/SB.SBCharacter.GetGamePadRTriggerAxisValue
	constexpr static const FunctionPointer<ASBCharacter, float> GetGamePadRTriggerAxisValue = { 0x26ac330, 181 }; 
	// Function /Script/SB.SBCharacter.GetGamePadLTriggerAxisValue
	constexpr static const FunctionPointer<ASBCharacter, float> GetGamePadLTriggerAxisValue = { 0x26ac350, 182 }; 
	// Function /Script/SB.SBCharacter.GetFullBodyIkActiveHitPointAngle
	constexpr static const FunctionPointer<ASBCharacter, float> GetFullBodyIkActiveHitPointAngle = { 0x26a56b0, 183 }; 
	// Function /Script/SB.SBCharacter.GetFowardVector
	constexpr static const FunctionPointer<ASBCharacter, FVector, const bool> GetFowardVector = { 0x26a9dc0, 184 }; 
	// Function /Script/SB.SBCharacter.GetFootIKAlphaValue
	constexpr static const FunctionPointer<ASBCharacter, float> GetFootIKAlphaValue = { 0x26a59f0, 185 }; 
	// Function /Script/SB.SBCharacter.GetFishingRodDirection
	constexpr static const FunctionPointer<ASBCharacter, float> GetFishingRodDirection = { 0x26a6760, 186 }; 
	// Function /Script/SB.SBCharacter.GetFishingModeType
	constexpr static const FunctionPointer<ASBCharacter, TEnumAsByte<ESBFishingModeType>> GetFishingModeType = { 0x26a67d0, 187 }; 
	// Function /Script/SB.SBCharacter.GetFishingLookAtBlendSpaceX
	constexpr static const FunctionPointer<ASBCharacter, float> GetFishingLookAtBlendSpaceX = { 0x26a67a0, 188 }; 
	// Function /Script/SB.SBCharacter.GetFeetIKTraceScale
	constexpr static const FunctionPointer<ASBCharacter, float> GetFeetIKTraceScale = { 0x26a5960, 189 }; 
	// Function /Script/SB.SBCharacter.GetFeetIKAlphaValue
	constexpr static const FunctionPointer<ASBCharacter, float> GetFeetIKAlphaValue = { 0x26a59a0, 190 }; 
	// Function /Script/SB.SBCharacter.GetFacialIdleAnimType
	constexpr static const FunctionPointer<ASBCharacter, int32_t> GetFacialIdleAnimType = { 0x26a6ba0, 191 }; 
	// Function /Script/SB.SBCharacter.GetFacialAnimType_PhotoMode
	constexpr static const FunctionPointer<ASBCharacter, int32_t> GetFacialAnimType_PhotoMode = { 0x26a6b80, 192 }; 
	// Function /Script/SB.SBCharacter.GetFacialAnimPosition_PhotoMode
	constexpr static const FunctionPointer<ASBCharacter, float> GetFacialAnimPosition_PhotoMode = { 0x26a6b60, 193 }; 
	// Function /Script/SB.SBCharacter.GetEyeTrackingToCam
	constexpr static const FunctionPointer<ASBCharacter, bool> GetEyeTrackingToCam = { 0x26ab590, 194 }; 
	// Function /Script/SB.SBCharacter.GetEyePosition2D
	constexpr static const FunctionPointer<ASBCharacter, FVector2D> GetEyePosition2D = { 0x26ab690, 195 }; 
	// Function /Script/SB.SBCharacter.GetEventMovingType
	constexpr static const FunctionPointer<ASBCharacter, TEnumAsByte<ESBEventMoveType>> GetEventMovingType = { 0x26aaf60, 196 }; 
	// Function /Script/SB.SBCharacter.GetEventMoveSideValue
	constexpr static const FunctionPointer<ASBCharacter, int32_t> GetEventMoveSideValue = { 0x26aae10, 197 }; 
	// Function /Script/SB.SBCharacter.GetEventMoveIKAlphaValue
	constexpr static const FunctionPointer<ASBCharacter, float, const TEnumAsByte<ESBEventMoveIKApplySlot>&> GetEventMoveIKAlphaValue = { 0x26a55a0, 198 }; 
	// Function /Script/SB.SBCharacter.GetEventMoveIKActivateTime
	constexpr static const FunctionPointer<ASBCharacter, float> GetEventMoveIKActivateTime = { 0x26a6040, 199 }; 
	// Function /Script/SB.SBCharacter.GetDollyCamMode
	constexpr static const FunctionPointer<ASBCharacter, bool, const bool> GetDollyCamMode = { 0x26a9370, 200 }; 
	// Function /Script/SB.SBCharacter.GetCustomPoseSnapBlendWeight
	constexpr static const FunctionPointer<ASBCharacter, float> GetCustomPoseSnapBlendWeight = { 0x26a6d70, 201 }; 
	// Function /Script/SB.SBCharacter.GetCustomFloat
	constexpr static const FunctionPointer<ASBCharacter, float, const FName> GetCustomFloat = { 0x26a7a20, 202 }; 
	// Function /Script/SB.SBCharacter.GetCustomBool
	constexpr static const FunctionPointer<ASBCharacter, bool, const FName> GetCustomBool = { 0x26a77c0, 203 }; 
	// Function /Script/SB.SBCharacter.GetCustomBlendSpaceInput
	constexpr static const FunctionPointer<ASBCharacter, FVector> GetCustomBlendSpaceInput = { 0x26a7b10, 204 }; 
	// Function /Script/SB.SBCharacter.GetCurrentStanceName
	constexpr static const FunctionPointer<ASBCharacter, FName> GetCurrentStanceName = { 0x26a86d0, 205 }; 
	// Function /Script/SB.SBCharacter.GetCurrentSideRodSearchDegreeValue
	constexpr static const FunctionPointer<ASBCharacter, float> GetCurrentSideRodSearchDegreeValue = { 0x26ab240, 206 }; 
	// Function /Script/SB.SBCharacter.GetCurrentRotaionPower
	constexpr static const FunctionPointer<ASBCharacter, float> GetCurrentRotaionPower = { 0x26abd40, 207 }; 
	// Function /Script/SB.SBCharacter.GetCurrentFootPlace
	constexpr static const FunctionPointer<ASBCharacter, TEnumAsByte<ESBCharacterFootPlacement>> GetCurrentFootPlace = { 0x26a7ca0, 208 }; 
	// Function /Script/SB.SBCharacter.GetCurrentCustomAnimByMeshSlotAlpha
	constexpr static const FunctionPointer<ASBCharacter, float, const TEnumAsByte<ESBSkelMeshSlot>> GetCurrentCustomAnimByMeshSlotAlpha = { 0x26a9ef0, 209 }; 
	// Function /Script/SB.SBCharacter.GetCurrentCustomAnimAlpha_Upper
	constexpr static const FunctionPointer<ASBCharacter, float, const int32_t> GetCurrentCustomAnimAlpha_Upper = { 0x26aa270, 210 }; 
	// Function /Script/SB.SBCharacter.GetCurrentCustomAnimAlpha_Lower
	constexpr static const FunctionPointer<ASBCharacter, float, const int32_t> GetCurrentCustomAnimAlpha_Lower = { 0x26aa010, 211 }; 
	// Function /Script/SB.SBCharacter.GetCurrentCustomAnimAlpha
	constexpr static const FunctionPointer<ASBCharacter, float, const int32_t> GetCurrentCustomAnimAlpha = { 0x26aa3e0, 212 }; 
	// Function /Script/SB.SBCharacter.GetCurrentCustomAnimAddtiveAlpha_Upper
	constexpr static const FunctionPointer<ASBCharacter, float> GetCurrentCustomAnimAddtiveAlpha_Upper = { 0x26aa1e0, 213 }; 
	// Function /Script/SB.SBCharacter.GetCurrentCustomAnimAddtiveAlpha
	constexpr static const FunctionPointer<ASBCharacter, float> GetCurrentCustomAnimAddtiveAlpha = { 0x26aa180, 214 }; 
	// Function /Script/SB.SBCharacter.GetCurrentCameraLagSpeed
	constexpr static const FunctionPointer<ASBCharacter, float> GetCurrentCameraLagSpeed = { 0x26a5220, 215 }; 
	// Function /Script/SB.SBCharacter.GetCurrentBulletItemAlias
	constexpr static const FunctionPointer<ASBCharacter, FName> GetCurrentBulletItemAlias = { 0x26a4900, 216 }; 
	// Function /Script/SB.SBCharacter.GetCamOverrideFovMode
	constexpr static const FunctionPointer<ASBCharacter, float> GetCamOverrideFovMode = { 0x26a9180, 217 }; 
	// Function /Script/SB.SBCharacter.GetCameraZoom
	constexpr static const FunctionPointer<ASBCharacter, float> GetCameraZoom = { 0x26a9050, 218 }; 
	// Function /Script/SB.SBCharacter.GetBoneBlendType
	constexpr static const FunctionPointer<ASBCharacter, TEnumAsByte<ESBBoneBlendType>> GetBoneBlendType = { 0x26a7b80, 219 }; 
	// Function /Script/SB.SBCharacter.GetBodyMeshName
	constexpr static const FunctionPointer<ASBCharacter, FName> GetBodyMeshName = { 0x26a6180, 220 }; 
	// Function /Script/SB.SBCharacter.GetBlackboardValue
	constexpr static const FunctionPointer<ASBCharacter, bool, const FName, const int32_t&, const float&, const FVector&> GetBlackboardValue = { 0x26a8360, 221 }; 
	// Function /Script/SB.SBCharacter.GetArriveMetaAIBehaviorNode
	constexpr static const FunctionPointer<ASBCharacter, bool> GetArriveMetaAIBehaviorNode = { 0x26a89f0, 222 }; 
	// Function /Script/SB.SBCharacter.GetAnimLookAtTargetLocation
	constexpr static const FunctionPointer<ASBCharacter, FVector, const TEnumAsByte<ESBLookAtIKType>, const bool, const bool> GetAnimLookAtTargetLocation = { 0x26a62c0, 223 }; 
	// Function /Script/SB.SBCharacter.GetAnimControllerSpringWeight
	constexpr static const FunctionPointer<ASBCharacter, float> GetAnimControllerSpringWeight = { 0x26a6600, 224 }; 
	// Function /Script/SB.SBCharacter.GetAnimControllerFullbodyIKFactor
	constexpr static const FunctionPointer<ASBCharacter, float> GetAnimControllerFullbodyIKFactor = { 0x26a5890, 225 }; 
	// Function /Script/SB.SBCharacter.GetActorBottomLocation
	constexpr static const FunctionPointer<ASBCharacter, FVector> GetActorBottomLocation = { 0x26a7d40, 226 }; 
	// Function /Script/SB.SBCharacter.ForceAllClothNextUpdateTeleportAndReset
	constexpr static const FunctionPointer<ASBCharacter, void> ForceAllClothNextUpdateTeleportAndReset = { 0x26abb70, 227 }; 
	// Function /Script/SB.SBCharacter.ExitVehicle
	constexpr static const FunctionPointer<ASBCharacter, void> ExitVehicle = { 0x26ab6f0, 228 }; 
	// Function /Script/SB.SBCharacter.EventUnderWater
	constexpr static const FunctionPointer<ASBCharacter, void, const FVector> EventUnderWater = { 0x2bbb090, 229 }; 
	// Function /Script/SB.SBCharacter.EventImmidateTickForEditor
	constexpr static const FunctionPointer<ASBCharacter, void> EventImmidateTickForEditor = { 0x2bbb090, 230 }; 
	// Function /Script/SB.SBCharacter.Event_ChangeBattleState
	constexpr static const FunctionPointer<ASBCharacter, void, const bool> Event_ChangeBattleState = { 0x2bbb090, 231 }; 
	// Function /Script/SB.SBCharacter.EnterVehicle
	constexpr static const FunctionPointer<ASBCharacter, void, const AActor*, const bool, const bool, const bool> EnterVehicle = { 0x26ab710, 232 }; 
	// Function /Script/SB.SBCharacter.EndFlyingAction
	constexpr static const FunctionPointer<ASBCharacter, void> EndFlyingAction = { 0x26abfa0, 233 }; 
	// Function /Script/SB.SBCharacter.DeactiveCustomMovingStanceData
	constexpr static const FunctionPointer<ASBCharacter, void> DeactiveCustomMovingStanceData = { 0x26abde0, 234 }; 
	// Function /Script/SB.SBCharacter.ClientBroadcast_SetMoveInfo_Reliable
	constexpr static const FunctionPointer<ASBCharacter, void, const FSBCharacterMoveInfo> ClientBroadcast_SetMoveInfo_Reliable = { 0x26a41f0, 235 }; 
	// Function /Script/SB.SBCharacter.ClientBroadcast_SetMoveInfo
	constexpr static const FunctionPointer<ASBCharacter, void, const FSBCharacterMoveInfo> ClientBroadcast_SetMoveInfo = { 0x26a4330, 236 }; 
	// Function /Script/SB.SBCharacter.ClearNeedPlayTurnAnimFlag
	constexpr static const FunctionPointer<ASBCharacter, void> ClearNeedPlayTurnAnimFlag = { 0x11615e0, 237 }; 
	// Function /Script/SB.SBCharacter.CheckMoveRightSmoothValue
	constexpr static const FunctionPointer<ASBCharacter, bool, const float, const bool> CheckMoveRightSmoothValue = { 0x26a4ba0, 238 }; 
	// Function /Script/SB.SBCharacter.ChangeAttachTarget
	constexpr static const FunctionPointer<ASBCharacter, void, const TEnumAsByte<ESBSkelMeshSlot>, const TEnumAsByte<ESBSkelMeshSlot>, const FName, const float, const float> ChangeAttachTarget = { 0x26a7240, 239 }; 
	// Function /Script/SB.SBCharacter.CancelClimbing
	constexpr static const FunctionPointer<ASBCharacter, void> CancelClimbing = { 0x26aa7a0, 240 }; 
	// Function /Script/SB.SBCharacter.CalcHitEventDirection
	constexpr static const FunctionPointer<ASBCharacter, void, const FVector, const FVector> CalcHitEventDirection = { 0x26a4e40, 241 }; 
	// Function /Script/SB.SBCharacter.CalcAnimSpeedByWalkSpeed
	constexpr static const FunctionPointer<ASBCharacter, float> CalcAnimSpeedByWalkSpeed = { 0x26a8810, 242 }; 
	// Function /Script/SB.SBCharacter.CalcAnimSpeedByRunSpeed
	constexpr static const FunctionPointer<ASBCharacter, float> CalcAnimSpeedByRunSpeed = { 0x26a8900, 243 }; 
	// Function /Script/SB.SBCharacter.CalcAnimSpeedByClimbSpeed
	constexpr static const FunctionPointer<ASBCharacter, float> CalcAnimSpeedByClimbSpeed = { 0x26a8740, 244 }; 
	// Function /Script/SB.SBCharacter.ApplyMeshInfo
	constexpr static const FunctionPointer<ASBCharacter, void, const USBSkeletalMeshComponent*, const TEnumAsByte<ESBSkelMeshSlot>> ApplyMeshInfo = { 0x2bbb090, 245 }; 
	// Function /Script/SB.SBCharacter.ApplyKeepAllBodiesPhysicsTransform
	constexpr static const FunctionPointer<ASBCharacter, void> ApplyKeepAllBodiesPhysicsTransform = { 0x26aba90, 246 }; 
	// Function /Script/SB.SBCharacter.AddCameraZoom
	constexpr static const FunctionPointer<ASBCharacter, void, const float> AddCameraZoom = { 0x26a9070, 247 }; 
	// Function /Script/SB.SBCharacter.ActiveCustomMovingStanceData
	constexpr static const FunctionPointer<ASBCharacter, void, const FSBCharMovingStanceData&> ActiveCustomMovingStanceData = { 0x26abe00, 248 }; 
};

/// Class /Script/SB.SBCharacterActiveVolume
/// Size: 0x0320 (800 bytes) (0x000318 - 0x000320) align n/a MaxSize: 0x0320
class ASBCharacterActiveVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0318   (0x0008)  MISSED
};

/// Struct /Script/SB.SBCharacterCollisionShapeInfo
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align n/a MaxSize: 0x0080
struct FSBCharacterCollisionShapeInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TEnumAsByte<ESBCharacterCollisionShapeType>        ShapeType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	FString                                            SkeletalMeshName;                                           // 0x0010   (0x0010)  
	FName                                              SocketName;                                                 // 0x0020   (0x0008)  
	bool                                               bMeleeAttackCollision;                                      // 0x0028   (0x0001)  
	bool                                               bRangeAttackCollision;                                      // 0x0029   (0x0001)  
	bool                                               bOnlyJustActiveCollision;                                   // 0x002A   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x002B   (0x0001)  MISSED
	float                                              WeakPointDamageAdditiveRate;                                // 0x002C   (0x0004)  
	bool                                               bKeepShapeScale;                                            // 0x0030   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              ShowKeyTag;                                                 // 0x0034   (0x0008)  
	bool                                               bRootAxisRelativeLocation;                                  // 0x003C   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	FVector                                            RelativeLocation;                                           // 0x0040   (0x000C)  
	bool                                               bRootAxisRelativeRotation;                                  // 0x004C   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	FRotator                                           RelativeRotation;                                           // 0x0050   (0x000C)  
	float                                              ValidAngle;                                                 // 0x005C   (0x0004)  
	FRotator                                           ValidAngleRotation;                                         // 0x0060   (0x000C)  
	FVector                                            BoxExtent;                                                  // 0x006C   (0x000C)  
	float                                              CapsuleHalfHeight;                                          // 0x0078   (0x0004)  
	float                                              CapsuleRadius;                                              // 0x007C   (0x0004)  
};

/// Struct /Script/SB.SBCharacterAttackedCollisionGroup
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBCharacterAttackedCollisionGroup
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	bool                                               bDefaultActive;                                             // 0x0008   (0x0001)  
	bool                                               bPhotoMode;                                                 // 0x0009   (0x0001)  
	bool                                               bPhotoModeImportantPart;                                    // 0x000A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x000B   (0x0005)  MISSED
	TArray<FName>                                      ShapeNameArray;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBCharacterCollisionTraceInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBCharacterCollisionTraceInfo
{ 
	FName                                              RootSocketName;                                             // 0x0000   (0x0008)  
	float                                              Thickness;                                                  // 0x0008   (0x0004)  
	bool                                               bUseConstraintBone;                                         // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	TArray<FName>                                      LinkSocketNameArray;                                        // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBCharacterAttackCollisionGroup
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBCharacterAttackCollisionGroup
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	bool                                               bDefaultActive;                                             // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<FName>                                      ShapeNameArray;                                             // 0x0010   (0x0010)  
	TArray<FSBCharacterCollisionTraceInfo>             TraceArray;                                                 // 0x0020   (0x0010)  
	TArray<FName>                                      CollisionComponentNameArray;                                // 0x0030   (0x0010)  
};

/// Struct /Script/SB.SBCharacterPhysicalMaterialInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCharacterPhysicalMaterialInfo
{ 
	FName                                              CollisionGroupName;                                         // 0x0000   (0x0008)  
	class UPhysicalMaterial*                           PhysicalMaterial;                                           // 0x0008   (0x0008)  
};

/// Struct /Script/SB.SBCollisionSocketTransform
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCollisionSocketTransform
{ 
	TArray<FTransform>                                 TransformArray;                                             // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBCollisionAnimationTransform
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FSBCollisionAnimationTransform
{ 
	float                                              FrameRate;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TMap<FName, FSBCollisionSocketTransform>           SocketTransformMap;                                         // 0x0008   (0x0050)  
	TMap<FName, FSBCollisionSocketTransform>           SocketTransformWithConstraintMap;                           // 0x0058   (0x0050)  
	float                                              HitStartAnimationPosition;                                  // 0x00A8   (0x0004)  
	float                                              HitEndAnimationPosition;                                    // 0x00AC   (0x0004)  
};

/// Class /Script/SB.SBCharacterCollisionData
/// Size: 0x00D0 (208 bytes) (0x000030 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBCharacterCollisionData : public UDataAsset
{ 
public:
	TArray<FString>                                    ControlToBlockingCollisionNameArray;                        // 0x0030   (0x0010)  
	TArray<FSBCharacterCollisionShapeInfo>             CollisionShapeInfoArray;                                    // 0x0040   (0x0010)  
	TArray<FSBCharacterAttackedCollisionGroup>         AttackedCollisionGroupArray;                                // 0x0050   (0x0010)  
	TArray<FSBCharacterAttackCollisionGroup>           AttackCollisionGroupArray;                                  // 0x0060   (0x0010)  
	TArray<FSBCharacterPhysicalMaterialInfo>           PhysicalMaterialInfoArray;                                  // 0x0070   (0x0010)  
	TMap<FName, FSBCollisionAnimationTransform>        CollisionAnimationTransformMap;                             // 0x0080   (0x0050)  
};

/// Struct /Script/SB.SBCharacterDialogBoundsSetInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCharacterDialogBoundsSetInfo
{ 
	FVector                                            BoneBoundsOffset;                                           // 0x0000   (0x000C)  
	float                                              BoneBoundRadius;                                            // 0x000C   (0x0004)  
};

/// Class /Script/SB.SBCharacterDialogBoundsSet
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class USBCharacterDialogBoundsSet : public UDataAsset
{ 
public:
	TMap<FName, FSBCharacterDialogBoundsSetInfo>       DialogBoundsMap;                                            // 0x0030   (0x0050)  
};

/// Struct /Script/SB.SBCharacterPoseSnapshotEditorData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCharacterPoseSnapshotEditorData
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	class UAnimSequence*                               AnimSequence;                                               // 0x0008   (0x0008)  
};

/// Class /Script/SB.SBCharacterEditorComponent
/// Size: 0x0150 (336 bytes) (0x0000C0 - 0x000150) align n/a MaxSize: 0x0150
class USBCharacterEditorComponent : public UActorComponent
{ 
public:
	bool                                               bVisibleDronLocation;                                       // 0x00C0   (0x0001)  
	bool                                               bVisibleCharacterBinding;                                   // 0x00C1   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x00C2   (0x0006)  MISSED
	class UBlueprint*                                  BlueprintObject;                                            // 0x00C8   (0x0008)  
	FName                                              BindingSocketName;                                          // 0x00D0   (0x0008)  
	FVector                                            BindingRelativeLocation;                                    // 0x00D8   (0x000C)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x00E4   (0x0004)  MISSED
	class UBlendSpaceBase*                             BindingIdleBlendSpace;                                      // 0x00E8   (0x0008)  
	class UPhysicsAsset*                               BindingPhysicsAsset;                                        // 0x00F0   (0x0008)  
	class ASBCharacter*                                BindingCharacterObject;                                     // 0x00F8   (0x0008)  
	bool                                               bVisibleEyeTracking;                                        // 0x0100   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0101   (0x0003)  MISSED
	FVector                                            EyeOffsetFromHead;                                          // 0x0104   (0x000C)  
	TEnumAsByte<EAxis>                                 EyeForwardAxis;                                             // 0x0110   (0x0001)  
	bool                                               EyeForwardAxisInverse;                                      // 0x0111   (0x0001)  
	TEnumAsByte<EAxis>                                 EyeRightAxis;                                               // 0x0112   (0x0001)  
	bool                                               EyeRightAxisInverse;                                        // 0x0113   (0x0001)  
	float                                              EyeBetweenDistance;                                         // 0x0114   (0x0004)  
	float                                              EyeAngleHorizontal;                                         // 0x0118   (0x0004)  
	float                                              EyeAngleVertical;                                           // 0x011C   (0x0004)  
	class USBCharacterPoseSnapshotDataAsset*           PoseSnapshotData;                                           // 0x0120   (0x0008)  
	class USBCharacterPoseSnapshotDataAsset*           PonytailSnapshotData;                                       // 0x0128   (0x0008)  
	class USBCharacterPoseSnapshotDataAsset*           HairSnapshotData;                                           // 0x0130   (0x0008)  
	class USBCharacterPoseSnapshotDataAsset*           TachyWingSnapshotData;                                      // 0x0138   (0x0008)  
	TArray<FSBCharacterPoseSnapshotEditorData>         PoseArray;                                                  // 0x0140   (0x0010)  
};

/// Struct /Script/SB.SBApplyIKInfo
/// Size: 0x0178 (376 bytes) (0x000000 - 0x000178) align n/a MaxSize: 0x0178
struct FSBApplyIKInfo
{ 
	bool                                               bEnable;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ForwardTraceLength;                                         // 0x0004   (0x0004)  
	float                                              BackTraceLength;                                            // 0x0008   (0x0004)  
	FVector                                            TraceBoxExtent;                                             // 0x000C   (0x000C)  
	FVector                                            AdditiveExtent;                                             // 0x0018   (0x000C)  
	TEnumAsByte<ESBIKTraceDirection>                   DirectionType;                                              // 0x0024   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     CollisionChannel;                                           // 0x0025   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0026   (0x0002)  MISSED
	TArray<TEnumAsByte<ECollisionChannel>>             AddCollisionChannel;                                        // 0x0028   (0x0010)  
	TEnumAsByte<ESBCollisionShape>                     ShapeType;                                                  // 0x0038   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              OffsetBlendTime;                                            // 0x003C   (0x0004)  
	FName                                              ModifyBoneName;                                             // 0x0040   (0x0008)  
	FVector                                            OffsetScale;                                                // 0x0048   (0x000C)  
	float                                              UpdateDistance;                                             // 0x0054   (0x0004)  
	FRuntimeFloatCurve                                 IKOffsetBlendCurve;                                         // 0x0058   (0x0088)  
	FRuntimeFloatCurve                                 DetachBlendCurve;                                           // 0x00E0   (0x0088)  
	TArray<FName>                                      OverrideAdjustBoneList;                                     // 0x0168   (0x0010)  
};

/// Class /Script/SB.SBCharacterEventMovVolume
/// Size: 0x04F0 (1264 bytes) (0x000318 - 0x0004F0) align n/a MaxSize: 0x04F0
class ASBCharacterEventMovVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	FName                                              IdleRunBlendSpaceName;                                      // 0x031C   (0x0008)  
	FName                                              SlideIdleRunBlendSpaceName;                                 // 0x0324   (0x0008)  
	FName                                              StartTransitAnimName;                                       // 0x032C   (0x0008)  
	float                                              StartTransitDuration;                                       // 0x0334   (0x0004)  
	FName                                              EndTransitAnimName;                                         // 0x0338   (0x0008)  
	float                                              EndTransitDuration;                                         // 0x0340   (0x0004)  
	float                                              MiddleTransitDuration;                                      // 0x0344   (0x0004)  
	FName                                              MiddleTransitAnimName;                                      // 0x0348   (0x0008)  
	class ATargetPoint*                                StartTargetPointActor;                                      // 0x0350   (0x0008)  
	class ATargetPoint*                                EndTargetPointActor;                                        // 0x0358   (0x0008)  
	class AActor*                                      EventVisualMeshActor;                                       // 0x0360   (0x0008)  
	bool                                               bMovingUnitBySideToSide;                                    // 0x0368   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0369   (0x0003)  MISSED
	FName                                              MovingUnitBySideToSideForwardAnimName;                      // 0x036C   (0x0008)  
	FName                                              MovingUnitBySideToSideBackwardAnimName;                     // 0x0374   (0x0008)  
	int32_t                                            MoveUnitAnimSequenceRepeatNum;                              // 0x037C   (0x0004)  
	float                                              MoveUnitSize;                                               // 0x0380   (0x0004)  
	float                                              MoveFastUnitSize;                                           // 0x0384   (0x0004)  
	bool                                               bUseMoveForwardVectorFromTargetPoint;                       // 0x0388   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0389   (0x0003)  MISSED
	FVector                                            MoveForwardVector;                                          // 0x038C   (0x000C)  
	float                                              MoveForwardApplyValue;                                      // 0x0398   (0x0004)  
	FVector                                            MoveRightVector;                                            // 0x039C   (0x000C)  
	float                                              MoveRightApplyValue;                                        // 0x03A8   (0x0004)  
	bool                                               bUseSphereRadiusCheck;                                      // 0x03AC   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x03AD   (0x0003)  MISSED
	int32_t                                            BaseMoveAxis;                                               // 0x03B0   (0x0004)  
	bool                                               bUseVolumeAxisForMove;                                      // 0x03B4   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x03B5   (0x0003)  MISSED
	float                                              MovingArmLength;                                            // 0x03B8   (0x0004)  
	TEnumAsByte<ESBEventMoveType>                      EventMoveType;                                              // 0x03BC   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x03BD   (0x0003)  MISSED
	float                                              RodMoveDamping;                                             // 0x03C0   (0x0004)  
	float                                              RodMoveSwingSpeed;                                          // 0x03C4   (0x0004)  
	float                                              RodMoveFrontJumpDegree;                                     // 0x03C8   (0x0004)  
	float                                              RodMoveBackJumpDegree;                                      // 0x03CC   (0x0004)  
	float                                              RodMoveBackJumpLength;                                      // 0x03D0   (0x0004)  
	float                                              RodMoveFallLength;                                          // 0x03D4   (0x0004)  
	bool                                               bEnableSideRodUpJump;                                       // 0x03D8   (0x0001)  
	bool                                               bDisableSideRodJumpLanding;                                 // 0x03D9   (0x0001)  
	bool                                               bEnableSideRodDownAttach;                                   // 0x03DA   (0x0001)  
	unsigned char                                      UnknownData19_6[0x1];                                       // 0x03DB   (0x0001)  MISSED
	float                                              MaxMoveSpeed;                                               // 0x03DC   (0x0004)  
	float                                              JumpLength;                                                 // 0x03E0   (0x0004)  
	bool                                               bApplyGravity;                                              // 0x03E4   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x03E5   (0x0003)  MISSED
	float                                              ApplyGravityMoveTime;                                       // 0x03E8   (0x0004)  
	float                                              GravityAccelSpeedForSec;                                    // 0x03EC   (0x0004)  
	float                                              GravitiedMaxMoveSpeed;                                      // 0x03F0   (0x0004)  
	unsigned char                                      UnknownData21_6[0x4];                                       // 0x03F4   (0x0004)  MISSED
	class UCurveFloat*                                 SlidingSpeedCurve;                                          // 0x03F8   (0x0008)  
	bool                                               bEnableSliding;                                             // 0x0400   (0x0001)  
	unsigned char                                      UnknownData22_6[0x3];                                       // 0x0401   (0x0003)  MISSED
	float                                              EnableCancelJumpDirDegToCharDir;                            // 0x0404   (0x0004)  
	float                                              CancelJumpXYPower;                                          // 0x0408   (0x0004)  
	float                                              InteractionDegree;                                          // 0x040C   (0x0004)  
	FName                                              StartLeaveAnimName;                                         // 0x0410   (0x0008)  
	float                                              StartLeaveDuration;                                         // 0x0418   (0x0004)  
	FName                                              EndLeaveAnimName;                                           // 0x041C   (0x0008)  
	float                                              EndLeaveDuration;                                           // 0x0424   (0x0004)  
	FName                                              MoveFastAnimName;                                           // 0x0428   (0x0008)  
	FName                                              MoveJumpAnimName;                                           // 0x0430   (0x0008)  
	FName                                              MoveJumpMoveAnimName;                                       // 0x0438   (0x0008)  
	FName                                              MoveFallAnimName;                                           // 0x0440   (0x0008)  
	FName                                              MoveTurnAnimName;                                           // 0x0448   (0x0008)  
	float                                              MoveTurnAnimDuration;                                       // 0x0450   (0x0004)  
	FName                                              MoveSlideStartName;                                         // 0x0454   (0x0008)  
	FName                                              MoveSlideStopName;                                          // 0x045C   (0x0008)  
	FName                                              MoveSlideToNormalName;                                      // 0x0464   (0x0008)  
	FName                                              MoveSlideToLandName;                                        // 0x046C   (0x0008)  
	unsigned char                                      UnknownData23_6[0x4];                                       // 0x0474   (0x0004)  MISSED
	class ATargetPoint*                                StartLeavePointActor;                                       // 0x0478   (0x0008)  
	class ATargetPoint*                                EndLeavePointActor;                                         // 0x0480   (0x0008)  
	FSBMapSectorID                                     SectorID;                                                   // 0x0488   (0x0008)  
	bool                                               bIgnoreEventMoveIK;                                         // 0x0490   (0x0001)  
	unsigned char                                      UnknownData24_6[0x7];                                       // 0x0491   (0x0007)  MISSED
	TArray<FSBApplyIKInfo>                             UseIKBoneList;                                              // 0x0498   (0x0010)  
	bool                                               bBlockFBMoveInputDirAtFirst;                                // 0x04A8   (0x0001)  
	unsigned char                                      UnknownData25_6[0x7];                                       // 0x04A9   (0x0007)  MISSED
	class USplineComponent*                            BalanceMovingSplineComponent;                               // 0x04B0   (0x0008)  
	float                                              BalanceMovingSplineAreaRadius;                              // 0x04B8   (0x0004)  
	float                                              BalanceMovingIgnoreDistanceAtStart;                         // 0x04BC   (0x0004)  
	float                                              BalanceMovingIgnoreDistanceAtEnd;                           // 0x04C0   (0x0004)  
	float                                              BalanceBeamMoveInputForwardDegree;                          // 0x04C4   (0x0004)  
	float                                              BalanceMovingHoldStartFallDistance;                         // 0x04C8   (0x0004)  
	bool                                               bDisableHoldBalanceBeam;                                    // 0x04CC   (0x0001)  
	unsigned char                                      UnknownData26_6[0x3];                                       // 0x04CD   (0x0003)  MISSED
	FVector                                            LevelObjOrigin;                                             // 0x04D0   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x04DC   (0x000C)  
	bool                                               bUpdated;                                                   // 0x04E8   (0x0001)  
	unsigned char                                      UnknownData27_7[0x7];                                       // 0x04E9   (0x0007)  MISSED
};

/// Struct /Script/SB.SBCharacterDSocketInfo
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align n/a MaxSize: 0x0034
struct FSBCharacterDSocketInfo
{ 
	FVector                                            RelativeLocation;                                           // 0x0000   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x000C   (0x000C)  
	FVector                                            RelativeScale;                                              // 0x0018   (0x000C)  
	FName                                              SocketName;                                                 // 0x0024   (0x0008)  
	FName                                              BoneName;                                                   // 0x002C   (0x0008)  
};

/// Class /Script/SB.SBCharacterFactorSet
/// Size: 0x00D0 (208 bytes) (0x000030 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBCharacterFactorSet : public UDataAsset
{ 
public:
	TArray<FSBCharacterDSocketInfo>                    DynamicSockets;                                             // 0x0030   (0x0010)  
	TMap<FName, int32_t>                               DynamicSocketNameMap;                                       // 0x0040   (0x0050)  
	float                                              MeshVertexShakingPowerScale;                                // 0x0090   (0x0004)  
	float                                              MeshVertexShakingRadiusScale;                               // 0x0094   (0x0004)  
	float                                              BoneShakePowerScale;                                        // 0x0098   (0x0004)  
	float                                              BoneShakeMaxRadiusScale;                                    // 0x009C   (0x0004)  
	float                                              BoneShakeMinRadiusScale;                                    // 0x00A0   (0x0004)  
	float                                              BoneShakeRadiusFallOffExp;                                  // 0x00A4   (0x0004)  
	float                                              UECameraAnimationScale;                                     // 0x00A8   (0x0004)  
	FName                                              CharacterTypeName;                                          // 0x00AC   (0x0008)  
	float                                              RagdollImpulsePowerMultiply;                                // 0x00B4   (0x0004)  
	float                                              RagdollMassScaleMultiply;                                   // 0x00B8   (0x0004)  
	float                                              RagdollImpulseZValueMultiply;                               // 0x00BC   (0x0004)  
	FString                                            CharacterSubPath;                                           // 0x00C0   (0x0010)  
};

/// Class /Script/SB.SBCharacterFactorSetComponent
/// Size: 0x00D8 (216 bytes) (0x0000C0 - 0x0000D8) align n/a MaxSize: 0x00D8
class USBCharacterFactorSetComponent : public UActorComponent
{ 
public:
	class USBCharacterFactorSet*                       TargetFactorSet;                                            // 0x00C0   (0x0008)  
	TArray<FSBCharacterDSocketInfo>                    DynamicSocketInstances;                                     // 0x00C8   (0x0010)  
};

/// Struct /Script/SB.SBFootStepSetInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBFootStepSetInfo
{ 
	class USBPMaterialParticleSet*                     PMatParticleSet;                                            // 0x0000   (0x0008)  
	FName                                              FootBoneName;                                               // 0x0008   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0010   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x001C   (0x000C)  
	float                                              OverrallParticleScaleMult;                                  // 0x0028   (0x0004)  
	float                                              OverrallDecalScaleMult;                                     // 0x002C   (0x0004)  
	float                                              VolumeMultiplier;                                           // 0x0030   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x0034   (0x0004)  
	bool                                               bAttachSoundToFootBone;                                     // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/SB.SBCharacterFootStepSet
/// Size: 0x00A0 (160 bytes) (0x000030 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBCharacterFootStepSet : public UDataAsset
{ 
public:
	TMap<FName, FSBFootStepSetInfo>                    FootStepInfo;                                               // 0x0030   (0x0050)  
	float                                              MinWaterDepth;                                              // 0x0080   (0x0004)  
	float                                              TraceZLength;                                               // 0x0084   (0x0004)  
	float                                              TraceStartZSubLength;                                       // 0x0088   (0x0004)  
	bool                                               bUseCharacterParticleScale;                                 // 0x008C   (0x0001)  
	bool                                               bUseParticleSocketPosOnly;                                  // 0x008D   (0x0001)  
	bool                                               bUseDecalSocketPosOnly;                                     // 0x008E   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x008F   (0x0001)  MISSED
	FVector                                            SoundRelativeLocation;                                      // 0x0090   (0x000C)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x009C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBActorRootMotionData
/// Size: 0x00E0 (224 bytes) (0x000000 - 0x0000E0) align n/a MaxSize: 0x00E0
struct FSBActorRootMotionData
{ 
	class USBRootMotionData*                           pRootMotionData;                                            // 0x0000   (0x0008)  
	class UCurveVector*                                TranslationCurve;                                           // 0x0008   (0x0008)  
	class UCurveVector*                                RotationCurve;                                              // 0x0010   (0x0008)  
	unsigned char                                      UnknownData01_7[0xC8];                                      // 0x0018   (0x00C8)  MISSED
};

/// Class /Script/SB.SBCharacterMovementComponent
/// Size: 0x10E0 (4320 bytes) (0x000B50 - 0x0010E0) align n/a MaxSize: 0x10E0
class USBCharacterMovementComponent : public UCharacterMovementComponent
{ 
public:
	float                                              RemainCheckFallFlagDuration;                                // 0x0B50   (0x0004)  
	bool                                               bLastCheckFall;                                             // 0x0B54   (0x0001)  
	bool                                               bCheckFallAtNoMoveInput;                                    // 0x0B55   (0x0001)  
	unsigned char                                      UnknownData35_6[0x2];                                       // 0x0B56   (0x0002)  MISSED
	FVector                                            CustomFlyFollowLocation;                                    // 0x0B58   (0x000C)  
	FVector                                            PreCustomFlyFollowLocation;                                 // 0x0B64   (0x000C)  
	FRotator                                           CustomFlyFollowRotation;                                    // 0x0B70   (0x000C)  
	bool                                               bCustomFlyPathFollowRotation2D;                             // 0x0B7C   (0x0001)  
	unsigned char                                      UnknownData36_6[0x3];                                       // 0x0B7D   (0x0003)  MISSED
	float                                              CustomFlyMoveSpeedPow;                                      // 0x0B80   (0x0004)  
	bool                                               bCustomFlyFollowRotationVelocityBase;                       // 0x0B84   (0x0001)  
	bool                                               bCustomFlyMoveDroneMode;                                    // 0x0B85   (0x0001)  
	unsigned char                                      UnknownData37_6[0x2];                                       // 0x0B86   (0x0002)  MISSED
	float                                              MaxClimbingSpeed;                                           // 0x0B88   (0x0004)  
	float                                              MaxSlopeMoveSpeed;                                          // 0x0B8C   (0x0004)  
	float                                              MaxEventMoveSpeed;                                          // 0x0B90   (0x0004)  
	float                                              MaxGrabMoveDefaultSpeed;                                    // 0x0B94   (0x0004)  
	bool                                               bEventMoveApplyGravity;                                     // 0x0B98   (0x0001)  
	unsigned char                                      UnknownData38_6[0x3];                                       // 0x0B99   (0x0003)  MISSED
	float                                              ApplyEventMoveGravityMoveTime;                              // 0x0B9C   (0x0004)  
	float                                              GravitiedAccelSpeedPerSec;                                  // 0x0BA0   (0x0004)  
	float                                              GravitiedMaxEventMoveSpeed;                                 // 0x0BA4   (0x0004)  
	float                                              EventMoveGravityCurrentMoveTime;                            // 0x0BA8   (0x0004)  
	float                                              CurrentEventMoveRodAngleRadian;                             // 0x0BAC   (0x0004)  
	float                                              EventMoveRodArmLength;                                      // 0x0BB0   (0x0004)  
	float                                              EventMoveRodVelocity;                                       // 0x0BB4   (0x0004)  
	bool                                               bBeginEventMoveRodAccel;                                    // 0x0BB8   (0x0001)  
	unsigned char                                      UnknownData39_6[0x3];                                       // 0x0BB9   (0x0003)  MISSED
	FVector                                            EventMoveRodPivot;                                          // 0x0BBC   (0x000C)  
	FVector                                            EventMoveRodVelocityForNormal;                              // 0x0BC8   (0x000C)  
	float                                              EventMoveRodAccelInput;                                     // 0x0BD4   (0x0004)  
	FVector                                            EventMoveSearchSideRodDir;                                  // 0x0BD8   (0x000C)  
	int32_t                                            LastSideRodMoveDir;                                         // 0x0BE4   (0x0004)  
	int32_t                                            LastSideRodMoveAnimIndex;                                   // 0x0BE8   (0x0004)  
	FVector                                            EventMoveRodOrigin;                                         // 0x0BEC   (0x000C)  
	float                                              MaxWallRunSpeed;                                            // 0x0BF8   (0x0004)  
	float                                              MaxFlyingActionSpeed;                                       // 0x0BFC   (0x0004)  
	float                                              FlyingActionSideMoveAttenuation;                            // 0x0C00   (0x0004)  
	float                                              FlyingActionVerticalMoveAttenuation;                        // 0x0C04   (0x0004)  
	float                                              ChangeTargetFowardSensitive;                                // 0x0C08   (0x0004)  
	bool                                               bApplyCustomBuoyancyScaleAtFirstWaterTouch;                 // 0x0C0C   (0x0001)  
	unsigned char                                      UnknownData40_6[0x3];                                       // 0x0C0D   (0x0003)  MISSED
	float                                              RemainBlockChangeSwimState;                                 // 0x0C10   (0x0004)  
	bool                                               bFirstSwimStart;                                            // 0x0C14   (0x0001)  
	unsigned char                                      UnknownData41_6[0x3];                                       // 0x0C15   (0x0003)  MISSED
	float                                              RemainPenetrationDuration;                                  // 0x0C18   (0x0004)  
	FVector                                            LastPenetrationDelta;                                       // 0x0C1C   (0x000C)  
	float                                              HoldPenetrationDuration;                                    // 0x0C28   (0x0004)  
	float                                              HoldPenetrationSpeedPerSec;                                 // 0x0C2C   (0x0004)  
	float                                              SwimUpDownTargetDepth;                                      // 0x0C30   (0x0004)  
	float                                              RemainCustomYawRateDuration;                                // 0x0C34   (0x0004)  
	float                                              CustomYawRate;                                              // 0x0C38   (0x0004)  
	float                                              MaxRunSpeedOverride;                                        // 0x0C3C   (0x0004)  
	float                                              MaxWalkSpeedOverride;                                       // 0x0C40   (0x0004)  
	float                                              MaxWalkSpeedLimit;                                          // 0x0C44   (0x0004)  
	float                                              MaxGuardRunSpeed;                                           // 0x0C48   (0x0004)  
	float                                              MaxLockOnRunSpeed;                                          // 0x0C4C   (0x0004)  
	float                                              MaxLockOnWalkSpeed;                                         // 0x0C50   (0x0004)  
	float                                              MaxJoggingRunSpeed;                                         // 0x0C54   (0x0004)  
	float                                              SprintBurstSpeedScale;                                      // 0x0C58   (0x0004)  
	float                                              SprintBurstDuration;                                        // 0x0C5C   (0x0004)  
	float                                              RemainSprintBurstDuration;                                  // 0x0C60   (0x0004)  
	float                                              FallSlideControl;                                           // 0x0C64   (0x0004)  
	float                                              SprintSpeedScale;                                           // 0x0C68   (0x0004)  
	float                                              ExtraSprintSpeedScale;                                      // 0x0C6C   (0x0004)  
	float                                              LockOnSprintSpeedScale;                                     // 0x0C70   (0x0004)  
	float                                              SprintJumpScale;                                            // 0x0C74   (0x0004)  
	float                                              NormalJumpScale;                                            // 0x0C78   (0x0004)  
	float                                              DoubleJumpScale;                                            // 0x0C7C   (0x0004)  
	float                                              GlideGravityScale;                                          // 0x0C80   (0x0004)  
	float                                              FlyingActionGravityScale;                                   // 0x0C84   (0x0004)  
	float                                              WallRunGravityScale;                                        // 0x0C88   (0x0004)  
	float                                              GlideAirControlScale;                                       // 0x0C8C   (0x0004)  
	bool                                               bDisablePerchRadius;                                        // 0x0C90   (0x0001)  
	bool                                               bSliding;                                                   // 0x0C91   (0x0001)  
	unsigned char                                      UnknownData42_6[0x2];                                       // 0x0C92   (0x0002)  MISSED
	int32_t                                            SlidingValueDirBetweenVelocity;                             // 0x0C94   (0x0004)  
	float                                              MoveStruggleAnimAlpha;                                      // 0x0C98   (0x0004)  
	bool                                               bActiveMoveStruggleAnim;                                    // 0x0C9C   (0x0001)  
	unsigned char                                      UnknownData43_6[0x3];                                       // 0x0C9D   (0x0003)  MISSED
	int32_t                                            DisableMoveStruggleCount;                                   // 0x0CA0   (0x0004)  
	float                                              MoveSpeedScaleOnSliding;                                    // 0x0CA4   (0x0004)  
	float                                              SlidingFriction;                                            // 0x0CA8   (0x0004)  
	FVector                                            SlidingForce;                                               // 0x0CAC   (0x000C)  
	float                                              BackupMaxStepHeight;                                        // 0x0CB8   (0x0004)  
	bool                                               bSlidingSlip;                                               // 0x0CBC   (0x0001)  
	unsigned char                                      UnknownData44_6[0x3];                                       // 0x0CBD   (0x0003)  MISSED
	FVector                                            SlidingSlipCollisionNormal;                                 // 0x0CC0   (0x000C)  
	float                                              RemainSlidingSlipCollisionNormal;                           // 0x0CCC   (0x0004)  
	float                                              CameraDownBoundBasedPhysicMat;                              // 0x0CD0   (0x0004)  
	float                                              RemainSlidingSlipAccelControlDuration;                      // 0x0CD4   (0x0004)  
	float                                              SlidingSlipCurrentDuration;                                 // 0x0CD8   (0x0004)  
	float                                              RemainMaxSpeedToWalkDuration;                               // 0x0CDC   (0x0004)  
	float                                              RemainHoldSlidingSlipDuration;                              // 0x0CE0   (0x0004)  
	bool                                               bCompleteHoldSlidingSlip;                                   // 0x0CE4   (0x0001)  
	bool                                               bFixedSlidingSlipDir;                                       // 0x0CE5   (0x0001)  
	bool                                               bSwiming;                                                   // 0x0CE6   (0x0001)  
	bool                                               bDive;                                                      // 0x0CE7   (0x0001)  
	bool                                               bTransitSwimBeetweenDive;                                   // 0x0CE8   (0x0001)  
	unsigned char                                      UnknownData45_6[0x3];                                       // 0x0CE9   (0x0003)  MISSED
	float                                              CurrentSwimDepthValue;                                      // 0x0CEC   (0x0004)  
	float                                              MaxOverrideCustomMovementSpeed;                             // 0x0CF0   (0x0004)  
	unsigned char                                      UnknownData46_6[0x4];                                       // 0x0CF4   (0x0004)  MISSED
	TArray<class UCurveFloat*>                         MoveSpeedScaleCache;                                        // 0x0CF8   (0x0010)  
	float                                              RemainCustomMoveScaleCurveDuration;                         // 0x0D08   (0x0004)  
	float                                              CustomMoveScaleCurveDuration;                               // 0x0D0C   (0x0004)  
	float                                              RemainSwimAccelerationControlDuration;                      // 0x0D10   (0x0004)  
	float                                              RemainHoldCurrentSprintVelocity;                            // 0x0D14   (0x0004)  
	float                                              AdditiveWalkSpeedScale;                                     // 0x0D18   (0x0004)  
	bool                                               bDisableGravity;                                            // 0x0D1C   (0x0001)  
	unsigned char                                      UnknownData47_6[0x3];                                       // 0x0D1D   (0x0003)  MISSED
	class UCurveFloat*                                 CustomMoveScaleCurve;                                       // 0x0D20   (0x0008)  
	class UCurveFloat*                                 WallRunGravityCurve;                                        // 0x0D28   (0x0008)  
	class UCurveFloat*                                 JumpFallingGravityCurve;                                    // 0x0D30   (0x0008)  
	bool                                               bUseJumpFallingGravityCurve;                                // 0x0D38   (0x0001)  
	unsigned char                                      UnknownData48_6[0x3];                                       // 0x0D39   (0x0003)  MISSED
	float                                              JumpFallingTime;                                            // 0x0D3C   (0x0004)  
	class UCurveFloat*                                 RodDampingCurveFromAngleRadian;                             // 0x0D40   (0x0008)  
	class UCurveVector*                                FallToMoveCurve;                                            // 0x0D48   (0x0008)  
	bool                                               bUseFallToMoveCurve;                                        // 0x0D50   (0x0001)  
	unsigned char                                      UnknownData49_6[0x3];                                       // 0x0D51   (0x0003)  MISSED
	float                                              ComputeFloorSweepRadiusRate;                                // 0x0D54   (0x0004)  
	bool                                               bDisableRotationScaleOnPathWay;                             // 0x0D58   (0x0001)  
	bool                                               bUseRotationScaleByAngle;                                   // 0x0D59   (0x0001)  
	unsigned char                                      UnknownData50_6[0x2];                                       // 0x0D5A   (0x0002)  MISSED
	float                                              RotationMinScaleByMoveAngle;                                // 0x0D5C   (0x0004)  
	bool                                               bUseRotationScaleByMinMaxAngle;                             // 0x0D60   (0x0001)  
	unsigned char                                      UnknownData51_6[0x3];                                       // 0x0D61   (0x0003)  MISSED
	float                                              RotationMinScaleByMinMaxAngle;                              // 0x0D64   (0x0004)  
	float                                              RotationMaxScaleByMinMaxAngle;                              // 0x0D68   (0x0004)  
	float                                              RotationMinAngleMinMaxAngle;                                // 0x0D6C   (0x0004)  
	float                                              RotationMaxAngleByMinMaxAngle;                              // 0x0D70   (0x0004)  
	bool                                               bUseRotationScaleByVelocity;                                // 0x0D74   (0x0001)  
	unsigned char                                      UnknownData52_6[0x3];                                       // 0x0D75   (0x0003)  MISSED
	float                                              RotationMinScaleByVelocity;                                 // 0x0D78   (0x0004)  
	float                                              RotationMaxScaleByVelocity;                                 // 0x0D7C   (0x0004)  
	float                                              RotationMinVelocityByVelocity;                              // 0x0D80   (0x0004)  
	float                                              RotationMaxVelocityByVelocity;                              // 0x0D84   (0x0004)  
	bool                                               bUseRotationScaleByDistance;                                // 0x0D88   (0x0001)  
	unsigned char                                      UnknownData53_6[0x3];                                       // 0x0D89   (0x0003)  MISSED
	float                                              RotationMinScaleByDistance;                                 // 0x0D8C   (0x0004)  
	float                                              RotationMaxScaleByDistance;                                 // 0x0D90   (0x0004)  
	float                                              RotationMinVelocityByDistance;                              // 0x0D94   (0x0004)  
	float                                              RotationMaxVelocityByDistance;                              // 0x0D98   (0x0004)  
	bool                                               bUsScaleRotationOvertime;                                   // 0x0D9C   (0x0001)  
	unsigned char                                      UnknownData54_6[0x3];                                       // 0x0D9D   (0x0003)  MISSED
	float                                              ScaleRotationStartTimeByOvertime;                           // 0x0DA0   (0x0004)  
	float                                              ScaleRotationRateByOvertime;                                // 0x0DA4   (0x0004)  
	float                                              ScaleRotationLimitRateByOvertime;                           // 0x0DA8   (0x0004)  
	float                                              RotationForceScaleWhenBlocking;                             // 0x0DAC   (0x0004)  
	float                                              GrabRotationLerpAlphaDefault;                               // 0x0DB0   (0x0004)  
	float                                              RemainFallToMoveDuration;                                   // 0x0DB4   (0x0004)  
	float                                              FallToMoveSpeedScale;                                       // 0x0DB8   (0x0004)  
	FVector                                            VelocityForFallToMove;                                      // 0x0DBC   (0x000C)  
	FVector                                            TargetCharacterFoward;                                      // 0x0DC8   (0x000C)  
	float                                              TargetCharacterRotationPlayTime;                            // 0x0DD4   (0x0004)  
	FVector                                            TargetCharacterMotionVelocity;                              // 0x0DD8   (0x000C)  
	FVector                                            PathFollowingTargetLocation;                                // 0x0DE4   (0x000C)  
	FVector                                            TargetSprintVelocityForward;                                // 0x0DF0   (0x000C)  
	FVector                                            CurrentSprintVelocityForward;                               // 0x0DFC   (0x000C)  
	bool                                               bUnlockSprintRotChange;                                     // 0x0E08   (0x0001)  
	unsigned char                                      UnknownData55_6[0x7];                                       // 0x0E09   (0x0007)  MISSED
	FVector4                                           LastMoveDirectionWeight;                                    // 0x0E10   (0x0010)  
	FVector                                            TargetCharacterForceTurnFoward;                             // 0x0E20   (0x000C)  
	FRotator                                           TargetCharacterForceTurnRotationRate;                       // 0x0E2C   (0x000C)  
	FVector                                            WallRunDir;                                                 // 0x0E38   (0x000C)  
	FVector                                            WallRunNormal;                                              // 0x0E44   (0x000C)  
	FVector                                            WallHitBounceDirectMove;                                    // 0x0E50   (0x000C)  
	float                                              WallHitBounceDuration;                                      // 0x0E5C   (0x0004)  
	float                                              WallHitBounceStartDelay;                                    // 0x0E60   (0x0004)  
	float                                              WallHitBounceTime;                                          // 0x0E64   (0x0004)  
	bool                                               bDisableFalling;                                            // 0x0E68   (0x0001)  
	bool                                               bDisableSlopeMoving;                                        // 0x0E69   (0x0001)  
	unsigned char                                      UnknownData56_6[0x2];                                       // 0x0E6A   (0x0002)  MISSED
	float                                              RequestDisableSlopeMovingDuration;                          // 0x0E6C   (0x0004)  
	float                                              SlopeMoveMaxSpeedControlDuration;                           // 0x0E70   (0x0004)  
	float                                              SlopeMoveMaxSpeedBlendOutDuration;                          // 0x0E74   (0x0004)  
	float                                              RemainSlopeMoveMaxSpeedDuration;                            // 0x0E78   (0x0004)  
	float                                              ControledSlopeMoveMaxSpeed;                                 // 0x0E7C   (0x0004)  
	float                                              CurrentSlopeMaxMoveSpeed;                                   // 0x0E80   (0x0004)  
	unsigned char                                      UnknownData57_6[0xC];                                       // 0x0E84   (0x000C)  MISSED
	FSBActorRootMotionData                             RootMotionData;                                             // 0x0E90   (0x00E0)  
	bool                                               bDisableDesiredRotation;                                    // 0x0F70   (0x0001)  
	bool                                               bTempDisableForwardVectorJump;                              // 0x0F71   (0x0001)  
	unsigned char                                      UnknownData58_6[0x2];                                       // 0x0F72   (0x0002)  MISSED
	FVector                                            PreviousActorLocation;                                      // 0x0F74   (0x000C)  
	unsigned char                                      UnknownData59_6[0x4];                                       // 0x0F80   (0x0004)  MISSED
	float                                              LastVelocityXAxis;                                          // 0x0F84   (0x0004)  
	float                                              LastVelocityYAxis;                                          // 0x0F88   (0x0004)  
	float                                              AnimGraphGetVelocityXAxis;                                  // 0x0F8C   (0x0004)  
	float                                              AnimGraphGetVelocityYAxis;                                  // 0x0F90   (0x0004)  
	bool                                               bRunningMoveToLocation;                                     // 0x0F94   (0x0001)  
	bool                                               bFinishMoveToLocation;                                      // 0x0F95   (0x0001)  
	unsigned char                                      UnknownData60_6[0x2];                                       // 0x0F96   (0x0002)  MISSED
	float                                              MoveToLocationOverrideBrakingDist;                          // 0x0F98   (0x0004)  
	unsigned char                                      UnknownData61_6[0x14];                                      // 0x0F9C   (0x0014)  MISSED
	bool                                               bMoveToLocationWaitFinishCustomAnim;                        // 0x0FB0   (0x0001)  
	bool                                               bMoveToLocationUseSpeedAnimGraph;                           // 0x0FB1   (0x0001)  
	unsigned char                                      UnknownData62_6[0x2];                                       // 0x0FB2   (0x0002)  MISSED
	FVector                                            MoveToTargetLocation;                                       // 0x0FB4   (0x000C)  
	FVector                                            MoveToBrakingEndLocation;                                   // 0x0FC0   (0x000C)  
	FVector                                            MoveToPrevActorLocation;                                    // 0x0FCC   (0x000C)  
	FVector                                            MoveToDirection;                                            // 0x0FD8   (0x000C)  
	FVector                                            MoveToLocationVector;                                       // 0x0FE4   (0x000C)  
	bool                                               MoveToLocationUseBraking;                                   // 0x0FF0   (0x0001)  
	bool                                               MoveToLocationFinishBraking;                                // 0x0FF1   (0x0001)  
	TEnumAsByte<ESBMoveInputType>                      MoveToLocationBrakingInputType;                             // 0x0FF2   (0x0001)  
	unsigned char                                      UnknownData63_6[0x1];                                       // 0x0FF3   (0x0001)  MISSED
	float                                              MoveToLocationBrakingDistStart;                             // 0x0FF4   (0x0004)  
	float                                              MoveToLocationBrakingDistEnd;                               // 0x0FF8   (0x0004)  
	bool                                               MoveToLocationUseRotation;                                  // 0x0FFC   (0x0001)  
	unsigned char                                      UnknownData64_6[0x3];                                       // 0x0FFD   (0x0003)  MISSED
	FRotator                                           MoveToTargetRotation;                                       // 0x1000   (0x000C)  
	FVector                                            MoveToTargetRotationForward;                                // 0x100C   (0x000C)  
	float                                              MoveToLocationSpeedScale;                                   // 0x1018   (0x0004)  
	float                                              MoveToLocationOverrideAnimSpeed;                            // 0x101C   (0x0004)  
	float                                              MoveToLocationLastAnimSpeed;                                // 0x1020   (0x0004)  
	float                                              MoveToLocationEndAnimRetentionRemainTime;                   // 0x1024   (0x0004)  
	bool                                               MoveToLocationManualStop;                                   // 0x1028   (0x0001)  
	unsigned char                                      UnknownData65_6[0x3];                                       // 0x1029   (0x0003)  MISSED
	FVector                                            MoveToLocationLastVector;                                   // 0x102C   (0x000C)  
	float                                              MoveToLocationLastScale;                                    // 0x1038   (0x0004)  
	FVector                                            LastOnGroundLocation;                                       // 0x103C   (0x000C)  
	TEnumAsByte<EMovementMode>                         PreMovementMode;                                            // 0x1048   (0x0001)  
	char                                               PreCustomMovementMode;                                      // 0x1049   (0x0001)  
	unsigned char                                      UnknownData66_6[0x2];                                       // 0x104A   (0x0002)  MISSED
	uint32_t                                           RefreshFrameCountIgnoredCollisionActors;                    // 0x104C   (0x0004)  
	TArray<class AActor*>                              IgnoredCollisionActors;                                     // 0x1050   (0x0010)  
	float                                              InterpolationTimeAnimAcceleration;                          // 0x1060   (0x0004)  
	FVector                                            InterpolationAnimAcceleration;                              // 0x1064   (0x000C)  
	float                                              CachedMaxSpeed;                                             // 0x1070   (0x0004)  
	bool                                               bMoveAreaLimit;                                             // 0x1074   (0x0001)  
	bool                                               bMoveAreaLimitOutLocation;                                  // 0x1075   (0x0001)  
	unsigned char                                      UnknownData67_6[0x2];                                       // 0x1076   (0x0002)  MISSED
	FVector                                            MoveAreaLimitCenterPosition;                                // 0x1078   (0x000C)  
	float                                              MoveAreaLimitDistance;                                      // 0x1084   (0x0004)  
	uint64_t                                           FallingToWalkingFrameCount;                                 // 0x1088   (0x0008)  
	unsigned char                                      UnknownData68_6[0x28];                                      // 0x1090   (0x0028)  MISSED
	FVector                                            BlendVelocity;                                              // 0x10B8   (0x000C)  
	float                                              BlendVelocityMaxTime;                                       // 0x10C4   (0x0004)  
	float                                              CurrentBlendVelocityTime;                                   // 0x10C8   (0x0004)  
	bool                                               bOnceSlidingSlipAccelControlTimeZero;                       // 0x10CC   (0x0001)  
	bool                                               bIsEnableParallelTick;                                      // 0x10CD   (0x0001)  
	unsigned char                                      UnknownData69_7[0x12];                                      // 0x10CE   (0x0012)  MISSED

	/// Functions
	// Function /Script/SB.SBCharacterMovementComponent.SetControlSlopeMoveSpeed
	constexpr static const FunctionPointer<USBCharacterMovementComponent, void, const float, const float, const float> SetControlSlopeMoveSpeed = { 0x26b8780, 0 }; 
	// Function /Script/SB.SBCharacterMovementComponent.ResetSlidingFlagForBP
	constexpr static const FunctionPointer<USBCharacterMovementComponent, void> ResetSlidingFlagForBP = { 0x26b8760, 1 }; 
	// Function /Script/SB.SBCharacterMovementComponent.IsWalkSlidingSlip
	constexpr static const FunctionPointer<USBCharacterMovementComponent, bool> IsWalkSlidingSlip = { 0x26b8340, 2 }; 
	// Function /Script/SB.SBCharacterMovementComponent.IsWalkSliding
	constexpr static const FunctionPointer<USBCharacterMovementComponent, bool> IsWalkSliding = { 0x26b8360, 3 }; 
	// Function /Script/SB.SBCharacterMovementComponent.IsUnderWater
	constexpr static const FunctionPointer<USBCharacterMovementComponent, bool, const bool> IsUnderWater = { 0x26b8380, 4 }; 
	// Function /Script/SB.SBCharacterMovementComponent.IsEnableSwim
	constexpr static const FunctionPointer<USBCharacterMovementComponent, bool> IsEnableSwim = { 0x26b8470, 5 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetVelocityYAxis
	constexpr static const FunctionPointer<USBCharacterMovementComponent, float, const float> GetVelocityYAxis = { 0x26b8580, 6 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetVelocityXAxis
	constexpr static const FunctionPointer<USBCharacterMovementComponent, float, const float> GetVelocityXAxis = { 0x26b8670, 7 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetVelocity
	constexpr static const FunctionPointer<USBCharacterMovementComponent, float> GetVelocity = { 0x26b84c0, 8 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetSlidingValueDirBetweenVelocity
	constexpr static const FunctionPointer<USBCharacterMovementComponent, int32_t> GetSlidingValueDirBetweenVelocity = { 0x26b8320, 9 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetSBTargetCharacterForwardVector
	constexpr static const FunctionPointer<USBCharacterMovementComponent, FVector> GetSBTargetCharacterForwardVector = { 0x26b82d0, 10 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetSBMaxJumpHeightWithJumpTime
	constexpr static const FunctionPointer<USBCharacterMovementComponent, float> GetSBMaxJumpHeightWithJumpTime = { 0x26b8250, 11 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetSBMaxJumpHeight
	constexpr static const FunctionPointer<USBCharacterMovementComponent, float> GetSBMaxJumpHeight = { 0x26b8290, 12 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetMoveStruggleAnimAlpha
	constexpr static const FunctionPointer<USBCharacterMovementComponent, float> GetMoveStruggleAnimAlpha = { 0x26b8300, 13 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetCurrentSprintVelocityForward
	constexpr static const FunctionPointer<USBCharacterMovementComponent, FVector> GetCurrentSprintVelocityForward = { 0x26b8510, 14 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetAnimAcceleration
	constexpr static const FunctionPointer<USBCharacterMovementComponent, FVector> GetAnimAcceleration = { 0x26b8540, 15 }; 
	// Function /Script/SB.SBCharacterMovementComponent.GetActiveMoveStruggleAnim
	constexpr static const FunctionPointer<USBCharacterMovementComponent, bool> GetActiveMoveStruggleAnim = { 0x26a6620, 16 }; 
};

/// Class /Script/SB.SBCharacterOccluderActor
/// Size: 0x0320 (800 bytes) (0x0002C8 - 0x000320) align n/a MaxSize: 0x0320
class ASBCharacterOccluderActor : public AActor
{ 
public:
	class UBoxComponent*                               BoxComponent;                                               // 0x02C8   (0x0008)  
	bool                                               bCheckEncompassesPlayer;                                    // 0x02D0   (0x0001)  
	bool                                               bRealtime;                                                  // 0x02D1   (0x0001)  
	bool                                               bActiveOccluder;                                            // 0x02D2   (0x0001)  
	bool                                               bKeepCharacterMovementTick;                                 // 0x02D3   (0x0001)  
	unsigned char                                      UnknownData01_7[0x4C];                                      // 0x02D4   (0x004C)  MISSED
};

/// Class /Script/SB.SBCharacterOverlapManager
/// Size: 0x03E0 (992 bytes) (0x0002C8 - 0x0003E0) align n/a MaxSize: 0x03E0
class ASBCharacterOverlapManager : public AActor
{ 
public:
	unsigned char                                      UnknownData01_1[0x118];                                     // 0x02C8   (0x0118)  MISSED

	/// Functions
	// Function /Script/SB.SBCharacterOverlapManager.OnCollisionOriginEndOverlap
	constexpr static const FunctionPointer<ASBCharacterOverlapManager, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t> OnCollisionOriginEndOverlap = { 0x26b9700, 0 }; 
	// Function /Script/SB.SBCharacterOverlapManager.OnCollisionOriginBeginOverlap
	constexpr static const FunctionPointer<ASBCharacterOverlapManager, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t, const bool, const FHitResult&> OnCollisionOriginBeginOverlap = { 0x26b9980, 1 }; 
};

/// Class /Script/SB.SBCharacterOverrideSlopeVolume
/// Size: 0x0368 (872 bytes) (0x000318 - 0x000368) align n/a MaxSize: 0x0368
class ASBCharacterOverrideSlopeVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	bool                                               bActiveVolume;                                              // 0x031C   (0x0001)  
	bool                                               bOverrideMoveControlScaleRatioFromHitNormal;                // 0x031D   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x031E   (0x0002)  MISSED
	float                                              MoveControlScaleRatioFromHitNormal;                         // 0x0320   (0x0004)  
	bool                                               bOverrideSlopeMoveUpSideAutoMoveDegree;                     // 0x0324   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0325   (0x0003)  MISSED
	float                                              SlopeMoveUpSideAutoMoveDegree;                              // 0x0328   (0x0004)  
	bool                                               bOverrideSlopeMoveAutoMoveLeaveExtraDegree;                 // 0x032C   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x032D   (0x0003)  MISSED
	float                                              SlopeMoveAutoMoveLeaveExtraDegree;                          // 0x0330   (0x0004)  
	bool                                               bOverrideEnableMoveInputOnAutoMoveRange;                    // 0x0334   (0x0001)  
	bool                                               bEnableMoveInputOnAutoMoveRange;                            // 0x0335   (0x0001)  
	bool                                               bOverrideJumpLandingCustomValidCheck;                       // 0x0336   (0x0001)  
	bool                                               bUseJumpLandingCustomValidCheck;                            // 0x0337   (0x0001)  
	float                                              JumpLandingDegUpVecToHit;                                   // 0x0338   (0x0004)  
	bool                                               bOverrideEnableSlopeCheckExtraRange;                        // 0x033C   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x033D   (0x0003)  MISSED
	float                                              EnableSlopeCheckExtraRange;                                 // 0x0340   (0x0004)  
	FSBMapSectorID                                     SectorID;                                                   // 0x0344   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x034C   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0358   (0x000C)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x0364   (0x0004)  MISSED
};

/// Struct /Script/SB.SBNiagaraSystemWithOverrideParam
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FSBNiagaraSystemWithOverrideParam
{ 
	FSoftObjectPath                                    NiagaraSystemPath;                                          // 0x0000   (0x0018)  
	TMap<FNiagaraVariableBase, FNiagaraVariant>        InstanceParameterOverrides;                                 // 0x0018   (0x0050)  
};

/// Struct /Script/SB.SBParticleSetInfo
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FSBParticleSetInfo
{ 
	FVector                                            RelativeLocation;                                           // 0x0000   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x000C   (0x000C)  
	float                                              RelativeScale;                                              // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FSBNiagaraSystemWithOverrideParam                  NiagaraSystem;                                              // 0x0020   (0x0068)  
	class UParticleSystem*                             ParticleSystem;                                             // 0x0088   (0x0008)  
	class USoundBase*                                  ParticleSound;                                              // 0x0090   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0098   (0x0004)  
	float                                              PtichMultiplier;                                            // 0x009C   (0x0004)  
	class USoundClass*                                 SoundClassOverride;                                         // 0x00A0   (0x0008)  
	class USoundAttenuation*                           AttenuationOverride;                                        // 0x00A8   (0x0008)  
	class USBVibrationSet*                             VibrationSet;                                               // 0x00B0   (0x0008)  
};

/// Struct /Script/SB.SBParticleSetInfoArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBParticleSetInfoArray
{ 
	TArray<FSBParticleSetInfo>                         Array;                                                      // 0x0000   (0x0010)  
};

/// Class /Script/SB.SBCharacterParticleSet
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class USBCharacterParticleSet : public UDataAsset
{ 
public:
	TMap<FName, FSBParticleSetInfoArray>               Particles;                                                  // 0x0030   (0x0050)  
};

/// Struct /Script/SB.SBCharacterPoseSnapshotClothSimulData
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FSBCharacterPoseSnapshotClothSimulData
{ 
	int32_t                                            MapIndex;                                                   // 0x0000   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FVector>                                    Positions;                                                  // 0x0008   (0x0010)  
	TArray<FVector>                                    Normals;                                                    // 0x0018   (0x0010)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0028   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x0030   (0x0030)  
	FTransform                                         ComponentRelativeTransform;                                 // 0x0060   (0x0030)  
};

/// Struct /Script/SB.SBCharacterPoseSnapshotCloth
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBCharacterPoseSnapshotCloth
{ 
	TEnumAsByte<ESBSkelMeshSlot>                       MeshSlot;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FSBCharacterPoseSnapshotClothSimulData>     ClothSimulDataArray;                                        // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBCharacterPoseSnapshotData
/// Size: 0x00C8 (200 bytes) (0x000000 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FSBCharacterPoseSnapshotData
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TArray<FSBCharacterPoseSnapshotCloth>              ClothArray;                                                 // 0x0008   (0x0010)  
	FPoseSnapshot                                      BodyPoseSnapshot;                                           // 0x0018   (0x0058)  
	FPoseSnapshot                                      WeaponPoseSnapshot;                                         // 0x0070   (0x0058)  
};

/// Class /Script/SB.SBCharacterPoseSnapshotDataAsset
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
class USBCharacterPoseSnapshotDataAsset : public UDataAsset
{ 
public:
	TArray<FSBCharacterPoseSnapshotData>               PoseSnapshotDataAray;                                       // 0x0030   (0x0010)  
	bool                                               bPonytail;                                                  // 0x0040   (0x0001)  
	bool                                               bHair;                                                      // 0x0041   (0x0001)  
	bool                                               bTachyWing;                                                 // 0x0042   (0x0001)  
	unsigned char                                      UnknownData01_7[0x5];                                       // 0x0043   (0x0005)  MISSED
};

/// Struct /Script/SB.SBCharacterSelfiePoseData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBCharacterSelfiePoseData
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FSoftObjectPath                                    BlendSpace;                                                 // 0x0008   (0x0018)  
};

/// Class /Script/SB.SBCharacterSelfiePoseDataAsset
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class USBCharacterSelfiePoseDataAsset : public UDataAsset
{ 
public:
	TArray<FSBCharacterSelfiePoseData>                 SelfiePoseDataAray;                                         // 0x0030   (0x0010)  
};

/// Class /Script/SB.SBCharacterSlopeMovVolume
/// Size: 0x03F0 (1008 bytes) (0x000318 - 0x0003F0) align n/a MaxSize: 0x03F0
class ASBCharacterSlopeMovVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x031C   (0x0004)  MISSED
	class USplineComponent*                            MovingSplineComponent;                                      // 0x0320   (0x0008)  
	TArray<class AActor*>                              MovingSplineMeshActors;                                     // 0x0328   (0x0010)  
	TArray<class UStaticMesh*>                         MovingSplineBaseMeshs;                                      // 0x0338   (0x0010)  
	TArray<FName>                                      MakFromMovingSplineMeshSocketNames;                         // 0x0348   (0x0010)  
	bool                                               bMakFromMovingSplineMeshActor;                              // 0x0358   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x0359   (0x0007)  MISSED
	class USplineComponent*                            MakedMovingSplineComponent;                                 // 0x0360   (0x0008)  
	bool                                               bIgnoreSlopeMovingCancelRayCheck;                           // 0x0368   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0369   (0x0003)  MISSED
	float                                              MovingSplineAreaRadius;                                     // 0x036C   (0x0004)  
	float                                              EndPointMovingStartBlockAreaRadius;                         // 0x0370   (0x0004)  
	FName                                              IdleRunBlendSpaceName;                                      // 0x0374   (0x0008)  
	float                                              MoveForwardScale;                                           // 0x037C   (0x0004)  
	float                                              MoveRightScale;                                             // 0x0380   (0x0004)  
	float                                              SplineForceScale;                                           // 0x0384   (0x0004)  
	float                                              GravityScale;                                               // 0x0388   (0x0004)  
	bool                                               bControlRelativeLocZ;                                       // 0x038C   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x038D   (0x0003)  MISSED
	float                                              RelativeLocZ;                                               // 0x0390   (0x0004)  
	float                                              MoveControlScale;                                           // 0x0394   (0x0004)  
	float                                              MoveControlScaleRatioFromHitNormal;                         // 0x0398   (0x0004)  
	float                                              MoveAcceleration;                                           // 0x039C   (0x0004)  
	float                                              MaxSpeed;                                                   // 0x03A0   (0x0004)  
	float                                              MaxJumpSpeed;                                               // 0x03A4   (0x0004)  
	float                                              MaxToAnotherMovSpeed;                                       // 0x03A8   (0x0004)  
	bool                                               bDisableJump;                                               // 0x03AC   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x03AD   (0x0003)  MISSED
	float                                              EnableSlopeCheckExtraRange;                                 // 0x03B0   (0x0004)  
	bool                                               SlopeMoveJumpLandingCustomValidCheck;                       // 0x03B4   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x03B5   (0x0003)  MISSED
	float                                              SlopeMoveJumpLandingDegUpVecToHit;                          // 0x03B8   (0x0004)  
	bool                                               bOverrideSlopeMoveUpVectorBlendTime;                        // 0x03BC   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x03BD   (0x0003)  MISSED
	float                                              SlopeMoveUpVectorBlendTime;                                 // 0x03C0   (0x0004)  
	int32_t                                            CamDollyIndex;                                              // 0x03C4   (0x0004)  
	FSBMapSectorID                                     SectorID;                                                   // 0x03C8   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x03D0   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x03DC   (0x000C)  
	int32_t                                            LastEnableInteractionSegmentIndex;                          // 0x03E8   (0x0004)  
	int32_t                                            EnableInteractionSegmentSearchRange;                        // 0x03EC   (0x0004)  
};

/// Struct /Script/SB.SBSoundInfo
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FSBSoundInfo
{ 
	class USoundBase*                                  SoundSource;                                                // 0x0000   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0008   (0x0004)  
	float                                              PtichMultiplier;                                            // 0x000C   (0x0004)  
	FName                                              BoneSocketName;                                             // 0x0010   (0x0008)  
	class USoundClass*                                 SoundClassOverride;                                         // 0x0018   (0x0008)  
	class USoundAttenuation*                           AttenuationOverride;                                        // 0x0020   (0x0008)  
	class USBVibrationSet*                             VibrationSet;                                               // 0x0028   (0x0008)  
	bool                                               bPlayFacialAnim;                                            // 0x0030   (0x0001)  
	bool                                               bAbsoluteResourcePath;                                      // 0x0031   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x0032   (0x0006)  MISSED
	FString                                            AnimResourcePath;                                           // 0x0038   (0x0010)  
	float                                              PlayRate;                                                   // 0x0048   (0x0004)  
	float                                              PlayStartTime;                                              // 0x004C   (0x0004)  
	float                                              PlayEndTime;                                                // 0x0050   (0x0004)  
	float                                              PlayBlendInTime;                                            // 0x0054   (0x0004)  
	float                                              PlayBlendOutTime;                                           // 0x0058   (0x0004)  
	int32_t                                            Priority;                                                   // 0x005C   (0x0004)  
	bool                                               bIgnoreStopAnimationWhenEnd;                                // 0x0060   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Struct /Script/SB.SBSoundInfo_HitType
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FSBSoundInfo_HitType
{ 
	TEnumAsByte<ESBCharacterHitSoundType>              HitType;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FSBSoundInfo                                       HitSound;                                                   // 0x0008   (0x0068)  
};

/// Struct /Script/SB.SBSoundInfo_HitArray
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FSBSoundInfo_HitArray
{ 
	TArray<FSBSoundInfo_HitType>                       HitTypeArray;                                               // 0x0000   (0x0010)  
	TMap<int32_t, int32_t>                             FindArrayMaps;                                              // 0x0010   (0x0050)  
};

/// Struct /Script/SB.SBSoundInfo_ConditionBoolType
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSoundInfo_ConditionBoolType
{ 
	TArray<FSBSoundInfo>                               TrueCase;                                                   // 0x0000   (0x0010)  
	TArray<FSBSoundInfo>                               FalseCase;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBSoundInfo_Condition
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSoundInfo_Condition
{ 
	FSBSoundInfo_ConditionBoolType                     IsPlayerCharacterUnderWaterSwimming;                        // 0x0000   (0x0020)  
};

/// Class /Script/SB.SBCharacterSoundSet
/// Size: 0x01C0 (448 bytes) (0x000030 - 0x0001C0) align n/a MaxSize: 0x01C0
class USBCharacterSoundSet : public UDataAsset
{ 
public:
	TMap<FName, FSBSoundInfo_HitArray>                 HitSounds;                                                  // 0x0030   (0x0050)  
	TMap<FName, FSBSoundInfo>                          ReactSounds;                                                // 0x0080   (0x0050)  
	TMap<TEnumAsByte<EPhysicalSurface>, FSBSoundInfo>  EnvHitSounds;                                               // 0x00D0   (0x0050)  
	TMap<FName, FSBSoundInfo>                          VoiceSounds;                                                // 0x0120   (0x0050)  
	TMap<FName, FSBSoundInfo_Condition>                ConditionSounds;                                            // 0x0170   (0x0050)  
};

/// Class /Script/SB.SBCharacterSwimForceVolume
/// Size: 0x0350 (848 bytes) (0x000318 - 0x000350) align n/a MaxSize: 0x0350
class ASBCharacterSwimForceVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	FVector                                            ForceDir;                                                   // 0x031C   (0x000C)  
	float                                              ForceValue;                                                 // 0x0328   (0x0004)  
	FSBMapSectorID                                     SectorID;                                                   // 0x032C   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x0334   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0340   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x034C   (0x0004)  MISSED
};

/// Class /Script/SB.SBCharMovingStanceVolume
/// Size: 0x03D8 (984 bytes) (0x000318 - 0x0003D8) align n/a MaxSize: 0x03D8
class ASBCharMovingStanceVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	bool                                               bActiveVolume;                                              // 0x031C   (0x0001)  
	TEnumAsByte<ESBCharMovingStanceForceType>          ForceType;                                                  // 0x031D   (0x0001)  
	bool                                               bManualForceCenter;                                         // 0x031E   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x031F   (0x0001)  MISSED
	FVector                                            ForceCenter;                                                // 0x0320   (0x000C)  
	float                                              ForceRadius;                                                // 0x032C   (0x0004)  
	bool                                               bEffectInMinRadius;                                         // 0x0330   (0x0001)  
	bool                                               bActiveEffectInVolume;                                      // 0x0331   (0x0001)  
	unsigned char                                      UnknownData09_6[0x2];                                       // 0x0332   (0x0002)  MISSED
	float                                              ForceMinRadius;                                             // 0x0334   (0x0004)  
	FSBTableAliasName                                  EffectVolumeAlias;                                          // 0x0338   (0x000C)  
	float                                              InitialForce;                                               // 0x0344   (0x0004)  
	float                                              ForceDeltaForSec;                                           // 0x0348   (0x0004)  
	float                                              MaxForce;                                                   // 0x034C   (0x0004)  
	class UCurveFloat*                                 MoveMaxSpeedCurveAtDuration;                                // 0x0350   (0x0008)  
	bool                                               bForceOnlyXY;                                               // 0x0358   (0x0001)  
	bool                                               bApplyForceAtCharacterPhysWalking;                          // 0x0359   (0x0001)  
	bool                                               bApplyForceAtCharacterPhysFalling;                          // 0x035A   (0x0001)  
	bool                                               bApplyForceAtCharacterPhysSwimming;                         // 0x035B   (0x0001)  
	bool                                               bUseMoveSpeedScaleCurve;                                    // 0x035C   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x035D   (0x0003)  MISSED
	class UCurveFloat*                                 MoveSpeedScaleCurve;                                        // 0x0360   (0x0008)  
	FRotator                                           MoveSpeedScaleBaseRotation;                                 // 0x0368   (0x000C)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x0374   (0x0004)  MISSED
	class UCurveFloat*                                 MoveSpeedScaleBetweenBaseRot;                               // 0x0378   (0x0008)  
	class AVolume*                                     ContorlMoveSpeedInnerVolume;                                // 0x0380   (0x0008)  
	bool                                               bUseContorlMoveSpeedInnerVolume;                            // 0x0388   (0x0001)  
	bool                                               bBlockSkill;                                                // 0x0389   (0x0001)  
	bool                                               bBlockJump;                                                 // 0x038A   (0x0001)  
	bool                                               bBlockSprint;                                               // 0x038B   (0x0001)  
	bool                                               bBlockMoveInput;                                            // 0x038C   (0x0001)  
	bool                                               bForceWalkingMode;                                          // 0x038D   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x038E   (0x0002)  MISSED
	float                                              NormalAnimRangeDegree;                                      // 0x0390   (0x0004)  
	FName                                              OverrideStanceAnim;                                         // 0x0394   (0x0008)  
	bool                                               bUseMoveStruggleAnim;                                       // 0x039C   (0x0001)  
	bool                                               bBlockMoveTransitAnimAtSturggle;                            // 0x039D   (0x0001)  
	unsigned char                                      UnknownData13_6[0x2];                                       // 0x039E   (0x0002)  MISSED
	float                                              MoveStruggleInDegreeForceToVelocity;                        // 0x03A0   (0x0004)  
	bool                                               bApplySpeedForIdleAnim;                                     // 0x03A4   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x03A5   (0x0003)  MISSED
	float                                              ApplySpeedForIdleAnimScale;                                 // 0x03A8   (0x0004)  
	float                                              ApplySpeedForIdleAnimDegree;                                // 0x03AC   (0x0004)  
	bool                                               bUseShotMoveToIdleDuration;                                 // 0x03B0   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x03B1   (0x0003)  MISSED
	float                                              ShotMoveToIdleDuration;                                     // 0x03B4   (0x0004)  
	FSBMapSectorID                                     SectorID;                                                   // 0x03B8   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x03C0   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x03CC   (0x000C)  
};

/// Struct /Script/SB.SBAutoGameSavePhase
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBAutoGameSavePhase
{ 
	float                                              RemainNextPhaseTime;                                        // 0x0000   (0x0004)  
	bool                                               bDonePreSave;                                               // 0x0004   (0x0001)  
	bool                                               bDoneRealSave;                                              // 0x0005   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0006   (0x0002)  MISSED
	float                                              CurrentPhaseTime;                                           // 0x0008   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            SaveSlotName;                                               // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBSaveLoadContext
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBSaveLoadContext
{ 
	class USBSaveGame*                                 SaveGameData;                                               // 0x0000   (0x0008)  
	class USBSaveGame*                                 OverrideSaveGameData;                                       // 0x0008   (0x0008)  
	FString                                            SlotName;                                                   // 0x0010   (0x0010)  
	bool                                               bTickBasedAutoSave;                                         // 0x0020   (0x0001)  
	bool                                               bShowUI;                                                    // 0x0021   (0x0001)  
	bool                                               bFillAndPending;                                            // 0x0022   (0x0001)  
	bool                                               bLoadAfterDead;                                             // 0x0023   (0x0001)  
	bool                                               bWriteAndPending;                                           // 0x0024   (0x0001)  
	bool                                               bIsPending;                                                 // 0x0025   (0x0001)  
	unsigned char                                      UnknownData01_7[0xA];                                       // 0x0026   (0x000A)  MISSED
};

/// Class /Script/SB.SBPlayerController
/// Size: 0x0850 (2128 bytes) (0x000668 - 0x000850) align n/a MaxSize: 0x0850
class ASBPlayerController : public APlayerController
{ 
public:
	class USBPlayerInput*                              InputHandler;                                               // 0x0668   (0x0008)  
	bool                                               ShowFirstUI;                                                // 0x0670   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x0671   (0x0007)  MISSED
	class UUserWidget*                                 DebugSystemInfoWidget;                                      // 0x0678   (0x0008)  
	unsigned char                                      UnknownData09_6[0x30];                                      // 0x0680   (0x0030)  MISSED
	TMap<FName, char>                                  InputActionStateMap;                                        // 0x06B0   (0x0050)  
	bool                                               bViewportLostFocused;                                       // 0x0700   (0x0001)  
	bool                                               bBlcokControllerInputWhenPlayCameraAnim;                    // 0x0701   (0x0001)  
	unsigned char                                      UnknownData10_6[0x6];                                       // 0x0702   (0x0006)  MISSED
	TArray<class USoundBase*>                          SafeHapticSounds;                                           // 0x0708   (0x0010)  
	bool                                               bUseAutoSave;                                               // 0x0718   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x0719   (0x0003)  MISSED
	float                                              AutoSaveIntervalSec;                                        // 0x071C   (0x0004)  
	float                                              AutoSaveRealSaveStartSec;                                   // 0x0720   (0x0004)  
	float                                              AutoSaveRealSaveDurationSec;                                // 0x0724   (0x0004)  
	FString                                            AutoSaveSlotName;                                           // 0x0728   (0x0010)  
	FString                                            ManualSaveSlotName;                                         // 0x0738   (0x0010)  
	FString                                            SystemSaveSlotName;                                         // 0x0748   (0x0010)  
	int32_t                                            AutoSaveSlotMaxNum;                                         // 0x0758   (0x0004)  
	int32_t                                            LanguageSlotIndex;                                          // 0x075C   (0x0004)  
	bool                                               bUseAudioListenerBoneLoc;                                   // 0x0760   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0761   (0x0003)  MISSED
	FName                                              AudioListenerBoneName;                                      // 0x0764   (0x0008)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x076C   (0x0004)  MISSED
	FSBAutoGameSavePhase                               AutoSavePhase;                                              // 0x0770   (0x0020)  
	FSBSaveLoadContext                                 CurrentSaveContext;                                         // 0x0790   (0x0030)  
	FSBSaveLoadContext                                 CurrentLoadContext;                                         // 0x07C0   (0x0030)  
	unsigned char                                      UnknownData14_6[0x30];                                      // 0x07F0   (0x0030)  MISSED
	TArray<float>                                      DebugInfoTouchTimes;                                        // 0x0820   (0x0010)  
	int32_t                                            DebugInfoTouchCurIndex;                                     // 0x0830   (0x0004)  
	unsigned char                                      UnknownData15_7[0x1C];                                      // 0x0834   (0x001C)  MISSED
};

/// Class /Script/SB.SBCheatManager
/// Size: 0x00F0 (240 bytes) (0x000078 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBCheatManager : public UCheatManager
{ 
public:
	TMap<FName, bool>                                  ToggleCVarCommandLastArg;                                   // 0x0078   (0x0050)  
	int32_t                                            luaIntValue;                                                // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x24];                                      // 0x00CC   (0x0024)  MISSED

	/// Functions
	// Function /Script/SB.SBCheatManager.StopManualLoadingScreen
	constexpr static const FunctionPointer<USBCheatManager, void> StopManualLoadingScreen = { 0x26cda90, 0 }; 
	// Function /Script/SB.SBCheatManager.StartManualLoadingScreen
	constexpr static const FunctionPointer<USBCheatManager, void> StartManualLoadingScreen = { 0x26cdab0, 1 }; 
	// Function /Script/SB.SBCheatManager.SetMaxUndilatedFrameTime
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SetMaxUndilatedFrameTime = { 0x26c6dc0, 2 }; 
	// Function /Script/SB.SBCheatManager.SetFixedFrameRate
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SetFixedFrameRate = { 0x26c7040, 3 }; 
	// Function /Script/SB.SBCheatManager.SBZoneEvent
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBZoneEvent = { 0x26ef970, 4 }; 
	// Function /Script/SB.SBCheatManager.SbWorldObjReInit
	constexpr static const FunctionPointer<USBCheatManager, void> SbWorldObjReInit = { 0x11615e0, 5 }; 
	// Function /Script/SB.SBCheatManager.SBWorldGlobalMotionBlurScale
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const float> SBWorldGlobalMotionBlurScale = { 0x26c75a0, 6 }; 
	// Function /Script/SB.SBCheatManager.SBWorldEnvPostProcessDisable
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBWorldEnvPostProcessDisable = { 0x26c0640, 7 }; 
	// Function /Script/SB.SBCheatManager.SBWorldEnvCounter
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const bool> SBWorldEnvCounter = { 0x26cae60, 8 }; 
	// Function /Script/SB.SBCheatManager.SBWaypoint
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBWaypoint = { 0x26f02a0, 9 }; 
	// Function /Script/SB.SBCheatManager.SBWaveMerge
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float> SBWaveMerge = { 0x26ca610, 10 }; 
	// Function /Script/SB.SBCheatManager.SBWarpWorld
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBWarpWorld = { 0x26de830, 11 }; 
	// Function /Script/SB.SBCheatManager.SBWarpPosition
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float, const float, const bool> SBWarpPosition = { 0x26df0e0, 12 }; 
	// Function /Script/SB.SBCheatManager.SBWarpPlayer
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBWarpPlayer = { 0x26e2100, 13 }; 
	// Function /Script/SB.SBCheatManager.SBWarpCampToPointName
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FName> SBWarpCampToPointName = { 0x26decd0, 14 }; 
	// Function /Script/SB.SBCheatManager.SBWarpCampToLocation
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const float, const float, const float> SBWarpCampToLocation = { 0x26de990, 15 }; 
	// Function /Script/SB.SBCheatManager.SBWarpCamp
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBWarpCamp = { 0x26def00, 16 }; 
	// Function /Script/SB.SBCheatManager.SBVisibleLoadingScreen
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBVisibleLoadingScreen = { 0x26a9510, 17 }; 
	// Function /Script/SB.SBCheatManager.SBVariationText
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const FString> SBVariationText = { 0x26dcff0, 18 }; 
	// Function /Script/SB.SBCheatManager.SBValidatePakDuplication
	constexpr static const FunctionPointer<USBCheatManager, void> SBValidatePakDuplication = { 0x11615e0, 19 }; 
	// Function /Script/SB.SBCheatManager.SBValidatePakCount
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBValidatePakCount = { 0x26bcde0, 20 }; 
	// Function /Script/SB.SBCheatManager.SBUsePDODitherAlpha
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBUsePDODitherAlpha = { 0x26bff80, 21 }; 
	// Function /Script/SB.SBCheatManager.SBUseOcclusionDebugging
	constexpr static const FunctionPointer<USBCheatManager, void> SBUseOcclusionDebugging = { 0x26d8070, 22 }; 
	// Function /Script/SB.SBCheatManager.SBUpdateNierDLCUI
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBUpdateNierDLCUI = { 0x26c0210, 23 }; 
	// Function /Script/SB.SBCheatManager.SBUpdateMoveSpeed
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBUpdateMoveSpeed = { 0x26e2f20, 24 }; 
	// Function /Script/SB.SBCheatManager.SBUpdateCouponUserInfo
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const int32_t> SBUpdateCouponUserInfo = { 0x26c8f40, 25 }; 
	// Function /Script/SB.SBCheatManager.SBUpdateCognitoStatus
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBUpdateCognitoStatus = { 0x26ca0e0, 26 }; 
	// Function /Script/SB.SBCheatManager.SBUnuseOcclusionDebugging
	constexpr static const FunctionPointer<USBCheatManager, void> SBUnuseOcclusionDebugging = { 0x26d7dd0, 27 }; 
	// Function /Script/SB.SBCheatManager.SBUnLoadLevel
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBUnLoadLevel = { 0x26dc6f0, 28 }; 
	// Function /Script/SB.SBCheatManager.SBUIWorkShopEnableDefaultShop
	constexpr static const FunctionPointer<USBCheatManager, void> SBUIWorkShopEnableDefaultShop = { 0x26dc990, 29 }; 
	// Function /Script/SB.SBCheatManager.SBUIWorkShopDisableDefaultShop
	constexpr static const FunctionPointer<USBCheatManager, void> SBUIWorkShopDisableDefaultShop = { 0x26dc960, 30 }; 
	// Function /Script/SB.SBCheatManager.SBUIToggleShowFriendShipGain
	constexpr static const FunctionPointer<USBCheatManager, void> SBUIToggleShowFriendShipGain = { 0x26c3f70, 31 }; 
	// Function /Script/SB.SBCheatManager.SBUIToggleForceValidShopItem
	constexpr static const FunctionPointer<USBCheatManager, void> SBUIToggleForceValidShopItem = { 0x26c3fa0, 32 }; 
	// Function /Script/SB.SBCheatManager.SBUIStudioShowPlay
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool, const bool> SBUIStudioShowPlay = { 0x26c8530, 33 }; 
	// Function /Script/SB.SBCheatManager.SBUIStudioSetItem
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBUIStudioSetItem = { 0x26c7fa0, 34 }; 
	// Function /Script/SB.SBCheatManager.SBUIStudioSequencePlay
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool, const bool> SBUIStudioSequencePlay = { 0x26c8800, 35 }; 
	// Function /Script/SB.SBCheatManager.SBUIStudioPreviewOpen
	constexpr static const FunctionPointer<USBCheatManager, void> SBUIStudioPreviewOpen = { 0x26c7f80, 36 }; 
	// Function /Script/SB.SBCheatManager.SBUIStudioEvent
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBUIStudioEvent = { 0x26c8350, 37 }; 
	// Function /Script/SB.SBCheatManager.SBUIStudioAttachEquipment
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBUIStudioAttachEquipment = { 0x26c8150, 38 }; 
	// Function /Script/SB.SBCheatManager.SBUIOpenWorkShop
	constexpr static const FunctionPointer<USBCheatManager, void> SBUIOpenWorkShop = { 0x26dcac0, 39 }; 
	// Function /Script/SB.SBCheatManager.SBUIOpenShop
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const FString> SBUIOpenShop = { 0x26c3fd0, 40 }; 
	// Function /Script/SB.SBCheatManager.SBUIOpenHairSalonToGameMenu
	constexpr static const FunctionPointer<USBCheatManager, void> SBUIOpenHairSalonToGameMenu = { 0x26dca60, 41 }; 
	// Function /Script/SB.SBCheatManager.SBUIOpenGameMenuToHairSalon
	constexpr static const FunctionPointer<USBCheatManager, void> SBUIOpenGameMenuToHairSalon = { 0x26dca90, 42 }; 
	// Function /Script/SB.SBCheatManager.SBUIOpenGameMenu
	constexpr static const FunctionPointer<USBCheatManager, void> SBUIOpenGameMenu = { 0x26dcb00, 43 }; 
	// Function /Script/SB.SBCheatManager.SBUIOpen
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool> SBUIOpen = { 0x26dce30, 44 }; 
	// Function /Script/SB.SBCheatManager.SBUIEventUnlockBurst
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float> SBUIEventUnlockBurst = { 0x26cc610, 45 }; 
	// Function /Script/SB.SBCheatManager.SBUIActionWidgetCreate
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float> SBUIActionWidgetCreate = { 0x26cce80, 46 }; 
	// Function /Script/SB.SBCheatManager.SBUIActionUnlockMode
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float, const float> SBUIActionUnlockMode = { 0x26cd0a0, 47 }; 
	// Function /Script/SB.SBCheatManager.SBUIActionRequestAlias
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBUIActionRequestAlias = { 0x26cc780, 48 }; 
	// Function /Script/SB.SBCheatManager.SBUIActionNikkeLostArticlePopup
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBUIActionNikkeLostArticlePopup = { 0x26ccbf0, 49 }; 
	// Function /Script/SB.SBCheatManager.SBUIActionGuideVideo
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const FString, const float, const float> SBUIActionGuideVideo = { 0x26cd430, 50 }; 
	// Function /Script/SB.SBCheatManager.SBUIActionControllerStatePrint
	constexpr static const FunctionPointer<USBCheatManager, void> SBUIActionControllerStatePrint = { 0x11615e0, 51 }; 
	// Function /Script/SB.SBCheatManager.SBTrinityMode
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBTrinityMode = { 0x26a9510, 52 }; 
	// Function /Script/SB.SBCheatManager.SBTrialVersionSet
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBTrialVersionSet = { 0x26c0850, 53 }; 
	// Function /Script/SB.SBCheatManager.SBTrainingRoomMode
	constexpr static const FunctionPointer<USBCheatManager, void, const TEnumAsByte<ESBTrainningRoomChangeType>, const bool, const TEnumAsByte<ESBTrainningRoomNpcAIType>> SBTrainingRoomMode = { 0x26de4a0, 54 }; 
	// Function /Script/SB.SBCheatManager.SBToLobby
	constexpr static const FunctionPointer<USBCheatManager, void> SBToLobby = { 0x26c0960, 55 }; 
	// Function /Script/SB.SBCheatManager.SBToggleUseLog
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBToggleUseLog = { 0x26e8410, 56 }; 
	// Function /Script/SB.SBCheatManager.SBToggleUseDrawDebug
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBToggleUseDrawDebug = { 0x26e84e0, 57 }; 
	// Function /Script/SB.SBCheatManager.SBToggleStudioOnOff
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleStudioOnOff = { 0x26c79a0, 58 }; 
	// Function /Script/SB.SBCheatManager.SBToggleStencilLog
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleStencilLog = { 0x26c3c00, 59 }; 
	// Function /Script/SB.SBCheatManager.SBToggleSoundDebugger
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleSoundDebugger = { 0x11615e0, 60 }; 
	// Function /Script/SB.SBCheatManager.SBToggleSimpleFishing
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleSimpleFishing = { 0x26d45c0, 61 }; 
	// Function /Script/SB.SBCheatManager.SBToggleSigManShowDebug
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleSigManShowDebug = { 0x26d0290, 62 }; 
	// Function /Script/SB.SBCheatManager.SBToggleRopeSwingPhysic
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleRopeSwingPhysic = { 0x26d5a40, 63 }; 
	// Function /Script/SB.SBCheatManager.SBToggleRewardRateForceSuccess
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleRewardRateForceSuccess = { 0x26c7110, 64 }; 
	// Function /Script/SB.SBCheatManager.SBToggleResourceCacheRecorder
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleResourceCacheRecorder = { 0x26d5ef0, 65 }; 
	// Function /Script/SB.SBCheatManager.SBToggleResourceCacheManagerShowDebug
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleResourceCacheManagerShowDebug = { 0x26d5f60, 66 }; 
	// Function /Script/SB.SBCheatManager.SBTogglePrintQuartzBeat
	constexpr static const FunctionPointer<USBCheatManager, void> SBTogglePrintQuartzBeat = { 0x26d8980, 67 }; 
	// Function /Script/SB.SBCheatManager.SBTogglePlayerState
	constexpr static const FunctionPointer<USBCheatManager, void> SBTogglePlayerState = { 0x26e85b0, 68 }; 
	// Function /Script/SB.SBCheatManager.SBTogglePlayerIgnoreCoolTime
	constexpr static const FunctionPointer<USBCheatManager, void> SBTogglePlayerIgnoreCoolTime = { 0x11615e0, 69 }; 
	// Function /Script/SB.SBCheatManager.SBTogglePlayerDamageInfo
	constexpr static const FunctionPointer<USBCheatManager, void> SBTogglePlayerDamageInfo = { 0x26c6d60, 70 }; 
	// Function /Script/SB.SBCheatManager.SBTogglePhotoModeUI
	constexpr static const FunctionPointer<USBCheatManager, void> SBTogglePhotoModeUI = { 0x26c4590, 71 }; 
	// Function /Script/SB.SBCheatManager.SBTogglePhotoModeScreenShotCaptureForceFail
	constexpr static const FunctionPointer<USBCheatManager, void> SBTogglePhotoModeScreenShotCaptureForceFail = { 0x26be1b0, 72 }; 
	// Function /Script/SB.SBCheatManager.SBTogglePadSpeaker
	constexpr static const FunctionPointer<USBCheatManager, void> SBTogglePadSpeaker = { 0x26d7db0, 73 }; 
	// Function /Script/SB.SBCheatManager.SBToggleObjectID
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleObjectID = { 0x26c5fa0, 74 }; 
	// Function /Script/SB.SBCheatManager.SBToggleMotionMatching
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleMotionMatching = { 0x26e20a0, 75 }; 
	// Function /Script/SB.SBCheatManager.SBToggleMailBox
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleMailBox = { 0x26bd8b0, 76 }; 
	// Function /Script/SB.SBCheatManager.SBToggleLockOnCamera
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleLockOnCamera = { 0x26e1bd0, 77 }; 
	// Function /Script/SB.SBCheatManager.SBToggleLevelInfo
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleLevelInfo = { 0x11615e0, 78 }; 
	// Function /Script/SB.SBCheatManager.SBToggleGCControl
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleGCControl = { 0x26d5db0, 79 }; 
	// Function /Script/SB.SBCheatManager.SBToggleFullBodyIK
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBToggleFullBodyIK = { 0x26d7970, 80 }; 
	// Function /Script/SB.SBCheatManager.SBToggleFootIK
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleFootIK = { 0x26ef950, 81 }; 
	// Function /Script/SB.SBCheatManager.SBToggleFoliageTypeDensityScale
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBToggleFoliageTypeDensityScale = { 0x26bf9e0, 82 }; 
	// Function /Script/SB.SBCheatManager.SBToggleFlyCamera
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleFlyCamera = { 0x26e1c30, 83 }; 
	// Function /Script/SB.SBCheatManager.SBToggleFishMove
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleFishMove = { 0x26d4a30, 84 }; 
	// Function /Script/SB.SBCheatManager.SBToggleFishingDebugger
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleFishingDebugger = { 0x26d4670, 85 }; 
	// Function /Script/SB.SBCheatManager.SBToggleEngineFlag
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBToggleEngineFlag = { 0x26eb630, 86 }; 
	// Function /Script/SB.SBCheatManager.SBToggleEnemyDamageInfo
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleEnemyDamageInfo = { 0x26c6d90, 87 }; 
	// Function /Script/SB.SBCheatManager.SBToggleEnableSTS
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleEnableSTS = { 0x26d0a60, 88 }; 
	// Function /Script/SB.SBCheatManager.SBToggleEnableSliceMesh
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleEnableSliceMesh = { 0x26d0d00, 89 }; 
	// Function /Script/SB.SBCheatManager.SBToggleEnableFootIKWhenSequence
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleEnableFootIKWhenSequence = { 0x26c3370, 90 }; 
	// Function /Script/SB.SBCheatManager.SBToggleDrawPlayerMove
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const float> SBToggleDrawPlayerMove = { 0x26eaf20, 91 }; 
	// Function /Script/SB.SBCheatManager.SBToggleDisplayLamsID
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleDisplayLamsID = { 0x26c6d20, 92 }; 
	// Function /Script/SB.SBCheatManager.SBToggleDeviceProfileDebugDisplay
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleDeviceProfileDebugDisplay = { 0x26caa10, 93 }; 
	// Function /Script/SB.SBCheatManager.SBToggleDebugSTS
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleDebugSTS = { 0x26d0900, 94 }; 
	// Function /Script/SB.SBCheatManager.SBToggleDebugSliceMesh
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleDebugSliceMesh = { 0x26d0bb0, 95 }; 
	// Function /Script/SB.SBCheatManager.SBToggleDebugAudioComponent
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleDebugAudioComponent = { 0x26c62a0, 96 }; 
	// Function /Script/SB.SBCheatManager.SBToggleCheatCommandDistribution
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleCheatCommandDistribution = { 0x11615e0, 97 }; 
	// Function /Script/SB.SBCheatManager.SBToggleCharacterMovementParallelUpdate
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleCharacterMovementParallelUpdate = { 0x26cada0, 98 }; 
	// Function /Script/SB.SBCheatManager.SBToggleBossChallengeDebug
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleBossChallengeDebug = { 0x11615e0, 99 }; 
	// Function /Script/SB.SBCheatManager.SBToggleAimIK
	constexpr static const FunctionPointer<USBCheatManager, void> SBToggleAimIK = { 0x26d77e0, 100 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterTestInteractionYesNo
	constexpr static const FunctionPointer<USBCheatManager, void> SBTheaterTestInteractionYesNo = { 0x26cbf90, 101 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterTestInteractionSelect
	constexpr static const FunctionPointer<USBCheatManager, void> SBTheaterTestInteractionSelect = { 0x26cbfb0, 102 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterTestInteractionAdamFusion
	constexpr static const FunctionPointer<USBCheatManager, void> SBTheaterTestInteractionAdamFusion = { 0x26cbf70, 103 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterStop
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBTheaterStop = { 0x26e6e00, 104 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterSkip
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBTheaterSkip = { 0x26e6c70, 105 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterPrintLevelSeqPlaying
	constexpr static const FunctionPointer<USBCheatManager, void> SBTheaterPrintLevelSeqPlaying = { 0x26bed80, 106 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterPlayLevelSeq
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float, const float, const float, const float, const float, const float, const float> SBTheaterPlayLevelSeq = { 0x26e6ef0, 107 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterPlay
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float, const float, const float, const float, const float, const float, const float> SBTheaterPlay = { 0x26e7430, 108 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterOptionCheck
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBTheaterOptionCheck = { 0x26c1690, 109 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterNotifyCompleteSequence
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBTheaterNotifyCompleteSequence = { 0x26e6b50, 110 }; 
	// Function /Script/SB.SBCheatManager.SBTheaterIgnoreFirstSkip
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBTheaterIgnoreFirstSkip = { 0x26d5aa0, 111 }; 
	// Function /Script/SB.SBCheatManager.SBTestPlayGoUI
	constexpr static const FunctionPointer<USBCheatManager, void> SBTestPlayGoUI = { 0x26cc4b0, 112 }; 
	// Function /Script/SB.SBCheatManager.SBTestPlayGoLabelAssetCache
	constexpr static const FunctionPointer<USBCheatManager, void> SBTestPlayGoLabelAssetCache = { 0x11615e0, 113 }; 
	// Function /Script/SB.SBCheatManager.SBTestKrulosLog
	constexpr static const FunctionPointer<USBCheatManager, void> SBTestKrulosLog = { 0x11615e0, 114 }; 
	// Function /Script/SB.SBCheatManager.SBTestEanbleBoid
	constexpr static const FunctionPointer<USBCheatManager, void> SBTestEanbleBoid = { 0x26d3890, 115 }; 
	// Function /Script/SB.SBCheatManager.SBTestCharacterAnim
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float, const float, const float, const float, const float, const bool, const int32_t> SBTestCharacterAnim = { 0x26eeeb0, 116 }; 
	// Function /Script/SB.SBCheatManager.SBTestChangeBlendSpace
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const FString> SBTestChangeBlendSpace = { 0x26eeca0, 117 }; 
	// Function /Script/SB.SBCheatManager.SBTestBridgeLog
	constexpr static const FunctionPointer<USBCheatManager, void> SBTestBridgeLog = { 0x26f0370, 118 }; 
	// Function /Script/SB.SBCheatManager.SBTestBool
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const bool> SBTestBool = { 0x26dc020, 119 }; 
	// Function /Script/SB.SBCheatManager.SBTestBlackboardComponent
	constexpr static const FunctionPointer<USBCheatManager, void> SBTestBlackboardComponent = { 0x26ef450, 120 }; 
	// Function /Script/SB.SBCheatManager.SBTerminateLevelStreamProfiling
	constexpr static const FunctionPointer<USBCheatManager, void> SBTerminateLevelStreamProfiling = { 0x26dc280, 121 }; 
	// Function /Script/SB.SBCheatManager.SBTeleportTo
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float, const float> SBTeleportTo = { 0x26d9d90, 122 }; 
	// Function /Script/SB.SBCheatManager.SBTalkTest
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const float, const float, const float, const float, const FString> SBTalkTest = { 0x26c2bb0, 123 }; 
	// Function /Script/SB.SBCheatManager.SBSystemSetAppActivate
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const float> SBSystemSetAppActivate = { 0x26c3200, 124 }; 
	// Function /Script/SB.SBCheatManager.SBSuicide
	constexpr static const FunctionPointer<USBCheatManager, void> SBSuicide = { 0x26e8320, 125 }; 
	// Function /Script/SB.SBCheatManager.SBStudioState
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBStudioState = { 0x26cb950, 126 }; 
	// Function /Script/SB.SBCheatManager.SBStudioResetPhysics
	constexpr static const FunctionPointer<USBCheatManager, void> SBStudioResetPhysics = { 0x26cb900, 127 }; 
	// Function /Script/SB.SBCheatManager.SBStudioCameraSetManualDistance
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBStudioCameraSetManualDistance = { 0x26c1990, 128 }; 
	// Function /Script/SB.SBCheatManager.SBStudioCameraSetCurrentFocalLength
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBStudioCameraSetCurrentFocalLength = { 0x26c17d0, 129 }; 
	// Function /Script/SB.SBCheatManager.SBStudioCameraSetCurrentAperture
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBStudioCameraSetCurrentAperture = { 0x26c18b0, 130 }; 
	// Function /Script/SB.SBCheatManager.SBStudioCameraFocusInfo
	constexpr static const FunctionPointer<USBCheatManager, void> SBStudioCameraFocusInfo = { 0x26c1a70, 131 }; 
	// Function /Script/SB.SBCheatManager.SBStopMatchRequest
	constexpr static const FunctionPointer<USBCheatManager, void> SBStopMatchRequest = { 0x26df350, 132 }; 
	// Function /Script/SB.SBCheatManager.SBStopKeepPlaySingleSound
	constexpr static const FunctionPointer<USBCheatManager, void> SBStopKeepPlaySingleSound = { 0x26d8920, 133 }; 
	// Function /Script/SB.SBCheatManager.SBStopAllSounds
	constexpr static const FunctionPointer<USBCheatManager, void> SBStopAllSounds = { 0x26c6700, 134 }; 
	// Function /Script/SB.SBCheatManager.SBStartSingleLevelStreamProfiling
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBStartSingleLevelStreamProfiling = { 0x26dc320, 135 }; 
	// Function /Script/SB.SBCheatManager.SBStartLevelStreamProfiling
	constexpr static const FunctionPointer<USBCheatManager, void> SBStartLevelStreamProfiling = { 0x26dc440, 136 }; 
	// Function /Script/SB.SBCheatManager.SBStartKeepPlaySingleSound
	constexpr static const FunctionPointer<USBCheatManager, void> SBStartKeepPlaySingleSound = { 0x26d8950, 137 }; 
	// Function /Script/SB.SBCheatManager.SBStartActivity
	constexpr static const FunctionPointer<USBCheatManager, bool, const FName> SBStartActivity = { 0x26d1370, 138 }; 
	// Function /Script/SB.SBCheatManager.SBSpawnEnemy
	constexpr static const FunctionPointer<USBCheatManager, void> SBSpawnEnemy = { 0x26f0180, 139 }; 
	// Function /Script/SB.SBCheatManager.SBSoundUnMute
	constexpr static const FunctionPointer<USBCheatManager, void> SBSoundUnMute = { 0x26e2020, 140 }; 
	// Function /Script/SB.SBCheatManager.SBSoundMute
	constexpr static const FunctionPointer<USBCheatManager, void> SBSoundMute = { 0x26e2060, 141 }; 
	// Function /Script/SB.SBCheatManager.SBSnapShot
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBSnapShot = { 0x26e15f0, 142 }; 
	// Function /Script/SB.SBCheatManager.SBSignOutCognito
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBSignOutCognito = { 0x26c9e60, 143 }; 
	// Function /Script/SB.SBCheatManager.SBSignInCognito
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBSignInCognito = { 0x26ca360, 144 }; 
	// Function /Script/SB.SBCheatManager.SBSigManUseDebugActors
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSigManUseDebugActors = { 0x26cfe30, 145 }; 
	// Function /Script/SB.SBCheatManager.SBSigManUnregisterAll
	constexpr static const FunctionPointer<USBCheatManager, void> SBSigManUnregisterAll = { 0x26d0110, 146 }; 
	// Function /Script/SB.SBCheatManager.SBSigManToggleZoneEnvOptimizationConfigs
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSigManToggleZoneEnvOptimizationConfigs = { 0x26cfef0, 147 }; 
	// Function /Script/SB.SBCheatManager.SBSigManToggleCharacterOptimizationConfigs
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSigManToggleCharacterOptimizationConfigs = { 0x26cffc0, 148 }; 
	// Function /Script/SB.SBCheatManager.SBSigManShowDebugFilter
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBSigManShowDebugFilter = { 0x26d0150, 149 }; 
	// Function /Script/SB.SBCheatManager.SBSigManSetDummyViewportLocationToPlayer
	constexpr static const FunctionPointer<USBCheatManager, void> SBSigManSetDummyViewportLocationToPlayer = { 0x11615e0, 150 }; 
	// Function /Script/SB.SBCheatManager.SBSigManSetDummyViewportLocation
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float, const float> SBSigManSetDummyViewportLocation = { 0x26cfc20, 151 }; 
	// Function /Script/SB.SBCheatManager.SBSigManResetSignificance
	constexpr static const FunctionPointer<USBCheatManager, void> SBSigManResetSignificance = { 0x26d0090, 152 }; 
	// Function /Script/SB.SBCheatManager.SBSigManRegisterAll
	constexpr static const FunctionPointer<USBCheatManager, void> SBSigManRegisterAll = { 0x26d00d0, 153 }; 
	// Function /Script/SB.SBCheatManager.SBSigManHideDebugActors
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSigManHideDebugActors = { 0x26cfe30, 154 }; 
	// Function /Script/SB.SBCheatManager.SBSigManEnableDummyViewport
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSigManEnableDummyViewport = { 0x26a9510, 155 }; 
	// Function /Script/SB.SBCheatManager.SBSigManDumpLog
	constexpr static const FunctionPointer<USBCheatManager, void> SBSigManDumpLog = { 0x26cfdf0, 156 }; 
	// Function /Script/SB.SBCheatManager.SBShowStoreUI
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBShowStoreUI = { 0x26c0730, 157 }; 
	// Function /Script/SB.SBCheatManager.SBShowRes
	constexpr static const FunctionPointer<USBCheatManager, void> SBShowRes = { 0x26f0050, 158 }; 
	// Function /Script/SB.SBCheatManager.SBShowEventContentsDate
	constexpr static const FunctionPointer<USBCheatManager, void> SBShowEventContentsDate = { 0x26be070, 159 }; 
	// Function /Script/SB.SBCheatManager.SBShowControllerBindingPanel
	constexpr static const FunctionPointer<USBCheatManager, void> SBShowControllerBindingPanel = { 0x26beb60, 160 }; 
	// Function /Script/SB.SBCheatManager.SBShowActorID
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBShowActorID = { 0x26e32b0, 161 }; 
	// Function /Script/SB.SBCheatManager.SBShaderPrecompileEnable
	constexpr static const FunctionPointer<USBCheatManager, void> SBShaderPrecompileEnable = { 0x26beee0, 162 }; 
	// Function /Script/SB.SBCheatManager.SBShaderPrecompileDisable
	constexpr static const FunctionPointer<USBCheatManager, void> SBShaderPrecompileDisable = { 0x26beec0, 163 }; 
	// Function /Script/SB.SBCheatManager.SBSetVoice
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBSetVoice = { 0x26d29b0, 164 }; 
	// Function /Script/SB.SBCheatManager.SBSetUTCCountryCode
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBSetUTCCountryCode = { 0x26bc920, 165 }; 
	// Function /Script/SB.SBCheatManager.SBSetSlowLevelStreamingUpdate
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSetSlowLevelStreamingUpdate = { 0x26be2c0, 166 }; 
	// Function /Script/SB.SBCheatManager.SBSetSkillSlot
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const int32_t> SBSetSkillSlot = { 0x26df830, 167 }; 
	// Function /Script/SB.SBCheatManager.SBSetSettingVersion
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSetSettingVersion = { 0x26d3740, 168 }; 
	// Function /Script/SB.SBCheatManager.SBSetScreenTypeWindowedFullScreen
	constexpr static const FunctionPointer<USBCheatManager, void> SBSetScreenTypeWindowedFullScreen = { 0x26d31e0, 169 }; 
	// Function /Script/SB.SBCheatManager.SBSetScreenTypeWindowed
	constexpr static const FunctionPointer<USBCheatManager, void> SBSetScreenTypeWindowed = { 0x26d3130, 170 }; 
	// Function /Script/SB.SBCheatManager.SBSetScreenTypeFullScreen
	constexpr static const FunctionPointer<USBCheatManager, void> SBSetScreenTypeFullScreen = { 0x26d3290, 171 }; 
	// Function /Script/SB.SBCheatManager.SBSetScreenType
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSetScreenType = { 0x26d3340, 172 }; 
	// Function /Script/SB.SBCheatManager.SBSetScreenResolution4K
	constexpr static const FunctionPointer<USBCheatManager, void> SBSetScreenResolution4K = { 0x26d3490, 173 }; 
	// Function /Script/SB.SBCheatManager.SBSetScreenResolution2K
	constexpr static const FunctionPointer<USBCheatManager, void> SBSetScreenResolution2K = { 0x26d34f0, 174 }; 
	// Function /Script/SB.SBCheatManager.SBSetScreenResolution1K
	constexpr static const FunctionPointer<USBCheatManager, void> SBSetScreenResolution1K = { 0x26d3550, 175 }; 
	// Function /Script/SB.SBCheatManager.SBSetScreenResolution
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const int32_t> SBSetScreenResolution = { 0x26d35b0, 176 }; 
	// Function /Script/SB.SBCheatManager.SBSetSaveSlot
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSetSaveSlot = { 0x198eb40, 177 }; 
	// Function /Script/SB.SBCheatManager.SBSetSaveMajorVersionLatest
	constexpr static const FunctionPointer<USBCheatManager, void> SBSetSaveMajorVersionLatest = { 0x11615e0, 178 }; 
	// Function /Script/SB.SBCheatManager.SBSetSaveMajorVersion
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSetSaveMajorVersion = { 0x198eb40, 179 }; 
	// Function /Script/SB.SBCheatManager.SBSetSaveAppContentVersionLatest
	constexpr static const FunctionPointer<USBCheatManager, void> SBSetSaveAppContentVersionLatest = { 0x11615e0, 180 }; 
	// Function /Script/SB.SBCheatManager.SBSetSaveAppContentVersion
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSetSaveAppContentVersion = { 0x198eb40, 181 }; 
	// Function /Script/SB.SBCheatManager.SBSetResolutionQuality
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBSetResolutionQuality = { 0x26d2c30, 182 }; 
	// Function /Script/SB.SBCheatManager.SBSetPurchaseInTrial
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetPurchaseInTrial = { 0x26c0570, 183 }; 
	// Function /Script/SB.SBCheatManager.SBSetPlayerPawnAnimMode
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSetPlayerPawnAnimMode = { 0x198eb40, 184 }; 
	// Function /Script/SB.SBCheatManager.SBSetPhotoModeLightLocation
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const float, const float, const float> SBSetPhotoModeLightLocation = { 0x26bcfd0, 185 }; 
	// Function /Script/SB.SBCheatManager.SBSetNewGamePlus
	constexpr static const FunctionPointer<USBCheatManager, void> SBSetNewGamePlus = { 0x26e8fc0, 186 }; 
	// Function /Script/SB.SBCheatManager.SBSetMultiRuleRemainTime
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBSetMultiRuleRemainTime = { 0x26d7570, 187 }; 
	// Function /Script/SB.SBCheatManager.SBSetLoadSlot
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBSetLoadSlot = { 0x1640450, 188 }; 
	// Function /Script/SB.SBCheatManager.SBSetLanguage
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBSetLanguage = { 0x26d2af0, 189 }; 
	// Function /Script/SB.SBCheatManager.SBSetIgnoreEntitlementList
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetIgnoreEntitlementList = { 0x26c04a0, 190 }; 
	// Function /Script/SB.SBCheatManager.SBSetHintType
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBSetHintType = { 0x26c73a0, 191 }; 
	// Function /Script/SB.SBCheatManager.SBSetHDRDisplayNit
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSetHDRDisplayNit = { 0x26d2da0, 192 }; 
	// Function /Script/SB.SBCheatManager.SBSetHDR
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetHDR = { 0x26d2e80, 193 }; 
	// Function /Script/SB.SBCheatManager.SBSetGamma
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBSetGamma = { 0x26d2fe0, 194 }; 
	// Function /Script/SB.SBCheatManager.SBSetFreezeIK
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBSetFreezeIK = { 0x26ef880, 195 }; 
	// Function /Script/SB.SBCheatManager.SBSetFishingLogBook
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const int32_t, const float> SBSetFishingLogBook = { 0x26d4740, 196 }; 
	// Function /Script/SB.SBCheatManager.SBSetFishingAssist
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetFishingAssist = { 0x26d2850, 197 }; 
	// Function /Script/SB.SBCheatManager.SBSetDollyCamMode
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetDollyCamMode = { 0x26e0580, 198 }; 
	// Function /Script/SB.SBCheatManager.SBSetDisplayCropAspectRatio
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetDisplayCropAspectRatio = { 0x26be3e0, 199 }; 
	// Function /Script/SB.SBCheatManager.SBSetDifficultyAlias
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBSetDifficultyAlias = { 0x26c8d90, 200 }; 
	// Function /Script/SB.SBCheatManager.SBSetDifficulty
	constexpr static const FunctionPointer<USBCheatManager, void, const ESBGameDifficultyType> SBSetDifficulty = { 0x26c8e70, 201 }; 
	// Function /Script/SB.SBCheatManager.SBSetCustomVector2D
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float, const float> SBSetCustomVector2D = { 0x26e3420, 202 }; 
	// Function /Script/SB.SBCheatManager.SBSetCustomInt
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const int32_t> SBSetCustomInt = { 0x26d6840, 203 }; 
	// Function /Script/SB.SBCheatManager.SBSetCustomFloat
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float> SBSetCustomFloat = { 0x26d6640, 204 }; 
	// Function /Script/SB.SBCheatManager.SBSetCustomBool
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool> SBSetCustomBool = { 0x26d6450, 205 }; 
	// Function /Script/SB.SBCheatManager.SBSetCouponUserInfo
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const FString> SBSetCouponUserInfo = { 0x26c9b00, 206 }; 
	// Function /Script/SB.SBCheatManager.SBSetCamBlend
	constexpr static const FunctionPointer<USBCheatManager, void, const TEnumAsByte<EViewTargetBlendFunction>, const float> SBSetCamBlend = { 0x26e08c0, 207 }; 
	// Function /Script/SB.SBCheatManager.SBSetBuySB
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetBuySB = { 0x26c03d0, 208 }; 
	// Function /Script/SB.SBCheatManager.SBSetBuyNikkeDLC
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetBuyNikkeDLC = { 0x26c0140, 209 }; 
	// Function /Script/SB.SBCheatManager.SBSetBuyNierDLC
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetBuyNierDLC = { 0x26c0300, 210 }; 
	// Function /Script/SB.SBCheatManager.SBSetBodySuitLevel
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const uint32_t, const bool> SBSetBodySuitLevel = { 0x26d9740, 211 }; 
	// Function /Script/SB.SBCheatManager.SBSetAsyncLoadingScreenDisable
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetAsyncLoadingScreenDisable = { 0x26cd810, 212 }; 
	// Function /Script/SB.SBCheatManager.SBSetAssetGroupCulture
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBSetAssetGroupCulture = { 0x26c37c0, 213 }; 
	// Function /Script/SB.SBCheatManager.SBSetAppRegionUP
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetAppRegionUP = { 0x26c36d0, 214 }; 
	// Function /Script/SB.SBCheatManager.SBSetAppRegionJP
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetAppRegionJP = { 0x26c36d0, 215 }; 
	// Function /Script/SB.SBCheatManager.SBSetAppRegionEP
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSetAppRegionEP = { 0x26c36d0, 216 }; 
	// Function /Script/SB.SBCheatManager.SBSetActivityAvailability
	constexpr static const FunctionPointer<USBCheatManager, bool, const FName, const bool> SBSetActivityAvailability = { 0x26d1110, 217 }; 
	// Function /Script/SB.SBCheatManager.SBServerTravel
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool> SBServerTravel = { 0x26c5500, 218 }; 
	// Function /Script/SB.SBCheatManager.SBServer
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBServer = { 0x26c7750, 219 }; 
	// Function /Script/SB.SBCheatManager.SBSequenceMovie
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float, const float> SBSequenceMovie = { 0x26c5800, 220 }; 
	// Function /Script/SB.SBCheatManager.SBSequenceAttachWidget
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const bool, const FString, const int32_t, const int32_t, const float, const float, const FString, const FString, const FString, const FString, const FString, const FString> SBSequenceAttachWidget = { 0x26c09c0, 221 }; 
	// Function /Script/SB.SBCheatManager.SBSendPlayerSessionInviteName
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBSendPlayerSessionInviteName = { 0x26c5310, 222 }; 
	// Function /Script/SB.SBCheatManager.SBSendPlayerSessionInviteIndex
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSendPlayerSessionInviteIndex = { 0x26c5240, 223 }; 
	// Function /Script/SB.SBCheatManager.SBSendHelloToAWSLambda
	constexpr static const FunctionPointer<USBCheatManager, void> SBSendHelloToAWSLambda = { 0x26ca5e0, 224 }; 
	// Function /Script/SB.SBCheatManager.SBSelfiePhotoMode
	constexpr static const FunctionPointer<USBCheatManager, void> SBSelfiePhotoMode = { 0x26c4640, 225 }; 
	// Function /Script/SB.SBCheatManager.SBSceErrorDialog
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSceErrorDialog = { 0x198eb40, 226 }; 
	// Function /Script/SB.SBCheatManager.SBSaveToManualSaveSlot
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSaveToManualSaveSlot = { 0x198eb40, 227 }; 
	// Function /Script/SB.SBCheatManager.SBSaveToAutoSaveSlot
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBSaveToAutoSaveSlot = { 0x198eb40, 228 }; 
	// Function /Script/SB.SBCheatManager.SBSaveResetTrigger
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBSaveResetTrigger = { 0x26be200, 229 }; 
	// Function /Script/SB.SBCheatManager.SBSaveObjectCount
	constexpr static const FunctionPointer<USBCheatManager, void> SBSaveObjectCount = { 0x11615e0, 230 }; 
	// Function /Script/SB.SBCheatManager.SBSaveGameOption
	constexpr static const FunctionPointer<USBCheatManager, void> SBSaveGameOption = { 0x26d27f0, 231 }; 
	// Function /Script/SB.SBCheatManager.SBSaveGame
	constexpr static const FunctionPointer<USBCheatManager, void> SBSaveGame = { 0x11615e0, 232 }; 
	// Function /Script/SB.SBCheatManager.SBSaveEveryZone
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBSaveEveryZone = { 0x26c30a0, 233 }; 
	// Function /Script/SB.SBCheatManager.SBRunSpawnEvent
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBRunSpawnEvent = { 0x26e0790, 234 }; 
	// Function /Script/SB.SBCheatManager.SBRunItemSpawnEvent
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBRunItemSpawnEvent = { 0x26e0660, 235 }; 
	// Function /Script/SB.SBCheatManager.SBRunGameWorldEvent
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const FName> SBRunGameWorldEvent = { 0x26efa90, 236 }; 
	// Function /Script/SB.SBCheatManager.SBRunEventUIAction
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBRunEventUIAction = { 0x26dff30, 237 }; 
	// Function /Script/SB.SBCheatManager.SBRSToPC
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBRSToPC = { 0x26e26b0, 238 }; 
	// Function /Script/SB.SBCheatManager.SBRSToPA
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBRSToPA = { 0x26e26b0, 239 }; 
	// Function /Script/SB.SBCheatManager.SBRewardGroupDropSequentialArc
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const float, const float, const float, const float, const float, const float, const float, const float, const float, const float, const float> SBRewardGroupDropSequentialArc = { 0x26e4800, 240 }; 
	// Function /Script/SB.SBCheatManager.SBRewardGroupDropRandomRange
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const float, const float, const float, const float, const float, const float, const float, const float, const float, const float, const float, const float, const float> SBRewardGroupDropRandomRange = { 0x26e4ed0, 241 }; 
	// Function /Script/SB.SBCheatManager.SBRewardGroupDropInven
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const bool> SBRewardGroupDropInven = { 0x26e56c0, 242 }; 
	// Function /Script/SB.SBCheatManager.SBRewardGroupDropFormationPathLocation
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const float, const float, const float, const FString, const float, const float, const float> SBRewardGroupDropFormationPathLocation = { 0x26e3fc0, 243 }; 
	// Function /Script/SB.SBCheatManager.SBRewardGroupDropFormationPath
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const float, const float, const float, const FString> SBRewardGroupDropFormationPath = { 0x26e44b0, 244 }; 
	// Function /Script/SB.SBCheatManager.SBRewardGroupDrop
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const float, const float, const float, const float> SBRewardGroupDrop = { 0x26e5830, 245 }; 
	// Function /Script/SB.SBCheatManager.SBReturnToSinglePlay
	constexpr static const FunctionPointer<USBCheatManager, void> SBReturnToSinglePlay = { 0x26dc6b0, 246 }; 
	// Function /Script/SB.SBCheatManager.SBRetryNikkeStage
	constexpr static const FunctionPointer<USBCheatManager, void> SBRetryNikkeStage = { 0x26cc9f0, 247 }; 
	// Function /Script/SB.SBCheatManager.SBRestoreSkillPoint
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const FName> SBRestoreSkillPoint = { 0x26d8f10, 248 }; 
	// Function /Script/SB.SBCheatManager.SBRestoreDeviceProfile
	constexpr static const FunctionPointer<USBCheatManager, void> SBRestoreDeviceProfile = { 0x26cac00, 249 }; 
	// Function /Script/SB.SBCheatManager.SBResourceCacheUpdate
	constexpr static const FunctionPointer<USBCheatManager, void> SBResourceCacheUpdate = { 0x11615e0, 250 }; 
	// Function /Script/SB.SBCheatManager.SBResourceCacheSequenceList
	constexpr static const FunctionPointer<USBCheatManager, void> SBResourceCacheSequenceList = { 0x11615e0, 251 }; 
	// Function /Script/SB.SBCheatManager.SBResourceCacheManagerLog
	constexpr static const FunctionPointer<USBCheatManager, void> SBResourceCacheManagerLog = { 0x26d6040, 252 }; 
	// Function /Script/SB.SBCheatManager.SBResourceCacheManagerEnable
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBResourceCacheManagerEnable = { 0x26d6150, 253 }; 
	// Function /Script/SB.SBCheatManager.SBResourceCacheEnable
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBResourceCacheEnable = { 0x26a9510, 254 }; 
	// Function /Script/SB.SBCheatManager.SBResetZone
	constexpr static const FunctionPointer<USBCheatManager, void> SBResetZone = { 0x26dc8a0, 255 }; 
	// Function /Script/SB.SBCheatManager.SBResetTrainingRoom
	constexpr static const FunctionPointer<USBCheatManager, void> SBResetTrainingRoom = { 0x26de6a0, 256 }; 
	// Function /Script/SB.SBCheatManager.SBResetRope
	constexpr static const FunctionPointer<USBCheatManager, void> SBResetRope = { 0x26c22d0, 257 }; 
	// Function /Script/SB.SBCheatManager.SBResetNoticeScreenSkip
	constexpr static const FunctionPointer<USBCheatManager, void> SBResetNoticeScreenSkip = { 0x26be390, 258 }; 
	// Function /Script/SB.SBCheatManager.SBResetDifficultyAlias
	constexpr static const FunctionPointer<USBCheatManager, void> SBResetDifficultyAlias = { 0x26c8d50, 259 }; 
	// Function /Script/SB.SBCheatManager.SBResetCam
	constexpr static const FunctionPointer<USBCheatManager, void> SBResetCam = { 0x26e1a30, 260 }; 
	// Function /Script/SB.SBCheatManager.SBRequestTargetZone
	constexpr static const FunctionPointer<USBCheatManager, void, const FName&, const FName&> SBRequestTargetZone = { 0x26dddc0, 261 }; 
	// Function /Script/SB.SBCheatManager.SBRequestExit
	constexpr static const FunctionPointer<USBCheatManager, void> SBRequestExit = { 0x26c3170, 262 }; 
	// Function /Script/SB.SBCheatManager.SBRenderHair
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBRenderHair = { 0x26d9230, 263 }; 
	// Function /Script/SB.SBCheatManager.SBRenderFace
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBRenderFace = { 0x26d9150, 264 }; 
	// Function /Script/SB.SBCheatManager.SBRemoveSkillAll
	constexpr static const FunctionPointer<USBCheatManager, void> SBRemoveSkillAll = { 0x26de1c0, 265 }; 
	// Function /Script/SB.SBCheatManager.SBRemoveSkill
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBRemoveSkill = { 0x26dfb20, 266 }; 
	// Function /Script/SB.SBCheatManager.SBRemovedWidgetFindReferences
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBRemovedWidgetFindReferences = { 0x26c42a0, 267 }; 
	// Function /Script/SB.SBCheatManager.SBReloadConfig
	constexpr static const FunctionPointer<USBCheatManager, void> SBReloadConfig = { 0x26e3740, 268 }; 
	// Function /Script/SB.SBCheatManager.SBRegisterPlayerSessionName
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBRegisterPlayerSessionName = { 0x26c4e80, 269 }; 
	// Function /Script/SB.SBCheatManager.SBRegisterPlayerSessionFriendIndex
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBRegisterPlayerSessionFriendIndex = { 0x26c4db0, 270 }; 
	// Function /Script/SB.SBCheatManager.SBRefreshWidgetViewportSize
	constexpr static const FunctionPointer<USBCheatManager, void> SBRefreshWidgetViewportSize = { 0x26be050, 271 }; 
	// Function /Script/SB.SBCheatManager.SBQuestTrackOnOff
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestTrackOnOff = { 0x26e88c0, 272 }; 
	// Function /Script/SB.SBCheatManager.SBQuestTrackingTargetFilterPrint
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestTrackingTargetFilterPrint = { 0x26e8910, 273 }; 
	// Function /Script/SB.SBCheatManager.SBQuestRemoveAllQuest
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestRemoveAllQuest = { 0x26ea730, 274 }; 
	// Function /Script/SB.SBCheatManager.SBQuestPause
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBQuestPause = { 0x26e8790, 275 }; 
	// Function /Script/SB.SBCheatManager.SBQuestFailed
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBQuestFailed = { 0x26ea8f0, 276 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerTaskGroupDescriptionShow
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestDebuggerTaskGroupDescriptionShow = { 0x26e8a60, 277 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerTaskGroupDescriptionHide
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestDebuggerTaskGroupDescriptionHide = { 0x26e8a40, 278 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerTaskDescriptionShow
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestDebuggerTaskDescriptionShow = { 0x26e8a20, 279 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerTaskDescriptionHide
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestDebuggerTaskDescriptionHide = { 0x26e8a00, 280 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerShow
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestDebuggerShow = { 0x26e8bf0, 281 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerSetCompleteQuestVisible
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBQuestDebuggerSetCompleteQuestVisible = { 0x26e8930, 282 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerQuestTitleShow
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestDebuggerQuestTitleShow = { 0x26e8ae0, 283 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerQuestTitleHide
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestDebuggerQuestTitleHide = { 0x26e8ac0, 284 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerQuestDescriptionShow
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestDebuggerQuestDescriptionShow = { 0x26e8aa0, 285 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerQuestDescriptionHide
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestDebuggerQuestDescriptionHide = { 0x26e8a80, 286 }; 
	// Function /Script/SB.SBCheatManager.SBQuestDebuggerHide
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestDebuggerHide = { 0x26e8b00, 287 }; 
	// Function /Script/SB.SBCheatManager.SBQuestCompleteTaskGroup
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBQuestCompleteTaskGroup = { 0x26e8dc0, 288 }; 
	// Function /Script/SB.SBCheatManager.SBQuestCompleteTask
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBQuestCompleteTask = { 0x26e8cf0, 289 }; 
	// Function /Script/SB.SBCheatManager.SBQuestCompleteList
	constexpr static const FunctionPointer<USBCheatManager, void> SBQuestCompleteList = { 0x26e88a0, 290 }; 
	// Function /Script/SB.SBCheatManager.SBQuestComplete
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBQuestComplete = { 0x26eaa80, 291 }; 
	// Function /Script/SB.SBCheatManager.SBQuestAcquireReward
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBQuestAcquireReward = { 0x26ea770, 292 }; 
	// Function /Script/SB.SBCheatManager.SBQuestAcquire
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBQuestAcquire = { 0x26eac10, 293 }; 
	// Function /Script/SB.SBCheatManager.SBQueryPresence
	constexpr static const FunctionPointer<USBCheatManager, void> SBQueryPresence = { 0x26bd840, 294 }; 
	// Function /Script/SB.SBCheatManager.SBQueryAchievements
	constexpr static const FunctionPointer<USBCheatManager, void> SBQueryAchievements = { 0x26bd870, 295 }; 
	// Function /Script/SB.SBCheatManager.SBPVDConnect
	constexpr static const FunctionPointer<USBCheatManager, void> SBPVDConnect = { 0x26c7ed0, 296 }; 
	// Function /Script/SB.SBCheatManager.SBPushSoundMix
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPushSoundMix = { 0x26d8c10, 297 }; 
	// Function /Script/SB.SBCheatManager.SBPushSoundEvent
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const float> SBPushSoundEvent = { 0x26d8350, 298 }; 
	// Function /Script/SB.SBCheatManager.SBProgressTrophy
	constexpr static const FunctionPointer<USBCheatManager, bool, const FName, const uint32_t> SBProgressTrophy = { 0x26d0f80, 299 }; 
	// Function /Script/SB.SBCheatManager.SBProgressAllTrophy
	constexpr static const FunctionPointer<USBCheatManager, bool> SBProgressAllTrophy = { 0x26d0e30, 300 }; 
	// Function /Script/SB.SBCheatManager.SBProfilingUI
	constexpr static const FunctionPointer<USBCheatManager, void> SBProfilingUI = { 0x11615e0, 301 }; 
	// Function /Script/SB.SBCheatManager.SBPrintWorldTimeSeconds
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintWorldTimeSeconds = { 0x26f0390, 302 }; 
	// Function /Script/SB.SBCheatManager.SBPrintUTCOffset
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintUTCOffset = { 0x26bca50, 303 }; 
	// Function /Script/SB.SBCheatManager.SBPrintSupportedWindowedscreenResolutions
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintSupportedWindowedscreenResolutions = { 0x26d2720, 304 }; 
	// Function /Script/SB.SBCheatManager.SBPrintSupportedFullscreenResolutions
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintSupportedFullscreenResolutions = { 0x26d2770, 305 }; 
	// Function /Script/SB.SBCheatManager.SBPrintSteamInputActive
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintSteamInputActive = { 0x26beba0, 306 }; 
	// Function /Script/SB.SBCheatManager.SBPrintSoundVolume
	constexpr static const FunctionPointer<USBCheatManager, void, const ESBSoundVolumeChannel, const ESBSoundVolumeControlType> SBPrintSoundVolume = { 0x26d84e0, 307 }; 
	// Function /Script/SB.SBCheatManager.SBPrintScreenSize
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintScreenSize = { 0x26bd370, 308 }; 
	// Function /Script/SB.SBCheatManager.SBPrintSaveVersion
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintSaveVersion = { 0x26e0a50, 309 }; 
	// Function /Script/SB.SBCheatManager.SBPrintPlayerCharacterInfo
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintPlayerCharacterInfo = { 0x26f0480, 310 }; 
	// Function /Script/SB.SBCheatManager.SBPrintNewGamePlusCount
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintNewGamePlusCount = { 0x26e8e90, 311 }; 
	// Function /Script/SB.SBCheatManager.SBPrintLogLockOnPoint
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintLogLockOnPoint = { 0x26e5b20, 312 }; 
	// Function /Script/SB.SBCheatManager.SBPrintLanguageDefaultCode
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintLanguageDefaultCode = { 0x26f03f0, 313 }; 
	// Function /Script/SB.SBCheatManager.SBPrintKeyboardLayout
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintKeyboardLayout = { 0x26bcc90, 314 }; 
	// Function /Script/SB.SBCheatManager.SBPrintHdrToneMapLuminance
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintHdrToneMapLuminance = { 0x26d2d80, 315 }; 
	// Function /Script/SB.SBCheatManager.SBPrintGPUAdapterDedicatedMemoryUsage
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintGPUAdapterDedicatedMemoryUsage = { 0x26be520, 316 }; 
	// Function /Script/SB.SBCheatManager.SBPrintGameOptionDefaultValue
	constexpr static const FunctionPointer<USBCheatManager, void, const ESBGameOptionType> SBPrintGameOptionDefaultValue = { 0x26d2580, 317 }; 
	// Function /Script/SB.SBCheatManager.SBPrintFixedFrameRate
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintFixedFrameRate = { 0x26c6f20, 318 }; 
	// Function /Script/SB.SBCheatManager.SBPrintEquipLilyMeshAssetPath
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintEquipLilyMeshAssetPath = { 0x26bd2a0, 319 }; 
	// Function /Script/SB.SBCheatManager.SBPrintEntitlementList
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBPrintEntitlementList = { 0x26d1580, 320 }; 
	// Function /Script/SB.SBCheatManager.SBPrintCurrentLanguage
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintCurrentLanguage = { 0x26f0460, 321 }; 
	// Function /Script/SB.SBCheatManager.SBPrintBuildInfo
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintBuildInfo = { 0x26f04a0, 322 }; 
	// Function /Script/SB.SBCheatManager.SBPrintAvailableLanguages
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintAvailableLanguages = { 0x26d2640, 323 }; 
	// Function /Script/SB.SBCheatManager.SBPrintAppId
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintAppId = { 0x11615e0, 324 }; 
	// Function /Script/SB.SBCheatManager.SBPrintAllScreenSize
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintAllScreenSize = { 0x26bd330, 325 }; 
	// Function /Script/SB.SBCheatManager.SBPrintActiveVolume
	constexpr static const FunctionPointer<USBCheatManager, void> SBPrintActiveVolume = { 0x26d71f0, 326 }; 
	// Function /Script/SB.SBCheatManager.SBPopUpPlayGoDebugUI
	constexpr static const FunctionPointer<USBCheatManager, void> SBPopUpPlayGoDebugUI = { 0x26cc5f0, 327 }; 
	// Function /Script/SB.SBCheatManager.SBPopSoundMix
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPopSoundMix = { 0x26d89b0, 328 }; 
	// Function /Script/SB.SBCheatManager.SBPointRectLightCastShadow
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBPointRectLightCastShadow = { 0x26d9cc0, 329 }; 
	// Function /Script/SB.SBCheatManager.SBPlayVibration
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayVibration = { 0x26c64c0, 330 }; 
	// Function /Script/SB.SBCheatManager.SBPlayTestSound
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float> SBPlayTestSound = { 0x26c69c0, 331 }; 
	// Function /Script/SB.SBCheatManager.SBPlayTestQuartzSound
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayTestQuartzSound = { 0x26c6780, 332 }; 
	// Function /Script/SB.SBCheatManager.SBPlayTest3dSound
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayTest3dSound = { 0x26c68a0, 333 }; 
	// Function /Script/SB.SBCheatManager.SBPlayShow
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayShow = { 0x26ee4b0, 334 }; 
	// Function /Script/SB.SBCheatManager.SBPlayLevelSeq
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const float, const FString> SBPlayLevelSeq = { 0x26e1800, 335 }; 
	// Function /Script/SB.SBCheatManager.SBPlayGoTest
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayGoTest = { 0x11615e0, 336 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerUseSkill
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBPlayerUseSkill = { 0x26ee6f0, 337 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerUngrabObject
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerUngrabObject = { 0x26d8e80, 338 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerTransform
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBPlayerTransform = { 0x26d7710, 339 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerSP
	constexpr static const FunctionPointer<USBCheatManager, void, const uint32_t> SBPlayerSP = { 0x26df660, 340 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerShowMultiMapLevel
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerShowMultiMapLevel = { 0x26db470, 341 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerShowAchievementInfo
	constexpr static const FunctionPointer<USBCheatManager, void, const uint32_t, const FString> SBPlayerShowAchievementInfo = { 0x26db0d0, 342 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerSetLevel
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const uint32_t, const bool> SBPlayerSetLevel = { 0x26db580, 343 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerSetCameraLock
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBPlayerSetCameraLock = { 0x26da6c0, 344 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerRevival
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerRevival = { 0x26e8340, 345 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerResetPhysics
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const bool, const float> SBPlayerResetPhysics = { 0x26c6040, 346 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerRemoveAchievement
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayerRemoveAchievement = { 0x26daac0, 347 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerRecreatePhysicsState
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerRecreatePhysicsState = { 0x26c25a0, 348 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerRecoveryItems
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerRecoveryItems = { 0x26dcba0, 349 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerReceiveAchievementReward
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayerReceiveAchievementReward = { 0x26da900, 350 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerProcessAchievementOnlyOne
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const int32_t> SBPlayerProcessAchievementOnlyOne = { 0x26dac90, 351 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerMoveTo
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float, const float, const bool, const bool, const bool, const int32_t, const float, const float> SBPlayerMoveTo = { 0x26dd570, 352 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerMovementMode
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayerMovementMode = { 0x26dd430, 353 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerMovementDisableDesireRotation
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBPlayerMovementDisableDesireRotation = { 0x26da7d0, 354 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerMaxTachyGauge
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerMaxTachyGauge = { 0x26cbe30, 355 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerMaterialChange
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBPlayerMaterialChange = { 0x26c3ea0, 356 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerLockOnSpeed
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float> SBPlayerLockOnSpeed = { 0x26e7a30, 357 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerLevelList
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerLevelList = { 0x26db560, 358 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerJaliFace
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBPlayerJaliFace = { 0x26ee9a0, 359 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerItemRecharge
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool> SBPlayerItemRecharge = { 0x26c5a40, 360 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerItemBucketList
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBPlayerItemBucketList = { 0x26e3780, 361 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerItemBucketItemRemove
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const int32_t, const int32_t> SBPlayerItemBucketItemRemove = { 0x26e3a80, 362 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerItemBucketItemConsume
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const int32_t, const int32_t> SBPlayerItemBucketItemConsume = { 0x26e3850, 363 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerItemBucketItemAdd
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const int32_t, const int32_t, const bool> SBPlayerItemBucketItemAdd = { 0x26e3cc0, 364 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerIsCompleteAchievement
	constexpr static const FunctionPointer<USBCheatManager, void, const uint32_t, const FString> SBPlayerIsCompleteAchievement = { 0x26db290, 365 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerInputState
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const bool, const bool> SBPlayerInputState = { 0x26cb290, 366 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerIncreaseMultiMapLevel
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBPlayerIncreaseMultiMapLevel = { 0x26db490, 367 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerHP
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBPlayerHP = { 0x26e0440, 368 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerHintList
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerHintList = { 0x26c7980, 369 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerFrontGrabObject
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerFrontGrabObject = { 0x26d8ef0, 370 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerForceTurn
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerForceTurn = { 0x26e85f0, 371 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerEventTagClear
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerEventTagClear = { 0x26c1d60, 372 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerEventTag
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayerEventTag = { 0x26c1e10, 373 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerEquipItem
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool, const FString> SBPlayerEquipItem = { 0x26dd1b0, 374 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerEnableExtraSprint
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBPlayerEnableExtraSprint = { 0x26d4350, 375 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerCompleteAchievementOnlyOne
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayerCompleteAchievementOnlyOne = { 0x26daf10, 376 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerCompleteAchievement
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayerCompleteAchievement = { 0x26daf10, 377 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerChangeStance
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayerChangeStance = { 0x26ee880, 378 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerChangeBulletAlias
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayerChangeBulletAlias = { 0x26bd960, 379 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerCameraInterpolMode
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const bool, const bool> SBPlayerCameraInterpolMode = { 0x26e1c50, 380 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerCameraFadeManualPriority
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const float, const float> SBPlayerCameraFadeManualPriority = { 0x26d3e60, 381 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerCameraFadeAutoPriority
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const float, const float, const float, const float, const float> SBPlayerCameraFadeAutoPriority = { 0x26d39e0, 382 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerCameraFade
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const float> SBPlayerCameraFade = { 0x26d4150, 383 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerBurstGauge
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBPlayerBurstGauge = { 0x26e01e0, 384 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerBetaGauge
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBPlayerBetaGauge = { 0x26e0310, 385 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerBattleState
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBPlayerBattleState = { 0x26db760, 386 }; 
	// Function /Script/SB.SBCheatManager.SBPlayerAchievementList
	constexpr static const FunctionPointer<USBCheatManager, void> SBPlayerAchievementList = { 0x26db450, 387 }; 
	// Function /Script/SB.SBCheatManager.SBPlayCustomBlendSpace
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBPlayCustomBlendSpace = { 0x26efc80, 388 }; 
	// Function /Script/SB.SBCheatManager.SBPlayCustomAnimMeshSlotByTag
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const float, const float, const float, const float, const float, const bool, const int32_t, const bool, const float, const TEnumAsByte<ESBSkelMeshSlot>> SBPlayCustomAnimMeshSlotByTag = { 0x26ec5b0, 389 }; 
	// Function /Script/SB.SBCheatManager.SBPlayCustomAnimMeshSlot
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float, const float, const float, const float, const float, const bool, const int32_t, const bool, const float, const TEnumAsByte<ESBSkelMeshSlot>> SBPlayCustomAnimMeshSlot = { 0x26ed350, 390 }; 
	// Function /Script/SB.SBCheatManager.SBPlayCustomAnimByTag
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const int32_t, const float, const float, const float, const float, const float, const bool, const int32_t> SBPlayCustomAnimByTag = { 0x26ecd10, 391 }; 
	// Function /Script/SB.SBCheatManager.SBPlayCustomAnimByFolder
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayCustomAnimByFolder = { 0x26bea40, 392 }; 
	// Function /Script/SB.SBCheatManager.SBPlayCustomAnim
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float, const float, const float, const float, const float, const bool, const int32_t, const bool, const float, const int32_t> SBPlayCustomAnim = { 0x26edc20, 393 }; 
	// Function /Script/SB.SBCheatManager.SBPlayCameraAnim
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBPlayCameraAnim = { 0x26e21d0, 394 }; 
	// Function /Script/SB.SBCheatManager.SBPhotoModeTakeScreenshot
	constexpr static const FunctionPointer<USBCheatManager, void> SBPhotoModeTakeScreenshot = { 0x26bea00, 395 }; 
	// Function /Script/SB.SBCheatManager.SBPhotoModeFacialAnimType
	constexpr static const FunctionPointer<USBCheatManager, void, const TEnumAsByte<ESBPhotoModeFacialAnimType>> SBPhotoModeFacialAnimType = { 0x26bf0b0, 396 }; 
	// Function /Script/SB.SBCheatManager.SBPhotoModeFacialAnimPosition
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBPhotoModeFacialAnimPosition = { 0x26befb0, 397 }; 
	// Function /Script/SB.SBCheatManager.SBPhotoModeDebug
	constexpr static const FunctionPointer<USBCheatManager, void> SBPhotoModeDebug = { 0x26be1e0, 398 }; 
	// Function /Script/SB.SBCheatManager.SBPhotoMode
	constexpr static const FunctionPointer<USBCheatManager, void> SBPhotoMode = { 0x26c4680, 399 }; 
	// Function /Script/SB.SBCheatManager.SBPerformanceProfilerStop
	constexpr static const FunctionPointer<USBCheatManager, void> SBPerformanceProfilerStop = { 0x26da150, 400 }; 
	// Function /Script/SB.SBCheatManager.SBPerformanceProfilerStartForLevelStream
	constexpr static const FunctionPointer<USBCheatManager, void> SBPerformanceProfilerStartForLevelStream = { 0x26da250, 401 }; 
	// Function /Script/SB.SBCheatManager.SBPerformanceProfilerStart
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const float> SBPerformanceProfilerStart = { 0x26da270, 402 }; 
	// Function /Script/SB.SBCheatManager.SBPerformanceProfilerMoveCamera
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBPerformanceProfilerMoveCamera = { 0x26da500, 403 }; 
	// Function /Script/SB.SBCheatManager.SBPDODitherAlphaThreshold
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBPDODitherAlphaThreshold = { 0x26c0050, 404 }; 
	// Function /Script/SB.SBCheatManager.SBPauseAllSounds
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBPauseAllSounds = { 0x26c6600, 405 }; 
	// Function /Script/SB.SBCheatManager.SBOverrideDeviceProfile
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBOverrideDeviceProfile = { 0x26cac40, 406 }; 
	// Function /Script/SB.SBCheatManager.SBOpenRequestBoard
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBOpenRequestBoard = { 0x26e86c0, 407 }; 
	// Function /Script/SB.SBCheatManager.SBOpenLevel
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBOpenLevel = { 0x26be200, 408 }; 
	// Function /Script/SB.SBCheatManager.SBOpenCredit
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const bool> SBOpenCredit = { 0x26c2100, 409 }; 
	// Function /Script/SB.SBCheatManager.SBNikkeMiniGameResultTest
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool> SBNikkeMiniGameResultTest = { 0x26bd650, 410 }; 
	// Function /Script/SB.SBCheatManager.SBNikkeMiniGameNextWaveUITest
	constexpr static const FunctionPointer<USBCheatManager, void> SBNikkeMiniGameNextWaveUITest = { 0x26bd570, 411 }; 
	// Function /Script/SB.SBCheatManager.SBNikkeMiniGameForceVictory
	constexpr static const FunctionPointer<USBCheatManager, void> SBNikkeMiniGameForceVictory = { 0x26bd420, 412 }; 
	// Function /Script/SB.SBCheatManager.SBNikkeMiniGameDefenseGaugeTest
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBNikkeMiniGameDefenseGaugeTest = { 0x26bd480, 413 }; 
	// Function /Script/SB.SBCheatManager.SBNextChangeBody
	constexpr static const FunctionPointer<USBCheatManager, void> SBNextChangeBody = { 0x26e7ee0, 414 }; 
	// Function /Script/SB.SBCheatManager.SBNewGUID
	constexpr static const FunctionPointer<USBCheatManager, void> SBNewGUID = { 0x26c1fb0, 415 }; 
	// Function /Script/SB.SBCheatManager.SBMetaAIThink
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FName> SBMetaAIThink = { 0x26d07b0, 416 }; 
	// Function /Script/SB.SBCheatManager.SBMetaAISpecialBehaviorTag
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBMetaAISpecialBehaviorTag = { 0x26d05c0, 417 }; 
	// Function /Script/SB.SBCheatManager.SBMetaAISetNodeIndex
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBMetaAISetNodeIndex = { 0x26d0370, 418 }; 
	// Function /Script/SB.SBCheatManager.SBMetaAIAlias
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBMetaAIAlias = { 0x26d06b0, 419 }; 
	// Function /Script/SB.SBCheatManager.SBMessageBoxV3Text
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const int32_t> SBMessageBoxV3Text = { 0x26d6c70, 420 }; 
	// Function /Script/SB.SBCheatManager.SBMessageBoxV3StringTable
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const bool, const int32_t> SBMessageBoxV3StringTable = { 0x26d6ef0, 421 }; 
	// Function /Script/SB.SBCheatManager.SBMeshStudioShowTest
	constexpr static const FunctionPointer<USBCheatManager, void> SBMeshStudioShowTest = { 0x26bd630, 422 }; 
	// Function /Script/SB.SBCheatManager.SBMemRecordStop
	constexpr static const FunctionPointer<USBCheatManager, void> SBMemRecordStop = { 0x26c2800, 423 }; 
	// Function /Script/SB.SBCheatManager.SBMemRecordStart
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const int32_t, const float> SBMemRecordStart = { 0x26c2870, 424 }; 
	// Function /Script/SB.SBCheatManager.SBMaterialTest
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBMaterialTest = { 0x26d9bf0, 425 }; 
	// Function /Script/SB.SBCheatManager.SBMatchRequestWithName
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const FString> SBMatchRequestWithName = { 0x26df370, 426 }; 
	// Function /Script/SB.SBCheatManager.SBMatchRequest
	constexpr static const FunctionPointer<USBCheatManager, void> SBMatchRequest = { 0x26df640, 427 }; 
	// Function /Script/SB.SBCheatManager.SBManualSaveList
	constexpr static const FunctionPointer<USBCheatManager, void> SBManualSaveList = { 0x26e17c0, 428 }; 
	// Function /Script/SB.SBCheatManager.SBLuaCheat
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBLuaCheat = { 0x26bea40, 429 }; 
	// Function /Script/SB.SBCheatManager.SBLookAtTargetTag
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FString, const FString, const float> SBLookAtTargetTag = { 0x26cbb30, 430 }; 
	// Function /Script/SB.SBCheatManager.SBLogTickToTime
	constexpr static const FunctionPointer<USBCheatManager, void, const int64_t> SBLogTickToTime = { 0x26c3500, 431 }; 
	// Function /Script/SB.SBCheatManager.SBLogThreadCount
	constexpr static const FunctionPointer<USBCheatManager, void> SBLogThreadCount = { 0x26bcc30, 432 }; 
	// Function /Script/SB.SBCheatManager.SBLogShowDataContainsKey
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBLogShowDataContainsKey = { 0x26cbfd0, 433 }; 
	// Function /Script/SB.SBCheatManager.SBLogSaveData
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBLogSaveData = { 0x26e0a70, 434 }; 
	// Function /Script/SB.SBCheatManager.SBLogPlayerLocation
	constexpr static const FunctionPointer<USBCheatManager, void> SBLogPlayerLocation = { 0x26dc880, 435 }; 
	// Function /Script/SB.SBCheatManager.SBLogPackageDependency
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBLogPackageDependency = { 0x26be200, 436 }; 
	// Function /Script/SB.SBCheatManager.SBLogEnvState
	constexpr static const FunctionPointer<USBCheatManager, void> SBLogEnvState = { 0x26dd550, 437 }; 
	// Function /Script/SB.SBCheatManager.SBLogDLSSEstimatedVRAM
	constexpr static const FunctionPointer<USBCheatManager, void> SBLogDLSSEstimatedVRAM = { 0x26be090, 438 }; 
	// Function /Script/SB.SBCheatManager.SBLogDirectoriesNeverCook
	constexpr static const FunctionPointer<USBCheatManager, void> SBLogDirectoriesNeverCook = { 0x11615e0, 439 }; 
	// Function /Script/SB.SBCheatManager.SBLogDeviceProfileName
	constexpr static const FunctionPointer<USBCheatManager, void> SBLogDeviceProfileName = { 0x26cab80, 440 }; 
	// Function /Script/SB.SBCheatManager.SBLogCVarValue
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBLogCVarValue = { 0x26ca7d0, 441 }; 
	// Function /Script/SB.SBCheatManager.SBLogAllVibrationComponent
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBLogAllVibrationComponent = { 0x26c62f0, 442 }; 
	// Function /Script/SB.SBCheatManager.SBLogAllAudioComponent
	constexpr static const FunctionPointer<USBCheatManager, void> SBLogAllAudioComponent = { 0x26c62d0, 443 }; 
	// Function /Script/SB.SBCheatManager.SBLogActiveInteraction
	constexpr static const FunctionPointer<USBCheatManager, void> SBLogActiveInteraction = { 0x26e7c30, 444 }; 
	// Function /Script/SB.SBCheatManager.SBLoadSnapShot
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBLoadSnapShot = { 0x26e13a0, 445 }; 
	// Function /Script/SB.SBCheatManager.SBLoadShortcutData
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBLoadShortcutData = { 0x198eb40, 446 }; 
	// Function /Script/SB.SBCheatManager.SBLoadSaveData
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBLoadSaveData = { 0x26cb800, 447 }; 
	// Function /Script/SB.SBCheatManager.SBLoadMap
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBLoadMap = { 0x26eeb60, 448 }; 
	// Function /Script/SB.SBCheatManager.SBLoadLevel
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBLoadLevel = { 0x26dc6f0, 449 }; 
	// Function /Script/SB.SBCheatManager.SBLoadingScreenFadeOut
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float, const float, const float> SBLoadingScreenFadeOut = { 0x26d5330, 450 }; 
	// Function /Script/SB.SBCheatManager.SBLoadingScreenFadeIn
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float, const float, const float> SBLoadingScreenFadeIn = { 0x26d5690, 451 }; 
	// Function /Script/SB.SBCheatManager.SBLoadingScreenFadeAuto
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float, const float, const float, const float, const float, const float> SBLoadingScreenFadeAuto = { 0x26d4ea0, 452 }; 
	// Function /Script/SB.SBCheatManager.SBLoadingScreenAlpha
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBLoadingScreenAlpha = { 0x26bf920, 453 }; 
	// Function /Script/SB.SBCheatManager.SBLoadGameOption
	constexpr static const FunctionPointer<USBCheatManager, void> SBLoadGameOption = { 0x26d27c0, 454 }; 
	// Function /Script/SB.SBCheatManager.SBLoadFromShortcut
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBLoadFromShortcut = { 0x26e1050, 455 }; 
	// Function /Script/SB.SBCheatManager.SBLoadFromManualSaveSlot
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBLoadFromManualSaveSlot = { 0x26e11e0, 456 }; 
	// Function /Script/SB.SBCheatManager.SBLoadFromAutoSaveSlot
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBLoadFromAutoSaveSlot = { 0x26e12c0, 457 }; 
	// Function /Script/SB.SBCheatManager.SBLLMRecordStop
	constexpr static const FunctionPointer<USBCheatManager, void> SBLLMRecordStop = { 0x26c2720, 458 }; 
	// Function /Script/SB.SBCheatManager.SBLLMRecordStart
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBLLMRecordStart = { 0x26c2740, 459 }; 
	// Function /Script/SB.SBCheatManager.SBLineNotify
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBLineNotify = { 0x26dbc30, 460 }; 
	// Function /Script/SB.SBCheatManager.SBLiftUpFish
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBLiftUpFish = { 0x26d4c90, 461 }; 
	// Function /Script/SB.SBCheatManager.SBLeaveTrainingRoom
	constexpr static const FunctionPointer<USBCheatManager, void> SBLeaveTrainingRoom = { 0x26de6d0, 462 }; 
	// Function /Script/SB.SBCheatManager.SBJoinPlayerSession
	constexpr static const FunctionPointer<USBCheatManager, void> SBJoinPlayerSession = { 0x26c5080, 463 }; 
	// Function /Script/SB.SBCheatManager.SBJiraLoginUI
	constexpr static const FunctionPointer<USBCheatManager, void> SBJiraLoginUI = { 0x26c4370, 464 }; 
	// Function /Script/SB.SBCheatManager.SBJiraLogin
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBJiraLogin = { 0x26c4390, 465 }; 
	// Function /Script/SB.SBCheatManager.SBItemTableGroupPrint
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const int32_t> SBItemTableGroupPrint = { 0x26dbed0, 466 }; 
	// Function /Script/SB.SBCheatManager.SBItemMustAcquisition
	constexpr static const FunctionPointer<USBCheatManager, void> SBItemMustAcquisition = { 0x26bda80, 467 }; 
	// Function /Script/SB.SBCheatManager.SBIsHeadphonePluggedIn
	constexpr static const FunctionPointer<USBCheatManager, void> SBIsHeadphonePluggedIn = { 0x26d8330, 468 }; 
	// Function /Script/SB.SBCheatManager.SBInvalidationRoot
	constexpr static const FunctionPointer<USBCheatManager, void> SBInvalidationRoot = { 0x26c2410, 469 }; 
	// Function /Script/SB.SBCheatManager.SBInputKeyMappingTest
	constexpr static const FunctionPointer<USBCheatManager, void> SBInputKeyMappingTest = { 0x26bed60, 470 }; 
	// Function /Script/SB.SBCheatManager.SBInputKeyMappingSave
	constexpr static const FunctionPointer<USBCheatManager, void> SBInputKeyMappingSave = { 0x26bed40, 471 }; 
	// Function /Script/SB.SBCheatManager.SBInputKeyMappingRestore
	constexpr static const FunctionPointer<USBCheatManager, void> SBInputKeyMappingRestore = { 0x26bed10, 472 }; 
	// Function /Script/SB.SBCheatManager.SBInputKeyMappingForceRebuild
	constexpr static const FunctionPointer<USBCheatManager, void> SBInputKeyMappingForceRebuild = { 0x26bec20, 473 }; 
	// Function /Script/SB.SBCheatManager.SBInputBlockTimer
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const bool> SBInputBlockTimer = { 0x26cb680, 474 }; 
	// Function /Script/SB.SBCheatManager.SBInputBlockManual
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const float> SBInputBlockManual = { 0x26cb510, 475 }; 
	// Function /Script/SB.SBCheatManager.SBIgnoreHintActivateZoneTrigger
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBIgnoreHintActivateZoneTrigger = { 0x26c7870, 476 }; 
	// Function /Script/SB.SBCheatManager.SBHUDViewportSize
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const int32_t> SBHUDViewportSize = { 0x26bddc0, 477 }; 
	// Function /Script/SB.SBCheatManager.SBHUDViewportPos
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const int32_t, const int32_t> SBHUDViewportPos = { 0x26bdac0, 478 }; 
	// Function /Script/SB.SBCheatManager.SBHUDSkillRefreshIcon
	constexpr static const FunctionPointer<USBCheatManager, void> SBHUDSkillRefreshIcon = { 0x26c2680, 479 }; 
	// Function /Script/SB.SBCheatManager.SBHUDRefresh
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBHUDRefresh = { 0x26cba60, 480 }; 
	// Function /Script/SB.SBCheatManager.SBHUDPlayerInfoSendWigetEvent
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBHUDPlayerInfoSendWigetEvent = { 0x26d99e0, 481 }; 
	// Function /Script/SB.SBCheatManager.SBHUDPlayerInfoDetailToggle
	constexpr static const FunctionPointer<USBCheatManager, void> SBHUDPlayerInfoDetailToggle = { 0x26d99b0, 482 }; 
	// Function /Script/SB.SBCheatManager.SBHUDModeChange
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBHUDModeChange = { 0x26d73d0, 483 }; 
	// Function /Script/SB.SBCheatManager.SBHUDEnemyStatInfoDetailToggle
	constexpr static const FunctionPointer<USBCheatManager, void> SBHUDEnemyStatInfoDetailToggle = { 0x26d9980, 484 }; 
	// Function /Script/SB.SBCheatManager.SBHUDAspectRatio
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBHUDAspectRatio = { 0x26be840, 485 }; 
	// Function /Script/SB.SBCheatManager.SBHideActor
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool> SBHideActor = { 0x26be580, 486 }; 
	// Function /Script/SB.SBCheatManager.SBHDRTextureRenderShow
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool> SBHDRTextureRenderShow = { 0x26bfc40, 487 }; 
	// Function /Script/SB.SBCheatManager.SBHDRTextureRenderHide
	constexpr static const FunctionPointer<USBCheatManager, void> SBHDRTextureRenderHide = { 0x267db80, 488 }; 
	// Function /Script/SB.SBCheatManager.SBHDRTextureRefreshDPI
	constexpr static const FunctionPointer<USBCheatManager, void> SBHDRTextureRefreshDPI = { 0x26bfc10, 489 }; 
	// Function /Script/SB.SBCheatManager.SBHDRContrastDetail
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBHDRContrastDetail = { 0x26bf920, 490 }; 
	// Function /Script/SB.SBCheatManager.SBHDRBrightnessDetail
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBHDRBrightnessDetail = { 0x26bf920, 491 }; 
	// Function /Script/SB.SBCheatManager.SBGWorldOrigin
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const int32_t, const int32_t> SBGWorldOrigin = { 0x26dcc30, 492 }; 
	// Function /Script/SB.SBCheatManager.SBGetRewardFish
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FName, const float> SBGetRewardFish = { 0x26d4ab0, 493 }; 
	// Function /Script/SB.SBCheatManager.SBGetPublicIP
	constexpr static const FunctionPointer<USBCheatManager, void> SBGetPublicIP = { 0x26c9e30, 494 }; 
	// Function /Script/SB.SBCheatManager.SBGetPhotoModeLightPresetData
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBGetPhotoModeLightPresetData = { 0x26bccb0, 495 }; 
	// Function /Script/SB.SBCheatManager.SBGetPhotoModeLightLocation
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBGetPhotoModeLightLocation = { 0x26bcef0, 496 }; 
	// Function /Script/SB.SBCheatManager.SBGetGameIntentInfo
	constexpr static const FunctionPointer<USBCheatManager, void> SBGetGameIntentInfo = { 0x26c5710, 497 }; 
	// Function /Script/SB.SBCheatManager.SBGetFriendList
	constexpr static const FunctionPointer<USBCheatManager, void> SBGetFriendList = { 0x26c56f0, 498 }; 
	// Function /Script/SB.SBCheatManager.SBGetCouponUserInfo
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBGetCouponUserInfo = { 0x26c9250, 499 }; 
	// Function /Script/SB.SBCheatManager.SBGetCoupon
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const FString, const FString, const FString> SBGetCoupon = { 0x26c9530, 500 }; 
	// Function /Script/SB.SBCheatManager.SBGenerateSpawnGroupRuleFromZone
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBGenerateSpawnGroupRuleFromZone = { 0x26c4b70, 501 }; 
	// Function /Script/SB.SBCheatManager.SBGenerateSpawnGroupRule
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBGenerateSpawnGroupRule = { 0x26c4c90, 502 }; 
	// Function /Script/SB.SBCheatManager.SBGenerateMapResPosition
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const float, const float, const float, const float, const float, const float, const float, const int32_t> SBGenerateMapResPosition = { 0x26eb150, 503 }; 
	// Function /Script/SB.SBCheatManager.SBGenerateCirclePack
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const float, const float, const float, const float, const float, const float, const float, const int32_t, const int32_t, const float, const float> SBGenerateCirclePack = { 0x26eb710, 504 }; 
	// Function /Script/SB.SBCheatManager.SBGameUserSettings_StopBenchmark
	constexpr static const FunctionPointer<USBCheatManager, void> SBGameUserSettings_StopBenchmark = { 0x26bf2c0, 505 }; 
	// Function /Script/SB.SBCheatManager.SBGameUserSettings_SetPreset
	constexpr static const FunctionPointer<USBCheatManager, void, const int64_t> SBGameUserSettings_SetPreset = { 0x26bf3a0, 506 }; 
	// Function /Script/SB.SBCheatManager.SBGameUserSettings_Set
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const int64_t> SBGameUserSettings_Set = { 0x26bf4d0, 507 }; 
	// Function /Script/SB.SBCheatManager.SBGameUserSettings_RunBenchmark
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBGameUserSettings_RunBenchmark = { 0x26bf2e0, 508 }; 
	// Function /Script/SB.SBCheatManager.SBGameUserSettings_ResolutionScale
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBGameUserSettings_ResolutionScale = { 0x26bf740, 509 }; 
	// Function /Script/SB.SBCheatManager.SBGameUserSettings_HDDMode
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBGameUserSettings_HDDMode = { 0x26bf840, 510 }; 
	// Function /Script/SB.SBCheatManager.SBGameProgressSubQuest
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FName, const int32_t, const int32_t> SBGameProgressSubQuest = { 0x26e9200, 511 }; 
	// Function /Script/SB.SBCheatManager.SBGameProgressEpicQuest
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FName, const int32_t, const int32_t> SBGameProgressEpicQuest = { 0x26e95b0, 512 }; 
	// Function /Script/SB.SBCheatManager.SBGameProgressCommand
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const bool, const FName, const int32_t> SBGameProgressCommand = { 0x26e9810, 513 }; 
	// Function /Script/SB.SBCheatManager.SBGamePauseTagListPrint
	constexpr static const FunctionPointer<USBCheatManager, void> SBGamePauseTagListPrint = { 0x11615e0, 514 }; 
	// Function /Script/SB.SBCheatManager.SBGamePaused
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBGamePaused = { 0x26da080, 515 }; 
	// Function /Script/SB.SBCheatManager.SBGameOptionSubtitleVisible
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBGameOptionSubtitleVisible = { 0x26d2420, 516 }; 
	// Function /Script/SB.SBCheatManager.SBGameOptionSetActiveHDRLuminanceController
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBGameOptionSetActiveHDRLuminanceController = { 0x26d1c70, 517 }; 
	// Function /Script/SB.SBCheatManager.SBGameOptionResetNeedInitialSetup
	constexpr static const FunctionPointer<USBCheatManager, void> SBGameOptionResetNeedInitialSetup = { 0x26d1ad0, 518 }; 
	// Function /Script/SB.SBCheatManager.SBGameOptionResetNeedInitialContentsSetup
	constexpr static const FunctionPointer<USBCheatManager, void> SBGameOptionResetNeedInitialContentsSetup = { 0x26d1ba0, 519 }; 
	// Function /Script/SB.SBCheatManager.SBGameOptionMasterVolume
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBGameOptionMasterVolume = { 0x26d22a0, 520 }; 
	// Function /Script/SB.SBCheatManager.SBGameOptionKeyMappingReload
	constexpr static const FunctionPointer<USBCheatManager, void> SBGameOptionKeyMappingReload = { 0x26d1aa0, 521 }; 
	// Function /Script/SB.SBCheatManager.SBGameOptionHUDVisible
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBGameOptionHUDVisible = { 0x26d1fc0, 522 }; 
	// Function /Script/SB.SBCheatManager.SBGameOptionContrast
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBGameOptionContrast = { 0x26d1e70, 523 }; 
	// Function /Script/SB.SBCheatManager.SBGameOptionBGMVolume
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBGameOptionBGMVolume = { 0x26d2120, 524 }; 
	// Function /Script/SB.SBCheatManager.SBForceLOD
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBForceLOD = { 0x26c7140, 525 }; 
	// Function /Script/SB.SBCheatManager.SBForceLag
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float> SBForceLag = { 0x26d4450, 526 }; 
	// Function /Script/SB.SBCheatManager.SBForceHitFish
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBForceHitFish = { 0x26d4d60, 527 }; 
	// Function /Script/SB.SBCheatManager.SBForceHapticVibration
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBForceHapticVibration = { 0x26c63b0, 528 }; 
	// Function /Script/SB.SBCheatManager.SBForceGCActorPool
	constexpr static const FunctionPointer<USBCheatManager, void> SBForceGCActorPool = { 0x26d90c0, 529 }; 
	// Function /Script/SB.SBCheatManager.SBForceGC
	constexpr static const FunctionPointer<USBCheatManager, void> SBForceGC = { 0x26d90f0, 530 }; 
	// Function /Script/SB.SBCheatManager.SBForceEnsure
	constexpr static const FunctionPointer<USBCheatManager, void> SBForceEnsure = { 0x11615e0, 531 }; 
	// Function /Script/SB.SBCheatManager.SBForceCrash
	constexpr static const FunctionPointer<USBCheatManager, void> SBForceCrash = { 0x26e8360, 532 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackWarpIssue
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBFeedbackWarpIssue = { 0x26bea40, 533 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackUMapRefresh
	constexpr static const FunctionPointer<USBCheatManager, void> SBFeedbackUMapRefresh = { 0x11615e0, 534 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackUMapIssueMapChange
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBFeedbackUMapIssueMapChange = { 0x26e26b0, 535 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackUMapIssueCreate
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const int32_t> SBFeedbackUMapIssueCreate = { 0x26e2c90, 536 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackUMapIssueClose
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBFeedbackUMapIssueClose = { 0x26bea40, 537 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackOpenList
	constexpr static const FunctionPointer<USBCheatManager, void> SBFeedbackOpenList = { 0x11615e0, 538 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackIssueUpdate
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const FString, const int32_t, const int32_t> SBFeedbackIssueUpdate = { 0x26e28c0, 539 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackIssueRefresh
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBFeedbackIssueRefresh = { 0x26bea40, 540 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackCommentRemove
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBFeedbackCommentRemove = { 0x26e26b0, 541 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackCommentRefresh
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBFeedbackCommentRefresh = { 0x26bea40, 542 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackCommentEdit
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const FString> SBFeedbackCommentEdit = { 0x26e23c0, 543 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackCommentAdd
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBFeedbackCommentAdd = { 0x26e26b0, 544 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackCloseList
	constexpr static const FunctionPointer<USBCheatManager, void> SBFeedbackCloseList = { 0x11615e0, 545 }; 
	// Function /Script/SB.SBCheatManager.SBFeedbackChangeNextState
	constexpr static const FunctionPointer<USBCheatManager, void> SBFeedbackChangeNextState = { 0x11615e0, 546 }; 
	// Function /Script/SB.SBCheatManager.SBFailedQuest
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBFailedQuest = { 0x26ea8f0, 547 }; 
	// Function /Script/SB.SBCheatManager.SBExitNikkeStage
	constexpr static const FunctionPointer<USBCheatManager, void> SBExitNikkeStage = { 0x26cc990, 548 }; 
	// Function /Script/SB.SBCheatManager.SBEquipBodySuit
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBEquipBodySuit = { 0x26d9b00, 549 }; 
	// Function /Script/SB.SBCheatManager.SBEnvState
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FName> SBEnvState = { 0x26e7c50, 550 }; 
	// Function /Script/SB.SBCheatManager.SBEnvControlVolControlOverride
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool> SBEnvControlVolControlOverride = { 0x26c7d10, 551 }; 
	// Function /Script/SB.SBCheatManager.SBEntitlementInfinityLoading
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBEntitlementInfinityLoading = { 0x26d14c0, 552 }; 
	// Function /Script/SB.SBCheatManager.SBEnterWorld
	constexpr static const FunctionPointer<USBCheatManager, void, const FName&> SBEnterWorld = { 0x26ddf50, 553 }; 
	// Function /Script/SB.SBCheatManager.SBEnterTrainingRoom
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBEnterTrainingRoom = { 0x26de700, 554 }; 
	// Function /Script/SB.SBCheatManager.SBEnterNikkeStage
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FName> SBEnterNikkeStage = { 0x26cca50, 555 }; 
	// Function /Script/SB.SBCheatManager.SBEnteredByActivityFakeClear
	constexpr static const FunctionPointer<USBCheatManager, void> SBEnteredByActivityFakeClear = { 0x11615e0, 556 }; 
	// Function /Script/SB.SBCheatManager.SBEnteredByActivityFake
	constexpr static const FunctionPointer<USBCheatManager, void> SBEnteredByActivityFake = { 0x11615e0, 557 }; 
	// Function /Script/SB.SBCheatManager.SBEndActivity
	constexpr static const FunctionPointer<USBCheatManager, bool, const FName> SBEndActivity = { 0x26d1290, 558 }; 
	// Function /Script/SB.SBCheatManager.SBEnableAreaVolume
	constexpr static const FunctionPointer<USBCheatManager, void, const FName&, const bool> SBEnableAreaVolume = { 0x26cb110, 559 }; 
	// Function /Script/SB.SBCheatManager.SBDumpPackageList
	constexpr static const FunctionPointer<USBCheatManager, void> SBDumpPackageList = { 0x26c3990, 560 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseVibrationMode
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBDualSenseVibrationMode = { 0x26cdc60, 561 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseVibration
	constexpr static const FunctionPointer<USBCheatManager, void, const char, const char> SBDualSenseVibration = { 0x26cdea0, 562 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseToggleAdaptiveTriggerStateLog
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBDualSenseToggleAdaptiveTriggerStateLog = { 0x198eb40, 563 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseToggleAdaptiveTriggerPositionLog
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBDualSenseToggleAdaptiveTriggerPositionLog = { 0x198eb40, 564 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseCheckUpdate
	constexpr static const FunctionPointer<USBCheatManager, void> SBDualSenseCheckUpdate = { 0x11615e0, 565 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseCheckAudioSupport
	constexpr static const FunctionPointer<USBCheatManager, void> SBDualSenseCheckAudioSupport = { 0x26cdc40, 566 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseApplyTriggerEffectWithData
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBDualSenseApplyTriggerEffectWithData = { 0x26cdad0, 567 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseAdaptiveTriggerWeapon
	constexpr static const FunctionPointer<USBCheatManager, void, const char, const char, const char, const int32_t> SBDualSenseAdaptiveTriggerWeapon = { 0x26cf5e0, 568 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseAdaptiveTriggerVibration
	constexpr static const FunctionPointer<USBCheatManager, void, const char, const char, const char, const int32_t> SBDualSenseAdaptiveTriggerVibration = { 0x26cf290, 569 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseAdaptiveTriggerSlopeFeedback
	constexpr static const FunctionPointer<USBCheatManager, void, const char, const char, const char, const char, const int32_t> SBDualSenseAdaptiveTriggerSlopeFeedback = { 0x26ce850, 570 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseAdaptiveTriggerMultiplePositionVibration
	constexpr static const FunctionPointer<USBCheatManager, void, const char, const char, const char, const char, const char, const char, const char, const char, const char, const char, const char, const int32_t> SBDualSenseAdaptiveTriggerMultiplePositionVibration = { 0x26ce1a0, 571 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseAdaptiveTriggerMultiplePositionFeedback
	constexpr static const FunctionPointer<USBCheatManager, void, const char, const char, const char, const char, const char, const char, const char, const char, const char, const char, const int32_t> SBDualSenseAdaptiveTriggerMultiplePositionFeedback = { 0x26cec60, 572 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseAdaptiveTriggerFeedback
	constexpr static const FunctionPointer<USBCheatManager, void, const char, const char, const int32_t> SBDualSenseAdaptiveTriggerFeedback = { 0x26cf960, 573 }; 
	// Function /Script/SB.SBCheatManager.SBDualSenseAdaptiveTriggerClear
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBDualSenseAdaptiveTriggerClear = { 0x26ce0b0, 574 }; 
	// Function /Script/SB.SBCheatManager.SBDroneSpotLightCastShadow
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBDroneSpotLightCastShadow = { 0x26d74a0, 575 }; 
	// Function /Script/SB.SBCheatManager.SBDrawTestCurve
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float, const float> SBDrawTestCurve = { 0x26ec2e0, 576 }; 
	// Function /Script/SB.SBCheatManager.SBDrawPlayerMove
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBDrawPlayerMove = { 0x26ec4d0, 577 }; 
	// Function /Script/SB.SBCheatManager.SBDoesPakExist
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBDoesPakExist = { 0x26bcb20, 578 }; 
	// Function /Script/SB.SBCheatManager.SBDiffCaptureObjectList
	constexpr static const FunctionPointer<USBCheatManager, void> SBDiffCaptureObjectList = { 0x11615e0, 579 }; 
	// Function /Script/SB.SBCheatManager.SBDetachPlayerEquipment
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBDetachPlayerEquipment = { 0x26ebd70, 580 }; 
	// Function /Script/SB.SBCheatManager.SBDebugTheaterPlay
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBDebugTheaterPlay = { 0x26e7960, 581 }; 
	// Function /Script/SB.SBCheatManager.SBDebugSave
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBDebugSave = { 0x26a9510, 582 }; 
	// Function /Script/SB.SBCheatManager.SBDebugManualSaveData
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBDebugManualSaveData = { 0x26e0b80, 583 }; 
	// Function /Script/SB.SBCheatManager.SBDebugLogStatLLMFull
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const bool> SBDebugLogStatLLMFull = { 0x26c3d60, 584 }; 
	// Function /Script/SB.SBCheatManager.SBDebugLogOnSyncLoadPackage
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBDebugLogOnSyncLoadPackage = { 0x26a9510, 585 }; 
	// Function /Script/SB.SBCheatManager.SBDebugLogOnSyncLoadingFlush
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBDebugLogOnSyncLoadingFlush = { 0x26a9510, 586 }; 
	// Function /Script/SB.SBCheatManager.SBDebugLogOnAsyncLoadPackage
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBDebugLogOnAsyncLoadPackage = { 0x26a9510, 587 }; 
	// Function /Script/SB.SBCheatManager.SBDebugLogOnAsyncLoadingFlush
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBDebugLogOnAsyncLoadingFlush = { 0x26a9510, 588 }; 
	// Function /Script/SB.SBCheatManager.SBDebugAutoSaveData
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBDebugAutoSaveData = { 0x26e0de0, 589 }; 
	// Function /Script/SB.SBCheatManager.SBCurrentWorldInfo
	constexpr static const FunctionPointer<USBCheatManager, void> SBCurrentWorldInfo = { 0x26d9bd0, 590 }; 
	// Function /Script/SB.SBCheatManager.SBCurrentViewTarget
	constexpr static const FunctionPointer<USBCheatManager, void> SBCurrentViewTarget = { 0x26ef860, 591 }; 
	// Function /Script/SB.SBCheatManager.SBCurrentDeviceSteamDeck
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBCurrentDeviceSteamDeck = { 0x26a9510, 592 }; 
	// Function /Script/SB.SBCheatManager.SBCreditDebugCloseAllow
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBCreditDebugCloseAllow = { 0x26c1fd0, 593 }; 
	// Function /Script/SB.SBCheatManager.SBCreatePlayerSession
	constexpr static const FunctionPointer<USBCheatManager, void> SBCreatePlayerSession = { 0x26c5160, 594 }; 
	// Function /Script/SB.SBCheatManager.SBCreateItemRange
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const uint32_t, const uint32_t, const float, const float, const float, const float> SBCreateItemRange = { 0x26e62a0, 595 }; 
	// Function /Script/SB.SBCheatManager.SBCreateItemArc
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const uint32_t, const uint32_t, const float, const float, const int32_t, const float, const float, const float, const float, const float, const float, const float> SBCreateItemArc = { 0x26e5b40, 596 }; 
	// Function /Script/SB.SBCheatManager.SBCreateItem
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const uint32_t, const uint32_t, const float, const float, const float, const float, const float> SBCreateItem = { 0x26e66b0, 597 }; 
	// Function /Script/SB.SBCheatManager.SBCreateCharacter
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const float, const float, const float, const float> SBCreateCharacter = { 0x26ebff0, 598 }; 
	// Function /Script/SB.SBCheatManager.SBConnectDedicatedServer
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBConnectDedicatedServer = { 0x26dc460, 599 }; 
	// Function /Script/SB.SBCheatManager.SBConfigOverrideString
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBConfigOverrideString = { 0x26d6a20, 600 }; 
	// Function /Script/SB.SBCheatManager.SBConfigOverrideInt
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const int32_t> SBConfigOverrideInt = { 0x26d6840, 601 }; 
	// Function /Script/SB.SBCheatManager.SBConfigOverrideFloatArray
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString> SBConfigOverrideFloatArray = { 0x26d6250, 602 }; 
	// Function /Script/SB.SBCheatManager.SBConfigOverrideFloat
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const float> SBConfigOverrideFloat = { 0x26d6640, 603 }; 
	// Function /Script/SB.SBCheatManager.SBConfigOverrideBool
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const bool> SBConfigOverrideBool = { 0x26d6450, 604 }; 
	// Function /Script/SB.SBCheatManager.SBConditionTest
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBConditionTest = { 0x26d5c90, 605 }; 
	// Function /Script/SB.SBCheatManager.SBConditionGroupTest
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBConditionGroupTest = { 0x26d5b70, 606 }; 
	// Function /Script/SB.SBCheatManager.SBCompleteQuest
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const bool> SBCompleteQuest = { 0x26eace0, 607 }; 
	// Function /Script/SB.SBCheatManager.SBCompleteNikkeStage
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBCompleteNikkeStage = { 0x26a9510, 608 }; 
	// Function /Script/SB.SBCheatManager.SBCompleteHint
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBCompleteHint = { 0x26c7af0, 609 }; 
	// Function /Script/SB.SBCheatManager.SBColorVisionDeficiency
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const float, const bool, const bool> SBColorVisionDeficiency = { 0x26c8ad0, 610 }; 
	// Function /Script/SB.SBCheatManager.SBClearFixedEntitlement
	constexpr static const FunctionPointer<USBCheatManager, void> SBClearFixedEntitlement = { 0x26c7f80, 611 }; 
	// Function /Script/SB.SBCheatManager.SBClearDebugLog
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBClearDebugLog = { 0x26c22f0, 612 }; 
	// Function /Script/SB.SBCheatManager.SBClearCaptureObjectList
	constexpr static const FunctionPointer<USBCheatManager, void> SBClearCaptureObjectList = { 0x11615e0, 613 }; 
	// Function /Script/SB.SBCheatManager.SBClearACPool
	constexpr static const FunctionPointer<USBCheatManager, void> SBClearACPool = { 0x26c26a0, 614 }; 
	// Function /Script/SB.SBCheatManager.SBCheckTrialVersion
	constexpr static const FunctionPointer<USBCheatManager, void> SBCheckTrialVersion = { 0x11615e0, 615 }; 
	// Function /Script/SB.SBCheatManager.SBCheckPlayGoDebug
	constexpr static const FunctionPointer<USBCheatManager, void> SBCheckPlayGoDebug = { 0x26cc0a0, 616 }; 
	// Function /Script/SB.SBCheatManager.SBCheckChunkSize
	constexpr static const FunctionPointer<USBCheatManager, void, const uint32_t> SBCheckChunkSize = { 0x26cc1c0, 617 }; 
	// Function /Script/SB.SBCheatManager.SBCheckChunkProgress
	constexpr static const FunctionPointer<USBCheatManager, void, const uint32_t> SBCheckChunkProgress = { 0x26cc370, 618 }; 
	// Function /Script/SB.SBCheatManager.SBCheckChunkLocation
	constexpr static const FunctionPointer<USBCheatManager, void, const uint32_t> SBCheckChunkLocation = { 0x26cc1c0, 619 }; 
	// Function /Script/SB.SBCheatManager.SBCheckAvaiableLocationFromLineCheck
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float, const float, const float, const float, const float, const float> SBCheckAvaiableLocationFromLineCheck = { 0x26d9310, 620 }; 
	// Function /Script/SB.SBCheatManager.SBCheatTableCommand
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBCheatTableCommand = { 0x26bf1a0, 621 }; 
	// Function /Script/SB.SBCheatManager.SBCheatProgressSubQuestNewGamePlusMinMax
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FName, const int32_t> SBCheatProgressSubQuestNewGamePlusMinMax = { 0x26e9cc0, 622 }; 
	// Function /Script/SB.SBCheatManager.SBCheatProgressSubQuestMinMax
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const int32_t> SBCheatProgressSubQuestMinMax = { 0x26e9ed0, 623 }; 
	// Function /Script/SB.SBCheatManager.SBCheatProgressSubQuestCommand
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const bool, const FName, const int32_t> SBCheatProgressSubQuestCommand = { 0x26e9a50, 624 }; 
	// Function /Script/SB.SBCheatManager.SBCheatProgressSubQuest
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBCheatProgressSubQuest = { 0x26ea060, 625 }; 
	// Function /Script/SB.SBCheatManager.SBCheatProgressQuestNewGamePlusMinMax
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FName, const int32_t> SBCheatProgressQuestNewGamePlusMinMax = { 0x26ea160, 626 }; 
	// Function /Script/SB.SBCheatManager.SBCheatProgressQuestNewGamePlus
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const FName> SBCheatProgressQuestNewGamePlus = { 0x26ea530, 627 }; 
	// Function /Script/SB.SBCheatManager.SBCheatProgressQuestMinMax
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const int32_t> SBCheatProgressQuestMinMax = { 0x26ea3f0, 628 }; 
	// Function /Script/SB.SBCheatManager.SBCheatProgressQuest
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBCheatProgressQuest = { 0x26be200, 629 }; 
	// Function /Script/SB.SBCheatManager.SBCheatGroupLoop
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const int32_t> SBCheatGroupLoop = { 0x26c5d10, 630 }; 
	// Function /Script/SB.SBCheatManager.SBCheatGroup
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBCheatGroup = { 0x26c5e60, 631 }; 
	// Function /Script/SB.SBCheatManager.SBCharacterSetting
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const int32_t, const int32_t> SBCharacterSetting = { 0x26e9020, 632 }; 
	// Function /Script/SB.SBCheatManager.SBCharacterDespawnFromTag
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBCharacterDespawnFromTag = { 0x26c1c40, 633 }; 
	// Function /Script/SB.SBCheatManager.SBChangeWorld
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBChangeWorld = { 0x26de050, 634 }; 
	// Function /Script/SB.SBCheatManager.SBChangeRule
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBChangeRule = { 0x26d7640, 635 }; 
	// Function /Script/SB.SBCheatManager.SBChangeMesh
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t, const FName, const FName> SBChangeMesh = { 0x26e7f70, 636 }; 
	// Function /Script/SB.SBCheatManager.SBChangeFace
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBChangeFace = { 0x26e8140, 637 }; 
	// Function /Script/SB.SBCheatManager.SBChangeBody
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBChangeBody = { 0x26e8230, 638 }; 
	// Function /Script/SB.SBCheatManager.SBCaptureObjectList
	constexpr static const FunctionPointer<USBCheatManager, void> SBCaptureObjectList = { 0x11615e0, 639 }; 
	// Function /Script/SB.SBCheatManager.SBCameraFOV
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBCameraFOV = { 0x26e1ab0, 640 }; 
	// Function /Script/SB.SBCheatManager.SBBossKillInfinity
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const float> SBBossKillInfinity = { 0x26bfe10, 641 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeUnlockStageReset
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeUnlockStageReset = { 0x11615e0, 642 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeUnlockAllStage
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeUnlockAllStage = { 0x11615e0, 643 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeUnlockAllPreset
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeUnlockAllPreset = { 0x11615e0, 644 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeUnlockAllMode
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeUnlockAllMode = { 0x11615e0, 645 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeUnlockAll
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeUnlockAll = { 0x11615e0, 646 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeResetAllPreset
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeResetAllPreset = { 0x11615e0, 647 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeResetAllMode
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeResetAllMode = { 0x11615e0, 648 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeResetAll
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeResetAll = { 0x11615e0, 649 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeRecordResetStage
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBBossChallengeRecordResetStage = { 0x26bea40, 650 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeRecordReset
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeRecordReset = { 0x11615e0, 651 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengePrintBestRecord
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengePrintBestRecord = { 0x26bef90, 652 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeExit
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeExit = { 0x26bef00, 653 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallengeCompleteAllStage
	constexpr static const FunctionPointer<USBCheatManager, void> SBBossChallengeCompleteAllStage = { 0x11615e0, 654 }; 
	// Function /Script/SB.SBCheatManager.SBBossChallenge
	constexpr static const FunctionPointer<USBCheatManager, void, const FName&, const int32_t, const int32_t> SBBossChallenge = { 0x26ddb90, 655 }; 
	// Function /Script/SB.SBCheatManager.SBBoneToBone
	constexpr static const FunctionPointer<USBCheatManager, void, const float, const float, const int32_t> SBBoneToBone = { 0x26efd80, 656 }; 
	// Function /Script/SB.SBCheatManager.SBBlockLevelStreaming
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBBlockLevelStreaming = { 0x26c3b00, 657 }; 
	// Function /Script/SB.SBCheatManager.SBBackupTest
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBBackupTest = { 0x26c6c50, 658 }; 
	// Function /Script/SB.SBCheatManager.SBBackupDelete
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBBackupDelete = { 0x26c6b80, 659 }; 
	// Function /Script/SB.SBCheatManager.SBAutoSaveList
	constexpr static const FunctionPointer<USBCheatManager, void> SBAutoSaveList = { 0x26e17e0, 660 }; 
	// Function /Script/SB.SBCheatManager.SBAutoMemReportStop
	constexpr static const FunctionPointer<USBCheatManager, void> SBAutoMemReportStop = { 0x26c2a80, 661 }; 
	// Function /Script/SB.SBCheatManager.SBAutoMemReportStart
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBAutoMemReportStart = { 0x26c2ad0, 662 }; 
	// Function /Script/SB.SBCheatManager.SBAutoLoginWithOnlineIdentity
	constexpr static const FunctionPointer<USBCheatManager, void> SBAutoLoginWithOnlineIdentity = { 0x26bd810, 663 }; 
	// Function /Script/SB.SBCheatManager.SBAudioHRTFEnabledForAllEnable
	constexpr static const FunctionPointer<USBCheatManager, void> SBAudioHRTFEnabledForAllEnable = { 0x26d7cf0, 664 }; 
	// Function /Script/SB.SBCheatManager.SBAudioHRTFEnabledForAllDisable
	constexpr static const FunctionPointer<USBCheatManager, void> SBAudioHRTFEnabledForAllDisable = { 0x26d7c30, 665 }; 
	// Function /Script/SB.SBCheatManager.SBAudio3DMixdownPassthroughEnable
	constexpr static const FunctionPointer<USBCheatManager, void> SBAudio3DMixdownPassthroughEnable = { 0x26d7b40, 666 }; 
	// Function /Script/SB.SBCheatManager.SBAudio3DMixdownPassthroughDisable
	constexpr static const FunctionPointer<USBCheatManager, void> SBAudio3DMixdownPassthroughDisable = { 0x26d7a50, 667 }; 
	// Function /Script/SB.SBCheatManager.SBAttenuationVisualize
	constexpr static const FunctionPointer<USBCheatManager, void, const bool> SBAttenuationVisualize = { 0x26a9510, 668 }; 
	// Function /Script/SB.SBCheatManager.SBAttachPlayerEquipment
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBAttachPlayerEquipment = { 0x26ebeb0, 669 }; 
	// Function /Script/SB.SBCheatManager.SBAsyncLoadingScreenStop
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBAsyncLoadingScreenStop = { 0x26cd8e0, 670 }; 
	// Function /Script/SB.SBCheatManager.SBAsyncLoadingScreenPlay
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBAsyncLoadingScreenPlay = { 0x26cd9c0, 671 }; 
	// Function /Script/SB.SBCheatManager.SBArcEventSpawn
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> SBArcEventSpawn = { 0x26c24b0, 672 }; 
	// Function /Script/SB.SBCheatManager.SBApplyEffectMe
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBApplyEffectMe = { 0x26e2ff0, 673 }; 
	// Function /Script/SB.SBCheatManager.SBApplyEffect
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const int32_t> SBApplyEffect = { 0x26e30c0, 674 }; 
	// Function /Script/SB.SBCheatManager.SBAppFunc
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const bool> SBAppFunc = { 0x26c1a90, 675 }; 
	// Function /Script/SB.SBCheatManager.SBAnimSequenceGetTimeFromPos
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const FString, const float, const float, const float> SBAnimSequenceGetTimeFromPos = { 0x26db8b0, 676 }; 
	// Function /Script/SB.SBCheatManager.SBAnimSequenceBake
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBAnimSequenceBake = { 0x26bea40, 677 }; 
	// Function /Script/SB.SBCheatManager.SBAIMovePath
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const uint32_t> SBAIMovePath = { 0x26e7da0, 678 }; 
	// Function /Script/SB.SBCheatManager.SBAdjustSoundVolume
	constexpr static const FunctionPointer<USBCheatManager, void, const ESBSoundVolumeChannel, const float, const ESBSoundVolumeControlType> SBAdjustSoundVolume = { 0x26d8640, 679 }; 
	// Function /Script/SB.SBCheatManager.SBAddMaterialParamTest
	constexpr static const FunctionPointer<USBCheatManager, void> SBAddMaterialParamTest = { 0x26ef470, 680 }; 
	// Function /Script/SB.SBCheatManager.SBAddFixedEntitlement
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBAddFixedEntitlement = { 0x26d17f0, 681 }; 
	// Function /Script/SB.SBCheatManager.SBAddEntitlement
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBAddEntitlement = { 0x26d1920, 682 }; 
	// Function /Script/SB.SBCheatManager.SBAddDebugMessageFromStringTable
	constexpr static const FunctionPointer<USBCheatManager, void, const FString, const TEnumAsByte<ESBLocalize>> SBAddDebugMessageFromStringTable = { 0x26ef4e0, 683 }; 
	// Function /Script/SB.SBCheatManager.SBAddDebugMessage
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBAddDebugMessage = { 0x26ef710, 684 }; 
	// Function /Script/SB.SBCheatManager.SBActorTickDistance
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBActorTickDistance = { 0x26bf920, 685 }; 
	// Function /Script/SB.SBCheatManager.SBActorRenderDistance
	constexpr static const FunctionPointer<USBCheatManager, void, const float> SBActorRenderDistance = { 0x26e0110, 686 }; 
	// Function /Script/SB.SBCheatManager.SBActorInfo
	constexpr static const FunctionPointer<USBCheatManager, void, const FString> SBActorInfo = { 0x26cafd0, 687 }; 
	// Function /Script/SB.SBCheatManager.SBActiveCamp
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBActiveCamp = { 0x26c7470, 688 }; 
	// Function /Script/SB.SBCheatManager.SBActivateHint
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBActivateHint = { 0x26c7c00, 689 }; 
	// Function /Script/SB.SBCheatManager.SBAcquireSkillAll
	constexpr static const FunctionPointer<USBCheatManager, void, const bool, const bool, const bool> SBAcquireSkillAll = { 0x26de240, 690 }; 
	// Function /Script/SB.SBCheatManager.SBAcquireSkill
	constexpr static const FunctionPointer<USBCheatManager, void, const FName, const bool, const bool> SBAcquireSkill = { 0x26dfc80, 691 }; 
	// Function /Script/SB.SBCheatManager.SBAcquireQuest
	constexpr static const FunctionPointer<USBCheatManager, void, const FName> SBAcquireQuest = { 0x26eac10, 692 }; 
	// Function /Script/SB.SBCheatManager.SB720p
	constexpr static const FunctionPointer<USBCheatManager, void> SB720p = { 0x26f0010, 693 }; 
	// Function /Script/SB.SBCheatManager.SB2160p
	constexpr static const FunctionPointer<USBCheatManager, void> SB2160p = { 0x26eff50, 694 }; 
	// Function /Script/SB.SBCheatManager.SB1440p
	constexpr static const FunctionPointer<USBCheatManager, void> SB1440p = { 0x26eff90, 695 }; 
	// Function /Script/SB.SBCheatManager.SB1080p
	constexpr static const FunctionPointer<USBCheatManager, void> SB1080p = { 0x26effd0, 696 }; 
	// Function /Script/SB.SBCheatManager.ProfilePoint_F02
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> ProfilePoint_F02 = { 0x26c4a80, 697 }; 
	// Function /Script/SB.SBCheatManager.ProfilePoint_F01
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> ProfilePoint_F01 = { 0x26c4990, 698 }; 
	// Function /Script/SB.SBCheatManager.ProfilePoint_E05
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> ProfilePoint_E05 = { 0x26c46c0, 699 }; 
	// Function /Script/SB.SBCheatManager.ProfilePoint_E03
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> ProfilePoint_E03 = { 0x26c47b0, 700 }; 
	// Function /Script/SB.SBCheatManager.ProfilePoint_C05
	constexpr static const FunctionPointer<USBCheatManager, void, const int32_t> ProfilePoint_C05 = { 0x26c48a0, 701 }; 
};

/// Class /Script/SB.SBCheckFileNameLengthCommandlet
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class USBCheckFileNameLengthCommandlet : public UCommandlet
{ 
public:
};

/// Class /Script/SB.SBCineCameraActorBoundsComponent
/// Size: 0x01E0 (480 bytes) (0x0000C0 - 0x0001E0) align n/a MaxSize: 0x01E0
class USBCineCameraActorBoundsComponent : public UActorComponent
{ 
public:
	float                                              ViewDefaultRadius;                                          // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x00C4   (0x000C)  MISSED
	FTransform                                         ViewDefaultTransform;                                       // 0x00D0   (0x0030)  
	FTransform                                         ViewAdditiveTransform;                                      // 0x0100   (0x0030)  
	FTransform                                         ViewAdditive2Transform;                                     // 0x0130   (0x0030)  
	class USBCineCameraActorBoundsBoneTemplateData*    TemplateActorBoneData;                                      // 0x0160   (0x0008)  
	bool                                               bNotOverrideUseViewTarget;                                  // 0x0168   (0x0001)  
	TEnumAsByte<EEasingFunc>                           EasingFunc;                                                 // 0x0169   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x016A   (0x0002)  MISSED
	float                                              EasingAlpha;                                                // 0x016C   (0x0004)  
	bool                                               bUseMotionBlurAmountZero;                                   // 0x0170   (0x0001)  
	unsigned char                                      UnknownData05_7[0x6F];                                      // 0x0171   (0x006F)  MISSED
};

/// Class /Script/SB.SBCineCameraComponent
/// Size: 0x09E0 (2528 bytes) (0x0009C8 - 0x0009E0) align n/a MaxSize: 0x09E0
class USBCineCameraComponent : public UCineCameraComponent
{ 
public:
	class USBCineCameraActorBoundsComponent*           CameraActorBoundsComponent;                                 // 0x09C8   (0x0008)  
	bool                                               bForceDelayUpdate;                                          // 0x09D0   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x09D1   (0x000F)  MISSED
};

/// Class /Script/SB.SBCineCameraPostProcessActor
/// Size: 0x0890 (2192 bytes) (0x0002C8 - 0x000890) align n/a MaxSize: 0x0890
class ASBCineCameraPostProcessActor : public AActor
{ 
public:
	bool                                               bRun;                                                       // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x02C9   (0x0003)  MISSED
	float                                              PostProcessBlendWeight;                                     // 0x02CC   (0x0004)  
	FPostProcessSettings                               PostProcessSettings;                                        // 0x02D0   (0x05A0)  
	unsigned char                                      UnknownData03_7[0x20];                                      // 0x0870   (0x0020)  MISSED
};

/// Class /Script/SB.SBCineCameraSplineMetadata
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class USBCineCameraSplineMetadata : public USplineMetadata
{ 
public:
	TWeakObjectPtr<class USBCineCameraSplineComponent*> Owner;                                                     // 0x0028   (0x0008)  
};

/// Class /Script/SB.SBCineCameraSplineComponent
/// Size: 0x0680 (1664 bytes) (0x000630 - 0x000680) align n/a MaxSize: 0x0680
class USBCineCameraSplineComponent : public USplineComponent
{ 
public:
	FInterpCurveQuat                                   CameraRotation;                                             // 0x0630   (0x0018)  
	FInterpCurveFloat                                  CameraCurrentFocalLength;                                   // 0x0648   (0x0018)  
	FInterpCurveFloat                                  CameraManualFocusDistance;                                  // 0x0660   (0x0018)  
	class USBCineCameraSplineMetadata*                 SplineMetadata;                                             // 0x0678   (0x0008)  
};

/// Class /Script/SB.SBCineDialogueCameraActor
/// Size: 0x0910 (2320 bytes) (0x000900 - 0x000910) align n/a MaxSize: 0x0910
class ASBCineDialogueCameraActor : public ACineCameraActor
{ 
public:
	class USBCineCameraActorBoundsComponent*           CameraActorBoundsComponent;                                 // 0x0900   (0x0008)  
	class USBCineCameraComponent*                      SBCineCameraComponent;                                      // 0x0908   (0x0008)  
};

/// Class /Script/SB.SBCollisionGroupComponent
/// Size: 0x02C0 (704 bytes) (0x0000C0 - 0x0002C0) align n/a MaxSize: 0x02C0
class USBCollisionGroupComponent : public UActorComponent
{ 
public:
	class USBCharacterCollisionData*                   pCollisionData;                                             // 0x00C0   (0x0008)  
	float                                              ShapeScale;                                                 // 0x00C8   (0x0004)  
	bool                                               bIgnoreSingleShapeRecord;                                   // 0x00CC   (0x0001)  
	bool                                               bRegisterdTick;                                             // 0x00CD   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x00CE   (0x0002)  MISSED
	TArray<class UShapeComponent*>                     CreatedShapeComponent;                                      // 0x00D0   (0x0010)  
	unsigned char                                      UnknownData03_7[0x1E0];                                     // 0x00E0   (0x01E0)  MISSED
};

/// Struct /Script/SB.SBUserWidgetInputBindInfo
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUserWidgetInputBindInfo
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Class /Script/SB.SBUserWidget
/// Size: 0x0680 (1664 bytes) (0x000280 - 0x000680) align n/a MaxSize: 0x0680
class USBUserWidget : public UUserWidget
{ 
public:
	unsigned char                                      UnknownData06_8[0x248];                                     // 0x0280   (0x0248)  MISSED
	class USBUserWidget*                               ParentWidget;                                               // 0x04C8   (0x0008)  
	unsigned char                                      UnknownData07_6[0x78];                                      // 0x04D0   (0x0078)  MISSED
	TEnumAsByte<ESBUILogicType>                        TargetUILogic;                                              // 0x0548   (0x0001)  
	bool                                               bUseInputOnly;                                              // 0x0549   (0x0001)  
	bool                                               bInputOnlyWhenAllBlock;                                     // 0x054A   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x054B   (0x0001)  MISSED
	float                                              InputOpenBlockTime;                                         // 0x054C   (0x0004)  
	TSet<FName>                                        Tags;                                                       // 0x0550   (0x0050)  
	bool                                               bUseGroupFocus;                                             // 0x05A0   (0x0001)  
	bool                                               bUseShowMouseCursor;                                        // 0x05A1   (0x0001)  
	bool                                               bMouseCursorVisibleWhenKeyboardInput;                       // 0x05A2   (0x0001)  
	bool                                               bIgnorePause;                                               // 0x05A3   (0x0001)  
	bool                                               bTickActive;                                                // 0x05A4   (0x0001)  
	bool                                               bAccessSuperClassProperty;                                  // 0x05A5   (0x0001)  
	unsigned char                                      UnknownData09_6[0x2];                                       // 0x05A6   (0x0002)  MISSED
	int32_t                                            RemainInvalidateRootCount;                                  // 0x05A8   (0x0004)  
	TWeakObjectPtr<class USBUserWidget*>               CachedSBUserWidgetListView;                                 // 0x05AC   (0x0008)  
	TWeakObjectPtr<class UListView*>                   CachedWidgetListView;                                       // 0x05B4   (0x0008)  
	bool                                               bActiveMouseCursor;                                         // 0x05BC   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x05BD   (0x0003)  MISSED
	TWeakObjectPtr<class UListView*>                   RestoreFocusListView;                                       // 0x05C0   (0x0008)  
	TWeakObjectPtr<class UObject*>                     RestoreFocusListViewData;                                   // 0x05C8   (0x0008)  
	int32_t                                            RestoreFocusCheckRemainCount;                               // 0x05D0   (0x0004)  
	bool                                               bCheckEventWidgetFocusRestore : 1;                          // 0x05D4:0 (0x0001)  
	bool                                               bBindEventWidgetFocusRestore : 1;                           // 0x05D4:1 (0x0001)  
	unsigned char                                      UnknownData11_5[0x5B];                                      // 0x05D5   (0x005B)  MISSED
	TMap<ESBUIInputAxisType, FSBUserWidgetInputBindInfo> PuzzleInputInfoMap;                                       // 0x0630   (0x0050)  

	/// Functions
	// Function /Script/SB.SBUserWidget.SetTickActive
	constexpr static const FunctionPointer<USBUserWidget, void, const bool> SetTickActive = { 0x2823b10, 0 }; 
	// Function /Script/SB.SBUserWidget.SetEnableAutoDestroy
	constexpr static const FunctionPointer<USBUserWidget, void, const bool> SetEnableAutoDestroy = { 0x2822920, 1 }; 
	// Function /Script/SB.SBUserWidget.SendWidgetInputEvent
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const TEnumAsByte<EInputEvent>, const TEnumAsByte<ESBUILogicType>> SendWidgetInputEvent = { 0x2822630, 2 }; 
	// Function /Script/SB.SBUserWidget.SelectItemToListView
	constexpr static const FunctionPointer<USBUserWidget, void, const UObject*, const TEnumAsByte<ESBUILogicType>> SelectItemToListView = { 0x2823690, 3 }; 
	// Function /Script/SB.SBUserWidget.RestoreFocusToListView
	constexpr static const FunctionPointer<USBUserWidget, void, const UListView*, const UObject*> RestoreFocusToListView = { 0x2822a00, 4 }; 
	// Function /Script/SB.SBUserWidget.RequestWidgetFocus
	constexpr static const FunctionPointer<USBUserWidget, void, const UWidget*> RequestWidgetFocus = { 0x28262a0, 5 }; 
	// Function /Script/SB.SBUserWidget.RemoveDynamicChildUserWidget
	constexpr static const FunctionPointer<USBUserWidget, void, const USBUserWidget*> RemoveDynamicChildUserWidget = { 0x2823c10, 6 }; 
	// Function /Script/SB.SBUserWidget.RemoveChildSBUserWidget
	constexpr static const FunctionPointer<USBUserWidget, void, const USBUserWidget*> RemoveChildSBUserWidget = { 0x2824570, 7 }; 
	// Function /Script/SB.SBUserWidget.OnWidgetFocusRestore
	constexpr static const FunctionPointer<USBUserWidget, bool> OnWidgetFocusRestore = { 0x2822600, 8 }; 
	// Function /Script/SB.SBUserWidget.OnInputPuzzleRightAxisY
	constexpr static const FunctionPointer<USBUserWidget, void, const float> OnInputPuzzleRightAxisY = { 0x2bbb090, 9 }; 
	// Function /Script/SB.SBUserWidget.OnInputPuzzleRightAxisX
	constexpr static const FunctionPointer<USBUserWidget, void, const float> OnInputPuzzleRightAxisX = { 0x2bbb090, 10 }; 
	// Function /Script/SB.SBUserWidget.OnInputPuzzleLeftAxisY
	constexpr static const FunctionPointer<USBUserWidget, void, const float> OnInputPuzzleLeftAxisY = { 0x2bbb090, 11 }; 
	// Function /Script/SB.SBUserWidget.OnInputPuzzleLeftAxisX
	constexpr static const FunctionPointer<USBUserWidget, void, const float> OnInputPuzzleLeftAxisX = { 0x2bbb090, 12 }; 
	// Function /Script/SB.SBUserWidget.OnExternalUIChange
	constexpr static const FunctionPointer<USBUserWidget, void, const bool, const bool> OnExternalUIChange = { 0x2bbb090, 13 }; 
	// Function /Script/SB.SBUserWidget.NotifyReleaseToListView
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const UObject*, const TEnumAsByte<ESBUILogicType>> NotifyReleaseToListView = { 0x2822ea0, 14 }; 
	// Function /Script/SB.SBUserWidget.NotifyPressToListView
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const UObject*, const TEnumAsByte<ESBUILogicType>, const bool> NotifyPressToListView = { 0x28230b0, 15 }; 
	// Function /Script/SB.SBUserWidget.NotifyDoubleClickToListView
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const UObject*, const TEnumAsByte<ESBUILogicType>, const bool> NotifyDoubleClickToListView = { 0x2823390, 16 }; 
	// Function /Script/SB.SBUserWidget.NotifyClientRunEvent
	constexpr static const FunctionPointer<USBUserWidget, void, const TEnumAsByte<ESBZoneEventType>, const FName> NotifyClientRunEvent = { 0x2825460, 17 }; 
	// Function /Script/SB.SBUserWidget.NotifyClickToListView
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const UObject*, const TEnumAsByte<ESBUILogicType>, const bool> NotifyClickToListView = { 0x2823390, 18 }; 
	// Function /Script/SB.SBUserWidget.NotifyBlueprint
	constexpr static const FunctionPointer<USBUserWidget, void, const FString> NotifyBlueprint = { 0x2825710, 19 }; 
	// Function /Script/SB.SBUserWidget.LoadBrushAsyncResourceImageWidgets
	constexpr static const FunctionPointer<USBUserWidget, void> LoadBrushAsyncResourceImageWidgets = { 0x2823a70, 20 }; 
	// Function /Script/SB.SBUserWidget.LastFocusActive
	constexpr static const FunctionPointer<USBUserWidget, bool, const bool> LastFocusActive = { 0x2825fc0, 21 }; 
	// Function /Script/SB.SBUserWidget.KeyReleased
	constexpr static const FunctionPointer<USBUserWidget, bool, const FKey> KeyReleased = { 0x2824b50, 22 }; 
	// Function /Script/SB.SBUserWidget.KeyPressed
	constexpr static const FunctionPointer<USBUserWidget, bool, const FKey> KeyPressed = { 0x2824d80, 23 }; 
	// Function /Script/SB.SBUserWidget.IsVisiblityParent
	constexpr static const FunctionPointer<USBUserWidget, bool, const bool> IsVisiblityParent = { 0x2826600, 24 }; 
	// Function /Script/SB.SBUserWidget.IsTickActive
	constexpr static const FunctionPointer<USBUserWidget, bool> IsTickActive = { 0x2823bf0, 25 }; 
	// Function /Script/SB.SBUserWidget.IsSameParentGroupFoucs
	constexpr static const FunctionPointer<USBUserWidget, bool, const USBUserWidget*, const FName> IsSameParentGroupFoucs = { 0x28260b0, 26 }; 
	// Function /Script/SB.SBUserWidget.IsManagedParentGroupFocus
	constexpr static const FunctionPointer<USBUserWidget, bool> IsManagedParentGroupFocus = { 0x2826260, 27 }; 
	// Function /Script/SB.SBUserWidget.IsKeyDown
	constexpr static const FunctionPointer<USBUserWidget, bool, const FKey> IsKeyDown = { 0x2824950, 28 }; 
	// Function /Script/SB.SBUserWidget.IsFocusSBUserWidget
	constexpr static const FunctionPointer<USBUserWidget, bool> IsFocusSBUserWidget = { 0x2825e60, 29 }; 
	// Function /Script/SB.SBUserWidget.IsAutoDestroy
	constexpr static const FunctionPointer<USBUserWidget, bool> IsAutoDestroy = { 0x2822900, 30 }; 
	// Function /Script/SB.SBUserWidget.InvalidationRootWindow
	constexpr static const FunctionPointer<USBUserWidget, void> InvalidationRootWindow = { 0x26c2410, 31 }; 
	// Function /Script/SB.SBUserWidget.InputWidgetUnbind
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const TEnumAsByte<EInputEvent>, const USBUserWidget*> InputWidgetUnbind = { 0x28259f0, 32 }; 
	// Function /Script/SB.SBUserWidget.InputWidgetBind
	constexpr static const FunctionPointer<USBUserWidget, bool, const USBUserWidget*, const FName, const int32_t, const TEnumAsByte<EInputEvent>> InputWidgetBind = { 0x2825be0, 33 }; 
	// Function /Script/SB.SBUserWidget.HasFocusActive
	constexpr static const FunctionPointer<USBUserWidget, bool, const bool> HasFocusActive = { 0x2825ed0, 34 }; 
	// Function /Script/SB.SBUserWidget.GetUserWidgetFromTileView
	constexpr static const FunctionPointer<USBUserWidget, USBUserWidget*, const UTileView*, const UObject*> GetUserWidgetFromTileView = { 0x2824240, 35 }; 
	// Function /Script/SB.SBUserWidget.GetUserWidgetFromListView
	constexpr static const FunctionPointer<USBUserWidget, USBUserWidget*, const UListView*, const UObject*> GetUserWidgetFromListView = { 0x2824240, 36 }; 
	// Function /Script/SB.SBUserWidget.GetTextureStyleSetKey
	constexpr static const FunctionPointer<USBUserWidget, UTexture2D*, const USBTextureStyleSetData*, const FKey, const TEnumAsByte<ESBTextureStyleType>> GetTextureStyleSetKey = { 0x2824f80, 37 }; 
	// Function /Script/SB.SBUserWidget.GetTextureStyleSetAction
	constexpr static const FunctionPointer<USBUserWidget, UTexture2D*, const USBTextureStyleSetData*, const FName, const TEnumAsByte<ESBTextureStyleType>> GetTextureStyleSetAction = { 0x2825250, 38 }; 
	// Function /Script/SB.SBUserWidget.GetSBNavigation
	constexpr static const FunctionPointer<USBUserWidget, UWidget*, const EUINavigation> GetSBNavigation = { 0x2826380, 39 }; 
	// Function /Script/SB.SBUserWidget.GetRightStickVector
	constexpr static const FunctionPointer<USBUserWidget, FVector2D> GetRightStickVector = { 0x2824020, 40 }; 
	// Function /Script/SB.SBUserWidget.GetRenderOpacityParent
	constexpr static const FunctionPointer<USBUserWidget, float> GetRenderOpacityParent = { 0x28264a0, 41 }; 
	// Function /Script/SB.SBUserWidget.GetLeftStickVector
	constexpr static const FunctionPointer<USBUserWidget, FVector2D> GetLeftStickVector = { 0x2824130, 42 }; 
	// Function /Script/SB.SBUserWidget.GenerateEventObserverNameKey
	constexpr static const FunctionPointer<USBUserWidget, FName, const FName, const FName, const FString> GenerateEventObserverNameKey = { 0x28266f0, 43 }; 
	// Function /Script/SB.SBUserWidget.FoundParentWidgetHasUILogicType
	constexpr static const FunctionPointer<USBUserWidget, USBUserWidget*> FoundParentWidgetHasUILogicType = { 0x2824520, 44 }; 
	// Function /Script/SB.SBUserWidget.FoundFirstFocusWidget
	constexpr static const FunctionPointer<USBUserWidget, UWidget*> FoundFirstFocusWidget = { 0x2826470, 45 }; 
	// Function /Script/SB.SBUserWidget.FindWidgetEventObserverNameEventTag
	constexpr static const FunctionPointer<USBUserWidget, USBUserWidgetEventObserver*, const FName> FindWidgetEventObserverNameEventTag = { 0x2826960, 46 }; 
	// Function /Script/SB.SBUserWidget.FindParentSBUserWidget
	constexpr static const FunctionPointer<USBUserWidget, USBUserWidget*, const UWidget*, const TEnumAsByte<ESBUILogicType>> FindParentSBUserWidget = { 0x2823840, 47 }; 
	// Function /Script/SB.SBUserWidget.EventWidgetPaused
	constexpr static const FunctionPointer<USBUserWidget, void, const bool> EventWidgetPaused = { 0x2bbb090, 48 }; 
	// Function /Script/SB.SBUserWidget.EventWidgetGroupFocusDeactive
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const USBUserWidget*> EventWidgetGroupFocusDeactive = { 0x2bbb090, 49 }; 
	// Function /Script/SB.SBUserWidget.EventWidgetGroupFocusChanged
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const USBUserWidget*, const FName, const USBUserWidget*> EventWidgetGroupFocusChanged = { 0x2bbb090, 50 }; 
	// Function /Script/SB.SBUserWidget.EventWidgetGroupFocusActive
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const USBUserWidget*> EventWidgetGroupFocusActive = { 0x2bbb090, 51 }; 
	// Function /Script/SB.SBUserWidget.EventWidgetFocusDeactive
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const UWidget*, const USBUserWidget*, const FName, const UWidget*> EventWidgetFocusDeactive = { 0x2bbb090, 52 }; 
	// Function /Script/SB.SBUserWidget.EventWidgetFocusActive
	constexpr static const FunctionPointer<USBUserWidget, void, const FName, const UWidget*> EventWidgetFocusActive = { 0x2bbb090, 53 }; 
	// Function /Script/SB.SBUserWidget.EventTileViewObjectUpdate
	constexpr static const FunctionPointer<USBUserWidget, void, const UObject*> EventTileViewObjectUpdate = { 0x2bbb090, 54 }; 
	// Function /Script/SB.SBUserWidget.EventReleaseWidget
	constexpr static const FunctionPointer<USBUserWidget, void> EventReleaseWidget = { 0x2bbb090, 55 }; 
	// Function /Script/SB.SBUserWidget.EventNotification
	constexpr static const FunctionPointer<USBUserWidget, void, const FString> EventNotification = { 0x2bbb090, 56 }; 
	// Function /Script/SB.SBUserWidget.EventListViewObjectUpdate
	constexpr static const FunctionPointer<USBUserWidget, void, const UObject*> EventListViewObjectUpdate = { 0x2bbb090, 57 }; 
	// Function /Script/SB.SBUserWidget.EventInitWidget
	constexpr static const FunctionPointer<USBUserWidget, void> EventInitWidget = { 0x2bbb090, 58 }; 
	// Function /Script/SB.SBUserWidget.EventFocusActivate
	constexpr static const FunctionPointer<USBUserWidget, void, const bool> EventFocusActivate = { 0x2bbb090, 59 }; 
	// Function /Script/SB.SBUserWidget.EventFirstWidgetFocus
	constexpr static const FunctionPointer<USBUserWidget, void> EventFirstWidgetFocus = { 0x2bbb090, 60 }; 
	// Function /Script/SB.SBUserWidget.CreateDynamicChildUserWidget
	constexpr static const FunctionPointer<USBUserWidget, USBUserWidget*, const UClass*, const UPanelWidget*> CreateDynamicChildUserWidget = { 0x2823d00, 61 }; 
	// Function /Script/SB.SBUserWidget.ConsumeNotifyBlueprint
	constexpr static const FunctionPointer<USBUserWidget, bool, const FString> ConsumeNotifyBlueprint = { 0x2825610, 62 }; 
	// Function /Script/SB.SBUserWidget.ConsumeInputEvent
	constexpr static const FunctionPointer<USBUserWidget, bool, const USBUserWidget*, const FName, const TEnumAsByte<EInputEvent>> ConsumeInputEvent = { 0x2825800, 63 }; 
	// Function /Script/SB.SBUserWidget.CloseSelf
	constexpr static const FunctionPointer<USBUserWidget, void> CloseSelf = { 0x2729f80, 64 }; 
	// Function /Script/SB.SBUserWidget.ClearBrushAsyncResourceImageWidgets
	constexpr static const FunctionPointer<USBUserWidget, void> ClearBrushAsyncResourceImageWidgets = { 0x28239d0, 65 }; 
	// Function /Script/SB.SBUserWidget.AddChildSBUserWidget
	constexpr static const FunctionPointer<USBUserWidget, void, const USBUserWidget*, const bool> AddChildSBUserWidget = { 0x2824680, 66 }; 
};

/// Class /Script/SB.SBComboBoxItemWidget
/// Size: 0x06C0 (1728 bytes) (0x000680 - 0x0006C0) align n/a MaxSize: 0x06C0
class USBComboBoxItemWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x40];                                      // 0x0680   (0x0040)  MISSED

	/// Functions
	// Function /Script/SB.SBComboBoxItemWidget.SelectItem
	constexpr static const FunctionPointer<USBComboBoxItemWidget, void> SelectItem = { 0x26fbbb0, 0 }; 
	// Function /Script/SB.SBComboBoxItemWidget.OnItemFocusSelectionInactive
	constexpr static const FunctionPointer<USBComboBoxItemWidget, void, const USBUIComboBoxBaseDataObject*> OnItemFocusSelectionInactive = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBComboBoxItemWidget.OnItemFocusSelectionActive
	constexpr static const FunctionPointer<USBComboBoxItemWidget, void, const USBUIComboBoxBaseDataObject*> OnItemFocusSelectionActive = { 0x2bbb090, 2 }; 
	// Function /Script/SB.SBComboBoxItemWidget.OnItemDataChanged
	constexpr static const FunctionPointer<USBComboBoxItemWidget, void, const USBUIComboBoxBaseDataObject*> OnItemDataChanged = { 0x2bbb090, 3 }; 
};

/// Struct /Script/SB.SBComboBoxItemSet
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBComboBoxItemSet
{ 
	unsigned char                                      UnknownData02_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	class UObject*                                     ItemData;                                                   // 0x0010   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0018   (0x0008)  MISSED
};

/// Class /Script/SB.SBComboBoxWidget
/// Size: 0x0F78 (3960 bytes) (0x000EC8 - 0x000F78) align n/a MaxSize: 0x0F78
class USBComboBoxWidget : public UComboBoxString
{ 
public:
	FMulticastInlineDelegate                           OnGeneratedItemWidget;                                      // 0x0EC8   (0x0010)  
	FMulticastInlineDelegate                           OnSelectionChangedComboBox;                                 // 0x0ED8   (0x0010)  
	FMulticastInlineDelegate                           OnFocusChangedComboBox;                                     // 0x0EE8   (0x0010)  
	FMulticastInlineDelegate                           OnEnterHoverComboBoxItem;                                   // 0x0EF8   (0x0010)  
	FMulticastInlineDelegate                           OnExitHoverComboBoxItem;                                    // 0x0F08   (0x0010)  
	bool                                               DisableHeaderItemWidget;                                    // 0x0F18   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0F19   (0x0007)  MISSED
	FSlateSound                                        FocusChangedSound;                                          // 0x0F20   (0x0018)  
	class UClass*                                      ItemWidgetClass;                                            // 0x0F38   (0x0008)  
	TArray<FSBComboBoxItemSet>                         ItemSetArray;                                               // 0x0F40   (0x0010)  
	unsigned char                                      UnknownData03_7[0x28];                                      // 0x0F50   (0x0028)  MISSED

	/// Functions
	// Function /Script/SB.SBComboBoxWidget.SetManualOpen
	constexpr static const FunctionPointer<USBComboBoxWidget, void, const bool> SetManualOpen = { 0x26fc710, 0 }; 
	// Function /Script/SB.SBComboBoxWidget.SelectItemByIndex
	constexpr static const FunctionPointer<USBComboBoxWidget, bool, const int32_t> SelectItemByIndex = { 0x26fca50, 1 }; 
	// Function /Script/SB.SBComboBoxWidget.SBOnSelectionChangedEvent__DelegateSignature
	constexpr static const FunctionPointer<USBComboBoxWidget, void, const UObject*, const TEnumAsByte<ESelectInfo>> SBOnSelectionChangedEvent__DelegateSignature = { 0x2bbb090, 2 }; 
	// Function /Script/SB.SBComboBoxWidget.SBOnHoverItemEvent__DelegateSignature
	constexpr static const FunctionPointer<USBComboBoxWidget, void, const UObject*> SBOnHoverItemEvent__DelegateSignature = { 0x2bbb090, 3 }; 
	// Function /Script/SB.SBComboBoxWidget.SBOnGeneratedItemWidget__DelegateSignature
	constexpr static const FunctionPointer<USBComboBoxWidget, void, const USBComboBoxItemWidget*> SBOnGeneratedItemWidget__DelegateSignature = { 0x2bbb090, 4 }; 
	// Function /Script/SB.SBComboBoxWidget.SBOnFocusChangedEvent__DelegateSignature
	constexpr static const FunctionPointer<USBComboBoxWidget, void, const UObject*, const UObject*> SBOnFocusChangedEvent__DelegateSignature = { 0x2bbb090, 5 }; 
	// Function /Script/SB.SBComboBoxWidget.RemoveItemByIndex
	constexpr static const FunctionPointer<USBComboBoxWidget, bool, const int32_t> RemoveItemByIndex = { 0x26fcb80, 6 }; 
	// Function /Script/SB.SBComboBoxWidget.RemoveItem
	constexpr static const FunctionPointer<USBComboBoxWidget, void, const UObject*> RemoveItem = { 0x26fcd90, 7 }; 
	// Function /Script/SB.SBComboBoxWidget.HandleSelectionChangedInternal
	constexpr static const FunctionPointer<USBComboBoxWidget, void, const FString, const TEnumAsByte<ESelectInfo>> HandleSelectionChangedInternal = { 0x26fc400, 8 }; 
	// Function /Script/SB.SBComboBoxWidget.HandleFocusSelectionChangedInternal
	constexpr static const FunctionPointer<USBComboBoxWidget, void, const FString, const TEnumAsByte<ESelectInfo>> HandleFocusSelectionChangedInternal = { 0x26fc240, 9 }; 
	// Function /Script/SB.SBComboBoxWidget.GetItemAt
	constexpr static const FunctionPointer<USBComboBoxWidget, UObject*, const int32_t> GetItemAt = { 0x26fc920, 10 }; 
	// Function /Script/SB.SBComboBoxWidget.GetEntryWidgetFromItem
	constexpr static const FunctionPointer<USBComboBoxWidget, USBComboBoxItemWidget*, const UObject*> GetEntryWidgetFromItem = { 0x26fc7f0, 11 }; 
	// Function /Script/SB.SBComboBoxWidget.GenerateItemWidget
	constexpr static const FunctionPointer<USBComboBoxWidget, UWidget*, const FString> GenerateItemWidget = { 0x26fc5c0, 12 }; 
	// Function /Script/SB.SBComboBoxWidget.FindOptionIndexByItem
	constexpr static const FunctionPointer<USBComboBoxWidget, int32_t, const UObject*> FindOptionIndexByItem = { 0x26fcc70, 13 }; 
	// Function /Script/SB.SBComboBoxWidget.ClearItems
	constexpr static const FunctionPointer<USBComboBoxWidget, void> ClearItems = { 0x26fca30, 14 }; 
	// Function /Script/SB.SBComboBoxWidget.AddItem
	constexpr static const FunctionPointer<USBComboBoxWidget, void, const UObject*> AddItem = { 0x26fce70, 15 }; 
};

/// Class /Script/SB.SBCommonCreditDataObject
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class USBCommonCreditDataObject : public UObject
{ 
public:
	uint32_t                                           TableId;                                                    // 0x0028   (0x0004)  
	int32_t                                            VoiceIndex;                                                 // 0x002C   (0x0004)  
};

/// Class /Script/SB.SBCommonCreditSlotWidget
/// Size: 0x0690 (1680 bytes) (0x000680 - 0x000690) align n/a MaxSize: 0x0690
class USBCommonCreditSlotWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0680   (0x0008)  MISSED
	uint32_t                                           TableId;                                                    // 0x0688   (0x0004)  
	int32_t                                            VoiceIndex;                                                 // 0x068C   (0x0004)  

	/// Functions
	// Function /Script/SB.SBCommonCreditSlotWidget.GetTableData
	constexpr static const FunctionPointer<USBCommonCreditSlotWidget, bool, const FSBCreditTableProperty&> GetTableData = { 0x26fd920, 0 }; 
	// Function /Script/SB.SBCommonCreditSlotWidget.EventRefresh
	constexpr static const FunctionPointer<USBCommonCreditSlotWidget, void> EventRefresh = { 0x2bbb090, 1 }; 
};

/// Class /Script/SB.SBCommonCreditWidget
/// Size: 0x06F0 (1776 bytes) (0x000680 - 0x0006F0) align n/a MaxSize: 0x06F0
class USBCommonCreditWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData05_8[0x10];                                      // 0x0680   (0x0010)  MISSED
	float                                              ScrollSpeed;                                                // 0x0690   (0x0004)  
	float                                              HoldScrollSpeedStartFactor;                                 // 0x0694   (0x0004)  
	float                                              HoldScrollSpeedEndFactor;                                   // 0x0698   (0x0004)  
	float                                              ScrollHoldTimeMax;                                          // 0x069C   (0x0004)  
	class UCurveFloat*                                 ScrollSpeedHoldCurve;                                       // 0x06A0   (0x0008)  
	TArray<float>                                      SpeedStepArray;                                             // 0x06A8   (0x0010)  
	ESBCommonCreditState                               State;                                                      // 0x06B8   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x06B9   (0x0007)  MISSED
	class UListView*                                   ListView;                                                   // 0x06C0   (0x0008)  
	bool                                               bNotifyEndScroll;                                           // 0x06C8   (0x0001)  
	bool                                               bAllowClose;                                                // 0x06C9   (0x0001)  
	bool                                               bModeScrollControl;                                         // 0x06CA   (0x0001)  
	unsigned char                                      UnknownData07_6[0x1];                                       // 0x06CB   (0x0001)  MISSED
	int32_t                                            CurrentSpeedStep;                                           // 0x06CC   (0x0004)  
	int32_t                                            VoiceIndex;                                                 // 0x06D0   (0x0004)  
	float                                              CloseHoldTime;                                              // 0x06D4   (0x0004)  
	float                                              CloseProgress;                                              // 0x06D8   (0x0004)  
	bool                                               bClosePress;                                                // 0x06DC   (0x0001)  
	bool                                               bInputPressDPadRight;                                       // 0x06DD   (0x0001)  
	bool                                               bInputPressAccept;                                          // 0x06DE   (0x0001)  
	bool                                               bInputPressFaceTop;                                         // 0x06DF   (0x0001)  
	bool                                               bInputPressFaceLeft;                                        // 0x06E0   (0x0001)  
	bool                                               bClosePressLast;                                            // 0x06E1   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x06E2   (0x0002)  MISSED
	float                                              ClosePressTime;                                             // 0x06E4   (0x0004)  
	bool                                               bDebugAllowClose;                                           // 0x06E8   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x06E9   (0x0003)  MISSED
	float                                              ScrollHoldTime;                                             // 0x06EC   (0x0004)  

	/// Functions
	// Function /Script/SB.SBCommonCreditWidget.IsAllowClose
	constexpr static const FunctionPointer<USBCommonCreditWidget, bool> IsAllowClose = { 0x26fe020, 0 }; 
	// Function /Script/SB.SBCommonCreditWidget.EventStateExit
	constexpr static const FunctionPointer<USBCommonCreditWidget, void, const ESBCommonCreditState> EventStateExit = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBCommonCreditWidget.EventStateEnter
	constexpr static const FunctionPointer<USBCommonCreditWidget, void, const ESBCommonCreditState> EventStateEnter = { 0x2bbb090, 2 }; 
	// Function /Script/SB.SBCommonCreditWidget.EventEndScroll
	constexpr static const FunctionPointer<USBCommonCreditWidget, void> EventEndScroll = { 0x2bbb090, 3 }; 
	// Function /Script/SB.SBCommonCreditWidget.EventChangeScrollSpeed
	constexpr static const FunctionPointer<USBCommonCreditWidget, void, const int32_t> EventChangeScrollSpeed = { 0x2bbb090, 4 }; 
	// Function /Script/SB.SBCommonCreditWidget.EventChangeCloseProgress
	constexpr static const FunctionPointer<USBCommonCreditWidget, void, const float> EventChangeCloseProgress = { 0x2bbb090, 5 }; 
	// Function /Script/SB.SBCommonCreditWidget.EventChangeCloseAllow
	constexpr static const FunctionPointer<USBCommonCreditWidget, void, const bool> EventChangeCloseAllow = { 0x2bbb090, 6 }; 
	// Function /Script/SB.SBCommonCreditWidget.ChangeState
	constexpr static const FunctionPointer<USBCommonCreditWidget, void, const ESBCommonCreditState> ChangeState = { 0x26fe060, 7 }; 
};

/// Struct /Script/SB.SBCommonManualTabBtnData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBCommonManualTabBtnData
{ 
	FName                                              TabAlias;                                                   // 0x0000   (0x0008)  
	FText                                              DisplayText;                                                // 0x0008   (0x0018)  
	FName                                              DotAlias;                                                   // 0x0020   (0x0008)  
	FName                                              ParentDotAlias;                                             // 0x0028   (0x0008)  
};

/// Class /Script/SB.SBCommonManualTabWidget
/// Size: 0x0938 (2360 bytes) (0x000680 - 0x000938) align n/a MaxSize: 0x0938
class USBCommonManualTabWidget : public USBUserWidget
{ 
public:
	FName                                              CurrentTabAlias;                                            // 0x0680   (0x0008)  
	class UImage*                                      LeftIcon;                                                   // 0x0688   (0x0008)  
	class USpacer*                                     LeftIcon_LeftSpace;                                         // 0x0690   (0x0008)  
	class USpacer*                                     LeftIcon_RightSpace;                                        // 0x0698   (0x0008)  
	class UImage*                                      RightIcon;                                                  // 0x06A0   (0x0008)  
	class USpacer*                                     RightIcon_LeftSpace;                                        // 0x06A8   (0x0008)  
	class USpacer*                                     RightIcon_RightSpace;                                       // 0x06B0   (0x0008)  
	class UHorizontalBox*                              TabButtonContainer;                                         // 0x06B8   (0x0008)  
	float                                              TabBtnWidth;                                                // 0x06C0   (0x0004)  
	float                                              TabBtnMinPadding;                                           // 0x06C4   (0x0004)  
	FSlateBrush                                        LeftIconBrush;                                              // 0x06C8   (0x0090)  
	FName                                              LeftIconResourceAction;                                     // 0x0758   (0x0008)  
	FSlateBrush                                        RightIconBrush;                                             // 0x0760   (0x0090)  
	FName                                              RightIconResourceAction;                                    // 0x07F0   (0x0008)  
	float                                              LeftIconLeftSpaceValue;                                     // 0x07F8   (0x0004)  
	float                                              LeftIconRightSpaceValue;                                    // 0x07FC   (0x0004)  
	float                                              RightIconLeftSpaceValue;                                    // 0x0800   (0x0004)  
	float                                              RightIconRightSpaceValue;                                   // 0x0804   (0x0004)  
	class UClass*                                      TabButtonClass;                                             // 0x0808   (0x0008)  
	TArray<FSBCommonManualTabBtnData>                  TabDataArray;                                               // 0x0810   (0x0010)  
	FSlateColor                                        TextColor;                                                  // 0x0820   (0x0028)  
	FSlateColor                                        FocusTextColor;                                             // 0x0848   (0x0028)  
	FSlateFontInfo                                     TextFont;                                                   // 0x0870   (0x0060)  
	FLinearColor                                       TextShadowColor;                                            // 0x08D0   (0x0010)  
	class USoundBase*                                  TabChangedSound;                                            // 0x08E0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x50];                                      // 0x08E8   (0x0050)  MISSED

	/// Functions
	// Function /Script/SB.SBCommonManualTabWidget.UpdateTabButton
	constexpr static const FunctionPointer<USBCommonManualTabWidget, void, const FName, const TEnumAsByte<ESBUIRedDotState>> UpdateTabButton = { 0x26fea70, 0 }; 
	// Function /Script/SB.SBCommonManualTabWidget.SetVisibilityTabButton
	constexpr static const FunctionPointer<USBCommonManualTabWidget, void, const FName, const ESlateVisibility> SetVisibilityTabButton = { 0x26fe840, 1 }; 
	// Function /Script/SB.SBCommonManualTabWidget.SetVisibilityMoveButton
	constexpr static const FunctionPointer<USBCommonManualTabWidget, void, const ESlateVisibility> SetVisibilityMoveButton = { 0x26fe750, 2 }; 
	// Function /Script/SB.SBCommonManualTabWidget.FocusTabButton
	constexpr static const FunctionPointer<USBCommonManualTabWidget, void, const FName> FocusTabButton = { 0x26fee10, 3 }; 
	// Function /Script/SB.SBCommonManualTabWidget.DefocusTabButton
	constexpr static const FunctionPointer<USBCommonManualTabWidget, void> DefocusTabButton = { 0x26fecb0, 4 }; 
};

/// Class /Script/SB.SBCommonTabButtonWidget
/// Size: 0x0758 (1880 bytes) (0x000680 - 0x000758) align n/a MaxSize: 0x0758
class USBCommonTabButtonWidget : public USBUserWidget
{ 
public:
	class UTextBlock*                                  TextBlock;                                                  // 0x0680   (0x0008)  
	class USpacer*                                     TextWidth;                                                  // 0x0688   (0x0008)  
	class USpacer*                                     TextLeftMargin;                                             // 0x0690   (0x0008)  
	class USpacer*                                     TextRightMargin;                                            // 0x0698   (0x0008)  
	float                                              TextWidthValue;                                             // 0x06A0   (0x0004)  
	float                                              MinTextMargin;                                              // 0x06A4   (0x0004)  
	FText                                              TextValue;                                                  // 0x06A8   (0x0018)  
	FSlateColor                                        TextColor;                                                  // 0x06C0   (0x0028)  
	FSlateFontInfo                                     TextFont;                                                   // 0x06E8   (0x0060)  
	FLinearColor                                       TextShadowColor;                                            // 0x0748   (0x0010)  

	/// Functions
	// Function /Script/SB.SBCommonTabButtonWidget.SetDotState
	constexpr static const FunctionPointer<USBCommonTabButtonWidget, void, const TEnumAsByte<ESBUIRedDotState>> SetDotState = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBCommonTabButtonWidget.SetDotData
	constexpr static const FunctionPointer<USBCommonTabButtonWidget, void, const FName, const FName> SetDotData = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBCommonTabButtonWidget.RefreshDesign
	constexpr static const FunctionPointer<USBCommonTabButtonWidget, void> RefreshDesign = { 0x2700410, 2 }; 
	// Function /Script/SB.SBCommonTabButtonWidget.FocusTabButton
	constexpr static const FunctionPointer<USBCommonTabButtonWidget, void> FocusTabButton = { 0x2bbb090, 3 }; 
	// Function /Script/SB.SBCommonTabButtonWidget.DefocusTabButton
	constexpr static const FunctionPointer<USBCommonTabButtonWidget, void> DefocusTabButton = { 0x2bbb090, 4 }; 
};

/// Class /Script/SB.SBCommonSideTabButtonWidget
/// Size: 0x0780 (1920 bytes) (0x000758 - 0x000780) align n/a MaxSize: 0x0780
class USBCommonSideTabButtonWidget : public USBCommonTabButtonWidget
{ 
public:
	FString                                            FocusEvent;                                                 // 0x0758   (0x0010)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0768   (0x0018)  MISSED

	/// Functions
	// Function /Script/SB.SBCommonSideTabButtonWidget.SetNavigationFunction
	constexpr static const FunctionPointer<USBCommonSideTabButtonWidget, void, const FName> SetNavigationFunction = { 0x26ff480, 0 }; 
	// Function /Script/SB.SBCommonSideTabButtonWidget.NotifyFocusEvent
	constexpr static const FunctionPointer<USBCommonSideTabButtonWidget, void> NotifyFocusEvent = { 0x26ff420, 1 }; 
	// Function /Script/SB.SBCommonSideTabButtonWidget.NavigationEvent
	constexpr static const FunctionPointer<USBCommonSideTabButtonWidget, UWidget*, const EUINavigation> NavigationEvent = { 0x26ff330, 2 }; 
	// Function /Script/SB.SBCommonSideTabButtonWidget.BindEventTarget
	constexpr static const FunctionPointer<USBCommonSideTabButtonWidget, void, const USBUserWidget*> BindEventTarget = { 0x26ff560, 3 }; 
};

/// Struct /Script/SB.SBWidgetNavigationEventData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBWidgetNavigationEventData
{ 
	FName                                              FunctionName;                                               // 0x0000   (0x0008)  
};

/// Struct /Script/SB.SBCommonSideTabBtnData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBCommonSideTabBtnData
{ 
	FText                                              DisplayText;                                                // 0x0000   (0x0018)  
	FString                                            FocusEvent;                                                 // 0x0018   (0x0010)  
	FSBWidgetNavigationEventData                       NavigationEvent;                                            // 0x0028   (0x0008)  
};

/// Class /Script/SB.SBCommonSideTabWidget
/// Size: 0x0788 (1928 bytes) (0x000680 - 0x000788) align n/a MaxSize: 0x0788
class USBCommonSideTabWidget : public USBUserWidget
{ 
public:
	class UVerticalBox*                                TabButtonContainer;                                         // 0x0680   (0x0008)  
	float                                              TabBtnWidth;                                                // 0x0688   (0x0004)  
	float                                              TabBtnMinPadding;                                           // 0x068C   (0x0004)  
	float                                              TabBtnSpace;                                                // 0x0690   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0694   (0x0004)  MISSED
	class UClass*                                      TabButtonClass;                                             // 0x0698   (0x0008)  
	TArray<FSBCommonSideTabBtnData>                    TabDataArray;                                               // 0x06A0   (0x0010)  
	FSlateColor                                        TextColor;                                                  // 0x06B0   (0x0028)  
	FSlateColor                                        FocusTextColor;                                             // 0x06D8   (0x0028)  
	FSlateFontInfo                                     TextFont;                                                   // 0x0700   (0x0060)  
	FLinearColor                                       TextShadowColor;                                            // 0x0760   (0x0010)  
	TArray<class USBCommonSideTabButtonWidget*>        TabButtonInstanceArray;                                     // 0x0770   (0x0010)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0780   (0x0008)  MISSED

	/// Functions
	// Function /Script/SB.SBCommonSideTabWidget.BindEventTarget
	constexpr static const FunctionPointer<USBCommonSideTabWidget, void, const USBUserWidget*> BindEventTarget = { 0x26ffc00, 0 }; 
};

/// Struct /Script/SB.SBCommonTabBtnData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBCommonTabBtnData
{ 
	TEnumAsByte<ESBUILogicType>                        UILogicType;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FText                                              DisplayText;                                                // 0x0008   (0x0018)  
	FName                                              DotAlias;                                                   // 0x0020   (0x0008)  
	FName                                              ParentDotAlias;                                             // 0x0028   (0x0008)  
};

/// Class /Script/SB.SBCommonTabWidget
/// Size: 0x0938 (2360 bytes) (0x000680 - 0x000938) align n/a MaxSize: 0x0938
class USBCommonTabWidget : public USBUserWidget
{ 
public:
	TEnumAsByte<ESBUILogicType>                        CurrentTab;                                                 // 0x0680   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0681   (0x0007)  MISSED
	class UImage*                                      LeftIcon;                                                   // 0x0688   (0x0008)  
	class USpacer*                                     LeftIcon_LeftSpace;                                         // 0x0690   (0x0008)  
	class USpacer*                                     LeftIcon_RightSpace;                                        // 0x0698   (0x0008)  
	class UImage*                                      RightIcon;                                                  // 0x06A0   (0x0008)  
	class USpacer*                                     RightIcon_LeftSpace;                                        // 0x06A8   (0x0008)  
	class USpacer*                                     RightIcon_RightSpace;                                       // 0x06B0   (0x0008)  
	class UHorizontalBox*                              TabButtonContainer;                                         // 0x06B8   (0x0008)  
	float                                              TabBtnWidth;                                                // 0x06C0   (0x0004)  
	float                                              TabBtnMinPadding;                                           // 0x06C4   (0x0004)  
	FSlateBrush                                        LeftIconBrush;                                              // 0x06C8   (0x0090)  
	FName                                              LeftIconResourceAction;                                     // 0x0758   (0x0008)  
	FSlateBrush                                        RightIconBrush;                                             // 0x0760   (0x0090)  
	FName                                              RightIconResourceAction;                                    // 0x07F0   (0x0008)  
	float                                              LeftIconLeftSpaceValue;                                     // 0x07F8   (0x0004)  
	float                                              LeftIconRightSpaceValue;                                    // 0x07FC   (0x0004)  
	float                                              RightIconLeftSpaceValue;                                    // 0x0800   (0x0004)  
	float                                              RightIconRightSpaceValue;                                   // 0x0804   (0x0004)  
	class UClass*                                      TabButtonClass;                                             // 0x0808   (0x0008)  
	TArray<FSBCommonTabBtnData>                        TabDataArray;                                               // 0x0810   (0x0010)  
	FSlateColor                                        TextColor;                                                  // 0x0820   (0x0028)  
	FSlateColor                                        FocusTextColor;                                             // 0x0848   (0x0028)  
	FSlateFontInfo                                     TextFont;                                                   // 0x0870   (0x0060)  
	FLinearColor                                       TextShadowColor;                                            // 0x08D0   (0x0010)  
	class USoundBase*                                  TabChangedSound;                                            // 0x08E0   (0x0008)  
	unsigned char                                      UnknownData03_7[0x50];                                      // 0x08E8   (0x0050)  MISSED

	/// Functions
	// Function /Script/SB.SBCommonTabWidget.UpdateTabButton
	constexpr static const FunctionPointer<USBCommonTabWidget, void, const TEnumAsByte<ESBUILogicType>, const TEnumAsByte<ESBUIRedDotState>> UpdateTabButton = { 0x2701450, 0 }; 
	// Function /Script/SB.SBCommonTabWidget.SetVisibilityTabButton
	constexpr static const FunctionPointer<USBCommonTabWidget, void, const TEnumAsByte<ESBUILogicType>, const ESlateVisibility> SetVisibilityTabButton = { 0x2701260, 1 }; 
	// Function /Script/SB.SBCommonTabWidget.SetVisibilityMoveButton
	constexpr static const FunctionPointer<USBCommonTabWidget, void, const ESlateVisibility> SetVisibilityMoveButton = { 0x26fe750, 2 }; 
	// Function /Script/SB.SBCommonTabWidget.FocusTabButton
	constexpr static const FunctionPointer<USBCommonTabWidget, void, const TEnumAsByte<ESBUILogicType>> FocusTabButton = { 0x27017a0, 3 }; 
	// Function /Script/SB.SBCommonTabWidget.DefocusTabButton
	constexpr static const FunctionPointer<USBCommonTabWidget, void> DefocusTabButton = { 0x2701670, 4 }; 
};

/// Class /Script/SB.SBCursorUserWidget
/// Size: 0x0280 (640 bytes) (0x000280 - 0x000280) align n/a MaxSize: 0x0280
class USBCursorUserWidget : public UUserWidget
{ 
public:

	/// Functions
	// Function /Script/SB.SBCursorUserWidget.OnCursorUpdate
	constexpr static const FunctionPointer<USBCursorUserWidget, void> OnCursorUpdate = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBCursorUserWidget.IsGlobalCursorVisibleAllow
	constexpr static const FunctionPointer<USBCursorUserWidget, bool> IsGlobalCursorVisibleAllow = { 0x2701e10, 1 }; 
};

/// Class /Script/SB.SBDataAsset
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class USBDataAsset : public UDataAsset
{ 
public:
	FGuid                                              Guid;                                                       // 0x0030   (0x0010)  
};

/// Class /Script/SB.SBDataNodeBase
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class USBDataNodeBase : public UObject
{ 
public:
	TArray<class USBDataNodeBase*>                     RefParentDataNodes;                                         // 0x0028   (0x0010)  
	TArray<class USBDataNodeBase*>                     ChildDataNodes;                                             // 0x0038   (0x0010)  
};

/// Class /Script/SB.SBDeactiveMovingComponent
/// Size: 0x0290 (656 bytes) (0x000260 - 0x000290) align n/a MaxSize: 0x0290
class USBDeactiveMovingComponent : public USceneComponent
{ 
public:
	float                                              Priority;                                                   // 0x0260   (0x0004)  
	bool                                               bDeactiveBlockWallAction;                                   // 0x0264   (0x0001)  
	bool                                               bDeactiveCliffAction;                                       // 0x0265   (0x0001)  
	bool                                               bDeactiveSlideSlip;                                         // 0x0266   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0267   (0x0001)  MISSED
	TWeakObjectPtr<class UPrimitiveComponent*>         CollisionPrimitiveComponent;                                // 0x0268   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x0270   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x027C   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0288   (0x0008)  MISSED
};

/// Class /Script/SB.SBDebugSystemInfoWidget
/// Size: 0x0700 (1792 bytes) (0x000680 - 0x000700) align n/a MaxSize: 0x0700
class USBDebugSystemInfoWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x80];                                      // 0x0680   (0x0080)  MISSED
};

/// Class /Script/SB.SBDestructibleActor
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ASBDestructibleActor : public AActor
{ 
public:
	class USBDestructibleComponent*                    DestructibleComponent;                                      // 0x02C8   (0x0008)  
};

/// Struct /Script/SB.SBChunkParticleInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBChunkParticleInfo
{ 
	class USBPMaterialParticleSet*                     PMaterialParticleSet;                                       // 0x0000   (0x0008)  
	float                                              MinCollisionImpulse;                                        // 0x0008   (0x0004)  
	float                                              MinOverlapImpulse;                                          // 0x000C   (0x0004)  
};

/// Class /Script/SB.SBDestructibleComponent
/// Size: 0x0B00 (2816 bytes) (0x000958 - 0x000B00) align n/a MaxSize: 0x0B00
class USBDestructibleComponent : public UDestructibleComponent
{ 
public:
	float                                              DissolveFadeBeginTime;                                      // 0x0958   (0x0004)  
	float                                              DissolveFadeDuration;                                       // 0x095C   (0x0004)  
	FName                                              DissolveFadeParameterName;                                  // 0x0960   (0x0008)  
	bool                                               bDestroyActorWhenAfterDissolve;                             // 0x0968   (0x0001)  
	bool                                               bEnableCollisionWhenAfterDissolve;                          // 0x0969   (0x0001)  
	unsigned char                                      UnknownData07_6[0x6];                                       // 0x096A   (0x0006)  MISSED
	class UNiagaraSystem*                              ChunkNiagaraSystem;                                         // 0x0970   (0x0008)  
	class UParticleSystem*                             ChunkParticleSystem;                                        // 0x0978   (0x0008)  
	float                                              ChunkParticleDestroyTime;                                   // 0x0980   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x0984   (0x0004)  MISSED
	class UParticleSystem*                             HitParticleSystem;                                          // 0x0988   (0x0008)  
	TArray<FSBChunkParticleInfo>                       HitParticleInfos;                                           // 0x0990   (0x0010)  
	int32_t                                            HitParticleSystemMaxSpawnCount;                             // 0x09A0   (0x0004)  
	bool                                               bRegisterdTick;                                             // 0x09A4   (0x0001)  
	bool                                               bTickDissolve;                                              // 0x09A5   (0x0001)  
	unsigned char                                      UnknownData09_6[0x2];                                       // 0x09A6   (0x0002)  MISSED
	float                                              DissolveCurrentTime;                                        // 0x09A8   (0x0004)  
	bool                                               bSpawnFracture;                                             // 0x09AC   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x09AD   (0x0003)  MISSED
	float                                              SpawnFractureTime;                                          // 0x09B0   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x09B4   (0x0004)  MISSED
	TMap<int32_t, class UParticleSystemComponent*>     CreatedChunkParticleSystemMap;                              // 0x09B8   (0x0050)  
	TMap<int32_t, class UNiagaraComponent*>            CreatedChunkNiagaraSystemMap;                               // 0x0A08   (0x0050)  
	TArray<class UFXSystemComponent*>                  CreatedHitParticleSystemArray;                              // 0x0A58   (0x0010)  
	int32_t                                            HitParticleSystemSpawnCount;                                // 0x0A68   (0x0004)  
	bool                                               bCompletedDissolve;                                         // 0x0A6C   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0A6D   (0x0003)  MISSED
	int32_t                                            RestoreChunkCurrentStep;                                    // 0x0A70   (0x0004)  
	unsigned char                                      UnknownData13_7[0x8C];                                      // 0x0A74   (0x008C)  MISSED

	/// Functions
	// Function /Script/SB.SBDestructibleComponent.SetHitParticleSystem
	constexpr static const FunctionPointer<USBDestructibleComponent, void, const TArray<FSBChunkParticleInfo>, const int32_t> SetHitParticleSystem = { 0x2728330, 0 }; 
	// Function /Script/SB.SBDestructibleComponent.SetDissolveFade
	constexpr static const FunctionPointer<USBDestructibleComponent, void, const float, const float, const FName, const bool, const bool> SetDissolveFade = { 0x2728660, 1 }; 
	// Function /Script/SB.SBDestructibleComponent.SetChunkNiagaraSystem
	constexpr static const FunctionPointer<USBDestructibleComponent, void, const UNiagaraSystem*, const float> SetChunkNiagaraSystem = { 0x27284f0, 2 }; 
	// Function /Script/SB.SBDestructibleComponent.OnOverlapBegin
	constexpr static const FunctionPointer<USBDestructibleComponent, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t, const bool, const FHitResult&> OnOverlapBegin = { 0x2728980, 3 }; 
	// Function /Script/SB.SBDestructibleComponent.OnCollisionHit
	constexpr static const FunctionPointer<USBDestructibleComponent, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const FVector, const FHitResult&> OnCollisionHit = { 0x2728d00, 4 }; 
};

/// Class /Script/SB.SBDevCommonMessageBoxWidget
/// Size: 0x06B0 (1712 bytes) (0x000680 - 0x0006B0) align n/a MaxSize: 0x06B0
class USBDevCommonMessageBoxWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_8[0x20];                                      // 0x0680   (0x0020)  MISSED
	FString                                            prefixName;                                                 // 0x06A0   (0x0010)  

	/// Functions
	// Function /Script/SB.SBDevCommonMessageBoxWidget.OnClickPositive
	constexpr static const FunctionPointer<USBDevCommonMessageBoxWidget, void> OnClickPositive = { 0x2729500, 0 }; 
	// Function /Script/SB.SBDevCommonMessageBoxWidget.OnClickNegative
	constexpr static const FunctionPointer<USBDevCommonMessageBoxWidget, void> OnClickNegative = { 0x27294b0, 1 }; 
};

/// Class /Script/SB.SBDevCommonToastWidget
/// Size: 0x0698 (1688 bytes) (0x000680 - 0x000698) align n/a MaxSize: 0x0698
class USBDevCommonToastWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x18];                                      // 0x0680   (0x0018)  MISSED
};

/// Class /Script/SB.SBDeveloperSettings
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align n/a MaxSize: 0x0040
class USBDeveloperSettings : public UDeveloperSettings
{ 
public:
	bool                                               bDisableNiagara : 1;                                        // 0x0038:0 (0x0001)  
	bool                                               bUseCharacterResourceCacheData : 1;                         // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/SB.SBDevJiraAuthorizeWidget
/// Size: 0x0688 (1672 bytes) (0x000680 - 0x000688) align n/a MaxSize: 0x0688
class USBDevJiraAuthorizeWidget : public USBUserWidget
{ 
public:
	bool                                               bResponseWait;                                              // 0x0680   (0x0001)  
	bool                                               bAuthorized;                                                // 0x0681   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0682   (0x0006)  MISSED

	/// Functions
	// Function /Script/SB.SBDevJiraAuthorizeWidget.OnInputActionOK
	constexpr static const FunctionPointer<USBDevJiraAuthorizeWidget, void> OnInputActionOK = { 0x2729fa0, 0 }; 
	// Function /Script/SB.SBDevJiraAuthorizeWidget.OnInputActionClose
	constexpr static const FunctionPointer<USBDevJiraAuthorizeWidget, void> OnInputActionClose = { 0x2729f80, 1 }; 
};

/// Class /Script/SB.SBDevUIStudioPreviewDataObject
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class USBDevUIStudioPreviewDataObject : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x28];                                      // 0x0028   (0x0028)  MISSED
};

/// Class /Script/SB.SBDevUIStudioPreviewSlotWidget
/// Size: 0x06B8 (1720 bytes) (0x000680 - 0x0006B8) align n/a MaxSize: 0x06B8
class USBDevUIStudioPreviewSlotWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0680   (0x0008)  MISSED
	FText                                              Category;                                                   // 0x0688   (0x0018)  
	FText                                              Message;                                                    // 0x06A0   (0x0018)  

	/// Functions
	// Function /Script/SB.SBDevUIStudioPreviewSlotWidget.EventRefresh
	constexpr static const FunctionPointer<USBDevUIStudioPreviewSlotWidget, void> EventRefresh = { 0x2bbb090, 0 }; 
};

/// Class /Script/SB.SBDevUIStudioPreviewWidget
/// Size: 0x0708 (1800 bytes) (0x000680 - 0x000708) align n/a MaxSize: 0x0708
class USBDevUIStudioPreviewWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData03_8[0x10];                                      // 0x0680   (0x0010)  MISSED
	FName                                              TargetStudioTag;                                            // 0x0690   (0x0008)  
	TMap<FName, FString>                               ShowTagTextMap;                                             // 0x0698   (0x0050)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x06E8   (0x0008)  MISSED
	class UListView*                                   ListView;                                                   // 0x06F0   (0x0008)  
	unsigned char                                      UnknownData05_7[0x10];                                      // 0x06F8   (0x0010)  MISSED

	/// Functions
	// Function /Script/SB.SBDevUIStudioPreviewWidget.EventStudioShowPlay
	constexpr static const FunctionPointer<USBDevUIStudioPreviewWidget, void, const FName> EventStudioShowPlay = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBDevUIStudioPreviewWidget.EventChangeCameraBlend
	constexpr static const FunctionPointer<USBDevUIStudioPreviewWidget, void, const bool> EventChangeCameraBlend = { 0x2bbb090, 1 }; 
};

/// Class /Script/SB.SBDPICustomScalingRule
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBDPICustomScalingRule : public UDPICustomScalingRule
{ 
public:
};

/// Struct /Script/SB.SBDroneLocationInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBDroneLocationInfo
{ 
	FName                                              BaseSocket;                                                 // 0x0000   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0008   (0x000C)  
	int32_t                                            AdditivePoint;                                              // 0x0014   (0x0004)  
};

/// Struct /Script/SB.SBDroneLocationInfoContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBDroneLocationInfoContainer
{ 
	TArray<FSBDroneLocationInfo>                       LocationInfoArray;                                          // 0x0000   (0x0010)  
};

/// Class /Script/SB.SBDroneLocationData
/// Size: 0x0098 (152 bytes) (0x000030 - 0x000098) align n/a MaxSize: 0x0098
class USBDroneLocationData : public UDataAsset
{ 
public:
	float                                              LocationRadius;                                             // 0x0030   (0x0004)  
	int32_t                                            CurrentLocationPoint;                                       // 0x0034   (0x0004)  
	int32_t                                            BlockingObjectPoint;                                        // 0x0038   (0x0004)  
	int32_t                                            BlockingDronePoint;                                         // 0x003C   (0x0004)  
	int32_t                                            LastSafetyLocationPointWhenNonBlock;                        // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TMap<FName, FSBDroneLocationInfoContainer>         DroneLocationInfoMap;                                       // 0x0048   (0x0050)  
};

/// Class /Script/SB.SBDualSenseTriggerEffectData
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
class USBDualSenseTriggerEffectData : public UDataAsset
{ 
public:
	TEnumAsByte<ESBDualSenseTriggerEffect>             TriggerEffectType;                                          // 0x0030   (0x0001)  
	TEnumAsByte<ESBDualSenseTrigger>                   TriggerType;                                                // 0x0031   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0032   (0x0006)  MISSED
	TArray<int32_t>                                    Parameters;                                                 // 0x0038   (0x0010)  
};

/// Class /Script/SB.SBDynamicRegionActor
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ASBDynamicRegionActor : public AActor
{ 
public:
	FName                                              UniqueRegionName;                                           // 0x02C8   (0x0008)  

	/// Functions
	// Function /Script/SB.SBDynamicRegionActor.InitRegion
	constexpr static const FunctionPointer<ASBDynamicRegionActor, void, const FName> InitRegion = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBDynamicRegionActor.EventLeaveRegion
	constexpr static const FunctionPointer<ASBDynamicRegionActor, void> EventLeaveRegion = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBDynamicRegionActor.EventEnterRegion
	constexpr static const FunctionPointer<ASBDynamicRegionActor, void> EventEnterRegion = { 0x2bbb090, 2 }; 
};

/// Class /Script/SB.SBEdGraphNode
/// Size: 0x0098 (152 bytes) (0x000098 - 0x000098) align n/a MaxSize: 0x0098
class USBEdGraphNode : public UEdGraphNode
{ 
public:
};

/// Class /Script/SB.SBEffectVolume
/// Size: 0x03B0 (944 bytes) (0x000358 - 0x0003B0) align n/a MaxSize: 0x03B0
class ASBEffectVolume : public ASBWorldVolume
{ 
public:
	bool                                               bActiveVolume;                                              // 0x0358   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0359   (0x0003)  MISSED
	FSBTableAliasName                                  EffectVolumeAlias;                                          // 0x035C   (0x000C)  
	float                                              Priority;                                                   // 0x0368   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x036C   (0x0004)  MISSED
	class AActor*                                      AttachActor;                                                // 0x0370   (0x0008)  
	class AActor*                                      SafePointActorOnDead;                                       // 0x0378   (0x0008)  
	FSBMapSectorID                                     SectorID;                                                   // 0x0380   (0x0008)  
	bool                                               bPlayerActorOnly;                                           // 0x0388   (0x0001)  
	bool                                               bIgnorePriority;                                            // 0x0389   (0x0001)  
	bool                                               bUseEveryZone;                                              // 0x038A   (0x0001)  
	bool                                               bUseActiveEventMoveType;                                    // 0x038B   (0x0001)  
	TEnumAsByte<ESBEventMoveType>                      ActiveEventMoveType;                                        // 0x038C   (0x0001)  
	bool                                               bActiveHoldAtBalanceMove;                                   // 0x038D   (0x0001)  
	bool                                               bAcquireSpawnItem;                                          // 0x038E   (0x0001)  
	unsigned char                                      UnknownData05_7[0x21];                                      // 0x038F   (0x0021)  MISSED
};

/// Class /Script/SB.SBEngineActorPoolingInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBEngineActorPoolingInterface : public UInterface
{ 
public:

	/// Functions
	// Function /Script/SB.SBEngineActorPoolingInterface.IsPoolingActor
	constexpr static const FunctionPointer<USBEngineActorPoolingInterface, bool> IsPoolingActor = { 0x272c690, 0 }; 
};

/// Struct /Script/SB.SBEnvParticle
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align n/a MaxSize: 0x0098
struct FSBEnvParticle
{ 
	FSBNiagaraSystemWithOverrideParam                  NiagaraSystem;                                              // 0x0000   (0x0068)  
	class UParticleSystem*                             PSTemplate;                                                 // 0x0068   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0070   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x007C   (0x000C)  
	float                                              Scale;                                                      // 0x0088   (0x0004)  
	bool                                               bAbsoluteRotation;                                          // 0x008C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	FName                                              PhotoModeTag;                                               // 0x0090   (0x0008)  
};

/// Class /Script/SB.SBEnvControlVolume
/// Size: 0x0F60 (3936 bytes) (0x000318 - 0x000F60) align n/a MaxSize: 0x0F60
class ASBEnvControlVolume : public AVolume
{ 
public:
	class USBEnvSettingData*                           EnvSettingData;                                             // 0x0318   (0x0008)  
	bool                                               bActiveVolume;                                              // 0x0320   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0321   (0x0003)  MISSED
	float                                              Priority;                                                   // 0x0324   (0x0004)  
	float                                              BlendRadius;                                                // 0x0328   (0x0004)  
	bool                                               bIsUnbound;                                                 // 0x032C   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x032D   (0x0003)  MISSED
	TArray<FSBEnvParticle>                             ParticlesAttachToCamera;                                    // 0x0330   (0x0010)  
	bool                                               bActiveParticleAttachToCamera;                              // 0x0340   (0x0001)  
	bool                                               bEnableWaterSingleLayer;                                    // 0x0341   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x0342   (0x0002)  MISSED
	float                                              ReactiveMaskBaseCustomBiasScale;                            // 0x0344   (0x0004)  
	float                                              ReactiveMaskBaseCustomVelocityFactor;                       // 0x0348   (0x0004)  
	FSBMapSectorID                                     SectorID;                                                   // 0x034C   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x0354   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0360   (0x000C)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x036C   (0x0004)  MISSED
	FSBEnvControlSettings                              OverrideControlSettingData;                                 // 0x0370   (0x0B30)  
	FGuid                                              OverrideControlGuid;                                        // 0x0EA0   (0x0010)  
	float                                              OverrideControlSettingWeight;                               // 0x0EB0   (0x0004)  
	unsigned char                                      UnknownData09_7[0xAC];                                      // 0x0EB4   (0x00AC)  MISSED

	/// Functions
	// Function /Script/SB.SBEnvControlVolume.RefreshProperty
	constexpr static const FunctionPointer<ASBEnvControlVolume, void> RefreshProperty = { 0x27488e0, 0 }; 
};

/// Struct /Script/SB.SBEnvSettingScalarParam
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBEnvSettingScalarParam
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	float                                              Value;                                                      // 0x0008   (0x0004)  
};

/// Struct /Script/SB.SBEnvSettingVectorParam
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBEnvSettingVectorParam
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	FLinearColor                                       Value;                                                      // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBEnvSettingTextureParam
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBEnvSettingTextureParam
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	class UTexture*                                    Value;                                                      // 0x0008   (0x0008)  
};

/// Class /Script/SB.SBEnvSettingData
/// Size: 0x0BC0 (3008 bytes) (0x000030 - 0x000BC0) align n/a MaxSize: 0x0BC0
class USBEnvSettingData : public UDataAsset
{ 
public:
	FRotator                                           SunDirection;                                               // 0x0030   (0x000C)  
	bool                                               bDroneLightCastShadow;                                      // 0x003C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	float                                              DroneLightIntensity;                                        // 0x0040   (0x0004)  
	FLinearColor                                       DroneLightColor;                                            // 0x0044   (0x0010)  
	float                                              DroneLightVolumetricScatteringIntensit;                     // 0x0054   (0x0004)  
	TArray<FSBEnvSettingScalarParam>                   MaterialScalarParams;                                       // 0x0058   (0x0010)  
	TArray<FSBEnvSettingVectorParam>                   MaterialVectorParams;                                       // 0x0068   (0x0010)  
	TArray<FSBEnvSettingTextureParam>                  MaterialTextureParams;                                      // 0x0078   (0x0010)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0088   (0x0008)  MISSED
	FSBEnvControlSettings                              EnvControlSetting;                                          // 0x0090   (0x0B30)  
};

/// Class /Script/SB.SBEquipmentActor
/// Size: 0x02F8 (760 bytes) (0x0002C8 - 0x0002F8) align n/a MaxSize: 0x02F8
class ASBEquipmentActor : public AActor
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x02C8   (0x0008)  MISSED
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData03_7[0x20];                                      // 0x02D8   (0x0020)  MISSED
};

/// Class /Script/SB.SBEventMoveData
/// Size: 0x01E0 (480 bytes) (0x000030 - 0x0001E0) align n/a MaxSize: 0x01E0
class USBEventMoveData : public UDataAsset
{ 
public:
	FName                                              IdleRunBlendSpaceName;                                      // 0x0030   (0x0008)  
	FName                                              SlideIdleRunBlendSpaceName;                                 // 0x0038   (0x0008)  
	FName                                              StartTransitAnimName;                                       // 0x0040   (0x0008)  
	float                                              StartTransitDuration;                                       // 0x0048   (0x0004)  
	FName                                              EndTransitAnimName;                                         // 0x004C   (0x0008)  
	float                                              EndTransitDuration;                                         // 0x0054   (0x0004)  
	float                                              MiddleTransitDuration;                                      // 0x0058   (0x0004)  
	FName                                              MiddleTransitAnimName;                                      // 0x005C   (0x0008)  
	bool                                               bMovingUnitBySideToSide;                                    // 0x0064   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	FName                                              MovingUnitBySideToSideForwardAnimName;                      // 0x0068   (0x0008)  
	FName                                              MovingUnitBySideToSideBackwardAnimName;                     // 0x0070   (0x0008)  
	int32_t                                            MoveUnitAnimSequenceRepeatNum;                              // 0x0078   (0x0004)  
	float                                              MoveUnitSize;                                               // 0x007C   (0x0004)  
	float                                              MoveFastUnitSize;                                           // 0x0080   (0x0004)  
	bool                                               bUseMoveForwardVectorFromTargetPoint;                       // 0x0084   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x0085   (0x0003)  MISSED
	FVector                                            MoveForwardVector;                                          // 0x0088   (0x000C)  
	float                                              MoveForwardApplyValue;                                      // 0x0094   (0x0004)  
	FVector                                            MoveRightVector;                                            // 0x0098   (0x000C)  
	float                                              MoveRightApplyValue;                                        // 0x00A4   (0x0004)  
	bool                                               bUseSphereRadiusCheck;                                      // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x00A9   (0x0003)  MISSED
	int32_t                                            BaseMoveAxis;                                               // 0x00AC   (0x0004)  
	bool                                               bUseVolumeAxisForMove;                                      // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x00B1   (0x0003)  MISSED
	float                                              MovingArmLength;                                            // 0x00B4   (0x0004)  
	TEnumAsByte<ESBEventMoveType>                      EventMoveType;                                              // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x00B9   (0x0003)  MISSED
	float                                              RodMoveDamping;                                             // 0x00BC   (0x0004)  
	float                                              RodMoveSwingSpeed;                                          // 0x00C0   (0x0004)  
	float                                              RodMoveFrontJumpDegree;                                     // 0x00C4   (0x0004)  
	float                                              RodMoveBackJumpDegree;                                      // 0x00C8   (0x0004)  
	float                                              RodMoveBackJumpLength;                                      // 0x00CC   (0x0004)  
	float                                              RodMoveFallLength;                                          // 0x00D0   (0x0004)  
	bool                                               bEnableSideRodUpJump;                                       // 0x00D4   (0x0001)  
	bool                                               bDisableSideRodJumpLanding;                                 // 0x00D5   (0x0001)  
	bool                                               bEnableSideRodDownAttach;                                   // 0x00D6   (0x0001)  
	unsigned char                                      UnknownData17_6[0x1];                                       // 0x00D7   (0x0001)  MISSED
	float                                              MaxMoveSpeed;                                               // 0x00D8   (0x0004)  
	float                                              JumpLength;                                                 // 0x00DC   (0x0004)  
	bool                                               bApplyGravity;                                              // 0x00E0   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x00E1   (0x0003)  MISSED
	float                                              ApplyGravityMoveTime;                                       // 0x00E4   (0x0004)  
	float                                              GravityAccelSpeedForSec;                                    // 0x00E8   (0x0004)  
	float                                              GravitiedMaxMoveSpeed;                                      // 0x00EC   (0x0004)  
	class UCurveFloat*                                 SlidingSpeedCurve;                                          // 0x00F0   (0x0008)  
	bool                                               bEnableSliding;                                             // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x00F9   (0x0003)  MISSED
	float                                              EnableCancelJumpDirDegToCharDir;                            // 0x00FC   (0x0004)  
	float                                              CancelJumpXYPower;                                          // 0x0100   (0x0004)  
	float                                              CableLeaveDistance;                                         // 0x0104   (0x0004)  
	float                                              BlockTimeAfterEventMove;                                    // 0x0108   (0x0004)  
	float                                              InteractionDegree;                                          // 0x010C   (0x0004)  
	bool                                               bIsEnableKneeIK;                                            // 0x0110   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              KneeIK_SearchDistance_Forward_R;                            // 0x0114   (0x0004)  
	float                                              KneeIK_SearchDistance_Backward_R;                           // 0x0118   (0x0004)  
	float                                              KneeIK_SearchDistance_Forward_L;                            // 0x011C   (0x0004)  
	float                                              KneeIK_SearchDistance_Backward_L;                           // 0x0120   (0x0004)  
	float                                              MoveOffset_R_Knee;                                          // 0x0124   (0x0004)  
	float                                              MoveOffset_L_Knee;                                          // 0x0128   (0x0004)  
	float                                              MoveOffset_R_Toe;                                           // 0x012C   (0x0004)  
	float                                              MoveOffset_L_Toe;                                           // 0x0130   (0x0004)  
	FName                                              StartLeaveAnimName;                                         // 0x0134   (0x0008)  
	float                                              StartLeaveDuration;                                         // 0x013C   (0x0004)  
	FName                                              EndLeaveAnimName;                                           // 0x0140   (0x0008)  
	float                                              EndLeaveDuration;                                           // 0x0148   (0x0004)  
	FName                                              MoveFastAnimName;                                           // 0x014C   (0x0008)  
	FName                                              MoveJumpAnimName;                                           // 0x0154   (0x0008)  
	FName                                              MoveJumpMoveAnimName;                                       // 0x015C   (0x0008)  
	FName                                              MoveFallAnimName;                                           // 0x0164   (0x0008)  
	FName                                              MoveTurnAnimName;                                           // 0x016C   (0x0008)  
	float                                              MoveTurnAnimDuration;                                       // 0x0174   (0x0004)  
	FName                                              MoveSlideStartName;                                         // 0x0178   (0x0008)  
	FName                                              MoveSlideStopName;                                          // 0x0180   (0x0008)  
	FName                                              MoveSlideToNormalName;                                      // 0x0188   (0x0008)  
	FName                                              MoveSlideToLandName;                                        // 0x0190   (0x0008)  
	bool                                               bIgnoreEventMoveIK;                                         // 0x0198   (0x0001)  
	unsigned char                                      UnknownData21_6[0x7];                                       // 0x0199   (0x0007)  MISSED
	TArray<FSBApplyIKInfo>                             UseIKBoneList;                                              // 0x01A0   (0x0010)  
	bool                                               bBlockFBMoveInputDirAtFirst;                                // 0x01B0   (0x0001)  
	unsigned char                                      UnknownData22_6[0x3];                                       // 0x01B1   (0x0003)  MISSED
	float                                              BalanceMovingSplineAreaRadius;                              // 0x01B4   (0x0004)  
	float                                              BalanceMovingIgnoreDistanceAtStart;                         // 0x01B8   (0x0004)  
	float                                              BalanceMovingIgnoreDistanceAtEnd;                           // 0x01BC   (0x0004)  
	float                                              BalanceBeamMoveInputForwardDegree;                          // 0x01C0   (0x0004)  
	float                                              BalanceMovingHoldStartFallDistance;                         // 0x01C4   (0x0004)  
	bool                                               bDisableHoldBalanceBeam;                                    // 0x01C8   (0x0001)  
	bool                                               bSaveActorStorage;                                          // 0x01C9   (0x0001)  
	bool                                               bKeepEventMoveWhenDead;                                     // 0x01CA   (0x0001)  
	unsigned char                                      UnknownData23_6[0x5];                                       // 0x01CB   (0x0005)  MISSED
	FString                                            DeadShowPath;                                               // 0x01D0   (0x0010)  
};

/// Struct /Script/SB.SBEventMoveData_CableInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBEventMoveData_CableInfo
{ 
	class UCableComponent*                             AttachCableComponent;                                       // 0x0000   (0x0008)  
	class UPrimitiveComponent*                         CollisionCableStartCollision;                               // 0x0008   (0x0008)  
	class UPrimitiveComponent*                         CollisionCableEndCollision;                                 // 0x0010   (0x0008)  
	int32_t                                            CableStartLeaveSegment;                                     // 0x0018   (0x0004)  
	int32_t                                            CableEndLeaveSegment;                                       // 0x001C   (0x0004)  
	TEnumAsByte<ESBEventMove_CableForceType>           AttachedEndForceDirType;                                    // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	float                                              AttachedEndForceScale;                                      // 0x0024   (0x0004)  
};

/// Struct /Script/SB.SBEventMoveData_RopeSwingProperty
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSBEventMoveData_RopeSwingProperty
{ 
	float                                              RopeSwingVerticalMaxStrength;                               // 0x0000   (0x0004)  
	float                                              RopeSwingHorizontalMaxStrength;                             // 0x0004   (0x0004)  
	float                                              RopeSwingHorizontalMaxStrengthInv;                          // 0x0008   (0x0004)  
	float                                              RopeSwingAddDirStrength;                                    // 0x000C   (0x0004)  
	float                                              RopeSwingStartMaxStrength;                                  // 0x0010   (0x0004)  
	float                                              RopeSwingAddDirDownDegree;                                  // 0x0014   (0x0004)  
	float                                              RopeSwingAddDirUpDegree;                                    // 0x0018   (0x0004)  
	TEnumAsByte<ESBRopePendulumVelocityAxis>           AddDirApplySpeedAxisType;                                   // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	float                                              RopeSwingAddDirMinSpeed;                                    // 0x0020   (0x0004)  
	float                                              RopeSwingAddDirMaxSpeed;                                    // 0x0024   (0x0004)  
	float                                              RopeSwingStartForceKeepTime;                                // 0x0028   (0x0004)  
	float                                              RopeSwingHitReflectStrength;                                // 0x002C   (0x0004)  
	float                                              RopeSwingStartSwingImpulseStrength;                         // 0x0030   (0x0004)  
	float                                              RopeSwingCanAdjustDirDegree;                                // 0x0034   (0x0004)  
	float                                              RopeSingAttachImpulseMaxForce;                              // 0x0038   (0x0004)  
	float                                              RopeTopDownAttachImpulseScale;                              // 0x003C   (0x0004)  
	float                                              RopeHitCollisionExtentWidthScale;                           // 0x0040   (0x0004)  
	float                                              RopeInputDirClampDegree;                                    // 0x0044   (0x0004)  
};

/// Struct /Script/SB.SBEventMoveData_RopeTMInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBEventMoveData_RopeTMInfo
{ 
	FVector                                            PendulumVelocity;                                           // 0x0000   (0x000C)  
	FVector                                            PendulumLocation;                                           // 0x000C   (0x000C)  
};

/// Struct /Script/SB.SBEventMoveData_RopeMoveInfo
/// Size: 0x0778 (1912 bytes) (0x000000 - 0x000778) align n/a MaxSize: 0x0778
struct FSBEventMoveData_RopeMoveInfo
{ 
	class UPrimitiveComponent*                         AttachedComponent;                                          // 0x0000   (0x0008)  
	class UPhysicsConstraintComponent*                 PhysicsControlComponent;                                    // 0x0008   (0x0008)  
	class UPhysicsConstraintComponent*                 SubPhysicsControlComponent;                                 // 0x0010   (0x0008)  
	TEnumAsByte<ESBEventMoveRopeType>                  RopeType;                                                   // 0x0018   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	FName                                              RopeAttachBoneName;                                         // 0x001C   (0x0008)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	class UCableComponent*                             RopeCableComponent;                                         // 0x0028   (0x0008)  
	class UCableComponent*                             SubRopeCableComponent;                                      // 0x0030   (0x0008)  
	class UPrimitiveComponent*                         CollisionStartCollision;                                    // 0x0038   (0x0008)  
	class UPrimitiveComponent*                         CollisionEndCollision;                                      // 0x0040   (0x0008)  
	float                                              StartLeaveDistance;                                         // 0x0048   (0x0004)  
	float                                              EndLeaveDistance;                                           // 0x004C   (0x0004)  
	float                                              PerSpeed;                                                   // 0x0050   (0x0004)  
	TEnumAsByte<ESBEventMove_CableForceType>           AttachedEndForceDirType;                                    // 0x0054   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              AttachedEndForceScale;                                      // 0x0058   (0x0004)  
	float                                              DetachedEndForceScale;                                      // 0x005C   (0x0004)  
	FVector                                            StartCollisionExtent;                                       // 0x0060   (0x000C)  
	FVector                                            StartCollisionAddExtent;                                    // 0x006C   (0x000C)  
	float                                              DetachUpperCableLength;                                     // 0x0078   (0x0004)  
	float                                              MovementUpperCableLengthPerDist;                            // 0x007C   (0x0004)  
	FRuntimeFloatCurve                                 AccelerationCurve;                                          // 0x0080   (0x0088)  
	FRuntimeFloatCurve                                 DownAccelerationCurve;                                      // 0x0108   (0x0088)  
	FRuntimeFloatCurve                                 LowerCableOffsetCurve;                                      // 0x0190   (0x0088)  
	FRuntimeFloatCurve                                 SwingJumpXYSpeedCurve;                                      // 0x0218   (0x0088)  
	FRuntimeFloatCurve                                 SwingJumpZSpeedCurve;                                       // 0x02A0   (0x0088)  
	FRuntimeFloatCurve                                 SwingCancelXYSpeedCurve;                                    // 0x0328   (0x0088)  
	FRuntimeFloatCurve                                 SwingCancelZSpeedCurve;                                     // 0x03B0   (0x0088)  
	FRuntimeFloatCurve                                 SwingHitReflectForceCurve;                                  // 0x0438   (0x0088)  
	FRuntimeFloatCurve                                 SwingStartForceTimeCurve;                                   // 0x04C0   (0x0088)  
	FRuntimeFloatCurve                                 SwingXYForceScaleCurve;                                     // 0x0548   (0x0088)  
	FRuntimeFloatCurve                                 SwingAddAnimAlphaCurve;                                     // 0x05D0   (0x0088)  
	FSBEventMoveData_RopeSwingProperty                 RopeSwingProperty;                                          // 0x0658   (0x0048)  
	int32_t                                            AttachSegmentIndex;                                         // 0x06A0   (0x0004)  
	float                                              CachedRopeLength;                                           // 0x06A4   (0x0004)  
	bool                                               bUseStartRotation;                                          // 0x06A8   (0x0001)  
	bool                                               EnableRope;                                                 // 0x06A9   (0x0001)  
	bool                                               bAttached;                                                  // 0x06AA   (0x0001)  
	unsigned char                                      UnknownData12_6[0x1];                                       // 0x06AB   (0x0001)  MISSED
	float                                              RopeLength;                                                 // 0x06AC   (0x0004)  
	float                                              SubCableLength;                                             // 0x06B0   (0x0004)  
	float                                              CurrentRopeLength;                                          // 0x06B4   (0x0004)  
	FVector                                            CacheRelativeTargetLocation;                                // 0x06B8   (0x000C)  
	bool                                               bRopeMoving;                                                // 0x06C4   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x06C5   (0x0003)  MISSED
	float                                              CurrentAccelTime;                                           // 0x06C8   (0x0004)  
	float                                              InterpAcceleration;                                         // 0x06CC   (0x0004)  
	float                                              StopedAcceleration;                                         // 0x06D0   (0x0004)  
	float                                              InputBlockTime;                                             // 0x06D4   (0x0004)  
	float                                              TransitAnimBlockTime;                                       // 0x06D8   (0x0004)  
	bool                                               bDoStartTransit;                                            // 0x06DC   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x06DD   (0x0003)  MISSED
	FVector                                            MovementDirection;                                          // 0x06E0   (0x000C)  
	bool                                               bRopeSwingKeepStarting;                                     // 0x06EC   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x06ED   (0x0003)  MISSED
	FVector                                            PreAttachTargetLocation;                                    // 0x06F0   (0x000C)  
	FVector                                            RopeLastVelocity;                                           // 0x06FC   (0x000C)  
	FVector                                            RopeLastInputVec;                                           // 0x0708   (0x000C)  
	FVector                                            RopeLastTargetDirection;                                    // 0x0714   (0x000C)  
	FVector                                            RopePreLinearVelocity;                                      // 0x0720   (0x000C)  
	FVector                                            RopeDestWorldLocation;                                      // 0x072C   (0x000C)  
	float                                              RopeSwingStartForceKeepTime;                                // 0x0738   (0x0004)  
	bool                                               bRopeTrunStart;                                             // 0x073C   (0x0001)  
	bool                                               bRopeTrunSwing;                                             // 0x073D   (0x0001)  
	unsigned char                                      UnknownData16_6[0x2];                                       // 0x073E   (0x0002)  MISSED
	FVector                                            RopeTrunLocation;                                           // 0x0740   (0x000C)  
	FVector                                            RopeTurnDirection;                                          // 0x074C   (0x000C)  
	TArray<FSBEventMoveData_RopeTMInfo>                PendulumTMLog;                                              // 0x0758   (0x0010)  
	float                                              CurrentAddAnimAlphaValue;                                   // 0x0768   (0x0004)  
	int32_t                                            StartLeaveCableSegmentIndex;                                // 0x076C   (0x0004)  
	int32_t                                            EndLeaveCableSegmentIndex;                                  // 0x0770   (0x0004)  
	unsigned char                                      UnknownData17_7[0x4];                                       // 0x0774   (0x0004)  MISSED
};

/// Class /Script/SB.SBEventMoveDataComponent
/// Size: 0x0B20 (2848 bytes) (0x000260 - 0x000B20) align n/a MaxSize: 0x0B20
class USBEventMoveDataComponent : public USceneComponent
{ 
public:
	float                                              Priority;                                                   // 0x0260   (0x0004)  
	bool                                               bDisableInteraction;                                        // 0x0264   (0x0001)  
	bool                                               bPendingApplyActorStorage;                                  // 0x0265   (0x0001)  
	bool                                               bRegisteActorStorage;                                       // 0x0266   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x0267   (0x0001)  MISSED
	class UPrimitiveComponent*                         CollisionPrimitiveComponent;                                // 0x0268   (0x0008)  
	class UPrimitiveComponent*                         CollisionAtFailedInteraction;                               // 0x0270   (0x0008)  
	class USBEventMoveData*                            EventMoveData;                                              // 0x0278   (0x0008)  
	bool                                               bDynamic;                                                   // 0x0280   (0x0001)  
	bool                                               bSaveActorStorage;                                          // 0x0281   (0x0001)  
	bool                                               bUseDisableInteractionTimer;                                // 0x0282   (0x0001)  
	unsigned char                                      UnknownData09_6[0x1];                                       // 0x0283   (0x0001)  MISSED
	float                                              DisableInteractionTimer;                                    // 0x0284   (0x0004)  
	bool                                               bUseDisableInteractionCounter;                              // 0x0288   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0289   (0x0003)  MISSED
	int32_t                                            DisableInteractionCounter;                                  // 0x028C   (0x0004)  
	float                                              RemainEnableInteraction;                                    // 0x0290   (0x0004)  
	int32_t                                            RemainInteractionCounter;                                   // 0x0294   (0x0004)  
	float                                              MakedDisableProgressTimerEventPercent;                      // 0x0298   (0x0004)  
	float                                              MakedDisableProgressCounterEventPercent;                    // 0x029C   (0x0004)  
	FVector                                            StartTargetLocation;                                        // 0x02A0   (0x000C)  
	FRotator                                           StartTargetRotation;                                        // 0x02AC   (0x000C)  
	FVector                                            EndTargetLocation;                                          // 0x02B8   (0x000C)  
	FRotator                                           EndTargetRotation;                                          // 0x02C4   (0x000C)  
	FVector                                            StartLeaveLocation;                                         // 0x02D0   (0x000C)  
	FRotator                                           StartLeaveRotation;                                         // 0x02DC   (0x000C)  
	FVector                                            EndLeaveLocation;                                           // 0x02E8   (0x000C)  
	FRotator                                           EndLeaveRotation;                                           // 0x02F4   (0x000C)  
	FVector                                            LevelObjOrigin;                                             // 0x0300   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x030C   (0x000C)  
	class AActor*                                      EventVisualMeshActor;                                       // 0x0318   (0x0008)  
	class USplineComponent*                            BalanceMovingSplineComponent;                               // 0x0320   (0x0008)  
	FSBEventMoveData_CableInfo                         CableMoveInfo;                                              // 0x0328   (0x0028)  
	FSBEventMoveData_RopeMoveInfo                      RopeMoveInfo;                                               // 0x0350   (0x0778)  
	float                                              RopeOverrideLength;                                         // 0x0AC8   (0x0004)  
	bool                                               bOverrideBalanceMovingIgnoreDistanceAtStart;                // 0x0ACC   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x0ACD   (0x0003)  MISSED
	float                                              OverrideBalanceMovingIgnoreDistanceAtStart;                 // 0x0AD0   (0x0004)  
	bool                                               bOverrideBalanceMovingIgnoreDistanceAtEnd;                  // 0x0AD4   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0AD5   (0x0003)  MISSED
	float                                              OverrideBalanceMovingIgnoreDistanceAtEnd;                   // 0x0AD8   (0x0004)  
	bool                                               bOverrideSideRodWallSearch;                                 // 0x0ADC   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x0ADD   (0x0003)  MISSED
	float                                              OverrideSideRodWallSearchDist;                              // 0x0AE0   (0x0004)  
	float                                              OverrideSideRodWallSearchRange;                             // 0x0AE4   (0x0004)  
	float                                              RopeTargetLengthBlendTime;                                  // 0x0AE8   (0x0004)  
	float                                              CurrentRopeTargetLengthBlendTime;                           // 0x0AEC   (0x0004)  
	float                                              RopeBlendTargetLength;                                      // 0x0AF0   (0x0004)  
	float                                              RopeBlendStartLength;                                       // 0x0AF4   (0x0004)  
	bool                                               bDisplayScanPoint;                                          // 0x0AF8   (0x0001)  
	TEnumAsByte<ESBScanDisplayType>                    ScanDisplayType;                                            // 0x0AF9   (0x0001)  
	unsigned char                                      UnknownData14_6[0x6];                                       // 0x0AFA   (0x0006)  MISSED
	TArray<class USceneComponent*>                     ScanPointArray;                                             // 0x0B00   (0x0010)  
	bool                                               bUpdated;                                                   // 0x0B10   (0x0001)  
	unsigned char                                      UnknownData15_7[0xF];                                       // 0x0B11   (0x000F)  MISSED

	/// Functions
	// Function /Script/SB.SBEventMoveDataComponent.SetRopeMaxLength
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const float> SetRopeMaxLength = { 0x2749f80, 0 }; 
	// Function /Script/SB.SBEventMoveDataComponent.SetRopeLeaveDistance
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const float, const float> SetRopeLeaveDistance = { 0x274a1c0, 1 }; 
	// Function /Script/SB.SBEventMoveDataComponent.SetRopeAxisLocation
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const float, const float> SetRopeAxisLocation = { 0x274a050, 2 }; 
	// Function /Script/SB.SBEventMoveDataComponent.SetOverrideSideRodWallSearch
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const float, const float> SetOverrideSideRodWallSearch = { 0x274a360, 3 }; 
	// Function /Script/SB.SBEventMoveDataComponent.SetOverrideRopeMaxLength
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const float> SetOverrideRopeMaxLength = { 0x2749e60, 4 }; 
	// Function /Script/SB.SBEventMoveDataComponent.SetOverrideBalanceMovingIgnoreDistance
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const float, const float> SetOverrideBalanceMovingIgnoreDistance = { 0x274a4e0, 5 }; 
	// Function /Script/SB.SBEventMoveDataComponent.SetEventMoveLeaveLocation
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const FVector&, const FVector&> SetEventMoveLeaveLocation = { 0x274a740, 6 }; 
	// Function /Script/SB.SBEventMoveDataComponent.SetEnableRope
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const bool> SetEnableRope = { 0x2749d80, 7 }; 
	// Function /Script/SB.SBEventMoveDataComponent.SetDisableInteractionFlag
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const bool> SetDisableInteractionFlag = { 0x274a660, 8 }; 
	// Function /Script/SB.SBEventMoveDataComponent.NotifyBPHitEvent
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const bool, const FVector, const FVector, const FVector, const FHitResult&> NotifyBPHitEvent = { 0x274a8e0, 9 }; 
	// Function /Script/SB.SBEventMoveDataComponent.IsDynamic
	constexpr static const FunctionPointer<USBEventMoveDataComponent, bool> IsDynamic = { 0x274a340, 10 }; 
	// Function /Script/SB.SBEventMoveDataComponent.GetRopeOverrideLength
	constexpr static const FunctionPointer<USBEventMoveDataComponent, float> GetRopeOverrideLength = { 0x274adf0, 11 }; 
	// Function /Script/SB.SBEventMoveDataComponent.GetData
	constexpr static const FunctionPointer<USBEventMoveDataComponent, USBEventMoveData*> GetData = { 0x274ae10, 12 }; 
	// Function /Script/SB.SBEventMoveDataComponent.DirtyRopeCable
	constexpr static const FunctionPointer<USBEventMoveDataComponent, void, const float> DirtyRopeCable = { 0x2749cb0, 13 }; 
};

/// Class /Script/SB.SBExclusiveWaterVolume
/// Size: 0x0338 (824 bytes) (0x000318 - 0x000338) align n/a MaxSize: 0x0338
class ASBExclusiveWaterVolume : public AVolume
{ 
public:
	FSBMapSectorID                                     SectorID;                                                   // 0x0318   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x0320   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x032C   (0x000C)  
};

/// Class /Script/SB.SBExportDataTablesToCSVCommandlet
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class USBExportDataTablesToCSVCommandlet : public UCommandlet
{ 
public:
};

/// Class /Script/SB.SBFeedbackActor
/// Size: 0x0340 (832 bytes) (0x0002C8 - 0x000340) align n/a MaxSize: 0x0340
class ASBFeedbackActor : public AActor
{ 
public:
	class UTexture2D*                                  SpriteBackLog;                                              // 0x02C8   (0x0008)  
	class UTexture2D*                                  SpriteCheck;                                                // 0x02D0   (0x0008)  
	class UTexture2D*                                  SpriteProgress;                                             // 0x02D8   (0x0008)  
	class UTexture2D*                                  SpriteComplete;                                             // 0x02E0   (0x0008)  
	class UTexture2D*                                  SpriteDestruct;                                             // 0x02E8   (0x0008)  
	bool                                               inited;                                                     // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData03_6[0x13];                                      // 0x02F1   (0x0013)  MISSED
	FName                                              IssueName;                                                  // 0x0304   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x030C   (0x0004)  MISSED
	class USBWidgetComponent*                          CacheWidgetComponent;                                       // 0x0310   (0x0008)  
	class UBillboardComponent*                         CacheBillboardComponent;                                    // 0x0318   (0x0008)  
	TWeakObjectPtr<class USBUserWidget*>               CacheWidget;                                                // 0x0320   (0x0008)  
	TArray<class USceneComponent*>                     WidgetInteractionComps;                                     // 0x0328   (0x0010)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x0338   (0x0008)  MISSED
};

/// Class /Script/SB.SBFeedbackCommonMessageBoxWidget
/// Size: 0x06B0 (1712 bytes) (0x000680 - 0x0006B0) align n/a MaxSize: 0x06B0
class USBFeedbackCommonMessageBoxWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_8[0x20];                                      // 0x0680   (0x0020)  MISSED
	FString                                            prefixName;                                                 // 0x06A0   (0x0010)  

	/// Functions
	// Function /Script/SB.SBFeedbackCommonMessageBoxWidget.OnClickPositive
	constexpr static const FunctionPointer<USBFeedbackCommonMessageBoxWidget, void> OnClickPositive = { 0x2729500, 0 }; 
	// Function /Script/SB.SBFeedbackCommonMessageBoxWidget.OnClickNegative
	constexpr static const FunctionPointer<USBFeedbackCommonMessageBoxWidget, void> OnClickNegative = { 0x27294b0, 1 }; 
};

/// Class /Script/SB.SBFeedbackIssueAssignWidget
/// Size: 0x06B8 (1720 bytes) (0x000680 - 0x0006B8) align n/a MaxSize: 0x06B8
class USBFeedbackIssueAssignWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x38];                                      // 0x0680   (0x0038)  MISSED
};

/// Class /Script/SB.SBFeedbackIssueCommentWidget
/// Size: 0x06A0 (1696 bytes) (0x000680 - 0x0006A0) align n/a MaxSize: 0x06A0
class USBFeedbackIssueCommentWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x20];                                      // 0x0680   (0x0020)  MISSED
};

/// Class /Script/SB.SBFeedbackIssueInputWidget
/// Size: 0x06A0 (1696 bytes) (0x000680 - 0x0006A0) align n/a MaxSize: 0x06A0
class USBFeedbackIssueInputWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x20];                                      // 0x0680   (0x0020)  MISSED

	/// Functions
	// Function /Script/SB.SBFeedbackIssueInputWidget.OnInputActionPriorityPlus
	constexpr static const FunctionPointer<USBFeedbackIssueInputWidget, void> OnInputActionPriorityPlus = { 0x11615e0, 0 }; 
	// Function /Script/SB.SBFeedbackIssueInputWidget.OnInputActionPriorityMinus
	constexpr static const FunctionPointer<USBFeedbackIssueInputWidget, void> OnInputActionPriorityMinus = { 0x11615e0, 1 }; 
	// Function /Script/SB.SBFeedbackIssueInputWidget.OnInputActionOpenList
	constexpr static const FunctionPointer<USBFeedbackIssueInputWidget, void> OnInputActionOpenList = { 0x11615e0, 2 }; 
	// Function /Script/SB.SBFeedbackIssueInputWidget.OnInputActionOK
	constexpr static const FunctionPointer<USBFeedbackIssueInputWidget, void> OnInputActionOK = { 0x11615e0, 3 }; 
	// Function /Script/SB.SBFeedbackIssueInputWidget.OnInputActionCloseList
	constexpr static const FunctionPointer<USBFeedbackIssueInputWidget, void> OnInputActionCloseList = { 0x11615e0, 4 }; 
	// Function /Script/SB.SBFeedbackIssueInputWidget.OnInputActionClose
	constexpr static const FunctionPointer<USBFeedbackIssueInputWidget, void> OnInputActionClose = { 0x11615e0, 5 }; 
};

/// Class /Script/SB.SBFeedbackIssueMoveToItemWidget
/// Size: 0x06D0 (1744 bytes) (0x000680 - 0x0006D0) align n/a MaxSize: 0x06D0
class USBFeedbackIssueMoveToItemWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x50];                                      // 0x0680   (0x0050)  MISSED
};

/// Class /Script/SB.SBFeedbackIssueMoveToWidget
/// Size: 0x06E8 (1768 bytes) (0x000680 - 0x0006E8) align n/a MaxSize: 0x06E8
class USBFeedbackIssueMoveToWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x68];                                      // 0x0680   (0x0068)  MISSED
};

/// Class /Script/SB.SBFeedbackIssueViewerWidget
/// Size: 0x0740 (1856 bytes) (0x000680 - 0x000740) align n/a MaxSize: 0x0740
class USBFeedbackIssueViewerWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0xC0];                                      // 0x0680   (0x00C0)  MISSED
};

/// Class /Script/SB.SBFishingVolume
/// Size: 0x0348 (840 bytes) (0x000318 - 0x000348) align n/a MaxSize: 0x0348
class ASBFishingVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	FSBMapSectorID                                     SectorID;                                                   // 0x031C   (0x0008)  
	FName                                              RewardGroup;                                                // 0x0324   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x032C   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0338   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0344   (0x0004)  MISSED
};

/// Class /Script/SB.SBFlyingPoint
/// Size: 0x02F8 (760 bytes) (0x0002F0 - 0x0002F8) align n/a MaxSize: 0x02F8
class ASBFlyingPoint : public ANavigationObjectBase
{ 
public:
	FName                                              FlyingPointAlias;                                           // 0x02F0   (0x0008)  
};

/// Class /Script/SB.SBFootStepPhySurfaceComponent
/// Size: 0x05D0 (1488 bytes) (0x000568 - 0x0005D0) align n/a MaxSize: 0x05D0
class USBFootStepPhySurfaceComponent : public UBoxComponent
{ 
public:
	TEnumAsByte<EPhysicalSurface>                      OverrideFootStepPhySurface;                                 // 0x0568   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0569   (0x0003)  MISSED
	float                                              Priority;                                                   // 0x056C   (0x0004)  
	TMap<FName, int32_t>                               IntParams;                                                  // 0x0570   (0x0050)  
	TEnumAsByte<EDetailMode>                           VolumeDetailMode;                                           // 0x05C0   (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x05C1   (0x000F)  MISSED
};

/// Class /Script/SB.SBFootStepPhySurfaceVolume
/// Size: 0x0390 (912 bytes) (0x000318 - 0x000390) align n/a MaxSize: 0x0390
class ASBFootStepPhySurfaceVolume : public AVolume
{ 
public:
	TEnumAsByte<EPhysicalSurface>                      OverrideFootStepPhySurface;                                 // 0x0318   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0319   (0x0003)  MISSED
	float                                              Priority;                                                   // 0x031C   (0x0004)  
	TMap<FName, int32_t>                               IntParams;                                                  // 0x0320   (0x0050)  
	TEnumAsByte<EDetailMode>                           VolumeDetailMode;                                           // 0x0370   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0371   (0x0003)  MISSED
	FVector                                            LevelObjOrigin;                                             // 0x0374   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0380   (0x000C)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x038C   (0x0004)  MISSED
};

/// Class /Script/SB.SBForceFeedbackConcurrency
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class USBForceFeedbackConcurrency : public UDataAsset
{ 
public:
	int32_t                                            MaxCount;                                                   // 0x0030   (0x0004)  
	bool                                               bLimitToOwner : 1;                                          // 0x0034:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	ESBForceFeedbackConcurrencyRule                    ResolutionRule;                                             // 0x0038   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/SB.SBForceFeedbackEffect
/// Size: 0x0058 (88 bytes) (0x000048 - 0x000058) align n/a MaxSize: 0x0058
class USBForceFeedbackEffect : public UForceFeedbackEffect
{ 
public:
	class USBForceFeedbackConcurrency*                 Concurrency;                                                // 0x0048   (0x0008)  
	int32_t                                            ConcurrencyPriority;                                        // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/SB.SaveSlotInfo
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSaveSlotInfo
{ 
	int32_t                                            SlotNum;                                                    // 0x0000   (0x0004)  
	int32_t                                            Version;                                                    // 0x0004   (0x0004)  
	FString                                            MapName;                                                    // 0x0008   (0x0010)  
	FDateTime                                          Timestamp;                                                  // 0x0018   (0x0008)  
	FDateTime                                          SelectedTime;                                               // 0x0020   (0x0008)  
	int32_t                                            PlayTime;                                                   // 0x0028   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FString                                            CampAlias;                                                  // 0x0030   (0x0010)  
	FName                                              ZoneAlias;                                                  // 0x0040   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0048   (0x0008)  MISSED
};

/// Class /Script/SB.SBGameInstance
/// Size: 0x02D8 (728 bytes) (0x0001A8 - 0x0002D8) align n/a MaxSize: 0x02D8
class USBGameInstance : public UGameInstance
{ 
public:
	bool                                               bDebugSaveGame;                                             // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x01A9   (0x0007)  MISSED
	TArray<FSaveSlotInfo>                              CachedSaveSlots;                                            // 0x01B0   (0x0010)  
	FString                                            LobbyAutoStartMap;                                          // 0x01C0   (0x0010)  
	FString                                            APP_ID;                                                     // 0x01D0   (0x0010)  
	unsigned char                                      UnknownData04_6[0x38];                                      // 0x01E0   (0x0038)  MISSED
	class ASBCharacterOverlapManager*                  pCharacterOverlapManager;                                   // 0x0218   (0x0008)  
	class USBSaveManager*                              SaveObjectManager;                                          // 0x0220   (0x0008)  
	unsigned char                                      UnknownData05_7[0xB0];                                      // 0x0228   (0x00B0)  MISSED

	/// Functions
	// Function /Script/SB.SBGameInstance.PreLoadMap
	constexpr static const FunctionPointer<USBGameInstance, void, const FString> PreLoadMap = { 0x27500c0, 0 }; 
	// Function /Script/SB.SBGameInstance.PostLoadMap
	constexpr static const FunctionPointer<USBGameInstance, void, const UWorld*> PostLoadMap = { 0x274ffe0, 1 }; 
};

/// Struct /Script/SB.SBGamdeModeSecondaryTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBGamdeModeSecondaryTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/SB.SBGamdeModePostUpdateWorkTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBGamdeModePostUpdateWorkTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/SB.SBGameMode
/// Size: 0x0510 (1296 bytes) (0x0003B0 - 0x000510) align n/a MaxSize: 0x0510
class ASBGameMode : public AGameMode
{ 
public:
	TMap<FName, class USBLevelStreamingContext*>       LevelStreamingContextMap;                                   // 0x03B0   (0x0050)  
	TArray<class ULevelStreaming*>                     CustomLoadStreaming;                                        // 0x0400   (0x0010)  
	TArray<class ULevelStreaming*>                     CustomUnLoadStreaming;                                      // 0x0410   (0x0010)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0420   (0x0008)  MISSED
	FString                                            PlayerBlueprintPath;                                        // 0x0428   (0x0010)  
	bool                                               bDrawPlayerHUDInfo;                                         // 0x0438   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0439   (0x0007)  MISSED
	FString                                            BattleMusicStartEventPath;                                  // 0x0440   (0x0010)  
	FString                                            BattleMusicStopEventPath;                                   // 0x0450   (0x0010)  
	unsigned char                                      UnknownData05_6[0x50];                                      // 0x0460   (0x0050)  MISSED
	FSBGamdeModeSecondaryTickFunction                  SecondaryActorTick;                                         // 0x04B0   (0x0030)  
	FSBGamdeModePostUpdateWorkTickFunction             PostUpdateWorkActorTick;                                    // 0x04E0   (0x0030)  
};

/// Struct /Script/SB.SBSaveVersion
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveVersion
{ 
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	int32_t                                            Value;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBSavePackageVersion
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSavePackageVersion : FSBSaveVersion
{ 
};

/// Struct /Script/SB.SBSaveMajorVersion
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveMajorVersion : FSBSaveVersion
{ 
};

/// Struct /Script/SB.SBSaveMinorVersion
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveMinorVersion : FSBSaveVersion
{ 
};

/// Struct /Script/SB.SBSaveAppContentVersion
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveAppContentVersion : FSBSaveVersion
{ 
};

/// Struct /Script/SB.SBSaveVersionInfo
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSBSaveVersionInfo
{ 
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FSBSavePackageVersion                              PackageVersion;                                             // 0x0008   (0x0010)  
	FSBSaveMajorVersion                                MajorVersion;                                               // 0x0018   (0x0010)  
	FSBSaveMinorVersion                                MinerVersion;                                               // 0x0028   (0x0010)  
	FSBSaveAppContentVersion                           AppVersion;                                                 // 0x0038   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_OnlineAccountInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSaveGameData_OnlineAccountInfo
{ 
	ESBOnlineStoreType                                 OnlineStoreType;                                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            OnlineAccountID;                                            // 0x0008   (0x0010)  
};

/// Class /Script/SB.SBSaveBase
/// Size: 0x0088 (136 bytes) (0x000028 - 0x000088) align n/a MaxSize: 0x0088
class USBSaveBase : public USaveGame
{ 
public:
	FSBSaveVersionInfo                                 SaveFileVersionInfo;                                        // 0x0028   (0x0048)  
	FSBSaveGameData_OnlineAccountInfo                  OnlineAccountInfo;                                          // 0x0070   (0x0018)  
};

/// Struct /Script/SB.SBSaveOptionData_BossChallengeDiary
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBSaveOptionData_BossChallengeDiary
{ 
	bool                                               bClear;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	double                                             TotalPlayTime;                                              // 0x0008   (0x0008)  
	int64_t                                            BossClearDate;                                              // 0x0010   (0x0008)  
	ESBGameDifficultyType                              DifficultyType;                                             // 0x0018   (0x0001)  
	ESBBossChallengePresetType                         BossChallengePresetType;                                    // 0x0019   (0x0001)  
	bool                                               bEquipSuitItem;                                             // 0x001A   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x001B   (0x0001)  MISSED
	float                                              PlayerAccumulatedDamage;                                    // 0x001C   (0x0004)  
	int32_t                                            PrefectParryCount;                                          // 0x0020   (0x0004)  
	int32_t                                            PerfectDodgeCount;                                          // 0x0024   (0x0004)  
	int32_t                                            TachyModePlayCount;                                         // 0x0028   (0x0004)  
	int32_t                                            UseBulletCount;                                             // 0x002C   (0x0004)  
	int32_t                                            UseGrenadeCategoryItemCount;                                // 0x0030   (0x0004)  
	int32_t                                            UsePositionCategoryItemCount;                               // 0x0034   (0x0004)  
};

/// Struct /Script/SB.SBSaveOptionData_BossChallengeStage
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSaveOptionData_BossChallengeStage
{ 
	FName                                              StageAlias;                                                 // 0x0000   (0x0008)  
	TArray<FSBSaveOptionData_BossChallengeDiary>       BestRecordArray;                                            // 0x0008   (0x0010)  
	bool                                               bUnlock;                                                    // 0x0018   (0x0001)  
	bool                                               bNoticeUnlock;                                              // 0x0019   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x001A   (0x0006)  MISSED
};

/// Struct /Script/SB.SBItemInstance
/// Size: 0x0150 (336 bytes) (0x000000 - 0x000150) align n/a MaxSize: 0x0150
struct FSBItemInstance
{ 
	FGuid                                              SavedGuid;                                                  // 0x0000   (0x0010)  
	FGuid                                              PocketGuid;                                                 // 0x0010   (0x0010)  
	FName                                              ItemAlias;                                                  // 0x0020   (0x0008)  
	FName                                              ItemVisualAlias;                                            // 0x0028   (0x0008)  
	uint32_t                                           StatLevel;                                                  // 0x0030   (0x0004)  
	uint32_t                                           ItemCount;                                                  // 0x0034   (0x0004)  
	uint32_t                                           ItemChargeCount;                                            // 0x0038   (0x0004)  
	bool                                               Equiped;                                                    // 0x003C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	int32_t                                            MatVarIndex;                                                // 0x0040   (0x0004)  
	TEnumAsByte<ESBItemOverrideSaveType>               OverrideSaveType;                                           // 0x0044   (0x0001)  
	bool                                               bWithResetZone;                                             // 0x0045   (0x0001)  
	bool                                               bFavorites;                                                 // 0x0046   (0x0001)  
	bool                                               bMustAcquisition;                                           // 0x0047   (0x0001)  
	unsigned char                                      UnknownData03_7[0x108];                                     // 0x0048   (0x0108)  MISSED
};

/// Struct /Script/SB.SBSaveOptionData_ActorEquipment
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FSBSaveOptionData_ActorEquipment
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TMap<TEnumAsByte<ESBEquipType>, FSBItemInstance>   EquipmentMap;                                               // 0x0008   (0x0050)  
	TArray<FName>                                      FavoriteItemArray;                                          // 0x0058   (0x0010)  
};

/// Struct /Script/SB.SBSaveOptionData_ActorEquipmentDiary
/// Size: 0x0188 (392 bytes) (0x000000 - 0x000188) align n/a MaxSize: 0x0188
struct FSBSaveOptionData_ActorEquipmentDiary
{ 
	TMap<ESBBossChallengePresetType, FSBSaveOptionData_ActorEquipment> PresetAbilityEquipMap;                      // 0x0000   (0x0050)  
	FSBSaveOptionData_ActorEquipment                   LastGameAbilityEquip;                                       // 0x0050   (0x0068)  
	FSBSaveOptionData_ActorEquipment                   AppearanceEquip;                                            // 0x00B8   (0x0068)  
	FSBSaveOptionData_ActorEquipment                   LastGameAppearanceEquip;                                    // 0x0120   (0x0068)  
};

/// Struct /Script/SB.SBSaveGameData_Theater
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBSaveGameData_Theater
{ 
	TSet<FName>                                        LevelSeqPlayingSet;                                         // 0x0000   (0x0050)  
};

/// Struct /Script/SB.SBSaveOptionData_BossChallenge
/// Size: 0x01F8 (504 bytes) (0x000000 - 0x0001F8) align n/a MaxSize: 0x01F8
struct FSBSaveOptionData_BossChallenge
{ 
	TArray<FSBSaveOptionData_BossChallengeStage>       StageArray;                                                 // 0x0000   (0x0010)  
	FSBSaveOptionData_ActorEquipmentDiary              ActorEquipmentDiary;                                        // 0x0010   (0x0188)  
	FSBSaveGameData_Theater                            TheaterData;                                                // 0x0198   (0x0050)  
	bool                                               bNoticeUnlock;                                              // 0x01E8   (0x0001)  
	bool                                               bAvailableHardMode;                                         // 0x01E9   (0x0001)  
	bool                                               bAvailableMaximumPreset;                                    // 0x01EA   (0x0001)  
	bool                                               bAvailableNewGamePlusPreset;                                // 0x01EB   (0x0001)  
	bool                                               bNoticeHardMode;                                            // 0x01EC   (0x0001)  
	bool                                               bNoticeNewGamePlusPreset;                                   // 0x01ED   (0x0001)  
	bool                                               bNoticeMissionClearReward;                                  // 0x01EE   (0x0001)  
	bool                                               bNoticeRavenMissionClearReward;                             // 0x01EF   (0x0001)  
	bool                                               bNoticeMaanMissionClearReward;                              // 0x01F0   (0x0001)  
	bool                                               bNoticeScarletMissionClearReward;                           // 0x01F1   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x01F2   (0x0006)  MISSED
};

/// Struct /Script/SB.SBSaveOptionData_PhotoModePresetLight
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBSaveOptionData_PhotoModePresetLight
{ 
	int32_t                                            Index;                                                      // 0x0000   (0x0004)  
	bool                                               bActivated;                                                 // 0x0004   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	int32_t                                            Channel;                                                    // 0x0014   (0x0004)  
	bool                                               bShadow;                                                    // 0x0018   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              AttenuationRadius;                                          // 0x001C   (0x0004)  
	int32_t                                            PresetColor;                                                // 0x0020   (0x0004)  
	int32_t                                            ColorH;                                                     // 0x0024   (0x0004)  
	int32_t                                            Colors;                                                     // 0x0028   (0x0004)  
	int32_t                                            ColorL;                                                     // 0x002C   (0x0004)  
	float                                              Intensity;                                                  // 0x0030   (0x0004)  
	float                                              VolumetricScatteringIntensity;                              // 0x0034   (0x0004)  
};

/// Struct /Script/SB.SBSaveOptionData_PhotoModePresetLogo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBSaveOptionData_PhotoModePresetLogo
{ 
	FVector2D                                          Location;                                                   // 0x0000   (0x0008)  
	float                                              angle;                                                      // 0x0008   (0x0004)  
	FVector2D                                          Size;                                                       // 0x000C   (0x0008)  
};

/// Struct /Script/SB.SBSaveOptionData_PhotoModeEyeTrackingData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FSBSaveOptionData_PhotoModeEyeTrackingData
{ 
	bool                                               bEVE;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              EVE_EyeRL;                                                  // 0x0004   (0x0004)  
	float                                              EVE_EyeUD;                                                  // 0x0008   (0x0004)  
	bool                                               bLily;                                                      // 0x000C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	float                                              Lily_EyeRL;                                                 // 0x0010   (0x0004)  
	float                                              Lily_EyeUD;                                                 // 0x0014   (0x0004)  
	bool                                               bAdam;                                                      // 0x0018   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              Adam_EyeRL;                                                 // 0x001C   (0x0004)  
	float                                              Adam_EyeUD;                                                 // 0x0020   (0x0004)  
};

/// Struct /Script/SB.SBSaveOptionData_PhotoModePresetSlot
/// Size: 0x0130 (304 bytes) (0x000000 - 0x000130) align n/a MaxSize: 0x0130
struct FSBSaveOptionData_PhotoModePresetSlot
{ 
	int32_t                                            SlotIndex;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TMap<FName, int32_t>                               IntValues;                                                  // 0x0008   (0x0050)  
	TMap<FName, float>                                 FloatValues;                                                // 0x0058   (0x0050)  
	TArray<FSBSaveOptionData_PhotoModePresetLight>     LightDataArray;                                             // 0x00A8   (0x0010)  
	TMap<TEnumAsByte<ESBPhotoModeOptionType>, FSBSaveOptionData_PhotoModePresetLogo> LogoDataMap;                  // 0x00B8   (0x0050)  
	FSBSaveOptionData_PhotoModeEyeTrackingData         EyeTrackingData;                                            // 0x0108   (0x0024)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x012C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBSaveOptionData_PhotoModePresetMode
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveOptionData_PhotoModePresetMode
{ 
	TArray<FSBSaveOptionData_PhotoModePresetSlot>      PresetSlots;                                                // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSaveOptionData_PhotoModePreset
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBSaveOptionData_PhotoModePreset
{ 
	TMap<TEnumAsByte<ESBPhotoModeCameraType>, FSBSaveOptionData_PhotoModePresetMode> PresetModes;                  // 0x0000   (0x0050)  
};

/// Class /Script/SB.SBGameOptionSaveData
/// Size: 0x0468 (1128 bytes) (0x000088 - 0x000468) align n/a MaxSize: 0x0468
class USBGameOptionSaveData : public USBSaveBase
{ 
public:
	int32_t                                            Version;                                                    // 0x0088   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	TMap<FName, bool>                                  DataMap_bool;                                               // 0x0090   (0x0050)  
	TMap<FName, float>                                 DataMap_float;                                              // 0x00E0   (0x0050)  
	TMap<FName, FString>                               DataMap_FString;                                            // 0x0130   (0x0050)  
	TMap<FName, int32_t>                               DataMap_int32;                                              // 0x0180   (0x0050)  
	TMap<FName, FIntPoint>                             DataMap_IntPoint;                                           // 0x01D0   (0x0050)  
	FSBSaveOptionData_BossChallenge                    BossChallengeData;                                          // 0x0220   (0x01F8)  
	FSBSaveOptionData_PhotoModePreset                  PhotoModePresetData;                                        // 0x0418   (0x0050)  
};

/// Class /Script/SB.SBGameState
/// Size: 0x0338 (824 bytes) (0x000338 - 0x000338) align n/a MaxSize: 0x0338
class ASBGameState : public AGameState
{ 
public:
};

/// Class /Script/SB.SBGameUserSettings
/// Size: 0x0728 (1832 bytes) (0x000128 - 0x000728) align n/a MaxSize: 0x0728
class USBGameUserSettings : public UGameUserSettings
{ 
public:
	unsigned char                                      UnknownData56_8[0x8];                                       // 0x0128   (0x0008)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            EnviromentObjectDetail;                                     // 0x0130   (0x0001)  
	unsigned char                                      UnknownData57_6[0x13];                                      // 0x0131   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            CharacterObjectDetail;                                      // 0x0144   (0x0001)  
	unsigned char                                      UnknownData58_6[0x13];                                      // 0x0145   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            EnviromentTextures;                                         // 0x0158   (0x0001)  
	unsigned char                                      UnknownData59_6[0x13];                                      // 0x0159   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            CharacterTextures;                                          // 0x016C   (0x0001)  
	unsigned char                                      UnknownData60_6[0x27];                                      // 0x016D   (0x0027)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            VolumetricFog;                                              // 0x0194   (0x0001)  
	unsigned char                                      UnknownData61_6[0x13];                                      // 0x0195   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            ShadowQuality;                                              // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData62_6[0x13];                                      // 0x01A9   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            EffectQuality;                                              // 0x01BC   (0x0001)  
	unsigned char                                      UnknownData63_6[0x13];                                      // 0x01BD   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            EnvironmentQuality;                                         // 0x01D0   (0x0001)  
	unsigned char                                      UnknownData64_6[0x13];                                      // 0x01D1   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            Lighting;                                                   // 0x01E4   (0x0001)  
	unsigned char                                      UnknownData65_6[0x13];                                      // 0x01E5   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            FoliageQuality;                                             // 0x01F8   (0x0001)  
	unsigned char                                      UnknownData66_6[0x13];                                      // 0x01F9   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            AmbientOcclusion;                                           // 0x020C   (0x0001)  
	unsigned char                                      UnknownData67_6[0x13];                                      // 0x020D   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            DepthOfField;                                               // 0x0220   (0x0001)  
	unsigned char                                      UnknownData68_6[0x13];                                      // 0x0221   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            ScreenSpaceReflection;                                      // 0x0234   (0x0001)  
	unsigned char                                      UnknownData69_6[0x13];                                      // 0x0235   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            SceneColorFringeQuality;                                    // 0x0248   (0x0001)  
	unsigned char                                      UnknownData70_6[0x13];                                      // 0x0249   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            GrainQuality;                                               // 0x025C   (0x0001)  
	unsigned char                                      UnknownData71_6[0x13];                                      // 0x025D   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            MaterialQuality;                                            // 0x0270   (0x0001)  
	unsigned char                                      UnknownData72_6[0x13];                                      // 0x0271   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            AntiAliasing;                                               // 0x0284   (0x0001)  
	unsigned char                                      UnknownData73_6[0x13];                                      // 0x0285   (0x0013)  MISSED
	float                                              ResolutionScale;                                            // 0x0298   (0x0004)  
	unsigned char                                      UnknownData74_6[0x10];                                      // 0x029C   (0x0010)  MISSED
	float                                              Sharpen;                                                    // 0x02AC   (0x0004)  
	unsigned char                                      UnknownData75_6[0x10];                                      // 0x02B0   (0x0010)  MISSED
	float                                              SharpenDLSS;                                                // 0x02C0   (0x0004)  
	unsigned char                                      UnknownData76_6[0x10];                                      // 0x02C4   (0x0010)  MISSED
	float                                              SharpenFSR3;                                                // 0x02D4   (0x0004)  
	unsigned char                                      UnknownData77_6[0x10];                                      // 0x02D8   (0x0010)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            NvidiaDLSS;                                                 // 0x02E8   (0x0001)  
	unsigned char                                      UnknownData78_6[0x13];                                      // 0x02E9   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            NvidiaFrameGeneration;                                      // 0x02FC   (0x0001)  
	unsigned char                                      UnknownData79_6[0x13];                                      // 0x02FD   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            NvidiaReflexLowLatency;                                     // 0x0310   (0x0001)  
	unsigned char                                      UnknownData80_6[0x13];                                      // 0x0311   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            AmdFSR3;                                                    // 0x0324   (0x0001)  
	unsigned char                                      UnknownData81_6[0x13];                                      // 0x0325   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            AmdFrameInterpolation;                                      // 0x0338   (0x0001)  
	unsigned char                                      UnknownData82_6[0x13];                                      // 0x0339   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            IntelXeSS;                                                  // 0x034C   (0x0001)  
	unsigned char                                      UnknownData83_6[0x13];                                      // 0x034D   (0x0013)  MISSED
	ESBAspectRatio                                     AspectRatio;                                                // 0x0360   (0x0001)  
	unsigned char                                      UnknownData84_6[0x5];                                       // 0x0361   (0x0005)  MISSED
	ESBGameOptionAudioDeviceType                       AudioDeviceType;                                            // 0x0366   (0x0001)  
	unsigned char                                      UnknownData85_6[0x5];                                       // 0x0367   (0x0005)  MISSED
	float                                              HDRBrightness;                                              // 0x036C   (0x0004)  
	unsigned char                                      UnknownData86_6[0x14];                                      // 0x0370   (0x0014)  MISSED
	float                                              HDRContrast;                                                // 0x0384   (0x0004)  
	unsigned char                                      UnknownData87_6[0x14];                                      // 0x0388   (0x0014)  MISSED
	float                                              HDRUILevel;                                                 // 0x039C   (0x0004)  
	unsigned char                                      UnknownData88_6[0x14];                                      // 0x03A0   (0x0014)  MISSED
	float                                              Gamma;                                                      // 0x03B4   (0x0004)  
	unsigned char                                      UnknownData89_6[0x14];                                      // 0x03B8   (0x0014)  MISSED
	float                                              SoundSEVolume;                                              // 0x03CC   (0x0004)  
	unsigned char                                      UnknownData90_6[0x14];                                      // 0x03D0   (0x0014)  MISSED
	float                                              SoundDialogVolume;                                          // 0x03E4   (0x0004)  
	unsigned char                                      UnknownData91_6[0x14];                                      // 0x03E8   (0x0014)  MISSED
	float                                              SoundBGMVolume;                                             // 0x03FC   (0x0004)  
	unsigned char                                      UnknownData92_6[0x14];                                      // 0x0400   (0x0014)  MISSED
	float                                              SoundMasterVolume;                                          // 0x0414   (0x0004)  
	unsigned char                                      UnknownData93_6[0x14];                                      // 0x0418   (0x0014)  MISSED
	ESBFrameLimit                                      FrameLimit;                                                 // 0x042C   (0x0001)  
	unsigned char                                      UnknownData94_6[0x4];                                       // 0x042D   (0x0004)  MISSED
	ESBGameOptionHUDSizeType                           HUDSizeType;                                                // 0x0431   (0x0001)  
	unsigned char                                      UnknownData95_6[0x4];                                       // 0x0432   (0x0004)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            HUDBGActive;                                                // 0x0436   (0x0001)  
	unsigned char                                      UnknownData96_6[0x11];                                      // 0x0437   (0x0011)  MISSED
	int32_t                                            HUDAspect;                                                  // 0x0448   (0x0004)  
	unsigned char                                      UnknownData97_6[0x10];                                      // 0x044C   (0x0010)  MISSED
	int32_t                                            SubTitleSizeValue;                                          // 0x045C   (0x0004)  
	unsigned char                                      UnknownData98_6[0x10];                                      // 0x0460   (0x0010)  MISSED
	int32_t                                            SubTitleBGValue;                                            // 0x0470   (0x0004)  
	unsigned char                                      UnknownData99_6[0x10];                                      // 0x0474   (0x0010)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            UMPCMode;                                                   // 0x0484   (0x0001)  
	unsigned char                                      UnknownData100_6[0x13];                                     // 0x0485   (0x0013)  MISSED
	int32_t                                            GpuDeviceID;                                                // 0x0498   (0x0004)  
	unsigned char                                      UnknownData101_6[0x4];                                      // 0x049C   (0x0004)  MISSED
	FString                                            MonitorID;                                                  // 0x04A0   (0x0010)  
	unsigned char                                      UnknownData102_6[0x10];                                     // 0x04B0   (0x0010)  MISSED
	bool                                               bFirstRun;                                                  // 0x04C0   (0x0001)  
	bool                                               bHDDMode;                                                   // 0x04C1   (0x0001)  
	unsigned char                                      UnknownData103_6[0x1];                                      // 0x04C2   (0x0001)  MISSED
	bool                                               bVSync;                                                     // 0x04C3   (0x0001)  
	unsigned char                                      UnknownData104_6[0x1];                                      // 0x04C4   (0x0001)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            AnimationQuality;                                           // 0x04C5   (0x0001)  
	unsigned char                                      UnknownData105_6[0x12];                                     // 0x04C6   (0x0012)  MISSED
	float                                              CharacterViewDistance;                                      // 0x04D8   (0x0004)  
	unsigned char                                      UnknownData106_6[0x10];                                     // 0x04DC   (0x0010)  MISSED
	float                                              EnviromentObjectViewDistance;                               // 0x04EC   (0x0004)  
	unsigned char                                      UnknownData107_6[0x10];                                     // 0x04F0   (0x0010)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            UpscalerType;                                               // 0x0500   (0x0001)  
	unsigned char                                      UnknownData108_6[0x13];                                     // 0x0501   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            SavedNvidiaFrameGeneration;                                 // 0x0514   (0x0001)  
	unsigned char                                      UnknownData109_6[0x14];                                     // 0x0515   (0x0014)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            SavedNvidiaReflexLowLatency;                                // 0x0529   (0x0001)  
	unsigned char                                      UnknownData110_6[0x13];                                     // 0x052A   (0x0013)  MISSED
	TEnumAsByte<ESBGameUserSettingsQuality>            SavedAmdFrameInterpolation;                                 // 0x053D   (0x0001)  
	unsigned char                                      UnknownData111_7[0x1EA];                                    // 0x053E   (0x01EA)  MISSED
};

/// Class /Script/SB.SBGeneratePlayGoLabelCommandlet
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class USBGeneratePlayGoLabelCommandlet : public UCommandlet
{ 
public:
};

/// Class /Script/SB.SBGenerateResourceCacheFileCommandlet
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class USBGenerateResourceCacheFileCommandlet : public UCommandlet
{ 
public:
};

/// Class /Script/SB.SBHoldButton
/// Size: 0x06D0 (1744 bytes) (0x000680 - 0x0006D0) align n/a MaxSize: 0x06D0
class USBHoldButton : public USBUserWidget
{ 
public:
	class UImage*                                      ProgressImage;                                              // 0x0680   (0x0008)  
	class UTextBlock*                                  TextBlock;                                                  // 0x0688   (0x0008)  
	FText                                              text;                                                       // 0x0690   (0x0018)  
	float                                              HoldMaxTime;                                                // 0x06A8   (0x0004)  
	bool                                               bUseReleaseSpeed;                                           // 0x06AC   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x06AD   (0x0003)  MISSED
	float                                              ReleaseTime;                                                // 0x06B0   (0x0004)  
	ESBUIFillCurve                                     FillType;                                                   // 0x06B4   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x06B5   (0x0003)  MISSED
	FMulticastInlineDelegate                           CompleteEvent;                                              // 0x06B8   (0x0010)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x06C8   (0x0008)  MISSED

	/// Functions
	// Function /Script/SB.SBHoldButton.ResetProgress
	constexpr static const FunctionPointer<USBHoldButton, void> ResetProgress = { 0x27543b0, 0 }; 
	// Function /Script/SB.SBHoldButton.GetProgress
	constexpr static const FunctionPointer<USBHoldButton, float> GetProgress = { 0x27543e0, 1 }; 
	// Function /Script/SB.SBHoldButton.GetPrevState
	constexpr static const FunctionPointer<USBHoldButton, ESBUIHoldButtonStateType> GetPrevState = { 0x2754370, 2 }; 
	// Function /Script/SB.SBHoldButton.GetCurrnetState
	constexpr static const FunctionPointer<USBHoldButton, ESBUIHoldButtonStateType> GetCurrnetState = { 0x2754390, 3 }; 
	// Function /Script/SB.SBHoldButton.ChangeState
	constexpr static const FunctionPointer<USBHoldButton, void, const ESBUIHoldButtonStateType> ChangeState = { 0x2754480, 4 }; 
};

/// Struct /Script/SB.SBAspectRatioCropBarInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBAspectRatioCropBarInfo
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              AspectRatio;                                                // 0x0004   (0x0004)  
	float                                              CropTargetAspectRatio;                                      // 0x0008   (0x0004)  
	float                                              BlendDuration;                                              // 0x000C   (0x0004)  
	double                                             BlendStartSecond;                                           // 0x0010   (0x0008)  
	float                                              BlendAlpha;                                                 // 0x0018   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBDebug2DLineInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBDebug2DLineInfo
{ 
	int32_t                                            StartX;                                                     // 0x0000   (0x0004)  
	int32_t                                            StartY;                                                     // 0x0004   (0x0004)  
	int32_t                                            EndX;                                                       // 0x0008   (0x0004)  
	int32_t                                            EndY;                                                       // 0x000C   (0x0004)  
	FColor                                             LineColor;                                                  // 0x0010   (0x0004)  
};

/// Class /Script/SB.SBHUD
/// Size: 0x03F0 (1008 bytes) (0x0003B8 - 0x0003F0) align n/a MaxSize: 0x03F0
class ASBHUD : public AHUD
{ 
public:
	bool                                               bDrawPlayerState;                                           // 0x03B8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x03B9   (0x0007)  MISSED
	FSBAspectRatioCropBarInfo                          CropBarInfo;                                                // 0x03C0   (0x0020)  
	TArray<FSBDebug2DLineInfo>                         DebugLines;                                                 // 0x03E0   (0x0010)  
};

/// Struct /Script/SB.SBIndicatorButtonData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBIndicatorButtonData
{ 
	ESBIndicatorButtonType                             Type;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FText                                              text;                                                       // 0x0008   (0x0018)  
	bool                                               IsClickable;                                                // 0x0020   (0x0001)  
	TEnumAsByte<ESBUILogicType>                        ButtonTargetLogicType;                                      // 0x0021   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x0022   (0x0002)  MISSED
	FName                                              ResourceAction;                                             // 0x0024   (0x0008)  
	FName                                              ResourceAction2;                                            // 0x002C   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FName>                                      ResourceActionArray;                                        // 0x0038   (0x0010)  
	TEnumAsByte<ESBUIIndicatorLockChannel>             LockChannel;                                                // 0x0048   (0x0001)  
	TEnumAsByte<ESBUIIndicatorHiddenChannel>           HiddenChannel;                                              // 0x0049   (0x0001)  
	unsigned char                                      UnknownData07_7[0x6];                                       // 0x004A   (0x0006)  MISSED
};

/// Struct /Script/SB.SBIndicatorButtonDataWrapper
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBIndicatorButtonDataWrapper
{ 
	TArray<FSBIndicatorButtonData>                     Array;                                                      // 0x0000   (0x0010)  
};

/// Class /Script/SB.SBIndicator
/// Size: 0x0750 (1872 bytes) (0x000680 - 0x000750) align n/a MaxSize: 0x0750
class USBIndicator : public USBUserWidget
{ 
public:
	class UHorizontalBox*                              ButtonHorizontalBox;                                        // 0x0680   (0x0008)  
	TMap<FName, FSBIndicatorButtonDataWrapper>         IndicatorDataMap;                                           // 0x0688   (0x0050)  
	TMap<ESBIndicatorButtonType, class UClass*>        IndicatorButtonMap;                                         // 0x06D8   (0x0050)  
	FName                                              IndicatorType;                                              // 0x0728   (0x0008)  
	int32_t                                            IndicatorLockChannel;                                       // 0x0730   (0x0004)  
	int32_t                                            IndicatorHiddenChannel;                                     // 0x0734   (0x0004)  
	float                                              WidthSpace;                                                 // 0x0738   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x073C   (0x0004)  MISSED
	TArray<class USBIndicatorButtonBase*>              ButtonWidgetPool;                                           // 0x0740   (0x0010)  

	/// Functions
	// Function /Script/SB.SBIndicator.UpdateLockChannel
	constexpr static const FunctionPointer<USBIndicator, void, const int32_t> UpdateLockChannel = { 0x27552e0, 0 }; 
	// Function /Script/SB.SBIndicator.UpdateIndicatorType
	constexpr static const FunctionPointer<USBIndicator, void, const FName, const int32_t> UpdateIndicatorType = { 0x27553c0, 1 }; 
	// Function /Script/SB.SBIndicator.UpdateHiddenChannel
	constexpr static const FunctionPointer<USBIndicator, void, const int32_t> UpdateHiddenChannel = { 0x2755200, 2 }; 
	// Function /Script/SB.SBIndicator.RefreshIndicator
	constexpr static const FunctionPointer<USBIndicator, void> RefreshIndicator = { 0x27551e0, 3 }; 
};

/// Class /Script/SB.SBIndicatorButtonBase
/// Size: 0x0688 (1672 bytes) (0x000680 - 0x000688) align n/a MaxSize: 0x0688
class USBIndicatorButtonBase : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0680   (0x0008)  MISSED

	/// Functions
	// Function /Script/SB.SBIndicatorButtonBase.SetText
	constexpr static const FunctionPointer<USBIndicatorButtonBase, void, const FText&> SetText = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBIndicatorButtonBase.SetTargetLogicType
	constexpr static const FunctionPointer<USBIndicatorButtonBase, void, const TEnumAsByte<ESBUILogicType>> SetTargetLogicType = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBIndicatorButtonBase.SetResourceActionArray
	constexpr static const FunctionPointer<USBIndicatorButtonBase, void, const FName, const int32_t> SetResourceActionArray = { 0x2bbb090, 2 }; 
	// Function /Script/SB.SBIndicatorButtonBase.SetResourceAction2
	constexpr static const FunctionPointer<USBIndicatorButtonBase, void, const FName> SetResourceAction2 = { 0x2bbb090, 3 }; 
	// Function /Script/SB.SBIndicatorButtonBase.SetResourceAction
	constexpr static const FunctionPointer<USBIndicatorButtonBase, void, const FName> SetResourceAction = { 0x2bbb090, 4 }; 
	// Function /Script/SB.SBIndicatorButtonBase.SetLockImage
	constexpr static const FunctionPointer<USBIndicatorButtonBase, void, const bool> SetLockImage = { 0x2bbb090, 5 }; 
	// Function /Script/SB.SBIndicatorButtonBase.SetLeftSpace
	constexpr static const FunctionPointer<USBIndicatorButtonBase, void, const float> SetLeftSpace = { 0x2bbb090, 6 }; 
	// Function /Script/SB.SBIndicatorButtonBase.SetIndicatorBtnProperties
	constexpr static const FunctionPointer<USBIndicatorButtonBase, void, const FText, const FName, const FName, const TArray<FName>&, const bool, const TEnumAsByte<ESBUILogicType>, const bool> SetIndicatorBtnProperties = { 0x2755940, 7 }; 
	// Function /Script/SB.SBIndicatorButtonBase.SetButtonClickable
	constexpr static const FunctionPointer<USBIndicatorButtonBase, void, const bool> SetButtonClickable = { 0x2bbb090, 8 }; 
};

/// Class /Script/SB.SBInteractionBreakPoint
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class USBInteractionBreakPoint : public UObject
{ 
public:
	bool                                               bEnabled : 1;                                               // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	class USBInteractionNode_Base*                     Node;                                                       // 0x0030   (0x0008)  
};

/// Class /Script/SB.SBInteractionGraph
/// Size: 0x00A0 (160 bytes) (0x000030 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBInteractionGraph : public UDataAsset
{ 
public:
	uint32_t                                           Version;                                                    // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<class USBInteractionNode*>                  RootInteractionNode;                                        // 0x0038   (0x0010)  
	TArray<class USBInteractionNode*>                  AllInteractionNode;                                         // 0x0048   (0x0010)  
	class USBInteractionNode_Base*                     RootInteractionNodeBase;                                    // 0x0058   (0x0008)  
	class USBInteractionNode_Base*                     CancelInteractionNodeBase;                                  // 0x0060   (0x0008)  
	class USBInteractionNode_Base*                     TickInteractionNodeBase;                                    // 0x0068   (0x0008)  
	TArray<class USBDataNodeBase*>                     AllNodeBaseList;                                            // 0x0070   (0x0010)  
	TArray<class USBInteractionNode_Base*>             TemplateNodes;                                              // 0x0080   (0x0010)  
	TArray<class USBInteractionNode_GotoLabel*>        GotoLabelNodes;                                             // 0x0090   (0x0010)  
};

/// Struct /Script/SB.SBExecCustomStruct
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FSBExecCustomStruct
{ 
	FName                                              DataAlias;                                                  // 0x0000   (0x0008)  
	FString                                            DataAssetPath;                                              // 0x0008   (0x0010)  
	FName                                              NameValue;                                                  // 0x0018   (0x0008)  
	TEnumAsByte<ESBData>                               DataTableType;                                              // 0x0020   (0x0001)  
	TEnumAsByte<ESBInteractionEventType>               EventActionType;                                            // 0x0021   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0022   (0x0002)  MISSED
	int32_t                                            IntValue;                                                   // 0x0024   (0x0004)  
	float                                              FloatValue;                                                 // 0x0028   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FString                                            StrValue;                                                   // 0x0030   (0x0010)  
	FString                                            Str2Value;                                                  // 0x0040   (0x0010)  
	FString                                            StrEnumValue;                                               // 0x0050   (0x0010)  
	bool                                               bBoolValue;                                                 // 0x0060   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            CustomType;                                                 // 0x0064   (0x0004)  
	TArray<FName>                                      CustomNameList;                                             // 0x0068   (0x0010)  
	TArray<FString>                                    CustomStringList;                                           // 0x0078   (0x0010)  
	class USBDataNodeBase*                             LinkNode;                                                   // 0x0088   (0x0008)  
};

/// Struct /Script/SB.SBInteractionExecPinInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBInteractionExecPinInfo
{ 
	bool                                               bResultFlag;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              CustomTagName;                                              // 0x0004   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FSBExecCustomStruct>                        CustomStructList;                                           // 0x0010   (0x0010)  
};

/// Class /Script/SB.SBInteractionNode_Base
/// Size: 0x0070 (112 bytes) (0x000048 - 0x000070) align n/a MaxSize: 0x0070
class USBInteractionNode_Base : public USBDataNodeBase
{ 
public:
	TEnumAsByte<ESBInteractionNodeType>                InteractionNodeType;                                        // 0x0048   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FName                                              LinkToParentPinName;                                        // 0x004C   (0x0008)  
	int32_t                                            LinkToParentPinIndex;                                       // 0x0054   (0x0004)  
	TEnumAsByte<ESBInteractionResultType>              LinkeResultType;                                            // 0x0058   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	TArray<FSBInteractionExecPinInfo>                  NodeActionList;                                             // 0x0060   (0x0010)  
};

/// Struct /Script/SB.SBInteractionNodeProperty
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBInteractionNodeProperty
{ 
	TEnumAsByte<ESBInteractionEventType>               ActionType;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              EventAlias;                                                 // 0x0004   (0x0008)  
	int32_t                                            CustomValue;                                                // 0x000C   (0x0004)  
	FName                                              CustomStrValue;                                             // 0x0010   (0x0008)  
	FString                                            OwnerShow;                                                  // 0x0018   (0x0010)  
	FString                                            CasterShow;                                                 // 0x0028   (0x0010)  
	float                                              DelayTime;                                                  // 0x0038   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/SB.SBInteractionNode
/// Size: 0x0200 (512 bytes) (0x000070 - 0x000200) align n/a MaxSize: 0x0200
class USBInteractionNode : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          DefaultResult;                                              // 0x0070   (0x0020)  
	FName                                              ConditionAlias;                                             // 0x0090   (0x0008)  
	FSBInteractionNodeProperty                         MainAction;                                                 // 0x0098   (0x0040)  
	TArray<FSBInteractionNodeProperty>                 SubActions;                                                 // 0x00D8   (0x0010)  
	FString                                            OwnerShow;                                                  // 0x00E8   (0x0010)  
	FString                                            CasterShow;                                                 // 0x00F8   (0x0010)  
	TWeakObjectPtr<class USBShowData*>                 OwnerShowAsset;                                             // 0x0108   (0x0008)  
	unsigned char                                      UnknownData08_6[0x20];                                      // 0x0110   (0x0020)  MISSED
	TWeakObjectPtr<class USBShowData*>                 CasterShowAsset;                                            // 0x0130   (0x0008)  
	unsigned char                                      UnknownData09_6[0x20];                                      // 0x0138   (0x0020)  MISSED
	TWeakObjectPtr<class USBShowData*>                 CasterLoopShowAsset;                                        // 0x0158   (0x0008)  
	unsigned char                                      UnknownData10_6[0x20];                                      // 0x0160   (0x0020)  MISSED
	int32_t                                            ShowLoopCount;                                              // 0x0180   (0x0004)  
	TEnumAsByte<ESBInteractShowPlayRuleType>           ShowPlayRuleType;                                           // 0x0184   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x0185   (0x0003)  MISSED
	float                                              DelayTime;                                                  // 0x0188   (0x0004)  
	bool                                               bActorBlockAll;                                             // 0x018C   (0x0001)  
	bool                                               IgnoreEventByPlayerDead;                                    // 0x018D   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x018E   (0x0002)  MISSED
	class USoundBase*                                  Success_Sound;                                              // 0x0190   (0x0008)  
	class USoundBase*                                  Fail_Sound;                                                 // 0x0198   (0x0008)  
	TEnumAsByte<ESBInteractionMoveType>                InteractionMoveType;                                        // 0x01A0   (0x0001)  
	unsigned char                                      UnknownData13_6[0x7];                                       // 0x01A1   (0x0007)  MISSED
	FSBInteractionExecPinInfo                          Result_Fail;                                                // 0x01A8   (0x0020)  
	FName                                              ParentPinName;                                              // 0x01C8   (0x0008)  
	uint32_t                                           ParentPinIndex;                                             // 0x01D0   (0x0004)  
	unsigned char                                      UnknownData14_6[0x4];                                       // 0x01D4   (0x0004)  MISSED
	TArray<class USBInteractionNode*>                  ChildNodes;                                                 // 0x01D8   (0x0010)  
	TArray<FSBInteractionExecPinInfo>                  InputActionList;                                            // 0x01E8   (0x0010)  
	bool                                               bExitInteraction;                                           // 0x01F8   (0x0001)  
	unsigned char                                      UnknownData15_7[0x7];                                       // 0x01F9   (0x0007)  MISSED
};

/// Class /Script/SB.SBInteractionNode_ActionEnvActivate
/// Size: 0x00A0 (160 bytes) (0x000070 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBInteractionNode_ActionEnvActivate : public USBInteractionNode_Base
{ 
public:
	TEnumAsByte<ESBObjectState>                        ChangeActivate;                                             // 0x0070   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	float                                              DelayTime;                                                  // 0x0074   (0x0004)  
	TArray<FSBInteractionExecPinInfo>                  RetrunValue;                                                // 0x0078   (0x0010)  
	FSBAlias                                           RefTableAlias;                                              // 0x0088   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_ActionEnvState
/// Size: 0x00B0 (176 bytes) (0x000070 - 0x0000B0) align n/a MaxSize: 0x00B0
class USBInteractionNode_ActionEnvState : public USBInteractionNode_Base
{ 
public:
	FString                                            EnvTagName;                                                 // 0x0070   (0x0010)  
	float                                              DelayTime;                                                  // 0x0080   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	TArray<FSBInteractionExecPinInfo>                  RetrunValue;                                                // 0x0088   (0x0010)  
	FSBAlias                                           RefTableAlias;                                              // 0x0098   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_ActionPlayLevelSeq
/// Size: 0x00D0 (208 bytes) (0x000070 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBInteractionNode_ActionPlayLevelSeq : public USBInteractionNode_Base
{ 
public:
	FName                                              LevelSequenceName;                                          // 0x0070   (0x0008)  
	TWeakObjectPtr<class ULevelSequence*>              LevelSequence;                                              // 0x0078   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0080   (0x0020)  MISSED
	class UClass*                                      SequenceActorTemplate;                                      // 0x00A0   (0x0008)  
	TArray<FName>                                      AttachTagNames;                                             // 0x00A8   (0x0010)  
	float                                              DelayTime;                                                  // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00BC   (0x0004)  MISSED
	TArray<FSBInteractionExecPinInfo>                  RetrunValue;                                                // 0x00C0   (0x0010)  
};

/// Class /Script/SB.SBInteractionNode_ActionRewardGroup
/// Size: 0x00B0 (176 bytes) (0x000070 - 0x0000B0) align n/a MaxSize: 0x00B0
class USBInteractionNode_ActionRewardGroup : public USBInteractionNode_Base
{ 
public:
	float                                              DelayTime;                                                  // 0x0070   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	TArray<FSBInteractionExecPinInfo>                  RetrunValue;                                                // 0x0078   (0x0010)  
	class USBRewardGroupSpawnFormation*                RewardGroupSpawnFormation;                                  // 0x0088   (0x0008)  
	TEnumAsByte<ESBItemBucketType>                     SpawnTargetType;                                            // 0x0090   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	FSBAlias                                           RefTableAlias;                                              // 0x0094   (0x0018)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBAliasTheaterSelectData
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasTheaterSelectData : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasSpawnPoint
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasSpawnPoint : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_ActionTheater
/// Size: 0x0130 (304 bytes) (0x000070 - 0x000130) align n/a MaxSize: 0x0130
class USBInteractionNode_ActionTheater : public USBInteractionNode_Base
{ 
public:
	FSBAlias                                           RefTableAlias;                                              // 0x0070   (0x0018)  
	TWeakObjectPtr<class USBTheaterData*>              TheaterAsset;                                               // 0x0088   (0x0008)  
	unsigned char                                      UnknownData05_6[0x20];                                      // 0x0090   (0x0020)  MISSED
	TWeakObjectPtr<class ULevelSequence*>              SubtitleOnlyLevelSequence;                                  // 0x00B0   (0x0008)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x00B8   (0x0020)  MISSED
	int32_t                                            TheaterPriority;                                            // 0x00D8   (0x0004)  
	float                                              DelayTime;                                                  // 0x00DC   (0x0004)  
	bool                                               bSkipTheater;                                               // 0x00E0   (0x0001)  
	TEnumAsByte<ESBSequencePlayTransformType>          SequencePlayTransformType;                                  // 0x00E1   (0x0001)  
	TEnumAsByte<ESBSequencePlayTransformCastType>      SequencePlayTransformCastType;                              // 0x00E2   (0x0001)  
	bool                                               bCompletePendingLevelStream;                                // 0x00E3   (0x0001)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x00E4   (0x0004)  MISSED
	TArray<FSBInteractionExecPinInfo>                  RetrunValue;                                                // 0x00E8   (0x0010)  
	bool                                               bFadeInEndTheater;                                          // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x00F9   (0x0007)  MISSED
	TArray<FSBAliasTheaterSelectData>                  TheaterSelectDataList;                                      // 0x0100   (0x0010)  
	bool                                               bCheckUIDGreater;                                           // 0x0110   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              CompleteTheaterPlayDuration;                                // 0x0114   (0x0004)  
	FSBAliasSpawnPoint                                 EventSpawnAlias;                                            // 0x0118   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_ActionZoneEvent
/// Size: 0x00A0 (160 bytes) (0x000070 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBInteractionNode_ActionZoneEvent : public USBInteractionNode_Base
{ 
public:
	float                                              DelayTime;                                                  // 0x0070   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	TArray<FSBInteractionExecPinInfo>                  RetrunValue;                                                // 0x0078   (0x0010)  
	FSBAlias                                           RefTableAlias;                                              // 0x0088   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_Cancel
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align n/a MaxSize: 0x0080
class USBInteractionNode_Cancel : public USBInteractionNode_Base
{ 
public:
	TArray<FSBInteractionExecPinInfo>                  CancelExec;                                                 // 0x0070   (0x0010)  
};

/// Class /Script/SB.SBInteractionNode_ChangeStateLinkEnv
/// Size: 0x00C8 (200 bytes) (0x000070 - 0x0000C8) align n/a MaxSize: 0x00C8
class USBInteractionNode_ChangeStateLinkEnv : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	TEnumAsByte<ESBZoneEnvLinkIndex>                   LinkEnvIndex;                                               // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	FName                                              StateTagName;                                               // 0x0094   (0x0008)  
	TEnumAsByte<ESBObjectState>                        EnvObjState;                                                // 0x009C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x009D   (0x0003)  MISSED
	int32_t                                            AddProgressValue;                                           // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x00A8   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_Condition
/// Size: 0x0108 (264 bytes) (0x000070 - 0x000108) align n/a MaxSize: 0x0108
class USBInteractionNode_Condition : public USBInteractionNode_Base
{ 
public:
	FString                                            ConditionType;                                              // 0x0070   (0x0010)  
	FString                                            ConditionEq;                                                // 0x0080   (0x0010)  
	FString                                            CustomStr01;                                                // 0x0090   (0x0010)  
	FString                                            CustomStr02;                                                // 0x00A0   (0x0010)  
	FString                                            CheckStrValue;                                              // 0x00B0   (0x0010)  
	FString                                            CheckValue;                                                 // 0x00C0   (0x0010)  
	FString                                            FailNotifyMsg;                                              // 0x00D0   (0x0010)  
	TArray<FSBInteractionExecPinInfo>                  RetrunValue;                                                // 0x00E0   (0x0010)  
	FSBAlias                                           RefTableAlias;                                              // 0x00F0   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_Condition2
/// Size: 0x00D8 (216 bytes) (0x000070 - 0x0000D8) align n/a MaxSize: 0x00D8
class USBInteractionNode_Condition2 : public USBInteractionNode_Base
{ 
public:
	FName                                              Alias;                                                      // 0x0070   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0078   (0x0004)  
	TEnumAsByte<ESBConditionType>                      ConditionType;                                              // 0x007C   (0x0001)  
	TEnumAsByte<ESBEquation>                           ConditionEq;                                                // 0x007D   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x007E   (0x0002)  MISSED
	FString                                            CustomStr01;                                                // 0x0080   (0x0010)  
	FString                                            CustomStr02;                                                // 0x0090   (0x0010)  
	FString                                            CheckStrValue;                                              // 0x00A0   (0x0010)  
	int32_t                                            CheckValue;                                                 // 0x00B0   (0x0004)  
	TEnumAsByte<ESBConditionCalcuationType>            CheckStatCalcType;                                          // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x00B5   (0x0003)  MISSED
	FString                                            FailNotifyMsg;                                              // 0x00B8   (0x0010)  
	TArray<FSBInteractionExecPinInfo>                  RetrunValue;                                                // 0x00C8   (0x0010)  
};

/// Struct /Script/SB.SBAliasAchievement
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasAchievement : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_ConditionAchievement
/// Size: 0x00F8 (248 bytes) (0x000070 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBInteractionNode_ConditionAchievement : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FSBAliasAchievement                                AchievementAlias;                                           // 0x0090   (0x0018)  
	TEnumAsByte<ESBEquation>                           Equation;                                                   // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
	FSBInteractionExecPinInfo                          OutputTrueExec;                                             // 0x00B0   (0x0020)  
	FSBInteractionExecPinInfo                          OutputFalseExec;                                            // 0x00D0   (0x0020)  
	bool                                               ResultValue;                                                // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00F1   (0x0007)  MISSED
};

/// Struct /Script/SB.SBAliasEffect
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasEffect : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_ConditionActorEffect
/// Size: 0x0100 (256 bytes) (0x000070 - 0x000100) align n/a MaxSize: 0x0100
class USBInteractionNode_ConditionActorEffect : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FSBAliasEffect                                     EffectAlias;                                                // 0x0090   (0x0018)  
	bool                                               CompareAttachedEffect;                                      // 0x00A8   (0x0001)  
	TEnumAsByte<ESBZoneEventActorTarget>               TargetActorType;                                            // 0x00A9   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x00AA   (0x0002)  MISSED
	FName                                              TargetTagName;                                              // 0x00AC   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	FSBInteractionExecPinInfo                          OutputTrueExec;                                             // 0x00B8   (0x0020)  
	FSBInteractionExecPinInfo                          OutputFalseExec;                                            // 0x00D8   (0x0020)  
	bool                                               ResultValue;                                                // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00F9   (0x0007)  MISSED
};

/// Struct /Script/SB.SBAliasZoneEnvSpawn
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasZoneEnvSpawn : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasZone
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasZone : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_ConditionEnvState
/// Size: 0x0110 (272 bytes) (0x000070 - 0x000110) align n/a MaxSize: 0x0110
class USBInteractionNode_ConditionEnvState : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FSBAliasZoneEnvSpawn                               EnvSpawn;                                                   // 0x0090   (0x0018)  
	FSBAliasZone                                       ZoneAlias;                                                  // 0x00A8   (0x0018)  
	FName                                              StateName;                                                  // 0x00C0   (0x0008)  
	FSBInteractionExecPinInfo                          OutputTrueExec;                                             // 0x00C8   (0x0020)  
	FSBInteractionExecPinInfo                          OutputFalseExec;                                            // 0x00E8   (0x0020)  
	bool                                               ResultValue;                                                // 0x0108   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0109   (0x0007)  MISSED
};

/// Struct /Script/SB.SBAliasCondition
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasCondition : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasConditionGroup
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasConditionGroup : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_ConditionGroup
/// Size: 0x00E0 (224 bytes) (0x000070 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBInteractionNode_ConditionGroup : public USBInteractionNode_Base
{ 
public:
	FName                                              Alias;                                                      // 0x0070   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0078   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FSBAliasCondition>                          Conditions;                                                 // 0x0080   (0x0010)  
	TEnumAsByte<ESBEquation>                           ConditionEq;                                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	FSBAliasConditionGroup                             ConditionGroup1;                                            // 0x0094   (0x0018)  
	TEnumAsByte<ESBEquation>                           GroupEq1;                                                   // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	FSBAliasConditionGroup                             ConditionGroup2;                                            // 0x00B0   (0x0018)  
	TEnumAsByte<ESBEquation>                           GroupEq2;                                                   // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x00C9   (0x0007)  MISSED
	TArray<FSBInteractionExecPinInfo>                  RetrunValue;                                                // 0x00D0   (0x0010)  
};

/// Struct /Script/SB.SBAliasItem
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasItem : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_ConditionItem
/// Size: 0x0100 (256 bytes) (0x000070 - 0x000100) align n/a MaxSize: 0x0100
class USBInteractionNode_ConditionItem : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FSBAliasItem                                       ItemAlias;                                                  // 0x0090   (0x0018)  
	TEnumAsByte<ESBEquation>                           Equation;                                                   // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x00A9   (0x0003)  MISSED
	int32_t                                            ItemAmount;                                                 // 0x00AC   (0x0004)  
	TEnumAsByte<ESBConditionItemCheckRangeType>        CheckRange;                                                 // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x00B1   (0x0007)  MISSED
	FSBInteractionExecPinInfo                          OutputTrueExec;                                             // 0x00B8   (0x0020)  
	FSBInteractionExecPinInfo                          OutputFalseExec;                                            // 0x00D8   (0x0020)  
	bool                                               ResultValue;                                                // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00F9   (0x0007)  MISSED
};

/// Class /Script/SB.SBInteractionNode_ConditionItemCharge
/// Size: 0x00F8 (248 bytes) (0x000070 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBInteractionNode_ConditionItemCharge : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FSBAliasItem                                       ItemAlias;                                                  // 0x0090   (0x0018)  
	TEnumAsByte<ESBEquation>                           Equation;                                                   // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
	FSBInteractionExecPinInfo                          OutputTrueExec;                                             // 0x00B0   (0x0020)  
	FSBInteractionExecPinInfo                          OutputFalseExec;                                            // 0x00D0   (0x0020)  
	bool                                               ResultValue;                                                // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00F1   (0x0007)  MISSED
};

/// Class /Script/SB.SBInteractionNode_ConditionLevel
/// Size: 0x00E0 (224 bytes) (0x000070 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBInteractionNode_ConditionLevel : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	TEnumAsByte<ESBEquation>                           Equation;                                                   // 0x0090   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	int32_t                                            CompareLevel;                                               // 0x0094   (0x0004)  
	FSBInteractionExecPinInfo                          OutputTrueExec;                                             // 0x0098   (0x0020)  
	FSBInteractionExecPinInfo                          OutputFalseExec;                                            // 0x00B8   (0x0020)  
	bool                                               ResultValue;                                                // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00D9   (0x0007)  MISSED
};

/// Struct /Script/SB.SBAliasQuest
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasQuest : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_ConditionQuest
/// Size: 0x00F8 (248 bytes) (0x000070 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBInteractionNode_ConditionQuest : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FSBAliasQuest                                      QuestAlias;                                                 // 0x0090   (0x0018)  
	TEnumAsByte<ESBQuestState>                         CompareState;                                               // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
	FSBInteractionExecPinInfo                          OutputTrueExec;                                             // 0x00B0   (0x0020)  
	FSBInteractionExecPinInfo                          OutputFalseExec;                                            // 0x00D0   (0x0020)  
	bool                                               ResultValue;                                                // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00F1   (0x0007)  MISSED
};

/// Struct /Script/SB.SBAliasQuestGroupTask
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasQuestGroupTask : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_ConditionQuestTaskGroupProgress
/// Size: 0x0110 (272 bytes) (0x000070 - 0x000110) align n/a MaxSize: 0x0110
class USBInteractionNode_ConditionQuestTaskGroupProgress : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FSBAliasQuest                                      QuestAlias;                                                 // 0x0090   (0x0018)  
	FSBAliasQuestGroupTask                             QuestTaskGroupAlias;                                        // 0x00A8   (0x0018)  
	int32_t                                            CompareProgressValue;                                       // 0x00C0   (0x0004)  
	TEnumAsByte<ESBEquation>                           Equation;                                                   // 0x00C4   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00C5   (0x0003)  MISSED
	FSBInteractionExecPinInfo                          OutputTrueExec;                                             // 0x00C8   (0x0020)  
	FSBInteractionExecPinInfo                          OutputFalseExec;                                            // 0x00E8   (0x0020)  
	bool                                               ResultValue;                                                // 0x0108   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0109   (0x0007)  MISSED
};

/// Class /Script/SB.SBInteractionNode_ConditionQuestTaskProgress
/// Size: 0x0128 (296 bytes) (0x000070 - 0x000128) align n/a MaxSize: 0x0128
class USBInteractionNode_ConditionQuestTaskProgress : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FSBAliasQuest                                      QuestAlias;                                                 // 0x0090   (0x0018)  
	FSBAliasQuestGroupTask                             QuestTaskGroupAlias;                                        // 0x00A8   (0x0018)  
	FSBAliasQuestGroupTask                             QuestTaskAlias;                                             // 0x00C0   (0x0018)  
	int32_t                                            CompareProgressValue;                                       // 0x00D8   (0x0004)  
	TEnumAsByte<ESBEquation>                           Equation;                                                   // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00DD   (0x0003)  MISSED
	FSBInteractionExecPinInfo                          OutputTrueExec;                                             // 0x00E0   (0x0020)  
	FSBInteractionExecPinInfo                          OutputFalseExec;                                            // 0x0100   (0x0020)  
	bool                                               ResultValue;                                                // 0x0120   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0121   (0x0007)  MISSED
};

/// Class /Script/SB.SBInteractionNode_DebugPrintString
/// Size: 0x00B0 (176 bytes) (0x000070 - 0x0000B0) align n/a MaxSize: 0x00B0
class USBInteractionNode_DebugPrintString : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FString                                            OutputString1;                                              // 0x0090   (0x0010)  
	FString                                            OutputString2;                                              // 0x00A0   (0x0010)  
};

/// Struct /Script/SB.SBAliasNikkeStage
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasNikkeStage : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_EnterNikkeStage
/// Size: 0x00D0 (208 bytes) (0x000070 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBInteractionNode_EnterNikkeStage : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FSBAliasNikkeStage                                 NikkeStage;                                                 // 0x0090   (0x0018)  
	TEnumAsByte<ESBNikkeStageEntryType>                EntryType;                                                  // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x00B0   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_ExistClearRecordNikkeStage
/// Size: 0x00D0 (208 bytes) (0x000070 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBInteractionNode_ExistClearRecordNikkeStage : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FSBInteractionExecPinInfo                          ResultTrue;                                                 // 0x0090   (0x0020)  
	FSBInteractionExecPinInfo                          ResultFalse;                                                // 0x00B0   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_FailNotify
/// Size: 0x00E8 (232 bytes) (0x000070 - 0x0000E8) align n/a MaxSize: 0x00E8
class USBInteractionNode_FailNotify : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	TWeakObjectPtr<class USBShowData*>                 OwnerShowAsset;                                             // 0x0090   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x0098   (0x0020)  MISSED
	TWeakObjectPtr<class USBShowData*>                 CasterShowAsset;                                            // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData04_6[0x20];                                      // 0x00C0   (0x0020)  MISSED
	TEnumAsByte<ESBInteractShowPlayRuleType>           ShowPlayRuleType;                                           // 0x00E0   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00E1   (0x0007)  MISSED
};

/// Class /Script/SB.SBInteractionNode_GetCustomValue
/// Size: 0x00A8 (168 bytes) (0x000070 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBInteractionNode_GetCustomValue : public USBInteractionNode_Base
{ 
public:
	FName                                              CustomDataKey;                                              // 0x0070   (0x0008)  
	int32_t                                            CustomDataValue;                                            // 0x0078   (0x0004)  
	FSBAlias                                           RefTableAlias;                                              // 0x007C   (0x0018)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	TArray<FSBInteractionExecPinInfo>                  InputConditions;                                            // 0x0098   (0x0010)  
};

/// Class /Script/SB.SBInteractionNode_Goto
/// Size: 0x0098 (152 bytes) (0x000070 - 0x000098) align n/a MaxSize: 0x0098
class USBInteractionNode_Goto : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FName                                              TargetLabelName;                                            // 0x0090   (0x0008)  
};

/// Class /Script/SB.SBInteractionNode_GotoLabel
/// Size: 0x0098 (152 bytes) (0x000070 - 0x000098) align n/a MaxSize: 0x0098
class USBInteractionNode_GotoLabel : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0070   (0x0020)  
	FName                                              LabelName;                                                  // 0x0090   (0x0008)  
};

/// Class /Script/SB.SBInteractionNode_Grab
/// Size: 0x00B8 (184 bytes) (0x000070 - 0x0000B8) align n/a MaxSize: 0x00B8
class USBInteractionNode_Grab : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	bool                                               bActorBlockAll;                                             // 0x0090   (0x0001)  
	TEnumAsByte<ESBInteractionMoveType>                InteractionMoveType;                                        // 0x0091   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0092   (0x0006)  MISSED
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0098   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_IntCompare
/// Size: 0x0138 (312 bytes) (0x000070 - 0x000138) align n/a MaxSize: 0x0138
class USBInteractionNode_IntCompare : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FSBInteractionExecPinInfo                          CustomDataKeyA;                                             // 0x0090   (0x0020)  
	FSBInteractionExecPinInfo                          CustomDataKeyB;                                             // 0x00B0   (0x0020)  
	TEnumAsByte<ESBOperationType>                      Operation;                                                  // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00D1   (0x0007)  MISSED
	FSBInteractionExecPinInfo                          OutputTrueExec;                                             // 0x00D8   (0x0020)  
	FSBInteractionExecPinInfo                          OutputFalseExec;                                            // 0x00F8   (0x0020)  
	int32_t                                            Graph_ValueA;                                               // 0x0118   (0x0004)  
	int32_t                                            Graph_ValueB;                                               // 0x011C   (0x0004)  
	FSBAlias                                           RefTableAlias;                                              // 0x0120   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_InteractCamp
/// Size: 0x0100 (256 bytes) (0x000070 - 0x000100) align n/a MaxSize: 0x0100
class USBInteractionNode_InteractCamp : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	TEnumAsByte<ESBInteractCampType>                   InteractType;                                               // 0x0090   (0x0001)  
	bool                                               bUseSaveGame;                                               // 0x0091   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x0092   (0x0006)  MISSED
	class USBShowData*                                 OwnerShow;                                                  // 0x0098   (0x0008)  
	class USBShowData*                                 CasterShow;                                                 // 0x00A0   (0x0008)  
	TWeakObjectPtr<class USBShowData*>                 CasterLoopShowAsset;                                        // 0x00A8   (0x0008)  
	unsigned char                                      UnknownData05_6[0x20];                                      // 0x00B0   (0x0020)  MISSED
	int32_t                                            ShowLoopCount;                                              // 0x00D0   (0x0004)  
	TEnumAsByte<ESBInteractShowPlayRuleType>           ShowPlayRuleType;                                           // 0x00D4   (0x0001)  
	bool                                               bShowResetZoneUI;                                           // 0x00D5   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x00D6   (0x0002)  MISSED
	float                                              DelayTime;                                                  // 0x00D8   (0x0004)  
	bool                                               bActorBlockAll;                                             // 0x00DC   (0x0001)  
	TEnumAsByte<ESBInteractionMoveType>                InteractionMoveType;                                        // 0x00DD   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x00DE   (0x0002)  MISSED
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x00E0   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_InteractionUIData
/// Size: 0x00B0 (176 bytes) (0x000070 - 0x0000B0) align n/a MaxSize: 0x00B0
class USBInteractionNode_InteractionUIData : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	TEnumAsByte<ESBInteractionUIDataType>              InteractionUIDataType;                                      // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	FText                                              TextValue;                                                  // 0x0098   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_MessageBoxYN
/// Size: 0x00E8 (232 bytes) (0x000070 - 0x0000E8) align n/a MaxSize: 0x00E8
class USBInteractionNode_MessageBoxYN : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FText                                              MessageText;                                                // 0x0090   (0x0018)  
	FSBInteractionExecPinInfo                          Yes;                                                        // 0x00A8   (0x0020)  
	FSBInteractionExecPinInfo                          No;                                                         // 0x00C8   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_PropertyAcquireItem
/// Size: 0x00E0 (224 bytes) (0x000070 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBInteractionNode_PropertyAcquireItem : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	int32_t                                            ItemCount;                                                  // 0x0090   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	TArray<FSBInteractionExecPinInfo>                  PropertyData;                                               // 0x0098   (0x0010)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x00A8   (0x0020)  
	FSBAlias                                           RefTableAlias;                                              // 0x00C8   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_PropertyAcquireQuest
/// Size: 0x00C8 (200 bytes) (0x000070 - 0x0000C8) align n/a MaxSize: 0x00C8
class USBInteractionNode_PropertyAcquireQuest : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0090   (0x0020)  
	FSBAlias                                           RefTableAlias;                                              // 0x00B0   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_PropertyConsumeItem
/// Size: 0x00E0 (224 bytes) (0x000070 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBInteractionNode_PropertyConsumeItem : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0090   (0x0020)  
	TArray<FSBInteractionExecPinInfo>                  PropertyData;                                               // 0x00B0   (0x0010)  
	int32_t                                            ItemCount;                                                  // 0x00C0   (0x0004)  
	FSBAlias                                           RefTableAlias;                                              // 0x00C4   (0x0018)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Class /Script/SB.SBInteractionNode_PropertyDespawnItem
/// Size: 0x00E0 (224 bytes) (0x000070 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBInteractionNode_PropertyDespawnItem : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0090   (0x0020)  
	TArray<FSBInteractionExecPinInfo>                  PropertyData;                                               // 0x00B0   (0x0010)  
	int32_t                                            ItemCount;                                                  // 0x00C0   (0x0004)  
	TEnumAsByte<ESBItemBucketType>                     ItemBucketType;                                             // 0x00C4   (0x0001)  
	TEnumAsByte<ESBConditionItemCheckRangeType>        CheckRange;                                                 // 0x00C5   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x00C6   (0x0002)  MISSED
	FSBAlias                                           RefTableAlias;                                              // 0x00C8   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_PropertyRemoveItem
/// Size: 0x00E0 (224 bytes) (0x000070 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBInteractionNode_PropertyRemoveItem : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0090   (0x0020)  
	TArray<FSBInteractionExecPinInfo>                  PropertyData;                                               // 0x00B0   (0x0010)  
	int32_t                                            ItemCount;                                                  // 0x00C0   (0x0004)  
	TEnumAsByte<ESBConditionItemCheckRangeType>        CheckRange;                                                 // 0x00C4   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00C5   (0x0003)  MISSED
	FSBAlias                                           RefTableAlias;                                              // 0x00C8   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_PropertySupplyChargeItem
/// Size: 0x00E0 (224 bytes) (0x000070 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBInteractionNode_PropertySupplyChargeItem : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	bool                                               NotifyUI;                                                   // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	TArray<FSBInteractionExecPinInfo>                  PropertyData;                                               // 0x0098   (0x0010)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x00A8   (0x0020)  
	FSBAlias                                           RefTableAlias;                                              // 0x00C8   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_Puzzle
/// Size: 0x01B8 (440 bytes) (0x000070 - 0x0001B8) align n/a MaxSize: 0x01B8
class USBInteractionNode_Puzzle : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FString                                            PuzzleWidgetPath;                                           // 0x0090   (0x0010)  
	TEnumAsByte<ESBUILogicType>                        OpenUIType;                                                 // 0x00A0   (0x0001)  
	TEnumAsByte<ESBPuzzleTextType>                     PuzzleInputText;                                            // 0x00A1   (0x0001)  
	unsigned char                                      UnknownData06_6[0x6];                                       // 0x00A2   (0x0006)  MISSED
	FString                                            OwnerShow;                                                  // 0x00A8   (0x0010)  
	FString                                            CasterShow;                                                 // 0x00B8   (0x0010)  
	TWeakObjectPtr<class USBShowData*>                 OwnerShowAsset;                                             // 0x00C8   (0x0008)  
	unsigned char                                      UnknownData07_6[0x20];                                      // 0x00D0   (0x0020)  MISSED
	TWeakObjectPtr<class USBShowData*>                 CasterShowAsset;                                            // 0x00F0   (0x0008)  
	unsigned char                                      UnknownData08_6[0x20];                                      // 0x00F8   (0x0020)  MISSED
	TWeakObjectPtr<class USBShowData*>                 CasterLoopShowAsset;                                        // 0x0118   (0x0008)  
	unsigned char                                      UnknownData09_6[0x20];                                      // 0x0120   (0x0020)  MISSED
	int32_t                                            ShowLoopCount;                                              // 0x0140   (0x0004)  
	TEnumAsByte<ESBInteractShowPlayRuleType>           ShowPlayRuleType;                                           // 0x0144   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0145   (0x0003)  MISSED
	class USoundBase*                                  Success_Sound;                                              // 0x0148   (0x0008)  
	class USoundBase*                                  Fail_Sound;                                                 // 0x0150   (0x0008)  
	float                                              DelayTime;                                                  // 0x0158   (0x0004)  
	bool                                               bActorBlockAll;                                             // 0x015C   (0x0001)  
	bool                                               bCameraLock;                                                // 0x015D   (0x0001)  
	bool                                               bWaitFinsiResult;                                           // 0x015E   (0x0001)  
	bool                                               bHideGameUI;                                                // 0x015F   (0x0001)  
	TEnumAsByte<ESBInteractionMoveType>                InteractionMoveType;                                        // 0x0160   (0x0001)  
	unsigned char                                      UnknownData11_6[0x7];                                       // 0x0161   (0x0007)  MISSED
	FSBInteractionExecPinInfo                          Result_Success;                                             // 0x0168   (0x0020)  
	FSBInteractionExecPinInfo                          Result_Fail;                                                // 0x0188   (0x0020)  
	TArray<FSBInteractionExecPinInfo>                  InputConditions;                                            // 0x01A8   (0x0010)  
};

/// Struct /Script/SB.SBAliasQuestTask
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasQuestTask : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_QuestEvent
/// Size: 0x00D0 (208 bytes) (0x000070 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBInteractionNode_QuestEvent : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	TEnumAsByte<ESBInteractionQuestEventType>          QuestEventType;                                             // 0x0090   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	FSBAliasQuestTask                                  QuestTaskAlias;                                             // 0x0094   (0x0018)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x00B0   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_RandomInt
/// Size: 0x0098 (152 bytes) (0x000070 - 0x000098) align n/a MaxSize: 0x0098
class USBInteractionNode_RandomInt : public USBInteractionNode_Base
{ 
public:
	int32_t                                            MaxRange;                                                   // 0x0070   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	FSBInteractionExecPinInfo                          ResultInfo;                                                 // 0x0078   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_RequestBoardUI
/// Size: 0x00B8 (184 bytes) (0x000070 - 0x0000B8) align n/a MaxSize: 0x00B8
class USBInteractionNode_RequestBoardUI : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	float                                              DelayTime;                                                  // 0x0090   (0x0004)  
	bool                                               bActorBlockAll;                                             // 0x0094   (0x0001)  
	TEnumAsByte<ESBInteractionMoveType>                InteractionMoveType;                                        // 0x0095   (0x0001)  
	TEnumAsByte<ESBUIRequestBoardType>                 RequestBoardType;                                           // 0x0096   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0097   (0x0001)  MISSED
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0098   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_ResultSwitch
/// Size: 0x0100 (256 bytes) (0x000070 - 0x000100) align n/a MaxSize: 0x0100
class USBInteractionNode_ResultSwitch : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	TArray<FSBInteractionExecPinInfo>                  InputConditions;                                            // 0x0090   (0x0010)  
	class USoundBase*                                  Success_Sound;                                              // 0x00A0   (0x0008)  
	class USoundBase*                                  Fail_Sound;                                                 // 0x00A8   (0x0008)  
	FSBInteractionExecPinInfo                          ResultSucces;                                               // 0x00B0   (0x0020)  
	FSBInteractionExecPinInfo                          ResultFail;                                                 // 0x00D0   (0x0020)  
	TArray<FSBInteractionExecPinInfo>                  ResultValueInfo;                                            // 0x00F0   (0x0010)  
};

/// Class /Script/SB.SBInteractionNode_Root
/// Size: 0x00C0 (192 bytes) (0x000070 - 0x0000C0) align n/a MaxSize: 0x00C0
class USBInteractionNode_Root : public USBInteractionNode_Base
{ 
public:
	TArray<FSBInteractionExecPinInfo>                  RootExec;                                                   // 0x0070   (0x0010)  
	TArray<FSBInteractionExecPinInfo>                  InputConditions;                                            // 0x0080   (0x0010)  
	bool                                               bForceFoldWeapon;                                           // 0x0090   (0x0001)  
	bool                                               bOperateNonCombat;                                          // 0x0091   (0x0001)  
	bool                                               bOperateNonDialogue;                                        // 0x0092   (0x0001)  
	TEnumAsByte<ESBInteractionConditionCheckType>      ConditionCheckType;                                         // 0x0093   (0x0001)  
	TEnumAsByte<ESBInteractionHoldDurationType>        HoldDurationType;                                           // 0x0094   (0x0001)  
	TEnumAsByte<ESBInteractionOwnerRotationType>       OwnerRotationType;                                          // 0x0095   (0x0001)  
	bool                                               bUseCasterEffect;                                           // 0x0096   (0x0001)  
	bool                                               bUseCancelOutOfRange;                                       // 0x0097   (0x0001)  
	bool                                               bModeDialogue;                                              // 0x0098   (0x0001)  
	bool                                               bPauseMetaAI;                                               // 0x0099   (0x0001)  
	bool                                               bPendingHUDEvent;                                           // 0x009A   (0x0001)  
	bool                                               bStopCasterShowAtFinish;                                    // 0x009B   (0x0001)  
	bool                                               bHideInteractionUI;                                         // 0x009C   (0x0001)  
	bool                                               bBlockPhotoMode;                                            // 0x009D   (0x0001)  
	TEnumAsByte<ESBInteractionCancelFilterType>        CancelFilterType;                                           // 0x009E   (0x0001)  
	bool                                               bSaveGame;                                                  // 0x009F   (0x0001)  
	bool                                               bEndSaveGame;                                               // 0x00A0   (0x0001)  
	bool                                               bBlockEndSaveGame;                                          // 0x00A1   (0x0001)  
	TEnumAsByte<ESBPhotoModeInteractionAllowType>      PhotoModeAllowType;                                         // 0x00A2   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x00A3   (0x0001)  MISSED
	FSBAliasCondition                                  ExecCheckCondition;                                         // 0x00A4   (0x0018)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00BC   (0x0004)  MISSED
};

/// Class /Script/SB.SBInteractionNode_SaveGame
/// Size: 0x00B8 (184 bytes) (0x000070 - 0x0000B8) align n/a MaxSize: 0x00B8
class USBInteractionNode_SaveGame : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	float                                              SaveMinInterval;                                            // 0x0090   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0098   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_SelectDataSwitch
/// Size: 0x00F0 (240 bytes) (0x000070 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBInteractionNode_SelectDataSwitch : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FSBAliasTheaterSelectData                          SelectData;                                                 // 0x0090   (0x0018)  
	int32_t                                            SelectDataPriority;                                         // 0x00A8   (0x0004)  
	TEnumAsByte<ESBEquation>                           Equation;                                                   // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	FSBInteractionExecPinInfo                          ResultTrue;                                                 // 0x00B0   (0x0020)  
	FSBInteractionExecPinInfo                          ResultFalse;                                                // 0x00D0   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_SetCustomValue
/// Size: 0x00F8 (248 bytes) (0x000070 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBInteractionNode_SetCustomValue : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FName                                              CustomDataKey;                                              // 0x0090   (0x0008)  
	int32_t                                            CustomDataValue;                                            // 0x0098   (0x0004)  
	TEnumAsByte<ESBInteractionValueApplyType>          ValueApplyType;                                             // 0x009C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x009D   (0x0003)  MISSED
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x00A0   (0x0020)  
	FSBInteractionExecPinInfo                          InputCustomValueInfo;                                       // 0x00C0   (0x0020)  
	FSBAlias                                           RefTableAlias;                                              // 0x00E0   (0x0018)  
};

/// Struct /Script/SB.SBAliasUIActionRequest
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasUIActionRequest : FSBAlias
{ 
};

/// Class /Script/SB.SBInteractionNode_ShopUI
/// Size: 0x00F8 (248 bytes) (0x000070 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBInteractionNode_ShopUI : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FString                                            ShopName;                                                   // 0x0090   (0x0010)  
	FString                                            ShopTitleTag;                                               // 0x00A0   (0x0010)  
	float                                              DelayTime;                                                  // 0x00B0   (0x0004)  
	bool                                               bActorBlockAll;                                             // 0x00B4   (0x0001)  
	TEnumAsByte<ESBInteractionMoveType>                InteractionMoveType;                                        // 0x00B5   (0x0001)  
	TEnumAsByte<ESBInteractionTargetShopData>          TargetShopDataType;                                         // 0x00B6   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x00B7   (0x0001)  MISSED
	int32_t                                            TargetShopIndex;                                            // 0x00B8   (0x0004)  
	bool                                               bStopTheater;                                               // 0x00BC   (0x0001)  
	bool                                               bUseCloseFadeScreen;                                        // 0x00BD   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x00BE   (0x0002)  MISSED
	FSBAliasUIActionRequest                            UIActionRequestGroup;                                       // 0x00C0   (0x0018)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x00D8   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_Switch
/// Size: 0x00D0 (208 bytes) (0x000070 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBInteractionNode_Switch : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	TArray<FSBInteractionExecPinInfo>                  InputConditions;                                            // 0x0090   (0x0010)  
	TArray<FSBInteractionExecPinInfo>                  OutputExecConnection;                                       // 0x00A0   (0x0010)  
	FSBInteractionExecPinInfo                          DefaultResult;                                              // 0x00B0   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_SwitchOnInt
/// Size: 0x00E0 (224 bytes) (0x000070 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBInteractionNode_SwitchOnInt : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FSBInteractionExecPinInfo                          InputIntValue;                                              // 0x0090   (0x0020)  
	TArray<FSBInteractionExecPinInfo>                  OutputExecConnection;                                       // 0x00B0   (0x0010)  
	FSBInteractionExecPinInfo                          DefaultResult;                                              // 0x00C0   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_TemplateEnd
/// Size: 0x0098 (152 bytes) (0x000070 - 0x000098) align n/a MaxSize: 0x0098
class USBInteractionNode_TemplateEnd : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0070   (0x0020)  
	FName                                              TemplateName;                                               // 0x0090   (0x0008)  
};

/// Class /Script/SB.SBInteractionNode_TemplateInst
/// Size: 0x00B8 (184 bytes) (0x000070 - 0x0000B8) align n/a MaxSize: 0x00B8
class USBInteractionNode_TemplateInst : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          InputExec;                                                  // 0x0070   (0x0020)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0090   (0x0020)  
	FName                                              TemplateName;                                               // 0x00B0   (0x0008)  
};

/// Class /Script/SB.SBInteractionNode_TemplateStart
/// Size: 0x0098 (152 bytes) (0x000070 - 0x000098) align n/a MaxSize: 0x0098
class USBInteractionNode_TemplateStart : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0070   (0x0020)  
	FName                                              TemplateName;                                               // 0x0090   (0x0008)  
};

/// Class /Script/SB.SBInteractionNode_TheaterChoiceCondition
/// Size: 0x0128 (296 bytes) (0x000070 - 0x000128) align n/a MaxSize: 0x0128
class USBInteractionNode_TheaterChoiceCondition : public USBInteractionNode_Base
{ 
public:
	FSBAliasCondition                                  RefConditionAlias;                                          // 0x0070   (0x0018)  
	TEnumAsByte<ESBConditionType>                      ConditionType;                                              // 0x0088   (0x0001)  
	TEnumAsByte<ESBEquation>                           ConditionEq;                                                // 0x0089   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x008A   (0x0002)  MISSED
	FName                                              ConditionAlias;                                             // 0x008C   (0x0008)  
	uint32_t                                           ConditionId;                                                // 0x0094   (0x0004)  
	FSBAlias                                           CustomStr01;                                                // 0x0098   (0x0018)  
	FSBAlias                                           CustomStr02;                                                // 0x00B0   (0x0018)  
	FSBAlias                                           CustomStr03;                                                // 0x00C8   (0x0018)  
	FSBAlias                                           CheckStrValue;                                              // 0x00E0   (0x0018)  
	int32_t                                            CheckValue;                                                 // 0x00F8   (0x0004)  
	TEnumAsByte<ESBConditionCalcuationType>            CheckStatCalcType;                                          // 0x00FC   (0x0001)  
	TEnumAsByte<ESBZoneEventActorTarget>               ActorTargetType;                                            // 0x00FD   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x00FE   (0x0002)  MISSED
	FString                                            Description;                                                // 0x0100   (0x0010)  
	FString                                            FailNotifyMsg;                                              // 0x0110   (0x0010)  
	bool                                               ResultValue;                                                // 0x0120   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0121   (0x0007)  MISSED
};

/// Class /Script/SB.SBInteractionNode_TheaterChoiceData
/// Size: 0x0150 (336 bytes) (0x000070 - 0x000150) align n/a MaxSize: 0x0150
class USBInteractionNode_TheaterChoiceData : public USBInteractionNode_Base
{ 
public:
	TArray<FName>                                      SelectConditions;                                           // 0x0070   (0x0010)  
	FSBAliasConditionGroup                             ConditionGroup;                                             // 0x0080   (0x0018)  
	TEnumAsByte<ESBConditionResultVisibleType>         TextVisibleType;                                            // 0x0098   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	FText                                              DisplayText;                                                // 0x00A0   (0x0018)  
	FName                                              NextTask;                                                   // 0x00B8   (0x0008)  
	FName                                              InteractionGraphExec;                                       // 0x00C0   (0x0008)  
	int32_t                                            SelectDataPriority;                                         // 0x00C8   (0x0004)  
	bool                                               bForceLock;                                                 // 0x00CC   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x00CD   (0x0003)  MISSED
	FText                                              SelectedMessagePopupText;                                   // 0x00D0   (0x0018)  
	bool                                               bDisableRelevantDot;                                        // 0x00E8   (0x0001)  
	bool                                               bUseInputCancel;                                            // 0x00E9   (0x0001)  
	unsigned char                                      UnknownData07_6[0x6];                                       // 0x00EA   (0x0006)  MISSED
	FSBInteractionExecPinInfo                          Output;                                                     // 0x00F0   (0x0020)  
	TEnumAsByte<ESBQuestSymbolUIType>                  QuestSymbolType;                                            // 0x0110   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x0111   (0x0007)  MISSED
	TArray<FSBAliasConditionGroup>                     QuestSymbol_VisibilityConditionGorup;                       // 0x0118   (0x0010)  
	FName                                              LinkToSelectDataName;                                       // 0x0128   (0x0008)  
	TEnumAsByte<ESBTheaterInteractionDesignType>       DesignType;                                                 // 0x0130   (0x0001)  
	unsigned char                                      UnknownData09_6[0x7];                                       // 0x0131   (0x0007)  MISSED
	FText                                              TitleMessageText;                                           // 0x0138   (0x0018)  
};

/// Class /Script/SB.SBInteractionNode_TheaterInteractionSelectData
/// Size: 0x00B8 (184 bytes) (0x000070 - 0x0000B8) align n/a MaxSize: 0x00B8
class USBInteractionNode_TheaterInteractionSelectData : public USBInteractionNode_Base
{ 
public:
	FName                                              SelectDataName;                                             // 0x0070   (0x0008)  
	bool                                               bUseInputCancel;                                            // 0x0078   (0x0001)  
	TEnumAsByte<ESBTheaterInteractionDesignType>       DesignType;                                                 // 0x0079   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x007A   (0x0006)  MISSED
	FText                                              TitleMessageText;                                           // 0x0080   (0x0018)  
	FString                                            Description;                                                // 0x0098   (0x0010)  
	TArray<FSBInteractionExecPinInfo>                  InputChoiceDataList;                                        // 0x00A8   (0x0010)  
};

/// Class /Script/SB.SBInteractionNode_Tick
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align n/a MaxSize: 0x0080
class USBInteractionNode_Tick : public USBInteractionNode_Base
{ 
public:
	TArray<FSBInteractionExecPinInfo>                  Exec;                                                       // 0x0070   (0x0010)  
};

/// Class /Script/SB.SBInteractionNode_UI
/// Size: 0x0120 (288 bytes) (0x000070 - 0x000120) align n/a MaxSize: 0x0120
class USBInteractionNode_UI : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	TEnumAsByte<ESBUIGameMenuType>                     OpenUIType;                                                 // 0x0090   (0x0001)  
	TEnumAsByte<ESBUILogicType>                        OpenUILogicType;                                            // 0x0091   (0x0001)  
	unsigned char                                      UnknownData05_6[0x6];                                       // 0x0092   (0x0006)  MISSED
	class USBShowData*                                 OwnerShow;                                                  // 0x0098   (0x0008)  
	class USBShowData*                                 CasterShow;                                                 // 0x00A0   (0x0008)  
	TWeakObjectPtr<class USBShowData*>                 CasterLoopShowAsset;                                        // 0x00A8   (0x0008)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x00B0   (0x0020)  MISSED
	int32_t                                            ShowLoopCount;                                              // 0x00D0   (0x0004)  
	TEnumAsByte<ESBInteractShowPlayRuleType>           ShowPlayRuleType;                                           // 0x00D4   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x00D5   (0x0003)  MISSED
	float                                              DelayTime;                                                  // 0x00D8   (0x0004)  
	bool                                               bActorBlockAll;                                             // 0x00DC   (0x0001)  
	bool                                               bOpenAllMenu;                                               // 0x00DD   (0x0001)  
	TEnumAsByte<ESBInteractionMoveType>                InteractionMoveType;                                        // 0x00DE   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x00DF   (0x0001)  MISSED
	FSBAliasUIActionRequest                            UIActionRequestGroup;                                       // 0x00E0   (0x0018)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x00F8   (0x0020)  
	bool                                               bAllowPresentation;                                         // 0x0118   (0x0001)  
	unsigned char                                      UnknownData09_7[0x7];                                       // 0x0119   (0x0007)  MISSED
};

/// Class /Script/SB.SBInteractionNode_UISystemNotice
/// Size: 0x00C8 (200 bytes) (0x000070 - 0x0000C8) align n/a MaxSize: 0x00C8
class USBInteractionNode_UISystemNotice : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	FText                                              MessageText;                                                // 0x0090   (0x0018)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x00A8   (0x0020)  
};

/// Class /Script/SB.SBInteractionNode_WorkShopUI
/// Size: 0x0130 (304 bytes) (0x000070 - 0x000130) align n/a MaxSize: 0x0130
class USBInteractionNode_WorkShopUI : public USBInteractionNode_Base
{ 
public:
	FSBInteractionExecPinInfo                          ExecInput;                                                  // 0x0070   (0x0020)  
	TEnumAsByte<ESBUIWorkShopType>                     OpenUIType;                                                 // 0x0090   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	class USBShowData*                                 OwnerShow;                                                  // 0x0098   (0x0008)  
	class USBShowData*                                 CasterShow;                                                 // 0x00A0   (0x0008)  
	TWeakObjectPtr<class USBShowData*>                 CasterLoopShowAsset;                                        // 0x00A8   (0x0008)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x00B0   (0x0020)  MISSED
	int32_t                                            ShowLoopCount;                                              // 0x00D0   (0x0004)  
	TEnumAsByte<ESBInteractShowPlayRuleType>           ShowPlayRuleType;                                           // 0x00D4   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x00D5   (0x0003)  MISSED
	float                                              DelayTime;                                                  // 0x00D8   (0x0004)  
	bool                                               bActorBlockAll;                                             // 0x00DC   (0x0001)  
	TEnumAsByte<ESBInteractionMoveType>                InteractionMoveType;                                        // 0x00DD   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x00DE   (0x0002)  MISSED
	FString                                            ShopName;                                                   // 0x00E0   (0x0010)  
	TEnumAsByte<ESBInteractionTargetShopData>          TargetShopDataType;                                         // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x00F1   (0x0003)  MISSED
	int32_t                                            TargetShopIndex;                                            // 0x00F4   (0x0004)  
	FSBAliasUIActionRequest                            UIActionRequestGroup;                                       // 0x00F8   (0x0018)  
	FSBInteractionExecPinInfo                          OutputExec;                                                 // 0x0110   (0x0020)  
};

/// Class /Script/SB.SBItem
/// Size: 0x04B0 (1200 bytes) (0x0002C8 - 0x0004B0) align n/a MaxSize: 0x04B0
class ASBItem : public AActor
{ 
public:
	unsigned char                                      UnknownData14_8[0x38];                                      // 0x02C8   (0x0038)  MISSED
	bool                                               RequireSpawnCheckLocation;                                  // 0x0300   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0301   (0x0003)  MISSED
	float                                              SpawnCheckRadius;                                           // 0x0304   (0x0004)  
	float                                              SpawnCheckHeight;                                           // 0x0308   (0x0004)  
	float                                              SpawnCheckStartDist;                                        // 0x030C   (0x0004)  
	float                                              SpawnCheckEndDist;                                          // 0x0310   (0x0004)  
	FVector                                            SpawnOffset;                                                // 0x0314   (0x000C)  
	bool                                               AlwaysInteractionAllow;                                     // 0x0320   (0x0001)  
	bool                                               InteractionAutoXYOnlyCheck;                                 // 0x0321   (0x0001)  
	unsigned char                                      UnknownData16_6[0x6];                                       // 0x0322   (0x0006)  MISSED
	class USBShowData*                                 ShowSpawn;                                                  // 0x0328   (0x0008)  
	class USBShowData*                                 ShowInteraction;                                            // 0x0330   (0x0008)  
	bool                                               bForceActivePhysics;                                        // 0x0338   (0x0001)  
	bool                                               bUsePooling;                                                // 0x0339   (0x0001)  
	bool                                               bUseRequirePhysics;                                         // 0x033A   (0x0001)  
	unsigned char                                      UnknownData17_6[0x1];                                       // 0x033B   (0x0001)  MISSED
	uint32_t                                           BucketGuid;                                                 // 0x033C   (0x0004)  
	FGuid                                              PocketGuid;                                                 // 0x0340   (0x0010)  
	float                                              InteractionDelayTime;                                       // 0x0350   (0x0004)  
	unsigned char                                      UnknownData18_6[0x4];                                       // 0x0354   (0x0004)  MISSED
	TArray<FName>                                      Arguemnts;                                                  // 0x0358   (0x0010)  
	bool                                               bFinishSimulatePhysics;                                     // 0x0368   (0x0001)  
	bool                                               bExistFloor;                                                // 0x0369   (0x0001)  
	unsigned char                                      UnknownData19_6[0x2];                                       // 0x036A   (0x0002)  MISSED
	FVector                                            LastExistFloorHitLocation;                                  // 0x036C   (0x000C)  
	FVector                                            TargetLocation;                                             // 0x0378   (0x000C)  
	float                                              RemainSpawnTime;                                            // 0x0384   (0x0004)  
	bool                                               bUseSpawnShow;                                              // 0x0388   (0x0001)  
	bool                                               bActionSpawn;                                               // 0x0389   (0x0001)  
	unsigned char                                      UnknownData20_6[0x6];                                       // 0x038A   (0x0006)  MISSED
	TArray<FName>                                      ActorActiveVolumeNameArray;                                 // 0x0390   (0x0010)  
	bool                                               bActiveItem;                                                // 0x03A0   (0x0001)  
	bool                                               bIgnoreHiddenInGame;                                        // 0x03A1   (0x0001)  
	unsigned char                                      UnknownData21_6[0x2];                                       // 0x03A2   (0x0002)  MISSED
	FName                                              FloorLevelName;                                             // 0x03A4   (0x0008)  
	unsigned char                                      UnknownData22_6[0x74];                                      // 0x03AC   (0x0074)  MISSED
	float                                              ShowInteractionRemainTime;                                  // 0x0420   (0x0004)  
	FVector                                            SpawnLocation;                                              // 0x0424   (0x000C)  
	FRotator                                           SpawnRotation;                                              // 0x0430   (0x000C)  
	unsigned char                                      UnknownData23_6[0x4];                                       // 0x043C   (0x0004)  MISSED
	FString                                            ResourcePath;                                               // 0x0440   (0x0010)  
	bool                                               bGainSimulateForceStop;                                     // 0x0450   (0x0001)  
	bool                                               bActionSimulateForceStop;                                   // 0x0451   (0x0001)  
	unsigned char                                      UnknownData24_6[0x2];                                       // 0x0452   (0x0002)  MISSED
	float                                              AutoGainRemainTime;                                         // 0x0454   (0x0004)  
	bool                                               bUIMode;                                                    // 0x0458   (0x0001)  
	unsigned char                                      UnknownData25_6[0x3];                                       // 0x0459   (0x0003)  MISSED
	FVector                                            LastLocation;                                               // 0x045C   (0x000C)  
	float                                              RemainCheckFinishSimulate;                                  // 0x0468   (0x0004)  
	bool                                               bIgnoreFinishSimulatePhysics;                               // 0x046C   (0x0001)  
	unsigned char                                      UnknownData26_6[0x13];                                      // 0x046D   (0x0013)  MISSED
	TArray<class UPrimitiveComponent*>                 PrimitiveComps;                                             // 0x0480   (0x0010)  
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                           // 0x0490   (0x0008)  
	class UStaticMeshComponent*                        StaticMeshComp;                                             // 0x0498   (0x0008)  
	FVector                                            CachedActorBoundExtents;                                    // 0x04A0   (0x000C)  
	unsigned char                                      UnknownData27_7[0x4];                                       // 0x04AC   (0x0004)  MISSED

	/// Functions
	// Function /Script/SB.SBItem.GetInteractionDelayTime
	constexpr static const FunctionPointer<ASBItem, float> GetInteractionDelayTime = { 0x27666e0, 0 }; 
	// Function /Script/SB.SBItem.EventUIModeChange
	constexpr static const FunctionPointer<ASBItem, void, const bool> EventUIModeChange = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBItem.EventInitItem
	constexpr static const FunctionPointer<ASBItem, void> EventInitItem = { 0x2bbb090, 2 }; 
};

/// Class /Script/SB.SBItemAssetData
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align n/a MaxSize: 0x0060
class USBItemAssetData : public UDataAsset
{ 
public:
	uint32_t                                           Version;                                                    // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	class USBShowData*                                 SpawnCommon;                                                // 0x0038   (0x0008)  
	class USBShowData*                                 SpawnUncommon;                                              // 0x0040   (0x0008)  
	class USBShowData*                                 SpawnRare;                                                  // 0x0048   (0x0008)  
	class USBShowData*                                 SpawnEpic;                                                  // 0x0050   (0x0008)  
	class USBShowData*                                 SpawnLegendary;                                             // 0x0058   (0x0008)  
};

/// Class /Script/SB.SBLaserUserData
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class USBLaserUserData : public UAssetUserData
{ 
public:
	bool                                               bBounce;                                                    // 0x0028   (0x0001)  
	TEnumAsByte<ESBLaserBounceType>                    BounceType;                                                 // 0x0029   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	float                                              FixDirectionPitch;                                          // 0x002C   (0x0004)  
	float                                              FixDirectionYaw;                                            // 0x0030   (0x0004)  
	float                                              FixDirectionRoll;                                           // 0x0034   (0x0004)  
};

/// Struct /Script/SB.SBLaserSegment
/// Size: 0x0440 (1088 bytes) (0x000000 - 0x000440) align n/a MaxSize: 0x0440
struct FSBLaserSegment
{ 
	FVector                                            StartPosition;                                              // 0x0000   (0x000C)  
	FVector                                            EndPosition;                                                // 0x000C   (0x000C)  
	class UNiagaraComponent*                           BeamNiagaraComponent;                                       // 0x0018   (0x0008)  
	bool                                               bDisable;                                                   // 0x0020   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	FGuid                                              SoundGUID;                                                  // 0x0024   (0x0010)  
	FGuid                                              HitSoundGUID;                                               // 0x0034   (0x0010)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	FSoundAttenuationSettings                          SoundAttenuation;                                           // 0x0048   (0x03A0)  
	TWeakObjectPtr<class AActor*>                      HitActor;                                                   // 0x03E8   (0x0008)  
	unsigned char                                      UnknownData05_7[0x50];                                      // 0x03F0   (0x0050)  MISSED
};

/// Class /Script/SB.SBLaserComponent
/// Size: 0x0450 (1104 bytes) (0x000260 - 0x000450) align n/a MaxSize: 0x0450
class USBLaserComponent : public USceneComponent
{ 
public:
	FMulticastSparseDelegate                           OnHitTarget;                                                // 0x0260   (0x0001)  
	FMulticastSparseDelegate                           OnEventBeam;                                                // 0x0261   (0x0001)  
	FMulticastSparseDelegate                           OnEventChangeActiveLaser;                                   // 0x0262   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x0263   (0x0001)  MISSED
	FName                                              GroupName;                                                  // 0x0264   (0x0008)  
	FName                                              OverrideUniqueName;                                         // 0x026C   (0x0008)  
	FName                                              ZoneEventActorTriggerTag;                                   // 0x0274   (0x0008)  
	float                                              MaxActiveDistance;                                          // 0x027C   (0x0004)  
	float                                              OverrideSignificanceManagerDistance;                        // 0x0280   (0x0004)  
	int32_t                                            TickSkipFrame;                                              // 0x0284   (0x0004)  
	float                                              DisableTickByLastRenderTimeOnScreen;                        // 0x0288   (0x0004)  
	float                                              CheckDistanceToTarget;                                      // 0x028C   (0x0004)  
	bool                                               bHitToCharacter;                                            // 0x0290   (0x0001)  
	bool                                               bPlayerCharacterOnly;                                       // 0x0291   (0x0001)  
	bool                                               bBlockingLaserHitCharacter;                                 // 0x0292   (0x0001)  
	bool                                               bZoneEventActorDestruction;                                 // 0x0293   (0x0001)  
	bool                                               bIgnoreNoDamageState;                                       // 0x0294   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0295   (0x0003)  MISSED
	class USoundBase*                                  HitSound;                                                   // 0x0298   (0x0008)  
	class USoundAttenuation*                           HitSoundAttenuation;                                        // 0x02A0   (0x0008)  
	class USoundBase*                                  LaserSound;                                                 // 0x02A8   (0x0008)  
	class USoundAttenuation*                           LaserSoundAttenuation;                                      // 0x02B0   (0x0008)  
	class USoundBase*                                  OnSound;                                                    // 0x02B8   (0x0008)  
	class USoundAttenuation*                           OnSoundAttenuation;                                         // 0x02C0   (0x0008)  
	class USoundBase*                                  OffSound;                                                   // 0x02C8   (0x0008)  
	class USoundAttenuation*                           OffSoundAttenuation;                                        // 0x02D0   (0x0008)  
	bool                                               bRegisterdTick;                                             // 0x02D8   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x02D9   (0x0003)  MISSED
	float                                              MaxLaserLength;                                             // 0x02DC   (0x0004)  
	int32_t                                            MaxBounces;                                                 // 0x02E0   (0x0004)  
	float                                              HitInterval;                                                // 0x02E4   (0x0004)  
	bool                                               bActiveOnceHit;                                             // 0x02E8   (0x0001)  
	bool                                               bActiveLaser;                                               // 0x02E9   (0x0001)  
	unsigned char                                      UnknownData11_6[0x6];                                       // 0x02EA   (0x0006)  MISSED
	class UNiagaraSystem*                              BeamNiagaraSystem;                                          // 0x02F0   (0x0008)  
	FSBTableAliasName                                  HitEffectAlias;                                             // 0x02F8   (0x000C)  
	FSBTableAliasName                                  ZoneEventAliasWhenHit;                                      // 0x0304   (0x000C)  
	bool                                               bUseStoryMode;                                              // 0x0310   (0x0001)  
	unsigned char                                      UnknownData12_6[0x7];                                       // 0x0311   (0x0007)  MISSED
	class UNiagaraSystem*                              StoryMode_BeamNiagaraSystem;                                // 0x0318   (0x0008)  
	FSBTableAliasName                                  StoryMode_HitEffectAlias;                                   // 0x0320   (0x000C)  
	FSBTableAliasName                                  StoryMode_ZoneEventAliasWhenHit;                            // 0x032C   (0x000C)  
	int32_t                                            CurrentTickSkipFrame;                                       // 0x0338   (0x0004)  
	bool                                               bLastFrameSkip;                                             // 0x033C   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x033D   (0x0003)  MISSED
	int32_t                                            AsyncTraceIndex;                                            // 0x0340   (0x0004)  
	bool                                               bStoryMode;                                                 // 0x0344   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0345   (0x0003)  MISSED
	TArray<FSBLaserSegment>                            LaserSegmentArray;                                          // 0x0348   (0x0010)  
	unsigned char                                      UnknownData15_7[0xF8];                                      // 0x0358   (0x00F8)  MISSED

	/// Functions
	// Function /Script/SB.SBLaserComponent.IsActiveLaser
	constexpr static const FunctionPointer<USBLaserComponent, bool> IsActiveLaser = { 0x27676c0, 0 }; 
};

/// Class /Script/SB.SBLevelEditorGraph
/// Size: 0x0060 (96 bytes) (0x000060 - 0x000060) align n/a MaxSize: 0x0060
class USBLevelEditorGraph : public UEdGraph
{ 
public:
};

/// Class /Script/SB.SBLevelLoadVolume
/// Size: 0x0390 (912 bytes) (0x000318 - 0x000390) align n/a MaxSize: 0x0390
class ASBLevelLoadVolume : public AVolume
{ 
public:
	TArray<FName>                                      Levels;                                                     // 0x0318   (0x0010)  
	TSet<AActor*>                                      OverlapActors;                                              // 0x0328   (0x0050)  
	FVector                                            LevelObjOrigin;                                             // 0x0378   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0384   (0x000C)  
};

/// Class /Script/SB.SBLevelSequenceActor
/// Size: 0x03D8 (984 bytes) (0x0003A8 - 0x0003D8) align n/a MaxSize: 0x03D8
class ASBLevelSequenceActor : public ALevelSequenceActor
{ 
public:
	unsigned char                                      UnknownData01_1[0x30];                                      // 0x03A8   (0x0030)  MISSED

	/// Functions
	// Function /Script/SB.SBLevelSequenceActor.OnStopEvent
	constexpr static const FunctionPointer<ASBLevelSequenceActor, void> OnStopEvent = { 0x27683e0, 0 }; 
	// Function /Script/SB.SBLevelSequenceActor.OnFinishedEvent
	constexpr static const FunctionPointer<ASBLevelSequenceActor, void> OnFinishedEvent = { 0x27683e0, 1 }; 
};

/// Struct /Script/SB.SBLevelSequenceAnimTrailSectionData
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBLevelSequenceAnimTrailSectionData
{ 
	class UParticleSystem*                             PSTemplate;                                                 // 0x0000   (0x0008)  
	FName                                              FirstSocketName;                                            // 0x0008   (0x0008)  
	FName                                              SecondSocketName;                                           // 0x0010   (0x0008)  
	TArray<FName>                                      MoreSocketNames;                                            // 0x0018   (0x0010)  
	TEnumAsByte<ETrailWidthMode>                       WidthScaleMode;                                             // 0x0028   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	FName                                              WidthScaleCurve;                                            // 0x002C   (0x0008)  
	bool                                               bAutoDeactiveAnimChanged;                                   // 0x0034   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0035   (0x0003)  MISSED
};

/// Class /Script/SB.SBLevelSequenceAnimTrailSection
/// Size: 0x0120 (288 bytes) (0x0000E8 - 0x000120) align n/a MaxSize: 0x0120
class USBLevelSequenceAnimTrailSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceAnimTrailSectionData               Data;                                                       // 0x00E8   (0x0038)  
};

/// Class /Script/SB.SBLevelSequenceAnimTrailTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class USBLevelSequenceAnimTrailTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0091   (0x0007)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceBKMovieSectionData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceBKMovieSectionData
{ 
	FString                                            BKAssetPath;                                                // 0x0000   (0x0010)  
	FString                                            BKAssetPath_Low;                                            // 0x0010   (0x0010)  
	float                                              FadeInTime;                                                 // 0x0020   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0024   (0x0004)  
};

/// Class /Script/SB.SBLevelSequenceBKMovieSection
/// Size: 0x0110 (272 bytes) (0x0000E8 - 0x000110) align n/a MaxSize: 0x0110
class USBLevelSequenceBKMovieSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceBKMovieSectionData                 Data;                                                       // 0x00E8   (0x0028)  
};

/// Struct /Script/SB.SBLevelSequenceBookmarkSectionData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBLevelSequenceBookmarkSectionData
{ 
	FName                                              BookmarkName;                                               // 0x0000   (0x0008)  
	bool                                               EndTimeStopSequencer;                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	uint32_t                                           EndTimeTheaterNextTakeIndex;                                // 0x000C   (0x0004)  
};

/// Class /Script/SB.SBLevelSequenceBookmarkSection
/// Size: 0x00F8 (248 bytes) (0x0000E8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBLevelSequenceBookmarkSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceBookmarkSectionData                Data;                                                       // 0x00E8   (0x0010)  
};

/// Class /Script/SB.SBLevelSequenceBookmarkTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class USBLevelSequenceBookmarkTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceCameraActorBoundsSectionData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceCameraActorBoundsSectionData
{ 
	TArray<FMovieSceneObjectBindingID>                 ActorBindingArray;                                          // 0x0000   (0x0010)  
	class USBCineCameraActorBoundsBoneTemplateData*    ActorBoneTemplateData;                                      // 0x0010   (0x0008)  
	TArray<FSBCineCameraActorBoundsBoneData>           ActorBoneNameArray;                                         // 0x0018   (0x0010)  
	int32_t                                            TrackingUpdateCount;                                        // 0x0028   (0x0004)  
	bool                                               bEveryTracking;                                             // 0x002C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x002D   (0x0003)  MISSED
};

/// Class /Script/SB.SBLevelSequenceCameraActorBoundsSection
/// Size: 0x0118 (280 bytes) (0x0000E8 - 0x000118) align n/a MaxSize: 0x0118
class USBLevelSequenceCameraActorBoundsSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceCameraActorBoundsSectionData       Data;                                                       // 0x00E8   (0x0030)  
};

/// Struct /Script/SB.SBLevelSequenceCameraActorBoundsTemplateSectionData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBLevelSequenceCameraActorBoundsTemplateSectionData
{ 
	class USBCineCameraActorBoundsBoneTemplateData*    ActorBoneTemplateData;                                      // 0x0000   (0x0008)  
};

/// Class /Script/SB.SBLevelSequenceCameraActorBoundsTemplateSection
/// Size: 0x00F0 (240 bytes) (0x0000E8 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBLevelSequenceCameraActorBoundsTemplateSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceCameraActorBoundsTemplateSectionData Data;                                                     // 0x00E8   (0x0008)  
};

/// Class /Script/SB.SBLevelSequenceCameraActorBoundsTemplateTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class USBLevelSequenceCameraActorBoundsTemplateTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0091   (0x0007)  MISSED
};

/// Class /Script/SB.SBLevelSequenceCameraActorBoundsTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class USBLevelSequenceCameraActorBoundsTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0091   (0x0007)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceCameraLookAtTargetSectionData
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align n/a MaxSize: 0x0034
struct FSBLevelSequenceCameraLookAtTargetSectionData
{ 
	FMovieSceneObjectBindingID                         SourceBinding;                                              // 0x0000   (0x0018)  
	FMovieSceneObjectBindingID                         TargetBinding;                                              // 0x0018   (0x0018)  
	bool                                               bEveryTrackingSource;                                       // 0x0030   (0x0001)  
	bool                                               bEveryTrackingTarget;                                       // 0x0031   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0032   (0x0002)  MISSED
};

/// Class /Script/SB.SBLevelSequenceCameraLookAtTargetSection
/// Size: 0x0120 (288 bytes) (0x0000E8 - 0x000120) align n/a MaxSize: 0x0120
class USBLevelSequenceCameraLookAtTargetSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceCameraLookAtTargetSectionData      Data;                                                       // 0x00E8   (0x0034)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x011C   (0x0004)  MISSED
};

/// Class /Script/SB.SBLevelSequenceCameraLookAtTargetTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class USBLevelSequenceCameraLookAtTargetTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0091   (0x0007)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceCharacterActionSectionData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceCharacterActionSectionData
{ 
	TEnumAsByte<ESBLevelSequenceCharacterActionType>   ActionType;                                                 // 0x0000   (0x0001)  
	bool                                               bEveryUpdate;                                               // 0x0001   (0x0001)  
	bool                                               bUsePlayableLevelSeq;                                       // 0x0002   (0x0001)  
	bool                                               bPlayableLevelSeqValue;                                     // 0x0003   (0x0001)  
	bool                                               bUseChangeMovement;                                         // 0x0004   (0x0001)  
	TEnumAsByte<EMovementMode>                         ChangeMovement;                                             // 0x0005   (0x0001)  
	bool                                               bUseSetDisableRootClothCollision;                           // 0x0006   (0x0001)  
	bool                                               bDisableRootClothCollision;                                 // 0x0007   (0x0001)  
	bool                                               bUseLockCharacterHiddenInGame;                              // 0x0008   (0x0001)  
	bool                                               bLockCharacterHiddenInGame;                                 // 0x0009   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              ValidLandingLocationZOffset;                                // 0x000C   (0x0004)  
	bool                                               bUseValidLandgMovement;                                     // 0x0010   (0x0001)  
	TEnumAsByte<EMovementMode>                         ValidLandingMovement;                                       // 0x0011   (0x0001)  
	bool                                               bUseFinishMovement;                                         // 0x0012   (0x0001)  
	TEnumAsByte<EMovementMode>                         FinishMovement;                                             // 0x0013   (0x0001)  
	bool                                               bUseFinishStopActiveMovement;                               // 0x0014   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              NotifyShowEventTagName;                                     // 0x0018   (0x0008)  
	FName                                              NotifyShowCustomNameValue;                                  // 0x0020   (0x0008)  
};

/// Class /Script/SB.SBLevelSequenceCharacterActionSection
/// Size: 0x0110 (272 bytes) (0x0000E8 - 0x000110) align n/a MaxSize: 0x0110
class USBLevelSequenceCharacterActionSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceCharacterActionSectionData         Data;                                                       // 0x00E8   (0x0028)  
};

/// Class /Script/SB.SBLevelSequenceCharacterActionTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class USBLevelSequenceCharacterActionTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0091   (0x0007)  MISSED
};

/// Class /Script/SB.SBLevelSequenceCommonTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class USBLevelSequenceCommonTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceEnvControlVolumeSectionData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBLevelSequenceEnvControlVolumeSectionData
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEnvControlVolumeSection
/// Size: 0x00F0 (240 bytes) (0x0000E8 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBLevelSequenceEnvControlVolumeSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEnvControlVolumeSectionData        Data;                                                       // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00E9   (0x0007)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEnvControlVolumeTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class USBLevelSequenceEnvControlVolumeTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0091   (0x0007)  MISSED
};

/// Struct /Script/SB.SBAliasEventActorActive
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasEventActorActive : FSBAlias
{ 
};

/// Struct /Script/SB.SBLevelSequenceEventActorActiveSectionData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBLevelSequenceEventActorActiveSectionData
{ 
	FSBAliasEventActorActive                           EventAlias;                                                 // 0x0000   (0x0018)  
};

/// Class /Script/SB.SBLevelSequenceEventActorActiveSection
/// Size: 0x0100 (256 bytes) (0x0000E8 - 0x000100) align n/a MaxSize: 0x0100
class USBLevelSequenceEventActorActiveSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventActorActiveSectionData        Data;                                                       // 0x00E8   (0x0018)  
};

/// Struct /Script/SB.SBLevelSequenceEventActorAISectionData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBLevelSequenceEventActorAISectionData
{ 
	TEnumAsByte<ESBZoneEventActorTarget>               ActorTarget;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              ActorTagName;                                               // 0x0004   (0x0008)  
	bool                                               ActiveAI;                                                   // 0x000C   (0x0001)  
	bool                                               bControlMovement;                                           // 0x000D   (0x0001)  
	TEnumAsByte<EMovementMode>                         MovementMode;                                               // 0x000E   (0x0001)  
	unsigned char                                      UnknownData03_7[0x1];                                       // 0x000F   (0x0001)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEventActorAISection
/// Size: 0x00F8 (248 bytes) (0x0000E8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBLevelSequenceEventActorAISection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventActorAISectionData            Data;                                                       // 0x00E8   (0x0010)  
};

/// Struct /Script/SB.SBAliasEventActorBattleState
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasEventActorBattleState : FSBAlias
{ 
};

/// Struct /Script/SB.SBLevelSequenceEventActorBattleStateSectionData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBLevelSequenceEventActorBattleStateSectionData
{ 
	FSBAliasEventActorBattleState                      EventAlias;                                                 // 0x0000   (0x0018)  
};

/// Class /Script/SB.SBLevelSequenceEventActorBattleStateSection
/// Size: 0x0100 (256 bytes) (0x0000E8 - 0x000100) align n/a MaxSize: 0x0100
class USBLevelSequenceEventActorBattleStateSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventActorBattleStateSectionData   Data;                                                       // 0x00E8   (0x0018)  
};

/// Struct /Script/SB.SBAliasEventActorEffect
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasEventActorEffect : FSBAlias
{ 
};

/// Struct /Script/SB.SBLevelSequenceEventActorEffectSectionData
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align n/a MaxSize: 0x0034
struct FSBLevelSequenceEventActorEffectSectionData
{ 
	FSBAliasEventActorEffect                           EventAlias;                                                 // 0x0000   (0x0018)  
	FSBAliasEventActorEffect                           TeardownEventAlias;                                         // 0x0018   (0x0018)  
	bool                                               bIgnoreObserve;                                             // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0031   (0x0003)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEventActorEffectSection
/// Size: 0x0120 (288 bytes) (0x0000E8 - 0x000120) align n/a MaxSize: 0x0120
class USBLevelSequenceEventActorEffectSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventActorEffectSectionData        Data;                                                       // 0x00E8   (0x0034)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x011C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventAmbientSoundControlSectionData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBLevelSequenceEventAmbientSoundControlSectionData
{ 
	FName                                              AmbientSoundVolumeName;                                     // 0x0000   (0x0008)  
	ESBAmbientSoundControlType                         ControlType;                                                // 0x0008   (0x0001)  
	bool                                               Enable;                                                     // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              Priority;                                                   // 0x000C   (0x0004)  
};

/// Class /Script/SB.SBLevelSequenceEventAmbientSoundControlSection
/// Size: 0x00F8 (248 bytes) (0x0000E8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBLevelSequenceEventAmbientSoundControlSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventAmbientSoundControlSectionData Data;                                                      // 0x00E8   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceEventBGMPrioritySectionData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBLevelSequenceEventBGMPrioritySectionData
{ 
	FName                                              BGMVolumeName;                                              // 0x0000   (0x0008)  
	float                                              Priority;                                                   // 0x0008   (0x0004)  
};

/// Class /Script/SB.SBLevelSequenceEventBGMPrioritySection
/// Size: 0x00F8 (248 bytes) (0x0000E8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBLevelSequenceEventBGMPrioritySection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventBGMPrioritySectionData        Data;                                                       // 0x00E8   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00F4   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventBGMSectionData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceEventBGMSectionData
{ 
	bool                                               bPlay;                                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	uint64_t                                           EventID;                                                    // 0x0008   (0x0008)  
	float                                              Priority;                                                   // 0x0010   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	class USBBGMSoundTrack*                            BGMTrack;                                                   // 0x0018   (0x0008)  
	bool                                               bUseRemoveTimer;                                            // 0x0020   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	float                                              RemoveTimer;                                                // 0x0024   (0x0004)  
	float                                              ChangedPeaceDelay;                                          // 0x0028   (0x0004)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEventBGMSection
/// Size: 0x0118 (280 bytes) (0x0000E8 - 0x000118) align n/a MaxSize: 0x0118
class USBLevelSequenceEventBGMSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventBGMSectionData                Data;                                                       // 0x00E8   (0x0030)  
};

/// Struct /Script/SB.SBLevelSequenceEventGlobalValueSectionData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBLevelSequenceEventGlobalValueSectionData
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEventGlobalValueSection
/// Size: 0x00F0 (240 bytes) (0x0000E8 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBLevelSequenceEventGlobalValueSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventGlobalValueSectionData        Data;                                                       // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00E9   (0x0007)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventHUDActionSectionData
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBLevelSequenceEventHUDActionSectionData
{ 
	TEnumAsByte<ESBLevelSequenceEventHUDActionType>    ActionType;                                                 // 0x0000   (0x0001)  
	bool                                               bControlHideUI;                                             // 0x0001   (0x0001)  
	bool                                               bClearVisible;                                              // 0x0002   (0x0001)  
	bool                                               bHUDInputLock;                                              // 0x0003   (0x0001)  
};

/// Class /Script/SB.SBLevelSequenceEventHUDActionSection
/// Size: 0x00F0 (240 bytes) (0x0000E8 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBLevelSequenceEventHUDActionSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventHUDActionSectionData          Data;                                                       // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00EC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventLockOnAtChatSectionData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBLevelSequenceEventLockOnAtChatSectionData
{ 
	FName                                              CharacterTag;                                               // 0x0000   (0x0008)  
	bool                                               bUnlockInOutRange;                                          // 0x0008   (0x0001)  
	bool                                               bDisableLockOnCam;                                          // 0x0009   (0x0001)  
	bool                                               bForceUnlock;                                               // 0x000A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x000B   (0x0001)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEventLockOnAtChatSection
/// Size: 0x00F8 (248 bytes) (0x0000E8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBLevelSequenceEventLockOnAtChatSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventLockOnAtChatSectionData       Data;                                                       // 0x00E8   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00F4   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventPlayerActionSectionData
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align n/a MaxSize: 0x003C
struct FSBLevelSequenceEventPlayerActionSectionData
{ 
	TEnumAsByte<ESBLevelSequenceEventPlayerActionType> ActionType;                                                 // 0x0000   (0x0001)  
	bool                                               bEveryUpdate;                                               // 0x0001   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              RemainMoveAnimSpeedInterpolAfterAction;                     // 0x0004   (0x0004)  
	bool                                               bUseFinishMovement;                                         // 0x0008   (0x0001)  
	TEnumAsByte<EMovementMode>                         FinishMovement;                                             // 0x0009   (0x0001)  
	bool                                               bUseFinishSetPlayerCam;                                     // 0x000A   (0x0001)  
	bool                                               bUseFinishSetPlayerCamReset;                                // 0x000B   (0x0001)  
	bool                                               FinishSetPlayerCamResetPitchBaseAlpha;                      // 0x000C   (0x0001)  
	bool                                               FinishSetPlayerCamResetYawReset;                            // 0x000D   (0x0001)  
	bool                                               FinishSetPlayerCamResetForceSetBoom;                        // 0x000E   (0x0001)  
	bool                                               bUseFinishStopActiveMovement;                               // 0x000F   (0x0001)  
	bool                                               bUseDisableCommand;                                         // 0x0010   (0x0001)  
	bool                                               bDisableCommandValue;                                       // 0x0011   (0x0001)  
	bool                                               bUseIgnoreMoveInput;                                        // 0x0012   (0x0001)  
	bool                                               bIgnoreMoveInputValue;                                      // 0x0013   (0x0001)  
	bool                                               bUseIgnoreLockInput;                                        // 0x0014   (0x0001)  
	bool                                               bIgnoreMoveLockValue;                                       // 0x0015   (0x0001)  
	bool                                               bUseJumpLock;                                               // 0x0016   (0x0001)  
	bool                                               bJumpLockReset;                                             // 0x0017   (0x0001)  
	bool                                               bJumpLockValue;                                             // 0x0018   (0x0001)  
	bool                                               bUseForceFoldWeapon;                                        // 0x0019   (0x0001)  
	bool                                               bForceFoldWeaponValue;                                      // 0x001A   (0x0001)  
	bool                                               bUsePlayableLevelSeq;                                       // 0x001B   (0x0001)  
	bool                                               bPlayableLevelSeqValue;                                     // 0x001C   (0x0001)  
	bool                                               bUseChangeMovement;                                         // 0x001D   (0x0001)  
	TEnumAsByte<EMovementMode>                         ChangeMovement;                                             // 0x001E   (0x0001)  
	bool                                               bUseForceWalk;                                              // 0x001F   (0x0001)  
	bool                                               bUseForceUnLockOn;                                          // 0x0020   (0x0001)  
	bool                                               bUseCameraLock;                                             // 0x0021   (0x0001)  
	bool                                               bCameraLockState;                                           // 0x0022   (0x0001)  
	bool                                               bUpdateVolumeForceMoving;                                   // 0x0023   (0x0001)  
	bool                                               bUpdateVolumeIgnoreTransitAnim;                             // 0x0024   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	FName                                              UpdateVolumeEnvVolumeTag;                                   // 0x0028   (0x0008)  
	bool                                               bUseViewTargetPlayerCamReset;                               // 0x0030   (0x0001)  
	bool                                               ViewTargetPlayerCamResetPitchBaseAlpha;                     // 0x0031   (0x0001)  
	bool                                               ViewTargetPlayerCamResetYawReset;                           // 0x0032   (0x0001)  
	bool                                               ViewTargetPlayerCamResetForceSetBoom;                       // 0x0033   (0x0001)  
	float                                              ValidLandingLocationZOffset;                                // 0x0034   (0x0004)  
	bool                                               bApplyForceLOD;                                             // 0x0038   (0x0001)  
	bool                                               bCreditAllowClose;                                          // 0x0039   (0x0001)  
	unsigned char                                      UnknownData05_7[0x2];                                       // 0x003A   (0x0002)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEventPlayerActionSection
/// Size: 0x0128 (296 bytes) (0x0000E8 - 0x000128) align n/a MaxSize: 0x0128
class USBLevelSequenceEventPlayerActionSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventPlayerActionSectionData       Data;                                                       // 0x00E8   (0x003C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0124   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventPlayerCameraShake2Oscillator
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBLevelSequenceEventPlayerCameraShake2Oscillator
{ 
	float                                              Amplitude;                                                  // 0x0000   (0x0004)  
	float                                              Frequency;                                                  // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceEventPlayerCameraShake2SectionData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBLevelSequenceEventPlayerCameraShake2SectionData
{ 
	EOscillatorWaveform                                Waveform;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              OscillationBlendInTime;                                     // 0x0004   (0x0004)  
	float                                              OscillationBlendOutTime;                                    // 0x0008   (0x0004)  
	FSBLevelSequenceEventPlayerCameraShake2Oscillator  Rot_Pitch;                                                  // 0x000C   (0x0008)  
	FSBLevelSequenceEventPlayerCameraShake2Oscillator  Rot_Yaw;                                                    // 0x0014   (0x0008)  
	FSBLevelSequenceEventPlayerCameraShake2Oscillator  Rot_Roll;                                                   // 0x001C   (0x0008)  
	FSBLevelSequenceEventPlayerCameraShake2Oscillator  Loc_X;                                                      // 0x0024   (0x0008)  
	FSBLevelSequenceEventPlayerCameraShake2Oscillator  Loc_Y;                                                      // 0x002C   (0x0008)  
	FSBLevelSequenceEventPlayerCameraShake2Oscillator  Loc_Z;                                                      // 0x0034   (0x0008)  
	float                                              ShakeScale;                                                 // 0x003C   (0x0004)  
	bool                                               bUseScaleCurve;                                             // 0x0040   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0041   (0x0007)  MISSED
	class UCurveFloat*                                 ScaleCurve;                                                 // 0x0048   (0x0008)  
};

/// Class /Script/SB.SBLevelSequenceEventPlayerCameraShake2Section
/// Size: 0x0138 (312 bytes) (0x0000E8 - 0x000138) align n/a MaxSize: 0x0138
class USBLevelSequenceEventPlayerCameraShake2Section : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventPlayerCameraShake2SectionData ShakeData;                                                  // 0x00E8   (0x0050)  
};

/// Struct /Script/SB.SBLevelSequenceEventPlayerCameraShakeSectionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBLevelSequenceEventPlayerCameraShakeSectionData
{ 
	class UClass*                                      ShakeClass;                                                 // 0x0000   (0x0008)  
	float                                              ShakeInnerRadius;                                           // 0x0008   (0x0004)  
	float                                              ShakeOuterRadius;                                           // 0x000C   (0x0004)  
	float                                              ShakeFallOff;                                               // 0x0010   (0x0004)  
	bool                                               bOrientShakeTowardsEpicenter;                               // 0x0014   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	float                                              ShakeScale;                                                 // 0x0018   (0x0004)  
	bool                                               bCheckCameraVolume;                                         // 0x001C   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEventPlayerCameraShakeSection
/// Size: 0x0108 (264 bytes) (0x0000E8 - 0x000108) align n/a MaxSize: 0x0108
class USBLevelSequenceEventPlayerCameraShakeSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventPlayerCameraShakeSectionData  ShakeData;                                                  // 0x00E8   (0x0020)  
};

/// Class /Script/SB.SBLevelSequenceEventSection
/// Size: 0x00E8 (232 bytes) (0x0000E8 - 0x0000E8) align n/a MaxSize: 0x00E8
class USBLevelSequenceEventSection : public UMovieSceneSection
{ 
public:
};

/// Struct /Script/SB.SBLevelSequenceEventSoundEventSectionData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBLevelSequenceEventSoundEventSectionData
{ 
	FName                                              SoundEventAlias;                                            // 0x0000   (0x0008)  
};

/// Class /Script/SB.SBLevelSequenceEventSoundEventSection
/// Size: 0x00F0 (240 bytes) (0x0000E8 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBLevelSequenceEventSoundEventSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventSoundEventSectionData         Data;                                                       // 0x00E8   (0x0008)  
};

/// Struct /Script/SB.SBLevelSequenceEventSoundMixSectionData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBLevelSequenceEventSoundMixSectionData
{ 
	bool                                               bPopSoundMix;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class USoundMix*                                   SoundMix;                                                   // 0x0008   (0x0008)  
};

/// Class /Script/SB.SBLevelSequenceEventSoundMixSection
/// Size: 0x00F8 (248 bytes) (0x0000E8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBLevelSequenceEventSoundMixSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventSoundMixSectionData           Data;                                                       // 0x00E8   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceEventSoundVolumeSectionData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBLevelSequenceEventSoundVolumeSectionData
{ 
	ESBSoundVolumeChannel                              SoundVolumeChannel;                                         // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Volume;                                                     // 0x0004   (0x0004)  
	bool                                               bOverrideFadeTime;                                          // 0x0008   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              FadeInTime;                                                 // 0x000C   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0010   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEventSoundVolumeSection
/// Size: 0x0100 (256 bytes) (0x0000E8 - 0x000100) align n/a MaxSize: 0x0100
class USBLevelSequenceEventSoundVolumeSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventSoundVolumeSectionData        Data;                                                       // 0x00E8   (0x0018)  
};

/// Class /Script/SB.SBLevelSequenceEventTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class USBLevelSequenceEventTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Struct /Script/SB.SBAliasEventUIAction
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasEventUIAction : FSBAlias
{ 
};

/// Struct /Script/SB.SBLevelSequenceEventUIActionSectionData
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBLevelSequenceEventUIActionSectionData
{ 
	FSBAliasEventUIAction                              EventAlias;                                                 // 0x0000   (0x0018)  
	float                                              DelayTime;                                                  // 0x0018   (0x0004)  
	FSBAliasEventUIAction                              EventAlias2;                                                // 0x001C   (0x0018)  
	float                                              DelayTime2;                                                 // 0x0034   (0x0004)  
};

/// Class /Script/SB.SBLevelSequenceEventUIActionSection
/// Size: 0x0120 (288 bytes) (0x0000E8 - 0x000120) align n/a MaxSize: 0x0120
class USBLevelSequenceEventUIActionSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventUIActionSectionData           Data;                                                       // 0x00E8   (0x0038)  
};

/// Struct /Script/SB.SBLevelSequenceEventVibrationSectionData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBLevelSequenceEventVibrationSectionData
{ 
	class USBVibrationSet*                             VibrationSet;                                               // 0x0000   (0x0008)  
};

/// Class /Script/SB.SBLevelSequenceEventVibrationSection
/// Size: 0x00F0 (240 bytes) (0x0000E8 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBLevelSequenceEventVibrationSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventVibrationSectionData          Data;                                                       // 0x00E8   (0x0008)  
};

/// Struct /Script/SB.SBAliasZoneEvent
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasZoneEvent : FSBAlias
{ 
};

/// Struct /Script/SB.SBLevelSequenceEventZoneEventSectionData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FSBLevelSequenceEventZoneEventSectionData
{ 
	FSBAliasZoneEvent                                  EventAlias;                                                 // 0x0000   (0x0018)  
	bool                                               bIgnoreObserve;                                             // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Class /Script/SB.SBLevelSequenceEventZoneEventSection
/// Size: 0x0108 (264 bytes) (0x0000E8 - 0x000108) align n/a MaxSize: 0x0108
class USBLevelSequenceEventZoneEventSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventZoneEventSectionData          Data;                                                       // 0x00E8   (0x001C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0104   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventZoneLoadWaitSectionData
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBLevelSequenceEventZoneLoadWaitSectionData
{ 
	float                                              WaitLimitTime;                                              // 0x0000   (0x0004)  
};

/// Class /Script/SB.SBLevelSequenceEventZoneLoadWaitSection
/// Size: 0x00F0 (240 bytes) (0x0000E8 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBLevelSequenceEventZoneLoadWaitSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventZoneLoadWaitSectionData       Data;                                                       // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00EC   (0x0004)  MISSED
};

/// Class /Script/SB.SBLevelSequenceGraphicsAutoScaleSection
/// Size: 0x0110 (272 bytes) (0x0000E8 - 0x000110) align n/a MaxSize: 0x0110
class USBLevelSequenceGraphicsAutoScaleSection : public UMovieSceneSection
{ 
public:
	bool                                               AmbientOcclusionMaxQuality;                                 // 0x00E8   (0x0001)  
	bool                                               AmbientOcclusionRadiusScale;                                // 0x00E9   (0x0001)  
	bool                                               LightShaftDownSampleFactor;                                 // 0x00EA   (0x0001)  
	bool                                               VolumetricFogGridSizeZ;                                     // 0x00EB   (0x0001)  
	bool                                               VolumetricFogGridPixelSize;                                 // 0x00EC   (0x0001)  
	bool                                               PostProcessAAQuality;                                       // 0x00ED   (0x0001)  
	bool                                               EnableCustomDepth;                                          // 0x00EE   (0x0001)  
	bool                                               EnableDecalChannelMaskPass;                                 // 0x00EF   (0x0001)  
	bool                                               VolumetricCloudHide;                                        // 0x00F0   (0x0001)  
	bool                                               DOFRecombineOff;                                            // 0x00F1   (0x0001)  
	bool                                               FogOff;                                                     // 0x00F2   (0x0001)  
	bool                                               VolumetricFogOff;                                           // 0x00F3   (0x0001)  
	int32_t                                            FoliageForceLOD;                                            // 0x00F4   (0x0004)  
	int32_t                                            AmbientOcclusionLevel;                                      // 0x00F8   (0x0004)  
	int32_t                                            FSR2ScreenPercentage4KOnly;                                 // 0x00FC   (0x0004)  
	bool                                               AmbientCubemapOff;                                          // 0x0100   (0x0001)  
	bool                                               SSROff;                                                     // 0x0101   (0x0001)  
	bool                                               UsePDODither;                                               // 0x0102   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0103   (0x0001)  MISSED
	float                                              PDODitherAlphaThreshold;                                    // 0x0104   (0x0004)  
	bool                                               RVTUpdateSkip;                                              // 0x0108   (0x0001)  
	bool                                               EnableDistanceFieldsRealloc;                                // 0x0109   (0x0001)  
	bool                                               EnableFSR2BrightnessToneDown;                               // 0x010A   (0x0001)  
	bool                                               EnableHLOD;                                                 // 0x010B   (0x0001)  
	float                                              NearClipPlane;                                              // 0x010C   (0x0004)  
};

/// Class /Script/SB.SBLevelSequenceGraphicsAutoScaleTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class USBLevelSequenceGraphicsAutoScaleTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Class /Script/SB.SBLevelSequenceHLODSection
/// Size: 0x0178 (376 bytes) (0x0000E8 - 0x000178) align n/a MaxSize: 0x0178
class USBLevelSequenceHLODSection : public UMovieSceneSection
{ 
public:
	FMovieSceneBoolChannel                             BoolCurve;                                                  // 0x00E8   (0x0090)  
};

/// Class /Script/SB.SBLevelSequenceHLODTrack
/// Size: 0x00B0 (176 bytes) (0x0000B0 - 0x0000B0) align n/a MaxSize: 0x00B0
class USBLevelSequenceHLODTrack : public UMovieSceneBoolTrack
{ 
public:
};

/// Struct /Script/SB.SBTheaterLevelSequenceSkipFadeParam
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBTheaterLevelSequenceSkipFadeParam
{ 
	bool                                               bUseFade;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              FromAlpha;                                                  // 0x0004   (0x0004)  
	float                                              ToAlpha;                                                    // 0x0008   (0x0004)  
	float                                              FadeTime;                                                   // 0x000C   (0x0004)  
	float                                              FadeDelay;                                                  // 0x0010   (0x0004)  
	FLinearColor                                       FadeColor;                                                  // 0x0014   (0x0010)  
	float                                              FadePriority;                                               // 0x0024   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceLevelStreamingWaitSectionData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceLevelStreamingWaitSectionData
{ 
	FSBTheaterLevelSequenceSkipFadeParam               FadeParam;                                                  // 0x0000   (0x0028)  
};

/// Class /Script/SB.SBLevelSequenceLevelStreamingWaitSection
/// Size: 0x0110 (272 bytes) (0x0000E8 - 0x000110) align n/a MaxSize: 0x0110
class USBLevelSequenceLevelStreamingWaitSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceLevelStreamingWaitSectionData      Data;                                                       // 0x00E8   (0x0028)  
};

/// Struct /Script/SB.SBLevelSequenceLookAtTargetSectionData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceLookAtTargetSectionData
{ 
	TEnumAsByte<ESBLevelSequenceLookAtTargetType>      ActionType;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FMovieSceneObjectBindingID                         TargetBinding;                                              // 0x0004   (0x0018)  
	bool                                               bCheckTrackingTarget;                                       // 0x001C   (0x0001)  
	bool                                               bClearDisableLookAtIK;                                      // 0x001D   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x001E   (0x0002)  MISSED
	FName                                              TargetSocket;                                               // 0x0020   (0x0008)  
	float                                              LookAtZOffset;                                              // 0x0028   (0x0004)  
	float                                              RotationSpeed;                                              // 0x002C   (0x0004)  
};

/// Class /Script/SB.SBLevelSequenceLookAtTargetSection
/// Size: 0x0118 (280 bytes) (0x0000E8 - 0x000118) align n/a MaxSize: 0x0118
class USBLevelSequenceLookAtTargetSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceLookAtTargetSectionData            Data;                                                       // 0x00E8   (0x0030)  
};

/// Class /Script/SB.SBLevelSequenceLookAtTargetTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class USBLevelSequenceLookAtTargetTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0091   (0x0007)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceMoveToLocationSectionData
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FSBLevelSequenceMoveToLocationSectionData
{ 
	TEnumAsByte<ESBLevelSequenceMoveToLocationType>    Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            TargetLocation;                                             // 0x0004   (0x000C)  
	FMovieSceneObjectBindingID                         TargetPoint;                                                // 0x0010   (0x0018)  
	bool                                               CheckLocation;                                              // 0x0028   (0x0001)  
	bool                                               UseBraking;                                                 // 0x0029   (0x0001)  
	TEnumAsByte<ESBMoveInputType>                      OverrideBrakingInputType;                                   // 0x002A   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x002B   (0x0001)  MISSED
	float                                              OverrideBrakingDistStart;                                   // 0x002C   (0x0004)  
	float                                              OverrideBrakingDistEnd;                                     // 0x0030   (0x0004)  
	float                                              EndAnimRetentionSpeedTime;                                  // 0x0034   (0x0004)  
	bool                                               UseSpeedAnimGraph;                                          // 0x0038   (0x0001)  
	bool                                               UseManualStop;                                              // 0x0039   (0x0001)  
	bool                                               UseTargetRotation;                                          // 0x003A   (0x0001)  
	unsigned char                                      UnknownData05_6[0x1];                                       // 0x003B   (0x0001)  MISSED
	FRotator                                           TargetRotation;                                             // 0x003C   (0x000C)  
	bool                                               FinishOrStopMovementOff;                                    // 0x0048   (0x0001)  
	bool                                               FinishOrStopDroneMovementOff;                               // 0x0049   (0x0001)  
	bool                                               PlayUsePlayerBattleStateChange;                             // 0x004A   (0x0001)  
	bool                                               PlayPlayerBattleState;                                      // 0x004B   (0x0001)  
	bool                                               FinishFrameJumpToEndSection;                                // 0x004C   (0x0001)  
	bool                                               FinishUseDroneAIControl;                                    // 0x004D   (0x0001)  
	bool                                               FinishDroneAIState;                                         // 0x004E   (0x0001)  
	bool                                               bCheckImprovedPlaySeqTime;                                  // 0x004F   (0x0001)  
	FString                                            EndToMark;                                                  // 0x0050   (0x0010)  
};

/// Class /Script/SB.SBLevelSequenceMoveToLocationSection
/// Size: 0x0148 (328 bytes) (0x0000E8 - 0x000148) align n/a MaxSize: 0x0148
class USBLevelSequenceMoveToLocationSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceMoveToLocationSectionData          Data;                                                       // 0x00E8   (0x0060)  
};

/// Class /Script/SB.SBLevelSequenceMoveToLocationTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class USBLevelSequenceMoveToLocationTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0091   (0x0007)  MISSED
};

/// Class /Script/SB.SBLevelSequenceObserver
/// Size: 0x01F8 (504 bytes) (0x000028 - 0x0001F8) align n/a MaxSize: 0x01F8
class USBLevelSequenceObserver : public UObject
{ 
public:
	unsigned char                                      UnknownData04_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	bool                                               bFinishAutoDestoryActor;                                    // 0x0030   (0x0001)  
	unsigned char                                      UnknownData05_6[0x13];                                      // 0x0031   (0x0013)  MISSED
	bool                                               fireNotify;                                                 // 0x0044   (0x0001)  
	unsigned char                                      UnknownData06_6[0x5B];                                      // 0x0045   (0x005B)  MISSED
	FName                                              KeyName;                                                    // 0x00A0   (0x0008)  
	unsigned char                                      UnknownData07_7[0x150];                                     // 0x00A8   (0x0150)  MISSED

	/// Functions
	// Function /Script/SB.SBLevelSequenceObserver.OnFinishLevelSequence
	constexpr static const FunctionPointer<USBLevelSequenceObserver, void> OnFinishLevelSequence = { 0x2777dc0, 0 }; 
};

/// Struct /Script/SB.SBLevelSequenceSetAnimBPPropertySectionData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBLevelSequenceSetAnimBPPropertySectionData
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	float                                              Value;                                                      // 0x0008   (0x0004)  
};

/// Class /Script/SB.SBLevelSequenceSetAnimBPPropertySection
/// Size: 0x00F8 (248 bytes) (0x0000E8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBLevelSequenceSetAnimBPPropertySection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceSetAnimBPPropertySectionData       Data;                                                       // 0x00E8   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00F4   (0x0004)  MISSED
};

/// Class /Script/SB.SBLevelSequenceSetAnimBPPropertyTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class USBLevelSequenceSetAnimBPPropertyTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0080   (0x0010)  
};

/// Struct /Script/SB.SBTableIndex
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FSBTableIndex
{ 
	FName                                              Index;                                                      // 0x0000   (0x0008)  
	int32_t                                            Type;                                                       // 0x0008   (0x0004)  
	FName                                              ColumnName;                                                 // 0x000C   (0x0008)  
	int32_t                                            IndexType;                                                  // 0x0014   (0x0004)  
	bool                                               bReadOnly;                                                  // 0x0018   (0x0001)  
	bool                                               bCustom_BrowseButton;                                       // 0x0019   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x001A   (0x0002)  MISSED
	FName                                              Custom_BrowseClassName;                                     // 0x001C   (0x0008)  
};

/// Struct /Script/SB.SBTableIndexSocialAnim
/// Size: 0x0024 (36 bytes) (0x000024 - 0x000024) align n/a MaxSize: 0x0024
struct FSBTableIndexSocialAnim : FSBTableIndex
{ 
};

/// Struct /Script/SB.SBSocialAnimDescAlias
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSocialAnimDescAlias
{ 
	FName                                              Group;                                                      // 0x0000   (0x0008)  
	FName                                              Motion;                                                     // 0x0008   (0x0008)  
};

/// Struct /Script/SB.SBLevelSequenceSkeletalAnimationParams
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FSBLevelSequenceSkeletalAnimationParams
{ 
	TEnumAsByte<ESBLevelSequenceSkeletalAnimationPlayType> PlayType;                                               // 0x0000   (0x0001)  
	TEnumAsByte<ESBSkelMeshSlot>                       AnimMeshSlot;                                               // 0x0001   (0x0001)  
	TEnumAsByte<ESBLevelSequenceSkeletalAnimationAssetType> AssetType;                                             // 0x0002   (0x0001)  
	unsigned char                                      UnknownData10_6[0x5];                                       // 0x0003   (0x0005)  MISSED
	class UAnimSequenceBase*                           Animation;                                                  // 0x0008   (0x0008)  
	FSBTableIndexSocialAnim                            SocialAnimGroup;                                            // 0x0010   (0x0024)  
	FSBSocialAnimDescAlias                             SocialAnimDescAlias;                                        // 0x0034   (0x0010)  
	bool                                               SocialAnimBlendTableData;                                   // 0x0044   (0x0001)  
	bool                                               DepencendySequenceTime;                                     // 0x0045   (0x0001)  
	bool                                               LoopInfinity;                                               // 0x0046   (0x0001)  
	bool                                               DuplicatePlaySkip;                                          // 0x0047   (0x0001)  
	bool                                               FinishNotStop;                                              // 0x0048   (0x0001)  
	bool                                               bStopAtMoving;                                              // 0x0049   (0x0001)  
	unsigned char                                      UnknownData11_6[0x2];                                       // 0x004A   (0x0002)  MISSED
	float                                              PlayRate;                                                   // 0x004C   (0x0004)  
	float                                              Priority;                                                   // 0x0050   (0x0004)  
	bool                                               bUsePlayRangeAnimSeq;                                       // 0x0054   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              OverrideSBAnimNodeBlendIn;                                  // 0x0058   (0x0004)  
	TEnumAsByte<ESBLevelSequenceSkeletalAnimationFootIKType> FootIKControl;                                        // 0x005C   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x005D   (0x0003)  MISSED
	float                                              FootIKBlendTime;                                            // 0x0060   (0x0004)  
	TEnumAsByte<ESBLevelSequenceSkeletalAnimationFootIKType> StopFootIKControl;                                    // 0x0064   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	float                                              StopFootIKBlendTime;                                        // 0x0068   (0x0004)  
	FFrameNumber                                       StartFrameOffset;                                           // 0x006C   (0x0004)  
	FFrameNumber                                       EndFrameOffset;                                             // 0x0070   (0x0004)  
	FFrameNumber                                       DeltaFrameOffset;                                           // 0x0074   (0x0004)  
	bool                                               UseFootSync;                                                // 0x0078   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0079   (0x0003)  MISSED
	float                                              FootSyncEndAnimLength;                                      // 0x007C   (0x0004)  
	float                                              FootSyncAdditiveTime;                                       // 0x0080   (0x0004)  
	bool                                               bStopAllAnim;                                               // 0x0084   (0x0001)  
	bool                                               UsePhysicsKeepFrame;                                        // 0x0085   (0x0001)  
	unsigned char                                      UnknownData16_6[0x2];                                       // 0x0086   (0x0002)  MISSED
	int32_t                                            PhysicsKeepFrameCount;                                      // 0x0088   (0x0004)  
	bool                                               bImmidateAnimUpdate;                                        // 0x008C   (0x0001)  
	bool                                               bImmidateAnimUseResetSpring;                                // 0x008D   (0x0001)  
	unsigned char                                      UnknownData17_6[0x2];                                       // 0x008E   (0x0002)  MISSED
	int32_t                                            AnimationNodeIndex;                                         // 0x0090   (0x0004)  
	bool                                               visibleMeshSlot : 1;                                        // 0x0094:0 (0x0001)  
	unsigned char                                      UnknownData18_5[0x3];                                       // 0x0095   (0x0003)  MISSED
	bool                                               bIgnoreTemplateContentType;                                 // 0x0098   (0x0001)  
	unsigned char                                      UnknownData19_7[0x7];                                       // 0x0099   (0x0007)  MISSED
};

/// Class /Script/SB.SBLevelSequenceSkeletalAnimationSection
/// Size: 0x0188 (392 bytes) (0x0000E8 - 0x000188) align n/a MaxSize: 0x0188
class USBLevelSequenceSkeletalAnimationSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceSkeletalAnimationParams            Params;                                                     // 0x00E8   (0x00A0)  
};

/// Struct /Script/SB.SBMovieSceneSkeletalAnimRootMotionTrackParams
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBMovieSceneSkeletalAnimRootMotionTrackParams
{ 
	unsigned char                                      UnknownData01_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Class /Script/SB.SBLevelSequenceSkeletalAnimationTrack
/// Size: 0x00C8 (200 bytes) (0x000078 - 0x0000C8) align n/a MaxSize: 0x00C8
class USBLevelSequenceSkeletalAnimationTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	FSBMovieSceneSkeletalAnimRootMotionTrackParams     RootMotionParams;                                           // 0x0098   (0x0030)  
};

/// Struct /Script/SB.SBLevelSequenceSkeletalAnimMoveStateParams
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceSkeletalAnimMoveStateParams
{ 
	TWeakObjectPtr<class UBlendSpaceBase*>             MoveStateBlendSpace;                                        // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0008   (0x0020)  MISSED
};

/// Class /Script/SB.SBLevelSequenceSkeletalAnimMoveStateSection
/// Size: 0x0110 (272 bytes) (0x0000E8 - 0x000110) align n/a MaxSize: 0x0110
class USBLevelSequenceSkeletalAnimMoveStateSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceSkeletalAnimMoveStateParams        Params;                                                     // 0x00E8   (0x0028)  
};

/// Struct /Script/SB.SBLevelSequenceSkipSectionData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceSkipSectionData
{ 
	FSBTheaterLevelSequenceSkipFadeParam               FadeParam;                                                  // 0x0000   (0x0028)  
};

/// Class /Script/SB.SBLevelSequenceSkipSection
/// Size: 0x0110 (272 bytes) (0x0000E8 - 0x000110) align n/a MaxSize: 0x0110
class USBLevelSequenceSkipSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceSkipSectionData                    Data;                                                       // 0x00E8   (0x0028)  
};

/// Class /Script/SB.SBLevelSequenceSkipTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class USBLevelSequenceSkipTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceSplineCineCamTrackingSectionData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBLevelSequenceSplineCineCamTrackingSectionData
{ 
	FName                                              TrackingCharacterTag;                                       // 0x0000   (0x0008)  
};

/// Class /Script/SB.SBLevelSequenceSplineCineCamTrackingSection
/// Size: 0x00F0 (240 bytes) (0x0000E8 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBLevelSequenceSplineCineCamTrackingSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceSplineCineCamTrackingSectionData   Data;                                                       // 0x00E8   (0x0008)  
};

/// Class /Script/SB.SBLevelSequenceSplineCineCamTrackingTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class USBLevelSequenceSplineCineCamTrackingTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0091   (0x0007)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceSectionProperty
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBLevelSequenceSectionProperty
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceTheaterAreaSectionData
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBLevelSequenceTheaterAreaSectionData
{ 
	FText                                              MainText;                                                   // 0x0000   (0x0018)  
	FText                                              SubText;                                                    // 0x0018   (0x0018)  
	FSBLevelSequenceSectionProperty                    Blank;                                                      // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/SB.SBLevelSequenceTheaterAreaSection
/// Size: 0x0120 (288 bytes) (0x0000E8 - 0x000120) align n/a MaxSize: 0x0120
class USBLevelSequenceTheaterAreaSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceTheaterAreaSectionData             Data;                                                       // 0x00E8   (0x0038)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterAttachWidgetSectionData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSBLevelSequenceTheaterAttachWidgetSectionData
{ 
	TWeakObjectPtr<class UObject*>                     WidgetPath;                                                 // 0x0000   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x0008   (0x0020)  MISSED
	TArray<FString>                                    Arguments;                                                  // 0x0028   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  ScreenHorizontalAlignment;                                  // 0x0038   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    ScreenVerticalAlignment;                                    // 0x0039   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x003A   (0x0002)  MISSED
	FVector2D                                          ScreenOffset;                                               // 0x003C   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/SB.SBLevelSequenceTheaterAttachWidgetSection
/// Size: 0x0130 (304 bytes) (0x0000E8 - 0x000130) align n/a MaxSize: 0x0130
class USBLevelSequenceTheaterAttachWidgetSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceTheaterAttachWidgetSectionData     Data;                                                       // 0x00E8   (0x0048)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterDialogueSectionData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceTheaterDialogueSectionData
{ 
	FText                                              Message;                                                    // 0x0000   (0x0018)  
	bool                                               RequireWaitInput;                                           // 0x0018   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              DelayWidgetCloseTime;                                       // 0x001C   (0x0004)  
	FSBLevelSequenceSectionProperty                    Blank;                                                      // 0x0020   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Class /Script/SB.SBLevelSequenceTheaterDialogueSection
/// Size: 0x0130 (304 bytes) (0x0000E8 - 0x000130) align n/a MaxSize: 0x0130
class USBLevelSequenceTheaterDialogueSection : public UMovieSceneSection
{ 
public:
	FText                                              Message;                                                    // 0x00E8   (0x0018)  
	bool                                               RequireWaitInput;                                           // 0x0100   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0101   (0x0003)  MISSED
	float                                              DelayWidgetCloseTime;                                       // 0x0104   (0x0004)  
	FSBLevelSequenceTheaterDialogueSectionData         Data;                                                       // 0x0108   (0x0028)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterInputCounterActorInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBLevelSequenceTheaterInputCounterActorInfo
{ 
	TArray<FName>                                      ActorTags;                                                  // 0x0000   (0x0010)  
	FName                                              ActorSocketName;                                            // 0x0010   (0x0008)  
	FVector2D                                          ActorOffset;                                                // 0x0018   (0x0008)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterInputCounterLocationData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceTheaterInputCounterLocationData
{ 
	TEnumAsByte<ESBLevelSequenceTheaterInputCounterLocationType> LocationType;                                     // 0x0000   (0x0001)  
	TEnumAsByte<EHorizontalAlignment>                  ScreenHorizontalAlignment;                                  // 0x0001   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    ScreenVerticalAlignment;                                    // 0x0002   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FVector2D                                          ScreenOffset;                                               // 0x0004   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FSBLevelSequenceTheaterInputCounterActorInfo       ActorInfo;                                                  // 0x0010   (0x0020)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterInputCounterFlowData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBLevelSequenceTheaterInputCounterFlowData
{ 
	TEnumAsByte<ESBLevelSequenceTheaterInputCounterType> ActionKey;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            GoalInputCount;                                             // 0x0004   (0x0004)  
	FSBLevelSequenceTheaterInputCounterLocationData    LocationData;                                               // 0x0008   (0x0030)  
	FFrameNumber                                       StartFrame;                                                 // 0x0038   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x003C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceEventInputCounterSectionData
/// Size: 0x0118 (280 bytes) (0x000000 - 0x000118) align n/a MaxSize: 0x0118
struct FSBLevelSequenceEventInputCounterSectionData
{ 
	TEnumAsByte<ESBLevelSequenceTheaterInputCounterActionType> ActionKey;                                          // 0x0000   (0x0001)  
	bool                                               UseTakeSelectNext;                                          // 0x0001   (0x0001)  
	unsigned char                                      UnknownData09_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<float>                                      TakeSelectPercentArray;                                     // 0x0008   (0x0010)  
	bool                                               RequireWaitInput;                                           // 0x0018   (0x0001)  
	bool                                               VisibleProgress;                                            // 0x0019   (0x0001)  
	bool                                               UseSuccessFinishTakeSkip;                                   // 0x001A   (0x0001)  
	bool                                               UseFailFinishTakeSkip;                                      // 0x001B   (0x0001)  
	bool                                               ImmediateSuccessTakeSkip;                                   // 0x001C   (0x0001)  
	bool                                               ImmediateSuccessNoWaitWidgetAnimFinish;                     // 0x001D   (0x0001)  
	bool                                               UseSuccessTimeSpeedChange;                                  // 0x001E   (0x0001)  
	unsigned char                                      UnknownData10_6[0x1];                                       // 0x001F   (0x0001)  MISSED
	float                                              SuccessTimeSpeed;                                           // 0x0020   (0x0004)  
	bool                                               UseSectionFinishShowResult;                                 // 0x0024   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	float                                              HitDelayTime;                                               // 0x0028   (0x0004)  
	unsigned char                                      UnknownData12_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FString                                            HitEventName;                                               // 0x0030   (0x0010)  
	bool                                               bIgnoreOptionSuccess;                                       // 0x0040   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	bool                                               visibleSinglePress : 1;                                     // 0x0044:0 (0x0001)  
	bool                                               visibleDoublePress : 1;                                     // 0x0044:1 (0x0001)  
	bool                                               visibleFlowPress : 1;                                       // 0x0044:2 (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	TEnumAsByte<ESBLevelSequenceTheaterInputCounterType> SingleInputKey;                                           // 0x0048   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	int32_t                                            SingleGoalInputCount;                                       // 0x004C   (0x0004)  
	bool                                               SingleCustomWidgetLocation;                                 // 0x0050   (0x0001)  
	unsigned char                                      UnknownData16_6[0x7];                                       // 0x0051   (0x0007)  MISSED
	FSBLevelSequenceTheaterInputCounterLocationData    SingleLocationData;                                         // 0x0058   (0x0030)  
	class USBShowData*                                 SingleHitShowData;                                          // 0x0088   (0x0008)  
	FMovieSceneObjectBindingID                         SingleHitShowMainActor;                                     // 0x0090   (0x0018)  
	TArray<FMovieSceneObjectBindingID>                 SingleHitShowOtherActorArray;                               // 0x00A8   (0x0010)  
	class USBDualSenseTriggerEffectData*               SingleDualSenseData;                                        // 0x00B8   (0x0008)  
	TArray<TEnumAsByte<ESBLevelSequenceTheaterInputCounterType>> DoubleInputKeyArray;                              // 0x00C0   (0x0010)  
	int32_t                                            DoubleGoalInputCount;                                       // 0x00D0   (0x0004)  
	bool                                               DoubleCustomWidgetLocation;                                 // 0x00D4   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x00D5   (0x0003)  MISSED
	FSBLevelSequenceTheaterInputCounterLocationData    DoubleLocationData;                                         // 0x00D8   (0x0030)  
	TArray<FSBLevelSequenceTheaterInputCounterFlowData> FlowInputKeyArray;                                         // 0x0108   (0x0010)  
};

/// Class /Script/SB.SBLevelSequenceTheaterInputCounterSection
/// Size: 0x0200 (512 bytes) (0x0000E8 - 0x000200) align n/a MaxSize: 0x0200
class USBLevelSequenceTheaterInputCounterSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventInputCounterSectionData       Data;                                                       // 0x00E8   (0x0118)  
};

/// Struct /Script/SB.SBLevelSequenceEventInputFeedbackActionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBLevelSequenceEventInputFeedbackActionData
{ 
	TEnumAsByte<ESBTheaterSequenceEventType>           SequenceEventType;                                          // 0x0000   (0x0001)  
	TEnumAsByte<FSBLevelSequenceEventInputFeedbackActionType> ActionType;                                          // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	class ULevelSequence*                              Sequence;                                                   // 0x0008   (0x0008)  
	TArray<FName>                                      AttachActorTagNames;                                        // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceEventInputFeedbackSectionData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBLevelSequenceEventInputFeedbackSectionData
{ 
	TArray<FSBLevelSequenceEventInputFeedbackActionData> ActionList;                                               // 0x0000   (0x0010)  
};

/// Class /Script/SB.SBLevelSequenceTheaterInputFeedbackSection
/// Size: 0x00F8 (248 bytes) (0x0000E8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBLevelSequenceTheaterInputFeedbackSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventInputFeedbackSectionData      Data;                                                       // 0x00E8   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterInteractionSelectSectionData
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBLevelSequenceTheaterInteractionSelectSectionData
{ 
	FName                                              Tag;                                                        // 0x0000   (0x0008)  
	bool                                               RequireWaitInput;                                           // 0x0008   (0x0001)  
	bool                                               ImmidateTakeSkip;                                           // 0x0009   (0x0001)  
	bool                                               ImmidateInteractionReceive;                                 // 0x000A   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x000B   (0x0001)  MISSED
	float                                              BGDeactiveDelayTime;                                        // 0x000C   (0x0004)  
	TEnumAsByte<ESBSequenceContentType>                ContentType;                                                // 0x0010   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Class /Script/SB.SBLevelSequenceTheaterInteractionSelectSection
/// Size: 0x0100 (256 bytes) (0x0000E8 - 0x000100) align n/a MaxSize: 0x0100
class USBLevelSequenceTheaterInteractionSelectSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceTheaterInteractionSelectSectionData Data;                                                      // 0x00E8   (0x0014)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00FC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceTheaterPlayerChoiceSectionData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBLevelSequenceTheaterPlayerChoiceSectionData
{ 
	TArray<FText>                                      MessageArray;                                               // 0x0000   (0x0010)  
	bool                                               RequireWaitInput;                                           // 0x0010   (0x0001)  
	bool                                               ImmidateTakeSkip;                                           // 0x0011   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0012   (0x0006)  MISSED
};

/// Class /Script/SB.SBLevelSequenceTheaterPlayerChoiceSection
/// Size: 0x0120 (288 bytes) (0x0000E8 - 0x000120) align n/a MaxSize: 0x0120
class USBLevelSequenceTheaterPlayerChoiceSection : public UMovieSceneSection
{ 
public:
	TArray<FText>                                      MessageArray;                                               // 0x00E8   (0x0010)  
	bool                                               RequireWaitInput;                                           // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x00F9   (0x0007)  MISSED
	FSBLevelSequenceTheaterPlayerChoiceSectionData     Data;                                                       // 0x0100   (0x0018)  
	FSBLevelSequenceSectionProperty                    Blank;                                                      // 0x0118   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0119   (0x0007)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceTheaterQTEActorInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBLevelSequenceTheaterQTEActorInfo
{ 
	TArray<FName>                                      ActorTags;                                                  // 0x0000   (0x0010)  
	FName                                              ActorSocketName;                                            // 0x0010   (0x0008)  
	FVector2D                                          ActorOffset;                                                // 0x0018   (0x0008)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterQTELocationData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceTheaterQTELocationData
{ 
	TEnumAsByte<ESBLevelSequenceTheaterQTELocationType> LocationType;                                              // 0x0000   (0x0001)  
	TEnumAsByte<EHorizontalAlignment>                  ScreenHorizontalAlignment;                                  // 0x0001   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    ScreenVerticalAlignment;                                    // 0x0002   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FVector2D                                          ScreenOffset;                                               // 0x0004   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FSBLevelSequenceTheaterQTEActorInfo                ActorInfo;                                                  // 0x0010   (0x0020)  
};

/// Struct /Script/SB.SBLevelSequenceEventQTESectionData
/// Size: 0x00C0 (192 bytes) (0x000000 - 0x0000C0) align n/a MaxSize: 0x00C0
struct FSBLevelSequenceEventQTESectionData
{ 
	bool                                               UseTakeSelectNext;                                          // 0x0000   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<float>                                      TakeSelectPercentArray;                                     // 0x0008   (0x0010)  
	bool                                               RequireWaitInput;                                           // 0x0018   (0x0001)  
	bool                                               VisibleProgress;                                            // 0x0019   (0x0001)  
	bool                                               UseSuccessFinishTakeSkip;                                   // 0x001A   (0x0001)  
	bool                                               UseFailFinishTakeSkip;                                      // 0x001B   (0x0001)  
	bool                                               ImmediateSuccessTakeSkip;                                   // 0x001C   (0x0001)  
	bool                                               ImmediateSuccessNoWaitWidgetAnimFinish;                     // 0x001D   (0x0001)  
	bool                                               UseSuccessTimeSpeedChange;                                  // 0x001E   (0x0001)  
	unsigned char                                      UnknownData07_6[0x1];                                       // 0x001F   (0x0001)  MISSED
	float                                              SuccessTimeSpeed;                                           // 0x0020   (0x0004)  
	bool                                               UseSectionFinishShowResult;                                 // 0x0024   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	float                                              HitDelayTime;                                               // 0x0028   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FString                                            HitEventName;                                               // 0x0030   (0x0010)  
	bool                                               bIgnoreOptionSuccess;                                       // 0x0040   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FName                                              SingleInputAction;                                          // 0x0044   (0x0008)  
	int32_t                                            SingleGoalInputCount;                                       // 0x004C   (0x0004)  
	bool                                               SingleCustomWidgetLocation;                                 // 0x0050   (0x0001)  
	unsigned char                                      UnknownData11_6[0x7];                                       // 0x0051   (0x0007)  MISSED
	FSBLevelSequenceTheaterQTELocationData             SingleLocationData;                                         // 0x0058   (0x0030)  
	class USBShowData*                                 SingleHitShowData;                                          // 0x0088   (0x0008)  
	FMovieSceneObjectBindingID                         SingleHitShowMainActor;                                     // 0x0090   (0x0018)  
	TArray<FMovieSceneObjectBindingID>                 SingleHitShowOtherActorArray;                               // 0x00A8   (0x0010)  
	class USBDualSenseTriggerEffectData*               SingleDualSenseData;                                        // 0x00B8   (0x0008)  
};

/// Class /Script/SB.SBLevelSequenceTheaterQTESection
/// Size: 0x01A8 (424 bytes) (0x0000E8 - 0x0001A8) align n/a MaxSize: 0x01A8
class USBLevelSequenceTheaterQTESection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceEventQTESectionData                Data;                                                       // 0x00E8   (0x00C0)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterReactionTriggerSectionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBLevelSequenceTheaterReactionTriggerSectionData
{ 
	class USBDualSenseTriggerEffectData*               DualSenseTriggerData;                                       // 0x0000   (0x0008)  
	TEnumAsByte<ESBLevelSequenceTheaterReactionTriggerType> InputKey;                                              // 0x0008   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              InputPressTime;                                             // 0x000C   (0x0004)  
	bool                                               bPressMaxStop;                                              // 0x0010   (0x0001)  
	TEnumAsByte<EHorizontalAlignment>                  ScreenHorizontalAlignment;                                  // 0x0011   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    ScreenVerticalAlignment;                                    // 0x0012   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0013   (0x0001)  MISSED
	FVector2D                                          ScreenOffset;                                               // 0x0014   (0x0008)  
	bool                                               VisibleProgress;                                            // 0x001C   (0x0001)  
	unsigned char                                      UnknownData05_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Class /Script/SB.SBLevelSequenceTheaterReactionTriggerSection
/// Size: 0x0108 (264 bytes) (0x0000E8 - 0x000108) align n/a MaxSize: 0x0108
class USBLevelSequenceTheaterReactionTriggerSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceTheaterReactionTriggerSectionData  Data;                                                       // 0x00E8   (0x0020)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterSubtitleSectionData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBLevelSequenceTheaterSubtitleSectionData
{ 
	TEnumAsByte<ESBSequencerSubtitleType>              Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FText                                              title;                                                      // 0x0008   (0x0018)  
	FText                                              Message;                                                    // 0x0020   (0x0018)  
	bool                                               bClearSubtitle;                                             // 0x0038   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              DelayCloseTime;                                             // 0x003C   (0x0004)  
	bool                                               bSkipAllow;                                                 // 0x0040   (0x0001)  
	bool                                               bUseFacialAnimTypeIndex;                                    // 0x0041   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x0042   (0x0002)  MISSED
	FName                                              FacialAnimCharacterTag;                                     // 0x0044   (0x0008)  
	TEnumAsByte<ESBSequenceContentType>                ContentType;                                                // 0x004C   (0x0001)  
	FSBLevelSequenceSectionProperty                    Blank;                                                      // 0x004D   (0x0001)  
	unsigned char                                      UnknownData07_7[0x2];                                       // 0x004E   (0x0002)  MISSED
};

/// Class /Script/SB.SBLevelSequenceTheaterSubtitleSection
/// Size: 0x0138 (312 bytes) (0x0000E8 - 0x000138) align n/a MaxSize: 0x0138
class USBLevelSequenceTheaterSubtitleSection : public UMovieSceneSection
{ 
public:
	FSBLevelSequenceTheaterSubtitleSectionData         Data;                                                       // 0x00E8   (0x0050)  
};

/// Class /Script/SB.SBLevelSequenceTheaterTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class USBLevelSequenceTheaterTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Class /Script/SB.SBLevelSequenceVisibilityTagSection
/// Size: 0x00F8 (248 bytes) (0x0000E8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBLevelSequenceVisibilityTagSection : public UMovieSceneSection
{ 
public:
	FString                                            VisibilityTag;                                              // 0x00E8   (0x0010)  
};

/// Class /Script/SB.SBLevelSequenceVisibilityTagTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class USBLevelSequenceVisibilityTagTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Class /Script/SB.SBLevelStreamingContext
/// Size: 0x0198 (408 bytes) (0x000028 - 0x000198) align n/a MaxSize: 0x0198
class USBLevelStreamingContext : public UObject
{ 
public:
	FName                                              ZoneAlias;                                                  // 0x0028   (0x0008)  
	TArray<TWeakObjectPtr<UWorld*>>                    LoadLevels;                                                 // 0x0030   (0x0010)  
	TArray<TWeakObjectPtr<UWorld*>>                    UnloadLevels;                                               // 0x0040   (0x0010)  
	TArray<class ULevelStreaming*>                     CachedLoadLevels;                                           // 0x0050   (0x0010)  
	TArray<class ULevelStreaming*>                     CachedUnloadLevels;                                         // 0x0060   (0x0010)  
	TArray<class ULevelStreaming*>                     CachedPersistentLevels;                                     // 0x0070   (0x0010)  
	TArray<class ULevelStreaming*>                     CachedOriginalLevels;                                       // 0x0080   (0x0010)  
	TArray<class ULevelStreaming*>                     CachedRemoveLevels;                                         // 0x0090   (0x0010)  
	TArray<class ULevelStreaming*>                     CachedIgnoreRemoveLevels;                                   // 0x00A0   (0x0010)  
	TArray<class ALevelStreamingVolume*>               CachedStreamingVolumes;                                     // 0x00B0   (0x0010)  
	bool                                               bRestoreLevelWhenLeave;                                     // 0x00C0   (0x0001)  
	bool                                               bVisibleAfterLoad;                                          // 0x00C1   (0x0001)  
	bool                                               bPersistentChange;                                          // 0x00C2   (0x0001)  
	bool                                               bReserved_Enter;                                            // 0x00C3   (0x0001)  
	bool                                               bReserved_Leave;                                            // 0x00C4   (0x0001)  
	bool                                               bReserved_AsyncLoadLevels;                                  // 0x00C5   (0x0001)  
	bool                                               bReserved_AsyncUnloadLevels;                                // 0x00C6   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x00C7   (0x0001)  MISSED
	TArray<TWeakObjectPtr<UWorld*>>                    PendingAsyncLevels;                                         // 0x00C8   (0x0010)  
	TArray<TWeakObjectPtr<UWorld*>>                    PendingLoadLevels;                                          // 0x00D8   (0x0010)  
	TArray<TWeakObjectPtr<UWorld*>>                    PendingUnloadLevels;                                        // 0x00E8   (0x0010)  
	TArray<TWeakObjectPtr<UWorld*>>                    AlreadyLoaded;                                              // 0x00F8   (0x0010)  
	int32_t                                            AlwaysLoadedCount;                                          // 0x0108   (0x0004)  
	int32_t                                            DynamicLoadedCount;                                         // 0x010C   (0x0004)  
	int32_t                                            LoadedCount;                                                // 0x0110   (0x0004)  
	int32_t                                            UnloadedCount;                                              // 0x0114   (0x0004)  
	int32_t                                            LoadPackageCount;                                           // 0x0118   (0x0004)  
	bool                                               bIsRunningEnter;                                            // 0x011C   (0x0001)  
	bool                                               bIsRunningLeave;                                            // 0x011D   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x011E   (0x0002)  MISSED
	class UWorld*                                      NewWorld;                                                   // 0x0120   (0x0008)  
	TArray<TWeakObjectPtr<AActor*>>                    CachedActors;                                               // 0x0128   (0x0010)  
	unsigned char                                      UnknownData05_7[0x60];                                      // 0x0138   (0x0060)  MISSED

	/// Functions
	// Function /Script/SB.SBLevelStreamingContext.OnLevelUnloaded
	constexpr static const FunctionPointer<USBLevelStreamingContext, void> OnLevelUnloaded = { 0x2781fe0, 0 }; 
	// Function /Script/SB.SBLevelStreamingContext.OnLevelShown
	constexpr static const FunctionPointer<USBLevelStreamingContext, void> OnLevelShown = { 0x2781fc0, 1 }; 
	// Function /Script/SB.SBLevelStreamingContext.OnLevelLoaded
	constexpr static const FunctionPointer<USBLevelStreamingContext, void> OnLevelLoaded = { 0x2782000, 2 }; 
};

/// Class /Script/SB.SBLevelStreamProfilerActor
/// Size: 0x0418 (1048 bytes) (0x0002C8 - 0x000418) align n/a MaxSize: 0x0418
class ASBLevelStreamProfilerActor : public AActor
{ 
public:
	unsigned char                                      UnknownData01_1[0x150];                                     // 0x02C8   (0x0150)  MISSED

	/// Functions
	// Function /Script/SB.SBLevelStreamProfilerActor.OnLevelUnloadedIterative
	constexpr static const FunctionPointer<ASBLevelStreamProfilerActor, void> OnLevelUnloadedIterative = { 0x2782720, 0 }; 
	// Function /Script/SB.SBLevelStreamProfilerActor.OnLevelUnloaded
	constexpr static const FunctionPointer<ASBLevelStreamProfilerActor, void> OnLevelUnloaded = { 0x2782740, 1 }; 
	// Function /Script/SB.SBLevelStreamProfilerActor.OnLevelLoaded
	constexpr static const FunctionPointer<ASBLevelStreamProfilerActor, void> OnLevelLoaded = { 0x2782760, 2 }; 
};

/// Class /Script/SB.SBLevelVisibilityVolume
/// Size: 0x0390 (912 bytes) (0x000318 - 0x000390) align n/a MaxSize: 0x0390
class ASBLevelVisibilityVolume : public AVolume
{ 
public:
	TArray<FName>                                      Levels;                                                     // 0x0318   (0x0010)  
	TSet<AActor*>                                      OverlapActors;                                              // 0x0328   (0x0050)  
	FVector                                            LevelObjOrigin;                                             // 0x0378   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0384   (0x000C)  
};

/// Class /Script/SB.SBLightFadeVolume
/// Size: 0x0358 (856 bytes) (0x000318 - 0x000358) align n/a MaxSize: 0x0358
class ASBLightFadeVolume : public ATriggerVolume
{ 
public:
	float                                              FadeInTime;                                                 // 0x0318   (0x0004)  
	float                                              FadeOutTime;                                                // 0x031C   (0x0004)  
	TArray<TWeakObjectPtr<ALight*>>                    TargetLights;                                               // 0x0320   (0x0010)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0330   (0x0028)  MISSED

	/// Functions
	// Function /Script/SB.SBLightFadeVolume.OnEndOverlapActor
	constexpr static const FunctionPointer<ASBLightFadeVolume, void, const AActor*, const AActor*> OnEndOverlapActor = { 0x2782c70, 0 }; 
	// Function /Script/SB.SBLightFadeVolume.OnBeginOverlapActor
	constexpr static const FunctionPointer<ASBLightFadeVolume, void, const AActor*, const AActor*> OnBeginOverlapActor = { 0x2782de0, 1 }; 
};

/// Class /Script/SB.SBLimitedScanVolume
/// Size: 0x0340 (832 bytes) (0x000318 - 0x000340) align n/a MaxSize: 0x0340
class ASBLimitedScanVolume : public AVolume
{ 
public:
	FSBMapSectorID                                     SectorID;                                                   // 0x0318   (0x0008)  
	bool                                               bActive;                                                    // 0x0320   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0321   (0x0003)  MISSED
	FVector                                            LevelObjOrigin;                                             // 0x0324   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0330   (0x000C)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x033C   (0x0004)  MISSED
};

/// Class /Script/SB.SBListViewEmptyItem
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBListViewEmptyItem : public UObject
{ 
public:
};

/// Class /Script/SB.SBListViewWidget
/// Size: 0x08B0 (2224 bytes) (0x000890 - 0x0008B0) align n/a MaxSize: 0x08B0
class USBListViewWidget : public UListView
{ 
public:
	FMulticastInlineDelegate                           BP_OnFastFocus;                                             // 0x0890   (0x0010)  
	int32_t                                            MinEmptySlotAmount;                                         // 0x08A0   (0x0004)  
	bool                                               bFillEmptySlot;                                             // 0x08A4   (0x0001)  
	bool                                               bScrollbarAlwaysTakeUpLayout;                               // 0x08A5   (0x0001)  
	unsigned char                                      UnknownData01_7[0xA];                                       // 0x08A6   (0x000A)  MISSED
};

/// Class /Script/SB.SBLoadingScreenWidget
/// Size: 0x0750 (1872 bytes) (0x000680 - 0x000750) align n/a MaxSize: 0x0750
class USBLoadingScreenWidget : public USBUserWidget
{ 
public:
	class UWidget*                                     RootWidget;                                                 // 0x0680   (0x0008)  
	class UWidget*                                     ThrobberWidget;                                             // 0x0688   (0x0008)  
	class UWidget*                                     Overlay_LoadingScreen;                                      // 0x0690   (0x0008)  
	class UProgressBar*                                ProgressBar_Shader;                                         // 0x0698   (0x0008)  
	class UImage*                                      Image_Working;                                              // 0x06A0   (0x0008)  
	class URichTextBlock*                              TextBlock_Tip;                                              // 0x06A8   (0x0008)  
	unsigned char                                      UnknownData01_7[0xA0];                                      // 0x06B0   (0x00A0)  MISSED
};

/// Class /Script/SB.SBLobbyGameMode
/// Size: 0x0510 (1296 bytes) (0x000510 - 0x000510) align n/a MaxSize: 0x0510
class ASBLobbyGameMode : public ASBGameMode
{ 
public:
};

/// Struct /Script/SB.SBMapObjectResInfoData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBMapObjectResInfoData
{ 
	TEnumAsByte<ESBOObjectDensityType>                 DensityType;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              ObjectName;                                                 // 0x0004   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	class UObject*                                     RefMeshObject;                                              // 0x0010   (0x0008)  
	float                                              FrequencyValue;                                             // 0x0018   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/SB.SBMapObjectResourceMap
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align n/a MaxSize: 0x0078
class USBMapObjectResourceMap : public UDataAsset
{ 
public:
	TArray<FSBMapObjectResInfoData>                    Objects;                                                    // 0x0030   (0x0010)  
	int32_t                                            ObjectBoundValue;                                           // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<int32_t>                                    HighDensityObjIndices;                                      // 0x0048   (0x0010)  
	TArray<int32_t>                                    MidDensityObjIndices;                                       // 0x0058   (0x0010)  
	TArray<int32_t>                                    LowDensityObjIndices;                                       // 0x0068   (0x0010)  
};

/// Struct /Script/SB.SBSectorObjectInfoData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSectorObjectInfoData
{ 
	FVector                                            position;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	int32_t                                            ObjectResourceMapIndex;                                     // 0x0018   (0x0004)  
	int32_t                                            ObjectIndex;                                                // 0x001C   (0x0004)  
};

/// Struct /Script/SB.SBSectorObjectLayerData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSectorObjectLayerData
{ 
	TArray<FSBSectorObjectInfoData>                    ObjectLists;                                                // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSectorData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBSectorData
{ 
	int32_t                                            SectorX;                                                    // 0x0000   (0x0004)  
	int32_t                                            SectorY;                                                    // 0x0004   (0x0004)  
	TArray<FSBSectorObjectLayerData>                   ObjectLayerList;                                            // 0x0008   (0x0010)  
	TArray<class USBMapObjectResourceMap*>             ResourceMapList;                                            // 0x0018   (0x0010)  
};

/// Class /Script/SB.SBMapData
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class USBMapData : public UDataAsset
{ 
public:
	TArray<FSBSectorData>                              SectorDataLists;                                            // 0x0030   (0x0010)  
};

/// Class /Script/SB.SBMeshStudioActor
/// Size: 0x06D0 (1744 bytes) (0x0002C8 - 0x0006D0) align n/a MaxSize: 0x06D0
class ASBMeshStudioActor : public AActor
{ 
public:
	unsigned char                                      UnknownData07_8[0x8];                                       // 0x02C8   (0x0008)  MISSED
	ESBMeshStudioType                                  MeshStudioType;                                             // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x02D1   (0x0007)  MISSED
	class USceneComponent*                             Root;                                                       // 0x02D8   (0x0008)  
	class USceneCaptureComponent2D*                    Capturer;                                                   // 0x02E0   (0x0008)  
	class UStaticMeshComponent*                        StaticMeshBody;                                             // 0x02E8   (0x0008)  
	class USBSkeletalMeshComponent*                    SkeletalMeshBody;                                           // 0x02F0   (0x0008)  
	TArray<FName>                                      MeshInfoTagList;                                            // 0x02F8   (0x0010)  
	TArray<FSBMeshInfo>                                MeshInfoList;                                               // 0x0308   (0x0010)  
	unsigned char                                      UnknownData09_6[0x70];                                      // 0x0318   (0x0070)  MISSED
	FName                                              CaptureTMTag;                                               // 0x0388   (0x0008)  
	TMap<FString, class UMaterialInstance*>            CanMaterials;                                               // 0x0390   (0x0050)  
	TMap<FName, FTransform>                            MeshBodyTMMap;                                              // 0x03E0   (0x0050)  
	bool                                               bDisableIdleAdditiveAnim;                                   // 0x0430   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0431   (0x0003)  MISSED
	FName                                              DefaultSBSkeletalTag;                                       // 0x0434   (0x0008)  
	FName                                              BodyCustomAnimNodeName;                                     // 0x043C   (0x0008)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x0444   (0x0004)  MISSED
	TMap<FName, FName>                                 BodyCustomAnimNodeNameMap;                                  // 0x0448   (0x0050)  
	FName                                              BodyCustomAnimAdditiveNodeName;                             // 0x0498   (0x0008)  
	TMap<TEnumAsByte<ESBSkelMeshSlot>, FName>          MeshSlotCustomAnimNodeNameMap;                              // 0x04A0   (0x0050)  
	bool                                               bShortPonyTail;                                             // 0x04F0   (0x0001)  
	unsigned char                                      UnknownData12_6[0x177];                                     // 0x04F1   (0x0177)  MISSED
	int32_t                                            ClothResetCount;                                            // 0x0668   (0x0004)  
	FName                                              ClothResetComponentTag;                                     // 0x066C   (0x0008)  
	bool                                               bFirstClothReset;                                           // 0x0674   (0x0001)  
	unsigned char                                      UnknownData13_7[0x5B];                                      // 0x0675   (0x005B)  MISSED

	/// Functions
	// Function /Script/SB.SBMeshStudioActor.SetStaticMeshFromAssetPath
	constexpr static const FunctionPointer<ASBMeshStudioActor, bool, const FString, const FName> SetStaticMeshFromAssetPath = { 0x2786170, 0 }; 
	// Function /Script/SB.SBMeshStudioActor.SetSkeletalMeshFromAssetPath
	constexpr static const FunctionPointer<ASBMeshStudioActor, bool, const FString, const FName> SetSkeletalMeshFromAssetPath = { 0x2785fa0, 1 }; 
	// Function /Script/SB.SBMeshStudioActor.SetMaterialFromAssetPath
	constexpr static const FunctionPointer<ASBMeshStudioActor, bool, const FString> SetMaterialFromAssetPath = { 0x2785e50, 2 }; 
	// Function /Script/SB.SBMeshStudioActor.NotifyBP_SetupTarget
	constexpr static const FunctionPointer<ASBMeshStudioActor, void, const FName> NotifyBP_SetupTarget = { 0x2bbb090, 3 }; 
	// Function /Script/SB.SBMeshStudioActor.NotifyBP_SetMesh
	constexpr static const FunctionPointer<ASBMeshStudioActor, void, const FName, const TEnumAsByte<ESBSkelMeshSlot>> NotifyBP_SetMesh = { 0x2bbb090, 4 }; 
	// Function /Script/SB.SBMeshStudioActor.NotifyBP_PreSetMesh
	constexpr static const FunctionPointer<ASBMeshStudioActor, void, const bool> NotifyBP_PreSetMesh = { 0x2bbb090, 5 }; 
	// Function /Script/SB.SBMeshStudioActor.NotifyBP_PostSetMesh
	constexpr static const FunctionPointer<ASBMeshStudioActor, void, const bool> NotifyBP_PostSetMesh = { 0x2bbb090, 6 }; 
	// Function /Script/SB.SBMeshStudioActor.ApplyMeshInfo
	constexpr static const FunctionPointer<ASBMeshStudioActor, void, const FName, const USBSkeletalMeshComponent*, const TEnumAsByte<ESBSkelMeshSlot>> ApplyMeshInfo = { 0x2bbb090, 7 }; 
};

/// Struct /Script/SB.MoveInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FMoveInfo
{ 
	FVector                                            position;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	float                                              DeltaSecond;                                                // 0x0018   (0x0004)  
};

/// Class /Script/SB.SBMoveTracker
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class USBMoveTracker : public UObject
{ 
public:
	TArray<FMoveInfo>                                  MoveHistory;                                                // 0x0028   (0x0010)  
	float                                              HistoryDuration;                                            // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/SB.SBMovieSceneEntitySystem
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align n/a MaxSize: 0x0090
class USBMovieSceneEntitySystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x50];                                      // 0x0040   (0x0050)  MISSED
};

/// Class /Script/SB.SBMovieSceneEntityCharacterSoundSetSystem
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class USBMovieSceneEntityCharacterSoundSetSystem : public USBMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/SB.SBMovieSceneEntitySoundEventSystem
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class USBMovieSceneEntitySoundEventSystem : public USBMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/SB.SBMovieSceneEntityTestSystem
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class USBMovieSceneEntityTestSystem : public USBMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/SB.SBMovieSceneEntityVibrationSystem
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class USBMovieSceneEntityVibrationSystem : public USBMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/SB.SBMovieSceneEventSection
/// Size: 0x00F8 (248 bytes) (0x0000F0 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBMovieSceneEventSection : public UMovieSceneEventSectionBase
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x00F0   (0x0008)  MISSED
};

/// Struct /Script/SB.SBMovieSceneEventKeyStruct
/// Size: 0x0010 (16 bytes) (0x000008 - 0x000010) align n/a MaxSize: 0x0010
struct FSBMovieSceneEventKeyStruct : FMovieSceneKeyStruct
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/SB.SBMovieSceneEventCharacterSoundSetKeyStruct
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align n/a MaxSize: 0x0018
struct FSBMovieSceneEventCharacterSoundSetKeyStruct : FSBMovieSceneEventKeyStruct
{ 
	class USBCharacterSoundSet*                        SoundSet;                                                   // 0x0010   (0x0008)  
};

/// Struct /Script/SB.SBMovieSceneEventCharacterSoundSetChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000088) align n/a MaxSize: 0x0088
struct FSBMovieSceneEventCharacterSoundSetChannel : FMovieSceneChannel
{ 
	unsigned char                                      UnknownData01_8[0x60];                                      // 0x0008   (0x0060)  MISSED
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0068   (0x0010)  
	TArray<FSBMovieSceneEventCharacterSoundSetKeyStruct> KeyValues;                                                // 0x0078   (0x0010)  
};

/// Class /Script/SB.SBMovieSceneEventCharacterSoundSetSection
/// Size: 0x0180 (384 bytes) (0x0000F8 - 0x000180) align n/a MaxSize: 0x0180
class USBMovieSceneEventCharacterSoundSetSection : public USBMovieSceneEventSection
{ 
public:
	FSBMovieSceneEventCharacterSoundSetChannel         EventChannel;                                               // 0x00F8   (0x0088)  
};

/// Struct /Script/SB.SBMovieSceneEventSoundEventKeyStruct
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align n/a MaxSize: 0x0018
struct FSBMovieSceneEventSoundEventKeyStruct : FSBMovieSceneEventKeyStruct
{ 
	FName                                              SoundEventAlias;                                            // 0x0010   (0x0008)  
};

/// Struct /Script/SB.SBMovieSceneEventSoundEventChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000088) align n/a MaxSize: 0x0088
struct FSBMovieSceneEventSoundEventChannel : FMovieSceneChannel
{ 
	unsigned char                                      UnknownData01_8[0x60];                                      // 0x0008   (0x0060)  MISSED
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0068   (0x0010)  
	TArray<FSBMovieSceneEventSoundEventKeyStruct>      KeyValues;                                                  // 0x0078   (0x0010)  
};

/// Class /Script/SB.SBMovieSceneEventSoundEventSection
/// Size: 0x0180 (384 bytes) (0x0000F8 - 0x000180) align n/a MaxSize: 0x0180
class USBMovieSceneEventSoundEventSection : public USBMovieSceneEventSection
{ 
public:
	FSBMovieSceneEventSoundEventChannel                EventChannel;                                               // 0x00F8   (0x0088)  
};

/// Struct /Script/SB.SBMovieSceneEventTestKeyStruct
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000020) align n/a MaxSize: 0x0020
struct FSBMovieSceneEventTestKeyStruct : FSBMovieSceneEventKeyStruct
{ 
	FString                                            LogData;                                                    // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBMovieSceneEventTestChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000088) align n/a MaxSize: 0x0088
struct FSBMovieSceneEventTestChannel : FMovieSceneChannel
{ 
	unsigned char                                      UnknownData01_8[0x60];                                      // 0x0008   (0x0060)  MISSED
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0068   (0x0010)  
	TArray<FSBMovieSceneEventTestKeyStruct>            KeyValues;                                                  // 0x0078   (0x0010)  
};

/// Class /Script/SB.SBMovieSceneEventTestSection
/// Size: 0x0180 (384 bytes) (0x0000F8 - 0x000180) align n/a MaxSize: 0x0180
class USBMovieSceneEventTestSection : public USBMovieSceneEventSection
{ 
public:
	FSBMovieSceneEventTestChannel                      EventChannel;                                               // 0x00F8   (0x0088)  
};

/// Class /Script/SB.SBMovieSceneEventTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class USBMovieSceneEventTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData03_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0081   (0x0003)  MISSED
	EFireEventsAtPosition                              EventPosition;                                              // 0x0084   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0085   (0x0003)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0088   (0x0010)  
};

/// Struct /Script/SB.SBMovieSceneEventVibrationKeyStruct
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000028) align n/a MaxSize: 0x0028
struct FSBMovieSceneEventVibrationKeyStruct : FSBMovieSceneEventKeyStruct
{ 
	class USBVibrationSet*                             VibrationSet;                                               // 0x0010   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0018   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x001C   (0x0004)  
	float                                              IntensityMultiplier;                                        // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/SB.SBMovieSceneEventVibrationChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000088) align n/a MaxSize: 0x0088
struct FSBMovieSceneEventVibrationChannel : FMovieSceneChannel
{ 
	unsigned char                                      UnknownData01_8[0x60];                                      // 0x0008   (0x0060)  MISSED
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0068   (0x0010)  
	TArray<FSBMovieSceneEventVibrationKeyStruct>       KeyValues;                                                  // 0x0078   (0x0010)  
};

/// Class /Script/SB.SBMovieSceneEventVibrationSection
/// Size: 0x0180 (384 bytes) (0x0000F8 - 0x000180) align n/a MaxSize: 0x0180
class USBMovieSceneEventVibrationSection : public USBMovieSceneEventSection
{ 
public:
	FSBMovieSceneEventVibrationChannel                 EventChannel;                                               // 0x00F8   (0x0088)  
};

/// Class /Script/SB.SBNavigationObjectBase
/// Size: 0x02F8 (760 bytes) (0x0002F0 - 0x0002F8) align n/a MaxSize: 0x02F8
class ASBNavigationObjectBase : public ANavigationObjectBase
{ 
public:
	bool                                               bExcludeFromActiveVolume : 1;                               // 0x02F0:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02F1   (0x0007)  MISSED
};

/// Class /Script/SB.SBNetworkGameMode
/// Size: 0x05A8 (1448 bytes) (0x000510 - 0x0005A8) align n/a MaxSize: 0x05A8
class ASBNetworkGameMode : public ASBGameMode
{ 
public:
	unsigned char                                      UnknownData01_1[0x98];                                      // 0x0510   (0x0098)  MISSED
};

/// Class /Script/SB.SBNetworkPlayerController
/// Size: 0x0858 (2136 bytes) (0x000850 - 0x000858) align n/a MaxSize: 0x0858
class ASBNetworkPlayerController : public ASBPlayerController
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0850   (0x0008)  MISSED

	/// Functions
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ZoneTriggerDoEvent
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const TEnumAsByte<ESBConditionResultType>, const int32_t> ServerRequest_ZoneTriggerDoEvent = { 0x27a4550, 0 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ZoneEnvChangeState
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName, const FName, const uint32_t, const bool> ServerRequest_ZoneEnvChangeState = { 0x27a48a0, 1 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_WarpPosition
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const int32_t, const FVector, const FRotator> ServerRequest_WarpPosition = { 0x278a4c0, 2 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_UseSkill
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const TEnumAsByte<ESBSkillCommandState>, const uint32_t, const FName, const TArray<uint32_t>, const FVector, const FVector> ServerRequest_UseSkill = { 0x27a7c30, 3 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_UpdateSkillTargetLocation
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FVector> ServerRequest_UpdateSkillTargetLocation = { 0x279ff30, 4 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_StopSkill
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const bool> ServerRequest_StopSkill = { 0x27a76d0, 5 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_SetSkillSlot
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const TEnumAsByte<ESBSkillSlotType>, const uint32_t> ServerRequest_SetSkillSlot = { 0x27a4be0, 6 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_SetMeshInfo
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const int32_t, const char, const FName, const FName, const FVector, const FRotator, const char, const FName> ServerRequest_SetMeshInfo = { 0x278bf30, 7 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_SetAimLockOnTarget
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName, const TArray<uint32_t>> ServerRequest_SetAimLockOnTarget = { 0x27a1160, 8 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_SetActiveWorldObject
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const TEnumAsByte<ESBWorldObjectType>, const FName, const TEnumAsByte<ESBObjectState>> ServerRequest_SetActiveWorldObject = { 0x27a5270, 9 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ServerTravel
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const int32_t, const FString, const bool> ServerRequest_ServerTravel = { 0x278a290, 10 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ResetZone
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName> ServerRequest_ResetZone = { 0x27a0b40, 11 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_RequestPlayerName
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ServerRequest_RequestPlayerName = { 0x27a0290, 12 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_RequestActorRevive
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t> ServerRequest_RequestActorRevive = { 0x27a0180, 13 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_RegisterSaveGame
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FSBSaveGameData_Actor, const FSBSaveGameData_Env, const FSBSaveGameData_Item, const FSBSaveGameData_Achievement> ServerRequest_RegisterSaveGame = { 0x27a0640, 14 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_PlayTheater
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t> ServerRequest_PlayTheater = { 0x27a1890, 15 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_NextStepWhenHoldAndDualSenseTriggerEffectWeaponFired
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName> ServerRequest_NextStepWhenHoldAndDualSenseTriggerEffectWeaponFired = { 0x27a78f0, 16 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_NextStepSkill
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName> ServerRequest_NextStepSkill = { 0x27a7a90, 17 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_MultiPlaySetRemainTime
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const float> ServerRequest_MultiPlaySetRemainTime = { 0x27a0430, 18 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_MultiPlayChangeRule
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const FName> ServerRequest_MultiPlayChangeRule = { 0x27a0530, 19 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_Login
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FVector, const FRotator, const int32_t, const bool> ServerRequest_Login = { 0x27a94b0, 20 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_LinkSkillBreak
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ServerRequest_LinkSkillBreak = { 0x27a0fc0, 21 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_LeaveZone
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName> ServerRequest_LeaveZone = { 0x27a9050, 22 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ItemBucketSpawn
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const char, const uint32_t, const FName, const uint32_t, const FVector, const FRotator> ServerRequest_ItemBucketSpawn = { 0x27a29b0, 23 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ItemBucketRewardGroupDrop
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const char, const uint32_t, const FName, const FVector, const float, const float, const uint32_t> ServerRequest_ItemBucketRewardGroupDrop = { 0x27a2de0, 24 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ItemBucketItemRemove
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const char, const uint32_t, const FName, const uint32_t, const int32_t> ServerRequest_ItemBucketItemRemove = { 0x27a3bb0, 25 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ItemBucketItemConsume
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const char, const uint32_t, const uint32_t, const FName, const uint32_t, const int32_t, const uint32_t, const FVector, const FName> ServerRequest_ItemBucketItemConsume = { 0x27a35f0, 26 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ItemBucketItemAdd
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const char, const uint32_t, const FName, const uint32_t, const uint32_t, const bool, const bool, const bool, const FSBItemInstanceForRPC> ServerRequest_ItemBucketItemAdd = { 0x27a3f00, 27 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ItemBucketInteraction
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const char, const uint32_t, const FGuid, const char, const uint32_t> ServerRequest_ItemBucketInteraction = { 0x27a3290, 28 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_EnterZone
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName> ServerRequest_EnterZone = { 0x27a9280, 29 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_DestructionZoneEventActor
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const FName, const FVector, const FVector> ServerRequest_DestructionZoneEventActor = { 0x27a54a0, 30 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_CreateActor
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FVector, const FRotator, const bool, const bool, const int32_t, const uint32_t, const char, const FName, const bool> ServerRequest_CreateActor = { 0x27a8a10, 31 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_Cheat
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FString, const FString> ServerRequest_Cheat = { 0x27a0ce0, 32 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ChangeBulletItem
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName> ServerRequest_ChangeBulletItem = { 0x27a13b0, 33 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_CancelEventMove
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const int32_t> ServerRequest_CancelEventMove = { 0x278b970, 34 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorUnequip
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const int32_t> ServerRequest_ActorUnequip = { 0x27a6760, 35 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorTransform
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FVector, const FRotator> ServerRequest_ActorTransform = { 0x27a7470, 36 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorStopAllCloakingEffect
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t> ServerRequest_ActorStopAllCloakingEffect = { 0x27a1780, 37 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorStancePressCommandKey
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName, const bool> ServerRequest_ActorStancePressCommandKey = { 0x27a6320, 38 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorRevival
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const bool> ServerRequest_ActorRevival = { 0x27a58b0, 39 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorRestoreSkillPoint
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const bool, const FName> ServerRequest_ActorRestoreSkillPoint = { 0x27a1550, 40 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorRespawn
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const bool> ServerRequest_ActorRespawn = { 0x27a5a50, 41 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorRemoveTargetedByEnemy
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ServerRequest_ActorRemoveTargetedByEnemy = { 0x27a5d90, 42 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorRegister
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TArray<float>> ServerRequest_ActorRegister = { 0x27a60d0, 43 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorReceiveAchievementReward
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ServerRequest_ActorReceiveAchievementReward = { 0x27a22a0, 44 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorProgressAchievementId
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const int32_t> ServerRequest_ActorProgressAchievementId = { 0x27a2070, 45 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorProgressAchievement
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const TEnumAsByte<ESBAchievementEventType>, const TEnumAsByte<ESBAchievementCategoryType>, const TArray<int32_t>, const TArray<FString>, const int32_t> ServerRequest_ActorProgressAchievement = { 0x27a1b40, 46 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorLockOnTarget
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ServerRequest_ActorLockOnTarget = { 0x27a5bf0, 47 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorLevelUp
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const TEnumAsByte<ESBCharacterLevelType>, const uint32_t, const bool, const bool> ServerRequest_ActorLevelUp = { 0x27a2660, 48 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorLanded
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const float, const float> ServerRequest_ActorLanded = { 0x27a6e70, 49 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorJump
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const bool> ServerRequest_ActorJump = { 0x279fdc0, 50 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorInteraction
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ServerRequest_ActorInteraction = { 0x27a5710, 51 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorInfo
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FVector, const FVector, const FVector, const FVector> ServerRequest_ActorInfo = { 0x27a70a0, 52 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorEquipmentRefresh
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const TArray<int32_t>, const TArray<FSBItemInstanceForRPC>> ServerRequest_ActorEquipmentRefresh = { 0x27a6bc0, 53 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorEquipment
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName, const bool> ServerRequest_ActorEquipment = { 0x27a6540, 54 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorEquipBodySuit
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName> ServerRequest_ActorEquipBodySuit = { 0x27a19a0, 55 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorEquip
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const int32_t, const FSBItemInstanceForRPC> ServerRequest_ActorEquip = { 0x27a6900, 56 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorCompleteAchievementEvent
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t> ServerRequest_ActorCompleteAchievementEvent = { 0x27a1f60, 57 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorCompleteAchievement
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const bool> ServerRequest_ActorCompleteAchievement = { 0x27a2440, 58 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_ActorAddTargetedByEnemy
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ServerRequest_ActorAddTargetedByEnemy = { 0x27a5f30, 59 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_AcquireSkillAll
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const bool> ServerRequest_AcquireSkillAll = { 0x27a4e10, 60 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_AcquireSkill
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const bool, const bool> ServerRequest_AcquireSkill = { 0x27a4fb0, 61 }; 
	// Function /Script/SB.SBNetworkPlayerController.ServerRequest_AcceptPlayerSession
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const int32_t, const FString> ServerRequest_AcceptPlayerSession = { 0x278a6e0, 62 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientResponse_SetMoveInputBlock
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const int32_t, const bool> ClientResponse_SetMoveInputBlock = { 0x278b4d0, 63 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientResponse_SetMeshInfo
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const int32_t, const char, const FName, const FName, const FVector, const FRotator, const char, const FName> ClientResponse_SetMeshInfo = { 0x278ba80, 64 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientResponse_DrawSBDebugSphere
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const FVector, const float, const int32_t, const FColor> ClientResponse_DrawSBDebugSphere = { 0x278acf0, 65 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientResponse_DrawSBDebugLine
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const FVector, const FVector, const FColor> ClientResponse_DrawSBDebugLine = { 0x278ab00, 66 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientResponse_DrawSBDebugCapsule
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const FVector, const float, const float, const FQuat, const FColor> ClientResponse_DrawSBDebugCapsule = { 0x278af60, 67 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientResponse_DrawSBDebugBox
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const FVector, const FVector, const FQuat, const FColor> ClientResponse_DrawSBDebugBox = { 0x278b260, 68 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientResponse_DrawSBDebugArrow
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const FVector, const FVector, const float, const FColor> ClientResponse_DrawSBDebugArrow = { 0x278a8a0, 69 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientResponse_DoJump
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const int32_t> ClientResponse_DoJump = { 0x278b7b0, 70 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientResponse_CancelEventMove
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const int32_t> ClientResponse_CancelEventMove = { 0x278b890, 71 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneTriggerRegister
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName, const FName, const uint32_t, const int32_t> ClientBroadcast_ZoneTriggerRegister = { 0x2792100, 72 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneTriggerDoEvent
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const FName, const TEnumAsByte<ESBConditionResultType>, const int32_t> ClientBroadcast_ZoneTriggerDoEvent = { 0x2792810, 73 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneTriggerCreate
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName, const FName, const uint32_t> ClientBroadcast_ZoneTriggerCreate = { 0x2797320, 74 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneEventActorRemove
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ClientBroadcast_ZoneEventActorRemove = { 0x2799430, 75 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneEventActorPostDestruction
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ClientBroadcast_ZoneEventActorPostDestruction = { 0x2798fb0, 76 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneEventActorDestructionStep
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FVector, const FVector, const int32_t, const TEnumAsByte<ESBElementType>, const float, const TEnumAsByte<ESBZoneEventHitAttackerType>> ClientBroadcast_ZoneEventActorDestructionStep = { 0x2798b00, 77 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneEventActorDestruction
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FVector, const FVector, const TEnumAsByte<ESBZoneEventHitAttackerType>> ClientBroadcast_ZoneEventActorDestruction = { 0x2799120, 78 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneEventActorCreate
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const int32_t, const bool, const bool, const bool, const FVector, const FRotator, const bool> ClientBroadcast_ZoneEventActorCreate = { 0x27995a0, 79 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneEnvRegister
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName, const FName, const uint32_t, const FName, const TEnumAsByte<ESBObjectState>, const TEnumAsByte<ESBZoneEnvActiveState>> ClientBroadcast_ZoneEnvRegister = { 0x2792400, 80 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneEnvCreate
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName, const FName, const uint32_t> ClientBroadcast_ZoneEnvCreate = { 0x2797590, 81 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneEnvChangeState
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const FName, const uint32_t, const bool> ClientBroadcast_ZoneEnvChangeState = { 0x2792d80, 82 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ZoneEnvChangeEnable
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TEnumAsByte<ESBObjectState>> ClientBroadcast_ZoneEnvChangeEnable = { 0x2792ba0, 83 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_UpdateMultiPlayScore
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const float, const uint32_t, const uint32_t> ClientBroadcast_UpdateMultiPlayScore = { 0x278da10, 84 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_UpdateMultiPlayRuleState
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName, const TEnumAsByte<ESBRuleState>, const float, const uint32_t> ClientBroadcast_UpdateMultiPlayRuleState = { 0x278dd00, 85 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_StopSkill
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const bool> ClientBroadcast_StopSkill = { 0x279f070, 86 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_StopEffect
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const int32_t> ClientBroadcast_StopEffect = { 0x279d8f0, 87 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_StopActorMoveToTransform
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t> ClientBroadcast_StopActorMoveToTransform = { 0x279c590, 88 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_StartSkill
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const uint32_t, const uint32_t, const TArray<uint32_t>, const FName, const FVector, const TArray<uint32_t>, const float, const FName> ClientBroadcast_StartSkill = { 0x279f750, 89 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_StartEffect
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const uint32_t, const int32_t, const float, const char, const FVector, const FRotator, const uint32_t, const uint32_t, const FVector, const FVector, const FName, const FName> ClientBroadcast_StartEffect = { 0x279de20, 90 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_SkillResultSet
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const char, const float> ClientBroadcast_SkillResultSet = { 0x2795e30, 91 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_SkillNextStep
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const TArray<uint32_t>, const bool, const TArray<uint32_t>, const float> ClientBroadcast_SkillNextStep = { 0x279f2f0, 92 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_SkillHitResult
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const uint32_t, const uint32_t, const TEnumAsByte<ESBSkillHitResult>, const FName, const FHitResult, const FVector, const FVector, const FName, const FVector, const FVector, const float, const bool, const TEnumAsByte<ESBSkillAttackDirection>, const FName> ClientBroadcast_SkillHitResult = { 0x279e6a0, 93 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ShotProjectile
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t> ClientBroadcast_ShotProjectile = { 0x279b050, 94 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_SetWorldCustomTimeScale
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const bool, const float> ClientBroadcast_SetWorldCustomTimeScale = { 0x278b640, 95 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_SetTargetEncroachment
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const float, const float, const float, const FString, const FString, const float, const bool> ClientBroadcast_SetTargetEncroachment = { 0x2790680, 96 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_SetSkillSlot
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TEnumAsByte<ESBSkillSlotType>, const uint32_t> ClientBroadcast_SetSkillSlot = { 0x2793110, 97 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_SetForceFixedLocation
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const bool> ClientBroadcast_SetForceFixedLocation = { 0x2799b70, 98 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_RunZoneEvent
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t> ClientBroadcast_RunZoneEvent = { 0x2796b50, 99 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_RetargetingProjectile
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const uint32_t, const FVector> ClientBroadcast_RetargetingProjectile = { 0x279a150, 100 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_RespawnActor
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const int32_t> ClientBroadcast_RespawnActor = { 0x27a8110, 101 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ResetZone
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t> ClientBroadcast_ResetZone = { 0x278c900, 102 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_RequestPlayerName
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FString, const uint32_t> ClientBroadcast_RequestPlayerName = { 0x278cd30, 103 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_RequestActorRevive
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ClientBroadcast_RequestActorRevive = { 0x278cbc0, 104 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_RemoveProjectile
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FVector, const bool, const bool> ClientBroadcast_RemoveProjectile = { 0x279aa40, 105 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ReleaseActor
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const int32_t> ClientBroadcast_ReleaseActor = { 0x27a83f0, 106 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_RegisterSaveGame
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FSBSaveGameData_Actor, const FSBSaveGameData_Env> ClientBroadcast_RegisterSaveGame = { 0x2791d00, 107 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ProjectileWaitEnd
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ClientBroadcast_ProjectileWaitEnd = { 0x279ad70, 108 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ProjectileUpdateDestLocation
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FVector> ClientBroadcast_ProjectileUpdateDestLocation = { 0x2799d50, 109 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ProjectileHitResult
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const FName, const TEnumAsByte<ESBSkillHitResult>, const FVector, const FVector, const FName, const FVector, const FName> ClientBroadcast_ProjectileHitResult = { 0x279a480, 110 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ProjectileArrived
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ClientBroadcast_ProjectileArrived = { 0x279aee0, 111 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_NotifyQuestEvent
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const FName, const ESBQuestEventType> ClientBroadcast_NotifyQuestEvent = { 0x278c9e0, 112 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_NightOperationResult
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const bool> ClientBroadcast_NightOperationResult = { 0x278d8a0, 113 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_LeaveZone
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const FName> ClientBroadcast_LeaveZone = { 0x278ff00, 114 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ItemBucketItemUpdate
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FSBItemInstanceForRPC> ClientBroadcast_ItemBucketItemUpdate = { 0x27936a0, 115 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ItemBucketItemSpawn
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FGuid, const uint32_t, const FVector, const FRotator, const FVector, const float, const FSBItemSpawnCasterInfo, const uint32_t, const FName, const float, const bool, const bool, const bool, const bool, const float> ClientBroadcast_ItemBucketItemSpawn = { 0x2793ec0, 116 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ItemBucketItemRemove
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FGuid, const uint32_t, const bool> ClientBroadcast_ItemBucketItemRemove = { 0x2794cd0, 117 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ItemBucketItemDespawn
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FGuid> ClientBroadcast_ItemBucketItemDespawn = { 0x2793cc0, 118 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ItemBucketItemConsume
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FGuid, const uint32_t, const uint32_t, const uint32_t, const bool> ClientBroadcast_ItemBucketItemConsume = { 0x27948b0, 119 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ItemBucketItemAdd
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FSBItemInstanceForRPC, const uint32_t, const bool, const bool> ClientBroadcast_ItemBucketItemAdd = { 0x2794fe0, 120 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ItemBucketInteraction
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const char, const uint32_t, const FGuid, const char, const uint32_t> ClientBroadcast_ItemBucketInteraction = { 0x2793930, 121 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ItemBucketDestroy
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ClientBroadcast_ItemBucketDestroy = { 0x2795420, 122 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ItemBucketCreate
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const char, const uint32_t, const bool> ClientBroadcast_ItemBucketCreate = { 0x2795590, 123 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_HittedProjectile
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FVector> ClientBroadcast_HittedProjectile = { 0x2799f50, 124 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_EnterZone
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const FName> ClientBroadcast_EnterZone = { 0x2790180, 125 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_EndTurn
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t> ClientBroadcast_EndTurn = { 0x278c490, 126 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_DespawnActor
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const int32_t> ClientBroadcast_DespawnActor = { 0x27a8280, 127 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_CreateProjectile
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const uint32_t, const uint32_t, const FVector, const FTransform, const FVector, const int32_t, const FName, const FName, const uint32_t> ClientBroadcast_CreateProjectile = { 0x279b230, 128 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_CreateActor
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const int32_t, const int32_t, const FVector, const FRotator, const bool, const int32_t, const bool> ClientBroadcast_CreateActor = { 0x27a8560, 129 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_CompleteZoneInit
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const bool> ClientBroadcast_CompleteZoneInit = { 0x278cfe0, 130 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ChangeTimeScale
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const char, const float> ClientBroadcast_ChangeTimeScale = { 0x2790400, 131 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ChangePlayerActor
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const uint32_t> ClientBroadcast_ChangePlayerActor = { 0x278d260, 132 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ApplyEffect
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TArray<uint32_t>, const TArray<float>, const FString> ClientBroadcast_ApplyEffect = { 0x279dad0, 133 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorUnequip
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const int32_t, const FSBItemInstanceForRPC> ClientBroadcast_ActorUnequip = { 0x279b940, 134 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorStatRefresh
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const TArray<float>> ClientBroadcast_ActorStatRefresh = { 0x2797c00, 135 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorSkillHitResultFromTarget
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TEnumAsByte<ESBSkillHitResult>, const uint32_t> ClientBroadcast_ActorSkillHitResultFromTarget = { 0x278e7b0, 136 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorShowUI
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TEnumAsByte<ESBUILogicType>> ClientBroadcast_ActorShowUI = { 0x2790c80, 137 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorSetVisible
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const bool> ClientBroadcast_ActorSetVisible = { 0x2791b20, 138 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorSetStance
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const bool> ClientBroadcast_ActorSetStance = { 0x278ea30, 139 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorSetSpeed
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TEnumAsByte<ESBActorSpeedType>, const float> ClientBroadcast_ActorSetSpeed = { 0x278ecb0, 140 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorSetOwnerActor
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t> ClientBroadcast_ActorSetOwnerActor = { 0x278d6c0, 141 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorSetHitStop
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const bool> ClientBroadcast_ActorSetHitStop = { 0x278e350, 142 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorSetBulletItem
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName> ClientBroadcast_ActorSetBulletItem = { 0x278e5d0, 143 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorSetActive
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const bool> ClientBroadcast_ActorSetActive = { 0x2791940, 144 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorRotation
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FRotator> ClientBroadcast_ActorRotation = { 0x2797a00, 145 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorRootMotion
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const uint32_t, const float, const float, const uint32_t, const float> ClientBroadcast_ActorRootMotion = { 0x279cc20, 146 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorRevival
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t> ClientBroadcast_ActorRevival = { 0x278e000, 147 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorRestoreSkillPoint
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const int32_t> ClientBroadcast_ActorRestoreSkillPoint = { 0x278e170, 148 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorResetSkillUsableGroup
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName> ClientBroadcast_ActorResetSkillUsableGroup = { 0x278f1e0, 149 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorResetSkillCommandUsableCount
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName> ClientBroadcast_ActorResetSkillCommandUsableCount = { 0x278f3c0, 150 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorResetSkillCommandCoolTime
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName> ClientBroadcast_ActorResetSkillCommandCoolTime = { 0x278faa0, 151 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorRemoveTargetedByEnemy
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t> ClientBroadcast_ActorRemoveTargetedByEnemy = { 0x2795a70, 152 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorRegister
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const FVector, const FRotator, const TArray<float>, const uint32_t, const char, const FName, const uint32_t, const uint32_t, const bool, const bool, const bool, const uint32_t, const uint32_t, const TArray<int32_t>, const TArray<FSBItemInstanceForRPC>> ClientBroadcast_ActorRegister = { 0x27960b0, 153 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorReceiveAchievementReward
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t> ClientBroadcast_ActorReceiveAchievementReward = { 0x2796d30, 154 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorProgressAchievement
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const uint32_t, const bool, const bool, const bool> ClientBroadcast_ActorProgressAchievement = { 0x2796f10, 155 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorNextSkill
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t> ClientBroadcast_ActorNextSkill = { 0x2791340, 156 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorMoveToTransform
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const uint32_t, const uint32_t, const float, const float, const FVector, const FVector, const float, const bool> ClientBroadcast_ActorMoveToTransform = { 0x279d0c0, 157 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorLookAt
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const float, const float, const float, const uint32_t> ClientBroadcast_ActorLookAt = { 0x2791520, 158 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorLockOnTarget
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t> ClientBroadcast_ActorLockOnTarget = { 0x2795890, 159 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorLocation
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FVector> ClientBroadcast_ActorLocation = { 0x2797800, 160 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorLevelUp
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TEnumAsByte<ESBCharacterLevelType>, const uint32_t, const bool> ClientBroadcast_ActorLevelUp = { 0x2790e60, 161 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorJump
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const bool> ClientBroadcast_ActorJump = { 0x279d710, 162 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorHitResult
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const FVector, const FVector, const FName, const FVector, const FName> ClientBroadcast_ActorHitResult = { 0x279c770, 163 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorEquipmentRefresh
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TArray<int32_t>, const TArray<FSBItemInstanceForRPC>> ClientBroadcast_ActorEquipmentRefresh = { 0x279c010, 164 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorEquipment
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const bool> ClientBroadcast_ActorEquipment = { 0x279c310, 165 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorEquip
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const int32_t, const FSBItemInstanceForRPC, const bool> ClientBroadcast_ActorEquip = { 0x279bc60, 166 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorEnableOverlapCollisions
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TArray<FString>, const bool> ClientBroadcast_ActorEnableOverlapCollisions = { 0x278ef30, 167 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorDead
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const uint32_t, const uint32_t, const uint32_t, const bool, const bool> ClientBroadcast_ActorDead = { 0x2797eb0, 168 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorChangeTribe
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName> ClientBroadcast_ActorChangeTribe = { 0x278d4e0, 169 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorApplyState
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TEnumAsByte<ESBActorState>, const bool, const int32_t> ClientBroadcast_ActorApplyState = { 0x2798340, 170 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorApplyStat
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TEnumAsByte<ESBActorStatType>, const float, const bool, const bool, const uint32_t, const float> ClientBroadcast_ActorApplyStat = { 0x2798660, 171 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorAddTargetedByEnemy
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t> ClientBroadcast_ActorAddTargetedByEnemy = { 0x2795c50, 172 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorAdditiveSkillEnergyAmount
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const float> ClientBroadcast_ActorAdditiveSkillEnergyAmount = { 0x278fc80, 173 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorAdditiveSkillCoolTime
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const float> ClientBroadcast_ActorAdditiveSkillCoolTime = { 0x278f5a0, 174 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorAdditiveSkillCommandCoolTime
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const FName, const float> ClientBroadcast_ActorAdditiveSkillCommandCoolTime = { 0x278f820, 175 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorAddedItemAutoLevelUpType
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TEnumAsByte<ESBCharacterLevelType>, const uint32_t, const int32_t, const int32_t> ClientBroadcast_ActorAddedItemAutoLevelUpType = { 0x278c570, 176 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_ActorAction
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const TEnumAsByte<ESBActorAction>> ClientBroadcast_ActorAction = { 0x2791160, 177 }; 
	// Function /Script/SB.SBNetworkPlayerController.ClientBroadcast_AcquireSkill
	constexpr static const FunctionPointer<ASBNetworkPlayerController, void, const uint32_t, const uint32_t, const uint32_t, const bool, const uint32_t> ClientBroadcast_AcquireSkill = { 0x2793390, 178 }; 
};

/// Class /Script/SB.SBNetworkPlayerState
/// Size: 0x03E0 (992 bytes) (0x0003C8 - 0x0003E0) align n/a MaxSize: 0x03E0
class ASBNetworkPlayerState : public APlayerState
{ 
public:
	int32_t                                            ActorNetGuid;                                               // 0x03C8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x03CC   (0x0004)  MISSED
	FString                                            PlayerSessionId;                                            // 0x03D0   (0x0010)  

	/// Functions
	// Function /Script/SB.SBNetworkPlayerState.OnRep_PlayerSessionId
	constexpr static const FunctionPointer<ASBNetworkPlayerState, void> OnRep_PlayerSessionId = { 0x27ade90, 0 }; 
	// Function /Script/SB.SBNetworkPlayerState.OnRep_ActorGuid
	constexpr static const FunctionPointer<ASBNetworkPlayerState, void> OnRep_ActorGuid = { 0x27adeb0, 1 }; 
};

/// Class /Script/SB.SBObjectMaterialData
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
class USBObjectMaterialData : public UDataAsset
{ 
public:
	float                                              Weight;                                                     // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FName>                                      Categorys;                                                  // 0x0038   (0x0010)  
};

/// Class /Script/SB.SBOccluderTurnOffVolume
/// Size: 0x0340 (832 bytes) (0x000318 - 0x000340) align n/a MaxSize: 0x0340
class ASBOccluderTurnOffVolume : public AVolume
{ 
public:
	TArray<TWeakObjectPtr<AStaticMeshActor*>>          StaticMeshActors;                                           // 0x0318   (0x0010)  
	TArray<TWeakObjectPtr<USkeletalMeshComponent*>>    SkeletalMeshComponents;                                     // 0x0328   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0338   (0x0008)  MISSED

	/// Functions
	// Function /Script/SB.SBOccluderTurnOffVolume.OnEndOverlapActor
	constexpr static const FunctionPointer<ASBOccluderTurnOffVolume, void, const AActor*, const AActor*> OnEndOverlapActor = { 0x27ae640, 0 }; 
	// Function /Script/SB.SBOccluderTurnOffVolume.OnBeginOverlapActor
	constexpr static const FunctionPointer<ASBOccluderTurnOffVolume, void, const AActor*, const AActor*> OnBeginOverlapActor = { 0x27ae7b0, 1 }; 
};

/// Class /Script/SB.SBOptimizationActor
/// Size: 0x0430 (1072 bytes) (0x0002C8 - 0x000430) align n/a MaxSize: 0x0430
class ASBOptimizationActor : public AActor
{ 
public:
	bool                                               bKeepTransformWhenDisableTick;                              // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x02C9   (0x0003)  MISSED
	float                                              DisableOptimizationDistance;                                // 0x02CC   (0x0004)  
	bool                                               bDisableOptimization;                                       // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x02D1   (0x0003)  MISSED
	float                                              UnderWaterLinearDamping;                                    // 0x02D4   (0x0004)  
	float                                              UnderWaterAngularDamping;                                   // 0x02D8   (0x0004)  
	bool                                               bUseSequencer : 1;                                          // 0x02DC:0 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x02DD   (0x0003)  MISSED
	TArray<class UPrimitiveComponent*>                 PrimitiveComponents;                                        // 0x02E0   (0x0010)  
	TArray<TWeakObjectPtr<UPrimitiveComponent*>>       SimulatingPhysicsPrimitiveComponents;                       // 0x02F0   (0x0010)  
	bool                                               bVisible;                                                   // 0x0300   (0x0001)  
	unsigned char                                      UnknownData10_6[0xF];                                       // 0x0301   (0x000F)  MISSED
	FTransform                                         KeepTransform;                                              // 0x0310   (0x0030)  
	float                                              ViewDistance;                                               // 0x0340   (0x0004)  
	int32_t                                            OverlapPhysicsActorCount;                                   // 0x0344   (0x0004)  
	int32_t                                            CheckIgnorePawnHitCount;                                    // 0x0348   (0x0004)  
	float                                              IgnorePawnKeepTime;                                         // 0x034C   (0x0004)  
	bool                                               bForceDisableFromLevelSequence;                             // 0x0350   (0x0001)  
	bool                                               bCurrentForceDisableFromLevelSequence;                      // 0x0351   (0x0001)  
	unsigned char                                      UnknownData11_6[0x9A];                                      // 0x0352   (0x009A)  MISSED
	bool                                               bHideByEventContents;                                       // 0x03EC   (0x0001)  
	unsigned char                                      UnknownData12_6[0x33];                                      // 0x03ED   (0x0033)  MISSED
	bool                                               bIsIntervalUpdate;                                          // 0x0420   (0x0001)  
	unsigned char                                      UnknownData13_7[0xF];                                       // 0x0421   (0x000F)  MISSED

	/// Functions
	// Function /Script/SB.SBOptimizationActor.UpdateWaterHeight
	constexpr static const FunctionPointer<ASBOptimizationActor, void, const TArray<FName>&, const UStaticMeshComponent*, const float, const float, const float> UpdateWaterHeight = { 0x27ae9e0, 0 }; 
	// Function /Script/SB.SBOptimizationActor.OnCollisionPhysicsOverlapEnd
	constexpr static const FunctionPointer<ASBOptimizationActor, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t> OnCollisionPhysicsOverlapEnd = { 0x27af0d0, 1 }; 
	// Function /Script/SB.SBOptimizationActor.OnCollisionPhysicsOverlapBegin
	constexpr static const FunctionPointer<ASBOptimizationActor, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t, const bool, const FHitResult&> OnCollisionPhysicsOverlapBegin = { 0x27af350, 2 }; 
	// Function /Script/SB.SBOptimizationActor.OnCollisionOriginHit
	constexpr static const FunctionPointer<ASBOptimizationActor, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const FVector, const FHitResult&> OnCollisionOriginHit = { 0x27aed90, 3 }; 
	// Function /Script/SB.SBOptimizationActor.NotifyBP_Wake
	constexpr static const FunctionPointer<ASBOptimizationActor, void> NotifyBP_Wake = { 0x2bbb090, 4 }; 
	// Function /Script/SB.SBOptimizationActor.NotifyBP_Sleep
	constexpr static const FunctionPointer<ASBOptimizationActor, void> NotifyBP_Sleep = { 0x2bbb090, 5 }; 
	// Function /Script/SB.SBOptimizationActor.EventUnderWater
	constexpr static const FunctionPointer<ASBOptimizationActor, void, const FVector> EventUnderWater = { 0x2bbb090, 6 }; 
};

/// Class /Script/SB.SBParallelTickInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBParallelTickInterface : public UInterface
{ 
public:
};

/// Struct /Script/SB.SBLevelStreamVolumeTracker
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FSBLevelStreamVolumeTracker
{ 
	TMap<FName, bool>                                  LevelStatus;                                                // 0x0000   (0x0050)  
	TMap<FString, bool>                                VolumeStatus;                                               // 0x0050   (0x0050)  
};

/// Class /Script/SB.SBPerformanceProfilerActor
/// Size: 0x03D8 (984 bytes) (0x0002C8 - 0x0003D8) align n/a MaxSize: 0x03D8
class ASBPerformanceProfilerActor : public AActor
{ 
public:
	class UCameraComponent*                            CameraComponent;                                            // 0x02C8   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x02D0   (0x0008)  
	class USplineComponent*                            CameraSpline;                                               // 0x02D8   (0x0008)  
	float                                              CameraPreviewDistance;                                      // 0x02E0   (0x0004)  
	float                                              LimitValue;                                                 // 0x02E4   (0x0004)  
	float                                              MoveDistancePerSecond;                                      // 0x02E8   (0x0004)  
	bool                                               bStart;                                                     // 0x02EC   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x02ED   (0x0003)  MISSED
	float                                              CurrentDistance;                                            // 0x02F0   (0x0004)  
	float                                              RemainCheckDistance;                                        // 0x02F4   (0x0004)  
	bool                                               bCheckGPU;                                                  // 0x02F8   (0x0001)  
	bool                                               bCheckLevel;                                                // 0x02F9   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x02FA   (0x0002)  MISSED
	float                                              MoveSpeedScale;                                             // 0x02FC   (0x0004)  
	class ACameraActor*                                ViewTargetActor;                                            // 0x0300   (0x0008)  
	FString                                            Filename;                                                   // 0x0308   (0x0010)  
	int32_t                                            RecordCount;                                                // 0x0318   (0x0004)  
	float                                              LockCameraDistance;                                         // 0x031C   (0x0004)  
	float                                              MaxUsedMem;                                                 // 0x0320   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0324   (0x0004)  MISSED
	FSBLevelStreamVolumeTracker                        LevelStreamVolumeTracker;                                   // 0x0328   (0x00A0)  
	bool                                               bCheckFinishedLevelStreaming;                               // 0x03C8   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x03C9   (0x0003)  MISSED
	float                                              CheckFinishedLevelStreamingTime;                            // 0x03CC   (0x0004)  
	bool                                               bPrintProfileLog;                                           // 0x03D0   (0x0001)  
	unsigned char                                      UnknownData09_7[0x7];                                       // 0x03D1   (0x0007)  MISSED
};

/// Class /Script/SB.SBPhotoModeAxisObserver
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBPhotoModeAxisObserver : public UObject
{ 
public:
};

/// Class /Script/SB.SBPhotoModeBlockingVolume
/// Size: 0x0330 (816 bytes) (0x000318 - 0x000330) align n/a MaxSize: 0x0330
class ASBPhotoModeBlockingVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData01_1[0x18];                                      // 0x0318   (0x0018)  MISSED
};

/// Class /Script/SB.SBPhotoModePawn
/// Size: 0x03E0 (992 bytes) (0x000350 - 0x0003E0) align n/a MaxSize: 0x03E0
class ASBPhotoModePawn : public ADefaultPawn
{ 
public:
	class UCameraComponent*                            Camera;                                                     // 0x0350   (0x0008)  
	class UMaterialInstanceDynamic*                    DOF_VisualizeMID;                                           // 0x0358   (0x0008)  
	class UMaterialInstanceDynamic*                    ZoomBlurMID;                                                // 0x0360   (0x0008)  
	class UMaterialInstanceDynamic*                    ChromaticAberrationMID;                                     // 0x0368   (0x0008)  
	class UMaterialInstanceDynamic*                    HueMID;                                                     // 0x0370   (0x0008)  
	class UMaterialInstanceDynamic*                    NoLightMID;                                                 // 0x0378   (0x0008)  
	TArray<class UMaterialInstanceDynamic*>            ImageGrainMIDArray;                                         // 0x0380   (0x0010)  
	TArray<class UMaterialInstanceDynamic*>            ImageFilters;                                               // 0x0390   (0x0010)  
	TArray<class UMaterialInstanceDynamic*>            HDRImageFilters;                                            // 0x03A0   (0x0010)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x03B0   (0x0030)  MISSED
};

/// Class /Script/SB.SBPhotoModeCutSceneCameraPawn
/// Size: 0x03E0 (992 bytes) (0x0003E0 - 0x0003E0) align n/a MaxSize: 0x03E0
class ASBPhotoModeCutSceneCameraPawn : public ASBPhotoModePawn
{ 
public:
};

/// Class /Script/SB.SBPhotoModeIgnoredBlockWall
/// Size: 0x02C8 (712 bytes) (0x0002C8 - 0x0002C8) align n/a MaxSize: 0x02C8
class ASBPhotoModeIgnoredBlockWall : public AActor
{ 
public:
};

/// Class /Script/SB.SBPhotoModePawnMovementComponent
/// Size: 0x0180 (384 bytes) (0x000178 - 0x000180) align n/a MaxSize: 0x0180
class USBPhotoModePawnMovementComponent : public USpectatorPawnMovement
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0178   (0x0008)  MISSED
};

/// Class /Script/SB.SBPhotoModeSelfieCameraPawn
/// Size: 0x0460 (1120 bytes) (0x0003E0 - 0x000460) align n/a MaxSize: 0x0460
class ASBPhotoModeSelfieCameraPawn : public ASBPhotoModePawn
{ 
public:
	unsigned char                                      UnknownData01_1[0x80];                                      // 0x03E0   (0x0080)  MISSED
};

/// Class /Script/SB.SBPhysicalMaterial
/// Size: 0x0118 (280 bytes) (0x000080 - 0x000118) align n/a MaxSize: 0x0118
class USBPhysicalMaterial : public UPhysicalMaterial
{ 
public:
	float                                              FrictionToSlidingVelocity;                                  // 0x0080   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	class UCurveFloat*                                 MoveScaleCurveOnSliding;                                    // 0x0088   (0x0008)  
	bool                                               bEnableSliding;                                             // 0x0090   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	float                                              StartSlidingDegree;                                         // 0x0094   (0x0004)  
	float                                              StartSlidingSlipDegree;                                     // 0x0098   (0x0004)  
	float                                              SlidingAcceleration;                                        // 0x009C   (0x0004)  
	float                                              SlidingSlipAcceleration;                                    // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	FString                                            SlidingSlipStartAnimPath;                                   // 0x00A8   (0x0010)  
	bool                                               bOverrideSlidingSlipStartAnimPath;                          // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x00B9   (0x0003)  MISSED
	float                                              StartSlidingZ;                                              // 0x00BC   (0x0004)  
	float                                              StartSlidingSlipZ;                                          // 0x00C0   (0x0004)  
	bool                                               bEnableCameraUnderBoundCollision;                           // 0x00C4   (0x0001)  
	bool                                               bEnableWallRun;                                             // 0x00C5   (0x0001)  
	bool                                               bEnableWallRunYawControl;                                   // 0x00C6   (0x0001)  
	unsigned char                                      UnknownData11_6[0x1];                                       // 0x00C7   (0x0001)  MISSED
	float                                              OverrideWallRunJumpScale;                                   // 0x00C8   (0x0004)  
	float                                              MinDegreeWallRunByNormal;                                   // 0x00CC   (0x0004)  
	float                                              MaxDegreeWallRunByNormal;                                   // 0x00D0   (0x0004)  
	bool                                               bPhysicalForceInteractionForCharacter;                      // 0x00D4   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x00D5   (0x0003)  MISSED
	FName                                              PhysicalForceCenterBone;                                    // 0x00D8   (0x0008)  
	float                                              PhysicalForceDist;                                          // 0x00E0   (0x0004)  
	int32_t                                            PhysicalForceInteractionMaxCount;                           // 0x00E4   (0x0004)  
	float                                              PhysicalForceInteractionActiveDegree;                       // 0x00E8   (0x0004)  
	float                                              PhysicalForceScale;                                         // 0x00EC   (0x0004)  
	float                                              PhysicalForceInterval;                                      // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	TArray<FName>                                      OverrideEffectAlias;                                        // 0x00F8   (0x0010)  
	TArray<uint32_t>                                   OverrideEffectVolumeID;                                     // 0x0108   (0x0010)  
};

/// Class /Script/SB.SBPlayerInput
/// Size: 0x01D8 (472 bytes) (0x000028 - 0x0001D8) align n/a MaxSize: 0x01D8
class USBPlayerInput : public UObject
{ 
public:
	float                                              HoldKeyDuration;                                            // 0x0028   (0x0004)  
	float                                              ForceWalkBlockDuration;                                     // 0x002C   (0x0004)  
	TArray<FKey>                                       DefinedSprintKeyLists;                                      // 0x0030   (0x0010)  
	TArray<FKey>                                       DefinedSprintActionKeyLists;                                // 0x0040   (0x0010)  
	TArray<FName>                                      DefinedSprintActionLists;                                   // 0x0050   (0x0010)  
	TArray<FKey>                                       DefinedSwimUpKeyLists;                                      // 0x0060   (0x0010)  
	TArray<FKey>                                       DefinedSwimDownKeyLists;                                    // 0x0070   (0x0010)  
	TArray<FKey>                                       DefinedSwimUpActionKeyLists;                                // 0x0080   (0x0010)  
	TArray<FName>                                      DefinedSwimUpActionLists;                                   // 0x0090   (0x0010)  
	TArray<FKey>                                       DefinedSwimDownActionKeyLists;                              // 0x00A0   (0x0010)  
	TArray<FName>                                      DefinedSwimDownActionLists;                                 // 0x00B0   (0x0010)  
	TArray<FKey>                                       DefinedFlyActionKeyLists;                                   // 0x00C0   (0x0010)  
	TArray<FKey>                                       DefinedEventMoveSlidingKeyLists;                            // 0x00D0   (0x0010)  
	TArray<FKey>                                       DefinedCinematicSpeedUpComboKeyLists;                       // 0x00E0   (0x0010)  
	float                                              CinematicSpeedUpScale;                                      // 0x00F0   (0x0004)  
	bool                                               bOnCinematicSpeedUp;                                        // 0x00F4   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x00F5   (0x0003)  MISSED
	TArray<FKey>                                       DefinedJumpKeyLists;                                        // 0x00F8   (0x0010)  
	TArray<FKey>                                       DefinedTimeControlKeyLists;                                 // 0x0108   (0x0010)  
	FKey                                               DefinedWireActionPadKey;                                    // 0x0118   (0x0018)  
	float                                              MoveInputSizeForWalk;                                       // 0x0130   (0x0004)  
	float                                              MoveInputSizeForJogging;                                    // 0x0134   (0x0004)  
	TArray<FKey>                                       DefinedForceWalkKey;                                        // 0x0138   (0x0010)  
	TArray<FKey>                                       DefinedForceWalkActionKeyLists;                             // 0x0148   (0x0010)  
	TArray<char>                                       DefinedForceWalkActionKeyStateLists;                        // 0x0158   (0x0010)  
	int8_t                                             FirstPressedForceWalkKeyIndex;                              // 0x0168   (0x0001)  
	int8_t                                             SkipPressedForceWalkKeyIndex;                               // 0x0169   (0x0001)  
	unsigned char                                      UnknownData08_6[0x6];                                       // 0x016A   (0x0006)  MISSED
	TArray<FName>                                      DefinedForceWalkActionLists;                                // 0x0170   (0x0010)  
	float                                              RemainHoldSprintKeyDuration;                                // 0x0180   (0x0004)  
	float                                              RemainHoldJumpKeyDuration;                                  // 0x0184   (0x0004)  
	float                                              RemainHoldEventSlidingKeyDuration;                          // 0x0188   (0x0004)  
	float                                              RemainForceWalkKeyBlockDuration;                            // 0x018C   (0x0004)  
	bool                                               bHoldJumpKey;                                               // 0x0190   (0x0001)  
	bool                                               bHoldSprintKey;                                             // 0x0191   (0x0001)  
	bool                                               bHoldEventMoveSlidingKey;                                   // 0x0192   (0x0001)  
	bool                                               bPushedFlyingActionKey;                                     // 0x0193   (0x0001)  
	bool                                               bPushedSwimUpKey;                                           // 0x0194   (0x0001)  
	bool                                               bPushedSwimDownKey;                                         // 0x0195   (0x0001)  
	bool                                               bPushedTimeControlKey;                                      // 0x0196   (0x0001)  
	bool                                               bPushedJumpKey;                                             // 0x0197   (0x0001)  
	bool                                               bPushedSprintKey;                                           // 0x0198   (0x0001)  
	bool                                               bPushedForceWalkKey;                                        // 0x0199   (0x0001)  
	bool                                               bToggleForceWalk;                                           // 0x019A   (0x0001)  
	unsigned char                                      UnknownData09_6[0x1];                                       // 0x019B   (0x0001)  MISSED
	int32_t                                            BlockCountUpdateToggleWalk;                                 // 0x019C   (0x0004)  
	bool                                               bMoveInputFromPad;                                          // 0x01A0   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x01A1   (0x0003)  MISSED
	float                                              MoveInputX;                                                 // 0x01A4   (0x0004)  
	float                                              MoveInputY;                                                 // 0x01A8   (0x0004)  
	float                                              GamePadMoveInputHoldTime;                                   // 0x01AC   (0x0004)  
	float                                              GamePadMoveValueCorrection;                                 // 0x01B0   (0x0004)  
	bool                                               bLeftStickHit;                                              // 0x01B4   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x01B5   (0x0003)  MISSED
	float                                              LeftStickSize;                                              // 0x01B8   (0x0004)  
	bool                                               bRightStickHit;                                             // 0x01BC   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x01BD   (0x0003)  MISSED
	float                                              RightStickSize;                                             // 0x01C0   (0x0004)  
	unsigned char                                      UnknownData13_7[0x14];                                      // 0x01C4   (0x0014)  MISSED
};

/// Class /Script/SB.SBPlayerInputManager
/// Size: 0x03A8 (936 bytes) (0x0003A8 - 0x0003A8) align n/a MaxSize: 0x03A8
class USBPlayerInputManager : public UPlayerInput
{ 
public:
};

/// Struct /Script/SB.SBPMatParticleSetInfo
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FSBPMatParticleSetInfo
{ 
	float                                              Scale;                                                      // 0x0000   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FSBNiagaraSystemWithOverrideParam                  NiagaraSystem;                                              // 0x0008   (0x0068)  
	FSoftObjectPath                                    ParticleSystemPath;                                         // 0x0070   (0x0018)  
	float                                              CustomDialation;                                            // 0x0088   (0x0004)  
	bool                                               bCastShadow;                                                // 0x008C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	TArray<FParticleSysParam>                          InstanceParameters;                                         // 0x0090   (0x0010)  
};

/// Struct /Script/SB.SBDecalParamCurve
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FSBDecalParamCurve
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	FRuntimeFloatCurve                                 Curve;                                                      // 0x0008   (0x0088)  
};

/// Struct /Script/SB.SBPMaDecalInfo
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSBPMaDecalInfo
{ 
	class UMaterialInterface*                          DecalMaterial;                                              // 0x0000   (0x0008)  
	FVector                                            Size;                                                       // 0x0008   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0014   (0x000C)  
	float                                              LifeTime;                                                   // 0x0020   (0x0004)  
	float                                              FadeInDuration;                                             // 0x0024   (0x0004)  
	float                                              FadeOutDuration;                                            // 0x0028   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	TArray<FSBDecalParamCurve>                         ParamCurves;                                                // 0x0030   (0x0010)  
	bool                                               bCurveNormalizedAge;                                        // 0x0040   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Struct /Script/SB.SBPMatParticleSetInfoArray
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBPMatParticleSetInfoArray
{ 
	TArray<FSBPMatParticleSetInfo>                     Array;                                                      // 0x0000   (0x0010)  
	TArray<FSBPMaDecalInfo>                            DecalArray;                                                 // 0x0010   (0x0010)  
	TArray<class USoundBase*>                          SoundArray;                                                 // 0x0020   (0x0010)  
	class USoundClass*                                 SoundClassOverride;                                         // 0x0030   (0x0008)  
	class USoundAttenuation*                           AttenuationOverride;                                        // 0x0038   (0x0008)  
	TArray<class USBVibrationSet*>                     VibrationSetArray;                                          // 0x0040   (0x0010)  
};

/// Class /Script/SB.SBPMaterialParticleSet
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class USBPMaterialParticleSet : public UDataAsset
{ 
public:
	TMap<TEnumAsByte<EPhysicalSurface>, FSBPMatParticleSetInfoArray> PhysParticleMap;                              // 0x0030   (0x0050)  

	/// Functions
	// Function /Script/SB.SBPMaterialParticleSet.GetSBPMatParticleSetInfoArray
	constexpr static const FunctionPointer<USBPMaterialParticleSet, FSBPMatParticleSetInfoArray, const TEnumAsByte<EPhysicalSurface>> GetSBPMatParticleSetInfoArray = { 0x27b2f30, 0 }; 
};

/// Struct /Script/SB.SBPrimaryAssetLabelInfo
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align n/a MaxSize: 0x0078
struct FSBPrimaryAssetLabelInfo
{ 
	class UPrimaryAssetLabel*                          PrimaryAssetLabel;                                          // 0x0000   (0x0008)  
	TArray<TWeakObjectPtr<UObject*>>                   LevelArray;                                                 // 0x0008   (0x0010)  
	TArray<FDirectoryPath>                             AssetDirectoryArray;                                        // 0x0018   (0x0010)  
	FFilePath                                          FileOpenLogPath;                                            // 0x0028   (0x0010)  
	TArray<TWeakObjectPtr<UObject*>>                   ExplicitAssets;                                             // 0x0038   (0x0010)  
	TArray<TSoftObjectPtr<UClass*>>                    ExplicitBlueprints;                                         // 0x0048   (0x0010)  
	TArray<TWeakObjectPtr<UObject*>>                   AssetsToAppend;                                             // 0x0058   (0x0010)  
	TArray<FString>                                    ResourceCacheCharacterAliasToAppend;                        // 0x0068   (0x0010)  
};

/// Class /Script/SB.SBPrimaryAssetLabelGenerator
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
class USBPrimaryAssetLabelGenerator : public UDataAsset
{ 
public:
	TArray<FSBPrimaryAssetLabelInfo>                   PrimaryAssetLabelInfoArray;                                 // 0x0030   (0x0010)  
	int32_t                                            ChunkCount;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/SB.SBLevelListViewItemWidget
/// Size: 0x06A0 (1696 bytes) (0x000680 - 0x0006A0) align n/a MaxSize: 0x06A0
class USBLevelListViewItemWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x20];                                      // 0x0680   (0x0020)  MISSED
};

/// Class /Script/SB.SBTextureListViewItemWidget
/// Size: 0x06A0 (1696 bytes) (0x000680 - 0x0006A0) align n/a MaxSize: 0x06A0
class USBTextureListViewItemWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x20];                                      // 0x0680   (0x0020)  MISSED
};

/// Class /Script/SB.SBPrimitiveListViewItemWidget
/// Size: 0x06A8 (1704 bytes) (0x000680 - 0x0006A8) align n/a MaxSize: 0x06A8
class USBPrimitiveListViewItemWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x28];                                      // 0x0680   (0x0028)  MISSED

	/// Functions
	// Function /Script/SB.SBPrimitiveListViewItemWidget.OnClickedObjectToggleVisible
	constexpr static const FunctionPointer<USBPrimitiveListViewItemWidget, void> OnClickedObjectToggleVisible = { 0x27b5760, 0 }; 
};

/// Class /Script/SB.SBProfilingWidget
/// Size: 0x06B8 (1720 bytes) (0x000680 - 0x0006B8) align n/a MaxSize: 0x06B8
class USBProfilingWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x38];                                      // 0x0680   (0x0038)  MISSED

	/// Functions
	// Function /Script/SB.SBProfilingWidget.OnClickedUnload
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedUnload = { 0x27b5c40, 0 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedObjectToggleStaticVisible
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedObjectToggleStaticVisible = { 0x27b5b50, 1 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedObjectToggleSkeletalVisible
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedObjectToggleSkeletalVisible = { 0x27b5b70, 2 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedObjectToggleAllVisible
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedObjectToggleAllVisible = { 0x27b5b90, 3 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedObjectCollect
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedObjectCollect = { 0x27b5bb0, 4 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedMenu_TextureList
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedMenu_TextureList = { 0x27b5ce0, 5 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedMenu_ObjectList
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedMenu_ObjectList = { 0x27b5cc0, 6 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedMenu_LevelStream
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedMenu_LevelStream = { 0x27b5d00, 7 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedLoad
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedLoad = { 0x27b5c60, 8 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedCollectTextureList
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedCollectTextureList = { 0x27b5bd0, 9 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedClose
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedClose = { 0x27b5c80, 10 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedAllUnload
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedAllUnload = { 0x27b5c00, 11 }; 
	// Function /Script/SB.SBProfilingWidget.OnClickedAllLoad
	constexpr static const FunctionPointer<USBProfilingWidget, void> OnClickedAllLoad = { 0x27b5c20, 12 }; 
};

/// Class /Script/SB.SBProgressState
/// Size: 0x02D8 (728 bytes) (0x0002C8 - 0x0002D8) align n/a MaxSize: 0x02D8
class ASBProgressState : public AActor
{ 
public:
	float                                              Progress;                                                   // 0x02C8   (0x0004)  
	float                                              StartProgress;                                              // 0x02CC   (0x0004)  
	float                                              EditorViewProgress;                                         // 0x02D0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x02D4   (0x0004)  MISSED

	/// Functions
	// Function /Script/SB.SBProgressState.NotifyChangedProgress
	constexpr static const FunctionPointer<ASBProgressState, void, const float> NotifyChangedProgress = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBProgressState.ChangeProgress
	constexpr static const FunctionPointer<ASBProgressState, void, const float> ChangeProgress = { 0x27b63a0, 1 }; 
};

/// Struct /Script/SB.SBProjectileUpdateInfo
/// Size: 0x00C8 (200 bytes) (0x000000 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FSBProjectileUpdateInfo
{ 
	float                                              Speed;                                                      // 0x0000   (0x0004)  
	float                                              SpeedRandom;                                                // 0x0004   (0x0004)  
	float                                              Accelation;                                                 // 0x0008   (0x0004)  
	float                                              MinSpeed;                                                   // 0x000C   (0x0004)  
	float                                              MaxSpeed;                                                   // 0x0010   (0x0004)  
	bool                                               bSpeedFromDuration;                                         // 0x0014   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	float                                              MovementCurveRepeatDistance;                                // 0x0018   (0x0004)  
	float                                              MovementCurveScaleDistance;                                 // 0x001C   (0x0004)  
	TEnumAsByte<ESBMovementCurveType>                  MovementCurveType;                                          // 0x0020   (0x0001)  
	bool                                               bAutoGenerationMovementCurve;                               // 0x0021   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x0022   (0x0002)  MISSED
	FVector                                            AutoGenerationMovementCurveMin;                             // 0x0024   (0x000C)  
	FVector                                            AutoGenerationMovementCurveMax;                             // 0x0030   (0x000C)  
	FVector                                            AutoGenerationMovementCurveRecordTime;                      // 0x003C   (0x000C)  
	bool                                               bMovementCurveAxisPlane;                                    // 0x0048   (0x0001)  
	unsigned char                                      UnknownData09_6[0x7];                                       // 0x0049   (0x0007)  MISSED
	class UCurveVector*                                MovementCurve;                                              // 0x0050   (0x0008)  
	float                                              FixedLocationTime;                                          // 0x0058   (0x0004)  
	float                                              FixedLocationRemainingDistance;                             // 0x005C   (0x0004)  
	float                                              FixedLocationAdditiveForwardDistance;                       // 0x0060   (0x0004)  
	float                                              Gravity;                                                    // 0x0064   (0x0004)  
	float                                              SpeedFromMinDistance;                                       // 0x0068   (0x0004)  
	float                                              SpeedFromMaxDistance;                                       // 0x006C   (0x0004)  
	float                                              ParabolicMotionXYSpeedPerSecond;                            // 0x0070   (0x0004)  
	bool                                               bAdditiveLocationByTargetVelocity;                          // 0x0074   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0075   (0x0003)  MISSED
	float                                              AdditiveDestTargetForwardDistanceWhenVelocityMove;          // 0x0078   (0x0004)  
	float                                              RotationMinDistancePowerWhenGuidedMissile;                  // 0x007C   (0x0004)  
	float                                              RotationMaxDistancePowerWhenGuidedMissile;                  // 0x0080   (0x0004)  
	float                                              RotationMinDistanceWhenGuidedMissile;                       // 0x0084   (0x0004)  
	float                                              RotationMaxDistanceWhenGuidedMissile;                       // 0x0088   (0x0004)  
	float                                              RandomVelocityMinWhenGuidedMissile;                         // 0x008C   (0x0004)  
	float                                              RandomVelocityMaxWhenGuidedMissile;                         // 0x0090   (0x0004)  
	float                                              RandomYawMinWhenGuidedMissile;                              // 0x0094   (0x0004)  
	float                                              RandomYawMaxWhenGuidedMissile;                              // 0x0098   (0x0004)  
	float                                              RandomPitchMinWhenGuidedMissile;                            // 0x009C   (0x0004)  
	float                                              RandomPitchMaxWhenGuidedMissile;                            // 0x00A0   (0x0004)  
	bool                                               bBeamTracking;                                              // 0x00A4   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x00A5   (0x0003)  MISSED
	float                                              BeamTrackingStartTime;                                      // 0x00A8   (0x0004)  
	float                                              BeamTrackingBlendInTime;                                    // 0x00AC   (0x0004)  
	float                                              BeamTrackingEndTime;                                        // 0x00B0   (0x0004)  
	float                                              BeamTrackingBlendOutTime;                                   // 0x00B4   (0x0004)  
	float                                              BeamTrackingTargetDistacne;                                 // 0x00B8   (0x0004)  
	bool                                               bBeamTrackingTargetFollow;                                  // 0x00BC   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x00BD   (0x0003)  MISSED
	float                                              BeamFixedDistance;                                          // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData13_7[0x4];                                       // 0x00C4   (0x0004)  MISSED
};

/// Class /Script/SB.SBProjectile
/// Size: 0x0660 (1632 bytes) (0x0002C8 - 0x000660) align n/a MaxSize: 0x0660
class ASBProjectile : public AActor
{ 
public:
	unsigned char                                      UnknownData07_8[0x38];                                      // 0x02C8   (0x0038)  MISSED
	class USceneComponent*                             DummyRoot;                                                  // 0x0300   (0x0008)  
	class UNiagaraComponent*                           NiagaraComponent;                                           // 0x0308   (0x0008)  
	class UParticleSystemComponent*                    ParticleComponent;                                          // 0x0310   (0x0008)  
	class USBCollisionGroupComponent*                  CollisionGroupComponent;                                    // 0x0318   (0x0008)  
	TEnumAsByte<ESBProjectileType>                     ProjectileType;                                             // 0x0320   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x0321   (0x0007)  MISSED
	class USphereComponent*                            PhysicsShapeComponent;                                      // 0x0328   (0x0008)  
	float                                              DestroyWaitSecondTime;                                      // 0x0330   (0x0004)  
	bool                                               bRotationByDirection;                                       // 0x0334   (0x0001)  
	bool                                               bRotationByStartTransform;                                  // 0x0335   (0x0001)  
	unsigned char                                      UnknownData09_6[0x2];                                       // 0x0336   (0x0002)  MISSED
	class UCurveFloat*                                 BeamTrackingCurve;                                          // 0x0338   (0x0008)  
	int32_t                                            SkillGuid;                                                  // 0x0340   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x0344   (0x0004)  MISSED
	FSBProjectileUpdateInfo                            ProjectileUpdateInfo;                                       // 0x0348   (0x00C8)  
	float                                              ShotTime;                                                   // 0x0410   (0x0004)  
	float                                              LifeTime;                                                   // 0x0414   (0x0004)  
	bool                                               bTPSAutoTargeted;                                           // 0x0418   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x0419   (0x0003)  MISSED
	float                                              TPSCheckRadius;                                             // 0x041C   (0x0004)  
	float                                              BulletMagnetRadiusScale;                                    // 0x0420   (0x0004)  
	unsigned char                                      UnknownData12_6[0x234];                                     // 0x0424   (0x0234)  MISSED
	float                                              BoidSplineMoveDuration;                                     // 0x0658   (0x0004)  
	unsigned char                                      UnknownData13_7[0x4];                                       // 0x065C   (0x0004)  MISSED

	/// Functions
	// Function /Script/SB.SBProjectile.SetRotationByDirection
	constexpr static const FunctionPointer<ASBProjectile, void, const bool> SetRotationByDirection = { 0x27b73e0, 0 }; 
	// Function /Script/SB.SBProjectile.SetDestroyWaitTime
	constexpr static const FunctionPointer<ASBProjectile, void, const float> SetDestroyWaitTime = { 0x27b74c0, 1 }; 
	// Function /Script/SB.SBProjectile.OnPhysicsShapeHit
	constexpr static const FunctionPointer<ASBProjectile, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const FVector, const FHitResult&> OnPhysicsShapeHit = { 0x27b6620, 2 }; 
	// Function /Script/SB.SBProjectile.OnCollisionOriginBeginOverlap
	constexpr static const FunctionPointer<ASBProjectile, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t, const bool, const FHitResult&> OnCollisionOriginBeginOverlap = { 0x27b6fb0, 3 }; 
	// Function /Script/SB.SBProjectile.NotifyBP_ReleaseActor
	constexpr static const FunctionPointer<ASBProjectile, void> NotifyBP_ReleaseActor = { 0x2bbb090, 4 }; 
	// Function /Script/SB.SBProjectile.NotifyBP_InitActor
	constexpr static const FunctionPointer<ASBProjectile, void> NotifyBP_InitActor = { 0x2bbb090, 5 }; 
	// Function /Script/SB.SBProjectile.NotifyBP_ChangeState
	constexpr static const FunctionPointer<ASBProjectile, void, const TEnumAsByte<ESBProjectileState>> NotifyBP_ChangeState = { 0x2bbb090, 6 }; 
	// Function /Script/SB.SBProjectile.GetStartLocation
	constexpr static const FunctionPointer<ASBProjectile, FVector> GetStartLocation = { 0x27b7620, 7 }; 
	// Function /Script/SB.SBProjectile.GetEndLocation
	constexpr static const FunctionPointer<ASBProjectile, FVector> GetEndLocation = { 0x27b75b0, 8 }; 
	// Function /Script/SB.SBProjectile.GetCurrentLocation
	constexpr static const FunctionPointer<ASBProjectile, FVector> GetCurrentLocation = { 0x27b7670, 9 }; 
	// Function /Script/SB.SBProjectile.EventShotBoids
	constexpr static const FunctionPointer<ASBProjectile, void, const int32_t> EventShotBoids = { 0x2bbb090, 10 }; 
	// Function /Script/SB.SBProjectile.EventOnHitted
	constexpr static const FunctionPointer<ASBProjectile, void, const FVector> EventOnHitted = { 0x2bbb090, 11 }; 
	// Function /Script/SB.SBProjectile.EventOnHitDestruction
	constexpr static const FunctionPointer<ASBProjectile, void> EventOnHitDestruction = { 0x2bbb090, 12 }; 
	// Function /Script/SB.SBProjectile.EventOnHit
	constexpr static const FunctionPointer<ASBProjectile, void, const FVector, const TEnumAsByte<ESBSkillHitResult>> EventOnHit = { 0x2bbb090, 13 }; 
	// Function /Script/SB.SBProjectile.EventOnEnd
	constexpr static const FunctionPointer<ASBProjectile, void> EventOnEnd = { 0x2bbb090, 14 }; 
	// Function /Script/SB.SBProjectile.EventOnDead
	constexpr static const FunctionPointer<ASBProjectile, void> EventOnDead = { 0x2bbb090, 15 }; 
	// Function /Script/SB.SBProjectile.EventOnBounce
	constexpr static const FunctionPointer<ASBProjectile, void> EventOnBounce = { 0x2bbb090, 16 }; 
	// Function /Script/SB.SBProjectile.EventOnArrive
	constexpr static const FunctionPointer<ASBProjectile, void> EventOnArrive = { 0x2bbb090, 17 }; 
	// Function /Script/SB.SBProjectile.EventCreateBoids
	constexpr static const FunctionPointer<ASBProjectile, void, const int32_t, const float, const float> EventCreateBoids = { 0x2bbb090, 18 }; 
	// Function /Script/SB.SBProjectile.EventBeam
	constexpr static const FunctionPointer<ASBProjectile, void, const FVector, const FVector, const FVector, const float, const FVector, const FVector, const int32_t> EventBeam = { 0x2bbb090, 19 }; 
};

/// Class /Script/SB.SBPuzzleWidget
/// Size: 0x0698 (1688 bytes) (0x000680 - 0x000698) align n/a MaxSize: 0x0698
class USBPuzzleWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x18];                                      // 0x0680   (0x0018)  MISSED

	/// Functions
	// Function /Script/SB.SBPuzzleWidget.StartPuzzle
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const TArray<bool>&, const TArray<FString>&, const bool> StartPuzzle = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBPuzzleWidget.SetVectorBufferData
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const TEnumAsByte<ESBBufferDataSlot>, const FVector> SetVectorBufferData = { 0x27b8a20, 1 }; 
	// Function /Script/SB.SBPuzzleWidget.SetStringBufferData
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const TEnumAsByte<ESBBufferDataSlot>, const FString> SetStringBufferData = { 0x27b8bc0, 2 }; 
	// Function /Script/SB.SBPuzzleWidget.SetPuzzleData
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const FString> SetPuzzleData = { 0x27b8330, 3 }; 
	// Function /Script/SB.SBPuzzleWidget.SetIntBufferData
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const TEnumAsByte<ESBBufferDataSlot>, const int32_t> SetIntBufferData = { 0x27b8710, 4 }; 
	// Function /Script/SB.SBPuzzleWidget.SetFloatBufferData
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const TEnumAsByte<ESBBufferDataSlot>, const float> SetFloatBufferData = { 0x27b8890, 5 }; 
	// Function /Script/SB.SBPuzzleWidget.SetBoolBufferData
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const TEnumAsByte<ESBBufferDataSlot>, const bool> SetBoolBufferData = { 0x27b8580, 6 }; 
	// Function /Script/SB.SBPuzzleWidget.InputRightAxisY
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const float> InputRightAxisY = { 0x2bbb090, 7 }; 
	// Function /Script/SB.SBPuzzleWidget.InputRightAxisX
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const float> InputRightAxisX = { 0x2bbb090, 8 }; 
	// Function /Script/SB.SBPuzzleWidget.InputLeftAxisY
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const float> InputLeftAxisY = { 0x2bbb090, 9 }; 
	// Function /Script/SB.SBPuzzleWidget.InputLeftAxisX
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const float> InputLeftAxisX = { 0x2bbb090, 10 }; 
	// Function /Script/SB.SBPuzzleWidget.InputAxis
	constexpr static const FunctionPointer<USBPuzzleWidget, void, const float, const TEnumAsByte<ESBInputAxisType>> InputAxis = { 0x27b7b50, 11 }; 
	// Function /Script/SB.SBPuzzleWidget.GetVectorBufferData
	constexpr static const FunctionPointer<USBPuzzleWidget, FVector, const TEnumAsByte<ESBBufferDataSlot>> GetVectorBufferData = { 0x27b80e0, 12 }; 
	// Function /Script/SB.SBPuzzleWidget.GetStringBufferData
	constexpr static const FunctionPointer<USBPuzzleWidget, FString, const TEnumAsByte<ESBBufferDataSlot>> GetStringBufferData = { 0x27b81f0, 13 }; 
	// Function /Script/SB.SBPuzzleWidget.GetPuzzleData
	constexpr static const FunctionPointer<USBPuzzleWidget, FString> GetPuzzleData = { 0x27b7d90, 14 }; 
	// Function /Script/SB.SBPuzzleWidget.GetIntBufferData
	constexpr static const FunctionPointer<USBPuzzleWidget, int32_t, const TEnumAsByte<ESBBufferDataSlot>> GetIntBufferData = { 0x27b7f00, 15 }; 
	// Function /Script/SB.SBPuzzleWidget.GetFloatBufferData
	constexpr static const FunctionPointer<USBPuzzleWidget, float, const TEnumAsByte<ESBBufferDataSlot>> GetFloatBufferData = { 0x27b7ff0, 16 }; 
	// Function /Script/SB.SBPuzzleWidget.GetBoolBufferData
	constexpr static const FunctionPointer<USBPuzzleWidget, bool, const TEnumAsByte<ESBBufferDataSlot>> GetBoolBufferData = { 0x27b7e10, 17 }; 
	// Function /Script/SB.SBPuzzleWidget.CompletePuzzle
	constexpr static const FunctionPointer<USBPuzzleWidget, void> CompletePuzzle = { 0x27b7d10, 18 }; 
};

/// Class /Script/SB.SBQuestNode
/// Size: 0x0058 (88 bytes) (0x000048 - 0x000058) align n/a MaxSize: 0x0058
class USBQuestNode : public USBDataNodeBase
{ 
public:
	TArray<class USBQuestNode*>                        ChildNodes;                                                 // 0x0048   (0x0010)  
};

/// Class /Script/SB.SBQuestActionNode
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class USBQuestActionNode : public USBQuestNode
{ 
public:
	uint32_t                                           ID;                                                         // 0x0058   (0x0004)  
	float                                              DelayTime;                                                  // 0x005C   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x0060   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x0064   (0x0004)  
	TEnumAsByte<ESBZoneEventType>                      EventType;                                                  // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBQuestActionTypeAIDecoratorNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeAIDecoratorNode : public USBQuestActionNode
{ 
public:
	FSBAlias                                           EventAIDecorator;                                           // 0x0070   (0x0018)  
};

/// Class /Script/SB.SBQuestActionTypeAttachActorEffectNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeAttachActorEffectNode : public USBQuestActionNode
{ 
public:
	FSBAliasEventActorEffect                           EventActorEffect;                                           // 0x0070   (0x0018)  
};

/// Struct /Script/SB.SBAliasLevelTargetFilter
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasLevelTargetFilter : FSBAlias
{ 
};

/// Class /Script/SB.SBQuestActionTypeDespawnNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeDespawnNode : public USBQuestActionNode
{ 
public:
	FSBAliasLevelTargetFilter                          LevelTargetFilter;                                          // 0x0070   (0x0018)  
};

/// Class /Script/SB.SBQuestActionTypeEnvControlNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeEnvControlNode : public USBQuestActionNode
{ 
public:
	FSBAlias                                           EventEnvControl;                                            // 0x0070   (0x0018)  
};

/// Class /Script/SB.SBQuestActionTypeInteractionNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeInteractionNode : public USBQuestActionNode
{ 
public:
	FSBAliasLevelTargetFilter                          LevelTargetFilter;                                          // 0x0070   (0x0018)  
};

/// Struct /Script/SB.SBAliasEventItem
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasEventItem : FSBAlias
{ 
};

/// Class /Script/SB.SBQuestActionTypeItemNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeItemNode : public USBQuestActionNode
{ 
public:
	FSBAliasEventItem                                  EventItem;                                                  // 0x0070   (0x0018)  
};

/// Class /Script/SB.SBQuestActionTypePlayLevelSeqNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypePlayLevelSeqNode : public USBQuestActionNode
{ 
public:
	FSBAlias                                           EventLevelSeq;                                              // 0x0070   (0x0018)  
};

/// Class /Script/SB.SBQuestActionTypeQuestNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeQuestNode : public USBQuestActionNode
{ 
public:
	FSBAlias                                           EventQuest;                                                 // 0x0070   (0x0018)  
};

/// Class /Script/SB.SBQuestActionTypeSpawnNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeSpawnNode : public USBQuestActionNode
{ 
public:
	FSBAlias                                           EventSpawn;                                                 // 0x0070   (0x0018)  
};

/// Struct /Script/SB.SBAliasEventTheater
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasEventTheater : FSBAlias
{ 
};

/// Class /Script/SB.SBQuestActionTypeTheaterNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeTheaterNode : public USBQuestActionNode
{ 
public:
	FSBAliasEventTheater                               EventTheater;                                               // 0x0070   (0x0018)  
};

/// Class /Script/SB.SBQuestActionTypeZone
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeZone : public USBQuestActionNode
{ 
public:
	FSBAliasZoneEvent                                  EventZone;                                                  // 0x0070   (0x0018)  
};

/// Class /Script/SB.SBQuestActionTypeZoneControlNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeZoneControlNode : public USBQuestActionNode
{ 
public:
	FSBAlias                                           EventZoneControl;                                           // 0x0070   (0x0018)  
};

/// Class /Script/SB.SBQuestActionTypeZoneObjectControlNode
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestActionTypeZoneObjectControlNode : public USBQuestActionNode
{ 
public:
	FSBAlias                                           EventObjControl;                                            // 0x0070   (0x0018)  
};

/// Class /Script/SB.SBQuestRootNode
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align n/a MaxSize: 0x0058
class USBQuestRootNode : public USBQuestNode
{ 
public:
};

/// Struct /Script/SB.SBTableIndexRewardGroup
/// Size: 0x0024 (36 bytes) (0x000024 - 0x000024) align n/a MaxSize: 0x0024
struct FSBTableIndexRewardGroup : FSBTableIndex
{ 
};

/// Struct /Script/SB.SBQuestPinType
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBQuestPinType
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBQuestEventActionDataInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBQuestEventActionDataInfo
{ 
	TEnumAsByte<ESBQuestTaskEventActionType>           EventType;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            EventProgressCount;                                         // 0x0004   (0x0004)  
	FSBAliasSpawnPoint                                 EventSpawnAlias;                                            // 0x0008   (0x0018)  
};

/// Class /Script/SB.SBQuestElementNode
/// Size: 0x01A8 (424 bytes) (0x000058 - 0x0001A8) align n/a MaxSize: 0x01A8
class USBQuestElementNode : public USBQuestRootNode
{ 
public:
	FName                                              QuestAlias;                                                 // 0x0058   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0060   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0064   (0x0004)  MISSED
	FString                                            TitleName;                                                  // 0x0068   (0x0010)  
	FText                                              TitleName_;                                                 // 0x0078   (0x0018)  
	FString                                            QuestDescription;                                           // 0x0090   (0x0010)  
	FText                                              QuestDescription_;                                          // 0x00A0   (0x0018)  
	TEnumAsByte<ESBQuestType>                          QuestType;                                                  // 0x00B8   (0x0001)  
	ESBQuestUIType                                     QuestUIType;                                                // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x00BA   (0x0002)  MISSED
	FSBTableIndexRewardGroup                           RewardGroupIndex;                                           // 0x00BC   (0x0024)  
	FSBAliasQuest                                      NextQuest;                                                  // 0x00E0   (0x0018)  
	FSBAliasAchievement                                FailAchievementCondition;                                   // 0x00F8   (0x0018)  
	FSBAliasConditionGroup                             FailConditionGroup;                                         // 0x0110   (0x0018)  
	TEnumAsByte<ESBConditionEventType>                 FailConditionEventType;                                     // 0x0128   (0x0001)  
	TEnumAsByte<ESBConditionResultType>                FailConditionResultType;                                    // 0x0129   (0x0001)  
	unsigned char                                      UnknownData06_6[0x6];                                       // 0x012A   (0x0006)  MISSED
	TArray<FName>                                      RequiredQuestArray;                                         // 0x0130   (0x0010)  
	TArray<FName>                                      AcquireActionArray;                                         // 0x0140   (0x0010)  
	TArray<FName>                                      CompleteActionArray;                                        // 0x0150   (0x0010)  
	FSBQuestPinType                                    PrevQuestPin;                                               // 0x0160   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0161   (0x0007)  MISSED
	TArray<FName>                                      TaskGroupArray;                                             // 0x0168   (0x0010)  
	TArray<FName>                                      QuestPathStartNodes;                                        // 0x0178   (0x0010)  
	TArray<FString>                                    QuestPathWorlds;                                            // 0x0188   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                AcquireEventActionList;                                     // 0x0198   (0x0010)  
};

/// Class /Script/SB.SBQuestLevelTargetFilter
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class USBQuestLevelTargetFilter : public USBQuestNode
{ 
public:
	FSBAliasLevelTargetFilter                          TargetFilter;                                               // 0x0058   (0x0018)  
};

/// Struct /Script/SB.SBQuestTaskContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBQuestTaskContainer
{ 
	TArray<FName>                                      TaskAliasArray;                                             // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SAliasBRestartRule
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSAliasBRestartRule : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasZoneCamp
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasZoneCamp : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasWorld
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasWorld : FSBAlias
{ 
};

/// Struct /Script/SB.SBQuestWarpNodeData
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FSBQuestWarpNodeData
{ 
	ESBQuestWarpType                                   WarpType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FText                                              WarpUIDescription;                                          // 0x0008   (0x0018)  
	FName                                              ConditionGroup;                                             // 0x0020   (0x0008)  
	FSBAliasZoneCamp                                   TargetCamp;                                                 // 0x0028   (0x0018)  
	FSBAliasWorld                                      TargetWorld;                                                // 0x0040   (0x0018)  
	FVector                                            TargetLocation;                                             // 0x0058   (0x000C)  
	FRotator                                           TargetRotation;                                             // 0x0064   (0x000C)  
	FSBAliasSpawnPoint                                 TargetSpawnPoint;                                           // 0x0070   (0x0018)  
	FSBAliasEventTheater                               WarpChoiceYesPlayTheater;                                   // 0x0088   (0x0018)  
	FSBAliasEventTheater                               WarpChoiceNoPlayTheater;                                    // 0x00A0   (0x0018)  
};

/// Class /Script/SB.SBQuestMissionNode
/// Size: 0x01C8 (456 bytes) (0x000058 - 0x0001C8) align n/a MaxSize: 0x01C8
class USBQuestMissionNode : public USBQuestNode
{ 
public:
	FName                                              TaskGroupAlias;                                             // 0x0058   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0060   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0064   (0x0004)  MISSED
	FText                                              Description;                                                // 0x0068   (0x0018)  
	TArray<FName>                                      ActivateActionArray;                                        // 0x0080   (0x0010)  
	TArray<FName>                                      ProgressActionArray;                                        // 0x0090   (0x0010)  
	TArray<FName>                                      CompleteActionArray;                                        // 0x00A0   (0x0010)  
	TArray<FSBQuestTaskContainer>                      TaskContainerArray;                                         // 0x00B0   (0x0010)  
	TArray<FName>                                      QuestPathStartNodes;                                        // 0x00C0   (0x0010)  
	TArray<FString>                                    QuestPathWorlds;                                            // 0x00D0   (0x0010)  
	TArray<FString>                                    QuestPathAreas;                                             // 0x00E0   (0x0010)  
	FSAliasBRestartRule                                RestartRuleData;                                            // 0x00F0   (0x0018)  
	FSBQuestWarpNodeData                               WarpWhenComplete;                                           // 0x0108   (0x00B8)  
	bool                                               bShowGreenDot;                                              // 0x01C0   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x01C1   (0x0007)  MISSED
};

/// Class /Script/SB.SBQuestPathNode
/// Size: 0x0088 (136 bytes) (0x000058 - 0x000088) align n/a MaxSize: 0x0088
class USBQuestPathNode : public USBQuestNode
{ 
public:
	FName                                              StartNodeAlias;                                             // 0x0058   (0x0008)  
	FString                                            WorldAlias;                                                 // 0x0060   (0x0010)  
	FString                                            AreaAlias;                                                  // 0x0070   (0x0010)  
	int32_t                                            PathIndex;                                                  // 0x0080   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Class /Script/SB.SBQuestPathNodeActor
/// Size: 0x0310 (784 bytes) (0x0002C8 - 0x000310) align n/a MaxSize: 0x0310
class ASBQuestPathNodeActor : public AActor
{ 
public:
	bool                                               bActivated;                                                 // 0x02C8   (0x0001)  
	bool                                               ShouldTouchedPrevNode;                                      // 0x02C9   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x02CA   (0x0002)  MISSED
	FName                                              NodeAlias;                                                  // 0x02CC   (0x0008)  
	uint32_t                                           NodeIndex;                                                  // 0x02D4   (0x0004)  
	bool                                               bSphere;                                                    // 0x02D8   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x02D9   (0x0003)  MISSED
	FVector                                            Extent;                                                     // 0x02DC   (0x000C)  
	float                                              Radius;                                                     // 0x02E8   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x02EC   (0x0004)  MISSED
	class ASBQuestPathNodeActor*                       NextNode;                                                   // 0x02F0   (0x0008)  
	class ASBQuestPathNodeActor*                       PrevNode;                                                   // 0x02F8   (0x0008)  
	class USceneComponent*                             TargetPoint;                                                // 0x0300   (0x0008)  
	class USceneComponent*                             ActorRootComponent;                                         // 0x0308   (0x0008)  
};

/// Class /Script/SB.SBQuestRequestNode
/// Size: 0x01F8 (504 bytes) (0x000058 - 0x0001F8) align n/a MaxSize: 0x01F8
class USBQuestRequestNode : public USBQuestRootNode
{ 
public:
	FName                                              Alias;                                                      // 0x0058   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0060   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0064   (0x0004)  MISSED
	FText                                              title;                                                      // 0x0068   (0x0018)  
	FText                                              Description;                                                // 0x0080   (0x0018)  
	FText                                              RequestDescription;                                         // 0x0098   (0x0018)  
	FText                                              Report;                                                     // 0x00B0   (0x0018)  
	FText                                              GameMenuReport;                                             // 0x00C8   (0x0018)  
	ESBQuestRequestType                                RequestType;                                                // 0x00E0   (0x0001)  
	ESBQuestUIType                                     UIType;                                                     // 0x00E1   (0x0001)  
	ESBDisplayRequestBoardType                         DisplayRequestBoardType;                                    // 0x00E2   (0x0001)  
	unsigned char                                      UnknownData07_6[0x1];                                       // 0x00E3   (0x0001)  MISSED
	FSBTableIndexRewardGroup                           RewardGroupIndex;                                           // 0x00E4   (0x0024)  
	FSBAliasAchievement                                FailAchievementCondition;                                   // 0x0108   (0x0018)  
	FSBAliasConditionGroup                             FailConditionGroup;                                         // 0x0120   (0x0018)  
	TEnumAsByte<ESBConditionEventType>                 FailConditionEventType;                                     // 0x0138   (0x0001)  
	TEnumAsByte<ESBConditionResultType>                FailConditionResultType;                                    // 0x0139   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x013A   (0x0002)  MISSED
	FSBAliasConditionGroup                             AvailableConditionGroup;                                    // 0x013C   (0x0018)  
	FSBAliasConditionGroup                             ValidConditionGroup;                                        // 0x0154   (0x0018)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x016C   (0x0004)  MISSED
	class USoundBase*                                  AcquireSound;                                               // 0x0170   (0x0008)  
	TEnumAsByte<ESBSequencerSubtitleType>              AcquireSubtitleType;                                        // 0x0178   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0179   (0x0003)  MISSED
	float                                              AcquireSubtitleDuration;                                    // 0x017C   (0x0004)  
	FText                                              AcquireSubtitleTitle;                                       // 0x0180   (0x0018)  
	FText                                              AcquireSubtitleMessage;                                     // 0x0198   (0x0018)  
	TArray<FName>                                      AcquireActionArray;                                         // 0x01B0   (0x0010)  
	TArray<FName>                                      CompleteActionArray;                                        // 0x01C0   (0x0010)  
	TArray<FName>                                      TaskGroupArray;                                             // 0x01D0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                AcquireEventActionList;                                     // 0x01E0   (0x0010)  
	bool                                               bMaintainNewGamePlus;                                       // 0x01F0   (0x0001)  
	unsigned char                                      UnknownData11_7[0x7];                                       // 0x01F1   (0x0007)  MISSED
};

/// Class /Script/SB.SBQuestSequence
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class USBQuestSequence : public UDataAsset
{ 
public:
	uint32_t                                           Version;                                                    // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/SB.SBQuestTaskNode
/// Size: 0x00B8 (184 bytes) (0x000058 - 0x0000B8) align n/a MaxSize: 0x00B8
class USBQuestTaskNode : public USBQuestNode
{ 
public:
	FName                                              TaskAlias;                                                  // 0x0058   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0060   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0064   (0x0004)  MISSED
	FText                                              Description;                                                // 0x0068   (0x0018)  
	TEnumAsByte<ESBQuestTaskUIType>                    UIType;                                                     // 0x0080   (0x0001)  
	ESBQuestTaskDescriptionUIType                      DescriptionUIType;                                          // 0x0081   (0x0001)  
	bool                                               HideHUD;                                                    // 0x0082   (0x0001)  
	unsigned char                                      UnknownData04_6[0x5];                                       // 0x0083   (0x0005)  MISSED
	TArray<FName>                                      TrackingTargetFilters;                                      // 0x0088   (0x0010)  
	FSBAliasConditionGroup                             TrackingConditionGroup;                                     // 0x0098   (0x0018)  
	TEnumAsByte<ESBQuestMissionType>                   MissionType;                                                // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Class /Script/SB.SBQuestTasktypeAchievement
/// Size: 0x0100 (256 bytes) (0x0000B8 - 0x000100) align n/a MaxSize: 0x0100
class USBQuestTasktypeAchievement : public USBQuestTaskNode
{ 
public:
	FSBAliasAchievement                                Achievement;                                                // 0x00B8   (0x0018)  
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00D0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00E0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00F0   (0x0010)  
};

/// Class /Script/SB.SBQuestTaskTypeActorInBound
/// Size: 0x0108 (264 bytes) (0x0000B8 - 0x000108) align n/a MaxSize: 0x0108
class USBQuestTaskTypeActorInBound : public USBQuestTaskNode
{ 
public:
	TArray<FName>                                      TargetFilters;                                              // 0x00B8   (0x0010)  
	FName                                              OwnerFilter;                                                // 0x00C8   (0x0008)  
	float                                              Radius;                                                     // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00D4   (0x0004)  MISSED
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00D8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00E8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00F8   (0x0010)  
};

/// Class /Script/SB.SBQuestTasktypeCounter
/// Size: 0x00F0 (240 bytes) (0x0000B8 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBQuestTasktypeCounter : public USBQuestTaskNode
{ 
public:
	int32_t                                            ConditionCount;                                             // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00BC   (0x0004)  MISSED
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00C0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00D0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00E0   (0x0010)  
};

/// Class /Script/SB.SBQuestTaskTypeDelayTime
/// Size: 0x00F0 (240 bytes) (0x0000B8 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBQuestTaskTypeDelayTime : public USBQuestTaskNode
{ 
public:
	float                                              DelayTime;                                                  // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00BC   (0x0004)  MISSED
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00C0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00D0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00E0   (0x0010)  
};

/// Class /Script/SB.SBQuestTaskTypeEnterTrigger
/// Size: 0x0100 (256 bytes) (0x0000B8 - 0x000100) align n/a MaxSize: 0x0100
class USBQuestTaskTypeEnterTrigger : public USBQuestTaskNode
{ 
public:
	FSBAlias                                           ZoneTrigger;                                                // 0x00B8   (0x0018)  
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00D0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00E0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00F0   (0x0010)  
};

/// Class /Script/SB.SBQuestTaskTypeEnterZone
/// Size: 0x00F8 (248 bytes) (0x0000B8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBQuestTaskTypeEnterZone : public USBQuestTaskNode
{ 
public:
	TArray<FName>                                      ZoneArray;                                                  // 0x00B8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00C8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00D8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00E8   (0x0010)  
};

/// Class /Script/SB.SBQuestTaskTypeEnvState
/// Size: 0x0120 (288 bytes) (0x0000B8 - 0x000120) align n/a MaxSize: 0x0120
class USBQuestTaskTypeEnvState : public USBQuestTaskNode
{ 
public:
	FSBAliasZoneEnvSpawn                               ZoneEnvSpawn;                                               // 0x00B8   (0x0018)  
	FName                                              EnvStateTagName;                                            // 0x00D0   (0x0008)  
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00D8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00E8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00F8   (0x0010)  
	FSBAliasAchievement                                Achievement;                                                // 0x0108   (0x0018)  
};

/// Class /Script/SB.SBQuestTaskTypeInteraction
/// Size: 0x0100 (256 bytes) (0x0000B8 - 0x000100) align n/a MaxSize: 0x0100
class USBQuestTaskTypeInteraction : public USBQuestTaskNode
{ 
public:
	TArray<FName>                                      TargetFilters;                                              // 0x00B8   (0x0010)  
	int32_t                                            ConditionCount;                                             // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00D0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00E0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00F0   (0x0010)  
};

/// Class /Script/SB.SBQuestTaskTypeKillTargetNode
/// Size: 0x0100 (256 bytes) (0x0000B8 - 0x000100) align n/a MaxSize: 0x0100
class USBQuestTaskTypeKillTargetNode : public USBQuestTaskNode
{ 
public:
	TArray<FName>                                      TargetFilters;                                              // 0x00B8   (0x0010)  
	int32_t                                            ConditionCount;                                             // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00D0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00E0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00F0   (0x0010)  
};

/// Class /Script/SB.SBQuestTaskTypeLeaveTrigger
/// Size: 0x0100 (256 bytes) (0x0000B8 - 0x000100) align n/a MaxSize: 0x0100
class USBQuestTaskTypeLeaveTrigger : public USBQuestTaskNode
{ 
public:
	FSBAlias                                           ZoneTrigger;                                                // 0x00B8   (0x0018)  
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00D0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00E0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00F0   (0x0010)  
};

/// Class /Script/SB.SBQuestTaskTypeLeaveZone
/// Size: 0x00F8 (248 bytes) (0x0000B8 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBQuestTaskTypeLeaveZone : public USBQuestTaskNode
{ 
public:
	TArray<FName>                                      ZoneArray;                                                  // 0x00B8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00C8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00D8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00E8   (0x0010)  
};

/// Class /Script/SB.SBQuestTaskTypeRequireItem
/// Size: 0x0120 (288 bytes) (0x0000B8 - 0x000120) align n/a MaxSize: 0x0120
class USBQuestTaskTypeRequireItem : public USBQuestTaskNode
{ 
public:
	ESBQuestRequireItemTaskCountType                   CountType;                                                  // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x00B9   (0x0003)  MISSED
	int32_t                                            ConditionCount;                                             // 0x00BC   (0x0004)  
	ESBQuestRequireItemTaskCheckType                   CheckItemType;                                              // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x00C1   (0x0003)  MISSED
	FSBAliasItem                                       ItemAlias;                                                  // 0x00C4   (0x0018)  
	TEnumAsByte<ESBItemCategory>                       CheckItemCategory;                                          // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x00DD   (0x0003)  MISSED
	FString                                            CheckItemCategoryTag;                                       // 0x00E0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00F0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x0100   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x0110   (0x0010)  
};

/// Class /Script/SB.SBQuestTasktypeScan
/// Size: 0x0100 (256 bytes) (0x0000B8 - 0x000100) align n/a MaxSize: 0x0100
class USBQuestTasktypeScan : public USBQuestTaskNode
{ 
public:
	FSBAlias                                           ZoneTrigger;                                                // 0x00B8   (0x0018)  
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00D0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00E0   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00F0   (0x0010)  
};

/// Class /Script/SB.SBQuestTaskTypeTaskCondition
/// Size: 0x0108 (264 bytes) (0x0000B8 - 0x000108) align n/a MaxSize: 0x0108
class USBQuestTaskTypeTaskCondition : public USBQuestTaskNode
{ 
public:
	TArray<FName>                                      TaskArray;                                                  // 0x00B8   (0x0010)  
	ESBQuestTaskConditonType                           ConditionType;                                              // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00C9   (0x0003)  MISSED
	int32_t                                            IntValue;                                                   // 0x00CC   (0x0004)  
	TEnumAsByte<ESBUITaskConditionDisplayType>         ShowType;                                                   // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x00D1   (0x0007)  MISSED
	TArray<FSBQuestEventActionDataInfo>                StartEventList;                                             // 0x00D8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                UpdateEventList;                                            // 0x00E8   (0x0010)  
	TArray<FSBQuestEventActionDataInfo>                CompleteEventList;                                          // 0x00F8   (0x0010)  
};

/// Class /Script/SB.SBQuestWarpNode
/// Size: 0x0128 (296 bytes) (0x000058 - 0x000128) align n/a MaxSize: 0x0128
class USBQuestWarpNode : public USBQuestNode
{ 
public:
	FText                                              EditorDescription;                                          // 0x0058   (0x0018)  
	FSBQuestWarpNodeData                               WarpWhenComplete;                                           // 0x0070   (0x00B8)  
};

/// Class /Script/SB.SBQuestZoneEventRefNode
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class USBQuestZoneEventRefNode : public USBQuestNode
{ 
public:
	FSBAliasZoneEvent                                  ZoneEvent;                                                  // 0x0058   (0x0018)  
};

/// Class /Script/SB.SBQuestZoneNode
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class USBQuestZoneNode : public USBQuestNode
{ 
public:
	FSBAliasZone                                       Zone;                                                       // 0x0058   (0x0018)  
};

/// Class /Script/SB.SBRadialForceComponent
/// Size: 0x02A0 (672 bytes) (0x000290 - 0x0002A0) align n/a MaxSize: 0x02A0
class USBRadialForceComponent : public URadialForceComponent
{ 
public:
	float                                              DestructibleCheckRadius;                                    // 0x0290   (0x0004)  
	bool                                               bIncludeZoneEventActor;                                     // 0x0294   (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x0295   (0x000B)  MISSED
};

/// Class /Script/SB.SBRegionVolume
/// Size: 0x0370 (880 bytes) (0x000318 - 0x000370) align n/a MaxSize: 0x0370
class ASBRegionVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	FSBMapSectorID                                     SectorID;                                                   // 0x031C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0324   (0x0004)  MISSED
	FText                                              MainText;                                                   // 0x0328   (0x0018)  
	FText                                              SubText;                                                    // 0x0340   (0x0018)  
	FVector                                            LevelObjOrigin;                                             // 0x0358   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0364   (0x000C)  
};

/// Class /Script/SB.SBResourceCacheActor
/// Size: 0x0338 (824 bytes) (0x0002F0 - 0x000338) align n/a MaxSize: 0x0338
class ASBResourceCacheActor : public ANavigationObjectBase
{ 
public:
	float                                              LoadDistance;                                               // 0x02F0   (0x0004)  
	float                                              UnloadDistance;                                             // 0x02F4   (0x0004)  
	TArray<FSoftObjectPath>                            AssetObjects;                                               // 0x02F8   (0x0010)  
	TArray<FName>                                      QuestConditions;                                            // 0x0308   (0x0010)  
	FString                                            Description;                                                // 0x0318   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0328   (0x0010)  MISSED
};

/// Class /Script/SB.SBResourceCacheActorCapsuleComponent
/// Size: 0x0560 (1376 bytes) (0x000560 - 0x000560) align n/a MaxSize: 0x0560
class USBResourceCacheActorCapsuleComponent : public UCapsuleComponent
{ 
public:
};

/// Class /Script/SB.SBResourceCacheZoneData
/// Size: 0x01D0 (464 bytes) (0x000030 - 0x0001D0) align n/a MaxSize: 0x01D0
class USBResourceCacheZoneData : public UDataAsset
{ 
public:
	TMap<FName, FName>                                 ZoneMerges;                                                 // 0x0030   (0x0050)  
	TArray<FName>                                      ExclusiveZoneAliases;                                       // 0x0080   (0x0010)  
	TMap<FName, FVector>                               ZoneBoundPadOverrides;                                      // 0x0090   (0x0050)  
	TMap<FName, FVector>                               ZoneBoundOriginOverrides;                                   // 0x00E0   (0x0050)  
	TMap<FName, FVector>                               ZoneBoundExtentOverrides;                                   // 0x0130   (0x0050)  
	TMap<FName, FVector>                               ZoneBoundScaleOnExtraSprit;                                 // 0x0180   (0x0050)  
};

/// Class /Script/SB.SBRestorationWorldActor
/// Size: 0x0320 (800 bytes) (0x000308 - 0x000320) align n/a MaxSize: 0x0320
class ASBRestorationWorldActor : public ASBWorldActor
{ 
public:
	class USceneComponent*                             DummyRoot;                                                  // 0x0308   (0x0008)  
	TEnumAsByte<ESBZoneObjectSaveType>                 ActorSaveType;                                              // 0x0310   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0311   (0x0003)  MISSED
	float                                              ViewDistance;                                               // 0x0314   (0x0004)  
	bool                                               bInitSimulatePhys;                                          // 0x0318   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0319   (0x0007)  MISSED
};

/// Class /Script/SB.SBRewardGroupSpawnFormation
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000B0) align n/a MaxSize: 0x00B0
class USBRewardGroupSpawnFormation : public UDataAsset
{ 
public:
	TEnumAsByte<ESBItemSpawnRangeType>                 SpawnRangeType;                                             // 0x0030   (0x0001)  
	bool                                               UseSpawnShow;                                               // 0x0031   (0x0001)  
	bool                                               UseSimulatePhysics;                                         // 0x0032   (0x0001)  
	bool                                               UsePostLocationVerifyCheck;                                 // 0x0033   (0x0001)  
	bool                                               IgnoreFinishSimulatePhysics;                                // 0x0034   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	float                                              SpawnStartInterval;                                         // 0x0038   (0x0004)  
	float                                              SpawnNextInterval;                                          // 0x003C   (0x0004)  
	float                                              SpawnDelayTime;                                             // 0x0040   (0x0004)  
	bool                                               SpawnCheckLocation;                                         // 0x0044   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              SpawnCheckStartDist;                                        // 0x0048   (0x0004)  
	float                                              SpawnCheckEndDist;                                          // 0x004C   (0x0004)  
	TEnumAsByte<ESBItemBucketType>                     SpawnTargetType;                                            // 0x0050   (0x0001)  
	bool                                               RandomRangeUseGlobalSetting;                                // 0x0051   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x0052   (0x0002)  MISSED
	float                                              RandomRangeDropDistMin;                                     // 0x0054   (0x0004)  
	float                                              RandomRangeDropDistMax;                                     // 0x0058   (0x0004)  
	float                                              RandomRangeDropDirXMin;                                     // 0x005C   (0x0004)  
	float                                              RandomRangeDropDirXMax;                                     // 0x0060   (0x0004)  
	float                                              RandomRangeDropDirYMin;                                     // 0x0064   (0x0004)  
	float                                              RandomRangeDropDirYMax;                                     // 0x0068   (0x0004)  
	float                                              RandomRangeDropDirZMin;                                     // 0x006C   (0x0004)  
	float                                              RandomRangeDropDirZMax;                                     // 0x0070   (0x0004)  
	float                                              RandomRangeDropOffsetZ;                                     // 0x0074   (0x0004)  
	FName                                              RandomRangeCharSocket;                                      // 0x0078   (0x0008)  
	float                                              SequentialArcDistance;                                      // 0x0080   (0x0004)  
	float                                              SequentialArcDegree;                                        // 0x0084   (0x0004)  
	int32_t                                            SequentialArcColumnCount;                                   // 0x0088   (0x0004)  
	float                                              SequentialArcDistanceAdditional;                            // 0x008C   (0x0004)  
	float                                              SequentialArcDecreaseCountFactor;                           // 0x0090   (0x0004)  
	float                                              SequentialArcDecreaseDegree;                                // 0x0094   (0x0004)  
	FVector                                            SequentialArcOffset;                                        // 0x0098   (0x000C)  
	FRotator                                           SequentialArcForwardRotation;                               // 0x00A4   (0x000C)  
};

/// Struct /Script/SB.SBExtractRootMotionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBExtractRootMotionData
{ 
	FName                                              CharacterMoveAlias;                                         // 0x0000   (0x0008)  
	TArray<FTransform>                                 TransformArray;                                             // 0x0008   (0x0010)  
	float                                              StartTime;                                                  // 0x0018   (0x0004)  
	float                                              EndTime;                                                    // 0x001C   (0x0004)  
};

/// Class /Script/SB.SBRootMotionData
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align n/a MaxSize: 0x0060
class USBRootMotionData : public UDataAsset
{ 
public:
	TArray<FSBExtractRootMotionData>                   RootMotionDataArray;                                        // 0x0030   (0x0010)  
	float                                              TotalLength;                                                // 0x0040   (0x0004)  
	float                                              FrameRate;                                                  // 0x0044   (0x0004)  
	FName                                              TimeBasedAnimationName;                                     // 0x0048   (0x0008)  
	FVector                                            BaseMeshScale;                                              // 0x0050   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Struct /Script/SB.ItemData
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FItemData
{ 
	FName                                              ItemAlias;                                                  // 0x0000   (0x0008)  
	uint32_t                                           StatLevel;                                                  // 0x0008   (0x0004)  
	uint32_t                                           ItemCount;                                                  // 0x000C   (0x0004)  
	uint32_t                                           ItemChargeCount;                                            // 0x0010   (0x0004)  
};

/// Struct /Script/SB.AchievementData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FAchievementData
{ 
	FName                                              AchievementAlias;                                           // 0x0000   (0x0008)  
	uint32_t                                           ProgressValue;                                              // 0x0008   (0x0004)  
	bool                                               bCompleted;                                                 // 0x000C   (0x0001)  
	bool                                               bRecievedReward;                                            // 0x000D   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x000E   (0x0002)  MISSED
};

/// Class /Script/SB.SBSaveData
/// Size: 0x0260 (608 bytes) (0x000030 - 0x000260) align n/a MaxSize: 0x0260
class USBSaveData : public UDataAsset
{ 
public:
	class USBSaveGame*                                 SaveGameInstance;                                           // 0x0030   (0x0008)  
	FString                                            BaseFilePath;                                               // 0x0038   (0x0010)  
	FString                                            SavFilePath;                                                // 0x0048   (0x0010)  
	int32_t                                            SavFileVersion;                                             // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            CSVFilePath;                                                // 0x0060   (0x0010)  
	FVector                                            Location;                                                   // 0x0070   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x007C   (0x000C)  
	TArray<FName>                                      OpenCampAliases;                                            // 0x0088   (0x0010)  
	FName                                              LastInteractCampEnvSpawnAlias;                              // 0x0098   (0x0008)  
	FName                                              LastInteractTetrapodEnvSpawnAlias;                          // 0x00A0   (0x0008)  
	TArray<FName>                                      SkillAliases;                                               // 0x00A8   (0x0010)  
	uint32_t                                           SP;                                                         // 0x00B8   (0x0004)  
	uint32_t                                           SPLevel;                                                    // 0x00BC   (0x0004)  
	TMap<FName, FItemData>                             Items;                                                      // 0x00C0   (0x0050)  
	TSet<FName>                                        ItemObtains;                                                // 0x0110   (0x0050)  
	TMap<TEnumAsByte<ESBEquipType>, FItemData>         Equipments;                                                 // 0x0160   (0x0050)  
	TMap<TEnumAsByte<ESBCharacterLevelType>, uint32_t> Levels;                                                     // 0x01B0   (0x0050)  
	TMap<FName, FAchievementData>                      Achievements;                                               // 0x0200   (0x0050)  
	TArray<FName>                                      InitialOpenCampAliases;                                     // 0x0250   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_ExospineEnhanceInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBSaveGameData_ExospineEnhanceInfo
{ 
	bool                                               bEnhance;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            EnhanceLevel;                                               // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_EnhanceFlagStateInfo
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FSBSaveGameData_EnhanceFlagStateInfo
{ 
	bool                                               bFlag;                                                      // 0x0000   (0x0001)  
	bool                                               bDirty;                                                     // 0x0001   (0x0001)  
};

/// Struct /Script/SB.SBSaveGameData_ActorItemEnhanceState
/// Size: 0x0148 (328 bytes) (0x000000 - 0x000148) align n/a MaxSize: 0x0148
struct FSBSaveGameData_ActorItemEnhanceState
{ 
	TMap<FName, bool>                                  NanosuitEnhanceStateMap;                                    // 0x0000   (0x0050)  
	TMap<FName, bool>                                  DronEnhanceStateMap;                                        // 0x0050   (0x0050)  
	TMap<FName, FSBSaveGameData_ExospineEnhanceInfo>   ExospineEnhanceStateMap;                                    // 0x00A0   (0x0050)  
	TMap<FName, FSBSaveGameData_EnhanceFlagStateInfo>  FlagStateInfoMap;                                           // 0x00F0   (0x0050)  
	bool                                               bEnhanceNanosuit;                                           // 0x0140   (0x0001)  
	bool                                               bEnhanceExospine;                                           // 0x0141   (0x0001)  
	bool                                               bEnhanceDron;                                               // 0x0142   (0x0001)  
	unsigned char                                      UnknownData01_7[0x5];                                       // 0x0143   (0x0005)  MISSED
};

/// Struct /Script/SB.SBSaveGameData_Actor
/// Size: 0x02B0 (688 bytes) (0x000000 - 0x0002B0) align n/a MaxSize: 0x02B0
struct FSBSaveGameData_Actor
{ 
	FString                                            ActorDataAlias;                                             // 0x0000   (0x0010)  
	FVector                                            ActorLocation;                                              // 0x0010   (0x000C)  
	FRotator                                           ActorRotation;                                              // 0x001C   (0x000C)  
	float                                              HP;                                                         // 0x0028   (0x0004)  
	float                                              Shield;                                                     // 0x002C   (0x0004)  
	float                                              Stamina;                                                    // 0x0030   (0x0004)  
	int32_t                                            BetaGauge;                                                  // 0x0034   (0x0004)  
	int32_t                                            BurstGauge;                                                 // 0x0038   (0x0004)  
	int32_t                                            TachyGauge;                                                 // 0x003C   (0x0004)  
	int32_t                                            SP;                                                         // 0x0040   (0x0004)  
	int32_t                                            SPLevel;                                                    // 0x0044   (0x0004)  
	int32_t                                            SPExp;                                                      // 0x0048   (0x0004)  
	FName                                              StanceAlias;                                                // 0x004C   (0x0008)  
	uint32_t                                           CostumeIndex;                                               // 0x0054   (0x0004)  
	TMap<int32_t, FSBItemInstance>                     Equipment;                                                  // 0x0058   (0x0050)  
	TArray<FName>                                      ItemQuickSlotArray;                                         // 0x00A8   (0x0010)  
	TArray<FName>                                      BodySuitSlotArray;                                          // 0x00B8   (0x0010)  
	FName                                              CampEnvSpawnAlias;                                          // 0x00C8   (0x0008)  
	FVector                                            CampInteractActorLocation;                                  // 0x00D0   (0x000C)  
	FRotator                                           CampInteractActorRotation;                                  // 0x00DC   (0x000C)  
	FName                                              SoundEventAlias;                                            // 0x00E8   (0x0008)  
	FName                                              TetrapodCampEnvSpawnAlias;                                  // 0x00F0   (0x0008)  
	FVector                                            TetrapodCampInteractActorLocation;                          // 0x00F8   (0x000C)  
	FRotator                                           TetrapodCampInteractActorRotation;                          // 0x0104   (0x000C)  
	FSBSaveGameData_ActorItemEnhanceState              ItemEnhanceState;                                           // 0x0110   (0x0148)  
	TArray<uint32_t>                                   LevelArray;                                                 // 0x0258   (0x0010)  
	uint32_t                                           MultiMapLevel;                                              // 0x0268   (0x0004)  
	FName                                              LastFullCampEnvSpawnAlias;                                  // 0x026C   (0x0008)  
	FVector                                            LastFullCampInteractActorLocation;                          // 0x0274   (0x000C)  
	FRotator                                           LastFullCampInteractActorRotation;                          // 0x0280   (0x000C)  
	FName                                              LastSimplyCampEnvSpawnAlias;                                // 0x028C   (0x0008)  
	FVector                                            LastSimplyCampInteractActorLocation;                        // 0x0294   (0x000C)  
	FRotator                                           LastSimplyCampInteractActorRotation;                        // 0x02A0   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x02AC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBSaveGameData_EffectObject
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBSaveGameData_EffectObject
{ 
	uint32_t                                           EffectTableId;                                              // 0x0000   (0x0004)  
	float                                              ElapsedStartTime;                                           // 0x0004   (0x0004)  
	float                                              ElapsedTime;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_Effect
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_Effect
{ 
	TArray<FSBSaveGameData_EffectObject>               EffectList;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_QuestTask
/// Size: 0x00C8 (200 bytes) (0x000000 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FSBSaveGameData_QuestTask
{ 
	FName                                              TaskAlias;                                                  // 0x0000   (0x0008)  
	int32_t                                            CurrentValue;                                               // 0x0008   (0x0004)  
	TEnumAsByte<ESBQuestTaskState>                     TaskState;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	int32_t                                            CompleteOrder;                                              // 0x0010   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TMap<FName, int32_t>                               CustomIntMap;                                               // 0x0018   (0x0050)  
	TMap<FName, float>                                 CustomFloatMap;                                             // 0x0068   (0x0050)  
	TArray<FName>                                      ChildTaskAliasList;                                         // 0x00B8   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_QuestTaskInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_QuestTaskInfo
{ 
	TArray<FSBSaveGameData_QuestTask>                  TaskList;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_QuestTaskGroup
/// Size: 0x00C8 (200 bytes) (0x000000 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FSBSaveGameData_QuestTaskGroup
{ 
	FName                                              TaskGroupAlias;                                             // 0x0000   (0x0008)  
	TEnumAsByte<ESBQuestTaskGroupState>                TaskGroupState;                                             // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	TMap<int32_t, int32_t>                             TaskValueMap;                                               // 0x0010   (0x0050)  
	TArray<FSBSaveGameData_QuestTaskInfo>              TaskInfoList;                                               // 0x0060   (0x0010)  
	TMap<FName, FSBSaveGameData_QuestTask>             AllChildTaskList;                                           // 0x0070   (0x0050)  
	int32_t                                            PathIndex;                                                  // 0x00C0   (0x0004)  
	int32_t                                            PathNodeIndex;                                              // 0x00C4   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_QuestObject
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBSaveGameData_QuestObject
{ 
	FName                                              QuestAlias;                                                 // 0x0000   (0x0008)  
	int32_t                                            QuestState;                                                 // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FSBSaveGameData_QuestTaskGroup>             QuestTaskGroupList;                                         // 0x0010   (0x0010)  
	int32_t                                            PathIndex;                                                  // 0x0020   (0x0004)  
	int32_t                                            PathNodeIndex;                                              // 0x0024   (0x0004)  
	int64_t                                            LastUpdateTimestamp;                                        // 0x0028   (0x0008)  
};

/// Struct /Script/SB.SBSaveGameData_QuestCustomTracking
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSaveGameData_QuestCustomTracking
{ 
	FName                                              TargetAlias;                                                // 0x0000   (0x0008)  
	TEnumAsByte<ESBUIWorldMapTargetType>               TargetType;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	FName                                              TargetWorldAlias;                                           // 0x000C   (0x0008)  
	FName                                              TargetAreaAlias;                                            // 0x0014   (0x0008)  
	int32_t                                            TargetPinIndex;                                             // 0x001C   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_CustomPin
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBSaveGameData_CustomPin
{ 
	int32_t                                            PinIndex;                                                   // 0x0000   (0x0004)  
	FVector2D                                          PinWorldLocation;                                           // 0x0004   (0x0008)  
	FName                                              TypeTag;                                                    // 0x000C   (0x0008)  
};

/// Struct /Script/SB.SBSaveGameData_CustomPinContainer
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBSaveGameData_CustomPinContainer
{ 
	FName                                              WorldAlias;                                                 // 0x0000   (0x0008)  
	FName                                              AreaAlias;                                                  // 0x0008   (0x0008)  
	FName                                              WorldMapAlias;                                              // 0x0010   (0x0008)  
	TArray<FSBSaveGameData_CustomPin>                  CustomPinList;                                              // 0x0018   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_Quest
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align n/a MaxSize: 0x0088
struct FSBSaveGameData_Quest
{ 
	TArray<FSBSaveGameData_QuestObject>                ProgressQuestList;                                          // 0x0000   (0x0010)  
	TArray<FSBSaveGameData_QuestObject>                CompleteQuestList;                                          // 0x0010   (0x0010)  
	TArray<FSBSaveGameData_QuestObject>                FailedQuestList;                                            // 0x0020   (0x0010)  
	TArray<FName>                                      TrackingQuestAliases;                                       // 0x0030   (0x0010)  
	TArray<FSBSaveGameData_QuestCustomTracking>        CustomTrackingList;                                         // 0x0040   (0x0010)  
	TArray<FSBSaveGameData_CustomPinContainer>         CustomPinContainerList;                                     // 0x0050   (0x0010)  
	FName                                              CustomTrackingTargetAlias;                                  // 0x0060   (0x0008)  
	TEnumAsByte<ESBUIWorldMapTargetType>               CustomTrackingTargetType;                                   // 0x0068   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	FName                                              CustomTrackingTargetWorldAlias;                             // 0x006C   (0x0008)  
	FName                                              CustomTrackingTargetAreaAlias;                              // 0x0074   (0x0008)  
	FName                                              TrackingQuestAlias;                                         // 0x007C   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneEventActor_RestoreChunkInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FSBZoneEventActor_RestoreChunkInfo
{ 
	bool                                               bVisible;                                                   // 0x0000   (0x0001)  
	bool                                               bDynamic;                                                   // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	FVector                                            Location;                                                   // 0x0004   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0010   (0x000C)  
};

/// Struct /Script/SB.SBZoneEventActor_RestoreMeshInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBZoneEventActor_RestoreMeshInfo
{ 
	bool                                               bVisible;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0xF];                                       // 0x0001   (0x000F)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
};

/// Struct /Script/SB.SBElementInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBElementInfo
{ 
	float                                              ElementAmount;                                              // 0x0000   (0x0004)  
	float                                              MaxAmount;                                                  // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_ZoneEventActorStorage
/// Size: 0x0170 (368 bytes) (0x000000 - 0x000170) align n/a MaxSize: 0x0170
struct FSBSaveGameData_ZoneEventActorStorage
{ 
	FName                                              ZoneEventActorName;                                         // 0x0000   (0x0008)  
	bool                                               bEnablePhysics;                                             // 0x0008   (0x0001)  
	bool                                               bDestruction;                                               // 0x0009   (0x0001)  
	bool                                               bActorEnableCollision;                                      // 0x000A   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x000B   (0x0001)  MISSED
	int32_t                                            RemainDestructCount;                                        // 0x000C   (0x0004)  
	FVector                                            Location;                                                   // 0x0010   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x001C   (0x000C)  
	TMap<uint32_t, FSBZoneEventActor_RestoreChunkInfo> RestoreChunkInfoMap;                                        // 0x0028   (0x0050)  
	TMap<FString, FSBZoneEventActor_RestoreMeshInfo>   MeshInfoMap;                                                // 0x0078   (0x0050)  
	TMap<TEnumAsByte<ESBElementType>, FSBElementInfo>  ElementInfoMap;                                             // 0x00C8   (0x0050)  
	TMap<FString, bool>                                PhysicsConstraintStateMap;                                  // 0x0118   (0x0050)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0168   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0169   (0x0007)  MISSED
};

/// Struct /Script/SB.SBSaveGameData_WorldContainer
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSaveGameData_WorldContainer
{ 
	FName                                              WorldAlias;                                                 // 0x0000   (0x0008)  
	TArray<FSBSaveGameData_ZoneEventActorStorage>      ZoneEventActorStorageList;                                  // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_ZoneEnvStateInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_ZoneEnvStateInfo
{ 
	FName                                              StateTagName;                                               // 0x0000   (0x0008)  
	bool                                               bDropedReward;                                              // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            CurrentProgressValue;                                       // 0x000C   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_ZoneEnvNotifyInfo
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBSaveGameData_ZoneEnvNotifyInfo
{ 
	bool                                               bFire;                                                      // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBSaveGameData_ZoneEnvProgressInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBSaveGameData_ZoneEnvProgressInfo
{ 
	float                                              CurrrentProgressValue;                                      // 0x0000   (0x0004)  
	float                                              MaxProgressValue;                                           // 0x0004   (0x0004)  
	float                                              TargetSpeed;                                                // 0x0008   (0x0004)  
	float                                              SpeedInterpTime;                                            // 0x000C   (0x0004)  
	float                                              InterpStartSpeed;                                           // 0x0010   (0x0004)  
	float                                              CurrentSpeed;                                               // 0x0014   (0x0004)  
	float                                              CurrentInterpTime;                                          // 0x0018   (0x0004)  
	float                                              RangeStartProgressValue;                                    // 0x001C   (0x0004)  
	float                                              RangeEndProgressValue;                                      // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	TArray<FSBSaveGameData_ZoneEnvNotifyInfo>          NotifyInfoList;                                             // 0x0028   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_InteractInfo
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSBSaveGameData_InteractInfo
{ 
	bool                                               bInteracted;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TMap<FName, int32_t>                               CustomDataMap;                                              // 0x0008   (0x0050)  
};

/// Struct /Script/SB.SBSaveGameData_ZoneEnvChildObjInfo
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FSBSaveGameData_ZoneEnvChildObjInfo
{ 
	FName                                              ObjectName;                                                 // 0x0000   (0x0008)  
	TEnumAsByte<ESBZoneEnvChildObjectType>             ObjectType;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	FVector                                            Location;                                                   // 0x000C   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0018   (0x000C)  
};

/// Struct /Script/SB.SBSaveGameData_ZoneEnvStorage
/// Size: 0x0278 (632 bytes) (0x000000 - 0x000278) align n/a MaxSize: 0x0278
struct FSBSaveGameData_ZoneEnvStorage
{ 
	FName                                              EnvStateSlotTag;                                            // 0x0000   (0x0008)  
	TEnumAsByte<ESBObjectState>                        EnvActivate;                                                // 0x0008   (0x0001)  
	TEnumAsByte<ESBZoneEnvActiveState>                 EnvActiveState;                                             // 0x0009   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x000A   (0x0002)  MISSED
	FName                                              EnvAlias;                                                   // 0x000C   (0x0008)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TMap<TEnumAsByte<ESBBufferDataSlot>, FString>      StringBufferData;                                           // 0x0018   (0x0050)  
	TMap<TEnumAsByte<ESBBufferDataSlot>, FVector>      VectorBufferData;                                           // 0x0068   (0x0050)  
	TMap<TEnumAsByte<ESBBufferDataSlot>, float>        FloatBufferData;                                            // 0x00B8   (0x0050)  
	TMap<TEnumAsByte<ESBBufferDataSlot>, int32_t>      IntBufferData;                                              // 0x0108   (0x0050)  
	TMap<TEnumAsByte<ESBBufferDataSlot>, bool>         BoolBufferData;                                             // 0x0158   (0x0050)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x01A9   (0x0007)  MISSED
	TArray<FSBSaveGameData_ZoneEnvStateInfo>           StateInfoList;                                              // 0x01B0   (0x0010)  
	TArray<FSBSaveGameData_ZoneEnvProgressInfo>        EnvProgressInfo;                                            // 0x01C0   (0x0010)  
	int32_t                                            CurrentTriggerCount;                                        // 0x01D0   (0x0004)  
	FVector                                            ActorLocation;                                              // 0x01D4   (0x000C)  
	FRotator                                           ActorRotation;                                              // 0x01E0   (0x000C)  
	FVector                                            QuestMarkerLocation;                                        // 0x01EC   (0x000C)  
	FSBSaveGameData_InteractInfo                       InteractData;                                               // 0x01F8   (0x0058)  
	FSBSaveGameData_ZoneEnvChildObjInfo                PhysMainObject;                                             // 0x0250   (0x0024)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x0274   (0x0004)  MISSED
};

/// Struct /Script/SB.DecoratorUsableTime
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FDecoratorUsableTime
{ 
	float                                              UsableTime;                                                 // 0x0000   (0x0004)  
	float                                              InitialTimeValue;                                           // 0x0004   (0x0004)  
	float                                              CycleTimeValue;                                             // 0x0008   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_MetaAI
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSaveGameData_MetaAI
{ 
	FName                                              SpecialBehaviorTag;                                         // 0x0000   (0x0008)  
	ESBMetaAIThink                                     ForceThink;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	FName                                              ForceThink_BehaviorAlias;                                   // 0x000C   (0x0008)  
	float                                              Tiredness;                                                  // 0x0014   (0x0004)  
	float                                              TalkWatingTime;                                             // 0x0018   (0x0004)  
	float                                              AINodeGroupIndex;                                           // 0x001C   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_ZoneNpcStorage
/// Size: 0x0298 (664 bytes) (0x000000 - 0x000298) align n/a MaxSize: 0x0298
struct FSBSaveGameData_ZoneNpcStorage
{ 
	int32_t                                            EventSpawnId;                                               // 0x0000   (0x0004)  
	char                                               SpawnIndex;                                                 // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FName                                              CharacterDataAlias;                                         // 0x0008   (0x0008)  
	FVector                                            ActorLocation;                                              // 0x0010   (0x000C)  
	FRotator                                           ActorRotation;                                              // 0x001C   (0x000C)  
	int32_t                                            LifeState;                                                  // 0x0028   (0x0004)  
	bool                                               bHiddenGame;                                                // 0x002C   (0x0001)  
	bool                                               bActiveActor;                                               // 0x002D   (0x0001)  
	TEnumAsByte<ESBObjectState>                        ObjectState;                                                // 0x002E   (0x0001)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x002F   (0x0001)  
	FName                                              StayZoneAlias;                                              // 0x0030   (0x0008)  
	FName                                              RetargetSpawnPointName;                                     // 0x0038   (0x0008)  
	TMap<FName, int32_t>                               AI_Int32Map;                                                // 0x0040   (0x0050)  
	TMap<FName, float>                                 AI_FloatMap;                                                // 0x0090   (0x0050)  
	TMap<FName, FVector>                               AI_VectorMap;                                               // 0x00E0   (0x0050)  
	TMap<FName, bool>                                  AI_BoolMap;                                                 // 0x0130   (0x0050)  
	TMap<FName, FDecoratorUsableTime>                  AI_UsableTimeMap;                                           // 0x0180   (0x0050)  
	TMap<FName, float>                                 AI_ReactTimerMap;                                           // 0x01D0   (0x0050)  
	FSBSaveGameData_InteractInfo                       InteractData;                                               // 0x0220   (0x0058)  
	FSBSaveGameData_MetaAI                             MetaAIData;                                                 // 0x0278   (0x0020)  
};

/// Struct /Script/SB.SBSaveGameData_ZoneTriggerStorage
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBSaveGameData_ZoneTriggerStorage
{ 
	TEnumAsByte<ESBObjectState>                        TriggerActivate;                                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            DoingCount;                                                 // 0x0004   (0x0004)  
	FName                                              TriggerAlias;                                               // 0x0008   (0x0008)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0010   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/SB.SBSaveGameData_ZoneEventItemStorage
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FSBSaveGameData_ZoneEventItemStorage
{ 
	FName                                              EventSpawnAlias;                                            // 0x0000   (0x0008)  
	FVector                                            ActorLocation;                                              // 0x0008   (0x000C)  
	FRotator                                           ActorRotation;                                              // 0x0014   (0x000C)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0020   (0x0001)  
	bool                                               bGetStorage;                                                // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0022   (0x0002)  MISSED
};

/// Struct /Script/SB.SBSaveGameData_WorldObjectStorage
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBSaveGameData_WorldObjectStorage
{ 
	FName                                              UniqueKey;                                                  // 0x0000   (0x0008)  
	TEnumAsByte<ESBWorldObjectType>                    ObjectType;                                                 // 0x0008   (0x0001)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x0009   (0x0001)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x000A   (0x0001)  
	unsigned char                                      UnknownData02_6[0x5];                                       // 0x000B   (0x0005)  MISSED
	FString                                            JsonInfo;                                                   // 0x0010   (0x0010)  
	int32_t                                            EffectVolumeDeadCount;                                      // 0x0020   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/SB.SBSaveGameData_ZoneContainer
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FSBSaveGameData_ZoneContainer
{ 
	bool                                               bDirty;                                                     // 0x0000   (0x0001)  
	bool                                               bZoneReset;                                                 // 0x0001   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	FName                                              ZoneAlias;                                                  // 0x0004   (0x0008)  
	TEnumAsByte<ESBObjectState>                        ZoneObjectState;                                            // 0x000C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	TArray<FSBSaveGameData_ZoneEnvStorage>             ZoneEnvStorageList;                                         // 0x0010   (0x0010)  
	TArray<FSBSaveGameData_ZoneNpcStorage>             ZoneNpcStorageList;                                         // 0x0020   (0x0010)  
	TArray<FSBSaveGameData_ZoneTriggerStorage>         ZoneTriggerStorageList;                                     // 0x0030   (0x0010)  
	TArray<FSBSaveGameData_ZoneEventItemStorage>       ZoneEventItemStorageList;                                   // 0x0040   (0x0010)  
	TArray<FSBSaveGameData_ZoneEventActorStorage>      ZoneEventActorStorageList;                                  // 0x0050   (0x0010)  
	TArray<FSBSaveGameData_WorldObjectStorage>         WorldObjectStorageMap;                                      // 0x0060   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_Env
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSaveGameData_Env
{ 
	TArray<FSBSaveGameData_WorldContainer>             WorldContainerList;                                         // 0x0000   (0x0010)  
	TArray<FSBSaveGameData_ZoneContainer>              ZoneContainerList;                                          // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_ItemObject
/// Size: 0x0160 (352 bytes) (0x000000 - 0x000160) align n/a MaxSize: 0x0160
struct FSBSaveGameData_ItemObject
{ 
	FName                                              ItemAlias;                                                  // 0x0000   (0x0008)  
	int32_t                                            ItemCount;                                                  // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FSBItemInstance                                    ItemInstance;                                               // 0x0010   (0x0150)  
};

/// Struct /Script/SB.SBItemPocket
/// Size: 0x00C0 (192 bytes) (0x000000 - 0x0000C0) align n/a MaxSize: 0x00C0
struct FSBItemPocket
{ 
	TEnumAsByte<ESBItemBucketType>                     BucketType;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FGuid                                              Guid;                                                       // 0x0004   (0x0010)  
	uint32_t                                           OwnerActorGUID;                                             // 0x0014   (0x0004)  
	FVector                                            SpawnPosition;                                              // 0x0018   (0x000C)  
	FRotator                                           SpawnRotation;                                              // 0x0024   (0x000C)  
	FVector                                            LastLocation;                                               // 0x0030   (0x000C)  
	FRotator                                           LastRotation;                                               // 0x003C   (0x000C)  
	uint32_t                                           EventSpawnId;                                               // 0x0048   (0x0004)  
	FName                                              SpawnPointName;                                             // 0x004C   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	TArray<FSBItemInstance>                            ItemInstArray;                                              // 0x0058   (0x0010)  
	bool                                               bFinishSimulatePhysics;                                     // 0x0068   (0x0001)  
	bool                                               Spawned;                                                    // 0x0069   (0x0001)  
	unsigned char                                      UnknownData05_7[0x56];                                      // 0x006A   (0x0056)  MISSED
};

/// Struct /Script/SB.SBSaveGameData_PocketObject
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSaveGameData_PocketObject
{ 
	FName                                              Alias;                                                      // 0x0000   (0x0008)  
	TArray<FSBItemPocket>                              SpawnPocketArray;                                           // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_WorldEventItem
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSaveGameData_WorldEventItem
{ 
	FName                                              WorldAlias;                                                 // 0x0000   (0x0008)  
	TArray<FSBSaveGameData_ZoneEventItemStorage>       EventSpawnItemList;                                         // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_Item
/// Size: 0x0170 (368 bytes) (0x000000 - 0x000170) align n/a MaxSize: 0x0170
struct FSBSaveGameData_Item
{ 
	TArray<FSBSaveGameData_ItemObject>                 Inventory;                                                  // 0x0000   (0x0010)  
	TMap<FName, FSBSaveGameData_PocketObject>          WorldPocketMap;                                             // 0x0010   (0x0050)  
	TMap<FName, FSBSaveGameData_WorldEventItem>        WorldEventItemMap;                                          // 0x0060   (0x0050)  
	TMap<FName, FSBSaveGameData_PocketObject>          ZonePocketMap;                                              // 0x00B0   (0x0050)  
	TSet<FName>                                        ItemOtaineSet;                                              // 0x0100   (0x0050)  
	int32_t                                            HealItemSlotIndex;                                          // 0x0150   (0x0004)  
	int32_t                                            UtilItemSlotIndex;                                          // 0x0154   (0x0004)  
	int32_t                                            BulletItemSlotIndex;                                        // 0x0158   (0x0004)  
	int32_t                                            FishingItemSlotIndex;                                       // 0x015C   (0x0004)  
	TArray<int32_t>                                    BulletSubIndexArray;                                        // 0x0160   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_AcquisitionSkillObject
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBSaveGameData_AcquisitionSkillObject
{ 
	FName                                              AcquisitionSkillAlias;                                      // 0x0000   (0x0008)  
};

/// Struct /Script/SB.SBSaveGameData_AcquisitionSkill
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FSBSaveGameData_AcquisitionSkill
{ 
	TArray<FSBSaveGameData_AcquisitionSkillObject>     AcquisitionSkillList;                                       // 0x0000   (0x0010)  
	TMap<TEnumAsByte<ESBSkillSlotType>, uint32_t>      SkillSlotMap;                                               // 0x0010   (0x0050)  
};

/// Struct /Script/SB.SBSaveGameData_AchievementObject
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_AchievementObject
{ 
	FName                                              AchievementAlias;                                           // 0x0000   (0x0008)  
	uint32_t                                           ProgressValue;                                              // 0x0008   (0x0004)  
	bool                                               bCompleted;                                                 // 0x000C   (0x0001)  
	bool                                               bRecievedReward;                                            // 0x000D   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x000E   (0x0002)  MISSED
};

/// Struct /Script/SB.SBSaveGameData_Achievement
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_Achievement
{ 
	TArray<FSBSaveGameData_AchievementObject>          AchievementList;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_FishingLog
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_FishingLog
{ 
	FName                                              FishAlias;                                                  // 0x0000   (0x0008)  
	uint32_t                                           CatchCount;                                                 // 0x0008   (0x0004)  
	float                                              MaxWeightRecord;                                            // 0x000C   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_FishingLogBook
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_FishingLogBook
{ 
	TArray<FSBSaveGameData_FishingLog>                 FishingLogList;                                             // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_ShopLimitedItemHistoryObject
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBSaveGameData_ShopLimitedItemHistoryObject
{ 
	FName                                              ItemAlias;                                                  // 0x0000   (0x0008)  
	int32_t                                            PurchaseCount;                                              // 0x0008   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_ShopLimitedItemHistoryArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_ShopLimitedItemHistoryArray
{ 
	TArray<FSBSaveGameData_ShopLimitedItemHistoryObject> Array;                                                    // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_ShopFriendShip
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBSaveGameData_ShopFriendShip
{ 
	float                                              TotalFriendShip;                                            // 0x0000   (0x0004)  
	int32_t                                            FriendShipLevel;                                            // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_ShopLimitedItemHistory
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FSBSaveGameData_ShopLimitedItemHistory
{ 
	TMap<FName, FSBSaveGameData_ShopLimitedItemHistoryArray> Purchase;                                             // 0x0000   (0x0050)  
	TMap<FName, FSBSaveGameData_ShopFriendShip>        FriendShip;                                                 // 0x0050   (0x0050)  
};

/// Struct /Script/SB.SBSaveGameData_ActorStorageProperty
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBSaveGameData_ActorStorageProperty
{ 
	int32_t                                            CustomIntValue;                                             // 0x0000   (0x0004)  
	float                                              CustomFloatValue;                                           // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_ActorStorage
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBSaveGameData_ActorStorage
{ 
	TMap<FName, FSBSaveGameData_ActorStorageProperty>  ActorStorageMap;                                            // 0x0000   (0x0050)  
};

/// Struct /Script/SB.SBSaveGameData_RedDot
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBSaveGameData_RedDot
{ 
	FName                                              DotAlias;                                                   // 0x0000   (0x0008)  
	TEnumAsByte<ESBUIRedDotState>                      DotState;                                                   // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	FName                                              ParentDotAlias;                                             // 0x000C   (0x0008)  
};

/// Struct /Script/SB.SBSaveGameData_UI
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_UI
{ 
	TArray<FSBSaveGameData_RedDot>                     RedDotArray;                                                // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_PlayRecordTaskData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBSaveGameData_PlayRecordTaskData
{ 
	bool                                               bSuccessTask;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              DataAlias;                                                  // 0x0004   (0x0008)  
};

/// Struct /Script/SB.SBSaveGameData_PlayRecordTaskList
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_PlayRecordTaskList
{ 
	TArray<FSBSaveGameData_PlayRecordTaskData>         TaskDataList;                                               // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_PlayRecordGroup
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSBSaveGameData_PlayRecordGroup
{ 
	FName                                              RecordGroupName;                                            // 0x0000   (0x0008)  
	TMap<TEnumAsByte<ESBQuestMissionType>, FSBSaveGameData_PlayRecordTaskList> RecordTaskGroupMap;                 // 0x0008   (0x0050)  
};

/// Struct /Script/SB.SBSaveGameData_PlayRecordData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBSaveGameData_PlayRecordData
{ 
	TMap<FName, FSBSaveGameData_PlayRecordGroup>       ProgressRecordGroup;                                        // 0x0000   (0x0050)  
};

/// Struct /Script/SB.SBSaveGameData_HintObject
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBSaveGameData_HintObject
{ 
	FName                                              HintAlias;                                                  // 0x0000   (0x0008)  
	float                                              DelayActivateTime;                                          // 0x0008   (0x0004)  
};

/// Struct /Script/SB.SBSaveGameData_Hint
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBSaveGameData_Hint
{ 
	TArray<FSBSaveGameData_HintObject>                 DelayActivateHintList;                                      // 0x0000   (0x0010)  
	TArray<FName>                                      ActivateHintList;                                           // 0x0010   (0x0010)  
	TArray<FName>                                      CompleteHintList;                                           // 0x0020   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_TrainingRoom
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSBSaveGameData_TrainingRoom
{ 
	bool                                               bFirstTrainingRoom;                                         // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TMap<FName, int8_t>                                FirstTimeAcquisionSkill;                                    // 0x0008   (0x0050)  
};

/// Struct /Script/SB.SBSaveGameData_EventGiftInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_EventGiftInfo
{ 
	TArray<FName>                                      GiftList;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_NikkeStageInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FSBSaveGameData_NikkeStageInfo
{ 
	FName                                              StageAlias;                                                 // 0x0000   (0x0008)  
	bool                                               bVictory;                                                   // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	uint32_t                                           PlayerAccumulatedDamage;                                    // 0x000C   (0x0004)  
	float                                              BestPlayTime;                                               // 0x0010   (0x0004)  
	FName                                              CompleteEntryEnv;                                           // 0x0014   (0x0008)  
};

/// Struct /Script/SB.SBSaveGameData_Nikke
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSaveGameData_Nikke
{ 
	TArray<FSBSaveGameData_NikkeStageInfo>             NikkeStageInfoList;                                         // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_NewGamePlusBaseInfo
/// Size: 0x0678 (1656 bytes) (0x000000 - 0x000678) align n/a MaxSize: 0x0678
struct FSBSaveGameData_NewGamePlusBaseInfo
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            EndingCount;                                                // 0x0004   (0x0004)  
	int32_t                                            NoticeNewGamePlus;                                          // 0x0008   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	int64_t                                            EndingTimeStamp_KillElder;                                  // 0x0010   (0x0008)  
	int64_t                                            EndingTimeStamp_KillLily;                                   // 0x0018   (0x0008)  
	int64_t                                            EndingTimeStamp_SaveLily;                                   // 0x0020   (0x0008)  
	FSBSaveGameData_TrainingRoom                       TrainingRoomData;                                           // 0x0028   (0x0058)  
	FSBSaveGameData_Actor                              ActorSaveData;                                              // 0x0080   (0x02B0)  
	TMap<FName, FSBSaveGameData_ZoneContainer>         ZoneContainerMap;                                           // 0x0330   (0x0050)  
	FSBSaveGameData_AcquisitionSkill                   AcquisitionSkill;                                           // 0x0380   (0x0060)  
	FSBSaveGameData_Achievement                        AchievementSaveData;                                        // 0x03E0   (0x0010)  
	FSBSaveGameData_UI                                 UISaveData;                                                 // 0x03F0   (0x0010)  
	FSBSaveGameData_Item                               ItemSaveData;                                               // 0x0400   (0x0170)  
	FSBSaveGameData_FishingLogBook                     FishingLogBookSaveData;                                     // 0x0570   (0x0010)  
	FSBSaveGameData_Theater                            TheaterData;                                                // 0x0580   (0x0050)  
	FSBSaveGameData_EventGiftInfo                      EventGiftData;                                              // 0x05D0   (0x0010)  
	FSBSaveGameData_Nikke                              NikkeStageInfo;                                             // 0x05E0   (0x0010)  
	FSBSaveGameData_Quest                              QuestData;                                                  // 0x05F0   (0x0088)  
};

/// Struct /Script/SB.SBSaveGameData_DebugHistoryLogSection
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSaveGameData_DebugHistoryLogSection
{ 
	TEnumAsByte<ESBDebugHistoryLogType>                LogSectionType;                                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FString>                                    LogList;                                                    // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBSaveGameData_DebugHistoryLog
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSaveGameData_DebugHistoryLog
{ 
	FName                                              KeyAlias;                                                   // 0x0000   (0x0008)  
	TArray<FSBSaveGameData_DebugHistoryLogSection>     LogSectionList;                                             // 0x0008   (0x0010)  
};

/// Class /Script/SB.SBSaveGame
/// Size: 0x0D88 (3464 bytes) (0x000088 - 0x000D88) align n/a MaxSize: 0x0D88
class USBSaveGame : public USBSaveBase
{ 
public:
	int32_t                                            SaveFileVersion;                                            // 0x0088   (0x0004)  
	bool                                               bEnableSnapShot;                                            // 0x008C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	FName                                              SnapShotZoneAlias;                                          // 0x0090   (0x0008)  
	int64_t                                            NewGameCreateTime;                                          // 0x0098   (0x0008)  
	FSBSaveVersionInfo                                 VersionInfo;                                                // 0x00A0   (0x0048)  
	TMap<FName, FSBSaveGameData_Actor>                 DataMap_SBActor;                                            // 0x00E8   (0x0050)  
	TMap<FName, FSBSaveGameData_Effect>                DataMap_SBEffect;                                           // 0x0138   (0x0050)  
	TMap<FName, FSBSaveGameData_Quest>                 DataMap_SBQuest;                                            // 0x0188   (0x0050)  
	TMap<FName, FSBSaveGameData_Env>                   DataMap_SBEnv;                                              // 0x01D8   (0x0050)  
	TMap<FName, FSBSaveGameData_Item>                  DataMap_SBItem;                                             // 0x0228   (0x0050)  
	TMap<FName, FSBSaveGameData_AcquisitionSkill>      DataMap_SBAcquisitionSkill;                                 // 0x0278   (0x0050)  
	FSBSaveGameData_Achievement                        SBAchievement;                                              // 0x02C8   (0x0010)  
	FSBSaveGameData_FishingLogBook                     SBFishingLogBook;                                           // 0x02D8   (0x0010)  
	TMap<FName, float>                                 DataMap_float;                                              // 0x02E8   (0x0050)  
	TMap<FName, FString>                               DataMap_FString;                                            // 0x0338   (0x0050)  
	TMap<FName, int32_t>                               DataMap_int32;                                              // 0x0388   (0x0050)  
	TMap<FName, int64_t>                               DataMap_int64;                                              // 0x03D8   (0x0050)  
	TMap<FName, FVector>                               DataMap_FVector;                                            // 0x0428   (0x0050)  
	FSBSaveGameData_ShopLimitedItemHistory             SBShopHistory;                                              // 0x0478   (0x00A0)  
	FSBSaveGameData_ActorStorage                       LevelActorStorage;                                          // 0x0518   (0x0050)  
	FSBSaveGameData_Theater                            TheaterStorage;                                             // 0x0568   (0x0050)  
	FSBSaveGameData_UI                                 UIStorage;                                                  // 0x05B8   (0x0010)  
	FSBSaveGameData_PlayRecordData                     GamePlayProgressRecordData;                                 // 0x05C8   (0x0050)  
	FSBSaveGameData_Hint                               SBHint;                                                     // 0x0618   (0x0030)  
	FSBSaveGameData_TrainingRoom                       TrainingRoomData;                                           // 0x0648   (0x0058)  
	FSBSaveGameData_NewGamePlusBaseInfo                NewGamePlusBaseData;                                        // 0x06A0   (0x0678)  
	FSBSaveGameData_EventGiftInfo                      EventGiftInfo;                                              // 0x0D18   (0x0010)  
	FSBSaveGameData_Nikke                              NikkeStageInfo;                                             // 0x0D28   (0x0010)  
	TMap<FName, FSBSaveGameData_DebugHistoryLog>       DebugHistoryLogMap;                                         // 0x0D38   (0x0050)  
};

/// Struct /Script/SB.SBActorSectorInfo
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align n/a MaxSize: 0x002C
struct FSBActorSectorInfo
{ 
	bool                                               bRegisteActor;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            MinSectorX;                                                 // 0x0004   (0x0004)  
	int32_t                                            MinSectorY;                                                 // 0x0008   (0x0004)  
	int32_t                                            MaxSectorX;                                                 // 0x000C   (0x0004)  
	int32_t                                            MaxSectorY;                                                 // 0x0010   (0x0004)  
	FVector                                            ActorOrigin;                                                // 0x0014   (0x000C)  
	FVector                                            ActorExtent;                                                // 0x0020   (0x000C)  
};

/// Class /Script/SB.SBSaveGameComponent
/// Size: 0x02B0 (688 bytes) (0x000260 - 0x0002B0) align n/a MaxSize: 0x02B0
class USBSaveGameComponent : public USceneComponent
{ 
public:
	FVector                                            BoxExtents;                                                 // 0x0260   (0x000C)  
	FColor                                             VolumeBoxColor;                                             // 0x026C   (0x0004)  
	FSBActorSectorInfo                                 SectorInfo;                                                 // 0x0270   (0x002C)  
	TEnumAsByte<ESBSaveGameCompModeType>               ModeType;                                                   // 0x029C   (0x0001)  
	bool                                               bInSideDontSave;                                            // 0x029D   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x029E   (0x0002)  MISSED
	float                                              DefaultExtents;                                             // 0x02A0   (0x0004)  
	unsigned char                                      UnknownData03_7[0xC];                                       // 0x02A4   (0x000C)  MISSED
};

/// Struct /Script/SB.SBSaveObjectInfo
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align n/a MaxSize: 0x0088
struct FSBSaveObjectInfo
{ 
	int32_t                                            UserIndex;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            SaveSlotName;                                               // 0x0008   (0x0010)  
	class USaveGame*                                   SaveGameObject;                                             // 0x0018   (0x0008)  
	TEnumAsByte<ESBSaveGameDataType>                   SaveObjectType;                                             // 0x0020   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0021   (0x0007)  MISSED
	FString                                            WithSaveFilePath;                                           // 0x0028   (0x0010)  
	FString                                            WithSaveFileName;                                           // 0x0038   (0x0010)  
	unsigned char                                      UnknownData05_7[0x40];                                      // 0x0048   (0x0040)  MISSED
};

/// Class /Script/SB.SBSaveManager
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class USBSaveManager : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x20];                                      // 0x0028   (0x0020)  MISSED
	TArray<FSBSaveObjectInfo>                          SaveObjectList;                                             // 0x0048   (0x0010)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x0058   (0x0018)  MISSED
};

/// Class /Script/SB.SBSaveVolume
/// Size: 0x0340 (832 bytes) (0x000318 - 0x000340) align n/a MaxSize: 0x0340
class ASBSaveVolume : public AVolume
{ 
public:
	FSBMapSectorID                                     SectorID;                                                   // 0x0318   (0x0008)  
	bool                                               bActive;                                                    // 0x0320   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0321   (0x0003)  MISSED
	FVector                                            LevelObjOrigin;                                             // 0x0324   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0330   (0x000C)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x033C   (0x0004)  MISSED
};

/// Class /Script/SB.SBScanActor
/// Size: 0x0308 (776 bytes) (0x0002C8 - 0x000308) align n/a MaxSize: 0x0308
class ASBScanActor : public AActor
{ 
public:
	class UMaterial*                                   ScanEffectMaterial;                                         // 0x02C8   (0x0008)  
	class UMaterial*                                   ContrastEffectMaterial;                                     // 0x02D0   (0x0008)  
	TWeakObjectPtr<class UPostProcessComponent*>       ContrastPP;                                                 // 0x02D8   (0x0008)  
	TWeakObjectPtr<class UMaterialInstanceDynamic*>    ContrastMID;                                                // 0x02E0   (0x0008)  
	TWeakObjectPtr<class UPostProcessComponent*>       ScanEffectPP;                                               // 0x02E8   (0x0008)  
	TWeakObjectPtr<class UMaterialInstanceDynamic*>    ScanEffectMID;                                              // 0x02F0   (0x0008)  
	TWeakObjectPtr<class UMaterialParameterCollectionInstance*> ScanEffectMaterialParamCI;                         // 0x02F8   (0x0008)  
	TWeakObjectPtr<class UMaterialParameterCollectionInstance*> ScanEffectMaterialParamCI_NavDecal;                // 0x0300   (0x0008)  
};

/// Class /Script/SB.SBSceneCaptureComponent2D
/// Size: 0x0980 (2432 bytes) (0x000970 - 0x000980) align n/a MaxSize: 0x0980
class USBSceneCaptureComponent2D : public USceneCaptureComponent2D
{ 
public:
	bool                                               bRegisterdTick;                                             // 0x0970   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x0971   (0x000F)  MISSED
};

/// Class /Script/SB.SBSequencerBaseWidget
/// Size: 0x06C0 (1728 bytes) (0x000680 - 0x0006C0) align n/a MaxSize: 0x06C0
class USBSequencerBaseWidget : public USBUserWidget
{ 
public:
	float                                              Duration;                                                   // 0x0680   (0x0004)  
	bool                                               RequireInput;                                               // 0x0684   (0x0001)  
	unsigned char                                      UnknownData01_6[0x23];                                      // 0x0685   (0x0023)  MISSED
	class UPlayerInput*                                Input;                                                      // 0x06A8   (0x0008)  
	class USBPlayerInput*                              inputSB;                                                    // 0x06B0   (0x0008)  
	int32_t                                            StartFrame;                                                 // 0x06B8   (0x0004)  
	int32_t                                            SectionStartFrame;                                          // 0x06BC   (0x0004)  

	/// Functions
	// Function /Script/SB.SBSequencerBaseWidget.FinishBlock
	constexpr static const FunctionPointer<USBSequencerBaseWidget, void, const int32_t> FinishBlock = { 0x27d0570, 0 }; 
	// Function /Script/SB.SBSequencerBaseWidget.EventStartBlock
	constexpr static const FunctionPointer<USBSequencerBaseWidget, void> EventStartBlock = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBSequencerBaseWidget.EventResetBlock
	constexpr static const FunctionPointer<USBSequencerBaseWidget, void> EventResetBlock = { 0x2bbb090, 2 }; 
	// Function /Script/SB.SBSequencerBaseWidget.EventFinishBlock
	constexpr static const FunctionPointer<USBSequencerBaseWidget, void, const int32_t> EventFinishBlock = { 0x2bbb090, 3 }; 
};

/// Class /Script/SB.SBSequencerAreaWidget
/// Size: 0x06F0 (1776 bytes) (0x0006C0 - 0x0006F0) align n/a MaxSize: 0x06F0
class USBSequencerAreaWidget : public USBSequencerBaseWidget
{ 
public:
	FText                                              MainText;                                                   // 0x06C0   (0x0018)  
	FText                                              SubText;                                                    // 0x06D8   (0x0018)  
};

/// Class /Script/SB.SBSequencerAttachChildWidget
/// Size: 0x0690 (1680 bytes) (0x000680 - 0x000690) align n/a MaxSize: 0x0690
class USBSequencerAttachChildWidget : public USBUserWidget
{ 
public:
	TArray<FString>                                    Arguments;                                                  // 0x0680   (0x0010)  

	/// Functions
	// Function /Script/SB.SBSequencerAttachChildWidget.EventSetup
	constexpr static const FunctionPointer<USBSequencerAttachChildWidget, void> EventSetup = { 0x2bbb090, 0 }; 
};

/// Class /Script/SB.SBSequencerAttachWidget
/// Size: 0x0720 (1824 bytes) (0x0006C0 - 0x000720) align n/a MaxSize: 0x0720
class USBSequencerAttachWidget : public USBSequencerBaseWidget
{ 
public:
	FSBLevelSequenceTheaterAttachWidgetSectionData     SectionData;                                                // 0x06C0   (0x0048)  
	FString                                            LastAssetPath;                                              // 0x0708   (0x0010)  
	class USBSequencerAttachChildWidget*               ChildWidget;                                                // 0x0718   (0x0008)  

	/// Functions
	// Function /Script/SB.SBSequencerAttachWidget.ClearWidget
	constexpr static const FunctionPointer<USBSequencerAttachWidget, void> ClearWidget = { 0x27cfea0, 0 }; 
};

/// Class /Script/SB.SBSequencerBackgroundWidget
/// Size: 0x06F8 (1784 bytes) (0x000680 - 0x0006F8) align n/a MaxSize: 0x06F8
class USBSequencerBackgroundWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData02_8[0x64];                                      // 0x0680   (0x0064)  MISSED
	float                                              FadeIn;                                                     // 0x06E4   (0x0004)  
	float                                              FadeOut;                                                    // 0x06E8   (0x0004)  
	bool                                               bRecordMode;                                                // 0x06EC   (0x0001)  
	unsigned char                                      UnknownData03_7[0xB];                                       // 0x06ED   (0x000B)  MISSED
};

/// Class /Script/SB.SBSequencerDialogueWidget
/// Size: 0x06E8 (1768 bytes) (0x0006C0 - 0x0006E8) align n/a MaxSize: 0x06E8
class USBSequencerDialogueWidget : public USBSequencerBaseWidget
{ 
public:
	FText                                              Message;                                                    // 0x06C0   (0x0018)  
	bool                                               bModeWaitInput;                                             // 0x06D8   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x06D9   (0x0003)  MISSED
	float                                              SkipFirstTick;                                              // 0x06DC   (0x0004)  
	bool                                               bInputComplete;                                             // 0x06E0   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x06E1   (0x0007)  MISSED
};

/// Struct /Script/SB.SBSequencerInputCounterInputInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBSequencerInputCounterInputInfo
{ 
	TEnumAsByte<ESBLevelSequenceTheaterInputCounterType> InputType;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FName>                                      CheckInputActionArray;                                      // 0x0008   (0x0010)  
	int32_t                                            InputGoalCount;                                             // 0x0018   (0x0004)  
	int32_t                                            InputCurrentCount;                                          // 0x001C   (0x0004)  
	bool                                               CheckLeftStickHit;                                          // 0x0020   (0x0001)  
	bool                                               CheckRightStickHit;                                         // 0x0021   (0x0001)  
	bool                                               ShowResult;                                                 // 0x0022   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0023   (0x0001)  MISSED
	float                                              StartSequenceTime;                                          // 0x0024   (0x0004)  
	float                                              EndSequenceTime;                                            // 0x0028   (0x0004)  
	bool                                               bFireFadeIn;                                                // 0x002C   (0x0001)  
	bool                                               bFireFadeOut;                                               // 0x002D   (0x0001)  
	bool                                               bResult;                                                    // 0x002E   (0x0001)  
	bool                                               bFireResult;                                                // 0x002F   (0x0001)  
	bool                                               bBindInput;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/SB.SBSequencerInputCounterActorInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBSequencerInputCounterActorInfo
{ 
	class UWidget*                                     PanelWidget;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0008   (0x0028)  MISSED
};

/// Struct /Script/SB.SBSequencerInputCounterBindInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSequencerInputCounterBindInfo
{ 
	unsigned char                                      UnknownData01_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Class /Script/SB.SBSequencerInputCounterWidget
/// Size: 0x08D8 (2264 bytes) (0x0006C0 - 0x0008D8) align n/a MaxSize: 0x08D8
class USBSequencerInputCounterWidget : public USBSequencerBaseWidget
{ 
public:
	FSBLevelSequenceEventInputCounterSectionData       SectionData;                                                // 0x06C0   (0x0118)  
	TEnumAsByte<ESBLevelSequenceTheaterInputCounterActionType> ActionKey;                                          // 0x07D8   (0x0001)  
	TEnumAsByte<ESBLevelSequenceTheaterInputCounterType> InputType;                                                // 0x07D9   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x07DA   (0x0002)  MISSED
	float                                              SequencerStartTime;                                         // 0x07DC   (0x0004)  
	float                                              SequencerEndTime;                                           // 0x07E0   (0x0004)  
	float                                              SequencerCurrentTime;                                       // 0x07E4   (0x0004)  
	TArray<class USBUserWidget*>                       ChildWidgets;                                               // 0x07E8   (0x0010)  
	TArray<FSBSequencerInputCounterInputInfo>          InputInfoArray;                                             // 0x07F8   (0x0010)  
	TArray<FName>                                      CheckInputActionArray;                                      // 0x0808   (0x0010)  
	bool                                               CheckLeftStickHit;                                          // 0x0818   (0x0001)  
	bool                                               CheckRightStickHit;                                         // 0x0819   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x081A   (0x0002)  MISSED
	int32_t                                            InputCurrentCount;                                          // 0x081C   (0x0004)  
	bool                                               ShowResult;                                                 // 0x0820   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0821   (0x0007)  MISSED
	class USBUserWidget*                               targetWidget;                                               // 0x0828   (0x0008)  
	TArray<FSBSequencerInputCounterActorInfo>          actorInfoArray;                                             // 0x0830   (0x0010)  
	FFrameRate                                         FrameRate;                                                  // 0x0840   (0x0008)  
	bool                                               bSkipTaked;                                                 // 0x0848   (0x0001)  
	bool                                               bModeWaitInput;                                             // 0x0849   (0x0001)  
	bool                                               bUpdatedTakeNext;                                           // 0x084A   (0x0001)  
	bool                                               bBindInput;                                                 // 0x084B   (0x0001)  
	int32_t                                            BindIndex;                                                  // 0x084C   (0x0004)  
	TMap<FName, FSBSequencerInputCounterBindInfo>      BindCountMap;                                               // 0x0850   (0x0050)  
	bool                                               bForceSuccess;                                              // 0x08A0   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x08A1   (0x0003)  MISSED
	float                                              LastHitAllowTime;                                           // 0x08A4   (0x0004)  
	class USBShowData*                                 HitShowData;                                                // 0x08A8   (0x0008)  
	FString                                            HitEventName;                                               // 0x08B0   (0x0010)  
	unsigned char                                      UnknownData09_7[0x18];                                      // 0x08C0   (0x0018)  MISSED

	/// Functions
	// Function /Script/SB.SBSequencerInputCounterWidget.GetTextureInputType
	constexpr static const FunctionPointer<USBSequencerInputCounterWidget, UTexture2D*, const USBTextureStyleSetData*, const TEnumAsByte<ESBLevelSequenceTheaterInputCounterType>> GetTextureInputType = { 0x27d1280, 0 }; 
	// Function /Script/SB.SBSequencerInputCounterWidget.GetResult
	constexpr static const FunctionPointer<USBSequencerInputCounterWidget, bool, const bool> GetResult = { 0x27d1190, 1 }; 
	// Function /Script/SB.SBSequencerInputCounterWidget.GetProgressPercent
	constexpr static const FunctionPointer<USBSequencerInputCounterWidget, float> GetProgressPercent = { 0x27d1060, 2 }; 
	// Function /Script/SB.SBSequencerInputCounterWidget.GetInputInfoResult
	constexpr static const FunctionPointer<USBSequencerInputCounterWidget, bool, const int32_t> GetInputInfoResult = { 0x27d1090, 3 }; 
	// Function /Script/SB.SBSequencerInputCounterWidget.ClearWidget
	constexpr static const FunctionPointer<USBSequencerInputCounterWidget, void> ClearWidget = { 0x27d13f0, 4 }; 
};

/// Struct /Script/SB.SBTheaterInteractionLineData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBTheaterInteractionLineData
{ 
	TEnumAsByte<ESBTheaterInteractionSelectType>       SelectType;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FText                                              DisplayText;                                                // 0x0008   (0x0018)  
	FName                                              TakeAlias;                                                  // 0x0020   (0x0008)  
	FName                                              InteractionGraphExec;                                       // 0x0028   (0x0008)  
	TEnumAsByte<ESBTheaterInteractionLineMarkerType>   MarkerType;                                                 // 0x0030   (0x0001)  
	TEnumAsByte<ESBQuestSymbolUIType>                  QuestSymbolUIType;                                          // 0x0031   (0x0001)  
	bool                                               bForceLock;                                                 // 0x0032   (0x0001)  
	unsigned char                                      UnknownData03_6[0x5];                                       // 0x0033   (0x0005)  MISSED
	FText                                              SelectedMsgPopupText;                                       // 0x0038   (0x0018)  
};

/// Class /Script/SB.SBSequencerInteractionSelectWidget
/// Size: 0x0740 (1856 bytes) (0x0006C0 - 0x000740) align n/a MaxSize: 0x0740
class USBSequencerInteractionSelectWidget : public USBSequencerBaseWidget
{ 
public:
	int32_t                                            FocusIndex;                                                 // 0x06C0   (0x0004)  
	TEnumAsByte<ESBTheaterInteractionDesignType>       DesignType;                                                 // 0x06C4   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x06C5   (0x0003)  MISSED
	TArray<FSBTheaterInteractionLineData>              DataArray;                                                  // 0x06C8   (0x0010)  
	bool                                               bUseInputCancel;                                            // 0x06D8   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x06D9   (0x0007)  MISSED
	FText                                              Message;                                                    // 0x06E0   (0x0018)  
	TEnumAsByte<ESBSequenceContentType>                ContentType;                                                // 0x06F8   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x06F9   (0x0003)  MISSED
	FSBLevelSequenceTheaterInteractionSelectSectionData SectionData;                                               // 0x06FC   (0x0014)  
	bool                                               bModeWaitInput;                                             // 0x0710   (0x0001)  
	bool                                               bSkipTaked;                                                 // 0x0711   (0x0001)  
	bool                                               bInputComplete;                                             // 0x0712   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x0713   (0x0001)  MISSED
	int32_t                                            SelectIndex;                                                // 0x0714   (0x0004)  
	int32_t                                            TheaterSceneID;                                             // 0x0718   (0x0004)  
	float                                              RemainInputBlockTime;                                       // 0x071C   (0x0004)  
	unsigned char                                      UnknownData09_7[0x20];                                      // 0x0720   (0x0020)  MISSED

	/// Functions
	// Function /Script/SB.SBSequencerInteractionSelectWidget.SetSelectAndFocusIndex
	constexpr static const FunctionPointer<USBSequencerInteractionSelectWidget, void, const int32_t> SetSelectAndFocusIndex = { 0x27d1a30, 0 }; 
	// Function /Script/SB.SBSequencerInteractionSelectWidget.RequestSlotFocusChange
	constexpr static const FunctionPointer<USBSequencerInteractionSelectWidget, void, const int32_t> RequestSlotFocusChange = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBSequencerInteractionSelectWidget.IsSelect
	constexpr static const FunctionPointer<USBSequencerInteractionSelectWidget, bool> IsSelect = { 0x27d1b10, 2 }; 
	// Function /Script/SB.SBSequencerInteractionSelectWidget.ClickSelect
	constexpr static const FunctionPointer<USBSequencerInteractionSelectWidget, void, const int32_t> ClickSelect = { 0x27d1950, 3 }; 
	// Function /Script/SB.SBSequencerInteractionSelectWidget.ClickInputAcceptYesNoPositive
	constexpr static const FunctionPointer<USBSequencerInteractionSelectWidget, void> ClickInputAcceptYesNoPositive = { 0x27d1930, 4 }; 
	// Function /Script/SB.SBSequencerInteractionSelectWidget.ClickInputAcceptYesNoNegative
	constexpr static const FunctionPointer<USBSequencerInteractionSelectWidget, void> ClickInputAcceptYesNoNegative = { 0x27d1910, 5 }; 
	// Function /Script/SB.SBSequencerInteractionSelectWidget.ClickInputAcceptAdamFusionPositive
	constexpr static const FunctionPointer<USBSequencerInteractionSelectWidget, void> ClickInputAcceptAdamFusionPositive = { 0x27d18f0, 6 }; 
	// Function /Script/SB.SBSequencerInteractionSelectWidget.ClickInputAcceptAdamFusionNegative
	constexpr static const FunctionPointer<USBSequencerInteractionSelectWidget, void> ClickInputAcceptAdamFusionNegative = { 0x27d18d0, 7 }; 
};

/// Class /Script/SB.SBSequencerMovieWidget
/// Size: 0x0718 (1816 bytes) (0x0006C0 - 0x000718) align n/a MaxSize: 0x0718
class USBSequencerMovieWidget : public USBSequencerBaseWidget
{ 
public:
	TWeakObjectPtr<class UBinkMediaPlayer*>            BinkMediaPlayerTemplate;                                    // 0x06C0   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x06C8   (0x0020)  MISSED
	FString                                            BKAssetPath;                                                // 0x06E8   (0x0010)  
	float                                              FadeInTime;                                                 // 0x06F8   (0x0004)  
	float                                              FadeOutTime;                                                // 0x06FC   (0x0004)  
	bool                                               bMovieAutoDestroy;                                          // 0x0700   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0701   (0x0003)  MISSED
	TWeakObjectPtr<class UBinkMediaPlayer*>            BinkMoviePlayer;                                            // 0x0704   (0x0008)  
	unsigned char                                      UnknownData05_7[0xC];                                       // 0x070C   (0x000C)  MISSED

	/// Functions
	// Function /Script/SB.SBSequencerMovieWidget.SequenceBinkPlayer
	constexpr static const FunctionPointer<USBSequencerMovieWidget, UBinkMediaPlayer*> SequenceBinkPlayer = { 0x27d2090, 0 }; 
	// Function /Script/SB.SBSequencerMovieWidget.ReleaseBinkPlayer
	constexpr static const FunctionPointer<USBSequencerMovieWidget, void> ReleaseBinkPlayer = { 0x27d2040, 1 }; 
	// Function /Script/SB.SBSequencerMovieWidget.IsValidBinkPlayer
	constexpr static const FunctionPointer<USBSequencerMovieWidget, bool> IsValidBinkPlayer = { 0x27d2130, 2 }; 
};

/// Class /Script/SB.SBSequencerPlayerChoiceSlotWidget
/// Size: 0x0690 (1680 bytes) (0x000680 - 0x000690) align n/a MaxSize: 0x0690
class USBSequencerPlayerChoiceSlotWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0680   (0x0010)  MISSED

	/// Functions
	// Function /Script/SB.SBSequencerPlayerChoiceSlotWidget.NotifyClick
	constexpr static const FunctionPointer<USBSequencerPlayerChoiceSlotWidget, void> NotifyClick = { 0x27d2540, 0 }; 
};

/// Class /Script/SB.SBSequencerPlayerChoiceWidget
/// Size: 0x0740 (1856 bytes) (0x0006C0 - 0x000740) align n/a MaxSize: 0x0740
class USBSequencerPlayerChoiceWidget : public USBSequencerBaseWidget
{ 
public:
	unsigned char                                      UnknownData03_8[0x50];                                      // 0x06C0   (0x0050)  MISSED
	int32_t                                            SelectMsgIndex;                                             // 0x0710   (0x0004)  
	unsigned char                                      UnknownData04_6[0xC];                                       // 0x0714   (0x000C)  MISSED
	FSBLevelSequenceTheaterPlayerChoiceSectionData     SectionData;                                                // 0x0720   (0x0018)  
	bool                                               bModeWaitInput;                                             // 0x0738   (0x0001)  
	bool                                               bSkipTaked;                                                 // 0x0739   (0x0001)  
	bool                                               bInputComplete;                                             // 0x073A   (0x0001)  
	unsigned char                                      UnknownData05_7[0x5];                                       // 0x073B   (0x0005)  MISSED
};

/// Struct /Script/SB.SBSequencerQTEInputInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBSequencerQTEInputInfo
{ 
	TEnumAsByte<ESBLevelSequenceTheaterQTEType>        InputType;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FName>                                      CheckInputActionArray;                                      // 0x0008   (0x0010)  
	int32_t                                            InputGoalCount;                                             // 0x0018   (0x0004)  
	int32_t                                            InputCurrentCount;                                          // 0x001C   (0x0004)  
	bool                                               CheckLeftStickHit;                                          // 0x0020   (0x0001)  
	bool                                               CheckRightStickHit;                                         // 0x0021   (0x0001)  
	bool                                               ShowResult;                                                 // 0x0022   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0023   (0x0001)  MISSED
	float                                              StartSequenceTime;                                          // 0x0024   (0x0004)  
	float                                              EndSequenceTime;                                            // 0x0028   (0x0004)  
	bool                                               bFireFadeIn;                                                // 0x002C   (0x0001)  
	bool                                               bFireFadeOut;                                               // 0x002D   (0x0001)  
	bool                                               bResult;                                                    // 0x002E   (0x0001)  
	bool                                               bFireResult;                                                // 0x002F   (0x0001)  
	bool                                               bBindInput;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/SB.SBSequencerQTEActorInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBSequencerQTEActorInfo
{ 
	class UWidget*                                     PanelWidget;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0008   (0x0028)  MISSED
};

/// Struct /Script/SB.SBSequencerQTEBindInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSequencerQTEBindInfo
{ 
	unsigned char                                      UnknownData01_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Class /Script/SB.SBSequencerQTEWidget
/// Size: 0x0890 (2192 bytes) (0x0006C0 - 0x000890) align n/a MaxSize: 0x0890
class USBSequencerQTEWidget : public USBSequencerBaseWidget
{ 
public:
	FSBLevelSequenceEventQTESectionData                SectionData;                                                // 0x06C0   (0x00C0)  
	TEnumAsByte<ESBLevelSequenceTheaterQTEType>        InputType;                                                  // 0x0780   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0781   (0x0003)  MISSED
	FName                                              InputAction;                                                // 0x0784   (0x0008)  
	FName                                              UIInputAction;                                              // 0x078C   (0x0008)  
	float                                              SequencerStartTime;                                         // 0x0794   (0x0004)  
	float                                              SequencerEndTime;                                           // 0x0798   (0x0004)  
	float                                              SequencerCurrentTime;                                       // 0x079C   (0x0004)  
	TArray<class USBUserWidget*>                       ChildWidgets;                                               // 0x07A0   (0x0010)  
	TArray<FSBSequencerQTEInputInfo>                   InputInfoArray;                                             // 0x07B0   (0x0010)  
	TArray<FName>                                      CheckInputActionArray;                                      // 0x07C0   (0x0010)  
	bool                                               CheckLeftStickHit;                                          // 0x07D0   (0x0001)  
	bool                                               CheckRightStickHit;                                         // 0x07D1   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x07D2   (0x0002)  MISSED
	int32_t                                            InputCurrentCount;                                          // 0x07D4   (0x0004)  
	bool                                               ShowResult;                                                 // 0x07D8   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x07D9   (0x0007)  MISSED
	class USBUserWidget*                               targetWidget;                                               // 0x07E0   (0x0008)  
	TArray<FSBSequencerQTEActorInfo>                   actorInfoArray;                                             // 0x07E8   (0x0010)  
	FFrameRate                                         FrameRate;                                                  // 0x07F8   (0x0008)  
	bool                                               bSkipTaked;                                                 // 0x0800   (0x0001)  
	bool                                               bModeWaitInput;                                             // 0x0801   (0x0001)  
	bool                                               bUpdatedTakeNext;                                           // 0x0802   (0x0001)  
	bool                                               bBindInput;                                                 // 0x0803   (0x0001)  
	int32_t                                            BindIndex;                                                  // 0x0804   (0x0004)  
	TMap<FName, FSBSequencerQTEBindInfo>               BindCountMap;                                               // 0x0808   (0x0050)  
	bool                                               bForceSuccess;                                              // 0x0858   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0859   (0x0003)  MISSED
	float                                              LastHitAllowTime;                                           // 0x085C   (0x0004)  
	class USBShowData*                                 HitShowData;                                                // 0x0860   (0x0008)  
	FString                                            HitEventName;                                               // 0x0868   (0x0010)  
	unsigned char                                      UnknownData09_7[0x18];                                      // 0x0878   (0x0018)  MISSED

	/// Functions
	// Function /Script/SB.SBSequencerQTEWidget.GetTextureInputType
	constexpr static const FunctionPointer<USBSequencerQTEWidget, UTexture2D*, const USBTextureStyleSetData*, const TEnumAsByte<ESBLevelSequenceTheaterQTEType>> GetTextureInputType = { 0x27d1280, 0 }; 
	// Function /Script/SB.SBSequencerQTEWidget.GetResult
	constexpr static const FunctionPointer<USBSequencerQTEWidget, bool, const bool> GetResult = { 0x27d2f70, 1 }; 
	// Function /Script/SB.SBSequencerQTEWidget.GetProgressPercent
	constexpr static const FunctionPointer<USBSequencerQTEWidget, float> GetProgressPercent = { 0x27d2e20, 2 }; 
	// Function /Script/SB.SBSequencerQTEWidget.GetInputInfoResult
	constexpr static const FunctionPointer<USBSequencerQTEWidget, bool, const int32_t> GetInputInfoResult = { 0x27d2e70, 3 }; 
	// Function /Script/SB.SBSequencerQTEWidget.ClearWidget
	constexpr static const FunctionPointer<USBSequencerQTEWidget, void> ClearWidget = { 0x27d3080, 4 }; 
};

/// Struct /Script/SB.SBSequencerReactionTriggerBindInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBSequencerReactionTriggerBindInfo
{ 
	unsigned char                                      UnknownData01_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Class /Script/SB.SBSequencerReactionTriggerWidget
/// Size: 0x0750 (1872 bytes) (0x0006C0 - 0x000750) align n/a MaxSize: 0x0750
class USBSequencerReactionTriggerWidget : public USBSequencerBaseWidget
{ 
public:
	FSBLevelSequenceTheaterReactionTriggerSectionData  SectionData;                                                // 0x06C0   (0x0020)  
	TEnumAsByte<ESBLevelSequenceTheaterReactionTriggerType> InputType;                                             // 0x06E0   (0x0001)  
	bool                                               bBindInput;                                                 // 0x06E1   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x06E2   (0x0002)  MISSED
	float                                              PressTime;                                                  // 0x06E4   (0x0004)  
	bool                                               bInputPress;                                                // 0x06E8   (0x0001)  
	bool                                               bInputComplete;                                             // 0x06E9   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x06EA   (0x0006)  MISSED
	TArray<FName>                                      CheckInputActionArray;                                      // 0x06F0   (0x0010)  
	TMap<FName, FSBSequencerReactionTriggerBindInfo>   BindCountMap;                                               // 0x0700   (0x0050)  

	/// Functions
	// Function /Script/SB.SBSequencerReactionTriggerWidget.GetTextureInputType
	constexpr static const FunctionPointer<USBSequencerReactionTriggerWidget, UTexture2D*, const USBTextureStyleSetData*, const TEnumAsByte<ESBLevelSequenceTheaterReactionTriggerType>> GetTextureInputType = { 0x27d4630, 0 }; 
	// Function /Script/SB.SBSequencerReactionTriggerWidget.GetProgressPercent
	constexpr static const FunctionPointer<USBSequencerReactionTriggerWidget, float> GetProgressPercent = { 0x27d45e0, 1 }; 
	// Function /Script/SB.SBSequencerReactionTriggerWidget.EventVisibleProgress
	constexpr static const FunctionPointer<USBSequencerReactionTriggerWidget, void, const bool> EventVisibleProgress = { 0x2bbb090, 2 }; 
	// Function /Script/SB.SBSequencerReactionTriggerWidget.EventCompleteProgress
	constexpr static const FunctionPointer<USBSequencerReactionTriggerWidget, void> EventCompleteProgress = { 0x2bbb090, 3 }; 
	// Function /Script/SB.SBSequencerReactionTriggerWidget.ClearWidget
	constexpr static const FunctionPointer<USBSequencerReactionTriggerWidget, void> ClearWidget = { 0x27d4890, 4 }; 
};

/// Class /Script/SB.SBSequencerRootWidget
/// Size: 0x06F0 (1776 bytes) (0x000680 - 0x0006F0) align n/a MaxSize: 0x06F0
class USBSequencerRootWidget : public USBUserWidget
{ 
public:
	class USBSequencerBackgroundWidget*                WidgetBackground;                                           // 0x0680   (0x0008)  
	class USBSequencerAreaWidget*                      WidgetArea;                                                 // 0x0688   (0x0008)  
	class USBSequencerDialogueWidget*                  WidgetDialogue;                                             // 0x0690   (0x0008)  
	class USBSequencerPlayerChoiceWidget*              WidgetPlayerChoice;                                         // 0x0698   (0x0008)  
	class USBSequencerInputCounterWidget*              WidgetInputCounter;                                         // 0x06A0   (0x0008)  
	class USBSequencerQTEWidget*                       WidgetQTE;                                                  // 0x06A8   (0x0008)  
	class USBSequencerInteractionSelectWidget*         WidgetInteractionSelect;                                    // 0x06B0   (0x0008)  
	class USBSequencerSubtitle3Widget*                 WidgetSubtitle;                                             // 0x06B8   (0x0008)  
	class USBSequencerMovieWidget*                     WidgetMovie;                                                // 0x06C0   (0x0008)  
	class USBSequencerSkipWidget*                      WidgetSkip;                                                 // 0x06C8   (0x0008)  
	class USBSequencerReactionTriggerWidget*           WidgetReactionTrigger;                                      // 0x06D0   (0x0008)  
	class USBSequencerAttachWidget*                    WidgetAttach;                                               // 0x06D8   (0x0008)  
	TArray<class USBUserWidget*>                       WidgetArray;                                                // 0x06E0   (0x0010)  
};

/// Class /Script/SB.SBSequencerSkipWidget
/// Size: 0x06A0 (1696 bytes) (0x000680 - 0x0006A0) align n/a MaxSize: 0x06A0
class USBSequencerSkipWidget : public USBUserWidget
{ 
public:
	unsigned char                                      UnknownData03_8[0xC];                                       // 0x0680   (0x000C)  MISSED
	float                                              SkipProgress;                                               // 0x068C   (0x0004)  
	bool                                               LastInputState;                                             // 0x0690   (0x0001)  
	bool                                               bRecordMode;                                                // 0x0691   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0692   (0x0002)  MISSED
	float                                              NextSkipAllowTime;                                          // 0x0694   (0x0004)  
	bool                                               bSkipOptionHide;                                            // 0x0698   (0x0001)  
	bool                                               bActiveSkipMouseCursor;                                     // 0x0699   (0x0001)  
	unsigned char                                      UnknownData05_7[0x6];                                       // 0x069A   (0x0006)  MISSED

	/// Functions
	// Function /Script/SB.SBSequencerSkipWidget.UpdateSkipHold
	constexpr static const FunctionPointer<USBSequencerSkipWidget, void, const bool> UpdateSkipHold = { 0x27d5080, 0 }; 
	// Function /Script/SB.SBSequencerSkipWidget.UpdateOptionVisibleSkipUI
	constexpr static const FunctionPointer<USBSequencerSkipWidget, void> UpdateOptionVisibleSkipUI = { 0x27d5160, 1 }; 
};

/// Class /Script/SB.SBSequencerSubtitle2SlotWidget
/// Size: 0x06A0 (1696 bytes) (0x000680 - 0x0006A0) align n/a MaxSize: 0x06A0
class USBSequencerSubtitle2SlotWidget : public USBUserWidget
{ 
public:
	float                                              FadeOutTimeHide;                                            // 0x0680   (0x0004)  
	float                                              FadeOutTimeFold;                                            // 0x0684   (0x0004)  
	bool                                               bFadeOut;                                                   // 0x0688   (0x0001)  
	ESBGameOptionSubtitleVisibleType                   SubtitleVisibleType;                                        // 0x0689   (0x0001)  
	ESBGameOptionSubtitleSizeType                      SubtitleSizeType;                                           // 0x068A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x15];                                      // 0x068B   (0x0015)  MISSED

	/// Functions
	// Function /Script/SB.SBSequencerSubtitle2SlotWidget.NotifyFoldFinish
	constexpr static const FunctionPointer<USBSequencerSubtitle2SlotWidget, void> NotifyFoldFinish = { 0x27d5570, 0 }; 
};

/// Class /Script/SB.SBSequencerSubtitle2Widget
/// Size: 0x07F8 (2040 bytes) (0x0006C0 - 0x0007F8) align n/a MaxSize: 0x07F8
class USBSequencerSubtitle2Widget : public USBSequencerBaseWidget
{ 
public:
	ESBGameOptionSubtitleVisibleType                   SubtitleVisibleType;                                        // 0x06C0   (0x0001)  
	ESBGameOptionSubtitleSizeType                      SubtitleSizeType;                                           // 0x06C1   (0x0001)  
	ESBGameOptionSubtitleBGType                        SubtitleBGType;                                             // 0x06C2   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x06C3   (0x0001)  MISSED
	int32_t                                            MaxSlotCount;                                               // 0x06C4   (0x0004)  
	int32_t                                            MaxLineCount;                                               // 0x06C8   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x06CC   (0x0004)  MISSED
	FSlateFontInfo                                     FontInfo;                                                   // 0x06D0   (0x0060)  
	float                                              MessageWrapWidth;                                           // 0x0730   (0x0004)  
	TWeakObjectPtr<class ULevelSequencePlayer*>        SequencePlayer;                                             // 0x0734   (0x0008)  
	unsigned char                                      UnknownData06_6[0x98];                                      // 0x073C   (0x0098)  MISSED
	int32_t                                            bindCount;                                                  // 0x07D4   (0x0004)  
	unsigned char                                      UnknownData07_7[0x20];                                      // 0x07D8   (0x0020)  MISSED

	/// Functions
	// Function /Script/SB.SBSequencerSubtitle2Widget.RefreshOptionSubtitleVisible
	constexpr static const FunctionPointer<USBSequencerSubtitle2Widget, void> RefreshOptionSubtitleVisible = { 0x27d5b10, 0 }; 
	// Function /Script/SB.SBSequencerSubtitle2Widget.RefreshOptionSubtitleSize
	constexpr static const FunctionPointer<USBSequencerSubtitle2Widget, void> RefreshOptionSubtitleSize = { 0x27d5a40, 1 }; 
	// Function /Script/SB.SBSequencerSubtitle2Widget.RefreshOptionSubtitleBG
	constexpr static const FunctionPointer<USBSequencerSubtitle2Widget, void> RefreshOptionSubtitleBG = { 0x27d5980, 2 }; 
};

/// Class /Script/SB.SBSequencerSubtitle3SlotWidget
/// Size: 0x0790 (1936 bytes) (0x000680 - 0x000790) align n/a MaxSize: 0x0790
class USBSequencerSubtitle3SlotWidget : public USBUserWidget
{ 
public:
	TEnumAsByte<ESBSequencerSubtitleType>              Type;                                                       // 0x0680   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0681   (0x0007)  MISSED
	FText                                              author;                                                     // 0x0688   (0x0018)  
	FText                                              Message;                                                    // 0x06A0   (0x0018)  
	float                                              Duration;                                                   // 0x06B8   (0x0004)  
	ESBGameOptionSubtitleVisibleType                   SubtitleVisibleType;                                        // 0x06BC   (0x0001)  
	ESBGameOptionSubtitleSizeType                      SubtitleSizeType;                                           // 0x06BD   (0x0001)  
	ESBGameOptionSubtitleAuthorType                    SubtitleAuthorType;                                         // 0x06BE   (0x0001)  
	unsigned char                                      UnknownData05_6[0x1];                                       // 0x06BF   (0x0001)  MISSED
	TWeakObjectPtr<class USBTypeWriterWidget*>         WB_Typewriter;                                              // 0x06C0   (0x0008)  
	TMap<FName, float>                                 CultureLetterTimeMap;                                       // 0x06C8   (0x0050)  
	TMap<FName, float>                                 CultureLetterSpaceTimeMap;                                  // 0x0718   (0x0050)  
	TEnumAsByte<ESBSequenceContentType>                ContentType;                                                // 0x0768   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0769   (0x0003)  MISSED
	FLinearColor                                       AuthorColor;                                                // 0x076C   (0x0010)  
	float                                              DefaultLetterPlayTime;                                      // 0x077C   (0x0004)  
	bool                                               bFinishTypewriter;                                          // 0x0780   (0x0001)  
	unsigned char                                      UnknownData07_7[0xF];                                       // 0x0781   (0x000F)  MISSED

	/// Functions
	// Function /Script/SB.SBSequencerSubtitle3SlotWidget.UpdateText
	constexpr static const FunctionPointer<USBSequencerSubtitle3SlotWidget, void> UpdateText = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBSequencerSubtitle3SlotWidget.NotifyTypewriterFinish
	constexpr static const FunctionPointer<USBSequencerSubtitle3SlotWidget, void> NotifyTypewriterFinish = { 0x27d6000, 1 }; 
	// Function /Script/SB.SBSequencerSubtitle3SlotWidget.EventSlotShow
	constexpr static const FunctionPointer<USBSequencerSubtitle3SlotWidget, void> EventSlotShow = { 0x2bbb090, 2 }; 
	// Function /Script/SB.SBSequencerSubtitle3SlotWidget.EventSlotHide
	constexpr static const FunctionPointer<USBSequencerSubtitle3SlotWidget, void> EventSlotHide = { 0x2bbb090, 3 }; 
	// Function /Script/SB.SBSequencerSubtitle3SlotWidget.EventRequestTypewriterSkip
	constexpr static const FunctionPointer<USBSequencerSubtitle3SlotWidget, void> EventRequestTypewriterSkip = { 0x2bbb090, 4 }; 
};

/// Class /Script/SB.SBSequencerSubtitle3Widget
/// Size: 0x0878 (2168 bytes) (0x0006C0 - 0x000878) align n/a MaxSize: 0x0878
class USBSequencerSubtitle3Widget : public USBSequencerBaseWidget
{ 
public:
	ESBGameOptionSubtitleVisibleType                   SubtitleVisibleType;                                        // 0x06C0   (0x0001)  
	ESBGameOptionSubtitleSizeType                      SubtitleSizeType;                                           // 0x06C1   (0x0001)  
	ESBGameOptionSubtitleBGType                        SubtitleBGType;                                             // 0x06C2   (0x0001)  
	ESBGameOptionSubtitleAuthorType                    SubtitleAuthorType;                                         // 0x06C3   (0x0001)  
	int32_t                                            MaxSlotCount;                                               // 0x06C4   (0x0004)  
	int32_t                                            MaxLineCount;                                               // 0x06C8   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x06CC   (0x0004)  MISSED
	FSlateFontInfo                                     FontInfo;                                                   // 0x06D0   (0x0060)  
	float                                              MessageWrapWidth;                                           // 0x0730   (0x0004)  
	float                                              TypewirterSkipTime;                                         // 0x0734   (0x0004)  
	TEnumAsByte<ESBSequenceContentType>                ContentType;                                                // 0x0738   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0739   (0x0003)  MISSED
	FLinearColor                                       AuthorColor;                                                // 0x073C   (0x0010)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x074C   (0x0004)  MISSED
	TMap<FString, FLinearColor>                        AuthorColorMap;                                             // 0x0750   (0x0050)  
	TWeakObjectPtr<class ULevelSequencePlayer*>        SequencePlayer;                                             // 0x07A0   (0x0008)  
	unsigned char                                      UnknownData07_7[0xD0];                                      // 0x07A8   (0x00D0)  MISSED

	/// Functions
	// Function /Script/SB.SBSequencerSubtitle3Widget.RefreshOptionSubtitleVisible
	constexpr static const FunctionPointer<USBSequencerSubtitle3Widget, bool> RefreshOptionSubtitleVisible = { 0x27d67a0, 0 }; 
	// Function /Script/SB.SBSequencerSubtitle3Widget.RefreshOptionSubtitleSize
	constexpr static const FunctionPointer<USBSequencerSubtitle3Widget, bool> RefreshOptionSubtitleSize = { 0x27d66a0, 1 }; 
	// Function /Script/SB.SBSequencerSubtitle3Widget.RefreshOptionSubtitleBG
	constexpr static const FunctionPointer<USBSequencerSubtitle3Widget, bool> RefreshOptionSubtitleBG = { 0x27d65a0, 2 }; 
	// Function /Script/SB.SBSequencerSubtitle3Widget.RefreshOptionSubtitleAuthor
	constexpr static const FunctionPointer<USBSequencerSubtitle3Widget, bool> RefreshOptionSubtitleAuthor = { 0x27d6490, 3 }; 
	// Function /Script/SB.SBSequencerSubtitle3Widget.ClickJumpSubtitle
	constexpr static const FunctionPointer<USBSequencerSubtitle3Widget, void> ClickJumpSubtitle = { 0x27d6470, 4 }; 
};

/// Class /Script/SB.SBShowKey
/// Size: 0x0058 (88 bytes) (0x000028 - 0x000058) align n/a MaxSize: 0x0058
class USBShowKey : public UObject
{ 
public:
	TArray<FName>                                      CheckShowKeyTag;                                            // 0x0028   (0x0010)  
	TArray<FName>                                      CheckNoneShowKeyTag;                                        // 0x0038   (0x0010)  
	TEnumAsByte<ESBConditionCheckType>                 IsBattle;                                                   // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              StartTime;                                                  // 0x004C   (0x0004)  
	bool                                               bKeepPlaying;                                               // 0x0050   (0x0001)  
	bool                                               bCheckHitLevel;                                             // 0x0051   (0x0001)  
	bool                                               bEnable;                                                    // 0x0052   (0x0001)  
	bool                                               bNeedsExecutionKey;                                         // 0x0053   (0x0001)  
	float                                              Duration;                                                   // 0x0054   (0x0004)  
};

/// Class /Script/SB.SBShowActorAnimKey
/// Size: 0x00C0 (192 bytes) (0x000058 - 0x0000C0) align n/a MaxSize: 0x00C0
class USBShowActorAnimKey : public USBShowKey
{ 
public:
	FName                                              ComponentTag;                                               // 0x0058   (0x0008)  
	bool                                               bUseMeshSlot;                                               // 0x0060   (0x0001)  
	TEnumAsByte<ESBSkelMeshSlot>                       MeshSlot;                                                   // 0x0061   (0x0001)  
	unsigned char                                      UnknownData05_6[0x6];                                       // 0x0062   (0x0006)  MISSED
	TWeakObjectPtr<class UAnimSequence*>               AnimResource;                                               // 0x0068   (0x0008)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x0070   (0x0020)  MISSED
	float                                              PlayRate;                                                   // 0x0090   (0x0004)  
	float                                              PlayStartTime;                                              // 0x0094   (0x0004)  
	float                                              PlayEndTime;                                                // 0x0098   (0x0004)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x009C   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x009D   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x00A0   (0x0004)  
	float                                              PlayBlendInTime;                                            // 0x00A4   (0x0004)  
	float                                              PlayBlendOutTime;                                           // 0x00A8   (0x0004)  
	bool                                               bPlayLoop;                                                  // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	int32_t                                            LoopCount;                                                  // 0x00B0   (0x0004)  
	float                                              Priority;                                                   // 0x00B4   (0x0004)  
	bool                                               bIgnoreStopAnimationWhenEnd;                                // 0x00B8   (0x0001)  
	bool                                               bClearAllAnim;                                              // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData09_7[0x6];                                       // 0x00BA   (0x0006)  MISSED
};

/// Class /Script/SB.SBShowActorCompVisibleKey
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class USBShowActorCompVisibleKey : public USBShowKey
{ 
public:
	FName                                              Tag;                                                        // 0x0058   (0x0008)  
	bool                                               bVisible;                                                   // 0x0060   (0x0001)  
	bool                                               bPropagateToChildren;                                       // 0x0061   (0x0001)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0062   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0063   (0x0001)  MISSED
	int32_t                                            TargetIndex;                                                // 0x0064   (0x0004)  
	bool                                               bPreviewOnly;                                               // 0x0068   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowActorEventNotificationKey
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align n/a MaxSize: 0x0068
class USBShowActorEventNotificationKey : public USBShowKey
{ 
public:
	FName                                              EventName;                                                  // 0x0058   (0x0008)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x0064   (0x0004)  
};

/// Class /Script/SB.SBShowActorInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBShowActorInterface : public UInterface
{ 
public:

	/// Functions
	// Function /Script/SB.SBShowActorInterface.PlaySingleShow
	constexpr static const FunctionPointer<USBShowActorInterface, bool, const FString, const bool, const FVector> PlaySingleShow = { 0x27d76c0, 0 }; 
	// Function /Script/SB.SBShowActorInterface.ActorStopCustomAnim
	constexpr static const FunctionPointer<USBShowActorInterface, void, const FGuid, const FName, const float> ActorStopCustomAnim = { 0x27d7920, 1 }; 
	// Function /Script/SB.SBShowActorInterface.ActorPlayCustomAnimSequenceMeshSlot
	constexpr static const FunctionPointer<USBShowActorInterface, FGuid, const TEnumAsByte<ESBSkelMeshSlot>, const UAnimSequence*, const FName, const float, const float, const float, const float, const float, const bool, const float, const bool> ActorPlayCustomAnimSequenceMeshSlot = { 0x27d7b20, 2 }; 
	// Function /Script/SB.SBShowActorInterface.ActorPlayCustomAnimSequence
	constexpr static const FunctionPointer<USBShowActorInterface, FGuid, const UAnimSequence*, const FName, const float, const float, const float, const float, const float, const bool, const float, const bool> ActorPlayCustomAnimSequence = { 0x27d8820, 3 }; 
	// Function /Script/SB.SBShowActorInterface.ActorPlayCustomAnimNameMeshSlot
	constexpr static const FunctionPointer<USBShowActorInterface, FGuid, const TEnumAsByte<ESBSkelMeshSlot>, const FString, const FName, const float, const float, const float, const float, const float, const bool, const float, const bool> ActorPlayCustomAnimNameMeshSlot = { 0x27d8170, 4 }; 
	// Function /Script/SB.SBShowActorInterface.ActorPlayCustomAnimName
	constexpr static const FunctionPointer<USBShowActorInterface, FGuid, const FString, const FName, const float, const float, const float, const float, const float, const bool, const float, const bool> ActorPlayCustomAnimName = { 0x27d8e00, 5 }; 
};

/// Class /Script/SB.SBShowActorKey
/// Size: 0x00A8 (168 bytes) (0x000058 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBShowActorKey : public USBShowKey
{ 
public:
	bool                                               bUseActorHidden;                                            // 0x0058   (0x0001)  
	bool                                               bActorHiddenState;                                          // 0x0059   (0x0001)  
	bool                                               bSetVisibleWhenUnlockHidden;                                // 0x005A   (0x0001)  
	bool                                               bAlwaysActorTickWhenHidden;                                 // 0x005B   (0x0001)  
	bool                                               bUseActorEnableCollision;                                   // 0x005C   (0x0001)  
	bool                                               bActorEnableCollisionState;                                 // 0x005D   (0x0001)  
	bool                                               bPhysicsBodyCollisionIgnore;                                // 0x005E   (0x0001)  
	TEnumAsByte<ESBSkelMeshSlot>                       DisableClothCollisionMeshSlot;                              // 0x005F   (0x0001)  
	TArray<FName>                                      DisableClothCollisionNameArray;                             // 0x0060   (0x0010)  
	TEnumAsByte<ESBSkelMeshSlot>                       ClothWindMeshSlot;                                          // 0x0070   (0x0001)  
	bool                                               bCharacterTransformAxis;                                    // 0x0071   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x0072   (0x0002)  MISSED
	float                                              ClothWindFadeInTime;                                        // 0x0074   (0x0004)  
	float                                              ClothWindFadeOutTime;                                       // 0x0078   (0x0004)  
	TEnumAsByte<ESBClothWindDirectionType>             ClothWindDirectionType;                                     // 0x007C   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	FVector                                            ClothWindDirection;                                         // 0x0080   (0x000C)  
	float                                              ClothWindDirectionScale;                                    // 0x008C   (0x0004)  
	bool                                               bAlwaysTickPoseAndRefreshBones;                             // 0x0090   (0x0001)  
	bool                                               bPhysicsReset;                                              // 0x0091   (0x0001)  
	TEnumAsByte<ESBSkelMeshSlot>                       PhysicsResetSlot;                                           // 0x0092   (0x0001)  
	unsigned char                                      UnknownData07_6[0x1];                                       // 0x0093   (0x0001)  MISSED
	float                                              PhysicsWeightFadeInTime;                                    // 0x0094   (0x0004)  
	float                                              PhysicsWeightFadeOutTime;                                   // 0x0098   (0x0004)  
	bool                                               bClothReset;                                                // 0x009C   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x009D   (0x0003)  MISSED
	int32_t                                            ClothResetFrameCount;                                       // 0x00A0   (0x0004)  
	bool                                               bClothResetOnlyPonytail;                                    // 0x00A4   (0x0001)  
	bool                                               bClothResetOnlyBody;                                        // 0x00A5   (0x0001)  
	unsigned char                                      UnknownData09_7[0x2];                                       // 0x00A6   (0x0002)  MISSED
};

/// Class /Script/SB.SBShowAnimBlendSpaceKey
/// Size: 0x00E0 (224 bytes) (0x000058 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBShowAnimBlendSpaceKey : public USBShowKey
{ 
public:
	int32_t                                            Priority;                                                   // 0x0058   (0x0004)  
	TEnumAsByte<ESBAnimNodeBlendSpaceSlot>             BlendSpaceSlot;                                             // 0x005C   (0x0001)  
	TEnumAsByte<ESBBlendSpaceChannel>                  BlendSpaceChannel;                                          // 0x005D   (0x0001)  
	bool                                               bStopWhenJump;                                              // 0x005E   (0x0001)  
	bool                                               bResetPlayTime;                                             // 0x005F   (0x0001)  
	bool                                               bUseStruggleBSWhenMoveStruggle;                             // 0x0060   (0x0001)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0061   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0062   (0x0002)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x0064   (0x0004)  
	bool                                               bAbsoluteResourcePath;                                      // 0x0068   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0069   (0x0007)  MISSED
	FString                                            DefaultResourcePath;                                        // 0x0070   (0x0010)  
	FString                                            DefaultResourcePathWhenStruggle;                            // 0x0080   (0x0010)  
	bool                                               bUseAreaDirectionCheck;                                     // 0x0090   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	FString                                            FrontResourcePath;                                          // 0x0098   (0x0010)  
	FString                                            BackResourcePath;                                           // 0x00A8   (0x0010)  
	FString                                            LeftResourcePath;                                           // 0x00B8   (0x0010)  
	FString                                            RightResourcePath;                                          // 0x00C8   (0x0010)  
	bool                                               bStopPlayedCustomAnim;                                      // 0x00D8   (0x0001)  
	bool                                               bBlockPlayTransitAnim;                                      // 0x00D9   (0x0001)  
	bool                                               bDisableHeadLookAtIK;                                       // 0x00DA   (0x0001)  
	bool                                               bDisableBodyLookAtIK;                                       // 0x00DB   (0x0001)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowAnimBPSetValueKey
/// Size: 0x0100 (256 bytes) (0x000058 - 0x000100) align n/a MaxSize: 0x0100
class USBShowAnimBPSetValueKey : public USBShowKey
{ 
public:
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0058   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x005C   (0x0004)  
	FName                                              Name;                                                       // 0x0060   (0x0008)  
	FRuntimeFloatCurve                                 Value;                                                      // 0x0068   (0x0088)  
	float                                              RecoverValue;                                               // 0x00F0   (0x0004)  
	float                                              RecoverWaitTime;                                            // 0x00F4   (0x0004)  
	float                                              RecoverTime;                                                // 0x00F8   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00FC   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowAnimBPSetValueKey_String
/// Size: 0x0078 (120 bytes) (0x000058 - 0x000078) align n/a MaxSize: 0x0078
class USBShowAnimBPSetValueKey_String : public USBShowKey
{ 
public:
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x005C   (0x0004)  
	FName                                              Name;                                                       // 0x0060   (0x0008)  
	FName                                              Value;                                                      // 0x0068   (0x0008)  
	FName                                              RecoverValue;                                               // 0x0070   (0x0008)  
};

/// Class /Script/SB.SBShowAnimByMeshSlotKey
/// Size: 0x0098 (152 bytes) (0x000058 - 0x000098) align n/a MaxSize: 0x0098
class USBShowAnimByMeshSlotKey : public USBShowKey
{ 
public:
	TEnumAsByte<ESBSkelMeshSlot>                       MeshSlot;                                                   // 0x0058   (0x0001)  
	bool                                               bAbsoluteResourcePath;                                      // 0x0059   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x005A   (0x0006)  MISSED
	FString                                            AnimResourcePath;                                           // 0x0060   (0x0010)  
	float                                              PlayRate;                                                   // 0x0070   (0x0004)  
	float                                              PlayStartTime;                                              // 0x0074   (0x0004)  
	float                                              PlayEndTime;                                                // 0x0078   (0x0004)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x007C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x0080   (0x0004)  
	float                                              PlayBlendInTime;                                            // 0x0084   (0x0004)  
	float                                              PlayBlendOutTime;                                           // 0x0088   (0x0004)  
	int32_t                                            Priority;                                                   // 0x008C   (0x0004)  
	bool                                               bPlayLoop;                                                  // 0x0090   (0x0001)  
	bool                                               bIgnoreStopAnimationWhenEnd;                                // 0x0091   (0x0001)  
	bool                                               bActiveJali;                                                // 0x0092   (0x0001)  
	bool                                               bIgnoreShowAnimAsyncLoadLog;                                // 0x0093   (0x0001)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCustomLayeredBoneBlendInfo
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBCustomLayeredBoneBlendInfo
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	int32_t                                            BlendDepth;                                                 // 0x0008   (0x0004)  
};

/// Struct /Script/SB.OptionalAnimationByAngle
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FOptionalAnimationByAngle
{ 
	FString                                            AnimResourcePath;                                           // 0x0000   (0x0010)  
	float                                              MinAngle;                                                   // 0x0010   (0x0004)  
	float                                              MaxAngle;                                                   // 0x0014   (0x0004)  
};

/// Struct /Script/SB.SBShowAnimKeyStep
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FSBShowAnimKeyStep
{ 
	bool                                               bHoldEndTime;                                               // 0x0000   (0x0001)  
	bool                                               bStopAtMove;                                                // 0x0001   (0x0001)  
	bool                                               bStopAtLand;                                                // 0x0002   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              PlayRate;                                                   // 0x0004   (0x0004)  
	float                                              Priority;                                                   // 0x0008   (0x0004)  
	bool                                               bFixedBodyLookAtLocation;                                   // 0x000C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FName                                              LookAtTargetSocket;                                         // 0x0010   (0x0008)  
	float                                              LookAtTargetZOffset;                                        // 0x0018   (0x0004)  
};

/// Class /Script/SB.SBShowAnimKey
/// Size: 0x01F8 (504 bytes) (0x000058 - 0x0001F8) align n/a MaxSize: 0x01F8
class USBShowAnimKey : public USBShowKey
{ 
public:
	TEnumAsByte<ESBShowAnimCheckActiveType>            CheckActiveType;                                            // 0x0058   (0x0001)  
	bool                                               InverseCheckActiveResult;                                   // 0x0059   (0x0001)  
	unsigned char                                      UnknownData15_6[0x2];                                       // 0x005A   (0x0002)  MISSED
	float                                              ActiveMinAngle;                                             // 0x005C   (0x0004)  
	float                                              ActiveMaxAngle;                                             // 0x0060   (0x0004)  
	TEnumAsByte<ESBConditionCheckType>                 Swimming;                                                   // 0x0064   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 UnderWaterSwimming;                                         // 0x0065   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 CharacterAxisUpDirection;                                   // 0x0066   (0x0001)  
	TEnumAsByte<ESBShowAnimSequencePlayType>           AnimSequencePlayType;                                       // 0x0067   (0x0001)  
	bool                                               bUseCharacterCustomAnim;                                    // 0x0068   (0x0001)  
	bool                                               bAbsoluteResourcePath;                                      // 0x0069   (0x0001)  
	bool                                               bResourcePathWithSubPath;                                   // 0x006A   (0x0001)  
	unsigned char                                      UnknownData16_6[0x5];                                       // 0x006B   (0x0005)  MISSED
	FString                                            AnimResourcePath;                                           // 0x0070   (0x0010)  
	TEnumAsByte<ESBCharacterCustomAnim>                CustomAnim;                                                 // 0x0080   (0x0001)  
	bool                                               bUseDirectionalBlend;                                       // 0x0081   (0x0001)  
	bool                                               bUseMoveWeight;                                             // 0x0082   (0x0001)  
	bool                                               bDirectionalAnimation;                                      // 0x0083   (0x0001)  
	bool                                               bUseAreaDirectionCheck;                                     // 0x0084   (0x0001)  
	bool                                               bCheckFootLeftRigh;                                         // 0x0085   (0x0001)  
	TEnumAsByte<ESBShowAnimDirectionalAnimationType>   DirectionalAnimationType;                                   // 0x0086   (0x0001)  
	bool                                               bUseOptionalAnimationByDirectionalAngle;                    // 0x0087   (0x0001)  
	bool                                               bAreaDirectionToTargetDirection;                            // 0x0088   (0x0001)  
	TEnumAsByte<ESBShowAnimAreaDirectionCheckType>     AreaDirectionCheckType;                                     // 0x0089   (0x0001)  
	unsigned char                                      UnknownData17_6[0x2];                                       // 0x008A   (0x0002)  MISSED
	FVector2D                                          DefaultDirection;                                           // 0x008C   (0x0008)  
	TEnumAsByte<ESBCharacterCustomAnim>                FrontCustomAnim;                                            // 0x0094   (0x0001)  
	TEnumAsByte<ESBCharacterCustomAnim>                BackCustomAnim;                                             // 0x0095   (0x0001)  
	TEnumAsByte<ESBCharacterCustomAnim>                LeftCustomAnim;                                             // 0x0096   (0x0001)  
	TEnumAsByte<ESBCharacterCustomAnim>                RightCustomAnim;                                            // 0x0097   (0x0001)  
	TEnumAsByte<ESBCharacterCustomAnim>                UpCustomAnim;                                               // 0x0098   (0x0001)  
	TEnumAsByte<ESBCharacterCustomAnim>                DownCustomAnim;                                             // 0x0099   (0x0001)  
	unsigned char                                      UnknownData18_6[0x6];                                       // 0x009A   (0x0006)  MISSED
	FString                                            FrontAnimResourcePath;                                      // 0x00A0   (0x0010)  
	FString                                            BackAnimResourcePath;                                       // 0x00B0   (0x0010)  
	FString                                            LeftAnimResourcePath;                                       // 0x00C0   (0x0010)  
	FString                                            RightAnimResourcePath;                                      // 0x00D0   (0x0010)  
	FString                                            UpAnimResourcePath;                                         // 0x00E0   (0x0010)  
	FString                                            DownAnimResourcePath;                                       // 0x00F0   (0x0010)  
	TEnumAsByte<ESBAnimNodeCustomPlayType>             CustomAnimPlayType;                                         // 0x0100   (0x0001)  
	TEnumAsByte<ESBCustomBlendSpaceParamType>          CustomBlendSpaceInputType1;                                 // 0x0101   (0x0001)  
	TEnumAsByte<ESBCustomBlendSpaceParamType>          CustomBlendSpaceInputType2;                                 // 0x0102   (0x0001)  
	unsigned char                                      UnknownData19_6[0x5];                                       // 0x0103   (0x0005)  MISSED
	TArray<FSBCustomLayeredBoneBlendInfo>              CustomLayeredBoneBlendInfo;                                 // 0x0108   (0x0010)  
	TArray<FOptionalAnimationByAngle>                  OptionalAnimationByAngleArray;                              // 0x0118   (0x0010)  
	TArray<FName>                                      StopCustomAniNameArray;                                     // 0x0128   (0x0010)  
	TEnumAsByte<ESBShowAnimPlayBody>                   PlayBodyType;                                               // 0x0138   (0x0001)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0139   (0x0001)  
	TEnumAsByte<ESBSkelMeshSlot>                       MeshSlot;                                                   // 0x013A   (0x0001)  
	unsigned char                                      UnknownData20_6[0x1];                                       // 0x013B   (0x0001)  MISSED
	float                                              PlayRate;                                                   // 0x013C   (0x0004)  
	int32_t                                            PlayTargetIndex;                                            // 0x0140   (0x0004)  
	float                                              PlayStartTime;                                              // 0x0144   (0x0004)  
	float                                              PlayEndTime;                                                // 0x0148   (0x0004)  
	float                                              BlendInTime;                                                // 0x014C   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0150   (0x0004)  
	float                                              BlendOutTimeAtMoving;                                       // 0x0154   (0x0004)  
	bool                                               bLoop;                                                      // 0x0158   (0x0001)  
	unsigned char                                      UnknownData21_6[0x3];                                       // 0x0159   (0x0003)  MISSED
	int32_t                                            LoopCount;                                                  // 0x015C   (0x0004)  
	float                                              Priority;                                                   // 0x0160   (0x0004)  
	bool                                               bNotPlayIfSamePriority;                                     // 0x0164   (0x0001)  
	unsigned char                                      UnknownData22_6[0x3];                                       // 0x0165   (0x0003)  MISSED
	TArray<FName>                                      PlayIfSamePriorityCustomAniNameArray;                       // 0x0168   (0x0010)  
	bool                                               bHoldEndTime;                                               // 0x0178   (0x0001)  
	bool                                               bStopAtMove;                                                // 0x0179   (0x0001)  
	bool                                               bStopAtLand;                                                // 0x017A   (0x0001)  
	bool                                               bIgnoreStopAnimationWhenEnd;                                // 0x017B   (0x0001)  
	bool                                               bPlayWhenZeroVelocity;                                      // 0x017C   (0x0001)  
	unsigned char                                      UnknownData23_6[0x3];                                       // 0x017D   (0x0003)  MISSED
	int32_t                                            CustomAnimIndex;                                            // 0x0180   (0x0004)  
	bool                                               bRetryPlayWhenNotPlayed;                                    // 0x0184   (0x0001)  
	bool                                               bBoneBlendActive;                                           // 0x0185   (0x0001)  
	unsigned char                                      UnknownData24_6[0x2];                                       // 0x0186   (0x0002)  MISSED
	float                                              BoneBlendActiveTime;                                        // 0x0188   (0x0004)  
	float                                              BoneBlendDeactiveTime;                                      // 0x018C   (0x0004)  
	bool                                               bKeyUseStep;                                                // 0x0190   (0x0001)  
	unsigned char                                      UnknownData25_6[0x7];                                       // 0x0191   (0x0007)  MISSED
	TArray<FSBShowAnimKeyStep>                         ShowStepArray;                                              // 0x0198   (0x0010)  
	FName                                              RootMotionKey;                                              // 0x01A8   (0x0008)  
	FString                                            RootMotionDataPath;                                         // 0x01B0   (0x0010)  
	bool                                               bRootMotionCanStop;                                         // 0x01C0   (0x0001)  
	bool                                               bDisableHeadLookAtIK;                                       // 0x01C1   (0x0001)  
	bool                                               bDisableBodyLookAtIK;                                       // 0x01C2   (0x0001)  
	bool                                               bDisableTPSAimIK;                                           // 0x01C3   (0x0001)  
	float                                              DisableTPSAimIKEndTime;                                     // 0x01C4   (0x0004)  
	bool                                               bPlayerOnly;                                                // 0x01C8   (0x0001)  
	TEnumAsByte<ESBShowPlayerCheck>                    PlayerCheck;                                                // 0x01C9   (0x0001)  
	bool                                               bClearBlendSpaceAllPrevSample;                              // 0x01CA   (0x0001)  
	bool                                               bResetAnimSlotSequence;                                     // 0x01CB   (0x0001)  
	TEnumAsByte<ESBAnimNodeSequenceSlot>               ResetAnimSlotSequenceSlot;                                  // 0x01CC   (0x0001)  
	unsigned char                                      UnknownData26_6[0x3];                                       // 0x01CD   (0x0003)  MISSED
	float                                              ResetAnimSlotSequenceApplyTime;                             // 0x01D0   (0x0004)  
	bool                                               bUseStruggleAnimWhenMoveStruggle;                           // 0x01D4   (0x0001)  
	unsigned char                                      UnknownData27_6[0x3];                                       // 0x01D5   (0x0003)  MISSED
	FString                                            AnimResourcePathAtMoveStruggle;                             // 0x01D8   (0x0010)  
	bool                                               bDisableIdleAdditiveAnim;                                   // 0x01E8   (0x0001)  
	unsigned char                                      UnknownData28_6[0x3];                                       // 0x01E9   (0x0003)  MISSED
	float                                              AdditiveAnimActiveTimeWhenBeforeEnd;                        // 0x01EC   (0x0004)  
	bool                                               bIgnoreShowAnimAsyncLoadLog;                                // 0x01F0   (0x0001)  
	bool                                               bStopWhenActorAttachSequence;                               // 0x01F1   (0x0001)  
	bool                                               bStopAttachSequenceWithoutPlayable;                         // 0x01F2   (0x0001)  
	bool                                               bSetSkeletalMeshNotifyAnim;                                 // 0x01F3   (0x0001)  
	TEnumAsByte<ESBFootIKApplyType>                    AnimApplyIKType;                                            // 0x01F4   (0x0001)  
	bool                                               bDisableFeetIK;                                             // 0x01F5   (0x0001)  
	unsigned char                                      UnknownData29_7[0x2];                                       // 0x01F6   (0x0002)  MISSED
};

/// Class /Script/SB.SBShowAnimNodeGroundCollisionKey
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align n/a MaxSize: 0x0068
class USBShowAnimNodeGroundCollisionKey : public USBShowKey
{ 
public:
	FName                                              StartBone;                                                  // 0x0058   (0x0008)  
	FName                                              EndBone;                                                    // 0x0060   (0x0008)  
};

/// Class /Script/SB.SBShowAnimNodeTargetTrackingKey
/// Size: 0x0080 (128 bytes) (0x000058 - 0x000080) align n/a MaxSize: 0x0080
class USBShowAnimNodeTargetTrackingKey : public USBShowKey
{ 
public:
	FName                                              StartBone;                                                  // 0x0058   (0x0008)  
	FName                                              EndBone;                                                    // 0x0060   (0x0008)  
	float                                              FadeInTime;                                                 // 0x0068   (0x0004)  
	float                                              FadeOutTime;                                                // 0x006C   (0x0004)  
	float                                              TrackingTime;                                               // 0x0070   (0x0004)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0074   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0075   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x0078   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowAnimTransitKey
/// Size: 0x0090 (144 bytes) (0x000058 - 0x000090) align n/a MaxSize: 0x0090
class USBShowAnimTransitKey : public USBShowKey
{ 
public:
	TEnumAsByte<ESBCharacterTransitAnim>               TransitAnimType;                                            // 0x0058   (0x0001)  
	bool                                               UseTransitAnimGroup;                                        // 0x0059   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x005A   (0x0006)  MISSED
	class USBTransitAnimGroupData*                     TransitAnimGroupData;                                       // 0x0060   (0x0008)  
	FName                                              TransitAnimGroupName;                                       // 0x0068   (0x0008)  
	TEnumAsByte<ESBAnimTransitChannel>                 TransitAnimChannel;                                         // 0x0070   (0x0001)  
	bool                                               bStopActiveTransitAnim;                                     // 0x0071   (0x0001)  
	bool                                               bExecIfRunning;                                             // 0x0072   (0x0001)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0073   (0x0001)  
	int32_t                                            PlayTargetIndex;                                            // 0x0074   (0x0004)  
	bool                                               bAbsoluteResourcePath;                                      // 0x0078   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0079   (0x0007)  MISSED
	FString                                            DefaultResourcePath;                                        // 0x0080   (0x0010)  
};

/// Class /Script/SB.SBShowAttachSocketToSocketKey
/// Size: 0x0078 (120 bytes) (0x000058 - 0x000078) align n/a MaxSize: 0x0078
class USBShowAttachSocketToSocketKey : public USBShowKey
{ 
public:
	FName                                              IKBoneName;                                                 // 0x0058   (0x0008)  
	TEnumAsByte<ESBSkelMeshSlot>                       MySocketSlot;                                               // 0x0060   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	FName                                              MySocketName;                                               // 0x0064   (0x0008)  
	TEnumAsByte<ESBSkelMeshSlot>                       TargetSocketSlot;                                           // 0x006C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	FName                                              TargetSocketName;                                           // 0x0070   (0x0008)  
};

/// Class /Script/SB.SBShowBoneScaleIgnoreKey
/// Size: 0x0078 (120 bytes) (0x000058 - 0x000078) align n/a MaxSize: 0x0078
class USBShowBoneScaleIgnoreKey : public USBShowKey
{ 
public:
	bool                                               bPlayToMainCharacter;                                       // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x005C   (0x0004)  
	TArray<FName>                                      IgnoreBones;                                                // 0x0060   (0x0010)  
	float                                              BlendInTime;                                                // 0x0070   (0x0004)  
	float                                              BlendOuTime;                                                // 0x0074   (0x0004)  
};

/// Class /Script/SB.SBShowCableKey
/// Size: 0x0390 (912 bytes) (0x000058 - 0x000390) align n/a MaxSize: 0x0390
class USBShowCableKey : public USBShowKey
{ 
public:
	float                                              ThrowTime;                                                  // 0x0058   (0x0004)  
	bool                                               bUseThrowTimeCurve;                                         // 0x005C   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x005D   (0x0003)  MISSED
	FRuntimeFloatCurve                                 ThrowTimeCurve;                                             // 0x0060   (0x0088)  
	float                                              RetrieveStartTime;                                          // 0x00E8   (0x0004)  
	float                                              RetrieveEndTime;                                            // 0x00EC   (0x0004)  
	bool                                               bUseRetrieveTimeCurve;                                      // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x00F1   (0x0007)  MISSED
	FRuntimeFloatCurve                                 RetrieveTimeCurve;                                          // 0x00F8   (0x0088)  
	FVector                                            EndLocation;                                                // 0x0180   (0x000C)  
	bool                                               bUseCurveThrowLocation;                                     // 0x018C   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x018D   (0x0003)  MISSED
	FRuntimeFloatCurve                                 ThrowLocationX;                                             // 0x0190   (0x0088)  
	FRuntimeFloatCurve                                 ThrowLocationY;                                             // 0x0218   (0x0088)  
	FRuntimeFloatCurve                                 ThrowLocationZ;                                             // 0x02A0   (0x0088)  
	FName                                              StartAttachBoneName;                                        // 0x0328   (0x0008)  
	FVector                                            StartRelativeLocation;                                      // 0x0330   (0x000C)  
	bool                                               bRetrieveWithCableLength;                                   // 0x033C   (0x0001)  
	bool                                               bAttachStart;                                               // 0x033D   (0x0001)  
	bool                                               bAttachEnd;                                                 // 0x033E   (0x0001)  
	unsigned char                                      UnknownData10_6[0x1];                                       // 0x033F   (0x0001)  MISSED
	float                                              CableLength;                                                // 0x0340   (0x0004)  
	int32_t                                            NumSegments;                                                // 0x0344   (0x0004)  
	float                                              CableGravityScale;                                          // 0x0348   (0x0004)  
	bool                                               bEnableStiffness;                                           // 0x034C   (0x0001)  
	bool                                               bEnableCollision;                                           // 0x034D   (0x0001)  
	unsigned char                                      UnknownData11_6[0x2];                                       // 0x034E   (0x0002)  MISSED
	float                                              CollisionFriction;                                          // 0x0350   (0x0004)  
	int32_t                                            NumSides;                                                   // 0x0354   (0x0004)  
	float                                              CableWidth;                                                 // 0x0358   (0x0004)  
	float                                              TileMaterial;                                               // 0x035C   (0x0004)  
	TArray<class UMaterialInterface*>                  CableMaterial;                                              // 0x0360   (0x0010)  
	bool                                               bUseTarget;                                                 // 0x0370   (0x0001)  
	bool                                               bFollowTarget;                                              // 0x0371   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x0372   (0x0002)  MISSED
	int32_t                                            TargetIndex;                                                // 0x0374   (0x0004)  
	FName                                              TargetAttachBoneName;                                       // 0x0378   (0x0008)  
	FVector                                            TargetRelativeLocation;                                     // 0x0380   (0x000C)  
	unsigned char                                      UnknownData13_7[0x4];                                       // 0x038C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBShowMatineeCamAnimByFactorType
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBShowMatineeCamAnimByFactorType
{ 
	FName                                              CharacterFactorTypeName;                                    // 0x0000   (0x0008)  
	class UCameraAnim*                                 MatineeCameraAnim;                                          // 0x0008   (0x0008)  
};

/// Class /Script/SB.SBShowCamAnimKey
/// Size: 0x0100 (256 bytes) (0x000058 - 0x000100) align n/a MaxSize: 0x0100
class USBShowCamAnimKey : public USBShowKey
{ 
public:
	float                                              BlendInTime;                                                // 0x0058   (0x0004)  
	float                                              BlendOutTime;                                               // 0x005C   (0x0004)  
	bool                                               bPlayToMainCharacter;                                       // 0x0060   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x0064   (0x0004)  
	TEnumAsByte<ESBShowCamAnimCheckTarget>             CheckTarget;                                                // 0x0068   (0x0001)  
	bool                                               bPlayerCharacterOnlyByCheckTarget;                          // 0x0069   (0x0001)  
	unsigned char                                      UnknownData11_6[0x2];                                       // 0x006A   (0x0002)  MISSED
	FName                                              BoneName;                                                   // 0x006C   (0x0008)  
	bool                                               bUseAttachCharacterToCameraAnim;                            // 0x0074   (0x0001)  
	bool                                               bUseManualFocalTarget;                                      // 0x0075   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x0076   (0x0002)  MISSED
	int32_t                                            ManualFocalTargetIndex;                                     // 0x0078   (0x0004)  
	TEnumAsByte<ESBShowCamAnimCheckTarget>             ManualFocalTarget;                                          // 0x007C   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	FName                                              ManualFocalBoneName;                                        // 0x0080   (0x0008)  
	float                                              ManualFocalStartTime;                                       // 0x0088   (0x0004)  
	float                                              ManualFocalDuration;                                        // 0x008C   (0x0004)  
	float                                              ManualFocalFStop;                                           // 0x0090   (0x0004)  
	bool                                               bPlayBasedCustomAnim;                                       // 0x0094   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0095   (0x0003)  MISSED
	FName                                              BasedCustomAnimName;                                        // 0x0098   (0x0008)  
	FRotator                                           RelativeRot;                                                // 0x00A0   (0x000C)  
	bool                                               bUseMatineeCameraAnim;                                      // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	class UCameraAnim*                                 MatineeCameraAnim;                                          // 0x00B0   (0x0008)  
	int32_t                                            MatineeCameraAnimPriority;                                  // 0x00B8   (0x0004)  
	float                                              MatineeCameraAnimScale;                                     // 0x00BC   (0x0004)  
	bool                                               bUseMoveLinkLastPosition;                                   // 0x00C0   (0x0001)  
	bool                                               bUpdatePlayBaseOriginZInTick;                               // 0x00C1   (0x0001)  
	bool                                               bUpdatePlayBaseOriginZInTickByMainCharacter;                // 0x00C2   (0x0001)  
	bool                                               bUseAttachCharacterFirstRotation;                           // 0x00C3   (0x0001)  
	float                                              OverrideInitialFOV;                                         // 0x00C4   (0x0004)  
	int32_t                                            TargetIndexPlayBaseOriginZInTick;                           // 0x00C8   (0x0004)  
	bool                                               bUseRuleMoveLastRotation;                                   // 0x00CC   (0x0001)  
	bool                                               bResetCamFromCamAnimAtFinished;                             // 0x00CD   (0x0001)  
	bool                                               bResetCamAtUnlockPitch;                                     // 0x00CE   (0x0001)  
	unsigned char                                      UnknownData16_6[0x1];                                       // 0x00CF   (0x0001)  MISSED
	float                                              ResetCamAtUnlockPitchValue;                                 // 0x00D0   (0x0004)  
	bool                                               bUseCharacterUECamScale;                                    // 0x00D4   (0x0001)  
	bool                                               bCharacterUECamToMainCharacter;                             // 0x00D5   (0x0001)  
	unsigned char                                      UnknownData17_6[0x2];                                       // 0x00D6   (0x0002)  MISSED
	int32_t                                            CharacterUECamTargetIndex;                                  // 0x00D8   (0x0004)  
	bool                                               bUseCharacterUECamExtraAnim;                                // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x00DD   (0x0003)  MISSED
	TArray<FSBShowMatineeCamAnimByFactorType>          ExtraCameraAnimsByFactorType;                               // 0x00E0   (0x0010)  
	class UCurveFloat*                                 FovCurve;                                                   // 0x00F0   (0x0008)  
	bool                                               bStopTPSView;                                               // 0x00F8   (0x0001)  
	bool                                               bBlcokControllerInput;                                      // 0x00F9   (0x0001)  
	unsigned char                                      UnknownData19_7[0x6];                                       // 0x00FA   (0x0006)  MISSED
};

/// Class /Script/SB.SBShowCameraEyeTrackingKey
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align n/a MaxSize: 0x0058
class USBShowCameraEyeTrackingKey : public USBShowKey
{ 
public:
};

/// Struct /Script/SB.SBShowCameraShakeParams
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align n/a MaxSize: 0x0088
struct FSBShowCameraShakeParams
{ 
	float                                              OscillationDuration;                                        // 0x0000   (0x0004)  
	float                                              OscillationBlendInTime;                                     // 0x0004   (0x0004)  
	float                                              OscillationBlendOutTime;                                    // 0x0008   (0x0004)  
	FROscillator                                       RotOscillation;                                             // 0x000C   (0x0024)  
	FVOscillator                                       LocOscillation;                                             // 0x0030   (0x0024)  
	FFOscillator                                       FOVOscillation;                                             // 0x0054   (0x000C)  
	float                                              AnimPlayRate;                                               // 0x0060   (0x0004)  
	float                                              AnimScale;                                                  // 0x0064   (0x0004)  
	float                                              AnimBlendInTime;                                            // 0x0068   (0x0004)  
	float                                              AnimBlendOutTime;                                           // 0x006C   (0x0004)  
	float                                              RandomAnimSegmentDuration;                                  // 0x0070   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	class UCameraAnim*                                 Anim;                                                       // 0x0078   (0x0008)  
	bool                                               bRandomAnimSegment : 1;                                     // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowCamShakeKey
/// Size: 0x0128 (296 bytes) (0x000058 - 0x000128) align n/a MaxSize: 0x0128
class USBShowCamShakeKey : public USBShowKey
{ 
public:
	class UClass*                                      CameraShakeObject;                                          // 0x0058   (0x0008)  
	bool                                               bUseParams;                                                 // 0x0060   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0061   (0x0007)  MISSED
	FSBShowCameraShakeParams                           CameraShakeParams;                                          // 0x0068   (0x0088)  
	bool                                               bUseCameraShakeObject;                                      // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x00F1   (0x0003)  MISSED
	float                                              ShakeInnerRadius;                                           // 0x00F4   (0x0004)  
	float                                              ShakeOuterRadius;                                           // 0x00F8   (0x0004)  
	float                                              ShakeFallOff;                                               // 0x00FC   (0x0004)  
	bool                                               bOrientShakeTowardsEpicenter;                               // 0x0100   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0101   (0x0003)  MISSED
	float                                              ShakeScale;                                                 // 0x0104   (0x0004)  
	float                                              ShakeLocTension;                                            // 0x0108   (0x0004)  
	float                                              ShakeLocDecreasePerSec;                                     // 0x010C   (0x0004)  
	float                                              ShakeDirTension;                                            // 0x0110   (0x0004)  
	float                                              ShakeDirDecreasePerSec;                                     // 0x0114   (0x0004)  
	float                                              ShakeInterval;                                              // 0x0118   (0x0004)  
	bool                                               bAdditiveTension;                                           // 0x011C   (0x0001)  
	bool                                               bStopImmediately;                                           // 0x011D   (0x0001)  
	TEnumAsByte<ESBShowCamShakeTarget>                 PlayTarget;                                                 // 0x011E   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x011F   (0x0001)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x0120   (0x0004)  
	bool                                               bPlayerCharacterOnly;                                       // 0x0124   (0x0001)  
	unsigned char                                      UnknownData09_7[0x3];                                       // 0x0125   (0x0003)  MISSED
};

/// Class /Script/SB.SBShowChangeAttachTo
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class USBShowChangeAttachTo : public USBShowKey
{ 
public:
	FName                                              EventTagName;                                               // 0x0058   (0x0008)  
	FName                                              EventCustomNameValue;                                       // 0x0060   (0x0008)  
	bool                                               bForceApplyKeyWhenStoped;                                   // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowClientEventKey
/// Size: 0x0090 (144 bytes) (0x000058 - 0x000090) align n/a MaxSize: 0x0090
class USBShowClientEventKey : public USBShowKey
{ 
public:
	TEnumAsByte<ESBShowClientEvent>                    ClientEvent;                                                // 0x0058   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              EquipmentAttachTime;                                        // 0x005C   (0x0004)  
	bool                                               bFreeMoveMountingEquipment;                                 // 0x0060   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	FVector                                            FreeMoveMounting_StartControlPointDirection;                // 0x0064   (0x000C)  
	FVector                                            FreeMoveMounting_EndControlPointDirection;                  // 0x0070   (0x000C)  
	TEnumAsByte<ESBInterpType>                         FreeMoveMounting_InterpType;                                // 0x007C   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	FRotator                                           FreeMoveMounting_Rotation;                                  // 0x0080   (0x000C)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowControlCameraVolumeKey
/// Size: 0x00A0 (160 bytes) (0x000058 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBShowControlCameraVolumeKey : public USBShowKey
{ 
public:
	bool                                               bPlayerCharacterOnly;                                       // 0x0058   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              Priority;                                                   // 0x005C   (0x0004)  
	class UCurveFloat*                                 AddOffsetYCurve;                                            // 0x0060   (0x0008)  
	class UCurveFloat*                                 AddOffsetXCurve;                                            // 0x0068   (0x0008)  
	class UCurveFloat*                                 AddFovCurve;                                                // 0x0070   (0x0008)  
	class UCurveFloat*                                 YawToPivotCurve;                                            // 0x0078   (0x0008)  
	class UCurveFloat*                                 PitchToPivotCurve;                                          // 0x0080   (0x0008)  
	float                                              InitialTime;                                                // 0x0088   (0x0004)  
	bool                                               bHoldDuration;                                              // 0x008C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	float                                              HoldDuration;                                               // 0x0090   (0x0004)  
	bool                                               bEnableOverrideSameValue;                                   // 0x0094   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0095   (0x0003)  MISSED
	float                                              DelayStartDuration;                                         // 0x0098   (0x0004)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x009C   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowControlCamLagSpeedKey
/// Size: 0x0080 (128 bytes) (0x000058 - 0x000080) align n/a MaxSize: 0x0080
class USBShowControlCamLagSpeedKey : public USBShowKey
{ 
public:
	bool                                               bPlayerCharacterOnly;                                       // 0x0058   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              TargetSpeed;                                                // 0x005C   (0x0004)  
	float                                              TargetMaxDistance;                                          // 0x0060   (0x0004)  
	float                                              TargetLockOnCameraBlendScale;                               // 0x0064   (0x0004)  
	float                                              BlendSpeed;                                                 // 0x0068   (0x0004)  
	float                                              BlendOutDuration;                                           // 0x006C   (0x0004)  
	float                                              Priority;                                                   // 0x0070   (0x0004)  
	TEnumAsByte<ESBShowControlLagSpeedTarget>          PlayTarget;                                                 // 0x0074   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0075   (0x0003)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x0078   (0x0004)  
	bool                                               bApplyToLockOnCameraPitch;                                  // 0x007C   (0x0001)  
	unsigned char                                      UnknownData05_7[0x3];                                       // 0x007D   (0x0003)  MISSED
};

/// Class /Script/SB.SBShowControlLockOnBlendKey
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align n/a MaxSize: 0x0068
class USBShowControlLockOnBlendKey : public USBShowKey
{ 
public:
	bool                                               bPlayerCharacterOnly;                                       // 0x0058   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              TargetLockOnCameraBlendScale;                               // 0x005C   (0x0004)  
	float                                              BlendOutDuration;                                           // 0x0060   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowControlLockOnTargetBoneKey
/// Size: 0x0078 (120 bytes) (0x000058 - 0x000078) align n/a MaxSize: 0x0078
class USBShowControlLockOnTargetBoneKey : public USBShowKey
{ 
public:
	float                                              Priority;                                                   // 0x0058   (0x0004)  
	TEnumAsByte<ESBShowControlLockonTargetBone>        PlayTarget;                                                 // 0x005C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x005D   (0x0003)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x0060   (0x0004)  
	FName                                              TargetBoneSocketName;                                       // 0x0064   (0x0008)  
	float                                              LockOnPitchMax;                                             // 0x006C   (0x0004)  
	float                                              BlendInDuration;                                            // 0x0070   (0x0004)  
	float                                              BlendOutDuration;                                           // 0x0074   (0x0004)  
};

/// Struct /Script/SB.SBShowCreateDestructibleCollisionResponseToChannel
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FSBShowCreateDestructibleCollisionResponseToChannel
{ 
	TEnumAsByte<ECollisionChannel>                     Channel;                                                    // 0x0000   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Response;                                                   // 0x0001   (0x0001)  
};

/// Class /Script/SB.SBShowCreateDestructibleKey
/// Size: 0x0128 (296 bytes) (0x000058 - 0x000128) align n/a MaxSize: 0x0128
class USBShowCreateDestructibleKey : public USBShowKey
{ 
public:
	FName                                              SocketName;                                                 // 0x0058   (0x0008)  
	class UDestructibleMesh*                           DestructibleMesh;                                           // 0x0060   (0x0008)  
	TEnumAsByte<ESBShowActorTarget>                    LocationBaseTarget;                                         // 0x0068   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x006C   (0x0004)  
	FVector                                            RelativeLocation;                                           // 0x0070   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x007C   (0x000C)  
	FVector                                            Scale;                                                      // 0x0088   (0x000C)  
	float                                              AllowFloorTraceDistance;                                    // 0x0094   (0x0004)  
	float                                              AllowFloorTraceStartZSubLength;                             // 0x0098   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x009C   (0x0004)  MISSED
	TArray<TEnumAsByte<EPhysicalSurface>>              AllowFloorSurface;                                          // 0x00A0   (0x0010)  
	TArray<TEnumAsByte<ECollisionChannel>>             AllowFloorObjectTypes;                                      // 0x00B0   (0x0010)  
	bool                                               bUseHardSleeping;                                           // 0x00C0   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     CollisionType;                                              // 0x00C1   (0x0001)  
	unsigned char                                      UnknownData09_6[0x2];                                       // 0x00C2   (0x0002)  MISSED
	float                                              DissolveFadeBeginTime;                                      // 0x00C4   (0x0004)  
	float                                              DissolveFadeDuration;                                       // 0x00C8   (0x0004)  
	bool                                               bDestroyAfterDissolve;                                      // 0x00CC   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x00CD   (0x0003)  MISSED
	class UParticleSystem*                             ChunkAttachedParticle;                                      // 0x00D0   (0x0008)  
	float                                              ChunkAttachedParticleDestroyTime;                           // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	TArray<FName>                                      ComponentTag;                                               // 0x00E0   (0x0010)  
	TArray<FSBShowCreateDestructibleCollisionResponseToChannel> CollisionResponseToChannel;                        // 0x00F0   (0x0010)  
	float                                              BaseDamage;                                                 // 0x0100   (0x0004)  
	FVector                                            HurtOriginOffset;                                           // 0x0104   (0x000C)  
	float                                              DamageRadius;                                               // 0x0110   (0x0004)  
	float                                              ImpulseStrength;                                            // 0x0114   (0x0004)  
	bool                                               bFullDamage;                                                // 0x0118   (0x0001)  
	bool                                               bRegisterActor;                                             // 0x0119   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x011A   (0x0002)  MISSED
	FName                                              RegisterKey;                                                // 0x011C   (0x0008)  
	unsigned char                                      UnknownData13_7[0x4];                                       // 0x0124   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowCreateStaticMeshKey
/// Size: 0x04B8 (1208 bytes) (0x000058 - 0x0004B8) align n/a MaxSize: 0x04B8
class USBShowCreateStaticMeshKey : public USBShowKey
{ 
public:
	FName                                              SocketName;                                                 // 0x0058   (0x0008)  
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0060   (0x0008)  
	TArray<class UMaterialInterface*>                  pMaterialArray;                                             // 0x0068   (0x0010)  
	TArray<FSoftObjectPath>                            MaterialInstanceArray;                                      // 0x0078   (0x0010)  
	TEnumAsByte<ESBShowActorTarget>                    LocationBaseTarget;                                         // 0x0088   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x008C   (0x0004)  
	bool                                               bUseTargetEquipment;                                        // 0x0090   (0x0001)  
	TEnumAsByte<ESBEquipmentType>                      TargetEquipment;                                            // 0x0091   (0x0001)  
	bool                                               bAttach;                                                    // 0x0092   (0x0001)  
	unsigned char                                      UnknownData09_6[0x1];                                       // 0x0093   (0x0001)  MISSED
	FVector                                            RelativeLocation;                                           // 0x0094   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x00A0   (0x000C)  
	FVector                                            Scale;                                                      // 0x00AC   (0x000C)  
	FCollisionProfileName                              CollisionProfileName;                                       // 0x00B8   (0x0008)  
	bool                                               bInGenerateOverlapEvents;                                   // 0x00C0   (0x0001)  
	bool                                               bHiddenInGame;                                              // 0x00C1   (0x0001)  
	bool                                               bRenderHiddenDepthInSceneCapture;                           // 0x00C2   (0x0001)  
	bool                                               bReceivesDecals;                                            // 0x00C3   (0x0001)  
	bool                                               bOverrideCastShadow;                                        // 0x00C4   (0x0001)  
	bool                                               bCastShadow;                                                // 0x00C5   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x00C6   (0x0002)  MISSED
	FName                                              ActorTag;                                                   // 0x00C8   (0x0008)  
	FName                                              ComponentTag;                                               // 0x00D0   (0x0008)  
	bool                                               bRegisterActor;                                             // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x00D9   (0x0003)  MISSED
	FName                                              RegisterKey;                                                // 0x00DC   (0x0008)  
	bool                                               bEnableRelativeLocationCurve;                               // 0x00E4   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x00E5   (0x0003)  MISSED
	FRuntimeFloatCurve                                 RelativeLocationXCurve;                                     // 0x00E8   (0x0088)  
	FRuntimeFloatCurve                                 RelativeLocationYCurve;                                     // 0x0170   (0x0088)  
	FRuntimeFloatCurve                                 RelativeLocationZCurve;                                     // 0x01F8   (0x0088)  
	bool                                               bEnableRelativeRotationCurve;                               // 0x0280   (0x0001)  
	unsigned char                                      UnknownData13_6[0x7];                                       // 0x0281   (0x0007)  MISSED
	FRuntimeFloatCurve                                 RelativeRotationXCurve;                                     // 0x0288   (0x0088)  
	FRuntimeFloatCurve                                 RelativeRotationYCurve;                                     // 0x0310   (0x0088)  
	FRuntimeFloatCurve                                 RelativeRotationZCurve;                                     // 0x0398   (0x0088)  
	bool                                               bEnableScaleCurve;                                          // 0x0420   (0x0001)  
	unsigned char                                      UnknownData14_6[0x7];                                       // 0x0421   (0x0007)  MISSED
	FRuntimeFloatCurve                                 ScaleCurve;                                                 // 0x0428   (0x0088)  
	ESBPhotoModeShowHiddenFlag                         PhotoModeShowHiddenFlag;                                    // 0x04B0   (0x0001)  
	unsigned char                                      UnknownData15_7[0x7];                                       // 0x04B1   (0x0007)  MISSED
};

/// Struct /Script/SB.SBShowKeyContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBShowKeyContainer
{ 
	TArray<class USBShowKey*>                          Keys;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBTablePropertyBase
/// Size: 0x0010 (16 bytes) (0x000008 - 0x000010) align n/a MaxSize: 0x0010
struct FSBTablePropertyBase : FTableRowBase
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/SB.SBJsonEffect
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBJsonEffect
{ 
	FName                                              Alias;                                                      // 0x0000   (0x0008)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
	float                                              CalculationValue;                                           // 0x000C   (0x0004)  
	float                                              StartDelayTime;                                             // 0x0010   (0x0004)  
};

/// Struct /Script/SB.SBJsonSkillStepEndCondition
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBJsonSkillStepEndCondition
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              NextStepAlias;                                              // 0x0004   (0x0008)  
	TEnumAsByte<ESBConditionCheckType>                 IsGround;                                                   // 0x000C   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsSwimming;                                                 // 0x000D   (0x0001)  
	bool                                               bOverlapTargetFilterRadius;                                 // 0x000E   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsRuleMoveActive;                                           // 0x000F   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsTargetDead;                                               // 0x0010   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0011   (0x0007)  MISSED
	TArray<FName>                                      EffectAliasArray;                                           // 0x0018   (0x0010)  
};

/// Struct /Script/SB.SBJsonCollisionGroup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBJsonCollisionGroup
{ 
	float                                              DelayTime;                                                  // 0x0000   (0x0004)  
	FName                                              CollisionGroupName;                                         // 0x0004   (0x0008)  
	bool                                               bCheckJustActionTime;                                       // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/SB.SBJsonNextStepCheckEffect
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBJsonNextStepCheckEffect
{ 
	FName                                              Effect;                                                     // 0x0000   (0x0008)  
	FName                                              NextStepAlias;                                              // 0x0008   (0x0008)  
	bool                                               bCheckTarget;                                               // 0x0010   (0x0001)  
	bool                                               bHit;                                                       // 0x0011   (0x0001)  
	bool                                               bParry;                                                     // 0x0012   (0x0001)  
	bool                                               bJustParry;                                                 // 0x0013   (0x0001)  
};

/// Struct /Script/SB.SBSkillActiveStepTableProperty
/// Size: 0x0390 (912 bytes) (0x000010 - 0x000390) align n/a MaxSize: 0x0390
struct FSBSkillActiveStepTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBSkillActiveStepType>                Type;                                                       // 0x0014   (0x0001)  
	unsigned char                                      UnknownData22_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	float                                              Duration;                                                   // 0x0018   (0x0004)  
	TEnumAsByte<ESBSkillAttackDirection>               AttackDirection;                                            // 0x001C   (0x0001)  
	unsigned char                                      UnknownData23_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	float                                              SkillAttackDamageRate;                                      // 0x0020   (0x0004)  
	float                                              SkillShieldAttackDamageRate;                                // 0x0024   (0x0004)  
	float                                              SkillFixedDamageRate;                                       // 0x0028   (0x0004)  
	bool                                               AvailableParry;                                             // 0x002C   (0x0001)  
	bool                                               AvailableSuperParry;                                        // 0x002D   (0x0001)  
	bool                                               AvailableGuard;                                             // 0x002E   (0x0001)  
	bool                                               AvailableJustParry;                                         // 0x002F   (0x0001)  
	bool                                               AvailableJustAction;                                        // 0x0030   (0x0001)  
	bool                                               AvailableJustGuard;                                         // 0x0031   (0x0001)  
	unsigned char                                      UnknownData24_6[0x2];                                       // 0x0032   (0x0002)  MISSED
	FName                                              NextStepAlias;                                              // 0x0034   (0x0008)  
	FName                                              NextStepAliasWhenParry;                                     // 0x003C   (0x0008)  
	FName                                              NextStepAliasWhenJustParry;                                 // 0x0044   (0x0008)  
	FName                                              NextStepAliasWhenPerfectParry;                              // 0x004C   (0x0008)  
	FName                                              NextStepAliasWhenSuperParry;                                // 0x0054   (0x0008)  
	FName                                              NextStepAliasWhenGuard;                                     // 0x005C   (0x0008)  
	FName                                              NextStepAliasWhenBreakGuard;                                // 0x0064   (0x0008)  
	FName                                              NextStepAliasWhenCancel;                                    // 0x006C   (0x0008)  
	FName                                              NextStepAliasWhenHit;                                       // 0x0074   (0x0008)  
	FName                                              NextStepAliasWhenPerfectHit;                                // 0x007C   (0x0008)  
	FName                                              NextStepAliasWhenHoldRelease;                               // 0x0084   (0x0008)  
	FName                                              NextStepAliasWhenHoldAndDualSenseTriggerEffectWeaponFired;  // 0x008C   (0x0008)  
	FName                                              NextStepAliasWhenAttacked;                                  // 0x0094   (0x0008)  
	FName                                              NextStepAliasWhenNoTarget;                                  // 0x009C   (0x0008)  
	FName                                              NextStepAliasWhenLinkBreak;                                 // 0x00A4   (0x0008)  
	FName                                              NextStepAliasWhenInvalidItemConsume;                        // 0x00AC   (0x0008)  
	unsigned char                                      UnknownData25_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	FString                                            NextStepCheckEffectArray;                                   // 0x00B8   (0x0010)  
	float                                              ResultInterval;                                             // 0x00C8   (0x0004)  
	FName                                              SkillResultAlias;                                           // 0x00CC   (0x0008)  
	FName                                              SkillResultAliasWhenParry;                                  // 0x00D4   (0x0008)  
	FName                                              SkillResultAliasWhenJustParry;                              // 0x00DC   (0x0008)  
	FName                                              SkillResultAliasWhenPerfectParry;                           // 0x00E4   (0x0008)  
	FName                                              SkillResultAliasWhenSuperParry;                             // 0x00EC   (0x0008)  
	FName                                              SkillResultAliasWhenGuard;                                  // 0x00F4   (0x0008)  
	FName                                              SkillResultAliasWhenBreakGuard;                             // 0x00FC   (0x0008)  
	TEnumAsByte<ESBElementType>                        SkillResultElementType;                                     // 0x0104   (0x0001)  
	unsigned char                                      UnknownData26_6[0x3];                                       // 0x0105   (0x0003)  MISSED
	float                                              SkillResultElementAmount;                                   // 0x0108   (0x0004)  
	bool                                               bIgnoreAttackSpeedStat;                                     // 0x010C   (0x0001)  
	bool                                               bIgnoreNoDamageState;                                       // 0x010D   (0x0001)  
	unsigned char                                      UnknownData27_6[0x2];                                       // 0x010E   (0x0002)  MISSED
	FString                                            StartSelfEffect;                                            // 0x0110   (0x0010)  
	FString                                            StartTargetEffect;                                          // 0x0120   (0x0010)  
	bool                                               StopSelfMove;                                               // 0x0130   (0x0001)  
	unsigned char                                      UnknownData28_6[0x7];                                       // 0x0131   (0x0007)  MISSED
	TArray<FName>                                      SelfMoveAliasArray;                                         // 0x0138   (0x0010)  
	TArray<FName>                                      TargetMoveAliasArray;                                       // 0x0148   (0x0010)  
	FName                                              PeacefulShowPath;                                           // 0x0158   (0x0008)  
	FName                                              ShowPath;                                                   // 0x0160   (0x0008)  
	bool                                               bShowWithCasterDrone;                                       // 0x0168   (0x0001)  
	unsigned char                                      UnknownData29_6[0x3];                                       // 0x0169   (0x0003)  MISSED
	FName                                              TargetShowPath;                                             // 0x016C   (0x0008)  
	TEnumAsByte<ESBSkillProjectileTargetType>          UsableNonTargetProjectileTargetType;                        // 0x0174   (0x0001)  
	unsigned char                                      UnknownData30_6[0x3];                                       // 0x0175   (0x0003)  MISSED
	TArray<FName>                                      UsableNonTargetProjectileAliasArray;                        // 0x0178   (0x0010)  
	TEnumAsByte<ESBSkillProjectileTargetType>          UsableTargetProjectileTargetType;                           // 0x0188   (0x0001)  
	unsigned char                                      UnknownData31_6[0x7];                                       // 0x0189   (0x0007)  MISSED
	TArray<FName>                                      UsableTargetProjectileAliasArray;                           // 0x0190   (0x0010)  
	float                                              UsableProjectileConsecutiveDelay;                           // 0x01A0   (0x0004)  
	bool                                               bEveryFrameHitCheck;                                        // 0x01A4   (0x0001)  
	TEnumAsByte<ESBSkillHitDetectionType>              HitDetectionType;                                           // 0x01A5   (0x0001)  
	TEnumAsByte<ESBSkillTargetDetectionType>           TargetDetectionType;                                        // 0x01A6   (0x0001)  
	unsigned char                                      UnknownData32_6[0x1];                                       // 0x01A7   (0x0001)  MISSED
	int32_t                                            AimLockOnTargetMaxCount;                                    // 0x01A8   (0x0004)  
	int32_t                                            AimLockOnTargetOverlapCount;                                // 0x01AC   (0x0004)  
	bool                                               bRetargeting;                                               // 0x01B0   (0x0001)  
	unsigned char                                      UnknownData33_6[0x3];                                       // 0x01B1   (0x0003)  MISSED
	FName                                              OverrideTargetFilterAlias;                                  // 0x01B4   (0x0008)  
	unsigned char                                      UnknownData34_6[0x4];                                       // 0x01BC   (0x0004)  MISSED
	FString                                            AttackCollisionGroupArray;                                  // 0x01C0   (0x0010)  
	FString                                            AttackedCollisionGroupArray;                                // 0x01D0   (0x0010)  
	float                                              BlockingCollisionDelayTime;                                 // 0x01E0   (0x0004)  
	unsigned char                                      UnknownData35_6[0x4];                                       // 0x01E4   (0x0004)  MISSED
	TArray<FString>                                    BlockingCollisionArray;                                     // 0x01E8   (0x0010)  
	bool                                               bDisableRuleMoveBlockArea;                                  // 0x01F8   (0x0001)  
	bool                                               bLookAtTarget;                                              // 0x01F9   (0x0001)  
	unsigned char                                      UnknownData36_6[0x2];                                       // 0x01FA   (0x0002)  MISSED
	float                                              LookAtTargetRotationTime;                                   // 0x01FC   (0x0004)  
	float                                              LookAtTargetLeftMaxAngle;                                   // 0x0200   (0x0004)  
	float                                              LookAtTargetRightMaxAngle;                                  // 0x0204   (0x0004)  
	FString                                            CreateEffectSelfPosition;                                   // 0x0208   (0x0010)  
	FString                                            CreateEffectTargetPosition;                                 // 0x0218   (0x0010)  
	FString                                            TargetDeadEffect;                                           // 0x0228   (0x0010)  
	bool                                               bCritical;                                                  // 0x0238   (0x0001)  
	bool                                               PostStep;                                                   // 0x0239   (0x0001)  
	unsigned char                                      UnknownData37_6[0x2];                                       // 0x023A   (0x0002)  MISSED
	float                                              PostStepDelay;                                              // 0x023C   (0x0004)  
	bool                                               CanCutoff;                                                  // 0x0240   (0x0001)  
	bool                                               bStopWhenMoving;                                            // 0x0241   (0x0001)  
	bool                                               bDisableLockOnRotation;                                     // 0x0242   (0x0001)  
	bool                                               bSkipWhenZeroVelocity;                                      // 0x0243   (0x0001)  
	unsigned char                                      UnknownData38_6[0x4];                                       // 0x0244   (0x0004)  MISSED
	FString                                            ConditionEnd1;                                              // 0x0248   (0x0010)  
	FString                                            ConditionEnd2;                                              // 0x0258   (0x0010)  
	float                                              SoundDecibel;                                               // 0x0268   (0x0004)  
	float                                              SoundLife;                                                  // 0x026C   (0x0004)  
	bool                                               IgnoreNextComboTime;                                        // 0x0270   (0x0001)  
	bool                                               bKeepResulted;                                              // 0x0271   (0x0001)  
	bool                                               bIgnoreHitStop;                                             // 0x0272   (0x0001)  
	unsigned char                                      UnknownData39_6[0x1];                                       // 0x0273   (0x0001)  MISSED
	float                                              ZoneEventDestructionDelayMinTime;                           // 0x0274   (0x0004)  
	float                                              ZoneEventDestructionDelayMaxTime;                           // 0x0278   (0x0004)  
	FName                                              UIActionRequestGroup;                                       // 0x027C   (0x0008)  
	TEnumAsByte<ESBUIChargingVisibleType>              UIChargingVisibleType;                                      // 0x0284   (0x0001)  
	TEnumAsByte<ESBSkillActiveStepUIEvent>             StepUIEvent;                                                // 0x0285   (0x0001)  
	unsigned char                                      UnknownData40_6[0x2];                                       // 0x0286   (0x0002)  MISSED
	int32_t                                            TPS_AimChargingCount;                                       // 0x0288   (0x0004)  
	TEnumAsByte<ESBDualSenseTriggerEffect>             DualSenseTriggerEffect;                                     // 0x028C   (0x0001)  
	unsigned char                                      UnknownData41_6[0x3];                                       // 0x028D   (0x0003)  MISSED
	TArray<int32_t>                                    DualSenseTriggerEffectParameters;                           // 0x0290   (0x0010)  
	bool                                               bReleaseCommandKeyWhenStop;                                 // 0x02A0   (0x0001)  
	bool                                               bResetComboTime;                                            // 0x02A1   (0x0001)  
	unsigned char                                      UnknownData42_6[0x6];                                       // 0x02A2   (0x0006)  MISSED
	TArray<FName>                                      CheckValidMoveAliasArray;                                   // 0x02A8   (0x0010)  
	FString                                            Loc_SystemNotice;                                           // 0x02B8   (0x0010)  
	FName                                              TrainingRoomOverrideAcquisitionSkillAlias;                  // 0x02C8   (0x0008)  
	FString                                            TrainingRoomLogStringKey;                                   // 0x02D0   (0x0010)  
	bool                                               TrainingRoomForceLearned;                                   // 0x02E0   (0x0001)  
	unsigned char                                      UnknownData43_6[0x3];                                       // 0x02E1   (0x0003)  MISSED
	FName                                              ActionAssistTargetFilter;                                   // 0x02E4   (0x0008)  
	float                                              ActionAssistCheckDelay;                                     // 0x02EC   (0x0004)  
	float                                              ActionAssistActiveTime;                                     // 0x02F0   (0x0004)  
	float                                              ActionAssistCollisionPreCheckTime;                          // 0x02F4   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x02F8   (0x0008)  
	TArray<FSBJsonEffect>                              StartSelfEffectArray;                                       // 0x0300   (0x0010)  
	TArray<FSBJsonEffect>                              StartTargetEffectArray;                                     // 0x0310   (0x0010)  
	TArray<FSBJsonEffect>                              CreateEffectSelfPositionArray;                              // 0x0320   (0x0010)  
	TArray<FSBJsonEffect>                              CreateEffectTargetPositionArray;                            // 0x0330   (0x0010)  
	TArray<FSBJsonEffect>                              TargetDeadEffectArray;                                      // 0x0340   (0x0010)  
	TArray<FSBJsonSkillStepEndCondition>               EndConditionArray;                                          // 0x0350   (0x0010)  
	TArray<FSBJsonCollisionGroup>                      AttackedCollisionGroupJsonArray;                            // 0x0360   (0x0010)  
	TArray<FSBJsonCollisionGroup>                      AttackCollisionGroupJsonArray;                              // 0x0370   (0x0010)  
	TArray<FSBJsonNextStepCheckEffect>                 NextStepCheckEffectJsonArray;                               // 0x0380   (0x0010)  
};

/// Struct /Script/SB.SBShowKeyStep
/// Size: 0x0398 (920 bytes) (0x000000 - 0x000398) align n/a MaxSize: 0x0398
struct FSBShowKeyStep
{ 
	float                                              StartTime;                                                  // 0x0000   (0x0004)  
	float                                              StepDuration;                                               // 0x0004   (0x0004)  
	FSBSkillActiveStepTableProperty                    StepProperty;                                               // 0x0008   (0x0390)  
};

/// Class /Script/SB.SBShowData
/// Size: 0x00C0 (192 bytes) (0x000030 - 0x0000C0) align n/a MaxSize: 0x00C0
class USBShowData : public UDataAsset
{ 
public:
	uint32_t                                           Version;                                                    // 0x0030   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	FString                                            Annotation;                                                 // 0x0038   (0x0010)  
	bool                                               bCutScenePhotoMode;                                         // 0x0048   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              StartTime;                                                  // 0x004C   (0x0004)  
	float                                              EndTime;                                                    // 0x0050   (0x0004)  
	bool                                               bLoop;                                                      // 0x0054   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	int32_t                                            LoopCount;                                                  // 0x0058   (0x0004)  
	bool                                               bUseStep;                                                   // 0x005C   (0x0001)  
	bool                                               bUseKeyLimitFrame;                                          // 0x005D   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x005E   (0x0002)  MISSED
	TMap<int32_t, FSBShowKeyContainer>                 KeyContanerMap;                                             // 0x0060   (0x0050)  
	TArray<FSBShowKeyStep>                             ShowStepArray;                                              // 0x00B0   (0x0010)  
};

/// Class /Script/SB.SBShowDeactiveParticleKey
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class USBShowDeactiveParticleKey : public USBShowKey
{ 
public:
	TEnumAsByte<ESBSkelMeshSlot>                       MeshSlot;                                                   // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	TArray<FName>                                      SocketNameList;                                             // 0x0060   (0x0010)  
};

/// Class /Script/SB.SBShowParticleBase
/// Size: 0x0498 (1176 bytes) (0x000058 - 0x000498) align n/a MaxSize: 0x0498
class USBShowParticleBase : public USBShowKey
{ 
public:
	FName                                              SocketName;                                                 // 0x0058   (0x0008)  
	bool                                               bUseSocketScale;                                            // 0x0060   (0x0001)  
	bool                                               bImmediatelyDestroy;                                        // 0x0061   (0x0001)  
	bool                                               bAttach;                                                    // 0x0062   (0x0001)  
	bool                                               bFollowing;                                                 // 0x0063   (0x0001)  
	bool                                               bFollowSpring;                                              // 0x0064   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	float                                              FollowingStiffness;                                         // 0x0068   (0x0004)  
	float                                              FollowingDamping;                                           // 0x006C   (0x0004)  
	bool                                               bPosOnly;                                                   // 0x0070   (0x0001)  
	TEnumAsByte<ESBParticleRelativeAxis>               RelativeLocationAxis;                                       // 0x0071   (0x0001)  
	unsigned char                                      UnknownData11_6[0x2];                                       // 0x0072   (0x0002)  MISSED
	FVector                                            RelativeLocation;                                           // 0x0074   (0x000C)  
	TEnumAsByte<ESBParticleRelativeAxis>               RelativeRotationAxis;                                       // 0x0080   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	FRotator                                           RelativeRotation;                                           // 0x0084   (0x000C)  
	float                                              ParticleScale;                                              // 0x0090   (0x0004)  
	bool                                               bUseCharacterParticleScale;                                 // 0x0094   (0x0001)  
	bool                                               bUseCharParticleScaleToRelativeLoc;                         // 0x0095   (0x0001)  
	TEnumAsByte<ESBShowParticleTarget>                 Target;                                                     // 0x0096   (0x0001)  
	unsigned char                                      UnknownData13_6[0x1];                                       // 0x0097   (0x0001)  MISSED
	int32_t                                            TargetIndex;                                                // 0x0098   (0x0004)  
	bool                                               bUseTargetEquipment;                                        // 0x009C   (0x0001)  
	TEnumAsByte<ESBEquipmentType>                      TargetEquipment;                                            // 0x009D   (0x0001)  
	bool                                               bUseTargetComponentTag;                                     // 0x009E   (0x0001)  
	unsigned char                                      UnknownData14_6[0x1];                                       // 0x009F   (0x0001)  MISSED
	FName                                              TargetComponentTag;                                         // 0x00A0   (0x0008)  
	bool                                               IsTickableWhenPaused;                                       // 0x00A8   (0x0001)  
	bool                                               bEnableRelativeLocationCurve;                               // 0x00A9   (0x0001)  
	unsigned char                                      UnknownData15_6[0x6];                                       // 0x00AA   (0x0006)  MISSED
	FRuntimeFloatCurve                                 RelativeLocationXCurve;                                     // 0x00B0   (0x0088)  
	FRuntimeFloatCurve                                 RelativeLocationYCurve;                                     // 0x0138   (0x0088)  
	FRuntimeFloatCurve                                 RelativeLocationZCurve;                                     // 0x01C0   (0x0088)  
	bool                                               bEnableRelativeRotationCurve;                               // 0x0248   (0x0001)  
	unsigned char                                      UnknownData16_6[0x7];                                       // 0x0249   (0x0007)  MISSED
	FRuntimeFloatCurve                                 RelativeRotationXCurve;                                     // 0x0250   (0x0088)  
	FRuntimeFloatCurve                                 RelativeRotationYCurve;                                     // 0x02D8   (0x0088)  
	FRuntimeFloatCurve                                 RelativeRotationZCurve;                                     // 0x0360   (0x0088)  
	bool                                               bEnableParticleScaleCurve;                                  // 0x03E8   (0x0001)  
	unsigned char                                      UnknownData17_6[0x7];                                       // 0x03E9   (0x0007)  MISSED
	FRuntimeFloatCurve                                 ParticleScaleCurve;                                         // 0x03F0   (0x0088)  
	bool                                               bEnableRandomLocation;                                      // 0x0478   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x0479   (0x0003)  MISSED
	FVector                                            RandomLocationMin;                                          // 0x047C   (0x000C)  
	FVector                                            RandomLocationMax;                                          // 0x0488   (0x000C)  
	unsigned char                                      UnknownData19_7[0x4];                                       // 0x0494   (0x0004)  MISSED
};

/// Struct /Script/SB.SBShowDecalParamCurve
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FSBShowDecalParamCurve
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	FRuntimeFloatCurve                                 Curve;                                                      // 0x0008   (0x0088)  
};

/// Class /Script/SB.SBShowDecalKey
/// Size: 0x06C8 (1736 bytes) (0x000498 - 0x0006C8) align n/a MaxSize: 0x06C8
class USBShowDecalKey : public USBShowParticleBase
{ 
public:
	class UMaterialInterface*                          DecalMaterial;                                              // 0x0498   (0x0008)  
	float                                              LifeTime;                                                   // 0x04A0   (0x0004)  
	float                                              FadeInDuration;                                             // 0x04A4   (0x0004)  
	float                                              FadeOutDuration;                                            // 0x04A8   (0x0004)  
	float                                              FadeScreenSize;                                             // 0x04AC   (0x0004)  
	bool                                               bWorldDecal;                                                // 0x04B0   (0x0001)  
	bool                                               bOnGround;                                                  // 0x04B1   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x04B2   (0x0002)  MISSED
	float                                              GroundCheckDistance;                                        // 0x04B4   (0x0004)  
	FVector                                            DecalSize;                                                  // 0x04B8   (0x000C)  
	bool                                               bUseMultiplyRandomScale;                                    // 0x04C4   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x04C5   (0x0003)  MISSED
	float                                              RandomScaleOffsetMin;                                       // 0x04C8   (0x0004)  
	float                                              RandomScaleOffsetMax;                                       // 0x04CC   (0x0004)  
	FRotator                                           Rotation;                                                   // 0x04D0   (0x000C)  
	bool                                               bUseAddRandomRotation;                                      // 0x04DC   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x04DD   (0x0003)  MISSED
	FRotator                                           RandomRotationOffsetMin;                                    // 0x04E0   (0x000C)  
	FRotator                                           RandomRotationOffsetMax;                                    // 0x04EC   (0x000C)  
	bool                                               bCurveNormalizedAge;                                        // 0x04F8   (0x0001)  
	unsigned char                                      UnknownData10_6[0x7];                                       // 0x04F9   (0x0007)  MISSED
	TArray<FSBShowDecalParamCurve>                     ParamCurves;                                                // 0x0500   (0x0010)  
	bool                                               bUseScaleCurve;                                             // 0x0510   (0x0001)  
	bool                                               bScaleCurveNormalizedAge;                                   // 0x0511   (0x0001)  
	unsigned char                                      UnknownData11_6[0x6];                                       // 0x0512   (0x0006)  MISSED
	FRuntimeFloatCurve                                 ScaleXCurve;                                                // 0x0518   (0x0088)  
	FRuntimeFloatCurve                                 ScaleYCurve;                                                // 0x05A0   (0x0088)  
	FRuntimeFloatCurve                                 ScaleZCurve;                                                // 0x0628   (0x0088)  
	bool                                               bAttachTargetOnlyDecal;                                     // 0x06B0   (0x0001)  
	TEnumAsByte<ESBSkelMeshSlot>                       ApplyMeshSlotWhenTargetOnlyDecal;                           // 0x06B1   (0x0001)  
	bool                                               bIgnoreHairSlot;                                            // 0x06B2   (0x0001)  
	bool                                               bWithBindingCharacter;                                      // 0x06B3   (0x0001)  
	bool                                               bAutoDecalSizeWhenAttach;                                   // 0x06B4   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x06B5   (0x0003)  MISSED
	float                                              AutoDecalSizeScale;                                         // 0x06B8   (0x0004)  
	int32_t                                            SortOrder;                                                  // 0x06BC   (0x0004)  
	int32_t                                            DecalChannelMask;                                           // 0x06C0   (0x0004)  
	unsigned char                                      UnknownData13_7[0x4];                                       // 0x06C4   (0x0004)  MISSED
};

/// Struct /Script/SB.SBDepthOfFieldRuntimeFloatCurve
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FSBDepthOfFieldRuntimeFloatCurve
{ 
	bool                                               bUseCurve;                                                  // 0x0000   (0x0001)  
	bool                                               bCurveNormalizedAge;                                        // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	FRuntimeFloatCurve                                 Curve;                                                      // 0x0008   (0x0088)  
};

/// Struct /Script/SB.SBPostProcessDepthOfFieldAdvanceData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBPostProcessDepthOfFieldAdvanceData
{ 
	bool                                               bOverride_DepthOfFieldOcclusion : 1;                        // 0x0000:0 (0x0001)  
	bool                                               bOverride_DepthOfFieldBokehShape : 1;                       // 0x0000:1 (0x0001)  
	bool                                               bOverride_DepthOfFieldColorThreshold : 1;                   // 0x0000:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldSizeThreshold : 1;                    // 0x0000:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldSkyFocusDistance : 1;                 // 0x0000:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldVignetteSize : 1;                     // 0x0000:5 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              DepthOfFieldOcclusion;                                      // 0x0004   (0x0004)  
	class UTexture*                                    DepthOfFieldBokehShape;                                     // 0x0008   (0x0008)  
	float                                              DepthOfFieldColorThreshold;                                 // 0x0010   (0x0004)  
	float                                              DepthOfFieldSizeThreshold;                                  // 0x0014   (0x0004)  
	float                                              DepthOfFieldSkyFocusDistance;                               // 0x0018   (0x0004)  
	float                                              DepthOfFieldVignetteSize;                                   // 0x001C   (0x0004)  
};

/// Struct /Script/SB.SBPostProcessDepthOfFieldData
/// Size: 0x03B8 (952 bytes) (0x000000 - 0x0003B8) align n/a MaxSize: 0x03B8
struct FSBPostProcessDepthOfFieldData
{ 
	bool                                               bOverride_DepthOfFieldMethod : 1;                           // 0x0000:0 (0x0001)  
	bool                                               bOverride_DepthOfFieldFocalDistance : 1;                    // 0x0000:1 (0x0001)  
	bool                                               bOverride_DepthOfFieldDepthBlurAmount : 1;                  // 0x0000:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldDepthBlurRadius : 1;                  // 0x0000:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldFocalRegion : 1;                      // 0x0000:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldNearTransitionRegion : 1;             // 0x0000:5 (0x0001)  
	bool                                               bOverride_DepthOfFieldFarTransitionRegion : 1;              // 0x0000:6 (0x0001)  
	bool                                               bOverride_DepthOfFieldScale : 1;                            // 0x0000:7 (0x0001)  
	bool                                               bOverride_DepthOfFieldMaxBokehSize : 1;                     // 0x0001:0 (0x0001)  
	bool                                               bOverride_DepthOfFieldNearBlurSize : 1;                     // 0x0001:1 (0x0001)  
	bool                                               bOverride_DepthOfFieldFarBlurSize : 1;                      // 0x0001:2 (0x0001)  
	TEnumAsByte<EDepthOfFieldMethod>                   DepthOfFieldMethod;                                         // 0x0002   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              DepthOfFieldFocalDistance;                                  // 0x0004   (0x0004)  
	FSBDepthOfFieldRuntimeFloatCurve                   DepthOfFieldFocalDistanceCurve;                             // 0x0008   (0x0090)  
	float                                              DepthOfFieldDepthBlurAmount;                                // 0x0098   (0x0004)  
	float                                              DepthOfFieldDepthBlurRadius;                                // 0x009C   (0x0004)  
	FSBDepthOfFieldRuntimeFloatCurve                   DepthOfFieldDepthBlurRadiusCurve;                           // 0x00A0   (0x0090)  
	float                                              DepthOfFieldFocalRegion;                                    // 0x0130   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	FSBDepthOfFieldRuntimeFloatCurve                   DepthOfFieldFocalRegionCurve;                               // 0x0138   (0x0090)  
	float                                              DepthOfFieldNearTransitionRegion;                           // 0x01C8   (0x0004)  
	float                                              DepthOfFieldFarTransitionRegion;                            // 0x01CC   (0x0004)  
	float                                              DepthOfFieldScale;                                          // 0x01D0   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x01D4   (0x0004)  MISSED
	FSBDepthOfFieldRuntimeFloatCurve                   DepthOfFieldScaleCurve;                                     // 0x01D8   (0x0090)  
	float                                              DepthOfFieldMaxBokehSize;                                   // 0x0268   (0x0004)  
	float                                              DepthOfFieldNearBlurSize;                                   // 0x026C   (0x0004)  
	FSBDepthOfFieldRuntimeFloatCurve                   DepthOfFieldNearBlurSizeCurve;                              // 0x0270   (0x0090)  
	float                                              DepthOfFieldFarBlurSize;                                    // 0x0300   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0304   (0x0004)  MISSED
	FSBDepthOfFieldRuntimeFloatCurve                   DepthOfFieldFarBlurSizeCurve;                               // 0x0308   (0x0090)  
	FSBPostProcessDepthOfFieldAdvanceData              AdvanceData;                                                // 0x0398   (0x0020)  
};

/// Class /Script/SB.SBShowDepthOfFieldKey
/// Size: 0x0420 (1056 bytes) (0x000058 - 0x000420) align n/a MaxSize: 0x0420
class USBShowDepthOfFieldKey : public USBShowKey
{ 
public:
	int32_t                                            Priority;                                                   // 0x0058   (0x0004)  
	bool                                               bPlayerCharacterOnly;                                       // 0x005C   (0x0001)  
	TEnumAsByte<ESBDOFFocalDistanceType>               DOFFocalDistanceType;                                       // 0x005D   (0x0001)  
	bool                                               bFocalDistanceTargetToMainCharacter;                        // 0x005E   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x005F   (0x0001)  MISSED
	int32_t                                            FocalDistanceTargetIndex;                                   // 0x0060   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0064   (0x0004)  MISSED
	FSBPostProcessDepthOfFieldData                     DOFData;                                                    // 0x0068   (0x03B8)  
};

/// Class /Script/SB.SBShowDynamicPhysicBonesKey
/// Size: 0x0078 (120 bytes) (0x000058 - 0x000078) align n/a MaxSize: 0x0078
class USBShowDynamicPhysicBonesKey : public USBShowKey
{ 
public:
	bool                                               bPlayToMainCharacter;                                       // 0x0058   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x005C   (0x0004)  
	float                                              PhysicBlendWeight;                                          // 0x0060   (0x0004)  
	float                                              PhysicBlendInTime;                                          // 0x0064   (0x0004)  
	float                                              PhysicBlendOutTime;                                         // 0x0068   (0x0004)  
	float                                              PhysicDuration;                                             // 0x006C   (0x0004)  
	float                                              PhysicHitPower;                                             // 0x0070   (0x0004)  
	TEnumAsByte<ESBPhysicHitType>                      PhysicHitType;                                              // 0x0074   (0x0001)  
	bool                                               bSetAllBodiesBelowFromDynamicPhysBones;                     // 0x0075   (0x0001)  
	unsigned char                                      UnknownData03_7[0x2];                                       // 0x0076   (0x0002)  MISSED
};

/// Class /Script/SB.SBShowDynamicPhysicBStopKey
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align n/a MaxSize: 0x0068
class USBShowDynamicPhysicBStopKey : public USBShowKey
{ 
public:
	bool                                               bPlayToMainCharacter;                                       // 0x0058   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x005C   (0x0004)  
	float                                              PhysicBlendOutTime;                                         // 0x0060   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Struct /Script/SB.SBJsonEffectEndCondition
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSBJsonEffectEndCondition
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              CheckDelayTime;                                             // 0x0004   (0x0004)  
	FString                                            DeactiveShowPath;                                           // 0x0008   (0x0010)  
	FName                                              ChainEffectAlias;                                           // 0x0018   (0x0008)  
	TEnumAsByte<ESBConditionCheckType>                 IsGround;                                                   // 0x0020   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsJump;                                                     // 0x0021   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsSwimming;                                                 // 0x0022   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsSprint;                                                   // 0x0023   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsWallHit;                                                  // 0x0024   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsEventMoving;                                              // 0x0025   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsRunPathWay;                                               // 0x0026   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsAttachedLevelSeq;                                         // 0x0027   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 IsSlopeMoving;                                              // 0x0028   (0x0001)  
	TEnumAsByte<ESBActorStatType>                      CheckActorStat;                                             // 0x0029   (0x0001)  
	bool                                               CheckActorStatMaxRatePercent;                               // 0x002A   (0x0001)  
	TEnumAsByte<ESBCompare>                            CheckActorStatCompare;                                      // 0x002B   (0x0001)  
	float                                              CheckActorStatValue;                                        // 0x002C   (0x0004)  
	bool                                               bCheckConstructorTargetFilter;                              // 0x0030   (0x0001)  
	bool                                               bCheckEncroachmentTargetDead;                               // 0x0031   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x0032   (0x0002)  MISSED
	FName                                              ItemAlias;                                                  // 0x0034   (0x0008)  
	TEnumAsByte<ESBCompare>                            ItemCompare;                                                // 0x003C   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	int32_t                                            ItemCount;                                                  // 0x0040   (0x0004)  
	bool                                               ExecChainEffect;                                            // 0x0044   (0x0001)  
	unsigned char                                      UnknownData07_7[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Struct /Script/SB.SBEffectTableProperty
/// Size: 0x0588 (1416 bytes) (0x000010 - 0x000588) align n/a MaxSize: 0x0588
struct FSBEffectTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Flag;                                                       // 0x0014   (0x0008)  
	unsigned char                                      UnknownData38_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FName>                                      DispelFlagsArray;                                           // 0x0020   (0x0010)  
	TArray<FName>                                      Tags;                                                       // 0x0030   (0x0010)  
	FName                                              OverrideTribe;                                              // 0x0040   (0x0008)  
	FName                                              EffectGroupName;                                            // 0x0048   (0x0008)  
	TEnumAsByte<ESBEffectAttributeType>                EffectAttributeType;                                        // 0x0050   (0x0001)  
	TEnumAsByte<ESBEffectAttackType>                   EffectAttackType;                                           // 0x0051   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionDelay_Jump;                                        // 0x0052   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionDelay_Swimming;                                    // 0x0053   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionDelay_Down;                                        // 0x0054   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionDelay_Airborne;                                    // 0x0055   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionDelay_KnockBack;                                   // 0x0056   (0x0001)  
	unsigned char                                      UnknownData39_6[0x1];                                       // 0x0057   (0x0001)  MISSED
	float                                              ConditionActive_ChancePercent;                              // 0x0058   (0x0004)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionActive_Swimming;                                   // 0x005C   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionActive_UnderWater;                                 // 0x005D   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionActive_Airborne;                                   // 0x005E   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionActive_Jump;                                       // 0x005F   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionActive_BattleMode;                                 // 0x0060   (0x0001)  
	TEnumAsByte<ESBTargetActor>                        ConditionActive_TargetType;                                 // 0x0061   (0x0001)  
	TEnumAsByte<ESBActorState>                         ConditionActive_ActiveActorState1;                          // 0x0062   (0x0001)  
	TEnumAsByte<ESBActorState>                         ConditionActive_ActiveActorState2;                          // 0x0063   (0x0001)  
	TEnumAsByte<ESBActorState>                         ConditionActive_ActiveActorState3;                          // 0x0064   (0x0001)  
	TEnumAsByte<ESBActorState>                         ConditionActive_DeactiveActorState1;                        // 0x0065   (0x0001)  
	TEnumAsByte<ESBActorState>                         ConditionActive_DeactiveActorState2;                        // 0x0066   (0x0001)  
	TEnumAsByte<ESBActorState>                         ConditionActive_DeactiveActorState3;                        // 0x0067   (0x0001)  
	TEnumAsByte<ESBActorType>                          ConditionActive_ActorType1;                                 // 0x0068   (0x0001)  
	TEnumAsByte<ESBActorType>                          ConditionActive_ActorType2;                                 // 0x0069   (0x0001)  
	TEnumAsByte<ESBActorType>                          ConditionActive_ActorType3;                                 // 0x006A   (0x0001)  
	TEnumAsByte<ESBActorStatType>                      ConditionActive_ActorStat1;                                 // 0x006B   (0x0001)  
	TEnumAsByte<ESBActorStatCheckType>                 ConditionActive_ActorStatCheck1;                            // 0x006C   (0x0001)  
	unsigned char                                      UnknownData40_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	int32_t                                            ConditionActive_ActorStatCheckValue1;                       // 0x0070   (0x0004)  
	float                                              ConditionActive_MinAngleFromConstructor;                    // 0x0074   (0x0004)  
	float                                              ConditionActive_MaxAngleFromConstructor;                    // 0x0078   (0x0004)  
	unsigned char                                      UnknownData41_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FName>                                      ConditionActive_CheckEffectAliasArray;                      // 0x0080   (0x0010)  
	TArray<FName>                                      ConditionActive_CheckNoneEffectAliasArray;                  // 0x0090   (0x0010)  
	FName                                              ConditionActive_ConstructorActorAcquisitionAlias;           // 0x00A0   (0x0008)  
	FName                                              ConditionActive_DeactiveConstructorActorAcquisitionAlias;   // 0x00A8   (0x0008)  
	FName                                              ConditionActive_MainActorAcquisitionAlias;                  // 0x00B0   (0x0008)  
	FName                                              ConditionActive_DeactiveMainActorAcquisitionAlias;          // 0x00B8   (0x0008)  
	TArray<FName>                                      ConditionActive_ActiveTribe;                                // 0x00C0   (0x0010)  
	TArray<FName>                                      ConditionActive_DeactiveTribe;                              // 0x00D0   (0x0010)  
	TArray<FName>                                      ConditionActive_CheckCharacterRankArray;                    // 0x00E0   (0x0010)  
	TArray<FName>                                      ConditionActive_CheckNoneCharacterRankArray;                // 0x00F0   (0x0010)  
	TArray<FName>                                      ConditionActive_CheckCharacterFlagAliasArray;               // 0x0100   (0x0010)  
	TArray<FName>                                      ConditionActive_CheckNoneCharacterFlagAliasArray;           // 0x0110   (0x0010)  
	TArray<FName>                                      ConditionActive_CheckEffectSkillFlagArray;                  // 0x0120   (0x0010)  
	TArray<FName>                                      ConditionActive_ConstructorEffectActiveTag;                 // 0x0130   (0x0010)  
	TArray<FName>                                      ConditionActive_ConstructorEffectDeactiveTag;               // 0x0140   (0x0010)  
	TEnumAsByte<ESBSkillHitResult>                     ConditionActive_SkillHitResult;                             // 0x0150   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionActive_StoryMode;                                  // 0x0151   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionActive_EventMove;                                  // 0x0152   (0x0001)  
	unsigned char                                      UnknownData42_6[0x1];                                       // 0x0153   (0x0001)  MISSED
	FName                                              ConditionActive_ItemAlias;                                  // 0x0154   (0x0008)  
	TEnumAsByte<ESBCompare>                            ConditionActive_ItemCompare;                                // 0x015C   (0x0001)  
	unsigned char                                      UnknownData43_6[0x3];                                       // 0x015D   (0x0003)  MISSED
	int32_t                                            ConditionActive_ItemCount;                                  // 0x0160   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      StatType;                                                   // 0x0164   (0x0001)  
	unsigned char                                      UnknownData44_6[0x3];                                       // 0x0165   (0x0003)  MISSED
	FName                                              StatSecondCategory;                                         // 0x0168   (0x0008)  
	TEnumAsByte<ESBEffectCalculationType>              StatCalculationType;                                        // 0x0170   (0x0001)  
	TEnumAsByte<ESBEffectCalculationTarget>            StatCalculationTarget;                                      // 0x0171   (0x0001)  
	unsigned char                                      UnknownData45_6[0x2];                                       // 0x0172   (0x0002)  MISSED
	float                                              CalculationValue;                                           // 0x0174   (0x0004)  
	float                                              CalculationValueRandomMin;                                  // 0x0178   (0x0004)  
	float                                              CalculationValueRandomMax;                                  // 0x017C   (0x0004)  
	float                                              CalculationMultipleWhenBacksideHit;                         // 0x0180   (0x0004)  
	float                                              CalculationMultipleValue;                                   // 0x0184   (0x0004)  
	bool                                               bAdditionalCalculationWithShield;                           // 0x0188   (0x0001)  
	bool                                               bAdditionalCalculationWithCritical;                         // 0x0189   (0x0001)  
	bool                                               bAdditionalCalculationWithAttribute;                        // 0x018A   (0x0001)  
	bool                                               bAdditionalCalculationWithRange;                            // 0x018B   (0x0001)  
	bool                                               bAdditionalCalculationWithWeakPoint;                        // 0x018C   (0x0001)  
	bool                                               bDrainHpByAttack;                                           // 0x018D   (0x0001)  
	bool                                               bBetaGaugeEventByDamage;                                    // 0x018E   (0x0001)  
	bool                                               bTachyGaugeEventByDamage;                                   // 0x018F   (0x0001)  
	bool                                               bNotGainTachyGaugeByDamage;                                 // 0x0190   (0x0001)  
	bool                                               bNotVisibleHPBarWhenDamage;                                 // 0x0191   (0x0001)  
	bool                                               bStatRestore;                                               // 0x0192   (0x0001)  
	TEnumAsByte<ESBEffectOverlap>                      Overlap;                                                    // 0x0193   (0x0001)  
	int32_t                                            OverlapCount;                                               // 0x0194   (0x0004)  
	TEnumAsByte<ESBEffectLifeType>                     LifeType;                                                   // 0x0198   (0x0001)  
	unsigned char                                      UnknownData46_6[0x3];                                       // 0x0199   (0x0003)  MISSED
	float                                              LifeTime;                                                   // 0x019C   (0x0004)  
	float                                              StartDelayTime;                                             // 0x01A0   (0x0004)  
	float                                              LoopIntervalTime;                                           // 0x01A4   (0x0004)  
	TArray<float>                                      FixedTime;                                                  // 0x01A8   (0x0010)  
	FName                                              ActiveTargetFilterAlias;                                    // 0x01B8   (0x0008)  
	TArray<FName>                                      ActiveTargetEffectAliasArray;                               // 0x01C0   (0x0010)  
	FString                                            ActiveTargetResultShowPath;                                 // 0x01D0   (0x0010)  
	bool                                               bActiveTargetApplyConditionHitMe;                           // 0x01E0   (0x0001)  
	unsigned char                                      UnknownData47_6[0x3];                                       // 0x01E1   (0x0003)  MISSED
	FName                                              LoopTargetFilterAlias;                                      // 0x01E4   (0x0008)  
	unsigned char                                      UnknownData48_6[0x4];                                       // 0x01EC   (0x0004)  MISSED
	TArray<FName>                                      LoopTargetEffectAliasArray;                                 // 0x01F0   (0x0010)  
	FString                                            LoopTargetResultShowPath;                                   // 0x0200   (0x0010)  
	bool                                               bLoopTargetApplyConditionHitMe;                             // 0x0210   (0x0001)  
	unsigned char                                      UnknownData49_6[0x3];                                       // 0x0211   (0x0003)  MISSED
	FName                                              FixedTargetFilterAlias;                                     // 0x0214   (0x0008)  
	FName                                              DeactiveTargetFilterAlias;                                  // 0x021C   (0x0008)  
	unsigned char                                      UnknownData50_6[0x4];                                       // 0x0224   (0x0004)  MISSED
	TArray<FName>                                      DeactiveTargetEffectAliasArray;                             // 0x0228   (0x0010)  
	FString                                            DeactiveTargetResultShowPath;                               // 0x0238   (0x0010)  
	bool                                               bDeactiveTargetApplyConditionHitMe;                         // 0x0248   (0x0001)  
	bool                                               AvailableJustEvade;                                         // 0x0249   (0x0001)  
	bool                                               bKeepPlayedShowWhenDeactive;                                // 0x024A   (0x0001)  
	unsigned char                                      UnknownData51_6[0x5];                                       // 0x024B   (0x0005)  MISSED
	FString                                            ActiveShowPath;                                             // 0x0250   (0x0010)  
	FString                                            LoopShowPath;                                               // 0x0260   (0x0010)  
	FString                                            DeactiveShowPath;                                           // 0x0270   (0x0010)  
	FString                                            CollisionBPPath;                                            // 0x0280   (0x0010)  
	TArray<FName>                                      ChainEffectAliasArray;                                      // 0x0290   (0x0010)  
	TArray<FName>                                      TargetChainEffectAliasWhenZeroShieldArray;                  // 0x02A0   (0x0010)  
	FName                                              StanceAlias;                                                // 0x02B0   (0x0008)  
	TArray<FName>                                      ActiveAttackedCollisionGroupArray;                          // 0x02B8   (0x0010)  
	TEnumAsByte<ESBActorState>                         ActorState1;                                                // 0x02C8   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState2;                                                // 0x02C9   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState3;                                                // 0x02CA   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState4;                                                // 0x02CB   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState5;                                                // 0x02CC   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState6;                                                // 0x02CD   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState7;                                                // 0x02CE   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState8;                                                // 0x02CF   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState9;                                                // 0x02D0   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState10;                                               // 0x02D1   (0x0001)  
	unsigned char                                      UnknownData52_6[0x2];                                       // 0x02D2   (0x0002)  MISSED
	float                                              DelayActorState1;                                           // 0x02D4   (0x0004)  
	float                                              DelayActorState2;                                           // 0x02D8   (0x0004)  
	float                                              DelayActorState3;                                           // 0x02DC   (0x0004)  
	float                                              DelayActorState4;                                           // 0x02E0   (0x0004)  
	float                                              DelayActorState5;                                           // 0x02E4   (0x0004)  
	float                                              DelayActorState6;                                           // 0x02E8   (0x0004)  
	float                                              DelayActorState7;                                           // 0x02EC   (0x0004)  
	float                                              DelayActorState8;                                           // 0x02F0   (0x0004)  
	float                                              DelayActorState9;                                           // 0x02F4   (0x0004)  
	float                                              DelayActorState10;                                          // 0x02F8   (0x0004)  
	TEnumAsByte<ESBEffectAction>                       Action1;                                                    // 0x02FC   (0x0001)  
	unsigned char                                      UnknownData53_6[0x3];                                       // 0x02FD   (0x0003)  MISSED
	FString                                            ActionValue1;                                               // 0x0300   (0x0010)  
	TEnumAsByte<ESBEffectAction>                       Action2;                                                    // 0x0310   (0x0001)  
	unsigned char                                      UnknownData54_6[0x7];                                       // 0x0311   (0x0007)  MISSED
	FString                                            ActionValue2;                                               // 0x0318   (0x0010)  
	TEnumAsByte<ESBEffectAction>                       Action3;                                                    // 0x0328   (0x0001)  
	unsigned char                                      UnknownData55_6[0x7];                                       // 0x0329   (0x0007)  MISSED
	FString                                            ActionValue3;                                               // 0x0330   (0x0010)  
	TEnumAsByte<ESBEffectAction>                       Action4;                                                    // 0x0340   (0x0001)  
	unsigned char                                      UnknownData56_6[0x7];                                       // 0x0341   (0x0007)  MISSED
	FString                                            ActionValue4;                                               // 0x0348   (0x0010)  
	TEnumAsByte<ESBEffectAction>                       Action5;                                                    // 0x0358   (0x0001)  
	unsigned char                                      UnknownData57_6[0x7];                                       // 0x0359   (0x0007)  MISSED
	FString                                            ActionValue5;                                               // 0x0360   (0x0010)  
	FName                                              AttackedCollisionGroup;                                     // 0x0370   (0x0008)  
	TEnumAsByte<ESBAttackedCollisionGroupResultType>   AttackedCollisionGroupResultType;                           // 0x0378   (0x0001)  
	unsigned char                                      UnknownData58_6[0x7];                                       // 0x0379   (0x0007)  MISSED
	TArray<FName>                                      ImmuneEffectGroupArray;                                     // 0x0380   (0x0010)  
	FName                                              MoveAlias;                                                  // 0x0390   (0x0008)  
	bool                                               bUseGetupMoveAlias;                                         // 0x0398   (0x0001)  
	unsigned char                                      UnknownData59_6[0x7];                                       // 0x0399   (0x0007)  MISSED
	FString                                            ConditionEnd1;                                              // 0x03A0   (0x0010)  
	FString                                            ConditionEnd2;                                              // 0x03B0   (0x0010)  
	FString                                            ConditionEnd3;                                              // 0x03C0   (0x0010)  
	FString                                            ConditionEnd4;                                              // 0x03D0   (0x0010)  
	FString                                            ConditionEnd5;                                              // 0x03E0   (0x0010)  
	TEnumAsByte<ESBActorStance>                        ActiveStanceAnimType;                                       // 0x03F0   (0x0001)  
	bool                                               bEnableSave;                                                // 0x03F1   (0x0001)  
	bool                                               bPlayOnDead;                                                // 0x03F2   (0x0001)  
	bool                                               bStopOnRevival;                                             // 0x03F3   (0x0001)  
	bool                                               bWarpToSafeLocationOnDead;                                  // 0x03F4   (0x0001)  
	unsigned char                                      UnknownData60_6[0x3];                                       // 0x03F5   (0x0003)  MISSED
	FName                                              WarpToSafeLocationEffectAlias;                              // 0x03F8   (0x0008)  
	bool                                               bIgnoreTimeScale;                                           // 0x0400   (0x0001)  
	bool                                               bAggroToConstructorActor;                                   // 0x0401   (0x0001)  
	unsigned char                                      UnknownData61_6[0x2];                                       // 0x0402   (0x0002)  MISSED
	FName                                              TargetDeadType;                                             // 0x0404   (0x0008)  
	float                                              SoundDecibel;                                               // 0x040C   (0x0004)  
	float                                              SoundLife;                                                  // 0x0410   (0x0004)  
	TEnumAsByte<ESBEffectConditionChainType>           ConditionChainType;                                         // 0x0414   (0x0001)  
	unsigned char                                      UnknownData62_6[0x3];                                       // 0x0415   (0x0003)  MISSED
	TArray<FName>                                      ConditionChainSelfEffectAliasArray;                         // 0x0418   (0x0010)  
	TArray<FName>                                      ConditionChainTargetEffectAliasArray;                       // 0x0428   (0x0010)  
	bool                                               bUseCreateEffectPosition;                                   // 0x0438   (0x0001)  
	TEnumAsByte<ESBCreateEffectPosition>               CreateEffectStartPosition;                                  // 0x0439   (0x0001)  
	bool                                               bCreateEffectPositionOnGround;                              // 0x043A   (0x0001)  
	unsigned char                                      UnknownData63_6[0x1];                                       // 0x043B   (0x0001)  MISSED
	float                                              EffectPositionOnGroundCheckDistance;                        // 0x043C   (0x0004)  
	FVector                                            CreateEffectRelativeLocation;                               // 0x0440   (0x000C)  
	FVector                                            CreateEffectLocationRandomRange;                            // 0x044C   (0x000C)  
	TEnumAsByte<ESBCreateEffectAxis>                   CreateEffectRelativeAxisType;                               // 0x0458   (0x0001)  
	unsigned char                                      UnknownData64_6[0x3];                                       // 0x0459   (0x0003)  MISSED
	FRotator                                           CreateEffectRelativeRotation;                               // 0x045C   (0x000C)  
	FRotator                                           CreateEffectRotationRandomRange;                            // 0x0468   (0x000C)  
	bool                                               bShowEffectTimeUI;                                          // 0x0474   (0x0001)  
	unsigned char                                      UnknownData65_6[0x3];                                       // 0x0475   (0x0003)  MISSED
	FString                                            Loc_EffectTimeUIText;                                       // 0x0478   (0x0010)  
	TEnumAsByte<ESBEffectUIType>                       EffectUIType;                                               // 0x0488   (0x0001)  
	unsigned char                                      UnknownData66_6[0x3];                                       // 0x0489   (0x0003)  MISSED
	FName                                              ExpansionFromAcquisitionAlias1;                             // 0x048C   (0x0008)  
	TEnumAsByte<ESBEffectExpansionType>                ExpansionType1;                                             // 0x0494   (0x0001)  
	unsigned char                                      UnknownData67_6[0x3];                                       // 0x0495   (0x0003)  MISSED
	FString                                            ExpansionValue1;                                            // 0x0498   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias2;                             // 0x04A8   (0x0008)  
	TEnumAsByte<ESBEffectExpansionType>                ExpansionType2;                                             // 0x04B0   (0x0001)  
	unsigned char                                      UnknownData68_6[0x7];                                       // 0x04B1   (0x0007)  MISSED
	FString                                            ExpansionValue2;                                            // 0x04B8   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias3;                             // 0x04C8   (0x0008)  
	TEnumAsByte<ESBEffectExpansionType>                ExpansionType3;                                             // 0x04D0   (0x0001)  
	unsigned char                                      UnknownData69_6[0x7];                                       // 0x04D1   (0x0007)  MISSED
	FString                                            ExpansionValue3;                                            // 0x04D8   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias4;                             // 0x04E8   (0x0008)  
	TEnumAsByte<ESBEffectExpansionType>                ExpansionType4;                                             // 0x04F0   (0x0001)  
	unsigned char                                      UnknownData70_6[0x7];                                       // 0x04F1   (0x0007)  MISSED
	FString                                            ExpansionValue4;                                            // 0x04F8   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias5;                             // 0x0508   (0x0008)  
	TEnumAsByte<ESBEffectExpansionType>                ExpansionType5;                                             // 0x0510   (0x0001)  
	unsigned char                                      UnknownData71_6[0x7];                                       // 0x0511   (0x0007)  MISSED
	FString                                            ExpansionValue5;                                            // 0x0518   (0x0010)  
	FName                                              ShowKeyTag;                                                 // 0x0528   (0x0008)  
	bool                                               LoopElement;                                                // 0x0530   (0x0001)  
	unsigned char                                      UnknownData72_6[0x3];                                       // 0x0531   (0x0003)  MISSED
	FName                                              ElementTargetFilterAlias;                                   // 0x0534   (0x0008)  
	TEnumAsByte<ESBElementType>                        ElementType;                                                // 0x053C   (0x0001)  
	unsigned char                                      UnknownData73_6[0x3];                                       // 0x053D   (0x0003)  MISSED
	float                                              ElementAmount;                                              // 0x0540   (0x0004)  
	bool                                               bProjectileAttackPossible;                                  // 0x0544   (0x0001)  
	unsigned char                                      UnknownData74_6[0x3];                                       // 0x0545   (0x0003)  MISSED
	float                                              ProjectileAttackDamage;                                     // 0x0548   (0x0004)  
	FName                                              ActiveProjectileTargetFilterAlias;                          // 0x054C   (0x0008)  
	FName                                              ActiveProjectileAlias;                                      // 0x0554   (0x0008)  
	bool                                               bPauseWhenAttachLevelSequence;                              // 0x055C   (0x0001)  
	bool                                               bPauseWhenPlayerAttachLevelSequence;                        // 0x055D   (0x0001)  
	unsigned char                                      UnknownData75_6[0x2];                                       // 0x055E   (0x0002)  MISSED
	FName                                              ActionAssistTargetFilter;                                   // 0x0560   (0x0008)  
	float                                              ActionAssistCheckDelay;                                     // 0x0568   (0x0004)  
	float                                              ActionAssistActiveTime;                                     // 0x056C   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0570   (0x0008)  
	TArray<FSBJsonEffectEndCondition>                  EndConditionArray;                                          // 0x0578   (0x0010)  
};

/// Class /Script/SB.SBShowEffectKey
/// Size: 0x0610 (1552 bytes) (0x000058 - 0x000610) align n/a MaxSize: 0x0610
class USBShowEffectKey : public USBShowKey
{ 
public:
	FSBAliasEffect                                     EffectAlias;                                                // 0x0058   (0x0018)  
	FName                                              CreateEffectAlias;                                          // 0x0070   (0x0008)  
	TEnumAsByte<ESBShowEffectTableFieldType>           TableFieldType;                                             // 0x0078   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0079   (0x0007)  MISSED
	FSBEffectTableProperty                             EffectTableProperty;                                        // 0x0080   (0x0588)  
	float                                              OverrideCalculationValue;                                   // 0x0608   (0x0004)  
	bool                                               bVisibleTargetFilter;                                       // 0x060C   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x060D   (0x0003)  MISSED
};

/// Class /Script/SB.SBShowFlyKey
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align n/a MaxSize: 0x0060
class USBShowFlyKey : public USBShowKey
{ 
public:
	bool                                               bFlyOnOff;                                                  // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowForceFeedbackKey
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align n/a MaxSize: 0x0068
class USBShowForceFeedbackKey : public USBShowKey
{ 
public:
	class UForceFeedbackEffect*                        ForceFeedbackTemplate;                                      // 0x0058   (0x0008)  
	bool                                               bPlayerOnly;                                                // 0x0060   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowHitReactionKey
/// Size: 0x00C8 (200 bytes) (0x000058 - 0x0000C8) align n/a MaxSize: 0x00C8
class USBShowHitReactionKey : public USBShowKey
{ 
public:
	FString                                            FrontAnimResourcePath;                                      // 0x0058   (0x0010)  
	FString                                            BackAnimResourcePath;                                       // 0x0068   (0x0010)  
	FString                                            LeftAnimResourcePath;                                       // 0x0078   (0x0010)  
	FString                                            RightAnimResourcePath;                                      // 0x0088   (0x0010)  
	bool                                               bAdditiveAnim;                                              // 0x0098   (0x0001)  
	bool                                               bStopAtMove;                                                // 0x0099   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x009A   (0x0002)  MISSED
	float                                              PlayStartTime;                                              // 0x009C   (0x0004)  
	float                                              PlayEndTime;                                                // 0x00A0   (0x0004)  
	float                                              AnimPlayRate;                                               // 0x00A4   (0x0004)  
	float                                              BlendInTime;                                                // 0x00A8   (0x0004)  
	float                                              BlendOutTime;                                               // 0x00AC   (0x0004)  
	bool                                               bLoop;                                                      // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x00B1   (0x0003)  MISSED
	int32_t                                            LoopCount;                                                  // 0x00B4   (0x0004)  
	float                                              AnimWeight;                                                 // 0x00B8   (0x0004)  
	int32_t                                            CustomIndex;                                                // 0x00BC   (0x0004)  
	int32_t                                            Priority;                                                   // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x00C4   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowDataStep
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class USBShowDataStep : public UObject
{ 
public:
	float                                              StartTime;                                                  // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowLockOnTargetKey
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align n/a MaxSize: 0x0060
class USBShowLockOnTargetKey : public USBShowKey
{ 
public:
	int32_t                                            LockOnTargetIndex;                                          // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowMaterialChangeKey
/// Size: 0x00A0 (160 bytes) (0x000058 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBShowMaterialChangeKey : public USBShowKey
{ 
public:
	bool                                               bUseMaterialArray;                                          // 0x0058   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	TArray<class UMaterialInterface*>                  pMaterialArray;                                             // 0x0060   (0x0010)  
	class UMaterialInterface*                          pMaterial;                                                  // 0x0070   (0x0008)  
	TEnumAsByte<ESBSkelMeshSlot>                       ApplyMeshIndex;                                             // 0x0078   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0079   (0x0007)  MISSED
	TArray<TEnumAsByte<ESBSkelMeshSlot>>               ApplyMeshIndexArray;                                        // 0x0080   (0x0010)  
	int32_t                                            ApplyMaterialIndex;                                         // 0x0090   (0x0004)  
	int32_t                                            LoopCount;                                                  // 0x0094   (0x0004)  
	TEnumAsByte<ESBMovementTarget>                     Target;                                                     // 0x0098   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0099   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x009C   (0x0004)  
};

/// Class /Script/SB.SBShowMaterialCollectionParamKey
/// Size: 0x0210 (528 bytes) (0x000058 - 0x000210) align n/a MaxSize: 0x0210
class USBShowMaterialCollectionParamKey : public USBShowKey
{ 
public:
	class UMaterialParameterCollection*                MaterialParameterCollection;                                // 0x0058   (0x0008)  
	TEnumAsByte<ESBShowActorTarget>                    PlayerCharacterCheckTarget;                                 // 0x0060   (0x0001)  
	bool                                               bCurveNormalizedAge;                                        // 0x0061   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x0062   (0x0006)  MISSED
	FRuntimeFloatCurve                                 ParamValue1;                                                // 0x0068   (0x0088)  
	FRuntimeFloatCurve                                 ParamValue2;                                                // 0x00F0   (0x0088)  
	FRuntimeFloatCurve                                 ParamValue3;                                                // 0x0178   (0x0088)  
	FName                                              ParamValueName;                                             // 0x0200   (0x0008)  
	TEnumAsByte<ESBMaterialParamType>                  ParamType;                                                  // 0x0208   (0x0001)  
	bool                                               bRestoreParamWhenFinished;                                  // 0x0209   (0x0001)  
	unsigned char                                      UnknownData03_7[0x6];                                       // 0x020A   (0x0006)  MISSED
};

/// Class /Script/SB.SBShowMaterialParamKey
/// Size: 0x0238 (568 bytes) (0x000058 - 0x000238) align n/a MaxSize: 0x0238
class USBShowMaterialParamKey : public USBShowKey
{ 
public:
	bool                                               bCurveNormalizedAge;                                        // 0x0058   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	FRuntimeFloatCurve                                 ParamValue1;                                                // 0x0060   (0x0088)  
	FRuntimeFloatCurve                                 ParamValue2;                                                // 0x00E8   (0x0088)  
	FRuntimeFloatCurve                                 ParamValue3;                                                // 0x0170   (0x0088)  
	FName                                              ParamValueName;                                             // 0x01F8   (0x0008)  
	TEnumAsByte<ESBMaterialParamType>                  ParamType;                                                  // 0x0200   (0x0001)  
	bool                                               bUniqueRun;                                                 // 0x0201   (0x0001)  
	TEnumAsByte<ESBSkelMeshSlot>                       ApplyMeshIndex;                                             // 0x0202   (0x0001)  
	unsigned char                                      UnknownData05_6[0x5];                                       // 0x0203   (0x0005)  MISSED
	TArray<TEnumAsByte<ESBSkelMeshSlot>>               ApplyMeshIndexArray;                                        // 0x0208   (0x0010)  
	TArray<int32_t>                                    ApplyMaterialIndex;                                         // 0x0218   (0x0010)  
	int32_t                                            LoopCount;                                                  // 0x0228   (0x0004)  
	bool                                               bRestoreParamWhenFinished;                                  // 0x022C   (0x0001)  
	bool                                               bForceApplyKeyWhenStoped;                                   // 0x022D   (0x0001)  
	TEnumAsByte<ESBMovementTarget>                     Target;                                                     // 0x022E   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x022F   (0x0001)  MISSED
	int32_t                                            TargetIndex;                                                // 0x0230   (0x0004)  
	bool                                               bUseTargetEquipment;                                        // 0x0234   (0x0001)  
	TEnumAsByte<ESBEquipmentType>                      TargetEquipment;                                            // 0x0235   (0x0001)  
	unsigned char                                      UnknownData07_7[0x2];                                       // 0x0236   (0x0002)  MISSED
};

/// Class /Script/SB.SBShowMeshVertexShakeKey
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class USBShowMeshVertexShakeKey : public USBShowKey
{ 
public:
	float                                              ShakePower;                                                 // 0x0058   (0x0004)  
	float                                              ShakeTime;                                                  // 0x005C   (0x0004)  
	float                                              ShakeInterval;                                              // 0x0060   (0x0004)  
	float                                              ShakeRadius;                                                // 0x0064   (0x0004)  
	float                                              ShakeFallOff;                                               // 0x0068   (0x0004)  
	bool                                               bDrawDebugSphere;                                           // 0x006C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Class /Script/SB.SBShowMovementBoneKey
/// Size: 0x0080 (128 bytes) (0x000058 - 0x000080) align n/a MaxSize: 0x0080
class USBShowMovementBoneKey : public USBShowKey
{ 
public:
	FName                                              ModifyBoneName;                                             // 0x0058   (0x0008)  
	FName                                              TargetBoneName;                                             // 0x0060   (0x0008)  
	TEnumAsByte<ESBSkelMeshSlot>                       OwnerMeshSlot;                                              // 0x0068   (0x0001)  
	TEnumAsByte<ESBSkelMeshSlot>                       TargetMeshSlot;                                             // 0x0069   (0x0001)  
	TEnumAsByte<ESBMovementBoneInterpType>             InterpolationType;                                          // 0x006A   (0x0001)  
	TEnumAsByte<ESBMovementBoneCurveType>              CurveType;                                                  // 0x006B   (0x0001)  
	float                                              InterpolationTime;                                          // 0x006C   (0x0004)  
	float                                              KeepDuration;                                               // 0x0070   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	class USplineComponent*                            SplineComponent;                                            // 0x0078   (0x0008)  
};

/// Class /Script/SB.SBShowNiagaraKey
/// Size: 0x04A0 (1184 bytes) (0x000498 - 0x0004A0) align n/a MaxSize: 0x04A0
class USBShowNiagaraKey : public USBShowParticleBase
{ 
public:
	class UNiagaraSystem*                              NiagaraTemplate;                                            // 0x0498   (0x0008)  
};

/// Class /Script/SB.SBShowNotifyEventKey
/// Size: 0x0080 (128 bytes) (0x000058 - 0x000080) align n/a MaxSize: 0x0080
class USBShowNotifyEventKey : public USBShowKey
{ 
public:
	FName                                              StartEventTagName;                                          // 0x0058   (0x0008)  
	FName                                              StartEventCustomNameValue;                                  // 0x0060   (0x0008)  
	FName                                              EndEventTagName;                                            // 0x0068   (0x0008)  
	FName                                              EndEventCustomNameValue;                                    // 0x0070   (0x0008)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0078   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0079   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x007C   (0x0004)  
};

/// Struct /Script/SB.SBShowParticleDynamicInstanceParameter
/// Size: 0x01C0 (448 bytes) (0x000000 - 0x0001C0) align n/a MaxSize: 0x01C0
struct FSBShowParticleDynamicInstanceParameter
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	TEnumAsByte<ESBParticleDynamicInstanceParameterType> Type;                                                     // 0x0008   (0x0001)  
	bool                                               bCurveNormalizedAge;                                        // 0x0009   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x000A   (0x0006)  MISSED
	FRuntimeFloatCurve                                 Curve1;                                                     // 0x0010   (0x0088)  
	FRuntimeFloatCurve                                 Curve2;                                                     // 0x0098   (0x0088)  
	FRuntimeFloatCurve                                 Curve3;                                                     // 0x0120   (0x0088)  
	TEnumAsByte<ESBShowCharacterParticleTarget>        TargetActor;                                                // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x01A9   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x01AC   (0x0004)  
	bool                                               bUseTargetEquipment;                                        // 0x01B0   (0x0001)  
	TEnumAsByte<ESBEquipmentType>                      TargetEquipment;                                            // 0x01B1   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x01B2   (0x0002)  MISSED
	FName                                              SocketName;                                                 // 0x01B4   (0x0008)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x01BC   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowParticleKey
/// Size: 0x05C0 (1472 bytes) (0x000498 - 0x0005C0) align n/a MaxSize: 0x05C0
class USBShowParticleKey : public USBShowParticleBase
{ 
public:
	FSBNiagaraSystemWithOverrideParam                  NiagaraSystem;                                              // 0x0498   (0x0068)  
	FSoftObjectPath                                    ParticleSystemPath;                                         // 0x0500   (0x0018)  
	float                                              CustomTimeDilation;                                         // 0x0518   (0x0004)  
	bool                                               bCastShadow;                                                // 0x051C   (0x0001)  
	bool                                               bReceivesDecals;                                            // 0x051D   (0x0001)  
	unsigned char                                      UnknownData09_6[0x2];                                       // 0x051E   (0x0002)  MISSED
	int32_t                                            TranslucencySortPriority;                                   // 0x0520   (0x0004)  
	FName                                              StageParticleName;                                          // 0x0524   (0x0008)  
	bool                                               bUseCharacterParticleSet;                                   // 0x052C   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x052D   (0x0003)  MISSED
	FName                                              CharacterParticleSetKey;                                    // 0x0530   (0x0008)  
	bool                                               bParticleSetWithoutSound;                                   // 0x0538   (0x0001)  
	TEnumAsByte<ESBShowCharacterParticleTarget>        TargetForCharacterPaticle;                                  // 0x0539   (0x0001)  
	unsigned char                                      UnknownData11_6[0x2];                                       // 0x053A   (0x0002)  MISSED
	int32_t                                            TargetIndexForCharacterPaticle;                             // 0x053C   (0x0004)  
	TArray<FName>                                      ExtraParticleSocketName;                                    // 0x0540   (0x0010)  
	bool                                               bUsePhysParticle;                                           // 0x0550   (0x0001)  
	bool                                               bPlayPhysParticleOnHitLocation;                             // 0x0551   (0x0001)  
	bool                                               bPlayOnlyPhysParticleOnHit;                                 // 0x0552   (0x0001)  
	TEnumAsByte<ESBShowParticlePhysCheckDirectionType> PhysCheckDirectionType;                                     // 0x0553   (0x0001)  
	float                                              PhysTraceDistacne;                                          // 0x0554   (0x0004)  
	float                                              PhysTraceStartZSubLength;                                   // 0x0558   (0x0004)  
	unsigned char                                      UnknownData12_6[0x4];                                       // 0x055C   (0x0004)  MISSED
	class USBPMaterialParticleSet*                     PhysParticleSet;                                            // 0x0560   (0x0008)  
	bool                                               bDeactiveWhenAttachHidden;                                  // 0x0568   (0x0001)  
	bool                                               AffectFootstepSurfaceVolume;                                // 0x0569   (0x0001)  
	bool                                               PlayVibrationOnlyLocalPlayer;                               // 0x056A   (0x0001)  
	TEnumAsByte<ESBShowVibrationTarget>                TargetForVibration;                                         // 0x056B   (0x0001)  
	int32_t                                            TargetIndexForVibration;                                    // 0x056C   (0x0004)  
	ESBShowSoundOwnerTarget                            TargetForSoundOwner;                                        // 0x0570   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x0571   (0x0003)  MISSED
	int32_t                                            TargetIndexForSoundOwner;                                   // 0x0574   (0x0004)  
	bool                                               bSoundOnHitActorWhenFailedToFindHitLocation;                // 0x0578   (0x0001)  
	bool                                               bOnGround;                                                  // 0x0579   (0x0001)  
	unsigned char                                      UnknownData14_6[0x2];                                       // 0x057A   (0x0002)  MISSED
	float                                              OnGroundTraceDistacne;                                      // 0x057C   (0x0004)  
	float                                              OnGroundTraceStartZSubLength;                               // 0x0580   (0x0004)  
	float                                              OnGroundZOffset;                                            // 0x0584   (0x0004)  
	TArray<FParticleSysParam>                          InstanceParameters;                                         // 0x0588   (0x0010)  
	bool                                               bUseActorParameter;                                         // 0x0598   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0599   (0x0003)  MISSED
	FName                                              ActorParameterName;                                         // 0x059C   (0x0008)  
	unsigned char                                      UnknownData16_6[0x4];                                       // 0x05A4   (0x0004)  MISSED
	TArray<FSBShowParticleDynamicInstanceParameter>    DynamicInstanceParameters;                                  // 0x05A8   (0x0010)  
	uint32_t                                           FrameDelay;                                                 // 0x05B8   (0x0004)  
	ESBPhotoModeShowHiddenFlag                         PhotoModeShowHiddenFlag;                                    // 0x05BC   (0x0001)  
	unsigned char                                      UnknownData17_7[0x3];                                       // 0x05BD   (0x0003)  MISSED
};

/// Class /Script/SB.SBShowPlayableActor
/// Size: 0x0358 (856 bytes) (0x0002C8 - 0x000358) align n/a MaxSize: 0x0358
class ASBShowPlayableActor : public AActor
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x02C8   (0x0008)  MISSED
	class USceneComponent*                             Root;                                                       // 0x02D0   (0x0008)  
	class USBSkeletalMeshComponent*                    MeshBody;                                                   // 0x02D8   (0x0008)  
	FName                                              BodyCustomAnimNodeName;                                     // 0x02E0   (0x0008)  
	unsigned char                                      UnknownData03_7[0x70];                                      // 0x02E8   (0x0070)  MISSED

	/// Functions
	// Function /Script/SB.SBShowPlayableActor.GetCurrentCustomAnimAlpha
	constexpr static const FunctionPointer<ASBShowPlayableActor, float> GetCurrentCustomAnimAlpha = { 0x27e5be0, 0 }; 
};

/// Class /Script/SB.SBShowPlayShowKey
/// Size: 0x0088 (136 bytes) (0x000058 - 0x000088) align n/a MaxSize: 0x0088
class USBShowPlayShowKey : public USBShowKey
{ 
public:
	class USBShowData*                                 ShowData;                                                   // 0x0058   (0x0008)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0060   (0x0001)  
	bool                                               bAbsoluteResourcePath;                                      // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0062   (0x0006)  MISSED
	FString                                            ShowResourcePath;                                           // 0x0068   (0x0010)  
	FString                                            ShowResourcePathWhenFailedRelativeShow;                     // 0x0078   (0x0010)  
};

/// Class /Script/SB.SBShowPlayTheaterKey
/// Size: 0x0078 (120 bytes) (0x000058 - 0x000078) align n/a MaxSize: 0x0078
class USBShowPlayTheaterKey : public USBShowKey
{ 
public:
	class USBTheaterData*                              TheaterData;                                                // 0x0058   (0x0008)  
	FString                                            TheaterAssetPath;                                           // 0x0060   (0x0010)  
	bool                                               bPlayerOnly;                                                // 0x0070   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowPoseSnapshotKey
/// Size: 0x00F0 (240 bytes) (0x000058 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBShowPoseSnapshotKey : public USBShowKey
{ 
public:
	bool                                               bPoseSnapshot;                                              // 0x0058   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              InitPoseSnapBlendWeight;                                    // 0x005C   (0x0004)  
	bool                                               bUseCurveBlendWeight;                                       // 0x0060   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0061   (0x0007)  MISSED
	FRuntimeFloatCurve                                 PoseSnapBlendWeightCurve;                                   // 0x0068   (0x0088)  
};

/// Class /Script/SB.SBShowPostProcessKey
/// Size: 0x0610 (1552 bytes) (0x000058 - 0x000610) align n/a MaxSize: 0x0610
class USBShowPostProcessKey : public USBShowKey
{ 
public:
	float                                              BlendInTime;                                                // 0x0058   (0x0004)  
	float                                              BlendOutTime;                                               // 0x005C   (0x0004)  
	bool                                               bInfinite;                                                  // 0x0060   (0x0001)  
	bool                                               bPlayToMainCharacter;                                       // 0x0061   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0062   (0x0002)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x0064   (0x0004)  
	bool                                               bPlayerCharacterOnly;                                       // 0x0068   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0069   (0x0007)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0070   (0x05A0)  
};

/// Struct /Script/SB.SBShowMaterialParamCurve
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align n/a MaxSize: 0x0098
struct FSBShowMaterialParamCurve
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	bool                                               bCurveNormalizedAge;                                        // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	FRuntimeFloatCurve                                 Curve;                                                      // 0x0010   (0x0088)  
};

/// Class /Script/SB.SBShowPostProcessMaterialKey
/// Size: 0x0120 (288 bytes) (0x000058 - 0x000120) align n/a MaxSize: 0x0120
class USBShowPostProcessMaterialKey : public USBShowKey
{ 
public:
	bool                                               bPlayToMainCharacter;                                       // 0x0058   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x005C   (0x0004)  
	bool                                               bPlayerCharacterOnly;                                       // 0x0060   (0x0001)  
	bool                                               bUseCustomCamera;                                           // 0x0061   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x0062   (0x0002)  MISSED
	FName                                              CustomMaterialTag;                                          // 0x0064   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	FWeightedBlendables                                PostProcessMaterials;                                       // 0x0070   (0x0010)  
	bool                                               bBlendWeightCurveNormalizedAge;                             // 0x0080   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0081   (0x0007)  MISSED
	FRuntimeFloatCurve                                 BlendWeightCurve;                                           // 0x0088   (0x0088)  
	TArray<FSBShowMaterialParamCurve>                  MaterialParamCurves;                                        // 0x0110   (0x0010)  
};

/// Class /Script/SB.SBShowProjectileKey
/// Size: 0x01B8 (440 bytes) (0x000058 - 0x0001B8) align n/a MaxSize: 0x01B8
class USBShowProjectileKey : public USBShowKey
{ 
public:
	float                                              EndWaitTime;                                                // 0x0058   (0x0004)  
	bool                                               bTableProjectileKey;                                        // 0x005C   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x005D   (0x0003)  MISSED
	FName                                              TableAlias;                                                 // 0x0060   (0x0008)  
	float                                              ShotTime;                                                   // 0x0068   (0x0004)  
	bool                                               bWithTarget;                                                // 0x006C   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	FString                                            ProjectileResourcePath;                                     // 0x0070   (0x0010)  
	TEnumAsByte<ESBProjectileTarget>                   StartTarget;                                                // 0x0080   (0x0001)  
	TEnumAsByte<ESBMovementTargetUpdate>               StartTargetUpdate;                                          // 0x0081   (0x0001)  
	TEnumAsByte<ESBTargetLocationTransformType>        StartTargetTransformType;                                   // 0x0082   (0x0001)  
	unsigned char                                      UnknownData09_6[0x1];                                       // 0x0083   (0x0001)  MISSED
	FName                                              StartTargetTransformName;                                   // 0x0084   (0x0008)  
	bool                                               bStartTargetTransformRotation;                              // 0x008C   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	FVector                                            StartTargetRelativeLocation;                                // 0x0090   (0x000C)  
	FRotator                                           StartTargetRelativeRotation;                                // 0x009C   (0x000C)  
	TEnumAsByte<ESBMovementTargetRelativeAxisType>     StartTargetRelativeAxisType;                                // 0x00A8   (0x0001)  
	TEnumAsByte<ESBProjectileTarget>                   DestTarget;                                                 // 0x00A9   (0x0001)  
	TEnumAsByte<ESBMovementTargetUpdate>               DestTargetUpdate;                                           // 0x00AA   (0x0001)  
	TEnumAsByte<ESBTargetLocationTransformType>        DestTargetTransformType;                                    // 0x00AB   (0x0001)  
	FName                                              DestTargetTransformName;                                    // 0x00AC   (0x0008)  
	FVector                                            DestTargetRandomRange;                                      // 0x00B4   (0x000C)  
	FVector                                            DestTargetRelativeLocation;                                 // 0x00C0   (0x000C)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	class UCurveVector*                                DestTargetRelativeLocationCurve;                            // 0x00D0   (0x0008)  
	class UCurveFloat*                                 DestTargetRelativeLocationScaleCurve;                       // 0x00D8   (0x0008)  
	TEnumAsByte<ESBMovementTargetRelativeAxisType>     DestTargetRelativeAxisType;                                 // 0x00E0   (0x0001)  
	bool                                               bDestTargetLocationToGround;                                // 0x00E1   (0x0001)  
	TEnumAsByte<ESBProjectileMovementType>             MovementType;                                               // 0x00E2   (0x0001)  
	unsigned char                                      UnknownData12_6[0x5];                                       // 0x00E3   (0x0005)  MISSED
	FSBProjectileUpdateInfo                            UpdateInfo;                                                 // 0x00E8   (0x00C8)  
	bool                                               bPrintLog;                                                  // 0x01B0   (0x0001)  
	unsigned char                                      UnknownData13_7[0x7];                                       // 0x01B1   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowRadialForceKey
/// Size: 0x00B0 (176 bytes) (0x000058 - 0x0000B0) align n/a MaxSize: 0x00B0
class USBShowRadialForceKey : public USBShowKey
{ 
public:
	bool                                               bUseRegisterActor;                                          // 0x0058   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	FName                                              RegisterKey;                                                // 0x005C   (0x0008)  
	TEnumAsByte<ESBShowActorTarget>                    LocationBaseTarget;                                         // 0x0064   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x0068   (0x0004)  
	FVector                                            RelativeLocation;                                           // 0x006C   (0x000C)  
	float                                              Radius;                                                     // 0x0078   (0x0004)  
	TEnumAsByte<ERadialImpulseFalloff>                 Falloff;                                                    // 0x007C   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypesToAffect;                                        // 0x0080   (0x0010)  
	bool                                               bFireImpulse;                                               // 0x0090   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	float                                              ImpulseStrength;                                            // 0x0094   (0x0004)  
	bool                                               bImpulseVelChange : 1;                                      // 0x0098:0 (0x0001)  
	bool                                               bIgnoreOwningActor : 1;                                     // 0x0098:1 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0099   (0x0003)  MISSED
	float                                              ForceStrength;                                              // 0x009C   (0x0004)  
	float                                              DestructibleDamage;                                         // 0x00A0   (0x0004)  
	float                                              DestructibleCheckRadius;                                    // 0x00A4   (0x0004)  
	bool                                               bIncludeZoneEventActor;                                     // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData11_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowRagdollKey
/// Size: 0x01F8 (504 bytes) (0x000058 - 0x0001F8) align n/a MaxSize: 0x01F8
class USBShowRagdollKey : public USBShowKey
{ 
public:
	FName                                              BoneName;                                                   // 0x0058   (0x0008)  
	TEnumAsByte<ESBRagdollLockLocationType>            LockBodyLocationType;                                       // 0x0060   (0x0001)  
	bool                                               bStopWhenZeroVelocity;                                      // 0x0061   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x0062   (0x0002)  MISSED
	float                                              FadeInTime;                                                 // 0x0064   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0068   (0x0004)  
	bool                                               bDisableGravity;                                            // 0x006C   (0x0001)  
	bool                                               bUseMassScale;                                              // 0x006D   (0x0001)  
	bool                                               bEnablePhysicsBodyCollision;                                // 0x006E   (0x0001)  
	unsigned char                                      UnknownData11_6[0x1];                                       // 0x006F   (0x0001)  MISSED
	FName                                              CapsuleComponentFollowingSocketName;                        // 0x0070   (0x0008)  
	FRuntimeFloatCurve                                 MassScaleCurve;                                             // 0x0078   (0x0088)  
	float                                              PoseSnapshotDelayTime;                                      // 0x0100   (0x0004)  
	bool                                               bUseImpulse;                                                // 0x0104   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0105   (0x0003)  MISSED
	float                                              ImpulseDelayTime;                                           // 0x0108   (0x0004)  
	bool                                               bOverrideHitBone;                                           // 0x010C   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x010D   (0x0003)  MISSED
	FName                                              ImpulseBoneName;                                            // 0x0110   (0x0008)  
	float                                              ImpulsePower;                                               // 0x0118   (0x0004)  
	TEnumAsByte<ESBShowRagdollDirectionType>           DirectionType;                                              // 0x011C   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x011D   (0x0003)  MISSED
	float                                              AdditiveDirectionPercent;                                   // 0x0120   (0x0004)  
	bool                                               bCheckAdditiveDirectionNearlyParallel;                      // 0x0124   (0x0001)  
	TEnumAsByte<ESBShowRagdollDirectionType>           AdditiveDirectionType;                                      // 0x0125   (0x0001)  
	bool                                               bAdditiveDirectionWhenNotStatic;                            // 0x0126   (0x0001)  
	unsigned char                                      UnknownData15_6[0x1];                                       // 0x0127   (0x0001)  MISSED
	FVector                                            ImpulseDirection;                                           // 0x0128   (0x000C)  
	float                                              ImpulseLimitVelocity;                                       // 0x0134   (0x0004)  
	bool                                               bUseForce;                                                  // 0x0138   (0x0001)  
	unsigned char                                      UnknownData16_6[0x7];                                       // 0x0139   (0x0007)  MISSED
	TArray<FName>                                      ForceBoneArray;                                             // 0x0140   (0x0010)  
	FVector                                            Force;                                                      // 0x0150   (0x000C)  
	unsigned char                                      UnknownData17_6[0x4];                                       // 0x015C   (0x0004)  MISSED
	FRuntimeFloatCurve                                 ForceScaleCurve;                                            // 0x0160   (0x0088)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x01E8   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x01E9   (0x0003)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x01EC   (0x0004)  
	bool                                               bIgnorePlayer;                                              // 0x01F0   (0x0001)  
	unsigned char                                      UnknownData19_7[0x7];                                       // 0x01F1   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowRootMotionKey
/// Size: 0x0088 (136 bytes) (0x000058 - 0x000088) align n/a MaxSize: 0x0088
class USBShowRootMotionKey : public USBShowKey
{ 
public:
	FString                                            RootMotionPath;                                             // 0x0058   (0x0010)  
	int32_t                                            Priority;                                                   // 0x0068   (0x0004)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x006C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x0070   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	class UCurveVector*                                TranslationCurve;                                           // 0x0078   (0x0008)  
	class UCurveVector*                                RotationCurve;                                              // 0x0080   (0x0008)  
};

/// Struct /Script/SB.SBAliasCharacterMove
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasCharacterMove : FSBAlias
{ 
};

/// Struct /Script/SB.SBCharacterMoveTableProperty
/// Size: 0x0130 (304 bytes) (0x000010 - 0x000130) align n/a MaxSize: 0x0130
struct FSBCharacterMoveTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	int32_t                                            Priority;                                                   // 0x0014   (0x0004)  
	FName                                              TargetFilterAlias;                                          // 0x0018   (0x0008)  
	bool                                               bCheckCharacterWeight;                                      // 0x0020   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	FName                                              RootMotionDataPath;                                         // 0x0024   (0x0008)  
	float                                              RootMotionTimeScale;                                        // 0x002C   (0x0004)  
	float                                              RootMotionStartTime;                                        // 0x0030   (0x0004)  
	float                                              RootMotionEndTime;                                          // 0x0034   (0x0004)  
	bool                                               bRootMotionApplyPositionOnly;                               // 0x0038   (0x0001)  
	bool                                               bRootMotionRealtimeLocalAxis;                               // 0x0039   (0x0001)  
	TEnumAsByte<ESBMoveTransformType>                  MoveType;                                                   // 0x003A   (0x0001)  
	TEnumAsByte<ESBMovePositionType>                   PositionType;                                               // 0x003B   (0x0001)  
	TEnumAsByte<ESBInterpType>                         PositionInterpType;                                         // 0x003C   (0x0001)  
	bool                                               bMoveToSafeLocation;                                        // 0x003D   (0x0001)  
	unsigned char                                      UnknownData13_6[0x2];                                       // 0x003E   (0x0002)  MISSED
	FName                                              PositionInterpCurveDataPath;                                // 0x0040   (0x0008)  
	bool                                               PositionInterpCurveRealTime;                                // 0x0048   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FName                                              StaticMoveZVAlueCurveDataPath;                              // 0x004C   (0x0008)  
	bool                                               StaticMoveZVAlueCurveRealTime;                              // 0x0054   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	FName                                              MoveOffsetCurveDataPath;                                    // 0x0058   (0x0008)  
	TEnumAsByte<ESBMoveDirectionAxis>                  PositionDirectionAxis;                                      // 0x0060   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	FName                                              LinkSocketName;                                             // 0x0064   (0x0008)  
	TEnumAsByte<ESBMoveDefaultInputDirection>          DefaultInputDirection;                                      // 0x006C   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	float                                              StartDelayTime;                                             // 0x0070   (0x0004)  
	int32_t                                            FrameDelayCount;                                            // 0x0074   (0x0004)  
	float                                              VelocityBlendInTime;                                        // 0x0078   (0x0004)  
	float                                              VelocityBlendOutTime;                                       // 0x007C   (0x0004)  
	float                                              MoveStartTime;                                              // 0x0080   (0x0004)  
	float                                              MoveEndTime;                                                // 0x0084   (0x0004)  
	float                                              Time;                                                       // 0x0088   (0x0004)  
	float                                              MoveTimePerDistance;                                        // 0x008C   (0x0004)  
	float                                              MoveAxisYawOffset;                                          // 0x0090   (0x0004)  
	float                                              ForwardValue;                                               // 0x0094   (0x0004)  
	float                                              RightValue;                                                 // 0x0098   (0x0004)  
	float                                              UpValue;                                                    // 0x009C   (0x0004)  
	float                                              ForwardValueWhenNoTarget;                                   // 0x00A0   (0x0004)  
	float                                              RightValueWhenNoTarget;                                     // 0x00A4   (0x0004)  
	float                                              UpValueWhenNoTarget;                                        // 0x00A8   (0x0004)  
	float                                              KeepFallingTime;                                            // 0x00AC   (0x0004)  
	float                                              LimitApproachDistance;                                      // 0x00B0   (0x0004)  
	float                                              RotationStartTime;                                          // 0x00B4   (0x0004)  
	float                                              RotationEndTime;                                            // 0x00B8   (0x0004)  
	TEnumAsByte<ESBMoveRotationType>                   RotationType;                                               // 0x00BC   (0x0001)  
	TEnumAsByte<ESBMoveRotationDirectionType>          RotationDirectionType;                                      // 0x00BD   (0x0001)  
	unsigned char                                      UnknownData18_6[0x2];                                       // 0x00BE   (0x0002)  MISSED
	FName                                              RotationInterpCurveDataPath;                                // 0x00C0   (0x0008)  
	float                                              RotationYawValue;                                           // 0x00C8   (0x0004)  
	bool                                               bIndependentRotation;                                       // 0x00CC   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x00CD   (0x0003)  MISSED
	FName                                              CollisionCheckBoneNameWhenLinkFrom;                         // 0x00D0   (0x0008)  
	float                                              DistanceToIgnoreRotationLimitAngle;                         // 0x00D8   (0x0004)  
	float                                              RotationLeftLimitAngle;                                     // 0x00DC   (0x0004)  
	float                                              RotationRightLimitAngle;                                    // 0x00E0   (0x0004)  
	bool                                               bCheckFinalRotationLimitAngle;                              // 0x00E4   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x00E5   (0x0003)  MISSED
	float                                              YawValue;                                                   // 0x00E8   (0x0004)  
	bool                                               bIgnoreCollision;                                           // 0x00EC   (0x0001)  
	bool                                               bMoveIgnoreTargetCharacter;                                 // 0x00ED   (0x0001)  
	bool                                               bIgnoreWorldStaticWhenLinkTo;                               // 0x00EE   (0x0001)  
	bool                                               bSaveTransform;                                             // 0x00EF   (0x0001)  
	bool                                               bStopWhenCollision;                                         // 0x00F0   (0x0001)  
	bool                                               bStopWhenWorldStaticCollision;                              // 0x00F1   (0x0001)  
	bool                                               bStopWhenClif;                                              // 0x00F2   (0x0001)  
	bool                                               bStopWhenOnWater;                                           // 0x00F3   (0x0001)  
	bool                                               bStopWhenBlockingFall;                                      // 0x00F4   (0x0001)  
	bool                                               bCheckRuleMoveBlockArea;                                    // 0x00F5   (0x0001)  
	TEnumAsByte<ESBRuleMoveBlockAreaTarget>            RuleMoveBlockAreaApplyToTarget;                             // 0x00F6   (0x0001)  
	bool                                               bStopWhenInvalidTarget;                                     // 0x00F7   (0x0001)  
	bool                                               bStopWhenInvalidNavigation;                                 // 0x00F8   (0x0001)  
	bool                                               bAllowWhenEventMove;                                        // 0x00F9   (0x0001)  
	bool                                               bWallHit;                                                   // 0x00FA   (0x0001)  
	unsigned char                                      UnknownData21_6[0x1];                                       // 0x00FB   (0x0001)  MISSED
	float                                              WallHitStartTime;                                           // 0x00FC   (0x0004)  
	float                                              WallHitEndTime;                                             // 0x0100   (0x0004)  
	bool                                               bTargetMovedBack;                                           // 0x0104   (0x0001)  
	bool                                               bOnGround;                                                  // 0x0105   (0x0001)  
	bool                                               bZeroVelocityWhenEnd;                                       // 0x0106   (0x0001)  
	bool                                               bZeroGravity;                                               // 0x0107   (0x0001)  
	bool                                               bOverrideAcceleration;                                      // 0x0108   (0x0001)  
	bool                                               bAllowInvalidNavigation;                                    // 0x0109   (0x0001)  
	unsigned char                                      UnknownData22_6[0x2];                                       // 0x010A   (0x0002)  MISSED
	float                                              LimitJumpHeight;                                            // 0x010C   (0x0004)  
	bool                                               bWithDeactiveLinkToWhenLinkFrom;                            // 0x0110   (0x0001)  
	bool                                               bStartLocationOnGround;                                     // 0x0111   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionEnd_UnderWater;                                    // 0x0112   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionEnd_Swimming;                                      // 0x0113   (0x0001)  
	unsigned char                                      UnknownData23_6[0x4];                                       // 0x0114   (0x0004)  MISSED
	TArray<FName>                                      PathWay;                                                    // 0x0118   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0128   (0x0008)  
};

/// Class /Script/SB.SBShowRuleMoveKey
/// Size: 0x01B0 (432 bytes) (0x000058 - 0x0001B0) align n/a MaxSize: 0x01B0
class USBShowRuleMoveKey : public USBShowKey
{ 
public:
	FSBAliasCharacterMove                              TableAlias;                                                 // 0x0058   (0x0018)  
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0070   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0071   (0x0007)  MISSED
	FSBCharacterMoveTableProperty                      MoveTableProperty;                                          // 0x0078   (0x0130)  
	bool                                               bSelfMove;                                                  // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x01A9   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowSetAIDecoratorKey
/// Size: 0x0098 (152 bytes) (0x000058 - 0x000098) align n/a MaxSize: 0x0098
class USBShowSetAIDecoratorKey : public USBShowKey
{ 
public:
	TEnumAsByte<ESBBlackboardVarType>                  SetVarType;                                                 // 0x0058   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	FName                                              VarKey;                                                     // 0x005C   (0x0008)  
	float                                              FloatVar;                                                   // 0x0064   (0x0004)  
	int32_t                                            IntVar;                                                     // 0x0068   (0x0004)  
	bool                                               BoolVar;                                                    // 0x006C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	FVector                                            VectorVar;                                                  // 0x0070   (0x000C)  
	bool                                               bSetWhenEndKey;                                             // 0x007C   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	float                                              SetEnd_FloatVar;                                            // 0x0080   (0x0004)  
	int32_t                                            SetEnd_IntVar;                                              // 0x0084   (0x0004)  
	bool                                               SetEnd_BoolVar;                                             // 0x0088   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	FVector                                            SetEnd_VectorVar;                                           // 0x008C   (0x000C)  
};

/// Struct /Script/SB.SBAliasSkillResult
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasSkillResult : FSBAlias
{ 
};

/// Struct /Script/SB.SBSkillResultTableProperty
/// Size: 0x04B0 (1200 bytes) (0x000010 - 0x0004B0) align n/a MaxSize: 0x04B0
struct FSBSkillResultTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            ResultSelfCommonEffect;                                     // 0x0018   (0x0010)  
	FString                                            ResultTargetCommonEffect;                                   // 0x0028   (0x0010)  
	FString                                            HitLevelResultTargetCommonEffect;                           // 0x0038   (0x0010)  
	FString                                            ResultSelfCommonShowPath;                                   // 0x0048   (0x0010)  
	FString                                            ResultTargetCommonShowPath;                                 // 0x0058   (0x0010)  
	FName                                              ResultTargetCommonMoveAlias;                                // 0x0068   (0x0008)  
	FName                                              HitLevelResultTargetCommonMoveAlias;                        // 0x0070   (0x0008)  
	FString                                            ResultSelfDownEffect;                                       // 0x0078   (0x0010)  
	FString                                            ResultTargetDownEffect;                                     // 0x0088   (0x0010)  
	FString                                            HitLevelResultTargetDownEffect;                             // 0x0098   (0x0010)  
	FString                                            ResultSelfDownShowPath;                                     // 0x00A8   (0x0010)  
	FString                                            ResultTargetDownShowPath;                                   // 0x00B8   (0x0010)  
	FName                                              ResultTargetDownMoveAlias;                                  // 0x00C8   (0x0008)  
	FName                                              HitLevelResultTargetDownMoveAlias;                          // 0x00D0   (0x0008)  
	FString                                            ResultSelfGroggyEffect;                                     // 0x00D8   (0x0010)  
	FString                                            ResultTargetGroggyEffect;                                   // 0x00E8   (0x0010)  
	FString                                            HitLevelResultTargetGroggyEffect;                           // 0x00F8   (0x0010)  
	FString                                            ResultSelfGroggyShowPath;                                   // 0x0108   (0x0010)  
	FString                                            ResultTargetGroggyShowPath;                                 // 0x0118   (0x0010)  
	FName                                              ResultTargetGroggyMoveAlias;                                // 0x0128   (0x0008)  
	FName                                              HitLevelResultTargetGroggyMoveAlias;                        // 0x0130   (0x0008)  
	FString                                            ResultSelfAirborneEffect;                                   // 0x0138   (0x0010)  
	FString                                            ResultTargetAirborneEffect;                                 // 0x0148   (0x0010)  
	FString                                            HitLevelResultTargetAirborneEffect;                         // 0x0158   (0x0010)  
	FString                                            ResultSelfAirborneShowPath;                                 // 0x0168   (0x0010)  
	FString                                            ResultTargetAirborneShowPath;                               // 0x0178   (0x0010)  
	FName                                              ResultTargetAirborneMoveAlias;                              // 0x0188   (0x0008)  
	FName                                              HitLevelResultTargetAirborneMoveAlias;                      // 0x0190   (0x0008)  
	FString                                            ResultSelfAirEffect;                                        // 0x0198   (0x0010)  
	FString                                            ResultTargetAirEffect;                                      // 0x01A8   (0x0010)  
	FString                                            HitLevelResultTargetAirEffect;                              // 0x01B8   (0x0010)  
	FString                                            ResultSelfAirShowPath;                                      // 0x01C8   (0x0010)  
	FString                                            ResultTargetAirShowPath;                                    // 0x01D8   (0x0010)  
	FName                                              ResultTargetAirMoveAlias;                                   // 0x01E8   (0x0008)  
	FName                                              HitLevelResultTargetAirMoveAlias;                           // 0x01F0   (0x0008)  
	FString                                            ResultSelfSwimmingEffect;                                   // 0x01F8   (0x0010)  
	FString                                            ResultTargetSwimmingEffect;                                 // 0x0208   (0x0010)  
	FString                                            HitLevelResultTargetSwimmingEffect;                         // 0x0218   (0x0010)  
	FString                                            ResultSelfSwimmingShowPath;                                 // 0x0228   (0x0010)  
	FString                                            ResultTargetSwimmingShowPath;                               // 0x0238   (0x0010)  
	FName                                              ResultTargetSwimmingMoveAlias;                              // 0x0248   (0x0008)  
	FName                                              HitLevelResultTargetSwimmingMoveAlias;                      // 0x0250   (0x0008)  
	FString                                            ResultSelfCriticalEffect;                                   // 0x0258   (0x0010)  
	FString                                            ResultTargetCriticalEffect;                                 // 0x0268   (0x0010)  
	FString                                            ResultSelfCriticalShowPath;                                 // 0x0278   (0x0010)  
	FString                                            ResultTargetCriticalShowPath;                               // 0x0288   (0x0010)  
	FString                                            ResultSelfWeakpointHitEffect;                               // 0x0298   (0x0010)  
	FString                                            ResultTargetWeakpointHitEffect;                             // 0x02A8   (0x0010)  
	FString                                            ResultSelfEventMovingEffect;                                // 0x02B8   (0x0010)  
	FString                                            ResultTargetEventMovingEffect;                              // 0x02C8   (0x0010)  
	FString                                            HitLevelResultTargetEventMovingEffect;                      // 0x02D8   (0x0010)  
	FString                                            ResultSelfEventMovingShowPath;                              // 0x02E8   (0x0010)  
	FString                                            ResultTargetEventMovingShowPath;                            // 0x02F8   (0x0010)  
	FName                                              ResultTargetEventMovingMoveAlias;                           // 0x0308   (0x0008)  
	FName                                              HitLevelResultTargetEventMovingMoveAlias;                   // 0x0310   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0318   (0x0008)  
	TArray<FSBJsonEffect>                              ResultSelfCommonEffectArray;                                // 0x0320   (0x0010)  
	TArray<FSBJsonEffect>                              ResultSelfDownEffectArray;                                  // 0x0330   (0x0010)  
	TArray<FSBJsonEffect>                              ResultSelfGroggyEffectArray;                                // 0x0340   (0x0010)  
	TArray<FSBJsonEffect>                              ResultSelfAirborneEffectArray;                              // 0x0350   (0x0010)  
	TArray<FSBJsonEffect>                              ResultSelfAirEffectArray;                                   // 0x0360   (0x0010)  
	TArray<FSBJsonEffect>                              ResultSelfSwimmingEffectArray;                              // 0x0370   (0x0010)  
	TArray<FSBJsonEffect>                              ResultSelfEventMovingEffectArray;                           // 0x0380   (0x0010)  
	TArray<FSBJsonEffect>                              ResultSelfCriticalEffectArray;                              // 0x0390   (0x0010)  
	TArray<FSBJsonEffect>                              ResultSelfWeakpointHitEffectArray;                          // 0x03A0   (0x0010)  
	TArray<FSBJsonEffect>                              ResultTargetCommonEffectArray;                              // 0x03B0   (0x0010)  
	TArray<FSBJsonEffect>                              ResultTargetDownEffectArray;                                // 0x03C0   (0x0010)  
	TArray<FSBJsonEffect>                              ResultTargetGroggyEffectArray;                              // 0x03D0   (0x0010)  
	TArray<FSBJsonEffect>                              ResultTargetAirborneEffectArray;                            // 0x03E0   (0x0010)  
	TArray<FSBJsonEffect>                              ResultTargetAirEffectArray;                                 // 0x03F0   (0x0010)  
	TArray<FSBJsonEffect>                              ResultTargetSwimmingEffectArray;                            // 0x0400   (0x0010)  
	TArray<FSBJsonEffect>                              ResultTargetEventMovingEffectArray;                         // 0x0410   (0x0010)  
	TArray<FSBJsonEffect>                              ResultTargetCriticalEffectArray;                            // 0x0420   (0x0010)  
	TArray<FSBJsonEffect>                              ResultTargetWeakpointHitEffectArray;                        // 0x0430   (0x0010)  
	TArray<FSBJsonEffect>                              HitLevelResultTargetCommonEffectArray;                      // 0x0440   (0x0010)  
	TArray<FSBJsonEffect>                              HitLevelResultTargetDownEffectArray;                        // 0x0450   (0x0010)  
	TArray<FSBJsonEffect>                              HitLevelResultTargetGroggyEffectArray;                      // 0x0460   (0x0010)  
	TArray<FSBJsonEffect>                              HitLevelResultTargetAirborneEffectArray;                    // 0x0470   (0x0010)  
	TArray<FSBJsonEffect>                              HitLevelResultTargetAirEffectArray;                         // 0x0480   (0x0010)  
	TArray<FSBJsonEffect>                              HitLevelResultTargetSwimmingEffectArray;                    // 0x0490   (0x0010)  
	TArray<FSBJsonEffect>                              HitLevelResultTargetEventMovingEffectArray;                 // 0x04A0   (0x0010)  
};

/// Class /Script/SB.SBShowSkillResultKey
/// Size: 0x0528 (1320 bytes) (0x000058 - 0x000528) align n/a MaxSize: 0x0528
class USBShowSkillResultKey : public USBShowKey
{ 
public:
	FSBAliasSkillResult                                SkillResultAlias;                                           // 0x0058   (0x0018)  
	TEnumAsByte<ESBShowSkillResultTableFieldType>      TableFieldType;                                             // 0x0070   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0071   (0x0007)  MISSED
	FSBSkillResultTableProperty                        SkillResultTableProperty;                                   // 0x0078   (0x04B0)  
};

/// Class /Script/SB.SBShowSoundAdjusterKey
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class USBShowSoundAdjusterKey : public USBShowKey
{ 
public:
	ESBSoundVolumeChannel                              SoundVolumeChannel;                                         // 0x0058   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              Volume;                                                     // 0x005C   (0x0004)  
	bool                                               bOverrideFadeTime;                                          // 0x0060   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	float                                              FadeInTime;                                                 // 0x0064   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0068   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowSoundAmbientControlKey
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align n/a MaxSize: 0x0068
class USBShowSoundAmbientControlKey : public USBShowKey
{ 
public:
	FName                                              AmbientSoundVolumeName;                                     // 0x0058   (0x0008)  
	ESBAmbientSoundControlType                         ControlType;                                                // 0x0060   (0x0001)  
	bool                                               Enable;                                                     // 0x0061   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0062   (0x0002)  MISSED
	float                                              Priority;                                                   // 0x0064   (0x0004)  
};

/// Class /Script/SB.SBShowSoundBGMPriorityKey
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align n/a MaxSize: 0x0068
class USBShowSoundBGMPriorityKey : public USBShowKey
{ 
public:
	FName                                              BGMVolumeName;                                              // 0x0058   (0x0008)  
	float                                              Priority;                                                   // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/SB.SBShowSoundEventKey
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align n/a MaxSize: 0x0060
class USBShowSoundEventKey : public USBShowKey
{ 
public:
	FName                                              SoundEventAlias;                                            // 0x0058   (0x0008)  
};

/// Struct /Script/SB.SBShowVectorCurve
/// Size: 0x01A0 (416 bytes) (0x000000 - 0x0001A0) align n/a MaxSize: 0x01A0
struct FSBShowVectorCurve
{ 
	bool                                               bEnable;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FRuntimeFloatCurve                                 XCurve;                                                     // 0x0008   (0x0088)  
	FRuntimeFloatCurve                                 YCurve;                                                     // 0x0090   (0x0088)  
	FRuntimeFloatCurve                                 ZCurve;                                                     // 0x0118   (0x0088)  
};

/// Class /Script/SB.SBShowSoundKey
/// Size: 0x02B0 (688 bytes) (0x000058 - 0x0002B0) align n/a MaxSize: 0x02B0
class USBShowSoundKey : public USBShowKey
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x0058   (0x0008)  
	TWeakObjectPtr<class USoundBase*>                  SoundSoftObject;                                            // 0x0060   (0x0008)  
	unsigned char                                      UnknownData10_6[0x20];                                      // 0x0068   (0x0020)  MISSED
	float                                              VolumeMultiplier;                                           // 0x0088   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x008C   (0x0004)  
	ESBShowSoundOwnerTarget                            TargetForSoundOwner;                                        // 0x0090   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	int32_t                                            TargetIndexForSoundOwner;                                   // 0x0094   (0x0004)  
	TArray<ESBSoundParamType>                          SubscribeSoundParam;                                        // 0x0098   (0x0010)  
	class USoundClass*                                 SoundClassOverride;                                         // 0x00A8   (0x0008)  
	class USoundAttenuation*                           AttenuationOverride;                                        // 0x00B0   (0x0008)  
	bool                                               bUISound;                                                   // 0x00B8   (0x0001)  
	bool                                               bMuteWhenGamePause;                                         // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x00BA   (0x0002)  MISSED
	bool                                               bFollow : 1;                                                // 0x00BC:0 (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x00BD   (0x0003)  MISSED
	bool                                               bUseStopAtEnd;                                              // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x00C1   (0x0003)  MISSED
	float                                              StopAtEndFadeOutTime;                                       // 0x00C4   (0x0004)  
	FName                                              AttachName;                                                 // 0x00C8   (0x0008)  
	bool                                               bPlayToMainCharacter;                                       // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x00D1   (0x0003)  MISSED
	int32_t                                            PlayTargetIndex;                                            // 0x00D4   (0x0004)  
	FName                                              SocketName;                                                 // 0x00D8   (0x0008)  
	TEnumAsByte<ESBSoundRelativeAxis>                  RelativeLocationAxis;                                       // 0x00E0   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x00E1   (0x0003)  MISSED
	FVector                                            RelativeLocation;                                           // 0x00E4   (0x000C)  
	TEnumAsByte<ESBShowSoundTarget>                    Target;                                                     // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x00F1   (0x0003)  MISSED
	int32_t                                            TargetIndex;                                                // 0x00F4   (0x0004)  
	bool                                               bUseTargetEquipment;                                        // 0x00F8   (0x0001)  
	TEnumAsByte<ESBEquipmentType>                      TargetEquipment;                                            // 0x00F9   (0x0001)  
	bool                                               bUseCharacterSoundSet;                                      // 0x00FA   (0x0001)  
	bool                                               bUseCharacterParticleSet;                                   // 0x00FB   (0x0001)  
	FName                                              CharacterParticleSetKey;                                    // 0x00FC   (0x0008)  
	TEnumAsByte<ESBShowCharacterParticleTarget>        TargetForCharacterParticle;                                 // 0x0104   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x0105   (0x0003)  MISSED
	int32_t                                            TargetIndexForCharacterParticle;                            // 0x0108   (0x0004)  
	bool                                               bUseAsyncLoading;                                           // 0x010C   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x010D   (0x0003)  MISSED
	FSBShowVectorCurve                                 RelativeLocationCurve;                                      // 0x0110   (0x01A0)  
};

/// Class /Script/SB.SBShowCharSESoundKey
/// Size: 0x02E0 (736 bytes) (0x0002B0 - 0x0002E0) align n/a MaxSize: 0x02E0
class USBShowCharSESoundKey : public USBShowSoundKey
{ 
public:
	FName                                              CharacterVoiceKey;                                          // 0x02B0   (0x0008)  
	FName                                              CharacterReactKey;                                          // 0x02B8   (0x0008)  
	FName                                              CharacterHitKey;                                            // 0x02C0   (0x0008)  
	TEnumAsByte<ESBCharacterHitSoundType>              CharacterHitType;                                           // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x02C9   (0x0003)  MISSED
	FName                                              SoundConditionKey;                                          // 0x02CC   (0x0008)  
	TEnumAsByte<ESBShowCharacterParticleTarget>        TargetForCharacterVoice;                                    // 0x02D4   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x02D5   (0x0003)  MISSED
	int32_t                                            TargetIndexForCharacterVoice;                               // 0x02D8   (0x0004)  
	ESBShowSESoundAttachType                           SESoundAttachType;                                          // 0x02DC   (0x0001)  
	unsigned char                                      UnknownData05_7[0x3];                                       // 0x02DD   (0x0003)  MISSED
};

/// Class /Script/SB.SBShowStaticMeshActor
/// Size: 0x02D8 (728 bytes) (0x0002D8 - 0x0002D8) align n/a MaxSize: 0x02D8
class ASBShowStaticMeshActor : public AStaticMeshActor
{ 
public:
};

/// Class /Script/SB.SBShowTimeScaleKey
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class USBShowTimeScaleKey : public USBShowKey
{ 
public:
	int32_t                                            Priority;                                                   // 0x0058   (0x0004)  
	float                                              BlendInTime;                                                // 0x005C   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0060   (0x0004)  
	float                                              TimeScale;                                                  // 0x0064   (0x0004)  
	bool                                               bApplyImmediately;                                          // 0x0068   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowTrailKey
/// Size: 0x00A8 (168 bytes) (0x000058 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBShowTrailKey : public USBShowKey
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0058   (0x0008)  
	FName                                              FirstSocketName;                                            // 0x0060   (0x0008)  
	FName                                              SecondSocketName;                                           // 0x0068   (0x0008)  
	TArray<FName>                                      MoreSocketNames;                                            // 0x0070   (0x0010)  
	TEnumAsByte<ETrailWidthMode>                       WidthScaleMode;                                             // 0x0080   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	FName                                              WidthScaleCurve;                                            // 0x0084   (0x0008)  
	bool                                               bAutoDeactiveAnimChanged;                                   // 0x008C   (0x0001)  
	bool                                               bHiddenWhenAttachHidden;                                    // 0x008D   (0x0001)  
	TEnumAsByte<ESBMovementTarget>                     Target;                                                     // 0x008E   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x008F   (0x0001)  MISSED
	int32_t                                            TargetIndex;                                                // 0x0090   (0x0004)  
	bool                                               bUseTargetEquipment;                                        // 0x0094   (0x0001)  
	TEnumAsByte<ESBEquipmentType>                      TargetEquipment;                                            // 0x0095   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x0096   (0x0002)  MISSED
	FString                                            AttachUniqueName;                                           // 0x0098   (0x0010)  
};

/// Class /Script/SB.SBShowUIStudioSequenceKey
/// Size: 0x0068 (104 bytes) (0x000058 - 0x000068) align n/a MaxSize: 0x0068
class USBShowUIStudioSequenceKey : public USBShowKey
{ 
public:
	TEnumAsByte<ESBShowUIStudioSequenceType>           ActionType;                                                 // 0x0058   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	FName                                              SequenceTag;                                                // 0x005C   (0x0008)  
	bool                                               bSamePlayThenStop;                                          // 0x0064   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Struct /Script/SB.SBShowHapticProperty
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBShowHapticProperty
{ 
	float                                              VolumeMultiplier;                                           // 0x0000   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x0004   (0x0004)  
	float                                              FadeOutDuration;                                            // 0x0008   (0x0004)  
	bool                                               bFollow : 1;                                                // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	FName                                              AttachName;                                                 // 0x0010   (0x0008)  
	TArray<ESBSoundParamType>                          SubscribeSoundParam;                                        // 0x0018   (0x0010)  
	class USoundAttenuation*                           AttenuationOverride;                                        // 0x0028   (0x0008)  
};

/// Struct /Script/SB.SBShowForceFeedbackProperty
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBShowForceFeedbackProperty
{ 
	float                                              IntensityMultiplier;                                        // 0x0000   (0x0004)  
	bool                                               bLooping;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	class UForceFeedbackAttenuation*                   AttenuationOverride;                                        // 0x0008   (0x0008)  
};

/// Class /Script/SB.SBShowVibrationKey
/// Size: 0x00B8 (184 bytes) (0x000058 - 0x0000B8) align n/a MaxSize: 0x00B8
class USBShowVibrationKey : public USBShowKey
{ 
public:
	class USBVibrationSet*                             VibrationSet;                                               // 0x0058   (0x0008)  
	TEnumAsByte<ESBShowVibrationTarget>                PlayTarget;                                                 // 0x0060   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0061   (0x0007)  MISSED
	FSBShowHapticProperty                              HapticProperty;                                             // 0x0068   (0x0030)  
	FSBShowForceFeedbackProperty                       ForceFeedbackProperty;                                      // 0x0098   (0x0010)  
	float                                              HapticFadeOutDuration;                                      // 0x00A8   (0x0004)  
	int32_t                                            PlayTargetIndex;                                            // 0x00AC   (0x0004)  
	bool                                               bPlayerCharacterOnly;                                       // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Class /Script/SB.SBShowVisibilityKey
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align n/a MaxSize: 0x0060
class USBShowVisibilityKey : public USBShowKey
{ 
public:
	bool                                               bVisible;                                                   // 0x0058   (0x0001)  
	TEnumAsByte<ESBSkelMeshSlot>                       MeshSlot;                                                   // 0x0059   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x005A   (0x0006)  MISSED
};

/// Class /Script/SB.SBShowWindVolumeKey
/// Size: 0x00E0 (224 bytes) (0x000058 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBShowWindVolumeKey : public USBShowKey
{ 
public:
	TEnumAsByte<ESBShowActorTarget>                    Target;                                                     // 0x0058   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	TArray<TEnumAsByte<ESBSkelMeshSlot>>               MeshSlots;                                                  // 0x0060   (0x0010)  
	TWeakObjectPtr<class UCurveFloat*>                 Strength;                                                   // 0x0070   (0x0008)  
	unsigned char                                      UnknownData05_6[0x20];                                      // 0x0078   (0x0020)  MISSED
	float                                              StrengthMultiplier;                                         // 0x0098   (0x0004)  
	float                                              ClothWindMultiplier;                                        // 0x009C   (0x0004)  
	float                                              SkeletalMeshForceMultiplier;                                // 0x00A0   (0x0004)  
	float                                              KawaiiPhysicsForceMultiplier;                               // 0x00A4   (0x0004)  
	TEnumAsByte<ESBShowWindVolumeDirectionType>        DirectionType;                                              // 0x00A8   (0x0001)  
	bool                                               bKeepTrackLocalDirection;                                   // 0x00A9   (0x0001)  
	bool                                               bPlayerOnly;                                                // 0x00AA   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x00AB   (0x0001)  MISSED
	FVector                                            Direction;                                                  // 0x00AC   (0x000C)  
	float                                              FadeDuration;                                               // 0x00B8   (0x0004)  
	int32_t                                            Priority;                                                   // 0x00BC   (0x0004)  
	bool                                               bRandomizeDirection;                                        // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x00C1   (0x0003)  MISSED
	float                                              MinAzimuthalAngle;                                          // 0x00C4   (0x0004)  
	float                                              MaxAzimuthalAngle;                                          // 0x00C8   (0x0004)  
	float                                              MinPolarAngle;                                              // 0x00CC   (0x0004)  
	float                                              MaxPolarAngle;                                              // 0x00D0   (0x0004)  
	FVector                                            Bound;                                                      // 0x00D4   (0x000C)  
};

/// Class /Script/SB.SBShowWorldMatineeKey
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align n/a MaxSize: 0x0060
class USBShowWorldMatineeKey : public USBShowKey
{ 
public:
	FName                                              PlayMatineeActorTagName;                                    // 0x0058   (0x0008)  
};

/// Class /Script/SB.SBSignificanceDebugActor
/// Size: 0x0318 (792 bytes) (0x0002C8 - 0x000318) align n/a MaxSize: 0x0318
class ASBSignificanceDebugActor : public AActor
{ 
public:
	class USceneComponent*                             DummyRoot;                                                  // 0x02C8   (0x0008)  
	class UTextRenderComponent*                        TextRenderComponent;                                        // 0x02D0   (0x0008)  
	FString                                            PendingText;                                                // 0x02D8   (0x0010)  
	FVector                                            PendingLocation;                                            // 0x02E8   (0x000C)  
	FRotator                                           PendingRotation;                                            // 0x02F4   (0x000C)  
	FVector                                            PendingScale;                                               // 0x0300   (0x000C)  
	FColor                                             PendingColor;                                               // 0x030C   (0x0004)  
	bool                                               bNeedUpdate;                                                // 0x0310   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0311   (0x0007)  MISSED
};

/// Class /Script/SB.SBSignificanceManager
/// Size: 0x03A0 (928 bytes) (0x000120 - 0x0003A0) align n/a MaxSize: 0x03A0
class USBSignificanceManager : public USignificanceManager
{ 
public:
	unsigned char                                      UnknownData01_1[0x280];                                     // 0x0120   (0x0280)  MISSED
};

/// Class /Script/SB.SBSingleSoundData
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align n/a MaxSize: 0x0058
class USBSingleSoundData : public UDataAsset
{ 
public:
	class USoundBase*                                  SoundWave;                                                  // 0x0030   (0x0008)  
	ESBSingleSoundTransitType                          TransitType;                                                // 0x0038   (0x0004)  
	float                                              FadeInTime;                                                 // 0x003C   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0040   (0x0004)  
	float                                              FadeOutDelayTime;                                           // 0x0044   (0x0004)  
	bool                                               bKeepPlayingWhenLoading;                                    // 0x0048   (0x0001)  
	bool                                               bBGMEventResetWhenGameExit;                                 // 0x0049   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x004A   (0x0006)  MISSED
	class USoundBase*                                  OverrideSound;                                              // 0x0050   (0x0008)  
};

/// Class /Script/SB.SBSingleSoundComponent
/// Size: 0x02B0 (688 bytes) (0x000260 - 0x0002B0) align n/a MaxSize: 0x02B0
class USBSingleSoundComponent : public USceneComponent
{ 
public:
	class USBSingleSoundData*                          SingleSoundData;                                            // 0x0260   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0268   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x026C   (0x0004)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0270   (0x0008)  
	FMulticastInlineDelegate                           OnSingleSoundActivate;                                      // 0x0278   (0x0010)  
	FMulticastInlineDelegate                           OnSingleSoundDeactivate;                                    // 0x0288   (0x0010)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x0298   (0x0018)  MISSED

	/// Functions
	// Function /Script/SB.SBSingleSoundComponent.IsPlaying
	constexpr static const FunctionPointer<USBSingleSoundComponent, bool> IsPlaying = { 0x27ee350, 0 }; 
	// Function /Script/SB.SBSingleSoundComponent.IsActiveSingleSound
	constexpr static const FunctionPointer<USBSingleSoundComponent, bool> IsActiveSingleSound = { 0x27ee320, 1 }; 
	// Function /Script/SB.SBSingleSoundComponent.ChangeSound
	constexpr static const FunctionPointer<USBSingleSoundComponent, void, const USoundBase*, const float, const float, const bool> ChangeSound = { 0x27ee380, 2 }; 
	// Function /Script/SB.SBSingleSoundComponent.AdjustAttenuation
	constexpr static const FunctionPointer<USBSingleSoundComponent, void, const FSoundAttenuationSettings&> AdjustAttenuation = { 0x27ee200, 3 }; 
};

/// Struct /Script/SB.MaterialDefaultInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FMaterialDefaultInfo
{ 
	int32_t                                            MaterialSlotIndex;                                          // 0x0000   (0x0004)  
	TEnumAsByte<ESBMaterialParamType>                  ParamType;                                                  // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FMaterialParameterInfo                             ParamInfo;                                                  // 0x0008   (0x0010)  
	FLinearColor                                       Value;                                                      // 0x0018   (0x0010)  
};

/// Struct /Script/SB.VertexShakeInfo
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align n/a MaxSize: 0x002C
struct FVertexShakeInfo
{ 
	FVector                                            ShakeHitPosition;                                           // 0x0000   (0x000C)  
	FVector                                            ShakeHitDirection;                                          // 0x000C   (0x000C)  
	float                                              ShakeInterval;                                              // 0x0018   (0x0004)  
	float                                              ShakePower;                                                 // 0x001C   (0x0004)  
	float                                              ShakeRange;                                                 // 0x0020   (0x0004)  
	float                                              ShakeFallOff;                                               // 0x0024   (0x0004)  
	float                                              ShakeWeaknessPerSec;                                        // 0x0028   (0x0004)  
};

/// Struct /Script/SB.BoneAnimScaleIgnoreInfo
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FBoneAnimScaleIgnoreInfo
{ 
	TMap<int32_t, bool>                                IgnoreBoneMap;                                              // 0x0000   (0x0050)  
	float                                              BlendInTime;                                                // 0x0050   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0054   (0x0004)  
	float                                              Duration;                                                   // 0x0058   (0x0004)  
	float                                              CurrentTime;                                                // 0x005C   (0x0004)  
	float                                              CurrentWeight;                                              // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/SB.SBSkeletalMeshComponent
/// Size: 0x1590 (5520 bytes) (0x0012F0 - 0x001590) align n/a MaxSize: 0x1590
class USBSkeletalMeshComponent : public USkeletalMeshComponent
{ 
public:
	FVector                                            LastKeepAllBodiesBoneLocation;                              // 0x12F0   (0x000C)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x12FC   (0x0004)  MISSED
	FQuat                                              LastKeepAllBodiesBoneQuat;                                  // 0x1300   (0x0010)  
	TArray<float>                                      HistoryResetPhysVelocty;                                    // 0x1310   (0x0010)  
	TArray<float>                                      HistoryResetPhysDegree;                                     // 0x1320   (0x0010)  
	int32_t                                            CurrentHistoryResetPhysNum;                                 // 0x1330   (0x0004)  
	int32_t                                            CurrentMaxHistoryResetPhysNum;                              // 0x1334   (0x0004)  
	float                                              RemainResetPhysics;                                         // 0x1338   (0x0004)  
	TEnumAsByte<ESBSkelMeshSlot>                       MeshSlot;                                                   // 0x133C   (0x0001)  
	TEnumAsByte<ESBMeshAttachType>                     MeshSlotAttachType;                                         // 0x133D   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x133E   (0x0002)  MISSED
	TArray<FMaterialDefaultInfo>                       MaterialParamDefaultValue;                                  // 0x1340   (0x0010)  
	TArray<FName>                                      DynamicPhysicControlBones;                                  // 0x1350   (0x0010)  
	TArray<FName>                                      DynamicPhysicExclusiveBones;                                // 0x1360   (0x0010)  
	FName                                              CustomAnimStateName;                                        // 0x1370   (0x0008)  
	float                                              CustomAnimWeight;                                           // 0x1378   (0x0004)  
	bool                                               bUseDynamicBound : 1;                                       // 0x137C:0 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x137D   (0x0003)  MISSED
	FName                                              SBSkeletalMeshTag;                                          // 0x1380   (0x0008)  
	float                                              OverrideOffsetLODViewAngle;                                 // 0x1388   (0x0004)  
	int32_t                                            OverrideOffsetLODValue;                                     // 0x138C   (0x0004)  
	FVector                                            AdditiveBoundsBoxExtent;                                    // 0x1390   (0x000C)  
	bool                                               bDisableComponentsClothTick;                                // 0x139C   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x139D   (0x0003)  MISSED
	float                                              ComponentsClothTickDistance;                                // 0x13A0   (0x0004)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x13A4   (0x0004)  MISSED
	TMap<FName, FSBEventMoveIKData>                    IKTargetInfoMap;                                            // 0x13A8   (0x0050)  
	TArray<FSBEventMoveIKData>                         DurationIKDataList;                                         // 0x13F8   (0x0010)  
	bool                                               bPlayDynamicPhysicBoneControl;                              // 0x1408   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x1409   (0x0003)  MISSED
	float                                              RemainDynamicPhysicBoneDuration;                            // 0x140C   (0x0004)  
	float                                              DynamicPhysicBoneDuration;                                  // 0x1410   (0x0004)  
	float                                              DynamicPhysicBoneBlendInTime;                               // 0x1414   (0x0004)  
	float                                              DynamicPhysicBoneBlendOutTime;                              // 0x1418   (0x0004)  
	float                                              DynamicPhysicBoneWeight;                                    // 0x141C   (0x0004)  
	float                                              DynamicPhysicBoneIgnoreRemainTime;                          // 0x1420   (0x0004)  
	FVector                                            PhysicalHitForceVector;                                     // 0x1424   (0x000C)  
	FName                                              PhysicalHitForceTargetBone;                                 // 0x1430   (0x0008)  
	FVector                                            PhysicalHitForceLocation;                                   // 0x1438   (0x000C)  
	float                                              PhysicalHitForcePower;                                      // 0x1444   (0x0004)  
	TEnumAsByte<ESBPhysicHitType>                      PhysicalHitType;                                            // 0x1448   (0x0001)  
	bool                                               bSetDynamicPhysicBelowAll;                                  // 0x1449   (0x0001)  
	unsigned char                                      UnknownData15_6[0x2];                                       // 0x144A   (0x0002)  MISSED
	FVertexShakeInfo                                   VertexShakeInfo;                                            // 0x144C   (0x002C)  
	FBoneAnimScaleIgnoreInfo                           BoneAnimScaleIgnoreInfo;                                    // 0x1478   (0x0068)  
	FName                                              RestoreAttachBoneName;                                      // 0x14E0   (0x0008)  
	class USceneComponent*                             RestoreAttachComponent;                                     // 0x14E8   (0x0008)  
	TArray<FSBMovementBoneData>                        MovementBoneDataList;                                       // 0x14F0   (0x0010)  
	bool                                               bReturnRelativeBlendOffset;                                 // 0x1500   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x1501   (0x0003)  MISSED
	float                                              CurrentRelativeBlendOffsetTime;                             // 0x1504   (0x0004)  
	float                                              RelativeBlendToTargetTime;                                  // 0x1508   (0x0004)  
	float                                              RelativeBlendReturnTime;                                    // 0x150C   (0x0004)  
	FVector                                            RelativeBlendOffset;                                        // 0x1510   (0x000C)  
	FVector                                            BackupRelativeLocation;                                     // 0x151C   (0x000C)  
	float                                              CurrentPhysicsWeightBlendTime;                              // 0x1528   (0x0004)  
	float                                              PhysicsWeightBlendTime;                                     // 0x152C   (0x0004)  
	float                                              TargetPhysicsWeight;                                        // 0x1530   (0x0004)  
	float                                              CurrentMassScale;                                           // 0x1534   (0x0004)  
	unsigned char                                      UnknownData17_7[0x58];                                      // 0x1538   (0x0058)  MISSED

	/// Functions
	// Function /Script/SB.SBSkeletalMeshComponent.SetPhysicsBodySimulate
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, void, const FVector, const FName&, const bool, const float, const bool, const bool> SetPhysicsBodySimulate = { 0x27ef7d0, 0 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.SetPhysicsAssetAndKeepTransform
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, void, const UPhysicsAsset*, const bool> SetPhysicsAssetAndKeepTransform = { 0x27eed60, 1 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.SetEnableGravityPhysicsBones
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, void, const bool, const TArray<FName>&> SetEnableGravityPhysicsBones = { 0x27ef380, 2 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.SetCustomAnimWeight
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, void, const float> SetCustomAnimWeight = { 0x27ef580, 3 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.SetCustomAnimStateName
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, void, const FName> SetCustomAnimStateName = { 0x27ef670, 4 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.SetBlendPhysicsWeight
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, void, const bool, const float> SetBlendPhysicsWeight = { 0x27ef1d0, 5 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.ResetOverrideMaterials
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, void> ResetOverrideMaterials = { 0x27ef770, 6 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.GetSBSkeletalMeshTag
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, FName> GetSBSkeletalMeshTag = { 0x27eed40, 7 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.GetCustomAnimWeight
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, float> GetCustomAnimWeight = { 0x27ef650, 8 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.GetCustomAnimStateName
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, FName> GetCustomAnimStateName = { 0x27ef750, 9 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.FindEventMoveIKData
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, void, const FName, const FSBEventMoveIKData&> FindEventMoveIKData = { 0x27eeed0, 10 }; 
	// Function /Script/SB.SBSkeletalMeshComponent.ClearBlendPhysicsWeight
	constexpr static const FunctionPointer<USBSkeletalMeshComponent, void> ClearBlendPhysicsWeight = { 0x27ef1a0, 11 }; 
};

/// Struct /Script/SB.SBSkillNavigationPath
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSkillNavigationPath
{ 
	FName                                              SkillTreeSlotName;                                          // 0x0000   (0x0008)  
	FName                                              SkillSlotName;                                              // 0x0008   (0x0008)  
};

/// Class /Script/SB.SBSkillSlotBase
/// Size: 0x0810 (2064 bytes) (0x000680 - 0x000810) align n/a MaxSize: 0x0810
class USBSkillSlotBase : public USBUserWidget
{ 
public:
	TMap<EUINavigation, FSBSkillNavigationPath>        SubNavigationInfo;                                          // 0x0680   (0x0050)  
	TMap<EUINavigation, FSBSkillNavigationPath>        SubNavigationInfo2;                                         // 0x06D0   (0x0050)  
	TMap<EUINavigation, FSBSkillNavigationPath>        SubNavigationInfo3;                                         // 0x0720   (0x0050)  
	TMap<EUINavigation, FSBSkillNavigationPath>        SubNavigationInfo4;                                         // 0x0770   (0x0050)  
	TMap<EUINavigation, FSBSkillNavigationPath>        SubNavigationInfo5;                                         // 0x07C0   (0x0050)  
};

/// Struct /Script/SB.SBSkillSlotBases
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSkillSlotBases
{ 
	TArray<class USBSkillSlotBase*>                    Array;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSkillSlotLines
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSkillSlotLines
{ 
	TArray<class USBUserWidget*>                       Array;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBSkillSlotRequiredInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBSkillSlotRequiredInfo
{ 
	TArray<class USBSkillSlotBase*>                    SlotArray;                                                  // 0x0000   (0x0010)  
	TArray<class USBUserWidget*>                       LineArray;                                                  // 0x0010   (0x0010)  
	bool                                               bNewGamePlusSlot;                                           // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Class /Script/SB.SBSkillTreeBase
/// Size: 0x07D8 (2008 bytes) (0x000680 - 0x0007D8) align n/a MaxSize: 0x07D8
class USBSkillTreeBase : public USBUserWidget
{ 
public:
	class USBUserWidget*                               SkillCategory;                                              // 0x0680   (0x0008)  
	class UCanvasPanel*                                SkillSlotPanel;                                             // 0x0688   (0x0008)  
	class UCanvasPanel*                                SkillLinePanel;                                             // 0x0690   (0x0008)  
	ESBUISkillTreeType                                 SkillTreeType;                                              // 0x0698   (0x0001)  
	bool                                               bLockTree;                                                  // 0x0699   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x069A   (0x0002)  MISSED
	ESBSkillTreeUnlockAnimationType                    UnlockAnimationType;                                        // 0x069C   (0x0004)  
	ESBSkillTreeUnlockAnimationType                    NewGamePlusUnlockAnimationType;                             // 0x06A0   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x06A4   (0x0004)  MISSED
	class USoundBase*                                  SlotFocusChangedSound;                                      // 0x06A8   (0x0008)  
	TMap<int32_t, FSBSkillSlotBases>                   SkillSlotMap;                                               // 0x06B0   (0x0050)  
	TMap<int32_t, FSBSkillSlotLines>                   SkillLineMap;                                               // 0x0700   (0x0050)  
	TMap<class USBSkillSlotBase*, FSBSkillSlotRequiredInfo> RequiredInfoMap;                                       // 0x0750   (0x0050)  
	FName                                              SkillTreeAlias;                                             // 0x07A0   (0x0008)  
	unsigned char                                      UnknownData05_7[0x30];                                      // 0x07A8   (0x0030)  MISSED

	/// Functions
	// Function /Script/SB.SBSkillTreeBase.UnbindToUnlockAnimationFinished
	constexpr static const FunctionPointer<USBSkillTreeBase, void> UnbindToUnlockAnimationFinished = { 0x27f0850, 0 }; 
	// Function /Script/SB.SBSkillTreeBase.SetUnlockPresentationProgress
	constexpr static const FunctionPointer<USBSkillTreeBase, void, const float> SetUnlockPresentationProgress = { 0x27f0ba0, 1 }; 
	// Function /Script/SB.SBSkillTreeBase.ReadyUnlockAnimationByNewGamePlus
	constexpr static const FunctionPointer<USBSkillTreeBase, void> ReadyUnlockAnimationByNewGamePlus = { 0x27f09a0, 2 }; 
	// Function /Script/SB.SBSkillTreeBase.ReadyUnlockAnimationByAchievement
	constexpr static const FunctionPointer<USBSkillTreeBase, void, const FName> ReadyUnlockAnimationByAchievement = { 0x27f0aa0, 3 }; 
	// Function /Script/SB.SBSkillTreeBase.PlayUnlockAnimationByNewGamePlus
	constexpr static const FunctionPointer<USBSkillTreeBase, void> PlayUnlockAnimationByNewGamePlus = { 0x27f0980, 4 }; 
	// Function /Script/SB.SBSkillTreeBase.PlayUnlockAnimationByAchievement
	constexpr static const FunctionPointer<USBSkillTreeBase, void, const FName> PlayUnlockAnimationByAchievement = { 0x27f09c0, 5 }; 
	// Function /Script/SB.SBSkillTreeBase.PlayUnlockAnimation
	constexpr static const FunctionPointer<USBSkillTreeBase, void> PlayUnlockAnimation = { 0x27f0b80, 6 }; 
	// Function /Script/SB.SBSkillTreeBase.NavigationTreeCustom
	constexpr static const FunctionPointer<USBSkillTreeBase, UWidget*, const EUINavigation, const USBSkillSlotBase*, const int32_t> NavigationTreeCustom = { 0x27f0c70, 7 }; 
	// Function /Script/SB.SBSkillTreeBase.NavigationTree
	constexpr static const FunctionPointer<USBSkillTreeBase, UWidget*, const EUINavigation> NavigationTree = { 0x27f0e60, 8 }; 
	// Function /Script/SB.SBSkillTreeBase.GetSkillCategory
	constexpr static const FunctionPointer<USBSkillTreeBase, USBUserWidget*> GetSkillCategory = { 0x27f0f40, 9 }; 
	// Function /Script/SB.SBSkillTreeBase.BindToUnlockAnimationFinished
	constexpr static const FunctionPointer<USBSkillTreeBase, void, const FDelegateProperty> BindToUnlockAnimationFinished = { 0x27f0890, 10 }; 
};

/// Struct /Script/SB.SBSliceSkeletalMeshHeader
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSliceSkeletalMeshHeader
{ 
	int32_t                                            Version;                                                    // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            PathName;                                                   // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBSliceSkeletalMeshTriangle
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBSliceSkeletalMeshTriangle
{ 
	int32_t                                            StartTriangleIndex;                                         // 0x0000   (0x0004)  
	int32_t                                            TriangleCount;                                              // 0x0004   (0x0004)  
	TEnumAsByte<EProcMeshVertexType>                   VertexType;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/SB.SBSliceSkeletalMeshSection
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSliceSkeletalMeshSection
{ 
	int32_t                                            BaseIndex;                                                  // 0x0000   (0x0004)  
	int32_t                                            NumTriangles;                                               // 0x0004   (0x0004)  
	TArray<FSBSliceSkeletalMeshTriangle>               Triangles;                                                  // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBSliceSkeletalMeshBone
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSliceSkeletalMeshBone
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	TArray<FSBSliceSkeletalMeshSection>                Sections;                                                   // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBSliceSkeletalMeshLOD
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSliceSkeletalMeshLOD
{ 
	int32_t                                            LOD;                                                        // 0x0000   (0x0004)  
	int32_t                                            NumVertices;                                                // 0x0004   (0x0004)  
	int32_t                                            NumIndices;                                                 // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FSBSliceSkeletalMeshBone>                   Bones;                                                      // 0x0010   (0x0010)  
};

/// Class /Script/SB.SBSliceSkeletalMeshDataAsset
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align n/a MaxSize: 0x0058
class USBSliceSkeletalMeshDataAsset : public UDataAsset
{ 
public:
	FSBSliceSkeletalMeshHeader                         Header;                                                     // 0x0030   (0x0018)  
	TArray<FSBSliceSkeletalMeshLOD>                    LODMeshs;                                                   // 0x0048   (0x0010)  
};

/// Struct /Script/SB.SBSliceSkeletalMeshTemplateData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSliceSkeletalMeshTemplateData
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	float                                              LimitAngleMin;                                              // 0x0008   (0x0004)  
	float                                              LimitAngleMax;                                              // 0x000C   (0x0004)  
	class UMaterialInterface*                          OverrideCapMaterial;                                        // 0x0010   (0x0008)  
	float                                              OverrideImpulsePower;                                       // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/SB.SBSliceSkeletalMeshTemplateDataAsset
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align n/a MaxSize: 0x0050
class USBSliceSkeletalMeshTemplateDataAsset : public UDataAsset
{ 
public:
	class UMaterialInterface*                          CapMaterial;                                                // 0x0030   (0x0008)  
	float                                              ImpulsePower;                                               // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TArray<FSBSliceSkeletalMeshTemplateData>           SliceableBones;                                             // 0x0040   (0x0010)  
};

/// Class /Script/SB.SBSoundActor
/// Size: 0x02E8 (744 bytes) (0x0002D0 - 0x0002E8) align n/a MaxSize: 0x02E8
class ASBSoundActor : public AAmbientSound
{ 
public:
	bool                                               bMuteWhenLoading;                                           // 0x02D0   (0x0001)  
	bool                                               bMuteWhenWarp;                                              // 0x02D1   (0x0001)  
	unsigned char                                      UnknownData01_7[0x16];                                      // 0x02D2   (0x0016)  MISSED
};

/// Class /Script/SB.SBSoundBGMActor
/// Size: 0x02E8 (744 bytes) (0x0002E8 - 0x0002E8) align n/a MaxSize: 0x02E8
class ASBSoundBGMActor : public ASBSoundActor
{ 
public:
};

/// Class /Script/SB.SBSoundAdjuster
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class USBSoundAdjuster : public UDataAsset
{ 
public:
	float                                              DefaultVolume;                                              // 0x0030   (0x0004)  
	float                                              BGMVolume;                                                  // 0x0034   (0x0004)  
	float                                              AmbientVolume;                                              // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/SB.SBSoundComponent
/// Size: 0x0900 (2304 bytes) (0x0008E8 - 0x000900) align n/a MaxSize: 0x0900
class USBSoundComponent : public UAudioComponent
{ 
public:
	bool                                               bMuteWhenLoading;                                           // 0x08E8   (0x0001)  
	bool                                               bMuteWhenWarp;                                              // 0x08E9   (0x0001)  
	unsigned char                                      UnknownData01_7[0x16];                                      // 0x08EA   (0x0016)  MISSED

	/// Functions
	// Function /Script/SB.SBSoundComponent.SetStopWhenOwnerDestroyed
	constexpr static const FunctionPointer<USBSoundComponent, void, const bool> SetStopWhenOwnerDestroyed = { 0x27f3610, 0 }; 
	// Function /Script/SB.SBSoundComponent.OnZoneWarpEvent
	constexpr static const FunctionPointer<USBSoundComponent, void, const FName&> OnZoneWarpEvent = { 0x2bbb090, 1 }; 
	// Function /Script/SB.SBSoundComponent.OnStopLevelSequence
	constexpr static const FunctionPointer<USBSoundComponent, void, const FSoftObjectPath&> OnStopLevelSequence = { 0x2bbb090, 2 }; 
	// Function /Script/SB.SBSoundComponent.OnPlayLevelSequence
	constexpr static const FunctionPointer<USBSoundComponent, void, const FSoftObjectPath&> OnPlayLevelSequence = { 0x2bbb090, 3 }; 
	// Function /Script/SB.SBSoundComponent.OnPendingCreateWidget
	constexpr static const FunctionPointer<USBSoundComponent, void, const TEnumAsByte<ESBUILogicType>> OnPendingCreateWidget = { 0x2bbb090, 4 }; 
	// Function /Script/SB.SBSoundComponent.OnDestroyMasterWidget
	constexpr static const FunctionPointer<USBSoundComponent, void, const TEnumAsByte<ESBUILogicType>> OnDestroyMasterWidget = { 0x2bbb090, 5 }; 
	// Function /Script/SB.SBSoundComponent.OnCreateMasterWidget
	constexpr static const FunctionPointer<USBSoundComponent, void, const TEnumAsByte<ESBUILogicType>> OnCreateMasterWidget = { 0x2bbb090, 6 }; 
};

/// Class /Script/SB.SBSoundProcedural
/// Size: 0x03E0 (992 bytes) (0x0003D0 - 0x0003E0) align n/a MaxSize: 0x03D8
class USBSoundProcedural : public USoundWaveProcedural
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x03D0   (0x0008)  MISSED
};

/// Struct /Script/SB.SBSoundPCMData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSoundPCMData
{ 
	TArray<char>                                       Data;                                                       // 0x0000   (0x0010)  
	uint32_t                                           SampleRate;                                                 // 0x0010   (0x0004)  
	uint16_t                                           NumChannels;                                                // 0x0014   (0x0002)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0016   (0x0002)  MISSED
};

/// Class /Script/SB.SBSoundConcatenation
/// Size: 0x0410 (1040 bytes) (0x0003D8 - 0x000410) align n/a MaxSize: 0x0410
class USBSoundConcatenation : public USBSoundProcedural
{ 
public:
	class USBSoundConcatenationAsset*                  ByCreatedSoundAsset;                                        // 0x03D8   (0x0008)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x03E0   (0x0010)  MISSED
	TArray<class USoundWave*>                          SoundArray;                                                 // 0x03F0   (0x0010)  
	TArray<FSBSoundPCMData>                            PCMDataArray;                                               // 0x0400   (0x0010)  
};

/// Class /Script/SB.SBSoundProceduralAsset
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
class USBSoundProceduralAsset : public UDataAsset
{ 
public:
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              Volume;                                                     // 0x0034   (0x0004)  
	class USoundClass*                                 SoundClassObject;                                           // 0x0038   (0x0008)  
	EVirtualizationMode                                VirtualizationMode;                                         // 0x0040   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/SB.SBSoundConcatenationAsset
/// Size: 0x0068 (104 bytes) (0x000048 - 0x000068) align n/a MaxSize: 0x0068
class USBSoundConcatenationAsset : public USBSoundProceduralAsset
{ 
public:
	TArray<class USoundWave*>                          SoundArray;                                                 // 0x0048   (0x0010)  
	TArray<FSBSoundPCMData>                            PCMDataArray;                                               // 0x0058   (0x0010)  
};

/// Class /Script/SB.SBQuartzEventObserver
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class USBQuartzEventObserver : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED

	/// Functions
	// Function /Script/SB.SBQuartzEventObserver.ExecuteQuartzCommandEvent
	constexpr static const FunctionPointer<USBQuartzEventObserver, void, const EQuartzCommandDelegateSubType, const FName> ExecuteQuartzCommandEvent = { 0x27f4370, 0 }; 
	// Function /Script/SB.SBQuartzEventObserver.ExecuteMetronomeEvent
	constexpr static const FunctionPointer<USBQuartzEventObserver, void, const FName, const EQuartzCommandQuantization, const int32_t, const int32_t, const float> ExecuteMetronomeEvent = { 0x27f4520, 1 }; 
};

/// Class /Script/SB.SBSoundDebuggerWidget
/// Size: 0x07C0 (1984 bytes) (0x000680 - 0x0007C0) align n/a MaxSize: 0x07C0
class USBSoundDebuggerWidget : public USBUserWidget
{ 
public:
	class UVerticalBox*                                SoundFixedLogRoot;                                          // 0x0680   (0x0008)  
	class UListView*                                   FixedEventLog_ListView;                                     // 0x0688   (0x0008)  
	class UVerticalBox*                                SoundEventLogRoot;                                          // 0x0690   (0x0008)  
	class UListView*                                   EventLogCategory_ListView;                                  // 0x0698   (0x0008)  
	class UListView*                                   EventLogDescription_ListView;                               // 0x06A0   (0x0008)  
	class UWidget*                                     WorldLogRoot;                                               // 0x06A8   (0x0008)  
	class USBUserWidget*                               WorldLog1;                                                  // 0x06B0   (0x0008)  
	class USBUserWidget*                               WorldLog2;                                                  // 0x06B8   (0x0008)  
	class USBUserWidget*                               WorldLog3;                                                  // 0x06C0   (0x0008)  
	class USBUserWidget*                               WorldLog4;                                                  // 0x06C8   (0x0008)  
	class USBUserWidget*                               WorldLog5;                                                  // 0x06D0   (0x0008)  
	class USBUserWidget*                               WorldLog6;                                                  // 0x06D8   (0x0008)  
	class USBUserWidget*                               WorldLog7;                                                  // 0x06E0   (0x0008)  
	class USBUserWidget*                               WorldLog8;                                                  // 0x06E8   (0x0008)  
	class USBUserWidget*                               WorldLog9;                                                  // 0x06F0   (0x0008)  
	class UVerticalBox*                                StatLogRoot;                                                // 0x06F8   (0x0008)  
	class UVerticalBox*                                StatSoundsLogRoot;                                          // 0x0700   (0x0008)  
	class UListView*                                   StatSoundsIndex_ListView;                                   // 0x0708   (0x0008)  
	class UListView*                                   StatSoundsOption_ListView;                                  // 0x0710   (0x0008)  
	class UListView*                                   StatSoundsClass_ListView;                                   // 0x0718   (0x0008)  
	class UListView*                                   StatSoundsPath_ListView;                                    // 0x0720   (0x0008)  
	class UVerticalBox*                                StatWaveLogRoot;                                            // 0x0728   (0x0008)  
	class UListView*                                   StatWaveIndex_ListView;                                     // 0x0730   (0x0008)  
	class UListView*                                   StatWaveOption_ListView;                                    // 0x0738   (0x0008)  
	class UListView*                                   StatWavePath_ListView;                                      // 0x0740   (0x0008)  
	class UVerticalBox*                                StatCueLogRoot;                                             // 0x0748   (0x0008)  
	class UListView*                                   StatCueIndex_ListView;                                      // 0x0750   (0x0008)  
	class UListView*                                   StatCueOption_ListView;                                     // 0x0758   (0x0008)  
	class UListView*                                   StatCuePath_ListView;                                       // 0x0760   (0x0008)  
	class UVerticalBox*                                StatVibrationLogRoot;                                       // 0x0768   (0x0008)  
	class UListView*                                   StatVibrationIndex_ListView;                                // 0x0770   (0x0008)  
	class UListView*                                   StatVibrationOption_ListView;                               // 0x0778   (0x0008)  
	class UListView*                                   StatVibrationPath_ListView;                                 // 0x0780   (0x0008)  
	class UVerticalBox*                                StatForceFeedbackLogRoot;                                   // 0x0788   (0x0008)  
	class UListView*                                   StatForceFeedbackIndex_ListView;                            // 0x0790   (0x0008)  
	class UListView*                                   StatForceFeedbackLeftLarge_ListView;                        // 0x0798   (0x0008)  
	class UListView*                                   StatForceFeedbackLeftSmall_ListView;                        // 0x07A0   (0x0008)  
	class UListView*                                   StatForceFeedbackRightLarge_ListView;                       // 0x07A8   (0x0008)  
	class UListView*                                   StatForceFeedbackRightSmall_ListView;                       // 0x07B0   (0x0008)  
	class UListView*                                   StatForceFeedbackPath_ListView;                             // 0x07B8   (0x0008)  
};

/// Class /Script/SB.SBSoundEventVolume
/// Size: 0x0340 (832 bytes) (0x000318 - 0x000340) align n/a MaxSize: 0x0340
class ASBSoundEventVolume : public AVolume
{ 
public:
	FName                                              SoundEventAlias;                                            // 0x0318   (0x0008)  
	float                                              Priority;                                                   // 0x0320   (0x0004)  
	FVector                                            LevelObjOrigin;                                             // 0x0324   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0330   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x033C   (0x0004)  MISSED
};

/// Class /Script/SB.SBSoundNodeConcatenator
/// Size: 0x0068 (104 bytes) (0x000048 - 0x000068) align n/a MaxSize: 0x0068
class USBSoundNodeConcatenator : public USoundNode
{ 
public:
	TArray<float>                                      InputVolume;                                                // 0x0048   (0x0010)  
	float                                              IgnoreRemainTimeSliceToNext;                                // 0x0058   (0x0004)  
	float                                              OverlapTime;                                                // 0x005C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/SB.SBSoundNodeConditionBranch
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000050) align n/a MaxSize: 0x0050
class USBSoundNodeConditionBranch : public USoundNode
{ 
public:
	ESBSoundNodeConditionBranchType                    ConditionType;                                              // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/SB.SBSoundNodeFadeSwitch
/// Size: 0x0060 (96 bytes) (0x000048 - 0x000060) align n/a MaxSize: 0x0060
class USBSoundNodeFadeSwitch : public USoundNode
{ 
public:
	FName                                              IntParameterName;                                           // 0x0048   (0x0008)  
	float                                              FadeInDuration;                                             // 0x0050   (0x0004)  
	float                                              FadeOutDuration;                                            // 0x0054   (0x0004)  
	bool                                               bKeepPlayTimeWhenSwitch;                                    // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/SB.SBSoundNodeHighPassFilter
/// Size: 0x0060 (96 bytes) (0x000048 - 0x000060) align n/a MaxSize: 0x0060
class USBSoundNodeHighPassFilter : public USoundNode
{ 
public:
	ESBHighPassFilterSoundNodeType                     FilterType;                                                 // 0x0048   (0x0004)  
	float                                              HighPassFilterMin_Replace;                                  // 0x004C   (0x0004)  
	float                                              HighPassFilterMax_Replace;                                  // 0x0050   (0x0004)  
	float                                              HighPassFilterMin_Multiply;                                 // 0x0054   (0x0004)  
	float                                              HighPassFilterMax_Multiply;                                 // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/SB.SBSoundNodeLoopingMixer
/// Size: 0x0058 (88 bytes) (0x000048 - 0x000058) align n/a MaxSize: 0x0058
class USBSoundNodeLoopingMixer : public USoundNode
{ 
public:
	TArray<float>                                      InputVolume;                                                // 0x0048   (0x0010)  
};

/// Class /Script/SB.SBSoundNodeLowPassFilter
/// Size: 0x0060 (96 bytes) (0x000048 - 0x000060) align n/a MaxSize: 0x0060
class USBSoundNodeLowPassFilter : public USoundNode
{ 
public:
	ESBLowPassFilterSoundNodeType                      FilterType;                                                 // 0x0048   (0x0004)  
	float                                              LowPassFilterMin_Replace;                                   // 0x004C   (0x0004)  
	float                                              LowPassFilterMax_Replace;                                   // 0x0050   (0x0004)  
	float                                              LowPassFilterMin_Multiply;                                  // 0x0054   (0x0004)  
	float                                              LowPassFilterMax_Multiply;                                  // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/SB.SBSoundNodeParamFade
/// Size: 0x0060 (96 bytes) (0x000048 - 0x000060) align n/a MaxSize: 0x0060
class USBSoundNodeParamFade : public USoundNode
{ 
public:
	FName                                              ParamName;                                                  // 0x0048   (0x0008)  
	float                                              ParamDefault;                                               // 0x0050   (0x0004)  
	float                                              StartParam;                                                 // 0x0054   (0x0004)  
	float                                              EndParam;                                                   // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/SB.SBSoundNodeParamVolumeCurve
/// Size: 0x00E0 (224 bytes) (0x000048 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBSoundNodeParamVolumeCurve : public USoundNode
{ 
public:
	FName                                              ParamName;                                                  // 0x0048   (0x0008)  
	float                                              ParamDefault;                                               // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FRuntimeFloatCurve                                 VolumeCurve;                                                // 0x0058   (0x0088)  
};

/// Class /Script/SB.SBSoundNodeProcedural
/// Size: 0x0070 (112 bytes) (0x000048 - 0x000070) align n/a MaxSize: 0x0070
class USBSoundNodeProcedural : public USoundNode
{ 
public:
	float                                              Volume;                                                     // 0x0048   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	class USBSoundProcedural*                          ProceduralSound;                                            // 0x0050   (0x0008)  
	class USBSoundProceduralAsset*                     ProceduralSoundAsset;                                       // 0x0058   (0x0008)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0060   (0x0010)  MISSED
};

/// Class /Script/SB.SBSoundOcclusionActor
/// Size: 0x0370 (880 bytes) (0x0002C8 - 0x000370) align n/a MaxSize: 0x0370
class ASBSoundOcclusionActor : public AActor
{ 
public:
	ESBSoundOcclusionActorShapeType                    ShapeType;                                                  // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x02C9   (0x0003)  MISSED
	FVector                                            BoxExtent;                                                  // 0x02CC   (0x000C)  
	float                                              SphereRadius;                                               // 0x02D8   (0x0004)  
	float                                              CapsuleRadius;                                              // 0x02DC   (0x0004)  
	float                                              CapsuleHalfHeight;                                          // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x02E4   (0x0004)  MISSED
	class UPrimitiveComponent*                         CollisionComponent;                                         // 0x02E8   (0x0008)  
	unsigned char                                      UnknownData05_6[0x70];                                      // 0x02F0   (0x0070)  MISSED
	FLinearColor                                       SelectionColor;                                             // 0x0360   (0x0010)  
};

/// Class /Script/SB.SBSoundProceduralSimple
/// Size: 0x0560 (1376 bytes) (0x0003D8 - 0x000560) align n/a MaxSize: 0x0560
class USBSoundProceduralSimple : public USBSoundProcedural
{ 
public:
	class USBSoundProceduralSimpleAsset*               ByCreatedSoundAsset;                                        // 0x03D8   (0x0008)  
	unsigned char                                      UnknownData01_6[0x160];                                     // 0x03E0   (0x0160)  MISSED
	class USoundWave*                                  SoundWave;                                                  // 0x0540   (0x0008)  
	FSBSoundPCMData                                    PCMData;                                                    // 0x0548   (0x0018)  
};

/// Class /Script/SB.SBSoundProceduralSimpleAsset
/// Size: 0x0068 (104 bytes) (0x000048 - 0x000068) align n/a MaxSize: 0x0068
class USBSoundProceduralSimpleAsset : public USBSoundProceduralAsset
{ 
public:
	class USoundWave*                                  SoundWave;                                                  // 0x0048   (0x0008)  
	FSBSoundPCMData                                    PCMData;                                                    // 0x0050   (0x0018)  
};

/// Class /Script/SB.SBQuartzEventObserverV2
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class USBQuartzEventObserverV2 : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED

	/// Functions
	// Function /Script/SB.SBQuartzEventObserverV2.ExecuteQuartzCommandEvent
	constexpr static const FunctionPointer<USBQuartzEventObserverV2, void, const EQuartzCommandDelegateSubType, const FName> ExecuteQuartzCommandEvent = { 0x27f8700, 0 }; 
	// Function /Script/SB.SBQuartzEventObserverV2.ExecuteMetronomeEvent
	constexpr static const FunctionPointer<USBQuartzEventObserverV2, void, const FName, const EQuartzCommandQuantization, const int32_t, const int32_t, const float> ExecuteMetronomeEvent = { 0x27f88a0, 1 }; 
};

/// Struct /Script/SB.SBSoundControlData
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBSoundControlData
{ 
	float                                              FadeTime;                                                   // 0x0000   (0x0004)  
};

/// Class /Script/SB.SBSoundVolumeData
/// Size: 0x00D0 (208 bytes) (0x000030 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBSoundVolumeData : public UDataAsset
{ 
public:
	TMap<ESBSoundVolumeControlType, FSBSoundControlData> SoundControlDataMap;                                      // 0x0030   (0x0050)  
	TMap<ESBSoundVolumeChannel, class USoundClass*>    SoundChannelData;                                           // 0x0080   (0x0050)  
};

/// Class /Script/SB.SBSpawnArea
/// Size: 0x0338 (824 bytes) (0x0002C8 - 0x000338) align n/a MaxSize: 0x0338
class ASBSpawnArea : public AActor
{ 
public:
	FName                                              SpawnAreaName;                                              // 0x02C8   (0x0008)  
	class UBoxComponent*                               AreaBox;                                                    // 0x02D0   (0x0008)  
	int32_t                                            SpawnLocationGridX;                                         // 0x02D8   (0x0004)  
	int32_t                                            SpawnLocationGridY;                                         // 0x02DC   (0x0004)  
	int32_t                                            SpawnLocationGridZ;                                         // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02E4   (0x0004)  MISSED
	TMap<int32_t, bool>                                ValidSpawnMap;                                              // 0x02E8   (0x0050)  
};

/// Struct /Script/SB.SBSpawnLocationInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FSBSpawnLocationInfo
{ 
	float                                              LocalDistance;                                              // 0x0000   (0x0004)  
	FRotator                                           LocalRotation;                                              // 0x0004   (0x000C)  
	FVector                                            LocalDirForDistance;                                        // 0x0010   (0x000C)  
};

/// Class /Script/SB.SBSpawnFormationData
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class USBSpawnFormationData : public UDataAsset
{ 
public:
	TArray<FSBSpawnLocationInfo>                       FormationLocationInfos;                                     // 0x0030   (0x0010)  
};

/// Struct /Script/SB.SBAssetPicker
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBAssetPicker
{ 
	FName                                              Alias;                                                      // 0x0000   (0x0008)  
	FString                                            BaseResourcePath;                                           // 0x0008   (0x0010)  
	FString                                            ResultResourcePath;                                         // 0x0018   (0x0010)  
	bool                                               bReadOnly;                                                  // 0x0028   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	FName                                              Custom_BrowseClassName;                                     // 0x002C   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/SB.SBSpawnPoint
/// Size: 0x0390 (912 bytes) (0x0002F8 - 0x000390) align n/a MaxSize: 0x0390
class ASBSpawnPoint : public ASBNavigationObjectBase
{ 
public:
	FName                                              SpawnPointName;                                             // 0x02F8   (0x0008)  
	class USBSpawnFormationData*                       FormationData;                                              // 0x0300   (0x0008)  
	FString                                            Description;                                                // 0x0308   (0x0010)  
	TArray<FName>                                      ActorActiveVolumeNameArray;                                 // 0x0318   (0x0010)  
	FSBAssetPicker                                     AnimationPreview;                                           // 0x0328   (0x0038)  
	float                                              AnimationPreviewTime;                                       // 0x0360   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0364   (0x0004)  MISSED
	FString                                            CurrentMeshAssetPath;                                       // 0x0368   (0x0010)  
	TArray<class USceneComponent*>                     LinkTargetComponentList;                                    // 0x0378   (0x0010)  
	bool                                               bIsSpawnToWallOrCeiling;                                    // 0x0388   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0389   (0x0007)  MISSED
};

/// Class /Script/SB.SBSpiderNavigationComponent
/// Size: 0x0390 (912 bytes) (0x000260 - 0x000390) align n/a MaxSize: 0x0390
class USBSpiderNavigationComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData02_8[0x120];                                     // 0x0260   (0x0120)  MISSED
	bool                                               bUseDebug;                                                  // 0x0380   (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x0381   (0x000F)  MISSED
};

/// Struct /Script/SB.SpiderNavigationDataHeader
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FSpiderNavigationDataHeader
{ 
	int32_t                                            Version;                                                    // 0x0000   (0x0004)  
	float                                              GridStepSize;                                               // 0x0004   (0x0004)  
	float                                              TracerRadius;                                               // 0x0008   (0x0004)  
	float                                              BounceNavigationDistance;                                   // 0x000C   (0x0004)  
	float                                              TraceDistanceModificator;                                   // 0x0010   (0x0004)  
	float                                              ClosePointsFilterModificator;                               // 0x0014   (0x0004)  
	float                                              ConnectionSphereRadiusModificator;                          // 0x0018   (0x0004)  
	float                                              TraceDistanceForEdgesModificator;                           // 0x001C   (0x0004)  
	float                                              EgdeDeviationModificator;                                   // 0x0020   (0x0004)  
	unsigned char                                      UnknownData03_6[0xC];                                       // 0x0024   (0x000C)  MISSED
	FTransform                                         Transform;                                                  // 0x0030   (0x0030)  
	FVector                                            VolumeStartLocation;                                        // 0x0060   (0x000C)  
	FVector                                            VolumeEndLocation;                                          // 0x006C   (0x000C)  
	FIntVector                                         VolumeLength;                                               // 0x0078   (0x000C)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	TArray<uint32_t>                                   InvalidPlaceVolumeUniqueIDs;                                // 0x0088   (0x0010)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x0098   (0x0008)  MISSED
};

/// Struct /Script/SB.SpiderNavigationPointData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSpiderNavigationPointData
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	FVector                                            Location;                                                   // 0x0004   (0x000C)  
	FVector                                            Normal;                                                     // 0x0010   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<int32_t>                                    NeighborsID;                                                // 0x0020   (0x0010)  
};

/// Class /Script/SB.SBSpiderNavigationDataAsset
/// Size: 0x00E0 (224 bytes) (0x000030 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBSpiderNavigationDataAsset : public UDataAsset
{ 
public:
	FSpiderNavigationDataHeader                        Header;                                                     // 0x0030   (0x00A0)  
	TArray<FSpiderNavigationPointData>                 PointDatas;                                                 // 0x00D0   (0x0010)  
};

/// Class /Script/SB.SBSpiderNavigationVolume
/// Size: 0x0440 (1088 bytes) (0x000318 - 0x000440) align n/a MaxSize: 0x0440
class ASBSpiderNavigationVolume : public AVolume
{ 
public:
	FString                                            Name;                                                       // 0x0318   (0x0010)  
	TArray<TWeakObjectPtr<ASBSpiderNavigationVolume_Invalid*>> InvalidPlaceVolumes;                                // 0x0328   (0x0010)  
	bool                                               bDebug_ShowNormal;                                          // 0x0338   (0x0001)  
	bool                                               bDebug_ShowNeighbors;                                       // 0x0339   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x033A   (0x0002)  MISSED
	float                                              GridStepSize;                                               // 0x033C   (0x0004)  
	float                                              TracerRadius;                                               // 0x0340   (0x0004)  
	float                                              BounceNavigationDistance;                                   // 0x0344   (0x0004)  
	float                                              TraceDistanceModificator;                                   // 0x0348   (0x0004)  
	float                                              ClosePointsFilterModificator;                               // 0x034C   (0x0004)  
	float                                              ConnectionSphereRadiusModificator;                          // 0x0350   (0x0004)  
	float                                              TraceDistanceForEdgesModificator;                           // 0x0354   (0x0004)  
	float                                              EgdeDeviationModificator;                                   // 0x0358   (0x0004)  
	FVector                                            VolumeStartLocation;                                        // 0x035C   (0x000C)  
	FVector                                            VolumeEndLocation;                                          // 0x0368   (0x000C)  
	FIntVector                                         VolumeLength;                                               // 0x0374   (0x000C)  
	int32_t                                            IDAllocator;                                                // 0x0380   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0384   (0x0004)  MISSED
	TArray<FVector>                                    TracerLocations;                                            // 0x0388   (0x0010)  
	TArray<class ASBSpiderNavigationVolume_Point*>     NavigationVolumePoints;                                     // 0x0398   (0x0010)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x03A8   (0x0010)  MISSED
	class USBSpiderNavigationDataAsset*                NavigationDataAsset;                                        // 0x03B8   (0x0008)  
	TMap<int32_t, int32_t>                             NavigationDataIndex;                                        // 0x03C0   (0x0050)  
	unsigned char                                      UnknownData07_7[0x30];                                      // 0x0410   (0x0030)  MISSED

	/// Functions
	// Function /Script/SB.SBSpiderNavigationVolume.SaveGrid
	constexpr static const FunctionPointer<ASBSpiderNavigationVolume, void> SaveGrid = { 0x11615e0, 0 }; 
	// Function /Script/SB.SBSpiderNavigationVolume.OnEndOverlapActor
	constexpr static const FunctionPointer<ASBSpiderNavigationVolume, void, const AActor*, const AActor*> OnEndOverlapActor = { 0x27fba50, 1 }; 
	// Function /Script/SB.SBSpiderNavigationVolume.OnBeginOverlapActor
	constexpr static const FunctionPointer<ASBSpiderNavigationVolume, void, const AActor*, const AActor*> OnBeginOverlapActor = { 0x27fbbb0, 2 }; 
	// Function /Script/SB.SBSpiderNavigationVolume.DrawDebugRelations
	constexpr static const FunctionPointer<ASBSpiderNavigationVolume, void, const float> DrawDebugRelations = { 0x26bf920, 3 }; 
	// Function /Script/SB.SBSpiderNavigationVolume.BuildGrid
	constexpr static const FunctionPointer<ASBSpiderNavigationVolume, bool, const bool> BuildGrid = { 0x27fb960, 4 }; 
};

/// Class /Script/SB.SBSpiderNavigationVolume_Point
/// Size: 0x0300 (768 bytes) (0x0002C8 - 0x000300) align n/a MaxSize: 0x0300
class ASBSpiderNavigationVolume_Point : public AActor
{ 
public:
	unsigned char                                      UnknownData01_1[0x38];                                      // 0x02C8   (0x0038)  MISSED
};

/// Class /Script/SB.SBSpiderNavigationVolume_Edge
/// Size: 0x0300 (768 bytes) (0x000300 - 0x000300) align n/a MaxSize: 0x0300
class ASBSpiderNavigationVolume_Edge : public ASBSpiderNavigationVolume_Point
{ 
public:
};

/// Class /Script/SB.SBSpiderNavigationVolume_Invalid
/// Size: 0x0318 (792 bytes) (0x000318 - 0x000318) align n/a MaxSize: 0x0318
class ASBSpiderNavigationVolume_Invalid : public AVolume
{ 
public:
};

/// Class /Script/SB.SBSpiderNavigationVolume_Tracer
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ASBSpiderNavigationVolume_Tracer : public AActor
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x02C8   (0x0008)  MISSED
};

/// Class /Script/SB.SBSplineCameraActor
/// Size: 0x0940 (2368 bytes) (0x000900 - 0x000940) align n/a MaxSize: 0x0940
class ASBSplineCameraActor : public ACineCameraActor
{ 
public:
	class USplineComponent*                            TargetSpline;                                               // 0x0900   (0x0008)  
	class USBSplineCameraComponent*                    CameraSpline;                                               // 0x0908   (0x0008)  
	bool                                               bUseCameraRotationData;                                     // 0x0910   (0x0001)  
	bool                                               bUseCameraCurrentFocalLength;                               // 0x0911   (0x0001)  
	bool                                               bUseCameraManualFocusDistance;                              // 0x0912   (0x0001)  
	unsigned char                                      UnknownData03_6[0x5];                                       // 0x0913   (0x0005)  MISSED
	class USceneComponent*                             CameraRoot;                                                 // 0x0918   (0x0008)  
	float                                              CurrentProgress;                                            // 0x0920   (0x0004)  
	float                                              StartProgress;                                              // 0x0924   (0x0004)  
	float                                              EditorViewProgress;                                         // 0x0928   (0x0004)  
	bool                                               GamePlayDummyHide;                                          // 0x092C   (0x0001)  
	bool                                               PlayerAutoTracking;                                         // 0x092D   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x092E   (0x0002)  MISSED
	class USceneComponent*                             TargetDummy;                                                // 0x0930   (0x0008)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x0938   (0x0008)  MISSED
};

/// Class /Script/SB.SBSplineCameraMetadata
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class USBSplineCameraMetadata : public USplineMetadata
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/SB.SBSplineCameraComponent
/// Size: 0x0680 (1664 bytes) (0x000630 - 0x000680) align n/a MaxSize: 0x0680
class USBSplineCameraComponent : public USplineComponent
{ 
public:
	class USBSplineCameraMetadata*                     SplineMetadata;                                             // 0x0630   (0x0008)  
	FInterpCurveQuat                                   CameraRotation;                                             // 0x0638   (0x0018)  
	FInterpCurveFloat                                  CameraCurrentFocalLength;                                   // 0x0650   (0x0018)  
	FInterpCurveFloat                                  CameraManualFocusDistance;                                  // 0x0668   (0x0018)  
};

/// Class /Script/SB.SBSplineCameraSpringActor
/// Size: 0x0980 (2432 bytes) (0x000940 - 0x000980) align n/a MaxSize: 0x0980
class ASBSplineCameraSpringActor : public ASBSplineCameraActor
{ 
public:
	bool                                               bUseCamControl;                                             // 0x0940   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0941   (0x0003)  MISSED
	float                                              MaxCamControlDegree;                                        // 0x0944   (0x0004)  
	float                                              WaitInputRollback;                                          // 0x0948   (0x0004)  
	float                                              RemainRollbackTime;                                         // 0x094C   (0x0004)  
	TEnumAsByte<EEasingFunc>                           RollbackEasingFunc;                                         // 0x0950   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0951   (0x0007)  MISSED
	class USpringArmComponent*                         CameraBoom;                                                 // 0x0958   (0x0008)  
	float                                              RunningWaitInput;                                           // 0x0960   (0x0004)  
	float                                              RunningRemainRollback;                                      // 0x0964   (0x0004)  
	FRotator                                           LastBoomRotation;                                           // 0x0968   (0x000C)  
	FRotator                                           LastPCRot;                                                  // 0x0974   (0x000C)  
};

/// Class /Script/SB.SBSplineTexture
/// Size: 0x0300 (768 bytes) (0x0002C8 - 0x000300) align n/a MaxSize: 0x0300
class ASBSplineTexture : public AActor
{ 
public:
	int32_t                                            FrameCount;                                                 // 0x02C8   (0x0004)  
	bool                                               bUseConstantVelocity;                                       // 0x02CC   (0x0001)  
	TEnumAsByte<ETextureRenderTargetFormat>            TextureRenderTargetFormat;                                  // 0x02CD   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x02CE   (0x0002)  MISSED
	class USplineComponent*                            SplineComponent;                                            // 0x02D0   (0x0008)  
	class UTextureRenderTarget2D*                      SplineTexture;                                              // 0x02D8   (0x0008)  
	int32_t                                            TextureSize;                                                // 0x02E0   (0x0004)  
	FVector                                            MinLocation;                                                // 0x02E4   (0x000C)  
	FVector                                            MaxLocation;                                                // 0x02F0   (0x000C)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x02FC   (0x0004)  MISSED

	/// Functions
	// Function /Script/SB.SBSplineTexture.Bake
	constexpr static const FunctionPointer<ASBSplineTexture, void> Bake = { 0x27fd900, 0 }; 
};

/// Struct /Script/SB.CameraDollySplineExtra
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FCameraDollySplineExtra
{ 
	TEnumAsByte<ESBCameraDollySplineExtra>             Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class USplineComponent*                            DollySplineComponent;                                       // 0x0008   (0x0008)  
	bool                                               bActive;                                                    // 0x0010   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              BlendDuration;                                              // 0x0014   (0x0004)  
	bool                                               bOverrideBlendDuration;                                     // 0x0018   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              OverrideProbeSize;                                          // 0x001C   (0x0004)  
	bool                                               bOverrideProbeSize;                                         // 0x0020   (0x0001)  
	unsigned char                                      UnknownData07_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/SB.CameraDollySplineBlend
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FCameraDollySplineBlend
{ 
	int32_t                                            Type;                                                       // 0x0000   (0x0004)  
	float                                              RemainDuration;                                             // 0x0004   (0x0004)  
	float                                              InitialDuration;                                            // 0x0008   (0x0004)  
	FVector                                            LastLocation;                                               // 0x000C   (0x000C)  
};

/// Class /Script/SB.SBSpringArmComponent
/// Size: 0x03F0 (1008 bytes) (0x0002F0 - 0x0003F0) align n/a MaxSize: 0x03F0
class USBSpringArmComponent : public USpringArmComponent
{ 
public:
	float                                              CameraDollyAlpha;                                           // 0x02F0   (0x0004)  
	bool                                               bUseCameraDolly;                                            // 0x02F4   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x02F5   (0x0003)  MISSED
	class USBCameraDollyTrackData*                     CameraDollyTrackData;                                       // 0x02F8   (0x0008)  
	class USplineComponent*                            CameraDollyPositionSpline;                                  // 0x0300   (0x0008)  
	TArray<FCameraDollySplineExtra>                    CameraDollyPositionSplineExtra;                             // 0x0308   (0x0010)  
	FVector                                            CurrentArmLocation;                                         // 0x0318   (0x000C)  
	FVector                                            CurrentDollyDirection;                                      // 0x0324   (0x000C)  
	float                                              CurrentDollyFov;                                            // 0x0330   (0x0004)  
	float                                              CurrentArmLength;                                           // 0x0334   (0x0004)  
	float                                              CurrentUpdateArmLengthSpeed;                                // 0x0338   (0x0004)  
	bool                                               bNeedUpdateArmLength;                                       // 0x033C   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x033D   (0x0003)  MISSED
	FVector                                            PreviousCamLoc;                                             // 0x0340   (0x000C)  
	float                                              CurrentCamRotateByCharAccelRatio;                           // 0x034C   (0x0004)  
	float                                              CurrentCamRotateByCharAccelRotAddPer10Degree;               // 0x0350   (0x0004)  
	FVector                                            CustomOffset;                                               // 0x0354   (0x000C)  
	float                                              CustomOffsetBlendTime;                                      // 0x0360   (0x0004)  
	FVector                                            CurrentCustomOffset;                                        // 0x0364   (0x000C)  
	bool                                               bLastUseCharacterControllerRot;                             // 0x0370   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0371   (0x0003)  MISSED
	float                                              RemainBlendCamera;                                          // 0x0374   (0x0004)  
	float                                              TotalBlendCameraDuration;                                   // 0x0378   (0x0004)  
	float                                              RemainBlockRotateByCharacterAccel;                          // 0x037C   (0x0004)  
	bool                                               bEnableCameraLagByCharControl : 1;                          // 0x0380:0 (0x0001)  
	bool                                               bEnableCameraRotationLagByCharControl : 1;                  // 0x0380:1 (0x0001)  
	unsigned char                                      UnknownData09_5[0x7];                                       // 0x0381   (0x0007)  MISSED
	class UCurveFloat*                                 PostZOffsetCurveByArmLength;                                // 0x0388   (0x0008)  
	class UCurveFloat*                                 YawAutoRotateSpeedByDirDiff;                                // 0x0390   (0x0008)  
	class UCurveFloat*                                 YawAutoRotateSpeedByDirDiffAtSwim;                          // 0x0398   (0x0008)  
	float                                              CameraMaxClampAtInteraction;                                // 0x03A0   (0x0004)  
	float                                              CurrentCameraMaxClampAtInteraction;                         // 0x03A4   (0x0004)  
	float                                              LockOnProbeSize;                                            // 0x03A8   (0x0004)  
	float                                              CurrentPostZOffset;                                         // 0x03AC   (0x0004)  
	float                                              CollisionBoundHeightUp;                                     // 0x03B0   (0x0004)  
	float                                              CollisionBoundHeightDown;                                   // 0x03B4   (0x0004)  
	int32_t                                            CollisionBoundTypeUp;                                       // 0x03B8   (0x0004)  
	int32_t                                            CollisionBoundTypeDown;                                     // 0x03BC   (0x0004)  
	float                                              RemainBlendDollyAlpha;                                      // 0x03C0   (0x0004)  
	float                                              BlendDollyAlphaDuration;                                    // 0x03C4   (0x0004)  
	float                                              BlendTargetDollyAlpha;                                      // 0x03C8   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x03CC   (0x0004)  MISSED
	TArray<FCameraDollySplineBlend>                    DollyBlends;                                                // 0x03D0   (0x0010)  
	int32_t                                            CurrentDollyMode;                                           // 0x03E0   (0x0004)  
	bool                                               bResetThisFrame;                                            // 0x03E4   (0x0001)  
	unsigned char                                      UnknownData11_7[0xB];                                       // 0x03E5   (0x000B)  MISSED
};

/// Class /Script/SB.SBStreamingLevelLoadingBarrierVolumeVisualizerComponent
/// Size: 0x0260 (608 bytes) (0x000260 - 0x000260) align n/a MaxSize: 0x0260
class USBStreamingLevelLoadingBarrierVolumeVisualizerComponent : public USceneComponent
{ 
public:
};

/// Class /Script/SB.SBStreamingLevelLoadingBarrierVolume
/// Size: 0x0368 (872 bytes) (0x000318 - 0x000368) align n/a MaxSize: 0x0368
class ASBStreamingLevelLoadingBarrierVolume : public AVolume
{ 
public:
	TArray<FName>                                      StreamingLevelNames;                                        // 0x0318   (0x0010)  
	float                                              WaitDistance;                                               // 0x0328   (0x0004)  
	float                                              KeepDistance;                                               // 0x032C   (0x0004)  
	FVector                                            BlockingDirection;                                          // 0x0330   (0x000C)  
	unsigned char                                      UnknownData01_7[0x2C];                                      // 0x033C   (0x002C)  MISSED
};

/// Class /Script/SB.SBStringTableImportCommandlet
/// Size: 0x00A0 (160 bytes) (0x000080 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBStringTableImportCommandlet : public UCommandlet
{ 
public:
	unsigned char                                      UnknownData01_1[0x20];                                      // 0x0080   (0x0020)  MISSED
};

/// Struct /Script/SB.SBStudioSequenceResourceData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBStudioSequenceResourceData
{ 
	FName                                              ResourceTag;                                                // 0x0000   (0x0008)  
	TWeakObjectPtr<class ULevelSequence*>              SequencePath;                                               // 0x0008   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0010   (0x0020)  MISSED
	bool                                               bUseFinishSplineSync;                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              FinishSplineTag;                                            // 0x0034   (0x0008)  
	float                                              FinishSplineProgress;                                       // 0x003C   (0x0004)  
};

/// Class /Script/SB.SBStudioSequenceDataAsset
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class USBStudioSequenceDataAsset : public UDataAsset
{ 
public:
	TMap<FName, FSBStudioSequenceResourceData>         SequenceResourceMap;                                        // 0x0030   (0x0050)  
};

/// Class /Script/SB.SBStudioSequenceObserver
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000060) align n/a MaxSize: 0x0060
class USBStudioSequenceObserver : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x38];                                      // 0x0028   (0x0038)  MISSED

	/// Functions
	// Function /Script/SB.SBStudioSequenceObserver.OnFinishLevelSequence
	constexpr static const FunctionPointer<USBStudioSequenceObserver, void> OnFinishLevelSequence = { 0x27ff1b0, 0 }; 
};

/// Struct /Script/SB.SBStudioShowResourceData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBStudioShowResourceData
{ 
	FName                                              ResourceTag;                                                // 0x0000   (0x0008)  
	TWeakObjectPtr<class USBShowData*>                 ShowPath;                                                   // 0x0008   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0010   (0x0020)  MISSED
};

/// Class /Script/SB.SBStudioShowDataAsset
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class USBStudioShowDataAsset : public UDataAsset
{ 
public:
	TMap<FName, FSBStudioShowResourceData>             ShowResourceMap;                                            // 0x0030   (0x0050)  
};

/// Class /Script/SB.SBStudioActor
/// Size: 0x0A50 (2640 bytes) (0x0002C8 - 0x000A50) align n/a MaxSize: 0x0A50
class ASBStudioActor : public AActor
{ 
public:
	unsigned char                                      UnknownData17_8[0x8];                                       // 0x02C8   (0x0008)  MISSED
	TArray<FName>                                      MeshInfoTagList;                                            // 0x02D0   (0x0010)  
	TArray<FSBMeshInfo>                                MeshInfoList;                                               // 0x02E0   (0x0010)  
	float                                              CameraSplineMoveFactor;                                     // 0x02F0   (0x0004)  
	float                                              CameraSplineDampingAlpha;                                   // 0x02F4   (0x0004)  
	float                                              CameraRotationDampingAlpha;                                 // 0x02F8   (0x0004)  
	unsigned char                                      UnknownData18_6[0x54];                                      // 0x02FC   (0x0054)  MISSED
	class USceneComponent*                             Root;                                                       // 0x0350   (0x0008)  
	class USBSkeletalMeshComponent*                    MeshBody;                                                   // 0x0358   (0x0008)  
	TMap<FName, FTransform>                            MeshBodyTMMap;                                              // 0x0360   (0x0050)  
	FName                                              StudioTag;                                                  // 0x03B0   (0x0008)  
	unsigned char                                      UnknownData19_6[0x50];                                      // 0x03B8   (0x0050)  MISSED
	bool                                               bStateEnter;                                                // 0x0408   (0x0001)  
	unsigned char                                      UnknownData20_6[0x7];                                       // 0x0409   (0x0007)  MISSED
	float                                              ExitTryRemainTime;                                          // 0x0410   (0x0004)  
	FGuid                                              ExitLoadingGuid;                                            // 0x0414   (0x0010)  
	TWeakObjectPtr<class AActor*>                      LastViewTarget;                                             // 0x0424   (0x0008)  
	bool                                               bLastCameraMoveableWhenPaused;                              // 0x042C   (0x0001)  
	unsigned char                                      UnknownData21_6[0x3];                                       // 0x042D   (0x0003)  MISSED
	int32_t                                            RemainSetViewTargetCount;                                   // 0x0430   (0x0004)  
	FName                                              BodyCustomAnimNodeName;                                     // 0x0434   (0x0008)  
	unsigned char                                      UnknownData22_6[0x4];                                       // 0x043C   (0x0004)  MISSED
	TMap<FName, FName>                                 BodyCustomAnimNodeNameMap;                                  // 0x0440   (0x0050)  
	FName                                              BodyCustomAnimAdditiveNodeName;                             // 0x0490   (0x0008)  
	TMap<TEnumAsByte<ESBSkelMeshSlot>, FName>          MeshSlotCustomAnimNodeNameMap;                              // 0x0498   (0x0050)  
	TMap<FName, FName>                                 TagCustomAnimNodeNameMap;                                   // 0x04E8   (0x0050)  
	FName                                              DefaultSBSkeletalTag;                                       // 0x0538   (0x0008)  
	unsigned char                                      UnknownData23_6[0x50];                                      // 0x0540   (0x0050)  MISSED
	class UClass*                                      TemplateSequenceActor;                                      // 0x0590   (0x0008)  
	class USBStudioSequenceDataAsset*                  SequenceResourceDataAsset;                                  // 0x0598   (0x0008)  
	TMap<FName, TWeakObjectPtr<USBStudioSequenceObserver*>> ActiveSequenceMap;                                     // 0x05A0   (0x0050)  
	float                                              KawaiiPhysicsAlpha;                                         // 0x05F0   (0x0004)  
	bool                                               bShortPonyTail;                                             // 0x05F4   (0x0001)  
	unsigned char                                      UnknownData24_6[0x53];                                      // 0x05F5   (0x0053)  MISSED
	class USBStudioShowDataAsset*                      ShowResourceDataAsset;                                      // 0x0648   (0x0008)  
	unsigned char                                      UnknownData25_6[0xA0];                                      // 0x0650   (0x00A0)  MISSED
	class USceneComponent*                             ItemRoot;                                                   // 0x06F0   (0x0008)  
	TWeakObjectPtr<class ASBItem*>                     SpawnItemActor;                                             // 0x06F8   (0x0008)  
	FVector                                            SpawnItemOrigLocation;                                      // 0x0700   (0x000C)  
	FRotator                                           SpawnItemOrigRotation;                                      // 0x070C   (0x000C)  
	float                                              ItemRotationSpeed;                                          // 0x0718   (0x0004)  
	bool                                               bItemVisible;                                               // 0x071C   (0x0001)  
	bool                                               bEnableStudioTickableWhenPaused;                            // 0x071D   (0x0001)  
	bool                                               bLastActiveWaterPP;                                         // 0x071E   (0x0001)  
	unsigned char                                      UnknownData26_6[0x1];                                       // 0x071F   (0x0001)  MISSED
	TWeakObjectPtr<class UCameraComponent*>            CacheCameraCompoennt;                                       // 0x0720   (0x0008)  
	bool                                               bCaptureCameraPivot;                                        // 0x0728   (0x0001)  
	unsigned char                                      UnknownData27_6[0x7];                                       // 0x0729   (0x0007)  MISSED
	FTransform                                         CaptureCameraTM;                                            // 0x0730   (0x0030)  
	FTransform                                         CaptureCameraPivot1TM;                                      // 0x0760   (0x0030)  
	FTransform                                         CaptureCameraPivot2TM;                                      // 0x0790   (0x0030)  
	unsigned char                                      UnknownData28_6[0x50];                                      // 0x07C0   (0x0050)  MISSED
	float                                              TargetSplineProgress;                                       // 0x0810   (0x0004)  
	float                                              LastSplineProgress;                                         // 0x0814   (0x0004)  
	FName                                              LastSplineComponentTag;                                     // 0x0818   (0x0008)  
	float                                              TargetCameraRotationYaw;                                    // 0x0820   (0x0004)  
	float                                              LastCameraRotationYaw;                                      // 0x0824   (0x0004)  
	TArray<TWeakObjectPtr<USceneComponent*>>           CacheSplineRootArray;                                       // 0x0828   (0x0010)  
	TMap<FName, FSBPostProcessWeightedBlendables>      PostProcessWeightedBlendablesMap;                           // 0x0838   (0x0050)  
	bool                                               bCacheParentSpline;                                         // 0x0888   (0x0001)  
	unsigned char                                      UnknownData29_6[0xF7];                                      // 0x0889   (0x00F7)  MISSED
	int32_t                                            ClothResetCount;                                            // 0x0980   (0x0004)  
	FName                                              ClothResetComponentTag;                                     // 0x0984   (0x0008)  
	bool                                               bFirstClothReset;                                           // 0x098C   (0x0001)  
	unsigned char                                      UnknownData30_6[0xB];                                       // 0x098D   (0x000B)  MISSED
	bool                                               bDepthOfFieldCheckFocalDistance;                            // 0x0998   (0x0001)  
	bool                                               bEnableDepthOfFieldForceAllowSupportsSlightOutOfFocus;      // 0x0999   (0x0001)  
	unsigned char                                      UnknownData31_6[0x2];                                       // 0x099A   (0x0002)  MISSED
	float                                              ResetPhysicsBlnedTime;                                      // 0x099C   (0x0004)  
	float                                              ResetPhysicsHoldTime;                                       // 0x09A0   (0x0004)  
	float                                              RemainResetPhysics;                                         // 0x09A4   (0x0004)  
	FName                                              VisibleComponentTag;                                        // 0x09A8   (0x0008)  
	bool                                               bDisableIdleAdditiveAnim;                                   // 0x09B0   (0x0001)  
	unsigned char                                      UnknownData32_6[0x3];                                       // 0x09B1   (0x0003)  MISSED
	FName                                              IdleAdditiveAnimationVisibleComponentTag;                   // 0x09B4   (0x0008)  
	FName                                              DisableIdleAdditiveAnimVisibleComponentTag;                 // 0x09BC   (0x0008)  
	int32_t                                            InputMoveStopRemainCount;                                   // 0x09C4   (0x0004)  
	unsigned char                                      UnknownData33_7[0x88];                                      // 0x09C8   (0x0088)  MISSED

	/// Functions
	// Function /Script/SB.SBStudioActor.UpdateSkelMeshPosition
	constexpr static const FunctionPointer<ASBStudioActor, void> UpdateSkelMeshPosition = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBStudioActor.StopShow
	constexpr static const FunctionPointer<ASBStudioActor, void, const FName> StopShow = { 0x28001a0, 1 }; 
	// Function /Script/SB.SBStudioActor.StopLevelSequence
	constexpr static const FunctionPointer<ASBStudioActor, void, const FName> StopLevelSequence = { 0x28005b0, 2 }; 
	// Function /Script/SB.SBStudioActor.StopAllShow
	constexpr static const FunctionPointer<ASBStudioActor, void> StopAllShow = { 0x2800180, 3 }; 
	// Function /Script/SB.SBStudioActor.StopAllLevelSequence
	constexpr static const FunctionPointer<ASBStudioActor, void> StopAllLevelSequence = { 0x2800590, 4 }; 
	// Function /Script/SB.SBStudioActor.PlayStudioShow
	constexpr static const FunctionPointer<ASBStudioActor, bool, const FString> PlayStudioShow = { 0x27ffe80, 5 }; 
	// Function /Script/SB.SBStudioActor.PlayShow
	constexpr static const FunctionPointer<ASBStudioActor, bool, const FName, const FSBStudioSequenceParameter, const bool> PlayShow = { 0x2800280, 6 }; 
	// Function /Script/SB.SBStudioActor.PlayLevelSequence
	constexpr static const FunctionPointer<ASBStudioActor, bool, const FName, const FSBStudioSequenceParameter, const bool> PlayLevelSequence = { 0x2800690, 7 }; 
	// Function /Script/SB.SBStudioActor.NotifyBP_SetupTarget
	constexpr static const FunctionPointer<ASBStudioActor, void, const FName> NotifyBP_SetupTarget = { 0x2bbb090, 8 }; 
	// Function /Script/SB.SBStudioActor.NotifyBP_SetMesh
	constexpr static const FunctionPointer<ASBStudioActor, void, const FName, const TEnumAsByte<ESBSkelMeshSlot>> NotifyBP_SetMesh = { 0x2bbb090, 9 }; 
	// Function /Script/SB.SBStudioActor.NotifyBP_InputMoveStart
	constexpr static const FunctionPointer<ASBStudioActor, void> NotifyBP_InputMoveStart = { 0x2bbb090, 10 }; 
	// Function /Script/SB.SBStudioActor.NotifyBP_InputMoveEnd
	constexpr static const FunctionPointer<ASBStudioActor, void> NotifyBP_InputMoveEnd = { 0x2bbb090, 11 }; 
	// Function /Script/SB.SBStudioActor.ItemVisible
	constexpr static const FunctionPointer<ASBStudioActor, void, const bool, const bool> ItemVisible = { 0x27ff900, 12 }; 
	// Function /Script/SB.SBStudioActor.IsShortPonyTail
	constexpr static const FunctionPointer<ASBStudioActor, bool> IsShortPonyTail = { 0x27ff8c0, 13 }; 
	// Function /Script/SB.SBStudioActor.IsPlayingShow
	constexpr static const FunctionPointer<ASBStudioActor, bool, const FName> IsPlayingShow = { 0x2800090, 14 }; 
	// Function /Script/SB.SBStudioActor.IsPlayingLevelSequence
	constexpr static const FunctionPointer<ASBStudioActor, bool, const FName> IsPlayingLevelSequence = { 0x28004a0, 15 }; 
	// Function /Script/SB.SBStudioActor.IsPlayingAnyLevelSequence
	constexpr static const FunctionPointer<ASBStudioActor, bool> IsPlayingAnyLevelSequence = { 0x2800470, 16 }; 
	// Function /Script/SB.SBStudioActor.IsDisableIdleAdditiveAnim
	constexpr static const FunctionPointer<ASBStudioActor, bool> IsDisableIdleAdditiveAnim = { 0x27ffd60, 17 }; 
	// Function /Script/SB.SBStudioActor.GetKawaiiPhysicsAlpha
	constexpr static const FunctionPointer<ASBStudioActor, float> GetKawaiiPhysicsAlpha = { 0x27ff8e0, 18 }; 
	// Function /Script/SB.SBStudioActor.GetIdleAdditiveAnimType
	constexpr static const FunctionPointer<ASBStudioActor, TEnumAsByte<ESBCharaterAdditiveBodyType>> GetIdleAdditiveAnimType = { 0x27ffd30, 19 }; 
	// Function /Script/SB.SBStudioActor.GetIdleAdditiveAnimAlpha
	constexpr static const FunctionPointer<ASBStudioActor, float> GetIdleAdditiveAnimAlpha = { 0x27ffc20, 20 }; 
	// Function /Script/SB.SBStudioActor.GetCurrentCustomAnimByMeshSlotAlpha
	constexpr static const FunctionPointer<ASBStudioActor, float, const FName, const TEnumAsByte<ESBSkelMeshSlot>> GetCurrentCustomAnimByMeshSlotAlpha = { 0x28009b0, 21 }; 
	// Function /Script/SB.SBStudioActor.GetCurrentCustomAnimAlpha
	constexpr static const FunctionPointer<ASBStudioActor, float, const FName> GetCurrentCustomAnimAlpha = { 0x2800b70, 22 }; 
	// Function /Script/SB.SBStudioActor.GetCurrentCustomAnimAdditiveAlpha
	constexpr static const FunctionPointer<ASBStudioActor, float, const FName> GetCurrentCustomAnimAdditiveAlpha = { 0x2800880, 23 }; 
	// Function /Script/SB.SBStudioActor.GetBodyMeshName
	constexpr static const FunctionPointer<ASBStudioActor, FName, const FName> GetBodyMeshName = { 0x27ffa70, 24 }; 
	// Function /Script/SB.SBStudioActor.EventNotification
	constexpr static const FunctionPointer<ASBStudioActor, void, const FName&> EventNotification = { 0x2bbb090, 25 }; 
	// Function /Script/SB.SBStudioActor.ApplyMeshInfo
	constexpr static const FunctionPointer<ASBStudioActor, void, const FName, const USBSkeletalMeshComponent*, const TEnumAsByte<ESBSkelMeshSlot>> ApplyMeshInfo = { 0x2bbb090, 26 }; 
};

/// Class /Script/SB.SBTableIndexController
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class USBTableIndexController : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Class /Script/SB.SBTargetingPoint
/// Size: 0x02F8 (760 bytes) (0x0002F0 - 0x0002F8) align n/a MaxSize: 0x02F8
class ASBTargetingPoint : public ANavigationObjectBase
{ 
public:
	FName                                              PointName;                                                  // 0x02F0   (0x0008)  
};

/// Struct /Script/SB.SBTextureStyleInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBTextureStyleInfo
{ 
	class UTexture2D*                                  Default;                                                    // 0x0000   (0x0008)  
	class UTexture2D*                                  StanardKeyboard;                                            // 0x0008   (0x0008)  
	class UTexture2D*                                  StanardJoystic;                                             // 0x0010   (0x0008)  
	class UTexture2D*                                  PS4;                                                        // 0x0018   (0x0008)  
	class UTexture2D*                                  XBox;                                                       // 0x0020   (0x0008)  
};

/// Class /Script/SB.SBTextureStyleSetData
/// Size: 0x00D0 (208 bytes) (0x000030 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBTextureStyleSetData : public UDataAsset
{ 
public:
	TMap<FName, FSBTextureStyleInfo>                   actions;                                                    // 0x0030   (0x0050)  
	TMap<FKey, FSBTextureStyleInfo>                    Keys;                                                       // 0x0080   (0x0050)  

	/// Functions
	// Function /Script/SB.SBTextureStyleSetData.GetTextureFromKey
	constexpr static const FunctionPointer<USBTextureStyleSetData, UTexture2D*, const FKey&, const TEnumAsByte<ESBTextureStyleType>> GetTextureFromKey = { 0x2802950, 0 }; 
	// Function /Script/SB.SBTextureStyleSetData.GetTextureFromAction
	constexpr static const FunctionPointer<USBTextureStyleSetData, UTexture2D*, const FName&, const TEnumAsByte<ESBTextureStyleType>> GetTextureFromAction = { 0x2802b20, 1 }; 
};

/// Class /Script/SB.SBTheaterData
/// Size: 0x0070 (112 bytes) (0x000030 - 0x000070) align n/a MaxSize: 0x0070
class USBTheaterData : public UDataAsset
{ 
public:
	uint32_t                                           Version;                                                    // 0x0030   (0x0004)  
	int32_t                                            Priority;                                                   // 0x0034   (0x0004)  
	bool                                               bAllowDuplicatePlay;                                        // 0x0038   (0x0001)  
	bool                                               bRandomTakeStart;                                           // 0x0039   (0x0001)  
	bool                                               bUseRegionFunc_JP;                                          // 0x003A   (0x0001)  
	bool                                               bUseTransitTake;                                            // 0x003B   (0x0001)  
	bool                                               bUseTransitTakeCommonSet;                                   // 0x003C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	class USBTheaterTakeData*                          TransitTakeData;                                            // 0x0040   (0x0008)  
	TArray<class USBTheaterTakeData*>                  TakeArray;                                                  // 0x0048   (0x0010)  
	int32_t                                            RootTakeUID;                                                // 0x0058   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	TArray<FName>                                      CommonAttachActorTagNames;                                  // 0x0060   (0x0010)  
};

/// Class /Script/SB.SBTheaterLevelSequenceObserver
/// Size: 0x00A0 (160 bytes) (0x000028 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBTheaterLevelSequenceObserver : public UObject
{ 
public:
	FName                                              SequenceName;                                               // 0x0028   (0x0008)  
	TWeakObjectPtr<class ULevelSequence*>              Sequence;                                                   // 0x0030   (0x0008)  
	TWeakObjectPtr<class ULevelSequencePlayer*>        Player;                                                     // 0x0038   (0x0008)  
	TWeakObjectPtr<class ALevelSequenceActor*>         SequenceActor;                                              // 0x0040   (0x0008)  
	TArray<FName>                                      AttachActorTagNames;                                        // 0x0048   (0x0010)  
	bool                                               RequireRelease;                                             // 0x0058   (0x0001)  
	bool                                               fireNotify;                                                 // 0x0059   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x005A   (0x0006)  MISSED
	int32_t                                            TakeDataUID;                                                // 0x0060   (0x0004)  
	FGuid                                              TakeGuid;                                                   // 0x0064   (0x0010)  
	FGuid                                              SceneGuid;                                                  // 0x0074   (0x0010)  
	bool                                               bStopEndFrame;                                              // 0x0084   (0x0001)  
	unsigned char                                      UnknownData03_7[0x1B];                                      // 0x0085   (0x001B)  MISSED

	/// Functions
	// Function /Script/SB.SBTheaterLevelSequenceObserver.OnFinishLevelSequence
	constexpr static const FunctionPointer<USBTheaterLevelSequenceObserver, void> OnFinishLevelSequence = { 0x2803830, 0 }; 
};

/// Struct /Script/SB.SBLevelSequenceBookmarkAlias
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBLevelSequenceBookmarkAlias
{ 
	FName                                              BookmarkName;                                               // 0x0000   (0x0008)  
	class ULevelSequence*                              Sequence;                                                   // 0x0008   (0x0008)  
};

/// Struct /Script/SB.SBLevelAlias
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBLevelAlias
{ 
	FName                                              WorldName;                                                  // 0x0000   (0x0008)  
	FName                                              ActorName;                                                  // 0x0008   (0x0008)  
	class UClass*                                      Type;                                                       // 0x0010   (0x0008)  
};

/// Struct /Script/SB.SBLevelAliasLevelSequence
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBLevelAliasLevelSequence : FSBLevelAlias
{ 
};

/// Class /Script/SB.SBTheaterTakeData
/// Size: 0x0150 (336 bytes) (0x000028 - 0x000150) align n/a MaxSize: 0x0150
class USBTheaterTakeData : public UObject
{ 
public:
	int32_t                                            TakeUID;                                                    // 0x0028   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	TArray<int32_t>                                    NextTakeUIDs;                                               // 0x0030   (0x0010)  
	bool                                               bTransitTake;                                               // 0x0040   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FName                                              TakeAlias;                                                  // 0x0044   (0x0008)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	FSBLevelSequenceBookmarkAlias                      BookmarkAlias;                                              // 0x0050   (0x0010)  
	FName                                              FinishEvent;                                                // 0x0060   (0x0008)  
	bool                                               bSkipAllow;                                                 // 0x0068   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	int32_t                                            SkipTakeIndexWhenCompleteTheater;                           // 0x006C   (0x0004)  
	bool                                               bSubtitleJumpAllow;                                         // 0x0070   (0x0001)  
	bool                                               bSkipBlockWhenFirstPlay;                                    // 0x0071   (0x0001)  
	bool                                               bSkipAllowNewGamePlus;                                      // 0x0072   (0x0001)  
	bool                                               bSkipAllowClearSB;                                          // 0x0073   (0x0001)  
	bool                                               bSkipAllowBossChallenge;                                    // 0x0074   (0x0001)  
	bool                                               bIgnoreSkipComplete;                                        // 0x0075   (0x0001)  
	bool                                               bBlockStreamingVolumeUpdate;                                // 0x0076   (0x0001)  
	unsigned char                                      UnknownData13_6[0x1];                                       // 0x0077   (0x0001)  MISSED
	TArray<FName>                                      AttachActorTagNames;                                        // 0x0078   (0x0010)  
	FSBLevelAliasLevelSequence                         LevelActorName;                                             // 0x0088   (0x0018)  
	class ULevelSequence*                              TemplateSequence;                                           // 0x00A0   (0x0008)  
	TMap<FName, class ULevelSequence*>                 CultureTemplateSequenceMap;                                 // 0x00A8   (0x0050)  
	class UClass*                                      TemplateSettingActor;                                       // 0x00F8   (0x0008)  
	bool                                               bStartMovementNone;                                         // 0x0100   (0x0001)  
	bool                                               bEnablePhysicsReset;                                        // 0x0101   (0x0001)  
	bool                                               bForcePhysicsReset;                                         // 0x0102   (0x0001)  
	bool                                               bDroneControlAI;                                            // 0x0103   (0x0001)  
	bool                                               bDroneGunUnequip;                                           // 0x0104   (0x0001)  
	bool                                               bClearEventMove;                                            // 0x0105   (0x0001)  
	bool                                               bStopEndFrame;                                              // 0x0106   (0x0001)  
	bool                                               bSubtitleForceVisible;                                      // 0x0107   (0x0001)  
	bool                                               bAllowSkipEndSubtitle;                                      // 0x0108   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0109   (0x0003)  MISSED
	FSBTheaterLevelSequenceSkipFadeParam               FinishFade;                                                 // 0x010C   (0x0028)  
	bool                                               bControlVisibleActor;                                       // 0x0134   (0x0001)  
	bool                                               bZoneEventObserve;                                          // 0x0135   (0x0001)  
	bool                                               bZoneEventCheckFinish;                                      // 0x0136   (0x0001)  
	unsigned char                                      UnknownData15_6[0x1];                                       // 0x0137   (0x0001)  MISSED
	int32_t                                            FinishAttachActorDelayFrameCount;                           // 0x0138   (0x0004)  
	int32_t                                            LastTakeFinishAttachActorDelayFrameCount;                   // 0x013C   (0x0004)  
	bool                                               bIgnoreMatineeSlomoRestore;                                 // 0x0140   (0x0001)  
	bool                                               bAllowCropAspectRatio;                                      // 0x0141   (0x0001)  
	bool                                               bCropAspectRatioViewport;                                   // 0x0142   (0x0001)  
	unsigned char                                      UnknownData16_6[0x1];                                       // 0x0143   (0x0001)  MISSED
	float                                              CropAspectRatioViewportLess;                                // 0x0144   (0x0004)  
	bool                                               FilmbackSensorHeightVerticalScaling;                        // 0x0148   (0x0001)  
	unsigned char                                      UnknownData17_7[0x7];                                       // 0x0149   (0x0007)  MISSED
};

/// Class /Script/SB.SBTickManagedActor
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ASBTickManagedActor : public AActor
{ 
public:
	TEnumAsByte<ETickingGroup>                         TickingGroup;                                               // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02C9   (0x0007)  MISSED
};

/// Struct /Script/SB.SBToolDataVersion
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBToolDataVersion
{ 
	uint16_t                                           Major;                                                      // 0x0000   (0x0002)  
	uint16_t                                           Minor;                                                      // 0x0002   (0x0002)  
};

/// Class /Script/SB.SBToolDataAsset
/// Size: 0x00A0 (160 bytes) (0x000040 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBToolDataAsset : public USBDataAsset
{ 
public:
	FSBToolDataVersion                                 ToolDataVersion;                                            // 0x0040   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<class USBDataNodeBase*>                     ToolDataNodeList;                                           // 0x0048   (0x0010)  
	class UEdGraph*                                    ToolDataNodeGraph;                                          // 0x0058   (0x0008)  
	unsigned char                                      UnknownData03_7[0x40];                                      // 0x0060   (0x0040)  MISSED
};

/// Class /Script/SB.SBToolDataNode
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000048) align n/a MaxSize: 0x0048
class USBToolDataNode : public USBDataNodeBase
{ 
public:
};

/// Class /Script/SB.SBToolDataNode_AliasEffect
/// Size: 0x0068 (104 bytes) (0x000048 - 0x000068) align n/a MaxSize: 0x0068
class USBToolDataNode_AliasEffect : public USBDataNodeBase
{ 
public:
	FSBAliasEffect                                     EffectAlias;                                                // 0x0048   (0x0018)  
	class USBAliasController*                          AliasController;                                            // 0x0060   (0x0008)  
};

/// Struct /Script/SB.SBAliasRewardGroup
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasRewardGroup : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_AliasRewardGroup
/// Size: 0x0098 (152 bytes) (0x000048 - 0x000098) align n/a MaxSize: 0x0098
class USBToolDataNode_AliasRewardGroup : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	FSBAliasRewardGroup                                RewardGroupAlias;                                           // 0x0050   (0x0018)  
	FSBTableIndexRewardGroup                           RewardGroupIndex;                                           // 0x0068   (0x0024)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	class USBTableIndexController*                     TableIndexController;                                       // 0x0090   (0x0008)  
};

/// Struct /Script/SB.SBAliasCharacterTribe
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasCharacterTribe : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_AreaControlVolume
/// Size: 0x0090 (144 bytes) (0x000048 - 0x000090) align n/a MaxSize: 0x0090
class USBToolDataNode_AreaControlVolume : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x0054   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	TArray<FSBAliasCharacterTribe>                     AdmissionPossibleTribeArray;                                // 0x0058   (0x0010)  
	TArray<FName>                                      AdmissionPossibleCharacterTagArray;                         // 0x0068   (0x0010)  
	bool                                               bRemoveNotKeepSBCharacter;                                  // 0x0078   (0x0001)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0079   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x007A   (0x0006)  MISSED
	FString                                            Description;                                                // 0x0080   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_Condition
/// Size: 0x0110 (272 bytes) (0x000048 - 0x000110) align n/a MaxSize: 0x0110
class USBToolDataNode_Condition : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	TEnumAsByte<ESBConditionType>                      ConditionType;                                              // 0x0054   (0x0001)  
	TEnumAsByte<ESBEquation>                           ConditionEq;                                                // 0x0055   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	FString                                            CustomStr01;                                                // 0x0058   (0x0010)  
	FString                                            CustomStr02;                                                // 0x0068   (0x0010)  
	FSBAlias                                           RefCustomStr01;                                             // 0x0078   (0x0018)  
	FSBAlias                                           RefCustomStr02;                                             // 0x0090   (0x0018)  
	FSBAlias                                           RefCustomStr03;                                             // 0x00A8   (0x0018)  
	FString                                            CheckStrValue;                                              // 0x00C0   (0x0010)  
	FSBAlias                                           RefCheckStrValue;                                           // 0x00D0   (0x0018)  
	int32_t                                            CheckValue;                                                 // 0x00E8   (0x0004)  
	TEnumAsByte<ESBZoneEventActorTarget>               ActorTargetType;                                            // 0x00EC   (0x0001)  
	TEnumAsByte<ESBConditionCalcuationType>            CheckStatCalcType;                                          // 0x00ED   (0x0001)  
	bool                                               bUseActorTragetType;                                        // 0x00EE   (0x0001)  
	ESBGameOptionType                                  GameOptionType;                                             // 0x00EF   (0x0001)  
	FString                                            FailNotifyMsg;                                              // 0x00F0   (0x0010)  
	FString                                            Description;                                                // 0x0100   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_ConditionGroup
/// Size: 0x00B8 (184 bytes) (0x000048 - 0x0000B8) align n/a MaxSize: 0x00B8
class USBToolDataNode_ConditionGroup : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	TArray<FSBAliasCondition>                          Conditions;                                                 // 0x0058   (0x0010)  
	TEnumAsByte<ESBEquation>                           ConditionEq;                                                // 0x0068   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	FSBAliasConditionGroup                             ConditionGroup1;                                            // 0x006C   (0x0018)  
	TEnumAsByte<ESBEquation>                           GroupEq1;                                                   // 0x0084   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0085   (0x0003)  MISSED
	FSBAliasConditionGroup                             ConditionGroup2;                                            // 0x0088   (0x0018)  
	TEnumAsByte<ESBEquation>                           GroupEq2;                                                   // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x00A1   (0x0007)  MISSED
	FString                                            Description;                                                // 0x00A8   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EnvState_Reward
/// Size: 0x00A8 (168 bytes) (0x000048 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBToolDataNode_EnvState_Reward : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	class USBRewardGroupSpawnFormation*                RewardGroupSpawnFormation;                                  // 0x0050   (0x0008)  
	FSBAliasRewardGroup                                RewardGroupAlias;                                           // 0x0058   (0x0018)  
	FSBTableIndexRewardGroup                           RewardGroupIndex;                                           // 0x0070   (0x0024)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	FString                                            Description;                                                // 0x0098   (0x0010)  
};

/// Struct /Script/SB.SBZoneEnvToTargetStateInfo
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSBZoneEnvToTargetStateInfo
{ 
	FName                                              TargetTagName;                                              // 0x0000   (0x0008)  
	TArray<FName>                                      AttachTagNames;                                             // 0x0008   (0x0010)  
	TWeakObjectPtr<class ULevelSequence*>              ToTransitLevelSequence;                                     // 0x0018   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0020   (0x0020)  MISSED
	class UClass*                                      SequenceActorTemplate;                                      // 0x0040   (0x0008)  
};

/// Class /Script/SB.SBToolDataNode_EnvState_Sequence
/// Size: 0x0188 (392 bytes) (0x000048 - 0x000188) align n/a MaxSize: 0x0188
class USBToolDataNode_EnvState_Sequence : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	TWeakObjectPtr<class USBTheaterData*>              TransitOut_TheaterData;                                     // 0x0050   (0x0008)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x0058   (0x0020)  MISSED
	TWeakObjectPtr<class ULevelSequence*>              TransitOut_LevelSequence;                                   // 0x0078   (0x0008)  
	unsigned char                                      UnknownData07_6[0x20];                                      // 0x0080   (0x0020)  MISSED
	class UClass*                                      TransitOut_SequenceActorTemplate;                           // 0x00A0   (0x0008)  
	TArray<FName>                                      TransitOut_AttachTagNames;                                  // 0x00A8   (0x0010)  
	TWeakObjectPtr<class USBTheaterData*>              Active_TheaterData;                                         // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData08_6[0x20];                                      // 0x00C0   (0x0020)  MISSED
	TWeakObjectPtr<class ULevelSequence*>              Active_LevelSequence;                                       // 0x00E0   (0x0008)  
	unsigned char                                      UnknownData09_6[0x20];                                      // 0x00E8   (0x0020)  MISSED
	class UClass*                                      Active_SequenceActorTemplate;                               // 0x0108   (0x0008)  
	TArray<FName>                                      Active_AttachTagNames;                                      // 0x0110   (0x0010)  
	TWeakObjectPtr<class ULevelSequence*>              Loop_LevelSequence;                                         // 0x0120   (0x0008)  
	unsigned char                                      UnknownData10_6[0x20];                                      // 0x0128   (0x0020)  MISSED
	class UClass*                                      Loop_SequenceActorTemplate;                                 // 0x0148   (0x0008)  
	TArray<FName>                                      Loop_AttachTagNames;                                        // 0x0150   (0x0010)  
	bool                                               bDontStopLoopSequenceAtDestory;                             // 0x0160   (0x0001)  
	bool                                               bWhenChangeStaeLoopSequenceStop;                            // 0x0161   (0x0001)  
	TEnumAsByte<ESBSequencePlayTransformType>          PlayTransformOwnerType;                                     // 0x0162   (0x0001)  
	unsigned char                                      UnknownData11_6[0x5];                                       // 0x0163   (0x0005)  MISSED
	TArray<FSBZoneEnvToTargetStateInfo>                ToTargetStateInfoList;                                      // 0x0168   (0x0010)  
	FString                                            Description;                                                // 0x0178   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventActorEffect
/// Size: 0x00E8 (232 bytes) (0x000048 - 0x0000E8) align n/a MaxSize: 0x00E8
class USBToolDataNode_EventActorEffect : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasEffect                                     EffectAlias;                                                // 0x0054   (0x0018)  
	FSBAliasEventActorEffect                           ActorEffectAlias;                                           // 0x006C   (0x0018)  
	TEnumAsByte<ESBZoneEventActorTarget>               ToTarget;                                                   // 0x0084   (0x0001)  
	TEnumAsByte<ESBZoneEventEventorType>               EventorType;                                                // 0x0085   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0086   (0x0002)  MISSED
	FName                                              TargetTagName;                                              // 0x0088   (0x0008)  
	FSBAliasCondition                                  EventCondition;                                             // 0x0090   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x00A8   (0x0018)  
	TEnumAsByte<ESBZoneEventActorCaster>               ToCaster;                                                   // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x00C1   (0x0003)  MISSED
	FName                                              CasterTagName;                                              // 0x00C4   (0x0008)  
	float                                              EventDelayTime;                                             // 0x00CC   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00D0   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00D4   (0x0004)  
	FString                                            Description;                                                // 0x00D8   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventAIDecorator
/// Size: 0x00D0 (208 bytes) (0x000048 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBToolDataNode_EventAIDecorator : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasLevelTargetFilter                          TargetFilter;                                               // 0x0054   (0x0018)  
	FName                                              ValueKey;                                                   // 0x006C   (0x0008)  
	TEnumAsByte<ESBBlackboardVarType>                  ValueType;                                                  // 0x0074   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0075   (0x0003)  MISSED
	FVector                                            CustomVectorValue;                                          // 0x0078   (0x000C)  
	FSBAliasCondition                                  EventCondition;                                             // 0x0084   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x009C   (0x0018)  
	float                                              EventDelayTime;                                             // 0x00B4   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00B8   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00BC   (0x0004)  
	FString                                            Description;                                                // 0x00C0   (0x0010)  
};

/// Struct /Script/SB.SBAliasAreaControlVolume
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasAreaControlVolume : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_EventAreaControlVolumeControl
/// Size: 0x0120 (288 bytes) (0x000048 - 0x000120) align n/a MaxSize: 0x0120
class USBToolDataNode_EventAreaControlVolumeControl : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasAreaControlVolume                          AreaControlVolume1;                                         // 0x0054   (0x0018)  
	FSBAliasAreaControlVolume                          AreaControlVolume2;                                         // 0x006C   (0x0018)  
	FSBAliasAreaControlVolume                          AreaControlVolume3;                                         // 0x0084   (0x0018)  
	FSBAliasAreaControlVolume                          AreaControlVolume4;                                         // 0x009C   (0x0018)  
	FSBAliasAreaControlVolume                          AreaControlVolume5;                                         // 0x00B4   (0x0018)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x00CC   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00CD   (0x0003)  MISSED
	FSBAliasCondition                                  EventCondition;                                             // 0x00D0   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x00E8   (0x0018)  
	float                                              EventDelayTime;                                             // 0x0100   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x0104   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x0108   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x010C   (0x0004)  MISSED
	FString                                            Description;                                                // 0x0110   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventAreaName
/// Size: 0x00D0 (208 bytes) (0x000048 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBToolDataNode_EventAreaName : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	float                                              DrawDuration;                                               // 0x0054   (0x0004)  
	FText                                              MainAreaText;                                               // 0x0058   (0x0018)  
	FText                                              SubAreaText;                                                // 0x0070   (0x0018)  
	FSBAliasCondition                                  EventCondition;                                             // 0x0088   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x00A0   (0x0018)  
	TEnumAsByte<ESBZoneEventEventorType>               EventorType;                                                // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00B9   (0x0007)  MISSED
	FString                                            Description;                                                // 0x00C0   (0x0010)  
};

/// Struct /Script/SB.SBAliasEffectVolume
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasEffectVolume : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_EventEffectVolumeControl
/// Size: 0x00C0 (192 bytes) (0x000048 - 0x0000C0) align n/a MaxSize: 0x00C0
class USBToolDataNode_EventEffectVolumeControl : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasEffectVolume                               EffectVolume;                                               // 0x0054   (0x0018)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x006C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	FSBAliasCondition                                  EventCondition;                                             // 0x0070   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0088   (0x0018)  
	float                                              EventDelayTime;                                             // 0x00A0   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00A4   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	FString                                            Description;                                                // 0x00B0   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventEnhanceResult
/// Size: 0x00D0 (208 bytes) (0x000048 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBToolDataNode_EventEnhanceResult : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasItem                                       Item;                                                       // 0x0054   (0x0018)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	FText                                              ResultText;                                                 // 0x0070   (0x0018)  
	FSBAliasCondition                                  EventCondition;                                             // 0x0088   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x00A0   (0x0018)  
	TEnumAsByte<ESBZoneEventEventorType>               EventorType;                                                // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x00B9   (0x0007)  MISSED
	FString                                            Description;                                                // 0x00C0   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventEnvControl
/// Size: 0x0100 (256 bytes) (0x000048 - 0x000100) align n/a MaxSize: 0x0100
class USBToolDataNode_EventEnvControl : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasZoneEnvSpawn                               EnvSpawnAlias;                                              // 0x0054   (0x0018)  
	TEnumAsByte<ESBZoneEnvControlType>                 EnvControlType;                                             // 0x006C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	FSBAliasZoneCamp                                   TargetCampAlias;                                            // 0x0070   (0x0018)  
	FName                                              TagName;                                                    // 0x0088   (0x0008)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x0090   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	int32_t                                            AddProgressValue;                                           // 0x0094   (0x0004)  
	int32_t                                            SetStateProgressValue;                                      // 0x0098   (0x0004)  
	FSBAliasCondition                                  EventCondition;                                             // 0x009C   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x00B4   (0x0018)  
	float                                              EventDelayTime;                                             // 0x00CC   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00D0   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00D4   (0x0004)  
	int32_t                                            ProgressSlotIndex;                                          // 0x00D8   (0x0004)  
	float                                              ProgressSpeed;                                              // 0x00DC   (0x0004)  
	float                                              ProgressSpeedInterpTime;                                    // 0x00E0   (0x0004)  
	float                                              CurrentProgressValue;                                       // 0x00E4   (0x0004)  
	float                                              StartProgressValue;                                         // 0x00E8   (0x0004)  
	float                                              EndProgressValue;                                           // 0x00EC   (0x0004)  
	FString                                            Description;                                                // 0x00F0   (0x0010)  
};

/// Struct /Script/SB.SBAliasGuideAction
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasGuideAction : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_EventGuideAction
/// Size: 0x00D8 (216 bytes) (0x000048 - 0x0000D8) align n/a MaxSize: 0x00D8
class USBToolDataNode_EventGuideAction : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	bool                                               StopGuideAction;                                            // 0x0054   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	FSBAliasGuideAction                                GuideActionAlias;                                           // 0x0058   (0x0018)  
	TEnumAsByte<ESBZoneEventActorTarget>               ToTarget;                                                   // 0x0070   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	FName                                              TargetTagName;                                              // 0x0074   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FName>                                      FollowerTagNameArray;                                       // 0x0080   (0x0010)  
	float                                              FollowerStartDelayTime;                                     // 0x0090   (0x0004)  
	FSBAliasCondition                                  EventCondition;                                             // 0x0094   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x00AC   (0x0018)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	FString                                            Description;                                                // 0x00C8   (0x0010)  
};

/// Struct /Script/SB.SBAliasSoundEvent
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasSoundEvent : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_EventInteractCamp
/// Size: 0x00D8 (216 bytes) (0x000048 - 0x0000D8) align n/a MaxSize: 0x00D8
class USBToolDataNode_EventInteractCamp : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasZoneEnvSpawn                               EnvSpawnAlias;                                              // 0x0054   (0x0018)  
	TEnumAsByte<ESBInteractCampType>                   InteractType;                                               // 0x006C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	FSBAliasCondition                                  EventCondition;                                             // 0x0070   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0088   (0x0018)  
	bool                                               bShowResetZoneUI;                                           // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x00A1   (0x0007)  MISSED
	FString                                            Description;                                                // 0x00A8   (0x0010)  
	TEnumAsByte<ESBZoneEventInteractSaveType>          DoingSaveType;                                              // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x00B9   (0x0003)  MISSED
	FSBAliasSoundEvent                                 SoundEventAlias;                                            // 0x00BC   (0x0018)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x00D4   (0x0004)  MISSED
};

/// Class /Script/SB.SBToolDataNode_EventItemAction
/// Size: 0x00D8 (216 bytes) (0x000048 - 0x0000D8) align n/a MaxSize: 0x00D8
class USBToolDataNode_EventItemAction : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	TEnumAsByte<ESBItemActionType>                     ActionType;                                                 // 0x0054   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	FSBAliasItem                                       Item;                                                       // 0x0058   (0x0018)  
	int32_t                                            Count;                                                      // 0x0070   (0x0004)  
	FSBAliasLevelTargetFilter                          TargetFilter;                                               // 0x0074   (0x0018)  
	FSBAliasCondition                                  EventCondition;                                             // 0x008C   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x00A4   (0x0018)  
	float                                              EventDelayTime;                                             // 0x00BC   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00C0   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00C4   (0x0004)  
	FString                                            Description;                                                // 0x00C8   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventLaserControl
/// Size: 0x00B0 (176 bytes) (0x000048 - 0x0000B0) align n/a MaxSize: 0x00B0
class USBToolDataNode_EventLaserControl : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FName                                              LaserUniqueName;                                            // 0x0054   (0x0008)  
	FName                                              LaserGroupName;                                             // 0x005C   (0x0008)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x0064   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	FSBAliasCondition                                  EventCondition;                                             // 0x0068   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0080   (0x0018)  
	float                                              EventDelayTime;                                             // 0x0098   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x009C   (0x0004)  MISSED
	FString                                            Description;                                                // 0x00A0   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventLevelSequence
/// Size: 0x0128 (296 bytes) (0x000048 - 0x000128) align n/a MaxSize: 0x0128
class USBToolDataNode_EventLevelSequence : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            LevelSeqAlias;                                              // 0x0058   (0x0010)  
	TWeakObjectPtr<class ULevelSequence*>              LevelSeq;                                                   // 0x0068   (0x0008)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x0070   (0x0020)  MISSED
	class UClass*                                      SequenceActorTemplate;                                      // 0x0090   (0x0008)  
	TArray<FName>                                      AttachTagNames;                                             // 0x0098   (0x0010)  
	TEnumAsByte<ESBZoneEventLevelSeqType>              Type;                                                       // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x00A9   (0x0003)  MISSED
	FSBAliasCondition                                  EventCondition;                                             // 0x00AC   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x00C4   (0x0018)  
	TEnumAsByte<ESBZoneEventEventorType>               EventorType;                                                // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x00DD   (0x0003)  MISSED
	float                                              EventDelayTime;                                             // 0x00E0   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00E4   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00E8   (0x0004)  
	bool                                               StartMovementNone;                                          // 0x00EC   (0x0001)  
	bool                                               StopEndFrame;                                               // 0x00ED   (0x0001)  
	bool                                               bDontStopResetZone;                                         // 0x00EE   (0x0001)  
	TEnumAsByte<ESBLevelSequenceContentsType>          LevelSequenceContentsType;                                  // 0x00EF   (0x0001)  
	FString                                            Description;                                                // 0x00F0   (0x0010)  
	bool                                               UseRandomSequence;                                          // 0x0100   (0x0001)  
	bool                                               bPendingTheaterByNiike;                                     // 0x0101   (0x0001)  
	unsigned char                                      UnknownData09_6[0x6];                                       // 0x0102   (0x0006)  MISSED
	TArray<FName>                                      RandomLevelSeqAliases;                                      // 0x0108   (0x0010)  
	TArray<TWeakObjectPtr<ULevelSequence*>>            RandomLevelSeqs;                                            // 0x0118   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventMetaAI
/// Size: 0x00C0 (192 bytes) (0x000048 - 0x0000C0) align n/a MaxSize: 0x00C0
class USBToolDataNode_EventMetaAI : public USBDataNodeBase
{ 
public:
	FString                                            Description;                                                // 0x0048   (0x0010)  
	FName                                              Alias;                                                      // 0x0058   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0060   (0x0004)  
	TEnumAsByte<ESBZoneEventActorTarget>               ToTarget;                                                   // 0x0064   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	FName                                              TargetTagName;                                              // 0x0068   (0x0008)  
	TEnumAsByte<ESBMetaAIEventType>                    MetaAIEventType;                                            // 0x0070   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	FName                                              SpecialBehaviorTag;                                         // 0x0074   (0x0008)  
	FName                                              AddTag;                                                     // 0x007C   (0x0008)  
	ESBMetaAIThink                                     ForceThink;                                                 // 0x0084   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0085   (0x0003)  MISSED
	FName                                              ForceThink_BehaviorAlias;                                   // 0x0088   (0x0008)  
	FSBAliasCondition                                  EventCondition;                                             // 0x0090   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x00A8   (0x0018)  
};

/// Class /Script/SB.SBToolDataNode_EventObjectControl
/// Size: 0x00D0 (208 bytes) (0x000048 - 0x0000D0) align n/a MaxSize: 0x00D0
class USBToolDataNode_EventObjectControl : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FName                                              TargetDataAlias;                                            // 0x0054   (0x0008)  
	FSBAliasLevelTargetFilter                          TargetFilter;                                               // 0x005C   (0x0018)  
	TEnumAsByte<ESBLevelObjectType>                    ObjectType;                                                 // 0x0074   (0x0001)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x0075   (0x0001)  
	TEnumAsByte<ESBZoneObjControlActionType>           ObjectControlActionType;                                    // 0x0076   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0077   (0x0001)  MISSED
	FName                                              RetargetSpawnPointName;                                     // 0x0078   (0x0008)  
	bool                                               bWithStorage;                                               // 0x0080   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	FSBAliasCondition                                  EventCondition;                                             // 0x0084   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x009C   (0x0018)  
	float                                              EventDelayTime;                                             // 0x00B4   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00B8   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00BC   (0x0004)  
	FString                                            Description;                                                // 0x00C0   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventQuest
/// Size: 0x00C0 (192 bytes) (0x000048 - 0x0000C0) align n/a MaxSize: 0x00C0
class USBToolDataNode_EventQuest : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasQuest                                      Quest;                                                      // 0x0054   (0x0018)  
	TEnumAsByte<ESBQuestEventTargetType>               TargetType;                                                 // 0x006C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	FSBAliasCondition                                  EventCondition;                                             // 0x0070   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0088   (0x0018)  
	float                                              EventDelayTime;                                             // 0x00A0   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00A4   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	FString                                            Description;                                                // 0x00B0   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventRequestPathWay
/// Size: 0x00C0 (192 bytes) (0x000048 - 0x0000C0) align n/a MaxSize: 0x00C0
class USBToolDataNode_EventRequestPathWay : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	TEnumAsByte<ESBZoneEventPathWayActionType>         ActionType;                                                 // 0x0054   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	FSBAliasLevelTargetFilter                          LevelTargetFilter;                                          // 0x0058   (0x0018)  
	FString                                            PathWayAlias;                                               // 0x0070   (0x0010)  
	FSBAliasCondition                                  EventCondition;                                             // 0x0080   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0098   (0x0018)  
	FString                                            Description;                                                // 0x00B0   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventTheater
/// Size: 0x01B8 (440 bytes) (0x000048 - 0x0001B8) align n/a MaxSize: 0x01B8
class USBToolDataNode_EventTheater : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	TWeakObjectPtr<class USBTheaterData*>              Theater;                                                    // 0x0058   (0x0008)  
	unsigned char                                      UnknownData11_6[0x20];                                      // 0x0060   (0x0020)  MISSED
	TWeakObjectPtr<class ULevelSequence*>              LevelSeq;                                                   // 0x0080   (0x0008)  
	unsigned char                                      UnknownData12_6[0x20];                                      // 0x0088   (0x0020)  MISSED
	TEnumAsByte<ESBZoneEventTheaterType>               ControlType;                                                // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x00A9   (0x0003)  MISSED
	FSBAliasCondition                                  EventCondition;                                             // 0x00AC   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x00C4   (0x0018)  
	float                                              EventDelayTime;                                             // 0x00DC   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00E0   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00E4   (0x0004)  
	TEnumAsByte<ESBSequencePlayTransformType>          SequencePlayTransformType;                                  // 0x00E8   (0x0001)  
	TEnumAsByte<ESBSequencePlayTransformCastType>      SequencePlayTrasnformCastType;                              // 0x00E9   (0x0001)  
	TEnumAsByte<ESBSequenceBindTargetType>             BindTargetType;                                             // 0x00EA   (0x0001)  
	unsigned char                                      UnknownData14_6[0x1];                                       // 0x00EB   (0x0001)  MISSED
	float                                              BindTargetStartFadeOutKeepDuration;                         // 0x00EC   (0x0004)  
	float                                              BindTargetStartFadeInDuration;                              // 0x00F0   (0x0004)  
	bool                                               bSkipFadeOutAtBindTargeType;                                // 0x00F4   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x00F5   (0x0003)  MISSED
	FSBAliasSpawnPoint                                 EventSpawnAlias;                                            // 0x00F8   (0x0018)  
	TArray<FName>                                      BindZoneEnvAlias;                                           // 0x0110   (0x0010)  
	int32_t                                            Priority;                                                   // 0x0120   (0x0004)  
	unsigned char                                      UnknownData16_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	FString                                            Description;                                                // 0x0128   (0x0010)  
	FString                                            TheaterAlias;                                               // 0x0138   (0x0010)  
	TArray<FSBAliasTheaterSelectData>                  TheaterSelectDataList;                                      // 0x0148   (0x0010)  
	bool                                               bSkipAlreadyPlaySameTheater;                                // 0x0158   (0x0001)  
	bool                                               bUseStartFadeInScreenForLeveStream;                         // 0x0159   (0x0001)  
	unsigned char                                      UnknownData17_6[0x2];                                       // 0x015A   (0x0002)  MISSED
	float                                              StartFadeInDuration;                                        // 0x015C   (0x0004)  
	float                                              StartFadeInTime;                                            // 0x0160   (0x0004)  
	bool                                               bFirstTimeIntro;                                            // 0x0164   (0x0001)  
	bool                                               bUseEndFadeInScreenForLeveStream;                           // 0x0165   (0x0001)  
	bool                                               bCancelWhenPlayerWarp;                                      // 0x0166   (0x0001)  
	bool                                               bBlockInputByBindSequence;                                  // 0x0167   (0x0001)  
	TEnumAsByte<ESBMeshClipingApplyType>               MeshClipingApplyType1;                                      // 0x0168   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x0169   (0x0003)  MISSED
	FVector                                            MeshClipingLocation1;                                       // 0x016C   (0x000C)  
	FRotator                                           MeshClipingRotation1;                                       // 0x0178   (0x000C)  
	FVector                                            MeshClipingScale1;                                          // 0x0184   (0x000C)  
	TEnumAsByte<ESBMeshClipingApplyType>               MeshClipingApplyType2;                                      // 0x0190   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x0191   (0x0003)  MISSED
	FVector                                            MeshClipingLocation2;                                       // 0x0194   (0x000C)  
	FRotator                                           MeshClipingRotation2;                                       // 0x01A0   (0x000C)  
	FVector                                            MeshClipingScale2;                                          // 0x01AC   (0x000C)  
};

/// Struct /Script/SB.SBTableIndexUIActionRequest
/// Size: 0x0024 (36 bytes) (0x000024 - 0x000024) align n/a MaxSize: 0x0024
struct FSBTableIndexUIActionRequest : FSBTableIndex
{ 
};

/// Class /Script/SB.SBToolDataNode_EventUIAction
/// Size: 0x0100 (256 bytes) (0x000048 - 0x000100) align n/a MaxSize: 0x0100
class USBToolDataNode_EventUIAction : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	TEnumAsByte<ESBEventUIActionType>                  UIActionType;                                               // 0x0054   (0x0001)  
	TEnumAsByte<ESBUILogicType>                        UILogicType;                                                // 0x0055   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	FSBTableIndexUIActionRequest                       UIActionRequestIndex;                                       // 0x0058   (0x0024)  
	FSBAliasCondition                                  EventCondition;                                             // 0x007C   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0094   (0x0018)  
	TEnumAsByte<ESBZoneEventEventorType>               EventorType;                                                // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	FString                                            Notify_AlbumAlias;                                          // 0x00B0   (0x0010)  
	FString                                            SendUIWidgetEventString;                                    // 0x00C0   (0x0010)  
	float                                              EventDelayTime;                                             // 0x00D0   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00D4   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	FString                                            Description;                                                // 0x00E0   (0x0010)  
	bool                                               bHUDInputLock;                                              // 0x00F0   (0x0001)  
	bool                                               bGameMenuInputLock;                                         // 0x00F1   (0x0001)  
	unsigned char                                      UnknownData07_6[0x6];                                       // 0x00F2   (0x0006)  MISSED
	class USBTableIndexController*                     TableIndexController;                                       // 0x00F8   (0x0008)  
};

/// Class /Script/SB.SBToolDataNode_EventZoneControl
/// Size: 0x00C0 (192 bytes) (0x000048 - 0x0000C0) align n/a MaxSize: 0x00C0
class USBToolDataNode_EventZoneControl : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasZone                                       Zone;                                                       // 0x0054   (0x0018)  
	TEnumAsByte<ESBZoneEventZoneControlTarget>         ControlType;                                                // 0x006C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	FSBAliasCondition                                  EventCondition;                                             // 0x0070   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0088   (0x0018)  
	float                                              EventDelayTime;                                             // 0x00A0   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x00A4   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	FString                                            Description;                                                // 0x00B0   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_EventZoneEventActorControl
/// Size: 0x00A8 (168 bytes) (0x000048 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBToolDataNode_EventZoneEventActorControl : public USBDataNodeBase
{ 
public:
	FString                                            Description;                                                // 0x0048   (0x0010)  
	FName                                              Alias;                                                      // 0x0058   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0060   (0x0004)  
	FName                                              ZoneEventActorName;                                         // 0x0064   (0x0008)  
	TEnumAsByte<ESBEventZoneEventActorControlType>     ZoneEventActorControlType;                                  // 0x006C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	float                                              DestructionTime;                                            // 0x0070   (0x0004)  
	bool                                               bDisableDestruction;                                        // 0x0074   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0075   (0x0003)  MISSED
	FSBAliasCondition                                  EventCondition;                                             // 0x0078   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0090   (0x0018)  
};

/// Class /Script/SB.SBToolDataNode_EventZoneWarp
/// Size: 0x00F8 (248 bytes) (0x000048 - 0x0000F8) align n/a MaxSize: 0x00F8
class USBToolDataNode_EventZoneWarp : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasCondition                                  EventCondition;                                             // 0x0054   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x006C   (0x0018)  
	FSBAliasWorld                                      World;                                                      // 0x0084   (0x0018)  
	FSBAliasZoneCamp                                   ZoneCamp;                                                   // 0x009C   (0x0018)  
	FName                                              TargetSpawnPoint;                                           // 0x00B4   (0x0008)  
	FVector                                            WarpToLocation;                                             // 0x00BC   (0x000C)  
	FRotator                                           WarpToRotation;                                             // 0x00C8   (0x000C)  
	bool                                               bUseRecoveryItems;                                          // 0x00D4   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00D5   (0x0003)  MISSED
	float                                              WarpDelayTime;                                              // 0x00D8   (0x0004)  
	float                                              FadeOutTime;                                                // 0x00DC   (0x0004)  
	bool                                               bUseCampCustomTargetPoint;                                  // 0x00E0   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x00E1   (0x0007)  MISSED
	FString                                            Description;                                                // 0x00E8   (0x0010)  
};

/// Struct /Script/SB.SBAliasCharacterStance
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasCharacterStance : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_GuideAction
/// Size: 0x0318 (792 bytes) (0x000048 - 0x000318) align n/a MaxSize: 0x0318
class USBToolDataNode_GuideAction : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	unsigned char                                      UnknownData23_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            PathWayName;                                                // 0x0058   (0x0010)  
	TArray<FSBAliasZoneEvent>                          ZoneEventsWhenStart;                                        // 0x0068   (0x0010)  
	TArray<FSBAliasZoneEvent>                          ZoneEventsWhenArrive;                                       // 0x0078   (0x0010)  
	TArray<FSBAliasZoneEvent>                          ZoneEventsWhenComplete;                                     // 0x0088   (0x0010)  
	TWeakObjectPtr<class USBTheaterData*>              TheaterWhenStart;                                           // 0x0098   (0x0008)  
	unsigned char                                      UnknownData24_6[0x20];                                      // 0x00A0   (0x0020)  MISSED
	TWeakObjectPtr<class USBTheaterData*>              TheaterWhenArrive;                                          // 0x00C0   (0x0008)  
	unsigned char                                      UnknownData25_6[0x20];                                      // 0x00C8   (0x0020)  MISSED
	TWeakObjectPtr<class USBTheaterData*>              TheaterWhenComplete;                                        // 0x00E8   (0x0008)  
	unsigned char                                      UnknownData26_6[0x20];                                      // 0x00F0   (0x0020)  MISSED
	TWeakObjectPtr<class USBTheaterData*>              TheaterWhenMovePause;                                       // 0x0110   (0x0008)  
	unsigned char                                      UnknownData27_6[0x20];                                      // 0x0118   (0x0020)  MISSED
	TWeakObjectPtr<class ULevelSequence*>              LevelSequenceWhenStart;                                     // 0x0138   (0x0008)  
	unsigned char                                      UnknownData28_6[0x20];                                      // 0x0140   (0x0020)  MISSED
	TWeakObjectPtr<class ULevelSequence*>              LevelSequenceWhenArrive;                                    // 0x0160   (0x0008)  
	unsigned char                                      UnknownData29_6[0x20];                                      // 0x0168   (0x0020)  MISSED
	TWeakObjectPtr<class ULevelSequence*>              LevelSequenceWhenComplete;                                  // 0x0188   (0x0008)  
	unsigned char                                      UnknownData30_6[0x20];                                      // 0x0190   (0x0020)  MISSED
	TWeakObjectPtr<class ULevelSequence*>              LevelSequenceWhenMovePause;                                 // 0x01B0   (0x0008)  
	unsigned char                                      UnknownData31_6[0x20];                                      // 0x01B8   (0x0020)  MISSED
	FSBAliasQuestGroupTask                             QuestTaskGroupAlias;                                        // 0x01D8   (0x0018)  
	FSBAliasCharacterStance                            StanceAlias;                                                // 0x01F0   (0x0018)  
	bool                                               bFixedTargetRotation;                                       // 0x0208   (0x0001)  
	bool                                               bPlayerAggroCheck;                                          // 0x0209   (0x0001)  
	bool                                               bPlayerMoveControl;                                         // 0x020A   (0x0001)  
	unsigned char                                      UnknownData32_6[0x1];                                       // 0x020B   (0x0001)  MISSED
	float                                              PlayerMoveAreaLimitDistance;                                // 0x020C   (0x0004)  
	float                                              PlayerRunLimitDistance;                                     // 0x0210   (0x0004)  
	float                                              PlayerSprintLimitDistance;                                  // 0x0214   (0x0004)  
	float                                              MoveDelayTime;                                              // 0x0218   (0x0004)  
	bool                                               bMoveStateControlByPlayer;                                  // 0x021C   (0x0001)  
	TEnumAsByte<ESBMoveState>                          MoveStateFromForwardPlayer;                                 // 0x021D   (0x0001)  
	unsigned char                                      UnknownData33_6[0x2];                                       // 0x021E   (0x0002)  MISSED
	float                                              MinDistanceFromForwardPlayer;                               // 0x0220   (0x0004)  
	float                                              MaxDistanceFromForwardPlayer;                               // 0x0224   (0x0004)  
	TEnumAsByte<ESBMoveState>                          MoveStateFromBackwardPlayer;                                // 0x0228   (0x0001)  
	unsigned char                                      UnknownData34_6[0x3];                                       // 0x0229   (0x0003)  MISSED
	float                                              MinDistanceFromBackwardPlayer;                              // 0x022C   (0x0004)  
	float                                              MaxDistanceFromBackwardPlayer;                              // 0x0230   (0x0004)  
	float                                              StopDistanceToPlayer;                                       // 0x0234   (0x0004)  
	float                                              MovePauseDistanceToPlayer;                                  // 0x0238   (0x0004)  
	float                                              MoveResumeDistanceToPlayer;                                 // 0x023C   (0x0004)  
	bool                                               bMovePauseLookAtPlayer;                                     // 0x0240   (0x0001)  
	unsigned char                                      UnknownData35_6[0x7];                                       // 0x0241   (0x0007)  MISSED
	TWeakObjectPtr<class USBShowData*>                 MovePauseShow;                                              // 0x0248   (0x0008)  
	unsigned char                                      UnknownData36_6[0x20];                                      // 0x0250   (0x0020)  MISSED
	bool                                               bLoopMovePauseShow;                                         // 0x0270   (0x0001)  
	unsigned char                                      UnknownData37_6[0x7];                                       // 0x0271   (0x0007)  MISSED
	TWeakObjectPtr<class USBShowData*>                 ArriveShow;                                                 // 0x0278   (0x0008)  
	unsigned char                                      UnknownData38_6[0x20];                                      // 0x0280   (0x0020)  MISSED
	float                                              ArriveShowDelayTime;                                        // 0x02A0   (0x0004)  
	unsigned char                                      UnknownData39_6[0x4];                                       // 0x02A4   (0x0004)  MISSED
	TWeakObjectPtr<class USBShowData*>                 StartShow;                                                  // 0x02A8   (0x0008)  
	unsigned char                                      UnknownData40_6[0x20];                                      // 0x02B0   (0x0020)  MISSED
	float                                              StartShowDelayTime;                                         // 0x02D0   (0x0004)  
	bool                                               bLoopArriveShow;                                            // 0x02D4   (0x0001)  
	bool                                               bLookAtPlayerWhenArrive;                                    // 0x02D5   (0x0001)  
	unsigned char                                      UnknownData41_6[0x2];                                       // 0x02D6   (0x0002)  MISSED
	float                                              OverrideMaxSpeed;                                           // 0x02D8   (0x0004)  
	bool                                               bCompleteLookAtPlayer;                                      // 0x02DC   (0x0001)  
	unsigned char                                      UnknownData42_6[0x3];                                       // 0x02DD   (0x0003)  MISSED
	float                                              CompleteWaitTime;                                           // 0x02E0   (0x0004)  
	bool                                               bUsePathfinding;                                            // 0x02E4   (0x0001)  
	unsigned char                                      UnknownData43_6[0x3];                                       // 0x02E5   (0x0003)  MISSED
	float                                              CompletedTimerWhenArrive;                                   // 0x02E8   (0x0004)  
	float                                              CompletedDistanceToPlayerWhenArrive;                        // 0x02EC   (0x0004)  
	bool                                               bFly;                                                       // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData44_6[0x3];                                       // 0x02F1   (0x0003)  MISSED
	float                                              FlyMoveSpeedPow;                                            // 0x02F4   (0x0004)  
	FName                                              FormationType;                                              // 0x02F8   (0x0008)  
	bool                                               bDisableDroneUIIndicator;                                   // 0x0300   (0x0001)  
	unsigned char                                      UnknownData45_6[0x7];                                       // 0x0301   (0x0007)  MISSED
	FString                                            Description;                                                // 0x0308   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_LevelSequence
/// Size: 0x0080 (128 bytes) (0x000048 - 0x000080) align n/a MaxSize: 0x0080
class USBToolDataNode_LevelSequence : public USBDataNodeBase
{ 
public:
	TWeakObjectPtr<class ULevelSequence*>              LevelSequence;                                              // 0x0048   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0050   (0x0020)  MISSED
	FString                                            LevelSeqAlias;                                              // 0x0070   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_LevelTargetFilter
/// Size: 0x0098 (152 bytes) (0x000048 - 0x000098) align n/a MaxSize: 0x0098
class USBToolDataNode_LevelTargetFilter : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	TEnumAsByte<ESBLevelTargetActor>                   TargetType;                                                 // 0x0054   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	FName                                              EventSpawnAlias;                                            // 0x0058   (0x0008)  
	FName                                              TargetAlias;                                                // 0x0060   (0x0008)  
	FName                                              EnvSpawnAlias;                                              // 0x0068   (0x0008)  
	FName                                              EnvAlias;                                                   // 0x0070   (0x0008)  
	FName                                              SpawnPointName;                                             // 0x0078   (0x0008)  
	int32_t                                            TargetPriority;                                             // 0x0080   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	FString                                            Description;                                                // 0x0088   (0x0010)  
};

/// Struct /Script/SB.SBAliasCustom_GotoPathwayActor
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasCustom_GotoPathwayActor : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasAIGroup
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasAIGroup : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasMetaAI
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasMetaAI : FSBAlias
{ 
};

/// Struct /Script/SB.SBSpawnConditionInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSpawnConditionInfo
{ 
	bool                                               bNotOperator;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            ProgressCount;                                              // 0x0004   (0x0004)  
	FSBAliasAchievement                                CheckAchievement;                                           // 0x0008   (0x0018)  
};

/// Struct /Script/SB.SBObjectConditionTriggerInfo
/// Size: 0x0044 (68 bytes) (0x000000 - 0x000044) align n/a MaxSize: 0x0044
struct FSBObjectConditionTriggerInfo
{ 
	FGuid                                              Guid;                                                       // 0x0000   (0x0010)  
	FSBAliasCondition                                  Condition;                                                  // 0x0010   (0x0018)  
	FSBAliasZoneEvent                                  ZoneEvent;                                                  // 0x0028   (0x0018)  
	TEnumAsByte<ESBConditionTriggerRunType>            RunType;                                                    // 0x0040   (0x0001)  
	TEnumAsByte<ESBConditionTriggerExecType>           ExecuteType;                                                // 0x0041   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0042   (0x0002)  MISSED
};

/// Struct /Script/SB.SBAliasShop
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasShop : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasPuzzleStringArray
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasPuzzleStringArray : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_NGPlusZoneEventCharacterSpawn
/// Size: 0x03D0 (976 bytes) (0x000048 - 0x0003D0) align n/a MaxSize: 0x03D0
class USBToolDataNode_NGPlusZoneEventCharacterSpawn : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FName                                              SpawnPointName;                                             // 0x0054   (0x0008)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x005C   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x005D   (0x0003)  MISSED
	TArray<FSBAliasCharacter>                          CharacterAlias;                                             // 0x0060   (0x0010)  
	TEnumAsByte<ESBZoneSpawnType>                      SpawnType;                                                  // 0x0070   (0x0001)  
	TEnumAsByte<ESBSpawnRotationType>                  SpawnRotationType;                                          // 0x0071   (0x0001)  
	unsigned char                                      UnknownData21_6[0x2];                                       // 0x0072   (0x0002)  MISSED
	FSBAliasZone                                       SpawnZone;                                                  // 0x0074   (0x0018)  
	FName                                              SpawnGroupRuleAlias;                                        // 0x008C   (0x0008)  
	bool                                               bEnableSave;                                                // 0x0094   (0x0001)  
	bool                                               bEnableTransitZone;                                         // 0x0095   (0x0001)  
	bool                                               bEnableTransitZoneByEnemyActor;                             // 0x0096   (0x0001)  
	TEnumAsByte<ESBStayZoneSaveType>                   TransitStayZoneSaveType;                                    // 0x0097   (0x0001)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0098   (0x0001)  
	TEnumAsByte<ESBSaveSubProperty>                    SaveSubProperty;                                            // 0x0099   (0x0001)  
	TEnumAsByte<ESBSpawnRuleType>                      SpawnRuleType;                                              // 0x009A   (0x0001)  
	unsigned char                                      UnknownData22_6[0x1];                                       // 0x009B   (0x0001)  MISSED
	float                                              RespawnIntervalTimeMin;                                     // 0x009C   (0x0004)  
	float                                              RespawnIntervalTimeMax;                                     // 0x00A0   (0x0004)  
	bool                                               bResetZoneKeepObject;                                       // 0x00A4   (0x0001)  
	TEnumAsByte<ESBZoneResetKeepObjTMType>             KeepObjResetTransformType;                                  // 0x00A5   (0x0001)  
	bool                                               bKeepObjApplyResetState;                                    // 0x00A6   (0x0001)  
	bool                                               bSaveWithBlackBoard;                                        // 0x00A7   (0x0001)  
	bool                                               bSpawnToActive;                                             // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData23_6[0x3];                                       // 0x00A9   (0x0003)  MISSED
	float                                              DrawDistance;                                               // 0x00AC   (0x0004)  
	bool                                               bDisableDrawDistanceScale;                                  // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData24_6[0x3];                                       // 0x00B1   (0x0003)  MISSED
	float                                              AlwaysTickDistance;                                         // 0x00B4   (0x0004)  
	bool                                               bKeepSBCharacterWhenActiveAreaControlVolume;                // 0x00B8   (0x0001)  
	bool                                               bMultiSpawnPoint;                                           // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData25_6[0x6];                                       // 0x00BA   (0x0006)  MISSED
	TArray<FSBAliasZoneEvent>                          EventOnSpawning;                                            // 0x00C0   (0x0010)  
	TArray<FSBAliasZoneEvent>                          EventOnDead;                                                // 0x00D0   (0x0010)  
	TArray<FSBAliasZoneEvent>                          EventOnBattle;                                              // 0x00E0   (0x0010)  
	TArray<FSBAliasZoneEvent>                          EventFirstTimeOnBattle;                                     // 0x00F0   (0x0010)  
	TWeakObjectPtr<class USBObjectMaterialData*>       ObjectMaterial;                                             // 0x0100   (0x0008)  
	unsigned char                                      UnknownData26_6[0x20];                                      // 0x0108   (0x0020)  MISSED
	FString                                            PathWay;                                                    // 0x0128   (0x0010)  
	bool                                               GoPathAfterSpawn;                                           // 0x0138   (0x0001)  
	unsigned char                                      UnknownData27_6[0x3];                                       // 0x0139   (0x0003)  MISSED
	FSBAliasCustom_GotoPathwayActor                    PathWayAlias;                                               // 0x013C   (0x0018)  
	FSBAliasRewardGroup                                RewardGroup;                                                // 0x0154   (0x0018)  
	FSBTableIndexRewardGroup                           RewardGroupIndex;                                           // 0x016C   (0x0024)  
	TEnumAsByte<ESBItemBucketType>                     RewardSpawnBucketType;                                      // 0x0190   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               RewardOverrideSaveType;                                     // 0x0191   (0x0001)  
	unsigned char                                      UnknownData28_6[0x2];                                       // 0x0192   (0x0002)  MISSED
	FName                                              TagName;                                                    // 0x0194   (0x0008)  
	bool                                               bHidden;                                                    // 0x019C   (0x0001)  
	unsigned char                                      UnknownData29_6[0x3];                                       // 0x019D   (0x0003)  MISSED
	FSBAliasAIGroup                                    AIGroupAlias;                                               // 0x01A0   (0x0018)  
	FName                                              AIGroupName;                                                // 0x01B8   (0x0008)  
	bool                                               bAIGroupLeader;                                             // 0x01C0   (0x0001)  
	unsigned char                                      UnknownData30_6[0x3];                                       // 0x01C1   (0x0003)  MISSED
	FSBAliasMetaAI                                     MetaAIAlias;                                                // 0x01C4   (0x0018)  
	ESBMetaAIThink                                     MetaAI_InitThink;                                           // 0x01DC   (0x0001)  
	unsigned char                                      UnknownData31_6[0x3];                                       // 0x01DD   (0x0003)  MISSED
	FName                                              MetaAI_SpecialBehaviorTag;                                  // 0x01E0   (0x0008)  
	TWeakObjectPtr<class USBInteractionGraph*>         InteractionGraphAsset;                                      // 0x01E8   (0x0008)  
	unsigned char                                      UnknownData32_6[0x20];                                      // 0x01F0   (0x0020)  MISSED
	FString                                            InteractionGraph;                                           // 0x0210   (0x0010)  
	float                                              InteractionRange;                                           // 0x0220   (0x0004)  
	float                                              InteractionAngle;                                           // 0x0224   (0x0004)  
	float                                              InteractionTargetRange;                                     // 0x0228   (0x0004)  
	float                                              InteractionDotUIAngle;                                      // 0x022C   (0x0004)  
	float                                              InteractionUpperHeight;                                     // 0x0230   (0x0004)  
	float                                              InteractionLowerHeight;                                     // 0x0234   (0x0004)  
	TEnumAsByte<ESBAdjustInteractPosType>              AdjustInteractTargetPosType;                                // 0x0238   (0x0001)  
	TEnumAsByte<ESBInteractionOwnerRotationType>       OwnerRotationType;                                          // 0x0239   (0x0001)  
	unsigned char                                      UnknownData33_6[0x6];                                       // 0x023A   (0x0006)  MISSED
	FString                                            FormationData;                                              // 0x0240   (0x0010)  
	TArray<FSBAliasAchievement>                        CheckAchievements;                                          // 0x0250   (0x0010)  
	TArray<FSBSpawnConditionInfo>                      SpawnConditions;                                            // 0x0260   (0x0010)  
	float                                              EventDelayTime;                                             // 0x0270   (0x0004)  
	unsigned char                                      UnknownData34_6[0x4];                                       // 0x0274   (0x0004)  MISSED
	TArray<FSBObjectConditionTriggerInfo>              ConditionTriggerList;                                       // 0x0278   (0x0010)  
	TWeakObjectPtr<class USBShowData*>                 SpawnShow;                                                  // 0x0288   (0x0008)  
	unsigned char                                      UnknownData35_6[0x20];                                      // 0x0290   (0x0020)  MISSED
	bool                                               bEnableActorTickAtSpawning;                                 // 0x02B0   (0x0001)  
	bool                                               bPendingTheaterByNiike;                                     // 0x02B1   (0x0001)  
	unsigned char                                      UnknownData36_6[0x6];                                       // 0x02B2   (0x0006)  MISSED
	TArray<FSBAliasShop>                               ShopData;                                                   // 0x02B8   (0x0010)  
	TArray<FSBAliasEffect>                             SpawnEffectList;                                            // 0x02C8   (0x0010)  
	FSBAliasPuzzleStringArray                          PuzzleInputText1;                                           // 0x02D8   (0x0018)  
	FSBAliasPuzzleStringArray                          PuzzleInputText2;                                           // 0x02F0   (0x0018)  
	FSBAliasPuzzleStringArray                          PuzzleInputText3;                                           // 0x0308   (0x0018)  
	FSBAliasPuzzleStringArray                          PuzzleInputText4;                                           // 0x0320   (0x0018)  
	TArray<FString>                                    PuzzleInputTextList5;                                       // 0x0338   (0x0010)  
	FString                                            Description;                                                // 0x0348   (0x0010)  
	FVector                                            SpawnPosition;                                              // 0x0358   (0x000C)  
	TEnumAsByte<ESBUIWorldMapTargetDisplayType>        WorldMapDisplayType;                                        // 0x0364   (0x0001)  
	unsigned char                                      UnknownData37_6[0x3];                                       // 0x0365   (0x0003)  MISSED
	FString                                            WorldMapDisplayTitle;                                       // 0x0368   (0x0010)  
	FString                                            WorldMapDisplayDesc;                                        // 0x0378   (0x0010)  
	FName                                              WorldMapDisplayConditionGroup;                              // 0x0388   (0x0008)  
	FName                                              WorldMapIconTag;                                            // 0x0390   (0x0008)  
	float                                              WorldMapOverlapDistance;                                    // 0x0398   (0x0004)  
	TEnumAsByte<ESBInteractRelevantType>               InteractionRelevantType;                                    // 0x039C   (0x0001)  
	unsigned char                                      UnknownData38_6[0x3];                                       // 0x039D   (0x0003)  MISSED
	float                                              OverrideCustomTrackNearDistance;                            // 0x03A0   (0x0004)  
	bool                                               DontCheckZAxisCustomTrackNear;                              // 0x03A4   (0x0001)  
	unsigned char                                      UnknownData39_6[0x3];                                       // 0x03A5   (0x0003)  MISSED
	TArray<FSBAliasCondition>                          InteractionDisable_Condition;                               // 0x03A8   (0x0010)  
	FSBAliasConditionGroup                             InteractionDisable_ConditionGroup;                          // 0x03B8   (0x0018)  
};

/// Class /Script/SB.SBToolDataNode_World
/// Size: 0x00A0 (160 bytes) (0x000048 - 0x0000A0) align n/a MaxSize: 0x00A0
class USBToolDataNode_World : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	TWeakObjectPtr<class UWorld*>                      Level;                                                      // 0x0058   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x0060   (0x0020)  MISSED
	FString                                            LevelPath;                                                  // 0x0080   (0x0010)  
	FString                                            Description;                                                // 0x0090   (0x0010)  
};

/// Struct /Script/SB.SBAliasZoneLayer
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasZoneLayer : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasMultiPlayRule
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasMultiPlayRule : FSBAlias
{ 
};

/// Struct /Script/SB.SBTransitZoneInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBTransitZoneInfo
{ 
	FSBAliasAchievement                                TransitAchievement;                                         // 0x0000   (0x0018)  
	FSBAliasZone                                       TransitZone;                                                // 0x0018   (0x0018)  
};

/// Class /Script/SB.SBToolDataNode_ZoneData
/// Size: 0x01B8 (440 bytes) (0x000048 - 0x0001B8) align n/a MaxSize: 0x01B8
class USBToolDataNode_ZoneData : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FName                                              StartPointAlias;                                            // 0x0054   (0x0008)  
	FSBAliasWorld                                      WorldData;                                                  // 0x005C   (0x0018)  
	FName                                              IsolatedAreaAlias;                                          // 0x0074   (0x0008)  
	bool                                               bOverrideIsolatedAreaWithWorldMap;                          // 0x007C   (0x0001)  
	TEnumAsByte<ESBZoneType>                           ZoneType;                                                   // 0x007D   (0x0001)  
	TEnumAsByte<ESBZoneNpcTransitType>                 NpcTransitType;                                             // 0x007E   (0x0001)  
	TEnumAsByte<ESBObjectState>                        InitActive;                                                 // 0x007F   (0x0001)  
	TArray<FSBAliasZoneLayer>                          EnterResetZoneLayerList;                                    // 0x0080   (0x0010)  
	TArray<FSBAliasZoneLayer>                          LeaveResetZoneLayerList;                                    // 0x0090   (0x0010)  
	TEnumAsByte<ESBZoneEffectTargetType>               EnterZoneEffectTargetType;                                  // 0x00A0   (0x0001)  
	TEnumAsByte<ESBZoneEffectLeaveState>               EnterZoneEffectAtLeaveState;                                // 0x00A1   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x00A2   (0x0006)  MISSED
	TArray<FSBAliasEffect>                             EnterZoneEffects;                                           // 0x00A8   (0x0010)  
	TArray<FSBAliasZoneEvent>                          EnterZoneEvent;                                             // 0x00B8   (0x0010)  
	TArray<FSBAliasZoneEvent>                          LeaveZoneEvent;                                             // 0x00C8   (0x0010)  
	TArray<FSBAliasZoneEvent>                          ActiveZoneEvent;                                            // 0x00D8   (0x0010)  
	TArray<FSBAliasZoneEvent>                          DeactiveZoneEvent;                                          // 0x00E8   (0x0010)  
	TArray<FSBAliasZoneEvent>                          ZoneSpawnEvent;                                             // 0x00F8   (0x0010)  
	FSBAliasMultiPlayRule                              PlayRule;                                                   // 0x0108   (0x0018)  
	float                                              OverrideEnterZoneFadeInDelayTime;                           // 0x0120   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	TArray<FName>                                      AdditiveDesignLevel;                                        // 0x0128   (0x0010)  
	FString                                            Description;                                                // 0x0138   (0x0010)  
	TArray<FSBTransitZoneInfo>                         TransitZone;                                                // 0x0148   (0x0010)  
	TArray<TWeakObjectPtr<UWorld*>>                    LoadLevels;                                                 // 0x0158   (0x0010)  
	TArray<TWeakObjectPtr<UWorld*>>                    UnloadLevels;                                               // 0x0168   (0x0010)  
	bool                                               bRestoreLevelWhenLeave;                                     // 0x0178   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0179   (0x0003)  MISSED
	FSBAliasCondition                                  SpiritRoomEscapeCondition;                                  // 0x017C   (0x0018)  
	FSBAliasConditionGroup                             SpiritRoomEscapeConditionGroup;                             // 0x0194   (0x0018)  
	bool                                               bSpiritRoom_ChoiceOpenPopup;                                // 0x01AC   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x01AD   (0x0003)  MISSED
	FName                                              LevelGraphicsOptionsAlias;                                  // 0x01B0   (0x0008)  
};

/// Struct /Script/SB.SBEffectVolumeDeadCountInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBEffectVolumeDeadCountInfo
{ 
	int32_t                                            ExecuteDeadCount;                                           // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FSBAliasEffect>                             DeadCountEffectAliasList;                                   // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SAliasEffectVolumeProperty
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSAliasEffectVolumeProperty : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_ZoneEffectVolume
/// Size: 0x0110 (272 bytes) (0x000048 - 0x000110) align n/a MaxSize: 0x0110
class USBToolDataNode_ZoneEffectVolume : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	TEnumAsByte<ESBEffectVolumeType>                   VolumeType;                                                 // 0x0054   (0x0001)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x0055   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	FSBAliasZone                                       ActiveZoneAlias;                                            // 0x0058   (0x0018)  
	FSBAliasEffect                                     EnterEffectAlias;                                           // 0x0070   (0x0018)  
	FSBAliasEffect                                     AlwaysActiveEffectAlias;                                    // 0x0088   (0x0018)  
	TArray<FSBEffectVolumeDeadCountInfo>               DeadCountVolumeInfo;                                        // 0x00A0   (0x0010)  
	FSAliasEffectVolumeProperty                        EffectVolumeProperty;                                       // 0x00B0   (0x0018)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x00C8   (0x0001)  
	TEnumAsByte<ESBEffectVolumeResetType>              ResetType;                                                  // 0x00C9   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x00CA   (0x0002)  MISSED
	FName                                              ResetTargetAlias;                                           // 0x00CC   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x00D4   (0x0004)  MISSED
	FString                                            ResetTargetState;                                           // 0x00D8   (0x0010)  
	bool                                               bUseEveryZone;                                              // 0x00E8   (0x0001)  
	bool                                               bUseActiveZoneStorage;                                      // 0x00E9   (0x0001)  
	unsigned char                                      UnknownData07_6[0x6];                                       // 0x00EA   (0x0006)  MISSED
	FString                                            Description;                                                // 0x00F0   (0x0010)  
	class USBAliasController*                          ZoneAliasController;                                        // 0x0100   (0x0008)  
	class USBAliasController*                          EffectAliasController;                                      // 0x0108   (0x0008)  
};

/// Struct /Script/SB.SBZoneEnvTagProperty
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FSBZoneEnvTagProperty
{ 
	FName                                              TagName;                                                    // 0x0000   (0x0008)  
	TArray<FSBAliasEffect>                             EffectList;                                                 // 0x0008   (0x0010)  
	TArray<FSBAliasZoneEvent>                          ZoneEventList;                                              // 0x0018   (0x0010)  
	FSBAliasConditionGroup                             ConditionGroup;                                             // 0x0028   (0x0018)  
	FSBAliasRewardGroup                                RewardGroup;                                                // 0x0040   (0x0018)  
	FSBTableIndexRewardGroup                           RewardGroupIndex;                                           // 0x0058   (0x0024)  
	int32_t                                            ProgressCount;                                              // 0x007C   (0x0004)  
	FName                                              ProgressTargetTagName;                                      // 0x0080   (0x0008)  
	class USBShowData*                                 CasterShowData;                                             // 0x0088   (0x0008)  
};

/// Struct /Script/SB.SBZoneEnvProgressNotifyData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBZoneEnvProgressNotifyData
{ 
	float                                              NotifyProgressValue;                                        // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FSBAliasZoneEvent>                          ZoneEventList;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBZoneEnvProgressProperty
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBZoneEnvProgressProperty
{ 
	bool                                               bAlwaysUpdateProgress;                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ProgressMaxValue;                                           // 0x0004   (0x0004)  
	TArray<FSBZoneEnvProgressNotifyData>               ProgressNotify;                                             // 0x0008   (0x0010)  
	TEnumAsByte<ESBEnvProgressNotifyFireType>          NotifyFireType;                                             // 0x0018   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Class /Script/SB.SBToolDataNode_ZoneEnv
/// Size: 0x01C8 (456 bytes) (0x000048 - 0x0001C8) align n/a MaxSize: 0x01C8
class USBToolDataNode_ZoneEnv : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	TEnumAsByte<ESBEnvironmentType>                    EnvType;                                                    // 0x0054   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	TArray<FSBZoneEnvTagProperty>                      EnvTagProperty;                                             // 0x0058   (0x0010)  
	TEnumAsByte<ESBItemBucketType>                     RewardBucketType;                                           // 0x0068   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               RewardOverrideSaveType;                                     // 0x0069   (0x0001)  
	unsigned char                                      UnknownData09_6[0x6];                                       // 0x006A   (0x0006)  MISSED
	class USBRewardGroupSpawnFormation*                RewardGroupSpawnFormation;                                  // 0x0070   (0x0008)  
	TWeakObjectPtr<class USBObjectMaterialData*>       EnvObjectMaterial;                                          // 0x0078   (0x0008)  
	unsigned char                                      UnknownData10_6[0x20];                                      // 0x0080   (0x0020)  MISSED
	bool                                               bUseAutoActivateCamp;                                       // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData11_6[0x7];                                       // 0x00A1   (0x0007)  MISSED
	TArray<FSBAliasZoneEvent>                          ActiveEnterEvents;                                          // 0x00A8   (0x0010)  
	TArray<FSBAliasZoneEvent>                          ActiveLeaveEvents;                                          // 0x00B8   (0x0010)  
	TArray<float>                                      ProgressMaxValue;                                           // 0x00C8   (0x0010)  
	TArray<FSBZoneEnvProgressProperty>                 ProgressInfo;                                               // 0x00D8   (0x0010)  
	int32_t                                            TriggerCount;                                               // 0x00E8   (0x0004)  
	FSBAliasCondition                                  TriggerCondition;                                           // 0x00EC   (0x0018)  
	unsigned char                                      UnknownData12_6[0x4];                                       // 0x0104   (0x0004)  MISSED
	TArray<FSBAliasZoneEvent>                          TriggerTrueEvents;                                          // 0x0108   (0x0010)  
	TArray<FSBAliasZoneEvent>                          TriggerFalseEvents;                                         // 0x0118   (0x0010)  
	FName                                              TrueEnvState;                                               // 0x0128   (0x0008)  
	FName                                              FalseEnvState;                                              // 0x0130   (0x0008)  
	TWeakObjectPtr<class USBInteractionGraph*>         InteractionGraph;                                           // 0x0138   (0x0008)  
	unsigned char                                      UnknownData13_6[0x20];                                      // 0x0140   (0x0020)  MISSED
	float                                              InteractionRange;                                           // 0x0160   (0x0004)  
	float                                              InteractionUpperHeight;                                     // 0x0164   (0x0004)  
	float                                              InteractionLowerHeight;                                     // 0x0168   (0x0004)  
	float                                              InteractionAngle;                                           // 0x016C   (0x0004)  
	float                                              InteractionTargetRange;                                     // 0x0170   (0x0004)  
	float                                              InteractionDotUIAngle;                                      // 0x0174   (0x0004)  
	bool                                               bForceFoldInteraction;                                      // 0x0178   (0x0001)  
	TEnumAsByte<ESBZoneCampType>                       CampType;                                                   // 0x0179   (0x0001)  
	TEnumAsByte<ESBZoneCampObjectType>                 CampObjectType;                                             // 0x017A   (0x0001)  
	unsigned char                                      UnknownData14_6[0x5];                                       // 0x017B   (0x0005)  MISSED
	FString                                            PuzzleCompareData;                                          // 0x0180   (0x0010)  
	TEnumAsByte<ESBPuzzleDataType>                     PuzzleDataType;                                             // 0x0190   (0x0001)  
	TEnumAsByte<ESBEquation>                           PuzzleEq;                                                   // 0x0191   (0x0001)  
	TEnumAsByte<ESBScanDisplayType>                    ScanDisplayType;                                            // 0x0192   (0x0001)  
	unsigned char                                      UnknownData15_6[0x1];                                       // 0x0193   (0x0001)  MISSED
	float                                              NikkeGoodsDetectDistance_Max;                               // 0x0194   (0x0004)  
	TArray<FSBAliasZoneEvent>                          NikkeDefenseArea_EnemyEnter_Events;                         // 0x0198   (0x0010)  
	TArray<FSBAliasZoneEvent>                          NikkeDefenseArea_EnemyEmpty_Events;                         // 0x01A8   (0x0010)  
	FString                                            Description;                                                // 0x01B8   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_ZoneEvent
/// Size: 0x00F0 (240 bytes) (0x000048 - 0x0000F0) align n/a MaxSize: 0x00F0
class USBToolDataNode_ZoneEvent : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	TEnumAsByte<ESBZoneEventType>                      EventType;                                                  // 0x0054   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	FSBAlias                                           RefTableAlias;                                              // 0x0058   (0x0018)  
	FSBAliasCondition                                  EventCondition;                                             // 0x0070   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0088   (0x0018)  
	TEnumAsByte<ESBZoneEventConditionCheckType>        EventConditionCheckType;                                    // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x00A1   (0x0003)  MISSED
	float                                              EventDelayTime;                                             // 0x00A4   (0x0004)  
	bool                                               UseRandomDelay;                                             // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x00A9   (0x0003)  MISSED
	float                                              EventDelayMinTime;                                          // 0x00AC   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x00B0   (0x0004)  
	bool                                               IgnoreEventByPlayerDead;                                    // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x00B5   (0x0003)  MISSED
	TArray<FSBAliasZoneEvent>                          FinishEvents;                                               // 0x00B8   (0x0010)  
	TArray<FSBAliasZoneEvent>                          AddEventList;                                               // 0x00C8   (0x0010)  
	FString                                            Description;                                                // 0x00D8   (0x0010)  
	int32_t                                            ReturnValue;                                                // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x00EC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBJsonEffectAlias
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FSBJsonEffectAlias
{ 
	FSBAliasEffect                                     Alias;                                                      // 0x0000   (0x0018)  
	float                                              Time;                                                       // 0x0018   (0x0004)  
	float                                              CalculationValue;                                           // 0x001C   (0x0004)  
	float                                              StartDelayTime;                                             // 0x0020   (0x0004)  
};

/// Struct /Script/SB.SBZoneEventActorProperty
/// Size: 0x0074 (116 bytes) (0x000000 - 0x000074) align n/a MaxSize: 0x0074
struct FSBZoneEventActorProperty
{ 
	int32_t                                            EventStep;                                                  // 0x0000   (0x0004)  
	FSBAliasRewardGroup                                RewardGroupAlias;                                           // 0x0004   (0x0018)  
	FSBTableIndexRewardGroup                           RewardGroupIndex;                                           // 0x001C   (0x0024)  
	TEnumAsByte<ESBItemBucketType>                     RewardBucketType;                                           // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FSBAliasEffect                                     EffectAlias;                                                // 0x0044   (0x0018)  
	FSBAliasZoneEvent                                  ZoneEventAlias;                                             // 0x005C   (0x0018)  
};

/// Class /Script/SB.SBToolDataNode_ZoneEventActor
/// Size: 0x0168 (360 bytes) (0x000048 - 0x000168) align n/a MaxSize: 0x0168
class USBToolDataNode_ZoneEventActor : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	bool                                               bCollisionHitToActor;                                       // 0x0054   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              CollisionActorDistance;                                     // 0x0058   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            CustomEffectValue;                                          // 0x0060   (0x0010)  
	TArray<FSBJsonEffectAlias>                         CustomEffectValueByFireElement;                             // 0x0070   (0x0010)  
	float                                              EventInterval;                                              // 0x0080   (0x0004)  
	int32_t                                            DestructCountMax;                                           // 0x0084   (0x0004)  
	float                                              DestructionTimer;                                           // 0x0088   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	TArray<FSBZoneEventActorProperty>                  EventStepProperty;                                          // 0x0090   (0x0010)  
	float                                              DespawnDelayTime;                                           // 0x00A0   (0x0004)  
	float                                              TargetFilterExtentX;                                        // 0x00A4   (0x0004)  
	float                                              TargetFilterExtentY;                                        // 0x00A8   (0x0004)  
	float                                              TargetFilterCheckHeight;                                    // 0x00AC   (0x0004)  
	float                                              ScaleTickDistance;                                          // 0x00B0   (0x0004)  
	float                                              DestructionEvent_DelayMinTime;                              // 0x00B4   (0x0004)  
	float                                              DestructionEvent_DelayMaxTime;                              // 0x00B8   (0x0004)  
	FSBAliasEffect                                     DestructionEventEffectAlias;                                // 0x00BC   (0x0018)  
	FSBAliasRewardGroup                                DestructionEventRewardGroupAlias;                           // 0x00D4   (0x0018)  
	FSBTableIndexRewardGroup                           DestructionEventRewardGroupIndex;                           // 0x00EC   (0x0024)  
	TEnumAsByte<ESBItemBucketType>                     DestructionEvent_RewardBucketType;                          // 0x0110   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               DestructionEvent_RewardOverrideSaveType;                    // 0x0111   (0x0001)  
	bool                                               DestructionEvent_RewardRemoveItemWithResetZone;             // 0x0112   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x0113   (0x0001)  MISSED
	FSBAliasZoneEvent                                  DestructionEventZoneEventAlias;                             // 0x0114   (0x0018)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x012C   (0x0004)  MISSED
	TArray<FSBAliasZoneEvent>                          DestructionEventZoneEventAliasArray;                        // 0x0130   (0x0010)  
	TArray<FSBAliasEffect>                             DestructionEventEffectAliasArray;                           // 0x0140   (0x0010)  
	class USBRewardGroupSpawnFormation*                RewardGroupSpawnFormation;                                  // 0x0150   (0x0008)  
	FString                                            Description;                                                // 0x0158   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_ZoneEventCharacterSpawn
/// Size: 0x03D0 (976 bytes) (0x000048 - 0x0003D0) align n/a MaxSize: 0x03D0
class USBToolDataNode_ZoneEventCharacterSpawn : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FName                                              SpawnPointName;                                             // 0x0054   (0x0008)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x005C   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x005D   (0x0003)  MISSED
	TArray<FSBAliasCharacter>                          CharacterAlias;                                             // 0x0060   (0x0010)  
	TEnumAsByte<ESBZoneSpawnType>                      SpawnType;                                                  // 0x0070   (0x0001)  
	TEnumAsByte<ESBSpawnRotationType>                  SpawnRotationType;                                          // 0x0071   (0x0001)  
	unsigned char                                      UnknownData21_6[0x2];                                       // 0x0072   (0x0002)  MISSED
	FSBAliasZone                                       SpawnZone;                                                  // 0x0074   (0x0018)  
	FName                                              SpawnGroupRuleAlias;                                        // 0x008C   (0x0008)  
	bool                                               bEnableSave;                                                // 0x0094   (0x0001)  
	bool                                               bEnableTransitZone;                                         // 0x0095   (0x0001)  
	bool                                               bEnableTransitZoneByEnemyActor;                             // 0x0096   (0x0001)  
	TEnumAsByte<ESBStayZoneSaveType>                   TransitStayZoneSaveType;                                    // 0x0097   (0x0001)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0098   (0x0001)  
	TEnumAsByte<ESBSaveSubProperty>                    SaveSubProperty;                                            // 0x0099   (0x0001)  
	TEnumAsByte<ESBSpawnRuleType>                      SpawnRuleType;                                              // 0x009A   (0x0001)  
	unsigned char                                      UnknownData22_6[0x1];                                       // 0x009B   (0x0001)  MISSED
	float                                              RespawnIntervalTimeMin;                                     // 0x009C   (0x0004)  
	float                                              RespawnIntervalTimeMax;                                     // 0x00A0   (0x0004)  
	bool                                               bResetZoneKeepObject;                                       // 0x00A4   (0x0001)  
	TEnumAsByte<ESBZoneResetKeepObjTMType>             KeepObjResetTransformType;                                  // 0x00A5   (0x0001)  
	bool                                               bKeepObjApplyResetState;                                    // 0x00A6   (0x0001)  
	bool                                               bSaveWithBlackBoard;                                        // 0x00A7   (0x0001)  
	bool                                               bSpawnToActive;                                             // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData23_6[0x3];                                       // 0x00A9   (0x0003)  MISSED
	float                                              DrawDistance;                                               // 0x00AC   (0x0004)  
	bool                                               bDisableDrawDistanceScale;                                  // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData24_6[0x3];                                       // 0x00B1   (0x0003)  MISSED
	float                                              AlwaysTickDistance;                                         // 0x00B4   (0x0004)  
	bool                                               bKeepSBCharacterWhenActiveAreaControlVolume;                // 0x00B8   (0x0001)  
	bool                                               bMultiSpawnPoint;                                           // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData25_6[0x6];                                       // 0x00BA   (0x0006)  MISSED
	TArray<FSBAliasZoneEvent>                          EventOnSpawning;                                            // 0x00C0   (0x0010)  
	TArray<FSBAliasZoneEvent>                          EventOnDead;                                                // 0x00D0   (0x0010)  
	TArray<FSBAliasZoneEvent>                          EventOnBattle;                                              // 0x00E0   (0x0010)  
	TArray<FSBAliasZoneEvent>                          EventFirstTimeOnBattle;                                     // 0x00F0   (0x0010)  
	TWeakObjectPtr<class USBObjectMaterialData*>       ObjectMaterial;                                             // 0x0100   (0x0008)  
	unsigned char                                      UnknownData26_6[0x20];                                      // 0x0108   (0x0020)  MISSED
	FString                                            PathWay;                                                    // 0x0128   (0x0010)  
	bool                                               GoPathAfterSpawn;                                           // 0x0138   (0x0001)  
	unsigned char                                      UnknownData27_6[0x3];                                       // 0x0139   (0x0003)  MISSED
	FSBAliasCustom_GotoPathwayActor                    PathWayAlias;                                               // 0x013C   (0x0018)  
	FSBAliasRewardGroup                                RewardGroup;                                                // 0x0154   (0x0018)  
	FSBTableIndexRewardGroup                           RewardGroupIndex;                                           // 0x016C   (0x0024)  
	TEnumAsByte<ESBItemBucketType>                     RewardSpawnBucketType;                                      // 0x0190   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               RewardOverrideSaveType;                                     // 0x0191   (0x0001)  
	unsigned char                                      UnknownData28_6[0x2];                                       // 0x0192   (0x0002)  MISSED
	FName                                              TagName;                                                    // 0x0194   (0x0008)  
	bool                                               bHidden;                                                    // 0x019C   (0x0001)  
	unsigned char                                      UnknownData29_6[0x3];                                       // 0x019D   (0x0003)  MISSED
	FSBAliasAIGroup                                    AIGroupAlias;                                               // 0x01A0   (0x0018)  
	FName                                              AIGroupName;                                                // 0x01B8   (0x0008)  
	bool                                               bAIGroupLeader;                                             // 0x01C0   (0x0001)  
	unsigned char                                      UnknownData30_6[0x3];                                       // 0x01C1   (0x0003)  MISSED
	FSBAliasMetaAI                                     MetaAIAlias;                                                // 0x01C4   (0x0018)  
	ESBMetaAIThink                                     MetaAI_InitThink;                                           // 0x01DC   (0x0001)  
	unsigned char                                      UnknownData31_6[0x3];                                       // 0x01DD   (0x0003)  MISSED
	FName                                              MetaAI_SpecialBehaviorTag;                                  // 0x01E0   (0x0008)  
	TWeakObjectPtr<class USBInteractionGraph*>         InteractionGraphAsset;                                      // 0x01E8   (0x0008)  
	unsigned char                                      UnknownData32_6[0x20];                                      // 0x01F0   (0x0020)  MISSED
	FString                                            InteractionGraph;                                           // 0x0210   (0x0010)  
	float                                              InteractionRange;                                           // 0x0220   (0x0004)  
	float                                              InteractionAngle;                                           // 0x0224   (0x0004)  
	float                                              InteractionTargetRange;                                     // 0x0228   (0x0004)  
	float                                              InteractionDotUIAngle;                                      // 0x022C   (0x0004)  
	float                                              InteractionUpperHeight;                                     // 0x0230   (0x0004)  
	float                                              InteractionLowerHeight;                                     // 0x0234   (0x0004)  
	TEnumAsByte<ESBAdjustInteractPosType>              AdjustInteractTargetPosType;                                // 0x0238   (0x0001)  
	TEnumAsByte<ESBInteractionOwnerRotationType>       OwnerRotationType;                                          // 0x0239   (0x0001)  
	unsigned char                                      UnknownData33_6[0x6];                                       // 0x023A   (0x0006)  MISSED
	FString                                            FormationData;                                              // 0x0240   (0x0010)  
	TArray<FSBAliasAchievement>                        CheckAchievements;                                          // 0x0250   (0x0010)  
	TArray<FSBSpawnConditionInfo>                      SpawnConditions;                                            // 0x0260   (0x0010)  
	float                                              EventDelayTime;                                             // 0x0270   (0x0004)  
	unsigned char                                      UnknownData34_6[0x4];                                       // 0x0274   (0x0004)  MISSED
	TArray<FSBObjectConditionTriggerInfo>              ConditionTriggerList;                                       // 0x0278   (0x0010)  
	TWeakObjectPtr<class USBShowData*>                 SpawnShow;                                                  // 0x0288   (0x0008)  
	unsigned char                                      UnknownData35_6[0x20];                                      // 0x0290   (0x0020)  MISSED
	bool                                               bEnableActorTickAtSpawning;                                 // 0x02B0   (0x0001)  
	bool                                               bPendingTheaterByNiike;                                     // 0x02B1   (0x0001)  
	unsigned char                                      UnknownData36_6[0x6];                                       // 0x02B2   (0x0006)  MISSED
	TArray<FSBAliasShop>                               ShopData;                                                   // 0x02B8   (0x0010)  
	TArray<FSBAliasEffect>                             SpawnEffectList;                                            // 0x02C8   (0x0010)  
	FSBAliasPuzzleStringArray                          PuzzleInputText1;                                           // 0x02D8   (0x0018)  
	FSBAliasPuzzleStringArray                          PuzzleInputText2;                                           // 0x02F0   (0x0018)  
	FSBAliasPuzzleStringArray                          PuzzleInputText3;                                           // 0x0308   (0x0018)  
	FSBAliasPuzzleStringArray                          PuzzleInputText4;                                           // 0x0320   (0x0018)  
	TArray<FString>                                    PuzzleInputTextList5;                                       // 0x0338   (0x0010)  
	FString                                            Description;                                                // 0x0348   (0x0010)  
	FVector                                            SpawnPosition;                                              // 0x0358   (0x000C)  
	TEnumAsByte<ESBUIWorldMapTargetDisplayType>        WorldMapDisplayType;                                        // 0x0364   (0x0001)  
	unsigned char                                      UnknownData37_6[0x3];                                       // 0x0365   (0x0003)  MISSED
	FString                                            WorldMapDisplayTitle;                                       // 0x0368   (0x0010)  
	FString                                            WorldMapDisplayDesc;                                        // 0x0378   (0x0010)  
	FName                                              WorldMapDisplayConditionGroup;                              // 0x0388   (0x0008)  
	FName                                              WorldMapIconTag;                                            // 0x0390   (0x0008)  
	float                                              WorldMapOverlapDistance;                                    // 0x0398   (0x0004)  
	TEnumAsByte<ESBInteractRelevantType>               InteractionRelevantType;                                    // 0x039C   (0x0001)  
	unsigned char                                      UnknownData38_6[0x3];                                       // 0x039D   (0x0003)  MISSED
	float                                              OverrideCustomTrackNearDistance;                            // 0x03A0   (0x0004)  
	bool                                               DontCheckZAxisCustomTrackNear;                              // 0x03A4   (0x0001)  
	unsigned char                                      UnknownData39_6[0x3];                                       // 0x03A5   (0x0003)  MISSED
	TArray<FSBAliasCondition>                          InteractionDisable_Condition;                               // 0x03A8   (0x0010)  
	FSBAliasConditionGroup                             InteractionDisable_ConditionGroup;                          // 0x03B8   (0x0018)  
};

/// Struct /Script/SB.SBAliasZoneEnv
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasZoneEnv : FSBAlias
{ 
};

/// Struct /Script/SB.SBZoneEnvTagEvent
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBZoneEnvTagEvent
{ 
	FName                                              StateTagName;                                               // 0x0000   (0x0008)  
	TArray<FSBAliasZoneEvent>                          EventList;                                                  // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBZoneEnvProgressInitProperty
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBZoneEnvProgressInitProperty
{ 
	float                                              InitProgressValue;                                          // 0x0000   (0x0004)  
	float                                              StartProgressValue;                                         // 0x0004   (0x0004)  
	float                                              EndProgressValue;                                           // 0x0008   (0x0004)  
	TEnumAsByte<ESBEnvProgressNotifyFireType>          NotifyFireType;                                             // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	TArray<FSBZoneEnvProgressNotifyData>               ProgressNotify;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBZoneEnvRewardGroupInfo
/// Size: 0x0044 (68 bytes) (0x000000 - 0x000044) align n/a MaxSize: 0x0044
struct FSBZoneEnvRewardGroupInfo
{ 
	FName                                              EnvStateTagName;                                            // 0x0000   (0x0008)  
	FSBAliasRewardGroup                                RewardGroupAlias;                                           // 0x0008   (0x0018)  
	FSBTableIndexRewardGroup                           RewardGroupIndex;                                           // 0x0020   (0x0024)  
};

/// Struct /Script/SB.SBZoneEnvSequenceGroupInfo
/// Size: 0x0148 (328 bytes) (0x000000 - 0x000148) align n/a MaxSize: 0x0148
struct FSBZoneEnvSequenceGroupInfo
{ 
	FName                                              TagName;                                                    // 0x0000   (0x0008)  
	TWeakObjectPtr<class USBTheaterData*>              TransitOut_TheaterData;                                     // 0x0008   (0x0008)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x0010   (0x0020)  MISSED
	TWeakObjectPtr<class ULevelSequence*>              TransitOut_LevelSequence;                                   // 0x0030   (0x0008)  
	unsigned char                                      UnknownData07_6[0x20];                                      // 0x0038   (0x0020)  MISSED
	FString                                            TransitOut_PlayTemplate;                                    // 0x0058   (0x0010)  
	TArray<FName>                                      TransitOut_AttachTagNames;                                  // 0x0068   (0x0010)  
	TWeakObjectPtr<class USBTheaterData*>              Active_TheaterData;                                         // 0x0078   (0x0008)  
	unsigned char                                      UnknownData08_6[0x20];                                      // 0x0080   (0x0020)  MISSED
	TWeakObjectPtr<class ULevelSequence*>              Active_LevelSequence;                                       // 0x00A0   (0x0008)  
	unsigned char                                      UnknownData09_6[0x20];                                      // 0x00A8   (0x0020)  MISSED
	FString                                            Active_PlayTemplate;                                        // 0x00C8   (0x0010)  
	TArray<FName>                                      Active_AttachTagNames;                                      // 0x00D8   (0x0010)  
	TWeakObjectPtr<class ULevelSequence*>              Loop_LevelSequence;                                         // 0x00E8   (0x0008)  
	unsigned char                                      UnknownData10_6[0x20];                                      // 0x00F0   (0x0020)  MISSED
	FString                                            Loop_PlayTemplate;                                          // 0x0110   (0x0010)  
	TArray<FName>                                      Loop_AttachTagNames;                                        // 0x0120   (0x0010)  
	bool                                               bDontStopLoopSequenceAtDestory;                             // 0x0130   (0x0001)  
	bool                                               bWhenChangeStaeLoopSequenceStop;                            // 0x0131   (0x0001)  
	bool                                               UseTemplateTransform;                                       // 0x0132   (0x0001)  
	TEnumAsByte<ESBSequencePlayTransformType>          PlayTransformOwnerType;                                     // 0x0133   (0x0001)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	TArray<FSBZoneEnvToTargetStateInfo>                ToTargetStateInfoList;                                      // 0x0138   (0x0010)  
};

/// Struct /Script/SB.SBAliasNikkeLostArticle
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasNikkeLostArticle : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_ZoneEventEnvSpawn
/// Size: 0x0398 (920 bytes) (0x000048 - 0x000398) align n/a MaxSize: 0x0398
class USBToolDataNode_ZoneEventEnvSpawn : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasZone                                       ZoneAlias;                                                  // 0x0054   (0x0018)  
	unsigned char                                      UnknownData12_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	TArray<FSBAliasZone>                               ZoneAliasList;                                              // 0x0070   (0x0010)  
	FName                                              EnvActorName;                                               // 0x0080   (0x0008)  
	class UClass*                                      EnvBlueprint;                                               // 0x0088   (0x0008)  
	FSBAliasConditionGroup                             SpawnConditionGroup;                                        // 0x0090   (0x0018)  
	FSBAliasZoneEnv                                    EnvAlias;                                                   // 0x00A8   (0x0018)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x00C0   (0x0001)  
	TEnumAsByte<ESBZoneEnvActiveState>                 InitEnvActiveState;                                         // 0x00C1   (0x0001)  
	unsigned char                                      UnknownData13_6[0x6];                                       // 0x00C2   (0x0006)  MISSED
	TArray<FSBZoneEnvTagEvent>                         EventsByStateTag;                                           // 0x00C8   (0x0010)  
	FName                                              InitStateTag;                                               // 0x00D8   (0x0008)  
	bool                                               bEnableSave;                                                // 0x00E0   (0x0001)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x00E1   (0x0001)  
	bool                                               bResetByWarpSafeLocation;                                   // 0x00E2   (0x0001)  
	TEnumAsByte<ESBZoneEnvResetFilterType>             ResetFilterType;                                            // 0x00E3   (0x0001)  
	FSBAliasCondition                                  ResetFilterCondition;                                       // 0x00E4   (0x0018)  
	float                                              InteractionRange;                                           // 0x00FC   (0x0004)  
	float                                              InteractionUpperHeight;                                     // 0x0100   (0x0004)  
	float                                              InteractionLowerHeight;                                     // 0x0104   (0x0004)  
	float                                              InteractionAngle;                                           // 0x0108   (0x0004)  
	float                                              InteractionDotUIAngle;                                      // 0x010C   (0x0004)  
	float                                              InteractionTargetRange;                                     // 0x0110   (0x0004)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0114   (0x0018)  
	float                                              EventDelayTime;                                             // 0x012C   (0x0004)  
	FVector                                            SpawnPosition;                                              // 0x0130   (0x000C)  
	TEnumAsByte<ESBUIWorldMapTargetDisplayType>        WorldMapDisplayType;                                        // 0x013C   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x013D   (0x0003)  MISSED
	FString                                            WorldMapDisplayTitle;                                       // 0x0140   (0x0010)  
	FString                                            WorldMapDisplayDesc;                                        // 0x0150   (0x0010)  
	FName                                              WorldMapDisplayConditionGroup;                              // 0x0160   (0x0008)  
	FName                                              WorldMapIconTag;                                            // 0x0168   (0x0008)  
	float                                              WorldMapOverlapDistance;                                    // 0x0170   (0x0004)  
	TEnumAsByte<ESBInteractRelevantType>               InteractionRelevantType;                                    // 0x0174   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0175   (0x0003)  MISSED
	float                                              OverrideCustomTrackNearDistance;                            // 0x0178   (0x0004)  
	bool                                               DontCheckZAxisCustomTrackNear;                              // 0x017C   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x017D   (0x0003)  MISSED
	TArray<FSBZoneEnvProgressInitProperty>             ProgressInit;                                               // 0x0180   (0x0010)  
	int32_t                                            TriggerCount;                                               // 0x0190   (0x0004)  
	FSBAliasCondition                                  TriggerCondition;                                           // 0x0194   (0x0018)  
	unsigned char                                      UnknownData17_6[0x4];                                       // 0x01AC   (0x0004)  MISSED
	TArray<FSBAliasZoneEvent>                          TriggerTrueEvents;                                          // 0x01B0   (0x0010)  
	TArray<FSBAliasZoneEvent>                          TriggerFalseEvents;                                         // 0x01C0   (0x0010)  
	FName                                              TrueEnvState;                                               // 0x01D0   (0x0008)  
	FName                                              FalseEnvState;                                              // 0x01D8   (0x0008)  
	FSBAliasZoneCamp                                   TargetCamp;                                                 // 0x01E0   (0x0018)  
	TArray<FSBAliasZoneEvent>                          ActiveEnterEvents;                                          // 0x01F8   (0x0010)  
	TArray<FSBAliasZoneEvent>                          ActiveLeaveEvents;                                          // 0x0208   (0x0010)  
	TArray<FSBAliasZoneEnvSpawn>                       LinkEnvSpawnList;                                           // 0x0218   (0x0010)  
	float                                              SaveMinIntervalByAutoActivateCamp;                          // 0x0228   (0x0004)  
	unsigned char                                      UnknownData18_6[0x4];                                       // 0x022C   (0x0004)  MISSED
	TArray<FSBAliasShop>                               ShopData;                                                   // 0x0230   (0x0010)  
	bool                                               bMaintainNewGamePlus;                                       // 0x0240   (0x0001)  
	unsigned char                                      UnknownData19_6[0x7];                                       // 0x0241   (0x0007)  MISSED
	TWeakObjectPtr<class USBInteractionGraph*>         InteractionGraphAsset;                                      // 0x0248   (0x0008)  
	unsigned char                                      UnknownData20_6[0x20];                                      // 0x0250   (0x0020)  MISSED
	TEnumAsByte<ESBItemBucketType>                     RewardSpawnBucketType;                                      // 0x0270   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               RewardOverrideSaveType;                                     // 0x0271   (0x0001)  
	unsigned char                                      UnknownData21_6[0x6];                                       // 0x0272   (0x0006)  MISSED
	class USBRewardGroupSpawnFormation*                RewardGroupSpawnFormation;                                  // 0x0278   (0x0008)  
	TArray<FSBZoneEnvRewardGroupInfo>                  RewardGroupList;                                            // 0x0280   (0x0010)  
	FString                                            Description;                                                // 0x0290   (0x0010)  
	FString                                            PuzzleCompareData;                                          // 0x02A0   (0x0010)  
	TEnumAsByte<ESBPuzzleDataType>                     PuzzleDataType;                                             // 0x02B0   (0x0001)  
	TEnumAsByte<ESBEquation>                           PuzzleEq;                                                   // 0x02B1   (0x0001)  
	unsigned char                                      UnknownData22_6[0x2];                                       // 0x02B2   (0x0002)  MISSED
	FSBAliasPuzzleStringArray                          PuzzleInputText1;                                           // 0x02B4   (0x0018)  
	FSBAliasPuzzleStringArray                          PuzzleInputText2;                                           // 0x02CC   (0x0018)  
	FSBAliasPuzzleStringArray                          PuzzleInputText3;                                           // 0x02E4   (0x0018)  
	FSBAliasPuzzleStringArray                          PuzzleInputText4;                                           // 0x02FC   (0x0018)  
	unsigned char                                      UnknownData23_6[0x4];                                       // 0x0314   (0x0004)  MISSED
	TArray<FString>                                    PuzzleInputTextList5;                                       // 0x0318   (0x0010)  
	TArray<FSBZoneEnvSequenceGroupInfo>                SequenceInfoList;                                           // 0x0328   (0x0010)  
	ESBCustomDepthStencilValue                         ScanOverrideStencilValue;                                   // 0x0338   (0x0004)  
	float                                              OverrideNikkeGoodsDetectDistanceMax;                        // 0x033C   (0x0004)  
	TArray<FSBAliasCondition>                          InteractionDisable_Condition;                               // 0x0340   (0x0010)  
	FSBAliasConditionGroup                             InteractionDisable_ConditionGroup;                          // 0x0350   (0x0018)  
	FSBAliasNikkeLostArticle                           NikkeLostArticle;                                           // 0x0368   (0x0018)  
	FSBAliasSpawnPoint                                 NikkeFriendlyNpc;                                           // 0x0380   (0x0018)  
};

/// Struct /Script/SB.SBAliasItemSpawn
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasItemSpawn : FSBAlias
{ 
};

/// Class /Script/SB.SBToolDataNode_ZoneEventItem
/// Size: 0x0108 (264 bytes) (0x000048 - 0x000108) align n/a MaxSize: 0x0108
class USBToolDataNode_ZoneEventItem : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FName                                              SpawnPointName;                                             // 0x0054   (0x0008)  
	FSBAliasItem                                       SpawnItemAlias;                                             // 0x005C   (0x0018)  
	int32_t                                            SpawnItemCount;                                             // 0x0074   (0x0004)  
	FSBAliasItemSpawn                                  SpawnInfoAlias;                                             // 0x0078   (0x0018)  
	TEnumAsByte<ESBZoneEventItemType>                  ControlType;                                                // 0x0090   (0x0001)  
	TEnumAsByte<ESBZoneSpawnType>                      SpawnType;                                                  // 0x0091   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0092   (0x0002)  MISSED
	FSBAliasWorld                                      SpawnWorld;                                                 // 0x0094   (0x0018)  
	FSBAliasZone                                       SpawnZone;                                                  // 0x00AC   (0x0018)  
	TEnumAsByte<ESBItemBucketType>                     SpawnItemBucketType;                                        // 0x00C4   (0x0001)  
	bool                                               bEnableSave;                                                // 0x00C5   (0x0001)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x00C6   (0x0001)  
	TEnumAsByte<ESBZoneEventEventorType>               EventorType;                                                // 0x00C7   (0x0001)  
	TArray<FSBAliasAchievement>                        CheckAchievements;                                          // 0x00C8   (0x0010)  
	TArray<FSBAliasZoneEvent>                          AcquireZoneEvents;                                          // 0x00D8   (0x0010)  
	float                                              EventDelayTime;                                             // 0x00E8   (0x0004)  
	bool                                               bUseOverrideAutoInteraction;                                // 0x00EC   (0x0001)  
	bool                                               bAutoInteraction;                                           // 0x00ED   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x00EE   (0x0002)  MISSED
	float                                              AutoInteractionDist;                                        // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	FString                                            Description;                                                // 0x00F8   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_ZoneLayer
/// Size: 0x0080 (128 bytes) (0x000048 - 0x000080) align n/a MaxSize: 0x0080
class USBToolDataNode_ZoneLayer : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FName                                              LayerName;                                                  // 0x0054   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	TArray<FSBAliasZone>                               ZoneList;                                                   // 0x0060   (0x0010)  
	FString                                            Description;                                                // 0x0070   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_ZonePhaseEvent
/// Size: 0x0140 (320 bytes) (0x000048 - 0x000140) align n/a MaxSize: 0x0140
class USBToolDataNode_ZonePhaseEvent : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	TEnumAsByte<ESBPhaseEventType>                     PhaseEventType;                                             // 0x0054   (0x0001)  
	TEnumAsByte<ESBPhaseEventCompleteType>             PhaseEventCompleteType;                                     // 0x0055   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	int32_t                                            PhaseEventCompleteValue;                                    // 0x0058   (0x0004)  
	FName                                              NextPhaseEventName;                                         // 0x005C   (0x0008)  
	float                                              PhaseEventDelayTime;                                        // 0x0064   (0x0004)  
	FSBAliasCondition                                  EventCondition;                                             // 0x0068   (0x0018)  
	FSBAliasConditionGroup                             EventConditionGroup;                                        // 0x0080   (0x0018)  
	bool                                               bWithDestory;                                               // 0x0098   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	FString                                            Description;                                                // 0x00A0   (0x0010)  
	TArray<TEnumAsByte<ESBZoneEventType>>              EventTypeList;                                              // 0x00B0   (0x0010)  
	TArray<TEnumAsByte<ESBZoneEventType>>              StartEventTypeList;                                         // 0x00C0   (0x0010)  
	TArray<TEnumAsByte<ESBZoneEventType>>              CompleteEventTypeList;                                      // 0x00D0   (0x0010)  
	TArray<FName>                                      EventList;                                                  // 0x00E0   (0x0010)  
	TArray<FName>                                      StartEventList;                                             // 0x00F0   (0x0010)  
	TArray<FName>                                      CompleteEventList;                                          // 0x0100   (0x0010)  
	TArray<FName>                                      ActiveZoneEventList;                                        // 0x0110   (0x0010)  
	TArray<FName>                                      StartZoneEventList;                                         // 0x0120   (0x0010)  
	TArray<FName>                                      CompleteZoneEventList;                                      // 0x0130   (0x0010)  
};

/// Class /Script/SB.SBToolDataNode_ZoneTrigger
/// Size: 0x0138 (312 bytes) (0x000048 - 0x000138) align n/a MaxSize: 0x0138
class USBToolDataNode_ZoneTrigger : public USBDataNodeBase
{ 
public:
	FName                                              Alias;                                                      // 0x0048   (0x0008)  
	uint32_t                                           ID;                                                         // 0x0050   (0x0004)  
	FSBAliasZone                                       ZoneAlias;                                                  // 0x0054   (0x0018)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x006C   (0x0001)  
	TEnumAsByte<ESBZoneTriggerType>                    TriggerType;                                                // 0x006D   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x006E   (0x0002)  MISSED
	TArray<FSBAliasZoneEvent>                          EnterEvent;                                                 // 0x0070   (0x0010)  
	TArray<FSBAliasZoneEvent>                          LeaveEvent;                                                 // 0x0080   (0x0010)  
	FSBAliasCondition                                  Condition;                                                  // 0x0090   (0x0018)  
	FSBAliasConditionGroup                             ConditionGroup;                                             // 0x00A8   (0x0018)  
	int32_t                                            InitialDoingCount;                                          // 0x00C0   (0x0004)  
	TEnumAsByte<ESBZoneTriggerDoingType>               DoingType;                                                  // 0x00C4   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x00C5   (0x0003)  MISSED
	float                                              ActiveRange;                                                // 0x00C8   (0x0004)  
	bool                                               bEnableSave;                                                // 0x00CC   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x00CD   (0x0003)  MISSED
	FSBAliasLevelTargetFilter                          LevelTargetFilter;                                          // 0x00D0   (0x0018)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x00E8   (0x0001)  
	bool                                               bInOutTrigger;                                              // 0x00E9   (0x0001)  
	bool                                               bIgnoreDoingCount;                                          // 0x00EA   (0x0001)  
	TEnumAsByte<ESBZoneTriggerFilterType>              IgnoreFilter;                                               // 0x00EB   (0x0001)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x00EC   (0x0004)  MISSED
	TWeakObjectPtr<class USBObjectMaterialData*>       ConditionObjectMaterial;                                    // 0x00F0   (0x0008)  
	unsigned char                                      UnknownData09_6[0x20];                                      // 0x00F8   (0x0020)  MISSED
	FVector                                            VolumeBoxExtent;                                            // 0x0118   (0x000C)  
	float                                              BlockExtraSprintDuration;                                   // 0x0124   (0x0004)  
	FString                                            Description;                                                // 0x0128   (0x0010)  
};

/// Class /Script/SB.SBTouchGestureRecognizer
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class USBTouchGestureRecognizer : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x48];                                      // 0x0028   (0x0048)  MISSED
};

/// Struct /Script/SB.SBTransitAnimGroup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBTransitAnimGroup
{ 
	TArray<TEnumAsByte<ESBCharacterTransitAnim>>       TransitAnimArray;                                           // 0x0000   (0x0010)  
};

/// Class /Script/SB.SBTransitAnimGroupData
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class USBTransitAnimGroupData : public UDataAsset
{ 
public:
	TMap<FName, FSBTransitAnimGroup>                   TransitAnimGroupMap;                                        // 0x0030   (0x0050)  
};

/// Class /Script/SB.SBTypeWriterTextBlock
/// Size: 0x0710 (1808 bytes) (0x0006F0 - 0x000710) align n/a MaxSize: 0x0710
class USBTypeWriterTextBlock : public URichTextBlock
{ 
public:
	unsigned char                                      UnknownData01_1[0x20];                                      // 0x06F0   (0x0020)  MISSED
};

/// Class /Script/SB.SBTypeWriterWidget
/// Size: 0x0328 (808 bytes) (0x000280 - 0x000328) align n/a MaxSize: 0x0328
class USBTypeWriterWidget : public UUserWidget
{ 
public:
	TWeakObjectPtr<class USBTypeWriterTextBlock*>      LineText;                                                   // 0x0280   (0x0008)  
	float                                              LetterPlayTime;                                             // 0x0288   (0x0004)  
	float                                              LetterSpacePlayTime;                                        // 0x028C   (0x0004)  
	float                                              EndHoldTime;                                                // 0x0290   (0x0004)  
	float                                              MinDesiredWidth;                                            // 0x0294   (0x0004)  
	float                                              MarginWidth;                                                // 0x0298   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x029C   (0x0004)  MISSED
	FText                                              CurrentLine;                                                // 0x02A0   (0x0018)  
	unsigned char                                      UnknownData03_7[0x70];                                      // 0x02B8   (0x0070)  MISSED

	/// Functions
	// Function /Script/SB.SBTypeWriterWidget.SkipToLineEnd
	constexpr static const FunctionPointer<USBTypeWriterWidget, void> SkipToLineEnd = { 0x28122d0, 0 }; 
	// Function /Script/SB.SBTypeWriterWidget.PlayLine
	constexpr static const FunctionPointer<USBTypeWriterWidget, void, const FText&, const float> PlayLine = { 0x2812460, 1 }; 
	// Function /Script/SB.SBTypeWriterWidget.OnPlayLetter
	constexpr static const FunctionPointer<USBTypeWriterWidget, void, const bool, const FString> OnPlayLetter = { 0x2bbb090, 2 }; 
	// Function /Script/SB.SBTypeWriterWidget.OnLineFinishedPlaying
	constexpr static const FunctionPointer<USBTypeWriterWidget, void> OnLineFinishedPlaying = { 0x2bbb090, 3 }; 
	// Function /Script/SB.SBTypeWriterWidget.HasFinishedPlayingLine
	constexpr static const FunctionPointer<USBTypeWriterWidget, bool> HasFinishedPlayingLine = { 0x28122f0, 4 }; 
	// Function /Script/SB.SBTypeWriterWidget.GetCurrentLine
	constexpr static const FunctionPointer<USBTypeWriterWidget, void, const FText&> GetCurrentLine = { 0x2812320, 5 }; 
};

/// Class /Script/SB.SBUIListViewBaseDataObject
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBUIListViewBaseDataObject : public UObject
{ 
public:
};

/// Class /Script/SB.SBUIComboBoxBaseDataObject
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBUIComboBoxBaseDataObject : public USBUIListViewBaseDataObject
{ 
public:
};

/// Class /Script/SB.SBUIDefinitionData
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align n/a MaxSize: 0x0068
class USBUIDefinitionData : public UDataAsset
{ 
public:
	uint32_t                                           Version;                                                    // 0x0030   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TWeakObjectPtr<class UObject*>                     WidgetPath;                                                 // 0x0038   (0x0008)  
	unsigned char                                      UnknownData04_6[0x20];                                      // 0x0040   (0x0020)  MISSED
	TEnumAsByte<ESBUILogicType>                        LogicType;                                                  // 0x0060   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/SB.SBUIItemSettingsData
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
class USBUIItemSettingsData : public UDataAsset
{ 
public:
	FColor                                             colorCommon;                                                // 0x0030   (0x0004)  
	FColor                                             colorUncommon;                                              // 0x0034   (0x0004)  
	FColor                                             colorRare;                                                  // 0x0038   (0x0004)  
	FColor                                             colorEpic;                                                  // 0x003C   (0x0004)  
	FColor                                             colorLegendary;                                             // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED

	/// Functions
	// Function /Script/SB.SBUIItemSettingsData.GetRarityColor
	constexpr static const FunctionPointer<USBUIItemSettingsData, FColor, const TEnumAsByte<ESBItemRarityType>> GetRarityColor = { 0x281cf30, 0 }; 
};

/// Class /Script/SB.SBUITileViewBaseDataObject
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class USBUITileViewBaseDataObject : public UObject
{ 
public:
	bool                                               bIsEnableSelect;                                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Class /Script/SB.SBUMGInputObserver
/// Size: 0x02C8 (712 bytes) (0x0002C8 - 0x0002C8) align n/a MaxSize: 0x02C8
class ASBUMGInputObserver : public AActor
{ 
public:
};

/// Class /Script/SB.SBUMGAxisObserver
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USBUMGAxisObserver : public UObject
{ 
public:
};

/// Class /Script/SB.SBUserWidgetEventObserver
/// Size: 0x0130 (304 bytes) (0x000028 - 0x000130) align n/a MaxSize: 0x0130
class USBUserWidgetEventObserver : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x108];                                     // 0x0028   (0x0108)  MISSED

	/// Functions
	// Function /Script/SB.SBUserWidgetEventObserver.OnWidgetListViewEvent
	constexpr static const FunctionPointer<USBUserWidgetEventObserver, void, const UObject*> OnWidgetListViewEvent = { 0x2828290, 0 }; 
	// Function /Script/SB.SBUserWidgetEventObserver.OnWidgetEvent
	constexpr static const FunctionPointer<USBUserWidgetEventObserver, void> OnWidgetEvent = { 0x2828370, 1 }; 
	// Function /Script/SB.SBUserWidgetEventObserver.NotifyListViewRelease
	constexpr static const FunctionPointer<USBUserWidgetEventObserver, void, const UObject*> NotifyListViewRelease = { 0x2828290, 2 }; 
	// Function /Script/SB.SBUserWidgetEventObserver.NotifyListViewPress
	constexpr static const FunctionPointer<USBUserWidgetEventObserver, void, const UObject*> NotifyListViewPress = { 0x2828290, 3 }; 
	// Function /Script/SB.SBUserWidgetEventObserver.NotifyListViewDoubleClick
	constexpr static const FunctionPointer<USBUserWidgetEventObserver, void, const UObject*> NotifyListViewDoubleClick = { 0x2828290, 4 }; 
	// Function /Script/SB.SBUserWidgetEventObserver.NotifyListViewClick
	constexpr static const FunctionPointer<USBUserWidgetEventObserver, void, const UObject*> NotifyListViewClick = { 0x2828290, 5 }; 
};

/// Class /Script/SB.SBUtilLevelNotice
/// Size: 0x0310 (784 bytes) (0x0002C8 - 0x000310) align n/a MaxSize: 0x0310
class ASBUtilLevelNotice : public AActor
{ 
public:
	FString                                            textNotice;                                                 // 0x02C8   (0x0010)  
	FSlateColor                                        textNoticeColor;                                            // 0x02D8   (0x0028)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0300   (0x0010)  MISSED

	/// Functions
	// Function /Script/SB.SBUtilLevelNotice.EventUpdateWidget
	constexpr static const FunctionPointer<ASBUtilLevelNotice, void> EventUpdateWidget = { 0x28289a0, 0 }; 
};

/// Class /Script/SB.SBUtilLevelNoticeWidget
/// Size: 0x02C8 (712 bytes) (0x000280 - 0x0002C8) align n/a MaxSize: 0x02C8
class USBUtilLevelNoticeWidget : public UUserWidget
{ 
public:
	FText                                              noticeText;                                                 // 0x0280   (0x0018)  
	FSlateColor                                        noticeTextColor;                                            // 0x0298   (0x0028)  
	class UTextBlock*                                  TextBlockNotice;                                            // 0x02C0   (0x0008)  

	/// Functions
	// Function /Script/SB.SBUtilLevelNoticeWidget.EventUpdateNotify
	constexpr static const FunctionPointer<USBUtilLevelNoticeWidget, void> EventUpdateNotify = { 0x2bbb090, 0 }; 
};

/// Class /Script/SB.SBVertexAnimStaticMeshComponent
/// Size: 0x0610 (1552 bytes) (0x0005E0 - 0x000610) align n/a MaxSize: 0x0610
class USBVertexAnimStaticMeshComponent : public UStaticMeshComponent
{ 
public:
	FName                                              AnimParameterName;                                          // 0x05E0   (0x0008)  
	float                                              PlayTimeLength;                                             // 0x05E8   (0x0004)  
	float                                              PlayDelayTime;                                              // 0x05EC   (0x0004)  
	float                                              FadeBeginTime;                                              // 0x05F0   (0x0004)  
	float                                              FadeDuration;                                               // 0x05F4   (0x0004)  
	FName                                              FadeParameterName;                                          // 0x05F8   (0x0008)  
	float                                              CurrentTime;                                                // 0x0600   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0604   (0x000C)  MISSED

	/// Functions
	// Function /Script/SB.SBVertexAnimStaticMeshComponent.SetVertexAnim
	constexpr static const FunctionPointer<USBVertexAnimStaticMeshComponent, void, const float, const float, const FName> SetVertexAnim = { 0x28291f0, 0 }; 
	// Function /Script/SB.SBVertexAnimStaticMeshComponent.SetMaterials
	constexpr static const FunctionPointer<USBVertexAnimStaticMeshComponent, void, const TArray<UMaterialInterface*>> SetMaterials = { 0x2828e70, 1 }; 
	// Function /Script/SB.SBVertexAnimStaticMeshComponent.SetDissolveFade
	constexpr static const FunctionPointer<USBVertexAnimStaticMeshComponent, void, const float, const float, const FName> SetDissolveFade = { 0x2828ff0, 2 }; 
};

/// Struct /Script/SB.SBVFXParticle
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBVFXParticle
{ 
	class UParticleSystem*                             PSTemplate;                                                 // 0x0000   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0008   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0014   (0x000C)  
	float                                              Scale;                                                      // 0x0020   (0x0004)  
	bool                                               bAbsoluteRotation;                                          // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0025   (0x0003)  MISSED
};

/// Class /Script/SB.SBVFXVolume
/// Size: 0x0358 (856 bytes) (0x000318 - 0x000358) align n/a MaxSize: 0x0358
class ASBVFXVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x031C   (0x0004)  MISSED
	TArray<FSBVFXParticle>                             ParticlesAttachToCamera;                                    // 0x0320   (0x0010)  
	bool                                               bActiveParticleAttachToCamera;                              // 0x0330   (0x0001)  
	bool                                               bOverrideEnvControlVolumeParticles;                         // 0x0331   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0332   (0x0002)  MISSED
	FSBMapSectorID                                     SectorID;                                                   // 0x0334   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x033C   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0348   (0x000C)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0354   (0x0004)  MISSED
};

/// Class /Script/SB.SBVibrationComponent
/// Size: 0x02D0 (720 bytes) (0x000260 - 0x0002D0) align n/a MaxSize: 0x02D0
class USBVibrationComponent : public USceneComponent
{ 
public:
	class USBVibrationSet*                             VibrationSet;                                               // 0x0260   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0268   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x026C   (0x0004)  
	bool                                               bAllowSpatialization;                                       // 0x0270   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0271   (0x0007)  MISSED
	class USoundAttenuation*                           HapticAttenuationSetting;                                   // 0x0278   (0x0008)  
	float                                              IntensityMultiplier;                                        // 0x0280   (0x0004)  
	bool                                               ForceFeedbackLooping;                                       // 0x0284   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0285   (0x0003)  MISSED
	class UForceFeedbackAttenuation*                   ForceFeedbackAttenuation;                                   // 0x0288   (0x0008)  
	bool                                               bAutoDestroy : 1;                                           // 0x0290:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x0290:1 (0x0001)  
	unsigned char                                      UnknownData06_5[0x1F];                                      // 0x0291   (0x001F)  MISSED
	class UAudioComponent*                             HapticComponent;                                            // 0x02B0   (0x0008)  
	class UForceFeedbackComponent*                     ForceFeedbackComponent;                                     // 0x02B8   (0x0008)  
	unsigned char                                      UnknownData07_7[0x10];                                      // 0x02C0   (0x0010)  MISSED

	/// Functions
	// Function /Script/SB.SBVibrationComponent.SubscribeSoundParam
	constexpr static const FunctionPointer<USBVibrationComponent, void, const TArray<ESBSoundParamType>&> SubscribeSoundParam = { 0x28299e0, 0 }; 
	// Function /Script/SB.SBVibrationComponent.Stop
	constexpr static const FunctionPointer<USBVibrationComponent, void> Stop = { 0x282a0b0, 1 }; 
	// Function /Script/SB.SBVibrationComponent.SetWaveParameter
	constexpr static const FunctionPointer<USBVibrationComponent, void, const FName, const USoundWave*> SetWaveParameter = { 0x2829ad0, 2 }; 
	// Function /Script/SB.SBVibrationComponent.SetVibration
	constexpr static const FunctionPointer<USBVibrationComponent, void, const USBVibrationSet*> SetVibration = { 0x282a610, 3 }; 
	// Function /Script/SB.SBVibrationComponent.SetIntParameter
	constexpr static const FunctionPointer<USBVibrationComponent, void, const FName, const int32_t> SetIntParameter = { 0x2829dd0, 4 }; 
	// Function /Script/SB.SBVibrationComponent.SetFloatParameter
	constexpr static const FunctionPointer<USBVibrationComponent, void, const FName, const float> SetFloatParameter = { 0x2829c60, 5 }; 
	// Function /Script/SB.SBVibrationComponent.SetBoolParameter
	constexpr static const FunctionPointer<USBVibrationComponent, void, const FName, const bool> SetBoolParameter = { 0x2829f40, 6 }; 
	// Function /Script/SB.SBVibrationComponent.Play
	constexpr static const FunctionPointer<USBVibrationComponent, void, const float> Play = { 0x282a0d0, 7 }; 
	// Function /Script/SB.SBVibrationComponent.IsPlaying
	constexpr static const FunctionPointer<USBVibrationComponent, bool> IsPlaying = { 0x28299b0, 8 }; 
	// Function /Script/SB.SBVibrationComponent.FadeOut
	constexpr static const FunctionPointer<USBVibrationComponent, void, const float, const float, const EAudioFaderCurve> FadeOut = { 0x282a1a0, 9 }; 
	// Function /Script/SB.SBVibrationComponent.FadeIn
	constexpr static const FunctionPointer<USBVibrationComponent, void, const float, const float, const float, const EAudioFaderCurve> FadeIn = { 0x282a390, 10 }; 
};

/// Struct /Script/SB.SBVibrationSectionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBVibrationSectionData
{ 
	class USBVibrationSet*                             VibrationSet;                                               // 0x0000   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0008   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x000C   (0x0004)  
	float                                              IntensityMultiplier;                                        // 0x0010   (0x0004)  
	bool                                               ForceFeedbackLooping;                                       // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x0015   (0x000B)  MISSED
};

/// Class /Script/SB.SBVibrationSection
/// Size: 0x02F8 (760 bytes) (0x0000E8 - 0x0002F8) align n/a MaxSize: 0x02F8
class USBVibrationSection : public UMovieSceneSection
{ 
public:
	FSBVibrationSectionData                            Data;                                                       // 0x00E8   (0x0020)  
	FMovieSceneFloatChannel                            HapticVolume;                                               // 0x0108   (0x00A0)  
	FMovieSceneFloatChannel                            ForceFeedbackIntensity;                                     // 0x01A8   (0x00A0)  
	FMovieSceneActorReferenceData                      AttachActorData;                                            // 0x0248   (0x00B0)  
};

/// Class /Script/SB.SBVibrationSet
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class USBVibrationSet : public UDataAsset
{ 
public:
	class UForceFeedbackEffect*                        ForceFeedback;                                              // 0x0030   (0x0008)  
	class USoundBase*                                  HapticSound;                                                // 0x0038   (0x0008)  
};

/// Class /Script/SB.SBVibrationTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class USBVibrationTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Class /Script/SB.SBWaterVolume
/// Size: 0x0548 (1352 bytes) (0x000508 - 0x000548) align n/a MaxSize: 0x0548
class ASBWaterVolume : public APhysicsVolume
{ 
public:
	class AActor*                                      WaterPlaneActor;                                            // 0x0508   (0x0008)  
	TEnumAsByte<ESBWaterVolumeType>                    Type;                                                       // 0x0510   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0511   (0x0003)  MISSED
	FSBMapSectorID                                     SectorID;                                                   // 0x0514   (0x0008)  
	FName                                              RewardGroup;                                                // 0x051C   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0524   (0x0004)  MISSED
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0528   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x0530   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x053C   (0x000C)  
};

/// Struct /Script/SB.SBWayPointEventInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FSBWayPointEventInfo
{ 
	uint32_t                                           RandWeight;                                                 // 0x0000   (0x0004)  
	FSBAliasZoneEvent                                  ZoneEvent;                                                  // 0x0004   (0x0018)  
};

/// Class /Script/SB.SBWayPointActor
/// Size: 0x0398 (920 bytes) (0x0002F0 - 0x000398) align n/a MaxSize: 0x0398
class ASBWayPointActor : public ANavigationObjectBase
{ 
public:
	TArray<FSBAliasZoneEvent>                          ZoneEventList;                                              // 0x02F0   (0x0010)  
	TEnumAsByte<ESBMoveState>                          MoveState;                                                  // 0x0300   (0x0001)  
	TEnumAsByte<ESBMoveState>                          ReturnMoveState;                                            // 0x0301   (0x0001)  
	TEnumAsByte<ESBWayInterpType>                      InterpType;                                                 // 0x0302   (0x0001)  
	TEnumAsByte<ESBPathWayEntryType>                   EntryType;                                                  // 0x0303   (0x0001)  
	float                                              AmplitudePerAngle;                                          // 0x0304   (0x0004)  
	int32_t                                            SinCircleCount;                                             // 0x0308   (0x0004)  
	FName                                              NextPathWayAlias;                                           // 0x030C   (0x0008)  
	bool                                               bRepeat;                                                    // 0x0314   (0x0001)  
	bool                                               bCheckObstacle;                                             // 0x0315   (0x0001)  
	bool                                               bRetryOffPath;                                              // 0x0316   (0x0001)  
	bool                                               bDisableBlockDetectionState;                                // 0x0317   (0x0001)  
	float                                              CancelPausePendingDuration;                                 // 0x0318   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x031C   (0x0004)  MISSED
	TArray<FSBWayPointEventInfo>                       StopToMoveRandEvents;                                       // 0x0320   (0x0010)  
	FName                                              PathWayAlias;                                               // 0x0330   (0x0008)  
	float                                              MinRoundRange;                                              // 0x0338   (0x0004)  
	float                                              MaxRoundRange;                                              // 0x033C   (0x0004)  
	float                                              DestinationMinDelayTime;                                    // 0x0340   (0x0004)  
	float                                              DestinationMaxDelayTime;                                    // 0x0344   (0x0004)  
	float                                              NearEntryDestinationLength;                                 // 0x0348   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x034C   (0x0004)  MISSED
	class USplineComponent*                            SplineComponent;                                            // 0x0350   (0x0008)  
	float                                              TurnDegree;                                                 // 0x0358   (0x0004)  
	float                                              BeginTurnDelayTime;                                         // 0x035C   (0x0004)  
	float                                              EndTurnDelayTime;                                           // 0x0360   (0x0004)  
	TEnumAsByte<ESBWayPointTurnType>                   TurnType;                                                   // 0x0364   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0365   (0x0003)  MISSED
	float                                              PathWayAdjustDirRadius;                                     // 0x0368   (0x0004)  
	float                                              PathWayAdjustDirByObjectRadiusMax;                          // 0x036C   (0x0004)  
	float                                              PathWayAdjustDirByObjectRadiusMin;                          // 0x0370   (0x0004)  
	float                                              PathWayAdjustDirInterpSpeed_Walk;                           // 0x0374   (0x0004)  
	float                                              PathWayAdjustDirInterpSpeed_Run;                            // 0x0378   (0x0004)  
	float                                              PathWayOutPathPointDistance;                                // 0x037C   (0x0004)  
	class ASBWayPointActor*                            PreWayPoint;                                                // 0x0380   (0x0008)  
	class ASBWayPointActor*                            NextWayPoint;                                               // 0x0388   (0x0008)  
	float                                              Distance;                                                   // 0x0390   (0x0004)  
	bool                                               bWarpToStartPoint;                                          // 0x0394   (0x0001)  
	bool                                               bApplyBezierCurve;                                          // 0x0395   (0x0001)  
	bool                                               bMoveToStartCheckNearBy;                                    // 0x0396   (0x0001)  
	bool                                               bApplyRotationAtSequence;                                   // 0x0397   (0x0001)  
};

/// Class /Script/SB.SBWidgetComponent
/// Size: 0x06A0 (1696 bytes) (0x000560 - 0x0006A0) align n/a MaxSize: 0x06A0
class USBWidgetComponent : public UMeshComponent
{ 
public:
	ESBWidgetSpace                                     Space;                                                      // 0x0560   (0x0001)  
	ESBWidgetTimingPolicy                              TimingPolicy;                                               // 0x0561   (0x0001)  
	unsigned char                                      UnknownData11_6[0x6];                                       // 0x0562   (0x0006)  MISSED
	class UClass*                                      WidgetClass;                                                // 0x0568   (0x0008)  
	FIntPoint                                          DrawSize;                                                   // 0x0570   (0x0008)  
	bool                                               bManuallyRedraw;                                            // 0x0578   (0x0001)  
	bool                                               bRedrawRequested;                                           // 0x0579   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x057A   (0x0002)  MISSED
	float                                              RedrawTime;                                                 // 0x057C   (0x0004)  
	unsigned char                                      UnknownData13_6[0x8];                                       // 0x0580   (0x0008)  MISSED
	FIntPoint                                          CurrentDrawSize;                                            // 0x0588   (0x0008)  
	bool                                               bDrawAtDesiredSize;                                         // 0x0590   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0591   (0x0003)  MISSED
	FVector2D                                          Pivot;                                                      // 0x0594   (0x0008)  
	bool                                               bReceiveHardwareInput;                                      // 0x059C   (0x0001)  
	bool                                               bWindowFocusable;                                           // 0x059D   (0x0001)  
	bool                                               bApplyGammaCorrection;                                      // 0x059E   (0x0001)  
	unsigned char                                      UnknownData15_6[0x1];                                       // 0x059F   (0x0001)  MISSED
	class ULocalPlayer*                                OwnerPlayer;                                                // 0x05A0   (0x0008)  
	FLinearColor                                       BackgroundColor;                                            // 0x05A8   (0x0010)  
	FLinearColor                                       TintColorAndOpacity;                                        // 0x05B8   (0x0010)  
	float                                              OpacityFromTexture;                                         // 0x05C8   (0x0004)  
	ESBWidgetBlendMode                                 BlendMode;                                                  // 0x05CC   (0x0001)  
	bool                                               bIsTwoSided;                                                // 0x05CD   (0x0001)  
	bool                                               TickWhenOffscreen;                                          // 0x05CE   (0x0001)  
	unsigned char                                      UnknownData16_6[0x1];                                       // 0x05CF   (0x0001)  MISSED
	class UUserWidget*                                 Widget;                                                     // 0x05D0   (0x0008)  
	unsigned char                                      UnknownData17_6[0x20];                                      // 0x05D8   (0x0020)  MISSED
	class UBodySetup*                                  BodySetup;                                                  // 0x05F8   (0x0008)  
	class UMaterialInterface*                          TranslucentMaterial;                                        // 0x0600   (0x0008)  
	class UMaterialInterface*                          TranslucentMaterial_OneSided;                               // 0x0608   (0x0008)  
	class UMaterialInterface*                          OpaqueMaterial;                                             // 0x0610   (0x0008)  
	class UMaterialInterface*                          OpaqueMaterial_OneSided;                                    // 0x0618   (0x0008)  
	class UMaterialInterface*                          MaskedMaterial;                                             // 0x0620   (0x0008)  
	class UMaterialInterface*                          MaskedMaterial_OneSided;                                    // 0x0628   (0x0008)  
	class UTextureRenderTarget2D*                      RenderTarget;                                               // 0x0630   (0x0008)  
	class UMaterialInstanceDynamic*                    MaterialInstance;                                           // 0x0638   (0x0008)  
	bool                                               bAddedToScreen;                                             // 0x0640   (0x0001)  
	bool                                               bEditTimeUsable;                                            // 0x0641   (0x0001)  
	unsigned char                                      UnknownData18_6[0x2];                                       // 0x0642   (0x0002)  MISSED
	FName                                              SharedLayerName;                                            // 0x0644   (0x0008)  
	int32_t                                            LayerZOrder;                                                // 0x064C   (0x0004)  
	ESBWidgetGeometryMode                              GeometryMode;                                               // 0x0650   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x0651   (0x0003)  MISSED
	float                                              CylinderArcAngle;                                           // 0x0654   (0x0004)  
	float                                              BillboardScale;                                             // 0x0658   (0x0004)  
	bool                                               BillboardNearScale;                                         // 0x065C   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x065D   (0x0003)  MISSED
	float                                              BillboardNearDistance;                                      // 0x0660   (0x0004)  
	unsigned char                                      UnknownData21_7[0x3C];                                      // 0x0664   (0x003C)  MISSED

	/// Functions
	// Function /Script/SB.SBWidgetComponent.SetWindowFocusable
	constexpr static const FunctionPointer<USBWidgetComponent, void, const bool> SetWindowFocusable = { 0x2831360, 0 }; 
	// Function /Script/SB.SBWidgetComponent.SetWidgetSpace
	constexpr static const FunctionPointer<USBWidgetComponent, void, const ESBWidgetSpace> SetWidgetSpace = { 0x2831730, 1 }; 
	// Function /Script/SB.SBWidgetComponent.SetWidget
	constexpr static const FunctionPointer<USBWidgetComponent, void, const UUserWidget*> SetWidget = { 0x2832360, 2 }; 
	// Function /Script/SB.SBWidgetComponent.SetTwoSided
	constexpr static const FunctionPointer<USBWidgetComponent, void, const bool> SetTwoSided = { 0x2831e60, 3 }; 
	// Function /Script/SB.SBWidgetComponent.SetTintColorAndOpacity
	constexpr static const FunctionPointer<USBWidgetComponent, void, const FLinearColor> SetTintColorAndOpacity = { 0x2831b20, 4 }; 
	// Function /Script/SB.SBWidgetComponent.SetTickWhenOffscreen
	constexpr static const FunctionPointer<USBWidgetComponent, void, const bool> SetTickWhenOffscreen = { 0x2831d60, 5 }; 
	// Function /Script/SB.SBWidgetComponent.SetRedrawTime
	constexpr static const FunctionPointer<USBWidgetComponent, void, const float> SetRedrawTime = { 0x2831820, 6 }; 
	// Function /Script/SB.SBWidgetComponent.SetPivot
	constexpr static const FunctionPointer<USBWidgetComponent, void, const FVector2D&> SetPivot = { 0x2831a10, 7 }; 
	// Function /Script/SB.SBWidgetComponent.SetOwnerPlayer
	constexpr static const FunctionPointer<USBWidgetComponent, void, const ULocalPlayer*> SetOwnerPlayer = { 0x2832270, 8 }; 
	// Function /Script/SB.SBWidgetComponent.SetManuallyRedraw
	constexpr static const FunctionPointer<USBWidgetComponent, void, const bool> SetManuallyRedraw = { 0x2832170, 9 }; 
	// Function /Script/SB.SBWidgetComponent.SetGeometryMode
	constexpr static const FunctionPointer<USBWidgetComponent, void, const ESBWidgetGeometryMode> SetGeometryMode = { 0x2831640, 10 }; 
	// Function /Script/SB.SBWidgetComponent.SetDrawSize
	constexpr static const FunctionPointer<USBWidgetComponent, void, const FVector2D> SetDrawSize = { 0x2831f90, 11 }; 
	// Function /Script/SB.SBWidgetComponent.SetDrawAtDesiredSize
	constexpr static const FunctionPointer<USBWidgetComponent, void, const bool> SetDrawAtDesiredSize = { 0x2831910, 12 }; 
	// Function /Script/SB.SBWidgetComponent.SetCylinderArcAngle
	constexpr static const FunctionPointer<USBWidgetComponent, void, const float> SetCylinderArcAngle = { 0x2831550, 13 }; 
	// Function /Script/SB.SBWidgetComponent.SetBillboardScale
	constexpr static const FunctionPointer<USBWidgetComponent, void, const float> SetBillboardScale = { 0x2831460, 14 }; 
	// Function /Script/SB.SBWidgetComponent.SetBackgroundColor
	constexpr static const FunctionPointer<USBWidgetComponent, void, const FLinearColor> SetBackgroundColor = { 0x2831c40, 15 }; 
	// Function /Script/SB.SBWidgetComponent.RequestRedraw
	constexpr static const FunctionPointer<USBWidgetComponent, void> RequestRedraw = { 0x2831f70, 16 }; 
	// Function /Script/SB.SBWidgetComponent.GetWindowFocusable
	constexpr static const FunctionPointer<USBWidgetComponent, bool> GetWindowFocusable = { 0x2831440, 17 }; 
	// Function /Script/SB.SBWidgetComponent.GetWidgetSpace
	constexpr static const FunctionPointer<USBWidgetComponent, ESBWidgetSpace> GetWidgetSpace = { 0x2831800, 18 }; 
	// Function /Script/SB.SBWidgetComponent.GetUserWidgetObject
	constexpr static const FunctionPointer<USBWidgetComponent, UUserWidget*> GetUserWidgetObject = { 0x2832480, 19 }; 
	// Function /Script/SB.SBWidgetComponent.GetTwoSided
	constexpr static const FunctionPointer<USBWidgetComponent, bool> GetTwoSided = { 0x2831f50, 20 }; 
	// Function /Script/SB.SBWidgetComponent.GetTickWhenOffscreen
	constexpr static const FunctionPointer<USBWidgetComponent, bool> GetTickWhenOffscreen = { 0x2831e40, 21 }; 
	// Function /Script/SB.SBWidgetComponent.GetRenderTarget
	constexpr static const FunctionPointer<USBWidgetComponent, UTextureRenderTarget2D*> GetRenderTarget = { 0x2832460, 22 }; 
	// Function /Script/SB.SBWidgetComponent.GetRedrawTime
	constexpr static const FunctionPointer<USBWidgetComponent, float> GetRedrawTime = { 0x28318f0, 23 }; 
	// Function /Script/SB.SBWidgetComponent.GetPivot
	constexpr static const FunctionPointer<USBWidgetComponent, FVector2D> GetPivot = { 0x2831af0, 24 }; 
	// Function /Script/SB.SBWidgetComponent.GetOwnerPlayer
	constexpr static const FunctionPointer<USBWidgetComponent, ULocalPlayer*> GetOwnerPlayer = { 0x2832100, 25 }; 
	// Function /Script/SB.SBWidgetComponent.GetMaterialInstance
	constexpr static const FunctionPointer<USBWidgetComponent, UMaterialInstanceDynamic*> GetMaterialInstance = { 0x2832440, 26 }; 
	// Function /Script/SB.SBWidgetComponent.GetManuallyRedraw
	constexpr static const FunctionPointer<USBWidgetComponent, bool> GetManuallyRedraw = { 0x2832250, 27 }; 
	// Function /Script/SB.SBWidgetComponent.GetGeometryMode
	constexpr static const FunctionPointer<USBWidgetComponent, ESBWidgetGeometryMode> GetGeometryMode = { 0x2831710, 28 }; 
	// Function /Script/SB.SBWidgetComponent.GetDrawSize
	constexpr static const FunctionPointer<USBWidgetComponent, FVector2D> GetDrawSize = { 0x28320c0, 29 }; 
	// Function /Script/SB.SBWidgetComponent.GetDrawAtDesiredSize
	constexpr static const FunctionPointer<USBWidgetComponent, bool> GetDrawAtDesiredSize = { 0x28319f0, 30 }; 
	// Function /Script/SB.SBWidgetComponent.GetCylinderArcAngle
	constexpr static const FunctionPointer<USBWidgetComponent, float> GetCylinderArcAngle = { 0x2831620, 31 }; 
	// Function /Script/SB.SBWidgetComponent.GetCurrentDrawSize
	constexpr static const FunctionPointer<USBWidgetComponent, FVector2D> GetCurrentDrawSize = { 0x2832080, 32 }; 
	// Function /Script/SB.SBWidgetComponent.GetBillboardScale
	constexpr static const FunctionPointer<USBWidgetComponent, float> GetBillboardScale = { 0x2831530, 33 }; 
};

/// Class /Script/SB.SBWindVolume
/// Size: 0x03C0 (960 bytes) (0x000318 - 0x0003C0) align n/a MaxSize: 0x03C0
class ASBWindVolume : public AVolume
{ 
public:
	FVector                                            LevelObjOrigin;                                             // 0x0318   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0324   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0330   (0x0008)  MISSED
	bool                                               bEnable;                                                    // 0x0338   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0339   (0x0007)  MISSED
	TArray<TEnumAsByte<ESBSkelMeshSlot>>               MeshSlots;                                                  // 0x0340   (0x0010)  
	bool                                               bPlayerOnly;                                                // 0x0350   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0351   (0x0003)  MISSED
	FVector                                            Direction;                                                  // 0x0354   (0x000C)  
	bool                                               bRandomizeDirection;                                        // 0x0360   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0361   (0x0003)  MISSED
	float                                              MinAzimuthalAngle;                                          // 0x0364   (0x0004)  
	float                                              MaxAzimuthalAngle;                                          // 0x0368   (0x0004)  
	float                                              MinPolarAngle;                                              // 0x036C   (0x0004)  
	float                                              MaxPolarAngle;                                              // 0x0370   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x0374   (0x0004)  MISSED
	class UCurveFloat*                                 Strength;                                                   // 0x0378   (0x0008)  
	float                                              StrengthMultiplier;                                         // 0x0380   (0x0004)  
	float                                              ClothWindMultiplier;                                        // 0x0384   (0x0004)  
	float                                              KawaiiPhysicsMultiplier;                                    // 0x0388   (0x0004)  
	float                                              SkeletalMeshForceMultiplier;                                // 0x038C   (0x0004)  
	float                                              FadeDuration;                                               // 0x0390   (0x0004)  
	int32_t                                            Priority;                                                   // 0x0394   (0x0004)  
	unsigned char                                      UnknownData11_7[0x28];                                      // 0x0398   (0x0028)  MISSED
};

/// Class /Script/SB.SBWorldCompositionStreamingBlockingVolume
/// Size: 0x0330 (816 bytes) (0x000318 - 0x000330) align n/a MaxSize: 0x0330
class ASBWorldCompositionStreamingBlockingVolume : public AVolume
{ 
public:
	FVector                                            LevelObjOrigin;                                             // 0x0318   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0324   (0x000C)  
};

/// Class /Script/SB.SBWorldHeightTexVolume
/// Size: 0x03A0 (928 bytes) (0x000318 - 0x0003A0) align n/a MaxSize: 0x03A0
class ASBWorldHeightTexVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	int32_t                                            TextureSize;                                                // 0x031C   (0x0004)  
	TArray<TEnumAsByte<ECollisionChannel>>             CollisionChannels;                                          // 0x0320   (0x0010)  
	bool                                               bUseCustomCollisionCheckHeight;                             // 0x0330   (0x0001)  
	bool                                               bUseCustomCollisionHeightForMinMaxRange;                    // 0x0331   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0332   (0x0002)  MISSED
	float                                              CustomCollisionCheckStartHeight;                            // 0x0334   (0x0004)  
	float                                              CustomCollisionCheckEndHeight;                              // 0x0338   (0x0004)  
	float                                              CollisionCapsuleHalfHeight;                                 // 0x033C   (0x0004)  
	float                                              CollisionCapsuleRadius;                                     // 0x0340   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0344   (0x0004)  MISSED
	FString                                            strGeneratedTexturePackage;                                 // 0x0348   (0x0010)  
	FString                                            strGeneratedTextureName;                                    // 0x0358   (0x0010)  
	bool                                               bGenerateTexture;                                           // 0x0368   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0369   (0x0003)  MISSED
	float                                              GenBaseX;                                                   // 0x036C   (0x0004)  
	float                                              GenBaseY;                                                   // 0x0370   (0x0004)  
	float                                              GenBaseZ;                                                   // 0x0374   (0x0004)  
	float                                              GenSideSize;                                                // 0x0378   (0x0004)  
	float                                              GenHeightUnitSize;                                          // 0x037C   (0x0004)  
	FSBMapSectorID                                     SectorID;                                                   // 0x0380   (0x0008)  
	FVector                                            LevelObjOrigin;                                             // 0x0388   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0394   (0x000C)  
};

/// Class /Script/SB.SBWorldMapVolume
/// Size: 0x0320 (800 bytes) (0x000318 - 0x000320) align n/a MaxSize: 0x0320
class ASBWorldMapVolume : public AVolume
{ 
public:
	FName                                              MapAlias;                                                   // 0x0318   (0x0008)  
};

/// Struct /Script/SB.SBZoneEnvProgressInfo
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align n/a MaxSize: 0x0098
struct FSBZoneEnvProgressInfo
{ 
	class USplineComponent*                            ProgressSpline;                                             // 0x0000   (0x0008)  
	FRuntimeFloatCurve                                 InterpGraph;                                                // 0x0008   (0x0088)  
	float                                              CurrentProgress;                                            // 0x0090   (0x0004)  
	float                                              ProgressMaxValue;                                           // 0x0094   (0x0004)  
};

/// Struct /Script/SB.SBEnvZoneProperty
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBEnvZoneProperty
{ 
	int32_t                                            EnvId;                                                      // 0x0000   (0x0004)  
	FName                                              EnvAlias;                                                   // 0x0004   (0x0008)  
	FName                                              ZoneAlias;                                                  // 0x000C   (0x0008)  
};

/// Struct /Script/SB.SBEnvStateProperty
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSBEnvStateProperty
{ 
	FName                                              EnvStateTagName;                                            // 0x0000   (0x0008)  
	FName                                              LevelSequence_Active;                                       // 0x0008   (0x0008)  
	TEnumAsByte<ESBLevelSequencePlayType>              PlayType_Active;                                            // 0x0010   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              StartTime_Active;                                           // 0x0014   (0x0004)  
	bool                                               RestoreActiveSequence;                                      // 0x0018   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0019   (0x0007)  MISSED
	TArray<FName>                                      ActiveAttachTagName;                                        // 0x0020   (0x0010)  
	FName                                              LevelSequence_OutTransit;                                   // 0x0030   (0x0008)  
	TEnumAsByte<ESBLevelSequencePlayType>              PlayType_OutTransit;                                        // 0x0038   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              StartTime_OutTransit;                                       // 0x003C   (0x0004)  
	bool                                               RestoreTransitSequence;                                     // 0x0040   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0041   (0x0007)  MISSED
	TArray<FName>                                      TransitAttachTagName;                                       // 0x0048   (0x0010)  
};

/// Class /Script/SB.SBZoneEnvActor
/// Size: 0x0700 (1792 bytes) (0x0002F8 - 0x000700) align n/a MaxSize: 0x0700
class ASBZoneEnvActor : public ASBNavigationObjectBase
{ 
public:
	unsigned char                                      UnknownData24_8[0x38];                                      // 0x02F8   (0x0038)  MISSED
	bool                                               bUseEndPhysicsTick;                                         // 0x0330   (0x0001)  
	bool                                               bFixedSpawnLocation;                                        // 0x0331   (0x0001)  
	unsigned char                                      UnknownData25_6[0x2];                                       // 0x0332   (0x0002)  MISSED
	FName                                              StateTagName;                                               // 0x0334   (0x0008)  
	FName                                              ScanEffectStateTagName;                                     // 0x033C   (0x0008)  
	bool                                               bScanTargeted;                                              // 0x0344   (0x0001)  
	bool                                               bScanNoBlock;                                               // 0x0345   (0x0001)  
	bool                                               bScanExclusion;                                             // 0x0346   (0x0001)  
	bool                                               bIgnoreRenderControl;                                       // 0x0347   (0x0001)  
	bool                                               bScanOverrided;                                             // 0x0348   (0x0001)  
	unsigned char                                      UnknownData26_6[0x3];                                       // 0x0349   (0x0003)  MISSED
	float                                              InteractableMarkerDistanceOverride;                         // 0x034C   (0x0004)  
	TArray<FSBZoneEnvProgressInfo>                     ProgressInfoList;                                           // 0x0350   (0x0010)  
	TArray<FSBEnvZoneProperty>                         ZoneProperty;                                               // 0x0360   (0x0010)  
	FName                                              EnvActorName;                                               // 0x0370   (0x0008)  
	TArray<FSBEnvStateProperty>                        EnvStateProperty;                                           // 0x0378   (0x0010)  
	bool                                               ResetBufferDataAtRelease;                                   // 0x0388   (0x0001)  
	TEnumAsByte<ESBAdjustInteractPosType>              InteractAdjustPosType;                                      // 0x0389   (0x0001)  
	TEnumAsByte<ESBZoneEnvActiveBoundType>             ActiveBoundType;                                            // 0x038A   (0x0001)  
	unsigned char                                      UnknownData27_6[0x1];                                       // 0x038B   (0x0001)  MISSED
	FVector                                            BoundExtent;                                                // 0x038C   (0x000C)  
	FName                                              MainPrimitiveComponentName;                                 // 0x0398   (0x0008)  
	TArray<class AActor*>                              LevelSequenceBindActors;                                    // 0x03A0   (0x0010)  
	bool                                               bEnableChangeWorldLevelEvent;                               // 0x03B0   (0x0001)  
	bool                                               bDisableCollsiionPlayerAttachToSeq;                         // 0x03B1   (0x0001)  
	unsigned char                                      UnknownData28_6[0x2];                                       // 0x03B2   (0x0002)  MISSED
	float                                              FloorCheckDistance;                                         // 0x03B4   (0x0004)  
	bool                                               bPhotoModeSubject;                                          // 0x03B8   (0x0001)  
	unsigned char                                      UnknownData29_6[0x13];                                      // 0x03B9   (0x0013)  MISSED
	bool                                               bIgnoreCollisionAtInteraction;                              // 0x03CC   (0x0001)  
	bool                                               bIgnoreTraceInteractinPoint;                                // 0x03CD   (0x0001)  
	unsigned char                                      UnknownData30_6[0x2];                                       // 0x03CE   (0x0002)  MISSED
	float                                              InteractionValidAreaTraceRadius;                            // 0x03D0   (0x0004)  
	unsigned char                                      UnknownData31_6[0x4];                                       // 0x03D4   (0x0004)  MISSED
	class AActor*                                      CampRespawnActor;                                           // 0x03D8   (0x0008)  
	bool                                               bEnterTriggerWithFloor;                                     // 0x03E0   (0x0001)  
	unsigned char                                      UnknownData32_6[0x3];                                       // 0x03E1   (0x0003)  MISSED
	FName                                              LevelSequenceTagName;                                       // 0x03E4   (0x0008)  
	bool                                               bMoveInputIgnore;                                           // 0x03EC   (0x0001)  
	unsigned char                                      UnknownData33_6[0x3];                                       // 0x03ED   (0x0003)  MISSED
	class USBCharacterSoundSet*                        SoundSet;                                                   // 0x03F0   (0x0008)  
	bool                                               bResetRopeWhenWarpSafeLocation;                             // 0x03F8   (0x0001)  
	bool                                               bEnableAdjustSpawnLocation;                                 // 0x03F9   (0x0001)  
	bool                                               bDisableComponentsClothTick;                                // 0x03FA   (0x0001)  
	unsigned char                                      UnknownData34_6[0x1];                                       // 0x03FB   (0x0001)  MISSED
	float                                              ComponentsClothTickDistance;                                // 0x03FC   (0x0004)  
	bool                                               bIgnoreBlockingWhenCharacterPenetrating;                    // 0x0400   (0x0001)  
	TEnumAsByte<ESBMeshClipingApplyType>               MeshClipingApplyType1;                                      // 0x0401   (0x0001)  
	TEnumAsByte<ESBMeshClipingApplyType>               MeshClipingApplyType2;                                      // 0x0402   (0x0001)  
	TEnumAsByte<ESBMeshClipingApplyType>               MeshClipingApplyType3;                                      // 0x0403   (0x0001)  
	TEnumAsByte<ESBMeshClipingApplyType>               MeshClipingApplyType4;                                      // 0x0404   (0x0001)  
	unsigned char                                      UnknownData35_6[0x3];                                       // 0x0405   (0x0003)  MISSED
	FName                                              BindZoneAlias;                                              // 0x0408   (0x0008)  
	FName                                              EnvSpawnAlias;                                              // 0x0410   (0x0008)  
	class USkeletalMeshComponent*                      EnvSkeletalMeshComponent;                                   // 0x0418   (0x0008)  
	class UStaticMeshComponent*                        EnvStaticMeshComponent;                                     // 0x0420   (0x0008)  
	class UMeshComponent*                              PhysicsEnablePrimitiveComponent;                            // 0x0428   (0x0008)  
	FVector                                            PhysicCompInitRelativeLocation;                             // 0x0430   (0x000C)  
	FRotator                                           PhysicCompInitRelativeRotation;                             // 0x043C   (0x000C)  
	TMap<FName, int32_t>                               ProgressValueMap;                                           // 0x0448   (0x0050)  
	TMap<FName, int32_t>                               StateProgressMaxCountMap;                                   // 0x0498   (0x0050)  
	bool                                               bNeedEnableTick;                                            // 0x04E8   (0x0001)  
	unsigned char                                      UnknownData36_6[0x7];                                       // 0x04E9   (0x0007)  MISSED
	class USceneComponent*                             OriginComponent;                                            // 0x04F0   (0x0008)  
	TArray<class USceneComponent*>                     InteractionPointComponents;                                 // 0x04F8   (0x0010)  
	class USBEventMoveDataComponent*                   EventMoveDataComponent;                                     // 0x0508   (0x0008)  
	class USceneComponent*                             QuestMarkerComponent;                                       // 0x0510   (0x0008)  
	TArray<FName>                                      ActorActiveVolumeNameArray;                                 // 0x0518   (0x0010)  
	bool                                               bActiveActor;                                               // 0x0528   (0x0001)  
	bool                                               bIgnoreHiddenInGame;                                        // 0x0529   (0x0001)  
	unsigned char                                      UnknownData37_6[0x6];                                       // 0x052A   (0x0006)  MISSED
	FString                                            ActiveLevelSequencePath;                                    // 0x0530   (0x0010)  
	bool                                               bExistFloor;                                                // 0x0540   (0x0001)  
	unsigned char                                      UnknownData38_6[0x3];                                       // 0x0541   (0x0003)  MISSED
	FVector                                            LastFloorHitLocation;                                       // 0x0544   (0x000C)  
	FVector                                            CachedActorBoundExtents;                                    // 0x0550   (0x000C)  
	FVector                                            CachedBeginActorBoundExtents;                               // 0x055C   (0x000C)  
	int32_t                                            PendingEventIndex;                                          // 0x0568   (0x0004)  
	unsigned char                                      UnknownData39_6[0x4];                                       // 0x056C   (0x0004)  MISSED
	TArray<class UStaticMeshComponent*>                MeshClipingBoundCompList;                                   // 0x0570   (0x0010)  
	TArray<class UStaticMeshComponent*>                MeshClipingExclusivePlaneCompList;                          // 0x0580   (0x0010)  
	bool                                               bOcclusion;                                                 // 0x0590   (0x0001)  
	unsigned char                                      UnknownData40_6[0x7];                                       // 0x0591   (0x0007)  MISSED
	uint64_t                                           LastCheckOcclusionFrameCount;                               // 0x0598   (0x0008)  
	unsigned char                                      UnknownData41_6[0x4];                                       // 0x05A0   (0x0004)  MISSED
	FSBActorSectorInfo                                 SectorInfo;                                                 // 0x05A4   (0x002C)  
	bool                                               bHideByEventContents;                                       // 0x05D0   (0x0001)  
	unsigned char                                      UnknownData42_6[0xA7];                                      // 0x05D1   (0x00A7)  MISSED
	bool                                               bIgnoreArriveWhenHitProjectile;                             // 0x0678   (0x0001)  
	unsigned char                                      UnknownData43_6[0x3];                                       // 0x0679   (0x0003)  MISSED
	FVector                                            ControlInputVector;                                         // 0x067C   (0x000C)  
	FVector                                            LocalControlInputVector;                                    // 0x0688   (0x000C)  
	FVector                                            LastControlInputVector;                                     // 0x0694   (0x000C)  
	FVector                                            LocalLastControlInputVector;                                // 0x06A0   (0x000C)  
	int32_t                                            LastStencilValue;                                           // 0x06AC   (0x0004)  
	int32_t                                            PendingStencilValue;                                        // 0x06B0   (0x0004)  
	TEnumAsByte<ECollisionEnabled>                     InitCollisionAtRootComponent;                               // 0x06B4   (0x0001)  
	bool                                               bInitRootComponentActivate;                                 // 0x06B5   (0x0001)  
	bool                                               bInitEnableSimulatePhysics;                                 // 0x06B6   (0x0001)  
	bool                                               bTickEnabled;                                               // 0x06B7   (0x0001)  
	bool                                               bStaticUntilInteraction;                                    // 0x06B8   (0x0001)  
	unsigned char                                      UnknownData44_6[0x3];                                       // 0x06B9   (0x0003)  MISSED
	float                                              ActiveTimeAfterInteraction;                                 // 0x06BC   (0x0004)  
	bool                                               bDisableOptimization;                                       // 0x06C0   (0x0001)  
	bool                                               bBPTickEnabled;                                             // 0x06C1   (0x0001)  
	unsigned char                                      UnknownData45_6[0x2];                                       // 0x06C2   (0x0002)  MISSED
	float                                              TickDistance;                                               // 0x06C4   (0x0004)  
	bool                                               bIgnoreHiddenWhenOcclusion;                                 // 0x06C8   (0x0001)  
	bool                                               bForceNotOcclusionFromLevelSequence;                        // 0x06C9   (0x0001)  
	bool                                               bDisableOcclusionFromLevelSequence;                         // 0x06CA   (0x0001)  
	bool                                               bControlInertiaTensorScale;                                 // 0x06CB   (0x0001)  
	FVector                                            InertiaTensorScale_HighFrame;                               // 0x06CC   (0x000C)  
	unsigned char                                      UnknownData46_6[0x10];                                      // 0x06D8   (0x0010)  MISSED
	float                                              ControlInertiaTensorScaleHighFrame;                         // 0x06E8   (0x0004)  
	FName                                              ControlInertiaTensorScaleTargetObjectName;                  // 0x06EC   (0x0008)  
	TWeakObjectPtr<class UStaticMeshComponent*>        ControlInertiaTensorScaleTargetObject;                      // 0x06F4   (0x0008)  
	unsigned char                                      UnknownData47_7[0x4];                                       // 0x06FC   (0x0004)  MISSED

	/// Functions
	// Function /Script/SB.SBZoneEnvActor.StartPuzzle
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const TArray<bool>&, const TArray<FString>&, const bool> StartPuzzle = { 0x2bbb090, 0 }; 
	// Function /Script/SB.SBZoneEnvActor.SetVectorBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const TEnumAsByte<ESBBufferDataSlot>, const FVector> SetVectorBufferData = { 0x2835c00, 1 }; 
	// Function /Script/SB.SBZoneEnvActor.SetStringBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const TEnumAsByte<ESBBufferDataSlot>, const FString> SetStringBufferData = { 0x2835da0, 2 }; 
	// Function /Script/SB.SBZoneEnvActor.SetPuzzleData
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const FString> SetPuzzleData = { 0x2836520, 3 }; 
	// Function /Script/SB.SBZoneEnvActor.SetPendingCustomDepthStencil
	constexpr static const FunctionPointer<ASBZoneEnvActor, void> SetPendingCustomDepthStencil = { 0x2834d50, 4 }; 
	// Function /Script/SB.SBZoneEnvActor.SetIntBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const TEnumAsByte<ESBBufferDataSlot>, const int32_t> SetIntBufferData = { 0x28358f0, 5 }; 
	// Function /Script/SB.SBZoneEnvActor.SetFloatBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const TEnumAsByte<ESBBufferDataSlot>, const float> SetFloatBufferData = { 0x2835a70, 6 }; 
	// Function /Script/SB.SBZoneEnvActor.SetEnvActorName
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const FName> SetEnvActorName = { 0x2836820, 7 }; 
	// Function /Script/SB.SBZoneEnvActor.SetBPTickEnable
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const bool> SetBPTickEnable = { 0x2834860, 8 }; 
	// Function /Script/SB.SBZoneEnvActor.SetBoolBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const TEnumAsByte<ESBBufferDataSlot>, const bool> SetBoolBufferData = { 0x2835760, 9 }; 
	// Function /Script/SB.SBZoneEnvActor.PlaySingleShow
	constexpr static const FunctionPointer<ASBZoneEnvActor, bool, const FString, const bool, const FVector> PlaySingleShow = { 0x2834f20, 10 }; 
	// Function /Script/SB.SBZoneEnvActor.NotifyShowEvent
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const FName, const FName> NotifyShowEvent = { 0x2bbb090, 11 }; 
	// Function /Script/SB.SBZoneEnvActor.NotifyChangeWorldLevel
	constexpr static const FunctionPointer<ASBZoneEnvActor, void> NotifyChangeWorldLevel = { 0x2bbb090, 12 }; 
	// Function /Script/SB.SBZoneEnvActor.NotifyBP_ReleaseActor
	constexpr static const FunctionPointer<ASBZoneEnvActor, void> NotifyBP_ReleaseActor = { 0x2bbb090, 13 }; 
	// Function /Script/SB.SBZoneEnvActor.NotifyBP_InitActor
	constexpr static const FunctionPointer<ASBZoneEnvActor, void> NotifyBP_InitActor = { 0x2bbb090, 14 }; 
	// Function /Script/SB.SBZoneEnvActor.NotifyBP_HitProjectile
	constexpr static const FunctionPointer<ASBZoneEnvActor, void> NotifyBP_HitProjectile = { 0x2bbb090, 15 }; 
	// Function /Script/SB.SBZoneEnvActor.NotifyBP_HitLaser
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const bool, const UPrimitiveComponent*> NotifyBP_HitLaser = { 0x2bbb090, 16 }; 
	// Function /Script/SB.SBZoneEnvActor.MakeBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, void> MakeBufferData = { 0x2835350, 17 }; 
	// Function /Script/SB.SBZoneEnvActor.IsPuzzleSuccess
	constexpr static const FunctionPointer<ASBZoneEnvActor, bool> IsPuzzleSuccess = { 0x28367f0, 18 }; 
	// Function /Script/SB.SBZoneEnvActor.IsGrabAllow
	constexpr static const FunctionPointer<ASBZoneEnvActor, bool> IsGrabAllow = { 0x2834df0, 19 }; 
	// Function /Script/SB.SBZoneEnvActor.IsGrabActive
	constexpr static const FunctionPointer<ASBZoneEnvActor, bool> IsGrabActive = { 0x2834d90, 20 }; 
	// Function /Script/SB.SBZoneEnvActor.IsDataEmpty
	constexpr static const FunctionPointer<ASBZoneEnvActor, bool> IsDataEmpty = { 0x2836960, 21 }; 
	// Function /Script/SB.SBZoneEnvActor.InputRightAxisY
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const float> InputRightAxisY = { 0x2bbb090, 22 }; 
	// Function /Script/SB.SBZoneEnvActor.InputRightAxisX
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const float> InputRightAxisX = { 0x2bbb090, 23 }; 
	// Function /Script/SB.SBZoneEnvActor.InputLeftAxisY
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const float> InputLeftAxisY = { 0x2bbb090, 24 }; 
	// Function /Script/SB.SBZoneEnvActor.InputLeftAxisX
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const float> InputLeftAxisX = { 0x2bbb090, 25 }; 
	// Function /Script/SB.SBZoneEnvActor.InputAxis
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const float, const TEnumAsByte<ESBInputAxisType>> InputAxis = { 0x2835190, 26 }; 
	// Function /Script/SB.SBZoneEnvActor.InitPhysicsChannel
	constexpr static const FunctionPointer<ASBZoneEnvActor, void> InitPhysicsChannel = { 0x2836c80, 27 }; 
	// Function /Script/SB.SBZoneEnvActor.HaveBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, bool> HaveBufferData = { 0x2836900, 28 }; 
	// Function /Script/SB.SBZoneEnvActor.GetVectorBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, FVector, const TEnumAsByte<ESBBufferDataSlot>> GetVectorBufferData = { 0x2836220, 29 }; 
	// Function /Script/SB.SBZoneEnvActor.GetStringBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, FString, const TEnumAsByte<ESBBufferDataSlot>> GetStringBufferData = { 0x2836330, 30 }; 
	// Function /Script/SB.SBZoneEnvActor.GetStateTagname
	constexpr static const FunctionPointer<ASBZoneEnvActor, FName> GetStateTagname = { 0x2836c60, 31 }; 
	// Function /Script/SB.SBZoneEnvActor.GetStateProgressMaxCount
	constexpr static const FunctionPointer<ASBZoneEnvActor, int32_t, const FName> GetStateProgressMaxCount = { 0x2836a40, 32 }; 
	// Function /Script/SB.SBZoneEnvActor.GetPuzzleData
	constexpr static const FunctionPointer<ASBZoneEnvActor, FString> GetPuzzleData = { 0x2836770, 33 }; 
	// Function /Script/SB.SBZoneEnvActor.GetProgressValue
	constexpr static const FunctionPointer<ASBZoneEnvActor, int32_t, const FName> GetProgressValue = { 0x2836b30, 34 }; 
	// Function /Script/SB.SBZoneEnvActor.GetPendingMovementLocalInputVector
	constexpr static const FunctionPointer<ASBZoneEnvActor, FVector> GetPendingMovementLocalInputVector = { 0x2834a00, 35 }; 
	// Function /Script/SB.SBZoneEnvActor.GetPendingMovementInputVector
	constexpr static const FunctionPointer<ASBZoneEnvActor, FVector> GetPendingMovementInputVector = { 0x2834a30, 36 }; 
	// Function /Script/SB.SBZoneEnvActor.GetMovementComponent
	constexpr static const FunctionPointer<ASBZoneEnvActor, USBZoneEnvMovementComponent*> GetMovementComponent = { 0x2834d20, 37 }; 
	// Function /Script/SB.SBZoneEnvActor.GetLastMovementLocalInputVector
	constexpr static const FunctionPointer<ASBZoneEnvActor, FVector> GetLastMovementLocalInputVector = { 0x28349a0, 38 }; 
	// Function /Script/SB.SBZoneEnvActor.GetLastMovementInputVector
	constexpr static const FunctionPointer<ASBZoneEnvActor, FVector> GetLastMovementInputVector = { 0x28349d0, 39 }; 
	// Function /Script/SB.SBZoneEnvActor.GetIntBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, int32_t, const TEnumAsByte<ESBBufferDataSlot>> GetIntBufferData = { 0x2836040, 40 }; 
	// Function /Script/SB.SBZoneEnvActor.GetFloatBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, float, const TEnumAsByte<ESBBufferDataSlot>> GetFloatBufferData = { 0x2836130, 41 }; 
	// Function /Script/SB.SBZoneEnvActor.GetEnvSkeletalMeshComponent
	constexpr static const FunctionPointer<ASBZoneEnvActor, USkeletalMeshComponent*> GetEnvSkeletalMeshComponent = { 0x2834ee0, 42 }; 
	// Function /Script/SB.SBZoneEnvActor.GetEnvSBSkeletalMeshComponent
	constexpr static const FunctionPointer<ASBZoneEnvActor, USBSkeletalMeshComponent*> GetEnvSBSkeletalMeshComponent = { 0x2834e60, 43 }; 
	// Function /Script/SB.SBZoneEnvActor.GetEnvGrabComponent
	constexpr static const FunctionPointer<ASBZoneEnvActor, USBZoneEnvGrabComponent*> GetEnvGrabComponent = { 0x2834e30, 44 }; 
	// Function /Script/SB.SBZoneEnvActor.GetBoolBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, bool, const TEnumAsByte<ESBBufferDataSlot>> GetBoolBufferData = { 0x2835f50, 45 }; 
	// Function /Script/SB.SBZoneEnvActor.EventUpdateProgress
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const int32_t, const float, const float, const float, const float, const float> EventUpdateProgress = { 0x2bbb090, 46 }; 
	// Function /Script/SB.SBZoneEnvActor.EventUpdateBufferData
	constexpr static const FunctionPointer<ASBZoneEnvActor, void> EventUpdateBufferData = { 0x2bbb090, 47 }; 
	// Function /Script/SB.SBZoneEnvActor.EventTriggerResult
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const bool> EventTriggerResult = { 0x2bbb090, 48 }; 
	// Function /Script/SB.SBZoneEnvActor.EventResetEnv
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const FName, const TEnumAsByte<ESBZoneEnvActiveState>, const TEnumAsByte<ESBObjectState>, const TArray<FSBEnvProgressData>&> EventResetEnv = { 0x2bbb090, 49 }; 
	// Function /Script/SB.SBZoneEnvActor.EventResetByWarpSafeLocation
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const FName, const TEnumAsByte<ESBZoneEnvActiveState>, const TEnumAsByte<ESBObjectState>, const bool, const bool> EventResetByWarpSafeLocation = { 0x2bbb090, 50 }; 
	// Function /Script/SB.SBZoneEnvActor.EventResetBySpawnData
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const FName, const TEnumAsByte<ESBZoneEnvActiveState>, const TEnumAsByte<ESBObjectState>> EventResetBySpawnData = { 0x2bbb090, 51 }; 
	// Function /Script/SB.SBZoneEnvActor.EventInitEnv
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const FName, const TEnumAsByte<ESBZoneEnvActiveState>, const TEnumAsByte<ESBObjectState>, const TArray<FSBEnvProgressData>&, const int32_t> EventInitEnv = { 0x2bbb090, 52 }; 
	// Function /Script/SB.SBZoneEnvActor.DataInitEvent
	constexpr static const FunctionPointer<ASBZoneEnvActor, void> DataInitEvent = { 0x2bbb090, 53 }; 
	// Function /Script/SB.SBZoneEnvActor.ConsumeMovementInputVector
	constexpr static const FunctionPointer<ASBZoneEnvActor, FVector> ConsumeMovementInputVector = { 0x2834960, 54 }; 
	// Function /Script/SB.SBZoneEnvActor.CompletePuzzle
	constexpr static const FunctionPointer<ASBZoneEnvActor, void> CompletePuzzle = { 0x2836470, 55 }; 
	// Function /Script/SB.SBZoneEnvActor.ChangeStateProgressCount
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const FName, const int32_t, const int32_t, const bool> ChangeStateProgressCount = { 0x2bbb090, 56 }; 
	// Function /Script/SB.SBZoneEnvActor.ChangeEnvState
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const FName, const FName> ChangeEnvState = { 0x2bbb090, 57 }; 
	// Function /Script/SB.SBZoneEnvActor.ChangeEnvActiveState
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const TEnumAsByte<ESBZoneEnvActiveState>> ChangeEnvActiveState = { 0x2bbb090, 58 }; 
	// Function /Script/SB.SBZoneEnvActor.AddMovementInput
	constexpr static const FunctionPointer<ASBZoneEnvActor, void, const FVector, const FVector, const float, const bool> AddMovementInput = { 0x2834a60, 59 }; 
	// Function /Script/SB.SBZoneEnvActor.AddEnvProgressInfo
	constexpr static const FunctionPointer<ASBZoneEnvActor, int32_t, const USplineComponent*, const FRuntimeFloatCurve> AddEnvProgressInfo = { 0x2835390, 60 }; 
};

/// Class /Script/SB.SBZoneEnvBoxActor
/// Size: 0x0708 (1800 bytes) (0x000700 - 0x000708) align n/a MaxSize: 0x0708
class ASBZoneEnvBoxActor : public ASBZoneEnvActor
{ 
public:
	class UBoxComponent*                               ZoneEnvRoot;                                                // 0x0700   (0x0008)  
};

/// Class /Script/SB.SBZoneEnvSphereActor
/// Size: 0x0708 (1800 bytes) (0x000700 - 0x000708) align n/a MaxSize: 0x0708
class ASBZoneEnvSphereActor : public ASBZoneEnvActor
{ 
public:
	class USphereComponent*                            ZoneEnvRoot;                                                // 0x0700   (0x0008)  
};

/// Struct /Script/SB.SBGrabHandInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBGrabHandInfo
{ 
	unsigned char                                      UnknownData01_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Class /Script/SB.SBZoneEnvGrabComponent
/// Size: 0x0150 (336 bytes) (0x0000C0 - 0x000150) align n/a MaxSize: 0x0150
class USBZoneEnvGrabComponent : public UActorComponent
{ 
public:
	class USBZoneEnvGrabSet*                           GrabSet;                                                    // 0x00C0   (0x0008)  
	bool                                               UseAutoSafeMoveCalc;                                        // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x00C9   (0x0003)  MISSED
	float                                              ManualSafeMoveDist;                                         // 0x00CC   (0x0004)  
	float                                              ManualSafeMoveRadius;                                       // 0x00D0   (0x0004)  
	float                                              ManualSafeMoveHeight;                                       // 0x00D4   (0x0004)  
	bool                                               bFirstGrabed;                                               // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData06_6[0x23];                                      // 0x00D9   (0x0023)  MISSED
	TWeakObjectPtr<class ASBZoneEnvActor*>             ZoneEnvOwner;                                               // 0x00FC   (0x0008)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0104   (0x0004)  MISSED
	TArray<TWeakObjectPtr<UArrowComponent*>>           GrabPointArray;                                             // 0x0108   (0x0010)  
	TArray<FSBGrabHandInfo>                            GrabHandArray;                                              // 0x0118   (0x0010)  
	TWeakObjectPtr<class ASBCharacter*>                Target;                                                     // 0x0128   (0x0008)  
	int32_t                                            GrabArrowIndex;                                             // 0x0130   (0x0004)  
	FVector                                            InputLocalVector;                                           // 0x0134   (0x000C)  
	bool                                               bModePivotObject;                                           // 0x0140   (0x0001)  
	bool                                               bModeRotateLockObject;                                      // 0x0141   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x0142   (0x0002)  MISSED
	float                                              GrabActiveDistXY;                                           // 0x0144   (0x0004)  
	unsigned char                                      UnknownData09_7[0x8];                                       // 0x0148   (0x0008)  MISSED
};

/// Class /Script/SB.SBZoneEnvGrabSet
/// Size: 0x00E0 (224 bytes) (0x000030 - 0x0000E0) align n/a MaxSize: 0x00E0
class USBZoneEnvGrabSet : public UDataAsset
{ 
public:
	float                                              MaxSpeed;                                                   // 0x0030   (0x0004)  
	bool                                               bUseAcceleration;                                           // 0x0034   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	float                                              Acceleration;                                               // 0x0038   (0x0004)  
	float                                              NonAccelSpeedArriveTime;                                    // 0x003C   (0x0004)  
	TEnumAsByte<EEasingFunc>                           NonAccelSpeedEasingFunc;                                    // 0x0040   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              Deceleration;                                               // 0x0044   (0x0004)  
	float                                              RotationLerpAlpha;                                          // 0x0048   (0x0004)  
	float                                              ObjectPivotRotationLerpAlpha;                               // 0x004C   (0x0004)  
	bool                                               UngrabClearVelocity;                                        // 0x0050   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              GrabCheckMaxDist;                                           // 0x0054   (0x0004)  
	class UBlendSpaceBase*                             BlendSpace;                                                 // 0x0058   (0x0008)  
	float                                              AnimMaxSpeed;                                               // 0x0060   (0x0004)  
	bool                                               AnimSpeedUseAccelation;                                     // 0x0064   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	class UCurveFloat*                                 AnimSpeedAccelCurve;                                        // 0x0068   (0x0008)  
	TWeakObjectPtr<class UAnimSequence*>               TransitGrabStart;                                           // 0x0070   (0x0008)  
	unsigned char                                      UnknownData11_6[0x20];                                      // 0x0078   (0x0020)  MISSED
	class UCurveFloat*                                 CurveGrabIKStart;                                           // 0x0098   (0x0008)  
	float                                              BlockMoveTransitStartDuration;                              // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData12_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	TWeakObjectPtr<class UAnimSequence*>               TransitGrabEnd;                                             // 0x00A8   (0x0008)  
	unsigned char                                      UnknownData13_6[0x20];                                      // 0x00B0   (0x0020)  MISSED
	class UCurveFloat*                                 CurveGrabIKEnd;                                             // 0x00D0   (0x0008)  
	float                                              BlockMoveTransitEndDuration;                                // 0x00D8   (0x0004)  
	float                                              PenetrationMargin;                                          // 0x00DC   (0x0004)  
};

/// Class /Script/SB.SBZoneEnvMovementComponent
/// Size: 0x0360 (864 bytes) (0x000150 - 0x000360) align n/a MaxSize: 0x0360
class USBZoneEnvMovementComponent : public UNavMovementComponent
{ 
public:
	TEnumAsByte<EMovementMode>                         MovementMode;                                               // 0x0150   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x0151   (0x0003)  MISSED
	float                                              MaxSpeed;                                                   // 0x0154   (0x0004)  
	bool                                               bUseAcceleration;                                           // 0x0158   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0159   (0x0003)  MISSED
	float                                              Acceleration;                                               // 0x015C   (0x0004)  
	float                                              NonAccelSpeedArriveTime;                                    // 0x0160   (0x0004)  
	TEnumAsByte<EEasingFunc>                           NonAccelSpeedEasingFunc;                                    // 0x0164   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x0165   (0x0003)  MISSED
	float                                              Deceleration;                                               // 0x0168   (0x0004)  
	float                                              TurningBoost;                                               // 0x016C   (0x0004)  
	FVector                                            DefaultBoxExtend;                                           // 0x0170   (0x000C)  
	float                                              SlideBlockingZDist;                                         // 0x017C   (0x0004)  
	float                                              IncorrectMoveDist;                                          // 0x0180   (0x0004)  
	bool                                               bQueryTraceComplex;                                         // 0x0184   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0185   (0x0003)  MISSED
	float                                              MinFloorDist;                                               // 0x0188   (0x0004)  
	float                                              MaxFloorDist;                                               // 0x018C   (0x0004)  
	float                                              CollisionExtendOffset;                                      // 0x0190   (0x0004)  
	float                                              MaxFloorZ;                                                  // 0x0194   (0x0004)  
	bool                                               bConformToSlope;                                            // 0x0198   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0199   (0x0003)  MISSED
	float                                              MaxStepHeight;                                              // 0x019C   (0x0004)  
	float                                              TraceDownScale;                                             // 0x01A0   (0x0004)  
	bool                                               bHasGravity;                                                // 0x01A4   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x01A5   (0x0003)  MISSED
	TWeakObjectPtr<class ASBZoneEnvActor*>             ZoneEnvOwner;                                               // 0x01A8   (0x0008)  
	FHitResult                                         CurrentFloorHit;                                            // 0x01B0   (0x008C)  
	FHitResult                                         PrevFloorHit;                                               // 0x023C   (0x008C)  
	TWeakObjectPtr<class UPrimitiveComponent*>         BaseComponent;                                              // 0x02C8   (0x0008)  
	FVector                                            BaseLocationCurrent;                                        // 0x02D0   (0x000C)  
	FVector                                            BaseLocationPrevious;                                       // 0x02DC   (0x000C)  
	FRotator                                           BaseRotationCurrent;                                        // 0x02E8   (0x000C)  
	FRotator                                           BaseRotationPrevious;                                       // 0x02F4   (0x000C)  
	FVector                                            ForwardDirection;                                           // 0x0300   (0x000C)  
	FVector                                            RightDirection;                                             // 0x030C   (0x000C)  
	bool                                               bPositionCorrected : 1;                                     // 0x0318:0 (0x0001)  
	unsigned char                                      UnknownData17_5[0x3];                                       // 0x0319   (0x0003)  MISSED
	FVector                                            LastAcceleration;                                           // 0x031C   (0x000C)  
	float                                              NonAccelCurrArriveTime;                                     // 0x0328   (0x0004)  
	bool                                               bHoldMove;                                                  // 0x032C   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x032D   (0x0003)  MISSED
	float                                              AngularDistance;                                            // 0x0330   (0x0004)  
	bool                                               bCheckPenetratingZ : 1;                                     // 0x0334:0 (0x0001)  
	unsigned char                                      UnknownData19_5[0x3];                                       // 0x0335   (0x0003)  MISSED
	int32_t                                            RemainGrabDeactiveCount;                                    // 0x0338   (0x0004)  
	bool                                               bMovementWalked;                                            // 0x033C   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x033D   (0x0003)  MISSED
	FVector                                            LastValidLocation;                                          // 0x0340   (0x000C)  
	unsigned char                                      UnknownData21_6[0x4];                                       // 0x034C   (0x0004)  MISSED
	FQuat                                              LastValidRotation;                                          // 0x0350   (0x0010)  

	/// Functions
	// Function /Script/SB.SBZoneEnvMovementComponent.GetPendingInputVector
	constexpr static const FunctionPointer<USBZoneEnvMovementComponent, FVector> GetPendingInputVector = { 0x2838fd0, 0 }; 
	// Function /Script/SB.SBZoneEnvMovementComponent.GetLastInputVector
	constexpr static const FunctionPointer<USBZoneEnvMovementComponent, FVector> GetLastInputVector = { 0x2838f50, 1 }; 
	// Function /Script/SB.SBZoneEnvMovementComponent.ConsumeInputVector
	constexpr static const FunctionPointer<USBZoneEnvMovementComponent, FVector> ConsumeInputVector = { 0x2838f10, 2 }; 
	// Function /Script/SB.SBZoneEnvMovementComponent.AddInputVector
	constexpr static const FunctionPointer<USBZoneEnvMovementComponent, void, const FVector, const FVector, const bool> AddInputVector = { 0x2839050, 3 }; 
};

/// Struct /Script/SB.SBDestructionFromActorAttackTriggerInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBDestructionFromActorAttackTriggerInfo
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
	TEnumAsByte<ESBActorWeightType>                    WeightType;                                                 // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<FName>                                      ValidTribeArray;                                            // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBDestructionFromActorRangedAttackTriggerInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBDestructionFromActorRangedAttackTriggerInfo
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
	TEnumAsByte<ESBActorWeightType>                    WeightType;                                                 // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<FName>                                      ValidTribeArray;                                            // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBDestructionFromActorMoveTriggerInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBDestructionFromActorMoveTriggerInfo
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
	TEnumAsByte<ESBActorWeightType>                    WeightType;                                                 // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<FName>                                      ValidTribeArray;                                            // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBDestructionFromActorRuleMoveTriggerInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBDestructionFromActorRuleMoveTriggerInfo
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
	TEnumAsByte<ESBActorWeightType>                    WeightType;                                                 // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<FName>                                      ValidTribeArray;                                            // 0x0008   (0x0010)  
};

/// Class /Script/SB.SBZoneEventActorTriggerInfo
/// Size: 0x00A8 (168 bytes) (0x000030 - 0x0000A8) align n/a MaxSize: 0x00A8
class USBZoneEventActorTriggerInfo : public UDataAsset
{ 
public:
	FSBDestructionFromActorAttackTriggerInfo           ActorAttackTriggerInfo;                                     // 0x0030   (0x0018)  
	FSBDestructionFromActorRangedAttackTriggerInfo     ActorRangedAttackTriggerInfo;                               // 0x0048   (0x0018)  
	FSBDestructionFromActorMoveTriggerInfo             ActorMoveTriggerInfo;                                       // 0x0060   (0x0018)  
	FSBDestructionFromActorRuleMoveTriggerInfo         ActorRuleMoveTriggerInfo;                                   // 0x0078   (0x0018)  
	TArray<FName>                                      TriggerTagArray;                                            // 0x0090   (0x0010)  
	bool                                               bNotDestructionByRadialForce;                               // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00A1   (0x0007)  MISSED
};

/// Struct /Script/SB.SBResetZoneCollisionUpdateInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBResetZoneCollisionUpdateInfo
{ 
	TEnumAsByte<ECollisionEnabled>                     RestoreCollisionType;                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UMeshComponent*                              MeshComponent;                                              // 0x0008   (0x0008)  
};

/// Class /Script/SB.SBZoneEventActor
/// Size: 0x06E0 (1760 bytes) (0x000308 - 0x0006E0) align n/a MaxSize: 0x06E0
class ASBZoneEventActor : public ASBWorldActor
{ 
public:
	unsigned char                                      UnknownData15_8[0x8];                                       // 0x0308   (0x0008)  MISSED
	class USBCollisionGroupComponent*                  CollisionGroupComponent;                                    // 0x0310   (0x0008)  
	class USceneComponent*                             DummyRoot;                                                  // 0x0318   (0x0008)  
	FName                                              ZoneEventActorRootComponentName;                            // 0x0320   (0x0008)  
	FName                                              ZoneEventActorTableAlias;                                   // 0x0328   (0x0008)  
	TEnumAsByte<ESBZoneObjectSaveType>                 ZoneEventActorSaveType;                                     // 0x0330   (0x0001)  
	bool                                               bDynamicZoneEventActor;                                     // 0x0331   (0x0001)  
	bool                                               bLineTraceBlock;                                            // 0x0332   (0x0001)  
	bool                                               bStaticZoneEventActor;                                      // 0x0333   (0x0001)  
	FVector                                            RootTransformOffsetPosition;                                // 0x0334   (0x000C)  
	bool                                               bCanReleasedActor;                                          // 0x0340   (0x0001)  
	bool                                               bAlwaysReset;                                               // 0x0341   (0x0001)  
	unsigned char                                      UnknownData16_6[0x2];                                       // 0x0342   (0x0002)  MISSED
	float                                              SlopeMoveDrawDistance;                                      // 0x0344   (0x0004)  
	bool                                               bDontRestoreByCode;                                         // 0x0348   (0x0001)  
	bool                                               bStabilityActiveSimulatePhysics;                            // 0x0349   (0x0001)  
	bool                                               bStabilityActiveSimulatePhysics_WakeAllRigidBodies;         // 0x034A   (0x0001)  
	bool                                               bDisablePhysicsControl;                                     // 0x034B   (0x0001)  
	bool                                               bDisableSimulatingPhysicsWhenCurrentFloor;                  // 0x034C   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x034D   (0x0003)  MISSED
	FString                                            ZLockPrimitiveComponentName;                                // 0x0350   (0x0010)  
	float                                              ZLockDelayTime;                                             // 0x0360   (0x0004)  
	float                                              ZLockVelocity;                                              // 0x0364   (0x0004)  
	float                                              ZLockAngularVelocity;                                       // 0x0368   (0x0004)  
	float                                              ZUnockAngularVelocity;                                      // 0x036C   (0x0004)  
	float                                              ZLockZeroVelocityTime;                                      // 0x0370   (0x0004)  
	bool                                               ZLockWithXY;                                                // 0x0374   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x0375   (0x0003)  MISSED
	float                                              ZLockCurrentTime;                                           // 0x0378   (0x0004)  
	uint32_t                                           ZLockStateAngularVelocityValidCount;                        // 0x037C   (0x0004)  
	uint32_t                                           ZLockStateAngularVelocityValidCheckFrame;                   // 0x0380   (0x0004)  
	bool                                               bZLockState;                                                // 0x0384   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x0385   (0x0003)  MISSED
	float                                              UnwalkableSlopeVelocity;                                    // 0x0388   (0x0004)  
	float                                              UnderWaterLinearDamping;                                    // 0x038C   (0x0004)  
	float                                              UnderWaterAngularDamping;                                   // 0x0390   (0x0004)  
	bool                                               bForceDisableFromLevelSequence;                             // 0x0394   (0x0001)  
	bool                                               bCurrentForceDisableFromLevelSequence;                      // 0x0395   (0x0001)  
	unsigned char                                      UnknownData20_6[0x2];                                       // 0x0396   (0x0002)  MISSED
	float                                              DestructionTimer;                                           // 0x0398   (0x0004)  
	bool                                               bDisableDestruction;                                        // 0x039C   (0x0001)  
	bool                                               bActiveEvent;                                               // 0x039D   (0x0001)  
	bool                                               bOnHitWhenDestruction;                                      // 0x039E   (0x0001)  
	bool                                               bCheckBlockLocation;                                        // 0x039F   (0x0001)  
	bool                                               bDontDestroyWhenDestruction;                                // 0x03A0   (0x0001)  
	bool                                               bIgnoreBlockingHitWhenDestruction;                          // 0x03A1   (0x0001)  
	bool                                               bIgnoreBlockingHitWithoutPlayer;                            // 0x03A2   (0x0001)  
	unsigned char                                      UnknownData21_6[0x1];                                       // 0x03A3   (0x0001)  MISSED
	int32_t                                            RemainDestructCount;                                        // 0x03A4   (0x0004)  
	TArray<int32_t>                                    CountEventStepArray;                                        // 0x03A8   (0x0010)  
	FString                                            MainPrimitiveComponentNameBeforeDestruction;                // 0x03B8   (0x0010)  
	FString                                            MainPrimitiveComponentNameAfterDestruction;                 // 0x03C8   (0x0010)  
	float                                              DestructionDelayMinTime;                                    // 0x03D8   (0x0004)  
	float                                              DestructionDelayMaxTime;                                    // 0x03DC   (0x0004)  
	class USBZoneEventActorTriggerInfo*                TriggerInfo;                                                // 0x03E0   (0x0008)  
	FName                                              SpecialTag;                                                 // 0x03E8   (0x0008)  
	TEnumAsByte<ECollisionResponse>                    DestructionCollisionResponse;                               // 0x03F0   (0x0001)  
	TEnumAsByte<ESBElementType>                        ElementType;                                                // 0x03F1   (0x0001)  
	unsigned char                                      UnknownData22_6[0x2];                                       // 0x03F2   (0x0002)  MISSED
	float                                              ElementAmount;                                              // 0x03F4   (0x0004)  
	bool                                               bIgnoreHiddenWhenOcclusion;                                 // 0x03F8   (0x0001)  
	bool                                               bForceNotOcclusionFromLevelSequence;                        // 0x03F9   (0x0001)  
	unsigned char                                      UnknownData23_6[0x2];                                       // 0x03FA   (0x0002)  MISSED
	float                                              DestructionEventDelayTime;                                  // 0x03FC   (0x0004)  
	bool                                               bDestruction;                                               // 0x0400   (0x0001)  
	unsigned char                                      UnknownData24_6[0x7];                                       // 0x0401   (0x0007)  MISSED
	TArray<class UShapeComponent*>                     DestructionShapeComponentsArray;                            // 0x0408   (0x0010)  
	TWeakObjectPtr<class USBDestructibleComponent*>    DestructibleComponent;                                      // 0x0418   (0x0008)  
	bool                                               bIndependentObject;                                         // 0x0420   (0x0001)  
	bool                                               bRelease;                                                   // 0x0421   (0x0001)  
	bool                                               bDynamicObject;                                             // 0x0422   (0x0001)  
	bool                                               bInitExistMainCompProp;                                     // 0x0423   (0x0001)  
	bool                                               bInitSimulatePhys;                                          // 0x0424   (0x0001)  
	TEnumAsByte<ECollisionEnabled>                     InitMainCompCollisionEnabled;                               // 0x0425   (0x0001)  
	unsigned char                                      UnknownData25_6[0x2];                                       // 0x0426   (0x0002)  MISSED
	FVector                                            InitMainCompLocation;                                       // 0x0428   (0x000C)  
	FRotator                                           InitMainCompRotation;                                       // 0x0434   (0x000C)  
	int32_t                                            ResetZoneCollisionUpdateTickCount;                          // 0x0440   (0x0004)  
	unsigned char                                      UnknownData26_6[0x4];                                       // 0x0444   (0x0004)  MISSED
	TArray<FSBResetZoneCollisionUpdateInfo>            ResetZoneCollisionUpdateMeshList;                           // 0x0448   (0x0010)  
	bool                                               bPendingFloorCheck;                                         // 0x0458   (0x0001)  
	bool                                               bExistFloor;                                                // 0x0459   (0x0001)  
	unsigned char                                      UnknownData27_6[0x2];                                       // 0x045A   (0x0002)  MISSED
	FVector                                            LastExistFloorHitLocation;                                  // 0x045C   (0x000C)  
	class UPrimitiveComponent*                         FloorCheckPrimitiveComponent;                               // 0x0468   (0x0008)  
	TArray<FVector>                                    FloorCheckMoveHistroy;                                      // 0x0470   (0x0010)  
	FVector                                            CachedActorBoundExtents;                                    // 0x0480   (0x000C)  
	bool                                               bActorTickEnable;                                           // 0x048C   (0x0001)  
	bool                                               bActiveSector;                                              // 0x048D   (0x0001)  
	bool                                               bOcclusion;                                                 // 0x048E   (0x0001)  
	unsigned char                                      UnknownData28_6[0x1];                                       // 0x048F   (0x0001)  MISSED
	uint64_t                                           LastCheckOcclusionFrameCount;                               // 0x0490   (0x0008)  
	uint64_t                                           PlayerFloorFrameCounter;                                    // 0x0498   (0x0008)  
	uint64_t                                           DestructionFrameCounter;                                    // 0x04A0   (0x0008)  
	bool                                               bHideByEventContents;                                       // 0x04A8   (0x0001)  
	bool                                               bRegisterDestruction;                                       // 0x04A9   (0x0001)  
	unsigned char                                      UnknownData29_7[0x236];                                     // 0x04AA   (0x0236)  MISSED

	/// Functions
	// Function /Script/SB.SBZoneEventActor.SetStaticZoneEventActor
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const bool> SetStaticZoneEventActor = { 0x283a980, 0 }; 
	// Function /Script/SB.SBZoneEventActor.SetDestructibleComponent
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const USBDestructibleComponent*> SetDestructibleComponent = { 0x283b0c0, 1 }; 
	// Function /Script/SB.SBZoneEventActor.SetActiveAllCollisionGroup
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const bool> SetActiveAllCollisionGroup = { 0x2839d20, 2 }; 
	// Function /Script/SB.SBZoneEventActor.OnCollisionPhysicsOverlapEnd
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t> OnCollisionPhysicsOverlapEnd = { 0x283b260, 3 }; 
	// Function /Script/SB.SBZoneEventActor.OnCollisionPhysicsOverlapBegin
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t, const bool, const FHitResult&> OnCollisionPhysicsOverlapBegin = { 0x283b510, 4 }; 
	// Function /Script/SB.SBZoneEventActor.OnCollisionOriginHit
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const FVector, const FHitResult&> OnCollisionOriginHit = { 0x283a190, 5 }; 
	// Function /Script/SB.SBZoneEventActor.OnCollisionOriginBeginOverlap
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t, const bool, const FHitResult&> OnCollisionOriginBeginOverlap = { 0x2839e00, 6 }; 
	// Function /Script/SB.SBZoneEventActor.NotifyShowEvent
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const FName, const FName> NotifyShowEvent = { 0x2bbb090, 7 }; 
	// Function /Script/SB.SBZoneEventActor.GetReactionElement
	constexpr static const FunctionPointer<ASBZoneEventActor, TEnumAsByte<ESBElementReaction>> GetReactionElement = { 0x283a740, 8 }; 
	// Function /Script/SB.SBZoneEventActor.GetElementAmount
	constexpr static const FunctionPointer<ASBZoneEventActor, float, const TEnumAsByte<ESBElementType>, const bool> GetElementAmount = { 0x283a7b0, 9 }; 
	// Function /Script/SB.SBZoneEventActor.EventUnderWater
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const FVector> EventUnderWater = { 0x2bbb090, 10 }; 
	// Function /Script/SB.SBZoneEventActor.EventTurnOnElement
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const TEnumAsByte<ESBElementType>> EventTurnOnElement = { 0x2bbb090, 11 }; 
	// Function /Script/SB.SBZoneEventActor.EventTurnOffElement
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const TEnumAsByte<ESBElementType>> EventTurnOffElement = { 0x2bbb090, 12 }; 
	// Function /Script/SB.SBZoneEventActor.EventSpawnDestructibleComponent
	constexpr static const FunctionPointer<ASBZoneEventActor, void> EventSpawnDestructibleComponent = { 0x2bbb090, 13 }; 
	// Function /Script/SB.SBZoneEventActor.EventPostDestruction
	constexpr static const FunctionPointer<ASBZoneEventActor, void> EventPostDestruction = { 0x2bbb090, 14 }; 
	// Function /Script/SB.SBZoneEventActor.EventInitElement
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const TEnumAsByte<ESBElementType>, const float, const float> EventInitElement = { 0x2bbb090, 15 }; 
	// Function /Script/SB.SBZoneEventActor.EventInitDestructionState
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const bool> EventInitDestructionState = { 0x2bbb090, 16 }; 
	// Function /Script/SB.SBZoneEventActor.EventHit
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const FVector, const FVector, const TEnumAsByte<ESBZoneEventHitAttackerType>> EventHit = { 0x2bbb090, 17 }; 
	// Function /Script/SB.SBZoneEventActor.EventDestructionStep
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const FVector, const FVector, const int32_t, const TEnumAsByte<ESBZoneEventHitAttackerType>> EventDestructionStep = { 0x2bbb090, 18 }; 
	// Function /Script/SB.SBZoneEventActor.EventDestruction
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const FVector, const FVector, const TEnumAsByte<ESBZoneEventHitAttackerType>> EventDestruction = { 0x2bbb090, 19 }; 
	// Function /Script/SB.SBZoneEventActor.AddRadialForce
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const FVector, const float, const float, const TEnumAsByte<ERadialImpulseFalloff>, const bool> AddRadialForce = { 0x283aa60, 20 }; 
	// Function /Script/SB.SBZoneEventActor.AddImpulseAtLocation
	constexpr static const FunctionPointer<ASBZoneEventActor, void, const FVector, const FVector> AddImpulseAtLocation = { 0x283ae50, 21 }; 
};

/// Class /Script/SB.SBZoneTriggerActor
/// Size: 0x0450 (1104 bytes) (0x0002F0 - 0x000450) align n/a MaxSize: 0x0450
class ASBZoneTriggerActor : public ANavigationObjectBase
{ 
public:
	bool                                               bActiveTrigger;                                             // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x02F1   (0x0003)  MISSED
	FName                                              TriggerAlias;                                               // 0x02F4   (0x0008)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x02FC   (0x0004)  MISSED
	class AActor*                                      SBTriggerParentActor;                                       // 0x0300   (0x0008)  
	bool                                               bUsePlayerCameraDirectionTrigger;                           // 0x0308   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0309   (0x0003)  MISSED
	FRotator                                           MinCameraRotationRange;                                     // 0x030C   (0x000C)  
	FRotator                                           MaxCameraRotationRange;                                     // 0x0318   (0x000C)  
	FName                                              ZoneAlias;                                                  // 0x0324   (0x0008)  
	bool                                               bInOutTrigger;                                              // 0x032C   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x032D   (0x0003)  MISSED
	FVector                                            BoxExtent;                                                  // 0x0330   (0x000C)  
	FSBAliasConditionGroup                             ConditionGroup;                                             // 0x033C   (0x0018)  
	bool                                               bIgnoreDoingCount;                                          // 0x0354   (0x0001)  
	bool                                               bSetProperty;                                               // 0x0355   (0x0001)  
	unsigned char                                      UnknownData14_6[0x2];                                       // 0x0356   (0x0002)  MISSED
	int32_t                                            EventID;                                                    // 0x0358   (0x0004)  
	int32_t                                            LeaveEventId;                                               // 0x035C   (0x0004)  
	TArray<FSBAliasZoneEvent>                          SubZoneEvents;                                              // 0x0360   (0x0010)  
	bool                                               bUseCaptureParentTM;                                        // 0x0370   (0x0001)  
	unsigned char                                      UnknownData15_6[0xF];                                       // 0x0371   (0x000F)  MISSED
	FTransform                                         CaptureRelativeParentTM;                                    // 0x0380   (0x0030)  
	FTransform                                         RelativeParentTM;                                           // 0x03B0   (0x0030)  
	int32_t                                            InitialDoingCount;                                          // 0x03E0   (0x0004)  
	TEnumAsByte<ESBZoneTriggerDoingType>               DoingType;                                                  // 0x03E4   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x03E5   (0x0003)  MISSED
	float                                              ActiveRange;                                                // 0x03E8   (0x0004)  
	bool                                               bPendingCheck;                                              // 0x03EC   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x03ED   (0x0003)  MISSED
	FName                                              BindZoneAlias;                                              // 0x03F0   (0x0008)  
	FName                                              BindTriggerAlias;                                           // 0x03F8   (0x0008)  
	TEnumAsByte<ESBZoneTriggerType>                    TriggerType;                                                // 0x0400   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x0401   (0x0003)  MISSED
	FSBActorSectorInfo                                 ActorSectorInfo;                                            // 0x0404   (0x002C)  
	int32_t                                            PendingEventIndex;                                          // 0x0430   (0x0004)  
	unsigned char                                      UnknownData19_7[0x1C];                                      // 0x0434   (0x001C)  MISSED
};

/// Class /Script/SB.SBZoneVolume
/// Size: 0x0370 (880 bytes) (0x000318 - 0x000370) align n/a MaxSize: 0x0370
class ASBZoneVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	FSBMapSectorID                                     SectorID;                                                   // 0x031C   (0x0008)  
	FName                                              ZoneAlias;                                                  // 0x0324   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x032C   (0x0004)  MISSED
	TArray<TWeakObjectPtr<UWorld*>>                    LoadLevels;                                                 // 0x0330   (0x0010)  
	TArray<TWeakObjectPtr<UWorld*>>                    UnloadLevels;                                               // 0x0340   (0x0010)  
	bool                                               bRestoreLevelWhenLeave;                                     // 0x0350   (0x0001)  
	bool                                               bPersistentChange;                                          // 0x0351   (0x0001)  
	bool                                               bVisibleAfterLoad;                                          // 0x0352   (0x0001)  
	bool                                               bActive;                                                    // 0x0353   (0x0001)  
	bool                                               bEnterRequested;                                            // 0x0354   (0x0001)  
	bool                                               bLeaveRequested;                                            // 0x0355   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0356   (0x0002)  MISSED
	FVector                                            LevelObjOrigin;                                             // 0x0358   (0x000C)  
	FVector                                            LevelObjExtent;                                             // 0x0364   (0x000C)  
};

/// Class /Script/SB.ShowMakerParticleSystemComponent
/// Size: 0x07E0 (2016 bytes) (0x0007E0 - 0x0007E0) align n/a MaxSize: 0x07E0
class UShowMakerParticleSystemComponent : public UParticleSystemComponent
{ 
public:
};

/// Struct /Script/SB.SBWidgetNavigationInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBWidgetNavigationInfo
{ 
	class USBUserWidget*                               LeftTarget;                                                 // 0x0000   (0x0008)  
	class USBUserWidget*                               RightTarget;                                                // 0x0008   (0x0008)  
	class USBUserWidget*                               UpTarget;                                                   // 0x0010   (0x0008)  
	class USBUserWidget*                               DownTarget;                                                 // 0x0018   (0x0008)  
};

/// Struct /Script/SB.SBAchievementProperty
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAchievementProperty
{ 
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	uint32_t                                           ID;                                                         // 0x0008   (0x0004)  
	uint32_t                                           ProgressValue;                                              // 0x000C   (0x0004)  
	bool                                               bRecievedReward;                                            // 0x0010   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/SB.SBActorCustomRecord
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBActorCustomRecord
{ 
	bool                                               bSpawnOnFloor;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FName>                                      NameRecords;                                                // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBActorProperty
/// Size: 0x0348 (840 bytes) (0x000000 - 0x000348) align n/a MaxSize: 0x0348
struct FSBActorProperty
{ 
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	float                                              Stat[131];                                                  // 0x0008   (0x020C)  
	TEnumAsByte<ESBActorWeightType>                    WeightType;                                                 // 0x0214   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0215   (0x0003)  MISSED
	float                                              TargetFilterRadius;                                         // 0x0218   (0x0004)  
	float                                              ProjectileTargetFilterRadius;                               // 0x021C   (0x0004)  
	int32_t                                            Level;                                                      // 0x0220   (0x0004)  
	float                                              Exp;                                                        // 0x0224   (0x0004)  
	float                                              MaxEXP;                                                     // 0x0228   (0x0004)  
	FName                                              RewardGroupAlias;                                           // 0x022C   (0x0008)  
	TEnumAsByte<ESBItemBucketType>                     RewardSpawnBucketType;                                      // 0x0234   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0235   (0x0003)  MISSED
	float                                              RunSpeed;                                                   // 0x0238   (0x0004)  
	float                                              WalkSpeed;                                                  // 0x023C   (0x0004)  
	float                                              LockOnRunSpeed;                                             // 0x0240   (0x0004)  
	float                                              LockOnWalkSpeed;                                            // 0x0244   (0x0004)  
	float                                              JoggingRunSpeed;                                            // 0x0248   (0x0004)  
	float                                              RotateAnglePerSecond;                                       // 0x024C   (0x0004)  
	FName                                              Tribe;                                                      // 0x0250   (0x0008)  
	TEnumAsByte<ESBActorType>                          ActorType;                                                  // 0x0258   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x0259   (0x0007)  MISSED
	TArray<FName>                                      Tags;                                                       // 0x0260   (0x0010)  
	FName                                              Flag;                                                       // 0x0270   (0x0008)  
	TArray<uint32_t>                                   LevelArray;                                                 // 0x0278   (0x0010)  
	TMap<FName, float>                                 AdditiveSkillDamageRateMap;                                 // 0x0288   (0x0050)  
	TMap<int32_t, FSBItemInstance>                     Equipment;                                                  // 0x02D8   (0x0050)  
	FSBActorCustomRecord                               CustomRecord;                                               // 0x0328   (0x0018)  
	uint32_t                                           MultiMapLevel;                                              // 0x0340   (0x0004)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x0344   (0x0004)  MISSED
};

/// Struct /Script/SB.SBAliasZonePhaseEvent
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasZonePhaseEvent : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasEventGuideAction
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasEventGuideAction : FSBAlias
{ 
};

/// Struct /Script/SB.SBAliasQuestMission
/// Size: 0x0018 (24 bytes) (0x000018 - 0x000018) align n/a MaxSize: 0x0018
struct FSBAliasQuestMission : FSBAlias
{ 
};

/// Struct /Script/SB.SBAnimInstanceProxy
/// Size: 0x07D0 (2000 bytes) (0x000770 - 0x0007D0) align n/a MaxSize: 0x07D0
struct FSBAnimInstanceProxy : FAnimInstanceProxy
{ 
	TArray<class UAnimSequence*>                       AnimSlotSequence;                                           // 0x0770   (0x0010)  
	TArray<class UAnimSequence*>                       AnimSlotSequence_Lower;                                     // 0x0780   (0x0010)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0790   (0x0008)  MISSED
	TArray<class UBlendSpaceBase*>                     BlendSpaceSlot;                                             // 0x0798   (0x0010)  
	TArray<class UBlendSpaceBase*>                     BlendSpaceSlot_Lower;                                       // 0x07A8   (0x0010)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x07B8   (0x0018)  MISSED
};

/// Struct /Script/SB.SkelMeshMergeSectionMapping_BP
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSkelMeshMergeSectionMapping_BP
{ 
	TArray<int32_t>                                    SectionIDs;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SkelMeshMergeUVTransform
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSkelMeshMergeUVTransform
{ 
	TArray<FTransform>                                 UVTransforms;                                               // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SkelMeshMergeUVTransformMapping
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSkelMeshMergeUVTransformMapping
{ 
	TArray<FSkelMeshMergeUVTransform>                  UVTransformsPerMesh;                                        // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SkeletalMeshMergeParams
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSkeletalMeshMergeParams
{ 
	TArray<FSkelMeshMergeSectionMapping_BP>            MeshSectionMappings;                                        // 0x0000   (0x0010)  
	TArray<FSkelMeshMergeUVTransformMapping>           UVTransformsPerMesh;                                        // 0x0010   (0x0010)  
	TArray<class USkeletalMesh*>                       MeshesToMerge;                                              // 0x0020   (0x0010)  
	int32_t                                            StripTopLODS;                                               // 0x0030   (0x0004)  
	bool                                               bNeedsCpuAccess : 1;                                        // 0x0034:0 (0x0001)  
	bool                                               bSkeletonBefore : 1;                                        // 0x0034:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0038   (0x0008)  
};

/// Struct /Script/SB.SBCharacterMoveInfo
/// Size: 0x005C (92 bytes) (0x000000 - 0x00005C) align n/a MaxSize: 0x005C
struct FSBCharacterMoveInfo
{ 
	FVector_NetQuantize100                             LastMovementInputVector;                                    // 0x0000   (0x000C)  
	FVector_NetQuantizeNormal                          LastForwardVector;                                          // 0x000C   (0x000C)  
	FVector_NetQuantizeNormal                          TargetCharacterForward;                                     // 0x0018   (0x000C)  
	FVector_NetQuantize                                RopeAxisLocation;                                           // 0x0024   (0x000C)  
	TEnumAsByte<EMovementMode>                         NewMovementMode;                                            // 0x0030   (0x0001)  
	char                                               NewCustomMode;                                              // 0x0031   (0x0001)  
	TEnumAsByte<ESBCharacterMoveType>                  LastMoveType;                                               // 0x0032   (0x0001)  
	bool                                               bWalkingFlag;                                               // 0x0033   (0x0001)  
	bool                                               bWalkingWhenMoving;                                         // 0x0034   (0x0001)  
	bool                                               bJoggingRun;                                                // 0x0035   (0x0001)  
	bool                                               bSprintFlag;                                                // 0x0036   (0x0001)  
	bool                                               bFlyingActionFlag;                                          // 0x0037   (0x0001)  
	bool                                               bJumpFlag;                                                  // 0x0038   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              RemainMoveAnimSpeedInterpolAfterAction;                     // 0x003C   (0x0004)  
	float                                              LastMoveFowardInput;                                        // 0x0040   (0x0004)  
	float                                              LastMoveRightInput;                                         // 0x0044   (0x0004)  
	FVector_NetQuantize10                              InputDuration;                                              // 0x0048   (0x000C)  
	TEnumAsByte<ESBBroadcastMoveType>                  BroadcastMoveType;                                          // 0x0054   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	int32_t                                            BroadcastMoveParam;                                         // 0x0058   (0x0004)  
};

/// Struct /Script/SB.SliceSkeletalMeshSliceableBoneData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSliceSkeletalMeshSliceableBoneData
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	float                                              LimitAngleMin;                                              // 0x0008   (0x0004)  
	float                                              LimitAngleMax;                                              // 0x000C   (0x0004)  
	class UClass*                                      OverrideCapMaterial;                                        // 0x0010   (0x0008)  
};

/// Struct /Script/SB.SBKawaiiPhysicsResetInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FSBKawaiiPhysicsResetInfo
{ 
	float                                              CurrentAlpha;                                               // 0x0000   (0x0004)  
	float                                              TargetAlpha;                                                // 0x0004   (0x0004)  
	float                                              FadeInTime;                                                 // 0x0008   (0x0004)  
	float                                              WaitingTime;                                                // 0x000C   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0010   (0x0004)  
	float                                              CurrentTime;                                                // 0x0014   (0x0004)  
	bool                                               bNeedReset;                                                 // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/SB.SBIdleAdditiveAnimationByAnimNotifyInfo
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align n/a MaxSize: 0x0080
struct FSBIdleAdditiveAnimationByAnimNotifyInfo
{ 
	unsigned char                                      UnknownData01_2[0x80];                                      // 0x0000   (0x0080)  MISSED
};

/// Struct /Script/SB.SBCollisionAnimationTransformEditInfo
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FSBCollisionAnimationTransformEditInfo
{ 
	class UAnimSequence*                               AnimSequence;                                               // 0x0000   (0x0008)  
	TArray<FName>                                      SocketNameArray;                                            // 0x0008   (0x0010)  
	TArray<FName>                                      SocketNameArrayWithoutConstraint;                           // 0x0018   (0x0010)  
	float                                              HitStartAnimationPosition;                                  // 0x0028   (0x0004)  
	float                                              HitEndAnimationPosition;                                    // 0x002C   (0x0004)  
	int32_t                                            FrameRate;                                                  // 0x0030   (0x0004)  
	FName                                              ConstraintBoneName;                                         // 0x0034   (0x0008)  
	FName                                              ConstraintRotationBoneName;                                 // 0x003C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<FName>                                      SocketNameArray0;                                           // 0x0048   (0x0010)  
	FName                                              ConstraintTranslationBoneName;                              // 0x0058   (0x0008)  
	FName                                              ConstraintRotationBoneName1;                                // 0x0060   (0x0008)  
};

/// Struct /Script/SB.SBCharacterMovementUpdateManagerTickFunction
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
struct FSBCharacterMovementUpdateManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/SB.SBRewardGroupFormationInfo
/// Size: 0x0084 (132 bytes) (0x000000 - 0x000084) align n/a MaxSize: 0x0084
struct FSBRewardGroupFormationInfo
{ 
	unsigned char                                      UnknownData01_2[0x84];                                      // 0x0000   (0x0084)  MISSED
};

/// Struct /Script/SB.SBCommonStruct
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBCommonStruct
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBNikkeLostArticleTableProperty
/// Size: 0x0098 (152 bytes) (0x000010 - 0x000098) align n/a MaxSize: 0x0098
struct FSBNikkeLostArticleTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TArray<FName>                                      ClearNikkeStageAlias;                                       // 0x0018   (0x0010)  
	TArray<FString>                                    ClearSequencePath;                                          // 0x0028   (0x0010)  
	TArray<float>                                      ClearSequenceUITime;                                        // 0x0038   (0x0010)  
	FName                                              ClearRewardGroupAlias;                                      // 0x0048   (0x0008)  
	FName                                              Category;                                                   // 0x0050   (0x0008)  
	FString                                            ImageAssetPath;                                             // 0x0058   (0x0010)  
	FString                                            MusicQNRTAssetPath;                                         // 0x0068   (0x0010)  
	bool                                               bSensibleVisualizer;                                        // 0x0078   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0079   (0x0003)  MISSED
	FName                                              ItemAlias;                                                  // 0x007C   (0x0008)  
	bool                                               bDisplayDescFunction;                                       // 0x0084   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0085   (0x0003)  MISSED
	float                                              OverrideAutoInteractionDistance;                            // 0x0088   (0x0004)  
	FName                                              DontDetectConditionGroup;                                   // 0x008C   (0x0008)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Struct /Script/SB.SBArtBookTableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBArtBookTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              GroupAlias;                                                 // 0x0014   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FString                                            TitleStringKey;                                             // 0x0020   (0x0010)  
	FString                                            ArtistStringKey;                                            // 0x0030   (0x0010)  
	FString                                            ImagePath;                                                  // 0x0040   (0x0010)  
};

/// Struct /Script/SB.SBMailBoxGiftTableProperty
/// Size: 0x0068 (104 bytes) (0x000010 - 0x000068) align n/a MaxSize: 0x0068
struct FSBMailBoxGiftTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            TitleStringKey;                                             // 0x0018   (0x0010)  
	FString                                            DescStringKey;                                              // 0x0028   (0x0010)  
	FName                                              ReceivableConditionGroup;                                   // 0x0038   (0x0008)  
	TArray<FName>                                      EnableMailBoxEnvSpawnList;                                  // 0x0040   (0x0010)  
	FName                                              EventGiftAlias;                                             // 0x0050   (0x0008)  
	FString                                            MailImagePath;                                              // 0x0058   (0x0010)  
};

/// Struct /Script/SB.SBLoadingScreenGameTipTableProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBLoadingScreenGameTipTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            Description;                                                // 0x0018   (0x0010)  
	FName                                              TipGroup;                                                   // 0x0028   (0x0008)  
	FName                                              Condition;                                                  // 0x0030   (0x0008)  
	FName                                              ConditionGroup;                                             // 0x0038   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0040   (0x0008)  
};

/// Struct /Script/SB.SBTurntableSoundTableProperty
/// Size: 0x0080 (128 bytes) (0x000010 - 0x000080) align n/a MaxSize: 0x0080
struct FSBTurntableSoundTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              ConditionGroup;                                             // 0x0014   (0x0008)  
	FName                                              NotifyAchievement;                                          // 0x001C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FString                                            MusicPath;                                                  // 0x0028   (0x0010)  
	FString                                            NoiseMusicPath;                                             // 0x0038   (0x0010)  
	FString                                            TitleStringKey;                                             // 0x0048   (0x0010)  
	FString                                            ImagePath;                                                  // 0x0058   (0x0010)  
	FString                                            QNRTAssetPath;                                              // 0x0068   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0078   (0x0008)  
};

/// Struct /Script/SB.SBKeyMappingRolloverTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBKeyMappingRolloverTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              FirstKey;                                                   // 0x0014   (0x0008)  
	FName                                              SecondKey;                                                  // 0x001C   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0024   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBKeyMappingTableProperty
/// Size: 0x00E0 (224 bytes) (0x000010 - 0x0000E0) align n/a MaxSize: 0x00E0
struct FSBKeyMappingTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	ESBKeyMappingStrengthType                          RecommendationStrength;                                     // 0x0014   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              MappingGroup;                                               // 0x0018   (0x0008)  
	TArray<FName>                                      DuplicateDenyArray;                                         // 0x0020   (0x0010)  
	TArray<FName>                                      DuplicateAllowArray;                                        // 0x0030   (0x0010)  
	bool                                               bAllowCombinationKey;                                       // 0x0040   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0041   (0x0007)  MISSED
	TArray<FName>                                      DuplicateCombinationKeyAllowArray;                          // 0x0048   (0x0010)  
	TArray<FName>                                      ActionNames;                                                // 0x0058   (0x0010)  
	TArray<FName>                                      AxisNames;                                                  // 0x0068   (0x0010)  
	ESBKeyMappingAxisScaleType                         AxisScaleType;                                              // 0x0078   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x0079   (0x0007)  MISSED
	FString                                            SlotName;                                                   // 0x0080   (0x0010)  
	FString                                            SlotDesc;                                                   // 0x0090   (0x0010)  
	FString                                            MoviePath;                                                  // 0x00A0   (0x0010)  
	FString                                            ImagePath;                                                  // 0x00B0   (0x0010)  
	TArray<ESBUIKeyMappingViewerCategoryType>          ViewerCategoryTypes;                                        // 0x00C0   (0x0010)  
	int32_t                                            ViewerPriority;                                             // 0x00D0   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x00D4   (0x0008)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBPhotoModeMovementTableProperty
/// Size: 0x0038 (56 bytes) (0x000010 - 0x000038) align n/a MaxSize: 0x0038
struct FSBPhotoModeMovementTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBPhotoModeInputDirection>            InputDirection;                                             // 0x0014   (0x0001)  
	TEnumAsByte<ESBPhotoModeCameraType>                CameraType;                                                 // 0x0015   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	float                                              Acceleration;                                               // 0x0018   (0x0004)  
	float                                              Deceleration;                                               // 0x001C   (0x0004)  
	bool                                               bAffectedByFOV;                                             // 0x0020   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	float                                              FOVScaleMin;                                                // 0x0024   (0x0004)  
	float                                              FOVScaleMax;                                                // 0x0028   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x002C   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/SB.SBPhotoModeImageTableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBPhotoModeImageTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TArray<FName>                                      UIOperateArray;                                             // 0x0018   (0x0010)  
	FString                                            OptionStringKey;                                            // 0x0028   (0x0010)  
	FString                                            ImagePath;                                                  // 0x0038   (0x0010)  
	FName                                              EnableConditionGroup;                                       // 0x0048   (0x0008)  
};

/// Struct /Script/SB.SBPhotoModeOptionTableProperty
/// Size: 0x00E8 (232 bytes) (0x000010 - 0x0000E8) align n/a MaxSize: 0x00E8
struct FSBPhotoModeOptionTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBPhotoModeOptionType>                OptionType;                                                 // 0x0014   (0x0001)  
	TEnumAsByte<ESBPhotoModeCameraType>                CameraType;                                                 // 0x0015   (0x0001)  
	TEnumAsByte<ESBPhotoModeOptionUISlotType>          UISlotType;                                                 // 0x0016   (0x0001)  
	TEnumAsByte<ESBUIPhotoModeTab>                     PhotoModeUITab;                                             // 0x0017   (0x0001)  
	bool                                               bLocked;                                                    // 0x0018   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	FName                                              UIOperateVariableName;                                      // 0x001C   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FString                                            ChangeNoticeStringKey;                                      // 0x0028   (0x0010)  
	float                                              InitialValue;                                               // 0x0038   (0x0004)  
	float                                              DefaultValue;                                               // 0x003C   (0x0004)  
	float                                              MinValue;                                                   // 0x0040   (0x0004)  
	float                                              MaxValue;                                                   // 0x0044   (0x0004)  
	int32_t                                            FloatValueDecimalRoundPoint;                                // 0x0048   (0x0004)  
	float                                              UIMinValue;                                                 // 0x004C   (0x0004)  
	float                                              UIMaxValue;                                                 // 0x0050   (0x0004)  
	float                                              UISliderSlotIntervalValue;                                  // 0x0054   (0x0004)  
	float                                              UISliderSlotClickIntervalValue;                             // 0x0058   (0x0004)  
	float                                              UIErrorTolerance;                                           // 0x005C   (0x0004)  
	FString                                            OptionToUICurvePath;                                        // 0x0060   (0x0010)  
	FString                                            UIToOptionCurvePath;                                        // 0x0070   (0x0010)  
	TArray<TEnumAsByte<ESBPhotoModeOptionType>>        DependencyList;                                             // 0x0080   (0x0010)  
	bool                                               bOverrideValueOnLocked;                                     // 0x0090   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	float                                              OverriddenValueOnLocked;                                    // 0x0094   (0x0004)  
	bool                                               bFreezeCameraOnFocus;                                       // 0x0098   (0x0001)  
	bool                                               bControlActiveLight;                                        // 0x0099   (0x0001)  
	bool                                               bSetDefaultToFinalPostProcessing;                           // 0x009A   (0x0001)  
	bool                                               bEnableValueSnapToNearestUI;                                // 0x009B   (0x0001)  
	FName                                              MaterialMaskValue1;                                         // 0x009C   (0x0008)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	TArray<float>                                      FloatArrayValue1;                                           // 0x00A8   (0x0010)  
	TArray<FString>                                    OptionStringArray;                                          // 0x00B8   (0x0010)  
	TArray<FName>                                      AliasArrayValue1;                                           // 0x00C8   (0x0010)  
	float                                              EditorOnlyStepValue;                                        // 0x00D8   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x00DC   (0x0008)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x00E4   (0x0004)  MISSED
};

/// Struct /Script/SB.SBPhotoChallengeTableProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBPhotoChallengeTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              TargetZoneEnvActorAlias;                                    // 0x0014   (0x0008)  
	float                                              CheckDistance;                                              // 0x001C   (0x0004)  
	float                                              CheckAngle;                                                 // 0x0020   (0x0004)  
	float                                              CheckBoxRatioX;                                             // 0x0024   (0x0004)  
	float                                              CheckBoxRatioY;                                             // 0x0028   (0x0004)  
	FName                                              LinkedQuestTaskAlias;                                       // 0x002C   (0x0008)  
	FName                                              ExceptActorAlias;                                           // 0x0034   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBPhotoModeEyesPositionByPoseProperty
/// Size: 0x0058 (88 bytes) (0x000010 - 0x000058) align n/a MaxSize: 0x0058
struct FSBPhotoModeEyesPositionByPoseProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              PoseName;                                                   // 0x0014   (0x0008)  
	TEnumAsByte<ESBPhotoModeCameraType>                CameraType;                                                 // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FString                                            EyesPosition;                                               // 0x0020   (0x0010)  
	FString                                            EyesPosition_Adam;                                          // 0x0030   (0x0010)  
	FString                                            EyesPosition_Lily;                                          // 0x0040   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0050   (0x0008)  
};

/// Struct /Script/SB.SBPhotoModeFacialAnimationTableProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBPhotoModeFacialAnimationTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              PhotoModeTag;                                               // 0x0014   (0x0008)  
	TEnumAsByte<ESBPhotoModeCameraType>                CameraType;                                                 // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FString                                            AssetPath;                                                  // 0x0020   (0x0010)  
	FString                                            EyesPosition;                                               // 0x0030   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0040   (0x0008)  
};

/// Struct /Script/SB.SBPhotoModeImageFilterTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBPhotoModeImageFilterTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            AssetPath;                                                  // 0x0018   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0028   (0x0008)  
};

/// Struct /Script/SB.SBEventGiftTableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBEventGiftTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBEventGiftType>                      GiftType;                                                   // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	TArray<FName>                                      ItemList;                                                   // 0x0018   (0x0010)  
	TArray<int32_t>                                    ItemAmountList;                                             // 0x0028   (0x0010)  
	TArray<int32_t>                                    ItemLevelList;                                              // 0x0038   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0048   (0x0008)  
};

/// Struct /Script/SB.SBNikkeStageTableProperty
/// Size: 0x0140 (320 bytes) (0x000010 - 0x000140) align n/a MaxSize: 0x0140
struct FSBNikkeStageTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            StageName;                                                  // 0x0018   (0x0010)  
	TEnumAsByte<ESBNikkeStageType>                     StageType;                                                  // 0x0028   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	int32_t                                            WaveCount;                                                  // 0x002C   (0x0004)  
	TArray<FName>                                      PlayerStartEffects;                                         // 0x0030   (0x0010)  
	TArray<FName>                                      PlayerStartItems;                                           // 0x0040   (0x0010)  
	TArray<int32_t>                                    PlayerStartItemsCount;                                      // 0x0050   (0x0010)  
	TArray<FName>                                      PlayerAcquisitionSkillList;                                 // 0x0060   (0x0010)  
	int32_t                                            DefenseMaxScore;                                            // 0x0070   (0x0004)  
	int32_t                                            DefenseAddScore;                                            // 0x0074   (0x0004)  
	int32_t                                            DefenseSubScore;                                            // 0x0078   (0x0004)  
	FName                                              DefenseAreaEnv;                                             // 0x007C   (0x0008)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	FString                                            EnterStagePlayShow;                                         // 0x0088   (0x0010)  
	FString                                            StartTheater;                                               // 0x0098   (0x0010)  
	float                                              PlayStartGameDelayTime;                                     // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	FString                                            VictoryTheater;                                             // 0x00B0   (0x0010)  
	FString                                            DefeatTheater;                                              // 0x00C0   (0x0010)  
	FString                                            TimeoutTheater;                                             // 0x00D0   (0x0010)  
	FString                                            PlayerDeadTheater;                                          // 0x00E0   (0x0010)  
	FName                                              StartCamp;                                                  // 0x00F0   (0x0008)  
	float                                              TimieLimit;                                                 // 0x00F8   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x00FC   (0x0004)  MISSED
	TArray<FName>                                      BossEnemySpawnList;                                         // 0x0100   (0x0010)  
	FName                                              TipGroup;                                                   // 0x0110   (0x0008)  
	FName                                              DronStateAfterClear;                                        // 0x0118   (0x0008)  
	TArray<FName>                                      DronFriendlyNpcEffectAfterClear;                            // 0x0120   (0x0010)  
	FName                                              DebugCheatGroupName;                                        // 0x0130   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0138   (0x0008)  
};

/// Struct /Script/SB.SBBossChallengeTableProperty
/// Size: 0x0100 (256 bytes) (0x000010 - 0x000100) align n/a MaxSize: 0x0100
struct FSBBossChallengeTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              StageGroup;                                                 // 0x0014   (0x0008)  
	int32_t                                            StagePriority;                                              // 0x001C   (0x0004)  
	FName                                              ZoneAlias;                                                  // 0x0020   (0x0008)  
	FName                                              SpawnPointAlias;                                            // 0x0028   (0x0008)  
	TArray<FName>                                      UnlockAchievementArray;                                     // 0x0030   (0x0010)  
	TArray<FString>                                    UnlockEntitlementArray;                                     // 0x0040   (0x0010)  
	TArray<FName>                                      EnemyEventSpawnList;                                        // 0x0050   (0x0010)  
	FName                                              MaximumPresetAlias;                                         // 0x0060   (0x0008)  
	FName                                              MaximumNewGamePlusPresetAlias;                              // 0x0068   (0x0008)  
	FName                                              MinimumPresetAlias;                                         // 0x0070   (0x0008)  
	FName                                              MaximumPresetAliasStoryMode;                                // 0x0078   (0x0008)  
	FName                                              MaximumNewGamePlusPresetAliasStoryMode;                     // 0x0080   (0x0008)  
	FName                                              MinimumPresetAliasStoryMode;                                // 0x0088   (0x0008)  
	FName                                              MaximumPresetAliasHardMode;                                 // 0x0090   (0x0008)  
	FName                                              MaximumNewGamePlusPresetAliasHardMode;                      // 0x0098   (0x0008)  
	FName                                              MinimumPresetAliasHardMode;                                 // 0x00A0   (0x0008)  
	FString                                            BossStringKey;                                              // 0x00A8   (0x0010)  
	FString                                            RegionStringKey;                                            // 0x00B8   (0x0010)  
	FString                                            ThumbnailImagePath;                                         // 0x00C8   (0x0010)  
	FString                                            ThumbnailIconImagePath;                                     // 0x00D8   (0x0010)  
	TArray<FString>                                    ResourceCacheCharacterAliases;                              // 0x00E8   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x00F8   (0x0008)  
};

/// Struct /Script/SB.SBActorPlayPresetTableProperty
/// Size: 0x0100 (256 bytes) (0x000010 - 0x000100) align n/a MaxSize: 0x0100
struct FSBActorPlayPresetTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	int32_t                                            WeaponLevel;                                                // 0x0014   (0x0004)  
	int32_t                                            BodyLevel;                                                  // 0x0018   (0x0004)  
	int32_t                                            BetaLevel;                                                  // 0x001C   (0x0004)  
	int32_t                                            TumblerLevel;                                               // 0x0020   (0x0004)  
	int32_t                                            ExoSpineLevel;                                              // 0x0024   (0x0004)  
	int32_t                                            GearLevel;                                                  // 0x0028   (0x0004)  
	FName                                              PlayerDifficultyStatGroupAlias;                             // 0x002C   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FName>                                      AcquisitionSkillList;                                       // 0x0038   (0x0010)  
	TArray<FName>                                      PreCompleteAchievementAliasList;                            // 0x0048   (0x0010)  
	TArray<FName>                                      MaintainCompleteAchievementList;                            // 0x0058   (0x0010)  
	TArray<FName>                                      ItemList;                                                   // 0x0068   (0x0010)  
	TArray<int32_t>                                    ItemAmountList;                                             // 0x0078   (0x0010)  
	TArray<int32_t>                                    ItemLevelList;                                              // 0x0088   (0x0010)  
	FName                                              EquipItem_Gear1;                                            // 0x0098   (0x0008)  
	FName                                              EquipItem_Gear2;                                            // 0x00A0   (0x0008)  
	FName                                              EquipItem_Gear3;                                            // 0x00A8   (0x0008)  
	FName                                              EquipItem_Gear4;                                            // 0x00B0   (0x0008)  
	FName                                              EquipItem_NanoSuit;                                         // 0x00B8   (0x0008)  
	FName                                              EquipItem_Protector1;                                       // 0x00C0   (0x0008)  
	FName                                              EquipItem_Protector2;                                       // 0x00C8   (0x0008)  
	FName                                              EquipItem_Hair1;                                            // 0x00D0   (0x0008)  
	FName                                              EquipItem_Accessory1;                                       // 0x00D8   (0x0008)  
	FName                                              EquipItem_Accessory2;                                       // 0x00E0   (0x0008)  
	FName                                              EquipItem_Drone;                                            // 0x00E8   (0x0008)  
	int32_t                                            Hair1_ColorIndex;                                           // 0x00F0   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x00F4   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00FC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBGamePlayProgressCheatTableProperty
/// Size: 0x00C8 (200 bytes) (0x000010 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FSBGamePlayProgressCheatTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              CommandGroup;                                               // 0x0014   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FString                                            PreCommand;                                                 // 0x0020   (0x0010)  
	FString                                            CommandSlot1;                                               // 0x0030   (0x0010)  
	FString                                            CommandSlot1NewGamePlus;                                    // 0x0040   (0x0010)  
	FString                                            CommandSlot2;                                               // 0x0050   (0x0010)  
	FString                                            CommandSlot2NewGamePlus;                                    // 0x0060   (0x0010)  
	FString                                            CommandSlot3;                                               // 0x0070   (0x0010)  
	FString                                            CommandSlot3NewGamePlus;                                    // 0x0080   (0x0010)  
	FString                                            CommandSlot4;                                               // 0x0090   (0x0010)  
	FString                                            CommandSlot4NewGamePlus;                                    // 0x00A0   (0x0010)  
	FString                                            PostCommand;                                                // 0x00B0   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x00C0   (0x0008)  
};

/// Struct /Script/SB.SBNewGamePlusAlreadySetupTableProperty
/// Size: 0x0038 (56 bytes) (0x000010 - 0x000038) align n/a MaxSize: 0x0038
struct FSBNewGamePlusAlreadySetupTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBNGPlusAlreadySetupType>             ObjectType;                                                 // 0x0014   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              DataAlias;                                                  // 0x0018   (0x0008)  
	FName                                              StateName;                                                  // 0x0020   (0x0008)  
	TEnumAsByte<ESBObjectState>                        Enable;                                                     // 0x0028   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x002C   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelGraphicsOptionsTableProperty
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align n/a MaxSize: 0x0018
struct FSBLevelGraphicsOptionsTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBFSR2QualityMode>                    FSR2QualityMode;                                            // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Struct /Script/SB.SBSequenceActorTagTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBSequenceActorTagTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              TextActorKey;                                               // 0x0014   (0x0008)  
	FName                                              ActorTag;                                                   // 0x001C   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0024   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCreditTableProperty
/// Size: 0x00D0 (208 bytes) (0x000010 - 0x0000D0) align n/a MaxSize: 0x00D0
struct FSBCreditTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              VoiceLanguage;                                              // 0x0014   (0x0008)  
	FName                                              CreditType;                                                 // 0x001C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FString                                            Arg1;                                                       // 0x0028   (0x0010)  
	FString                                            Arg2;                                                       // 0x0038   (0x0010)  
	FString                                            Arg3;                                                       // 0x0048   (0x0010)  
	FString                                            Arg4;                                                       // 0x0058   (0x0010)  
	FString                                            Arg5;                                                       // 0x0068   (0x0010)  
	FString                                            Arg6;                                                       // 0x0078   (0x0010)  
	FString                                            Arg7;                                                       // 0x0088   (0x0010)  
	FString                                            Arg8;                                                       // 0x0098   (0x0010)  
	FString                                            Arg9;                                                       // 0x00A8   (0x0010)  
	FString                                            Arg10;                                                      // 0x00B8   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x00C8   (0x0008)  
};

/// Struct /Script/SB.SBManualTableProperty
/// Size: 0x0068 (104 bytes) (0x000010 - 0x000068) align n/a MaxSize: 0x0068
struct FSBManualTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBManualType>                         ManualType;                                                 // 0x0014   (0x0001)  
	bool                                               bUseAcquisitionSkillString;                                 // 0x0015   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FString                                            GroupStringKey;                                             // 0x0018   (0x0010)  
	TArray<FString>                                    DescStringKeyArray;                                         // 0x0028   (0x0010)  
	TArray<FString>                                    MoviePathArray;                                             // 0x0038   (0x0010)  
	TArray<FString>                                    ImagePathArray;                                             // 0x0048   (0x0010)  
	FName                                              GroupUnlockAchievementAlias;                                // 0x0058   (0x0008)  
	FName                                              GroupUnlockConditionGroupAlias;                             // 0x0060   (0x0008)  
};

/// Struct /Script/SB.SBIsolatedAreaTableProperty
/// Size: 0x0018 (24 bytes) (0x000010 - 0x000018) align n/a MaxSize: 0x0018
struct FSBIsolatedAreaTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/SB.SBTrainningRoomSettingTableProperty
/// Size: 0x00B8 (184 bytes) (0x000010 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FSBTrainningRoomSettingTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Zone;                                                       // 0x0014   (0x0008)  
	FName                                              RegionActorName;                                            // 0x001C   (0x0008)  
	FName                                              InitRegionActorEvent;                                       // 0x0024   (0x0008)  
	bool                                               bInitApplyPlayerInfiniteEffect;                             // 0x002C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x002D   (0x0003)  MISSED
	FString                                            PlayerStartPoint;                                           // 0x0030   (0x0010)  
	TArray<FName>                                      PlayerStartEffects;                                         // 0x0040   (0x0010)  
	FName                                              PlayerStartSkill;                                           // 0x0050   (0x0008)  
	TArray<FName>                                      EnemyStartEffects;                                          // 0x0058   (0x0010)  
	TEnumAsByte<ESBTrainningRoomNpcAIType>             EnemyNpcAIType;                                             // 0x0068   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0069   (0x0007)  MISSED
	FString                                            EnemyNpcSpawnPointPreFix;                                   // 0x0070   (0x0010)  
	FString                                            EnemyNpcReSpawnPointPreFix;                                 // 0x0080   (0x0010)  
	TArray<FName>                                      EnemySpawnList;                                             // 0x0090   (0x0010)  
	TArray<TEnumAsByte<ESBSpawnRotationType>>          EnemySpawnRotationTypeList;                                 // 0x00A0   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x00B0   (0x0008)  
};

/// Struct /Script/SB.SBResourceCacheSequenceTableProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBResourceCacheSequenceTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Zone;                                                       // 0x0014   (0x0008)  
	FName                                              QuestEpic;                                                  // 0x001C   (0x0008)  
	FName                                              CustomGroup1;                                               // 0x0024   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FString                                            AssetPath;                                                  // 0x0030   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0040   (0x0008)  
};

/// Struct /Script/SB.SBEffectVolumePropTableProperty
/// Size: 0x0108 (264 bytes) (0x000010 - 0x000108) align n/a MaxSize: 0x0108
struct FSBEffectVolumePropTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	int32_t                                            ExecuteDeadCount01;                                         // 0x0014   (0x0004)  
	TArray<FName>                                      DeadCountEffectAliasList01;                                 // 0x0018   (0x0010)  
	int32_t                                            ExecuteDeadCount02;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList02;                                 // 0x0030   (0x0010)  
	int32_t                                            ExecuteDeadCount03;                                         // 0x0040   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList03;                                 // 0x0048   (0x0010)  
	int32_t                                            ExecuteDeadCount04;                                         // 0x0058   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList04;                                 // 0x0060   (0x0010)  
	int32_t                                            ExecuteDeadCount05;                                         // 0x0070   (0x0004)  
	unsigned char                                      UnknownData12_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList05;                                 // 0x0078   (0x0010)  
	int32_t                                            ExecuteDeadCount06;                                         // 0x0088   (0x0004)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList06;                                 // 0x0090   (0x0010)  
	int32_t                                            ExecuteDeadCount07;                                         // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData14_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList07;                                 // 0x00A8   (0x0010)  
	int32_t                                            ExecuteDeadCount08;                                         // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData15_6[0x4];                                       // 0x00BC   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList08;                                 // 0x00C0   (0x0010)  
	int32_t                                            ExecuteDeadCount09;                                         // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData16_6[0x4];                                       // 0x00D4   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList09;                                 // 0x00D8   (0x0010)  
	int32_t                                            ExecuteDeadCount10;                                         // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData17_6[0x4];                                       // 0x00EC   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList10;                                 // 0x00F0   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0100   (0x0008)  
};

/// Struct /Script/SB.SBUITutorialTableProperty
/// Size: 0x0088 (136 bytes) (0x000010 - 0x000088) align n/a MaxSize: 0x0088
struct FSBUITutorialTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            TitleStringKey;                                             // 0x0018   (0x0010)  
	FString                                            DescStringKey;                                              // 0x0028   (0x0010)  
	bool                                               bBlockNavigation;                                           // 0x0038   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	TArray<FName>                                      EnableInputAliases;                                         // 0x0040   (0x0010)  
	TArray<FString>                                    BlockingWidgetEventNameList;                                // 0x0050   (0x0010)  
	FName                                              NextTutorialAlias;                                          // 0x0060   (0x0008)  
	TEnumAsByte<ESBUILogicType>                        OpenUILogicType;                                            // 0x0068   (0x0001)  
	TEnumAsByte<ESBUIGameMenuType>                     OpenUIType;                                                 // 0x0069   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x006A   (0x0002)  MISSED
	FName                                              StartConditionGroup;                                        // 0x006C   (0x0008)  
	FName                                              CompleteWidgetEventName;                                    // 0x0074   (0x0008)  
	FName                                              CompleteAchievementAlias;                                   // 0x007C   (0x0008)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCheatQuestTableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBCheatQuestTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              CheatProgressQuestCommandsTable;                            // 0x0014   (0x0008)  
	bool                                               bMaintainSubQuest;                                          // 0x001C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              StartWorld;                                                 // 0x0020   (0x0008)  
	FVector                                            StartSpawnLocation;                                         // 0x0028   (0x000C)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FName>                                      CheatGroupCommands;                                         // 0x0038   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0048   (0x0008)  
};

/// Struct /Script/SB.SBSocialAnimTableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBSocialAnimTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Group;                                                      // 0x0014   (0x0008)  
	FName                                              Motion;                                                     // 0x001C   (0x0008)  
	ESBMetaAIBehaviorStance                            Stance;                                                     // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	float                                              BlendIn;                                                    // 0x0028   (0x0004)  
	float                                              BlendOut;                                                   // 0x002C   (0x0004)  
	FSoftObjectPath                                    AssetPath;                                                  // 0x0030   (0x0018)  
	FName                                              FileSuffix;                                                 // 0x0048   (0x0008)  
};

/// Struct /Script/SB.SBWorldMapTableProperty
/// Size: 0x0090 (144 bytes) (0x000010 - 0x000090) align n/a MaxSize: 0x0090
struct FSBWorldMapTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              WorldAlias;                                                 // 0x0014   (0x0008)  
	FName                                              PrevWorldMapAlias;                                          // 0x001C   (0x0008)  
	FName                                              NextWorldMapAlias;                                          // 0x0024   (0x0008)  
	FName                                              ExceptIsolatedAreaAlias;                                    // 0x002C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	FString                                            AssetImage;                                                 // 0x0038   (0x0010)  
	FString                                            AssetImageBG;                                               // 0x0048   (0x0010)  
	FString                                            AssetImageTitle;                                            // 0x0058   (0x0010)  
	float                                              InitiaImageSize;                                            // 0x0068   (0x0004)  
	int32_t                                            InitialZoomLevel;                                           // 0x006C   (0x0004)  
	float                                              Size1;                                                      // 0x0070   (0x0004)  
	float                                              Speed1;                                                     // 0x0074   (0x0004)  
	float                                              Size2;                                                      // 0x0078   (0x0004)  
	float                                              Speed2;                                                     // 0x007C   (0x0004)  
	float                                              Size3;                                                      // 0x0080   (0x0004)  
	float                                              Speed3;                                                     // 0x0084   (0x0004)  
	FName                                              UnlockAchievementAlias;                                     // 0x0088   (0x0008)  
};

/// Struct /Script/SB.SBShowParamTableProperty
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000028) align n/a MaxSize: 0x0028
struct FSBShowParamTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	bool                                               UseCreateStaticMaterial;                                    // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	int32_t                                            CreateStaticMaterialElementIndex;                           // 0x0018   (0x0004)  
	int32_t                                            CreateStaticMaterialInstanceIndex;                          // 0x001C   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0020   (0x0008)  
};

/// Struct /Script/SB.SBCanTableProperty
/// Size: 0x00C0 (192 bytes) (0x000010 - 0x0000C0) align n/a MaxSize: 0x00C0
struct FSBCanTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              ItemAlias;                                                  // 0x0014   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FString                                            StringKeyTitle;                                             // 0x0020   (0x0010)  
	FString                                            StringKeyFunc;                                              // 0x0030   (0x0010)  
	FString                                            StringKeyContent;                                           // 0x0040   (0x0010)  
	FString                                            Asset3D;                                                    // 0x0050   (0x0010)  
	FString                                            AssetMaterial;                                              // 0x0060   (0x0010)  
	FName                                              DetectEnvSpawnAlias;                                        // 0x0070   (0x0008)  
	FName                                              AcquireEnvSpawnAlias;                                       // 0x0078   (0x0008)  
	TArray<FName>                                      CollectionEnvSpawnAliases;                                  // 0x0080   (0x0010)  
	TArray<int32_t>                                    CollectionXList;                                            // 0x0090   (0x0010)  
	TArray<int32_t>                                    CollectionYList;                                            // 0x00A0   (0x0010)  
	FName                                              AchievementAlias;                                           // 0x00B0   (0x0008)  
	float                                              OverrideDetectDistance;                                     // 0x00B8   (0x0004)  
	float                                              OverrideAutoInteractionDistance;                            // 0x00BC   (0x0004)  
};

/// Struct /Script/SB.SBGuideMessageTableProperty
/// Size: 0x00A0 (160 bytes) (0x000010 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FSBGuideMessageTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	int32_t                                            Priority;                                                   // 0x0014   (0x0004)  
	TEnumAsByte<ESBUIGuideMessageType>                 MessageType;                                                // 0x0018   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0019   (0x0007)  MISSED
	FString                                            StringKey;                                                  // 0x0020   (0x0010)  
	float                                              DisplayTime;                                                // 0x0030   (0x0004)  
	float                                              DisplayPositionX;                                           // 0x0034   (0x0004)  
	TEnumAsByte<ESBUIGuideMessageDisplayType>          DisplayType;                                                // 0x0038   (0x0001)  
	TEnumAsByte<ESBGuideStartType>                     GuideStartType;                                             // 0x0039   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x003A   (0x0002)  MISSED
	int32_t                                            StartValue;                                                 // 0x003C   (0x0004)  
	TEnumAsByte<ESBGuideCompleteType>                  GuideCompleteType;                                          // 0x0040   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	int32_t                                            CompleteValue;                                              // 0x0044   (0x0004)  
	bool                                               CustomBool;                                                 // 0x0048   (0x0001)  
	unsigned char                                      UnknownData10_6[0x7];                                       // 0x0049   (0x0007)  MISSED
	TArray<FName>                                      CustomAliases;                                              // 0x0050   (0x0010)  
	TEnumAsByte<ESBSkillCommandState>                  Command;                                                    // 0x0060   (0x0001)  
	TEnumAsByte<ESBActorCondition>                     ActorCondition;                                             // 0x0061   (0x0001)  
	TEnumAsByte<ESBFishingModeType>                    FishingMode;                                                // 0x0062   (0x0001)  
	unsigned char                                      UnknownData11_6[0x1];                                       // 0x0063   (0x0001)  MISSED
	FName                                              GuideCompleteAchievementAlias;                              // 0x0064   (0x0008)  
	FName                                              GuideTimeOutAchievementAlias;                               // 0x006C   (0x0008)  
	FName                                              GuideSkipAchievementAlias;                                  // 0x0074   (0x0008)  
	FName                                              StartConditionGroup;                                        // 0x007C   (0x0008)  
	FName                                              CancelConditionGroup;                                       // 0x0084   (0x0008)  
	FName                                              UIActionRequestGroup;                                       // 0x008C   (0x0008)  
	bool                                               bAffectedByVisibleOption;                                   // 0x0094   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0095   (0x0003)  MISSED
	int32_t                                            ForceSlotIndex;                                             // 0x0098   (0x0004)  
	bool                                               DontShowInNewGamePlus;                                      // 0x009C   (0x0001)  
	unsigned char                                      UnknownData13_7[0x3];                                       // 0x009D   (0x0003)  MISSED
};

/// Struct /Script/SB.SBStudioTransitionTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBStudioTransitionTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBUIStudioState>                      StartState;                                                 // 0x0014   (0x0001)  
	TEnumAsByte<ESBUIStudioState>                      TargetState;                                                // 0x0015   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FName                                              TransitionShowTag;                                          // 0x0018   (0x0008)  
	FName                                              TransitionSequenceTag;                                      // 0x0020   (0x0008)  
	bool                                               bFade;                                                      // 0x0028   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/SB.SBWorldTransitionTableProperty
/// Size: 0x0088 (136 bytes) (0x000010 - 0x000088) align n/a MaxSize: 0x0088
struct FSBWorldTransitionTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBWorldTransitionType>                TransitionType;                                             // 0x0014   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              EnableConditionGroup;                                       // 0x0018   (0x0008)  
	FName                                              TriggerAlias;                                               // 0x0020   (0x0008)  
	FName                                              ZoneEventAlias;                                             // 0x0028   (0x0008)  
	FName                                              EnvSpawnAlias;                                              // 0x0030   (0x0008)  
	TArray<FName>                                      EventSpawnAliasArray;                                       // 0x0038   (0x0010)  
	FName                                              FromWorldAlias;                                             // 0x0048   (0x0008)  
	FName                                              FromIsolatedAreaAlias;                                      // 0x0050   (0x0008)  
	FName                                              ToWorldAlias;                                               // 0x0058   (0x0008)  
	FName                                              ToIsolatedAreaAlias;                                        // 0x0060   (0x0008)  
	FString                                            ToDescStringKey;                                            // 0x0068   (0x0010)  
	FName                                              PortalTag;                                                  // 0x0078   (0x0008)  
	bool                                               EnableWorldMapPortal;                                       // 0x0080   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Struct /Script/SB.SBHintTableProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBHintTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	uint32_t                                           DelayActivateTimeSec;                                       // 0x0014   (0x0004)  
	uint32_t                                           LongTimeDelayActivateTimeSec;                               // 0x0018   (0x0004)  
	FName                                              HintMessage_StringKey;                                      // 0x001C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	TArray<FName>                                      ActivateZoneTriggerAliasArray;                              // 0x0028   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0038   (0x0008)  
};

/// Struct /Script/SB.SBRestartRuleTableProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBRestartRuleTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              MainLevelTarget;                                            // 0x0014   (0x0008)  
	FName                                              LookAtLevelTarget;                                          // 0x001C   (0x0008)  
	float                                              SafetyDistance;                                             // 0x0024   (0x0004)  
	float                                              OutsideLimitTime;                                           // 0x0028   (0x0004)  
	FName                                              OutSideLevelSequence;                                       // 0x002C   (0x0008)  
	FName                                              OutSideTheaterEvent;                                        // 0x0034   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x003C   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCheatProgressQuestCommandsTableProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBCheatProgressQuestCommandsTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TArray<FName>                                      CompleteQuestList;                                          // 0x0018   (0x0010)  
	FName                                              GamePlayProgressRecord;                                     // 0x0028   (0x0008)  
	int32_t                                            QuestPathIndex;                                             // 0x0030   (0x0004)  
	int32_t                                            QuestPathNodeIndex;                                         // 0x0034   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0038   (0x0008)  
};

/// Struct /Script/SB.SBGamePlayProgressRecordTableProperty
/// Size: 0x00F8 (248 bytes) (0x000010 - 0x0000F8) align n/a MaxSize: 0x00F8
struct FSBGamePlayProgressRecordTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              QuestTaskGroup;                                             // 0x0014   (0x0008)  
	TEnumAsByte<ESBQuestMissionType>                   QuestTaskType;                                              // 0x001C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              DataAlias;                                                  // 0x0020   (0x0008)  
	FName                                              EnvState;                                                   // 0x0028   (0x0008)  
	TEnumAsByte<ESBObjectState>                        Enable;                                                     // 0x0030   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              Zone;                                                       // 0x0034   (0x0008)  
	FName                                              InteractionKey;                                             // 0x003C   (0x0008)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	FString                                            InteractionValue;                                           // 0x0048   (0x0010)  
	TEnumAsByte<ESBGameProgressRecordFilter>           RecordFilterType;                                           // 0x0058   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	FName                                              DebugTargetCamp;                                            // 0x005C   (0x0008)  
	FName                                              DebugSpawnPoint;                                            // 0x0064   (0x0008)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	TArray<FName>                                      DebugCommands;                                              // 0x0070   (0x0010)  
	TArray<FName>                                      DebugCommands2;                                             // 0x0080   (0x0010)  
	TArray<FName>                                      DebugCommands3;                                             // 0x0090   (0x0010)  
	TArray<FName>                                      DebugCommands4;                                             // 0x00A0   (0x0010)  
	TArray<FName>                                      DebugCommandsForNewGamePlus;                                // 0x00B0   (0x0010)  
	TArray<FName>                                      DebugCommandsForNewGamePlus2;                               // 0x00C0   (0x0010)  
	TArray<FName>                                      DebugCommandsForNewGamePlus3;                               // 0x00D0   (0x0010)  
	TArray<FName>                                      DebugCommandsForNewGamePlus4;                               // 0x00E0   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x00F0   (0x0008)  
};

/// Struct /Script/SB.SBEditorTooltipTableProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBEditorTooltipTableProperty : FSBTablePropertyBase
{ 
	FName                                              Type;                                                       // 0x0010   (0x0008)  
	FName                                              Target;                                                     // 0x0018   (0x0008)  
	FName                                              FieldName;                                                  // 0x0020   (0x0008)  
	TArray<FName>                                      FieldNameArray;                                             // 0x0028   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0038   (0x0008)  
};

/// Struct /Script/SB.SBSoundEquipmentSetTableProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBSoundEquipmentSetTableProperty : FSBTablePropertyBase
{ 
	FName                                              EquipmentAlias;                                             // 0x0010   (0x0008)  
	FString                                            CharacterSoundSetOverride;                                  // 0x0018   (0x0010)  
	FString                                            CharacterFootstepSetOverride;                               // 0x0028   (0x0010)  
	FName                                              SoundEventAlias;                                            // 0x0038   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0040   (0x0008)  
};

/// Struct /Script/SB.SBSoundAttenuationEventTableProperty
/// Size: 0x0058 (88 bytes) (0x000010 - 0x000058) align n/a MaxSize: 0x0058
struct FSBSoundAttenuationEventTableProperty : FSBTablePropertyBase
{ 
	FString                                            Editor_Description;                                         // 0x0010   (0x0010)  
	FString                                            DialogAttenuationPath;                                      // 0x0020   (0x0010)  
	FString                                            ActionVoiceAttenuationPath;                                 // 0x0030   (0x0010)  
	FString                                            FootstepAttenuationPath;                                    // 0x0040   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0050   (0x0008)  
};

/// Struct /Script/SB.SBSoundEventLevelSequenceTableProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBSoundEventLevelSequenceTableProperty : FSBTablePropertyBase
{ 
	FName                                              LevelSequenceBeginSoundEvent;                               // 0x0010   (0x0008)  
	float                                              BeginSoundEventDelayTime;                                   // 0x0018   (0x0004)  
	FName                                              LevelSequenceFinishSoundEvent;                              // 0x001C   (0x0008)  
	float                                              FinishSoundEventDelayTime;                                  // 0x0024   (0x0004)  
	FString                                            SoundMixPath;                                               // 0x0028   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0038   (0x0008)  
};

/// Struct /Script/SB.SBSoundEventQuestTableProperty
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000028) align n/a MaxSize: 0x0028
struct FSBSoundEventQuestTableProperty : FSBTablePropertyBase
{ 
	FName                                              QuestAcquireSoundEvent;                                     // 0x0010   (0x0008)  
	FName                                              QuestCompleteSoundEvent;                                    // 0x0018   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0020   (0x0008)  
};

/// Struct /Script/SB.SBSoundEventTableProperty
/// Size: 0x00C0 (192 bytes) (0x000010 - 0x0000C0) align n/a MaxSize: 0x00C0
struct FSBSoundEventTableProperty : FSBTablePropertyBase
{ 
	FString                                            MainBGMPath;                                                // 0x0010   (0x0010)  
	FString                                            AmbientBGMPath;                                             // 0x0020   (0x0010)  
	ESBSoundBGMStateRule                               SoundStateRule;                                             // 0x0030   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              EventBattleState;                                           // 0x0034   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TMap<FName, int32_t>                               IntParams;                                                  // 0x0040   (0x0050)  
	FString                                            SoundBasePath;                                              // 0x0090   (0x0010)  
	FName                                              AttachActorTag;                                             // 0x00A0   (0x0008)  
	FName                                              AttachSocket;                                               // 0x00A8   (0x0008)  
	FName                                              AttenuationEventAlias;                                      // 0x00B0   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x00B8   (0x0008)  
};

/// Struct /Script/SB.SBItemSpawnTableProperty
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000028) align n/a MaxSize: 0x0028
struct FSBItemSpawnTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              ItemAlias;                                                  // 0x0014   (0x0008)  
	int32_t                                            ItemCount;                                                  // 0x001C   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0020   (0x0008)  
};

/// Struct /Script/SB.SBItemFishTableProperty
/// Size: 0x0100 (256 bytes) (0x000010 - 0x000100) align n/a MaxSize: 0x0100
struct FSBItemFishTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBFishRarityType>                     FishRarity;                                                 // 0x0014   (0x0001)  
	bool                                               bNikke;                                                     // 0x0015   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	uint32_t                                           Stamina;                                                    // 0x0018   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<uint32_t>                                   RunAwayStaminaRate;                                         // 0x0020   (0x0010)  
	uint32_t                                           RunAwayDistance;                                            // 0x0030   (0x0004)  
	uint32_t                                           PullSpeed;                                                  // 0x0034   (0x0004)  
	float                                              PullHitAreaSize;                                            // 0x0038   (0x0004)  
	uint32_t                                           FightingTime;                                               // 0x003C   (0x0004)  
	float                                              LiftUpBobberScale;                                          // 0x0040   (0x0004)  
	FVector                                            LiftUpCamStartLocation;                                     // 0x0044   (0x000C)  
	FVector                                            LiftUpCamFinalLocation;                                     // 0x0050   (0x000C)  
	FVector                                            FishFinalLocation;                                          // 0x005C   (0x000C)  
	FName                                              ConditionGroup;                                             // 0x0068   (0x0008)  
	FName                                              ConditionRewardGroup;                                       // 0x0070   (0x0008)  
	FName                                              RewardGroup;                                                // 0x0078   (0x0008)  
	FName                                              RewardItemAlias;                                            // 0x0080   (0x0008)  
	int32_t                                            RewardItemCount;                                            // 0x0088   (0x0004)  
	FName                                              MovePatternCurveDataPath1;                                  // 0x008C   (0x0008)  
	uint32_t                                           MovePatternWeight1;                                         // 0x0094   (0x0004)  
	FName                                              MovePatternCurveDataPath2;                                  // 0x0098   (0x0008)  
	uint32_t                                           MovePatternWeight2;                                         // 0x00A0   (0x0004)  
	FName                                              MovePatternCurveDataPath3;                                  // 0x00A4   (0x0008)  
	uint32_t                                           MovePatternWeight3;                                         // 0x00AC   (0x0004)  
	FName                                              MovePatternCurveDataPath4;                                  // 0x00B0   (0x0008)  
	uint32_t                                           MovePatternWeight4;                                         // 0x00B8   (0x0004)  
	FName                                              MovePatternCurveDataPath5;                                  // 0x00BC   (0x0008)  
	uint32_t                                           MovePatternWeight5;                                         // 0x00C4   (0x0004)  
	float                                              TimingPullArrowSpeed;                                       // 0x00C8   (0x0004)  
	uint32_t                                           TimingPullGaugeReductionPerHit;                             // 0x00CC   (0x0004)  
	uint32_t                                           TimingPullHitAreaStart1;                                    // 0x00D0   (0x0004)  
	uint32_t                                           TimingPullHitAreaSize1;                                     // 0x00D4   (0x0004)  
	uint32_t                                           TimingPullHitAreaStart2;                                    // 0x00D8   (0x0004)  
	uint32_t                                           TimingPullHitAreaSize2;                                     // 0x00DC   (0x0004)  
	uint32_t                                           TimingPullHitAreaStart3;                                    // 0x00E0   (0x0004)  
	uint32_t                                           TimingPullHitAreaSize3;                                     // 0x00E4   (0x0004)  
	uint32_t                                           TimingPullHitAreaStart4;                                    // 0x00E8   (0x0004)  
	uint32_t                                           TimingPullHitAreaSize4;                                     // 0x00EC   (0x0004)  
	uint32_t                                           TimingPullHitAreaStart5;                                    // 0x00F0   (0x0004)  
	uint32_t                                           TimingPullHitAreaSize5;                                     // 0x00F4   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x00F8   (0x0008)  
};

/// Struct /Script/SB.SBAlbumTableProperty
/// Size: 0x0090 (144 bytes) (0x000010 - 0x000090) align n/a MaxSize: 0x0090
struct FSBAlbumTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              EntityAlias;                                                // 0x0014   (0x0008)  
	TEnumAsByte<ESBAlbumType>                          AlbumType;                                                  // 0x001C   (0x0001)  
	bool                                               PopupWhenUnlock;                                            // 0x001D   (0x0001)  
	bool                                               PauseWhenPopup;                                             // 0x001E   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x001F   (0x0001)  MISSED
	FString                                            GroupName;                                                  // 0x0020   (0x0010)  
	FString                                            Name;                                                       // 0x0030   (0x0010)  
	FString                                            Desc;                                                       // 0x0040   (0x0010)  
	FString                                            Asset2DIcon;                                                // 0x0050   (0x0010)  
	FString                                            Asset2DImage;                                               // 0x0060   (0x0010)  
	FName                                              AchievementUnlocked;                                        // 0x0070   (0x0008)  
	FName                                              AchievementUsed;                                            // 0x0078   (0x0008)  
	FName                                              AchievementPopup;                                           // 0x0080   (0x0008)  
	FName                                              ConditionGroupDisplay;                                      // 0x0088   (0x0008)  
};

/// Struct /Script/SB.SBUIKeyImageAssetProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBUIKeyImageAssetProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Key;                                                        // 0x0014   (0x0008)  
	FName                                              Platform;                                                   // 0x001C   (0x0008)  
	FName                                              Tag;                                                        // 0x0024   (0x0008)  
	ESBKeyMappingAxisScaleType                         AxisScale;                                                  // 0x002C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x002D   (0x0003)  MISSED
	FString                                            AssetPath;                                                  // 0x0030   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0040   (0x0008)  
};

/// Struct /Script/SB.SBUITextInputDefineProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBUITextInputDefineProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Key;                                                        // 0x0014   (0x0008)  
	FName                                              Platform;                                                   // 0x001C   (0x0008)  
	ESBKeyMappingAxisScaleType                         AxisScale;                                                  // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	FString                                            text;                                                       // 0x0028   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0038   (0x0008)  
};

/// Struct /Script/SB.SBUITextActionFormatTableProperty
/// Size: 0x01F0 (496 bytes) (0x000010 - 0x0001F0) align n/a MaxSize: 0x01F0
struct FSBUITextActionFormatTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Group;                                                      // 0x0014   (0x0008)  
	ESBGameOptionType                                  GameOptionType;                                             // 0x001C   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              GameOptionRedirectValue1;                                   // 0x0020   (0x0008)  
	FName                                              GameOptionRedirectValue2;                                   // 0x0028   (0x0008)  
	FName                                              StreamInputRedirectValue;                                   // 0x0030   (0x0008)  
	FName                                              Platform;                                                   // 0x0038   (0x0008)  
	FName                                              FallBackGroupAlias;                                         // 0x0040   (0x0008)  
	FString                                            StringTableNamespace;                                       // 0x0048   (0x0010)  
	FString                                            StringTableKey;                                             // 0x0058   (0x0010)  
	FString                                            StringFormat;                                               // 0x0068   (0x0010)  
	FString                                            Action1;                                                    // 0x0078   (0x0010)  
	int32_t                                            SortAction1;                                                // 0x0088   (0x0004)  
	unsigned char                                      UnknownData18_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	FString                                            Action2;                                                    // 0x0090   (0x0010)  
	int32_t                                            SortAction2;                                                // 0x00A0   (0x0004)  
	unsigned char                                      UnknownData19_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	FString                                            Action3;                                                    // 0x00A8   (0x0010)  
	int32_t                                            SortAction3;                                                // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData20_6[0x4];                                       // 0x00BC   (0x0004)  MISSED
	FString                                            Action4;                                                    // 0x00C0   (0x0010)  
	int32_t                                            SortAction4;                                                // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData21_6[0x4];                                       // 0x00D4   (0x0004)  MISSED
	FString                                            Action5;                                                    // 0x00D8   (0x0010)  
	int32_t                                            SortAction5;                                                // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData22_6[0x4];                                       // 0x00EC   (0x0004)  MISSED
	FString                                            InputDefine1;                                               // 0x00F0   (0x0010)  
	int32_t                                            SortInputDefine1;                                           // 0x0100   (0x0004)  
	unsigned char                                      UnknownData23_6[0x4];                                       // 0x0104   (0x0004)  MISSED
	FString                                            InputDefine2;                                               // 0x0108   (0x0010)  
	int32_t                                            SortInputDefine2;                                           // 0x0118   (0x0004)  
	unsigned char                                      UnknownData24_6[0x4];                                       // 0x011C   (0x0004)  MISSED
	FString                                            InputDefine3;                                               // 0x0120   (0x0010)  
	int32_t                                            SortInputDefine3;                                           // 0x0130   (0x0004)  
	unsigned char                                      UnknownData25_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	FString                                            InputDefine4;                                               // 0x0138   (0x0010)  
	int32_t                                            SortInputDefine4;                                           // 0x0148   (0x0004)  
	unsigned char                                      UnknownData26_6[0x4];                                       // 0x014C   (0x0004)  MISSED
	FString                                            InputDefine5;                                               // 0x0150   (0x0010)  
	int32_t                                            SortInputDefine5;                                           // 0x0160   (0x0004)  
	unsigned char                                      UnknownData27_6[0x4];                                       // 0x0164   (0x0004)  MISSED
	FString                                            Axis1;                                                      // 0x0168   (0x0010)  
	ESBKeyMappingAxisScaleType                         AxisScale1;                                                 // 0x0178   (0x0001)  
	unsigned char                                      UnknownData28_6[0x3];                                       // 0x0179   (0x0003)  MISSED
	int32_t                                            SortAxis1;                                                  // 0x017C   (0x0004)  
	FString                                            Axis2;                                                      // 0x0180   (0x0010)  
	ESBKeyMappingAxisScaleType                         AxisScale2;                                                 // 0x0190   (0x0001)  
	unsigned char                                      UnknownData29_6[0x3];                                       // 0x0191   (0x0003)  MISSED
	int32_t                                            SortAxis2;                                                  // 0x0194   (0x0004)  
	FString                                            Axis3;                                                      // 0x0198   (0x0010)  
	ESBKeyMappingAxisScaleType                         AxisScale3;                                                 // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData30_6[0x3];                                       // 0x01A9   (0x0003)  MISSED
	int32_t                                            SortAxis3;                                                  // 0x01AC   (0x0004)  
	FString                                            Axis4;                                                      // 0x01B0   (0x0010)  
	ESBKeyMappingAxisScaleType                         AxisScale4;                                                 // 0x01C0   (0x0001)  
	unsigned char                                      UnknownData31_6[0x3];                                       // 0x01C1   (0x0003)  MISSED
	int32_t                                            SortAxis4;                                                  // 0x01C4   (0x0004)  
	FString                                            Axis5;                                                      // 0x01C8   (0x0010)  
	ESBKeyMappingAxisScaleType                         AxisScale5;                                                 // 0x01D8   (0x0001)  
	unsigned char                                      UnknownData32_6[0x3];                                       // 0x01D9   (0x0003)  MISSED
	int32_t                                            SortAxis5;                                                  // 0x01DC   (0x0004)  
	ESBGameOptionSwipeShortCutType                     SwipeOption;                                                // 0x01E0   (0x0001)  
	unsigned char                                      UnknownData33_6[0x3];                                       // 0x01E1   (0x0003)  MISSED
	int32_t                                            SortSwipeOption;                                            // 0x01E4   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x01E8   (0x0008)  
};

/// Struct /Script/SB.SBUIActionRequestTableProperty
/// Size: 0x0088 (136 bytes) (0x000010 - 0x000088) align n/a MaxSize: 0x0088
struct FSBUIActionRequestTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Group;                                                      // 0x0014   (0x0008)  
	int32_t                                            Priority;                                                   // 0x001C   (0x0004)  
	bool                                               BlockAction;                                                // 0x0020   (0x0001)  
	bool                                               IgnoreLoadingScreen;                                        // 0x0021   (0x0001)  
	bool                                               AffectedByVisibleOption;                                    // 0x0022   (0x0001)  
	bool                                               DebugClearAllow;                                            // 0x0023   (0x0001)  
	bool                                               SkipInNewGamePlus;                                          // 0x0024   (0x0001)  
	bool                                               ConditionFailPass;                                          // 0x0025   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0026   (0x0002)  MISSED
	FName                                              StartConditionGroup;                                        // 0x0028   (0x0008)  
	FName                                              AchievementAction;                                          // 0x0030   (0x0008)  
	TEnumAsByte<ESBUIActionExecuteType>                ExecuteType;                                                // 0x0038   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              Time;                                                       // 0x003C   (0x0004)  
	float                                              Delay;                                                      // 0x0040   (0x0004)  
	TEnumAsByte<ESBUIActionFinishType>                 FinishType;                                                 // 0x0044   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	FString                                            Arg1;                                                       // 0x0048   (0x0010)  
	FString                                            Arg2;                                                       // 0x0058   (0x0010)  
	FString                                            Arg3;                                                       // 0x0068   (0x0010)  
	FName                                              AffectedByVisibleFailReplaceGroup;                          // 0x0078   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0080   (0x0008)  
};

/// Struct /Script/SB.SBMultiPlayRuleTableProperty
/// Size: 0x00F8 (248 bytes) (0x000010 - 0x0000F8) align n/a MaxSize: 0x00F8
struct FSBMultiPlayRuleTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBGameRuleType>                       GameRuleType;                                               // 0x0014   (0x0001)  
	bool                                               bRandom;                                                    // 0x0015   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FName                                              TargetQuest;                                                // 0x0018   (0x0008)  
	FString                                            Name;                                                       // 0x0020   (0x0010)  
	FString                                            DescContent;                                                // 0x0030   (0x0010)  
	FString                                            DescFunction;                                               // 0x0040   (0x0010)  
	FString                                            ImageAsset2D;                                               // 0x0050   (0x0010)  
	FName                                              UnlockAchievement;                                          // 0x0060   (0x0008)  
	FName                                              Level;                                                      // 0x0068   (0x0008)  
	FName                                              RewardItemAlias;                                            // 0x0070   (0x0008)  
	int32_t                                            RewardItemCount;                                            // 0x0078   (0x0004)  
	int32_t                                            RewardBonusRate;                                            // 0x007C   (0x0004)  
	int32_t                                            WaitTimeBeforeStarting;                                     // 0x0080   (0x0004)  
	int32_t                                            Duration;                                                   // 0x0084   (0x0004)  
	int32_t                                            WaitTimeBeforeReturn;                                       // 0x0088   (0x0004)  
	int32_t                                            RespawnTime;                                                // 0x008C   (0x0004)  
	int32_t                                            LifeCount;                                                  // 0x0090   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	TArray<FName>                                      StartEffectAlias;                                           // 0x0098   (0x0010)  
	TArray<FName>                                      ComaEffectAlias;                                            // 0x00A8   (0x0010)  
	TArray<FName>                                      InteractionEffectAlias;                                     // 0x00B8   (0x0010)  
	float                                              ZoneEventFirstTimer1;                                       // 0x00C8   (0x0004)  
	float                                              ZoneEventIntervalTimer1;                                    // 0x00CC   (0x0004)  
	FName                                              ZoneEventAlias1;                                            // 0x00D0   (0x0008)  
	float                                              ZoneEventFirstTimer2;                                       // 0x00D8   (0x0004)  
	float                                              ZoneEventIntervalTimer2;                                    // 0x00DC   (0x0004)  
	FName                                              ZoneEventAlias2;                                            // 0x00E0   (0x0008)  
	float                                              ZoneEventFirstTimer3;                                       // 0x00E8   (0x0004)  
	float                                              ZoneEventIntervalTimer3;                                    // 0x00EC   (0x0004)  
	FName                                              ZoneEventAlias3;                                            // 0x00F0   (0x0008)  
};

/// Struct /Script/SB.SBMultiMapTableProperty
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000020) align n/a MaxSize: 0x0020
struct FSBMultiMapTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              MapName;                                                    // 0x0014   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBTransformCharacterTableProperty
/// Size: 0x0098 (152 bytes) (0x000010 - 0x000098) align n/a MaxSize: 0x0098
struct FSBTransformCharacterTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	uint32_t                                           Score;                                                      // 0x0014   (0x0004)  
	FName                                              CharacterAlias1;                                            // 0x0018   (0x0008)  
	uint32_t                                           Weight1;                                                    // 0x0020   (0x0004)  
	FName                                              CharacterAlias2;                                            // 0x0024   (0x0008)  
	uint32_t                                           Weight2;                                                    // 0x002C   (0x0004)  
	FName                                              CharacterAlias3;                                            // 0x0030   (0x0008)  
	uint32_t                                           Weight3;                                                    // 0x0038   (0x0004)  
	FName                                              CharacterAlias4;                                            // 0x003C   (0x0008)  
	uint32_t                                           Weight4;                                                    // 0x0044   (0x0004)  
	FName                                              CharacterAlias5;                                            // 0x0048   (0x0008)  
	uint32_t                                           Weight5;                                                    // 0x0050   (0x0004)  
	FName                                              CharacterAlias6;                                            // 0x0054   (0x0008)  
	uint32_t                                           Weight6;                                                    // 0x005C   (0x0004)  
	FName                                              CharacterAlias7;                                            // 0x0060   (0x0008)  
	uint32_t                                           Weight7;                                                    // 0x0068   (0x0004)  
	FName                                              CharacterAlias8;                                            // 0x006C   (0x0008)  
	uint32_t                                           Weight8;                                                    // 0x0074   (0x0004)  
	FName                                              CharacterAlias9;                                            // 0x0078   (0x0008)  
	uint32_t                                           Weight9;                                                    // 0x0080   (0x0004)  
	FName                                              CharacterAlias10;                                           // 0x0084   (0x0008)  
	uint32_t                                           Weight10;                                                   // 0x008C   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0090   (0x0008)  
};

/// Struct /Script/SB.SBEventZoneWarpTableProperty
/// Size: 0x0070 (112 bytes) (0x000010 - 0x000070) align n/a MaxSize: 0x0070
struct FSBEventZoneWarpTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              EventConditionGroup;                                        // 0x0014   (0x0008)  
	FName                                              EventCondition;                                             // 0x001C   (0x0008)  
	FName                                              TargetWorld;                                                // 0x0024   (0x0008)  
	FName                                              TargetZoneCamp;                                             // 0x002C   (0x0008)  
	FName                                              TargetSpawnPoint;                                           // 0x0034   (0x0008)  
	FVector                                            TargetLocation;                                             // 0x003C   (0x000C)  
	FRotator                                           TargetRotation;                                             // 0x0048   (0x000C)  
	bool                                               bUseRecoveryItems;                                          // 0x0054   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              WarpDelayTime;                                              // 0x0058   (0x0004)  
	float                                              FadeOutTime;                                                // 0x005C   (0x0004)  
	bool                                               bUseCampCustomTargetPoint;                                  // 0x0060   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x0064   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneCampTableProperty
/// Size: 0x00A8 (168 bytes) (0x000010 - 0x0000A8) align n/a MaxSize: 0x00A8
struct FSBZoneCampTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            CampName;                                                   // 0x0018   (0x0010)  
	TEnumAsByte<ESBZoneCampType>                       CampType;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	FName                                              Region;                                                     // 0x002C   (0x0008)  
	FName                                              RegionName;                                                 // 0x0034   (0x0008)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FString                                            CampImage;                                                  // 0x0040   (0x0010)  
	FString                                            InGameUICampImage;                                          // 0x0050   (0x0010)  
	FName                                              CoinSpawnPointName;                                         // 0x0060   (0x0008)  
	float                                              OverrideCampDetectDistance_Max;                             // 0x0068   (0x0004)  
	TEnumAsByte<ESBUICampWorldMapDisplayType>          CampDisplayType;                                            // 0x006C   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	FName                                              LinkCampAlias;                                              // 0x0070   (0x0008)  
	FName                                              CampDisplayLinkAlias;                                       // 0x0078   (0x0008)  
	FName                                              ActiveTag;                                                  // 0x0080   (0x0008)  
	FName                                              EnableMapMakerCondition;                                    // 0x0088   (0x0008)  
	float                                              WorldMapOverlapDistance;                                    // 0x0090   (0x0004)  
	FName                                              ForceCampTrophyAchievementForEnvState;                      // 0x0094   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x009C   (0x0008)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Struct /Script/SB.SBShopItemTableProperty
/// Size: 0x00A0 (160 bytes) (0x000010 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FSBShopItemTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBShopType>                           ShopType;                                                   // 0x0014   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              ItemAlias;                                                  // 0x0018   (0x0008)  
	FName                                              NanosuitAliasForRecipe;                                     // 0x0020   (0x0008)  
	int32_t                                            LimitedCount;                                               // 0x0028   (0x0004)  
	FName                                              MoneyItemAlias1;                                            // 0x002C   (0x0008)  
	int32_t                                            MoneyItemCount1;                                            // 0x0034   (0x0004)  
	int32_t                                            Discount_MoneyItemCount1;                                   // 0x0038   (0x0004)  
	FName                                              MoneyItemAlias2;                                            // 0x003C   (0x0008)  
	int32_t                                            MoneyItemCount2;                                            // 0x0044   (0x0004)  
	int32_t                                            Discount_MoneyItemCount2;                                   // 0x0048   (0x0004)  
	FName                                              MoneyItemAlias3;                                            // 0x004C   (0x0008)  
	int32_t                                            MoneyItemCount3;                                            // 0x0054   (0x0004)  
	int32_t                                            Discount_MoneyItemCount3;                                   // 0x0058   (0x0004)  
	FName                                              MoneyItemAlias4;                                            // 0x005C   (0x0008)  
	int32_t                                            MoneyItemCount4;                                            // 0x0064   (0x0004)  
	int32_t                                            Discount_MoneyItemCount4;                                   // 0x0068   (0x0004)  
	FName                                              CheckAchievement;                                           // 0x006C   (0x0008)  
	FName                                              CheckCondition;                                             // 0x0074   (0x0008)  
	FName                                              CheckConditionGroup;                                        // 0x007C   (0x0008)  
	FName                                              LinkedShopItemAlias;                                        // 0x0084   (0x0008)  
	bool                                               ForceDirtyRedDot;                                           // 0x008C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	float                                              FriendShip;                                                 // 0x0090   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0094   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x009C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBShopTableProperty
/// Size: 0x00A8 (168 bytes) (0x000010 - 0x0000A8) align n/a MaxSize: 0x00A8
struct FSBShopTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	bool                                               UnionLimitedItem;                                           // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              ConditionGroup_ApplyDiscount;                               // 0x0018   (0x0008)  
	FName                                              CurrencyItemAlias;                                          // 0x0020   (0x0008)  
	TArray<FName>                                      Tags;                                                       // 0x0028   (0x0010)  
	TArray<FName>                                      ShopItems;                                                  // 0x0038   (0x0010)  
	TArray<float>                                      RequiredFriendShipLevelUp;                                  // 0x0048   (0x0010)  
	TArray<FString>                                    FriendShipLevelUpSound;                                     // 0x0058   (0x0010)  
	TArray<TEnumAsByte<ESBSequencerSubtitleType>>      FriendShipLevelUpSubtitleType;                              // 0x0068   (0x0010)  
	TArray<float>                                      FriendShipLevelUpSubtitleDuration;                          // 0x0078   (0x0010)  
	TArray<FString>                                    FriendShipLevelUpSubtitleTitle;                             // 0x0088   (0x0010)  
	TArray<FString>                                    FriendShipLevelUpSubtitleMessage;                           // 0x0098   (0x0010)  
};

/// Struct /Script/SB.SBJsonShopItem_Money
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBJsonShopItem_Money
{ 
	FName                                              Alias;                                                      // 0x0000   (0x0008)  
	int32_t                                            Count;                                                      // 0x0008   (0x0004)  
};

/// Struct /Script/SB.SBSPLevelTableProperty
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSPLevelTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	int32_t                                            RequiredSPExp;                                              // 0x0014   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0018   (0x0008)  
};

/// Struct /Script/SB.SBSpawnGroupRuleTableProperty
/// Size: 0x0060 (96 bytes) (0x000010 - 0x000060) align n/a MaxSize: 0x0060
struct FSBSpawnGroupRuleTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            Desc;                                                       // 0x0018   (0x0010)  
	FName                                              ZoneAlias;                                                  // 0x0028   (0x0008)  
	FName                                              SpawnGroupRuleAlias;                                        // 0x0030   (0x0008)  
	FName                                              SubGroup;                                                   // 0x0038   (0x0008)  
	uint32_t                                           SubGroupSelectItemCnt;                                      // 0x0040   (0x0004)  
	FName                                              DuplicationPreventKey;                                      // 0x0044   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	TArray<FName>                                      EventSpawnArray;                                            // 0x0050   (0x0010)  
};

/// Struct /Script/SB.SBEventInteractCampTableProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBEventInteractCampTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              CampEnvSpawnAlias;                                          // 0x0014   (0x0008)  
	TEnumAsByte<ESBInteractCampType>                   InteractType;                                               // 0x001C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              EventCondition;                                             // 0x0020   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0028   (0x0008)  
	bool                                               bShowResetZoneUI;                                           // 0x0030   (0x0001)  
	TEnumAsByte<ESBZoneEventInteractSaveType>          DoingSaveType;                                              // 0x0031   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0032   (0x0002)  MISSED
	FName                                              SoundEventAlias;                                            // 0x0034   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x003C   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCharacterDeadTableProperty
/// Size: 0x02D0 (720 bytes) (0x000010 - 0x0002D0) align n/a MaxSize: 0x02D0
struct FSBCharacterDeadTableProperty : FSBTablePropertyBase
{ 
	TArray<FString>                                    DefaultDeadShowArray;                                       // 0x0010   (0x0010)  
	int32_t                                            DefaultDeadRewardDelayTime;                                 // 0x0020   (0x0004)  
	bool                                               DefaultDeadSkipDespawnShow;                                 // 0x0024   (0x0001)  
	unsigned char                                      UnknownData42_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	float                                              DefaultDeadUIDelayTime;                                     // 0x0028   (0x0004)  
	FName                                              MoveAliasWhenDead;                                          // 0x002C   (0x0008)  
	unsigned char                                      UnknownData43_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	FString                                            StandDeadShow;                                              // 0x0038   (0x0010)  
	int32_t                                            StandDeadRewardDelayTime;                                   // 0x0048   (0x0004)  
	bool                                               StandDeadSkipDespawnShow;                                   // 0x004C   (0x0001)  
	unsigned char                                      UnknownData44_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              StandDeadUIDelayTime;                                       // 0x0050   (0x0004)  
	unsigned char                                      UnknownData45_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            Step0DeadShow;                                              // 0x0058   (0x0010)  
	int32_t                                            Step0DeadRewardDelayTime;                                   // 0x0068   (0x0004)  
	bool                                               Step0DeadSkipDespawnShow;                                   // 0x006C   (0x0001)  
	unsigned char                                      UnknownData46_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	float                                              Step0DeadUIDelayTime;                                       // 0x0070   (0x0004)  
	unsigned char                                      UnknownData47_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	FString                                            Step1DeadShow;                                              // 0x0078   (0x0010)  
	int32_t                                            Step1DeadRewardDelayTime;                                   // 0x0088   (0x0004)  
	bool                                               Step1DeadSkipDespawnShow;                                   // 0x008C   (0x0001)  
	unsigned char                                      UnknownData48_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	float                                              Step1DeadUIDelayTime;                                       // 0x0090   (0x0004)  
	unsigned char                                      UnknownData49_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	FString                                            Step2DeadShow;                                              // 0x0098   (0x0010)  
	int32_t                                            Step2DeadRewardDelayTime;                                   // 0x00A8   (0x0004)  
	bool                                               Step2DeadSkipDespawnShow;                                   // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData50_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	float                                              Step2DeadUIDelayTime;                                       // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData51_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	FString                                            Step3DeadShow;                                              // 0x00B8   (0x0010)  
	int32_t                                            Step3DeadRewardDelayTime;                                   // 0x00C8   (0x0004)  
	bool                                               Step3DeadSkipDespawnShow;                                   // 0x00CC   (0x0001)  
	unsigned char                                      UnknownData52_6[0x3];                                       // 0x00CD   (0x0003)  MISSED
	float                                              Step3DeadUIDelayTime;                                       // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData53_6[0x4];                                       // 0x00D4   (0x0004)  MISSED
	FString                                            Explosion1DeadShow;                                         // 0x00D8   (0x0010)  
	int32_t                                            Explosion1DeadRewardDelayTime;                              // 0x00E8   (0x0004)  
	bool                                               Explosion1DeadSkipDespawnShow;                              // 0x00EC   (0x0001)  
	unsigned char                                      UnknownData54_6[0x3];                                       // 0x00ED   (0x0003)  MISSED
	float                                              Explosion1DeadUIDelayTime;                                  // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData55_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	FString                                            Explosion2DeadShow;                                         // 0x00F8   (0x0010)  
	int32_t                                            Explosion2DeadRewardDelayTime;                              // 0x0108   (0x0004)  
	bool                                               Explosion2DeadSkipDespawnShow;                              // 0x010C   (0x0001)  
	unsigned char                                      UnknownData56_6[0x3];                                       // 0x010D   (0x0003)  MISSED
	float                                              Explosion2DeadUIDelayTime;                                  // 0x0110   (0x0004)  
	unsigned char                                      UnknownData57_6[0x4];                                       // 0x0114   (0x0004)  MISSED
	FString                                            Custom1DeadShow;                                            // 0x0118   (0x0010)  
	int32_t                                            Custom1DeadRewardDelayTime;                                 // 0x0128   (0x0004)  
	bool                                               Custom1DeadSkipDespawnShow;                                 // 0x012C   (0x0001)  
	unsigned char                                      UnknownData58_6[0x3];                                       // 0x012D   (0x0003)  MISSED
	float                                              Custom1DeadUIDelayTime;                                     // 0x0130   (0x0004)  
	unsigned char                                      UnknownData59_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	FString                                            Custom2DeadShow;                                            // 0x0138   (0x0010)  
	int32_t                                            Custom2DeadRewardDelayTime;                                 // 0x0148   (0x0004)  
	bool                                               Custom2DeadSkipDespawnShow;                                 // 0x014C   (0x0001)  
	unsigned char                                      UnknownData60_6[0x3];                                       // 0x014D   (0x0003)  MISSED
	float                                              Custom2DeadUIDelayTime;                                     // 0x0150   (0x0004)  
	unsigned char                                      UnknownData61_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	FString                                            Custom3DeadShow;                                            // 0x0158   (0x0010)  
	int32_t                                            Custom3DeadRewardDelayTime;                                 // 0x0168   (0x0004)  
	bool                                               Custom3DeadSkipDespawnShow;                                 // 0x016C   (0x0001)  
	unsigned char                                      UnknownData62_6[0x3];                                       // 0x016D   (0x0003)  MISSED
	float                                              Custom3DeadUIDelayTime;                                     // 0x0170   (0x0004)  
	unsigned char                                      UnknownData63_6[0x4];                                       // 0x0174   (0x0004)  MISSED
	FString                                            Custom4DeadShow;                                            // 0x0178   (0x0010)  
	int32_t                                            Custom4DeadRewardDelayTime;                                 // 0x0188   (0x0004)  
	bool                                               Custom4DeadSkipDespawnShow;                                 // 0x018C   (0x0001)  
	unsigned char                                      UnknownData64_6[0x3];                                       // 0x018D   (0x0003)  MISSED
	float                                              Custom4DeadUIDelayTime;                                     // 0x0190   (0x0004)  
	unsigned char                                      UnknownData65_6[0x4];                                       // 0x0194   (0x0004)  MISSED
	FString                                            Custom5DeadShow;                                            // 0x0198   (0x0010)  
	int32_t                                            Custom5DeadRewardDelayTime;                                 // 0x01A8   (0x0004)  
	bool                                               Custom5DeadSkipDespawnShow;                                 // 0x01AC   (0x0001)  
	unsigned char                                      UnknownData66_6[0x3];                                       // 0x01AD   (0x0003)  MISSED
	float                                              Custom5DeadUIDelayTime;                                     // 0x01B0   (0x0004)  
	unsigned char                                      UnknownData67_6[0x4];                                       // 0x01B4   (0x0004)  MISSED
	FString                                            Custom6DeadShow;                                            // 0x01B8   (0x0010)  
	int32_t                                            Custom6DeadRewardDelayTime;                                 // 0x01C8   (0x0004)  
	bool                                               Custom6DeadSkipDespawnShow;                                 // 0x01CC   (0x0001)  
	unsigned char                                      UnknownData68_6[0x3];                                       // 0x01CD   (0x0003)  MISSED
	float                                              Custom6DeadUIDelayTime;                                     // 0x01D0   (0x0004)  
	unsigned char                                      UnknownData69_6[0x4];                                       // 0x01D4   (0x0004)  MISSED
	FString                                            Custom7DeadShow;                                            // 0x01D8   (0x0010)  
	int32_t                                            Custom7DeadRewardDelayTime;                                 // 0x01E8   (0x0004)  
	bool                                               Custom7DeadSkipDespawnShow;                                 // 0x01EC   (0x0001)  
	unsigned char                                      UnknownData70_6[0x3];                                       // 0x01ED   (0x0003)  MISSED
	float                                              Custom7DeadUIDelayTime;                                     // 0x01F0   (0x0004)  
	unsigned char                                      UnknownData71_6[0x4];                                       // 0x01F4   (0x0004)  MISSED
	FString                                            Custom8DeadShow;                                            // 0x01F8   (0x0010)  
	int32_t                                            Custom8DeadRewardDelayTime;                                 // 0x0208   (0x0004)  
	bool                                               Custom8DeadSkipDespawnShow;                                 // 0x020C   (0x0001)  
	unsigned char                                      UnknownData72_6[0x3];                                       // 0x020D   (0x0003)  MISSED
	float                                              Custom8DeadUIDelayTime;                                     // 0x0210   (0x0004)  
	unsigned char                                      UnknownData73_6[0x4];                                       // 0x0214   (0x0004)  MISSED
	FString                                            Custom9DeadShow;                                            // 0x0218   (0x0010)  
	int32_t                                            Custom9DeadRewardDelayTime;                                 // 0x0228   (0x0004)  
	bool                                               Custom9DeadSkipDespawnShow;                                 // 0x022C   (0x0001)  
	unsigned char                                      UnknownData74_6[0x3];                                       // 0x022D   (0x0003)  MISSED
	float                                              Custom9DeadUIDelayTime;                                     // 0x0230   (0x0004)  
	unsigned char                                      UnknownData75_6[0x4];                                       // 0x0234   (0x0004)  MISSED
	FString                                            Custom10DeadShow;                                           // 0x0238   (0x0010)  
	int32_t                                            Custom10DeadRewardDelayTime;                                // 0x0248   (0x0004)  
	bool                                               Custom10DeadSkipDespawnShow;                                // 0x024C   (0x0001)  
	unsigned char                                      UnknownData76_6[0x3];                                       // 0x024D   (0x0003)  MISSED
	float                                              Custom10DeadUIDelayTime;                                    // 0x0250   (0x0004)  
	unsigned char                                      UnknownData77_6[0x4];                                       // 0x0254   (0x0004)  MISSED
	FString                                            DownDeadShow;                                               // 0x0258   (0x0010)  
	int32_t                                            DownDeadRewardDelayTime;                                    // 0x0268   (0x0004)  
	bool                                               DownDeadSkipDespawnShow;                                    // 0x026C   (0x0001)  
	unsigned char                                      UnknownData78_6[0x3];                                       // 0x026D   (0x0003)  MISSED
	float                                              DownDeadUIDelayTime;                                        // 0x0270   (0x0004)  
	unsigned char                                      UnknownData79_6[0x4];                                       // 0x0274   (0x0004)  MISSED
	FString                                            AirborneDeadShow;                                           // 0x0278   (0x0010)  
	int32_t                                            AirborneDeadRewardDelayTime;                                // 0x0288   (0x0004)  
	bool                                               AirborneDeadSkipDespawnShow;                                // 0x028C   (0x0001)  
	unsigned char                                      UnknownData80_6[0x3];                                       // 0x028D   (0x0003)  MISSED
	float                                              AirborneDeadUIDelayTime;                                    // 0x0290   (0x0004)  
	unsigned char                                      UnknownData81_6[0x4];                                       // 0x0294   (0x0004)  MISSED
	FString                                            SwimmingDeadShow;                                           // 0x0298   (0x0010)  
	int32_t                                            SwimmingDeadRewardDelayTime;                                // 0x02A8   (0x0004)  
	bool                                               SwimmingDeadSkipDespawnShow;                                // 0x02AC   (0x0001)  
	unsigned char                                      UnknownData82_6[0x3];                                       // 0x02AD   (0x0003)  MISSED
	float                                              SwimmingDeadUIDelayTime;                                    // 0x02B0   (0x0004)  
	unsigned char                                      UnknownData83_6[0x4];                                       // 0x02B4   (0x0004)  MISSED
	FString                                            AdditiveDeadShow;                                           // 0x02B8   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x02C8   (0x0008)  
};

/// Struct /Script/SB.SBCharacterDetectAITableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBCharacterDetectAITableProperty : FSBTablePropertyBase
{ 
	float                                              AISightSenseHorizontalAngle;                                // 0x0010   (0x0004)  
	float                                              AISightSenseVerticalAngle;                                  // 0x0014   (0x0004)  
	float                                              AISightSenseNearDistance;                                   // 0x0018   (0x0004)  
	float                                              AISightSenseVerticalDistance;                               // 0x001C   (0x0004)  
	bool                                               AISightSenseIgnoreBlocking;                                 // 0x0020   (0x0001)  
	bool                                               AISightSenseIgnoreBlockingWhenDetectTarget;                 // 0x0021   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0022   (0x0002)  MISSED
	float                                              AIDetectCheckDistance;                                      // 0x0024   (0x0004)  
	float                                              AIObserveCheckDistance;                                     // 0x0028   (0x0004)  
	float                                              AIPursuitDistance;                                          // 0x002C   (0x0004)  
	float                                              AIPursuitFixedDistance;                                     // 0x0030   (0x0004)  
	float                                              AIPursuitVerticaDistance;                                   // 0x0034   (0x0004)  
	float                                              AIIncreaseAggroGaguePerSecond;                              // 0x0038   (0x0004)  
	float                                              AIIncreaseDoubtAggroGaguePerSecond;                         // 0x003C   (0x0004)  
	float                                              AIDecreaseLevel0AggroGaguePerSecond;                        // 0x0040   (0x0004)  
	float                                              AIDecreaseLevel1AggroGaguePerSecond;                        // 0x0044   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0048   (0x0008)  
};

/// Struct /Script/SB.SBItemSkillEquipableTableProperty
/// Size: 0x0080 (128 bytes) (0x000010 - 0x000080) align n/a MaxSize: 0x0080
struct FSBItemSkillEquipableTableProperty : FSBTablePropertyBase
{ 
	FName                                              ItemSkillEquipableAlias;                                    // 0x0010   (0x0008)  
	int32_t                                            Level;                                                      // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FName>                                      AcquisitionSkillAliasArray;                                 // 0x0020   (0x0010)  
	FName                                              SkillCommandAlias;                                          // 0x0030   (0x0008)  
	TArray<FName>                                      EquipEffectAliasArray;                                      // 0x0038   (0x0010)  
	TArray<FName>                                      UnequipEffectAliasArray;                                    // 0x0048   (0x0010)  
	TArray<FName>                                      RequiredItemAliasArray;                                     // 0x0058   (0x0010)  
	TArray<int32_t>                                    RequiredItemAmountArray;                                    // 0x0068   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0078   (0x0008)  
};

/// Struct /Script/SB.SBCheatCommandTableProperty
/// Size: 0x0090 (144 bytes) (0x000010 - 0x000090) align n/a MaxSize: 0x0090
struct FSBCheatCommandTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBConditionCheckType>                 Distribution;                                               // 0x0014   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              Tab;                                                        // 0x0018   (0x0008)  
	FName                                              TabName;                                                    // 0x0020   (0x0008)  
	FName                                              Category;                                                   // 0x0028   (0x0008)  
	FName                                              CategoryName;                                               // 0x0030   (0x0008)  
	FString                                            CategoryStringKey;                                          // 0x0038   (0x0010)  
	FString                                            Desc;                                                       // 0x0048   (0x0010)  
	FString                                            DescStringKey;                                              // 0x0058   (0x0010)  
	FName                                              Group;                                                      // 0x0068   (0x0008)  
	FString                                            Command;                                                    // 0x0070   (0x0010)  
	bool                                               IgnoreNotify;                                               // 0x0080   (0x0001)  
	bool                                               bNoGuaranteeProgressExec;                                   // 0x0081   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0082   (0x0002)  MISSED
	FName                                              FileSuffix;                                                 // 0x0084   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBTrophyTableProperty
/// Size: 0x0098 (152 bytes) (0x000010 - 0x000098) align n/a MaxSize: 0x0098
struct FSBTrophyTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              TrophyGroup;                                                // 0x0014   (0x0008)  
	FName                                              Name;                                                       // 0x001C   (0x0008)  
	bool                                               Hidden;                                                     // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	FName                                              grade;                                                      // 0x0028   (0x0008)  
	FName                                              ProgressAchievement;                                        // 0x0030   (0x0008)  
	uint32_t                                           CompleteValue;                                              // 0x0038   (0x0004)  
	uint32_t                                           EpicAchievementsXP;                                         // 0x003C   (0x0004)  
	FName                                              DisplayName_StringKey;                                      // 0x0040   (0x0008)  
	FName                                              DisplayDescription_StringKey;                               // 0x0048   (0x0008)  
	FString                                            DisplayName_en_us;                                          // 0x0050   (0x0010)  
	FString                                            DisplayDescription_en_us;                                   // 0x0060   (0x0010)  
	FString                                            DisplayName_ko_kr;                                          // 0x0070   (0x0010)  
	FString                                            DisplayDescription_ko_kr;                                   // 0x0080   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0090   (0x0008)  
};

/// Struct /Script/SB.SBActivityTableProperty
/// Size: 0x0088 (136 bytes) (0x000010 - 0x000088) align n/a MaxSize: 0x0088
struct FSBActivityTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Name;                                                       // 0x0014   (0x0008)  
	FName                                              Type;                                                       // 0x001C   (0x0008)  
	bool                                               IsRequiredForCompletion;                                    // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	FName                                              StartActivityAchievement;                                   // 0x0028   (0x0008)  
	FName                                              EndActivityAchievement;                                     // 0x0030   (0x0008)  
	TArray<FName>                                      LinkActivities;                                             // 0x0038   (0x0010)  
	FName                                              SubCategory;                                                // 0x0048   (0x0008)  
	FName                                              DisplayName_StringKey;                                      // 0x0050   (0x0008)  
	FName                                              DisplayDescription_StringKey;                               // 0x0058   (0x0008)  
	FName                                              DisplayName_en_us;                                          // 0x0060   (0x0008)  
	FName                                              DisplayDescription_en_us;                                   // 0x0068   (0x0008)  
	FName                                              DisplayName_ko_kr;                                          // 0x0070   (0x0008)  
	FName                                              DisplayDescription_ko_kr;                                   // 0x0078   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0080   (0x0008)  
};

/// Struct /Script/SB.SBAchievementTableProperty
/// Size: 0x00F0 (240 bytes) (0x000010 - 0x0000F0) align n/a MaxSize: 0x00F0
struct FSBAchievementTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBAchievementEventType>               EventType;                                                  // 0x0014   (0x0001)  
	TEnumAsByte<ESBAchievementCategoryType>            CategoryType;                                               // 0x0015   (0x0001)  
	bool                                               CheckParamOr;                                               // 0x0016   (0x0001)  
	TEnumAsByte<ESBAchievementParamType>               ParamType1;                                                 // 0x0017   (0x0001)  
	FString                                            ParamValue1;                                                // 0x0018   (0x0010)  
	TEnumAsByte<ESBOperationType>                      OpType1;                                                    // 0x0028   (0x0001)  
	TEnumAsByte<ESBAchievementParamType>               ParamType2;                                                 // 0x0029   (0x0001)  
	unsigned char                                      UnknownData06_6[0x6];                                       // 0x002A   (0x0006)  MISSED
	FString                                            ParamValue2;                                                // 0x0030   (0x0010)  
	TEnumAsByte<ESBOperationType>                      OpType2;                                                    // 0x0040   (0x0001)  
	TEnumAsByte<ESBAchievementParamType>               ParamType3;                                                 // 0x0041   (0x0001)  
	unsigned char                                      UnknownData07_6[0x6];                                       // 0x0042   (0x0006)  MISSED
	FString                                            ParamValue3;                                                // 0x0048   (0x0010)  
	TEnumAsByte<ESBOperationType>                      OpType3;                                                    // 0x0058   (0x0001)  
	TEnumAsByte<ESBAchievementParamType>               ParamType4;                                                 // 0x0059   (0x0001)  
	unsigned char                                      UnknownData08_6[0x6];                                       // 0x005A   (0x0006)  MISSED
	FString                                            ParamValue4;                                                // 0x0060   (0x0010)  
	TEnumAsByte<ESBOperationType>                      OpType4;                                                    // 0x0070   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	int32_t                                            CompleteValue;                                              // 0x0074   (0x0004)  
	TArray<FName>                                      CheckAchievementAliasArray;                                 // 0x0078   (0x0010)  
	FName                                              CompleteUIRequestGroup;                                     // 0x0088   (0x0008)  
	TArray<FName>                                      CompleteAcquisitionSkillArray;                              // 0x0090   (0x0010)  
	TArray<FName>                                      RewardAcquisitionSkillArray;                                // 0x00A0   (0x0010)  
	int32_t                                            CompleteIncreaseMultiMapLevel;                              // 0x00B0   (0x0004)  
	FName                                              ProgressAchievementOnCompleted;                             // 0x00B4   (0x0008)  
	int32_t                                            ProgressAchievementValueOnCompleted;                        // 0x00BC   (0x0004)  
	FName                                              ProgressAchievementOnCompleted2;                            // 0x00C0   (0x0008)  
	int32_t                                            ProgressAchievementValueOnCompleted2;                       // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	TArray<FName>                                      ProgressAchievementArrayOnCompleted;                        // 0x00D0   (0x0010)  
	int32_t                                            ProgressAchievementArrayValueOnCompleted;                   // 0x00E0   (0x0004)  
	bool                                               bMaintainNewGamePlus;                                       // 0x00E4   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x00E5   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x00E8   (0x0008)  
};

/// Struct /Script/SB.SBDifficultyStatGroupTableProperty
/// Size: 0x0068 (104 bytes) (0x000010 - 0x000068) align n/a MaxSize: 0x0068
struct FSBDifficultyStatGroupTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              DifficultyAlias;                                            // 0x0014   (0x0008)  
	FName                                              DifficultyStatGroupAlias;                                   // 0x001C   (0x0008)  
	TEnumAsByte<ESBActorStatType>                      Stat1;                                                      // 0x0024   (0x0001)  
	TEnumAsByte<ESBEffectCalculationType>              StatCalculationType1;                                       // 0x0025   (0x0001)  
	unsigned char                                      UnknownData09_6[0x2];                                       // 0x0026   (0x0002)  MISSED
	float                                              StatValue1;                                                 // 0x0028   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      Stat2;                                                      // 0x002C   (0x0001)  
	TEnumAsByte<ESBEffectCalculationType>              StatCalculationType2;                                       // 0x002D   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x002E   (0x0002)  MISSED
	float                                              StatValue2;                                                 // 0x0030   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      Stat3;                                                      // 0x0034   (0x0001)  
	TEnumAsByte<ESBEffectCalculationType>              StatCalculationType3;                                       // 0x0035   (0x0001)  
	unsigned char                                      UnknownData11_6[0x2];                                       // 0x0036   (0x0002)  MISSED
	float                                              StatValue3;                                                 // 0x0038   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      Stat4;                                                      // 0x003C   (0x0001)  
	TEnumAsByte<ESBEffectCalculationType>              StatCalculationType4;                                       // 0x003D   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x003E   (0x0002)  MISSED
	float                                              StatValue4;                                                 // 0x0040   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      Stat5;                                                      // 0x0044   (0x0001)  
	TEnumAsByte<ESBEffectCalculationType>              StatCalculationType5;                                       // 0x0045   (0x0001)  
	unsigned char                                      UnknownData13_6[0x2];                                       // 0x0046   (0x0002)  MISSED
	float                                              StatValue5;                                                 // 0x0048   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      Stat6;                                                      // 0x004C   (0x0001)  
	TEnumAsByte<ESBEffectCalculationType>              StatCalculationType6;                                       // 0x004D   (0x0001)  
	unsigned char                                      UnknownData14_6[0x2];                                       // 0x004E   (0x0002)  MISSED
	float                                              StatValue6;                                                 // 0x0050   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      Stat7;                                                      // 0x0054   (0x0001)  
	TEnumAsByte<ESBEffectCalculationType>              StatCalculationType7;                                       // 0x0055   (0x0001)  
	unsigned char                                      UnknownData15_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	float                                              StatValue7;                                                 // 0x0058   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      Stat8;                                                      // 0x005C   (0x0001)  
	TEnumAsByte<ESBEffectCalculationType>              StatCalculationType8;                                       // 0x005D   (0x0001)  
	unsigned char                                      UnknownData16_6[0x2];                                       // 0x005E   (0x0002)  MISSED
	float                                              StatValue8;                                                 // 0x0060   (0x0004)  
	unsigned char                                      UnknownData17_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCharacterLevelTableProperty
/// Size: 0x0060 (96 bytes) (0x000010 - 0x000060) align n/a MaxSize: 0x0060
struct FSBCharacterLevelTableProperty : FSBTablePropertyBase
{ 
	TEnumAsByte<ESBCharacterLevelType>                 LevelType;                                                  // 0x0010   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            Level;                                                      // 0x0014   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      Stat1;                                                      // 0x0018   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	int32_t                                            StatValue1;                                                 // 0x001C   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      Stat2;                                                      // 0x0020   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	int32_t                                            StatValue2;                                                 // 0x0024   (0x0004)  
	FName                                              RequiredItemAlias1;                                         // 0x0028   (0x0008)  
	int32_t                                            RequiredItemAmount1;                                        // 0x0030   (0x0004)  
	FName                                              RequiredItemAlias2;                                         // 0x0034   (0x0008)  
	int32_t                                            RequiredItemAmount2;                                        // 0x003C   (0x0004)  
	FName                                              ConditionGroup;                                             // 0x0040   (0x0008)  
	FString                                            ResultDescription;                                          // 0x0048   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0058   (0x0008)  
};

/// Struct /Script/SB.SBZonePhaseEventTableProperty
/// Size: 0x00D8 (216 bytes) (0x000010 - 0x0000D8) align n/a MaxSize: 0x00D8
struct FSBZonePhaseEventTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBPhaseEventType>                     PhaseEventType;                                             // 0x0014   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	TArray<TEnumAsByte<ESBZoneEventType>>              ActiveEventType;                                            // 0x0018   (0x0010)  
	TArray<FName>                                      ActiveEvent;                                                // 0x0028   (0x0010)  
	TArray<TEnumAsByte<ESBZoneEventType>>              StartEventType;                                             // 0x0038   (0x0010)  
	TArray<FName>                                      StartEvent;                                                 // 0x0048   (0x0010)  
	TArray<TEnumAsByte<ESBZoneEventType>>              CompleteEventType;                                          // 0x0058   (0x0010)  
	TArray<FName>                                      CompleteEvent;                                              // 0x0068   (0x0010)  
	TArray<FName>                                      ActiveZoneEventList;                                        // 0x0078   (0x0010)  
	TArray<FName>                                      StartZoneEventList;                                         // 0x0088   (0x0010)  
	TArray<FName>                                      CompleteZoneEventList;                                      // 0x0098   (0x0010)  
	TEnumAsByte<ESBPhaseEventCompleteType>             PhaseEventCompleteType;                                     // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x00A9   (0x0003)  MISSED
	int32_t                                            PhaseEventCompleteValue;                                    // 0x00AC   (0x0004)  
	FName                                              NextPhaseEvent;                                             // 0x00B0   (0x0008)  
	float                                              PhaseEventDelayTime;                                        // 0x00B8   (0x0004)  
	FName                                              EventCondition;                                             // 0x00BC   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x00C4   (0x0008)  
	bool                                               bWithDestory;                                               // 0x00CC   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x00CD   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x00D0   (0x0008)  
};

/// Struct /Script/SB.SBPuzzleStringArrayTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBPuzzleStringArrayTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TArray<FString>                                    StringArray;                                                // 0x0018   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0028   (0x0008)  
};

/// Struct /Script/SB.SBEventMetaAITableProperty
/// Size: 0x0058 (88 bytes) (0x000010 - 0x000058) align n/a MaxSize: 0x0058
struct FSBEventMetaAITableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBZoneEventActorTarget>               ToTarget;                                                   // 0x0014   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              TargetTagName;                                              // 0x0018   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0020   (0x0008)  
	FName                                              EventCondition;                                             // 0x0028   (0x0008)  
	TEnumAsByte<ESBMetaAIEventType>                    MetaAIEventType;                                            // 0x0030   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              SpecialBehaviorTag;                                         // 0x0034   (0x0008)  
	FName                                              AddTag;                                                     // 0x003C   (0x0008)  
	ESBMetaAIThink                                     ForceThink;                                                 // 0x0044   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	FName                                              ForceThink_BehaviorAlias;                                   // 0x0048   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0050   (0x0008)  
};

/// Struct /Script/SB.SBEventGuideActionTableProperty
/// Size: 0x0058 (88 bytes) (0x000010 - 0x000058) align n/a MaxSize: 0x0058
struct FSBEventGuideActionTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBZoneEventActorTarget>               ToTarget;                                                   // 0x0014   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              TargetTagName;                                              // 0x0018   (0x0008)  
	TArray<FName>                                      FollowerTagNameArray;                                       // 0x0020   (0x0010)  
	float                                              FollowerStartDelayTime;                                     // 0x0030   (0x0004)  
	bool                                               StopGuideAction;                                            // 0x0034   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	FName                                              GuideActionAlias;                                           // 0x0038   (0x0008)  
	FName                                              EventCondition;                                             // 0x0040   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0048   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0050   (0x0008)  
};

/// Struct /Script/SB.SBGuideActionTableProperty
/// Size: 0x01A0 (416 bytes) (0x000010 - 0x0001A0) align n/a MaxSize: 0x01A0
struct FSBGuideActionTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            PathWayName;                                                // 0x0018   (0x0010)  
	TArray<FName>                                      ZoneEventsWhenStart;                                        // 0x0028   (0x0010)  
	TArray<FName>                                      ZoneEventsWhenArrive;                                       // 0x0038   (0x0010)  
	TArray<FName>                                      ZoneEventsWhenComplete;                                     // 0x0048   (0x0010)  
	FString                                            TheaterWhenStart;                                           // 0x0058   (0x0010)  
	FString                                            TheaterWhenArrive;                                          // 0x0068   (0x0010)  
	FString                                            TheaterWhenComplete;                                        // 0x0078   (0x0010)  
	FString                                            TheaterWhenMovePause;                                       // 0x0088   (0x0010)  
	FString                                            LevelSequenceWhenStart;                                     // 0x0098   (0x0010)  
	FString                                            LevelSequenceWhenArrive;                                    // 0x00A8   (0x0010)  
	FString                                            LevelSequenceWhenComplete;                                  // 0x00B8   (0x0010)  
	FString                                            LevelSequenceWhenMovePause;                                 // 0x00C8   (0x0010)  
	FName                                              QuestTaskGroupAlias;                                        // 0x00D8   (0x0008)  
	bool                                               bPlayerAggroCheck;                                          // 0x00E0   (0x0001)  
	bool                                               bPlayerMoveControl;                                         // 0x00E1   (0x0001)  
	unsigned char                                      UnknownData14_6[0x2];                                       // 0x00E2   (0x0002)  MISSED
	float                                              PlayerMoveAreaLimitDistance;                                // 0x00E4   (0x0004)  
	float                                              PlayerRunLimitDistance;                                     // 0x00E8   (0x0004)  
	float                                              PlayerSprintLimitDistance;                                  // 0x00EC   (0x0004)  
	bool                                               bMoveStateControlByPlayer;                                  // 0x00F0   (0x0001)  
	TEnumAsByte<ESBMoveState>                          MoveStateFromForwardPlayer;                                 // 0x00F1   (0x0001)  
	unsigned char                                      UnknownData15_6[0x2];                                       // 0x00F2   (0x0002)  MISSED
	float                                              MinDistanceFromForwardPlayer;                               // 0x00F4   (0x0004)  
	float                                              MaxDistanceFromForwardPlayer;                               // 0x00F8   (0x0004)  
	TEnumAsByte<ESBMoveState>                          MoveStateFromBackwardPlayer;                                // 0x00FC   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x00FD   (0x0003)  MISSED
	float                                              MinDistanceFromBackwardPlayer;                              // 0x0100   (0x0004)  
	float                                              MaxDistanceFromBackwardPlayer;                              // 0x0104   (0x0004)  
	bool                                               bFixedTargetRotation;                                       // 0x0108   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x0109   (0x0003)  MISSED
	float                                              StopDistanceToPlayer;                                       // 0x010C   (0x0004)  
	float                                              MovePauseDistanceToPlayer;                                  // 0x0110   (0x0004)  
	bool                                               bMovePauseLookAtPlayer;                                     // 0x0114   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x0115   (0x0003)  MISSED
	FString                                            MovePauseShow;                                              // 0x0118   (0x0010)  
	bool                                               bLoopMovePauseShow;                                         // 0x0128   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x0129   (0x0003)  MISSED
	float                                              MoveResumeDistanceToPlayer;                                 // 0x012C   (0x0004)  
	FString                                            StartShow;                                                  // 0x0130   (0x0010)  
	float                                              StartShowDelayTime;                                         // 0x0140   (0x0004)  
	unsigned char                                      UnknownData20_6[0x4];                                       // 0x0144   (0x0004)  MISSED
	FString                                            ArriveShow;                                                 // 0x0148   (0x0010)  
	float                                              ArriveShowDelayTime;                                        // 0x0158   (0x0004)  
	bool                                               bLoopArriveShow;                                            // 0x015C   (0x0001)  
	bool                                               bLookAtPlayerWhenArrive;                                    // 0x015D   (0x0001)  
	unsigned char                                      UnknownData21_6[0x2];                                       // 0x015E   (0x0002)  MISSED
	float                                              OverrideMaxSpeed;                                           // 0x0160   (0x0004)  
	bool                                               bCompleteLookAtPlayer;                                      // 0x0164   (0x0001)  
	unsigned char                                      UnknownData22_6[0x3];                                       // 0x0165   (0x0003)  MISSED
	float                                              CompleteWaitTime;                                           // 0x0168   (0x0004)  
	float                                              MoveDelayTime;                                              // 0x016C   (0x0004)  
	FName                                              StanceAlias;                                                // 0x0170   (0x0008)  
	bool                                               bUsePathfinding;                                            // 0x0178   (0x0001)  
	unsigned char                                      UnknownData23_6[0x3];                                       // 0x0179   (0x0003)  MISSED
	float                                              CompletedTimerWhenArrive;                                   // 0x017C   (0x0004)  
	float                                              CompletedDistanceToPlayerWhenArrive;                        // 0x0180   (0x0004)  
	bool                                               bFly;                                                       // 0x0184   (0x0001)  
	unsigned char                                      UnknownData24_6[0x3];                                       // 0x0185   (0x0003)  MISSED
	float                                              FlyMoveSpeedPow;                                            // 0x0188   (0x0004)  
	FName                                              FormationType;                                              // 0x018C   (0x0008)  
	bool                                               bDisableDroneUIIndicator;                                   // 0x0194   (0x0001)  
	unsigned char                                      UnknownData25_6[0x3];                                       // 0x0195   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x0198   (0x0008)  
};

/// Struct /Script/SB.SBZoneEventActorBattleStateTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBZoneEventActorBattleStateTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	bool                                               BattleState;                                                // 0x0014   (0x0001)  
	TEnumAsByte<ESBZoneEventActorTarget>               ToTarget;                                                   // 0x0015   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FName                                              TargetTagName;                                              // 0x0018   (0x0008)  
	bool                                               UseForceFoldWeaponValue;                                    // 0x0020   (0x0001)  
	bool                                               FoldWeaponValue;                                            // 0x0021   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0022   (0x0002)  MISSED
	FName                                              FileSuffix;                                                 // 0x0024   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBEquipStatViewerTableProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBEquipStatViewerTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      StatType;                                                   // 0x0014   (0x0001)  
	TEnumAsByte<ESBActorCalculatedStatType>            CalculatedStatType;                                         // 0x0015   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	float                                              MinValue;                                                   // 0x0018   (0x0004)  
	float                                              MaxValue;                                                   // 0x001C   (0x0004)  
	float                                              MaxValueInNewGamePlus;                                      // 0x0020   (0x0004)  
	bool                                               DisplayMaxValue;                                            // 0x0024   (0x0001)  
	bool                                               DisplayMaxTag;                                              // 0x0025   (0x0001)  
	TEnumAsByte<ESBCharacterLevelType>                 EnhanceCharLevelType;                                       // 0x0026   (0x0001)  
	bool                                               DisplayEnhanceCharLevel;                                    // 0x0027   (0x0001)  
	bool                                               DisplayAlways;                                              // 0x0028   (0x0001)  
	bool                                               DontDisplayUI;                                              // 0x0029   (0x0001)  
	bool                                               DisplayDecimal;                                             // 0x002A   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x002B   (0x0001)  MISSED
	FName                                              Achievement;                                                // 0x002C   (0x0008)  
	FName                                              ConditionGroup;                                             // 0x0034   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x003C   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/SB.SBActorStatTextTableProperty
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000020) align n/a MaxSize: 0x0020
struct FSBActorStatTextTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      StatType;                                                   // 0x0014   (0x0001)  
	TEnumAsByte<ESBActorCalculatedStatType>            CalculatedStatType;                                         // 0x0015   (0x0001)  
	TEnumAsByte<ESBActorStatTextType>                  TextType;                                                   // 0x0016   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0017   (0x0001)  MISSED
	FName                                              FileSuffix;                                                 // 0x0018   (0x0008)  
};

/// Struct /Script/SB.SBZoneLayerTableProperty
/// Size: 0x0038 (56 bytes) (0x000010 - 0x000038) align n/a MaxSize: 0x0038
struct FSBZoneLayerTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              LayerName;                                                  // 0x0014   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FName>                                      ZoneList;                                                   // 0x0020   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0030   (0x0008)  
};

/// Struct /Script/SB.SBEventRequestPathWayTableProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBEventRequestPathWayTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              LevelTargetFilter;                                          // 0x0014   (0x0008)  
	TEnumAsByte<ESBZoneEventPathWayActionType>         ActionType;                                                 // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              PathWayAlias;                                               // 0x0020   (0x0008)  
	FName                                              EventCondition;                                             // 0x0028   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0030   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0038   (0x0008)  
};

/// Struct /Script/SB.SBEffectCombinationTableProperty
/// Size: 0x0080 (128 bytes) (0x000010 - 0x000080) align n/a MaxSize: 0x0080
struct FSBEffectCombinationTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	uint32_t                                           Priority;                                                   // 0x0014   (0x0004)  
	FName                                              Effect1;                                                    // 0x0018   (0x0008)  
	uint32_t                                           Effect1Count;                                               // 0x0020   (0x0004)  
	bool                                               bKeepEffect1;                                               // 0x0024   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	FName                                              Effect2;                                                    // 0x0028   (0x0008)  
	uint32_t                                           Effect2Count;                                               // 0x0030   (0x0004)  
	bool                                               bKeepEffect2;                                               // 0x0034   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	FName                                              Effect3;                                                    // 0x0038   (0x0008)  
	uint32_t                                           Effect3Count;                                               // 0x0040   (0x0004)  
	bool                                               bKeepEffect3;                                               // 0x0044   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	FName                                              Effect4;                                                    // 0x0048   (0x0008)  
	uint32_t                                           Effect4Count;                                               // 0x0050   (0x0004)  
	bool                                               bKeepEffect4;                                               // 0x0054   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	FName                                              Effect5;                                                    // 0x0058   (0x0008)  
	uint32_t                                           Effect5Count;                                               // 0x0060   (0x0004)  
	bool                                               bKeepEffect5;                                               // 0x0064   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	TArray<FName>                                      ResultEffectAliasArray;                                     // 0x0068   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0078   (0x0008)  
};

/// Struct /Script/SB.SBSkillPriorityTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBSkillPriorityTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBSkillSlotType>                      SkillSlotType;                                              // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	TArray<FName>                                      SkillAliasArray;                                            // 0x0018   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0028   (0x0008)  
};

/// Struct /Script/SB.SBPassiveSkillFunctionTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBPassiveSkillFunctionTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TArray<FName>                                      PassiveSkillEffectAliasArray;                               // 0x0018   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0028   (0x0008)  
};

/// Struct /Script/SB.SBAcquisitionSkillTableProperty
/// Size: 0x00E0 (224 bytes) (0x000010 - 0x0000E0) align n/a MaxSize: 0x00E0
struct FSBAcquisitionSkillTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBAcquisitionSkillType>               Type;                                                       // 0x0014   (0x0001)  
	TEnumAsByte<ESBSkillSlotType>                      UsableSlot;                                                 // 0x0015   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FName                                              ConsumeItemAlias;                                           // 0x0018   (0x0008)  
	int32_t                                            ConsumeItemAmount;                                          // 0x0020   (0x0004)  
	int32_t                                            ConsumeSP;                                                  // 0x0024   (0x0004)  
	bool                                               bExceptReset;                                               // 0x0028   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	FName                                              RequiredCompleteAchievement;                                // 0x002C   (0x0008)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FName>                                      RequiredAcquisitionSkillAliasArray;                         // 0x0038   (0x0010)  
	bool                                               OrCheckRequiredAcquisition;                                 // 0x0048   (0x0001)  
	ESBAcquisitionSkillVisibleCondition                VisibleCondition;                                           // 0x0049   (0x0001)  
	bool                                               AcquisitionOnCreated;                                       // 0x004A   (0x0001)  
	unsigned char                                      UnknownData10_6[0x1];                                       // 0x004B   (0x0001)  MISSED
	FName                                              PassiveSkillFunctionAlias;                                  // 0x004C   (0x0008)  
	FName                                              SkillIconName;                                              // 0x0054   (0x0008)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            SkillPreviewPath;                                           // 0x0060   (0x0010)  
	ESBSkillEnergyVisibleType                          SkillEnergyVisibleType;                                     // 0x0070   (0x0001)  
	ESBSkillImportanceType                             SkillImportanceType;                                        // 0x0071   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x0072   (0x0002)  MISSED
	FName                                              SkillTreeAlias;                                             // 0x0074   (0x0008)  
	FName                                              SkillSlotAlias;                                             // 0x007C   (0x0008)  
	FName                                              AchievementTag;                                             // 0x0084   (0x0008)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	FString                                            TitleName;                                                  // 0x0090   (0x0010)  
	FString                                            Description;                                                // 0x00A0   (0x0010)  
	FString                                            Command;                                                    // 0x00B0   (0x0010)  
	FName                                              SkillPriorityAlias;                                         // 0x00C0   (0x0008)  
	FName                                              SkillCommandAlias;                                          // 0x00C8   (0x0008)  
	FName                                              TrainingRoom;                                               // 0x00D0   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x00D8   (0x0008)  
};

/// Struct /Script/SB.SBMetaAIBehaviorTableProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBMetaAIBehaviorTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	int32_t                                            Priority;                                                   // 0x0014   (0x0004)  
	float                                              FindDistance;                                               // 0x0018   (0x0004)  
	float                                              Interval;                                                   // 0x001C   (0x0004)  
	float                                              AcitiveProbability;                                         // 0x0020   (0x0004)  
	float                                              TirednessPerSecond;                                         // 0x0024   (0x0004)  
	float                                              Condition_StartTiredness;                                   // 0x0028   (0x0004)  
	TEnumAsByte<ESBEquation>                           Condition_StartTiredness_OperationType;                     // 0x002C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x002D   (0x0003)  MISSED
	float                                              Condition_EndTiredness;                                     // 0x0030   (0x0004)  
	TEnumAsByte<ESBEquation>                           Condition_EndTiredness_OperationType;                       // 0x0034   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x0038   (0x0008)  
};

/// Struct /Script/SB.SBMetaAITableProperty
/// Size: 0x0128 (296 bytes) (0x000010 - 0x000128) align n/a MaxSize: 0x0128
struct FSBMetaAITableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	ESBJob                                             Job;                                                        // 0x0014   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              Appearance;                                                 // 0x0018   (0x0008)  
	TArray<FName>                                      InitTagArray;                                               // 0x0020   (0x0010)  
	TArray<ESBMetaAIThink>                             ValidThinkArray;                                            // 0x0030   (0x0010)  
	TArray<FName>                                      BehaviorAliasArray;                                         // 0x0040   (0x0010)  
	bool                                               bKeepNodeGroupIndex;                                        // 0x0050   (0x0001)  
	bool                                               bEnableCollisionOverlap;                                    // 0x0051   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x0052   (0x0002)  MISSED
	float                                              MoveAroundIntervalTime;                                     // 0x0054   (0x0004)  
	float                                              MoveAroundProbability;                                      // 0x0058   (0x0004)  
	bool                                               bUseOnlyTagNode;                                            // 0x005C   (0x0001)  
	bool                                               bLookAtOnly;                                                // 0x005D   (0x0001)  
	ESBMetaAILookAtType                                LookAtType;                                                 // 0x005E   (0x0001)  
	unsigned char                                      UnknownData11_6[0x1];                                       // 0x005F   (0x0001)  MISSED
	float                                              LookAtYawAngle;                                             // 0x0060   (0x0004)  
	float                                              LookAtPitchAngle;                                           // 0x0064   (0x0004)  
	float                                              LookAtOnceTime;                                             // 0x0068   (0x0004)  
	float                                              LookAtCooltime;                                             // 0x006C   (0x0004)  
	float                                              LookAtDistance;                                             // 0x0070   (0x0004)  
	float                                              LookAtStopDistance;                                         // 0x0074   (0x0004)  
	float                                              StopMoveDistanceWithPlayer;                                 // 0x0078   (0x0004)  
	float                                              StopMoveAngleWithPlayer;                                    // 0x007C   (0x0004)  
	float                                              StopMoveOnceTime;                                           // 0x0080   (0x0004)  
	float                                              StopMoveCoolTime;                                           // 0x0084   (0x0004)  
	bool                                               bEnableShoulderCharge;                                      // 0x0088   (0x0001)  
	unsigned char                                      UnknownData12_6[0x7];                                       // 0x0089   (0x0007)  MISSED
	FString                                            ShoulderChargeShowPath;                                     // 0x0090   (0x0010)  
	float                                              MoveAroundCustomBehaviorCheckTime;                          // 0x00A0   (0x0004)  
	float                                              MoveAroundCustomBehaviorActivationRate;                     // 0x00A4   (0x0004)  
	FString                                            MoveAroundCustomBehavior1_ShowPath;                         // 0x00A8   (0x0010)  
	float                                              MoveAroundCustomBehavior1_ActivationRate;                   // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x00BC   (0x0004)  MISSED
	FString                                            MoveAroundCustomBehavior2_ShowPath;                         // 0x00C0   (0x0010)  
	float                                              MoveAroundCustomBehavior2_ActivationRate;                   // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData14_6[0x4];                                       // 0x00D4   (0x0004)  MISSED
	FString                                            MoveAroundCustomBehavior3_ShowPath;                         // 0x00D8   (0x0010)  
	float                                              MoveAroundCustomBehavior3_ActivationRate;                   // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData15_6[0x4];                                       // 0x00EC   (0x0004)  MISSED
	FString                                            MoveAroundCustomBehavior4_ShowPath;                         // 0x00F0   (0x0010)  
	float                                              MoveAroundCustomBehavior4_ActivationRate;                   // 0x0100   (0x0004)  
	unsigned char                                      UnknownData16_6[0x4];                                       // 0x0104   (0x0004)  MISSED
	FString                                            MoveAroundCustomBehavior5_ShowPath;                         // 0x0108   (0x0010)  
	float                                              MoveAroundCustomBehavior5_ActivationRate;                   // 0x0118   (0x0004)  
	bool                                               bInitZeroTiredness;                                         // 0x011C   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x011D   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x0120   (0x0008)  
};

/// Struct /Script/SB.SBEventZoneEventActorControlTableProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBEventZoneEventActorControlTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              ZoneEventActorName;                                         // 0x0014   (0x0008)  
	TEnumAsByte<ESBEventZoneEventActorControlType>     ZoneEventActorControlType;                                  // 0x001C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	float                                              DestructionTime;                                            // 0x0020   (0x0004)  
	bool                                               bDisableDestruction;                                        // 0x0024   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	FName                                              EventCondition;                                             // 0x0028   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0030   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0038   (0x0008)  
};

/// Struct /Script/SB.SBAIGroupTableProperty
/// Size: 0x0058 (88 bytes) (0x000010 - 0x000058) align n/a MaxSize: 0x0058
struct FSBAIGroupTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	int32_t                                            MinGroupActorCount;                                         // 0x0014   (0x0004)  
	TEnumAsByte<ESBAIGroupTargetShareCondition>        TargetShareCondition;                                       // 0x0018   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              TargetShareConditionValue;                                  // 0x001C   (0x0004)  
	int32_t                                            MaxAttackerCount;                                           // 0x0020   (0x0004)  
	float                                              ReattackWaitingTime;                                        // 0x0024   (0x0004)  
	TEnumAsByte<ESBAttackerSelectMethod>               AttackerSelectMethod;                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	int32_t                                            ValidProjectileCount;                                       // 0x002C   (0x0004)  
	float                                              InvalidProjectileOffsetMinDistance;                         // 0x0030   (0x0004)  
	float                                              InvalidProjectileOffsetMaxDistance;                         // 0x0034   (0x0004)  
	float                                              CautionMinDistance;                                         // 0x0038   (0x0004)  
	float                                              CautionMaxDistance;                                         // 0x003C   (0x0004)  
	bool                                               bUseMetaAIFormation;                                        // 0x0040   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FName                                              MetaAIFormationType;                                        // 0x0044   (0x0008)  
	bool                                               bImmediatelyBattleAlarm;                                    // 0x004C   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x0050   (0x0008)  
};

/// Struct /Script/SB.SBEventItemActionTableProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBEventItemActionTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBItemActionType>                     ActionType;                                                 // 0x0014   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              Item;                                                       // 0x0018   (0x0008)  
	int32_t                                            Count;                                                      // 0x0020   (0x0004)  
	FName                                              TargetFilter;                                               // 0x0024   (0x0008)  
	FName                                              EventCondition;                                             // 0x002C   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0034   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x003C   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/SB.SBEventLaserControlTableProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBEventLaserControlTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              LaserUniqueName;                                            // 0x0014   (0x0008)  
	FName                                              LaserGroupName;                                             // 0x001C   (0x0008)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	FName                                              EventCondition;                                             // 0x0028   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0030   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0038   (0x0008)  
};

/// Struct /Script/SB.SBEventAreaControlVolumeControlTableProperty
/// Size: 0x0058 (88 bytes) (0x000010 - 0x000058) align n/a MaxSize: 0x0058
struct FSBEventAreaControlVolumeControlTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              AreaControlVolume1;                                         // 0x0014   (0x0008)  
	FName                                              AreaControlVolume2;                                         // 0x001C   (0x0008)  
	FName                                              AreaControlVolume3;                                         // 0x0024   (0x0008)  
	FName                                              AreaControlVolume4;                                         // 0x002C   (0x0008)  
	FName                                              AreaControlVolume5;                                         // 0x0034   (0x0008)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x003C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	FName                                              EventCondition;                                             // 0x0040   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0048   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0050   (0x0008)  
};

/// Struct /Script/SB.SBAreaControlVolumeTableProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBAreaControlVolumeTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x0014   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	TArray<FName>                                      AdmissionPossibleTribeArray;                                // 0x0018   (0x0010)  
	TArray<FName>                                      AdmissionPossibleCharacterTagArray;                         // 0x0028   (0x0010)  
	bool                                               bRemoveNotKeepSBCharacter;                                  // 0x0038   (0x0001)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0039   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x003A   (0x0002)  MISSED
	FName                                              FileSuffix;                                                 // 0x003C   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/SB.SBEventEffectVolumeControlTableProperty
/// Size: 0x0038 (56 bytes) (0x000010 - 0x000038) align n/a MaxSize: 0x0038
struct FSBEventEffectVolumeControlTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              EffectVolume;                                               // 0x0014   (0x0008)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              EventCondition;                                             // 0x0020   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0028   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0030   (0x0008)  
};

/// Struct /Script/SB.SBEventEnvControlTableProperty
/// Size: 0x0070 (112 bytes) (0x000010 - 0x000070) align n/a MaxSize: 0x0070
struct FSBEventEnvControlTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              EnvSpawnAlias;                                              // 0x0014   (0x0008)  
	TEnumAsByte<ESBZoneEnvControlType>                 EnvControlType;                                             // 0x001C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              TargetCamp;                                                 // 0x0020   (0x0008)  
	FName                                              TagName;                                                    // 0x0028   (0x0008)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x0030   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            AddProgressValue;                                           // 0x0034   (0x0004)  
	int32_t                                            SetStateProgressValue;                                      // 0x0038   (0x0004)  
	int32_t                                            ProgressSlotIndex;                                          // 0x003C   (0x0004)  
	float                                              ProgressSpeed;                                              // 0x0040   (0x0004)  
	float                                              ProgressSpeedInterpTime;                                    // 0x0044   (0x0004)  
	float                                              CurrentProgressValue;                                       // 0x0048   (0x0004)  
	float                                              StartProgressValue;                                         // 0x004C   (0x0004)  
	float                                              EndProgressValue;                                           // 0x0050   (0x0004)  
	FName                                              EventCondition;                                             // 0x0054   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x005C   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0064   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneEventActorTableProperty
/// Size: 0x01A8 (424 bytes) (0x000010 - 0x0001A8) align n/a MaxSize: 0x01A8
struct FSBZoneEventActorTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	bool                                               bCollisionHitToActor;                                       // 0x0014   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	float                                              CollisionActorDistance;                                     // 0x0018   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FString                                            CustomEffectValue;                                          // 0x0020   (0x0010)  
	FString                                            CustomEffectValueByFireElement;                             // 0x0030   (0x0010)  
	float                                              EventInterval;                                              // 0x0040   (0x0004)  
	float                                              DespawnDelayTime;                                           // 0x0044   (0x0004)  
	float                                              TargetFilterExtentX;                                        // 0x0048   (0x0004)  
	float                                              TargetFilterExtentY;                                        // 0x004C   (0x0004)  
	float                                              TargetFilterCheckHeight;                                    // 0x0050   (0x0004)  
	float                                              ScaleTickDistance;                                          // 0x0054   (0x0004)  
	FString                                            RewardSpawnFormationAsset;                                  // 0x0058   (0x0010)  
	float                                              DestructionEvent_DelayMinTime;                              // 0x0068   (0x0004)  
	float                                              DestructionEvent_DelayMaxTime;                              // 0x006C   (0x0004)  
	FName                                              DestructionEvent_EffectAlias;                               // 0x0070   (0x0008)  
	FName                                              DestructionEvent_RewardGroupAlias;                          // 0x0078   (0x0008)  
	TEnumAsByte<ESBItemBucketType>                     DestructionEvent_RewardBucketType;                          // 0x0080   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               DestructionEvent_RewardOverrideSaveType;                    // 0x0081   (0x0001)  
	bool                                               DestructionEvent_RewardRemoveItemWithResetZone;             // 0x0082   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x0083   (0x0001)  MISSED
	FName                                              DestructionEvent_ZoneEventAlias;                            // 0x0084   (0x0008)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	TArray<FName>                                      DestructionEvent_ZoneEventAliasArray;                       // 0x0090   (0x0010)  
	TArray<FName>                                      DestructionEvent_EffectAliasArray;                          // 0x00A0   (0x0010)  
	int32_t                                            DestructCountMax;                                           // 0x00B0   (0x0004)  
	float                                              DestructionTimer;                                           // 0x00B4   (0x0004)  
	TArray<int32_t>                                    CountEventStepArray;                                        // 0x00B8   (0x0010)  
	TArray<FName>                                      CountEventRewardGroupAliasArray;                            // 0x00C8   (0x0010)  
	TArray<TEnumAsByte<ESBItemBucketType>>             CountEventRewardBucketTypeArray;                            // 0x00D8   (0x0010)  
	TArray<FName>                                      CountEventEffectAliasArray;                                 // 0x00E8   (0x0010)  
	TArray<FName>                                      CountEventZoneEventAliasArray;                              // 0x00F8   (0x0010)  
	FName                                              CountEvent1_RewardGroupAlias;                               // 0x0108   (0x0008)  
	FName                                              CountEvent1_EffectAlias;                                    // 0x0110   (0x0008)  
	FName                                              CountEvent1_ZoneEventAlias;                                 // 0x0118   (0x0008)  
	FName                                              CountEvent2_RewardGroupAlias;                               // 0x0120   (0x0008)  
	FName                                              CountEvent2_EffectAlias;                                    // 0x0128   (0x0008)  
	FName                                              CountEvent2_ZoneEventAlias;                                 // 0x0130   (0x0008)  
	FName                                              CountEvent3_RewardGroupAlias;                               // 0x0138   (0x0008)  
	FName                                              CountEvent3_EffectAlias;                                    // 0x0140   (0x0008)  
	FName                                              CountEvent3_ZoneEventAlias;                                 // 0x0148   (0x0008)  
	FName                                              CountEvent4_RewardGroupAlias;                               // 0x0150   (0x0008)  
	FName                                              CountEvent4_EffectAlias;                                    // 0x0158   (0x0008)  
	FName                                              CountEvent4_ZoneEventAlias;                                 // 0x0160   (0x0008)  
	FName                                              CountEvent5_RewardGroupAlias;                               // 0x0168   (0x0008)  
	FName                                              CountEvent5_EffectAlias;                                    // 0x0170   (0x0008)  
	FName                                              CountEvent5_ZoneEventAlias;                                 // 0x0178   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0180   (0x0008)  
	TArray<FSBJsonEffect>                              EffectAliasArray;                                           // 0x0188   (0x0010)  
	TArray<FSBJsonEffect>                              EffectAliasArrayByFireElement;                              // 0x0198   (0x0010)  
};

/// Struct /Script/SB.SBDropRateAdjustTableTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBDropRateAdjustTableTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	int32_t                                            RarityCommon;                                               // 0x0014   (0x0004)  
	int32_t                                            RarityUncommon;                                             // 0x0018   (0x0004)  
	int32_t                                            RarityRare;                                                 // 0x001C   (0x0004)  
	int32_t                                            RarityEpic;                                                 // 0x0020   (0x0004)  
	int32_t                                            RarityLegendary;                                            // 0x0024   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0028   (0x0008)  
};

/// Struct /Script/SB.SBRewardGroupTableProperty
/// Size: 0x0080 (128 bytes) (0x000010 - 0x000080) align n/a MaxSize: 0x0080
struct FSBRewardGroupTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Group;                                                      // 0x0014   (0x0008)  
	TEnumAsByte<ESBRewardGiveType>                     GiveType;                                                   // 0x001C   (0x0001)  
	bool                                               MustAcquisition;                                            // 0x001D   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x001E   (0x0002)  MISSED
	FName                                              GroupAlias;                                                 // 0x0020   (0x0008)  
	FName                                              ItemAlias;                                                  // 0x0028   (0x0008)  
	FName                                              ItemVisualAlias;                                            // 0x0030   (0x0008)  
	TEnumAsByte<ESBItemCategory>                       ItemCategory;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FName                                              ItemCategoryTag;                                            // 0x003C   (0x0008)  
	TEnumAsByte<ESBItemRarityType>                     ItemRarity;                                                 // 0x0044   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	FName                                              ConditionGroup;                                             // 0x0048   (0x0008)  
	TEnumAsByte<ESBRewardGroupDropType>                DropType;                                                   // 0x0050   (0x0001)  
	TEnumAsByte<ESBItemRarityType>                     DropRateRarity;                                             // 0x0051   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x0052   (0x0002)  MISSED
	int32_t                                            DropRate;                                                   // 0x0054   (0x0004)  
	int32_t                                            ItemMinCount;                                               // 0x0058   (0x0004)  
	int32_t                                            ItemMaxCount;                                               // 0x005C   (0x0004)  
	bool                                               StatParentDependency;                                       // 0x0060   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            ItemStatLevelMin;                                           // 0x0064   (0x0004)  
	int32_t                                            ItemStatLevelMax;                                           // 0x0068   (0x0004)  
	int32_t                                            OverrideInteractionTime;                                    // 0x006C   (0x0004)  
	ESBRewardUIType                                    RewardUIType;                                               // 0x0070   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x0074   (0x0008)  
	unsigned char                                      UnknownData13_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBGearStatGroupTableProperty
/// Size: 0x0038 (56 bytes) (0x000010 - 0x000038) align n/a MaxSize: 0x0038
struct FSBGearStatGroupTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Group;                                                      // 0x0014   (0x0008)  
	FName                                              StatCategoryTag;                                            // 0x001C   (0x0008)  
	TEnumAsByte<ESBGearStatType>                       GearStatType;                                               // 0x0024   (0x0001)  
	TEnumAsByte<ESBActorStatType>                      ActorStatType;                                              // 0x0025   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0026   (0x0002)  MISSED
	FName                                              EffectStatTag;                                              // 0x0028   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0030   (0x0008)  
};

/// Struct /Script/SB.SBGearStatTableProperty
/// Size: 0x0070 (112 bytes) (0x000010 - 0x000070) align n/a MaxSize: 0x0070
struct FSBGearStatTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              StatCategoryTag;                                            // 0x0014   (0x0008)  
	TEnumAsByte<ESBGearStatType>                       GearStatType;                                               // 0x001C   (0x0001)  
	TEnumAsByte<ESBActorStatType>                      ActorStatType;                                              // 0x001D   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x001E   (0x0002)  MISSED
	FName                                              EffectStatTag;                                              // 0x0020   (0x0008)  
	int32_t                                            StatLevel;                                                  // 0x0028   (0x0004)  
	TEnumAsByte<ESBItemRarityType>                     Rarity;                                                     // 0x002C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x002D   (0x0003)  MISSED
	float                                              StatValueMin;                                               // 0x0030   (0x0004)  
	float                                              StatValueMax;                                               // 0x0034   (0x0004)  
	TArray<FName>                                      EffectAliasArray;                                           // 0x0038   (0x0010)  
	FString                                            TextEffectName;                                             // 0x0048   (0x0010)  
	FString                                            TextEffectDesc;                                             // 0x0058   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0068   (0x0008)  
};

/// Struct /Script/SB.SBItemReplacementTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBItemReplacementTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              ReplacementItemAlias;                                       // 0x0014   (0x0008)  
	int32_t                                            ReplacementItemAmount;                                      // 0x001C   (0x0004)  
	bool                                               UseRewardDirectOverride;                                    // 0x0020   (0x0001)  
	bool                                               RewardDirectValue;                                          // 0x0021   (0x0001)  
	bool                                               UseRewardMustAcquisitionOverride;                           // 0x0022   (0x0001)  
	bool                                               RewardMustAcquisition;                                      // 0x0023   (0x0001)  
	FName                                              FileSuffix;                                                 // 0x0024   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBItemLureTableProperty
/// Size: 0x00B0 (176 bytes) (0x000010 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FSBItemLureTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              FishCategory1;                                              // 0x0014   (0x0008)  
	int32_t                                            BiteRateAdd1;                                               // 0x001C   (0x0004)  
	FName                                              FishCategory2;                                              // 0x0020   (0x0008)  
	int32_t                                            BiteRateAdd2;                                               // 0x0028   (0x0004)  
	FName                                              FishCategory3;                                              // 0x002C   (0x0008)  
	int32_t                                            BiteRateAdd3;                                               // 0x0034   (0x0004)  
	FName                                              FishCategory4;                                              // 0x0038   (0x0008)  
	int32_t                                            BiteRateAdd4;                                               // 0x0040   (0x0004)  
	FName                                              FishCategory5;                                              // 0x0044   (0x0008)  
	int32_t                                            BiteRateAdd5;                                               // 0x004C   (0x0004)  
	FName                                              FishCategory6;                                              // 0x0050   (0x0008)  
	int32_t                                            BiteRateAdd6;                                               // 0x0058   (0x0004)  
	FName                                              FishCategory7;                                              // 0x005C   (0x0008)  
	int32_t                                            BiteRateAdd7;                                               // 0x0064   (0x0004)  
	FName                                              FishCategory8;                                              // 0x0068   (0x0008)  
	int32_t                                            BiteRateAdd8;                                               // 0x0070   (0x0004)  
	FName                                              FishCategory9;                                              // 0x0074   (0x0008)  
	int32_t                                            BiteRateAdd9;                                               // 0x007C   (0x0004)  
	FName                                              FishCategory10;                                             // 0x0080   (0x0008)  
	int32_t                                            BiteRateAdd10;                                              // 0x0088   (0x0004)  
	FName                                              FishCategory11;                                             // 0x008C   (0x0008)  
	int32_t                                            BiteRateAdd11;                                              // 0x0094   (0x0004)  
	FName                                              FishCategory12;                                             // 0x0098   (0x0008)  
	int32_t                                            BiteRateAdd12;                                              // 0x00A0   (0x0004)  
	TEnumAsByte<ESBItemLureWeightUpType>               WeightUp;                                                   // 0x00A4   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00A5   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x00A8   (0x0008)  
};

/// Struct /Script/SB.SBItemBulletTableProperty
/// Size: 0x0078 (120 bytes) (0x000010 - 0x000078) align n/a MaxSize: 0x0078
struct FSBItemBulletTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              BulletAimImageType;                                         // 0x0014   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FName>                                      BulletStartEffectArray;                                     // 0x0020   (0x0010)  
	TArray<FName>                                      BulletDroneStartEffectArray;                                // 0x0030   (0x0010)  
	bool                                               bTPSAimSlowDown;                                            // 0x0040   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              TPS_TargetCheckCollisionRadius;                             // 0x0044   (0x0004)  
	float                                              TPS_ControllerYawDegree;                                    // 0x0048   (0x0004)  
	float                                              TPS_ControllerPitchDegree;                                  // 0x004C   (0x0004)  
	bool                                               TPS_EnableDamping;                                          // 0x0050   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              TPS_DampingForce;                                           // 0x0054   (0x0004)  
	float                                              TPS_BulletMagnetismDegree;                                  // 0x0058   (0x0004)  
	bool                                               bAimLockOnTarget;                                           // 0x005C   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x005D   (0x0003)  MISSED
	int32_t                                            AimLockOnTargetMaxCount;                                    // 0x0060   (0x0004)  
	int32_t                                            AimLockOnTargetOverlapCount;                                // 0x0064   (0x0004)  
	bool                                               bHideWeakPoint;                                             // 0x0068   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x006C   (0x0008)  
	unsigned char                                      UnknownData11_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Struct /Script/SB.SBItemConsumableTableProperty
/// Size: 0x0058 (88 bytes) (0x000010 - 0x000058) align n/a MaxSize: 0x0058
struct FSBItemConsumableTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              ConditionGroup;                                             // 0x0014   (0x0008)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FName>                                      EffectAliasArray;                                           // 0x0020   (0x0010)  
	bool                                               ConsumeImmidiate;                                           // 0x0030   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            ConsumeCoolTime;                                            // 0x0034   (0x0004)  
	FName                                              ConsumeSkillAlias;                                          // 0x0038   (0x0008)  
	TEnumAsByte<ESBSkillEnergyType>                    ConsumeEnergyType;                                          // 0x0040   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              ConsumeEnergyAmount;                                        // 0x0044   (0x0004)  
	bool                                               NotRemoveItem;                                              // 0x0048   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x004C   (0x0008)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/SB.SBItemEquipableTableProperty
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000028) align n/a MaxSize: 0x0028
struct FSBItemEquipableTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBGearType>                           GearType;                                                   // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              BaseStatGroupAlias;                                         // 0x0018   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0020   (0x0008)  
};

/// Struct /Script/SB.SBItemTableProperty
/// Size: 0x01C0 (448 bytes) (0x000010 - 0x0001C0) align n/a MaxSize: 0x01C0
struct FSBItemTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              InventoryAlias;                                             // 0x0014   (0x0008)  
	uint32_t                                           InventoryPriority;                                          // 0x001C   (0x0004)  
	FString                                            NamePlural;                                                 // 0x0020   (0x0010)  
	FString                                            Name;                                                       // 0x0030   (0x0010)  
	FString                                            Desc;                                                       // 0x0040   (0x0010)  
	FString                                            DescFunction;                                               // 0x0050   (0x0010)  
	FString                                            DescContent;                                                // 0x0060   (0x0010)  
	TEnumAsByte<ESBItemCategory>                       Category;                                                   // 0x0070   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	FName                                              CategoryTag;                                                // 0x0074   (0x0008)  
	TEnumAsByte<ESBItemRarityType>                     Rarity;                                                     // 0x007C   (0x0001)  
	TEnumAsByte<ESBItemSaveType>                       SaveType;                                                   // 0x007D   (0x0001)  
	bool                                               IncludeDropPool;                                            // 0x007E   (0x0001)  
	unsigned char                                      UnknownData11_6[0x1];                                       // 0x007F   (0x0001)  MISSED
	int32_t                                            StackAmount;                                                // 0x0080   (0x0004)  
	int32_t                                            MaxAmount;                                                  // 0x0084   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      MaxAmountOverrideActorStat;                                 // 0x0088   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	int32_t                                            ChargeCount;                                                // 0x008C   (0x0004)  
	TEnumAsByte<ESBActorStatType>                      ChargeOverrideActorStat;                                    // 0x0090   (0x0001)  
	bool                                               AbleBroken;                                                 // 0x0091   (0x0001)  
	bool                                               AblePrice;                                                  // 0x0092   (0x0001)  
	bool                                               AbleDrop;                                                   // 0x0093   (0x0001)  
	int32_t                                            RequireLevel;                                               // 0x0094   (0x0004)  
	FString                                            StudioAsset3D;                                              // 0x0098   (0x0010)  
	FString                                            Asset3D;                                                    // 0x00A8   (0x0010)  
	TArray<FName>                                      Asset3DArg;                                                 // 0x00B8   (0x0010)  
	float                                              AssetZOffset;                                               // 0x00C8   (0x0004)  
	float                                              Asset3DScale;                                               // 0x00CC   (0x0004)  
	FString                                            Asset2D;                                                    // 0x00D0   (0x0010)  
	FString                                            AlbumAsset2D;                                               // 0x00E0   (0x0010)  
	FString                                            SpecialRewardAsset2D;                                       // 0x00F0   (0x0010)  
	bool                                               FastNotifySpecialReward;                                    // 0x0100   (0x0001)  
	unsigned char                                      UnknownData13_6[0x7];                                       // 0x0101   (0x0007)  MISSED
	FString                                            GainAllowShowPath;                                          // 0x0108   (0x0010)  
	FString                                            AfterGainShowPath;                                          // 0x0118   (0x0010)  
	FName                                              AfterGainShowParam;                                         // 0x0128   (0x0008)  
	float                                              ActorBlockTime;                                             // 0x0130   (0x0004)  
	bool                                               InteractionImmidateUse;                                     // 0x0134   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0135   (0x0003)  MISSED
	float                                              InteractionDist;                                            // 0x0138   (0x0004)  
	bool                                               AutoInteraction;                                            // 0x013C   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x013D   (0x0003)  MISSED
	float                                              AutoInteractionDist;                                        // 0x0140   (0x0004)  
	FName                                              EquipableAlias;                                             // 0x0144   (0x0008)  
	FName                                              ConsumableAlias;                                            // 0x014C   (0x0008)  
	FName                                              SkillEquipableAlias;                                        // 0x0154   (0x0008)  
	FName                                              EquipmentAlias;                                             // 0x015C   (0x0008)  
	FName                                              EquipmentAlias2;                                            // 0x0164   (0x0008)  
	unsigned char                                      UnknownData16_6[0x4];                                       // 0x016C   (0x0004)  MISSED
	TArray<TEnumAsByte<ESBEquipType>>                  ApplyEquipType;                                             // 0x0170   (0x0010)  
	FName                                              BulletAlias;                                                // 0x0180   (0x0008)  
	TEnumAsByte<ESBCharacterLevelType>                 AutoCharacterLevelUpType;                                   // 0x0188   (0x0001)  
	TEnumAsByte<ESBItemNotificationType>               NotiType;                                                   // 0x0189   (0x0001)  
	TEnumAsByte<ESBScanDisplayType>                    ScanDisplayType;                                            // 0x018A   (0x0001)  
	unsigned char                                      UnknownData17_6[0x1];                                       // 0x018B   (0x0001)  MISSED
	FName                                              ScanDisplayGroup;                                           // 0x018C   (0x0008)  
	float                                              WeightMin;                                                  // 0x0194   (0x0004)  
	float                                              WeightMax;                                                  // 0x0198   (0x0004)  
	FName                                              LureAlias;                                                  // 0x019C   (0x0008)  
	bool                                               bMaintainNewGamePlus;                                       // 0x01A4   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x01A5   (0x0003)  MISSED
	uint32_t                                           MaintainMaxAmountForFirstNewGamePlus;                       // 0x01A8   (0x0004)  
	FName                                              ValidConditionGroup;                                        // 0x01AC   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x01B4   (0x0008)  
	unsigned char                                      UnknownData19_7[0x4];                                       // 0x01BC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneEnvNotifyInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBZoneEnvNotifyInfo
{ 
	float                                              NotifyTime;                                                 // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FName>                                      NotifyZoneEvent;                                            // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBZoneEnvProgressNotifyInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBZoneEnvProgressNotifyInfo
{ 
	TEnumAsByte<ESBEnvProgressNotifyFireType>          NotifyFireType;                                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FSBZoneEnvNotifyInfo>                       ProgressNotifyList;                                         // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBZoneEnvTargetStateInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBZoneEnvTargetStateInfo
{ 
	TArray<FName>                                      ToStateTagNameList;                                         // 0x0000   (0x0010)  
	TArray<FString>                                    TransitSequenceList;                                        // 0x0010   (0x0010)  
	TArray<FString>                                    TransitActorTemplate;                                       // 0x0020   (0x0010)  
	TArray<FString>                                    AttachTagName;                                              // 0x0030   (0x0010)  
};

/// Struct /Script/SB.SBZoneEnvSpawnTableProperty
/// Size: 0x0508 (1288 bytes) (0x000010 - 0x000508) align n/a MaxSize: 0x0508
struct FSBZoneEnvSpawnTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Zone;                                                       // 0x0014   (0x0008)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FName>                                      ZoneList;                                                   // 0x0020   (0x0010)  
	FName                                              EnvActorName;                                               // 0x0030   (0x0008)  
	FString                                            EnvBPPath;                                                  // 0x0038   (0x0010)  
	FName                                              SpawnPointName;                                             // 0x0048   (0x0008)  
	FName                                              SpawnConditionGroup;                                        // 0x0050   (0x0008)  
	FName                                              EnvAlias;                                                   // 0x0058   (0x0008)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x0060   (0x0001)  
	TEnumAsByte<ESBZoneEnvActiveState>                 InitEnvActiveState;                                         // 0x0061   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x0062   (0x0002)  MISSED
	FName                                              InitStateTag;                                               // 0x0064   (0x0008)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x006C   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	FName                                              EventTagName1;                                              // 0x0070   (0x0008)  
	TArray<FName>                                      TagEventList1;                                              // 0x0078   (0x0010)  
	FName                                              EventTagName2;                                              // 0x0088   (0x0008)  
	TArray<FName>                                      TagEventList2;                                              // 0x0090   (0x0010)  
	FName                                              EventTagName3;                                              // 0x00A0   (0x0008)  
	TArray<FName>                                      TagEventList3;                                              // 0x00A8   (0x0010)  
	FName                                              EventTagName4;                                              // 0x00B8   (0x0008)  
	TArray<FName>                                      TagEventList4;                                              // 0x00C0   (0x0010)  
	FName                                              EventTagName5;                                              // 0x00D0   (0x0008)  
	TArray<FName>                                      TagEventList5;                                              // 0x00D8   (0x0010)  
	FName                                              EventTagName6;                                              // 0x00E8   (0x0008)  
	TArray<FName>                                      TagEventList6;                                              // 0x00F0   (0x0010)  
	FName                                              EventTagName7;                                              // 0x0100   (0x0008)  
	TArray<FName>                                      TagEventList7;                                              // 0x0108   (0x0010)  
	FName                                              EventTagName8;                                              // 0x0118   (0x0008)  
	TArray<FName>                                      TagEventList8;                                              // 0x0120   (0x0010)  
	FName                                              EventTagName9;                                              // 0x0130   (0x0008)  
	TArray<FName>                                      TagEventList9;                                              // 0x0138   (0x0010)  
	FName                                              EventTagName10;                                             // 0x0148   (0x0008)  
	TArray<FName>                                      TagEventList10;                                             // 0x0150   (0x0010)  
	FName                                              RewardTagName1;                                             // 0x0160   (0x0008)  
	FName                                              State_RewardGroup1;                                         // 0x0168   (0x0008)  
	FName                                              RewardTagName2;                                             // 0x0170   (0x0008)  
	FName                                              State_RewardGroup2;                                         // 0x0178   (0x0008)  
	FName                                              RewardTagName3;                                             // 0x0180   (0x0008)  
	FName                                              State_RewardGroup3;                                         // 0x0188   (0x0008)  
	FName                                              RewardTagName4;                                             // 0x0190   (0x0008)  
	FName                                              State_RewardGroup4;                                         // 0x0198   (0x0008)  
	FName                                              RewardTagName5;                                             // 0x01A0   (0x0008)  
	FName                                              State_RewardGroup5;                                         // 0x01A8   (0x0008)  
	FName                                              RewardTagName6;                                             // 0x01B0   (0x0008)  
	FName                                              State_RewardGroup6;                                         // 0x01B8   (0x0008)  
	FName                                              RewardTagName7;                                             // 0x01C0   (0x0008)  
	FName                                              State_RewardGroup7;                                         // 0x01C8   (0x0008)  
	FName                                              RewardTagName8;                                             // 0x01D0   (0x0008)  
	FName                                              State_RewardGroup8;                                         // 0x01D8   (0x0008)  
	FName                                              RewardTagName9;                                             // 0x01E0   (0x0008)  
	FName                                              State_RewardGroup9;                                         // 0x01E8   (0x0008)  
	FName                                              RewardTagName10;                                            // 0x01F0   (0x0008)  
	FName                                              State_RewardGroup10;                                        // 0x01F8   (0x0008)  
	FString                                            RewardSpawnFormationAsset;                                  // 0x0200   (0x0010)  
	TEnumAsByte<ESBItemBucketType>                     RewardSpawnBucketType;                                      // 0x0210   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               RewardOverrideSaveType;                                     // 0x0211   (0x0001)  
	unsigned char                                      UnknownData14_6[0x2];                                       // 0x0212   (0x0002)  MISSED
	float                                              InteractionRange;                                           // 0x0214   (0x0004)  
	float                                              InteractionUpperHeight;                                     // 0x0218   (0x0004)  
	float                                              InteractionLowerHeight;                                     // 0x021C   (0x0004)  
	float                                              InteractionAngle;                                           // 0x0220   (0x0004)  
	float                                              InteractionTargetRange;                                     // 0x0224   (0x0004)  
	float                                              InteractionDotUIAngle;                                      // 0x0228   (0x0004)  
	unsigned char                                      UnknownData15_6[0x4];                                       // 0x022C   (0x0004)  MISSED
	FString                                            Interaction;                                                // 0x0230   (0x0010)  
	TArray<FName>                                      ActiveEnterEvents;                                          // 0x0240   (0x0010)  
	TArray<FName>                                      ActiveLeaveEvents;                                          // 0x0250   (0x0010)  
	TArray<FName>                                      LinkEnvSpawnList;                                           // 0x0260   (0x0010)  
	FName                                              TargetCamp;                                                 // 0x0270   (0x0008)  
	int32_t                                            TriggerCount;                                               // 0x0278   (0x0004)  
	FName                                              TriggerCondition;                                           // 0x027C   (0x0008)  
	unsigned char                                      UnknownData16_6[0x4];                                       // 0x0284   (0x0004)  MISSED
	TArray<FName>                                      TriggerTrueEvents;                                          // 0x0288   (0x0010)  
	TArray<FName>                                      TriggerFalseEvents;                                         // 0x0298   (0x0010)  
	FName                                              TrueEnvState;                                               // 0x02A8   (0x0008)  
	FName                                              FalseEnvState;                                              // 0x02B0   (0x0008)  
	TArray<float>                                      InitProgressValue;                                          // 0x02B8   (0x0010)  
	TArray<float>                                      StartProgressValue;                                         // 0x02C8   (0x0010)  
	TArray<float>                                      EndProgressValue;                                           // 0x02D8   (0x0010)  
	TArray<FSBZoneEnvProgressNotifyInfo>               ProgressNotifyEventList;                                    // 0x02E8   (0x0010)  
	FString                                            Description;                                                // 0x02F8   (0x0010)  
	FString                                            PuzzleCompareData;                                          // 0x0308   (0x0010)  
	TEnumAsByte<ESBPuzzleDataType>                     PuzzleDataType;                                             // 0x0318   (0x0001)  
	TEnumAsByte<ESBEquation>                           PuzzleEq;                                                   // 0x0319   (0x0001)  
	unsigned char                                      UnknownData17_6[0x2];                                       // 0x031A   (0x0002)  MISSED
	FName                                              PuzzleInputText1;                                           // 0x031C   (0x0008)  
	FName                                              PuzzleInputText2;                                           // 0x0324   (0x0008)  
	FName                                              PuzzleInputText3;                                           // 0x032C   (0x0008)  
	FName                                              PuzzleInputText4;                                           // 0x0334   (0x0008)  
	unsigned char                                      UnknownData18_6[0x4];                                       // 0x033C   (0x0004)  MISSED
	TArray<FString>                                    PuzzleInputTextList5;                                       // 0x0340   (0x0010)  
	TArray<FName>                                      SequenceTagNameList;                                        // 0x0350   (0x0010)  
	TArray<FString>                                    OutTransitTheaterList;                                      // 0x0360   (0x0010)  
	TArray<FString>                                    OutTransitSequenceList;                                     // 0x0370   (0x0010)  
	TArray<FString>                                    OutTransitTemplatePath;                                     // 0x0380   (0x0010)  
	TArray<FString>                                    OutTransitAttachTagNames;                                   // 0x0390   (0x0010)  
	TArray<FString>                                    ActiveTheaterList;                                          // 0x03A0   (0x0010)  
	TArray<FString>                                    ActiveSequenceList;                                         // 0x03B0   (0x0010)  
	TArray<FString>                                    ActiveTemplatePath;                                         // 0x03C0   (0x0010)  
	TArray<FString>                                    ActiveAttachTagNames;                                       // 0x03D0   (0x0010)  
	TArray<FString>                                    LoopSequenceList;                                           // 0x03E0   (0x0010)  
	TArray<FString>                                    LoopTemplatePath;                                           // 0x03F0   (0x0010)  
	TArray<FString>                                    LoopAttachTagNames;                                         // 0x0400   (0x0010)  
	TArray<bool>                                       ForceLoopStopWhenChangeState;                               // 0x0410   (0x0010)  
	TArray<bool>                                       DontStopLoopSequenceAtDestoryOptionList;                    // 0x0420   (0x0010)  
	TArray<bool>                                       UseTemplateTransformList;                                   // 0x0430   (0x0010)  
	TArray<FSBZoneEnvTargetStateInfo>                  ToTargetStateInfoList;                                      // 0x0440   (0x0010)  
	TArray<TEnumAsByte<ESBSequencePlayTransformType>>  PlayTransformOwnerTypeList;                                 // 0x0450   (0x0010)  
	TArray<FName>                                      ShopDataList;                                               // 0x0460   (0x0010)  
	FVector                                            SpawnPosition;                                              // 0x0470   (0x000C)  
	bool                                               bResetByWarpSafeLocation;                                   // 0x047C   (0x0001)  
	TEnumAsByte<ESBZoneEnvResetFilterType>             ResetFilterType;                                            // 0x047D   (0x0001)  
	unsigned char                                      UnknownData19_6[0x2];                                       // 0x047E   (0x0002)  MISSED
	FName                                              ResetFilterCondition;                                       // 0x0480   (0x0008)  
	TEnumAsByte<ESBUIWorldMapTargetDisplayType>        WorldMapDisplayType;                                        // 0x0488   (0x0001)  
	unsigned char                                      UnknownData20_6[0x7];                                       // 0x0489   (0x0007)  MISSED
	FString                                            WorldMapDisplayTitle;                                       // 0x0490   (0x0010)  
	FString                                            WorldMapDisplayDesc;                                        // 0x04A0   (0x0010)  
	FName                                              WorldMapDisplayConditionGroup;                              // 0x04B0   (0x0008)  
	FName                                              WorldMapIconTag;                                            // 0x04B8   (0x0008)  
	float                                              WorldMapOverlapDistance;                                    // 0x04C0   (0x0004)  
	float                                              OverrideCustomTrackNearDistance;                            // 0x04C4   (0x0004)  
	bool                                               DontCheckZAxisCustomTrackNear;                              // 0x04C8   (0x0001)  
	TEnumAsByte<ESBInteractRelevantType>               InteractionRelevantType;                                    // 0x04C9   (0x0001)  
	bool                                               bMaintainNewGamePlus;                                       // 0x04CA   (0x0001)  
	unsigned char                                      UnknownData21_6[0x1];                                       // 0x04CB   (0x0001)  MISSED
	float                                              SaveMinIntervalByAutoActivateCamp;                          // 0x04CC   (0x0004)  
	ESBCustomDepthStencilValue                         ScanOverrideStencilValue;                                   // 0x04D0   (0x0004)  
	float                                              OverrideNikkeGoodsDetectDistanceMax;                        // 0x04D4   (0x0004)  
	TArray<FName>                                      InteractionDisable_Condition;                               // 0x04D8   (0x0010)  
	FName                                              InteractionDisable_ConditionGroup;                          // 0x04E8   (0x0008)  
	FName                                              NikkeLostArticle;                                           // 0x04F0   (0x0008)  
	FName                                              NikkeFriendlyNpc;                                           // 0x04F8   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0500   (0x0008)  
};

/// Struct /Script/SB.SBEffectDataList
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBEffectDataList
{ 
	TArray<FName>                                      EffectList;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBZoneEventDataList
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBZoneEventDataList
{ 
	TArray<FName>                                      ZoneEventList;                                              // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBZoneEnvTableProperty
/// Size: 0x01C8 (456 bytes) (0x000010 - 0x0001C8) align n/a MaxSize: 0x01C8
struct FSBZoneEnvTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBEnvironmentType>                    EnvType;                                                    // 0x0014   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	TArray<FName>                                      StateTagNameList;                                           // 0x0018   (0x0010)  
	TArray<FSBEffectDataList>                          StateEffectList;                                            // 0x0028   (0x0010)  
	TArray<FSBZoneEventDataList>                       StateZoneEventList;                                         // 0x0038   (0x0010)  
	TArray<FName>                                      StateConditionGroupList;                                    // 0x0048   (0x0010)  
	TArray<FName>                                      StateRewardGroupList;                                       // 0x0058   (0x0010)  
	TArray<FString>                                    StateCasterShowPathList;                                    // 0x0068   (0x0010)  
	TArray<int32_t>                                    StateProgressCountList;                                     // 0x0078   (0x0010)  
	TArray<FName>                                      StateProgressChangeTagNameList;                             // 0x0088   (0x0010)  
	TEnumAsByte<ESBItemBucketType>                     RewardSpawnBucketType;                                      // 0x0098   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               RewardOverrideSaveType;                                     // 0x0099   (0x0001)  
	unsigned char                                      UnknownData07_6[0x6];                                       // 0x009A   (0x0006)  MISSED
	FString                                            RewardSpawnFormationAsset;                                  // 0x00A0   (0x0010)  
	FString                                            EnvObjectMaterial;                                          // 0x00B0   (0x0010)  
	bool                                               bUseAutoActivateCamp;                                       // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x00C1   (0x0007)  MISSED
	TArray<FName>                                      ActiveEnterEvents;                                          // 0x00C8   (0x0010)  
	TArray<FName>                                      ActiveLeaveEvents;                                          // 0x00D8   (0x0010)  
	TArray<float>                                      ProgressMaxValue;                                           // 0x00E8   (0x0010)  
	TArray<bool>                                       bProgressAlwaysUpdates;                                     // 0x00F8   (0x0010)  
	TArray<FSBZoneEnvProgressNotifyInfo>               ProgressNotifyEventList;                                    // 0x0108   (0x0010)  
	int32_t                                            TriggerCount;                                               // 0x0118   (0x0004)  
	FName                                              TriggerCondition;                                           // 0x011C   (0x0008)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	TArray<FName>                                      TriggerTrueEvents;                                          // 0x0128   (0x0010)  
	TArray<FName>                                      TriggerFalseEvents;                                         // 0x0138   (0x0010)  
	FName                                              TrueEnvState;                                               // 0x0148   (0x0008)  
	FName                                              FalseEnvState;                                              // 0x0150   (0x0008)  
	float                                              InteractionRange;                                           // 0x0158   (0x0004)  
	float                                              InteractionUpperHeight;                                     // 0x015C   (0x0004)  
	float                                              InteractionLowerHeight;                                     // 0x0160   (0x0004)  
	float                                              InteractionAngle;                                           // 0x0164   (0x0004)  
	float                                              InteractionTargetRange;                                     // 0x0168   (0x0004)  
	float                                              InteractionDotUIAngle;                                      // 0x016C   (0x0004)  
	FString                                            Interaction;                                                // 0x0170   (0x0010)  
	bool                                               bForceFoldInteraction;                                      // 0x0180   (0x0001)  
	TEnumAsByte<ESBZoneCampType>                       CampType;                                                   // 0x0181   (0x0001)  
	TEnumAsByte<ESBZoneCampObjectType>                 CampObjectType;                                             // 0x0182   (0x0001)  
	unsigned char                                      UnknownData10_6[0x5];                                       // 0x0183   (0x0005)  MISSED
	FString                                            PuzzleCompareData;                                          // 0x0188   (0x0010)  
	TEnumAsByte<ESBPuzzleDataType>                     PuzzleDataType;                                             // 0x0198   (0x0001)  
	TEnumAsByte<ESBEquation>                           PuzzleEq;                                                   // 0x0199   (0x0001)  
	TEnumAsByte<ESBScanDisplayType>                    ScanDisplayType;                                            // 0x019A   (0x0001)  
	unsigned char                                      UnknownData11_6[0x1];                                       // 0x019B   (0x0001)  MISSED
	float                                              NikkeGoodsDetectDistance_Max;                               // 0x019C   (0x0004)  
	TArray<FName>                                      NikkeDefenseArea_EnemyEnter_Events;                         // 0x01A0   (0x0010)  
	TArray<FName>                                      NikkeDefenseArea_EnemyEmpty_Events;                         // 0x01B0   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x01C0   (0x0008)  
};

/// Struct /Script/SB.SBConditionGroupTableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBConditionGroupTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TArray<FName>                                      Conditions;                                                 // 0x0018   (0x0010)  
	TEnumAsByte<ESBEquation>                           ConditionEq;                                                // 0x0028   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	FName                                              ConditionGroup1;                                            // 0x002C   (0x0008)  
	TEnumAsByte<ESBEquation>                           GroupEq1;                                                   // 0x0034   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	FName                                              ConditionGroup2;                                            // 0x0038   (0x0008)  
	TEnumAsByte<ESBEquation>                           GroupEq2;                                                   // 0x0040   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x0044   (0x0008)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBConditionTableProperty
/// Size: 0x0078 (120 bytes) (0x000010 - 0x000078) align n/a MaxSize: 0x0078
struct FSBConditionTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBConditionType>                      ConditionType;                                              // 0x0014   (0x0001)  
	TEnumAsByte<ESBEquation>                           ConditionEq;                                                // 0x0015   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FString                                            CustomStr01;                                                // 0x0018   (0x0010)  
	FString                                            CustomStr02;                                                // 0x0028   (0x0010)  
	FString                                            CustomStr03;                                                // 0x0038   (0x0010)  
	FString                                            CheckStrValue;                                              // 0x0048   (0x0010)  
	int32_t                                            CheckValue;                                                 // 0x0058   (0x0004)  
	TEnumAsByte<ESBConditionCalcuationType>            CheckStatCalcType;                                          // 0x005C   (0x0001)  
	TEnumAsByte<ESBZoneEventActorTarget>               ActorTargetType;                                            // 0x005D   (0x0001)  
	ESBGameOptionType                                  GameOptionType;                                             // 0x005E   (0x0001)  
	bool                                               bUseActorTragetType;                                        // 0x005F   (0x0001)  
	FString                                            FailNotifyMsg;                                              // 0x0060   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0070   (0x0008)  
};

/// Struct /Script/SB.SBQuestTaskTableProperty
/// Size: 0x0128 (296 bytes) (0x000010 - 0x000128) align n/a MaxSize: 0x0128
struct FSBQuestTaskTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FText                                              Description;                                                // 0x0018   (0x0018)  
	TEnumAsByte<ESBQuestMissionType>                   MissionType;                                                // 0x0030   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              OwnerFilter;                                                // 0x0034   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TArray<FName>                                      TargetFilter;                                               // 0x0040   (0x0010)  
	TArray<FName>                                      TrackingTargetFilter;                                       // 0x0050   (0x0010)  
	FName                                              TrackingConditionGroup;                                     // 0x0060   (0x0008)  
	TArray<FName>                                      CustomNameArray;                                            // 0x0068   (0x0010)  
	FString                                            CustomStr;                                                  // 0x0078   (0x0010)  
	FString                                            CustomStr2;                                                 // 0x0088   (0x0010)  
	int32_t                                            CustomInt;                                                  // 0x0098   (0x0004)  
	int32_t                                            CustomInt2;                                                 // 0x009C   (0x0004)  
	float                                              CustomFloat;                                                // 0x00A0   (0x0004)  
	int32_t                                            ConditionCount;                                             // 0x00A4   (0x0004)  
	TEnumAsByte<ESBQuestTaskUIType>                    UIType;                                                     // 0x00A8   (0x0001)  
	ESBQuestTaskDescriptionUIType                      DescriptionUIType;                                          // 0x00A9   (0x0001)  
	TEnumAsByte<ESBUITaskConditionDisplayType>         TaskConditionUIType;                                        // 0x00AA   (0x0001)  
	bool                                               HideHUD;                                                    // 0x00AB   (0x0001)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	TArray<TEnumAsByte<ESBQuestTaskEventActionType>>   TaskStartEventTypeList;                                     // 0x00B0   (0x0010)  
	TArray<FName>                                      TaskStartEventSpawnAliasList;                               // 0x00C0   (0x0010)  
	TArray<TEnumAsByte<ESBQuestTaskEventActionType>>   TaskCompleteEventTypeList;                                  // 0x00D0   (0x0010)  
	TArray<FName>                                      TaskCompleteEventSpawnAliasList;                            // 0x00E0   (0x0010)  
	TArray<TEnumAsByte<ESBQuestTaskEventActionType>>   TaskProgressEventTypeList;                                  // 0x00F0   (0x0010)  
	TArray<int32_t>                                    TaskProgressEventProgressCountList;                         // 0x0100   (0x0010)  
	TArray<FName>                                      TaskProgressEventSpawnAliasList;                            // 0x0110   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0120   (0x0008)  
};

/// Struct /Script/SB.SBQuestTaskGroupTableProperty
/// Size: 0x0118 (280 bytes) (0x000010 - 0x000118) align n/a MaxSize: 0x0118
struct FSBQuestTaskGroupTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FText                                              Description;                                                // 0x0018   (0x0018)  
	TArray<FSBQuestTaskContainer>                      TaskContainerArray;                                         // 0x0030   (0x0010)  
	TArray<FName>                                      ActivateEvent;                                              // 0x0040   (0x0010)  
	TArray<FName>                                      ProgressEvent;                                              // 0x0050   (0x0010)  
	TArray<FName>                                      CompleteEvent;                                              // 0x0060   (0x0010)  
	TArray<FName>                                      QuestPathStartNodes;                                        // 0x0070   (0x0010)  
	TArray<FString>                                    QuestPathWorlds;                                            // 0x0080   (0x0010)  
	TArray<FString>                                    QuestPathAreas;                                             // 0x0090   (0x0010)  
	FName                                              RestartRule;                                                // 0x00A0   (0x0008)  
	bool                                               bShowGreenDot;                                              // 0x00A8   (0x0001)  
	ESBQuestWarpType                                   WarpType;                                                   // 0x00A9   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x00AA   (0x0006)  MISSED
	FText                                              WarpUIDescription;                                          // 0x00B0   (0x0018)  
	FName                                              WarpConditionGroup;                                         // 0x00C8   (0x0008)  
	FName                                              WarpTargetCamp;                                             // 0x00D0   (0x0008)  
	FName                                              WarpTargetWorld;                                            // 0x00D8   (0x0008)  
	FVector                                            WarpTargetLocation;                                         // 0x00E0   (0x000C)  
	FRotator                                           WarpTargetRotation;                                         // 0x00EC   (0x000C)  
	FName                                              WarpTargetSpawnPoint;                                       // 0x00F8   (0x0008)  
	FName                                              WarpChoiceYesPlayTheater;                                   // 0x0100   (0x0008)  
	FName                                              WarpChoiceNoPlayTheater;                                    // 0x0108   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0110   (0x0008)  
};

/// Struct /Script/SB.SBEventQuestTableProperty
/// Size: 0x0038 (56 bytes) (0x000010 - 0x000038) align n/a MaxSize: 0x0038
struct FSBEventQuestTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Quest;                                                      // 0x0014   (0x0008)  
	TEnumAsByte<ESBQuestEventTargetType>               TargetType;                                                 // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              EventCondition;                                             // 0x0020   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0028   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0030   (0x0008)  
};

/// Struct /Script/SB.SBQuestMissionTableProperty
/// Size: 0x0080 (128 bytes) (0x000010 - 0x000080) align n/a MaxSize: 0x0080
struct FSBQuestMissionTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBQuestMissionType>                   MissionType;                                                // 0x0014   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              OwnerFilter;                                                // 0x0018   (0x0008)  
	FName                                              TargetFilter;                                               // 0x0020   (0x0008)  
	FString                                            CustomStr;                                                  // 0x0028   (0x0010)  
	int32_t                                            CustomValue;                                                // 0x0038   (0x0004)  
	int32_t                                            ConditionCount;                                             // 0x003C   (0x0004)  
	float                                              Radius;                                                     // 0x0040   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<FName>                                      ActivateEvent;                                              // 0x0048   (0x0010)  
	TArray<FName>                                      ProgressEvent;                                              // 0x0058   (0x0010)  
	TArray<FName>                                      CompleteEvent;                                              // 0x0068   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0078   (0x0008)  
};

/// Struct /Script/SB.SBQuestTableProperty
/// Size: 0x0188 (392 bytes) (0x000010 - 0x000188) align n/a MaxSize: 0x0188
struct FSBQuestTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBQuestType>                          QuestType;                                                  // 0x0014   (0x0001)  
	ESBQuestUIType                                     QuestUIType;                                                // 0x0015   (0x0001)  
	ESBQuestRequestType                                RequestType;                                                // 0x0016   (0x0001)  
	ESBDisplayRequestBoardType                         DisplayRequestBoardType;                                    // 0x0017   (0x0001)  
	FName                                              NextQuest;                                                  // 0x0018   (0x0008)  
	FText                                              TitleName_;                                                 // 0x0020   (0x0018)  
	FText                                              Description_;                                               // 0x0038   (0x0018)  
	FText                                              RequestDescription;                                         // 0x0050   (0x0018)  
	FText                                              Report;                                                     // 0x0068   (0x0018)  
	FName                                              reward;                                                     // 0x0080   (0x0008)  
	FName                                              FailAchievementCondition;                                   // 0x0088   (0x0008)  
	FName                                              FailConditionGroup;                                         // 0x0090   (0x0008)  
	TEnumAsByte<ESBConditionEventType>                 FailConditionEventType;                                     // 0x0098   (0x0001)  
	TEnumAsByte<ESBConditionResultType>                FailConditionResultType;                                    // 0x0099   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x009A   (0x0002)  MISSED
	FName                                              AvailableConditionGroup;                                    // 0x009C   (0x0008)  
	FName                                              ValidConditionGroup;                                        // 0x00A4   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	FString                                            AcquireSound;                                               // 0x00B0   (0x0010)  
	TEnumAsByte<ESBSequencerSubtitleType>              AcquireSubtitleType;                                        // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x00C1   (0x0003)  MISSED
	float                                              AcquireSubtitleDuration;                                    // 0x00C4   (0x0004)  
	FText                                              AcquireSubtitleTitle;                                       // 0x00C8   (0x0018)  
	FText                                              AcquireSubtitleMessage;                                     // 0x00E0   (0x0018)  
	TArray<FName>                                      RequiredQuestArray;                                         // 0x00F8   (0x0010)  
	TArray<FName>                                      TaskGroupAlias;                                             // 0x0108   (0x0010)  
	TArray<FName>                                      AcquireEventArray;                                          // 0x0118   (0x0010)  
	TArray<FName>                                      CompleteEventArray;                                         // 0x0128   (0x0010)  
	TArray<FName>                                      QuestPathStartNodes;                                        // 0x0138   (0x0010)  
	TArray<FString>                                    QuestPathWorlds;                                            // 0x0148   (0x0010)  
	TArray<TEnumAsByte<ESBQuestTaskEventActionType>>   AcquireEventActionTypeList;                                 // 0x0158   (0x0010)  
	TArray<FName>                                      AcquireEventActionAliasList;                                // 0x0168   (0x0010)  
	bool                                               bMaintainNewGamePlus;                                       // 0x0178   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0179   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x017C   (0x0008)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x0184   (0x0004)  MISSED
};

/// Struct /Script/SB.SBQuestEventInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBQuestEventInfo
{ 
	FName                                              EventAlias;                                                 // 0x0000   (0x0008)  
};

/// Struct /Script/SB.SBConditionTriggerTableProperty
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000020) align n/a MaxSize: 0x0020
struct FSBConditionTriggerTableProperty : FSBTablePropertyBase
{ 
	TEnumAsByte<ESBConditionEventType>                 ConditionType;                                              // 0x0010   (0x0001)  
	TEnumAsByte<ESBConditionResultType>                ResultType;                                                 // 0x0011   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0012   (0x0002)  MISSED
	FName                                              FileSuffix;                                                 // 0x0014   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCharacterTribeTableProperty
/// Size: 0x0098 (152 bytes) (0x000010 - 0x000098) align n/a MaxSize: 0x0098
struct FSBCharacterTribeTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              TargetTribe1;                                               // 0x0014   (0x0008)  
	TEnumAsByte<ESBTribeRelation>                      TargetRelation1;                                            // 0x001C   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              TargetTribe2;                                               // 0x0020   (0x0008)  
	TEnumAsByte<ESBTribeRelation>                      TargetRelation2;                                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	FName                                              TargetTribe3;                                               // 0x002C   (0x0008)  
	TEnumAsByte<ESBTribeRelation>                      TargetRelation3;                                            // 0x0034   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	FName                                              TargetTribe4;                                               // 0x0038   (0x0008)  
	TEnumAsByte<ESBTribeRelation>                      TargetRelation4;                                            // 0x0040   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FName                                              TargetTribe5;                                               // 0x0044   (0x0008)  
	TEnumAsByte<ESBTribeRelation>                      TargetRelation5;                                            // 0x004C   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	FName                                              TargetTribe6;                                               // 0x0050   (0x0008)  
	TEnumAsByte<ESBTribeRelation>                      TargetRelation6;                                            // 0x0058   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	FName                                              TargetTribe7;                                               // 0x005C   (0x0008)  
	TEnumAsByte<ESBTribeRelation>                      TargetRelation7;                                            // 0x0064   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	FName                                              TargetTribe8;                                               // 0x0068   (0x0008)  
	TEnumAsByte<ESBTribeRelation>                      TargetRelation8;                                            // 0x0070   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	FName                                              TargetTribe9;                                               // 0x0074   (0x0008)  
	TEnumAsByte<ESBTribeRelation>                      TargetRelation9;                                            // 0x007C   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	FName                                              TargetTribe10;                                              // 0x0080   (0x0008)  
	TEnumAsByte<ESBTribeRelation>                      TargetRelation10;                                           // 0x0088   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x008C   (0x0008)  
	unsigned char                                      UnknownData21_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelTargetFilterTableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBLevelTargetFilterTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBLevelTargetActor>                   TargetType;                                                 // 0x0014   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              EventSpawnAlias;                                            // 0x0018   (0x0008)  
	FName                                              TargetAlias;                                                // 0x0020   (0x0008)  
	FName                                              SpawnPointName;                                             // 0x0028   (0x0008)  
	FName                                              EnvSpawnAlias;                                              // 0x0030   (0x0008)  
	FName                                              EnvAlias;                                                   // 0x0038   (0x0008)  
	int32_t                                            TargetPriority;                                             // 0x0040   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0044   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCharacterWeightTableProperty
/// Size: 0x0048 (72 bytes) (0x000010 - 0x000048) align n/a MaxSize: 0x0048
struct FSBCharacterWeightTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	float                                              Small_MoveXY;                                               // 0x0014   (0x0004)  
	float                                              Small_MoveZ;                                                // 0x0018   (0x0004)  
	float                                              Normal_MoveXY;                                              // 0x001C   (0x0004)  
	float                                              Normal_MoveZ;                                               // 0x0020   (0x0004)  
	float                                              Medium_MoveXY;                                              // 0x0024   (0x0004)  
	float                                              Medium_MoveZ;                                               // 0x0028   (0x0004)  
	float                                              Large_MoveXY;                                               // 0x002C   (0x0004)  
	float                                              Large_MoveZ;                                                // 0x0030   (0x0004)  
	float                                              SuperLarge_MoveXY;                                          // 0x0034   (0x0004)  
	float                                              SuperLarge_MoveZ;                                           // 0x0038   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x003C   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/SB.SBCharacterAppearanceTableProperty
/// Size: 0x0158 (344 bytes) (0x000010 - 0x000158) align n/a MaxSize: 0x0158
struct FSBCharacterAppearanceTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              CharacterAssetPath;                                         // 0x0014   (0x0008)  
	float                                              CapsuleRadius;                                              // 0x001C   (0x0004)  
	float                                              CapsuleHalfHeight;                                          // 0x0020   (0x0004)  
	FName                                              BodyMesh;                                                   // 0x0024   (0x0008)  
	FName                                              FaceMesh;                                                   // 0x002C   (0x0008)  
	FName                                              BodyAnimAssetPath;                                          // 0x0034   (0x0008)  
	FName                                              FaceAnimAssetPath;                                          // 0x003C   (0x0008)  
	TEnumAsByte<ESBMeshAttachType>                     FaceAttachType;                                             // 0x0044   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	FName                                              BattleToPeacefulShowPath;                                   // 0x0048   (0x0008)  
	FName                                              PeacefulToBattleShowPath;                                   // 0x0050   (0x0008)  
	FName                                              PeacefulToBattleShowPath_LockOn;                            // 0x0058   (0x0008)  
	FName                                              BattleToPeacefulShowPath_Move;                              // 0x0060   (0x0008)  
	FName                                              PeacefulToBattleShowPath_Move;                              // 0x0068   (0x0008)  
	FName                                              PeacefulToBattleShowPath_Move_LockOn;                       // 0x0070   (0x0008)  
	FName                                              BattleToPeacefulShowPath_NoneAnim;                          // 0x0078   (0x0008)  
	FName                                              PeacefulToBattleShowPath_NoneAnim;                          // 0x0080   (0x0008)  
	FName                                              PeacefulToBattleShowPath_NoneAnim_LockOn;                   // 0x0088   (0x0008)  
	FName                                              IdleToGroggyShowPath;                                       // 0x0090   (0x0008)  
	FName                                              IdleToDownShowPath;                                         // 0x0098   (0x0008)  
	FName                                              IdleToDeadShowPath;                                         // 0x00A0   (0x0008)  
	FName                                              IdleToAirborneShowPath;                                     // 0x00A8   (0x0008)  
	FName                                              DownToIdleShowPath;                                         // 0x00B0   (0x0008)  
	FName                                              GroggyToIdleShowPath;                                       // 0x00B8   (0x0008)  
	FName                                              AirborneToIdleShowPath;                                     // 0x00C0   (0x0008)  
	FName                                              GroggyToAirborneShowPath;                                   // 0x00C8   (0x0008)  
	FName                                              DownToAirborneShowPath;                                     // 0x00D0   (0x0008)  
	FName                                              GroggyToDownShowPath;                                       // 0x00D8   (0x0008)  
	FName                                              AirborneToDownShowPath;                                     // 0x00E0   (0x0008)  
	FString                                            StartSlopeShow;                                             // 0x00E8   (0x0010)  
	FString                                            EndSlopeShow;                                               // 0x00F8   (0x0010)  
	FName                                              FishingAimToTakeBackShowPath;                               // 0x0108   (0x0008)  
	FName                                              FishingTakeBackToAimShowPath;                               // 0x0110   (0x0008)  
	FName                                              FishingTakeBackToCastingShowPath;                           // 0x0118   (0x0008)  
	FName                                              FishingCastingToWaitShowPath;                               // 0x0120   (0x0008)  
	FName                                              FishingWaitToFightShowPath;                                 // 0x0128   (0x0008)  
	FName                                              FishingWaitToIdleShowPath;                                  // 0x0130   (0x0008)  
	FName                                              FishingFightToIdleShowPath;                                 // 0x0138   (0x0008)  
	FName                                              FishingCatchShowPath;                                       // 0x0140   (0x0008)  
	FName                                              FishingLureChangeShowPath;                                  // 0x0148   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0150   (0x0008)  
};

/// Struct /Script/SB.SBZoneEventActorActiveTableProperty
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000028) align n/a MaxSize: 0x0028
struct FSBZoneEventActorActiveTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	bool                                               Active;                                                     // 0x0014   (0x0001)  
	TEnumAsByte<ESBZoneEventActorTarget>               ToTarget;                                                   // 0x0015   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FName                                              TargetTagName;                                              // 0x0018   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0020   (0x0008)  
};

/// Struct /Script/SB.SBZoneEventUIActionTableProperty
/// Size: 0x0068 (104 bytes) (0x000010 - 0x000068) align n/a MaxSize: 0x0068
struct FSBZoneEventUIActionTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBEventUIActionType>                  UIActionType;                                               // 0x0014   (0x0001)  
	TEnumAsByte<ESBUILogicType>                        UILogicType;                                                // 0x0015   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FName                                              UIActionRequestIndex;                                       // 0x0018   (0x0008)  
	float                                              DrawDuration;                                               // 0x0020   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FString                                            CustomStrValue1;                                            // 0x0028   (0x0010)  
	FString                                            CustomStrValue2;                                            // 0x0038   (0x0010)  
	FName                                              EventCondition;                                             // 0x0048   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0050   (0x0008)  
	TEnumAsByte<ESBZoneEventEventorType>               EventorType;                                                // 0x0058   (0x0001)  
	bool                                               bHUDInputLock;                                              // 0x0059   (0x0001)  
	bool                                               bGameMenuInputLock;                                         // 0x005A   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x005B   (0x0001)  MISSED
	FName                                              FileSuffix;                                                 // 0x005C   (0x0008)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneEventObjControl
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBZoneEventObjControl : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              TargetDataAlias;                                            // 0x0014   (0x0008)  
	FName                                              TargetFilter;                                               // 0x001C   (0x0008)  
	TEnumAsByte<ESBLevelObjectType>                    ObjectType;                                                 // 0x0024   (0x0001)  
	TEnumAsByte<ESBObjectState>                        Activate;                                                   // 0x0025   (0x0001)  
	TEnumAsByte<ESBZoneObjControlActionType>           ObjectControlActionType;                                    // 0x0026   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x0027   (0x0001)  MISSED
	FName                                              RetargetSpawnPointName;                                     // 0x0028   (0x0008)  
	bool                                               bWithStorage;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              EventCondition;                                             // 0x0034   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x003C   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0044   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneEventAIDecoTableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBZoneEventAIDecoTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              TargetFilter;                                               // 0x0014   (0x0008)  
	FName                                              ValueKey;                                                   // 0x001C   (0x0008)  
	TEnumAsByte<ESBBlackboardVarType>                  ValueType;                                                  // 0x0024   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0025   (0x0003)  MISSED
	float                                              CustomValue1;                                               // 0x0028   (0x0004)  
	float                                              CustomValue2;                                               // 0x002C   (0x0004)  
	float                                              CustomValue3;                                               // 0x0030   (0x0004)  
	FName                                              EventCondition;                                             // 0x0034   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x003C   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0044   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneEventItemTableProperty
/// Size: 0x0080 (128 bytes) (0x000010 - 0x000080) align n/a MaxSize: 0x0080
struct FSBZoneEventItemTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBZoneEventItemType>                  ControlType;                                                // 0x0014   (0x0001)  
	TEnumAsByte<ESBZoneSpawnType>                      SpawnType;                                                  // 0x0015   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FName                                              World;                                                      // 0x0018   (0x0008)  
	FName                                              Zone;                                                       // 0x0020   (0x0008)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0028   (0x0001)  
	TEnumAsByte<ESBZoneEventEventorType>               EventorType;                                                // 0x0029   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	FName                                              SpawnPointName;                                             // 0x002C   (0x0008)  
	FName                                              SpawnItemAlias;                                             // 0x0034   (0x0008)  
	int32_t                                            SpawnItemCount;                                             // 0x003C   (0x0004)  
	FName                                              SpawnInfoAlias;                                             // 0x0040   (0x0008)  
	TEnumAsByte<ESBItemBucketType>                     SpawnItemBucketType;                                        // 0x0048   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              EventDelayTime;                                             // 0x004C   (0x0004)  
	TArray<FName>                                      CheckAchievements;                                          // 0x0050   (0x0010)  
	TArray<FName>                                      AcquireZoneEvents;                                          // 0x0060   (0x0010)  
	bool                                               bUseOverrideAutoInteraction;                                // 0x0070   (0x0001)  
	bool                                               bAutoInteraction;                                           // 0x0071   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x0072   (0x0002)  MISSED
	float                                              AutoInteractionDist;                                        // 0x0074   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x0078   (0x0008)  
};

/// Struct /Script/SB.SBTheaterSelectDataTableProperty
/// Size: 0x00D8 (216 bytes) (0x000010 - 0x0000D8) align n/a MaxSize: 0x00D8
struct FSBTheaterSelectDataTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              SelectDataName;                                             // 0x0014   (0x0008)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FName>                                      Conditions;                                                 // 0x0020   (0x0010)  
	FName                                              ConditionGroup;                                             // 0x0030   (0x0008)  
	TEnumAsByte<ESBTheaterInteractionDesignType>       DesignType;                                                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	FText                                              TitleMessageText;                                           // 0x0040   (0x0018)  
	TEnumAsByte<ESBConditionResultVisibleType>         TextVisibleType;                                            // 0x0058   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	FText                                              DisplayText;                                                // 0x0060   (0x0018)  
	FName                                              NextTaskTagName;                                            // 0x0078   (0x0008)  
	int32_t                                            SelectDataPriority;                                         // 0x0080   (0x0004)  
	FName                                              InteractionGraphExec;                                       // 0x0084   (0x0008)  
	bool                                               bUseInputCancel;                                            // 0x008C   (0x0001)  
	TEnumAsByte<ESBQuestSymbolUIType>                  QuestSymbolType;                                            // 0x008D   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x008E   (0x0002)  MISSED
	TArray<FName>                                      QuestSymbol_VisibilityConditionGorup;                       // 0x0090   (0x0010)  
	bool                                               bForceLock;                                                 // 0x00A0   (0x0001)  
	bool                                               bDisableRelevantDot;                                        // 0x00A1   (0x0001)  
	unsigned char                                      UnknownData09_6[0x6];                                       // 0x00A2   (0x0006)  MISSED
	FText                                              SelectedMessagePopupText;                                   // 0x00A8   (0x0018)  
	FString                                            Description;                                                // 0x00C0   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x00D0   (0x0008)  
};

/// Struct /Script/SB.SBZoneEventTheaterTableProperty
/// Size: 0x00F8 (248 bytes) (0x000010 - 0x0000F8) align n/a MaxSize: 0x00F8
struct FSBZoneEventTheaterTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              TheaterAlias;                                               // 0x0014   (0x0008)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FString                                            TheaterAssetPath;                                           // 0x0020   (0x0010)  
	FString                                            LevelSeqAssetPath;                                          // 0x0030   (0x0010)  
	TEnumAsByte<ESBZoneEventTheaterType>               ControlType;                                                // 0x0040   (0x0001)  
	TEnumAsByte<ESBSequencePlayTransformType>          SequencePlayTransformType;                                  // 0x0041   (0x0001)  
	TEnumAsByte<ESBSequencePlayTransformCastType>      SequencePlayTransformCastType;                              // 0x0042   (0x0001)  
	TEnumAsByte<ESBSequenceBindTargetType>             BindTargetType;                                             // 0x0043   (0x0001)  
	float                                              BindTargetStartFadeOutKeepDuration;                         // 0x0044   (0x0004)  
	float                                              BindTargetStartFadeInDuration;                              // 0x0048   (0x0004)  
	bool                                               bSkipFadeOutAtBindTargeType;                                // 0x004C   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	FName                                              EventSpawnAlias;                                            // 0x0050   (0x0008)  
	TArray<FName>                                      BindZoneEnvAlias;                                           // 0x0058   (0x0010)  
	int32_t                                            Priority;                                                   // 0x0068   (0x0004)  
	FName                                              EventCondition;                                             // 0x006C   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0074   (0x0008)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FName>                                      TheaterSelectDataList;                                      // 0x0080   (0x0010)  
	bool                                               bSkipAlreadyPlaySameTheater;                                // 0x0090   (0x0001)  
	bool                                               bUseStartFadeInScreenForLeveStream;                         // 0x0091   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x0092   (0x0002)  MISSED
	float                                              StartFadeInDuration;                                        // 0x0094   (0x0004)  
	float                                              StartFadeInTime;                                            // 0x0098   (0x0004)  
	bool                                               bFirstTimeIntro;                                            // 0x009C   (0x0001)  
	bool                                               bUseEndFadeInScreenForLeveStream;                           // 0x009D   (0x0001)  
	TEnumAsByte<ESBMeshClipingApplyType>               MeshClipingApplyType1;                                      // 0x009E   (0x0001)  
	unsigned char                                      UnknownData11_6[0x1];                                       // 0x009F   (0x0001)  MISSED
	FVector                                            MeshClipingLocation1;                                       // 0x00A0   (0x000C)  
	FRotator                                           MeshClipingRotation1;                                       // 0x00AC   (0x000C)  
	FVector                                            MeshClipingScale1;                                          // 0x00B8   (0x000C)  
	TEnumAsByte<ESBMeshClipingApplyType>               MeshClipingApplyType2;                                      // 0x00C4   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x00C5   (0x0003)  MISSED
	FVector                                            MeshClipingLocation2;                                       // 0x00C8   (0x000C)  
	FRotator                                           MeshClipingRotation2;                                       // 0x00D4   (0x000C)  
	FVector                                            MeshClipingScale2;                                          // 0x00E0   (0x000C)  
	bool                                               bCancelWhenPlayerWarp;                                      // 0x00EC   (0x0001)  
	bool                                               bBlockInputByBindSequence;                                  // 0x00ED   (0x0001)  
	unsigned char                                      UnknownData13_6[0x2];                                       // 0x00EE   (0x0002)  MISSED
	FName                                              FileSuffix;                                                 // 0x00F0   (0x0008)  
};

/// Struct /Script/SB.SBZoneEventZoneControlTableProperty
/// Size: 0x0038 (56 bytes) (0x000010 - 0x000038) align n/a MaxSize: 0x0038
struct FSBZoneEventZoneControlTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              ZoneAlias;                                                  // 0x0014   (0x0008)  
	TEnumAsByte<ESBZoneEventZoneControlTarget>         ControlType;                                                // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FName                                              EventCondition;                                             // 0x0020   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0028   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0030   (0x0008)  
};

/// Struct /Script/SB.SBNGPlusZoneEventSpawnTableProperty
/// Size: 0x0290 (656 bytes) (0x000010 - 0x000290) align n/a MaxSize: 0x0290
struct FSBNGPlusZoneEventSpawnTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              SpawnPointName;                                             // 0x0014   (0x0008)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x001C   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	TArray<FName>                                      CharacterAlias;                                             // 0x0020   (0x0010)  
	TEnumAsByte<ESBZoneSpawnType>                      SpawnType;                                                  // 0x0030   (0x0001)  
	TEnumAsByte<ESBSpawnRotationType>                  SpawnRotationType;                                          // 0x0031   (0x0001)  
	unsigned char                                      UnknownData18_6[0x2];                                       // 0x0032   (0x0002)  MISSED
	FName                                              Zone;                                                       // 0x0034   (0x0008)  
	FName                                              SpawnGroupRuleAlias;                                        // 0x003C   (0x0008)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0044   (0x0001)  
	TEnumAsByte<ESBSaveSubProperty>                    SaveSubProperty;                                            // 0x0045   (0x0001)  
	bool                                               bResetZoneKeepObject;                                       // 0x0046   (0x0001)  
	TEnumAsByte<ESBZoneResetKeepObjTMType>             KeepObjResetTransformType;                                  // 0x0047   (0x0001)  
	bool                                               bKeepObjApplyResetState;                                    // 0x0048   (0x0001)  
	bool                                               bSaveWithBlackBoard;                                        // 0x0049   (0x0001)  
	bool                                               bSpawnToActive;                                             // 0x004A   (0x0001)  
	unsigned char                                      UnknownData19_6[0x1];                                       // 0x004B   (0x0001)  MISSED
	float                                              DrawDistance;                                               // 0x004C   (0x0004)  
	bool                                               bDisableDrawDistanceScale;                                  // 0x0050   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              AlwaysTickDistance;                                         // 0x0054   (0x0004)  
	bool                                               bKeepSBCharacterWhenActiveAreaControlVolume;                // 0x0058   (0x0001)  
	unsigned char                                      UnknownData21_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	TArray<FName>                                      EventOnSpawning;                                            // 0x0060   (0x0010)  
	TArray<FName>                                      EventOnDead;                                                // 0x0070   (0x0010)  
	TArray<FName>                                      EventOnBattle;                                              // 0x0080   (0x0010)  
	TArray<FName>                                      EventFirstTimeOnBattle;                                     // 0x0090   (0x0010)  
	FString                                            SpawnShow;                                                  // 0x00A0   (0x0010)  
	bool                                               bEnableActorTickAtSpawning;                                 // 0x00B0   (0x0001)  
	bool                                               GoPathAfterSpawn;                                           // 0x00B1   (0x0001)  
	unsigned char                                      UnknownData22_6[0x6];                                       // 0x00B2   (0x0006)  MISSED
	FString                                            PathWay;                                                    // 0x00B8   (0x0010)  
	FName                                              RewardGroup;                                                // 0x00C8   (0x0008)  
	TEnumAsByte<ESBItemBucketType>                     RewardSpawnBucketType;                                      // 0x00D0   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               RewardOverrideSaveType;                                     // 0x00D1   (0x0001)  
	unsigned char                                      UnknownData23_6[0x2];                                       // 0x00D2   (0x0002)  MISSED
	FName                                              TagName;                                                    // 0x00D4   (0x0008)  
	bool                                               bHidden;                                                    // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData24_6[0x3];                                       // 0x00DD   (0x0003)  MISSED
	FName                                              AIGroupAlias;                                               // 0x00E0   (0x0008)  
	FName                                              AIGroupName;                                                // 0x00E8   (0x0008)  
	bool                                               bAIGroupLeader;                                             // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData25_6[0x3];                                       // 0x00F1   (0x0003)  MISSED
	FName                                              MetaAIAlias;                                                // 0x00F4   (0x0008)  
	ESBMetaAIThink                                     MetaAI_InitThink;                                           // 0x00FC   (0x0001)  
	unsigned char                                      UnknownData26_6[0x3];                                       // 0x00FD   (0x0003)  MISSED
	FName                                              MetaAI_SpecialBehaviorTag;                                  // 0x0100   (0x0008)  
	float                                              InteractionRange;                                           // 0x0108   (0x0004)  
	float                                              InteractionAngle;                                           // 0x010C   (0x0004)  
	float                                              InteractionTargetRange;                                     // 0x0110   (0x0004)  
	float                                              InteractionDotUIAngle;                                      // 0x0114   (0x0004)  
	float                                              InteractionUpperHeight;                                     // 0x0118   (0x0004)  
	float                                              InteractionLowerHeight;                                     // 0x011C   (0x0004)  
	TEnumAsByte<ESBInteractionOwnerRotationType>       OwnerRotationType;                                          // 0x0120   (0x0001)  
	bool                                               bEnableTransitZone;                                         // 0x0121   (0x0001)  
	bool                                               bEnableTransitZoneByEnemyActor;                             // 0x0122   (0x0001)  
	TEnumAsByte<ESBStayZoneSaveType>                   TransitStayZoneSaveType;                                    // 0x0123   (0x0001)  
	TEnumAsByte<ESBAdjustInteractPosType>              AdjustInteractTargetPosType;                                // 0x0124   (0x0001)  
	unsigned char                                      UnknownData27_6[0x3];                                       // 0x0125   (0x0003)  MISSED
	FString                                            Interaction;                                                // 0x0128   (0x0010)  
	TArray<FName>                                      ConditionsTrigger;                                          // 0x0138   (0x0010)  
	TArray<FName>                                      ConditionTriggerEvent;                                      // 0x0148   (0x0010)  
	TArray<TEnumAsByte<ESBConditionTriggerRunType>>    ConditionTriggerRunType;                                    // 0x0158   (0x0010)  
	TArray<TEnumAsByte<ESBConditionTriggerExecType>>   ConditionTriggerExecType;                                   // 0x0168   (0x0010)  
	TArray<FName>                                      CheckAchievements;                                          // 0x0178   (0x0010)  
	TArray<bool>                                       bCheckAchievementNotOperate;                                // 0x0188   (0x0010)  
	TArray<int32_t>                                    CheckAchievementProgress;                                   // 0x0198   (0x0010)  
	TArray<FName>                                      ShopDataList;                                               // 0x01A8   (0x0010)  
	TArray<FName>                                      SpawnEffectList;                                            // 0x01B8   (0x0010)  
	TEnumAsByte<ESBSpawnRuleType>                      SpawnRuleType;                                              // 0x01C8   (0x0001)  
	unsigned char                                      UnknownData28_6[0x3];                                       // 0x01C9   (0x0003)  MISSED
	float                                              RespawnIntervalTimeMin;                                     // 0x01CC   (0x0004)  
	float                                              RespawnIntervalTimeMax;                                     // 0x01D0   (0x0004)  
	FName                                              PuzzleInputText1;                                           // 0x01D4   (0x0008)  
	FName                                              PuzzleInputText2;                                           // 0x01DC   (0x0008)  
	FName                                              PuzzleInputText3;                                           // 0x01E4   (0x0008)  
	FName                                              PuzzleInputText4;                                           // 0x01EC   (0x0008)  
	unsigned char                                      UnknownData29_6[0x4];                                       // 0x01F4   (0x0004)  MISSED
	TArray<FString>                                    PuzzleInputTextList5;                                       // 0x01F8   (0x0010)  
	FVector                                            SpawnPosition;                                              // 0x0208   (0x000C)  
	TEnumAsByte<ESBUIWorldMapTargetDisplayType>        WorldMapDisplayType;                                        // 0x0214   (0x0001)  
	unsigned char                                      UnknownData30_6[0x3];                                       // 0x0215   (0x0003)  MISSED
	FString                                            WorldMapDisplayTitle;                                       // 0x0218   (0x0010)  
	FString                                            WorldMapDisplayDesc;                                        // 0x0228   (0x0010)  
	FName                                              WorldMapDisplayConditionGroup;                              // 0x0238   (0x0008)  
	FName                                              WorldMapIconTag;                                            // 0x0240   (0x0008)  
	float                                              WorldMapOverlapDistance;                                    // 0x0248   (0x0004)  
	float                                              OverrideCustomTrackNearDistance;                            // 0x024C   (0x0004)  
	bool                                               DontCheckZAxisCustomTrackNear;                              // 0x0250   (0x0001)  
	TEnumAsByte<ESBInteractRelevantType>               InteractionRelevantType;                                    // 0x0251   (0x0001)  
	unsigned char                                      UnknownData31_6[0x6];                                       // 0x0252   (0x0006)  MISSED
	FString                                            ObjectMaterial;                                             // 0x0258   (0x0010)  
	TArray<FName>                                      InteractionDisable_Condition;                               // 0x0268   (0x0010)  
	FName                                              InteractionDisable_ConditionGroup;                          // 0x0278   (0x0008)  
	bool                                               bMultiSpawnPoint;                                           // 0x0280   (0x0001)  
	bool                                               bPendingTheaterByNiike;                                     // 0x0281   (0x0001)  
	unsigned char                                      UnknownData32_6[0x2];                                       // 0x0282   (0x0002)  MISSED
	FName                                              FileSuffix;                                                 // 0x0284   (0x0008)  
	unsigned char                                      UnknownData33_7[0x4];                                       // 0x028C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneEventSpawnTableProperty
/// Size: 0x0290 (656 bytes) (0x000010 - 0x000290) align n/a MaxSize: 0x0290
struct FSBZoneEventSpawnTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              SpawnPointName;                                             // 0x0014   (0x0008)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x001C   (0x0001)  
	unsigned char                                      UnknownData17_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	TArray<FName>                                      CharacterAlias;                                             // 0x0020   (0x0010)  
	TEnumAsByte<ESBZoneSpawnType>                      SpawnType;                                                  // 0x0030   (0x0001)  
	TEnumAsByte<ESBSpawnRotationType>                  SpawnRotationType;                                          // 0x0031   (0x0001)  
	unsigned char                                      UnknownData18_6[0x2];                                       // 0x0032   (0x0002)  MISSED
	FName                                              Zone;                                                       // 0x0034   (0x0008)  
	FName                                              SpawnGroupRuleAlias;                                        // 0x003C   (0x0008)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0044   (0x0001)  
	TEnumAsByte<ESBSaveSubProperty>                    SaveSubProperty;                                            // 0x0045   (0x0001)  
	bool                                               bResetZoneKeepObject;                                       // 0x0046   (0x0001)  
	TEnumAsByte<ESBZoneResetKeepObjTMType>             KeepObjResetTransformType;                                  // 0x0047   (0x0001)  
	bool                                               bKeepObjApplyResetState;                                    // 0x0048   (0x0001)  
	bool                                               bSaveWithBlackBoard;                                        // 0x0049   (0x0001)  
	bool                                               bSpawnToActive;                                             // 0x004A   (0x0001)  
	unsigned char                                      UnknownData19_6[0x1];                                       // 0x004B   (0x0001)  MISSED
	float                                              DrawDistance;                                               // 0x004C   (0x0004)  
	bool                                               bDisableDrawDistanceScale;                                  // 0x0050   (0x0001)  
	unsigned char                                      UnknownData20_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              AlwaysTickDistance;                                         // 0x0054   (0x0004)  
	bool                                               bKeepSBCharacterWhenActiveAreaControlVolume;                // 0x0058   (0x0001)  
	unsigned char                                      UnknownData21_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	TArray<FName>                                      EventOnSpawning;                                            // 0x0060   (0x0010)  
	TArray<FName>                                      EventOnDead;                                                // 0x0070   (0x0010)  
	TArray<FName>                                      EventOnBattle;                                              // 0x0080   (0x0010)  
	TArray<FName>                                      EventFirstTimeOnBattle;                                     // 0x0090   (0x0010)  
	FString                                            SpawnShow;                                                  // 0x00A0   (0x0010)  
	bool                                               bEnableActorTickAtSpawning;                                 // 0x00B0   (0x0001)  
	bool                                               GoPathAfterSpawn;                                           // 0x00B1   (0x0001)  
	unsigned char                                      UnknownData22_6[0x6];                                       // 0x00B2   (0x0006)  MISSED
	FString                                            PathWay;                                                    // 0x00B8   (0x0010)  
	FName                                              RewardGroup;                                                // 0x00C8   (0x0008)  
	TEnumAsByte<ESBItemBucketType>                     RewardSpawnBucketType;                                      // 0x00D0   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               RewardOverrideSaveType;                                     // 0x00D1   (0x0001)  
	unsigned char                                      UnknownData23_6[0x2];                                       // 0x00D2   (0x0002)  MISSED
	FName                                              TagName;                                                    // 0x00D4   (0x0008)  
	bool                                               bHidden;                                                    // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData24_6[0x3];                                       // 0x00DD   (0x0003)  MISSED
	FName                                              AIGroupAlias;                                               // 0x00E0   (0x0008)  
	FName                                              AIGroupName;                                                // 0x00E8   (0x0008)  
	bool                                               bAIGroupLeader;                                             // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData25_6[0x3];                                       // 0x00F1   (0x0003)  MISSED
	FName                                              MetaAIAlias;                                                // 0x00F4   (0x0008)  
	ESBMetaAIThink                                     MetaAI_InitThink;                                           // 0x00FC   (0x0001)  
	unsigned char                                      UnknownData26_6[0x3];                                       // 0x00FD   (0x0003)  MISSED
	FName                                              MetaAI_SpecialBehaviorTag;                                  // 0x0100   (0x0008)  
	float                                              InteractionRange;                                           // 0x0108   (0x0004)  
	float                                              InteractionAngle;                                           // 0x010C   (0x0004)  
	float                                              InteractionTargetRange;                                     // 0x0110   (0x0004)  
	float                                              InteractionDotUIAngle;                                      // 0x0114   (0x0004)  
	float                                              InteractionUpperHeight;                                     // 0x0118   (0x0004)  
	float                                              InteractionLowerHeight;                                     // 0x011C   (0x0004)  
	TEnumAsByte<ESBInteractionOwnerRotationType>       OwnerRotationType;                                          // 0x0120   (0x0001)  
	bool                                               bEnableTransitZone;                                         // 0x0121   (0x0001)  
	bool                                               bEnableTransitZoneByEnemyActor;                             // 0x0122   (0x0001)  
	TEnumAsByte<ESBStayZoneSaveType>                   TransitStayZoneSaveType;                                    // 0x0123   (0x0001)  
	TEnumAsByte<ESBAdjustInteractPosType>              AdjustInteractTargetPosType;                                // 0x0124   (0x0001)  
	unsigned char                                      UnknownData27_6[0x3];                                       // 0x0125   (0x0003)  MISSED
	FString                                            Interaction;                                                // 0x0128   (0x0010)  
	TArray<FName>                                      ConditionsTrigger;                                          // 0x0138   (0x0010)  
	TArray<FName>                                      ConditionTriggerEvent;                                      // 0x0148   (0x0010)  
	TArray<TEnumAsByte<ESBConditionTriggerRunType>>    ConditionTriggerRunType;                                    // 0x0158   (0x0010)  
	TArray<TEnumAsByte<ESBConditionTriggerExecType>>   ConditionTriggerExecType;                                   // 0x0168   (0x0010)  
	TArray<FName>                                      CheckAchievements;                                          // 0x0178   (0x0010)  
	TArray<bool>                                       bCheckAchievementNotOperate;                                // 0x0188   (0x0010)  
	TArray<int32_t>                                    CheckAchievementProgress;                                   // 0x0198   (0x0010)  
	TArray<FName>                                      ShopDataList;                                               // 0x01A8   (0x0010)  
	TArray<FName>                                      SpawnEffectList;                                            // 0x01B8   (0x0010)  
	TEnumAsByte<ESBSpawnRuleType>                      SpawnRuleType;                                              // 0x01C8   (0x0001)  
	unsigned char                                      UnknownData28_6[0x3];                                       // 0x01C9   (0x0003)  MISSED
	float                                              RespawnIntervalTimeMin;                                     // 0x01CC   (0x0004)  
	float                                              RespawnIntervalTimeMax;                                     // 0x01D0   (0x0004)  
	FName                                              PuzzleInputText1;                                           // 0x01D4   (0x0008)  
	FName                                              PuzzleInputText2;                                           // 0x01DC   (0x0008)  
	FName                                              PuzzleInputText3;                                           // 0x01E4   (0x0008)  
	FName                                              PuzzleInputText4;                                           // 0x01EC   (0x0008)  
	unsigned char                                      UnknownData29_6[0x4];                                       // 0x01F4   (0x0004)  MISSED
	TArray<FString>                                    PuzzleInputTextList5;                                       // 0x01F8   (0x0010)  
	FVector                                            SpawnPosition;                                              // 0x0208   (0x000C)  
	TEnumAsByte<ESBUIWorldMapTargetDisplayType>        WorldMapDisplayType;                                        // 0x0214   (0x0001)  
	unsigned char                                      UnknownData30_6[0x3];                                       // 0x0215   (0x0003)  MISSED
	FString                                            WorldMapDisplayTitle;                                       // 0x0218   (0x0010)  
	FString                                            WorldMapDisplayDesc;                                        // 0x0228   (0x0010)  
	FName                                              WorldMapDisplayConditionGroup;                              // 0x0238   (0x0008)  
	FName                                              WorldMapIconTag;                                            // 0x0240   (0x0008)  
	float                                              WorldMapOverlapDistance;                                    // 0x0248   (0x0004)  
	float                                              OverrideCustomTrackNearDistance;                            // 0x024C   (0x0004)  
	bool                                               DontCheckZAxisCustomTrackNear;                              // 0x0250   (0x0001)  
	TEnumAsByte<ESBInteractRelevantType>               InteractionRelevantType;                                    // 0x0251   (0x0001)  
	unsigned char                                      UnknownData31_6[0x6];                                       // 0x0252   (0x0006)  MISSED
	FString                                            ObjectMaterial;                                             // 0x0258   (0x0010)  
	TArray<FName>                                      InteractionDisable_Condition;                               // 0x0268   (0x0010)  
	FName                                              InteractionDisable_ConditionGroup;                          // 0x0278   (0x0008)  
	bool                                               bMultiSpawnPoint;                                           // 0x0280   (0x0001)  
	bool                                               bPendingTheaterByNiike;                                     // 0x0281   (0x0001)  
	unsigned char                                      UnknownData32_6[0x2];                                       // 0x0282   (0x0002)  MISSED
	FName                                              FileSuffix;                                                 // 0x0284   (0x0008)  
	unsigned char                                      UnknownData33_7[0x4];                                       // 0x028C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneEventLevelSeqTableProperty
/// Size: 0x0088 (136 bytes) (0x000010 - 0x000088) align n/a MaxSize: 0x0088
struct FSBZoneEventLevelSeqTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              LevelSeqAlias;                                              // 0x0014   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FString                                            LevelSequencePath;                                          // 0x0020   (0x0010)  
	TArray<FName>                                      AttachTagNames;                                             // 0x0030   (0x0010)  
	TEnumAsByte<ESBZoneEventLevelSeqType>              Type;                                                       // 0x0040   (0x0001)  
	bool                                               bStopEndFrame;                                              // 0x0041   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x0042   (0x0006)  MISSED
	FString                                            SequenceTemplatePath;                                       // 0x0048   (0x0010)  
	FName                                              EventCondition;                                             // 0x0058   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0060   (0x0008)  
	TEnumAsByte<ESBZoneEventEventorType>               EventorType;                                                // 0x0068   (0x0001)  
	bool                                               bDontStopResetZone;                                         // 0x0069   (0x0001)  
	TEnumAsByte<ESBLevelSequenceContentsType>          LevelSequenceContentsType;                                  // 0x006A   (0x0001)  
	bool                                               StartMovementNone;                                          // 0x006B   (0x0001)  
	FName                                              FileSuffix;                                                 // 0x006C   (0x0008)  
	bool                                               UseRandomSequence;                                          // 0x0074   (0x0001)  
	bool                                               bPendingTheaterByNiike;                                     // 0x0075   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x0076   (0x0002)  MISSED
	TArray<FString>                                    RandomLevelSequencePaths;                                   // 0x0078   (0x0010)  
};

/// Struct /Script/SB.SBZoneEventActorEffectTableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBZoneEventActorEffectTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              ActorEffectAlias;                                           // 0x0014   (0x0008)  
	TEnumAsByte<ESBZoneEventActorTarget>               ToTarget;                                                   // 0x001C   (0x0001)  
	TEnumAsByte<ESBZoneEventEventorType>               EventorType;                                                // 0x001D   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x001E   (0x0002)  MISSED
	FName                                              TargetTagName;                                              // 0x0020   (0x0008)  
	FName                                              EventCondition;                                             // 0x0028   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0030   (0x0008)  
	TEnumAsByte<ESBZoneEventActorCaster>               ToCaster;                                                   // 0x0038   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FName                                              CasterTagName;                                              // 0x003C   (0x0008)  
	FName                                              FileSuffix;                                                 // 0x0044   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneEventTableProperty
/// Size: 0x0070 (112 bytes) (0x000010 - 0x000070) align n/a MaxSize: 0x0070
struct FSBZoneEventTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBZoneEventType>                      Type;                                                       // 0x0014   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              EventAlias;                                                 // 0x0018   (0x0008)  
	FName                                              EventConditionGroup;                                        // 0x0020   (0x0008)  
	FName                                              EventCondition;                                             // 0x0028   (0x0008)  
	TEnumAsByte<ESBZoneEventConditionCheckType>        EventConditionCheckType;                                    // 0x0030   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              EventDelayTime;                                             // 0x0034   (0x0004)  
	float                                              EventDelayMinTime;                                          // 0x0038   (0x0004)  
	float                                              EventDelayMaxTime;                                          // 0x003C   (0x0004)  
	bool                                               IgnoreEventByPlayerDead;                                    // 0x0040   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0041   (0x0007)  MISSED
	TArray<FName>                                      FinishEvents;                                               // 0x0048   (0x0010)  
	TArray<FName>                                      AddEvents;                                                  // 0x0058   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0068   (0x0008)  
};

/// Struct /Script/SB.SBEffectVolumeTableProperty
/// Size: 0x00C0 (192 bytes) (0x000010 - 0x0000C0) align n/a MaxSize: 0x00C0
struct FSBEffectVolumeTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x0014   (0x0001)  
	TEnumAsByte<ESBEffectVolumeType>                   VolumeType;                                                 // 0x0015   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FName                                              ActiveZoneAlias;                                            // 0x0018   (0x0008)  
	FName                                              EnterEffectAlias;                                           // 0x0020   (0x0008)  
	FName                                              AlwaysActiveEffectAlias;                                    // 0x0028   (0x0008)  
	int32_t                                            ExecuteDeadCount01;                                         // 0x0030   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList01;                                 // 0x0038   (0x0010)  
	int32_t                                            ExecuteDeadCount02;                                         // 0x0048   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList02;                                 // 0x0050   (0x0010)  
	int32_t                                            ExecuteDeadCount03;                                         // 0x0060   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x0064   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList03;                                 // 0x0068   (0x0010)  
	int32_t                                            ExecuteDeadCount04;                                         // 0x0078   (0x0004)  
	unsigned char                                      UnknownData12_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FName>                                      DeadCountEffectAliasList04;                                 // 0x0080   (0x0010)  
	FName                                              PropertyData;                                               // 0x0090   (0x0008)  
	TEnumAsByte<ESBEffectVolumeResetType>              ResetType;                                                  // 0x0098   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x0099   (0x0003)  MISSED
	FName                                              ResetTargetAlias;                                           // 0x009C   (0x0008)  
	unsigned char                                      UnknownData14_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	FString                                            ResetTargetState;                                           // 0x00A8   (0x0010)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x00B8   (0x0001)  
	bool                                               bUseEveryZone;                                              // 0x00B9   (0x0001)  
	bool                                               bUseActiveZoneStorage;                                      // 0x00BA   (0x0001)  
	unsigned char                                      UnknownData15_7[0x5];                                       // 0x00BB   (0x0005)  MISSED
};

/// Struct /Script/SB.SBZoneTriggerTableProperty
/// Size: 0x00A8 (168 bytes) (0x000010 - 0x0000A8) align n/a MaxSize: 0x00A8
struct FSBZoneTriggerTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Zone;                                                       // 0x0014   (0x0008)  
	TEnumAsByte<ESBObjectState>                        InitActivate;                                               // 0x001C   (0x0001)  
	TEnumAsByte<ESBZoneTriggerType>                    TriggerType;                                                // 0x001D   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x001E   (0x0002)  MISSED
	TArray<FName>                                      TouchEvents;                                                // 0x0020   (0x0010)  
	TArray<FName>                                      LeaveEvents;                                                // 0x0030   (0x0010)  
	FName                                              Condition;                                                  // 0x0040   (0x0008)  
	FName                                              ConditionGroup;                                             // 0x0048   (0x0008)  
	FName                                              TriggerActorAlias;                                          // 0x0050   (0x0008)  
	TEnumAsByte<ESBZoneTriggerDoingType>               DoingType;                                                  // 0x0058   (0x0001)  
	bool                                               InOutTrigger;                                               // 0x0059   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x005A   (0x0002)  MISSED
	int32_t                                            InitialDoingCount;                                          // 0x005C   (0x0004)  
	bool                                               IgnoreDoingCount;                                           // 0x0060   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	float                                              ActiveRange;                                                // 0x0064   (0x0004)  
	TEnumAsByte<ESBZoneObjectSaveType>                 SaveType;                                                   // 0x0068   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0069   (0x0003)  MISSED
	FVector                                            BoxExtent;                                                  // 0x006C   (0x000C)  
	TEnumAsByte<ESBZoneTriggerFilterType>              IgnoreFilter;                                               // 0x0078   (0x0001)  
	unsigned char                                      UnknownData10_6[0x7];                                       // 0x0079   (0x0007)  MISSED
	FString                                            ConditionObjectMaterial;                                    // 0x0080   (0x0010)  
	FName                                              LevelTargetFilter;                                          // 0x0090   (0x0008)  
	float                                              BlockExtraSprintDuration;                                   // 0x0098   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x009C   (0x0008)  
	unsigned char                                      UnknownData11_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Struct /Script/SB.SBZoneTableProperty
/// Size: 0x0150 (336 bytes) (0x000010 - 0x000150) align n/a MaxSize: 0x0150
struct FSBZoneTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              WorldAlias;                                                 // 0x0014   (0x0008)  
	FName                                              IsolatedAreaAlias;                                          // 0x001C   (0x0008)  
	bool                                               bOverrideIsolatedAreaWithWorldMap;                          // 0x0024   (0x0001)  
	TEnumAsByte<ESBZoneType>                           ZoneType;                                                   // 0x0025   (0x0001)  
	TEnumAsByte<ESBZoneNpcTransitType>                 NpcTransitType;                                             // 0x0026   (0x0001)  
	TEnumAsByte<ESBObjectState>                        InitActive;                                                 // 0x0027   (0x0001)  
	FName                                              TrainningRoom;                                              // 0x0028   (0x0008)  
	FString                                            StartPointAlias;                                            // 0x0030   (0x0010)  
	TArray<FName>                                      EnterZoneResetLayerList;                                    // 0x0040   (0x0010)  
	TArray<FName>                                      LeaveZoneResetLayerList;                                    // 0x0050   (0x0010)  
	TArray<FName>                                      EnterEvents;                                                // 0x0060   (0x0010)  
	TArray<FName>                                      LeaveEvents;                                                // 0x0070   (0x0010)  
	TArray<FName>                                      ActiveEvents;                                               // 0x0080   (0x0010)  
	TArray<FName>                                      DeactiveEvents;                                             // 0x0090   (0x0010)  
	TArray<FName>                                      ZoneSpawnEvents;                                            // 0x00A0   (0x0010)  
	TEnumAsByte<ESBZoneEffectTargetType>               EnterZoneEffectTargetType;                                  // 0x00B0   (0x0001)  
	TEnumAsByte<ESBZoneEffectLeaveState>               EnterZoneEffectAtLeaveState;                                // 0x00B1   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x00B2   (0x0006)  MISSED
	TArray<FName>                                      EnterZoneEffects;                                           // 0x00B8   (0x0010)  
	TArray<FName>                                      TransitAchievement;                                         // 0x00C8   (0x0010)  
	TArray<FName>                                      TransitZone;                                                // 0x00D8   (0x0010)  
	TArray<FName>                                      LoadLevels;                                                 // 0x00E8   (0x0010)  
	TArray<FName>                                      UnloadLevels;                                               // 0x00F8   (0x0010)  
	bool                                               bRestoreLevelWhenLeave;                                     // 0x0108   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0109   (0x0003)  MISSED
	FName                                              PlayRule;                                                   // 0x010C   (0x0008)  
	FName                                              SpiritRoomEscapeCondition;                                  // 0x0114   (0x0008)  
	FName                                              SpiritRoomEscapeConditionGroup;                             // 0x011C   (0x0008)  
	bool                                               bSpiritRoom_ChoiceOpenPopup;                                // 0x0124   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0125   (0x0003)  MISSED
	FName                                              LevelGraphicsOptionsAlias;                                  // 0x0128   (0x0008)  
	float                                              OverrideEnterZoneFadeInDelayTime;                           // 0x0130   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	TArray<FName>                                      AdditiveDesignLevel;                                        // 0x0138   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0148   (0x0008)  
};

/// Struct /Script/SB.SBWorldTableProperty
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FSBWorldTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            UMapPath;                                                   // 0x0018   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0028   (0x0008)  
};

/// Struct /Script/SB.SBProjectileTableProperty
/// Size: 0x0398 (920 bytes) (0x000010 - 0x000398) align n/a MaxSize: 0x0398
struct FSBProjectileTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData26_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            ResourcePath;                                               // 0x0018   (0x0010)  
	bool                                               bGroupProjectile;                                           // 0x0028   (0x0001)  
	TEnumAsByte<ESBProjectileLifeType>                 LifeType;                                                   // 0x0029   (0x0001)  
	unsigned char                                      UnknownData27_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	float                                              LifeTime;                                                   // 0x002C   (0x0004)  
	TEnumAsByte<ESBProjectileDestroyType>              DestroyType;                                                // 0x0030   (0x0001)  
	unsigned char                                      UnknownData28_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              DestroyWaitTime;                                            // 0x0034   (0x0004)  
	TEnumAsByte<ESBProjectilePhysicsType>              PhysicsType;                                                // 0x0038   (0x0001)  
	unsigned char                                      UnknownData29_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              AttackDamageRate;                                           // 0x003C   (0x0004)  
	float                                              ShieldAttackDamageRate;                                     // 0x0040   (0x0004)  
	TEnumAsByte<ESBProjectileHitType>                  HitType;                                                    // 0x0044   (0x0001)  
	unsigned char                                      UnknownData30_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              HitRepeatInterval;                                          // 0x0048   (0x0004)  
	FName                                              TargetFilterAlias;                                          // 0x004C   (0x0008)  
	unsigned char                                      UnknownData31_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            ProjectileShotEffectAlias;                                  // 0x0058   (0x0010)  
	FString                                            ProjectileArriveEffectAlias;                                // 0x0068   (0x0010)  
	FString                                            ProjectileEndEffectAlias;                                   // 0x0078   (0x0010)  
	FString                                            ProjectileLifeTimeEndEffectAlias;                           // 0x0088   (0x0010)  
	TEnumAsByte<ESBElementType>                        ElementType;                                                // 0x0098   (0x0001)  
	unsigned char                                      UnknownData32_6[0x3];                                       // 0x0099   (0x0003)  MISSED
	float                                              ElementAmount;                                              // 0x009C   (0x0004)  
	TArray<FName>                                      CreateProjectileAliasArrayWhenDestruction;                  // 0x00A0   (0x0010)  
	TArray<FName>                                      ProjectileEndCreateProjectileAliasArray;                    // 0x00B0   (0x0010)  
	bool                                               bDisableProjectileEndCreateProjectileWhenDestruction;       // 0x00C0   (0x0001)  
	bool                                               bDisableProjectileEndCreateProjectileWhenHitGround;         // 0x00C1   (0x0001)  
	unsigned char                                      UnknownData33_6[0x2];                                       // 0x00C2   (0x0002)  MISSED
	FName                                              ZoneEventActorTriggerTag;                                   // 0x00C4   (0x0008)  
	FName                                              SkillResultAliasWhenProjectileHit;                          // 0x00CC   (0x0008)  
	FName                                              SkillResultAliasWhenProjectileParry;                        // 0x00D4   (0x0008)  
	FName                                              SkillResultAliasWhenProjectileSuperParry;                   // 0x00DC   (0x0008)  
	FName                                              SkillResultAliasWhenProjectileGuard;                        // 0x00E4   (0x0008)  
	FName                                              SkillResultAliasWhenProjectileJustParry;                    // 0x00EC   (0x0008)  
	FName                                              SkillResultAliasWhenProjectileJustGuard;                    // 0x00F4   (0x0008)  
	FName                                              SkillResultAliasWhenProjectileReflectHit;                   // 0x00FC   (0x0008)  
	FName                                              TargetDeadType;                                             // 0x0104   (0x0008)  
	bool                                               bLockOnHitTarget;                                           // 0x010C   (0x0001)  
	unsigned char                                      UnknownData34_6[0x3];                                       // 0x010D   (0x0003)  MISSED
	FString                                            EndLocationDecalShowPath;                                   // 0x0110   (0x0010)  
	bool                                               AvailableParry;                                             // 0x0120   (0x0001)  
	bool                                               AvailableSuperParry;                                        // 0x0121   (0x0001)  
	bool                                               AvailableGuard;                                             // 0x0122   (0x0001)  
	bool                                               AvailableJustParry;                                         // 0x0123   (0x0001)  
	bool                                               AvailableJustGuard;                                         // 0x0124   (0x0001)  
	bool                                               AvailableJustAction;                                        // 0x0125   (0x0001)  
	unsigned char                                      UnknownData35_6[0x2];                                       // 0x0126   (0x0002)  MISSED
	float                                              DecalPlayExceptTime;                                        // 0x0128   (0x0004)  
	bool                                               bImpossibleReflect;                                         // 0x012C   (0x0001)  
	unsigned char                                      UnknownData36_6[0x3];                                       // 0x012D   (0x0003)  MISSED
	float                                              ReflectYawRandMin;                                          // 0x0130   (0x0004)  
	float                                              ReflectYawRandMax;                                          // 0x0134   (0x0004)  
	float                                              ReflectPitchRandMin;                                        // 0x0138   (0x0004)  
	float                                              ReflectPitchRandMax;                                        // 0x013C   (0x0004)  
	FName                                              ReflectDestTargetOverrideAlias;                             // 0x0140   (0x0008)  
	FName                                              ReflectTargetFilterAlias;                                   // 0x0148   (0x0008)  
	FName                                              ReflectJustActionTargetFilterAlias;                         // 0x0150   (0x0008)  
	FString                                            ReflectProjectileArriveEffectAlias;                         // 0x0158   (0x0010)  
	bool                                               bDisableUIEvent;                                            // 0x0168   (0x0001)  
	bool                                               bIgnoreNoDamageState;                                       // 0x0169   (0x0001)  
	bool                                               bProjectileAttackPossible;                                  // 0x016A   (0x0001)  
	unsigned char                                      UnknownData37_6[0x1];                                       // 0x016B   (0x0001)  MISSED
	float                                              ProjectileAttackDamage;                                     // 0x016C   (0x0004)  
	bool                                               bIgnoreCollision;                                           // 0x0170   (0x0001)  
	bool                                               bDestructible;                                              // 0x0171   (0x0001)  
	unsigned char                                      UnknownData38_6[0x2];                                       // 0x0172   (0x0002)  MISSED
	float                                              Life;                                                       // 0x0174   (0x0004)  
	FString                                            ProjectileDestructionAttackerEffectAlias;                   // 0x0178   (0x0010)  
	FString                                            ProjectileDestructionOwnerEffectAlias;                      // 0x0188   (0x0010)  
	float                                              ZoneEventDestructionDelayMinTime;                           // 0x0198   (0x0004)  
	float                                              ZoneEventDestructionDelayMaxTime;                           // 0x019C   (0x0004)  
	bool                                               bCheckShotPosition;                                         // 0x01A0   (0x0001)  
	unsigned char                                      UnknownData39_6[0x3];                                       // 0x01A1   (0x0003)  MISSED
	FName                                              CheckShotPositionSocketName;                                // 0x01A4   (0x0008)  
	float                                              StartDelayTime;                                             // 0x01AC   (0x0004)  
	float                                              ShotTime;                                                   // 0x01B0   (0x0004)  
	TEnumAsByte<ESBProjectileMovementType>             MovementType;                                               // 0x01B4   (0x0001)  
	TEnumAsByte<ESBProjectileTarget>                   StartTarget;                                                // 0x01B5   (0x0001)  
	TEnumAsByte<ESBMovementTargetUpdate>               StartTargetUpdate;                                          // 0x01B6   (0x0001)  
	TEnumAsByte<ESBTargetLocationTransformType>        StartTargetTransformType;                                   // 0x01B7   (0x0001)  
	FName                                              StartTargetTransformName;                                   // 0x01B8   (0x0008)  
	bool                                               bStartTargetTransformRotation;                              // 0x01C0   (0x0001)  
	unsigned char                                      UnknownData40_6[0x3];                                       // 0x01C1   (0x0003)  MISSED
	FVector                                            StartTargetRelativeLocation;                                // 0x01C4   (0x000C)  
	float                                              StartTargetRelativeRotationPitch;                           // 0x01D0   (0x0004)  
	float                                              StartTargetRelativeRotationYaw;                             // 0x01D4   (0x0004)  
	float                                              StartTargetRelativeRotationRoll;                            // 0x01D8   (0x0004)  
	TEnumAsByte<ESBMovementTargetRelativeAxisType>     StartTargetRelativeAxisType;                                // 0x01DC   (0x0001)  
	TEnumAsByte<ESBProjectileTarget>                   DestTarget;                                                 // 0x01DD   (0x0001)  
	bool                                               bDestTargetUpdateWhenSpawn;                                 // 0x01DE   (0x0001)  
	TEnumAsByte<ESBMovementTargetUpdate>               DestTargetUpdate;                                           // 0x01DF   (0x0001)  
	TEnumAsByte<ESBTargetLocationTransformType>        DestTargetTransformType;                                    // 0x01E0   (0x0001)  
	unsigned char                                      UnknownData41_6[0x3];                                       // 0x01E1   (0x0003)  MISSED
	FName                                              DestTargetTransformName;                                    // 0x01E4   (0x0008)  
	FVector                                            DestTargetRandomRange;                                      // 0x01EC   (0x000C)  
	FVector                                            DestTargetRelativeLocation;                                 // 0x01F8   (0x000C)  
	unsigned char                                      UnknownData42_6[0x4];                                       // 0x0204   (0x0004)  MISSED
	FString                                            DestTargetRelativeLocationCurvePath;                        // 0x0208   (0x0010)  
	FString                                            DestTargetRelativeLocationScaleCurvePath;                   // 0x0218   (0x0010)  
	TEnumAsByte<ESBMovementTargetRelativeAxisType>     DestTargetRelativeAxisType;                                 // 0x0228   (0x0001)  
	bool                                               bDestTargetLocationToGround;                                // 0x0229   (0x0001)  
	unsigned char                                      UnknownData43_6[0x2];                                       // 0x022A   (0x0002)  MISSED
	float                                              FixedLocationTime;                                          // 0x022C   (0x0004)  
	float                                              FixedLocationRemainingDistance;                             // 0x0230   (0x0004)  
	float                                              FixedLocationAdditiveForwardDistance;                       // 0x0234   (0x0004)  
	float                                              StartToDestDirectionDistance;                               // 0x0238   (0x0004)  
	float                                              Speed;                                                      // 0x023C   (0x0004)  
	float                                              SpeedRandom;                                                // 0x0240   (0x0004)  
	float                                              Accelation;                                                 // 0x0244   (0x0004)  
	float                                              MinSpeed;                                                   // 0x0248   (0x0004)  
	float                                              MaxSpeed;                                                   // 0x024C   (0x0004)  
	bool                                               bSpeedFromDuration;                                         // 0x0250   (0x0001)  
	unsigned char                                      UnknownData44_6[0x3];                                       // 0x0251   (0x0003)  MISSED
	float                                              MovementCurveRepeatDistance;                                // 0x0254   (0x0004)  
	float                                              MovementCurveScaleDistance;                                 // 0x0258   (0x0004)  
	TEnumAsByte<ESBMovementCurveType>                  MovementCurveType;                                          // 0x025C   (0x0001)  
	unsigned char                                      UnknownData45_6[0x3];                                       // 0x025D   (0x0003)  MISSED
	FString                                            MovementCurve;                                              // 0x0260   (0x0010)  
	bool                                               bAutoGenerationMovementCurve;                               // 0x0270   (0x0001)  
	unsigned char                                      UnknownData46_6[0x3];                                       // 0x0271   (0x0003)  MISSED
	FVector                                            AutoGenerationMovementCurveMin;                             // 0x0274   (0x000C)  
	FVector                                            AutoGenerationMovementCurveMax;                             // 0x0280   (0x000C)  
	FVector                                            AutoGenerationMovementCurveRecordTime;                      // 0x028C   (0x000C)  
	float                                              Gravity;                                                    // 0x0298   (0x0004)  
	float                                              SpeedFromMinDistance;                                       // 0x029C   (0x0004)  
	float                                              SpeedFromMaxDistance;                                       // 0x02A0   (0x0004)  
	float                                              ParabolicMotionXYSpeedPerSecond;                            // 0x02A4   (0x0004)  
	bool                                               bAdditiveLocationByTargetVelocity;                          // 0x02A8   (0x0001)  
	unsigned char                                      UnknownData47_6[0x3];                                       // 0x02A9   (0x0003)  MISSED
	float                                              AdditiveDestTargetForwardDistanceWhenVelocityMove;          // 0x02AC   (0x0004)  
	float                                              RotationMinDistancePowerWhenGuidedMissile;                  // 0x02B0   (0x0004)  
	float                                              RotationMaxDistancePowerWhenGuidedMissile;                  // 0x02B4   (0x0004)  
	float                                              RotationMinDistanceWhenGuidedMissile;                       // 0x02B8   (0x0004)  
	float                                              RotationMaxDistanceWhenGuidedMissile;                       // 0x02BC   (0x0004)  
	float                                              RandomVelocityMinWhenGuidedMissile;                         // 0x02C0   (0x0004)  
	float                                              RandomVelocityMaxWhenGuidedMissile;                         // 0x02C4   (0x0004)  
	float                                              RandomYawMinWhenGuidedMissile;                              // 0x02C8   (0x0004)  
	float                                              RandomYawMaxWhenGuidedMissile;                              // 0x02CC   (0x0004)  
	float                                              RandomPitchMinWhenGuidedMissile;                            // 0x02D0   (0x0004)  
	float                                              RandomPitchMaxWhenGuidedMissile;                            // 0x02D4   (0x0004)  
	FVector                                            MissOffsetRandomRangeMin;                                   // 0x02D8   (0x000C)  
	FVector                                            MissOffsetRandomRangeMax;                                   // 0x02E4   (0x000C)  
	bool                                               bBeamTracking;                                              // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData48_6[0x3];                                       // 0x02F1   (0x0003)  MISSED
	float                                              BeamTrackingStartTime;                                      // 0x02F4   (0x0004)  
	float                                              BeamTrackingBlendInTime;                                    // 0x02F8   (0x0004)  
	float                                              BeamTrackingEndTime;                                        // 0x02FC   (0x0004)  
	float                                              BeamTrackingBlendOutTime;                                   // 0x0300   (0x0004)  
	float                                              BeamTrackingTargetDistacne;                                 // 0x0304   (0x0004)  
	bool                                               bBeamTrackingTargetFollow;                                  // 0x0308   (0x0001)  
	unsigned char                                      UnknownData49_6[0x3];                                       // 0x0309   (0x0003)  MISSED
	float                                              BeamFixedDistance;                                          // 0x030C   (0x0004)  
	int32_t                                            ChainAttackCount;                                           // 0x0310   (0x0004)  
	int32_t                                            PoolCount;                                                  // 0x0314   (0x0004)  
	bool                                               bSignalUI;                                                  // 0x0318   (0x0001)  
	unsigned char                                      UnknownData50_6[0x3];                                       // 0x0319   (0x0003)  MISSED
	FName                                              FileSuffix;                                                 // 0x031C   (0x0008)  
	unsigned char                                      UnknownData51_6[0x4];                                       // 0x0324   (0x0004)  MISSED
	TArray<FSBJsonEffect>                              ProjectileShotEffectAliasArray;                             // 0x0328   (0x0010)  
	TArray<FSBJsonEffect>                              ProjectileArriveEffectAliasArray;                           // 0x0338   (0x0010)  
	TArray<FSBJsonEffect>                              ProjectileEndEffectAliasArray;                              // 0x0348   (0x0010)  
	TArray<FSBJsonEffect>                              ProjectileLifeTimeEndEffectAliasArray;                      // 0x0358   (0x0010)  
	TArray<FSBJsonEffect>                              ReflectProjectileArriveEffectAliasArray;                    // 0x0368   (0x0010)  
	TArray<FSBJsonEffect>                              ProjectileDestructionAttackerEffectAliasArray;              // 0x0378   (0x0010)  
	TArray<FSBJsonEffect>                              ProjectileDestructionOwnerEffectAliasArray;                 // 0x0388   (0x0010)  
};

/// Struct /Script/SB.SBCharacterStanceTableProperty
/// Size: 0x0220 (544 bytes) (0x000010 - 0x000220) align n/a MaxSize: 0x0220
struct FSBCharacterStanceTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	int32_t                                            Priority;                                                   // 0x0014   (0x0004)  
	TEnumAsByte<ESBActorCombatType>                    CombatType;                                                 // 0x0018   (0x0001)  
	bool                                               bGroupAttacker;                                             // 0x0019   (0x0001)  
	bool                                               bDetectCloakingTarget;                                      // 0x001A   (0x0001)  
	TEnumAsByte<ESBBoneBlendType>                      BoneBlendType;                                              // 0x001B   (0x0001)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FName>                                      Condition_DestroyCollisionGroupArray;                       // 0x0020   (0x0010)  
	TEnumAsByte<ESBActorStatType>                      Condition_ActorStat;                                        // 0x0030   (0x0001)  
	TEnumAsByte<ESBActorStatCheckType>                 Condition_ActorStatCheck;                                   // 0x0031   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x0032   (0x0002)  MISSED
	int32_t                                            Condition_ActorStatCheckValue;                              // 0x0034   (0x0004)  
	TEnumAsByte<ESBActorState>                         Condition_DeactiveActorState1;                              // 0x0038   (0x0001)  
	TEnumAsByte<ESBActorState>                         Condition_DeactiveActorState2;                              // 0x0039   (0x0001)  
	TEnumAsByte<ESBActorState>                         Condition_DeactiveActorState3;                              // 0x003A   (0x0001)  
	TEnumAsByte<ESBActorState>                         Condition_DeactiveActorState4;                              // 0x003B   (0x0001)  
	TEnumAsByte<ESBActorState>                         Condition_DeactiveActorState5;                              // 0x003C   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 Condition_BattleMode;                                       // 0x003D   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 Condition_Jumping;                                          // 0x003E   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 Condition_Swimming;                                         // 0x003F   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 Condition_EventMoving;                                      // 0x0040   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 Condition_ChildGuideAction;                                 // 0x0041   (0x0001)  
	unsigned char                                      UnknownData09_6[0x6];                                       // 0x0042   (0x0006)  MISSED
	TArray<FName>                                      Condition_ActiveEffectAliasArray;                           // 0x0048   (0x0010)  
	TArray<FName>                                      Condition_NoneEffectAliasArray;                             // 0x0058   (0x0010)  
	TEnumAsByte<ESBSkillCommandState>                  Condition_PressCommandKey1;                                 // 0x0068   (0x0001)  
	bool                                               bActiveCheck_PressCommandKey1;                              // 0x0069   (0x0001)  
	TEnumAsByte<ESBSkillCommandState>                  Condition_PressCommandKey2;                                 // 0x006A   (0x0001)  
	bool                                               bActiveCheck_PressCommandKey2;                              // 0x006B   (0x0001)  
	FName                                              Condition_WeaponEquipmentAlias;                             // 0x006C   (0x0008)  
	FName                                              Condition_SecondaryWeaponEquipmentAlias;                    // 0x0074   (0x0008)  
	FName                                              Condition_ThirdlyWeaponEquipmentAlias;                      // 0x007C   (0x0008)  
	FName                                              Condition_FourthlyWeaponEquipmentAlias;                     // 0x0084   (0x0008)  
	TEnumAsByte<ESBConditionCheckType>                 Condition_MetaAI_TiredState;                                // 0x008C   (0x0001)  
	bool                                               bInfiniteStance;                                            // 0x008D   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x008E   (0x0002)  MISSED
	TArray<FName>                                      CommandArray;                                               // 0x0090   (0x0010)  
	bool                                               bWallHitPossible;                                           // 0x00A0   (0x0001)  
	bool                                               bImpossibleLockOn;                                          // 0x00A1   (0x0001)  
	bool                                               bImpossibleAutoLockOn;                                      // 0x00A2   (0x0001)  
	bool                                               bDropAttackTarget;                                          // 0x00A3   (0x0001)  
	bool                                               bBackStabTarget;                                            // 0x00A4   (0x0001)  
	bool                                               bForceFoldingWeapon;                                        // 0x00A5   (0x0001)  
	bool                                               bDisableCollision;                                          // 0x00A6   (0x0001)  
	bool                                               bDisableGravity;                                            // 0x00A7   (0x0001)  
	float                                              WalkSpeed;                                                  // 0x00A8   (0x0004)  
	float                                              RunSpeed;                                                   // 0x00AC   (0x0004)  
	float                                              LockOnRunSpeed;                                             // 0x00B0   (0x0004)  
	float                                              LockOnWalkSpeed;                                            // 0x00B4   (0x0004)  
	float                                              JoggingRunSpeed;                                            // 0x00B8   (0x0004)  
	float                                              RotateAnglePerSecond;                                       // 0x00BC   (0x0004)  
	float                                              OverrideCustomMovementMaxSpeed;                             // 0x00C0   (0x0004)  
	float                                              WalkSoundDecibel;                                           // 0x00C4   (0x0004)  
	float                                              WalkSoundLife;                                              // 0x00C8   (0x0004)  
	float                                              WalkSoundPeriod;                                            // 0x00CC   (0x0004)  
	float                                              RunSoundDecibel;                                            // 0x00D0   (0x0004)  
	float                                              RunSoundLife;                                               // 0x00D4   (0x0004)  
	float                                              RunSoundPeriod;                                             // 0x00D8   (0x0004)  
	float                                              SprintSoundDecibel;                                         // 0x00DC   (0x0004)  
	float                                              SprintSoundLife;                                            // 0x00E0   (0x0004)  
	float                                              SprintSoundPeriod;                                          // 0x00E4   (0x0004)  
	float                                              JumpSoundDecibel;                                           // 0x00E8   (0x0004)  
	float                                              JumpSoundLife;                                              // 0x00EC   (0x0004)  
	FString                                            StartShowPathWhenPeaceful;                                  // 0x00F0   (0x0010)  
	FString                                            StartShowPathWhenBattle;                                    // 0x0100   (0x0010)  
	FString                                            StartEffect;                                                // 0x0110   (0x0010)  
	FString                                            EndShowPathWhenPeaceful;                                    // 0x0120   (0x0010)  
	FString                                            EndShowPathWhenBattle;                                      // 0x0130   (0x0010)  
	FString                                            EndEffect;                                                  // 0x0140   (0x0010)  
	FName                                              AnimSet_Peaceful_UpperBody;                                 // 0x0150   (0x0008)  
	FName                                              AnimSet_Peaceful_LowerBody;                                 // 0x0158   (0x0008)  
	FName                                              AnimSet_Battle_UpperBody;                                   // 0x0160   (0x0008)  
	FName                                              AnimSet_Battle_LowerBody;                                   // 0x0168   (0x0008)  
	FName                                              AnimSet_Groggy_UpperBody;                                   // 0x0170   (0x0008)  
	FName                                              AnimSet_Groggy_LowerBody;                                   // 0x0178   (0x0008)  
	FName                                              AnimSet_Down_UpperBody;                                     // 0x0180   (0x0008)  
	FName                                              AnimSet_Down_LowerBody;                                     // 0x0188   (0x0008)  
	FName                                              AnimSet_Dead_UpperBody;                                     // 0x0190   (0x0008)  
	FName                                              AnimSet_Dead_LowerBody;                                     // 0x0198   (0x0008)  
	FName                                              AnimSet_Airborne_UpperBody;                                 // 0x01A0   (0x0008)  
	FName                                              AnimSet_Airborne_LowerBody;                                 // 0x01A8   (0x0008)  
	bool                                               bDisableMovingTransit;                                      // 0x01B0   (0x0001)  
	bool                                               bDisableIdleAdditiveAnimWhenPeaceful;                       // 0x01B1   (0x0001)  
	bool                                               bDisableIdleAdditiveAnimWhenBattle;                         // 0x01B2   (0x0001)  
	unsigned char                                      UnknownData11_6[0x5];                                       // 0x01B3   (0x0005)  MISSED
	FString                                            OverridePhysicsAsset;                                       // 0x01B8   (0x0010)  
	FName                                              DeadSkillAlias;                                             // 0x01C8   (0x0008)  
	float                                              DeadSkillPercentage;                                        // 0x01D0   (0x0004)  
	FName                                              DeadSkillSelfDeadType;                                      // 0x01D4   (0x0008)  
	int32_t                                            DeadSkillRewardDelayTime;                                   // 0x01DC   (0x0004)  
	TArray<FName>                                      MountableEquipmentAliasArray;                               // 0x01E0   (0x0010)  
	bool                                               bOptimizeWithSignificanceManager;                           // 0x01F0   (0x0001)  
	bool                                               bClearCommandInputWhenEnd;                                  // 0x01F1   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x01F2   (0x0002)  MISSED
	FName                                              FileSuffix;                                                 // 0x01F4   (0x0008)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x01FC   (0x0004)  MISSED
	TArray<FSBJsonEffect>                              StartEffectArray;                                           // 0x0200   (0x0010)  
	TArray<FSBJsonEffect>                              EndEffectArray;                                             // 0x0210   (0x0010)  
};

/// Struct /Script/SB.SBCharacterAnimSetTableProperty
/// Size: 0x0C98 (3224 bytes) (0x000010 - 0x000C98) align n/a MaxSize: 0x0C98
struct FSBCharacterAnimSetTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            RunBlendSpace;                                              // 0x0018   (0x0010)  
	FString                                            RunTiltBlendSpace;                                          // 0x0028   (0x0010)  
	TEnumAsByte<ESBIdleAnimType>                       IdleAnimType;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	FString                                            LockOnSprintBlendSpace;                                     // 0x0040   (0x0010)  
	FString                                            BlockMoveBlendSpace;                                        // 0x0050   (0x0010)  
	FString                                            AimOffsetBlendSpace;                                        // 0x0060   (0x0010)  
	FString                                            SelfieBlendSpace;                                           // 0x0070   (0x0010)  
	FString                                            WallRun;                                                    // 0x0080   (0x0010)  
	FString                                            LockOnFall;                                                 // 0x0090   (0x0010)  
	FString                                            LockOnRunBlendSpace;                                        // 0x00A0   (0x0010)  
	FString                                            FlyingBlendSpace;                                           // 0x00B0   (0x0010)  
	FString                                            FlyingStart;                                                // 0x00C0   (0x0010)  
	FString                                            FlyingToFall;                                               // 0x00D0   (0x0010)  
	FString                                            FlyingToIdle;                                               // 0x00E0   (0x0010)  
	FString                                            Fall;                                                       // 0x00F0   (0x0010)  
	FString                                            Sprint;                                                     // 0x0100   (0x0010)  
	FString                                            Jump;                                                       // 0x0110   (0x0010)  
	FString                                            Jump2;                                                      // 0x0120   (0x0010)  
	FString                                            Jump3;                                                      // 0x0130   (0x0010)  
	FString                                            JumpFront;                                                  // 0x0140   (0x0010)  
	FString                                            JumpFront2;                                                 // 0x0150   (0x0010)  
	FString                                            JumpFront3;                                                 // 0x0160   (0x0010)  
	FString                                            WallJump;                                                   // 0x0170   (0x0010)  
	FString                                            WallRunJump;                                                // 0x0180   (0x0010)  
	FString                                            DoubleJump;                                                 // 0x0190   (0x0010)  
	FString                                            DoubleJump2;                                                // 0x01A0   (0x0010)  
	FString                                            DoubleJump3;                                                // 0x01B0   (0x0010)  
	FString                                            DoubleJumpFront;                                            // 0x01C0   (0x0010)  
	FString                                            DoubleJumpFront2;                                           // 0x01D0   (0x0010)  
	FString                                            DoubleJumpFront3;                                           // 0x01E0   (0x0010)  
	FString                                            JumpToIdle;                                                 // 0x01F0   (0x0010)  
	FString                                            JumpToSprint;                                               // 0x0200   (0x0010)  
	FString                                            JumpToSprintShort;                                          // 0x0210   (0x0010)  
	FString                                            JumpToWalk;                                                 // 0x0220   (0x0010)  
	FString                                            JumpToRun;                                                  // 0x0230   (0x0010)  
	FString                                            JumpHighToRun;                                              // 0x0240   (0x0010)  
	FString                                            JumpHighToIdle;                                             // 0x0250   (0x0010)  
	FString                                            JumpHighToWalk;                                             // 0x0260   (0x0010)  
	FString                                            RunToIdle_L;                                                // 0x0270   (0x0010)  
	FString                                            RunToIdle_R;                                                // 0x0280   (0x0010)  
	FString                                            RunToIdle;                                                  // 0x0290   (0x0010)  
	FString                                            WalkToIdle_L;                                               // 0x02A0   (0x0010)  
	FString                                            WalkToIdle_R;                                               // 0x02B0   (0x0010)  
	FString                                            WalkToIdle;                                                 // 0x02C0   (0x0010)  
	FString                                            ShortMoveToIdle_L;                                          // 0x02D0   (0x0010)  
	FString                                            ShortMoveToIdle_R;                                          // 0x02E0   (0x0010)  
	FString                                            ShortMoveToIdle;                                            // 0x02F0   (0x0010)  
	FString                                            StartSprint;                                                // 0x0300   (0x0010)  
	FString                                            SprintToIdle;                                               // 0x0310   (0x0010)  
	FString                                            SprintToRun;                                                // 0x0320   (0x0010)  
	FString                                            RunStart;                                                   // 0x0330   (0x0010)  
	FString                                            RunStartAfterEvade;                                         // 0x0340   (0x0010)  
	FString                                            RunTurn_L;                                                  // 0x0350   (0x0010)  
	FString                                            RunTurn_R;                                                  // 0x0360   (0x0010)  
	FString                                            WalkTurn_L;                                                 // 0x0370   (0x0010)  
	FString                                            WalkTurn_R;                                                 // 0x0380   (0x0010)  
	FString                                            IdleTurn_L;                                                 // 0x0390   (0x0010)  
	FString                                            IdleTurn_R;                                                 // 0x03A0   (0x0010)  
	FString                                            IdleTurnToWalk_L;                                           // 0x03B0   (0x0010)  
	FString                                            IdleTurnToWalk_R;                                           // 0x03C0   (0x0010)  
	FString                                            SprintTurn;                                                 // 0x03D0   (0x0010)  
	FString                                            SprintTurn_L;                                               // 0x03E0   (0x0010)  
	FString                                            LockOnJumpNoMoving;                                         // 0x03F0   (0x0010)  
	FString                                            LockOnDoubleJumpNoMoving;                                   // 0x0400   (0x0010)  
	FString                                            LockOnJumpFront;                                            // 0x0410   (0x0010)  
	FString                                            LockOnJumpLeft;                                             // 0x0420   (0x0010)  
	FString                                            LockOnJumpRight;                                            // 0x0430   (0x0010)  
	FString                                            LockOnJumpBack;                                             // 0x0440   (0x0010)  
	FString                                            LockOnDoubleJumpFront;                                      // 0x0450   (0x0010)  
	FString                                            LockOnDoubleJumpLeft;                                       // 0x0460   (0x0010)  
	FString                                            LockOnDoubleJumpRight;                                      // 0x0470   (0x0010)  
	FString                                            LockOnDoubleJumpBack;                                       // 0x0480   (0x0010)  
	FString                                            LockOnJumpToIdleFront;                                      // 0x0490   (0x0010)  
	FString                                            LockOnJumpToIdleBack;                                       // 0x04A0   (0x0010)  
	FString                                            LockOnJumpToIdleLeft;                                       // 0x04B0   (0x0010)  
	FString                                            LockOnJumpToIdleRight;                                      // 0x04C0   (0x0010)  
	FString                                            LockOnJumpToRunFront;                                       // 0x04D0   (0x0010)  
	FString                                            LockOnJumpToRunBack;                                        // 0x04E0   (0x0010)  
	FString                                            LockOnJumpToRunLeft;                                        // 0x04F0   (0x0010)  
	FString                                            LockOnJumpToRunRight;                                       // 0x0500   (0x0010)  
	FString                                            LockOnStartSprintFront;                                     // 0x0510   (0x0010)  
	FString                                            LockOnStartSprintBack;                                      // 0x0520   (0x0010)  
	FString                                            LockOnStartSprintLeft;                                      // 0x0530   (0x0010)  
	FString                                            LockOnStartSprintRight;                                     // 0x0540   (0x0010)  
	FString                                            LockOnGuardRotationR;                                       // 0x0550   (0x0010)  
	FString                                            LockOnGuardRotationL;                                       // 0x0560   (0x0010)  
	FString                                            LockOnRotationR;                                            // 0x0570   (0x0010)  
	FString                                            LockOnRotationL;                                            // 0x0580   (0x0010)  
	FString                                            LockOnAtChatRotationR;                                      // 0x0590   (0x0010)  
	FString                                            LockOnAtChatRotationL;                                      // 0x05A0   (0x0010)  
	FString                                            LockOnAtChatTurn_L;                                         // 0x05B0   (0x0010)  
	FString                                            LockOnAtChatTurn_R;                                         // 0x05C0   (0x0010)  
	FString                                            UnLockOnAtChat;                                             // 0x05D0   (0x0010)  
	FString                                            LockOnStartRunFront;                                        // 0x05E0   (0x0010)  
	FString                                            LockOnStartRunBack;                                         // 0x05F0   (0x0010)  
	FString                                            LockOnStartRunLeft;                                         // 0x0600   (0x0010)  
	FString                                            LockOnStartRunRight;                                        // 0x0610   (0x0010)  
	FString                                            LockOnRunToIdleFront;                                       // 0x0620   (0x0010)  
	FString                                            LockOnRunToIdleBack;                                        // 0x0630   (0x0010)  
	FString                                            LockOnRunToIdleLeft;                                        // 0x0640   (0x0010)  
	FString                                            LockOnRunToIdleRight;                                       // 0x0650   (0x0010)  
	FString                                            LockOnAtChatMoveToIdleFrontRFront;                          // 0x0660   (0x0010)  
	FString                                            LockOnAtChatMoveToIdleBackRFront;                           // 0x0670   (0x0010)  
	FString                                            LockOnAtChatMoveToIdleLeftRFront;                           // 0x0680   (0x0010)  
	FString                                            LockOnAtChatMoveToIdleRightRFront;                          // 0x0690   (0x0010)  
	FString                                            LockOnAtChatMoveToIdleFrontLFront;                          // 0x06A0   (0x0010)  
	FString                                            LockOnAtChatMoveToIdleBackLFront;                           // 0x06B0   (0x0010)  
	FString                                            LockOnAtChatMoveToIdleLeftLFront;                           // 0x06C0   (0x0010)  
	FString                                            LockOnAtChatMoveToIdleRightLFront;                          // 0x06D0   (0x0010)  
	FString                                            LockOnSprintToIdleFront;                                    // 0x06E0   (0x0010)  
	FString                                            LockOnSprintToIdleBack;                                     // 0x06F0   (0x0010)  
	FString                                            LockOnSprintToIdleLeft;                                     // 0x0700   (0x0010)  
	FString                                            LockOnSprintToIdleRight;                                    // 0x0710   (0x0010)  
	FString                                            CliffReaction;                                              // 0x0720   (0x0010)  
	FString                                            BlockWallFrontRun;                                          // 0x0730   (0x0010)  
	FString                                            BlockWallFrontWalk;                                         // 0x0740   (0x0010)  
	FString                                            BlockWallFrontSprint;                                       // 0x0750   (0x0010)  
	FString                                            HuddleUpGround;                                             // 0x0760   (0x0010)  
	FString                                            HuddleUpGroundHigh;                                         // 0x0770   (0x0010)  
	FString                                            HuddleUpFalling;                                            // 0x0780   (0x0010)  
	FString                                            HuddleUpGroundToLow;                                        // 0x0790   (0x0010)  
	FString                                            HuddleUpGroundHighToLow;                                    // 0x07A0   (0x0010)  
	FString                                            HuddleUpFallingHigh;                                        // 0x07B0   (0x0010)  
	FString                                            HuddleUpSideRod;                                            // 0x07C0   (0x0010)  
	FString                                            HuddleUpSideRodWallless;                                    // 0x07D0   (0x0010)  
	FString                                            HuddleUpGroundType2ToLow;                                   // 0x07E0   (0x0010)  
	FString                                            HuddleUpGroundType2;                                        // 0x07F0   (0x0010)  
	FString                                            HuddleUpGroundType3ToLow;                                   // 0x0800   (0x0010)  
	FString                                            HuddleUpGroundType3;                                        // 0x0810   (0x0010)  
	FString                                            StartFallToLowDist;                                         // 0x0820   (0x0010)  
	FString                                            FallToLowDistToRun;                                         // 0x0830   (0x0010)  
	FString                                            FallToLowDistToIdle;                                        // 0x0840   (0x0010)  
	FString                                            FallToSwim;                                                 // 0x0850   (0x0010)  
	FString                                            GroundToSwim;                                               // 0x0860   (0x0010)  
	FString                                            UnderWaterToWaterLine;                                      // 0x0870   (0x0010)  
	FString                                            WaterLineToUnderWater;                                      // 0x0880   (0x0010)  
	FString                                            WaterLineToUnderWaterFail;                                  // 0x0890   (0x0010)  
	FString                                            SwimToGround;                                               // 0x08A0   (0x0010)  
	FString                                            SwimJump;                                                   // 0x08B0   (0x0010)  
	FString                                            SwimTurn;                                                   // 0x08C0   (0x0010)  
	FString                                            UnderWaterSwimTurn;                                         // 0x08D0   (0x0010)  
	FString                                            GroundToSlope;                                              // 0x08E0   (0x0010)  
	FString                                            FallToSlope;                                                // 0x08F0   (0x0010)  
	FString                                            SlopeJump;                                                  // 0x0900   (0x0010)  
	FString                                            SlopeDoubleJump;                                            // 0x0910   (0x0010)  
	FString                                            SlopeToGround;                                              // 0x0920   (0x0010)  
	FString                                            SlopeToFall;                                                // 0x0930   (0x0010)  
	FString                                            SlopeJumpToLand;                                            // 0x0940   (0x0010)  
	FString                                            StartWalkSlidingSlip;                                       // 0x0950   (0x0010)  
	FString                                            EndWalkSlidingSlip;                                         // 0x0960   (0x0010)  
	FString                                            Custom_HitStandLight1Left;                                  // 0x0970   (0x0010)  
	FString                                            Custom_HitStandLight1Right;                                 // 0x0980   (0x0010)  
	FString                                            Custom_HitStandLight1Back;                                  // 0x0990   (0x0010)  
	FString                                            Custom_HitStandLight1Front;                                 // 0x09A0   (0x0010)  
	FString                                            Custom_HitStandLight2Left;                                  // 0x09B0   (0x0010)  
	FString                                            Custom_HitStandLight2Right;                                 // 0x09C0   (0x0010)  
	FString                                            Custom_HitStandLight2Back;                                  // 0x09D0   (0x0010)  
	FString                                            Custom_HitStandLight2Front;                                 // 0x09E0   (0x0010)  
	FString                                            Custom_HitStandStrong1Left;                                 // 0x09F0   (0x0010)  
	FString                                            Custom_HitStandStrong1Right;                                // 0x0A00   (0x0010)  
	FString                                            Custom_HitStandStrong1Back;                                 // 0x0A10   (0x0010)  
	FString                                            Custom_HitStandStrong1Front;                                // 0x0A20   (0x0010)  
	FString                                            Custom_HitStandStrong2Left;                                 // 0x0A30   (0x0010)  
	FString                                            Custom_HitStandStrong2Right;                                // 0x0A40   (0x0010)  
	FString                                            Custom_HitStandStrong2Back;                                 // 0x0A50   (0x0010)  
	FString                                            Custom_HitStandStrong2Front;                                // 0x0A60   (0x0010)  
	FString                                            Custom_Groggy_Start;                                        // 0x0A70   (0x0010)  
	FString                                            Custom_Groggy_Loop;                                         // 0x0A80   (0x0010)  
	FString                                            Custom_Groggy_End;                                          // 0x0A90   (0x0010)  
	FString                                            Custom_Airborne_Loop;                                       // 0x0AA0   (0x0010)  
	FString                                            Custom_KnockDown_Start_Front;                               // 0x0AB0   (0x0010)  
	FString                                            Custom_KnockDown_Start_Back;                                // 0x0AC0   (0x0010)  
	FString                                            Custom_KnockDown_Loop;                                      // 0x0AD0   (0x0010)  
	FString                                            Custom_KnockDown_End;                                       // 0x0AE0   (0x0010)  
	FString                                            Custom_Caution_LeftToIdle;                                  // 0x0AF0   (0x0010)  
	FString                                            Custom_Caution_RightToIdle;                                 // 0x0B00   (0x0010)  
	FString                                            Custom_HitSwordNormalLinkAttack1;                           // 0x0B10   (0x0010)  
	FString                                            Custom_HitSwordNormalFinishLinkAttack1;                     // 0x0B20   (0x0010)  
	FString                                            Custom_HitSwordAirDropAttack1;                              // 0x0B30   (0x0010)  
	FString                                            Custom_HitSwordNormalBackStab1;                             // 0x0B40   (0x0010)  
	FString                                            Custom_Anim1;                                               // 0x0B50   (0x0010)  
	FString                                            Custom_Anim2;                                               // 0x0B60   (0x0010)  
	FString                                            Custom_Anim3;                                               // 0x0B70   (0x0010)  
	FString                                            Custom_Anim4;                                               // 0x0B80   (0x0010)  
	FString                                            Custom_Anim5;                                               // 0x0B90   (0x0010)  
	FString                                            Custom_Anim6;                                               // 0x0BA0   (0x0010)  
	FString                                            Custom_Anim7;                                               // 0x0BB0   (0x0010)  
	FString                                            Custom_Anim8;                                               // 0x0BC0   (0x0010)  
	FString                                            Custom_Anim9;                                               // 0x0BD0   (0x0010)  
	FString                                            Custom_Anim10;                                              // 0x0BE0   (0x0010)  
	FString                                            Custom_Anim11;                                              // 0x0BF0   (0x0010)  
	FString                                            Custom_Anim12;                                              // 0x0C00   (0x0010)  
	FString                                            Custom_Anim13;                                              // 0x0C10   (0x0010)  
	FString                                            Custom_Anim14;                                              // 0x0C20   (0x0010)  
	FString                                            Custom_Anim15;                                              // 0x0C30   (0x0010)  
	FString                                            Custom_Anim16;                                              // 0x0C40   (0x0010)  
	FString                                            Custom_Anim17;                                              // 0x0C50   (0x0010)  
	FString                                            Custom_Anim18;                                              // 0x0C60   (0x0010)  
	FString                                            Custom_Anim19;                                              // 0x0C70   (0x0010)  
	FString                                            Custom_Anim20;                                              // 0x0C80   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0C90   (0x0008)  
};

/// Struct /Script/SB.SBCharacterAnimMoveInfoTableProperty
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FSBCharacterAnimMoveInfoTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	float                                              MovingDistance;                                             // 0x0014   (0x0004)  
	float                                              DelayDuration;                                              // 0x0018   (0x0004)  
	float                                              MovingDuration;                                             // 0x001C   (0x0004)  
	float                                              RotationDelayDuration;                                      // 0x0020   (0x0004)  
	float                                              RotationDuration;                                           // 0x0024   (0x0004)  
	bool                                               LinearInterpRotation;                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              AnimPlayDuration;                                           // 0x002C   (0x0004)  
	float                                              AnimBlendTime;                                              // 0x0030   (0x0004)  
	float                                              InputBlockDuration;                                         // 0x0034   (0x0004)  
	bool                                               LinearInterpLocation;                                       // 0x0038   (0x0001)  
	bool                                               bOverrideLinearInterpLocation;                              // 0x0039   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x003A   (0x0002)  MISSED
	int32_t                                            RotationDirType;                                            // 0x003C   (0x0004)  
};

/// Struct /Script/SB.SBEquipmentMaterialTableProperty
/// Size: 0x0050 (80 bytes) (0x000010 - 0x000050) align n/a MaxSize: 0x0050
struct FSBEquipmentMaterialTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Group;                                                      // 0x0014   (0x0008)  
	int32_t                                            VariationIndex;                                             // 0x001C   (0x0004)  
	int32_t                                            MaterialIndex;                                              // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FString                                            MaterialAssetPath;                                          // 0x0028   (0x0010)  
	FString                                            IconColorAssetPath;                                         // 0x0038   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0048   (0x0008)  
};

/// Struct /Script/SB.SBEquipmentTableProperty
/// Size: 0x0258 (600 bytes) (0x000010 - 0x000258) align n/a MaxSize: 0x0258
struct FSBEquipmentTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBEquipmentType>                      Type;                                                       // 0x0014   (0x0001)  
	TEnumAsByte<ESBEquipmentSubType>                   SubType;                                                    // 0x0015   (0x0001)  
	unsigned char                                      UnknownData11_6[0x2];                                       // 0x0016   (0x0002)  MISSED
	FName                                              Tag;                                                        // 0x0018   (0x0008)  
	TArray<FName>                                      EffectAliasArray;                                           // 0x0020   (0x0010)  
	FString                                            MountingResourcePath;                                       // 0x0030   (0x0010)  
	FName                                              MaterialGroup;                                              // 0x0040   (0x0008)  
	FName                                              MountingResourceCollisionProfileName;                       // 0x0048   (0x0008)  
	FString                                            UnmountingResourcePath;                                     // 0x0050   (0x0010)  
	float                                              UnmountingEquipmentMassScale;                               // 0x0060   (0x0004)  
	bool                                               bUnmountingEquipmentNoRemove;                               // 0x0064   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	FString                                            MountingShowPath;                                           // 0x0068   (0x0010)  
	FName                                              MountingSocketName;                                         // 0x0078   (0x0008)  
	FString                                            MountingEquipShowPath;                                      // 0x0080   (0x0010)  
	FString                                            CompletedMountingEquipShowPath;                             // 0x0090   (0x0010)  
	bool                                               bDisableCompletedMountingEquipment;                         // 0x00A0   (0x0001)  
	bool                                               bWorldStaticAndDynamicCollisionUnmounting;                  // 0x00A1   (0x0001)  
	bool                                               bReleasablyMounted;                                         // 0x00A2   (0x0001)  
	unsigned char                                      UnknownData13_6[0x1];                                       // 0x00A3   (0x0001)  MISSED
	FName                                              AnimAssetPath;                                              // 0x00A4   (0x0008)  
	unsigned char                                      UnknownData14_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	FString                                            FoldShow;                                                   // 0x00B0   (0x0010)  
	FString                                            UnFoldShow;                                                 // 0x00C0   (0x0010)  
	FString                                            ForceFoldShow;                                              // 0x00D0   (0x0010)  
	FString                                            UseSkillUnFoldShow;                                         // 0x00E0   (0x0010)  
	FString                                            StartSlopeShow;                                             // 0x00F0   (0x0010)  
	FString                                            EndSlopeShow;                                               // 0x0100   (0x0010)  
	FString                                            ChangeEquipmentShow;                                        // 0x0110   (0x0010)  
	FString                                            CompleteChangeEquipmentShow;                                // 0x0120   (0x0010)  
	FName                                              AttachSocket;                                               // 0x0130   (0x0008)  
	FName                                              EditorAttachSocket;                                         // 0x0138   (0x0008)  
	FVector                                            RelativePosition;                                           // 0x0140   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x014C   (0x000C)  
	TEnumAsByte<ESBMeshAttachType>                     AttachType;                                                 // 0x0158   (0x0001)  
	TEnumAsByte<ESBCharaterAdditiveBodyType>           ActiveIdleAdditiveBody;                                     // 0x0159   (0x0001)  
	unsigned char                                      UnknownData15_6[0x2];                                       // 0x015A   (0x0002)  MISSED
	float                                              AdditiveBodyAlpha;                                          // 0x015C   (0x0004)  
	float                                              IdleAdditiveAnimationMaxAlpha;                              // 0x0160   (0x0004)  
	unsigned char                                      UnknownData16_6[0x4];                                       // 0x0164   (0x0004)  MISSED
	TArray<FName>                                      AttachRopeRelativeSocketName;                               // 0x0168   (0x0010)  
	TArray<FVector>                                    AttachRopeRelativeLocation;                                 // 0x0178   (0x0010)  
	FString                                            AdditionalComaReviveShowPath;                               // 0x0188   (0x0010)  
	bool                                               IsEnableLowAngleEvent;                                      // 0x0198   (0x0001)  
	unsigned char                                      UnknownData17_6[0x7];                                       // 0x0199   (0x0007)  MISSED
	FString                                            CharacterSoundSetOverride;                                  // 0x01A0   (0x0010)  
	FString                                            CharacterFootstepSetOverride;                               // 0x01B0   (0x0010)  
	FString                                            PhotoModePoseSnapshotData;                                  // 0x01C0   (0x0010)  
	bool                                               bDisablePostProcessWhenPhotoModePoseSnapshot;               // 0x01D0   (0x0001)  
	unsigned char                                      UnknownData18_6[0x7];                                       // 0x01D1   (0x0007)  MISSED
	FString                                            PhotoModePonytailSnapshotData;                              // 0x01D8   (0x0010)  
	FString                                            PhotoModeHairSnapshotData;                                  // 0x01E8   (0x0010)  
	FString                                            PhotoModeTachyWingSnapshotData;                             // 0x01F8   (0x0010)  
	FString                                            SelfieModePoseSnapshotData;                                 // 0x0208   (0x0010)  
	TEnumAsByte<ESBEquipmentType>                      OverrideMaterialMeshSlot;                                   // 0x0218   (0x0001)  
	unsigned char                                      UnknownData19_6[0x3];                                       // 0x0219   (0x0003)  MISSED
	FName                                              OverrideMeshMaterialGroup;                                  // 0x021C   (0x0008)  
	bool                                               bUseHidePonytail;                                           // 0x0224   (0x0001)  
	TEnumAsByte<ESBEquipmentType>                      HideMeshSlot;                                               // 0x0225   (0x0001)  
	bool                                               bLongHair;                                                  // 0x0226   (0x0001)  
	unsigned char                                      UnknownData20_6[0x1];                                       // 0x0227   (0x0001)  MISSED
	FString                                            MountingResourcePathWhenLongHair;                           // 0x0228   (0x0010)  
	TEnumAsByte<ESBEquipmentForceBody>                 ForceBodyType;                                              // 0x0238   (0x0001)  
	unsigned char                                      UnknownData21_6[0x7];                                       // 0x0239   (0x0007)  MISSED
	FString                                            MountingResourcePathWhenForceBodyType1;                     // 0x0240   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0250   (0x0008)  
};

/// Struct /Script/SB.SBSkillCommandTableProperty
/// Size: 0x0100 (256 bytes) (0x000010 - 0x000100) align n/a MaxSize: 0x0100
struct FSBSkillCommandTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBSkillCommandActionType>             CommandActionType;                                          // 0x0014   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              SkillAlias;                                                 // 0x0018   (0x0008)  
	FName                                              SkillPriorityAlias;                                         // 0x0020   (0x0008)  
	int32_t                                            Priority;                                                   // 0x0028   (0x0004)  
	TEnumAsByte<ESBConditionCheckType>                 CombinationKey1CheckType;                                   // 0x002C   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 CombinationKey2CheckType;                                   // 0x002D   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 CombinationCrossUpCheckType;                                // 0x002E   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 CombinationCrossDownCheckType;                              // 0x002F   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 CombinationCrossLeftCheckType;                              // 0x0030   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 CombinationCrossRightCheckType;                             // 0x0031   (0x0001)  
	TEnumAsByte<ESBSkillCommandState>                  Command;                                                    // 0x0032   (0x0001)  
	TEnumAsByte<ESBSkillCommandState>                  PressCheckCommand;                                          // 0x0033   (0x0001)  
	TEnumAsByte<ESBSkillHitResult>                     HitResult;                                                  // 0x0034   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	float                                              HitResultTime;                                              // 0x0038   (0x0004)  
	float                                              JustActiveTime;                                             // 0x003C   (0x0004)  
	float                                              InputTime;                                                  // 0x0040   (0x0004)  
	float                                              InputDuration;                                              // 0x0044   (0x0004)  
	TEnumAsByte<ESBActorState>                         ActorState;                                                 // 0x0048   (0x0001)  
	TEnumAsByte<ESBEquipmentSubType>                   WeaponType;                                                 // 0x0049   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bJumping;                                                   // 0x004A   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bWallRun;                                                   // 0x004B   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bSprint;                                                    // 0x004C   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bRun;                                                       // 0x004D   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bLockOn;                                                    // 0x004E   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bFly;                                                       // 0x004F   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bSwimming;                                                  // 0x0050   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bUWSwimming;                                                // 0x0051   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bFirstSwimming;                                             // 0x0052   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bEventMoving;                                               // 0x0053   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bInBreakfallRange;                                          // 0x0054   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bTachyGaugeMax;                                             // 0x0055   (0x0001)  
	unsigned char                                      UnknownData11_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	TArray<FName>                                      CheckActiveEffectAliasArray;                                // 0x0058   (0x0010)  
	TArray<FName>                                      CheckActiveNoneEffectAliasArray;                            // 0x0068   (0x0010)  
	TEnumAsByte<ESBSkillCommandInputType>              InputType;                                                  // 0x0078   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0079   (0x0003)  MISSED
	FName                                              Stance;                                                     // 0x007C   (0x0008)  
	FName                                              BulletItemAlias;                                            // 0x0084   (0x0008)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	TArray<FName>                                      NextComboCommandArray;                                      // 0x0090   (0x0010)  
	bool                                               bCheckTargetFilter;                                         // 0x00A0   (0x0001)  
	bool                                               bPressInputTypeWhenNoOtherCommand;                          // 0x00A1   (0x0001)  
	bool                                               GlobalCommand;                                              // 0x00A2   (0x0001)  
	bool                                               bCheckSameSkillActivation;                                  // 0x00A3   (0x0001)  
	bool                                               bCheckInputDirectionWhenHold;                               // 0x00A4   (0x0001)  
	bool                                               bCheckInputDirectionAngle;                                  // 0x00A5   (0x0001)  
	bool                                               bInputDirectionByActorLocalAxis;                            // 0x00A6   (0x0001)  
	unsigned char                                      UnknownData14_6[0x1];                                       // 0x00A7   (0x0001)  MISSED
	float                                              MinInputDirectionAngle;                                     // 0x00A8   (0x0004)  
	float                                              MaxInputDirectionAngle;                                     // 0x00AC   (0x0004)  
	float                                              HoldDuration;                                               // 0x00B0   (0x0004)  
	int32_t                                            AICommandActivationRate;                                    // 0x00B4   (0x0004)  
	FString                                            TargetShowPath;                                             // 0x00B8   (0x0010)  
	FName                                              CommandUIImage;                                             // 0x00C8   (0x0008)  
	TEnumAsByte<ESBSkillEnergyType>                    ReqEnergyType;                                              // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x00D1   (0x0003)  MISSED
	float                                              ReqEnergyAmount;                                            // 0x00D4   (0x0004)  
	bool                                               bDisableReservation;                                        // 0x00D8   (0x0001)  
	bool                                               bBlockJumpAction;                                           // 0x00D9   (0x0001)  
	bool                                               bIgnoreLastUsedHoldSkill;                                   // 0x00DA   (0x0001)  
	bool                                               bRemainToggleSprint;                                        // 0x00DB   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 DualSenseCheckType;                                         // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x00DD   (0x0003)  MISSED
	TArray<TEnumAsByte<ESBDualSenseTriggerEffectState>> DualSenseTriggerEffectStateConditions;                     // 0x00E0   (0x0010)  
	bool                                               bForceRootTrainingRoomLog;                                  // 0x00F0   (0x0001)  
	bool                                               bForceComboTrainingRoomLog;                                 // 0x00F1   (0x0001)  
	unsigned char                                      UnknownData17_6[0x2];                                       // 0x00F2   (0x0002)  MISSED
	int32_t                                            DiableLockOnTargetFrameCount;                               // 0x00F4   (0x0004)  
	FName                                              FileSuffix;                                                 // 0x00F8   (0x0008)  
};

/// Struct /Script/SB.SBSkillTargetFilterTableProperty
/// Size: 0x00B8 (184 bytes) (0x000010 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FSBSkillTargetFilterTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	TEnumAsByte<ESBTargetActor>                        TargetType;                                                 // 0x0014   (0x0001)  
	bool                                               bMultipleTargets;                                           // 0x0015   (0x0001)  
	bool                                               bDynamicShapeScale;                                         // 0x0016   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x0017   (0x0001)  MISSED
	float                                              MinShapeScale;                                              // 0x0018   (0x0004)  
	float                                              MaxShapeScale;                                              // 0x001C   (0x0004)  
	float                                              NearDistance;                                               // 0x0020   (0x0004)  
	float                                              FarDistance;                                                // 0x0024   (0x0004)  
	TEnumAsByte<ESBActorSortType>                      SortType;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              CheckHitStepTimeWhenSortParry;                              // 0x002C   (0x0004)  
	float                                              ShapeForwardDistance;                                       // 0x0030   (0x0004)  
	float                                              ShapeRightDistance;                                         // 0x0034   (0x0004)  
	float                                              ShapeUpDistance;                                            // 0x0038   (0x0004)  
	TEnumAsByte<ESBCheckShape>                         TargetCheckShape;                                           // 0x003C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	float                                              TargetCheckValue1;                                          // 0x0040   (0x0004)  
	float                                              TargetCheckValue2;                                          // 0x0044   (0x0004)  
	float                                              TargetCheckValue3;                                          // 0x0048   (0x0004)  
	TEnumAsByte<ESBActorState>                         ActorState1;                                                // 0x004C   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState2;                                                // 0x004D   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState3;                                                // 0x004E   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState4;                                                // 0x004F   (0x0001)  
	TEnumAsByte<ESBActorState>                         ActorState5;                                                // 0x0050   (0x0001)  
	TEnumAsByte<ESBActorState>                         NonActorState1;                                             // 0x0051   (0x0001)  
	TEnumAsByte<ESBActorState>                         NonActorState2;                                             // 0x0052   (0x0001)  
	TEnumAsByte<ESBActorState>                         NonActorState3;                                             // 0x0053   (0x0001)  
	TEnumAsByte<ESBActorState>                         NonActorState4;                                             // 0x0054   (0x0001)  
	TEnumAsByte<ESBActorState>                         NonActorState5;                                             // 0x0055   (0x0001)  
	TEnumAsByte<ESBActorStatType>                      ActorStat1;                                                 // 0x0056   (0x0001)  
	TEnumAsByte<ESBActorStatCheckType>                 ActorStatCheck1;                                            // 0x0057   (0x0001)  
	int32_t                                            ActorStatCheckValue1;                                       // 0x0058   (0x0004)  
	float                                              CheckMinAngleToTarget;                                      // 0x005C   (0x0004)  
	float                                              CheckMaxAngleToTarget;                                      // 0x0060   (0x0004)  
	bool                                               bDisableBlockingCheck;                                      // 0x0064   (0x0001)  
	bool                                               bBlockingCheckWithTopLocation;                              // 0x0065   (0x0001)  
	bool                                               bValidEngineHandle;                                         // 0x0066   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 CheckBattleMode;                                            // 0x0067   (0x0001)  
	TArray<FName>                                      CheckActiveEffectAliasArray;                                // 0x0068   (0x0010)  
	TArray<FName>                                      CheckActiveNoneEffectAliasArray;                            // 0x0078   (0x0010)  
	TArray<FName>                                      CheckActiveEffectAliasArrayWhenEasyMode;                    // 0x0088   (0x0010)  
	TArray<FName>                                      CheckActiveNoneEffectAliasArrayWhenEasyMode;                // 0x0098   (0x0010)  
	float                                              GroundHeightToTarget;                                       // 0x00A8   (0x0004)  
	TEnumAsByte<ESBConditionCheckType>                 bSwimming;                                                  // 0x00AC   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bEncroachmentable;                                          // 0x00AD   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 bDead;                                                      // 0x00AE   (0x0001)  
	bool                                               bNotSupportedZoneEventActor;                                // 0x00AF   (0x0001)  
	FName                                              FileSuffix;                                                 // 0x00B0   (0x0008)  
};

/// Struct /Script/SB.SBJsonSkillBranchEffect
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBJsonSkillBranchEffect
{ 
	FName                                              Effect;                                                     // 0x0000   (0x0008)  
	FName                                              SkillActiveStepAlias;                                       // 0x0008   (0x0008)  
};

/// Struct /Script/SB.SBSkillTableProperty
/// Size: 0x0308 (776 bytes) (0x000010 - 0x000308) align n/a MaxSize: 0x0308
struct FSBSkillTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	unsigned char                                      UnknownData24_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            Loc_SkillName;                                              // 0x0018   (0x0010)  
	FString                                            Loc_SystemNotice_IsBeingCooltime;                           // 0x0028   (0x0010)  
	FString                                            Loc_SystemNotice_CannotUse;                                 // 0x0038   (0x0010)  
	FName                                              Flag;                                                       // 0x0048   (0x0008)  
	TEnumAsByte<ESBActorStatType>                      AdditiveSkillDamageGroup;                                   // 0x0050   (0x0001)  
	unsigned char                                      UnknownData25_6[0x7];                                       // 0x0051   (0x0007)  MISSED
	TArray<FName>                                      AchievementTags;                                            // 0x0058   (0x0010)  
	float                                              StartDelay;                                                 // 0x0068   (0x0004)  
	int32_t                                            StartDelayTick;                                             // 0x006C   (0x0004)  
	int32_t                                            HitLevel;                                                   // 0x0070   (0x0004)  
	TEnumAsByte<ESBAttributeType>                      AttributeType;                                              // 0x0074   (0x0001)  
	TEnumAsByte<ESBSkillType>                          SkillType;                                                  // 0x0075   (0x0001)  
	TEnumAsByte<ESBActorAction>                        ActorAction;                                                // 0x0076   (0x0001)  
	unsigned char                                      UnknownData26_6[0x1];                                       // 0x0077   (0x0001)  MISSED
	FName                                              EffectSkillFlag;                                            // 0x0078   (0x0008)  
	FName                                              AISkillFlag;                                                // 0x0080   (0x0008)  
	bool                                               bCheckTargetExists;                                         // 0x0088   (0x0001)  
	bool                                               bCheckNoTargeting;                                          // 0x0089   (0x0001)  
	bool                                               bUsableSkillWhenTargetSwimming;                             // 0x008A   (0x0001)  
	unsigned char                                      UnknownData27_6[0x5];                                       // 0x008B   (0x0005)  MISSED
	TArray<FName>                                      CheckValidMoveAliasArray;                                   // 0x0090   (0x0010)  
	TArray<FName>                                      CheckInvalidMoveAliasArray;                                 // 0x00A0   (0x0010)  
	bool                                               bCheckActiveStepValidMove;                                  // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData28_6[0x3];                                       // 0x00B1   (0x0003)  MISSED
	FName                                              TargetFilterAlias;                                          // 0x00B4   (0x0008)  
	FName                                              LockOnOverrideTargetFilterAlias;                            // 0x00BC   (0x0008)  
	FName                                              ZoneEventActorTargetFilterAlias;                            // 0x00C4   (0x0008)  
	float                                              AIAttackableDistance;                                       // 0x00CC   (0x0004)  
	bool                                               bBranchActiveStepByTargetFlag;                              // 0x00D0   (0x0001)  
	bool                                               bBranchActiveStepByPrevSkill;                               // 0x00D1   (0x0001)  
	bool                                               bBranchActiveStepByFoot;                                    // 0x00D2   (0x0001)  
	bool                                               bBranchActiveStepByActivatingSkill;                         // 0x00D3   (0x0001)  
	bool                                               bBranchActiveStepByBulletItemAlias;                         // 0x00D4   (0x0001)  
	unsigned char                                      UnknownData29_6[0x3];                                       // 0x00D5   (0x0003)  MISSED
	uint32_t                                           BranchActiveStepByUsedCount;                                // 0x00D8   (0x0004)  
	bool                                               bBranchActiveStepByCheckConsumeItem;                        // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData30_6[0x3];                                       // 0x00DD   (0x0003)  MISSED
	int32_t                                            BranchRandomStep;                                           // 0x00E0   (0x0004)  
	bool                                               bBranchLinkSkillRandomStep;                                 // 0x00E4   (0x0001)  
	unsigned char                                      UnknownData31_6[0x3];                                       // 0x00E5   (0x0003)  MISSED
	FString                                            FirstActiveStepByEffect;                                    // 0x00E8   (0x0010)  
	FName                                              NextSkillBranchStep;                                        // 0x00F8   (0x0008)  
	FName                                              FirstSkillActiveAlias;                                      // 0x0100   (0x0008)  
	float                                              JustActionTime;                                             // 0x0108   (0x0004)  
	float                                              JustActionTime_StoryMode;                                   // 0x010C   (0x0004)  
	FName                                              JustSkillActiveAlias;                                       // 0x0110   (0x0008)  
	float                                              ConditionJustAction_MoveDirectionToTargetAngle;             // 0x0118   (0x0004)  
	FName                                              UseableCheckGroup;                                          // 0x011C   (0x0008)  
	float                                              CoolTime;                                                   // 0x0124   (0x0004)  
	int32_t                                            UsableCount;                                                // 0x0128   (0x0004)  
	TEnumAsByte<ESBSkillEnergyType>                    UseEnergyType;                                              // 0x012C   (0x0001)  
	unsigned char                                      UnknownData32_6[0x3];                                       // 0x012D   (0x0003)  MISSED
	float                                              UseEnergyAmount;                                            // 0x0130   (0x0004)  
	FName                                              ConsumeItemAlias;                                           // 0x0134   (0x0008)  
	TEnumAsByte<ESBSkillConsumeItemCount>              ConsumeItemCountType;                                       // 0x013C   (0x0001)  
	unsigned char                                      UnknownData33_6[0x3];                                       // 0x013D   (0x0003)  MISSED
	float                                              AttackDamageRate;                                           // 0x0140   (0x0004)  
	float                                              ShieldAttackDamageRate;                                     // 0x0144   (0x0004)  
	float                                              FixedDamage;                                                // 0x0148   (0x0004)  
	bool                                               Cancelable;                                                 // 0x014C   (0x0001)  
	bool                                               ActiveSkillWhileCutoff;                                     // 0x014D   (0x0001)  
	unsigned char                                      UnknownData34_6[0x2];                                       // 0x014E   (0x0002)  MISSED
	FName                                              TargetDeadAnimBS;                                           // 0x0150   (0x0008)  
	FName                                              TargetDeadType;                                             // 0x0158   (0x0008)  
	FString                                            WorldObjectHitShow;                                         // 0x0160   (0x0010)  
	bool                                               RotateInputDirection;                                       // 0x0170   (0x0001)  
	bool                                               RotateInputDirectionIgnoreLockOn;                           // 0x0171   (0x0001)  
	bool                                               bSwitchBattleMode;                                          // 0x0172   (0x0001)  
	bool                                               bUnlockOn;                                                  // 0x0173   (0x0001)  
	bool                                               bIgnoreBlockSkill;                                          // 0x0174   (0x0001)  
	bool                                               bDelayAutoLockOn;                                           // 0x0175   (0x0001)  
	bool                                               bDisableWorldCustomTimeScale;                               // 0x0176   (0x0001)  
	bool                                               bDisableSkillShowStepWhenStandalone;                        // 0x0177   (0x0001)  
	bool                                               bDisableEventMove;                                          // 0x0178   (0x0001)  
	bool                                               bDisableStopWhenAttachedLevelSeq;                           // 0x0179   (0x0001)  
	unsigned char                                      UnknownData35_6[0x2];                                       // 0x017A   (0x0002)  MISSED
	FName                                              AcquisitionSkillAlias;                                      // 0x017C   (0x0008)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionEnd_Swimming;                                      // 0x0184   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionEnd_UWSwimming;                                    // 0x0185   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionEnd_MeleeCombat;                                   // 0x0186   (0x0001)  
	TEnumAsByte<ESBConditionCheckType>                 ConditionEnd_RangedCombat;                                  // 0x0187   (0x0001)  
	bool                                               ConditionEnd_bTargetDead;                                   // 0x0188   (0x0001)  
	bool                                               bIgnoreAttackSpeedStat;                                     // 0x0189   (0x0001)  
	bool                                               bStopCloaking;                                              // 0x018A   (0x0001)  
	unsigned char                                      UnknownData36_6[0x1];                                       // 0x018B   (0x0001)  MISSED
	FName                                              ExpansionFromAcquisitionAlias1;                             // 0x018C   (0x0008)  
	TEnumAsByte<ESBSkillExpansionType>                 ExpansionType1;                                             // 0x0194   (0x0001)  
	unsigned char                                      UnknownData37_6[0x3];                                       // 0x0195   (0x0003)  MISSED
	FString                                            ExpansionValue1;                                            // 0x0198   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias2;                             // 0x01A8   (0x0008)  
	TEnumAsByte<ESBSkillExpansionType>                 ExpansionType2;                                             // 0x01B0   (0x0001)  
	unsigned char                                      UnknownData38_6[0x7];                                       // 0x01B1   (0x0007)  MISSED
	FString                                            ExpansionValue2;                                            // 0x01B8   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias3;                             // 0x01C8   (0x0008)  
	TEnumAsByte<ESBSkillExpansionType>                 ExpansionType3;                                             // 0x01D0   (0x0001)  
	unsigned char                                      UnknownData39_6[0x7];                                       // 0x01D1   (0x0007)  MISSED
	FString                                            ExpansionValue3;                                            // 0x01D8   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias4;                             // 0x01E8   (0x0008)  
	TEnumAsByte<ESBSkillExpansionType>                 ExpansionType4;                                             // 0x01F0   (0x0001)  
	unsigned char                                      UnknownData40_6[0x7];                                       // 0x01F1   (0x0007)  MISSED
	FString                                            ExpansionValue4;                                            // 0x01F8   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias5;                             // 0x0208   (0x0008)  
	TEnumAsByte<ESBSkillExpansionType>                 ExpansionType5;                                             // 0x0210   (0x0001)  
	unsigned char                                      UnknownData41_6[0x7];                                       // 0x0211   (0x0007)  MISSED
	FString                                            ExpansionValue5;                                            // 0x0218   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias6;                             // 0x0228   (0x0008)  
	TEnumAsByte<ESBSkillExpansionType>                 ExpansionType6;                                             // 0x0230   (0x0001)  
	unsigned char                                      UnknownData42_6[0x7];                                       // 0x0231   (0x0007)  MISSED
	FString                                            ExpansionValue6;                                            // 0x0238   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias7;                             // 0x0248   (0x0008)  
	TEnumAsByte<ESBSkillExpansionType>                 ExpansionType7;                                             // 0x0250   (0x0001)  
	unsigned char                                      UnknownData43_6[0x7];                                       // 0x0251   (0x0007)  MISSED
	FString                                            ExpansionValue7;                                            // 0x0258   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias8;                             // 0x0268   (0x0008)  
	TEnumAsByte<ESBSkillExpansionType>                 ExpansionType8;                                             // 0x0270   (0x0001)  
	unsigned char                                      UnknownData44_6[0x7];                                       // 0x0271   (0x0007)  MISSED
	FString                                            ExpansionValue8;                                            // 0x0278   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias9;                             // 0x0288   (0x0008)  
	TEnumAsByte<ESBSkillExpansionType>                 ExpansionType9;                                             // 0x0290   (0x0001)  
	unsigned char                                      UnknownData45_6[0x7];                                       // 0x0291   (0x0007)  MISSED
	FString                                            ExpansionValue9;                                            // 0x0298   (0x0010)  
	FName                                              ExpansionFromAcquisitionAlias10;                            // 0x02A8   (0x0008)  
	TEnumAsByte<ESBSkillExpansionType>                 ExpansionType10;                                            // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData46_6[0x7];                                       // 0x02B1   (0x0007)  MISSED
	FString                                            ExpansionValue10;                                           // 0x02B8   (0x0010)  
	bool                                               bApplyOffScreenIndicator;                                   // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData47_6[0x7];                                       // 0x02C9   (0x0007)  MISSED
	FString                                            AimLockOnTargetVibrationSetPath;                            // 0x02D0   (0x0010)  
	FString                                            TrainingRoomLogStringKey;                                   // 0x02E0   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x02F0   (0x0008)  
	TArray<FSBJsonSkillBranchEffect>                   FirstActiveStepByEffectArray;                               // 0x02F8   (0x0010)  
};

/// Struct /Script/SB.SBCharacterTableProperty
/// Size: 0x0548 (1352 bytes) (0x000010 - 0x000548) align n/a MaxSize: 0x0548
struct FSBCharacterTableProperty : FSBTablePropertyBase
{ 
	uint32_t                                           ID;                                                         // 0x0010   (0x0004)  
	FName                                              Rank;                                                       // 0x0014   (0x0008)  
	unsigned char                                      UnknownData16_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	FString                                            Type;                                                       // 0x0020   (0x0010)  
	FName                                              Tribe;                                                      // 0x0030   (0x0008)  
	FName                                              OverrideTribe;                                              // 0x0038   (0x0008)  
	TArray<FName>                                      ConditionList_OverrideTribe;                                // 0x0040   (0x0010)  
	TArray<FName>                                      Tags;                                                       // 0x0050   (0x0010)  
	TArray<FName>                                      LinkSkillRandomActiveStepFlagArray;                         // 0x0060   (0x0010)  
	FName                                              Flag;                                                       // 0x0070   (0x0008)  
	int32_t                                            MaxHP;                                                      // 0x0078   (0x0004)  
	int32_t                                            MaxShield;                                                  // 0x007C   (0x0004)  
	int32_t                                            MaxStamina;                                                 // 0x0080   (0x0004)  
	float                                              PhysicAttackPower;                                          // 0x0084   (0x0004)  
	float                                              RangeAttackPower;                                           // 0x0088   (0x0004)  
	float                                              ShieldAttackPower;                                          // 0x008C   (0x0004)  
	float                                              StaminaAttackPower;                                         // 0x0090   (0x0004)  
	float                                              ShieldBlock;                                                // 0x0094   (0x0004)  
	float                                              BaseDamageReductionByShield;                                // 0x0098   (0x0004)  
	float                                              DamageReductionPerShieldBock;                               // 0x009C   (0x0004)  
	float                                              ShieldRegenPerSecond;                                       // 0x00A0   (0x0004)  
	float                                              ShieldRegenPerSecondWhenBattle;                             // 0x00A4   (0x0004)  
	float                                              StaminaRegenPerSecond;                                      // 0x00A8   (0x0004)  
	float                                              HPRegenPerSecond;                                           // 0x00AC   (0x0004)  
	int32_t                                            BetaGauge;                                                  // 0x00B0   (0x0004)  
	int32_t                                            MaxBetaGauge;                                               // 0x00B4   (0x0004)  
	int32_t                                            BurstGauge;                                                 // 0x00B8   (0x0004)  
	int32_t                                            MaxBurstGauge;                                              // 0x00BC   (0x0004)  
	int32_t                                            MaxTachyGauge;                                              // 0x00C0   (0x0004)  
	int32_t                                            UnlockBurstGauge;                                           // 0x00C4   (0x0004)  
	int32_t                                            UnlockTachyGauge;                                           // 0x00C8   (0x0004)  
	int32_t                                            UnlockTPSMode;                                              // 0x00CC   (0x0004)  
	int32_t                                            GainTachyGaugeOnDead;                                       // 0x00D0   (0x0004)  
	int32_t                                            MoveSpeed;                                                  // 0x00D4   (0x0004)  
	float                                              AttackSpeed;                                                // 0x00D8   (0x0004)  
	float                                              CriticalPercentage;                                         // 0x00DC   (0x0004)  
	float                                              CriticalValueRate;                                          // 0x00E0   (0x0004)  
	float                                              ShieldIgnorePercentage;                                     // 0x00E4   (0x0004)  
	float                                              SmallWeightTypeDamageAdditiveRate;                          // 0x00E8   (0x0004)  
	float                                              LargeWeightTypeDamageAdditiveRate;                          // 0x00EC   (0x0004)  
	float                                              RangeAttackDamageAdditiveRate;                              // 0x00F0   (0x0004)  
	float                                              MeleeAttackDamageReductionRate;                             // 0x00F4   (0x0004)  
	float                                              RangeAttackDamageReductionRate;                             // 0x00F8   (0x0004)  
	float                                              DownStateDamageAdditiveRate;                                // 0x00FC   (0x0004)  
	float                                              GroggyStateDamageAdditiveRate;                              // 0x0100   (0x0004)  
	float                                              AirborneStateDamageAdditiveRate;                            // 0x0104   (0x0004)  
	float                                              FireAttributeDamageReductionRate;                           // 0x0108   (0x0004)  
	float                                              IceAttributeDamageReductionRate;                            // 0x010C   (0x0004)  
	float                                              LightningAttributeDamageReductionRate;                      // 0x0110   (0x0004)  
	float                                              PoisonAttributeDamageReductionRate;                         // 0x0114   (0x0004)  
	float                                              AdditiveFixedDamage;                                        // 0x0118   (0x0004)  
	float                                              LowHpDamageAdditiveRate;                                    // 0x011C   (0x0004)  
	float                                              HighHpDamageAdditiveRate;                                   // 0x0120   (0x0004)  
	float                                              DOTDamageAdditiveRate;                                      // 0x0124   (0x0004)  
	float                                              FinalHPDamageReduceRate;                                    // 0x0128   (0x0004)  
	float                                              FinalShieldDamageReduceRate;                                // 0x012C   (0x0004)  
	float                                              BetaGaugeAdditiveRate;                                      // 0x0130   (0x0004)  
	float                                              Luck;                                                       // 0x0134   (0x0004)  
	float                                              DrainHpByAttackPowerRate;                                   // 0x0138   (0x0004)  
	float                                              DrainHpFixedValue;                                          // 0x013C   (0x0004)  
	float                                              SprintableStaminaValue;                                     // 0x0140   (0x0004)  
	unsigned char                                      UnknownData17_6[0x4];                                       // 0x0144   (0x0004)  MISSED
	TArray<FName>                                      EffectAliasWhenZeroHPArray;                                 // 0x0148   (0x0010)  
	TArray<FName>                                      EffectAliasWhenZeroShieldArray;                             // 0x0158   (0x0010)  
	TArray<FName>                                      EffectAliasWhenZeroStaminaArray;                            // 0x0168   (0x0010)  
	TArray<FName>                                      EffectAliasByRageSkillArray;                                // 0x0178   (0x0010)  
	TArray<FName>                                      EffectAliasBy1ComboSkillArray;                              // 0x0188   (0x0010)  
	TArray<FName>                                      EffectAliasBy2ComboSkillArray;                              // 0x0198   (0x0010)  
	TArray<FName>                                      EffectAliasBy3ComboSkillArray;                              // 0x01A8   (0x0010)  
	TArray<FName>                                      EffectAliasBy4ComboSkillArray;                              // 0x01B8   (0x0010)  
	TArray<FName>                                      EffectAliasBy5ComboSkillArray;                              // 0x01C8   (0x0010)  
	TArray<FName>                                      EffectAliasByCriticalHitArray;                              // 0x01D8   (0x0010)  
	TArray<FName>                                      EffectAliasToTargetByCriticalHitArray;                      // 0x01E8   (0x0010)  
	TEnumAsByte<ESBActorWeightType>                    WeightType;                                                 // 0x01F8   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x01F9   (0x0003)  MISSED
	float                                              MeshScale;                                                  // 0x01FC   (0x0004)  
	float                                              TargetFilterRadius;                                         // 0x0200   (0x0004)  
	float                                              ProjectileTargetFilterRadius;                               // 0x0204   (0x0004)  
	float                                              RuleMoveBlockAreaRadius;                                    // 0x0208   (0x0004)  
	float                                              RuleMoveBlockAreaZHeight;                                   // 0x020C   (0x0004)  
	float                                              RuleMoveBlockAreaOffsetX;                                   // 0x0210   (0x0004)  
	float                                              RuleMoveBlockAreaOffsetY;                                   // 0x0214   (0x0004)  
	float                                              RuleMoveBlockAreaOffsetZ;                                   // 0x0218   (0x0004)  
	float                                              RuleMoveBlockCheckRadius;                                   // 0x021C   (0x0004)  
	TArray<FName>                                      DefaultEffectArray;                                         // 0x0220   (0x0010)  
	TArray<FName>                                      EffectAliasByPlayerCount2;                                  // 0x0230   (0x0010)  
	TArray<FName>                                      EffectAliasByPlayerCount3;                                  // 0x0240   (0x0010)  
	TArray<FName>                                      EffectAliasByPlayerCount4;                                  // 0x0250   (0x0010)  
	TArray<FName>                                      EffectAliasArrayForStoryMode;                               // 0x0260   (0x0010)  
	FName                                              DifficultyStatGroupAlias;                                   // 0x0270   (0x0008)  
	TArray<FName>                                      DefaultEquipmentAliasArray;                                 // 0x0278   (0x0010)  
	FString                                            AttackerEffectWhenDead;                                     // 0x0288   (0x0010)  
	FName                                              DeadAlias;                                                  // 0x0298   (0x0008)  
	float                                              DespawnTimeAfterDeath;                                      // 0x02A0   (0x0004)  
	unsigned char                                      UnknownData19_6[0x4];                                       // 0x02A4   (0x0004)  MISSED
	FString                                            DespawnShow;                                                // 0x02A8   (0x0010)  
	FString                                            SpawnShow;                                                  // 0x02B8   (0x0010)  
	TArray<FName>                                      SpawnEffectList;                                            // 0x02C8   (0x0010)  
	FString                                            MonsterWarpShow;                                            // 0x02D8   (0x0010)  
	TArray<FName>                                      MonsterWarpEffectList;                                      // 0x02E8   (0x0010)  
	FName                                              CollisionGroupName1;                                        // 0x02F8   (0x0008)  
	float                                              CollisionGroupGauge1;                                       // 0x0300   (0x0004)  
	unsigned char                                      UnknownData20_6[0x4];                                       // 0x0304   (0x0004)  MISSED
	TArray<FName>                                      EffectAliasArrayWhenCollisionGroupGaugeZero1;               // 0x0308   (0x0010)  
	FName                                              CollisionGroupName2;                                        // 0x0318   (0x0008)  
	float                                              CollisionGroupGauge2;                                       // 0x0320   (0x0004)  
	unsigned char                                      UnknownData21_6[0x4];                                       // 0x0324   (0x0004)  MISSED
	TArray<FName>                                      EffectAliasArrayWhenCollisionGroupGaugeZero2;               // 0x0328   (0x0010)  
	FName                                              CollisionGroupName3;                                        // 0x0338   (0x0008)  
	float                                              CollisionGroupGauge3;                                       // 0x0340   (0x0004)  
	unsigned char                                      UnknownData22_6[0x4];                                       // 0x0344   (0x0004)  MISSED
	TArray<FName>                                      EffectAliasArrayWhenCollisionGroupGaugeZero3;               // 0x0348   (0x0010)  
	FName                                              CollisionGroupName4;                                        // 0x0358   (0x0008)  
	float                                              CollisionGroupGauge4;                                       // 0x0360   (0x0004)  
	unsigned char                                      UnknownData23_6[0x4];                                       // 0x0364   (0x0004)  MISSED
	TArray<FName>                                      EffectAliasArrayWhenCollisionGroupGaugeZero4;               // 0x0368   (0x0010)  
	FName                                              CollisionGroupName5;                                        // 0x0378   (0x0008)  
	float                                              CollisionGroupGauge5;                                       // 0x0380   (0x0004)  
	unsigned char                                      UnknownData24_6[0x4];                                       // 0x0384   (0x0004)  MISSED
	TArray<FName>                                      EffectAliasArrayWhenCollisionGroupGaugeZero5;               // 0x0388   (0x0010)  
	TArray<FName>                                      StanceAliasArray;                                           // 0x0398   (0x0010)  
	FName                                              DefaultStanceAlias;                                         // 0x03A8   (0x0008)  
	float                                              GetupTime;                                                  // 0x03B0   (0x0004)  
	FName                                              GetupMoveAlias;                                             // 0x03B4   (0x0008)  
	float                                              GroggyEndTime;                                              // 0x03BC   (0x0004)  
	TArray<FName>                                      JumpEffectArray;                                            // 0x03C0   (0x0010)  
	TArray<FName>                                      SprintEffectArray;                                          // 0x03D0   (0x0010)  
	float                                              VelocityWhenWallHitBounce;                                  // 0x03E0   (0x0004)  
	float                                              VelocityDelayWhenWallHitBounce;                             // 0x03E4   (0x0004)  
	FString                                            BehaviorTreeRes;                                            // 0x03E8   (0x0010)  
	FName                                              DefaultDetectAIAlias;                                       // 0x03F8   (0x0008)  
	FName                                              NarrowDetectAIAlias;                                        // 0x0400   (0x0008)  
	FName                                              DetectViewingSocketName;                                    // 0x0408   (0x0008)  
	float                                              AIAuditorySenseRadius;                                      // 0x0410   (0x0004)  
	float                                              AIAuditorySenseDecibel;                                     // 0x0414   (0x0004)  
	float                                              AIAuditorySenseDuration;                                    // 0x0418   (0x0004)  
	TEnumAsByte<ESBActorType>                          ActorType;                                                  // 0x041C   (0x0001)  
	unsigned char                                      UnknownData25_6[0x3];                                       // 0x041D   (0x0003)  MISSED
	FName                                              RefAppearance;                                              // 0x0420   (0x0008)  
	int32_t                                            HitDefenseLevel;                                            // 0x0428   (0x0004)  
	float                                              BackSideHitAngle;                                           // 0x042C   (0x0004)  
	float                                              InteractionRange;                                           // 0x0430   (0x0004)  
	float                                              InteractionAngle;                                           // 0x0434   (0x0004)  
	FString                                            Interaction;                                                // 0x0438   (0x0010)  
	float                                              InteractionUpperHeight;                                     // 0x0448   (0x0004)  
	float                                              InteractionLowerHeight;                                     // 0x044C   (0x0004)  
	FName                                              RewardGroupAlias;                                           // 0x0450   (0x0008)  
	TEnumAsByte<ESBItemBucketType>                     RewardSpawnBucketType;                                      // 0x0458   (0x0001)  
	TEnumAsByte<ESBItemOverrideSaveType>               RewardOverrideSaveType;                                     // 0x0459   (0x0001)  
	unsigned char                                      UnknownData26_6[0x6];                                       // 0x045A   (0x0006)  MISSED
	FString                                            RewardFormationAssetPath;                                   // 0x0460   (0x0010)  
	bool                                               bDisableCollisionWhenDead;                                  // 0x0470   (0x0001)  
	unsigned char                                      UnknownData27_6[0x3];                                       // 0x0471   (0x0003)  MISSED
	float                                              DisableCollisionDelayTime;                                  // 0x0474   (0x0004)  
	FString                                            UITextWhenDead;                                             // 0x0478   (0x0010)  
	int32_t                                            StackRecoveryPotion;                                        // 0x0488   (0x0004)  
	int32_t                                            StackBullet1;                                               // 0x048C   (0x0004)  
	int32_t                                            StackBullet2;                                               // 0x0490   (0x0004)  
	int32_t                                            StackBullet3;                                               // 0x0494   (0x0004)  
	int32_t                                            StackBullet4;                                               // 0x0498   (0x0004)  
	int32_t                                            StackBullet5;                                               // 0x049C   (0x0004)  
	int32_t                                            StackBullet6;                                               // 0x04A0   (0x0004)  
	int32_t                                            StackConsumable1;                                           // 0x04A4   (0x0004)  
	int32_t                                            StackConsumable2;                                           // 0x04A8   (0x0004)  
	int32_t                                            StackConsumable3;                                           // 0x04AC   (0x0004)  
	int32_t                                            StackConsumable4;                                           // 0x04B0   (0x0004)  
	int32_t                                            StackConsumable5;                                           // 0x04B4   (0x0004)  
	int32_t                                            StackConsumable6;                                           // 0x04B8   (0x0004)  
	int32_t                                            StackConsumable7;                                           // 0x04BC   (0x0004)  
	int32_t                                            GearSlotCount;                                              // 0x04C0   (0x0004)  
	int32_t                                            ExoSpineSlotCount;                                          // 0x04C4   (0x0004)  
	float                                              FishingAttackPower;                                         // 0x04C8   (0x0004)  
	bool                                               bEncroachmentable;                                          // 0x04CC   (0x0001)  
	unsigned char                                      UnknownData28_6[0x3];                                       // 0x04CD   (0x0003)  MISSED
	FName                                              EncroachmentType;                                           // 0x04D0   (0x0008)  
	bool                                               bExcludingRuleMoveIgnoreTarget;                             // 0x04D8   (0x0001)  
	unsigned char                                      UnknownData29_6[0x7];                                       // 0x04D9   (0x0007)  MISSED
	FString                                            RelativeShowPath;                                           // 0x04E0   (0x0010)  
	float                                              LockOnCameraBoomHeight;                                     // 0x04F0   (0x0004)  
	float                                              LockOnCameraBoomLeftRight;                                  // 0x04F4   (0x0004)  
	float                                              LockOnCameraBoomLength;                                     // 0x04F8   (0x0004)  
	bool                                               bKeepData;                                                  // 0x04FC   (0x0001)  
	bool                                               bUseDistancePooling;                                        // 0x04FD   (0x0001)  
	bool                                               bUseDelayBattleStanceTime;                                  // 0x04FE   (0x0001)  
	bool                                               bApplyDamageWhenPlayerAlive;                                // 0x04FF   (0x0001)  
	TEnumAsByte<ESBScanDisplayType>                    ScanDisplayType;                                            // 0x0500   (0x0001)  
	unsigned char                                      UnknownData30_6[0x7];                                       // 0x0501   (0x0007)  MISSED
	FString                                            Name;                                                       // 0x0508   (0x0010)  
	TEnumAsByte<ESBEquipType>                          OverrideEquip;                                              // 0x0518   (0x0001)  
	bool                                               bSequenceCharacter;                                         // 0x0519   (0x0001)  
	unsigned char                                      UnknownData31_6[0x6];                                       // 0x051A   (0x0006)  MISSED
	FString                                            OverrideCharacterSoundSet;                                  // 0x0520   (0x0010)  
	FName                                              FileSuffix;                                                 // 0x0530   (0x0008)  
	TArray<FSBJsonEffect>                              AttackerEffectWhenDeadArray;                                // 0x0538   (0x0010)  
};

/// Struct /Script/SB.SBTableMetaData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBTableMetaData
{ 
	FGuid                                              Guid;                                                       // 0x0000   (0x0010)  
	FString                                            Filename;                                                   // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBJsonEffectAction_FixedLocation
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBJsonEffectAction_FixedLocation
{ 
	bool                                               bOnGround;                                                  // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBJsonEffectAction_UnmountingEquipment
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBJsonEffectAction_UnmountingEquipment
{ 
	TEnumAsByte<ESBEquipmentType>                      EquipmentType;                                              // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBJsonEffectAction_MountingEquipment
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBJsonEffectAction_MountingEquipment
{ 
	TEnumAsByte<ESBEquipmentType>                      EquipmentType;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              TargetFilterAlias;                                          // 0x0004   (0x0008)  
	FName                                              CheckEquipmentAlias;                                        // 0x000C   (0x0008)  
};

/// Struct /Script/SB.SBJsonEffectAction_ZoneEventActorDestruction
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBJsonEffectAction_ZoneEventActorDestruction
{ 
	FName                                              TargetFilterAlias;                                          // 0x0000   (0x0008)  
	FName                                              ZoneEventActorTriggerTag;                                   // 0x0008   (0x0008)  
	FName                                              IgnoreSpecialTag;                                           // 0x0010   (0x0008)  
};

/// Struct /Script/SB.SBJsonEffectAction_ActionAssist
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align n/a MaxSize: 0x002C
struct FSBJsonEffectAction_ActionAssist
{ 
	float                                              ActiveTime;                                                 // 0x0000   (0x0004)  
	FName                                              SkillCommandName1;                                          // 0x0004   (0x0008)  
	FName                                              SkillCommandName2;                                          // 0x000C   (0x0008)  
	FName                                              SkillCommandName3;                                          // 0x0014   (0x0008)  
	FName                                              SkillCommandName4;                                          // 0x001C   (0x0008)  
	FName                                              SkillCommandName5;                                          // 0x0024   (0x0008)  
};

/// Struct /Script/SB.SBJsonEffectAction_Countdown
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBJsonEffectAction_Countdown
{ 
	float                                              UIVisibleShowTime;                                          // 0x0000   (0x0004)  
};

/// Struct /Script/SB.SBJsonEffectAction_UIClientEvent
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBJsonEffectAction_UIClientEvent
{ 
	FString                                            Event;                                                      // 0x0000   (0x0010)  
	FName                                              BulletAlias;                                                // 0x0010   (0x0008)  
	FName                                              CoverPosition;                                              // 0x0018   (0x0008)  
};

/// Struct /Script/SB.SBJsonEffectAction_FishingMode
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBJsonEffectAction_FishingMode
{ 
	TEnumAsByte<ESBFishingModeType>                    FishingModeType;                                            // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBJsonEffectAction_NotifyTagEvent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBJsonEffectAction_NotifyTagEvent
{ 
	FName                                              TagName;                                                    // 0x0000   (0x0008)  
	FName                                              CustomNameValue;                                            // 0x0008   (0x0008)  
};

/// Struct /Script/SB.SBJsonEffectAction_ItemRefill
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBJsonEffectAction_ItemRefill
{ 
	FName                                              ItemAlias;                                                  // 0x0000   (0x0008)  
	float                                              RefillTime;                                                 // 0x0008   (0x0004)  
	int32_t                                            AddCount;                                                   // 0x000C   (0x0004)  
	bool                                               bLoop;                                                      // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/SB.SBJsonEffectAction_AdditiveSkillEnergyAmount
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBJsonEffectAction_AdditiveSkillEnergyAmount
{ 
	FString                                            SkillAlias;                                                 // 0x0000   (0x0010)  
	float                                              Value;                                                      // 0x0010   (0x0004)  
	bool                                               bInfinite;                                                  // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Struct /Script/SB.SBJsonEffectAction_AdditiveSkillCoolTime
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBJsonEffectAction_AdditiveSkillCoolTime
{ 
	FString                                            SkillAlias;                                                 // 0x0000   (0x0010)  
	float                                              Value;                                                      // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/SB.SBJsonEffectAction_AdditiveSkillCommandCoolTime
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBJsonEffectAction_AdditiveSkillCommandCoolTime
{ 
	FString                                            Command;                                                    // 0x0000   (0x0010)  
	float                                              Value;                                                      // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/SB.SBJsonEffectAction_ActiveInteraction
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBJsonEffectAction_ActiveInteraction
{ 
	float                                              InteractionRange;                                           // 0x0000   (0x0004)  
	float                                              InteractionAngle;                                           // 0x0004   (0x0004)  
	FString                                            Interaction;                                                // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBJsonEffectAction_SummonActor
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FSBJsonEffectAction_SummonActor
{ 
	FName                                              CharacterAlias;                                             // 0x0000   (0x0008)  
	bool                                               bDamageShareWithOwner;                                      // 0x0008   (0x0001)  
	bool                                               bDespawnWithOwner;                                          // 0x0009   (0x0001)  
	TEnumAsByte<ESBSummonActorSpawnLocationType>       SpawnLocationType;                                          // 0x000A   (0x0001)  
	unsigned char                                      UnknownData07_6[0x1];                                       // 0x000B   (0x0001)  MISSED
	FName                                              SpawnLocationSocketName;                                    // 0x000C   (0x0008)  
	TEnumAsByte<ESBSummonActorSpawnRotationType>       SpawnRotationType;                                          // 0x0014   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              SpawnPointName;                                             // 0x0018   (0x0008)  
	int32_t                                            SpawnPointFormationIndex;                                   // 0x0020   (0x0004)  
	FVector                                            SpawnLocation;                                              // 0x0024   (0x000C)  
	FName                                              Effect1;                                                    // 0x0030   (0x0008)  
	FName                                              Effect2;                                                    // 0x0038   (0x0008)  
	FName                                              Tag1;                                                       // 0x0040   (0x0008)  
	float                                              DrawDistance;                                               // 0x0048   (0x0004)  
	bool                                               bDontDestroy;                                               // 0x004C   (0x0001)  
	bool                                               bVisible;                                                   // 0x004D   (0x0001)  
	unsigned char                                      UnknownData09_6[0x2];                                       // 0x004E   (0x0002)  MISSED
	FString                                            SpawnShow;                                                  // 0x0050   (0x0010)  
	bool                                               bClone;                                                     // 0x0060   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	FName                                              AIGroup;                                                    // 0x0064   (0x0008)  
	bool                                               bCheckValidLocation;                                        // 0x006C   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	float                                              CheckValidCapsuleRadius;                                    // 0x0070   (0x0004)  
	float                                              CheckValidCapsuleHalfHeight;                                // 0x0074   (0x0004)  
	int32_t                                            LimitCount;                                                 // 0x0078   (0x0004)  
	bool                                               bOnGround;                                                  // 0x007C   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	float                                              CheckGroundStartZOffset;                                    // 0x0080   (0x0004)  
	float                                              CheckGroundEndZOffset;                                      // 0x0084   (0x0004)  
	float                                              DespawnDistanceToOwner;                                     // 0x0088   (0x0004)  
	bool                                               bCheckBlocking;                                             // 0x008C   (0x0001)  
	unsigned char                                      UnknownData13_7[0x3];                                       // 0x008D   (0x0003)  MISSED
};

/// Struct /Script/SB.SBJsonEffectAction_TargetEncroachment
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBJsonEffectAction_TargetEncroachment
{ 
	FName                                              TargetFilterAlias;                                          // 0x0000   (0x0008)  
	float                                              BindingTime;                                                // 0x0008   (0x0004)  
	float                                              RotationStartTime;                                          // 0x000C   (0x0004)  
	float                                              RotationEndTime;                                            // 0x0010   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            BindingIdleBlendSpace;                                      // 0x0018   (0x0010)  
	FString                                            BindingPhysicsAsset;                                        // 0x0028   (0x0010)  
	float                                              TargetDistanceWhenUnbinding;                                // 0x0038   (0x0004)  
	bool                                               bEnablePhysicsBodyCollision;                                // 0x003C   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Struct /Script/SB.SBJsonEffectAction_TPSMiniGame
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBJsonEffectAction_TPSMiniGame
{ 
	FVector                                            TargetLocation;                                             // 0x0000   (0x000C)  
};

/// Struct /Script/SB.SBJsonEffectAction_TryLinkBreak
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBJsonEffectAction_TryLinkBreak
{ 
	TEnumAsByte<ESBSkillCommandState>                  Command;                                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            InputCount;                                                 // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBJsonEffectAction_PlayTheaterParam
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBJsonEffectAction_PlayTheaterParam
{ 
	FString                                            AssetPath;                                                  // 0x0000   (0x0010)  
	int32_t                                            Priority;                                                   // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/SB.SBJsonEffectAction_AreaTimeScale
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FSBJsonEffectAction_AreaTimeScale
{ 
	FName                                              TargetFilterAlias;                                          // 0x0000   (0x0008)  
	float                                              TimeScaleValue;                                             // 0x0008   (0x0004)  
	bool                                               bApplyProjectile;                                           // 0x000C   (0x0001)  
	bool                                               bApplyWorldObject;                                          // 0x000D   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x000E   (0x0002)  MISSED
	float                                              FadeInTime;                                                 // 0x0010   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0014   (0x0004)  
	bool                                               bWithPauseNikkeStage;                                       // 0x0018   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/SB.SBJsonEffectAction_TimeScale
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBJsonEffectAction_TimeScale
{ 
	float                                              FadeInTime;                                                 // 0x0000   (0x0004)  
	float                                              FadeOutTime;                                                // 0x0004   (0x0004)  
	float                                              TotalTime;                                                  // 0x0008   (0x0004)  
	float                                              TimeScale;                                                  // 0x000C   (0x0004)  
};

/// Struct /Script/SB.SBJsonInt
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBJsonInt
{ 
	int32_t                                            V;                                                          // 0x0000   (0x0004)  
};

/// Struct /Script/SB.SBJsonFloat
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBJsonFloat
{ 
	float                                              V;                                                          // 0x0000   (0x0004)  
};

/// Struct /Script/SB.SBJsonString
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBJsonString
{ 
	FString                                            V;                                                          // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBEdGraphNodePinInfo
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FSBEdGraphNodePinInfo
{ 
	bool                                               bTextWidgetReadOnly;                                        // 0x0000   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            PinIndex;                                                   // 0x0004   (0x0004)  
	FName                                              PinName;                                                    // 0x0008   (0x0008)  
	FName                                              DataCategory;                                               // 0x0010   (0x0008)  
	FString                                            DefaultValue;                                               // 0x0018   (0x0010)  
	TEnumAsByte<ESBData>                               DataTableType;                                              // 0x0028   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	TWeakObjectPtr<class UObject*>                     SubCategoryObject;                                          // 0x002C   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	FEdGraphPinType                                    GraphPinType;                                               // 0x0038   (0x0058)  
	TEnumAsByte<EEdGraphPinDirection>                  PinDirectionType;                                           // 0x0090   (0x0001)  
	unsigned char                                      UnknownData07_7[0xF];                                       // 0x0091   (0x000F)  MISSED
};

/// Struct /Script/SB.SBEventMoveDataUpdate
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FSBEventMoveDataUpdate
{ 
	FVector                                            StartTargetLocation;                                        // 0x0000   (0x000C)  
	FRotator                                           StartTargetRotation;                                        // 0x000C   (0x000C)  
	FVector                                            EndTargetLocation;                                          // 0x0018   (0x000C)  
	FRotator                                           EndTargetRotation;                                          // 0x0024   (0x000C)  
	FVector                                            StartLeaveLocation;                                         // 0x0030   (0x000C)  
	FRotator                                           StartLeaveRotation;                                         // 0x003C   (0x000C)  
	FVector                                            EndLeaveLocation;                                           // 0x0048   (0x000C)  
	FRotator                                           EndLeaveRotation;                                           // 0x0054   (0x000C)  
};

/// Struct /Script/SB.SBFishingLogProperty
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBFishingLogProperty
{ 
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	uint32_t                                           ID;                                                         // 0x0008   (0x0004)  
	uint32_t                                           CatchCount;                                                 // 0x000C   (0x0004)  
	float                                              MaxWeightRecord;                                            // 0x0010   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/SB.SBSaveOptionData_Preset
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FSBSaveOptionData_Preset
{ 
	ESBBossChallengePresetType                         BossChallengePresetType;                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FSBSaveOptionData_ActorEquipment                   Equipment;                                                  // 0x0008   (0x0068)  
};

/// Struct /Script/SB.SBGamePlayDebuggerTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBGamePlayDebuggerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/SB.SBGraphicsOptionsDebuggerTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBGraphicsOptionsDebuggerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/SB.SBHintProperty
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBHintProperty
{ 
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	uint32_t                                           ID;                                                         // 0x0008   (0x0004)  
	float                                              DelayActivateTime;                                          // 0x000C   (0x0004)  
};

/// Struct /Script/SB.SBItemAliasInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBItemAliasInfo
{ 
	FName                                              ItemDataAlias;                                              // 0x0000   (0x0008)  
	float                                              CoolTime;                                                   // 0x0008   (0x0004)  
	float                                              RemainTime;                                                 // 0x000C   (0x0004)  
};

/// Struct /Script/SB.SBItemSpawnCasterInfo
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align n/a MaxSize: 0x002C
struct FSBItemSpawnCasterInfo
{ 
	FName                                              ZoneEnvAlias;                                               // 0x0000   (0x0008)  
	FName                                              CharacterAlias;                                             // 0x0008   (0x0008)  
	FName                                              CharacterEventSpawnAlias;                                   // 0x0010   (0x0008)  
	FName                                              ZoneEventActorTableAlias;                                   // 0x0018   (0x0008)  
	FName                                              ZoneEventActorName;                                         // 0x0020   (0x0008)  
	TEnumAsByte<ESBItemOverrideSaveType>               RewardOverrideSaveType;                                     // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0029   (0x0003)  MISSED
};

/// Struct /Script/SB.SBItemSpawnFormation
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align n/a MaxSize: 0x0088
struct FSBItemSpawnFormation
{ 
	bool                                               UseSpawnShow;                                               // 0x0000   (0x0001)  
	bool                                               UseSimulatePhysics;                                         // 0x0001   (0x0001)  
	bool                                               UsePostLocationVerifyCheck;                                 // 0x0002   (0x0001)  
	bool                                               IgnoreFinishSimulatePhysics;                                // 0x0003   (0x0001)  
	TEnumAsByte<ESBItemSpawnRangeType>                 SpawnRangeType;                                             // 0x0004   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	float                                              SpawnStartInterval;                                         // 0x0008   (0x0004)  
	float                                              SpawnNextInterval;                                          // 0x000C   (0x0004)  
	bool                                               SpawnCheckLocation;                                         // 0x0010   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              SpawnCheckStartDist;                                        // 0x0014   (0x0004)  
	float                                              SpawnCheckEndDist;                                          // 0x0018   (0x0004)  
	bool                                               SpawnCheckForward;                                          // 0x001C   (0x0001)  
	bool                                               RandomRangeUseGlobalSetting;                                // 0x001D   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x001E   (0x0002)  MISSED
	float                                              RandomRangeDropDistMin;                                     // 0x0020   (0x0004)  
	float                                              RandomRangeDropDistMax;                                     // 0x0024   (0x0004)  
	float                                              RandomRangeDropDirXMin;                                     // 0x0028   (0x0004)  
	float                                              RandomRangeDropDirXMax;                                     // 0x002C   (0x0004)  
	float                                              RandomRangeDropDirYMin;                                     // 0x0030   (0x0004)  
	float                                              RandomRangeDropDirYMax;                                     // 0x0034   (0x0004)  
	float                                              RandomRangeDropDirZMin;                                     // 0x0038   (0x0004)  
	float                                              RandomRangeDropDirZMax;                                     // 0x003C   (0x0004)  
	float                                              RandomRangeDropOffsetZ;                                     // 0x0040   (0x0004)  
	FName                                              RandomRangeCharSocket;                                      // 0x0044   (0x0008)  
	float                                              SequentialArcDistance;                                      // 0x004C   (0x0004)  
	float                                              SequentialArcDegree;                                        // 0x0050   (0x0004)  
	int32_t                                            SequentialArcColumnCount;                                   // 0x0054   (0x0004)  
	float                                              SequentialArcDistanceAdditional;                            // 0x0058   (0x0004)  
	float                                              SequentialArcDecreaseCountFactor;                           // 0x005C   (0x0004)  
	float                                              SequentialArcDecreaseDegree;                                // 0x0060   (0x0004)  
	FVector                                            SequentialArcOffset;                                        // 0x0064   (0x000C)  
	FRotator                                           SequentialArcForwardRotation;                               // 0x0070   (0x000C)  
	FVector                                            SequentialArcForward;                                       // 0x007C   (0x000C)  
};

/// Struct /Script/SB.SBItemInstanceForRPC
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align n/a MaxSize: 0x0080
struct FSBItemInstanceForRPC
{ 
	FGuid                                              SavedGuid;                                                  // 0x0000   (0x0010)  
	FGuid                                              PocketGuid;                                                 // 0x0010   (0x0010)  
	FName                                              ItemAlias;                                                  // 0x0020   (0x0008)  
	uint32_t                                           StatLevel;                                                  // 0x0028   (0x0004)  
	uint32_t                                           ItemCount;                                                  // 0x002C   (0x0004)  
	uint32_t                                           ItemChargeCount;                                            // 0x0030   (0x0004)  
	bool                                               Equiped;                                                    // 0x0034   (0x0001)  
	TEnumAsByte<ESBGearType>                           GearType;                                                   // 0x0035   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0036   (0x0002)  MISSED
	int32_t                                            MatVarIndex;                                                // 0x0038   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TArray<int32_t>                                    EquipStatAliasKeyArray;                                     // 0x0040   (0x0010)  
	TArray<FName>                                      EquipStatAliasValueArray;                                   // 0x0050   (0x0010)  
	TArray<int32_t>                                    EquipStatRangeKeyArray;                                     // 0x0060   (0x0010)  
	TArray<int32_t>                                    EquipStatRangeValueArray;                                   // 0x0070   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceAnimTrailTemplate
/// Size: 0x0058 (88 bytes) (0x000020 - 0x000058) align n/a MaxSize: 0x0058
struct FSBLevelSequenceAnimTrailTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceAnimTrailSectionData               SectionData;                                                // 0x0020   (0x0038)  
};

/// Struct /Script/SB.SBLevelSequenceBKMovieTemplate
/// Size: 0x0050 (80 bytes) (0x000020 - 0x000050) align n/a MaxSize: 0x0050
struct FSBLevelSequenceBKMovieTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceBKMovieSectionData                 SectionData;                                                // 0x0020   (0x0028)  
	FFrameNumber                                       StartFrame;                                                 // 0x0048   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x004C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceBookmarkTemplate
/// Size: 0x0038 (56 bytes) (0x000020 - 0x000038) align n/a MaxSize: 0x0038
struct FSBLevelSequenceBookmarkTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceBookmarkSectionData                SectionData;                                                // 0x0020   (0x0010)  
	FFrameNumber                                       StartFrame;                                                 // 0x0030   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x0034   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceCameraActorBoundsTemplate
/// Size: 0x0058 (88 bytes) (0x000020 - 0x000058) align n/a MaxSize: 0x0058
struct FSBLevelSequenceCameraActorBoundsTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceCameraActorBoundsSectionData       SectionData;                                                // 0x0020   (0x0030)  
	FFrameNumber                                       StartFrame;                                                 // 0x0050   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x0054   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceCameraActorBoundsTemplateTemplate
/// Size: 0x0030 (48 bytes) (0x000020 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceCameraActorBoundsTemplateTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceCameraActorBoundsTemplateSectionData SectionData;                                              // 0x0020   (0x0008)  
	FFrameNumber                                       StartFrame;                                                 // 0x0028   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x002C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceCameraLookAtTargetTemplate
/// Size: 0x0060 (96 bytes) (0x000020 - 0x000060) align n/a MaxSize: 0x0060
struct FSBLevelSequenceCameraLookAtTargetTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceCameraLookAtTargetSectionData      SectionData;                                                // 0x0020   (0x0034)  
	FFrameNumber                                       StartFrame;                                                 // 0x0054   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceCharacterActionTemplate
/// Size: 0x0050 (80 bytes) (0x000020 - 0x000050) align n/a MaxSize: 0x0050
struct FSBLevelSequenceCharacterActionTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceCharacterActionSectionData         SectionData;                                                // 0x0020   (0x0028)  
	FFrameNumber                                       StartFrame;                                                 // 0x0048   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x004C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceEnvControlVolumeTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceEnvControlVolumeTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEnvControlVolumeSectionData        SectionData;                                                // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventActorActiveTemplate
/// Size: 0x0038 (56 bytes) (0x000020 - 0x000038) align n/a MaxSize: 0x0038
struct FSBLevelSequenceEventActorActiveTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventActorActiveSectionData        SectionData;                                                // 0x0020   (0x0018)  
};

/// Struct /Script/SB.SBLevelSequenceEventActorAITemplate
/// Size: 0x0030 (48 bytes) (0x000020 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceEventActorAITemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventActorAISectionData            SectionData;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceEventActorBattleStateTemplate
/// Size: 0x0038 (56 bytes) (0x000020 - 0x000038) align n/a MaxSize: 0x0038
struct FSBLevelSequenceEventActorBattleStateTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventActorBattleStateSectionData   SectionData;                                                // 0x0020   (0x0018)  
};

/// Struct /Script/SB.SBLevelSequenceEventActorEffectTemplate
/// Size: 0x0068 (104 bytes) (0x000020 - 0x000068) align n/a MaxSize: 0x0068
struct FSBLevelSequenceEventActorEffectTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventActorEffectSectionData        SectionData;                                                // 0x0020   (0x0034)  
	FGuid                                              SectionSignature;                                           // 0x0054   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventAmbientSoundControlTemplate
/// Size: 0x0030 (48 bytes) (0x000020 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceEventAmbientSoundControlTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventAmbientSoundControlSectionData SectionData;                                               // 0x0020   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceEventBGMPriorityTemplate
/// Size: 0x0030 (48 bytes) (0x000020 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceEventBGMPriorityTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventBGMPrioritySectionData        SectionData;                                                // 0x0020   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventBGMTemplate
/// Size: 0x0050 (80 bytes) (0x000020 - 0x000050) align n/a MaxSize: 0x0050
struct FSBLevelSequenceEventBGMTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventBGMSectionData                SectionData;                                                // 0x0020   (0x0030)  
};

/// Struct /Script/SB.SBLevelSequenceEventGlobalValueTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceEventGlobalValueTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventGlobalValueSectionData        SectionData;                                                // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventHUDActionTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceEventHUDActionTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventHUDActionSectionData          SectionData;                                                // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventLockOnAtChatTemplate
/// Size: 0x0030 (48 bytes) (0x000020 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceEventLockOnAtChatTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventLockOnAtChatSectionData       SectionData;                                                // 0x0020   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventPlayerActionTemplate
/// Size: 0x0060 (96 bytes) (0x000020 - 0x000060) align n/a MaxSize: 0x0060
struct FSBLevelSequenceEventPlayerActionTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventPlayerActionSectionData       SectionData;                                                // 0x0020   (0x003C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventPlayerCameraShake2Template
/// Size: 0x0078 (120 bytes) (0x000020 - 0x000078) align n/a MaxSize: 0x0078
struct FSBLevelSequenceEventPlayerCameraShake2Template : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventPlayerCameraShake2SectionData ShakeData;                                                  // 0x0020   (0x0050)  
	FFrameNumber                                       StartFrame;                                                 // 0x0070   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x0074   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceEventPlayerCameraShakeTemplate
/// Size: 0x0040 (64 bytes) (0x000020 - 0x000040) align n/a MaxSize: 0x0040
struct FSBLevelSequenceEventPlayerCameraShakeTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventPlayerCameraShakeSectionData  ShakeData;                                                  // 0x0020   (0x0020)  
};

/// Struct /Script/SB.SBLevelSequenceEventSoundEventTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceEventSoundEventTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventSoundEventSectionData         SectionData;                                                // 0x0020   (0x0008)  
};

/// Struct /Script/SB.SBLevelSequenceEventSoundMixTemplate
/// Size: 0x0030 (48 bytes) (0x000020 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceEventSoundMixTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventSoundMixSectionData           SectionData;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceEventSoundVolumeTemplate
/// Size: 0x0038 (56 bytes) (0x000020 - 0x000038) align n/a MaxSize: 0x0038
struct FSBLevelSequenceEventSoundVolumeTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventSoundVolumeSectionData        SectionData;                                                // 0x0020   (0x0018)  
};

/// Struct /Script/SB.SBLevelSequenceEventTemplate
/// Size: 0x0020 (32 bytes) (0x000020 - 0x000020) align n/a MaxSize: 0x0020
struct FSBLevelSequenceEventTemplate : FMovieSceneEvalTemplate
{ 
};

/// Struct /Script/SB.SBLevelSequenceEventUIActionTemplate
/// Size: 0x0058 (88 bytes) (0x000020 - 0x000058) align n/a MaxSize: 0x0058
struct FSBLevelSequenceEventUIActionTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventUIActionSectionData           SectionData;                                                // 0x0020   (0x0038)  
};

/// Struct /Script/SB.SBLevelSequenceEventVibrationTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceEventVibrationTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventVibrationSectionData          SectionData;                                                // 0x0020   (0x0008)  
};

/// Struct /Script/SB.SBLevelSequenceEventZoneEventTemplate
/// Size: 0x0050 (80 bytes) (0x000020 - 0x000050) align n/a MaxSize: 0x0050
struct FSBLevelSequenceEventZoneEventTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventZoneEventSectionData          SectionData;                                                // 0x0020   (0x001C)  
	FGuid                                              SectionSignature;                                           // 0x003C   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceEventZoneLoadWaitTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000028) align n/a MaxSize: 0x0028
struct FSBLevelSequenceEventZoneLoadWaitTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventZoneLoadWaitSectionData       SectionData;                                                // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceGraphicsAutoScaleTemplate
/// Size: 0x0048 (72 bytes) (0x000020 - 0x000048) align n/a MaxSize: 0x0048
struct FSBLevelSequenceGraphicsAutoScaleTemplate : FMovieSceneEvalTemplate
{ 
	bool                                               AmbientOcclusionMaxQuality;                                 // 0x0020   (0x0001)  
	bool                                               AmbientOcclusionRadiusScale;                                // 0x0021   (0x0001)  
	bool                                               LightShaftDownSampleFactor;                                 // 0x0022   (0x0001)  
	bool                                               VolumetricFogGridSizeZ;                                     // 0x0023   (0x0001)  
	bool                                               VolumetricFogGridPixelSize;                                 // 0x0024   (0x0001)  
	bool                                               PostProcessAAQuality;                                       // 0x0025   (0x0001)  
	bool                                               EnableCustomDepth;                                          // 0x0026   (0x0001)  
	bool                                               EnableDecalChannelMaskPass;                                 // 0x0027   (0x0001)  
	bool                                               VolumetricCloudHide;                                        // 0x0028   (0x0001)  
	bool                                               DOFRecombineOff;                                            // 0x0029   (0x0001)  
	bool                                               FogOff;                                                     // 0x002A   (0x0001)  
	bool                                               VolumetricFogOff;                                           // 0x002B   (0x0001)  
	int32_t                                            FoliageForceLOD;                                            // 0x002C   (0x0004)  
	int32_t                                            AmbientOcclusionLevel;                                      // 0x0030   (0x0004)  
	int32_t                                            FSR2ScreenPercentage4KOnly;                                 // 0x0034   (0x0004)  
	bool                                               AmbientCubemapOff;                                          // 0x0038   (0x0001)  
	bool                                               SSROff;                                                     // 0x0039   (0x0001)  
	bool                                               UsePDODither;                                               // 0x003A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x003B   (0x0001)  MISSED
	float                                              PDODitherAlphaThreshold;                                    // 0x003C   (0x0004)  
	bool                                               RVTUpdateSkip;                                              // 0x0040   (0x0001)  
	bool                                               EnableDistanceFieldsRealloc;                                // 0x0041   (0x0001)  
	bool                                               EnableFSR2BrightnessToneDown;                               // 0x0042   (0x0001)  
	bool                                               EnableHLOD;                                                 // 0x0043   (0x0001)  
	float                                              NearClipPlane;                                              // 0x0044   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceHLODTemplate
/// Size: 0x00B0 (176 bytes) (0x000020 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FSBLevelSequenceHLODTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneBoolChannel                             HLOD;                                                       // 0x0020   (0x0090)  
};

/// Struct /Script/SB.SBLevelSequenceLevelStreamingWaitTemplate
/// Size: 0x0060 (96 bytes) (0x000020 - 0x000060) align n/a MaxSize: 0x0060
struct FSBLevelSequenceLevelStreamingWaitTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceLevelStreamingWaitSectionData      SectionData;                                                // 0x0020   (0x0028)  
	FFrameNumber                                       StartFrame;                                                 // 0x0048   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x004C   (0x0004)  
	FGuid                                              TimerGuid;                                                  // 0x0050   (0x0010)  
};

/// Struct /Script/SB.SBLevelSequenceLookAtTargetTemplate
/// Size: 0x0058 (88 bytes) (0x000020 - 0x000058) align n/a MaxSize: 0x0058
struct FSBLevelSequenceLookAtTargetTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceLookAtTargetSectionData            SectionData;                                                // 0x0020   (0x0030)  
	FFrameNumber                                       StartFrame;                                                 // 0x0050   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x0054   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceMoveToLocationTemplate
/// Size: 0x0088 (136 bytes) (0x000020 - 0x000088) align n/a MaxSize: 0x0088
struct FSBLevelSequenceMoveToLocationTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceMoveToLocationSectionData          SectionData;                                                // 0x0020   (0x0060)  
	FFrameNumber                                       StartFrame;                                                 // 0x0080   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x0084   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceSetAnimBPPropertyTemplate
/// Size: 0x0030 (48 bytes) (0x000020 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceSetAnimBPPropertyTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceSetAnimBPPropertySectionData       SectionData;                                                // 0x0020   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceSkeletalAnimationSectionTemplateParameters
/// Size: 0x00A8 (168 bytes) (0x0000A0 - 0x0000A8) align n/a MaxSize: 0x00A8
struct FSBLevelSequenceSkeletalAnimationSectionTemplateParameters : FSBLevelSequenceSkeletalAnimationParams
{ 
	FFrameNumber                                       SectionStartTime;                                           // 0x00A0   (0x0004)  
	FFrameNumber                                       SectionEndTime;                                             // 0x00A4   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceSkeletalAnimationSectionTemplate
/// Size: 0x00C8 (200 bytes) (0x000020 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FSBLevelSequenceSkeletalAnimationSectionTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceSkeletalAnimationSectionTemplateParameters Params;                                             // 0x0020   (0x00A8)  
};

/// Struct /Script/SB.SBLevelSequenceSkeletalAnimMoveStateSectionTemplateParameters
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceSkeletalAnimMoveStateSectionTemplateParameters : FSBLevelSequenceSkeletalAnimMoveStateParams
{ 
	FFrameNumber                                       SectionStartTime;                                           // 0x0028   (0x0004)  
	FFrameNumber                                       SectionEndTime;                                             // 0x002C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceSkeletalAnimMoveStateTemplate
/// Size: 0x0058 (88 bytes) (0x000020 - 0x000058) align n/a MaxSize: 0x0058
struct FSBLevelSequenceSkeletalAnimMoveStateTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceSkeletalAnimMoveStateSectionTemplateParameters Params;                                         // 0x0020   (0x0030)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceSkipTemplate
/// Size: 0x0050 (80 bytes) (0x000020 - 0x000050) align n/a MaxSize: 0x0050
struct FSBLevelSequenceSkipTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceSkipSectionData                    SectionData;                                                // 0x0020   (0x0028)  
	FFrameNumber                                       StartFrame;                                                 // 0x0048   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x004C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceSplineCineCamTrackingTemplate
/// Size: 0x0030 (48 bytes) (0x000020 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceSplineCineCamTrackingTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceSplineCineCamTrackingSectionData   SectionData;                                                // 0x0020   (0x0008)  
	FFrameNumber                                       StartFrame;                                                 // 0x0028   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x002C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterAreaTemplate
/// Size: 0x0060 (96 bytes) (0x000020 - 0x000060) align n/a MaxSize: 0x0060
struct FSBLevelSequenceTheaterAreaTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceTheaterAreaSectionData             SectionData;                                                // 0x0020   (0x0038)  
	FFrameNumber                                       StartFrame;                                                 // 0x0058   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x005C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterAttachWidgetTemplate
/// Size: 0x0070 (112 bytes) (0x000020 - 0x000070) align n/a MaxSize: 0x0070
struct FSBLevelSequenceTheaterAttachWidgetTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceTheaterAttachWidgetSectionData     SectionData;                                                // 0x0020   (0x0048)  
	FFrameNumber                                       StartFrame;                                                 // 0x0068   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x006C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterDialogueTemplate
/// Size: 0x0050 (80 bytes) (0x000020 - 0x000050) align n/a MaxSize: 0x0050
struct FSBLevelSequenceTheaterDialogueTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceTheaterDialogueSectionData         SectionData;                                                // 0x0020   (0x0028)  
	FFrameNumber                                       StartFrame;                                                 // 0x0048   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x004C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterInputCounterTemplate
/// Size: 0x0140 (320 bytes) (0x000020 - 0x000140) align n/a MaxSize: 0x0140
struct FSBLevelSequenceTheaterInputCounterTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventInputCounterSectionData       SectionData;                                                // 0x0020   (0x0118)  
	FFrameNumber                                       StartFrame;                                                 // 0x0138   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x013C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterInputFeedbackTemplate
/// Size: 0x0038 (56 bytes) (0x000020 - 0x000038) align n/a MaxSize: 0x0038
struct FSBLevelSequenceTheaterInputFeedbackTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventInputFeedbackSectionData      SectionData;                                                // 0x0020   (0x0010)  
	FFrameNumber                                       StartFrame;                                                 // 0x0030   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x0034   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterInteractionSelectTemplate
/// Size: 0x0040 (64 bytes) (0x000020 - 0x000040) align n/a MaxSize: 0x0040
struct FSBLevelSequenceTheaterInteractionSelectTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceTheaterInteractionSelectSectionData SectionData;                                               // 0x0020   (0x0014)  
	FFrameNumber                                       StartFrame;                                                 // 0x0034   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBLevelSequenceTheaterPlayerChoiceTemplate
/// Size: 0x0040 (64 bytes) (0x000020 - 0x000040) align n/a MaxSize: 0x0040
struct FSBLevelSequenceTheaterPlayerChoiceTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceTheaterPlayerChoiceSectionData     SectionData;                                                // 0x0020   (0x0018)  
	FFrameNumber                                       StartFrame;                                                 // 0x0038   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x003C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterQTEFlowData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBLevelSequenceTheaterQTEFlowData
{ 
	TEnumAsByte<ESBLevelSequenceTheaterQTEType>        ActionKey;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            GoalInputCount;                                             // 0x0004   (0x0004)  
	FSBLevelSequenceTheaterQTELocationData             LocationData;                                               // 0x0008   (0x0030)  
	FFrameNumber                                       StartFrame;                                                 // 0x0038   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x003C   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterQTETemplate
/// Size: 0x00E8 (232 bytes) (0x000020 - 0x0000E8) align n/a MaxSize: 0x00E8
struct FSBLevelSequenceTheaterQTETemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceEventQTESectionData                SectionData;                                                // 0x0020   (0x00C0)  
	FFrameNumber                                       StartFrame;                                                 // 0x00E0   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x00E4   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterReactionTriggerTemplate
/// Size: 0x0048 (72 bytes) (0x000020 - 0x000048) align n/a MaxSize: 0x0048
struct FSBLevelSequenceTheaterReactionTriggerTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceTheaterReactionTriggerSectionData  SectionData;                                                // 0x0020   (0x0020)  
	FFrameNumber                                       StartFrame;                                                 // 0x0040   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x0044   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceTheaterSubtitleTemplate
/// Size: 0x0088 (136 bytes) (0x000020 - 0x000088) align n/a MaxSize: 0x0088
struct FSBLevelSequenceTheaterSubtitleTemplate : FMovieSceneEvalTemplate
{ 
	FSBLevelSequenceTheaterSubtitleSectionData         SectionData;                                                // 0x0020   (0x0050)  
	FGuid                                              SectionSignature;                                           // 0x0070   (0x0010)  
	FFrameNumber                                       StartFrame;                                                 // 0x0080   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x0084   (0x0004)  
};

/// Struct /Script/SB.SBLevelSequenceVisibilityTagTemplate
/// Size: 0x0030 (48 bytes) (0x000020 - 0x000030) align n/a MaxSize: 0x0030
struct FSBLevelSequenceVisibilityTagTemplate : FMovieSceneEvalTemplate
{ 
	FString                                            VisibilityTag;                                              // 0x0020   (0x0010)  
};

/// Struct /Script/SB.SBMovieSceneEventTriggerData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBMovieSceneEventTriggerData
{ 
	FGuid                                              ObjectBindingID;                                            // 0x0000   (0x0010)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0010   (0x0018)  MISSED
};

/// Struct /Script/SB.SBMovieSceneEventChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000088) align n/a MaxSize: 0x0088
struct FSBMovieSceneEventChannel : FMovieSceneChannel
{ 
	unsigned char                                      UnknownData01_8[0x60];                                      // 0x0008   (0x0060)  MISSED
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0068   (0x0010)  
	TArray<FSBMovieSceneEventKeyStruct>                KeyValues;                                                  // 0x0078   (0x0010)  
};

/// Struct /Script/SB.SBParallelTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBParallelTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/SB.SBPhotoModeTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBPhotoModeTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/SB.SBKeyMappingsJsonObject
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBKeyMappingsJsonObject
{ 
	TArray<FInputActionKeyMapping>                     ActionMappings;                                             // 0x0000   (0x0010)  
	TArray<FInputAxisKeyMapping>                       AxisMappings;                                               // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBQuestDataDescriptionInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBQuestDataDescriptionInfo
{ 
	TWeakObjectPtr<class USBToolDataAsset*>            ToolData;                                                   // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0008   (0x0020)  MISSED
	FString                                            ToolDataDescription;                                        // 0x0028   (0x0010)  
};

/// Struct /Script/SB.SBSaveJsonData_RestorationMeshInfo
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBSaveJsonData_RestorationMeshInfo
{ 
	bool                                               bVisible;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0xF];                                       // 0x0001   (0x000F)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x0040   (0x0001)  
	bool                                               bSimulatePhysics;                                           // 0x0041   (0x0001)  
	unsigned char                                      UnknownData03_7[0xE];                                       // 0x0042   (0x000E)  MISSED
};

/// Struct /Script/SB.SBSaveJsonData_RestorationWorldActor
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FSBSaveJsonData_RestorationWorldActor
{ 
	TMap<FString, FSBSaveJsonData_RestorationMeshInfo> MeshInfoMap;                                                // 0x0000   (0x0050)  
	bool                                               bVisible;                                                   // 0x0050   (0x0001)  
	bool                                               bPhysSimulation;                                            // 0x0051   (0x0001)  
	unsigned char                                      UnknownData01_6[0xE];                                       // 0x0052   (0x000E)  MISSED
	FTransform                                         Transform;                                                  // 0x0060   (0x0030)  
};

/// Struct /Script/SB.SBRootMotionTablePropertyInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBRootMotionTablePropertyInfo
{ 
	FString                                            CharacterMoveAlias;                                         // 0x0000   (0x0010)  
	float                                              StartTime;                                                  // 0x0010   (0x0004)  
	float                                              EndTime;                                                    // 0x0014   (0x0004)  
};

/// Struct /Script/SB.SBLocalPlayerData
/// Size: 0x0648 (1608 bytes) (0x000000 - 0x000648) align n/a MaxSize: 0x0648
struct FSBLocalPlayerData
{ 
	bool                                               bValidData;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FSBSaveGameData_Actor                              ActorData;                                                  // 0x0008   (0x02B0)  
	FSBSaveGameData_Effect                             EffectData;                                                 // 0x02B8   (0x0010)  
	int32_t                                            TurntableMusicIndex;                                        // 0x02C8   (0x0004)  
	FName                                              TurntableSoundAlias;                                        // 0x02CC   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x02D4   (0x0004)  MISSED
	FSBSaveGameData_AcquisitionSkill                   AcquisitionSkillData;                                       // 0x02D8   (0x0060)  
	FSBSaveGameData_Achievement                        AchievementData;                                            // 0x0338   (0x0010)  
	FSBSaveGameData_FishingLogBook                     FishingLogBookData;                                         // 0x0348   (0x0010)  
	FSBSaveGameData_ShopLimitedItemHistory             ShopSaveData;                                               // 0x0358   (0x00A0)  
	FSBSaveGameData_ActorStorage                       ActorStorageData;                                           // 0x03F8   (0x0050)  
	FSBSaveGameData_Theater                            TheaterData;                                                // 0x0448   (0x0050)  
	FSBSaveGameData_UI                                 UIData;                                                     // 0x0498   (0x0010)  
	FSBSaveGameData_Item                               ItemData;                                                   // 0x04A8   (0x0170)  
	FSBSaveGameData_Hint                               HintSaveData;                                               // 0x0618   (0x0030)  
};

/// Struct /Script/SB.SBSaveGameData_EndingInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSaveGameData_EndingInfo
{ 
	int64_t                                            EndingTimeStamp_KillElder;                                  // 0x0000   (0x0008)  
	int64_t                                            EndingTimeStamp_KillLily;                                   // 0x0008   (0x0008)  
	int64_t                                            EndingTimeStamp_SaveLily;                                   // 0x0010   (0x0008)  
};

/// Struct /Script/SB.SBSaveGameDataStorage
/// Size: 0x0EC8 (3784 bytes) (0x000000 - 0x000EC8) align n/a MaxSize: 0x0EC8
struct FSBSaveGameDataStorage
{ 
	bool                                               bValidSaveData;                                             // 0x0000   (0x0001)  
	ESBGameDifficultyType                              GameDifficulty;                                             // 0x0001   (0x0001)  
	ESBGameOptionActionAssistType                      ActionAssist;                                               // 0x0002   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	int32_t                                            NewGamePlusPlayCount;                                       // 0x0004   (0x0004)  
	bool                                               bNoticedNewGamePlus;                                        // 0x0008   (0x0001)  
	bool                                               bEnableSnapShot;                                            // 0x0009   (0x0001)  
	bool                                               bFirstTimeTrainingRoom;                                     // 0x000A   (0x0001)  
	unsigned char                                      UnknownData05_6[0x1];                                       // 0x000B   (0x0001)  MISSED
	FName                                              SnapShotZoneAlias;                                          // 0x000C   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            MapName;                                                    // 0x0018   (0x0010)  
	int32_t                                            PlayTime;                                                   // 0x0028   (0x0004)  
	FName                                              LastHitCampAlias;                                           // 0x002C   (0x0008)  
	FName                                              TurntableAlias;                                             // 0x0034   (0x0008)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FSBSaveGameData_Actor                              ActorSaveData;                                              // 0x0040   (0x02B0)  
	FSBSaveGameData_Effect                             EffectSaveData;                                             // 0x02F0   (0x0010)  
	FSBSaveGameData_Quest                              QuestSaveData;                                              // 0x0300   (0x0088)  
	FSBSaveGameData_Env                                EnvSaveData;                                                // 0x0388   (0x0020)  
	FSBSaveGameData_Item                               ItemSaveData;                                               // 0x03A8   (0x0170)  
	FSBSaveGameData_AcquisitionSkill                   AcquisitionSkillSaveData;                                   // 0x0518   (0x0060)  
	FSBSaveGameData_Achievement                        AchievementSaveData;                                        // 0x0578   (0x0010)  
	FSBSaveGameData_FishingLogBook                     FishingLogBookSaveData;                                     // 0x0588   (0x0010)  
	FSBSaveGameData_ShopLimitedItemHistory             History;                                                    // 0x0598   (0x00A0)  
	FSBSaveGameData_ActorStorage                       ActorStorages;                                              // 0x0638   (0x0050)  
	FSBSaveGameData_Theater                            TheaterData;                                                // 0x0688   (0x0050)  
	FSBSaveGameData_UI                                 UIData;                                                     // 0x06D8   (0x0010)  
	FSBSaveGameData_PlayRecordData                     GamePlayProgressRecordData;                                 // 0x06E8   (0x0050)  
	FSBSaveGameData_Hint                               HintSaveData;                                               // 0x0738   (0x0030)  
	FSBSaveGameData_TrainingRoom                       TrainingRoomData;                                           // 0x0768   (0x0058)  
	FSBSaveGameData_EndingInfo                         EndingInfo;                                                 // 0x07C0   (0x0018)  
	FSBSaveGameData_NewGamePlusBaseInfo                NewGamePlusBaseInfo;                                        // 0x07D8   (0x0678)  
	FSBSaveGameData_EventGiftInfo                      EventGiftInfo;                                              // 0x0E50   (0x0010)  
	FSBSaveGameData_Nikke                              NikkeStageInfo;                                             // 0x0E60   (0x0010)  
	int64_t                                            NewGameCreateTime;                                          // 0x0E70   (0x0008)  
	TMap<FName, FSBSaveGameData_DebugHistoryLog>       DebugHistoryLogMap;                                         // 0x0E78   (0x0050)  
};

/// Struct /Script/SB.SBScanNavigationUnit
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBScanNavigationUnit
{ 
	class UDecalComponent*                             DecalComp;                                                  // 0x0000   (0x0008)  
	class UMaterialInstanceDynamic*                    DecalMID;                                                   // 0x0008   (0x0008)  
	float                                              FadeTime;                                                   // 0x0010   (0x0004)  
	float                                              RemainingTime;                                              // 0x0014   (0x0004)  
};

/// Struct /Script/SB.SBSequencerReactionTriggerInputInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBSequencerReactionTriggerInputInfo
{ 
	TEnumAsByte<ESBLevelSequenceTheaterReactionTriggerType> InputType;                                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TArray<FName>                                      CheckInputActionArray;                                      // 0x0008   (0x0010)  
	int32_t                                            InputGoalCount;                                             // 0x0018   (0x0004)  
	int32_t                                            InputCurrentCount;                                          // 0x001C   (0x0004)  
	bool                                               CheckLeftStickHit;                                          // 0x0020   (0x0001)  
	bool                                               CheckRightStickHit;                                         // 0x0021   (0x0001)  
	bool                                               ShowResult;                                                 // 0x0022   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0023   (0x0001)  MISSED
	float                                              StartSequenceTime;                                          // 0x0024   (0x0004)  
	float                                              EndSequenceTime;                                            // 0x0028   (0x0004)  
	bool                                               bFireFadeIn;                                                // 0x002C   (0x0001)  
	bool                                               bFireFadeOut;                                               // 0x002D   (0x0001)  
	bool                                               bResult;                                                    // 0x002E   (0x0001)  
	bool                                               bFireResult;                                                // 0x002F   (0x0001)  
	bool                                               bBindInput;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/SB.SBPhysParticle
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBPhysParticle
{ 
	TEnumAsByte<EPhysicalSurface>                      SurfaceType;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UParticleSystem*                             PSTemplate;                                                 // 0x0008   (0x0008)  
};

/// Struct /Script/SB.SBSignificanceManagerTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBSignificanceManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/SB.SBSliceUpdateManagerTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBSliceUpdateManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/SB.SpiderNavigationNode
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSpiderNavigationNode
{ 
	unsigned char                                      UnknownData01_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/SB.SBStudioSequenceParameter
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBStudioSequenceParameter
{ 
	bool                                               bBlendCamera;                                               // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBStudioActorAnimParam
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBStudioActorAnimParam
{ 
	float                                              PlayStartTime;                                              // 0x0000   (0x0004)  
	float                                              PlayEndTime;                                                // 0x0004   (0x0004)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              BlendInTime;                                                // 0x000C   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0010   (0x0004)  
	bool                                               bLoop;                                                      // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	int32_t                                            LoopCount;                                                  // 0x0018   (0x0004)  
	float                                              Priority;                                                   // 0x001C   (0x0004)  
};

/// Struct /Script/SB.SBTheaterInteractionSelectData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBTheaterInteractionSelectData
{ 
	TEnumAsByte<ESBTheaterInteractionDesignType>       DesignType;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              Tag;                                                        // 0x0004   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FSBTheaterInteractionLineData>              SelectionArray;                                             // 0x0010   (0x0010)  
	bool                                               bUseInputCancel;                                            // 0x0020   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0021   (0x0007)  MISSED
	FText                                              Message;                                                    // 0x0028   (0x0018)  
};

/// Struct /Script/SB.SBTheaterInteractionData
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FSBTheaterInteractionData
{ 
	TMap<FName, FSBTheaterInteractionSelectData>       SelectMap;                                                  // 0x0000   (0x0050)  
	FGuid                                              Guid;                                                       // 0x0050   (0x0010)  
};

/// Struct /Script/SB.SBTickManagerTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBTickManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/SB.SBUIActionEventBase
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0000
struct FSBUIActionEventBase
{ 
};

/// Struct /Script/SB.SBUIActionEventHUDClearInput
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDClearInput : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventRefreshNikkeLostGoodsIndicator
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUIActionEventRefreshNikkeLostGoodsIndicator : FSBUIActionEventBase
{ 
	TArray<FName>                                      AddedNikkeLostGoodsArray;                                   // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBUIActionEventHUDViewStatValue
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDViewStatValue : FSBUIActionEventBase
{ 
	bool                                               ViewStatValueActive;                                        // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventScreenShotCapture
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBUIActionEventScreenShotCapture : FSBUIActionEventBase
{ 
	bool                                               bScreenCaptureResult;                                       // 0x0000   (0x0001)  
	bool                                               bSaveResult;                                                // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	FString                                            Path;                                                       // 0x0008   (0x0010)  
	int32_t                                            Width;                                                      // 0x0018   (0x0004)  
	int32_t                                            Height;                                                     // 0x001C   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventAutoFocusCancel
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventAutoFocusCancel : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventAutoFocus
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventAutoFocus : FSBUIActionEventBase
{ 
	bool                                               IsEveOutSide;                                               // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHintShow
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHintShow : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventItemUse
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FSBUIActionEventItemUse : FSBUIActionEventBase
{ 
	ESBInputActionItemUseType                          ItemUseType;                                                // 0x0000   (0x0001)  
	bool                                               bPressed;                                                   // 0x0001   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventLinkedItemUnlock
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventLinkedItemUnlock : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventTrainingRoomVisible
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventTrainingRoomVisible : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventTutorialTPSMode
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventTutorialTPSMode : FSBUIActionEventBase
{ 
	bool                                               bActive;                                                    // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHUDItemEquipVisible
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDItemEquipVisible : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventSaveState
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FSBUIActionEventSaveState : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x2];                                       // 0x0000   (0x0002)  MISSED
};

/// Struct /Script/SB.SBUIActionEventUpdateTracking
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBUIActionEventUpdateTracking : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/SB.SBUIActionEventPlayerHit
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventPlayerHit : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventShowSpecialRewardUI
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBUIActionEventShowSpecialRewardUI : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/SB.SBUIActionEventItemAdd
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUIActionEventItemAdd : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/SB.SBUIActionEventAchieveNewQuestByFriendShip
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUIActionEventAchieveNewQuestByFriendShip : FSBUIActionEventBase
{ 
	FString                                            StringKey;                                                  // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBUIActionEventActionAssistStop
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBUIActionEventActionAssistStop : FSBUIActionEventBase
{ 
	uint32_t                                           ActorGuid;                                                  // 0x0000   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventActionAssistStart
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBUIActionEventActionAssistStart : FSBUIActionEventBase
{ 
	ESBUIActionAssistSignalType                        ActionAssistSignalType;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	uint32_t                                           ActorGuid;                                                  // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventHUDGetNikkeLostArticle
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDGetNikkeLostArticle : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventHUDTPSState
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDTPSState : FSBUIActionEventBase
{ 
	bool                                               bVisible;                                                   // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHUDCountDownTimer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUIActionEventHUDCountDownTimer : FSBUIActionEventBase
{ 
	bool                                               bActivate;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	uint32_t                                           EffectGUID;                                                 // 0x0004   (0x0004)  
	float                                              UIVisibleShowTime;                                          // 0x0008   (0x0004)  
	float                                              UIVisibleTotalTime;                                         // 0x000C   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventGainFriendShip
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUIActionEventGainFriendShip : FSBUIActionEventBase
{ 
	float                                              PrevTotalFriendShip;                                        // 0x0000   (0x0004)  
	float                                              CurrTotalFriendShip;                                        // 0x0004   (0x0004)  
	int32_t                                            PrevFriendShipLevel;                                        // 0x0008   (0x0004)  
	int32_t                                            CurrFriendShipLevel;                                        // 0x000C   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventTrainingRoomJump
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventTrainingRoomJump : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventTrainingRoomActiveStep
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBUIActionEventTrainingRoomActiveStep : FSBUIActionEventBase
{ 
	FName                                              StepAlias;                                                  // 0x0000   (0x0008)  
};

/// Struct /Script/SB.SBUIActionEventTrainingRoomSkillCommand
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBUIActionEventTrainingRoomSkillCommand : FSBUIActionEventBase
{ 
	FName                                              SkillCommandAlias;                                          // 0x0000   (0x0008)  
	bool                                               IsRoot;                                                     // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/SB.SBUIActionEventSetDeadUIDelayTime
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBUIActionEventSetDeadUIDelayTime : FSBUIActionEventBase
{ 
	float                                              DelayTime;                                                  // 0x0000   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventHUDDroneGuideAction
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDDroneGuideAction : FSBUIActionEventBase
{ 
	bool                                               bStart;                                                     // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventManualUnlock
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventManualUnlock : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventHUDNotifyCanGain
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDNotifyCanGain : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventItemGainClose
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventItemGainClose : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventPlayerLevelUp
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBUIActionEventPlayerLevelUp : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/SB.SBUIActionEventResetZoneNotice
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventResetZoneNotice : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventGameMenuOpen
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventGameMenuOpen : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventHUDGuideMessageVisiblity
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDGuideMessageVisiblity : FSBUIActionEventBase
{ 
	bool                                               bVisible;                                                   // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHUDGuideMessage
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBUIActionEventHUDGuideMessage : FSBUIActionEventBase
{ 
	FString                                            GuideDataAlias;                                             // 0x0000   (0x0010)  
	TEnumAsByte<ESBUIGuideMessageEventType>            GuideEventType;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/SB.SBUIActionEventHUDGuideMessageRequest
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUIActionEventHUDGuideMessageRequest : FSBUIActionEventBase
{ 
	FString                                            GuideDataAlias;                                             // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBUIActionEventHUDQuestInfo
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FSBUIActionEventHUDQuestInfo : FSBUIActionEventBase
{ 
	ESBUIHUDQuestEventType                             EventType;                                                  // 0x0000   (0x0001)  
	TEnumAsByte<ESBQuestType>                          QuestType;                                                  // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	FName                                              QuestAlias;                                                 // 0x0004   (0x0008)  
	FName                                              TaskGroupAlias;                                             // 0x000C   (0x0008)  
	FName                                              TaskAlias;                                                  // 0x0014   (0x0008)  
};

/// Struct /Script/SB.SBUIActionEventCloseSettingPopup
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FSBUIActionEventCloseSettingPopup : FSBUIActionEventBase
{ 
	ESBUISettingPopupType                              SettingPopupType;                                           // 0x0000   (0x0001)  
	TEnumAsByte<ESBUILogicType>                        UILogicType;                                                // 0x0001   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventRefreshSettingUI
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUIActionEventRefreshSettingUI : FSBUIActionEventBase
{ 
	TArray<ESBGameOptionType>                          OptionTypeArray;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBUIActionEventHUDCenterDot
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDCenterDot : FSBUIActionEventBase
{ 
	bool                                               Visible;                                                    // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventWarpComplete
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventWarpComplete : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventHUDPlayerInfoBetaVisible
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDPlayerInfoBetaVisible : FSBUIActionEventBase
{ 
	bool                                               Visible;                                                    // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHUDSkillDashVisible
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDSkillDashVisible : FSBUIActionEventBase
{ 
	bool                                               Visible;                                                    // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHUDSkillVisible
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDSkillVisible : FSBUIActionEventBase
{ 
	bool                                               Visible;                                                    // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHUDItemVisible
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDItemVisible : FSBUIActionEventBase
{ 
	bool                                               Visible;                                                    // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHUDUnlockItemUtil
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDUnlockItemUtil : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventHUDShowChange
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDShowChange : FSBUIActionEventBase
{ 
	ESBGameOptionHUDShowType                           ShowType;                                                   // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHUDBGChange
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDBGChange : FSBUIActionEventBase
{ 
	bool                                               BGActive;                                                   // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHUDSizeChange
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDSizeChange : FSBUIActionEventBase
{ 
	ESBGameOptionHUDSizeType                           SizeType;                                                   // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventHUDItemSlotRefreshItemInfo
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDItemSlotRefreshItemInfo : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventHUDRefresh
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventHUDRefresh : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventHUDVisible
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBUIActionEventHUDVisible : FSBUIActionEventBase
{ 
	bool                                               bVisible;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              Tag;                                                        // 0x0004   (0x0008)  
};

/// Struct /Script/SB.SBUIActionEventEnableInput
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBUIActionEventEnableInput : FSBUIActionEventBase
{ 
	bool                                               bEnableInput;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              DelayTime;                                                  // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventLobbySlotPopupUpdate
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventLobbySlotPopupUpdate : FSBUIActionEventBase
{ 
	ESBUISavePageType                                  SlotPopupType;                                              // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventLobbyStateUpdate
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventLobbyStateUpdate : FSBUIActionEventBase
{ 
	ESBUILobbyState                                    LobbyUIState;                                               // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventCurrencyCancelUpdate
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventCurrencyCancelUpdate : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventTopTabVisibility
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FSBUIActionEventTopTabVisibility : FSBUIActionEventBase
{ 
	TEnumAsByte<ESBUILogicType>                        LogicType;                                                  // 0x0000   (0x0001)  
	ESlateVisibility                                   Visibility;                                                 // 0x0001   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventWorkshopUnlockTabClosed
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventWorkshopUnlockTabClosed : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventWorkshopCoveredByPopup
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventWorkshopCoveredByPopup : FSBUIActionEventBase
{ 
	ESBUIWorkshopPopupType                             PopupType;                                                  // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventWorkshopPopupClosed
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventWorkshopPopupClosed : FSBUIActionEventBase
{ 
	ESBUIWorkshopPopupType                             PopupType;                                                  // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUIActionEventWorkshopPopupOpen
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBUIActionEventWorkshopPopupOpen : FSBUIActionEventBase
{ 
	ESBUIWorkshopPopupType                             PopupType;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FText                                              TextData;                                                   // 0x0008   (0x0018)  
	FString                                            IconPath;                                                   // 0x0020   (0x0010)  
	int32_t                                            PrevValue1;                                                 // 0x0030   (0x0004)  
	int32_t                                            NewValue1;                                                  // 0x0034   (0x0004)  
	int32_t                                            PrevValue2;                                                 // 0x0038   (0x0004)  
	int32_t                                            NewValue2;                                                  // 0x003C   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventNotifyUpdate
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBUIActionEventNotifyUpdate : FSBUIActionEventBase
{ 
	FName                                              UpdateAlias;                                                // 0x0000   (0x0008)  
	FName                                              AchievementAlias;                                           // 0x0008   (0x0008)  
	ESBUIHUDNotifyUpdateType                           UpdateType;                                                 // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/SB.SBUIActionEventQuestTaskGroupChangedState
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBUIActionEventQuestTaskGroupChangedState : FSBUIActionEventBase
{ 
	FName                                              TaskGroupAlias;                                             // 0x0000   (0x0008)  
	TEnumAsByte<ESBQuestTaskGroupState>                TaskGroupState;                                             // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/SB.SBUIActionEventQuestTaskUpdate
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBUIActionEventQuestTaskUpdate : FSBUIActionEventBase
{ 
	FName                                              TaskAlias;                                                  // 0x0000   (0x0008)  
	FName                                              QuestAlias;                                                 // 0x0008   (0x0008)  
	int32_t                                            CurrentValue;                                               // 0x0010   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventChangedAcquisitionSkill
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUIActionEventChangedAcquisitionSkill : FSBUIActionEventBase
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUIActionEventAcquireSkill
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSBUIActionEventAcquireSkill : FSBUIActionEventBase
{ 
	uint32_t                                           AcquisitionSkillId;                                         // 0x0000   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventSkillTreeUnlock
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBUIActionEventSkillTreeUnlock : FSBUIActionEventBase
{ 
	ESBUISkillTreeType                                 SkillTreeType;                                              // 0x0000   (0x0001)  
	ESBSkillTreeUnlockProgressType                     ProgressType;                                               // 0x0001   (0x0001)  
	ESBUISkillUnlockPresentationType                   UnlockPresentationType;                                     // 0x0002   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FName                                              AchievementAlias;                                           // 0x0004   (0x0008)  
};

/// Struct /Script/SB.SBUIActionEventUpdateIndicator
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBUIActionEventUpdateIndicator : FSBUIActionEventBase
{ 
	FName                                              IndicatorType;                                              // 0x0000   (0x0008)  
	int32_t                                            IndicatorLockChannel;                                       // 0x0008   (0x0004)  
};

/// Struct /Script/SB.SBUIActionEventUnlockBurst
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBUIActionEventUnlockBurst : FSBUIActionEventBase
{ 
	int32_t                                            TestInt;                                                    // 0x0000   (0x0004)  
	float                                              TestFloat;                                                  // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBSettingComboBoxItemData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBSettingComboBoxItemData
{ 
	FText                                              TitleText;                                                  // 0x0000   (0x0018)  
	bool                                               bLock;                                                      // 0x0018   (0x0001)  
	bool                                               bActive;                                                    // 0x0019   (0x0001)  
	bool                                               bDefaultValue;                                              // 0x001A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x5];                                       // 0x001B   (0x0005)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameter
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0000
struct FSBUILogicInitParameter
{ 
};

/// Struct /Script/SB.SBMailBoxItemData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBMailBoxItemData
{ 
	FName                                              GiftAlias;                                                  // 0x0000   (0x0008)  
	FString                                            TitleStringKey;                                             // 0x0008   (0x0010)  
	bool                                               bReceived;                                                  // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/SB.SBTurntableItemData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBTurntableItemData
{ 
	FText                                              TitleText;                                                  // 0x0000   (0x0018)  
	bool                                               bPlaying;                                                   // 0x0018   (0x0001)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x0019   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x001A   (0x0006)  MISSED
};

/// Struct /Script/SB.SBBossChallengeRewardMissionItemData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBBossChallengeRewardMissionItemData
{ 
	FText                                              TitleText;                                                  // 0x0000   (0x0018)  
	bool                                               bClear;                                                     // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/SB.SBBossChallengeListData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSBBossChallengeListData
{ 
	FText                                              BossNameText;                                               // 0x0000   (0x0018)  
	FText                                              AreaNameText;                                               // 0x0018   (0x0018)  
	FString                                            ThumbnailIconImagePath;                                     // 0x0030   (0x0010)  
	ESBGameDifficultyType                              Difficulty;                                                 // 0x0040   (0x0001)  
	bool                                               bClear;                                                     // 0x0041   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0042   (0x0006)  MISSED
};

/// Struct /Script/SB.SBManualGroupListData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBManualGroupListData
{ 
	bool                                               bUseAcquisitionSkillString;                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            GroupStringKey;                                             // 0x0008   (0x0010)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x0018   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/SB.SBItemNewNoticeListData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBItemNewNoticeListData
{ 
	FText                                              ItemName;                                                   // 0x0000   (0x0018)  
	int32_t                                            ItemCount;                                                  // 0x0018   (0x0004)  
	TEnumAsByte<ESBItemCategory>                       Category;                                                   // 0x001C   (0x0001)  
	TEnumAsByte<ESBItemRarityType>                     Rarity;                                                     // 0x001D   (0x0001)  
	bool                                               bGet;                                                       // 0x001E   (0x0001)  
	bool                                               bNew;                                                       // 0x001F   (0x0001)  
	bool                                               ActionFadeOut;                                              // 0x0020   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	float                                              RemainShowTime;                                             // 0x0024   (0x0004)  
	bool                                               MarkForceFadeOut;                                           // 0x0028   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/SB.SBGuideRewardListData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBGuideRewardListData
{ 
	FText                                              ItemName;                                                   // 0x0000   (0x0018)  
	int32_t                                            ItemCount;                                                  // 0x0018   (0x0004)  
	TEnumAsByte<ESBItemRarityType>                     Rarity;                                                     // 0x001C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	FString                                            IconAssetPath;                                              // 0x0020   (0x0010)  
	bool                                               Core;                                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              ItemAlias;                                                  // 0x0034   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBSoundStatLogData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSoundStatLogData
{ 
	ESBUISoundDebuggerStatCategory                     Category;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            Description;                                                // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBSoundEventFixedLogData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBSoundEventFixedLogData
{ 
	ESBSoundDebuggingKey                               Category;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            Description;                                                // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBSoundEventLogData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBSoundEventLogData
{ 
	FString                                            StringValue;                                                // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBWorkshopExospineTitleData
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBWorkshopExospineTitleData
{ 
	FText                                              title;                                                      // 0x0000   (0x0018)  
	int32_t                                            StatLevel;                                                  // 0x0018   (0x0004)  
	bool                                               bEquip;                                                     // 0x001C   (0x0001)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x001D   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x001E   (0x0002)  MISSED
	FString                                            IconAssetPath;                                              // 0x0020   (0x0010)  
	TEnumAsByte<ESBItemRarityType>                     Rarity;                                                     // 0x0030   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/SB.SBWorkshopNanoSuitTitleData
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBWorkshopNanoSuitTitleData
{ 
	FText                                              title;                                                      // 0x0000   (0x0018)  
	ESBUINanoSuitCraftState                            State;                                                      // 0x0018   (0x0001)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x0019   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x001A   (0x0006)  MISSED
	FString                                            IconAssetPath;                                              // 0x0020   (0x0010)  
	TEnumAsByte<ESBItemRarityType>                     Rarity;                                                     // 0x0030   (0x0001)  
	bool                                               bEquip;                                                     // 0x0031   (0x0001)  
	unsigned char                                      UnknownData03_7[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Struct /Script/SB.SBListTabData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBListTabData
{ 
	FText                                              title;                                                      // 0x0000   (0x0018)  
};

/// Struct /Script/SB.SBRealTimeDebugProperty
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSBRealTimeDebugProperty
{ 
	TEnumAsByte<ESBDebugData>                          Object;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FText                                              Instance;                                                   // 0x0008   (0x0018)  
	FText                                              Property;                                                   // 0x0020   (0x0018)  
	FText                                              Value;                                                      // 0x0038   (0x0018)  
	TEnumAsByte<ESBDebugDataState>                     DataState;                                                  // 0x0050   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/SB.SBDebugViewerProperty
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBDebugViewerProperty
{ 
	FText                                              Key;                                                        // 0x0000   (0x0018)  
	FText                                              Value;                                                      // 0x0018   (0x0018)  
	bool                                               bRealTimeChecked;                                           // 0x0030   (0x0001)  
	TEnumAsByte<ESBDebugDataState>                     DataState;                                                  // 0x0031   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Struct /Script/SB.SBDebugViewerData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBDebugViewerData
{ 
	TEnumAsByte<ESBDebugViewerDataCategory>            Category;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FText                                              Name;                                                       // 0x0008   (0x0018)  
	TEnumAsByte<ESBDebugDataState>                     DataState;                                                  // 0x0020   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/SB.SBMultiPlayPlayerData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBMultiPlayPlayerData
{ 
	FString                                            PlayerName;                                                 // 0x0000   (0x0010)  
	int32_t                                            Score;                                                      // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/SB.SBTeleportCampData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBTeleportCampData
{ 
	int32_t                                            Index;                                                      // 0x0000   (0x0004)  
	bool                                               bDim;                                                       // 0x0004   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FText                                              CampName;                                                   // 0x0008   (0x0018)  
	FName                                              CampAlias;                                                  // 0x0020   (0x0008)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x0028   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/SB.SBBHUDCommandCheatData
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBBHUDCommandCheatData
{ 
	int32_t                                            Index;                                                      // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FText                                              CategoryText;                                               // 0x0008   (0x0018)  
	FText                                              CheatText;                                                  // 0x0020   (0x0018)  
};

/// Struct /Script/SB.SBGameMenuTaskData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBGameMenuTaskData
{ 
	FText                                              TextData;                                                   // 0x0000   (0x0018)  
	TEnumAsByte<ESBQuestTaskUIType>                    UIType;                                                     // 0x0018   (0x0001)  
	ESBQuestTaskDescriptionUIType                      DescriptionUIType;                                          // 0x0019   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x001A   (0x0002)  MISSED
	int32_t                                            CurrentValue;                                               // 0x001C   (0x0004)  
	int32_t                                            CompleteValue;                                              // 0x0020   (0x0004)  
	bool                                               bComplete;                                                  // 0x0024   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0025   (0x0003)  MISSED
};

/// Struct /Script/SB.SBRequestTitleData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBRequestTitleData
{ 
	FText                                              title;                                                      // 0x0000   (0x0018)  
	FName                                              Alias;                                                      // 0x0018   (0x0008)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x0020   (0x0001)  
	ESBUIRequestState                                  RequestState;                                               // 0x0021   (0x0001)  
	bool                                               bTracking;                                                  // 0x0022   (0x0001)  
	ESBDisplayRequestBoardType                         DisplayRequestBoardType;                                    // 0x0023   (0x0001)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/SB.SBGameMenuQuestTitleData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBGameMenuQuestTitleData
{ 
	FText                                              QuestTitle;                                                 // 0x0000   (0x0018)  
	bool                                               bTracking;                                                  // 0x0018   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	FName                                              QuestAlias;                                                 // 0x001C   (0x0008)  
	TEnumAsByte<ESBUIQuestJournalTitleType>            QuestType;                                                  // 0x0024   (0x0001)  
	TEnumAsByte<ESBQuestState>                         QuestState;                                                 // 0x0025   (0x0001)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x0026   (0x0001)  
	unsigned char                                      UnknownData03_7[0x1];                                       // 0x0027   (0x0001)  MISSED
};

/// Struct /Script/SB.SBGameMenuEquipStatViewerData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBGameMenuEquipStatViewerData
{ 
	FText                                              StatName;                                                   // 0x0000   (0x0018)  
	FText                                              StatValue;                                                  // 0x0018   (0x0018)  
};

/// Struct /Script/SB.SBGameMenuEquipInvenData
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBGameMenuEquipInvenData
{ 
	FText                                              ItemName;                                                   // 0x0000   (0x0018)  
	FName                                              ItemAlias;                                                  // 0x0018   (0x0008)  
	FString                                            IconAssetPath;                                              // 0x0020   (0x0010)  
	TEnumAsByte<ESBUIEquipSlotType>                    SlotType;                                                   // 0x0030   (0x0001)  
	TEnumAsByte<ESBItemRarityType>                     Rarity;                                                     // 0x0031   (0x0001)  
	bool                                               Equiped;                                                    // 0x0032   (0x0001)  
	bool                                               ShowCount;                                                  // 0x0033   (0x0001)  
	int32_t                                            Count;                                                      // 0x0034   (0x0004)  
	int32_t                                            ChargeCount;                                                // 0x0038   (0x0004)  
	int32_t                                            StoreCount;                                                 // 0x003C   (0x0004)  
	int32_t                                            DataIndex;                                                  // 0x0040   (0x0004)  
	int32_t                                            EnhanceLevel;                                               // 0x0044   (0x0004)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x0048   (0x0001)  
	bool                                               OverrideHide;                                               // 0x0049   (0x0001)  
	bool                                               bFavorites;                                                 // 0x004A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x5];                                       // 0x004B   (0x0005)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterCanCollection
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUILogicInitParameterCanCollection : FSBUILogicInitParameter
{ 
	FString                                            CollectionEnvSpawnAlias;                                    // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBUILogicInitParameterCanGain
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBUILogicInitParameterCanGain : FSBUILogicInitParameter
{ 
	FName                                              CanAlias;                                                   // 0x0000   (0x0008)  
	float                                              InputDelayTime;                                             // 0x0008   (0x0004)  
};

/// Struct /Script/SB.SBUILogicInitParameterCommonCurrency
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBUILogicInitParameterCommonCurrency : FSBUILogicInitParameter
{ 
	FName                                              BindingCurrency;                                            // 0x0000   (0x0008)  
};

/// Struct /Script/SB.SBUILogicInitParameterCommonMessageBoxV3
/// Size: 0x00C0 (192 bytes) (0x000000 - 0x0000C0) align n/a MaxSize: 0x00C0
struct FSBUILogicInitParameterCommonMessageBoxV3 : FSBUILogicInitParameter
{ 
	unsigned char                                      UnknownData03_8[0x50];                                      // 0x0000   (0x0050)  MISSED
	FText                                              title;                                                      // 0x0050   (0x0018)  
	FText                                              Desc;                                                       // 0x0068   (0x0018)  
	FString                                            TitleTID;                                                   // 0x0080   (0x0010)  
	FString                                            DescTID;                                                    // 0x0090   (0x0010)  
	bool                                               bEnableEmptyInputAction;                                    // 0x00A0   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x00A1   (0x0007)  MISSED
	TArray<FString>                                    EffectAliasList;                                            // 0x00A8   (0x0010)  
	ESBUICommonMessageBoxButtonType                    ButtonType;                                                 // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00B9   (0x0007)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterCoupon
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUILogicInitParameterCoupon : FSBUILogicInitParameter
{ 
	FString                                            CouponEnvSpawnAlias;                                        // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBUILogicInitParameterDLCPurchasePopup
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUILogicInitParameterDLCPurchasePopup : FSBUILogicInitParameter
{ 
	ESBUIDLCPurchasePopupType                          DLCPurchasePopupType;                                       // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUILogicEventKey
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBUILogicEventKey
{ 
	int32_t                                            UMGWidgetType;                                              // 0x0000   (0x0004)  
	int32_t                                            UMGWidgetEvent;                                             // 0x0004   (0x0004)  
	FName                                              UMGWidgetName;                                              // 0x0008   (0x0008)  
	FString                                            UMGWidgetActionPath;                                        // 0x0010   (0x0010)  
	uint32_t                                           cacheHash;                                                  // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterFinishEve
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUILogicInitParameterFinishEve : FSBUILogicInitParameter
{ 
	FString                                            EndingTag;                                                  // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBUILogicInitParameterFishingBoxReward
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBUILogicInitParameterFishingBoxReward : FSBUILogicInitParameter
{ 
	FName                                              FishAlias;                                                  // 0x0000   (0x0008)  
	TArray<FName>                                      BoxRewardItemAliasArray;                                    // 0x0008   (0x0010)  
	TArray<int32_t>                                    BoxRewardItemCountArray;                                    // 0x0018   (0x0010)  
};

/// Struct /Script/SB.SBUILogicInitParameterFishingResult
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBUILogicInitParameterFishingResult : FSBUILogicInitParameter
{ 
	FName                                              FishAlias;                                                  // 0x0000   (0x0008)  
	float                                              FishWeight;                                                 // 0x0008   (0x0004)  
	bool                                               bNewRecord;                                                 // 0x000C   (0x0001)  
	bool                                               bShowFishImage;                                             // 0x000D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x000E   (0x0002)  MISSED
	TArray<FName>                                      BoxRewardItemAliasArray;                                    // 0x0010   (0x0010)  
	TArray<int32_t>                                    BoxRewardItemCountArray;                                    // 0x0020   (0x0010)  
};

/// Struct /Script/SB.SBUILogicInitParameterGuideRewardListData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBUILogicInitParameterGuideRewardListData
{ 
	FString                                            ItemAlias;                                                  // 0x0000   (0x0010)  
	int32_t                                            ItemCount;                                                  // 0x0010   (0x0004)  
	bool                                               Core;                                                       // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterGuideRewardList
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBUILogicInitParameterGuideRewardList : FSBUILogicInitParameter
{ 
	TArray<FSBUILogicInitParameterGuideRewardListData> ItemArray;                                                  // 0x0000   (0x0010)  
	bool                                               bInputPress;                                                // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterGuideUnlockMode
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUILogicInitParameterGuideUnlockMode : FSBUILogicInitParameter
{ 
	FString                                            TitleKey;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBUILogicInitParameterGuideVideoData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBUILogicInitParameterGuideVideoData
{ 
	FString                                            TitleKey;                                                   // 0x0000   (0x0010)  
	FString                                            DescKey;                                                    // 0x0010   (0x0010)  
	FString                                            MovieBKAssetPath;                                           // 0x0020   (0x0010)  
	FString                                            ImageAssetPath;                                             // 0x0030   (0x0010)  
};

/// Struct /Script/SB.SBUILogicInitParameterGuideVideo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBUILogicInitParameterGuideVideo : FSBUILogicInitParameter
{ 
	TArray<FSBUILogicInitParameterGuideVideoData>      DataArray;                                                  // 0x0000   (0x0010)  
	bool                                               bInputPress;                                                // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterHairSalon
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUILogicInitParameterHairSalon : FSBUILogicInitParameter
{ 
	TEnumAsByte<ESBUILogicType>                        BackUIType;                                                 // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBHairSalonColorData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBHairSalonColorData
{ 
	int32_t                                            Index;                                                      // 0x0000   (0x0004)  
	int32_t                                            VariationCount;                                             // 0x0004   (0x0004)  
	TArray<FString>                                    VarAssetPathArray;                                          // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBUILogicInitParameterHUDEnhanceResult
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBUILogicInitParameterHUDEnhanceResult : FSBUILogicInitParameter
{ 
	FName                                              ItemAlais;                                                  // 0x0000   (0x0008)  
	int32_t                                            ItemAmount;                                                 // 0x0008   (0x0004)  
	int32_t                                            NewLevel;                                                   // 0x000C   (0x0004)  
	int32_t                                            AddedItemAmount;                                            // 0x0010   (0x0004)  
	uint32_t                                           ActorGuid;                                                  // 0x0014   (0x0004)  
};

/// Struct /Script/SB.SBUILogicHUDItemEquipData
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSBUILogicHUDItemEquipData
{ 
	FName                                              ItemAlias;                                                  // 0x0000   (0x0008)  
	FString                                            icon;                                                       // 0x0008   (0x0010)  
	FText                                              Name;                                                       // 0x0018   (0x0018)  
	FText                                              DescFunction;                                               // 0x0030   (0x0018)  
	int32_t                                            Count;                                                      // 0x0048   (0x0004)  
	int32_t                                            ChargeCount;                                                // 0x004C   (0x0004)  
	int32_t                                            StoreCount;                                                 // 0x0050   (0x0004)  
	TEnumAsByte<ESBItemCategory>                       ItemCategory;                                               // 0x0054   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Struct /Script/SB.SBUILogicHUDTPSBulletData
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSBUILogicHUDTPSBulletData
{ 
	FName                                              ItemAlias;                                                  // 0x0000   (0x0008)  
	FString                                            icon;                                                       // 0x0008   (0x0010)  
	FName                                              AcquisionSkill;                                             // 0x0018   (0x0008)  
	bool                                               bUsableBullet;                                              // 0x0020   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	int32_t                                            Index;                                                      // 0x0024   (0x0004)  
	int32_t                                            GroupIndex;                                                 // 0x0028   (0x0004)  
	int32_t                                            SubIndex;                                                   // 0x002C   (0x0004)  
	int32_t                                            Count;                                                      // 0x0030   (0x0004)  
	bool                                               bLock;                                                      // 0x0034   (0x0001)  
	bool                                               bCoolTimeChanged;                                           // 0x0035   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0036   (0x0002)  MISSED
	float                                              CoolTimeProgress;                                           // 0x0038   (0x0004)  
	bool                                               bCoolTimeComplete;                                          // 0x003C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x003D   (0x0003)  MISSED
	FText                                              ItemName;                                                   // 0x0040   (0x0018)  
};

/// Struct /Script/SB.SBUILogicInitParameterHUDTPSNikkeMode
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBUILogicInitParameterHUDTPSNikkeMode : FSBUILogicInitParameter
{ 
	FName                                              StageAlias;                                                 // 0x0000   (0x0008)  
};

/// Struct /Script/SB.SBUILogicPopupInitParameter
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUILogicPopupInitParameter : FSBUILogicInitParameter
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUILogicViewerInitParameter
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUILogicViewerInitParameter : FSBUILogicInitParameter
{ 
	unsigned char                                      UnknownData01_1[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterLobby
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUILogicInitParameterLobby : FSBUILogicInitParameter
{ 
	ESBUILobbyType                                     LobbyType;                                                  // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUILogicInitParameterMailBox
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUILogicInitParameterMailBox : FSBUILogicInitParameter
{ 
	FString                                            MailBoxEnvSpawnAlias;                                       // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBUIMessageBoxListMessageData
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FSBUIMessageBoxListMessageData
{ 
	FString                                            title;                                                      // 0x0000   (0x0010)  
	FString                                            Description;                                                // 0x0010   (0x0010)  
	FText                                              TitleText;                                                  // 0x0020   (0x0018)  
	FText                                              DescriptionText;                                            // 0x0038   (0x0018)  
	ESBUICommonMessageBoxButtonType                    ButtonType;                                                 // 0x0050   (0x0001)  
	ESBUIMessageBoxAppearanceType                      AppearanceType;                                             // 0x0051   (0x0001)  
	unsigned char                                      UnknownData01_7[0x16];                                      // 0x0052   (0x0016)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterMessageBoxList
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBUILogicInitParameterMessageBoxList : FSBUILogicInitParameter
{ 
	TArray<FSBUIMessageBoxListMessageData>             DataArray;                                                  // 0x0000   (0x0010)  
	ESBUIMessageBoxListBackgroundType                  BackgroundType;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterNextChapterPopup
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBUILogicInitParameterNextChapterPopup : FSBUILogicInitParameter
{ 
	FName                                              NextCampSpawnAlias;                                         // 0x0000   (0x0008)  
	FVector                                            NextSpawnLocation;                                          // 0x0008   (0x000C)  
	FRotator                                           NextSpawnRotation;                                          // 0x0014   (0x000C)  
};

/// Struct /Script/SB.SBUILogicInitParameterNikkeLostArticlePopup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBUILogicInitParameterNikkeLostArticlePopup : FSBUILogicInitParameter
{ 
	FString                                            NikkeLostArticleAlias;                                      // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBUILogicInitParameterNikkeMinigameResult
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBUILogicInitParameterNikkeMinigameResult : FSBUILogicInitParameter
{ 
	bool                                               IsCleared;                                                  // 0x0000   (0x0001)  
	bool                                               IsFirstCleared;                                             // 0x0001   (0x0001)  
	bool                                               IsHighRecorded;                                             // 0x0002   (0x0001)  
	unsigned char                                      UnknownData02_6[0x5];                                       // 0x0003   (0x0005)  MISSED
	FString                                            NikkeStageAlias;                                            // 0x0008   (0x0010)  
	FString                                            LostArticleAlias;                                           // 0x0018   (0x0010)  
	float                                              BestPlayTime;                                               // 0x0028   (0x0004)  
	float                                              CurrentPlayTime;                                            // 0x002C   (0x0004)  
	int32_t                                            CurrentTotalDamage;                                         // 0x0030   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterRecordPopup
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBUILogicInitParameterRecordPopup : FSBUILogicInitParameter
{ 
	FName                                              AlbumAlias;                                                 // 0x0000   (0x0008)  
	bool                                               bShouldPause;                                               // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/SB.SBUILogicInitParameterRequestBoard
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUILogicInitParameterRequestBoard : FSBUILogicInitParameter
{ 
	TEnumAsByte<ESBUIRequestBoardType>                 RequestBoardType;                                           // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUILogicShopPopupInitParameter
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBUILogicShopPopupInitParameter : FSBUILogicInitParameter
{ 
	unsigned char                                      UnknownData01_1[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/SB.SBUILogicTestTextCorrectTextInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBUILogicTestTextCorrectTextInfo
{ 
	TEnumAsByte<ESBLocalize>                           StringTableType;                                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            StringKey;                                                  // 0x0008   (0x0010)  
	FString                                            DisplayStringKey;                                           // 0x0018   (0x0010)  
};

/// Struct /Script/SB.SBUILogicInitParameterTrialBossChallengeMessagePopup
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUILogicInitParameterTrialBossChallengeMessagePopup : FSBUILogicInitParameter
{ 
	bool                                               bOnlyYes;                                                   // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBUILogicInitParameterTrialShopApp
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FSBUILogicInitParameterTrialShopApp : FSBUILogicInitParameter
{ 
	bool                                               bFinishTrial;                                               // 0x0000   (0x0001)  
};

/// Struct /Script/SB.SBBossChallengeRewardItemData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBBossChallengeRewardItemData
{ 
	ESBUIBossChallengeItemState                        State;                                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            IconAssetPath;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/SB.SBHairSalonItemData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSBHairSalonItemData
{ 
	int32_t                                            Index;                                                      // 0x0000   (0x0004)  
	FName                                              ShopItemAlias;                                              // 0x0004   (0x0008)  
	FName                                              ItemAlias;                                                  // 0x000C   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FText                                              ItemName;                                                   // 0x0018   (0x0018)  
	FString                                            IconAssetPath;                                              // 0x0030   (0x0010)  
	bool                                               Purchased;                                                  // 0x0040   (0x0001)  
	bool                                               Equiped;                                                    // 0x0041   (0x0001)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x0042   (0x0001)  
	bool                                               bAddedByFriendShipLevelUp;                                  // 0x0043   (0x0001)  
	bool                                               bNeedPlayAddGoods;                                          // 0x0044   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Struct /Script/SB.SBNightOperationItemData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBNightOperationItemData
{ 
	FName                                              OperationAlias;                                             // 0x0000   (0x0008)  
	FString                                            IconAssetPath;                                              // 0x0008   (0x0010)  
	bool                                               bRandom;                                                    // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/SB.SBAlbumItemData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBAlbumItemData
{ 
	FName                                              ItemAlias;                                                  // 0x0000   (0x0008)  
	TEnumAsByte<ESBAlbumType>                          AlbumType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	FString                                            ImagePath;                                                  // 0x0010   (0x0010)  
	bool                                               bUnlocked;                                                  // 0x0020   (0x0001)  
	bool                                               bUsed;                                                      // 0x0021   (0x0001)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x0022   (0x0001)  
	unsigned char                                      UnknownData03_7[0x5];                                       // 0x0023   (0x0005)  MISSED
};

/// Struct /Script/SB.SBShopItemData
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FSBShopItemData
{ 
	FText                                              ItemName;                                                   // 0x0000   (0x0018)  
	TEnumAsByte<ESBItemRarityType>                     Rarity;                                                     // 0x0018   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0019   (0x0007)  MISSED
	FString                                            IconAssetPath;                                              // 0x0020   (0x0010)  
	int32_t                                            LimitedCount;                                               // 0x0030   (0x0004)  
	int32_t                                            RemainCount;                                                // 0x0034   (0x0004)  
	bool                                               IsDiscount;                                                 // 0x0038   (0x0001)  
	TEnumAsByte<ESBUIRedDotState>                      RedDotState;                                                // 0x0039   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x003A   (0x0002)  MISSED
	FName                                              MoneyItemAlias1;                                            // 0x003C   (0x0008)  
	FName                                              MoneyItemAlias2;                                            // 0x0044   (0x0008)  
	FName                                              MoneyItemAlias3;                                            // 0x004C   (0x0008)  
	FName                                              MoneyItemAlias4;                                            // 0x0054   (0x0008)  
	bool                                               bAddedByFriendShipLevelUp;                                  // 0x005C   (0x0001)  
	bool                                               bNeedPlayAddGoods;                                          // 0x005D   (0x0001)  
	unsigned char                                      UnknownData05_7[0x2];                                       // 0x005E   (0x0002)  MISSED
};

/// Struct /Script/SB.SBVibrationTemplate
/// Size: 0x0050 (80 bytes) (0x000020 - 0x000050) align n/a MaxSize: 0x0050
struct FSBVibrationTemplate : FMovieSceneEvalTemplate
{ 
	class USBVibrationSection*                         VibrationSection;                                           // 0x0020   (0x0008)  
	FSBVibrationSectionData                            SectionData;                                                // 0x0028   (0x0020)  
	FFrameNumber                                       StartFrame;                                                 // 0x0048   (0x0004)  
	FFrameNumber                                       EndFrame;                                                   // 0x004C   (0x0004)  
};

/// Struct /Script/SB.SBWebJobSchemaBase
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0000
struct FSBWebJobSchemaBase
{ 
};

/// Struct /Script/SB.SBWebJobSchemaCouponUserInfo
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FSBWebJobSchemaCouponUserInfo : FSBWebJobSchemaBase
{ 
	FString                                            user_id;                                                    // 0x0000   (0x0010)  
	FString                                            created_at;                                                 // 0x0010   (0x0010)  
	FString                                            updated_at;                                                 // 0x0020   (0x0010)  
	int32_t                                            play_time;                                                  // 0x0030   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	FString                                            coupon_id;                                                  // 0x0038   (0x0010)  
	FString                                            coupon_code;                                                // 0x0048   (0x0010)  
	FString                                            coupon_server;                                              // 0x0058   (0x0010)  
	int32_t                                            response_code;                                              // 0x0068   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	FString                                            coupon_issuance_start_time;                                 // 0x0070   (0x0010)  
	FString                                            coupon_issuance_expiration_time;                            // 0x0080   (0x0010)  
	FString                                            coupon_limit_time;                                          // 0x0090   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaGetCoupon
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSBWebJobSchemaGetCoupon : FSBWebJobSchemaBase
{ 
	FString                                            coupon_id;                                                  // 0x0000   (0x0010)  
	FString                                            coupon_code;                                                // 0x0010   (0x0010)  
	FString                                            coupon_server;                                              // 0x0020   (0x0010)  
	FString                                            user_id;                                                    // 0x0030   (0x0010)  
	FString                                            Platform;                                                   // 0x0040   (0x0010)  
	int32_t                                            response_code;                                              // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaPosition
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBWebJobSchemaPosition : FSBWebJobSchemaBase
{ 
	int32_t                                            X;                                                          // 0x0000   (0x0004)  
	int32_t                                            Y;                                                          // 0x0004   (0x0004)  
	int32_t                                            Z;                                                          // 0x0008   (0x0004)  
};

/// Struct /Script/SB.SBWebJobSchemaPlayerEventHeader
/// Size: 0x00D8 (216 bytes) (0x000000 - 0x0000D8) align n/a MaxSize: 0x00D8
struct FSBWebJobSchemaPlayerEventHeader : FSBWebJobSchemaBase
{ 
	FString                                            user_id;                                                    // 0x0000   (0x0010)  
	uint64_t                                           time_since_playthrough_newgame;                             // 0x0010   (0x0008)  
	FSBWebJobSchemaPosition                            pos;                                                        // 0x0018   (0x000C)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FString                                            level_id;                                                   // 0x0028   (0x0010)  
	FString                                            zone_id;                                                    // 0x0038   (0x0010)  
	FString                                            Difficulty;                                                 // 0x0048   (0x0010)  
	bool                                               new_game_plus;                                              // 0x0058   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0059   (0x0007)  MISSED
	FString                                            public_ip;                                                  // 0x0060   (0x0010)  
	FString                                            private_ip;                                                 // 0x0070   (0x0010)  
	FString                                            Tag;                                                        // 0x0080   (0x0010)  
	int32_t                                            save_slot_index;                                            // 0x0090   (0x0004)  
	uint32_t                                           total_memory;                                               // 0x0094   (0x0004)  
	uint32_t                                           texture_memory;                                             // 0x0098   (0x0004)  
	uint32_t                                           rander_target_memory;                                       // 0x009C   (0x0004)  
	FString                                            newgame_create_time;                                        // 0x00A0   (0x0010)  
	FString                                            activity;                                                   // 0x00B0   (0x0010)  
	FString                                            activity_list;                                              // 0x00C0   (0x0010)  
	bool                                               qa_branch;                                                  // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaSaveLoadEvent
/// Size: 0x00F8 (248 bytes) (0x0000D8 - 0x0000F8) align n/a MaxSize: 0x00F8
struct FSBWebJobSchemaSaveLoadEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            saveload_type;                                              // 0x00E8   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaActivityEvent
/// Size: 0x0108 (264 bytes) (0x0000D8 - 0x000108) align n/a MaxSize: 0x0108
struct FSBWebJobSchemaActivityEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            activity_id;                                                // 0x00E8   (0x0010)  
	FString                                            activity_state;                                             // 0x00F8   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaChangeSPExpEvent
/// Size: 0x00F8 (248 bytes) (0x0000D8 - 0x0000F8) align n/a MaxSize: 0x00F8
struct FSBWebJobSchemaChangeSPExpEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	int32_t                                            spexp_change_amount;                                        // 0x00E8   (0x0004)  
	int32_t                                            spexp_current_amount;                                       // 0x00EC   (0x0004)  
	int32_t                                            splevel_current_amount;                                     // 0x00F0   (0x0004)  
	int32_t                                            sp_current_amount;                                          // 0x00F4   (0x0004)  
};

/// Struct /Script/SB.SBWebJobSchemaDamageEvent
/// Size: 0x0120 (288 bytes) (0x0000D8 - 0x000120) align n/a MaxSize: 0x0120
struct FSBWebJobSchemaDamageEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            attacker_alias;                                             // 0x00E8   (0x0010)  
	FString                                            defender_alias;                                             // 0x00F8   (0x0010)  
	FString                                            skill_alias;                                                // 0x0108   (0x0010)  
	int32_t                                            damage_amount;                                              // 0x0118   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x011C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaKillEvent
/// Size: 0x00F8 (248 bytes) (0x0000D8 - 0x0000F8) align n/a MaxSize: 0x00F8
struct FSBWebJobSchemaKillEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            character_alias;                                            // 0x00E8   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaBuyItemEvent
/// Size: 0x0110 (272 bytes) (0x0000D8 - 0x000110) align n/a MaxSize: 0x0110
struct FSBWebJobSchemaBuyItemEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            item_alias;                                                 // 0x00E8   (0x0010)  
	FString                                            item_category;                                              // 0x00F8   (0x0010)  
	uint32_t                                           buy_amount;                                                 // 0x0108   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x010C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaSellFishEvent
/// Size: 0x0100 (256 bytes) (0x0000D8 - 0x000100) align n/a MaxSize: 0x0100
struct FSBWebJobSchemaSellFishEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            fish_alias;                                                 // 0x00E8   (0x0010)  
	uint32_t                                           sell_amount;                                                // 0x00F8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00FC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaFishingResultEvent
/// Size: 0x0100 (256 bytes) (0x0000D8 - 0x000100) align n/a MaxSize: 0x0100
struct FSBWebJobSchemaFishingResultEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            fish_alias;                                                 // 0x00E8   (0x0010)  
	int32_t                                            fishing_attack_power;                                       // 0x00F8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00FC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaFishingFightingEvent
/// Size: 0x00F8 (248 bytes) (0x0000D8 - 0x0000F8) align n/a MaxSize: 0x00F8
struct FSBWebJobSchemaFishingFightingEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            fish_alias;                                                 // 0x00E8   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaFishingCastingEvent
/// Size: 0x00F8 (248 bytes) (0x0000D8 - 0x0000F8) align n/a MaxSize: 0x00F8
struct FSBWebJobSchemaFishingCastingEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            lure_alias;                                                 // 0x00E8   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaSpawnItemEvent
/// Size: 0x0180 (384 bytes) (0x0000D8 - 0x000180) align n/a MaxSize: 0x0180
struct FSBWebJobSchemaSpawnItemEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            spawn_type;                                                 // 0x00E8   (0x0010)  
	FString                                            item_alias;                                                 // 0x00F8   (0x0010)  
	uint32_t                                           item_amount;                                                // 0x0108   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x010C   (0x0004)  MISSED
	FString                                            zone_env_spawn_alias;                                       // 0x0110   (0x0010)  
	FString                                            zone_env_alias;                                             // 0x0120   (0x0010)  
	FString                                            npc_alias;                                                  // 0x0130   (0x0010)  
	FString                                            event_spawn_alias;                                          // 0x0140   (0x0010)  
	FString                                            zone_event_actor_table_alias;                               // 0x0150   (0x0010)  
	FString                                            zone_event_actor_name;                                      // 0x0160   (0x0010)  
	FString                                            fish_alias;                                                 // 0x0170   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaNanoSuitEvent
/// Size: 0x0108 (264 bytes) (0x0000D8 - 0x000108) align n/a MaxSize: 0x0108
struct FSBWebJobSchemaNanoSuitEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            item_id;                                                    // 0x00E8   (0x0010)  
	FString                                            item_category;                                              // 0x00F8   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaQuestEvent
/// Size: 0x0118 (280 bytes) (0x0000D8 - 0x000118) align n/a MaxSize: 0x0118
struct FSBWebJobSchemaQuestEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            quest_id;                                                   // 0x00E8   (0x0010)  
	FString                                            quest_type;                                                 // 0x00F8   (0x0010)  
	FString                                            quest_state;                                                // 0x0108   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaAcquisitionSkillEvent
/// Size: 0x0110 (272 bytes) (0x0000D8 - 0x000110) align n/a MaxSize: 0x0110
struct FSBWebJobSchemaAcquisitionSkillEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            skill_id;                                                   // 0x00E8   (0x0010)  
	FString                                            skill_category;                                             // 0x00F8   (0x0010)  
	int32_t                                            consume_sp;                                                 // 0x0108   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x010C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaLevelUpEvent
/// Size: 0x0110 (272 bytes) (0x0000D8 - 0x000110) align n/a MaxSize: 0x0110
struct FSBWebJobSchemaLevelUpEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            level_type;                                                 // 0x00E8   (0x0010)  
	FString                                            item_id;                                                    // 0x00F8   (0x0010)  
	int32_t                                            current_level;                                              // 0x0108   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x010C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaGainCoreEvent
/// Size: 0x0118 (280 bytes) (0x0000D8 - 0x000118) align n/a MaxSize: 0x0118
struct FSBWebJobSchemaGainCoreEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            item_id;                                                    // 0x00E8   (0x0010)  
	FString                                            zone_env_spawn_id;                                          // 0x00F8   (0x0010)  
	FString                                            zone_env_id;                                                // 0x0108   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaItemAmount
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBWebJobSchemaItemAmount : FSBWebJobSchemaBase
{ 
	FString                                            item_id;                                                    // 0x0000   (0x0010)  
	int32_t                                            item_amount;                                                // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaSkillAmount
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBWebJobSchemaSkillAmount : FSBWebJobSchemaBase
{ 
	FString                                            skill_id;                                                   // 0x0000   (0x0010)  
	int32_t                                            skill_amount;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaDefeatEvent
/// Size: 0x01C0 (448 bytes) (0x0000D8 - 0x0001C0) align n/a MaxSize: 0x01C0
struct FSBWebJobSchemaDefeatEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            defeat_type;                                                // 0x00E8   (0x0010)  
	FString                                            defeat_id;                                                  // 0x00F8   (0x0010)  
	int32_t                                            defeat_result;                                              // 0x0108   (0x0004)  
	int32_t                                            defeat_time;                                                // 0x010C   (0x0004)  
	int32_t                                            apply_damage_amount;                                        // 0x0110   (0x0004)  
	int32_t                                            suffer_damage_amount;                                       // 0x0114   (0x0004)  
	int32_t                                            item_stack_recovery_potion;                                 // 0x0118   (0x0004)  
	int32_t                                            max_hp;                                                     // 0x011C   (0x0004)  
	int32_t                                            max_shield;                                                 // 0x0120   (0x0004)  
	int32_t                                            max_beta_gauge;                                             // 0x0124   (0x0004)  
	int32_t                                            max_burst_gauge;                                            // 0x0128   (0x0004)  
	int32_t                                            physic_attack_power;                                        // 0x012C   (0x0004)  
	int32_t                                            range_attack_power;                                         // 0x0130   (0x0004)  
	int32_t                                            shield_attack_power;                                        // 0x0134   (0x0004)  
	int32_t                                            critical_percentage;                                        // 0x0138   (0x0004)  
	int32_t                                            critical_value_rate;                                        // 0x013C   (0x0004)  
	TArray<FSBWebJobSchemaItemAmount>                  item_use_count;                                             // 0x0140   (0x0010)  
	TArray<FSBWebJobSchemaSkillAmount>                 damage_by_skill;                                            // 0x0150   (0x0010)  
	TArray<FSBWebJobSchemaSkillAmount>                 damaged_by_skill;                                           // 0x0160   (0x0010)  
	TArray<FSBWebJobSchemaSkillAmount>                 skill_count;                                                // 0x0170   (0x0010)  
	TArray<FString>                                    equip_exo_spine_list;                                       // 0x0180   (0x0010)  
	TArray<FString>                                    equip_gear_list;                                            // 0x0190   (0x0010)  
	FString                                            equip_nano_suit;                                            // 0x01A0   (0x0010)  
	int32_t                                            SPLevel;                                                    // 0x01B0   (0x0004)  
	int32_t                                            gearslot;                                                   // 0x01B4   (0x0004)  
	int32_t                                            protectorslot;                                              // 0x01B8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x01BC   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaAcquireItemEvent
/// Size: 0x0110 (272 bytes) (0x0000D8 - 0x000110) align n/a MaxSize: 0x0110
struct FSBWebJobSchemaAcquireItemEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            item_id;                                                    // 0x00E8   (0x0010)  
	FString                                            item_category;                                              // 0x00F8   (0x0010)  
	int32_t                                            change_amount;                                              // 0x0108   (0x0004)  
	int32_t                                            current_amount;                                             // 0x010C   (0x0004)  
};

/// Struct /Script/SB.SBWebJobSchemaConsumeItemEvent
/// Size: 0x0110 (272 bytes) (0x0000D8 - 0x000110) align n/a MaxSize: 0x0110
struct FSBWebJobSchemaConsumeItemEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            boss_id;                                                    // 0x00E8   (0x0010)  
	FString                                            item_id;                                                    // 0x00F8   (0x0010)  
	int32_t                                            change_amount;                                              // 0x0108   (0x0004)  
	int32_t                                            current_amount;                                             // 0x010C   (0x0004)  
};

/// Struct /Script/SB.SBWebJobSchemaPlayerDeadEvent
/// Size: 0x0108 (264 bytes) (0x0000D8 - 0x000108) align n/a MaxSize: 0x0108
struct FSBWebJobSchemaPlayerDeadEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	FString                                            boss_id;                                                    // 0x00E8   (0x0010)  
	FString                                            entity_type;                                                // 0x00F8   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaChangeCoinEvent
/// Size: 0x00F0 (240 bytes) (0x0000D8 - 0x0000F0) align n/a MaxSize: 0x00F0
struct FSBWebJobSchemaChangeCoinEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	int32_t                                            coin_change_amount;                                         // 0x00E8   (0x0004)  
	int32_t                                            coin_current_amount;                                        // 0x00EC   (0x0004)  
};

/// Struct /Script/SB.SBWebJobSchemaChangeGoldEvent
/// Size: 0x00F0 (240 bytes) (0x0000D8 - 0x0000F0) align n/a MaxSize: 0x00F0
struct FSBWebJobSchemaChangeGoldEvent : FSBWebJobSchemaPlayerEventHeader
{ 
	FString                                            event_type;                                                 // 0x00D8   (0x0010)  
	int32_t                                            gold_change_amount;                                         // 0x00E8   (0x0004)  
	int32_t                                            gold_current_amount;                                        // 0x00EC   (0x0004)  
};

/// Struct /Script/SB.SBWebJobSchemaGetPublicIP
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBWebJobSchemaGetPublicIP : FSBWebJobSchemaBase
{ 
	FString                                            PublicIP;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaUpdateCognitoStatus
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSBWebJobSchemaUpdateCognitoStatus : FSBWebJobSchemaBase
{ 
	FString                                            ResultCode;                                                 // 0x0000   (0x0010)  
	FString                                            PlayerName;                                                 // 0x0010   (0x0010)  
	FString                                            IdToken;                                                    // 0x0020   (0x0010)  
	FString                                            CognitoStatus;                                              // 0x0030   (0x0010)  
	FString                                            ErrorMessage;                                               // 0x0040   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaSignInCognito
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBWebJobSchemaSignInCognito : FSBWebJobSchemaBase
{ 
	FString                                            ResultCode;                                                 // 0x0000   (0x0010)  
	FString                                            PlayerName;                                                 // 0x0010   (0x0010)  
	FString                                            IdToken;                                                    // 0x0020   (0x0010)  
	FString                                            ErrorMessage;                                               // 0x0030   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaSendHello
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBWebJobSchemaSendHello : FSBWebJobSchemaBase
{ 
	FString                                            Event;                                                      // 0x0000   (0x0010)  
	FString                                            Output;                                                     // 0x0010   (0x0010)  
	FString                                            Timestamp;                                                  // 0x0020   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaUpdateDummyState
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBWebJobSchemaUpdateDummyState : FSBWebJobSchemaBase
{ 
	FString                                            DummyState;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaGetNetCommand
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBWebJobSchemaGetNetCommand : FSBWebJobSchemaBase
{ 
	FString                                            NetCommand;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaDefeatBoss
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBWebJobSchemaDefeatBoss : FSBWebJobSchemaBase
{ 
	FString                                            PlayerName;                                                 // 0x0000   (0x0010)  
	FString                                            Bossname;                                                   // 0x0010   (0x0010)  
	uint32_t                                           DefeatTime;                                                 // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FString                                            Result;                                                     // 0x0028   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaMatchResult
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBWebJobSchemaMatchResult : FSBWebJobSchemaBase
{ 
	FString                                            PlayerName;                                                 // 0x0000   (0x0010)  
	FString                                            MatchResult;                                                // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaMatchStop
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBWebJobSchemaMatchStop : FSBWebJobSchemaBase
{ 
	FString                                            Status;                                                     // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaMatchStatus
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBWebJobSchemaMatchStatus : FSBWebJobSchemaBase
{ 
	FString                                            IpAddress;                                                  // 0x0000   (0x0010)  
	int32_t                                            Port;                                                       // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            PlayerSessionId;                                            // 0x0018   (0x0010)  
	FString                                            Status;                                                     // 0x0028   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaMatchRequest
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBWebJobSchemaMatchRequest : FSBWebJobSchemaBase
{ 
	FString                                            TicketId;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaJiraCommon
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSBWebJobSchemaJiraCommon : FSBWebJobSchemaBase
{ 
	int32_t                                            ID;                                                         // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            Self;                                                       // 0x0008   (0x0010)  
	FString                                            Key;                                                        // 0x0018   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaJiraIssuePriority
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSBWebJobSchemaJiraIssuePriority
{ 
	FString                                            Self;                                                       // 0x0000   (0x0010)  
	FString                                            iconUrl;                                                    // 0x0010   (0x0010)  
	FString                                            Name;                                                       // 0x0020   (0x0010)  
	FString                                            ID;                                                         // 0x0030   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaJiraIssueCreator
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBWebJobSchemaJiraIssueCreator
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	FString                                            DisplayName;                                                // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaJiraIssueCommentAuthor
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSBWebJobSchemaJiraIssueCommentAuthor
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	FString                                            Key;                                                        // 0x0010   (0x0010)  
	FString                                            DisplayName;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaJiraIssueCommentInfo
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FSBWebJobSchemaJiraIssueCommentInfo : FSBWebJobSchemaBase
{ 
	FString                                            Self;                                                       // 0x0000   (0x0010)  
	FString                                            ID;                                                         // 0x0010   (0x0010)  
	FSBWebJobSchemaJiraIssueCommentAuthor              author;                                                     // 0x0020   (0x0030)  
	FString                                            Body;                                                       // 0x0050   (0x0010)  
	FSBWebJobSchemaJiraIssueCommentAuthor              updateAuthor;                                               // 0x0060   (0x0030)  
};

/// Struct /Script/SB.SBWebJobSchemaJiraIssueComment
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBWebJobSchemaJiraIssueComment : FSBWebJobSchemaBase
{ 
	TArray<FSBWebJobSchemaJiraIssueCommentInfo>        comments;                                                   // 0x0000   (0x0010)  
	int32_t                                            MaxResults;                                                 // 0x0010   (0x0004)  
	int32_t                                            total;                                                      // 0x0014   (0x0004)  
	int32_t                                            startAt;                                                    // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaJiraIssueVote
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBWebJobSchemaJiraIssueVote : FSBWebJobSchemaBase
{ 
	FString                                            Self;                                                       // 0x0000   (0x0010)  
	int32_t                                            votes;                                                      // 0x0010   (0x0004)  
	bool                                               hasVoted;                                                   // 0x0014   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Struct /Script/SB.SBWebJobSchemaJiraIssueAssignee
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBWebJobSchemaJiraIssueAssignee
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	FString                                            DisplayName;                                                // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaJiraIssueStatus
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSBWebJobSchemaJiraIssueStatus
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	FString                                            ID;                                                         // 0x0010   (0x0010)  
};

/// Struct /Script/SB.SBWebJobSchemaJiraIssueFields
/// Size: 0x0128 (296 bytes) (0x000000 - 0x000128) align n/a MaxSize: 0x0128
struct FSBWebJobSchemaJiraIssueFields : FSBWebJobSchemaBase
{ 
	FString                                            Description;                                                // 0x0000   (0x0010)  
	FSBWebJobSchemaJiraIssuePriority                   Priority;                                                   // 0x0010   (0x0040)  
	FString                                            customfield;                                                // 0x0050   (0x0010)  
	FString                                            summary;                                                    // 0x0060   (0x0010)  
	FSBWebJobSchemaJiraIssueCreator                    creator;                                                    // 0x0070   (0x0020)  
	FSBWebJobSchemaJiraIssueComment                    comment;                                                    // 0x0090   (0x0020)  
	FSBWebJobSchemaJiraIssueVote                       votes;                                                      // 0x00B0   (0x0018)  
	FString                                            created;                                                    // 0x00C8   (0x0010)  
	TArray<FString>                                    labels;                                                     // 0x00D8   (0x0010)  
	FSBWebJobSchemaJiraIssueAssignee                   assignee;                                                   // 0x00E8   (0x0020)  
	FSBWebJobSchemaJiraIssueStatus                     Status;                                                     // 0x0108   (0x0020)  
};

/// Struct /Script/SB.SBWebJobSchemaJiraIssue
/// Size: 0x0150 (336 bytes) (0x000028 - 0x000150) align n/a MaxSize: 0x0150
struct FSBWebJobSchemaJiraIssue : FSBWebJobSchemaJiraCommon
{ 
	FSBWebJobSchemaJiraIssueFields                     Fields;                                                     // 0x0028   (0x0128)  
};

/// Struct /Script/SB.SBWidgetComponentInstanceData
/// Size: 0x00C8 (200 bytes) (0x0000B8 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FSBWidgetComponentInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x00B8   (0x0010)  MISSED
};

/// Struct /Script/SB.SBWorldLevelManagerTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSBWorldLevelManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/SB.SBZoneEnvSpawnInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSBZoneEnvSpawnInfo
{ 
	bool                                               bDynamicSpawn;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	uint32_t                                           SpawnDataId;                                                // 0x0004   (0x0004)  
};

/// Struct /Script/SB.SBEnvProgressData
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBEnvProgressData
{ 
	int32_t                                            ProgressIndex;                                              // 0x0000   (0x0004)  
	float                                              CurrentValue;                                               // 0x0004   (0x0004)  
	float                                              RangeStart;                                                 // 0x0008   (0x0004)  
	float                                              RangeEnd;                                                   // 0x000C   (0x0004)  
	float                                              MaxLength;                                                  // 0x0010   (0x0004)  
};

/// Struct /Script/SB.SBToolDataDescriptionInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSBToolDataDescriptionInfo
{ 
	TWeakObjectPtr<class ULevelSequence*>              LevelSequence;                                              // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0008   (0x0020)  MISSED
	FString                                            TriggerDescription;                                         // 0x0028   (0x0010)  
};

#pragma pack(pop)


static_assert(sizeof(USBWidgetNavigationCustom) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USBWidgetNavigationCustomLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FSBCineCameraActorBoundsBoneData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBCineCameraActorBoundsBoneTemplateData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(ASBAIController) == 0x03E0); // 992 bytes (0x0003D0 - 0x0003E0)
static_assert(sizeof(ASBAIControlVolume) == 0x0320); // 800 bytes (0x000318 - 0x000320)
static_assert(sizeof(FSBAIFormationInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBAIFormationData) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(USBAIFormationDataPreviewComponent) == 0x0260); // 608 bytes (0x000260 - 0x000260)
static_assert(sizeof(ASBAIFormationDataPreviewActor) == 0x02E8); // 744 bytes (0x0002C8 - 0x0002E8)
static_assert(sizeof(USBAimTargetComponent) == 0x0570); // 1392 bytes (0x000568 - 0x000570)
static_assert(sizeof(FSBAppearanceShow) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBBehaviorIterateShowInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBBehaviorPositionInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBAIWorldNode) == 0x02B0); // 688 bytes (0x000000 - 0x0002B0)
static_assert(sizeof(ASBAIWorldManager) == 0x03B0); // 944 bytes (0x0002C8 - 0x0003B0)
static_assert(sizeof(USBAIWorldNodeComponent) == 0x0260); // 608 bytes (0x000260 - 0x000260)
static_assert(sizeof(FSBAIWorldNodeBehaviorIterateShowInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(ASBAIWorldNodeActor) == 0x0470); // 1136 bytes (0x0002C8 - 0x000470)
static_assert(sizeof(USBAliasController) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(ASBAmbientSoundVolume) == 0x0370); // 880 bytes (0x000318 - 0x000370)
static_assert(sizeof(USBAnimInstance) == 0x0520); // 1312 bytes (0x0002C8 - 0x000520)
static_assert(sizeof(USBAnimNotify_CharSESound) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(USBAnimNotify_DisableIdleAdditiveAnim) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USBAnimNotify_EventMoveIK) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(USBAnimNotify_FeetIKControl) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(FSBSoundIntParamInfo) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(USBAnimNotify_FootStep) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(USBAnimNotify_KawaiiPhysicsReset) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(USBAnimNotify_PhysicsReset) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(USBAnimNotify_PlayCustomAnimAdditive) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(USBAnimNotify_PlayMaterialParam) == 0x01F0); // 496 bytes (0x000038 - 0x0001F0)
static_assert(sizeof(USBAnimNotify_SetAnimBPFloatProperty) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(FSBAnimNotifyHapticProperty) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBAnimNotifyForceFeedbackProperty) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(USBAnimNotify_Vibration) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(USBAnimNotifyState_PlayAnimByMeshSlot) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(USBAnimNotifyState_PlaySound) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(FSBAnimNotifyStateHapticProperty) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBAnimNotifyStateForceFeedbackProperty) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBAnimNotifyState_Vibration) == 0x00B8); // 184 bytes (0x000030 - 0x0000B8)
static_assert(sizeof(ASBWorldActor) == 0x0308); // 776 bytes (0x0002C8 - 0x000308)
static_assert(sizeof(FSBTableAliasName) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(ASBAreaControlVolume) == 0x03A0); // 928 bytes (0x000308 - 0x0003A0)
static_assert(sizeof(USBBehaviorTreeComponent) == 0x02A8); // 680 bytes (0x0002A8 - 0x0002A8)
static_assert(sizeof(USBBGMSoundComponent) == 0x0580); // 1408 bytes (0x000568 - 0x000580)
static_assert(sizeof(FSBBGMSoundInfo) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSBBGMEndSoundInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBBGMSoundTrackInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBBGMSoundTrack) == 0x01D0); // 464 bytes (0x000030 - 0x0001D0)
static_assert(sizeof(FSBBGMSoundInfoV2) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FSBAlias) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBAliasCharacter) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBBGMEventBattleSoundInfo) == 0x00C8); // 200 bytes (0x000000 - 0x0000C8)
static_assert(sizeof(FSBBGMFinishSoundInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBBGMSoundTrackV2) == 0x0180); // 384 bytes (0x000030 - 0x000180)
static_assert(sizeof(ASBBGMSoundVolume) == 0x0338); // 824 bytes (0x000318 - 0x000338)
static_assert(sizeof(ASBWorldVolume) == 0x0358); // 856 bytes (0x000318 - 0x000358)
static_assert(sizeof(ASBBlockingVolume) == 0x0388); // 904 bytes (0x000358 - 0x000388)
static_assert(sizeof(FSBMapSectorID) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(ASBBlockSaveVolume) == 0x0340); // 832 bytes (0x000318 - 0x000340)
static_assert(sizeof(USBMultithreaded) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USBBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USBAutomationBlueprintFunctionLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ASBBobber) == 0x0420); // 1056 bytes (0x000328 - 0x000420)
static_assert(sizeof(USBBTDecorator_SbAggroLevel) == 0x0080); // 128 bytes (0x000068 - 0x000080)
static_assert(sizeof(USBBTDecorator_SbAimMe) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(USBBTDecorator_SbBlackboard) == 0x00A8); // 168 bytes (0x000068 - 0x0000A8)
static_assert(sizeof(USBBTDecorator_SbCheckActorEffect) == 0x00A0); // 160 bytes (0x000068 - 0x0000A0)
static_assert(sizeof(USBBTDecorator_SbCheckActorStat) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(USBBTDecorator_SbCheckActorState) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbCheckActorTag) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(USBBTDecorator_SbCheckAnimState) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbCheckLastAttackedTime) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(USBBTDecorator_SbCheckStance) == 0x0090); // 144 bytes (0x000068 - 0x000090)
static_assert(sizeof(USBBTDecorator_SbCheckSummonedCount) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbCheckTarget) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbCheckTargetAngleFromCamera) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbCheckZoneEnvState) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(USBBTDecorator_SbDetectResult) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbDistanceToHome) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbDistanceToTarget) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbIsActiveSkill) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbIsAlive) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbIsBattleMode) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbIsEmptyEquipment) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbIsFindPathWay) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(USBBTDecorator_SbIsFlying) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbIsGroupAttacker) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(USBBTDecorator_SbIsGroupTarget) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(USBBTDecorator_SbIsRunPathWay) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(USBBTDecorator_SbIsRunSpiderNav) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbIsTPS) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbLastSkillHitResult) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbLockOnMe) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(USBBTDecorator_SbRandom) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(USBBTDecorator_SbSpiderIsArrived) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTDecorator_SbTimeLimit) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(USBBTDecorator_SbUseableTime) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(USBBTTask_SbBlackboard) == 0x0098); // 152 bytes (0x000070 - 0x000098)
static_assert(sizeof(USBBTTask_SbCautionToTarget) == 0x00E8); // 232 bytes (0x000070 - 0x0000E8)
static_assert(sizeof(USBBTTask_SbDetectTarget) == 0x00A8); // 168 bytes (0x000070 - 0x0000A8)
static_assert(sizeof(USBBTTask_SbFollowTarget) == 0x00B8); // 184 bytes (0x000070 - 0x0000B8)
static_assert(sizeof(USBBTTask_SbLookAtTarget) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(USBBTTask_SbMetaAI) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(USBBTTask_SbMountingEquipment) == 0x0090); // 144 bytes (0x000070 - 0x000090)
static_assert(sizeof(USBBTTask_SbMoveToFlyingPoint) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBBTTask_SbMoveToHome) == 0x00C0); // 192 bytes (0x000070 - 0x0000C0)
static_assert(sizeof(USBBTTask_SbMoveToTarget) == 0x00A8); // 168 bytes (0x000070 - 0x0000A8)
static_assert(sizeof(USBBTTask_SbPlayShow) == 0x00C8); // 200 bytes (0x000070 - 0x0000C8)
static_assert(sizeof(USBBTTask_SBResetTimeLimit) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(USBBTTask_SbSpiderMoveStop) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(USBBTTask_SbSpiderMoveToCeiling) == 0x00A8); // 168 bytes (0x000070 - 0x0000A8)
static_assert(sizeof(USBBTTask_SbSpiderMoveToRandomLocation) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(USBBTTask_SbSpiderMoveToTarget) == 0x00A8); // 168 bytes (0x000070 - 0x0000A8)
static_assert(sizeof(USBBTTask_SbSpiderRunFall) == 0x0070); // 112 bytes (0x000070 - 0x000070)
static_assert(sizeof(USBBTTask_SbUseableTimeReset) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(USBBTTask_SbUseEffect) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBBTTask_SbUseSkill) == 0x00B0); // 176 bytes (0x000070 - 0x0000B0)
static_assert(sizeof(USBBTTask_SbWait) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(USBBTTask_SbWaitTimeRandom) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(USBCameraBasedUpdateComponent) == 0x0280); // 640 bytes (0x000260 - 0x000280)
static_assert(sizeof(FCameraStampInfo) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FSBAttachParticleInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBCameraMoveData) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FSBPostProcessWeightedBlendables) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBCameraComponent) == 0x0F70); // 3952 bytes (0x0008C0 - 0x000F70)
static_assert(sizeof(ASBCameraActor) == 0x08A0); // 2208 bytes (0x0008A0 - 0x0008A0)
static_assert(sizeof(FSBCameraDollyFovData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBCameraDollyPitchData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBCameraDollyYawData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBCameraDollyPositionData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBCameraDollyTrackData) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(ASBCameraVolume) == 0x0458); // 1112 bytes (0x000318 - 0x000458)
static_assert(sizeof(USBCameraVolumeMoveConstraintComponent) == 0x0260); // 608 bytes (0x000260 - 0x000260)
static_assert(sizeof(FSBAnimSyncBoneInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBAnimSyncSetAnimSeqInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBAnimSyncSetAnimSeqCache) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBAnimSyncSet) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FSBCharacterCuttingMeshInfo) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FSBCharacterSplineExtraData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSelfiePoseInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBOverrideFootStepPhySurfaceInfo) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FSBCharacterInteractionMoveInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FMaterialParamID) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBCharacterMaterialParamInfo) == 0x01D8); // 472 bytes (0x000000 - 0x0001D8)
static_assert(sizeof(FSBCharacterMaterialParamInfoList) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMaterialChangeID) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBCharacterMaterialChangeInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBCharacterMaterialChangeInfoList) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBCameraEventBaseScreenPosition) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBCameraEventBaseScreenPosData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSBCharMovingStanceData) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FAddControllerValue) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBCharacterEventMoveInterface) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBManualBlendCamInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FControlledForceObjectInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBCharacterMovementCheckInfo) == 0x0658); // 1624 bytes (0x000000 - 0x000658)
static_assert(sizeof(FSBMeshClipingInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBMeshInfo) == 0x02F0); // 752 bytes (0x000000 - 0x0002F0)
static_assert(sizeof(FSBCharacterEventMoveInfo) == 0x01B0); // 432 bytes (0x000000 - 0x0001B0)
static_assert(sizeof(FSBEventMoveResultExtraInfo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBRagdollInfo) == 0x0100); // 256 bytes (0x000000 - 0x000100)
static_assert(sizeof(FSBActorMoveData) == 0x0270); // 624 bytes (0x000000 - 0x000270)
static_assert(sizeof(FSBLastSetBlendSpace) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FSBOverrideAnimTransit) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBCharacterBindingInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBTransitAnimBlendTime) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBFixedTargetRotationAnimInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBFixedTargetRotationAxisInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBFixedTargetRotationMoveInfo) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSBShapeCollisionInfo) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(FSBCharacterDeactiveMovingInfo) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(FHitStopIK) == 0x0100); // 256 bytes (0x000000 - 0x000100)
static_assert(sizeof(FSBBroadcastSpawnInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(ASBCharacter) == 0x3880); // 14464 bytes (0x000558 - 0x003880)
static_assert(sizeof(ASBCharacterActiveVolume) == 0x0320); // 800 bytes (0x000318 - 0x000320)
static_assert(sizeof(FSBCharacterCollisionShapeInfo) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FSBCharacterAttackedCollisionGroup) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBCharacterCollisionTraceInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBCharacterAttackCollisionGroup) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBCharacterPhysicalMaterialInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBCollisionSocketTransform) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBCollisionAnimationTransform) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(USBCharacterCollisionData) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(FSBCharacterDialogBoundsSetInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBCharacterDialogBoundsSet) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(FSBCharacterPoseSnapshotEditorData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBCharacterEditorComponent) == 0x0150); // 336 bytes (0x0000C0 - 0x000150)
static_assert(sizeof(FSBApplyIKInfo) == 0x0178); // 376 bytes (0x000000 - 0x000178)
static_assert(sizeof(ASBCharacterEventMovVolume) == 0x04F0); // 1264 bytes (0x000318 - 0x0004F0)
static_assert(sizeof(FSBCharacterDSocketInfo) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(USBCharacterFactorSet) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(USBCharacterFactorSetComponent) == 0x00D8); // 216 bytes (0x0000C0 - 0x0000D8)
static_assert(sizeof(FSBFootStepSetInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(USBCharacterFootStepSet) == 0x00A0); // 160 bytes (0x000030 - 0x0000A0)
static_assert(sizeof(FSBActorRootMotionData) == 0x00E0); // 224 bytes (0x000000 - 0x0000E0)
static_assert(sizeof(USBCharacterMovementComponent) == 0x10E0); // 4320 bytes (0x000B50 - 0x0010E0)
static_assert(sizeof(ASBCharacterOccluderActor) == 0x0320); // 800 bytes (0x0002C8 - 0x000320)
static_assert(sizeof(ASBCharacterOverlapManager) == 0x03E0); // 992 bytes (0x0002C8 - 0x0003E0)
static_assert(sizeof(ASBCharacterOverrideSlopeVolume) == 0x0368); // 872 bytes (0x000318 - 0x000368)
static_assert(sizeof(FSBNiagaraSystemWithOverrideParam) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FSBParticleSetInfo) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FSBParticleSetInfoArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBCharacterParticleSet) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(FSBCharacterPoseSnapshotClothSimulData) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FSBCharacterPoseSnapshotCloth) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBCharacterPoseSnapshotData) == 0x00C8); // 200 bytes (0x000000 - 0x0000C8)
static_assert(sizeof(USBCharacterPoseSnapshotDataAsset) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(FSBCharacterSelfiePoseData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBCharacterSelfiePoseDataAsset) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(ASBCharacterSlopeMovVolume) == 0x03F0); // 1008 bytes (0x000318 - 0x0003F0)
static_assert(sizeof(FSBSoundInfo) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FSBSoundInfo_HitType) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FSBSoundInfo_HitArray) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FSBSoundInfo_ConditionBoolType) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBSoundInfo_Condition) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBCharacterSoundSet) == 0x01C0); // 448 bytes (0x000030 - 0x0001C0)
static_assert(sizeof(ASBCharacterSwimForceVolume) == 0x0350); // 848 bytes (0x000318 - 0x000350)
static_assert(sizeof(ASBCharMovingStanceVolume) == 0x03D8); // 984 bytes (0x000318 - 0x0003D8)
static_assert(sizeof(FSBAutoGameSavePhase) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBSaveLoadContext) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(ASBPlayerController) == 0x0850); // 2128 bytes (0x000668 - 0x000850)
static_assert(sizeof(USBCheatManager) == 0x00F0); // 240 bytes (0x000078 - 0x0000F0)
static_assert(sizeof(USBCheckFileNameLengthCommandlet) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(USBCineCameraActorBoundsComponent) == 0x01E0); // 480 bytes (0x0000C0 - 0x0001E0)
static_assert(sizeof(USBCineCameraComponent) == 0x09E0); // 2528 bytes (0x0009C8 - 0x0009E0)
static_assert(sizeof(ASBCineCameraPostProcessActor) == 0x0890); // 2192 bytes (0x0002C8 - 0x000890)
static_assert(sizeof(USBCineCameraSplineMetadata) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(USBCineCameraSplineComponent) == 0x0680); // 1664 bytes (0x000630 - 0x000680)
static_assert(sizeof(ASBCineDialogueCameraActor) == 0x0910); // 2320 bytes (0x000900 - 0x000910)
static_assert(sizeof(USBCollisionGroupComponent) == 0x02C0); // 704 bytes (0x0000C0 - 0x0002C0)
static_assert(sizeof(FSBUserWidgetInputBindInfo) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(USBUserWidget) == 0x0680); // 1664 bytes (0x000280 - 0x000680)
static_assert(sizeof(USBComboBoxItemWidget) == 0x06C0); // 1728 bytes (0x000680 - 0x0006C0)
static_assert(sizeof(FSBComboBoxItemSet) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBComboBoxWidget) == 0x0F78); // 3960 bytes (0x000EC8 - 0x000F78)
static_assert(sizeof(USBCommonCreditDataObject) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(USBCommonCreditSlotWidget) == 0x0690); // 1680 bytes (0x000680 - 0x000690)
static_assert(sizeof(USBCommonCreditWidget) == 0x06F0); // 1776 bytes (0x000680 - 0x0006F0)
static_assert(sizeof(FSBCommonManualTabBtnData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USBCommonManualTabWidget) == 0x0938); // 2360 bytes (0x000680 - 0x000938)
static_assert(sizeof(USBCommonTabButtonWidget) == 0x0758); // 1880 bytes (0x000680 - 0x000758)
static_assert(sizeof(USBCommonSideTabButtonWidget) == 0x0780); // 1920 bytes (0x000758 - 0x000780)
static_assert(sizeof(FSBWidgetNavigationEventData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBCommonSideTabBtnData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USBCommonSideTabWidget) == 0x0788); // 1928 bytes (0x000680 - 0x000788)
static_assert(sizeof(FSBCommonTabBtnData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USBCommonTabWidget) == 0x0938); // 2360 bytes (0x000680 - 0x000938)
static_assert(sizeof(USBCursorUserWidget) == 0x0280); // 640 bytes (0x000280 - 0x000280)
static_assert(sizeof(USBDataAsset) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(USBDataNodeBase) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(USBDeactiveMovingComponent) == 0x0290); // 656 bytes (0x000260 - 0x000290)
static_assert(sizeof(USBDebugSystemInfoWidget) == 0x0700); // 1792 bytes (0x000680 - 0x000700)
static_assert(sizeof(ASBDestructibleActor) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(FSBChunkParticleInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBDestructibleComponent) == 0x0B00); // 2816 bytes (0x000958 - 0x000B00)
static_assert(sizeof(USBDevCommonMessageBoxWidget) == 0x06B0); // 1712 bytes (0x000680 - 0x0006B0)
static_assert(sizeof(USBDevCommonToastWidget) == 0x0698); // 1688 bytes (0x000680 - 0x000698)
static_assert(sizeof(USBDeveloperSettings) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USBDevJiraAuthorizeWidget) == 0x0688); // 1672 bytes (0x000680 - 0x000688)
static_assert(sizeof(USBDevUIStudioPreviewDataObject) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(USBDevUIStudioPreviewSlotWidget) == 0x06B8); // 1720 bytes (0x000680 - 0x0006B8)
static_assert(sizeof(USBDevUIStudioPreviewWidget) == 0x0708); // 1800 bytes (0x000680 - 0x000708)
static_assert(sizeof(USBDPICustomScalingRule) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FSBDroneLocationInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBDroneLocationInfoContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBDroneLocationData) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(USBDualSenseTriggerEffectData) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(ASBDynamicRegionActor) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(USBEdGraphNode) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(ASBEffectVolume) == 0x03B0); // 944 bytes (0x000358 - 0x0003B0)
static_assert(sizeof(USBEngineActorPoolingInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FSBEnvParticle) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(ASBEnvControlVolume) == 0x0F60); // 3936 bytes (0x000318 - 0x000F60)
static_assert(sizeof(FSBEnvSettingScalarParam) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBEnvSettingVectorParam) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBEnvSettingTextureParam) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBEnvSettingData) == 0x0BC0); // 3008 bytes (0x000030 - 0x000BC0)
static_assert(sizeof(ASBEquipmentActor) == 0x02F8); // 760 bytes (0x0002C8 - 0x0002F8)
static_assert(sizeof(USBEventMoveData) == 0x01E0); // 480 bytes (0x000030 - 0x0001E0)
static_assert(sizeof(FSBEventMoveData_CableInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBEventMoveData_RopeSwingProperty) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSBEventMoveData_RopeTMInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBEventMoveData_RopeMoveInfo) == 0x0778); // 1912 bytes (0x000000 - 0x000778)
static_assert(sizeof(USBEventMoveDataComponent) == 0x0B20); // 2848 bytes (0x000260 - 0x000B20)
static_assert(sizeof(ASBExclusiveWaterVolume) == 0x0338); // 824 bytes (0x000318 - 0x000338)
static_assert(sizeof(USBExportDataTablesToCSVCommandlet) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(ASBFeedbackActor) == 0x0340); // 832 bytes (0x0002C8 - 0x000340)
static_assert(sizeof(USBFeedbackCommonMessageBoxWidget) == 0x06B0); // 1712 bytes (0x000680 - 0x0006B0)
static_assert(sizeof(USBFeedbackIssueAssignWidget) == 0x06B8); // 1720 bytes (0x000680 - 0x0006B8)
static_assert(sizeof(USBFeedbackIssueCommentWidget) == 0x06A0); // 1696 bytes (0x000680 - 0x0006A0)
static_assert(sizeof(USBFeedbackIssueInputWidget) == 0x06A0); // 1696 bytes (0x000680 - 0x0006A0)
static_assert(sizeof(USBFeedbackIssueMoveToItemWidget) == 0x06D0); // 1744 bytes (0x000680 - 0x0006D0)
static_assert(sizeof(USBFeedbackIssueMoveToWidget) == 0x06E8); // 1768 bytes (0x000680 - 0x0006E8)
static_assert(sizeof(USBFeedbackIssueViewerWidget) == 0x0740); // 1856 bytes (0x000680 - 0x000740)
static_assert(sizeof(ASBFishingVolume) == 0x0348); // 840 bytes (0x000318 - 0x000348)
static_assert(sizeof(ASBFlyingPoint) == 0x02F8); // 760 bytes (0x0002F0 - 0x0002F8)
static_assert(sizeof(USBFootStepPhySurfaceComponent) == 0x05D0); // 1488 bytes (0x000568 - 0x0005D0)
static_assert(sizeof(ASBFootStepPhySurfaceVolume) == 0x0390); // 912 bytes (0x000318 - 0x000390)
static_assert(sizeof(USBForceFeedbackConcurrency) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(USBForceFeedbackEffect) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(FSaveSlotInfo) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(USBGameInstance) == 0x02D8); // 728 bytes (0x0001A8 - 0x0002D8)
static_assert(sizeof(FSBGamdeModeSecondaryTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSBGamdeModePostUpdateWorkTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(ASBGameMode) == 0x0510); // 1296 bytes (0x0003B0 - 0x000510)
static_assert(sizeof(FSBSaveVersion) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSavePackageVersion) == 0x0010); // 16 bytes (0x000010 - 0x000010)
static_assert(sizeof(FSBSaveMajorVersion) == 0x0010); // 16 bytes (0x000010 - 0x000010)
static_assert(sizeof(FSBSaveMinorVersion) == 0x0010); // 16 bytes (0x000010 - 0x000010)
static_assert(sizeof(FSBSaveAppContentVersion) == 0x0010); // 16 bytes (0x000010 - 0x000010)
static_assert(sizeof(FSBSaveVersionInfo) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSBSaveGameData_OnlineAccountInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBSaveBase) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(FSBSaveOptionData_BossChallengeDiary) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBSaveOptionData_BossChallengeStage) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBItemInstance) == 0x0150); // 336 bytes (0x000000 - 0x000150)
static_assert(sizeof(FSBSaveOptionData_ActorEquipment) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FSBSaveOptionData_ActorEquipmentDiary) == 0x0188); // 392 bytes (0x000000 - 0x000188)
static_assert(sizeof(FSBSaveGameData_Theater) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FSBSaveOptionData_BossChallenge) == 0x01F8); // 504 bytes (0x000000 - 0x0001F8)
static_assert(sizeof(FSBSaveOptionData_PhotoModePresetLight) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBSaveOptionData_PhotoModePresetLogo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBSaveOptionData_PhotoModeEyeTrackingData) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FSBSaveOptionData_PhotoModePresetSlot) == 0x0130); // 304 bytes (0x000000 - 0x000130)
static_assert(sizeof(FSBSaveOptionData_PhotoModePresetMode) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveOptionData_PhotoModePreset) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(USBGameOptionSaveData) == 0x0468); // 1128 bytes (0x000088 - 0x000468)
static_assert(sizeof(ASBGameState) == 0x0338); // 824 bytes (0x000338 - 0x000338)
static_assert(sizeof(USBGameUserSettings) == 0x0728); // 1832 bytes (0x000128 - 0x000728)
static_assert(sizeof(USBGeneratePlayGoLabelCommandlet) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(USBGenerateResourceCacheFileCommandlet) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(USBHoldButton) == 0x06D0); // 1744 bytes (0x000680 - 0x0006D0)
static_assert(sizeof(FSBAspectRatioCropBarInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBDebug2DLineInfo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(ASBHUD) == 0x03F0); // 1008 bytes (0x0003B8 - 0x0003F0)
static_assert(sizeof(FSBIndicatorButtonData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FSBIndicatorButtonDataWrapper) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBIndicator) == 0x0750); // 1872 bytes (0x000680 - 0x000750)
static_assert(sizeof(USBIndicatorButtonBase) == 0x0688); // 1672 bytes (0x000680 - 0x000688)
static_assert(sizeof(USBInteractionBreakPoint) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(USBInteractionGraph) == 0x00A0); // 160 bytes (0x000030 - 0x0000A0)
static_assert(sizeof(FSBExecCustomStruct) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FSBInteractionExecPinInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBInteractionNode_Base) == 0x0070); // 112 bytes (0x000048 - 0x000070)
static_assert(sizeof(FSBInteractionNodeProperty) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(USBInteractionNode) == 0x0200); // 512 bytes (0x000070 - 0x000200)
static_assert(sizeof(USBInteractionNode_ActionEnvActivate) == 0x00A0); // 160 bytes (0x000070 - 0x0000A0)
static_assert(sizeof(USBInteractionNode_ActionEnvState) == 0x00B0); // 176 bytes (0x000070 - 0x0000B0)
static_assert(sizeof(USBInteractionNode_ActionPlayLevelSeq) == 0x00D0); // 208 bytes (0x000070 - 0x0000D0)
static_assert(sizeof(USBInteractionNode_ActionRewardGroup) == 0x00B0); // 176 bytes (0x000070 - 0x0000B0)
static_assert(sizeof(FSBAliasTheaterSelectData) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasSpawnPoint) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_ActionTheater) == 0x0130); // 304 bytes (0x000070 - 0x000130)
static_assert(sizeof(USBInteractionNode_ActionZoneEvent) == 0x00A0); // 160 bytes (0x000070 - 0x0000A0)
static_assert(sizeof(USBInteractionNode_Cancel) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(USBInteractionNode_ChangeStateLinkEnv) == 0x00C8); // 200 bytes (0x000070 - 0x0000C8)
static_assert(sizeof(USBInteractionNode_Condition) == 0x0108); // 264 bytes (0x000070 - 0x000108)
static_assert(sizeof(USBInteractionNode_Condition2) == 0x00D8); // 216 bytes (0x000070 - 0x0000D8)
static_assert(sizeof(FSBAliasAchievement) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_ConditionAchievement) == 0x00F8); // 248 bytes (0x000070 - 0x0000F8)
static_assert(sizeof(FSBAliasEffect) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_ConditionActorEffect) == 0x0100); // 256 bytes (0x000070 - 0x000100)
static_assert(sizeof(FSBAliasZoneEnvSpawn) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasZone) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_ConditionEnvState) == 0x0110); // 272 bytes (0x000070 - 0x000110)
static_assert(sizeof(FSBAliasCondition) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasConditionGroup) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_ConditionGroup) == 0x00E0); // 224 bytes (0x000070 - 0x0000E0)
static_assert(sizeof(FSBAliasItem) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_ConditionItem) == 0x0100); // 256 bytes (0x000070 - 0x000100)
static_assert(sizeof(USBInteractionNode_ConditionItemCharge) == 0x00F8); // 248 bytes (0x000070 - 0x0000F8)
static_assert(sizeof(USBInteractionNode_ConditionLevel) == 0x00E0); // 224 bytes (0x000070 - 0x0000E0)
static_assert(sizeof(FSBAliasQuest) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_ConditionQuest) == 0x00F8); // 248 bytes (0x000070 - 0x0000F8)
static_assert(sizeof(FSBAliasQuestGroupTask) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_ConditionQuestTaskGroupProgress) == 0x0110); // 272 bytes (0x000070 - 0x000110)
static_assert(sizeof(USBInteractionNode_ConditionQuestTaskProgress) == 0x0128); // 296 bytes (0x000070 - 0x000128)
static_assert(sizeof(USBInteractionNode_DebugPrintString) == 0x00B0); // 176 bytes (0x000070 - 0x0000B0)
static_assert(sizeof(FSBAliasNikkeStage) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_EnterNikkeStage) == 0x00D0); // 208 bytes (0x000070 - 0x0000D0)
static_assert(sizeof(USBInteractionNode_ExistClearRecordNikkeStage) == 0x00D0); // 208 bytes (0x000070 - 0x0000D0)
static_assert(sizeof(USBInteractionNode_FailNotify) == 0x00E8); // 232 bytes (0x000070 - 0x0000E8)
static_assert(sizeof(USBInteractionNode_GetCustomValue) == 0x00A8); // 168 bytes (0x000070 - 0x0000A8)
static_assert(sizeof(USBInteractionNode_Goto) == 0x0098); // 152 bytes (0x000070 - 0x000098)
static_assert(sizeof(USBInteractionNode_GotoLabel) == 0x0098); // 152 bytes (0x000070 - 0x000098)
static_assert(sizeof(USBInteractionNode_Grab) == 0x00B8); // 184 bytes (0x000070 - 0x0000B8)
static_assert(sizeof(USBInteractionNode_IntCompare) == 0x0138); // 312 bytes (0x000070 - 0x000138)
static_assert(sizeof(USBInteractionNode_InteractCamp) == 0x0100); // 256 bytes (0x000070 - 0x000100)
static_assert(sizeof(USBInteractionNode_InteractionUIData) == 0x00B0); // 176 bytes (0x000070 - 0x0000B0)
static_assert(sizeof(USBInteractionNode_MessageBoxYN) == 0x00E8); // 232 bytes (0x000070 - 0x0000E8)
static_assert(sizeof(USBInteractionNode_PropertyAcquireItem) == 0x00E0); // 224 bytes (0x000070 - 0x0000E0)
static_assert(sizeof(USBInteractionNode_PropertyAcquireQuest) == 0x00C8); // 200 bytes (0x000070 - 0x0000C8)
static_assert(sizeof(USBInteractionNode_PropertyConsumeItem) == 0x00E0); // 224 bytes (0x000070 - 0x0000E0)
static_assert(sizeof(USBInteractionNode_PropertyDespawnItem) == 0x00E0); // 224 bytes (0x000070 - 0x0000E0)
static_assert(sizeof(USBInteractionNode_PropertyRemoveItem) == 0x00E0); // 224 bytes (0x000070 - 0x0000E0)
static_assert(sizeof(USBInteractionNode_PropertySupplyChargeItem) == 0x00E0); // 224 bytes (0x000070 - 0x0000E0)
static_assert(sizeof(USBInteractionNode_Puzzle) == 0x01B8); // 440 bytes (0x000070 - 0x0001B8)
static_assert(sizeof(FSBAliasQuestTask) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_QuestEvent) == 0x00D0); // 208 bytes (0x000070 - 0x0000D0)
static_assert(sizeof(USBInteractionNode_RandomInt) == 0x0098); // 152 bytes (0x000070 - 0x000098)
static_assert(sizeof(USBInteractionNode_RequestBoardUI) == 0x00B8); // 184 bytes (0x000070 - 0x0000B8)
static_assert(sizeof(USBInteractionNode_ResultSwitch) == 0x0100); // 256 bytes (0x000070 - 0x000100)
static_assert(sizeof(USBInteractionNode_Root) == 0x00C0); // 192 bytes (0x000070 - 0x0000C0)
static_assert(sizeof(USBInteractionNode_SaveGame) == 0x00B8); // 184 bytes (0x000070 - 0x0000B8)
static_assert(sizeof(USBInteractionNode_SelectDataSwitch) == 0x00F0); // 240 bytes (0x000070 - 0x0000F0)
static_assert(sizeof(USBInteractionNode_SetCustomValue) == 0x00F8); // 248 bytes (0x000070 - 0x0000F8)
static_assert(sizeof(FSBAliasUIActionRequest) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBInteractionNode_ShopUI) == 0x00F8); // 248 bytes (0x000070 - 0x0000F8)
static_assert(sizeof(USBInteractionNode_Switch) == 0x00D0); // 208 bytes (0x000070 - 0x0000D0)
static_assert(sizeof(USBInteractionNode_SwitchOnInt) == 0x00E0); // 224 bytes (0x000070 - 0x0000E0)
static_assert(sizeof(USBInteractionNode_TemplateEnd) == 0x0098); // 152 bytes (0x000070 - 0x000098)
static_assert(sizeof(USBInteractionNode_TemplateInst) == 0x00B8); // 184 bytes (0x000070 - 0x0000B8)
static_assert(sizeof(USBInteractionNode_TemplateStart) == 0x0098); // 152 bytes (0x000070 - 0x000098)
static_assert(sizeof(USBInteractionNode_TheaterChoiceCondition) == 0x0128); // 296 bytes (0x000070 - 0x000128)
static_assert(sizeof(USBInteractionNode_TheaterChoiceData) == 0x0150); // 336 bytes (0x000070 - 0x000150)
static_assert(sizeof(USBInteractionNode_TheaterInteractionSelectData) == 0x00B8); // 184 bytes (0x000070 - 0x0000B8)
static_assert(sizeof(USBInteractionNode_Tick) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(USBInteractionNode_UI) == 0x0120); // 288 bytes (0x000070 - 0x000120)
static_assert(sizeof(USBInteractionNode_UISystemNotice) == 0x00C8); // 200 bytes (0x000070 - 0x0000C8)
static_assert(sizeof(USBInteractionNode_WorkShopUI) == 0x0130); // 304 bytes (0x000070 - 0x000130)
static_assert(sizeof(ASBItem) == 0x04B0); // 1200 bytes (0x0002C8 - 0x0004B0)
static_assert(sizeof(USBItemAssetData) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(USBLaserUserData) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FSBLaserSegment) == 0x0440); // 1088 bytes (0x000000 - 0x000440)
static_assert(sizeof(USBLaserComponent) == 0x0450); // 1104 bytes (0x000260 - 0x000450)
static_assert(sizeof(USBLevelEditorGraph) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(ASBLevelLoadVolume) == 0x0390); // 912 bytes (0x000318 - 0x000390)
static_assert(sizeof(ASBLevelSequenceActor) == 0x03D8); // 984 bytes (0x0003A8 - 0x0003D8)
static_assert(sizeof(FSBLevelSequenceAnimTrailSectionData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(USBLevelSequenceAnimTrailSection) == 0x0120); // 288 bytes (0x0000E8 - 0x000120)
static_assert(sizeof(USBLevelSequenceAnimTrailTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(FSBLevelSequenceBKMovieSectionData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBLevelSequenceBKMovieSection) == 0x0110); // 272 bytes (0x0000E8 - 0x000110)
static_assert(sizeof(FSBLevelSequenceBookmarkSectionData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBLevelSequenceBookmarkSection) == 0x00F8); // 248 bytes (0x0000E8 - 0x0000F8)
static_assert(sizeof(USBLevelSequenceBookmarkTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(FSBLevelSequenceCameraActorBoundsSectionData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USBLevelSequenceCameraActorBoundsSection) == 0x0118); // 280 bytes (0x0000E8 - 0x000118)
static_assert(sizeof(FSBLevelSequenceCameraActorBoundsTemplateSectionData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(USBLevelSequenceCameraActorBoundsTemplateSection) == 0x00F0); // 240 bytes (0x0000E8 - 0x0000F0)
static_assert(sizeof(USBLevelSequenceCameraActorBoundsTemplateTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(USBLevelSequenceCameraActorBoundsTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(FSBLevelSequenceCameraLookAtTargetSectionData) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(USBLevelSequenceCameraLookAtTargetSection) == 0x0120); // 288 bytes (0x0000E8 - 0x000120)
static_assert(sizeof(USBLevelSequenceCameraLookAtTargetTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(FSBLevelSequenceCharacterActionSectionData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBLevelSequenceCharacterActionSection) == 0x0110); // 272 bytes (0x0000E8 - 0x000110)
static_assert(sizeof(USBLevelSequenceCharacterActionTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(USBLevelSequenceCommonTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(FSBLevelSequenceEnvControlVolumeSectionData) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(USBLevelSequenceEnvControlVolumeSection) == 0x00F0); // 240 bytes (0x0000E8 - 0x0000F0)
static_assert(sizeof(USBLevelSequenceEnvControlVolumeTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(FSBAliasEventActorActive) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBLevelSequenceEventActorActiveSectionData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBLevelSequenceEventActorActiveSection) == 0x0100); // 256 bytes (0x0000E8 - 0x000100)
static_assert(sizeof(FSBLevelSequenceEventActorAISectionData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBLevelSequenceEventActorAISection) == 0x00F8); // 248 bytes (0x0000E8 - 0x0000F8)
static_assert(sizeof(FSBAliasEventActorBattleState) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBLevelSequenceEventActorBattleStateSectionData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBLevelSequenceEventActorBattleStateSection) == 0x0100); // 256 bytes (0x0000E8 - 0x000100)
static_assert(sizeof(FSBAliasEventActorEffect) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBLevelSequenceEventActorEffectSectionData) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(USBLevelSequenceEventActorEffectSection) == 0x0120); // 288 bytes (0x0000E8 - 0x000120)
static_assert(sizeof(FSBLevelSequenceEventAmbientSoundControlSectionData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBLevelSequenceEventAmbientSoundControlSection) == 0x00F8); // 248 bytes (0x0000E8 - 0x0000F8)
static_assert(sizeof(FSBLevelSequenceEventBGMPrioritySectionData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(USBLevelSequenceEventBGMPrioritySection) == 0x00F8); // 248 bytes (0x0000E8 - 0x0000F8)
static_assert(sizeof(FSBLevelSequenceEventBGMSectionData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USBLevelSequenceEventBGMSection) == 0x0118); // 280 bytes (0x0000E8 - 0x000118)
static_assert(sizeof(FSBLevelSequenceEventGlobalValueSectionData) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(USBLevelSequenceEventGlobalValueSection) == 0x00F0); // 240 bytes (0x0000E8 - 0x0000F0)
static_assert(sizeof(FSBLevelSequenceEventHUDActionSectionData) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(USBLevelSequenceEventHUDActionSection) == 0x00F0); // 240 bytes (0x0000E8 - 0x0000F0)
static_assert(sizeof(FSBLevelSequenceEventLockOnAtChatSectionData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(USBLevelSequenceEventLockOnAtChatSection) == 0x00F8); // 248 bytes (0x0000E8 - 0x0000F8)
static_assert(sizeof(FSBLevelSequenceEventPlayerActionSectionData) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(USBLevelSequenceEventPlayerActionSection) == 0x0128); // 296 bytes (0x0000E8 - 0x000128)
static_assert(sizeof(FSBLevelSequenceEventPlayerCameraShake2Oscillator) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBLevelSequenceEventPlayerCameraShake2SectionData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(USBLevelSequenceEventPlayerCameraShake2Section) == 0x0138); // 312 bytes (0x0000E8 - 0x000138)
static_assert(sizeof(FSBLevelSequenceEventPlayerCameraShakeSectionData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBLevelSequenceEventPlayerCameraShakeSection) == 0x0108); // 264 bytes (0x0000E8 - 0x000108)
static_assert(sizeof(USBLevelSequenceEventSection) == 0x00E8); // 232 bytes (0x0000E8 - 0x0000E8)
static_assert(sizeof(FSBLevelSequenceEventSoundEventSectionData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(USBLevelSequenceEventSoundEventSection) == 0x00F0); // 240 bytes (0x0000E8 - 0x0000F0)
static_assert(sizeof(FSBLevelSequenceEventSoundMixSectionData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBLevelSequenceEventSoundMixSection) == 0x00F8); // 248 bytes (0x0000E8 - 0x0000F8)
static_assert(sizeof(FSBLevelSequenceEventSoundVolumeSectionData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBLevelSequenceEventSoundVolumeSection) == 0x0100); // 256 bytes (0x0000E8 - 0x000100)
static_assert(sizeof(USBLevelSequenceEventTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(FSBAliasEventUIAction) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBLevelSequenceEventUIActionSectionData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(USBLevelSequenceEventUIActionSection) == 0x0120); // 288 bytes (0x0000E8 - 0x000120)
static_assert(sizeof(FSBLevelSequenceEventVibrationSectionData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(USBLevelSequenceEventVibrationSection) == 0x00F0); // 240 bytes (0x0000E8 - 0x0000F0)
static_assert(sizeof(FSBAliasZoneEvent) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBLevelSequenceEventZoneEventSectionData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(USBLevelSequenceEventZoneEventSection) == 0x0108); // 264 bytes (0x0000E8 - 0x000108)
static_assert(sizeof(FSBLevelSequenceEventZoneLoadWaitSectionData) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(USBLevelSequenceEventZoneLoadWaitSection) == 0x00F0); // 240 bytes (0x0000E8 - 0x0000F0)
static_assert(sizeof(USBLevelSequenceGraphicsAutoScaleSection) == 0x0110); // 272 bytes (0x0000E8 - 0x000110)
static_assert(sizeof(USBLevelSequenceGraphicsAutoScaleTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(USBLevelSequenceHLODSection) == 0x0178); // 376 bytes (0x0000E8 - 0x000178)
static_assert(sizeof(USBLevelSequenceHLODTrack) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(FSBTheaterLevelSequenceSkipFadeParam) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBLevelSequenceLevelStreamingWaitSectionData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBLevelSequenceLevelStreamingWaitSection) == 0x0110); // 272 bytes (0x0000E8 - 0x000110)
static_assert(sizeof(FSBLevelSequenceLookAtTargetSectionData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USBLevelSequenceLookAtTargetSection) == 0x0118); // 280 bytes (0x0000E8 - 0x000118)
static_assert(sizeof(USBLevelSequenceLookAtTargetTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(FSBLevelSequenceMoveToLocationSectionData) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(USBLevelSequenceMoveToLocationSection) == 0x0148); // 328 bytes (0x0000E8 - 0x000148)
static_assert(sizeof(USBLevelSequenceMoveToLocationTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(USBLevelSequenceObserver) == 0x01F8); // 504 bytes (0x000028 - 0x0001F8)
static_assert(sizeof(FSBLevelSequenceSetAnimBPPropertySectionData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(USBLevelSequenceSetAnimBPPropertySection) == 0x00F8); // 248 bytes (0x0000E8 - 0x0000F8)
static_assert(sizeof(USBLevelSequenceSetAnimBPPropertyTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(FSBTableIndex) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FSBTableIndexSocialAnim) == 0x0024); // 36 bytes (0x000024 - 0x000024)
static_assert(sizeof(FSBSocialAnimDescAlias) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBLevelSequenceSkeletalAnimationParams) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(USBLevelSequenceSkeletalAnimationSection) == 0x0188); // 392 bytes (0x0000E8 - 0x000188)
static_assert(sizeof(FSBMovieSceneSkeletalAnimRootMotionTrackParams) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USBLevelSequenceSkeletalAnimationTrack) == 0x00C8); // 200 bytes (0x000078 - 0x0000C8)
static_assert(sizeof(FSBLevelSequenceSkeletalAnimMoveStateParams) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBLevelSequenceSkeletalAnimMoveStateSection) == 0x0110); // 272 bytes (0x0000E8 - 0x000110)
static_assert(sizeof(FSBLevelSequenceSkipSectionData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBLevelSequenceSkipSection) == 0x0110); // 272 bytes (0x0000E8 - 0x000110)
static_assert(sizeof(USBLevelSequenceSkipTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(FSBLevelSequenceSplineCineCamTrackingSectionData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(USBLevelSequenceSplineCineCamTrackingSection) == 0x00F0); // 240 bytes (0x0000E8 - 0x0000F0)
static_assert(sizeof(USBLevelSequenceSplineCineCamTrackingTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(FSBLevelSequenceSectionProperty) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBLevelSequenceTheaterAreaSectionData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(USBLevelSequenceTheaterAreaSection) == 0x0120); // 288 bytes (0x0000E8 - 0x000120)
static_assert(sizeof(FSBLevelSequenceTheaterAttachWidgetSectionData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(USBLevelSequenceTheaterAttachWidgetSection) == 0x0130); // 304 bytes (0x0000E8 - 0x000130)
static_assert(sizeof(FSBLevelSequenceTheaterDialogueSectionData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBLevelSequenceTheaterDialogueSection) == 0x0130); // 304 bytes (0x0000E8 - 0x000130)
static_assert(sizeof(FSBLevelSequenceTheaterInputCounterActorInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBLevelSequenceTheaterInputCounterLocationData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBLevelSequenceTheaterInputCounterFlowData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBLevelSequenceEventInputCounterSectionData) == 0x0118); // 280 bytes (0x000000 - 0x000118)
static_assert(sizeof(USBLevelSequenceTheaterInputCounterSection) == 0x0200); // 512 bytes (0x0000E8 - 0x000200)
static_assert(sizeof(FSBLevelSequenceEventInputFeedbackActionData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBLevelSequenceEventInputFeedbackSectionData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBLevelSequenceTheaterInputFeedbackSection) == 0x00F8); // 248 bytes (0x0000E8 - 0x0000F8)
static_assert(sizeof(FSBLevelSequenceTheaterInteractionSelectSectionData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(USBLevelSequenceTheaterInteractionSelectSection) == 0x0100); // 256 bytes (0x0000E8 - 0x000100)
static_assert(sizeof(FSBLevelSequenceTheaterPlayerChoiceSectionData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBLevelSequenceTheaterPlayerChoiceSection) == 0x0120); // 288 bytes (0x0000E8 - 0x000120)
static_assert(sizeof(FSBLevelSequenceTheaterQTEActorInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBLevelSequenceTheaterQTELocationData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBLevelSequenceEventQTESectionData) == 0x00C0); // 192 bytes (0x000000 - 0x0000C0)
static_assert(sizeof(USBLevelSequenceTheaterQTESection) == 0x01A8); // 424 bytes (0x0000E8 - 0x0001A8)
static_assert(sizeof(FSBLevelSequenceTheaterReactionTriggerSectionData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBLevelSequenceTheaterReactionTriggerSection) == 0x0108); // 264 bytes (0x0000E8 - 0x000108)
static_assert(sizeof(FSBLevelSequenceTheaterSubtitleSectionData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(USBLevelSequenceTheaterSubtitleSection) == 0x0138); // 312 bytes (0x0000E8 - 0x000138)
static_assert(sizeof(USBLevelSequenceTheaterTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(USBLevelSequenceVisibilityTagSection) == 0x00F8); // 248 bytes (0x0000E8 - 0x0000F8)
static_assert(sizeof(USBLevelSequenceVisibilityTagTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(USBLevelStreamingContext) == 0x0198); // 408 bytes (0x000028 - 0x000198)
static_assert(sizeof(ASBLevelStreamProfilerActor) == 0x0418); // 1048 bytes (0x0002C8 - 0x000418)
static_assert(sizeof(ASBLevelVisibilityVolume) == 0x0390); // 912 bytes (0x000318 - 0x000390)
static_assert(sizeof(ASBLightFadeVolume) == 0x0358); // 856 bytes (0x000318 - 0x000358)
static_assert(sizeof(ASBLimitedScanVolume) == 0x0340); // 832 bytes (0x000318 - 0x000340)
static_assert(sizeof(USBListViewEmptyItem) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USBListViewWidget) == 0x08B0); // 2224 bytes (0x000890 - 0x0008B0)
static_assert(sizeof(USBLoadingScreenWidget) == 0x0750); // 1872 bytes (0x000680 - 0x000750)
static_assert(sizeof(ASBLobbyGameMode) == 0x0510); // 1296 bytes (0x000510 - 0x000510)
static_assert(sizeof(FSBMapObjectResInfoData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBMapObjectResourceMap) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(FSBSectorObjectInfoData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBSectorObjectLayerData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSectorData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBMapData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(ASBMeshStudioActor) == 0x06D0); // 1744 bytes (0x0002C8 - 0x0006D0)
static_assert(sizeof(FMoveInfo) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(USBMoveTracker) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(USBMovieSceneEntitySystem) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(USBMovieSceneEntityCharacterSoundSetSystem) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(USBMovieSceneEntitySoundEventSystem) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(USBMovieSceneEntityTestSystem) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(USBMovieSceneEntityVibrationSystem) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(USBMovieSceneEventSection) == 0x00F8); // 248 bytes (0x0000F0 - 0x0000F8)
static_assert(sizeof(FSBMovieSceneEventKeyStruct) == 0x0010); // 16 bytes (0x000008 - 0x000010)
static_assert(sizeof(FSBMovieSceneEventCharacterSoundSetKeyStruct) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FSBMovieSceneEventCharacterSoundSetChannel) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(USBMovieSceneEventCharacterSoundSetSection) == 0x0180); // 384 bytes (0x0000F8 - 0x000180)
static_assert(sizeof(FSBMovieSceneEventSoundEventKeyStruct) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FSBMovieSceneEventSoundEventChannel) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(USBMovieSceneEventSoundEventSection) == 0x0180); // 384 bytes (0x0000F8 - 0x000180)
static_assert(sizeof(FSBMovieSceneEventTestKeyStruct) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FSBMovieSceneEventTestChannel) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(USBMovieSceneEventTestSection) == 0x0180); // 384 bytes (0x0000F8 - 0x000180)
static_assert(sizeof(USBMovieSceneEventTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(FSBMovieSceneEventVibrationKeyStruct) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FSBMovieSceneEventVibrationChannel) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(USBMovieSceneEventVibrationSection) == 0x0180); // 384 bytes (0x0000F8 - 0x000180)
static_assert(sizeof(ASBNavigationObjectBase) == 0x02F8); // 760 bytes (0x0002F0 - 0x0002F8)
static_assert(sizeof(ASBNetworkGameMode) == 0x05A8); // 1448 bytes (0x000510 - 0x0005A8)
static_assert(sizeof(ASBNetworkPlayerController) == 0x0858); // 2136 bytes (0x000850 - 0x000858)
static_assert(sizeof(ASBNetworkPlayerState) == 0x03E0); // 992 bytes (0x0003C8 - 0x0003E0)
static_assert(sizeof(USBObjectMaterialData) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(ASBOccluderTurnOffVolume) == 0x0340); // 832 bytes (0x000318 - 0x000340)
static_assert(sizeof(ASBOptimizationActor) == 0x0430); // 1072 bytes (0x0002C8 - 0x000430)
static_assert(sizeof(USBParallelTickInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FSBLevelStreamVolumeTracker) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(ASBPerformanceProfilerActor) == 0x03D8); // 984 bytes (0x0002C8 - 0x0003D8)
static_assert(sizeof(USBPhotoModeAxisObserver) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ASBPhotoModeBlockingVolume) == 0x0330); // 816 bytes (0x000318 - 0x000330)
static_assert(sizeof(ASBPhotoModePawn) == 0x03E0); // 992 bytes (0x000350 - 0x0003E0)
static_assert(sizeof(ASBPhotoModeCutSceneCameraPawn) == 0x03E0); // 992 bytes (0x0003E0 - 0x0003E0)
static_assert(sizeof(ASBPhotoModeIgnoredBlockWall) == 0x02C8); // 712 bytes (0x0002C8 - 0x0002C8)
static_assert(sizeof(USBPhotoModePawnMovementComponent) == 0x0180); // 384 bytes (0x000178 - 0x000180)
static_assert(sizeof(ASBPhotoModeSelfieCameraPawn) == 0x0460); // 1120 bytes (0x0003E0 - 0x000460)
static_assert(sizeof(USBPhysicalMaterial) == 0x0118); // 280 bytes (0x000080 - 0x000118)
static_assert(sizeof(USBPlayerInput) == 0x01D8); // 472 bytes (0x000028 - 0x0001D8)
static_assert(sizeof(USBPlayerInputManager) == 0x03A8); // 936 bytes (0x0003A8 - 0x0003A8)
static_assert(sizeof(FSBPMatParticleSetInfo) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FSBDecalParamCurve) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FSBPMaDecalInfo) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSBPMatParticleSetInfoArray) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(USBPMaterialParticleSet) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(FSBPrimaryAssetLabelInfo) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(USBPrimaryAssetLabelGenerator) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(USBLevelListViewItemWidget) == 0x06A0); // 1696 bytes (0x000680 - 0x0006A0)
static_assert(sizeof(USBTextureListViewItemWidget) == 0x06A0); // 1696 bytes (0x000680 - 0x0006A0)
static_assert(sizeof(USBPrimitiveListViewItemWidget) == 0x06A8); // 1704 bytes (0x000680 - 0x0006A8)
static_assert(sizeof(USBProfilingWidget) == 0x06B8); // 1720 bytes (0x000680 - 0x0006B8)
static_assert(sizeof(ASBProgressState) == 0x02D8); // 728 bytes (0x0002C8 - 0x0002D8)
static_assert(sizeof(FSBProjectileUpdateInfo) == 0x00C8); // 200 bytes (0x000000 - 0x0000C8)
static_assert(sizeof(ASBProjectile) == 0x0660); // 1632 bytes (0x0002C8 - 0x000660)
static_assert(sizeof(USBPuzzleWidget) == 0x0698); // 1688 bytes (0x000680 - 0x000698)
static_assert(sizeof(USBQuestNode) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USBQuestActionNode) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(USBQuestActionTypeAIDecoratorNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBQuestActionTypeAttachActorEffectNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(FSBAliasLevelTargetFilter) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBQuestActionTypeDespawnNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBQuestActionTypeEnvControlNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBQuestActionTypeInteractionNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(FSBAliasEventItem) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBQuestActionTypeItemNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBQuestActionTypePlayLevelSeqNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBQuestActionTypeQuestNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBQuestActionTypeSpawnNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(FSBAliasEventTheater) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBQuestActionTypeTheaterNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBQuestActionTypeZone) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBQuestActionTypeZoneControlNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBQuestActionTypeZoneObjectControlNode) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(USBQuestRootNode) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(FSBTableIndexRewardGroup) == 0x0024); // 36 bytes (0x000024 - 0x000024)
static_assert(sizeof(FSBQuestPinType) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBQuestEventActionDataInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBQuestElementNode) == 0x01A8); // 424 bytes (0x000058 - 0x0001A8)
static_assert(sizeof(USBQuestLevelTargetFilter) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(FSBQuestTaskContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSAliasBRestartRule) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasZoneCamp) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasWorld) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBQuestWarpNodeData) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(USBQuestMissionNode) == 0x01C8); // 456 bytes (0x000058 - 0x0001C8)
static_assert(sizeof(USBQuestPathNode) == 0x0088); // 136 bytes (0x000058 - 0x000088)
static_assert(sizeof(ASBQuestPathNodeActor) == 0x0310); // 784 bytes (0x0002C8 - 0x000310)
static_assert(sizeof(USBQuestRequestNode) == 0x01F8); // 504 bytes (0x000058 - 0x0001F8)
static_assert(sizeof(USBQuestSequence) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(USBQuestTaskNode) == 0x00B8); // 184 bytes (0x000058 - 0x0000B8)
static_assert(sizeof(USBQuestTasktypeAchievement) == 0x0100); // 256 bytes (0x0000B8 - 0x000100)
static_assert(sizeof(USBQuestTaskTypeActorInBound) == 0x0108); // 264 bytes (0x0000B8 - 0x000108)
static_assert(sizeof(USBQuestTasktypeCounter) == 0x00F0); // 240 bytes (0x0000B8 - 0x0000F0)
static_assert(sizeof(USBQuestTaskTypeDelayTime) == 0x00F0); // 240 bytes (0x0000B8 - 0x0000F0)
static_assert(sizeof(USBQuestTaskTypeEnterTrigger) == 0x0100); // 256 bytes (0x0000B8 - 0x000100)
static_assert(sizeof(USBQuestTaskTypeEnterZone) == 0x00F8); // 248 bytes (0x0000B8 - 0x0000F8)
static_assert(sizeof(USBQuestTaskTypeEnvState) == 0x0120); // 288 bytes (0x0000B8 - 0x000120)
static_assert(sizeof(USBQuestTaskTypeInteraction) == 0x0100); // 256 bytes (0x0000B8 - 0x000100)
static_assert(sizeof(USBQuestTaskTypeKillTargetNode) == 0x0100); // 256 bytes (0x0000B8 - 0x000100)
static_assert(sizeof(USBQuestTaskTypeLeaveTrigger) == 0x0100); // 256 bytes (0x0000B8 - 0x000100)
static_assert(sizeof(USBQuestTaskTypeLeaveZone) == 0x00F8); // 248 bytes (0x0000B8 - 0x0000F8)
static_assert(sizeof(USBQuestTaskTypeRequireItem) == 0x0120); // 288 bytes (0x0000B8 - 0x000120)
static_assert(sizeof(USBQuestTasktypeScan) == 0x0100); // 256 bytes (0x0000B8 - 0x000100)
static_assert(sizeof(USBQuestTaskTypeTaskCondition) == 0x0108); // 264 bytes (0x0000B8 - 0x000108)
static_assert(sizeof(USBQuestWarpNode) == 0x0128); // 296 bytes (0x000058 - 0x000128)
static_assert(sizeof(USBQuestZoneEventRefNode) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(USBQuestZoneNode) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(USBRadialForceComponent) == 0x02A0); // 672 bytes (0x000290 - 0x0002A0)
static_assert(sizeof(ASBRegionVolume) == 0x0370); // 880 bytes (0x000318 - 0x000370)
static_assert(sizeof(ASBResourceCacheActor) == 0x0338); // 824 bytes (0x0002F0 - 0x000338)
static_assert(sizeof(USBResourceCacheActorCapsuleComponent) == 0x0560); // 1376 bytes (0x000560 - 0x000560)
static_assert(sizeof(USBResourceCacheZoneData) == 0x01D0); // 464 bytes (0x000030 - 0x0001D0)
static_assert(sizeof(ASBRestorationWorldActor) == 0x0320); // 800 bytes (0x000308 - 0x000320)
static_assert(sizeof(USBRewardGroupSpawnFormation) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(FSBExtractRootMotionData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBRootMotionData) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(FItemData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FAchievementData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBSaveData) == 0x0260); // 608 bytes (0x000030 - 0x000260)
static_assert(sizeof(FSBSaveGameData_ExospineEnhanceInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBSaveGameData_EnhanceFlagStateInfo) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FSBSaveGameData_ActorItemEnhanceState) == 0x0148); // 328 bytes (0x000000 - 0x000148)
static_assert(sizeof(FSBSaveGameData_Actor) == 0x02B0); // 688 bytes (0x000000 - 0x0002B0)
static_assert(sizeof(FSBSaveGameData_EffectObject) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBSaveGameData_Effect) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_QuestTask) == 0x00C8); // 200 bytes (0x000000 - 0x0000C8)
static_assert(sizeof(FSBSaveGameData_QuestTaskInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_QuestTaskGroup) == 0x00C8); // 200 bytes (0x000000 - 0x0000C8)
static_assert(sizeof(FSBSaveGameData_QuestObject) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBSaveGameData_QuestCustomTracking) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBSaveGameData_CustomPin) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBSaveGameData_CustomPinContainer) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBSaveGameData_Quest) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FSBZoneEventActor_RestoreChunkInfo) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FSBZoneEventActor_RestoreMeshInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBElementInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBSaveGameData_ZoneEventActorStorage) == 0x0170); // 368 bytes (0x000000 - 0x000170)
static_assert(sizeof(FSBSaveGameData_WorldContainer) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSaveGameData_ZoneEnvStateInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_ZoneEnvNotifyInfo) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBSaveGameData_ZoneEnvProgressInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBSaveGameData_InteractInfo) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSBSaveGameData_ZoneEnvChildObjInfo) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FSBSaveGameData_ZoneEnvStorage) == 0x0278); // 632 bytes (0x000000 - 0x000278)
static_assert(sizeof(FDecoratorUsableTime) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBSaveGameData_MetaAI) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBSaveGameData_ZoneNpcStorage) == 0x0298); // 664 bytes (0x000000 - 0x000298)
static_assert(sizeof(FSBSaveGameData_ZoneTriggerStorage) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBSaveGameData_ZoneEventItemStorage) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FSBSaveGameData_WorldObjectStorage) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBSaveGameData_ZoneContainer) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FSBSaveGameData_Env) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBSaveGameData_ItemObject) == 0x0160); // 352 bytes (0x000000 - 0x000160)
static_assert(sizeof(FSBItemPocket) == 0x00C0); // 192 bytes (0x000000 - 0x0000C0)
static_assert(sizeof(FSBSaveGameData_PocketObject) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSaveGameData_WorldEventItem) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSaveGameData_Item) == 0x0170); // 368 bytes (0x000000 - 0x000170)
static_assert(sizeof(FSBSaveGameData_AcquisitionSkillObject) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBSaveGameData_AcquisitionSkill) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FSBSaveGameData_AchievementObject) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_Achievement) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_FishingLog) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_FishingLogBook) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_ShopLimitedItemHistoryObject) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBSaveGameData_ShopLimitedItemHistoryArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_ShopFriendShip) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBSaveGameData_ShopLimitedItemHistory) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FSBSaveGameData_ActorStorageProperty) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBSaveGameData_ActorStorage) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FSBSaveGameData_RedDot) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBSaveGameData_UI) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_PlayRecordTaskData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBSaveGameData_PlayRecordTaskList) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_PlayRecordGroup) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSBSaveGameData_PlayRecordData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FSBSaveGameData_HintObject) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBSaveGameData_Hint) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBSaveGameData_TrainingRoom) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSBSaveGameData_EventGiftInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_NikkeStageInfo) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FSBSaveGameData_Nikke) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSaveGameData_NewGamePlusBaseInfo) == 0x0678); // 1656 bytes (0x000000 - 0x000678)
static_assert(sizeof(FSBSaveGameData_DebugHistoryLogSection) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSaveGameData_DebugHistoryLog) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBSaveGame) == 0x0D88); // 3464 bytes (0x000088 - 0x000D88)
static_assert(sizeof(FSBActorSectorInfo) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(USBSaveGameComponent) == 0x02B0); // 688 bytes (0x000260 - 0x0002B0)
static_assert(sizeof(FSBSaveObjectInfo) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(USBSaveManager) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(ASBSaveVolume) == 0x0340); // 832 bytes (0x000318 - 0x000340)
static_assert(sizeof(ASBScanActor) == 0x0308); // 776 bytes (0x0002C8 - 0x000308)
static_assert(sizeof(USBSceneCaptureComponent2D) == 0x0980); // 2432 bytes (0x000970 - 0x000980)
static_assert(sizeof(USBSequencerBaseWidget) == 0x06C0); // 1728 bytes (0x000680 - 0x0006C0)
static_assert(sizeof(USBSequencerAreaWidget) == 0x06F0); // 1776 bytes (0x0006C0 - 0x0006F0)
static_assert(sizeof(USBSequencerAttachChildWidget) == 0x0690); // 1680 bytes (0x000680 - 0x000690)
static_assert(sizeof(USBSequencerAttachWidget) == 0x0720); // 1824 bytes (0x0006C0 - 0x000720)
static_assert(sizeof(USBSequencerBackgroundWidget) == 0x06F8); // 1784 bytes (0x000680 - 0x0006F8)
static_assert(sizeof(USBSequencerDialogueWidget) == 0x06E8); // 1768 bytes (0x0006C0 - 0x0006E8)
static_assert(sizeof(FSBSequencerInputCounterInputInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBSequencerInputCounterActorInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBSequencerInputCounterBindInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBSequencerInputCounterWidget) == 0x08D8); // 2264 bytes (0x0006C0 - 0x0008D8)
static_assert(sizeof(FSBTheaterInteractionLineData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(USBSequencerInteractionSelectWidget) == 0x0740); // 1856 bytes (0x0006C0 - 0x000740)
static_assert(sizeof(USBSequencerMovieWidget) == 0x0718); // 1816 bytes (0x0006C0 - 0x000718)
static_assert(sizeof(USBSequencerPlayerChoiceSlotWidget) == 0x0690); // 1680 bytes (0x000680 - 0x000690)
static_assert(sizeof(USBSequencerPlayerChoiceWidget) == 0x0740); // 1856 bytes (0x0006C0 - 0x000740)
static_assert(sizeof(FSBSequencerQTEInputInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBSequencerQTEActorInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBSequencerQTEBindInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBSequencerQTEWidget) == 0x0890); // 2192 bytes (0x0006C0 - 0x000890)
static_assert(sizeof(FSBSequencerReactionTriggerBindInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBSequencerReactionTriggerWidget) == 0x0750); // 1872 bytes (0x0006C0 - 0x000750)
static_assert(sizeof(USBSequencerRootWidget) == 0x06F0); // 1776 bytes (0x000680 - 0x0006F0)
static_assert(sizeof(USBSequencerSkipWidget) == 0x06A0); // 1696 bytes (0x000680 - 0x0006A0)
static_assert(sizeof(USBSequencerSubtitle2SlotWidget) == 0x06A0); // 1696 bytes (0x000680 - 0x0006A0)
static_assert(sizeof(USBSequencerSubtitle2Widget) == 0x07F8); // 2040 bytes (0x0006C0 - 0x0007F8)
static_assert(sizeof(USBSequencerSubtitle3SlotWidget) == 0x0790); // 1936 bytes (0x000680 - 0x000790)
static_assert(sizeof(USBSequencerSubtitle3Widget) == 0x0878); // 2168 bytes (0x0006C0 - 0x000878)
static_assert(sizeof(USBShowKey) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(USBShowActorAnimKey) == 0x00C0); // 192 bytes (0x000058 - 0x0000C0)
static_assert(sizeof(USBShowActorCompVisibleKey) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(USBShowActorEventNotificationKey) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(USBShowActorInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USBShowActorKey) == 0x00A8); // 168 bytes (0x000058 - 0x0000A8)
static_assert(sizeof(USBShowAnimBlendSpaceKey) == 0x00E0); // 224 bytes (0x000058 - 0x0000E0)
static_assert(sizeof(USBShowAnimBPSetValueKey) == 0x0100); // 256 bytes (0x000058 - 0x000100)
static_assert(sizeof(USBShowAnimBPSetValueKey_String) == 0x0078); // 120 bytes (0x000058 - 0x000078)
static_assert(sizeof(USBShowAnimByMeshSlotKey) == 0x0098); // 152 bytes (0x000058 - 0x000098)
static_assert(sizeof(FSBCustomLayeredBoneBlendInfo) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FOptionalAnimationByAngle) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBShowAnimKeyStep) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(USBShowAnimKey) == 0x01F8); // 504 bytes (0x000058 - 0x0001F8)
static_assert(sizeof(USBShowAnimNodeGroundCollisionKey) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(USBShowAnimNodeTargetTrackingKey) == 0x0080); // 128 bytes (0x000058 - 0x000080)
static_assert(sizeof(USBShowAnimTransitKey) == 0x0090); // 144 bytes (0x000058 - 0x000090)
static_assert(sizeof(USBShowAttachSocketToSocketKey) == 0x0078); // 120 bytes (0x000058 - 0x000078)
static_assert(sizeof(USBShowBoneScaleIgnoreKey) == 0x0078); // 120 bytes (0x000058 - 0x000078)
static_assert(sizeof(USBShowCableKey) == 0x0390); // 912 bytes (0x000058 - 0x000390)
static_assert(sizeof(FSBShowMatineeCamAnimByFactorType) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBShowCamAnimKey) == 0x0100); // 256 bytes (0x000058 - 0x000100)
static_assert(sizeof(USBShowCameraEyeTrackingKey) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(FSBShowCameraShakeParams) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(USBShowCamShakeKey) == 0x0128); // 296 bytes (0x000058 - 0x000128)
static_assert(sizeof(USBShowChangeAttachTo) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(USBShowClientEventKey) == 0x0090); // 144 bytes (0x000058 - 0x000090)
static_assert(sizeof(USBShowControlCameraVolumeKey) == 0x00A0); // 160 bytes (0x000058 - 0x0000A0)
static_assert(sizeof(USBShowControlCamLagSpeedKey) == 0x0080); // 128 bytes (0x000058 - 0x000080)
static_assert(sizeof(USBShowControlLockOnBlendKey) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(USBShowControlLockOnTargetBoneKey) == 0x0078); // 120 bytes (0x000058 - 0x000078)
static_assert(sizeof(FSBShowCreateDestructibleCollisionResponseToChannel) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(USBShowCreateDestructibleKey) == 0x0128); // 296 bytes (0x000058 - 0x000128)
static_assert(sizeof(USBShowCreateStaticMeshKey) == 0x04B8); // 1208 bytes (0x000058 - 0x0004B8)
static_assert(sizeof(FSBShowKeyContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBTablePropertyBase) == 0x0010); // 16 bytes (0x000008 - 0x000010)
static_assert(sizeof(FSBJsonEffect) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBJsonSkillStepEndCondition) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBJsonCollisionGroup) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBJsonNextStepCheckEffect) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBSkillActiveStepTableProperty) == 0x0390); // 912 bytes (0x000010 - 0x000390)
static_assert(sizeof(FSBShowKeyStep) == 0x0398); // 920 bytes (0x000000 - 0x000398)
static_assert(sizeof(USBShowData) == 0x00C0); // 192 bytes (0x000030 - 0x0000C0)
static_assert(sizeof(USBShowDeactiveParticleKey) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(USBShowParticleBase) == 0x0498); // 1176 bytes (0x000058 - 0x000498)
static_assert(sizeof(FSBShowDecalParamCurve) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(USBShowDecalKey) == 0x06C8); // 1736 bytes (0x000498 - 0x0006C8)
static_assert(sizeof(FSBDepthOfFieldRuntimeFloatCurve) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FSBPostProcessDepthOfFieldAdvanceData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBPostProcessDepthOfFieldData) == 0x03B8); // 952 bytes (0x000000 - 0x0003B8)
static_assert(sizeof(USBShowDepthOfFieldKey) == 0x0420); // 1056 bytes (0x000058 - 0x000420)
static_assert(sizeof(USBShowDynamicPhysicBonesKey) == 0x0078); // 120 bytes (0x000058 - 0x000078)
static_assert(sizeof(USBShowDynamicPhysicBStopKey) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(FSBJsonEffectEndCondition) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSBEffectTableProperty) == 0x0588); // 1416 bytes (0x000010 - 0x000588)
static_assert(sizeof(USBShowEffectKey) == 0x0610); // 1552 bytes (0x000058 - 0x000610)
static_assert(sizeof(USBShowFlyKey) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(USBShowForceFeedbackKey) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(USBShowHitReactionKey) == 0x00C8); // 200 bytes (0x000058 - 0x0000C8)
static_assert(sizeof(USBShowDataStep) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(USBShowLockOnTargetKey) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(USBShowMaterialChangeKey) == 0x00A0); // 160 bytes (0x000058 - 0x0000A0)
static_assert(sizeof(USBShowMaterialCollectionParamKey) == 0x0210); // 528 bytes (0x000058 - 0x000210)
static_assert(sizeof(USBShowMaterialParamKey) == 0x0238); // 568 bytes (0x000058 - 0x000238)
static_assert(sizeof(USBShowMeshVertexShakeKey) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(USBShowMovementBoneKey) == 0x0080); // 128 bytes (0x000058 - 0x000080)
static_assert(sizeof(USBShowNiagaraKey) == 0x04A0); // 1184 bytes (0x000498 - 0x0004A0)
static_assert(sizeof(USBShowNotifyEventKey) == 0x0080); // 128 bytes (0x000058 - 0x000080)
static_assert(sizeof(FSBShowParticleDynamicInstanceParameter) == 0x01C0); // 448 bytes (0x000000 - 0x0001C0)
static_assert(sizeof(USBShowParticleKey) == 0x05C0); // 1472 bytes (0x000498 - 0x0005C0)
static_assert(sizeof(ASBShowPlayableActor) == 0x0358); // 856 bytes (0x0002C8 - 0x000358)
static_assert(sizeof(USBShowPlayShowKey) == 0x0088); // 136 bytes (0x000058 - 0x000088)
static_assert(sizeof(USBShowPlayTheaterKey) == 0x0078); // 120 bytes (0x000058 - 0x000078)
static_assert(sizeof(USBShowPoseSnapshotKey) == 0x00F0); // 240 bytes (0x000058 - 0x0000F0)
static_assert(sizeof(USBShowPostProcessKey) == 0x0610); // 1552 bytes (0x000058 - 0x000610)
static_assert(sizeof(FSBShowMaterialParamCurve) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(USBShowPostProcessMaterialKey) == 0x0120); // 288 bytes (0x000058 - 0x000120)
static_assert(sizeof(USBShowProjectileKey) == 0x01B8); // 440 bytes (0x000058 - 0x0001B8)
static_assert(sizeof(USBShowRadialForceKey) == 0x00B0); // 176 bytes (0x000058 - 0x0000B0)
static_assert(sizeof(USBShowRagdollKey) == 0x01F8); // 504 bytes (0x000058 - 0x0001F8)
static_assert(sizeof(USBShowRootMotionKey) == 0x0088); // 136 bytes (0x000058 - 0x000088)
static_assert(sizeof(FSBAliasCharacterMove) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBCharacterMoveTableProperty) == 0x0130); // 304 bytes (0x000010 - 0x000130)
static_assert(sizeof(USBShowRuleMoveKey) == 0x01B0); // 432 bytes (0x000058 - 0x0001B0)
static_assert(sizeof(USBShowSetAIDecoratorKey) == 0x0098); // 152 bytes (0x000058 - 0x000098)
static_assert(sizeof(FSBAliasSkillResult) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBSkillResultTableProperty) == 0x04B0); // 1200 bytes (0x000010 - 0x0004B0)
static_assert(sizeof(USBShowSkillResultKey) == 0x0528); // 1320 bytes (0x000058 - 0x000528)
static_assert(sizeof(USBShowSoundAdjusterKey) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(USBShowSoundAmbientControlKey) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(USBShowSoundBGMPriorityKey) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(USBShowSoundEventKey) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(FSBShowVectorCurve) == 0x01A0); // 416 bytes (0x000000 - 0x0001A0)
static_assert(sizeof(USBShowSoundKey) == 0x02B0); // 688 bytes (0x000058 - 0x0002B0)
static_assert(sizeof(USBShowCharSESoundKey) == 0x02E0); // 736 bytes (0x0002B0 - 0x0002E0)
static_assert(sizeof(ASBShowStaticMeshActor) == 0x02D8); // 728 bytes (0x0002D8 - 0x0002D8)
static_assert(sizeof(USBShowTimeScaleKey) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(USBShowTrailKey) == 0x00A8); // 168 bytes (0x000058 - 0x0000A8)
static_assert(sizeof(USBShowUIStudioSequenceKey) == 0x0068); // 104 bytes (0x000058 - 0x000068)
static_assert(sizeof(FSBShowHapticProperty) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBShowForceFeedbackProperty) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBShowVibrationKey) == 0x00B8); // 184 bytes (0x000058 - 0x0000B8)
static_assert(sizeof(USBShowVisibilityKey) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(USBShowWindVolumeKey) == 0x00E0); // 224 bytes (0x000058 - 0x0000E0)
static_assert(sizeof(USBShowWorldMatineeKey) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(ASBSignificanceDebugActor) == 0x0318); // 792 bytes (0x0002C8 - 0x000318)
static_assert(sizeof(USBSignificanceManager) == 0x03A0); // 928 bytes (0x000120 - 0x0003A0)
static_assert(sizeof(USBSingleSoundData) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(USBSingleSoundComponent) == 0x02B0); // 688 bytes (0x000260 - 0x0002B0)
static_assert(sizeof(FMaterialDefaultInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FVertexShakeInfo) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(FBoneAnimScaleIgnoreInfo) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(USBSkeletalMeshComponent) == 0x1590); // 5520 bytes (0x0012F0 - 0x001590)
static_assert(sizeof(FSBSkillNavigationPath) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBSkillSlotBase) == 0x0810); // 2064 bytes (0x000680 - 0x000810)
static_assert(sizeof(FSBSkillSlotBases) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSkillSlotLines) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSkillSlotRequiredInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBSkillTreeBase) == 0x07D8); // 2008 bytes (0x000680 - 0x0007D8)
static_assert(sizeof(FSBSliceSkeletalMeshHeader) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSliceSkeletalMeshTriangle) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBSliceSkeletalMeshSection) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSliceSkeletalMeshBone) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSliceSkeletalMeshLOD) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBSliceSkeletalMeshDataAsset) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(FSBSliceSkeletalMeshTemplateData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBSliceSkeletalMeshTemplateDataAsset) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(ASBSoundActor) == 0x02E8); // 744 bytes (0x0002D0 - 0x0002E8)
static_assert(sizeof(ASBSoundBGMActor) == 0x02E8); // 744 bytes (0x0002E8 - 0x0002E8)
static_assert(sizeof(USBSoundAdjuster) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(USBSoundComponent) == 0x0900); // 2304 bytes (0x0008E8 - 0x000900)
static_assert(sizeof(USBSoundProcedural) == 0x03D8); // 984 bytes (0x0003D0 - 0x0003D8)
static_assert(sizeof(FSBSoundPCMData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBSoundConcatenation) == 0x0410); // 1040 bytes (0x0003D8 - 0x000410)
static_assert(sizeof(USBSoundProceduralAsset) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(USBSoundConcatenationAsset) == 0x0068); // 104 bytes (0x000048 - 0x000068)
static_assert(sizeof(USBQuartzEventObserver) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(USBSoundDebuggerWidget) == 0x07C0); // 1984 bytes (0x000680 - 0x0007C0)
static_assert(sizeof(ASBSoundEventVolume) == 0x0340); // 832 bytes (0x000318 - 0x000340)
static_assert(sizeof(USBSoundNodeConcatenator) == 0x0068); // 104 bytes (0x000048 - 0x000068)
static_assert(sizeof(USBSoundNodeConditionBranch) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USBSoundNodeFadeSwitch) == 0x0060); // 96 bytes (0x000048 - 0x000060)
static_assert(sizeof(USBSoundNodeHighPassFilter) == 0x0060); // 96 bytes (0x000048 - 0x000060)
static_assert(sizeof(USBSoundNodeLoopingMixer) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USBSoundNodeLowPassFilter) == 0x0060); // 96 bytes (0x000048 - 0x000060)
static_assert(sizeof(USBSoundNodeParamFade) == 0x0060); // 96 bytes (0x000048 - 0x000060)
static_assert(sizeof(USBSoundNodeParamVolumeCurve) == 0x00E0); // 224 bytes (0x000048 - 0x0000E0)
static_assert(sizeof(USBSoundNodeProcedural) == 0x0070); // 112 bytes (0x000048 - 0x000070)
static_assert(sizeof(ASBSoundOcclusionActor) == 0x0370); // 880 bytes (0x0002C8 - 0x000370)
static_assert(sizeof(USBSoundProceduralSimple) == 0x0560); // 1376 bytes (0x0003D8 - 0x000560)
static_assert(sizeof(USBSoundProceduralSimpleAsset) == 0x0068); // 104 bytes (0x000048 - 0x000068)
static_assert(sizeof(USBQuartzEventObserverV2) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSBSoundControlData) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(USBSoundVolumeData) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(ASBSpawnArea) == 0x0338); // 824 bytes (0x0002C8 - 0x000338)
static_assert(sizeof(FSBSpawnLocationInfo) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(USBSpawnFormationData) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FSBAssetPicker) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(ASBSpawnPoint) == 0x0390); // 912 bytes (0x0002F8 - 0x000390)
static_assert(sizeof(USBSpiderNavigationComponent) == 0x0390); // 912 bytes (0x000260 - 0x000390)
static_assert(sizeof(FSpiderNavigationDataHeader) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FSpiderNavigationPointData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USBSpiderNavigationDataAsset) == 0x00E0); // 224 bytes (0x000030 - 0x0000E0)
static_assert(sizeof(ASBSpiderNavigationVolume) == 0x0440); // 1088 bytes (0x000318 - 0x000440)
static_assert(sizeof(ASBSpiderNavigationVolume_Point) == 0x0300); // 768 bytes (0x0002C8 - 0x000300)
static_assert(sizeof(ASBSpiderNavigationVolume_Edge) == 0x0300); // 768 bytes (0x000300 - 0x000300)
static_assert(sizeof(ASBSpiderNavigationVolume_Invalid) == 0x0318); // 792 bytes (0x000318 - 0x000318)
static_assert(sizeof(ASBSpiderNavigationVolume_Tracer) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(ASBSplineCameraActor) == 0x0940); // 2368 bytes (0x000900 - 0x000940)
static_assert(sizeof(USBSplineCameraMetadata) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(USBSplineCameraComponent) == 0x0680); // 1664 bytes (0x000630 - 0x000680)
static_assert(sizeof(ASBSplineCameraSpringActor) == 0x0980); // 2432 bytes (0x000940 - 0x000980)
static_assert(sizeof(ASBSplineTexture) == 0x0300); // 768 bytes (0x0002C8 - 0x000300)
static_assert(sizeof(FCameraDollySplineExtra) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FCameraDollySplineBlend) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBSpringArmComponent) == 0x03F0); // 1008 bytes (0x0002F0 - 0x0003F0)
static_assert(sizeof(USBStreamingLevelLoadingBarrierVolumeVisualizerComponent) == 0x0260); // 608 bytes (0x000260 - 0x000260)
static_assert(sizeof(ASBStreamingLevelLoadingBarrierVolume) == 0x0368); // 872 bytes (0x000318 - 0x000368)
static_assert(sizeof(USBStringTableImportCommandlet) == 0x00A0); // 160 bytes (0x000080 - 0x0000A0)
static_assert(sizeof(FSBStudioSequenceResourceData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(USBStudioSequenceDataAsset) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(USBStudioSequenceObserver) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(FSBStudioShowResourceData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USBStudioShowDataAsset) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(ASBStudioActor) == 0x0A50); // 2640 bytes (0x0002C8 - 0x000A50)
static_assert(sizeof(USBTableIndexController) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(ASBTargetingPoint) == 0x02F8); // 760 bytes (0x0002F0 - 0x0002F8)
static_assert(sizeof(FSBTextureStyleInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(USBTextureStyleSetData) == 0x00D0); // 208 bytes (0x000030 - 0x0000D0)
static_assert(sizeof(USBTheaterData) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(USBTheaterLevelSequenceObserver) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(FSBLevelSequenceBookmarkAlias) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBLevelAlias) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBLevelAliasLevelSequence) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBTheaterTakeData) == 0x0150); // 336 bytes (0x000028 - 0x000150)
static_assert(sizeof(ASBTickManagedActor) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(FSBToolDataVersion) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(USBToolDataAsset) == 0x00A0); // 160 bytes (0x000040 - 0x0000A0)
static_assert(sizeof(USBToolDataNode) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(USBToolDataNode_AliasEffect) == 0x0068); // 104 bytes (0x000048 - 0x000068)
static_assert(sizeof(FSBAliasRewardGroup) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_AliasRewardGroup) == 0x0098); // 152 bytes (0x000048 - 0x000098)
static_assert(sizeof(FSBAliasCharacterTribe) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_AreaControlVolume) == 0x0090); // 144 bytes (0x000048 - 0x000090)
static_assert(sizeof(USBToolDataNode_Condition) == 0x0110); // 272 bytes (0x000048 - 0x000110)
static_assert(sizeof(USBToolDataNode_ConditionGroup) == 0x00B8); // 184 bytes (0x000048 - 0x0000B8)
static_assert(sizeof(USBToolDataNode_EnvState_Reward) == 0x00A8); // 168 bytes (0x000048 - 0x0000A8)
static_assert(sizeof(FSBZoneEnvToTargetStateInfo) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(USBToolDataNode_EnvState_Sequence) == 0x0188); // 392 bytes (0x000048 - 0x000188)
static_assert(sizeof(USBToolDataNode_EventActorEffect) == 0x00E8); // 232 bytes (0x000048 - 0x0000E8)
static_assert(sizeof(USBToolDataNode_EventAIDecorator) == 0x00D0); // 208 bytes (0x000048 - 0x0000D0)
static_assert(sizeof(FSBAliasAreaControlVolume) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_EventAreaControlVolumeControl) == 0x0120); // 288 bytes (0x000048 - 0x000120)
static_assert(sizeof(USBToolDataNode_EventAreaName) == 0x00D0); // 208 bytes (0x000048 - 0x0000D0)
static_assert(sizeof(FSBAliasEffectVolume) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_EventEffectVolumeControl) == 0x00C0); // 192 bytes (0x000048 - 0x0000C0)
static_assert(sizeof(USBToolDataNode_EventEnhanceResult) == 0x00D0); // 208 bytes (0x000048 - 0x0000D0)
static_assert(sizeof(USBToolDataNode_EventEnvControl) == 0x0100); // 256 bytes (0x000048 - 0x000100)
static_assert(sizeof(FSBAliasGuideAction) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_EventGuideAction) == 0x00D8); // 216 bytes (0x000048 - 0x0000D8)
static_assert(sizeof(FSBAliasSoundEvent) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_EventInteractCamp) == 0x00D8); // 216 bytes (0x000048 - 0x0000D8)
static_assert(sizeof(USBToolDataNode_EventItemAction) == 0x00D8); // 216 bytes (0x000048 - 0x0000D8)
static_assert(sizeof(USBToolDataNode_EventLaserControl) == 0x00B0); // 176 bytes (0x000048 - 0x0000B0)
static_assert(sizeof(USBToolDataNode_EventLevelSequence) == 0x0128); // 296 bytes (0x000048 - 0x000128)
static_assert(sizeof(USBToolDataNode_EventMetaAI) == 0x00C0); // 192 bytes (0x000048 - 0x0000C0)
static_assert(sizeof(USBToolDataNode_EventObjectControl) == 0x00D0); // 208 bytes (0x000048 - 0x0000D0)
static_assert(sizeof(USBToolDataNode_EventQuest) == 0x00C0); // 192 bytes (0x000048 - 0x0000C0)
static_assert(sizeof(USBToolDataNode_EventRequestPathWay) == 0x00C0); // 192 bytes (0x000048 - 0x0000C0)
static_assert(sizeof(USBToolDataNode_EventTheater) == 0x01B8); // 440 bytes (0x000048 - 0x0001B8)
static_assert(sizeof(FSBTableIndexUIActionRequest) == 0x0024); // 36 bytes (0x000024 - 0x000024)
static_assert(sizeof(USBToolDataNode_EventUIAction) == 0x0100); // 256 bytes (0x000048 - 0x000100)
static_assert(sizeof(USBToolDataNode_EventZoneControl) == 0x00C0); // 192 bytes (0x000048 - 0x0000C0)
static_assert(sizeof(USBToolDataNode_EventZoneEventActorControl) == 0x00A8); // 168 bytes (0x000048 - 0x0000A8)
static_assert(sizeof(USBToolDataNode_EventZoneWarp) == 0x00F8); // 248 bytes (0x000048 - 0x0000F8)
static_assert(sizeof(FSBAliasCharacterStance) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_GuideAction) == 0x0318); // 792 bytes (0x000048 - 0x000318)
static_assert(sizeof(USBToolDataNode_LevelSequence) == 0x0080); // 128 bytes (0x000048 - 0x000080)
static_assert(sizeof(USBToolDataNode_LevelTargetFilter) == 0x0098); // 152 bytes (0x000048 - 0x000098)
static_assert(sizeof(FSBAliasCustom_GotoPathwayActor) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasAIGroup) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasMetaAI) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBSpawnConditionInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBObjectConditionTriggerInfo) == 0x0044); // 68 bytes (0x000000 - 0x000044)
static_assert(sizeof(FSBAliasShop) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasPuzzleStringArray) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_NGPlusZoneEventCharacterSpawn) == 0x03D0); // 976 bytes (0x000048 - 0x0003D0)
static_assert(sizeof(USBToolDataNode_World) == 0x00A0); // 160 bytes (0x000048 - 0x0000A0)
static_assert(sizeof(FSBAliasZoneLayer) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasMultiPlayRule) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBTransitZoneInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(USBToolDataNode_ZoneData) == 0x01B8); // 440 bytes (0x000048 - 0x0001B8)
static_assert(sizeof(FSBEffectVolumeDeadCountInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSAliasEffectVolumeProperty) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_ZoneEffectVolume) == 0x0110); // 272 bytes (0x000048 - 0x000110)
static_assert(sizeof(FSBZoneEnvTagProperty) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FSBZoneEnvProgressNotifyData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBZoneEnvProgressProperty) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBToolDataNode_ZoneEnv) == 0x01C8); // 456 bytes (0x000048 - 0x0001C8)
static_assert(sizeof(USBToolDataNode_ZoneEvent) == 0x00F0); // 240 bytes (0x000048 - 0x0000F0)
static_assert(sizeof(FSBJsonEffectAlias) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FSBZoneEventActorProperty) == 0x0074); // 116 bytes (0x000000 - 0x000074)
static_assert(sizeof(USBToolDataNode_ZoneEventActor) == 0x0168); // 360 bytes (0x000048 - 0x000168)
static_assert(sizeof(USBToolDataNode_ZoneEventCharacterSpawn) == 0x03D0); // 976 bytes (0x000048 - 0x0003D0)
static_assert(sizeof(FSBAliasZoneEnv) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBZoneEnvTagEvent) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBZoneEnvProgressInitProperty) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBZoneEnvRewardGroupInfo) == 0x0044); // 68 bytes (0x000000 - 0x000044)
static_assert(sizeof(FSBZoneEnvSequenceGroupInfo) == 0x0148); // 328 bytes (0x000000 - 0x000148)
static_assert(sizeof(FSBAliasNikkeLostArticle) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_ZoneEventEnvSpawn) == 0x0398); // 920 bytes (0x000048 - 0x000398)
static_assert(sizeof(FSBAliasItemSpawn) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(USBToolDataNode_ZoneEventItem) == 0x0108); // 264 bytes (0x000048 - 0x000108)
static_assert(sizeof(USBToolDataNode_ZoneLayer) == 0x0080); // 128 bytes (0x000048 - 0x000080)
static_assert(sizeof(USBToolDataNode_ZonePhaseEvent) == 0x0140); // 320 bytes (0x000048 - 0x000140)
static_assert(sizeof(USBToolDataNode_ZoneTrigger) == 0x0138); // 312 bytes (0x000048 - 0x000138)
static_assert(sizeof(USBTouchGestureRecognizer) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(FSBTransitAnimGroup) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBTransitAnimGroupData) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(USBTypeWriterTextBlock) == 0x0710); // 1808 bytes (0x0006F0 - 0x000710)
static_assert(sizeof(USBTypeWriterWidget) == 0x0328); // 808 bytes (0x000280 - 0x000328)
static_assert(sizeof(USBUIListViewBaseDataObject) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USBUIComboBoxBaseDataObject) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USBUIDefinitionData) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(USBUIItemSettingsData) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(USBUITileViewBaseDataObject) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(ASBUMGInputObserver) == 0x02C8); // 712 bytes (0x0002C8 - 0x0002C8)
static_assert(sizeof(USBUMGAxisObserver) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USBUserWidgetEventObserver) == 0x0130); // 304 bytes (0x000028 - 0x000130)
static_assert(sizeof(ASBUtilLevelNotice) == 0x0310); // 784 bytes (0x0002C8 - 0x000310)
static_assert(sizeof(USBUtilLevelNoticeWidget) == 0x02C8); // 712 bytes (0x000280 - 0x0002C8)
static_assert(sizeof(USBVertexAnimStaticMeshComponent) == 0x0610); // 1552 bytes (0x0005E0 - 0x000610)
static_assert(sizeof(FSBVFXParticle) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(ASBVFXVolume) == 0x0358); // 856 bytes (0x000318 - 0x000358)
static_assert(sizeof(USBVibrationComponent) == 0x02D0); // 720 bytes (0x000260 - 0x0002D0)
static_assert(sizeof(FSBVibrationSectionData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USBVibrationSection) == 0x02F8); // 760 bytes (0x0000E8 - 0x0002F8)
static_assert(sizeof(USBVibrationSet) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(USBVibrationTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(ASBWaterVolume) == 0x0548); // 1352 bytes (0x000508 - 0x000548)
static_assert(sizeof(FSBWayPointEventInfo) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(ASBWayPointActor) == 0x0398); // 920 bytes (0x0002F0 - 0x000398)
static_assert(sizeof(USBWidgetComponent) == 0x06A0); // 1696 bytes (0x000560 - 0x0006A0)
static_assert(sizeof(ASBWindVolume) == 0x03C0); // 960 bytes (0x000318 - 0x0003C0)
static_assert(sizeof(ASBWorldCompositionStreamingBlockingVolume) == 0x0330); // 816 bytes (0x000318 - 0x000330)
static_assert(sizeof(ASBWorldHeightTexVolume) == 0x03A0); // 928 bytes (0x000318 - 0x0003A0)
static_assert(sizeof(ASBWorldMapVolume) == 0x0320); // 800 bytes (0x000318 - 0x000320)
static_assert(sizeof(FSBZoneEnvProgressInfo) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FSBEnvZoneProperty) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBEnvStateProperty) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(ASBZoneEnvActor) == 0x0700); // 1792 bytes (0x0002F8 - 0x000700)
static_assert(sizeof(ASBZoneEnvBoxActor) == 0x0708); // 1800 bytes (0x000700 - 0x000708)
static_assert(sizeof(ASBZoneEnvSphereActor) == 0x0708); // 1800 bytes (0x000700 - 0x000708)
static_assert(sizeof(FSBGrabHandInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBZoneEnvGrabComponent) == 0x0150); // 336 bytes (0x0000C0 - 0x000150)
static_assert(sizeof(USBZoneEnvGrabSet) == 0x00E0); // 224 bytes (0x000030 - 0x0000E0)
static_assert(sizeof(USBZoneEnvMovementComponent) == 0x0360); // 864 bytes (0x000150 - 0x000360)
static_assert(sizeof(FSBDestructionFromActorAttackTriggerInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBDestructionFromActorRangedAttackTriggerInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBDestructionFromActorMoveTriggerInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBDestructionFromActorRuleMoveTriggerInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USBZoneEventActorTriggerInfo) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(FSBResetZoneCollisionUpdateInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(ASBZoneEventActor) == 0x06E0); // 1760 bytes (0x000308 - 0x0006E0)
static_assert(sizeof(ASBZoneTriggerActor) == 0x0450); // 1104 bytes (0x0002F0 - 0x000450)
static_assert(sizeof(ASBZoneVolume) == 0x0370); // 880 bytes (0x000318 - 0x000370)
static_assert(sizeof(UShowMakerParticleSystemComponent) == 0x07E0); // 2016 bytes (0x0007E0 - 0x0007E0)
static_assert(sizeof(FSBWidgetNavigationInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBAchievementProperty) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBActorCustomRecord) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBActorProperty) == 0x0348); // 840 bytes (0x000000 - 0x000348)
static_assert(sizeof(FSBAliasZonePhaseEvent) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasEventGuideAction) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAliasQuestMission) == 0x0018); // 24 bytes (0x000018 - 0x000018)
static_assert(sizeof(FSBAnimInstanceProxy) == 0x07D0); // 2000 bytes (0x000770 - 0x0007D0)
static_assert(sizeof(FSkelMeshMergeSectionMapping_BP) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSkelMeshMergeUVTransform) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSkelMeshMergeUVTransformMapping) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSkeletalMeshMergeParams) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBCharacterMoveInfo) == 0x005C); // 92 bytes (0x000000 - 0x00005C)
static_assert(sizeof(FSliceSkeletalMeshSliceableBoneData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBKawaiiPhysicsResetInfo) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FSBIdleAdditiveAnimationByAnimNotifyInfo) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FSBCollisionAnimationTransformEditInfo) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FSBCharacterMovementUpdateManagerTickFunction) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FSBRewardGroupFormationInfo) == 0x0084); // 132 bytes (0x000000 - 0x000084)
static_assert(sizeof(FSBCommonStruct) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBNikkeLostArticleTableProperty) == 0x0098); // 152 bytes (0x000010 - 0x000098)
static_assert(sizeof(FSBArtBookTableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBMailBoxGiftTableProperty) == 0x0068); // 104 bytes (0x000010 - 0x000068)
static_assert(sizeof(FSBLoadingScreenGameTipTableProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBTurntableSoundTableProperty) == 0x0080); // 128 bytes (0x000010 - 0x000080)
static_assert(sizeof(FSBKeyMappingRolloverTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBKeyMappingTableProperty) == 0x00E0); // 224 bytes (0x000010 - 0x0000E0)
static_assert(sizeof(FSBPhotoModeMovementTableProperty) == 0x0038); // 56 bytes (0x000010 - 0x000038)
static_assert(sizeof(FSBPhotoModeImageTableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBPhotoModeOptionTableProperty) == 0x00E8); // 232 bytes (0x000010 - 0x0000E8)
static_assert(sizeof(FSBPhotoChallengeTableProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBPhotoModeEyesPositionByPoseProperty) == 0x0058); // 88 bytes (0x000010 - 0x000058)
static_assert(sizeof(FSBPhotoModeFacialAnimationTableProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBPhotoModeImageFilterTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBEventGiftTableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBNikkeStageTableProperty) == 0x0140); // 320 bytes (0x000010 - 0x000140)
static_assert(sizeof(FSBBossChallengeTableProperty) == 0x0100); // 256 bytes (0x000010 - 0x000100)
static_assert(sizeof(FSBActorPlayPresetTableProperty) == 0x0100); // 256 bytes (0x000010 - 0x000100)
static_assert(sizeof(FSBGamePlayProgressCheatTableProperty) == 0x00C8); // 200 bytes (0x000010 - 0x0000C8)
static_assert(sizeof(FSBNewGamePlusAlreadySetupTableProperty) == 0x0038); // 56 bytes (0x000010 - 0x000038)
static_assert(sizeof(FSBLevelGraphicsOptionsTableProperty) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FSBSequenceActorTagTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBCreditTableProperty) == 0x00D0); // 208 bytes (0x000010 - 0x0000D0)
static_assert(sizeof(FSBManualTableProperty) == 0x0068); // 104 bytes (0x000010 - 0x000068)
static_assert(sizeof(FSBIsolatedAreaTableProperty) == 0x0018); // 24 bytes (0x000010 - 0x000018)
static_assert(sizeof(FSBTrainningRoomSettingTableProperty) == 0x00B8); // 184 bytes (0x000010 - 0x0000B8)
static_assert(sizeof(FSBResourceCacheSequenceTableProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBEffectVolumePropTableProperty) == 0x0108); // 264 bytes (0x000010 - 0x000108)
static_assert(sizeof(FSBUITutorialTableProperty) == 0x0088); // 136 bytes (0x000010 - 0x000088)
static_assert(sizeof(FSBCheatQuestTableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBSocialAnimTableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBWorldMapTableProperty) == 0x0090); // 144 bytes (0x000010 - 0x000090)
static_assert(sizeof(FSBShowParamTableProperty) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FSBCanTableProperty) == 0x00C0); // 192 bytes (0x000010 - 0x0000C0)
static_assert(sizeof(FSBGuideMessageTableProperty) == 0x00A0); // 160 bytes (0x000010 - 0x0000A0)
static_assert(sizeof(FSBStudioTransitionTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBWorldTransitionTableProperty) == 0x0088); // 136 bytes (0x000010 - 0x000088)
static_assert(sizeof(FSBHintTableProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBRestartRuleTableProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBCheatProgressQuestCommandsTableProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBGamePlayProgressRecordTableProperty) == 0x00F8); // 248 bytes (0x000010 - 0x0000F8)
static_assert(sizeof(FSBEditorTooltipTableProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBSoundEquipmentSetTableProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBSoundAttenuationEventTableProperty) == 0x0058); // 88 bytes (0x000010 - 0x000058)
static_assert(sizeof(FSBSoundEventLevelSequenceTableProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBSoundEventQuestTableProperty) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FSBSoundEventTableProperty) == 0x00C0); // 192 bytes (0x000010 - 0x0000C0)
static_assert(sizeof(FSBItemSpawnTableProperty) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FSBItemFishTableProperty) == 0x0100); // 256 bytes (0x000010 - 0x000100)
static_assert(sizeof(FSBAlbumTableProperty) == 0x0090); // 144 bytes (0x000010 - 0x000090)
static_assert(sizeof(FSBUIKeyImageAssetProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBUITextInputDefineProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBUITextActionFormatTableProperty) == 0x01F0); // 496 bytes (0x000010 - 0x0001F0)
static_assert(sizeof(FSBUIActionRequestTableProperty) == 0x0088); // 136 bytes (0x000010 - 0x000088)
static_assert(sizeof(FSBMultiPlayRuleTableProperty) == 0x00F8); // 248 bytes (0x000010 - 0x0000F8)
static_assert(sizeof(FSBMultiMapTableProperty) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FSBTransformCharacterTableProperty) == 0x0098); // 152 bytes (0x000010 - 0x000098)
static_assert(sizeof(FSBEventZoneWarpTableProperty) == 0x0070); // 112 bytes (0x000010 - 0x000070)
static_assert(sizeof(FSBZoneCampTableProperty) == 0x00A8); // 168 bytes (0x000010 - 0x0000A8)
static_assert(sizeof(FSBShopItemTableProperty) == 0x00A0); // 160 bytes (0x000010 - 0x0000A0)
static_assert(sizeof(FSBShopTableProperty) == 0x00A8); // 168 bytes (0x000010 - 0x0000A8)
static_assert(sizeof(FSBJsonShopItem_Money) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBSPLevelTableProperty) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FSBSpawnGroupRuleTableProperty) == 0x0060); // 96 bytes (0x000010 - 0x000060)
static_assert(sizeof(FSBEventInteractCampTableProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBCharacterDeadTableProperty) == 0x02D0); // 720 bytes (0x000010 - 0x0002D0)
static_assert(sizeof(FSBCharacterDetectAITableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBItemSkillEquipableTableProperty) == 0x0080); // 128 bytes (0x000010 - 0x000080)
static_assert(sizeof(FSBCheatCommandTableProperty) == 0x0090); // 144 bytes (0x000010 - 0x000090)
static_assert(sizeof(FSBTrophyTableProperty) == 0x0098); // 152 bytes (0x000010 - 0x000098)
static_assert(sizeof(FSBActivityTableProperty) == 0x0088); // 136 bytes (0x000010 - 0x000088)
static_assert(sizeof(FSBAchievementTableProperty) == 0x00F0); // 240 bytes (0x000010 - 0x0000F0)
static_assert(sizeof(FSBDifficultyStatGroupTableProperty) == 0x0068); // 104 bytes (0x000010 - 0x000068)
static_assert(sizeof(FSBCharacterLevelTableProperty) == 0x0060); // 96 bytes (0x000010 - 0x000060)
static_assert(sizeof(FSBZonePhaseEventTableProperty) == 0x00D8); // 216 bytes (0x000010 - 0x0000D8)
static_assert(sizeof(FSBPuzzleStringArrayTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBEventMetaAITableProperty) == 0x0058); // 88 bytes (0x000010 - 0x000058)
static_assert(sizeof(FSBEventGuideActionTableProperty) == 0x0058); // 88 bytes (0x000010 - 0x000058)
static_assert(sizeof(FSBGuideActionTableProperty) == 0x01A0); // 416 bytes (0x000010 - 0x0001A0)
static_assert(sizeof(FSBZoneEventActorBattleStateTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBEquipStatViewerTableProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBActorStatTextTableProperty) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FSBZoneLayerTableProperty) == 0x0038); // 56 bytes (0x000010 - 0x000038)
static_assert(sizeof(FSBEventRequestPathWayTableProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBEffectCombinationTableProperty) == 0x0080); // 128 bytes (0x000010 - 0x000080)
static_assert(sizeof(FSBSkillPriorityTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBPassiveSkillFunctionTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBAcquisitionSkillTableProperty) == 0x00E0); // 224 bytes (0x000010 - 0x0000E0)
static_assert(sizeof(FSBMetaAIBehaviorTableProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBMetaAITableProperty) == 0x0128); // 296 bytes (0x000010 - 0x000128)
static_assert(sizeof(FSBEventZoneEventActorControlTableProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBAIGroupTableProperty) == 0x0058); // 88 bytes (0x000010 - 0x000058)
static_assert(sizeof(FSBEventItemActionTableProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBEventLaserControlTableProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBEventAreaControlVolumeControlTableProperty) == 0x0058); // 88 bytes (0x000010 - 0x000058)
static_assert(sizeof(FSBAreaControlVolumeTableProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBEventEffectVolumeControlTableProperty) == 0x0038); // 56 bytes (0x000010 - 0x000038)
static_assert(sizeof(FSBEventEnvControlTableProperty) == 0x0070); // 112 bytes (0x000010 - 0x000070)
static_assert(sizeof(FSBZoneEventActorTableProperty) == 0x01A8); // 424 bytes (0x000010 - 0x0001A8)
static_assert(sizeof(FSBDropRateAdjustTableTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBRewardGroupTableProperty) == 0x0080); // 128 bytes (0x000010 - 0x000080)
static_assert(sizeof(FSBGearStatGroupTableProperty) == 0x0038); // 56 bytes (0x000010 - 0x000038)
static_assert(sizeof(FSBGearStatTableProperty) == 0x0070); // 112 bytes (0x000010 - 0x000070)
static_assert(sizeof(FSBItemReplacementTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBItemLureTableProperty) == 0x00B0); // 176 bytes (0x000010 - 0x0000B0)
static_assert(sizeof(FSBItemBulletTableProperty) == 0x0078); // 120 bytes (0x000010 - 0x000078)
static_assert(sizeof(FSBItemConsumableTableProperty) == 0x0058); // 88 bytes (0x000010 - 0x000058)
static_assert(sizeof(FSBItemEquipableTableProperty) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FSBItemTableProperty) == 0x01C0); // 448 bytes (0x000010 - 0x0001C0)
static_assert(sizeof(FSBZoneEnvNotifyInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBZoneEnvProgressNotifyInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBZoneEnvTargetStateInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBZoneEnvSpawnTableProperty) == 0x0508); // 1288 bytes (0x000010 - 0x000508)
static_assert(sizeof(FSBEffectDataList) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBZoneEventDataList) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBZoneEnvTableProperty) == 0x01C8); // 456 bytes (0x000010 - 0x0001C8)
static_assert(sizeof(FSBConditionGroupTableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBConditionTableProperty) == 0x0078); // 120 bytes (0x000010 - 0x000078)
static_assert(sizeof(FSBQuestTaskTableProperty) == 0x0128); // 296 bytes (0x000010 - 0x000128)
static_assert(sizeof(FSBQuestTaskGroupTableProperty) == 0x0118); // 280 bytes (0x000010 - 0x000118)
static_assert(sizeof(FSBEventQuestTableProperty) == 0x0038); // 56 bytes (0x000010 - 0x000038)
static_assert(sizeof(FSBQuestMissionTableProperty) == 0x0080); // 128 bytes (0x000010 - 0x000080)
static_assert(sizeof(FSBQuestTableProperty) == 0x0188); // 392 bytes (0x000010 - 0x000188)
static_assert(sizeof(FSBQuestEventInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBConditionTriggerTableProperty) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FSBCharacterTribeTableProperty) == 0x0098); // 152 bytes (0x000010 - 0x000098)
static_assert(sizeof(FSBLevelTargetFilterTableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBCharacterWeightTableProperty) == 0x0048); // 72 bytes (0x000010 - 0x000048)
static_assert(sizeof(FSBCharacterAppearanceTableProperty) == 0x0158); // 344 bytes (0x000010 - 0x000158)
static_assert(sizeof(FSBZoneEventActorActiveTableProperty) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FSBZoneEventUIActionTableProperty) == 0x0068); // 104 bytes (0x000010 - 0x000068)
static_assert(sizeof(FSBZoneEventObjControl) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBZoneEventAIDecoTableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBZoneEventItemTableProperty) == 0x0080); // 128 bytes (0x000010 - 0x000080)
static_assert(sizeof(FSBTheaterSelectDataTableProperty) == 0x00D8); // 216 bytes (0x000010 - 0x0000D8)
static_assert(sizeof(FSBZoneEventTheaterTableProperty) == 0x00F8); // 248 bytes (0x000010 - 0x0000F8)
static_assert(sizeof(FSBZoneEventZoneControlTableProperty) == 0x0038); // 56 bytes (0x000010 - 0x000038)
static_assert(sizeof(FSBNGPlusZoneEventSpawnTableProperty) == 0x0290); // 656 bytes (0x000010 - 0x000290)
static_assert(sizeof(FSBZoneEventSpawnTableProperty) == 0x0290); // 656 bytes (0x000010 - 0x000290)
static_assert(sizeof(FSBZoneEventLevelSeqTableProperty) == 0x0088); // 136 bytes (0x000010 - 0x000088)
static_assert(sizeof(FSBZoneEventActorEffectTableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBZoneEventTableProperty) == 0x0070); // 112 bytes (0x000010 - 0x000070)
static_assert(sizeof(FSBEffectVolumeTableProperty) == 0x00C0); // 192 bytes (0x000010 - 0x0000C0)
static_assert(sizeof(FSBZoneTriggerTableProperty) == 0x00A8); // 168 bytes (0x000010 - 0x0000A8)
static_assert(sizeof(FSBZoneTableProperty) == 0x0150); // 336 bytes (0x000010 - 0x000150)
static_assert(sizeof(FSBWorldTableProperty) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FSBProjectileTableProperty) == 0x0398); // 920 bytes (0x000010 - 0x000398)
static_assert(sizeof(FSBCharacterStanceTableProperty) == 0x0220); // 544 bytes (0x000010 - 0x000220)
static_assert(sizeof(FSBCharacterAnimSetTableProperty) == 0x0C98); // 3224 bytes (0x000010 - 0x000C98)
static_assert(sizeof(FSBCharacterAnimMoveInfoTableProperty) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FSBEquipmentMaterialTableProperty) == 0x0050); // 80 bytes (0x000010 - 0x000050)
static_assert(sizeof(FSBEquipmentTableProperty) == 0x0258); // 600 bytes (0x000010 - 0x000258)
static_assert(sizeof(FSBSkillCommandTableProperty) == 0x0100); // 256 bytes (0x000010 - 0x000100)
static_assert(sizeof(FSBSkillTargetFilterTableProperty) == 0x00B8); // 184 bytes (0x000010 - 0x0000B8)
static_assert(sizeof(FSBJsonSkillBranchEffect) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSkillTableProperty) == 0x0308); // 776 bytes (0x000010 - 0x000308)
static_assert(sizeof(FSBCharacterTableProperty) == 0x0548); // 1352 bytes (0x000010 - 0x000548)
static_assert(sizeof(FSBTableMetaData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBJsonEffectAction_FixedLocation) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBJsonEffectAction_UnmountingEquipment) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBJsonEffectAction_MountingEquipment) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBJsonEffectAction_ZoneEventActorDestruction) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBJsonEffectAction_ActionAssist) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(FSBJsonEffectAction_Countdown) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FSBJsonEffectAction_UIClientEvent) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBJsonEffectAction_FishingMode) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBJsonEffectAction_NotifyTagEvent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBJsonEffectAction_ItemRefill) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBJsonEffectAction_AdditiveSkillEnergyAmount) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBJsonEffectAction_AdditiveSkillCoolTime) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBJsonEffectAction_AdditiveSkillCommandCoolTime) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBJsonEffectAction_ActiveInteraction) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBJsonEffectAction_SummonActor) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FSBJsonEffectAction_TargetEncroachment) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBJsonEffectAction_TPSMiniGame) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBJsonEffectAction_TryLinkBreak) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBJsonEffectAction_PlayTheaterParam) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBJsonEffectAction_AreaTimeScale) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FSBJsonEffectAction_TimeScale) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBJsonInt) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FSBJsonFloat) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FSBJsonString) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBEdGraphNodePinInfo) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FSBEventMoveDataUpdate) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FSBFishingLogProperty) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSaveOptionData_Preset) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FSBGamePlayDebuggerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSBGraphicsOptionsDebuggerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSBHintProperty) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBItemAliasInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBItemSpawnCasterInfo) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(FSBItemSpawnFormation) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FSBItemInstanceForRPC) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FSBLevelSequenceAnimTrailTemplate) == 0x0058); // 88 bytes (0x000020 - 0x000058)
static_assert(sizeof(FSBLevelSequenceBKMovieTemplate) == 0x0050); // 80 bytes (0x000020 - 0x000050)
static_assert(sizeof(FSBLevelSequenceBookmarkTemplate) == 0x0038); // 56 bytes (0x000020 - 0x000038)
static_assert(sizeof(FSBLevelSequenceCameraActorBoundsTemplate) == 0x0058); // 88 bytes (0x000020 - 0x000058)
static_assert(sizeof(FSBLevelSequenceCameraActorBoundsTemplateTemplate) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(FSBLevelSequenceCameraLookAtTargetTemplate) == 0x0060); // 96 bytes (0x000020 - 0x000060)
static_assert(sizeof(FSBLevelSequenceCharacterActionTemplate) == 0x0050); // 80 bytes (0x000020 - 0x000050)
static_assert(sizeof(FSBLevelSequenceEnvControlVolumeTemplate) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FSBLevelSequenceEventActorActiveTemplate) == 0x0038); // 56 bytes (0x000020 - 0x000038)
static_assert(sizeof(FSBLevelSequenceEventActorAITemplate) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(FSBLevelSequenceEventActorBattleStateTemplate) == 0x0038); // 56 bytes (0x000020 - 0x000038)
static_assert(sizeof(FSBLevelSequenceEventActorEffectTemplate) == 0x0068); // 104 bytes (0x000020 - 0x000068)
static_assert(sizeof(FSBLevelSequenceEventAmbientSoundControlTemplate) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(FSBLevelSequenceEventBGMPriorityTemplate) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(FSBLevelSequenceEventBGMTemplate) == 0x0050); // 80 bytes (0x000020 - 0x000050)
static_assert(sizeof(FSBLevelSequenceEventGlobalValueTemplate) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FSBLevelSequenceEventHUDActionTemplate) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FSBLevelSequenceEventLockOnAtChatTemplate) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(FSBLevelSequenceEventPlayerActionTemplate) == 0x0060); // 96 bytes (0x000020 - 0x000060)
static_assert(sizeof(FSBLevelSequenceEventPlayerCameraShake2Template) == 0x0078); // 120 bytes (0x000020 - 0x000078)
static_assert(sizeof(FSBLevelSequenceEventPlayerCameraShakeTemplate) == 0x0040); // 64 bytes (0x000020 - 0x000040)
static_assert(sizeof(FSBLevelSequenceEventSoundEventTemplate) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FSBLevelSequenceEventSoundMixTemplate) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(FSBLevelSequenceEventSoundVolumeTemplate) == 0x0038); // 56 bytes (0x000020 - 0x000038)
static_assert(sizeof(FSBLevelSequenceEventTemplate) == 0x0020); // 32 bytes (0x000020 - 0x000020)
static_assert(sizeof(FSBLevelSequenceEventUIActionTemplate) == 0x0058); // 88 bytes (0x000020 - 0x000058)
static_assert(sizeof(FSBLevelSequenceEventVibrationTemplate) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FSBLevelSequenceEventZoneEventTemplate) == 0x0050); // 80 bytes (0x000020 - 0x000050)
static_assert(sizeof(FSBLevelSequenceEventZoneLoadWaitTemplate) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FSBLevelSequenceGraphicsAutoScaleTemplate) == 0x0048); // 72 bytes (0x000020 - 0x000048)
static_assert(sizeof(FSBLevelSequenceHLODTemplate) == 0x00B0); // 176 bytes (0x000020 - 0x0000B0)
static_assert(sizeof(FSBLevelSequenceLevelStreamingWaitTemplate) == 0x0060); // 96 bytes (0x000020 - 0x000060)
static_assert(sizeof(FSBLevelSequenceLookAtTargetTemplate) == 0x0058); // 88 bytes (0x000020 - 0x000058)
static_assert(sizeof(FSBLevelSequenceMoveToLocationTemplate) == 0x0088); // 136 bytes (0x000020 - 0x000088)
static_assert(sizeof(FSBLevelSequenceSetAnimBPPropertyTemplate) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(FSBLevelSequenceSkeletalAnimationSectionTemplateParameters) == 0x00A8); // 168 bytes (0x0000A0 - 0x0000A8)
static_assert(sizeof(FSBLevelSequenceSkeletalAnimationSectionTemplate) == 0x00C8); // 200 bytes (0x000020 - 0x0000C8)
static_assert(sizeof(FSBLevelSequenceSkeletalAnimMoveStateSectionTemplateParameters) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSBLevelSequenceSkeletalAnimMoveStateTemplate) == 0x0058); // 88 bytes (0x000020 - 0x000058)
static_assert(sizeof(FSBLevelSequenceSkipTemplate) == 0x0050); // 80 bytes (0x000020 - 0x000050)
static_assert(sizeof(FSBLevelSequenceSplineCineCamTrackingTemplate) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(FSBLevelSequenceTheaterAreaTemplate) == 0x0060); // 96 bytes (0x000020 - 0x000060)
static_assert(sizeof(FSBLevelSequenceTheaterAttachWidgetTemplate) == 0x0070); // 112 bytes (0x000020 - 0x000070)
static_assert(sizeof(FSBLevelSequenceTheaterDialogueTemplate) == 0x0050); // 80 bytes (0x000020 - 0x000050)
static_assert(sizeof(FSBLevelSequenceTheaterInputCounterTemplate) == 0x0140); // 320 bytes (0x000020 - 0x000140)
static_assert(sizeof(FSBLevelSequenceTheaterInputFeedbackTemplate) == 0x0038); // 56 bytes (0x000020 - 0x000038)
static_assert(sizeof(FSBLevelSequenceTheaterInteractionSelectTemplate) == 0x0040); // 64 bytes (0x000020 - 0x000040)
static_assert(sizeof(FSBLevelSequenceTheaterPlayerChoiceTemplate) == 0x0040); // 64 bytes (0x000020 - 0x000040)
static_assert(sizeof(FSBLevelSequenceTheaterQTEFlowData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBLevelSequenceTheaterQTETemplate) == 0x00E8); // 232 bytes (0x000020 - 0x0000E8)
static_assert(sizeof(FSBLevelSequenceTheaterReactionTriggerTemplate) == 0x0048); // 72 bytes (0x000020 - 0x000048)
static_assert(sizeof(FSBLevelSequenceTheaterSubtitleTemplate) == 0x0088); // 136 bytes (0x000020 - 0x000088)
static_assert(sizeof(FSBLevelSequenceVisibilityTagTemplate) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(FSBMovieSceneEventTriggerData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBMovieSceneEventChannel) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(FSBParallelTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSBPhotoModeTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSBKeyMappingsJsonObject) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBQuestDataDescriptionInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBSaveJsonData_RestorationMeshInfo) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FSBSaveJsonData_RestorationWorldActor) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FSBRootMotionTablePropertyInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBLocalPlayerData) == 0x0648); // 1608 bytes (0x000000 - 0x000648)
static_assert(sizeof(FSBSaveGameData_EndingInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSaveGameDataStorage) == 0x0EC8); // 3784 bytes (0x000000 - 0x000EC8)
static_assert(sizeof(FSBScanNavigationUnit) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSequencerReactionTriggerInputInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBPhysParticle) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBSignificanceManagerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSBSliceUpdateManagerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSpiderNavigationNode) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBStudioSequenceParameter) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBStudioActorAnimParam) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBTheaterInteractionSelectData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBTheaterInteractionData) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FSBTickManagerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSBUIActionEventBase) == 0x0001); // 0 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDClearInput) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventRefreshNikkeLostGoodsIndicator) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUIActionEventHUDViewStatValue) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventScreenShotCapture) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBUIActionEventAutoFocusCancel) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventAutoFocus) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHintShow) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventItemUse) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FSBUIActionEventLinkedItemUnlock) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventTrainingRoomVisible) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventTutorialTPSMode) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDItemEquipVisible) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventSaveState) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FSBUIActionEventUpdateTracking) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBUIActionEventPlayerHit) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventShowSpecialRewardUI) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBUIActionEventItemAdd) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUIActionEventAchieveNewQuestByFriendShip) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUIActionEventActionAssistStop) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FSBUIActionEventActionAssistStart) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBUIActionEventHUDGetNikkeLostArticle) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDTPSState) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDCountDownTimer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUIActionEventGainFriendShip) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUIActionEventTrainingRoomJump) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventTrainingRoomActiveStep) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBUIActionEventTrainingRoomSkillCommand) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBUIActionEventSetDeadUIDelayTime) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FSBUIActionEventHUDDroneGuideAction) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventManualUnlock) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDNotifyCanGain) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventItemGainClose) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventPlayerLevelUp) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBUIActionEventResetZoneNotice) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventGameMenuOpen) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDGuideMessageVisiblity) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDGuideMessage) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBUIActionEventHUDGuideMessageRequest) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUIActionEventHUDQuestInfo) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FSBUIActionEventCloseSettingPopup) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FSBUIActionEventRefreshSettingUI) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUIActionEventHUDCenterDot) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventWarpComplete) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDPlayerInfoBetaVisible) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDSkillDashVisible) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDSkillVisible) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDItemVisible) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDUnlockItemUtil) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDShowChange) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDBGChange) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDSizeChange) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDItemSlotRefreshItemInfo) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDRefresh) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventHUDVisible) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBUIActionEventEnableInput) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBUIActionEventLobbySlotPopupUpdate) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventLobbyStateUpdate) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventCurrencyCancelUpdate) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventTopTabVisibility) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FSBUIActionEventWorkshopUnlockTabClosed) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventWorkshopCoveredByPopup) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventWorkshopPopupClosed) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventWorkshopPopupOpen) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBUIActionEventNotifyUpdate) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBUIActionEventQuestTaskGroupChangedState) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBUIActionEventQuestTaskUpdate) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBUIActionEventChangedAcquisitionSkill) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUIActionEventAcquireSkill) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FSBUIActionEventSkillTreeUnlock) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBUIActionEventUpdateIndicator) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBUIActionEventUnlockBurst) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBSettingComboBoxItemData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBUILogicInitParameter) == 0x0001); // 0 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBMailBoxItemData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBTurntableItemData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBBossChallengeRewardMissionItemData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBBossChallengeListData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSBManualGroupListData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBItemNewNoticeListData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBGuideRewardListData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBSoundStatLogData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSoundEventFixedLogData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBSoundEventLogData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBWorkshopExospineTitleData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBWorkshopNanoSuitTitleData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBListTabData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBRealTimeDebugProperty) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSBDebugViewerProperty) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBDebugViewerData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBMultiPlayPlayerData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBTeleportCampData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBBHUDCommandCheatData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBGameMenuTaskData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBRequestTitleData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBGameMenuQuestTitleData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBGameMenuEquipStatViewerData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBGameMenuEquipInvenData) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FSBUILogicInitParameterCanCollection) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUILogicInitParameterCanGain) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBUILogicInitParameterCommonCurrency) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBUILogicInitParameterCommonMessageBoxV3) == 0x00C0); // 192 bytes (0x000000 - 0x0000C0)
static_assert(sizeof(FSBUILogicInitParameterCoupon) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUILogicInitParameterDLCPurchasePopup) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUILogicEventKey) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBUILogicInitParameterFinishEve) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUILogicInitParameterFishingBoxReward) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBUILogicInitParameterFishingResult) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBUILogicInitParameterGuideRewardListData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBUILogicInitParameterGuideRewardList) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBUILogicInitParameterGuideUnlockMode) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUILogicInitParameterGuideVideoData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBUILogicInitParameterGuideVideo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBUILogicInitParameterHairSalon) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBHairSalonColorData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBUILogicInitParameterHUDEnhanceResult) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBUILogicHUDItemEquipData) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSBUILogicHUDTPSBulletData) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSBUILogicInitParameterHUDTPSNikkeMode) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBUILogicPopupInitParameter) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUILogicViewerInitParameter) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUILogicInitParameterLobby) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUILogicInitParameterMailBox) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUIMessageBoxListMessageData) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FSBUILogicInitParameterMessageBoxList) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBUILogicInitParameterNextChapterPopup) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBUILogicInitParameterNikkeLostArticlePopup) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBUILogicInitParameterNikkeMinigameResult) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBUILogicInitParameterRecordPopup) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBUILogicInitParameterRequestBoard) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUILogicShopPopupInitParameter) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBUILogicTestTextCorrectTextInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBUILogicInitParameterTrialBossChallengeMessagePopup) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBUILogicInitParameterTrialShopApp) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBBossChallengeRewardItemData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBHairSalonItemData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSBNightOperationItemData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBAlbumItemData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBShopItemData) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FSBVibrationTemplate) == 0x0050); // 80 bytes (0x000020 - 0x000050)
static_assert(sizeof(FSBWebJobSchemaBase) == 0x0001); // 0 bytes (0x000000 - 0x000001)
static_assert(sizeof(FSBWebJobSchemaCouponUserInfo) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FSBWebJobSchemaGetCoupon) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSBWebJobSchemaPosition) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBWebJobSchemaPlayerEventHeader) == 0x00D8); // 216 bytes (0x000000 - 0x0000D8)
static_assert(sizeof(FSBWebJobSchemaSaveLoadEvent) == 0x00F8); // 248 bytes (0x0000D8 - 0x0000F8)
static_assert(sizeof(FSBWebJobSchemaActivityEvent) == 0x0108); // 264 bytes (0x0000D8 - 0x000108)
static_assert(sizeof(FSBWebJobSchemaChangeSPExpEvent) == 0x00F8); // 248 bytes (0x0000D8 - 0x0000F8)
static_assert(sizeof(FSBWebJobSchemaDamageEvent) == 0x0120); // 288 bytes (0x0000D8 - 0x000120)
static_assert(sizeof(FSBWebJobSchemaKillEvent) == 0x00F8); // 248 bytes (0x0000D8 - 0x0000F8)
static_assert(sizeof(FSBWebJobSchemaBuyItemEvent) == 0x0110); // 272 bytes (0x0000D8 - 0x000110)
static_assert(sizeof(FSBWebJobSchemaSellFishEvent) == 0x0100); // 256 bytes (0x0000D8 - 0x000100)
static_assert(sizeof(FSBWebJobSchemaFishingResultEvent) == 0x0100); // 256 bytes (0x0000D8 - 0x000100)
static_assert(sizeof(FSBWebJobSchemaFishingFightingEvent) == 0x00F8); // 248 bytes (0x0000D8 - 0x0000F8)
static_assert(sizeof(FSBWebJobSchemaFishingCastingEvent) == 0x00F8); // 248 bytes (0x0000D8 - 0x0000F8)
static_assert(sizeof(FSBWebJobSchemaSpawnItemEvent) == 0x0180); // 384 bytes (0x0000D8 - 0x000180)
static_assert(sizeof(FSBWebJobSchemaNanoSuitEvent) == 0x0108); // 264 bytes (0x0000D8 - 0x000108)
static_assert(sizeof(FSBWebJobSchemaQuestEvent) == 0x0118); // 280 bytes (0x0000D8 - 0x000118)
static_assert(sizeof(FSBWebJobSchemaAcquisitionSkillEvent) == 0x0110); // 272 bytes (0x0000D8 - 0x000110)
static_assert(sizeof(FSBWebJobSchemaLevelUpEvent) == 0x0110); // 272 bytes (0x0000D8 - 0x000110)
static_assert(sizeof(FSBWebJobSchemaGainCoreEvent) == 0x0118); // 280 bytes (0x0000D8 - 0x000118)
static_assert(sizeof(FSBWebJobSchemaItemAmount) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBWebJobSchemaSkillAmount) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBWebJobSchemaDefeatEvent) == 0x01C0); // 448 bytes (0x0000D8 - 0x0001C0)
static_assert(sizeof(FSBWebJobSchemaAcquireItemEvent) == 0x0110); // 272 bytes (0x0000D8 - 0x000110)
static_assert(sizeof(FSBWebJobSchemaConsumeItemEvent) == 0x0110); // 272 bytes (0x0000D8 - 0x000110)
static_assert(sizeof(FSBWebJobSchemaPlayerDeadEvent) == 0x0108); // 264 bytes (0x0000D8 - 0x000108)
static_assert(sizeof(FSBWebJobSchemaChangeCoinEvent) == 0x00F0); // 240 bytes (0x0000D8 - 0x0000F0)
static_assert(sizeof(FSBWebJobSchemaChangeGoldEvent) == 0x00F0); // 240 bytes (0x0000D8 - 0x0000F0)
static_assert(sizeof(FSBWebJobSchemaGetPublicIP) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBWebJobSchemaUpdateCognitoStatus) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FSBWebJobSchemaSignInCognito) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBWebJobSchemaSendHello) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBWebJobSchemaUpdateDummyState) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBWebJobSchemaGetNetCommand) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBWebJobSchemaDefeatBoss) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBWebJobSchemaMatchResult) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBWebJobSchemaMatchStop) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBWebJobSchemaMatchStatus) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FSBWebJobSchemaMatchRequest) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSBWebJobSchemaJiraCommon) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSBWebJobSchemaJiraIssuePriority) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSBWebJobSchemaJiraIssueCreator) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBWebJobSchemaJiraIssueCommentAuthor) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSBWebJobSchemaJiraIssueCommentInfo) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FSBWebJobSchemaJiraIssueComment) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBWebJobSchemaJiraIssueVote) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBWebJobSchemaJiraIssueAssignee) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBWebJobSchemaJiraIssueStatus) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSBWebJobSchemaJiraIssueFields) == 0x0128); // 296 bytes (0x000000 - 0x000128)
static_assert(sizeof(FSBWebJobSchemaJiraIssue) == 0x0150); // 336 bytes (0x000028 - 0x000150)
static_assert(sizeof(FSBWidgetComponentInstanceData) == 0x00C8); // 200 bytes (0x0000B8 - 0x0000C8)
static_assert(sizeof(FSBWorldLevelManagerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSBZoneEnvSpawnInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSBEnvProgressData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSBToolDataDescriptionInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(offsetof(FSBCineCameraActorBoundsBoneData, BoneArray) == 0x0008);
static_assert(offsetof(FSBCineCameraActorBoundsBoneData, FocusBone) == 0x001C);
static_assert(offsetof(USBCineCameraActorBoundsBoneTemplateData, ActorBoneNameArray) == 0x0030);
static_assert(offsetof(FSBAIFormationInfo, Name) == 0x0000);
static_assert(offsetof(FSBAIFormationInfo, LocationArray) == 0x0008);
static_assert(offsetof(USBAIFormationData, AIFormationInfoArray) == 0x0030);
static_assert(offsetof(USBAIFormationData, AIFormationInfoMap) == 0x0040);
static_assert(offsetof(ASBAIFormationDataPreviewActor, ActorRootComponent) == 0x02C8);
static_assert(offsetof(ASBAIFormationDataPreviewActor, ArrowComponent) == 0x02D0);
static_assert(offsetof(ASBAIFormationDataPreviewActor, SpriteComponent) == 0x02D8);
static_assert(offsetof(ASBAIFormationDataPreviewActor, AIFormationData) == 0x02E0);
static_assert(offsetof(FSBAppearanceShow, Appearance) == 0x0000);
static_assert(offsetof(FSBAppearanceShow, BehaviorArriveShow) == 0x0008);
static_assert(offsetof(FSBAppearanceShow, BehaviorLeaveShow) == 0x0010);
static_assert(offsetof(FSBAppearanceShow, BehaviorActiveShowArray) == 0x0018);
static_assert(offsetof(FSBAppearanceShow, BehaviorIdleShowArray) == 0x0028);
static_assert(offsetof(FSBBehaviorIterateShowInfo, ShowPath) == 0x0008);
static_assert(offsetof(FSBBehaviorPositionInfo, Transform) == 0x0000);
static_assert(offsetof(FSBAIWorldNode, NodeType) == 0x0000);
static_assert(offsetof(FSBAIWorldNode, ValidJobArray) == 0x0008);
static_assert(offsetof(FSBAIWorldNode, ValidTagArray) == 0x0018);
static_assert(offsetof(FSBAIWorldNode, InvalidTagArray) == 0x0028);
static_assert(offsetof(FSBAIWorldNode, Behavior) == 0x0040);
static_assert(offsetof(FSBAIWorldNode, BehaviorStance) == 0x0041);
static_assert(offsetof(FSBAIWorldNode, BehaviorArriveShowPath) == 0x0048);
static_assert(offsetof(FSBAIWorldNode, BehaviorLeaveShowPath) == 0x0058);
static_assert(offsetof(FSBAIWorldNode, BehaviorActiveShowArray) == 0x0068);
static_assert(offsetof(FSBAIWorldNode, BehaviorIdleShowArray) == 0x0078);
static_assert(offsetof(FSBAIWorldNode, BehaviorShowByAppearance) == 0x0088);
static_assert(offsetof(FSBAIWorldNode, BehaviorRunBlendSpaceRelativePath) == 0x00A0);
static_assert(offsetof(FSBAIWorldNode, ConditionActiveBehaviorNodeShowPath) == 0x00C0);
static_assert(offsetof(FSBAIWorldNode, BehaviorIterateShowInfoArray) == 0x00D0);
static_assert(offsetof(FSBAIWorldNode, ConditionActiveBehaviorNodeIndexArray) == 0x00F8);
static_assert(offsetof(FSBAIWorldNode, SpecialBehaviorTag) == 0x0108);
static_assert(offsetof(FSBAIWorldNode, BehaviorAlias) == 0x0110);
static_assert(offsetof(FSBAIWorldNode, OverrideLookAtType) == 0x0120);
static_assert(offsetof(FSBAIWorldNode, OverrideEnableShoulderCharge) == 0x0140);
static_assert(offsetof(FSBAIWorldNode, SubBehaviorArriveShowPath) == 0x0170);
static_assert(offsetof(FSBAIWorldNode, SubBehaviorLeaveShowPath) == 0x0180);
static_assert(offsetof(FSBAIWorldNode, Location) == 0x0194);
static_assert(offsetof(FSBAIWorldNode, ForwardVector) == 0x01A0);
static_assert(offsetof(FSBAIWorldNode, LinkNodeIndexArray) == 0x01B8);
static_assert(offsetof(FSBAIWorldNode, LinkSubBehaviorNodeIndexArray) == 0x01C8);
static_assert(offsetof(FSBAIWorldNode, LinkNextBehaviorNodeIndexArray) == 0x01D8);
static_assert(offsetof(FSBAIWorldNode, BehaviorTransformArray) == 0x01E8);
static_assert(offsetof(FSBAIWorldNode, InteractionTransform) == 0x0200);
static_assert(offsetof(ASBAIWorldManager, NodeArray) == 0x02C8);
static_assert(offsetof(ASBAIWorldManager, RoadNodeArray) == 0x02D8);
static_assert(offsetof(ASBAIWorldManager, BehaviorNodeArray) == 0x02E8);
static_assert(offsetof(ASBAIWorldManager, TagNodeArray) == 0x02F8);
static_assert(offsetof(ASBAIWorldManager, AIFormationData) == 0x0308);
static_assert(offsetof(FSBAIWorldNodeBehaviorIterateShowInfo, Show) == 0x0008);
static_assert(offsetof(ASBAIWorldNodeActor, ActorRootComponent) == 0x02C8);
static_assert(offsetof(ASBAIWorldNodeActor, StaticMeshComponent) == 0x02D0);
static_assert(offsetof(ASBAIWorldNodeActor, TextRenderComponent) == 0x02D8);
static_assert(offsetof(ASBAIWorldNodeActor, Description) == 0x02E0);
static_assert(offsetof(ASBAIWorldNodeActor, NodeType) == 0x0300);
static_assert(offsetof(ASBAIWorldNodeActor, ValidJobArray) == 0x0308);
static_assert(offsetof(ASBAIWorldNodeActor, ValidTagArray) == 0x0318);
static_assert(offsetof(ASBAIWorldNodeActor, InvalidTagArray) == 0x0328);
static_assert(offsetof(ASBAIWorldNodeActor, Behavior) == 0x0340);
static_assert(offsetof(ASBAIWorldNodeActor, BehaviorStance) == 0x0341);
static_assert(offsetof(ASBAIWorldNodeActor, BehaviorArriveShow) == 0x0358);
static_assert(offsetof(ASBAIWorldNodeActor, BehaviorLeaveShow) == 0x0360);
static_assert(offsetof(ASBAIWorldNodeActor, BehaviorActiveShowArray) == 0x0368);
static_assert(offsetof(ASBAIWorldNodeActor, BehaviorIdleShowArray) == 0x0378);
static_assert(offsetof(ASBAIWorldNodeActor, BehaviorShowByAppearance) == 0x0388);
static_assert(offsetof(ASBAIWorldNodeActor, BehaviorRunBlendSpaceRelativePath) == 0x03A0);
static_assert(offsetof(ASBAIWorldNodeActor, Condition_CheckActiveBehaviorNode) == 0x03C0);
static_assert(offsetof(ASBAIWorldNodeActor, ConditionActiveBehaviorNodeShow) == 0x03C8);
static_assert(offsetof(ASBAIWorldNodeActor, BehaviorIterateShowArray) == 0x03D0);
static_assert(offsetof(ASBAIWorldNodeActor, BehaviorAlias) == 0x03F4);
static_assert(offsetof(ASBAIWorldNodeActor, SpecialBehaviorTag) == 0x03FC);
static_assert(offsetof(ASBAIWorldNodeActor, OverrideLookAtType) == 0x040C);
static_assert(offsetof(ASBAIWorldNodeActor, OverrideEnableShoulderCharge) == 0x042C);
static_assert(offsetof(ASBAIWorldNodeActor, NextSubBehaviorNode) == 0x0450);
static_assert(offsetof(ASBAIWorldNodeActor, SubBehaviorArriveShow) == 0x0458);
static_assert(offsetof(ASBAIWorldNodeActor, SubBehaviorLeaveShow) == 0x0460);
static_assert(offsetof(ASBAmbientSoundVolume, Sound) == 0x0328);
static_assert(offsetof(ASBAmbientSoundVolume, LevelObjOrigin) == 0x0358);
static_assert(offsetof(ASBAmbientSoundVolume, LevelObjExtent) == 0x0364);
static_assert(offsetof(USBAnimNotify_CharSESound, VoiceKey) == 0x0038);
static_assert(offsetof(USBAnimNotify_CharSESound, ReactionKey) == 0x0040);
static_assert(offsetof(USBAnimNotify_CharSESound, HitKey) == 0x0048);
static_assert(offsetof(USBAnimNotify_CharSESound, HitType) == 0x0050);
static_assert(offsetof(USBAnimNotify_CharSESound, ConditionKey) == 0x0054);
static_assert(offsetof(USBAnimNotify_CharSESound, RelativeLocation) == 0x0060);
static_assert(offsetof(USBAnimNotify_CharSESound, DefaultSound) == 0x0070);
static_assert(offsetof(USBAnimNotify_CharSESound, DefaultSoundClass) == 0x0080);
static_assert(offsetof(USBAnimNotify_CharSESound, DefaultAttenuation) == 0x0088);
static_assert(offsetof(USBAnimNotify_EventMoveIK, EventMoveIKData) == 0x0038);
static_assert(offsetof(FSBSoundIntParamInfo, ParamName) == 0x0000);
static_assert(offsetof(USBAnimNotify_FootStep, FootStepSetKey) == 0x0038);
static_assert(offsetof(USBAnimNotify_FootStep, IntParams) == 0x0048);
static_assert(offsetof(USBAnimNotify_PhysicsReset, PhysicsResetSlot) == 0x0038);
static_assert(offsetof(USBAnimNotify_PlayCustomAnimAdditive, AdditiveAnimation) == 0x0038);
static_assert(offsetof(USBAnimNotify_PlayMaterialParam, ParameterName) == 0x0038);
static_assert(offsetof(USBAnimNotify_PlayMaterialParam, ParamType) == 0x0040);
static_assert(offsetof(USBAnimNotify_PlayMaterialParam, ParamValue1) == 0x0048);
static_assert(offsetof(USBAnimNotify_PlayMaterialParam, ParamValue2) == 0x00D0);
static_assert(offsetof(USBAnimNotify_PlayMaterialParam, ParamValue3) == 0x0158);
static_assert(offsetof(USBAnimNotify_PlayMaterialParam, MeshSlotIndex) == 0x01E8);
static_assert(offsetof(USBAnimNotify_SetAnimBPFloatProperty, Name) == 0x0038);
static_assert(offsetof(FSBAnimNotifyHapticProperty, AttachName) == 0x000C);
static_assert(offsetof(FSBAnimNotifyHapticProperty, AttenuationOverride) == 0x0018);
static_assert(offsetof(USBAnimNotify_Vibration, VibrationSet) == 0x0038);
static_assert(offsetof(USBAnimNotify_Vibration, HapticProperty) == 0x0040);
static_assert(offsetof(USBAnimNotify_Vibration, ForceFeedbackProperty) == 0x0060);
static_assert(offsetof(USBAnimNotifyState_PlayAnimByMeshSlot, MeshSlot) == 0x0030);
static_assert(offsetof(USBAnimNotifyState_PlayAnimByMeshSlot, AnimResourcePath) == 0x0038);
static_assert(offsetof(USBAnimNotifyState_PlayAnimByMeshSlot, Target) == 0x0054);
static_assert(offsetof(USBAnimNotifyState_PlaySound, Sound) == 0x0030);
static_assert(offsetof(USBAnimNotifyState_PlaySound, AttachName) == 0x0048);
static_assert(offsetof(USBAnimNotifyState_PlaySound, SoundClassOverride) == 0x0050);
static_assert(offsetof(USBAnimNotifyState_PlaySound, AttenuationOverride) == 0x0058);
static_assert(offsetof(USBAnimNotifyState_PlaySound, AudioComponentMap) == 0x0060);
static_assert(offsetof(FSBAnimNotifyStateHapticProperty, AttachName) == 0x0010);
static_assert(offsetof(FSBAnimNotifyStateHapticProperty, AttenuationOverride) == 0x0018);
static_assert(offsetof(FSBAnimNotifyStateForceFeedbackProperty, AttenuationSettings) == 0x0008);
static_assert(offsetof(USBAnimNotifyState_Vibration, VibrationSet) == 0x0030);
static_assert(offsetof(USBAnimNotifyState_Vibration, HapticProperty) == 0x0038);
static_assert(offsetof(USBAnimNotifyState_Vibration, ForceFeedbackProperty) == 0x0058);
static_assert(offsetof(USBAnimNotifyState_Vibration, VibrationComponentMap) == 0x0068);
static_assert(offsetof(FSBTableAliasName, Alias) == 0x0000);
static_assert(offsetof(FSBTableAliasName, TableType) == 0x0008);
static_assert(offsetof(ASBAreaControlVolume, AreaControlVolumeAlias) == 0x0310);
static_assert(offsetof(ASBAreaControlVolume, MainPrimitiveComponentName) == 0x0320);
static_assert(offsetof(ASBAreaControlVolume, BlockType) == 0x0330);
static_assert(offsetof(ASBAreaControlVolume, AdmissionPossibleTribeArray) == 0x0338);
static_assert(offsetof(ASBAreaControlVolume, AdmissionPossibleCharacterTagArray) == 0x0348);
static_assert(offsetof(ASBAreaControlVolume, SaveType) == 0x0358);
static_assert(offsetof(ASBAreaControlVolume, DummyRoot) == 0x0360);
static_assert(offsetof(ASBAreaControlVolume, MoveLocationWhenBlockingHitComponent) == 0x0368);
static_assert(offsetof(ASBAreaControlVolume, CollisionControlComponents) == 0x0378);
static_assert(offsetof(ASBAreaControlVolume, ForceMovePlayerCharacter) == 0x0398);
static_assert(offsetof(USBBGMSoundComponent, BGMTrack) == 0x0570);
static_assert(offsetof(USBBGMSoundComponent, AttachActor) == 0x0578);
static_assert(offsetof(FSBBGMSoundInfo, SoundCue) == 0x0000);
static_assert(offsetof(FSBBGMSoundInfo, RestartType) == 0x0018);
static_assert(offsetof(FSBBGMSoundInfo, ClockSetting) == 0x0028);
static_assert(offsetof(FSBBGMSoundInfo, QuartzClockEventBoundary) == 0x0048);
static_assert(offsetof(FSBBGMEndSoundInfo, SoundCue) == 0x0000);
static_assert(offsetof(FSBBGMSoundTrackInfo, SoundCue) == 0x0000);
static_assert(offsetof(USBBGMSoundTrack, DefaultBGM) == 0x0030);
static_assert(offsetof(USBBGMSoundTrack, DefaultBGMEnd) == 0x0088);
static_assert(offsetof(USBBGMSoundTrack, BattleBGM) == 0x00A0);
static_assert(offsetof(USBBGMSoundTrack, BattleBGMEnd) == 0x00F8);
static_assert(offsetof(USBBGMSoundTrack, BattleBGMClear) == 0x0110);
static_assert(offsetof(USBBGMSoundTrack, DefaultBGMInfo) == 0x0128);
static_assert(offsetof(USBBGMSoundTrack, DefaultEndSoundInfo) == 0x0148);
static_assert(offsetof(USBBGMSoundTrack, BattleBGMInfo) == 0x0168);
static_assert(offsetof(USBBGMSoundTrack, BattleClearSoundInfo) == 0x0188);
static_assert(offsetof(USBBGMSoundTrack, BattleEndSoundInfo) == 0x01A8);
static_assert(offsetof(FSBBGMSoundInfoV2, SoundBase) == 0x0000);
static_assert(offsetof(FSBBGMSoundInfoV2, KeepPlayTimeKey) == 0x0008);
static_assert(offsetof(FSBBGMSoundInfoV2, IntParams) == 0x0010);
static_assert(offsetof(FSBBGMSoundInfoV2, ClockSetting) == 0x0070);
static_assert(offsetof(FSBAlias, Alias) == 0x0000);
static_assert(offsetof(FSBAlias, Custom_BrowseClassName) == 0x0010);
static_assert(offsetof(FSBBGMEventBattleSoundInfo, EventBattleAlias) == 0x0000);
static_assert(offsetof(FSBBGMEventBattleSoundInfo, ConditionType) == 0x0008);
static_assert(offsetof(FSBBGMEventBattleSoundInfo, TargetRankCondition) == 0x0010);
static_assert(offsetof(FSBBGMEventBattleSoundInfo, TargetCharacterAlias) == 0x0020);
static_assert(offsetof(FSBBGMEventBattleSoundInfo, BGMInfo) == 0x0030);
static_assert(offsetof(FSBBGMFinishSoundInfo, SoundBase) == 0x0000);
static_assert(offsetof(FSBBGMFinishSoundInfo, BGMStateCondition) == 0x0008);
static_assert(offsetof(FSBBGMFinishSoundInfo, EventBattleStates) == 0x0010);
static_assert(offsetof(USBBGMSoundTrackV2, Default) == 0x0030);
static_assert(offsetof(USBBGMSoundTrackV2, Battle) == 0x00C8);
static_assert(offsetof(USBBGMSoundTrackV2, EventBattleArray) == 0x0160);
static_assert(offsetof(USBBGMSoundTrackV2, BattleFinishArray) == 0x0170);
static_assert(offsetof(ASBBGMSoundVolume, BGMTrack) == 0x0328);
static_assert(offsetof(ASBBlockingVolume, AdmissionPossibleTribeArray) == 0x0358);
static_assert(offsetof(ASBBlockingVolume, ControlActive_LaserOwnerActor) == 0x0370);
static_assert(offsetof(ASBBlockSaveVolume, SectorID) == 0x0318);
static_assert(offsetof(ASBBlockSaveVolume, LevelObjOrigin) == 0x0324);
static_assert(offsetof(ASBBlockSaveVolume, LevelObjExtent) == 0x0330);
static_assert(offsetof(ASBBobber, BindingFish) == 0x0330);
static_assert(offsetof(ASBBobber, State) == 0x0338);
static_assert(offsetof(ASBBobber, FishRotation) == 0x033C);
static_assert(offsetof(ASBBobber, FightingMovePatterns) == 0x0358);
static_assert(offsetof(ASBBobber, TimingFinalPullSpeed) == 0x0368);
static_assert(offsetof(ASBBobber, CurrentMovePattern) == 0x03C8);
static_assert(offsetof(ASBBobber, SkeletalMeshComponent) == 0x03D0);
static_assert(offsetof(ASBBobber, Caster) == 0x03D8);
static_assert(offsetof(USBBTDecorator_SbBlackboard, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbBlackboard, CompareOP) == 0x0069);
static_assert(offsetof(USBBTDecorator_SbBlackboard, VarType) == 0x006A);
static_assert(offsetof(USBBTDecorator_SbBlackboard, KeyName) == 0x006C);
static_assert(offsetof(USBBTDecorator_SbBlackboard, VectorValue) == 0x007C);
static_assert(offsetof(USBBTDecorator_SbBlackboard, SetValueType) == 0x0089);
static_assert(offsetof(USBBTDecorator_SbBlackboard, SetVectorValue) == 0x0094);
static_assert(offsetof(USBBTDecorator_SbCheckActorEffect, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbCheckActorEffect, EffectAlias) == 0x006C);
static_assert(offsetof(USBBTDecorator_SbCheckActorEffect, AndCheck_EffectAliasArray) == 0x0078);
static_assert(offsetof(USBBTDecorator_SbCheckActorEffect, OrCheck_EffectAliasArray) == 0x0088);
static_assert(offsetof(USBBTDecorator_SbCheckActorStat, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbCheckActorStat, CheckStat) == 0x0069);
static_assert(offsetof(USBBTDecorator_SbCheckActorStat, CompareOP) == 0x0070);
static_assert(offsetof(USBBTDecorator_SbCheckActorState, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbCheckActorState, CheckState) == 0x0069);
static_assert(offsetof(USBBTDecorator_SbCheckActorTag, CheckType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbCheckActorTag, ActorTag) == 0x006C);
static_assert(offsetof(USBBTDecorator_SbCheckAnimState, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbCheckAnimState, AnimState) == 0x0069);
static_assert(offsetof(USBBTDecorator_SbCheckLastAttackedTime, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbCheckStance, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbCheckStance, StanceName) == 0x006C);
static_assert(offsetof(USBBTDecorator_SbCheckStance, StanceNameArray) == 0x0078);
static_assert(offsetof(USBBTDecorator_SbCheckStance, CompareType) == 0x0088);
static_assert(offsetof(USBBTDecorator_SbCheckSummonedCount, CompareOP) == 0x006C);
static_assert(offsetof(USBBTDecorator_SbCheckTarget, TargetRelation) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbCheckZoneEnvState, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbCheckZoneEnvState, StateTagName) == 0x006C);
static_assert(offsetof(USBBTDecorator_SbDetectResult, CompareDetectResult) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbDistanceToHome, CompareOP) == 0x006C);
static_assert(offsetof(USBBTDecorator_SbDistanceToTarget, CompareOP) == 0x006C);
static_assert(offsetof(USBBTDecorator_SbIsActiveSkill, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbIsAlive, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbIsAlive, CheckType) == 0x0069);
static_assert(offsetof(USBBTDecorator_SbIsBattleMode, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbIsEmptyEquipment, EquipmentType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbIsFindPathWay, PathWayAlias) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbIsFlying, ActorType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbIsRunSpiderNav, SpiderNavigationPlaceType) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbLastSkillHitResult, HitResult) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbRandom, CompareOP) == 0x0070);
static_assert(offsetof(USBBTDecorator_SbTimeLimit, TimerName) == 0x0068);
static_assert(offsetof(USBBTDecorator_SbUseableTime, KeyName) == 0x0068);
static_assert(offsetof(USBBTTask_SbBlackboard, VarType) == 0x0071);
static_assert(offsetof(USBBTTask_SbBlackboard, KeyName) == 0x0074);
static_assert(offsetof(USBBTTask_SbBlackboard, VectorValue) == 0x0084);
static_assert(offsetof(USBBTTask_SbCautionToTarget, SetMoveType) == 0x0070);
static_assert(offsetof(USBBTTask_SbCautionToTarget, CheckSkillFlag) == 0x0078);
static_assert(offsetof(USBBTTask_SbCautionToTarget, WaitShowPath) == 0x00B8);
static_assert(offsetof(USBBTTask_SbCautionToTarget, LeftSideMoveEndUseSkillCommandWhenTaskEnd) == 0x00D8);
static_assert(offsetof(USBBTTask_SbCautionToTarget, RightSideMoveEndUseSkillCommandWhenTaskEnd) == 0x00E0);
static_assert(offsetof(USBBTTask_SbDetectTarget, BaseBone) == 0x0070);
static_assert(offsetof(USBBTTask_SbDetectTarget, FindOP) == 0x0080);
static_assert(offsetof(USBBTTask_SbDetectTarget, TargetCancel) == 0x0081);
static_assert(offsetof(USBBTTask_SbDetectTarget, EffectAliasArray) == 0x0088);
static_assert(offsetof(USBBTTask_SbDetectTarget, NoneEffectAliasArray) == 0x0098);
static_assert(offsetof(USBBTTask_SbFollowTarget, MoveState) == 0x0070);
static_assert(offsetof(USBBTTask_SbFollowTarget, TargetType) == 0x0071);
static_assert(offsetof(USBBTTask_SbFollowTarget, DroneFollowLocationType) == 0x0072);
static_assert(offsetof(USBBTTask_SbFollowTarget, SystemTypeKey) == 0x0078);
static_assert(offsetof(USBBTTask_SbFollowTarget, LocalRelativeLocation) == 0x009C);
static_assert(offsetof(USBBTTask_SbFollowTarget, LookAtRelativeLocation) == 0x00A8);
static_assert(offsetof(USBBTTask_SbMountingEquipment, MoveState) == 0x0070);
static_assert(offsetof(USBBTTask_SbMountingEquipment, FindTargetFilterAlias) == 0x0078);
static_assert(offsetof(USBBTTask_SbMoveToFlyingPoint, FlyingPoints) == 0x0070);
static_assert(offsetof(USBBTTask_SbMoveToHome, PathWayAlias) == 0x0070);
static_assert(offsetof(USBBTTask_SbMoveToHome, MoveState) == 0x0081);
static_assert(offsetof(USBBTTask_SbMoveToHome, BaseBone) == 0x0088);
static_assert(offsetof(USBBTTask_SbMoveToHome, FindOP) == 0x0098);
static_assert(offsetof(USBBTTask_SbMoveToHome, TargetCancel) == 0x0099);
static_assert(offsetof(USBBTTask_SbMoveToHome, EffectAliasArray) == 0x00A0);
static_assert(offsetof(USBBTTask_SbMoveToHome, NoneEffectAliasArray) == 0x00B0);
static_assert(offsetof(USBBTTask_SbMoveToTarget, MoveState) == 0x0070);
static_assert(offsetof(USBBTTask_SbMoveToTarget, SkillType) == 0x0078);
static_assert(offsetof(USBBTTask_SbMoveToTarget, BrokenPathShowPath) == 0x0090);
static_assert(offsetof(USBBTTask_SbPlayShow, BaseBone) == 0x0078);
static_assert(offsetof(USBBTTask_SbPlayShow, FindOP) == 0x0088);
static_assert(offsetof(USBBTTask_SbPlayShow, TargetCancel) == 0x0089);
static_assert(offsetof(USBBTTask_SbPlayShow, EffectAliasArray) == 0x0090);
static_assert(offsetof(USBBTTask_SbPlayShow, NoneEffectAliasArray) == 0x00A0);
static_assert(offsetof(USBBTTask_SbPlayShow, ShowPath) == 0x00B0);
static_assert(offsetof(USBBTTask_SBResetTimeLimit, TimerName) == 0x0070);
static_assert(offsetof(USBBTTask_SbSpiderMoveToCeiling, MoveState) == 0x0070);
static_assert(offsetof(USBBTTask_SbSpiderMoveToCeiling, SkillType) == 0x0078);
static_assert(offsetof(USBBTTask_SbSpiderMoveToCeiling, BrokenPathShowPath) == 0x0090);
static_assert(offsetof(USBBTTask_SbSpiderMoveToTarget, MoveState) == 0x0070);
static_assert(offsetof(USBBTTask_SbSpiderMoveToTarget, SkillType) == 0x0078);
static_assert(offsetof(USBBTTask_SbSpiderMoveToTarget, BrokenPathShowPath) == 0x0090);
static_assert(offsetof(USBBTTask_SbUseableTimeReset, KeyName) == 0x0070);
static_assert(offsetof(USBBTTask_SbUseEffect, EffectAlias) == 0x0078);
static_assert(offsetof(USBBTTask_SbUseSkill, SkillName) == 0x0078);
static_assert(offsetof(USBBTTask_SbUseSkill, SkillComboType) == 0x008A);
static_assert(offsetof(USBBTTask_SbUseSkill, SkillComboName) == 0x0090);
static_assert(offsetof(USBBTTask_SbUseSkill, TargetingPointName) == 0x00A0);
static_assert(offsetof(FCameraStampInfo, position) == 0x0004);
static_assert(offsetof(FCameraStampInfo, Direction) == 0x0010);
static_assert(offsetof(FSBAttachParticleInfo, RelativeLocation) == 0x0000);
static_assert(offsetof(FSBAttachParticleInfo, RelativeRotation) == 0x000C);
static_assert(offsetof(FSBAttachParticleInfo, pAttachedComponent) == 0x0018);
static_assert(offsetof(FSBCameraMoveData, ID) == 0x0000);
static_assert(offsetof(FSBCameraMoveData, TargetLocation) == 0x0020);
static_assert(offsetof(FSBCameraMoveData, TargetRotation) == 0x002C);
static_assert(offsetof(FSBCameraMoveData, TargetCharacter) == 0x0040);
static_assert(offsetof(FSBCameraMoveData, BoneName) == 0x0048);
static_assert(offsetof(FSBCameraMoveData, AttachedRelativeRot) == 0x0050);
static_assert(offsetof(FSBCameraMoveData, CharacterCustomAnimName) == 0x0060);
static_assert(offsetof(FSBCameraMoveData, FovCurve) == 0x0068);
static_assert(offsetof(FSBPostProcessWeightedBlendables, WeightedBlendables) == 0x0000);
static_assert(offsetof(USBCameraComponent, ParticleAttachComponent) == 0x08C0);
static_assert(offsetof(USBCameraComponent, CameraStampInfos) == 0x08F0);
static_assert(offsetof(USBCameraComponent, AttachedParticles) == 0x0918);
static_assert(offsetof(USBCameraComponent, DesiredViewLocFromLegacy) == 0x0930);
static_assert(offsetof(USBCameraComponent, DesiredViewLocDirFromLegacy) == 0x093C);
static_assert(offsetof(USBCameraComponent, DesiredBeforeViewLocFromNew) == 0x094C);
static_assert(offsetof(USBCameraComponent, DesiredViewRotFromLegacy) == 0x0958);
static_assert(offsetof(USBCameraComponent, CurrentCameraTM) == 0x09B0);
static_assert(offsetof(USBCameraComponent, CurrentCameraLocation) == 0x09E0);
static_assert(offsetof(USBCameraComponent, CurrentCameraRotation) == 0x09EC);
static_assert(offsetof(USBCameraComponent, ActiveCameraMoveData) == 0x0A08);
static_assert(offsetof(USBCameraComponent, OrientStartRot) == 0x0A20);
static_assert(offsetof(USBCameraComponent, OriginParentComponent) == 0x0A30);
static_assert(offsetof(USBCameraComponent, PostProcessWeightedBlendablesMap) == 0x0A58);
static_assert(offsetof(USBCameraComponent, LockOnCamBlendScaleCurve) == 0x0AA8);
static_assert(offsetof(USBCameraComponent, PlayerSlopeControlAlphaBlendCurve) == 0x0AB0);
static_assert(offsetof(USBCameraComponent, CurrentDesiredViewLocation) == 0x0AB8);
static_assert(offsetof(USBCameraComponent, CurrentDesiredViewRotation) == 0x0AC4);
static_assert(offsetof(USBCameraComponent, CurrentCameraTPSModeType) == 0x0AD1);
static_assert(offsetof(USBCameraComponent, TSPStartCameraLocation) == 0x0AD8);
static_assert(offsetof(USBCameraComponent, TSPStartCameraRotation) == 0x0AE4);
static_assert(offsetof(USBCameraComponent, TPSCameraCollisionHitLocation) == 0x0AFC);
static_assert(offsetof(USBCameraComponent, CurrentFishingMode) == 0x0B18);
static_assert(offsetof(USBCameraComponent, PrevFishingCameraMode) == 0x0B19);
static_assert(offsetof(USBCameraComponent, CurrentFishingCameraMode) == 0x0B1A);
static_assert(offsetof(USBCameraComponent, FishingCameraStartLocation) == 0x0B24);
static_assert(offsetof(USBCameraComponent, FishingCameraStartRotation) == 0x0B30);
static_assert(offsetof(FSBCameraDollyFovData, FovCurve) == 0x0000);
static_assert(offsetof(FSBCameraDollyPitchData, PitchCurve) == 0x0000);
static_assert(offsetof(FSBCameraDollyYawData, YawCurve) == 0x0000);
static_assert(offsetof(FSBCameraDollyPositionData, PositionCurve) == 0x0000);
static_assert(offsetof(USBCameraDollyTrackData, FovData) == 0x0030);
static_assert(offsetof(USBCameraDollyTrackData, PitchData) == 0x0040);
static_assert(offsetof(USBCameraDollyTrackData, YawData) == 0x0050);
static_assert(offsetof(USBCameraDollyTrackData, PositionData) == 0x0060);
static_assert(offsetof(ASBCameraVolume, TargetCameraActor) == 0x0328);
static_assert(offsetof(ASBCameraVolume, AttachBlendFunc) == 0x0331);
static_assert(offsetof(ASBCameraVolume, DetachBlendFunc) == 0x0338);
static_assert(offsetof(ASBCameraVolume, pLookAtTargetActor) == 0x0348);
static_assert(offsetof(ASBCameraVolume, LookAtTargetOffset) == 0x0354);
static_assert(offsetof(ASBCameraVolume, MoveConstraintForwardFactor) == 0x03A0);
static_assert(offsetof(ASBCameraVolume, MoveConstraintRightFactor) == 0x03A8);
static_assert(offsetof(ASBCameraVolume, MoveConstraintDirectionType) == 0x03B0);
static_assert(offsetof(ASBCameraVolume, MoveConstraintForwardDirection) == 0x03B4);
static_assert(offsetof(ASBCameraVolume, MoveConstraintDirectionEnd) == 0x03C0);
static_assert(offsetof(ASBCameraVolume, MoveConstraintDirectionStart) == 0x03C8);
static_assert(offsetof(ASBCameraVolume, JumpConstraintJumpFrontPath) == 0x03E8);
static_assert(offsetof(ASBCameraVolume, PitchAddCurveByScreenPosY) == 0x0410);
static_assert(offsetof(ASBCameraVolume, YawAddCurveByScreenPosX) == 0x0418);
static_assert(offsetof(ASBCameraVolume, PositionYAddCurveByScreenPosY) == 0x0420);
static_assert(offsetof(ASBCameraVolume, PositionXAddCurveByScreenPosX) == 0x0428);
static_assert(offsetof(ASBCameraVolume, EffectAlias) == 0x0430);
static_assert(offsetof(ASBCameraVolume, SectorID) == 0x0438);
static_assert(offsetof(ASBCameraVolume, LevelObjOrigin) == 0x0440);
static_assert(offsetof(ASBCameraVolume, LevelObjExtent) == 0x044C);
static_assert(offsetof(FSBAnimSyncBoneInfo, BoneName) == 0x0000);
static_assert(offsetof(FSBAnimSyncBoneInfo, PositionInCS) == 0x0008);
static_assert(offsetof(FSBAnimSyncBoneInfo, VelocityInCS) == 0x0014);
static_assert(offsetof(FSBAnimSyncSetAnimSeqInfo, BoneInfos) == 0x0008);
static_assert(offsetof(FSBAnimSyncSetAnimSeqCache, CacheInfos) == 0x0000);
static_assert(offsetof(FSBAnimSyncSet, BoneInfos) == 0x0000);
static_assert(offsetof(FSBAnimSyncSet, BaseMeshComponent) == 0x0010);
static_assert(offsetof(FSBAnimSyncSet, CacheSeqMap) == 0x0018);
static_assert(offsetof(FSBCharacterCuttingMeshInfo, ProcMeshComp) == 0x0000);
static_assert(offsetof(FSBCharacterCuttingMeshInfo, AttachBone) == 0x0008);
static_assert(offsetof(FSBCharacterCuttingMeshInfo, AttachedTM) == 0x0010);
static_assert(offsetof(FSBCharacterCuttingMeshInfo, SliceNormal) == 0x0040);
static_assert(offsetof(FSBSelfiePoseInfo, PoseName) == 0x0000);
static_assert(offsetof(FSBSelfiePoseInfo, BlendSpace) == 0x0008);
static_assert(offsetof(FSBCharacterInteractionMoveInfo, Velocity) == 0x0008);
static_assert(offsetof(FSBCharacterInteractionMoveInfo, StartLoc) == 0x0014);
static_assert(offsetof(FSBCharacterInteractionMoveInfo, TargetLoc) == 0x0020);
static_assert(offsetof(FSBCharacterInteractionMoveInfo, Forward) == 0x002C);
static_assert(offsetof(FMaterialParamID, Name) == 0x0008);
static_assert(offsetof(FSBCharacterMaterialParamInfo, ParamName) == 0x0000);
static_assert(offsetof(FSBCharacterMaterialParamInfo, ParamType) == 0x0008);
static_assert(offsetof(FSBCharacterMaterialParamInfo, ControlGUID) == 0x0024);
static_assert(offsetof(FSBCharacterMaterialParamInfo, ParamValue1) == 0x0038);
static_assert(offsetof(FSBCharacterMaterialParamInfo, ParamValue2) == 0x00C0);
static_assert(offsetof(FSBCharacterMaterialParamInfo, ParamValue3) == 0x0148);
static_assert(offsetof(FSBCharacterMaterialParamInfoList, Data) == 0x0000);
static_assert(offsetof(FSBCharacterMaterialChangeInfo, ChangeMaterial) == 0x0008);
static_assert(offsetof(FSBCharacterMaterialChangeInfoList, Data) == 0x0000);
static_assert(offsetof(FSBCameraEventBaseScreenPosition, AddOffsetYCurve) == 0x0000);
static_assert(offsetof(FSBCameraEventBaseScreenPosition, AddOffsetXCurve) == 0x0008);
static_assert(offsetof(FSBCameraEventBaseScreenPosition, AddFovCurve) == 0x0010);
static_assert(offsetof(FSBCameraEventBaseScreenPosition, YawToPivotCurve) == 0x0018);
static_assert(offsetof(FSBCameraEventBaseScreenPosition, PitchToPivotCurve) == 0x0020);
static_assert(offsetof(FSBCameraEventBaseScreenPosData, Data) == 0x0000);
static_assert(offsetof(FSBCharMovingStanceData, ForceType) == 0x0000);
static_assert(offsetof(FSBCharMovingStanceData, ForceCenter) == 0x0004);
static_assert(offsetof(FSBCharMovingStanceData, EffectVolumeAlias) == 0x001C);
static_assert(offsetof(FSBCharMovingStanceData, MoveMaxSpeedCurveAtDuration) == 0x0038);
static_assert(offsetof(FSBCharMovingStanceData, MoveSpeedScaleCurve) == 0x0048);
static_assert(offsetof(FSBCharMovingStanceData, MoveSpeedScaleBaseRotation) == 0x0050);
static_assert(offsetof(FSBCharMovingStanceData, MoveSpeedScaleBetweenBaseRot) == 0x0060);
static_assert(offsetof(FSBCharMovingStanceData, OverrideStanceAnim) == 0x0074);
static_assert(offsetof(FSBCharacterEventMoveInterface, CurrentVolumeActor) == 0x0000);
static_assert(offsetof(FSBCharacterEventMoveInterface, CurrentComponent) == 0x0008);
static_assert(offsetof(FControlledForceObjectInfo, ControlledObject) == 0x0000);
static_assert(offsetof(FControlledForceObjectInfo, CenterBoneName) == 0x0008);
static_assert(offsetof(FControlledForceObjectInfo, RelativeDelta) == 0x0010);
static_assert(offsetof(FSBCharacterMovementCheckInfo, LastUpdateLocation) == 0x0000);
static_assert(offsetof(FSBCharacterMovementCheckInfo, LocalPoints) == 0x000C);
static_assert(offsetof(FSBCharacterMovementCheckInfo, WorldPoints) == 0x00E4);
static_assert(offsetof(FSBCharacterMovementCheckInfo, WorldNormals) == 0x01BC);
static_assert(offsetof(FSBCharacterMovementCheckInfo, WorldTopDownHeightPoints) == 0x0294);
static_assert(offsetof(FSBCharacterMovementCheckInfo, FutureMovingPoint) == 0x036C);
static_assert(offsetof(FSBCharacterMovementCheckInfo, FutureMovingPointNormal) == 0x0384);
static_assert(offsetof(FSBCharacterMovementCheckInfo, FutureCamDirPoint) == 0x03B4);
static_assert(offsetof(FSBCharacterMovementCheckInfo, CameraSlopeMoveType) == 0x03EC);
static_assert(offsetof(FSBCharacterMovementCheckInfo, HistoryFollowTargetLoc) == 0x0400);
static_assert(offsetof(FSBCharacterMovementCheckInfo, HistoryFollowTargetDir) == 0x04B4);
static_assert(offsetof(FSBCharacterMovementCheckInfo, CurrentFollowTargetLocation) == 0x056C);
static_assert(offsetof(FSBCharacterMovementCheckInfo, CurrentFollowTargetRotation) == 0x0578);
static_assert(offsetof(FSBCharacterMovementCheckInfo, pFollowParticle) == 0x0588);
static_assert(offsetof(FSBCharacterMovementCheckInfo, pFollowSpotLight) == 0x0590);
static_assert(offsetof(FSBCharacterMovementCheckInfo, ActorBottomLocation) == 0x05A4);
static_assert(offsetof(FSBCharacterMovementCheckInfo, CheckerComponents) == 0x05B0);
static_assert(offsetof(FSBCharacterMovementCheckInfo, CheckerFutureComponents) == 0x0640);
static_assert(offsetof(FSBMeshClipingInfo, MaterialVectorParamList) == 0x0008);
static_assert(offsetof(FSBMeshInfo, AttachSocketName) == 0x0000);
static_assert(offsetof(FSBMeshInfo, AttachType) == 0x0008);
static_assert(offsetof(FSBMeshInfo, MeshSlot) == 0x0009);
static_assert(offsetof(FSBMeshInfo, PositionOffset) == 0x000C);
static_assert(offsetof(FSBMeshInfo, RotationOffset) == 0x0018);
static_assert(offsetof(FSBMeshInfo, MeshComponent) == 0x0028);
static_assert(offsetof(FSBMeshInfo, InitRelativeTransform) == 0x0030);
static_assert(offsetof(FSBMeshInfo, CollisionResponseContainer) == 0x0060);
static_assert(offsetof(FSBMeshInfo, CollisionObjectType) == 0x0080);
static_assert(offsetof(FSBMeshInfo, CollisionEnabled) == 0x0081);
static_assert(offsetof(FSBMeshInfo, OriginMaterials) == 0x0090);
static_assert(offsetof(FSBMeshInfo, OriginFXSystemArray) == 0x00A0);
static_assert(offsetof(FSBMeshInfo, OverrideClothPhysicsAsset) == 0x00B0);
static_assert(offsetof(FSBMeshInfo, BackupMeshClipingInfo) == 0x00E0);
static_assert(offsetof(FSBMeshInfo, MeshClipingInfo) == 0x0140);
static_assert(offsetof(FSBMeshInfo, bTempHiddenInGameMap) == 0x0288);
static_assert(offsetof(FSBMeshInfo, ForceBodyType) == 0x02D9);
static_assert(offsetof(FSBMeshInfo, Tag) == 0x02DC);
static_assert(offsetof(FSBCharacterEventMoveInfo, MoveForwardWS) == 0x0000);
static_assert(offsetof(FSBCharacterEventMoveInfo, MoveRightWS) == 0x0010);
static_assert(offsetof(FSBCharacterEventMoveInfo, IdleRunBlendSpaceName) == 0x0020);
static_assert(offsetof(FSBCharacterEventMoveInfo, StartPointRotation) == 0x002C);
static_assert(offsetof(FSBCharacterEventMoveInfo, StartPointLocation) == 0x0038);
static_assert(offsetof(FSBCharacterEventMoveInfo, EndPointRotation) == 0x0044);
static_assert(offsetof(FSBCharacterEventMoveInfo, EndPointLocation) == 0x0050);
static_assert(offsetof(FSBCharacterEventMoveInfo, StartLeaveRotation) == 0x005C);
static_assert(offsetof(FSBCharacterEventMoveInfo, StartLeaveLocation) == 0x0068);
static_assert(offsetof(FSBCharacterEventMoveInfo, EndLeaveRotation) == 0x0074);
static_assert(offsetof(FSBCharacterEventMoveInfo, EndLeaveLocation) == 0x0080);
static_assert(offsetof(FSBCharacterEventMoveInfo, CollisionControlActor) == 0x0098);
static_assert(offsetof(FSBCharacterEventMoveInfo, EventMoveType) == 0x00AA);
static_assert(offsetof(FSBCharacterEventMoveInfo, EventMoveTurnAnimName) == 0x00C8);
static_assert(offsetof(FSBCharacterEventMoveInfo, CurrentSideRodCamOffsetSpeed) == 0x00E0);
static_assert(offsetof(FSBCharacterEventMoveInfo, SideRodeSearchBoneName) == 0x00F4);
static_assert(offsetof(FSBCharacterEventMoveInfo, SideRodCrossAnimTagName) == 0x0100);
static_assert(offsetof(FSBCharacterEventMoveInfo, SideRodJumpAnimTagName) == 0x0108);
static_assert(offsetof(FSBCharacterEventMoveInfo, PendingDetachMoveDataComp) == 0x0170);
static_assert(offsetof(FSBCharacterEventMoveInfo, LastRopeSwingRotation) == 0x0180);
static_assert(offsetof(FSBCharacterEventMoveInfo, DeadShowPath) == 0x0198);
static_assert(offsetof(FSBEventMoveResultExtraInfo, EventMoveHitLocation) == 0x0008);
static_assert(offsetof(FSBRagdollInfo, ImpulseBoneName) == 0x000C);
static_assert(offsetof(FSBRagdollInfo, ImpulseValue) == 0x0014);
static_assert(offsetof(FSBRagdollInfo, HitLocation) == 0x0020);
static_assert(offsetof(FSBRagdollInfo, MassScaleCurve) == 0x0058);
static_assert(offsetof(FSBRagdollInfo, CapsuleComponentFollowingSocket) == 0x00E0);
static_assert(offsetof(FSBRagdollInfo, CapsuleComponentLocation) == 0x00E8);
static_assert(offsetof(FSBRagdollInfo, RootBoneName) == 0x00F8);
static_assert(offsetof(FSBActorMoveData, pAttachCharacter) == 0x0088);
static_assert(offsetof(FSBActorMoveData, pRotationTargetCharacter) == 0x009C);
static_assert(offsetof(FSBActorMoveData, PositionInterpCurveData) == 0x00E8);
static_assert(offsetof(FSBActorMoveData, RotationInterpCurveData) == 0x00F8);
static_assert(offsetof(FSBActorMoveData, StaticMoveZVAlueCurveData) == 0x0100);
static_assert(offsetof(FSBActorMoveData, MoveOffsetCurveData) == 0x0110);
static_assert(offsetof(FSBLastSetBlendSpace, Channel) == 0x0000);
static_assert(offsetof(FSBLastSetBlendSpace, LowerBlendSpaceResource) == 0x0008);
static_assert(offsetof(FSBLastSetBlendSpace, UpperBlendSpaceResource) == 0x0018);
static_assert(offsetof(FSBLastSetBlendSpace, LastOverlapGUID) == 0x0028);
static_assert(offsetof(FSBLastSetBlendSpace, Slot) == 0x0050);
static_assert(offsetof(FSBLastSetBlendSpace, pBlendSpaceAsset) == 0x0058);
static_assert(offsetof(FSBOverrideAnimTransit, LowerTransitAnimResource) == 0x0000);
static_assert(offsetof(FSBOverrideAnimTransit, UpperTransitAnimResource) == 0x0010);
static_assert(offsetof(FSBOverrideAnimTransit, Guid) == 0x0020);
static_assert(offsetof(FSBCharacterBindingInfo, CharacterBindingSocket) == 0x0000);
static_assert(offsetof(FSBCharacterBindingInfo, CharacterBindingRelativeLocation) == 0x0008);
static_assert(offsetof(FSBCharacterBindingInfo, CharacterBindingIdleBlendSpace) == 0x0018);
static_assert(offsetof(FSBCharacterBindingInfo, CharacterBindingPhysicsAsset) == 0x0020);
static_assert(offsetof(FSBTransitAnimBlendTime, TransitID) == 0x0000);
static_assert(offsetof(FSBFixedTargetRotationAnimInfo, AnimSequence_L) == 0x0000);
static_assert(offsetof(FSBFixedTargetRotationAnimInfo, AnimSequence_R) == 0x0008);
static_assert(offsetof(FSBFixedTargetRotationAxisInfo, RotationInfo_Yaw) == 0x0000);
static_assert(offsetof(FSBFixedTargetRotationAxisInfo, RotationInfo_Pitch) == 0x0010);
static_assert(offsetof(FSBFixedTargetRotationAxisInfo, RotationInfo_Roll) == 0x0020);
static_assert(offsetof(FSBFixedTargetRotationMoveInfo, AxisType) == 0x001C);
static_assert(offsetof(FSBFixedTargetRotationMoveInfo, PreCharacterForwardVector) == 0x0024);
static_assert(offsetof(FSBFixedTargetRotationMoveInfo, DesiredDirection) == 0x0030);
static_assert(offsetof(FSBShapeCollisionInfo, ShapeComponent) == 0x0000);
static_assert(offsetof(FSBShapeCollisionInfo, CollisionEnableType) == 0x0008);
static_assert(offsetof(FSBShapeCollisionInfo, CollisionResponseContainer) == 0x0009);
static_assert(offsetof(FHitStopIK, HitResult) == 0x0004);
static_assert(offsetof(FHitStopIK, RecordRootTransform0) == 0x0090);
static_assert(offsetof(FHitStopIK, RecordRootTransform1) == 0x00C0);
static_assert(offsetof(FHitStopIK, CollisionGroupName) == 0x00F4);
static_assert(offsetof(FSBBroadcastSpawnInfo, SpawnPosition) == 0x0010);
static_assert(offsetof(FSBBroadcastSpawnInfo, SpawnRotation) == 0x001C);
static_assert(offsetof(ASBCharacter, FollowCamera) == 0x05B0);
static_assert(offsetof(ASBCharacter, CameraBoom) == 0x05B8);
static_assert(offsetof(ASBCharacter, CollisionGroupComponent) == 0x05C0);
static_assert(offsetof(ASBCharacter, CameraDollySpline) == 0x05C8);
static_assert(offsetof(ASBCharacter, EyeTrackingToCamRot_R) == 0x05E8);
static_assert(offsetof(ASBCharacter, EyeTrackingToCamRot_L) == 0x05F4);
static_assert(offsetof(ASBCharacter, EyeTrackingToCamRot_Neck) == 0x0600);
static_assert(offsetof(ASBCharacter, AnimSetSyncData) == 0x0610);
static_assert(offsetof(ASBCharacter, CuttingBones) == 0x0680);
static_assert(offsetof(ASBCharacter, CuttingVertiesColor) == 0x0690);
static_assert(offsetof(ASBCharacter, CuttingMeshInfos) == 0x06A8);
static_assert(offsetof(ASBCharacter, CuttingMeshBreakBoneName) == 0x06B8);
static_assert(offsetof(ASBCharacter, CuttingMeshBreakLocation) == 0x06C0);
static_assert(offsetof(ASBCharacter, FlyingSplineExtraData) == 0x06E0);
static_assert(offsetof(ASBCharacter, SwimSplineExtraData) == 0x06F0);
static_assert(offsetof(ASBCharacter, UnderWaterSwimSplineExtraData) == 0x0700);
static_assert(offsetof(ASBCharacter, SlopeMovingSplineExtraData) == 0x0710);
static_assert(offsetof(ASBCharacter, SideRodSplineExtraData) == 0x0720);
static_assert(offsetof(ASBCharacter, RodSplineExtraData) == 0x0730);
static_assert(offsetof(ASBCharacter, SideToSideSplineExtraData) == 0x0740);
static_assert(offsetof(ASBCharacter, BalanceBeamSplineExtraData) == 0x0750);
static_assert(offsetof(ASBCharacter, SlidingSlipSplineExtraData) == 0x0760);
static_assert(offsetof(ASBCharacter, HoldBalanceBeamSplineExtraData) == 0x0770);
static_assert(offsetof(ASBCharacter, WallRunSplineExtraData) == 0x0780);
static_assert(offsetof(ASBCharacter, LockOnTargetBoneSocketName) == 0x07A0);
static_assert(offsetof(ASBCharacter, LockOnUIDisplayBoneSocketName) == 0x07A8);
static_assert(offsetof(ASBCharacter, GaugeDisplayBoneSocketName) == 0x07D0);
static_assert(offsetof(ASBCharacter, CustomLockOnTargetBoneSocketName) == 0x07D8);
static_assert(offsetof(ASBCharacter, LockOnJumpToMoveDir) == 0x07E8);
static_assert(offsetof(ASBCharacter, BlendSrcCustomLockOnTargetBoneName) == 0x0804);
static_assert(offsetof(ASBCharacter, LockOnPitchOffsetBaseBoneSocketName) == 0x0810);
static_assert(offsetof(ASBCharacter, LockOnPointCurveByDistance) == 0x0818);
static_assert(offsetof(ASBCharacter, LockOnPointCurveByDir) == 0x0820);
static_assert(offsetof(ASBCharacter, LockOnPointWeightCurveByDir) == 0x0828);
static_assert(offsetof(ASBCharacter, AimLockOnPointCurveByDistance) == 0x0830);
static_assert(offsetof(ASBCharacter, AimLockOnPointCurveByDir) == 0x0838);
static_assert(offsetof(ASBCharacter, AimLockOnPointWeightCurveByDir) == 0x0840);
static_assert(offsetof(ASBCharacter, OverlapBodyCollision) == 0x0848);
static_assert(offsetof(ASBCharacter, PhysicsCapsuleCollision) == 0x0850);
static_assert(offsetof(ASBCharacter, EventDirection) == 0x086C);
static_assert(offsetof(ASBCharacter, CameraDollySplineFlying) == 0x0880);
static_assert(offsetof(ASBCharacter, CameraDollySplineSwim) == 0x0888);
static_assert(offsetof(ASBCharacter, CameraDollySplineUnderWaterSwim) == 0x0890);
static_assert(offsetof(ASBCharacter, CameraDollySplineSlopeMoving) == 0x0898);
static_assert(offsetof(ASBCharacter, CameraDollySplineSlopeMoving2) == 0x08A0);
static_assert(offsetof(ASBCharacter, CameraDollySplineSideRod) == 0x08A8);
static_assert(offsetof(ASBCharacter, CameraDollySplineRod) == 0x08B0);
static_assert(offsetof(ASBCharacter, CameraDollySplineSideToSide) == 0x08B8);
static_assert(offsetof(ASBCharacter, CameraDollySplineBalanceBeam) == 0x08C0);
static_assert(offsetof(ASBCharacter, CameraDollySplineSlidingSlip) == 0x08C8);
static_assert(offsetof(ASBCharacter, CameraDollySplineHoldBalanceBeam) == 0x08D0);
static_assert(offsetof(ASBCharacter, CameraDollySplineWallRun) == 0x08D8);
static_assert(offsetof(ASBCharacter, BrainComponent) == 0x08E8);
static_assert(offsetof(ASBCharacter, SelfiePoseArray) == 0x08F8);
static_assert(offsetof(ASBCharacter, NPCSelfieIdlePoseArray) == 0x0910);
static_assert(offsetof(ASBCharacter, PerPoseCloseRangeUpVectorOffset) == 0x0948);
static_assert(offsetof(ASBCharacter, PerPoseCloseRangeYawRangeOffset) == 0x0998);
static_assert(offsetof(ASBCharacter, CurrentSwimForce) == 0x0A6C);
static_assert(offsetof(ASBCharacter, OverrideEffectAlias) == 0x0AD8);
static_assert(offsetof(ASBCharacter, OverrideEffectID) == 0x0AE8);
static_assert(offsetof(ASBCharacter, OverrideFootStepPhySurfaceInfoArray) == 0x0B10);
static_assert(offsetof(ASBCharacter, RotationYawRateCurveByWalkSpeed) == 0x0B60);
static_assert(offsetof(ASBCharacter, RotationYawScaleCurveByMoveInputDegree) == 0x0B68);
static_assert(offsetof(ASBCharacter, CameraFovCurveByDistance) == 0x0B70);
static_assert(offsetof(ASBCharacter, InteractionMoveInfo) == 0x0BE0);
static_assert(offsetof(ASBCharacter, HuddleUpActionTargetLocation) == 0x0C18);
static_assert(offsetof(ASBCharacter, HuddleUpActionMidTargetLocation) == 0x0C24);
static_assert(offsetof(ASBCharacter, RopeSwingJumpVelocity) == 0x0C48);
static_assert(offsetof(ASBCharacter, CustomOverrideClothPhysicsMeshPath) == 0x0CB0);
static_assert(offsetof(ASBCharacter, AverageMoveInput) == 0x0CC4);
static_assert(offsetof(ASBCharacter, ActiveMaterialParamsMap) == 0x0CD8);
static_assert(offsetof(ASBCharacter, ActiveMaterialChangeMap) == 0x0D28);
static_assert(offsetof(ASBCharacter, FootPlacementValue) == 0x0D78);
static_assert(offsetof(ASBCharacter, MoveToIdleFootPlacementValue) == 0x0D79);
static_assert(offsetof(ASBCharacter, LastVelocityOnMove) == 0x0D7C);
static_assert(offsetof(ASBCharacter, WireModeState) == 0x0D88);
static_assert(offsetof(ASBCharacter, FlyingActionState) == 0x0D89);
static_assert(offsetof(ASBCharacter, FlyingActionLastAccel) == 0x0D8C);
static_assert(offsetof(ASBCharacter, WireFlyTargetPosition) == 0x0D98);
static_assert(offsetof(ASBCharacter, WireSetPosition) == 0x0DA4);
static_assert(offsetof(ASBCharacter, CurrentWireMovingVelocity) == 0x0DE4);
static_assert(offsetof(ASBCharacter, CurrentWireFlyingPosition) == 0x0DF0);
static_assert(offsetof(ASBCharacter, CurrentUpVector) == 0x0DFC);
static_assert(offsetof(ASBCharacter, CurrentCameraVolume) == 0x0E10);
static_assert(offsetof(ASBCharacter, CameraVolumeActorOriginRot) == 0x0E18);
static_assert(offsetof(ASBCharacter, CameraVolumeActorOriginLoc) == 0x0E24);
static_assert(offsetof(ASBCharacter, CameraVolumeBasedScreenPosPivot) == 0x0E30);
static_assert(offsetof(ASBCharacter, CameraVolumeBasedLastScreenPos) == 0x0E3C);
static_assert(offsetof(ASBCharacter, CameraVolumeBasedScreenPosEventData) == 0x0E48);
static_assert(offsetof(ASBCharacter, CameraVolumeBasedScreenPosDataQueue) == 0x0E88);
static_assert(offsetof(ASBCharacter, CurrentMovingStanceVolume) == 0x0E98);
static_assert(offsetof(ASBCharacter, CustomMovingStanceData) == 0x0EA0);
static_assert(offsetof(ASBCharacter, AddYawControllerValueHistory) == 0x0F58);
static_assert(offsetof(ASBCharacter, AddPitchControllerValueHistory) == 0x0F68);
static_assert(offsetof(ASBCharacter, LookAtCustomTargetActor) == 0x0FA8);
static_assert(offsetof(ASBCharacter, LookAtCustomTargetOffset) == 0x0FB4);
static_assert(offsetof(ASBCharacter, LookAtCustomTargetBackupCameraInfo) == 0x0FC0);
static_assert(offsetof(ASBCharacter, LookAtCustomTargetStartDirection) == 0x0FCC);
static_assert(offsetof(ASBCharacter, LookAtCustomTargetStartInputValue) == 0x0FD8);
static_assert(offsetof(ASBCharacter, CurrentEventMovVolume) == 0x1040);
static_assert(offsetof(ASBCharacter, BlockEnterEventMovVolume) == 0x1050);
static_assert(offsetof(ASBCharacter, SideRodJumpEnableEventMovVolume) == 0x1060);
static_assert(offsetof(ASBCharacter, SideRodJumpEnableEventMovVolumeClosetLoc) == 0x1074);
static_assert(offsetof(ASBCharacter, DisableWallRunActor) == 0x1088);
static_assert(offsetof(ASBCharacter, CurrentSlopeMovVolume) == 0x10A0);
static_assert(offsetof(ASBCharacter, CurrentSlopeOverrideDataVolume) == 0x10A8);
static_assert(offsetof(ASBCharacter, CurrentSoundEventVolume) == 0x10C0);
static_assert(offsetof(ASBCharacter, CurrentZoneVolume) == 0x10C8);
static_assert(offsetof(ASBCharacter, CurrentRegionVolume) == 0x10D0);
static_assert(offsetof(ASBCharacter, TargetUpVector) == 0x10D8);
static_assert(offsetof(ASBCharacter, ManualTargetCameraBlendInfo) == 0x1144);
static_assert(offsetof(ASBCharacter, RequestFlyingActionEvadeAcceleration) == 0x1178);
static_assert(offsetof(ASBCharacter, BackupFlyingActionVelocity) == 0x1184);
static_assert(offsetof(ASBCharacter, ControlledForceObjectsMap) == 0x11B0);
static_assert(offsetof(ASBCharacter, LockOnStart2DDirection) == 0x1200);
static_assert(offsetof(ASBCharacter, PoseName_PhotoMode) == 0x1224);
static_assert(offsetof(ASBCharacter, LockOnPitchControllingRot) == 0x1260);
static_assert(offsetof(ASBCharacter, TransitAnimPriority) == 0x1320);
static_assert(offsetof(ASBCharacter, MetaAIBehaviorStance) == 0x1369);
static_assert(offsetof(ASBCharacter, LockOnAtChatGuid) == 0x1380);
static_assert(offsetof(ASBCharacter, LockOnAtChatBlendSpaceID) == 0x1390);
static_assert(offsetof(ASBCharacter, LockOnAtChatPivotLocation) == 0x13A0);
static_assert(offsetof(ASBCharacter, LockOnAtChatPivotDirection) == 0x13AC);
static_assert(offsetof(ASBCharacter, SplineForceAtSlopeJump) == 0x13E8);
static_assert(offsetof(ASBCharacter, SlopeVelocityBeforeJump) == 0x13F8);
static_assert(offsetof(ASBCharacter, vecJumpMoveInput) == 0x140C);
static_assert(offsetof(ASBCharacter, InputSwimmingAccel) == 0x141C);
static_assert(offsetof(ASBCharacter, LockOnCharacter) == 0x1430);
static_assert(offsetof(ASBCharacter, LookAtCandidates) == 0x1448);
static_assert(offsetof(ASBCharacter, CameraLookAtTarget) == 0x1458);
static_assert(offsetof(ASBCharacter, AnimLookAtTarget) == 0x1468);
static_assert(offsetof(ASBCharacter, AnimLookAtTargetSocket) == 0x1470);
static_assert(offsetof(ASBCharacter, HeadLookAtLocation) == 0x147C);
static_assert(offsetof(ASBCharacter, HeadLookAtPosition) == 0x1488);
static_assert(offsetof(ASBCharacter, EyeTrackingTarget) == 0x14A8);
static_assert(offsetof(ASBCharacter, EyeTrackingTargetSocket) == 0x14B0);
static_assert(offsetof(ASBCharacter, EyePosition2D) == 0x14B8);
static_assert(offsetof(ASBCharacter, LastBodyLookAtRelativeLocation) == 0x14C4);
static_assert(offsetof(ASBCharacter, SeqFinishOnceMovement) == 0x14D3);
static_assert(offsetof(ASBCharacter, ActorActiveVolumeNameArray) == 0x14E0);
static_assert(offsetof(ASBCharacter, OverlapMoveVelocity) == 0x1504);
static_assert(offsetof(ASBCharacter, CurrentOverlapMoveVelocity) == 0x1510);
static_assert(offsetof(ASBCharacter, TPSModeType) == 0x1529);
static_assert(offsetof(ASBCharacter, TPSLookAtDirection) == 0x152C);
static_assert(offsetof(ASBCharacter, TPSInitLookAtDirection) == 0x1538);
static_assert(offsetof(ASBCharacter, TPSDesiredLookAtDirection) == 0x1544);
static_assert(offsetof(ASBCharacter, TPSDesiredDampingVelocity) == 0x1550);
static_assert(offsetof(ASBCharacter, TPSCollisionHitCharacter) == 0x1568);
static_assert(offsetof(ASBCharacter, TPSCollisionHitLocation) == 0x1570);
static_assert(offsetof(ASBCharacter, TPSLookAtPinLocation) == 0x1588);
static_assert(offsetof(ASBCharacter, NikkeTPSPinScreenPoint) == 0x1594);
static_assert(offsetof(ASBCharacter, TPSLookAtWorldLocation) == 0x15A8);
static_assert(offsetof(ASBCharacter, TPSDesiredLookAtFixedLocation) == 0x15B8);
static_assert(offsetof(ASBCharacter, TPSAimSlowdownBoundingBoxExtentXYRate) == 0x15D4);
static_assert(offsetof(ASBCharacter, NikkeMinigameNiagaraParameterCollection) == 0x15E8);
static_assert(offsetof(ASBCharacter, FishingModeType) == 0x1688);
static_assert(offsetof(ASBCharacter, FishingLookAtDirection) == 0x168C);
static_assert(offsetof(ASBCharacter, FishingCastingEnableLocation) == 0x1698);
static_assert(offsetof(ASBCharacter, FishingCastingDistanceCurve) == 0x16A8);
static_assert(offsetof(ASBCharacter, FishingLookAtTarget) == 0x16B8);
static_assert(offsetof(ASBCharacter, PoseSnapshotDataPtr) == 0x16C0);
static_assert(offsetof(ASBCharacter, PonytailSnapshotDataPtr) == 0x16C8);
static_assert(offsetof(ASBCharacter, HairSnapshotDataPtr) == 0x16D0);
static_assert(offsetof(ASBCharacter, TachyWingSnapshotDataPtr) == 0x16D8);
static_assert(offsetof(ASBCharacter, SelfiePoseDataPtr) == 0x16E0);
static_assert(offsetof(ASBCharacter, LastGunRotationSeqName) == 0x16E8);
static_assert(offsetof(ASBCharacter, LastGunRotationDirection) == 0x16F0);
static_assert(offsetof(ASBCharacter, DefaultHeadLookAtTargetSocket) == 0x1710);
static_assert(offsetof(ASBCharacter, DefaultBodyLookAtTargetSocket) == 0x1718);
static_assert(offsetof(ASBCharacter, EyeOffsetFromHead) == 0x1720);
static_assert(offsetof(ASBCharacter, EyeForwardAxis) == 0x172C);
static_assert(offsetof(ASBCharacter, EyeRightAxis) == 0x172E);
static_assert(offsetof(ASBCharacter, OldWireFlyingPosition) == 0x1740);
static_assert(offsetof(ASBCharacter, MoveTracker) == 0x1750);
static_assert(offsetof(ASBCharacter, MoveTracker2) == 0x1758);
static_assert(offsetof(ASBCharacter, MovementCheckInfo) == 0x1768);
static_assert(offsetof(ASBCharacter, ClimbAttachedComponent) == 0x1DC0);
static_assert(offsetof(ASBCharacter, ClimbAttachedLocalVector) == 0x1DC8);
static_assert(offsetof(ASBCharacter, ClimbAttachedSocketName) == 0x1DD4);
static_assert(offsetof(ASBCharacter, ResourcePath) == 0x1DE0);
static_assert(offsetof(ASBCharacter, MovingTargetPath) == 0x1DF8);
static_assert(offsetof(ASBCharacter, MovingTargetBaseComponent) == 0x1E0C);
static_assert(offsetof(ASBCharacter, vecMovingTargetLocationForBaseComp) == 0x1E14);
static_assert(offsetof(ASBCharacter, vecMovingTargetDirectionForBaseComp) == 0x1E20);
static_assert(offsetof(ASBCharacter, MovingTargetStartDirection) == 0x1E48);
static_assert(offsetof(ASBCharacter, MovingTargetEndDirection) == 0x1E54);
static_assert(offsetof(ASBCharacter, MovingTargetEndAnimName) == 0x1E70);
static_assert(offsetof(ASBCharacter, MovingTargetCustomAnimPath) == 0x1E98);
static_assert(offsetof(ASBCharacter, MovingTargetCustomAnimTransitID) == 0x1EB1);
static_assert(offsetof(ASBCharacter, LastMoveType) == 0x1EB5);
static_assert(offsetof(ASBCharacter, PendingMoveLockOnTargetVector) == 0x1F1C);
static_assert(offsetof(ASBCharacter, TouchTriggerMap) == 0x1F48);
static_assert(offsetof(ASBCharacter, MeshInfoList) == 0x1FA0);
static_assert(offsetof(ASBCharacter, EventMoveInfo) == 0x1FB0);
static_assert(offsetof(ASBCharacter, EventMoveInterfaceResultInfo) == 0x2160);
static_assert(offsetof(ASBCharacter, TargetCamRotator) == 0x2174);
static_assert(offsetof(ASBCharacter, BoneBlendType) == 0x2180);
static_assert(offsetof(ASBCharacter, MeshOriginRelativeTransform) == 0x2320);
static_assert(offsetof(ASBCharacter, RagdollInfo) == 0x2350);
static_assert(offsetof(ASBCharacter, ActorMoveData) == 0x2460);
static_assert(offsetof(ASBCharacter, LastSetBlendSpaceMap) == 0x28C8);
static_assert(offsetof(ASBCharacter, OverrideAnimTransitMap) == 0x2928);
static_assert(offsetof(ASBCharacter, DisableInputActionStateArray) == 0x2988);
static_assert(offsetof(ASBCharacter, VehicleActor) == 0x29A0);
static_assert(offsetof(ASBCharacter, VehicleActorPrevLocation) == 0x29A8);
static_assert(offsetof(ASBCharacter, VehicleActorPrevRotation) == 0x29B4);
static_assert(offsetof(ASBCharacter, VehicleActorDiffLocation) == 0x29C4);
static_assert(offsetof(ASBCharacter, VehicleTargetActorDiffLocation) == 0x29D0);
static_assert(offsetof(ASBCharacter, VehicleTargetActorPrevLocation) == 0x29DC);
static_assert(offsetof(ASBCharacter, ActorLocationOnVehicleActor) == 0x29E8);
static_assert(offsetof(ASBCharacter, VehicleActorPhotoModeDiffLocation) == 0x29F8);
static_assert(offsetof(ASBCharacter, Tribe) == 0x2A0C);
static_assert(offsetof(ASBCharacter, CharacterTags) == 0x2A18);
static_assert(offsetof(ASBCharacter, MoveBlockedByHitInfo) == 0x2A2C);
static_assert(offsetof(ASBCharacter, DroneLocationInfoData) == 0x2C18);
static_assert(offsetof(ASBCharacter, MoveConstraintForwardDirection) == 0x2C24);
static_assert(offsetof(ASBCharacter, MoveConstraintForwardFactor) == 0x2C38);
static_assert(offsetof(ASBCharacter, MoveConstraintRightFactor) == 0x2C40);
static_assert(offsetof(ASBCharacter, MoveConstraintDirectionType) == 0x2C48);
static_assert(offsetof(ASBCharacter, MoveConstraintDirectionStart) == 0x2C4C);
static_assert(offsetof(ASBCharacter, MoveConstraintDirectionEnd) == 0x2C58);
static_assert(offsetof(ASBCharacter, JumpConstraintJumpFrontPath) == 0x2C70);
static_assert(offsetof(ASBCharacter, ActiveSaveGameComponet) == 0x2C90);
static_assert(offsetof(ASBCharacter, SpawnAreaName) == 0x2D1C);
static_assert(offsetof(ASBCharacter, SpawnAreaLocation) == 0x2D24);
static_assert(offsetof(ASBCharacter, CharacterBindingSocket) == 0x2D30);
static_assert(offsetof(ASBCharacter, CharacterBindingRelativeLocation) == 0x2D38);
static_assert(offsetof(ASBCharacter, CharacterBindingIdleBlendSpace) == 0x2D48);
static_assert(offsetof(ASBCharacter, CharacterBindingPhysicsAsset) == 0x2D50);
static_assert(offsetof(ASBCharacter, CharacterBindingInfoArray) == 0x2D58);
static_assert(offsetof(ASBCharacter, TransitAnimBlendTimeArray) == 0x2E10);
static_assert(offsetof(ASBCharacter, BodyMeshOriginPhysicsAsset) == 0x2E70);
static_assert(offsetof(ASBCharacter, ParticleSet) == 0x2E78);
static_assert(offsetof(ASBCharacter, SoundSet) == 0x2E88);
static_assert(offsetof(ASBCharacter, SoundSetHardRef) == 0x2EB0);
static_assert(offsetof(ASBCharacter, FactorSet) == 0x2ED8);
static_assert(offsetof(ASBCharacter, FactorSetComponent) == 0x2EE0);
static_assert(offsetof(ASBCharacter, FootStepSet) == 0x2EE8);
static_assert(offsetof(ASBCharacter, FootStepSetOverride) == 0x2EF0);
static_assert(offsetof(ASBCharacter, DialogBoundsSet) == 0x2EF8);
static_assert(offsetof(ASBCharacter, TargetRotationAxisAnimInfo) == 0x2F00);
static_assert(offsetof(ASBCharacter, TargetRotationInfo) == 0x2F30);
static_assert(offsetof(ASBCharacter, RotClimbControlOrig) == 0x2F7C);
static_assert(offsetof(ASBCharacter, RotClimbControlUpVector) == 0x2F88);
static_assert(offsetof(ASBCharacter, RuleMoveBlockAreaOffset) == 0x2F9C);
static_assert(offsetof(ASBCharacter, CurrentStanceName) == 0x3028);
static_assert(offsetof(ASBCharacter, FloorCheckCollisionObjectType) == 0x3040);
static_assert(offsetof(ASBCharacter, FloorCheckMoveHistroy) == 0x3048);
static_assert(offsetof(ASBCharacter, FloorCheckFloorLevelName) == 0x3058);
static_assert(offsetof(ASBCharacter, CachedCharacterBoundExtents) == 0x3064);
static_assert(offsetof(ASBCharacter, CustomBoolMap) == 0x3078);
static_assert(offsetof(ASBCharacter, CustomFloatMap) == 0x30C8);
static_assert(offsetof(ASBCharacter, ShowKeyTagMap) == 0x3118);
static_assert(offsetof(ASBCharacter, OriginShapeComponentArray) == 0x3168);
static_assert(offsetof(ASBCharacter, BodyRelativeLocation) == 0x3188);
static_assert(offsetof(ASBCharacter, DeactiveMovingInfo) == 0x31A8);
static_assert(offsetof(ASBCharacter, DroneSpotLightComp) == 0x31B8);
static_assert(offsetof(ASBCharacter, InitialDroneLightRotation) == 0x31C0);
static_assert(offsetof(ASBCharacter, InteractionOriginComponent) == 0x31D0);
static_assert(offsetof(ASBCharacter, InteractionPointComponent) == 0x31D8);
static_assert(offsetof(ASBCharacter, QuestMarkerComponent) == 0x31E0);
static_assert(offsetof(ASBCharacter, HitStopIK) == 0x31F0);
static_assert(offsetof(ASBCharacter, CharacterFixedLocation) == 0x32F0);
static_assert(offsetof(ASBCharacter, EnableLevelSequenceLookAtIKType) == 0x3306);
static_assert(offsetof(ASBCharacter, KeepAllBodiesPhysicsTargetBone) == 0x3318);
static_assert(offsetof(ASBCharacter, PoseSnapshotAdditionalCheckBone) == 0x3328);
static_assert(offsetof(ASBCharacter, LastWaterCheckLocation) == 0x333C);
static_assert(offsetof(ASBCharacter, BroadcastSpawnInfo) == 0x334C);
static_assert(offsetof(ASBCharacter, CharacterObjectState) == 0x3374);
static_assert(offsetof(ASBCharacter, CurrentSBWorldCompositionStreamingBlockingVolume) == 0x33B0);
static_assert(offsetof(ASBCharacter, ObjectGrab) == 0x33B8);
static_assert(offsetof(ASBCharacter, GrabTransitGuidMap) == 0x33C0);
static_assert(offsetof(ASBCharacter, GrabLastForward) == 0x341C);
static_assert(offsetof(ASBCharacter, GrabLastLocation) == 0x3428);
static_assert(offsetof(ASBCharacter, GrabLastDeltaLoc) == 0x3434);
static_assert(offsetof(ASBCharacter, CurveGrabIK) == 0x3448);
static_assert(offsetof(ASBCharacter, ParallelTick_SetActorRotation) == 0x3474);
static_assert(offsetof(ASBCharacter, InteractionState) == 0x3482);
static_assert(offsetof(ASBCharacter, EquipmentDataList) == 0x3490);
static_assert(offsetof(ASBCharacter, JumpToSprintMoveSpeedCurveData) == 0x34A8);
static_assert(offsetof(ASBCharacter, SlopeJumpToLandMoveSpeedCurveData) == 0x34B0);
static_assert(offsetof(ASBCharacter, SwimToGroundMoveSpeedCurveData) == 0x34B8);
static_assert(offsetof(ASBCharacter, JumpToSprintShortMoveSpeedCurveData) == 0x34C0);
static_assert(offsetof(ASBCharacter, JumpHighToMoveControlDurationData) == 0x34C8);
static_assert(offsetof(ASBCharacter, ActionBindSkillCmdStateMap) == 0x34D0);
static_assert(offsetof(ASBCharacter, CurrentBulletItemAlias) == 0x3520);
static_assert(offsetof(ASBCharacter, LastKeepAllBodiesBoneLocation) == 0x3528);
static_assert(offsetof(ASBCharacter, LastKeepAllBodiesBoneQuat) == 0x3540);
static_assert(offsetof(ASBCharacter, HistoryResetPhysVelocty) == 0x3550);
static_assert(offsetof(ASBCharacter, HistoryResetPhysDegree) == 0x3560);
static_assert(offsetof(ASBCharacter, CapsuleComponentPreviousTransform) == 0x35E0);
static_assert(offsetof(ASBCharacter, CapsuleComponentCurrentTransform) == 0x3610);
static_assert(offsetof(ASBCharacter, SliceSkeletalMeshDataAsset) == 0x37F0);
static_assert(offsetof(ASBCharacter, SliceSkeletalMeshTemplateDataAsset) == 0x37F8);
static_assert(offsetof(FSBCharacterCollisionShapeInfo, Name) == 0x0000);
static_assert(offsetof(FSBCharacterCollisionShapeInfo, ShapeType) == 0x0008);
static_assert(offsetof(FSBCharacterCollisionShapeInfo, SkeletalMeshName) == 0x0010);
static_assert(offsetof(FSBCharacterCollisionShapeInfo, SocketName) == 0x0020);
static_assert(offsetof(FSBCharacterCollisionShapeInfo, ShowKeyTag) == 0x0034);
static_assert(offsetof(FSBCharacterCollisionShapeInfo, RelativeLocation) == 0x0040);
static_assert(offsetof(FSBCharacterCollisionShapeInfo, RelativeRotation) == 0x0050);
static_assert(offsetof(FSBCharacterCollisionShapeInfo, ValidAngleRotation) == 0x0060);
static_assert(offsetof(FSBCharacterCollisionShapeInfo, BoxExtent) == 0x006C);
static_assert(offsetof(FSBCharacterAttackedCollisionGroup, GroupName) == 0x0000);
static_assert(offsetof(FSBCharacterAttackedCollisionGroup, ShapeNameArray) == 0x0010);
static_assert(offsetof(FSBCharacterCollisionTraceInfo, RootSocketName) == 0x0000);
static_assert(offsetof(FSBCharacterCollisionTraceInfo, LinkSocketNameArray) == 0x0010);
static_assert(offsetof(FSBCharacterAttackCollisionGroup, GroupName) == 0x0000);
static_assert(offsetof(FSBCharacterAttackCollisionGroup, ShapeNameArray) == 0x0010);
static_assert(offsetof(FSBCharacterAttackCollisionGroup, TraceArray) == 0x0020);
static_assert(offsetof(FSBCharacterAttackCollisionGroup, CollisionComponentNameArray) == 0x0030);
static_assert(offsetof(FSBCharacterPhysicalMaterialInfo, CollisionGroupName) == 0x0000);
static_assert(offsetof(FSBCharacterPhysicalMaterialInfo, PhysicalMaterial) == 0x0008);
static_assert(offsetof(FSBCollisionSocketTransform, TransformArray) == 0x0000);
static_assert(offsetof(FSBCollisionAnimationTransform, SocketTransformMap) == 0x0008);
static_assert(offsetof(FSBCollisionAnimationTransform, SocketTransformWithConstraintMap) == 0x0058);
static_assert(offsetof(USBCharacterCollisionData, ControlToBlockingCollisionNameArray) == 0x0030);
static_assert(offsetof(USBCharacterCollisionData, CollisionShapeInfoArray) == 0x0040);
static_assert(offsetof(USBCharacterCollisionData, AttackedCollisionGroupArray) == 0x0050);
static_assert(offsetof(USBCharacterCollisionData, AttackCollisionGroupArray) == 0x0060);
static_assert(offsetof(USBCharacterCollisionData, PhysicalMaterialInfoArray) == 0x0070);
static_assert(offsetof(USBCharacterCollisionData, CollisionAnimationTransformMap) == 0x0080);
static_assert(offsetof(FSBCharacterDialogBoundsSetInfo, BoneBoundsOffset) == 0x0000);
static_assert(offsetof(USBCharacterDialogBoundsSet, DialogBoundsMap) == 0x0030);
static_assert(offsetof(FSBCharacterPoseSnapshotEditorData, Name) == 0x0000);
static_assert(offsetof(FSBCharacterPoseSnapshotEditorData, AnimSequence) == 0x0008);
static_assert(offsetof(USBCharacterEditorComponent, BlueprintObject) == 0x00C8);
static_assert(offsetof(USBCharacterEditorComponent, BindingSocketName) == 0x00D0);
static_assert(offsetof(USBCharacterEditorComponent, BindingRelativeLocation) == 0x00D8);
static_assert(offsetof(USBCharacterEditorComponent, BindingIdleBlendSpace) == 0x00E8);
static_assert(offsetof(USBCharacterEditorComponent, BindingPhysicsAsset) == 0x00F0);
static_assert(offsetof(USBCharacterEditorComponent, BindingCharacterObject) == 0x00F8);
static_assert(offsetof(USBCharacterEditorComponent, EyeOffsetFromHead) == 0x0104);
static_assert(offsetof(USBCharacterEditorComponent, EyeForwardAxis) == 0x0110);
static_assert(offsetof(USBCharacterEditorComponent, EyeRightAxis) == 0x0112);
static_assert(offsetof(USBCharacterEditorComponent, PoseSnapshotData) == 0x0120);
static_assert(offsetof(USBCharacterEditorComponent, PonytailSnapshotData) == 0x0128);
static_assert(offsetof(USBCharacterEditorComponent, HairSnapshotData) == 0x0130);
static_assert(offsetof(USBCharacterEditorComponent, TachyWingSnapshotData) == 0x0138);
static_assert(offsetof(USBCharacterEditorComponent, PoseArray) == 0x0140);
static_assert(offsetof(FSBApplyIKInfo, TraceBoxExtent) == 0x000C);
static_assert(offsetof(FSBApplyIKInfo, AdditiveExtent) == 0x0018);
static_assert(offsetof(FSBApplyIKInfo, DirectionType) == 0x0024);
static_assert(offsetof(FSBApplyIKInfo, CollisionChannel) == 0x0025);
static_assert(offsetof(FSBApplyIKInfo, ShapeType) == 0x0038);
static_assert(offsetof(FSBApplyIKInfo, ModifyBoneName) == 0x0040);
static_assert(offsetof(FSBApplyIKInfo, OffsetScale) == 0x0048);
static_assert(offsetof(FSBApplyIKInfo, IKOffsetBlendCurve) == 0x0058);
static_assert(offsetof(FSBApplyIKInfo, DetachBlendCurve) == 0x00E0);
static_assert(offsetof(FSBApplyIKInfo, OverrideAdjustBoneList) == 0x0168);
static_assert(offsetof(ASBCharacterEventMovVolume, IdleRunBlendSpaceName) == 0x031C);
static_assert(offsetof(ASBCharacterEventMovVolume, SlideIdleRunBlendSpaceName) == 0x0324);
static_assert(offsetof(ASBCharacterEventMovVolume, StartTransitAnimName) == 0x032C);
static_assert(offsetof(ASBCharacterEventMovVolume, EndTransitAnimName) == 0x0338);
static_assert(offsetof(ASBCharacterEventMovVolume, MiddleTransitAnimName) == 0x0348);
static_assert(offsetof(ASBCharacterEventMovVolume, StartTargetPointActor) == 0x0350);
static_assert(offsetof(ASBCharacterEventMovVolume, EndTargetPointActor) == 0x0358);
static_assert(offsetof(ASBCharacterEventMovVolume, EventVisualMeshActor) == 0x0360);
static_assert(offsetof(ASBCharacterEventMovVolume, MovingUnitBySideToSideForwardAnimName) == 0x036C);
static_assert(offsetof(ASBCharacterEventMovVolume, MovingUnitBySideToSideBackwardAnimName) == 0x0374);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveForwardVector) == 0x038C);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveRightVector) == 0x039C);
static_assert(offsetof(ASBCharacterEventMovVolume, EventMoveType) == 0x03BC);
static_assert(offsetof(ASBCharacterEventMovVolume, SlidingSpeedCurve) == 0x03F8);
static_assert(offsetof(ASBCharacterEventMovVolume, StartLeaveAnimName) == 0x0410);
static_assert(offsetof(ASBCharacterEventMovVolume, EndLeaveAnimName) == 0x041C);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveFastAnimName) == 0x0428);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveJumpAnimName) == 0x0430);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveJumpMoveAnimName) == 0x0438);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveFallAnimName) == 0x0440);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveTurnAnimName) == 0x0448);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveSlideStartName) == 0x0454);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveSlideStopName) == 0x045C);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveSlideToNormalName) == 0x0464);
static_assert(offsetof(ASBCharacterEventMovVolume, MoveSlideToLandName) == 0x046C);
static_assert(offsetof(ASBCharacterEventMovVolume, StartLeavePointActor) == 0x0478);
static_assert(offsetof(ASBCharacterEventMovVolume, EndLeavePointActor) == 0x0480);
static_assert(offsetof(ASBCharacterEventMovVolume, SectorID) == 0x0488);
static_assert(offsetof(ASBCharacterEventMovVolume, UseIKBoneList) == 0x0498);
static_assert(offsetof(ASBCharacterEventMovVolume, BalanceMovingSplineComponent) == 0x04B0);
static_assert(offsetof(ASBCharacterEventMovVolume, LevelObjOrigin) == 0x04D0);
static_assert(offsetof(ASBCharacterEventMovVolume, LevelObjExtent) == 0x04DC);
static_assert(offsetof(FSBCharacterDSocketInfo, RelativeLocation) == 0x0000);
static_assert(offsetof(FSBCharacterDSocketInfo, RelativeRotation) == 0x000C);
static_assert(offsetof(FSBCharacterDSocketInfo, RelativeScale) == 0x0018);
static_assert(offsetof(FSBCharacterDSocketInfo, SocketName) == 0x0024);
static_assert(offsetof(FSBCharacterDSocketInfo, BoneName) == 0x002C);
static_assert(offsetof(USBCharacterFactorSet, DynamicSockets) == 0x0030);
static_assert(offsetof(USBCharacterFactorSet, DynamicSocketNameMap) == 0x0040);
static_assert(offsetof(USBCharacterFactorSet, CharacterTypeName) == 0x00AC);
static_assert(offsetof(USBCharacterFactorSet, CharacterSubPath) == 0x00C0);
static_assert(offsetof(USBCharacterFactorSetComponent, TargetFactorSet) == 0x00C0);
static_assert(offsetof(USBCharacterFactorSetComponent, DynamicSocketInstances) == 0x00C8);
static_assert(offsetof(FSBFootStepSetInfo, PMatParticleSet) == 0x0000);
static_assert(offsetof(FSBFootStepSetInfo, FootBoneName) == 0x0008);
static_assert(offsetof(FSBFootStepSetInfo, RelativeLocation) == 0x0010);
static_assert(offsetof(FSBFootStepSetInfo, RelativeRotation) == 0x001C);
static_assert(offsetof(USBCharacterFootStepSet, FootStepInfo) == 0x0030);
static_assert(offsetof(USBCharacterFootStepSet, SoundRelativeLocation) == 0x0090);
static_assert(offsetof(FSBActorRootMotionData, pRootMotionData) == 0x0000);
static_assert(offsetof(FSBActorRootMotionData, TranslationCurve) == 0x0008);
static_assert(offsetof(FSBActorRootMotionData, RotationCurve) == 0x0010);
static_assert(offsetof(USBCharacterMovementComponent, CustomFlyFollowLocation) == 0x0B58);
static_assert(offsetof(USBCharacterMovementComponent, PreCustomFlyFollowLocation) == 0x0B64);
static_assert(offsetof(USBCharacterMovementComponent, CustomFlyFollowRotation) == 0x0B70);
static_assert(offsetof(USBCharacterMovementComponent, EventMoveRodPivot) == 0x0BBC);
static_assert(offsetof(USBCharacterMovementComponent, EventMoveRodVelocityForNormal) == 0x0BC8);
static_assert(offsetof(USBCharacterMovementComponent, EventMoveSearchSideRodDir) == 0x0BD8);
static_assert(offsetof(USBCharacterMovementComponent, EventMoveRodOrigin) == 0x0BEC);
static_assert(offsetof(USBCharacterMovementComponent, LastPenetrationDelta) == 0x0C1C);
static_assert(offsetof(USBCharacterMovementComponent, SlidingForce) == 0x0CAC);
static_assert(offsetof(USBCharacterMovementComponent, SlidingSlipCollisionNormal) == 0x0CC0);
static_assert(offsetof(USBCharacterMovementComponent, MoveSpeedScaleCache) == 0x0CF8);
static_assert(offsetof(USBCharacterMovementComponent, CustomMoveScaleCurve) == 0x0D20);
static_assert(offsetof(USBCharacterMovementComponent, WallRunGravityCurve) == 0x0D28);
static_assert(offsetof(USBCharacterMovementComponent, JumpFallingGravityCurve) == 0x0D30);
static_assert(offsetof(USBCharacterMovementComponent, RodDampingCurveFromAngleRadian) == 0x0D40);
static_assert(offsetof(USBCharacterMovementComponent, FallToMoveCurve) == 0x0D48);
static_assert(offsetof(USBCharacterMovementComponent, VelocityForFallToMove) == 0x0DBC);
static_assert(offsetof(USBCharacterMovementComponent, TargetCharacterFoward) == 0x0DC8);
static_assert(offsetof(USBCharacterMovementComponent, TargetCharacterMotionVelocity) == 0x0DD8);
static_assert(offsetof(USBCharacterMovementComponent, PathFollowingTargetLocation) == 0x0DE4);
static_assert(offsetof(USBCharacterMovementComponent, TargetSprintVelocityForward) == 0x0DF0);
static_assert(offsetof(USBCharacterMovementComponent, CurrentSprintVelocityForward) == 0x0DFC);
static_assert(offsetof(USBCharacterMovementComponent, LastMoveDirectionWeight) == 0x0E10);
static_assert(offsetof(USBCharacterMovementComponent, TargetCharacterForceTurnFoward) == 0x0E20);
static_assert(offsetof(USBCharacterMovementComponent, TargetCharacterForceTurnRotationRate) == 0x0E2C);
static_assert(offsetof(USBCharacterMovementComponent, WallRunDir) == 0x0E38);
static_assert(offsetof(USBCharacterMovementComponent, WallRunNormal) == 0x0E44);
static_assert(offsetof(USBCharacterMovementComponent, WallHitBounceDirectMove) == 0x0E50);
static_assert(offsetof(USBCharacterMovementComponent, RootMotionData) == 0x0E90);
static_assert(offsetof(USBCharacterMovementComponent, PreviousActorLocation) == 0x0F74);
static_assert(offsetof(USBCharacterMovementComponent, MoveToTargetLocation) == 0x0FB4);
static_assert(offsetof(USBCharacterMovementComponent, MoveToBrakingEndLocation) == 0x0FC0);
static_assert(offsetof(USBCharacterMovementComponent, MoveToPrevActorLocation) == 0x0FCC);
static_assert(offsetof(USBCharacterMovementComponent, MoveToDirection) == 0x0FD8);
static_assert(offsetof(USBCharacterMovementComponent, MoveToLocationVector) == 0x0FE4);
static_assert(offsetof(USBCharacterMovementComponent, MoveToLocationBrakingInputType) == 0x0FF2);
static_assert(offsetof(USBCharacterMovementComponent, MoveToTargetRotation) == 0x1000);
static_assert(offsetof(USBCharacterMovementComponent, MoveToTargetRotationForward) == 0x100C);
static_assert(offsetof(USBCharacterMovementComponent, MoveToLocationLastVector) == 0x102C);
static_assert(offsetof(USBCharacterMovementComponent, LastOnGroundLocation) == 0x103C);
static_assert(offsetof(USBCharacterMovementComponent, PreMovementMode) == 0x1048);
static_assert(offsetof(USBCharacterMovementComponent, IgnoredCollisionActors) == 0x1050);
static_assert(offsetof(USBCharacterMovementComponent, InterpolationAnimAcceleration) == 0x1064);
static_assert(offsetof(USBCharacterMovementComponent, MoveAreaLimitCenterPosition) == 0x1078);
static_assert(offsetof(USBCharacterMovementComponent, BlendVelocity) == 0x10B8);
static_assert(offsetof(ASBCharacterOccluderActor, BoxComponent) == 0x02C8);
static_assert(offsetof(ASBCharacterOverrideSlopeVolume, SectorID) == 0x0344);
static_assert(offsetof(ASBCharacterOverrideSlopeVolume, LevelObjOrigin) == 0x034C);
static_assert(offsetof(ASBCharacterOverrideSlopeVolume, LevelObjExtent) == 0x0358);
static_assert(offsetof(FSBNiagaraSystemWithOverrideParam, NiagaraSystemPath) == 0x0000);
static_assert(offsetof(FSBNiagaraSystemWithOverrideParam, InstanceParameterOverrides) == 0x0018);
static_assert(offsetof(FSBParticleSetInfo, RelativeLocation) == 0x0000);
static_assert(offsetof(FSBParticleSetInfo, RelativeRotation) == 0x000C);
static_assert(offsetof(FSBParticleSetInfo, NiagaraSystem) == 0x0020);
static_assert(offsetof(FSBParticleSetInfo, ParticleSystem) == 0x0088);
static_assert(offsetof(FSBParticleSetInfo, ParticleSound) == 0x0090);
static_assert(offsetof(FSBParticleSetInfo, SoundClassOverride) == 0x00A0);
static_assert(offsetof(FSBParticleSetInfo, AttenuationOverride) == 0x00A8);
static_assert(offsetof(FSBParticleSetInfo, VibrationSet) == 0x00B0);
static_assert(offsetof(FSBParticleSetInfoArray, Array) == 0x0000);
static_assert(offsetof(USBCharacterParticleSet, Particles) == 0x0030);
static_assert(offsetof(FSBCharacterPoseSnapshotClothSimulData, Positions) == 0x0008);
static_assert(offsetof(FSBCharacterPoseSnapshotClothSimulData, Normals) == 0x0018);
static_assert(offsetof(FSBCharacterPoseSnapshotClothSimulData, Transform) == 0x0030);
static_assert(offsetof(FSBCharacterPoseSnapshotClothSimulData, ComponentRelativeTransform) == 0x0060);
static_assert(offsetof(FSBCharacterPoseSnapshotCloth, MeshSlot) == 0x0000);
static_assert(offsetof(FSBCharacterPoseSnapshotCloth, ClothSimulDataArray) == 0x0008);
static_assert(offsetof(FSBCharacterPoseSnapshotData, Name) == 0x0000);
static_assert(offsetof(FSBCharacterPoseSnapshotData, ClothArray) == 0x0008);
static_assert(offsetof(FSBCharacterPoseSnapshotData, BodyPoseSnapshot) == 0x0018);
static_assert(offsetof(FSBCharacterPoseSnapshotData, WeaponPoseSnapshot) == 0x0070);
static_assert(offsetof(USBCharacterPoseSnapshotDataAsset, PoseSnapshotDataAray) == 0x0030);
static_assert(offsetof(FSBCharacterSelfiePoseData, Name) == 0x0000);
static_assert(offsetof(FSBCharacterSelfiePoseData, BlendSpace) == 0x0008);
static_assert(offsetof(USBCharacterSelfiePoseDataAsset, SelfiePoseDataAray) == 0x0030);
static_assert(offsetof(ASBCharacterSlopeMovVolume, MovingSplineComponent) == 0x0320);
static_assert(offsetof(ASBCharacterSlopeMovVolume, MovingSplineMeshActors) == 0x0328);
static_assert(offsetof(ASBCharacterSlopeMovVolume, MovingSplineBaseMeshs) == 0x0338);
static_assert(offsetof(ASBCharacterSlopeMovVolume, MakFromMovingSplineMeshSocketNames) == 0x0348);
static_assert(offsetof(ASBCharacterSlopeMovVolume, MakedMovingSplineComponent) == 0x0360);
static_assert(offsetof(ASBCharacterSlopeMovVolume, IdleRunBlendSpaceName) == 0x0374);
static_assert(offsetof(ASBCharacterSlopeMovVolume, SectorID) == 0x03C8);
static_assert(offsetof(ASBCharacterSlopeMovVolume, LevelObjOrigin) == 0x03D0);
static_assert(offsetof(ASBCharacterSlopeMovVolume, LevelObjExtent) == 0x03DC);
static_assert(offsetof(FSBSoundInfo, SoundSource) == 0x0000);
static_assert(offsetof(FSBSoundInfo, BoneSocketName) == 0x0010);
static_assert(offsetof(FSBSoundInfo, SoundClassOverride) == 0x0018);
static_assert(offsetof(FSBSoundInfo, AttenuationOverride) == 0x0020);
static_assert(offsetof(FSBSoundInfo, VibrationSet) == 0x0028);
static_assert(offsetof(FSBSoundInfo, AnimResourcePath) == 0x0038);
static_assert(offsetof(FSBSoundInfo_HitType, HitType) == 0x0000);
static_assert(offsetof(FSBSoundInfo_HitType, HitSound) == 0x0008);
static_assert(offsetof(FSBSoundInfo_HitArray, HitTypeArray) == 0x0000);
static_assert(offsetof(FSBSoundInfo_HitArray, FindArrayMaps) == 0x0010);
static_assert(offsetof(FSBSoundInfo_ConditionBoolType, TrueCase) == 0x0000);
static_assert(offsetof(FSBSoundInfo_ConditionBoolType, FalseCase) == 0x0010);
static_assert(offsetof(FSBSoundInfo_Condition, IsPlayerCharacterUnderWaterSwimming) == 0x0000);
static_assert(offsetof(USBCharacterSoundSet, HitSounds) == 0x0030);
static_assert(offsetof(USBCharacterSoundSet, ReactSounds) == 0x0080);
static_assert(offsetof(USBCharacterSoundSet, VoiceSounds) == 0x0120);
static_assert(offsetof(USBCharacterSoundSet, ConditionSounds) == 0x0170);
static_assert(offsetof(ASBCharacterSwimForceVolume, ForceDir) == 0x031C);
static_assert(offsetof(ASBCharacterSwimForceVolume, SectorID) == 0x032C);
static_assert(offsetof(ASBCharacterSwimForceVolume, LevelObjOrigin) == 0x0334);
static_assert(offsetof(ASBCharacterSwimForceVolume, LevelObjExtent) == 0x0340);
static_assert(offsetof(ASBCharMovingStanceVolume, ForceType) == 0x031D);
static_assert(offsetof(ASBCharMovingStanceVolume, ForceCenter) == 0x0320);
static_assert(offsetof(ASBCharMovingStanceVolume, EffectVolumeAlias) == 0x0338);
static_assert(offsetof(ASBCharMovingStanceVolume, MoveMaxSpeedCurveAtDuration) == 0x0350);
static_assert(offsetof(ASBCharMovingStanceVolume, MoveSpeedScaleCurve) == 0x0360);
static_assert(offsetof(ASBCharMovingStanceVolume, MoveSpeedScaleBaseRotation) == 0x0368);
static_assert(offsetof(ASBCharMovingStanceVolume, MoveSpeedScaleBetweenBaseRot) == 0x0378);
static_assert(offsetof(ASBCharMovingStanceVolume, ContorlMoveSpeedInnerVolume) == 0x0380);
static_assert(offsetof(ASBCharMovingStanceVolume, OverrideStanceAnim) == 0x0394);
static_assert(offsetof(ASBCharMovingStanceVolume, SectorID) == 0x03B8);
static_assert(offsetof(ASBCharMovingStanceVolume, LevelObjOrigin) == 0x03C0);
static_assert(offsetof(ASBCharMovingStanceVolume, LevelObjExtent) == 0x03CC);
static_assert(offsetof(FSBAutoGameSavePhase, SaveSlotName) == 0x0010);
static_assert(offsetof(FSBSaveLoadContext, SaveGameData) == 0x0000);
static_assert(offsetof(FSBSaveLoadContext, OverrideSaveGameData) == 0x0008);
static_assert(offsetof(FSBSaveLoadContext, SlotName) == 0x0010);
static_assert(offsetof(ASBPlayerController, InputHandler) == 0x0668);
static_assert(offsetof(ASBPlayerController, DebugSystemInfoWidget) == 0x0678);
static_assert(offsetof(ASBPlayerController, InputActionStateMap) == 0x06B0);
static_assert(offsetof(ASBPlayerController, SafeHapticSounds) == 0x0708);
static_assert(offsetof(ASBPlayerController, AutoSaveSlotName) == 0x0728);
static_assert(offsetof(ASBPlayerController, ManualSaveSlotName) == 0x0738);
static_assert(offsetof(ASBPlayerController, SystemSaveSlotName) == 0x0748);
static_assert(offsetof(ASBPlayerController, AudioListenerBoneName) == 0x0764);
static_assert(offsetof(ASBPlayerController, AutoSavePhase) == 0x0770);
static_assert(offsetof(ASBPlayerController, CurrentSaveContext) == 0x0790);
static_assert(offsetof(ASBPlayerController, CurrentLoadContext) == 0x07C0);
static_assert(offsetof(ASBPlayerController, DebugInfoTouchTimes) == 0x0820);
static_assert(offsetof(USBCheatManager, ToggleCVarCommandLastArg) == 0x0078);
static_assert(offsetof(USBCineCameraActorBoundsComponent, ViewDefaultTransform) == 0x00D0);
static_assert(offsetof(USBCineCameraActorBoundsComponent, ViewAdditiveTransform) == 0x0100);
static_assert(offsetof(USBCineCameraActorBoundsComponent, ViewAdditive2Transform) == 0x0130);
static_assert(offsetof(USBCineCameraActorBoundsComponent, TemplateActorBoneData) == 0x0160);
static_assert(offsetof(USBCineCameraActorBoundsComponent, EasingFunc) == 0x0169);
static_assert(offsetof(USBCineCameraComponent, CameraActorBoundsComponent) == 0x09C8);
static_assert(offsetof(ASBCineCameraPostProcessActor, PostProcessSettings) == 0x02D0);
static_assert(offsetof(USBCineCameraSplineMetadata, Owner) == 0x0028);
static_assert(offsetof(USBCineCameraSplineComponent, CameraRotation) == 0x0630);
static_assert(offsetof(USBCineCameraSplineComponent, CameraCurrentFocalLength) == 0x0648);
static_assert(offsetof(USBCineCameraSplineComponent, CameraManualFocusDistance) == 0x0660);
static_assert(offsetof(USBCineCameraSplineComponent, SplineMetadata) == 0x0678);
static_assert(offsetof(ASBCineDialogueCameraActor, CameraActorBoundsComponent) == 0x0900);
static_assert(offsetof(ASBCineDialogueCameraActor, SBCineCameraComponent) == 0x0908);
static_assert(offsetof(USBCollisionGroupComponent, pCollisionData) == 0x00C0);
static_assert(offsetof(USBCollisionGroupComponent, CreatedShapeComponent) == 0x00D0);
static_assert(offsetof(USBUserWidget, ParentWidget) == 0x04C8);
static_assert(offsetof(USBUserWidget, TargetUILogic) == 0x0548);
static_assert(offsetof(USBUserWidget, CachedSBUserWidgetListView) == 0x05AC);
static_assert(offsetof(USBUserWidget, CachedWidgetListView) == 0x05B4);
static_assert(offsetof(USBUserWidget, RestoreFocusListView) == 0x05C0);
static_assert(offsetof(USBUserWidget, RestoreFocusListViewData) == 0x05C8);
static_assert(offsetof(USBUserWidget, PuzzleInputInfoMap) == 0x0630);
static_assert(offsetof(FSBComboBoxItemSet, ItemData) == 0x0010);
static_assert(offsetof(USBComboBoxWidget, FocusChangedSound) == 0x0F20);
static_assert(offsetof(USBComboBoxWidget, ItemWidgetClass) == 0x0F38);
static_assert(offsetof(USBComboBoxWidget, ItemSetArray) == 0x0F40);
static_assert(offsetof(USBCommonCreditWidget, ScrollSpeedHoldCurve) == 0x06A0);
static_assert(offsetof(USBCommonCreditWidget, SpeedStepArray) == 0x06A8);
static_assert(offsetof(USBCommonCreditWidget, State) == 0x06B8);
static_assert(offsetof(USBCommonCreditWidget, ListView) == 0x06C0);
static_assert(offsetof(FSBCommonManualTabBtnData, TabAlias) == 0x0000);
static_assert(offsetof(FSBCommonManualTabBtnData, DisplayText) == 0x0008);
static_assert(offsetof(FSBCommonManualTabBtnData, DotAlias) == 0x0020);
static_assert(offsetof(FSBCommonManualTabBtnData, ParentDotAlias) == 0x0028);
static_assert(offsetof(USBCommonManualTabWidget, CurrentTabAlias) == 0x0680);
static_assert(offsetof(USBCommonManualTabWidget, LeftIcon) == 0x0688);
static_assert(offsetof(USBCommonManualTabWidget, LeftIcon_LeftSpace) == 0x0690);
static_assert(offsetof(USBCommonManualTabWidget, LeftIcon_RightSpace) == 0x0698);
static_assert(offsetof(USBCommonManualTabWidget, RightIcon) == 0x06A0);
static_assert(offsetof(USBCommonManualTabWidget, RightIcon_LeftSpace) == 0x06A8);
static_assert(offsetof(USBCommonManualTabWidget, RightIcon_RightSpace) == 0x06B0);
static_assert(offsetof(USBCommonManualTabWidget, TabButtonContainer) == 0x06B8);
static_assert(offsetof(USBCommonManualTabWidget, LeftIconBrush) == 0x06C8);
static_assert(offsetof(USBCommonManualTabWidget, LeftIconResourceAction) == 0x0758);
static_assert(offsetof(USBCommonManualTabWidget, RightIconBrush) == 0x0760);
static_assert(offsetof(USBCommonManualTabWidget, RightIconResourceAction) == 0x07F0);
static_assert(offsetof(USBCommonManualTabWidget, TabButtonClass) == 0x0808);
static_assert(offsetof(USBCommonManualTabWidget, TabDataArray) == 0x0810);
static_assert(offsetof(USBCommonManualTabWidget, TextColor) == 0x0820);
static_assert(offsetof(USBCommonManualTabWidget, FocusTextColor) == 0x0848);
static_assert(offsetof(USBCommonManualTabWidget, TextFont) == 0x0870);
static_assert(offsetof(USBCommonManualTabWidget, TextShadowColor) == 0x08D0);
static_assert(offsetof(USBCommonManualTabWidget, TabChangedSound) == 0x08E0);
static_assert(offsetof(USBCommonTabButtonWidget, TextBlock) == 0x0680);
static_assert(offsetof(USBCommonTabButtonWidget, TextWidth) == 0x0688);
static_assert(offsetof(USBCommonTabButtonWidget, TextLeftMargin) == 0x0690);
static_assert(offsetof(USBCommonTabButtonWidget, TextRightMargin) == 0x0698);
static_assert(offsetof(USBCommonTabButtonWidget, TextValue) == 0x06A8);
static_assert(offsetof(USBCommonTabButtonWidget, TextColor) == 0x06C0);
static_assert(offsetof(USBCommonTabButtonWidget, TextFont) == 0x06E8);
static_assert(offsetof(USBCommonTabButtonWidget, TextShadowColor) == 0x0748);
static_assert(offsetof(USBCommonSideTabButtonWidget, FocusEvent) == 0x0758);
static_assert(offsetof(FSBWidgetNavigationEventData, FunctionName) == 0x0000);
static_assert(offsetof(FSBCommonSideTabBtnData, DisplayText) == 0x0000);
static_assert(offsetof(FSBCommonSideTabBtnData, FocusEvent) == 0x0018);
static_assert(offsetof(FSBCommonSideTabBtnData, NavigationEvent) == 0x0028);
static_assert(offsetof(USBCommonSideTabWidget, TabButtonContainer) == 0x0680);
static_assert(offsetof(USBCommonSideTabWidget, TabButtonClass) == 0x0698);
static_assert(offsetof(USBCommonSideTabWidget, TabDataArray) == 0x06A0);
static_assert(offsetof(USBCommonSideTabWidget, TextColor) == 0x06B0);
static_assert(offsetof(USBCommonSideTabWidget, FocusTextColor) == 0x06D8);
static_assert(offsetof(USBCommonSideTabWidget, TextFont) == 0x0700);
static_assert(offsetof(USBCommonSideTabWidget, TextShadowColor) == 0x0760);
static_assert(offsetof(USBCommonSideTabWidget, TabButtonInstanceArray) == 0x0770);
static_assert(offsetof(FSBCommonTabBtnData, UILogicType) == 0x0000);
static_assert(offsetof(FSBCommonTabBtnData, DisplayText) == 0x0008);
static_assert(offsetof(FSBCommonTabBtnData, DotAlias) == 0x0020);
static_assert(offsetof(FSBCommonTabBtnData, ParentDotAlias) == 0x0028);
static_assert(offsetof(USBCommonTabWidget, CurrentTab) == 0x0680);
static_assert(offsetof(USBCommonTabWidget, LeftIcon) == 0x0688);
static_assert(offsetof(USBCommonTabWidget, LeftIcon_LeftSpace) == 0x0690);
static_assert(offsetof(USBCommonTabWidget, LeftIcon_RightSpace) == 0x0698);
static_assert(offsetof(USBCommonTabWidget, RightIcon) == 0x06A0);
static_assert(offsetof(USBCommonTabWidget, RightIcon_LeftSpace) == 0x06A8);
static_assert(offsetof(USBCommonTabWidget, RightIcon_RightSpace) == 0x06B0);
static_assert(offsetof(USBCommonTabWidget, TabButtonContainer) == 0x06B8);
static_assert(offsetof(USBCommonTabWidget, LeftIconBrush) == 0x06C8);
static_assert(offsetof(USBCommonTabWidget, LeftIconResourceAction) == 0x0758);
static_assert(offsetof(USBCommonTabWidget, RightIconBrush) == 0x0760);
static_assert(offsetof(USBCommonTabWidget, RightIconResourceAction) == 0x07F0);
static_assert(offsetof(USBCommonTabWidget, TabButtonClass) == 0x0808);
static_assert(offsetof(USBCommonTabWidget, TabDataArray) == 0x0810);
static_assert(offsetof(USBCommonTabWidget, TextColor) == 0x0820);
static_assert(offsetof(USBCommonTabWidget, FocusTextColor) == 0x0848);
static_assert(offsetof(USBCommonTabWidget, TextFont) == 0x0870);
static_assert(offsetof(USBCommonTabWidget, TextShadowColor) == 0x08D0);
static_assert(offsetof(USBCommonTabWidget, TabChangedSound) == 0x08E0);
static_assert(offsetof(USBDataAsset, Guid) == 0x0030);
static_assert(offsetof(USBDataNodeBase, RefParentDataNodes) == 0x0028);
static_assert(offsetof(USBDataNodeBase, ChildDataNodes) == 0x0038);
static_assert(offsetof(USBDeactiveMovingComponent, CollisionPrimitiveComponent) == 0x0268);
static_assert(offsetof(USBDeactiveMovingComponent, LevelObjOrigin) == 0x0270);
static_assert(offsetof(USBDeactiveMovingComponent, LevelObjExtent) == 0x027C);
static_assert(offsetof(ASBDestructibleActor, DestructibleComponent) == 0x02C8);
static_assert(offsetof(FSBChunkParticleInfo, PMaterialParticleSet) == 0x0000);
static_assert(offsetof(USBDestructibleComponent, DissolveFadeParameterName) == 0x0960);
static_assert(offsetof(USBDestructibleComponent, ChunkNiagaraSystem) == 0x0970);
static_assert(offsetof(USBDestructibleComponent, ChunkParticleSystem) == 0x0978);
static_assert(offsetof(USBDestructibleComponent, HitParticleSystem) == 0x0988);
static_assert(offsetof(USBDestructibleComponent, HitParticleInfos) == 0x0990);
static_assert(offsetof(USBDestructibleComponent, CreatedChunkParticleSystemMap) == 0x09B8);
static_assert(offsetof(USBDestructibleComponent, CreatedChunkNiagaraSystemMap) == 0x0A08);
static_assert(offsetof(USBDestructibleComponent, CreatedHitParticleSystemArray) == 0x0A58);
static_assert(offsetof(USBDevCommonMessageBoxWidget, prefixName) == 0x06A0);
static_assert(offsetof(USBDevUIStudioPreviewSlotWidget, Category) == 0x0688);
static_assert(offsetof(USBDevUIStudioPreviewSlotWidget, Message) == 0x06A0);
static_assert(offsetof(USBDevUIStudioPreviewWidget, TargetStudioTag) == 0x0690);
static_assert(offsetof(USBDevUIStudioPreviewWidget, ShowTagTextMap) == 0x0698);
static_assert(offsetof(USBDevUIStudioPreviewWidget, ListView) == 0x06F0);
static_assert(offsetof(FSBDroneLocationInfo, BaseSocket) == 0x0000);
static_assert(offsetof(FSBDroneLocationInfo, RelativeLocation) == 0x0008);
static_assert(offsetof(FSBDroneLocationInfoContainer, LocationInfoArray) == 0x0000);
static_assert(offsetof(USBDroneLocationData, DroneLocationInfoMap) == 0x0048);
static_assert(offsetof(USBDualSenseTriggerEffectData, TriggerEffectType) == 0x0030);
static_assert(offsetof(USBDualSenseTriggerEffectData, TriggerType) == 0x0031);
static_assert(offsetof(USBDualSenseTriggerEffectData, Parameters) == 0x0038);
static_assert(offsetof(ASBDynamicRegionActor, UniqueRegionName) == 0x02C8);
static_assert(offsetof(ASBEffectVolume, EffectVolumeAlias) == 0x035C);
static_assert(offsetof(ASBEffectVolume, AttachActor) == 0x0370);
static_assert(offsetof(ASBEffectVolume, SafePointActorOnDead) == 0x0378);
static_assert(offsetof(ASBEffectVolume, SectorID) == 0x0380);
static_assert(offsetof(ASBEffectVolume, ActiveEventMoveType) == 0x038C);
static_assert(offsetof(FSBEnvParticle, NiagaraSystem) == 0x0000);
static_assert(offsetof(FSBEnvParticle, PSTemplate) == 0x0068);
static_assert(offsetof(FSBEnvParticle, RelativeLocation) == 0x0070);
static_assert(offsetof(FSBEnvParticle, Rotation) == 0x007C);
static_assert(offsetof(FSBEnvParticle, PhotoModeTag) == 0x0090);
static_assert(offsetof(ASBEnvControlVolume, EnvSettingData) == 0x0318);
static_assert(offsetof(ASBEnvControlVolume, ParticlesAttachToCamera) == 0x0330);
static_assert(offsetof(ASBEnvControlVolume, SectorID) == 0x034C);
static_assert(offsetof(ASBEnvControlVolume, LevelObjOrigin) == 0x0354);
static_assert(offsetof(ASBEnvControlVolume, LevelObjExtent) == 0x0360);
static_assert(offsetof(ASBEnvControlVolume, OverrideControlSettingData) == 0x0370);
static_assert(offsetof(ASBEnvControlVolume, OverrideControlGuid) == 0x0EA0);
static_assert(offsetof(FSBEnvSettingScalarParam, ParamName) == 0x0000);
static_assert(offsetof(FSBEnvSettingVectorParam, ParamName) == 0x0000);
static_assert(offsetof(FSBEnvSettingVectorParam, Value) == 0x0008);
static_assert(offsetof(FSBEnvSettingTextureParam, ParamName) == 0x0000);
static_assert(offsetof(FSBEnvSettingTextureParam, Value) == 0x0008);
static_assert(offsetof(USBEnvSettingData, SunDirection) == 0x0030);
static_assert(offsetof(USBEnvSettingData, DroneLightColor) == 0x0044);
static_assert(offsetof(USBEnvSettingData, MaterialScalarParams) == 0x0058);
static_assert(offsetof(USBEnvSettingData, MaterialVectorParams) == 0x0068);
static_assert(offsetof(USBEnvSettingData, MaterialTextureParams) == 0x0078);
static_assert(offsetof(USBEnvSettingData, EnvControlSetting) == 0x0090);
static_assert(offsetof(ASBEquipmentActor, SkeletalMeshComponent) == 0x02D0);
static_assert(offsetof(USBEventMoveData, IdleRunBlendSpaceName) == 0x0030);
static_assert(offsetof(USBEventMoveData, SlideIdleRunBlendSpaceName) == 0x0038);
static_assert(offsetof(USBEventMoveData, StartTransitAnimName) == 0x0040);
static_assert(offsetof(USBEventMoveData, EndTransitAnimName) == 0x004C);
static_assert(offsetof(USBEventMoveData, MiddleTransitAnimName) == 0x005C);
static_assert(offsetof(USBEventMoveData, MovingUnitBySideToSideForwardAnimName) == 0x0068);
static_assert(offsetof(USBEventMoveData, MovingUnitBySideToSideBackwardAnimName) == 0x0070);
static_assert(offsetof(USBEventMoveData, MoveForwardVector) == 0x0088);
static_assert(offsetof(USBEventMoveData, MoveRightVector) == 0x0098);
static_assert(offsetof(USBEventMoveData, EventMoveType) == 0x00B8);
static_assert(offsetof(USBEventMoveData, SlidingSpeedCurve) == 0x00F0);
static_assert(offsetof(USBEventMoveData, StartLeaveAnimName) == 0x0134);
static_assert(offsetof(USBEventMoveData, EndLeaveAnimName) == 0x0140);
static_assert(offsetof(USBEventMoveData, MoveFastAnimName) == 0x014C);
static_assert(offsetof(USBEventMoveData, MoveJumpAnimName) == 0x0154);
static_assert(offsetof(USBEventMoveData, MoveJumpMoveAnimName) == 0x015C);
static_assert(offsetof(USBEventMoveData, MoveFallAnimName) == 0x0164);
static_assert(offsetof(USBEventMoveData, MoveTurnAnimName) == 0x016C);
static_assert(offsetof(USBEventMoveData, MoveSlideStartName) == 0x0178);
static_assert(offsetof(USBEventMoveData, MoveSlideStopName) == 0x0180);
static_assert(offsetof(USBEventMoveData, MoveSlideToNormalName) == 0x0188);
static_assert(offsetof(USBEventMoveData, MoveSlideToLandName) == 0x0190);
static_assert(offsetof(USBEventMoveData, UseIKBoneList) == 0x01A0);
static_assert(offsetof(USBEventMoveData, DeadShowPath) == 0x01D0);
static_assert(offsetof(FSBEventMoveData_CableInfo, AttachCableComponent) == 0x0000);
static_assert(offsetof(FSBEventMoveData_CableInfo, CollisionCableStartCollision) == 0x0008);
static_assert(offsetof(FSBEventMoveData_CableInfo, CollisionCableEndCollision) == 0x0010);
static_assert(offsetof(FSBEventMoveData_CableInfo, AttachedEndForceDirType) == 0x0020);
static_assert(offsetof(FSBEventMoveData_RopeSwingProperty, AddDirApplySpeedAxisType) == 0x001C);
static_assert(offsetof(FSBEventMoveData_RopeTMInfo, PendulumVelocity) == 0x0000);
static_assert(offsetof(FSBEventMoveData_RopeTMInfo, PendulumLocation) == 0x000C);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, AttachedComponent) == 0x0000);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, PhysicsControlComponent) == 0x0008);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, SubPhysicsControlComponent) == 0x0010);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopeType) == 0x0018);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopeAttachBoneName) == 0x001C);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopeCableComponent) == 0x0028);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, SubRopeCableComponent) == 0x0030);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, CollisionStartCollision) == 0x0038);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, CollisionEndCollision) == 0x0040);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, AttachedEndForceDirType) == 0x0054);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, StartCollisionExtent) == 0x0060);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, StartCollisionAddExtent) == 0x006C);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, AccelerationCurve) == 0x0080);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, DownAccelerationCurve) == 0x0108);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, LowerCableOffsetCurve) == 0x0190);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, SwingJumpXYSpeedCurve) == 0x0218);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, SwingJumpZSpeedCurve) == 0x02A0);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, SwingCancelXYSpeedCurve) == 0x0328);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, SwingCancelZSpeedCurve) == 0x03B0);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, SwingHitReflectForceCurve) == 0x0438);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, SwingStartForceTimeCurve) == 0x04C0);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, SwingXYForceScaleCurve) == 0x0548);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, SwingAddAnimAlphaCurve) == 0x05D0);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopeSwingProperty) == 0x0658);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, CacheRelativeTargetLocation) == 0x06B8);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, MovementDirection) == 0x06E0);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, PreAttachTargetLocation) == 0x06F0);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopeLastVelocity) == 0x06FC);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopeLastInputVec) == 0x0708);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopeLastTargetDirection) == 0x0714);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopePreLinearVelocity) == 0x0720);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopeDestWorldLocation) == 0x072C);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopeTrunLocation) == 0x0740);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, RopeTurnDirection) == 0x074C);
static_assert(offsetof(FSBEventMoveData_RopeMoveInfo, PendulumTMLog) == 0x0758);
static_assert(offsetof(USBEventMoveDataComponent, CollisionPrimitiveComponent) == 0x0268);
static_assert(offsetof(USBEventMoveDataComponent, CollisionAtFailedInteraction) == 0x0270);
static_assert(offsetof(USBEventMoveDataComponent, EventMoveData) == 0x0278);
static_assert(offsetof(USBEventMoveDataComponent, StartTargetLocation) == 0x02A0);
static_assert(offsetof(USBEventMoveDataComponent, StartTargetRotation) == 0x02AC);
static_assert(offsetof(USBEventMoveDataComponent, EndTargetLocation) == 0x02B8);
static_assert(offsetof(USBEventMoveDataComponent, EndTargetRotation) == 0x02C4);
static_assert(offsetof(USBEventMoveDataComponent, StartLeaveLocation) == 0x02D0);
static_assert(offsetof(USBEventMoveDataComponent, StartLeaveRotation) == 0x02DC);
static_assert(offsetof(USBEventMoveDataComponent, EndLeaveLocation) == 0x02E8);
static_assert(offsetof(USBEventMoveDataComponent, EndLeaveRotation) == 0x02F4);
static_assert(offsetof(USBEventMoveDataComponent, LevelObjOrigin) == 0x0300);
static_assert(offsetof(USBEventMoveDataComponent, LevelObjExtent) == 0x030C);
static_assert(offsetof(USBEventMoveDataComponent, EventVisualMeshActor) == 0x0318);
static_assert(offsetof(USBEventMoveDataComponent, BalanceMovingSplineComponent) == 0x0320);
static_assert(offsetof(USBEventMoveDataComponent, CableMoveInfo) == 0x0328);
static_assert(offsetof(USBEventMoveDataComponent, RopeMoveInfo) == 0x0350);
static_assert(offsetof(USBEventMoveDataComponent, ScanDisplayType) == 0x0AF9);
static_assert(offsetof(USBEventMoveDataComponent, ScanPointArray) == 0x0B00);
static_assert(offsetof(ASBExclusiveWaterVolume, SectorID) == 0x0318);
static_assert(offsetof(ASBExclusiveWaterVolume, LevelObjOrigin) == 0x0320);
static_assert(offsetof(ASBExclusiveWaterVolume, LevelObjExtent) == 0x032C);
static_assert(offsetof(ASBFeedbackActor, SpriteBackLog) == 0x02C8);
static_assert(offsetof(ASBFeedbackActor, SpriteCheck) == 0x02D0);
static_assert(offsetof(ASBFeedbackActor, SpriteProgress) == 0x02D8);
static_assert(offsetof(ASBFeedbackActor, SpriteComplete) == 0x02E0);
static_assert(offsetof(ASBFeedbackActor, SpriteDestruct) == 0x02E8);
static_assert(offsetof(ASBFeedbackActor, IssueName) == 0x0304);
static_assert(offsetof(ASBFeedbackActor, CacheWidgetComponent) == 0x0310);
static_assert(offsetof(ASBFeedbackActor, CacheBillboardComponent) == 0x0318);
static_assert(offsetof(ASBFeedbackActor, CacheWidget) == 0x0320);
static_assert(offsetof(ASBFeedbackActor, WidgetInteractionComps) == 0x0328);
static_assert(offsetof(USBFeedbackCommonMessageBoxWidget, prefixName) == 0x06A0);
static_assert(offsetof(ASBFishingVolume, SectorID) == 0x031C);
static_assert(offsetof(ASBFishingVolume, RewardGroup) == 0x0324);
static_assert(offsetof(ASBFishingVolume, LevelObjOrigin) == 0x032C);
static_assert(offsetof(ASBFishingVolume, LevelObjExtent) == 0x0338);
static_assert(offsetof(ASBFlyingPoint, FlyingPointAlias) == 0x02F0);
static_assert(offsetof(USBFootStepPhySurfaceComponent, OverrideFootStepPhySurface) == 0x0568);
static_assert(offsetof(USBFootStepPhySurfaceComponent, IntParams) == 0x0570);
static_assert(offsetof(USBFootStepPhySurfaceComponent, VolumeDetailMode) == 0x05C0);
static_assert(offsetof(ASBFootStepPhySurfaceVolume, OverrideFootStepPhySurface) == 0x0318);
static_assert(offsetof(ASBFootStepPhySurfaceVolume, IntParams) == 0x0320);
static_assert(offsetof(ASBFootStepPhySurfaceVolume, VolumeDetailMode) == 0x0370);
static_assert(offsetof(ASBFootStepPhySurfaceVolume, LevelObjOrigin) == 0x0374);
static_assert(offsetof(ASBFootStepPhySurfaceVolume, LevelObjExtent) == 0x0380);
static_assert(offsetof(USBForceFeedbackConcurrency, ResolutionRule) == 0x0038);
static_assert(offsetof(USBForceFeedbackEffect, Concurrency) == 0x0048);
static_assert(offsetof(FSaveSlotInfo, MapName) == 0x0008);
static_assert(offsetof(FSaveSlotInfo, Timestamp) == 0x0018);
static_assert(offsetof(FSaveSlotInfo, SelectedTime) == 0x0020);
static_assert(offsetof(FSaveSlotInfo, CampAlias) == 0x0030);
static_assert(offsetof(FSaveSlotInfo, ZoneAlias) == 0x0040);
static_assert(offsetof(USBGameInstance, CachedSaveSlots) == 0x01B0);
static_assert(offsetof(USBGameInstance, LobbyAutoStartMap) == 0x01C0);
static_assert(offsetof(USBGameInstance, APP_ID) == 0x01D0);
static_assert(offsetof(USBGameInstance, pCharacterOverlapManager) == 0x0218);
static_assert(offsetof(USBGameInstance, SaveObjectManager) == 0x0220);
static_assert(offsetof(ASBGameMode, LevelStreamingContextMap) == 0x03B0);
static_assert(offsetof(ASBGameMode, CustomLoadStreaming) == 0x0400);
static_assert(offsetof(ASBGameMode, CustomUnLoadStreaming) == 0x0410);
static_assert(offsetof(ASBGameMode, PlayerBlueprintPath) == 0x0428);
static_assert(offsetof(ASBGameMode, BattleMusicStartEventPath) == 0x0440);
static_assert(offsetof(ASBGameMode, BattleMusicStopEventPath) == 0x0450);
static_assert(offsetof(ASBGameMode, SecondaryActorTick) == 0x04B0);
static_assert(offsetof(ASBGameMode, PostUpdateWorkActorTick) == 0x04E0);
static_assert(offsetof(FSBSaveVersionInfo, PackageVersion) == 0x0008);
static_assert(offsetof(FSBSaveVersionInfo, MajorVersion) == 0x0018);
static_assert(offsetof(FSBSaveVersionInfo, MinerVersion) == 0x0028);
static_assert(offsetof(FSBSaveVersionInfo, AppVersion) == 0x0038);
static_assert(offsetof(FSBSaveGameData_OnlineAccountInfo, OnlineStoreType) == 0x0000);
static_assert(offsetof(FSBSaveGameData_OnlineAccountInfo, OnlineAccountID) == 0x0008);
static_assert(offsetof(USBSaveBase, SaveFileVersionInfo) == 0x0028);
static_assert(offsetof(USBSaveBase, OnlineAccountInfo) == 0x0070);
static_assert(offsetof(FSBSaveOptionData_BossChallengeDiary, DifficultyType) == 0x0018);
static_assert(offsetof(FSBSaveOptionData_BossChallengeDiary, BossChallengePresetType) == 0x0019);
static_assert(offsetof(FSBSaveOptionData_BossChallengeStage, StageAlias) == 0x0000);
static_assert(offsetof(FSBSaveOptionData_BossChallengeStage, BestRecordArray) == 0x0008);
static_assert(offsetof(FSBItemInstance, SavedGuid) == 0x0000);
static_assert(offsetof(FSBItemInstance, PocketGuid) == 0x0010);
static_assert(offsetof(FSBItemInstance, ItemAlias) == 0x0020);
static_assert(offsetof(FSBItemInstance, ItemVisualAlias) == 0x0028);
static_assert(offsetof(FSBItemInstance, OverrideSaveType) == 0x0044);
static_assert(offsetof(FSBSaveOptionData_ActorEquipment, FavoriteItemArray) == 0x0058);
static_assert(offsetof(FSBSaveOptionData_ActorEquipmentDiary, PresetAbilityEquipMap) == 0x0000);
static_assert(offsetof(FSBSaveOptionData_ActorEquipmentDiary, LastGameAbilityEquip) == 0x0050);
static_assert(offsetof(FSBSaveOptionData_ActorEquipmentDiary, AppearanceEquip) == 0x00B8);
static_assert(offsetof(FSBSaveOptionData_ActorEquipmentDiary, LastGameAppearanceEquip) == 0x0120);
static_assert(offsetof(FSBSaveOptionData_BossChallenge, StageArray) == 0x0000);
static_assert(offsetof(FSBSaveOptionData_BossChallenge, ActorEquipmentDiary) == 0x0010);
static_assert(offsetof(FSBSaveOptionData_BossChallenge, TheaterData) == 0x0198);
static_assert(offsetof(FSBSaveOptionData_PhotoModePresetLight, Location) == 0x0008);
static_assert(offsetof(FSBSaveOptionData_PhotoModePresetLogo, Location) == 0x0000);
static_assert(offsetof(FSBSaveOptionData_PhotoModePresetLogo, Size) == 0x000C);
static_assert(offsetof(FSBSaveOptionData_PhotoModePresetSlot, IntValues) == 0x0008);
static_assert(offsetof(FSBSaveOptionData_PhotoModePresetSlot, FloatValues) == 0x0058);
static_assert(offsetof(FSBSaveOptionData_PhotoModePresetSlot, LightDataArray) == 0x00A8);
static_assert(offsetof(FSBSaveOptionData_PhotoModePresetSlot, EyeTrackingData) == 0x0108);
static_assert(offsetof(FSBSaveOptionData_PhotoModePresetMode, PresetSlots) == 0x0000);
static_assert(offsetof(USBGameOptionSaveData, DataMap_bool) == 0x0090);
static_assert(offsetof(USBGameOptionSaveData, DataMap_float) == 0x00E0);
static_assert(offsetof(USBGameOptionSaveData, DataMap_FString) == 0x0130);
static_assert(offsetof(USBGameOptionSaveData, DataMap_int32) == 0x0180);
static_assert(offsetof(USBGameOptionSaveData, DataMap_IntPoint) == 0x01D0);
static_assert(offsetof(USBGameOptionSaveData, BossChallengeData) == 0x0220);
static_assert(offsetof(USBGameOptionSaveData, PhotoModePresetData) == 0x0418);
static_assert(offsetof(USBGameUserSettings, EnviromentObjectDetail) == 0x0130);
static_assert(offsetof(USBGameUserSettings, CharacterObjectDetail) == 0x0144);
static_assert(offsetof(USBGameUserSettings, EnviromentTextures) == 0x0158);
static_assert(offsetof(USBGameUserSettings, CharacterTextures) == 0x016C);
static_assert(offsetof(USBGameUserSettings, VolumetricFog) == 0x0194);
static_assert(offsetof(USBGameUserSettings, ShadowQuality) == 0x01A8);
static_assert(offsetof(USBGameUserSettings, EffectQuality) == 0x01BC);
static_assert(offsetof(USBGameUserSettings, EnvironmentQuality) == 0x01D0);
static_assert(offsetof(USBGameUserSettings, Lighting) == 0x01E4);
static_assert(offsetof(USBGameUserSettings, FoliageQuality) == 0x01F8);
static_assert(offsetof(USBGameUserSettings, AmbientOcclusion) == 0x020C);
static_assert(offsetof(USBGameUserSettings, DepthOfField) == 0x0220);
static_assert(offsetof(USBGameUserSettings, ScreenSpaceReflection) == 0x0234);
static_assert(offsetof(USBGameUserSettings, SceneColorFringeQuality) == 0x0248);
static_assert(offsetof(USBGameUserSettings, GrainQuality) == 0x025C);
static_assert(offsetof(USBGameUserSettings, MaterialQuality) == 0x0270);
static_assert(offsetof(USBGameUserSettings, AntiAliasing) == 0x0284);
static_assert(offsetof(USBGameUserSettings, NvidiaDLSS) == 0x02E8);
static_assert(offsetof(USBGameUserSettings, NvidiaFrameGeneration) == 0x02FC);
static_assert(offsetof(USBGameUserSettings, NvidiaReflexLowLatency) == 0x0310);
static_assert(offsetof(USBGameUserSettings, AmdFSR3) == 0x0324);
static_assert(offsetof(USBGameUserSettings, AmdFrameInterpolation) == 0x0338);
static_assert(offsetof(USBGameUserSettings, IntelXeSS) == 0x034C);
static_assert(offsetof(USBGameUserSettings, AspectRatio) == 0x0360);
static_assert(offsetof(USBGameUserSettings, AudioDeviceType) == 0x0366);
static_assert(offsetof(USBGameUserSettings, FrameLimit) == 0x042C);
static_assert(offsetof(USBGameUserSettings, HUDSizeType) == 0x0431);
static_assert(offsetof(USBGameUserSettings, HUDBGActive) == 0x0436);
static_assert(offsetof(USBGameUserSettings, UMPCMode) == 0x0484);
static_assert(offsetof(USBGameUserSettings, MonitorID) == 0x04A0);
static_assert(offsetof(USBGameUserSettings, AnimationQuality) == 0x04C5);
static_assert(offsetof(USBGameUserSettings, UpscalerType) == 0x0500);
static_assert(offsetof(USBGameUserSettings, SavedNvidiaFrameGeneration) == 0x0514);
static_assert(offsetof(USBGameUserSettings, SavedNvidiaReflexLowLatency) == 0x0529);
static_assert(offsetof(USBGameUserSettings, SavedAmdFrameInterpolation) == 0x053D);
static_assert(offsetof(USBHoldButton, ProgressImage) == 0x0680);
static_assert(offsetof(USBHoldButton, TextBlock) == 0x0688);
static_assert(offsetof(USBHoldButton, text) == 0x0690);
static_assert(offsetof(USBHoldButton, FillType) == 0x06B4);
static_assert(offsetof(FSBDebug2DLineInfo, LineColor) == 0x0010);
static_assert(offsetof(ASBHUD, CropBarInfo) == 0x03C0);
static_assert(offsetof(ASBHUD, DebugLines) == 0x03E0);
static_assert(offsetof(FSBIndicatorButtonData, Type) == 0x0000);
static_assert(offsetof(FSBIndicatorButtonData, text) == 0x0008);
static_assert(offsetof(FSBIndicatorButtonData, ButtonTargetLogicType) == 0x0021);
static_assert(offsetof(FSBIndicatorButtonData, ResourceAction) == 0x0024);
static_assert(offsetof(FSBIndicatorButtonData, ResourceAction2) == 0x002C);
static_assert(offsetof(FSBIndicatorButtonData, ResourceActionArray) == 0x0038);
static_assert(offsetof(FSBIndicatorButtonData, LockChannel) == 0x0048);
static_assert(offsetof(FSBIndicatorButtonData, HiddenChannel) == 0x0049);
static_assert(offsetof(FSBIndicatorButtonDataWrapper, Array) == 0x0000);
static_assert(offsetof(USBIndicator, ButtonHorizontalBox) == 0x0680);
static_assert(offsetof(USBIndicator, IndicatorDataMap) == 0x0688);
static_assert(offsetof(USBIndicator, IndicatorButtonMap) == 0x06D8);
static_assert(offsetof(USBIndicator, IndicatorType) == 0x0728);
static_assert(offsetof(USBIndicator, ButtonWidgetPool) == 0x0740);
static_assert(offsetof(USBInteractionBreakPoint, Node) == 0x0030);
static_assert(offsetof(USBInteractionGraph, RootInteractionNode) == 0x0038);
static_assert(offsetof(USBInteractionGraph, AllInteractionNode) == 0x0048);
static_assert(offsetof(USBInteractionGraph, RootInteractionNodeBase) == 0x0058);
static_assert(offsetof(USBInteractionGraph, CancelInteractionNodeBase) == 0x0060);
static_assert(offsetof(USBInteractionGraph, TickInteractionNodeBase) == 0x0068);
static_assert(offsetof(USBInteractionGraph, AllNodeBaseList) == 0x0070);
static_assert(offsetof(USBInteractionGraph, TemplateNodes) == 0x0080);
static_assert(offsetof(USBInteractionGraph, GotoLabelNodes) == 0x0090);
static_assert(offsetof(FSBExecCustomStruct, DataAlias) == 0x0000);
static_assert(offsetof(FSBExecCustomStruct, DataAssetPath) == 0x0008);
static_assert(offsetof(FSBExecCustomStruct, NameValue) == 0x0018);
static_assert(offsetof(FSBExecCustomStruct, DataTableType) == 0x0020);
static_assert(offsetof(FSBExecCustomStruct, EventActionType) == 0x0021);
static_assert(offsetof(FSBExecCustomStruct, StrValue) == 0x0030);
static_assert(offsetof(FSBExecCustomStruct, Str2Value) == 0x0040);
static_assert(offsetof(FSBExecCustomStruct, StrEnumValue) == 0x0050);
static_assert(offsetof(FSBExecCustomStruct, CustomNameList) == 0x0068);
static_assert(offsetof(FSBExecCustomStruct, CustomStringList) == 0x0078);
static_assert(offsetof(FSBExecCustomStruct, LinkNode) == 0x0088);
static_assert(offsetof(FSBInteractionExecPinInfo, CustomTagName) == 0x0004);
static_assert(offsetof(FSBInteractionExecPinInfo, CustomStructList) == 0x0010);
static_assert(offsetof(USBInteractionNode_Base, InteractionNodeType) == 0x0048);
static_assert(offsetof(USBInteractionNode_Base, LinkToParentPinName) == 0x004C);
static_assert(offsetof(USBInteractionNode_Base, LinkeResultType) == 0x0058);
static_assert(offsetof(USBInteractionNode_Base, NodeActionList) == 0x0060);
static_assert(offsetof(FSBInteractionNodeProperty, ActionType) == 0x0000);
static_assert(offsetof(FSBInteractionNodeProperty, EventAlias) == 0x0004);
static_assert(offsetof(FSBInteractionNodeProperty, CustomStrValue) == 0x0010);
static_assert(offsetof(FSBInteractionNodeProperty, OwnerShow) == 0x0018);
static_assert(offsetof(FSBInteractionNodeProperty, CasterShow) == 0x0028);
static_assert(offsetof(USBInteractionNode, DefaultResult) == 0x0070);
static_assert(offsetof(USBInteractionNode, ConditionAlias) == 0x0090);
static_assert(offsetof(USBInteractionNode, MainAction) == 0x0098);
static_assert(offsetof(USBInteractionNode, SubActions) == 0x00D8);
static_assert(offsetof(USBInteractionNode, OwnerShow) == 0x00E8);
static_assert(offsetof(USBInteractionNode, CasterShow) == 0x00F8);
static_assert(offsetof(USBInteractionNode, OwnerShowAsset) == 0x0108);
static_assert(offsetof(USBInteractionNode, CasterShowAsset) == 0x0130);
static_assert(offsetof(USBInteractionNode, CasterLoopShowAsset) == 0x0158);
static_assert(offsetof(USBInteractionNode, ShowPlayRuleType) == 0x0184);
static_assert(offsetof(USBInteractionNode, Success_Sound) == 0x0190);
static_assert(offsetof(USBInteractionNode, Fail_Sound) == 0x0198);
static_assert(offsetof(USBInteractionNode, InteractionMoveType) == 0x01A0);
static_assert(offsetof(USBInteractionNode, Result_Fail) == 0x01A8);
static_assert(offsetof(USBInteractionNode, ParentPinName) == 0x01C8);
static_assert(offsetof(USBInteractionNode, ChildNodes) == 0x01D8);
static_assert(offsetof(USBInteractionNode, InputActionList) == 0x01E8);
static_assert(offsetof(USBInteractionNode_ActionEnvActivate, ChangeActivate) == 0x0070);
static_assert(offsetof(USBInteractionNode_ActionEnvActivate, RetrunValue) == 0x0078);
static_assert(offsetof(USBInteractionNode_ActionEnvActivate, RefTableAlias) == 0x0088);
static_assert(offsetof(USBInteractionNode_ActionEnvState, EnvTagName) == 0x0070);
static_assert(offsetof(USBInteractionNode_ActionEnvState, RetrunValue) == 0x0088);
static_assert(offsetof(USBInteractionNode_ActionEnvState, RefTableAlias) == 0x0098);
static_assert(offsetof(USBInteractionNode_ActionPlayLevelSeq, LevelSequenceName) == 0x0070);
static_assert(offsetof(USBInteractionNode_ActionPlayLevelSeq, LevelSequence) == 0x0078);
static_assert(offsetof(USBInteractionNode_ActionPlayLevelSeq, SequenceActorTemplate) == 0x00A0);
static_assert(offsetof(USBInteractionNode_ActionPlayLevelSeq, AttachTagNames) == 0x00A8);
static_assert(offsetof(USBInteractionNode_ActionPlayLevelSeq, RetrunValue) == 0x00C0);
static_assert(offsetof(USBInteractionNode_ActionRewardGroup, RetrunValue) == 0x0078);
static_assert(offsetof(USBInteractionNode_ActionRewardGroup, RewardGroupSpawnFormation) == 0x0088);
static_assert(offsetof(USBInteractionNode_ActionRewardGroup, SpawnTargetType) == 0x0090);
static_assert(offsetof(USBInteractionNode_ActionRewardGroup, RefTableAlias) == 0x0094);
static_assert(offsetof(USBInteractionNode_ActionTheater, RefTableAlias) == 0x0070);
static_assert(offsetof(USBInteractionNode_ActionTheater, TheaterAsset) == 0x0088);
static_assert(offsetof(USBInteractionNode_ActionTheater, SubtitleOnlyLevelSequence) == 0x00B0);
static_assert(offsetof(USBInteractionNode_ActionTheater, SequencePlayTransformType) == 0x00E1);
static_assert(offsetof(USBInteractionNode_ActionTheater, SequencePlayTransformCastType) == 0x00E2);
static_assert(offsetof(USBInteractionNode_ActionTheater, RetrunValue) == 0x00E8);
static_assert(offsetof(USBInteractionNode_ActionTheater, TheaterSelectDataList) == 0x0100);
static_assert(offsetof(USBInteractionNode_ActionTheater, EventSpawnAlias) == 0x0118);
static_assert(offsetof(USBInteractionNode_ActionZoneEvent, RetrunValue) == 0x0078);
static_assert(offsetof(USBInteractionNode_ActionZoneEvent, RefTableAlias) == 0x0088);
static_assert(offsetof(USBInteractionNode_Cancel, CancelExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_ChangeStateLinkEnv, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ChangeStateLinkEnv, LinkEnvIndex) == 0x0090);
static_assert(offsetof(USBInteractionNode_ChangeStateLinkEnv, StateTagName) == 0x0094);
static_assert(offsetof(USBInteractionNode_ChangeStateLinkEnv, EnvObjState) == 0x009C);
static_assert(offsetof(USBInteractionNode_ChangeStateLinkEnv, OutputExec) == 0x00A8);
static_assert(offsetof(USBInteractionNode_Condition, ConditionType) == 0x0070);
static_assert(offsetof(USBInteractionNode_Condition, ConditionEq) == 0x0080);
static_assert(offsetof(USBInteractionNode_Condition, CustomStr01) == 0x0090);
static_assert(offsetof(USBInteractionNode_Condition, CustomStr02) == 0x00A0);
static_assert(offsetof(USBInteractionNode_Condition, CheckStrValue) == 0x00B0);
static_assert(offsetof(USBInteractionNode_Condition, CheckValue) == 0x00C0);
static_assert(offsetof(USBInteractionNode_Condition, FailNotifyMsg) == 0x00D0);
static_assert(offsetof(USBInteractionNode_Condition, RetrunValue) == 0x00E0);
static_assert(offsetof(USBInteractionNode_Condition, RefTableAlias) == 0x00F0);
static_assert(offsetof(USBInteractionNode_Condition2, Alias) == 0x0070);
static_assert(offsetof(USBInteractionNode_Condition2, ConditionType) == 0x007C);
static_assert(offsetof(USBInteractionNode_Condition2, ConditionEq) == 0x007D);
static_assert(offsetof(USBInteractionNode_Condition2, CustomStr01) == 0x0080);
static_assert(offsetof(USBInteractionNode_Condition2, CustomStr02) == 0x0090);
static_assert(offsetof(USBInteractionNode_Condition2, CheckStrValue) == 0x00A0);
static_assert(offsetof(USBInteractionNode_Condition2, CheckStatCalcType) == 0x00B4);
static_assert(offsetof(USBInteractionNode_Condition2, FailNotifyMsg) == 0x00B8);
static_assert(offsetof(USBInteractionNode_Condition2, RetrunValue) == 0x00C8);
static_assert(offsetof(USBInteractionNode_ConditionAchievement, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ConditionAchievement, AchievementAlias) == 0x0090);
static_assert(offsetof(USBInteractionNode_ConditionAchievement, Equation) == 0x00A8);
static_assert(offsetof(USBInteractionNode_ConditionAchievement, OutputTrueExec) == 0x00B0);
static_assert(offsetof(USBInteractionNode_ConditionAchievement, OutputFalseExec) == 0x00D0);
static_assert(offsetof(USBInteractionNode_ConditionActorEffect, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ConditionActorEffect, EffectAlias) == 0x0090);
static_assert(offsetof(USBInteractionNode_ConditionActorEffect, TargetActorType) == 0x00A9);
static_assert(offsetof(USBInteractionNode_ConditionActorEffect, TargetTagName) == 0x00AC);
static_assert(offsetof(USBInteractionNode_ConditionActorEffect, OutputTrueExec) == 0x00B8);
static_assert(offsetof(USBInteractionNode_ConditionActorEffect, OutputFalseExec) == 0x00D8);
static_assert(offsetof(USBInteractionNode_ConditionEnvState, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ConditionEnvState, EnvSpawn) == 0x0090);
static_assert(offsetof(USBInteractionNode_ConditionEnvState, ZoneAlias) == 0x00A8);
static_assert(offsetof(USBInteractionNode_ConditionEnvState, StateName) == 0x00C0);
static_assert(offsetof(USBInteractionNode_ConditionEnvState, OutputTrueExec) == 0x00C8);
static_assert(offsetof(USBInteractionNode_ConditionEnvState, OutputFalseExec) == 0x00E8);
static_assert(offsetof(USBInteractionNode_ConditionGroup, Alias) == 0x0070);
static_assert(offsetof(USBInteractionNode_ConditionGroup, Conditions) == 0x0080);
static_assert(offsetof(USBInteractionNode_ConditionGroup, ConditionEq) == 0x0090);
static_assert(offsetof(USBInteractionNode_ConditionGroup, ConditionGroup1) == 0x0094);
static_assert(offsetof(USBInteractionNode_ConditionGroup, GroupEq1) == 0x00AC);
static_assert(offsetof(USBInteractionNode_ConditionGroup, ConditionGroup2) == 0x00B0);
static_assert(offsetof(USBInteractionNode_ConditionGroup, GroupEq2) == 0x00C8);
static_assert(offsetof(USBInteractionNode_ConditionGroup, RetrunValue) == 0x00D0);
static_assert(offsetof(USBInteractionNode_ConditionItem, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ConditionItem, ItemAlias) == 0x0090);
static_assert(offsetof(USBInteractionNode_ConditionItem, Equation) == 0x00A8);
static_assert(offsetof(USBInteractionNode_ConditionItem, CheckRange) == 0x00B0);
static_assert(offsetof(USBInteractionNode_ConditionItem, OutputTrueExec) == 0x00B8);
static_assert(offsetof(USBInteractionNode_ConditionItem, OutputFalseExec) == 0x00D8);
static_assert(offsetof(USBInteractionNode_ConditionItemCharge, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ConditionItemCharge, ItemAlias) == 0x0090);
static_assert(offsetof(USBInteractionNode_ConditionItemCharge, Equation) == 0x00A8);
static_assert(offsetof(USBInteractionNode_ConditionItemCharge, OutputTrueExec) == 0x00B0);
static_assert(offsetof(USBInteractionNode_ConditionItemCharge, OutputFalseExec) == 0x00D0);
static_assert(offsetof(USBInteractionNode_ConditionLevel, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ConditionLevel, Equation) == 0x0090);
static_assert(offsetof(USBInteractionNode_ConditionLevel, OutputTrueExec) == 0x0098);
static_assert(offsetof(USBInteractionNode_ConditionLevel, OutputFalseExec) == 0x00B8);
static_assert(offsetof(USBInteractionNode_ConditionQuest, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ConditionQuest, QuestAlias) == 0x0090);
static_assert(offsetof(USBInteractionNode_ConditionQuest, CompareState) == 0x00A8);
static_assert(offsetof(USBInteractionNode_ConditionQuest, OutputTrueExec) == 0x00B0);
static_assert(offsetof(USBInteractionNode_ConditionQuest, OutputFalseExec) == 0x00D0);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskGroupProgress, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskGroupProgress, QuestAlias) == 0x0090);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskGroupProgress, QuestTaskGroupAlias) == 0x00A8);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskGroupProgress, Equation) == 0x00C4);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskGroupProgress, OutputTrueExec) == 0x00C8);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskGroupProgress, OutputFalseExec) == 0x00E8);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskProgress, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskProgress, QuestAlias) == 0x0090);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskProgress, QuestTaskGroupAlias) == 0x00A8);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskProgress, QuestTaskAlias) == 0x00C0);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskProgress, Equation) == 0x00DC);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskProgress, OutputTrueExec) == 0x00E0);
static_assert(offsetof(USBInteractionNode_ConditionQuestTaskProgress, OutputFalseExec) == 0x0100);
static_assert(offsetof(USBInteractionNode_DebugPrintString, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_DebugPrintString, OutputString1) == 0x0090);
static_assert(offsetof(USBInteractionNode_DebugPrintString, OutputString2) == 0x00A0);
static_assert(offsetof(USBInteractionNode_EnterNikkeStage, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_EnterNikkeStage, NikkeStage) == 0x0090);
static_assert(offsetof(USBInteractionNode_EnterNikkeStage, EntryType) == 0x00A8);
static_assert(offsetof(USBInteractionNode_EnterNikkeStage, OutputExec) == 0x00B0);
static_assert(offsetof(USBInteractionNode_ExistClearRecordNikkeStage, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_ExistClearRecordNikkeStage, ResultTrue) == 0x0090);
static_assert(offsetof(USBInteractionNode_ExistClearRecordNikkeStage, ResultFalse) == 0x00B0);
static_assert(offsetof(USBInteractionNode_FailNotify, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_FailNotify, OwnerShowAsset) == 0x0090);
static_assert(offsetof(USBInteractionNode_FailNotify, CasterShowAsset) == 0x00B8);
static_assert(offsetof(USBInteractionNode_FailNotify, ShowPlayRuleType) == 0x00E0);
static_assert(offsetof(USBInteractionNode_GetCustomValue, CustomDataKey) == 0x0070);
static_assert(offsetof(USBInteractionNode_GetCustomValue, RefTableAlias) == 0x007C);
static_assert(offsetof(USBInteractionNode_GetCustomValue, InputConditions) == 0x0098);
static_assert(offsetof(USBInteractionNode_Goto, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_Goto, TargetLabelName) == 0x0090);
static_assert(offsetof(USBInteractionNode_GotoLabel, OutputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_GotoLabel, LabelName) == 0x0090);
static_assert(offsetof(USBInteractionNode_Grab, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_Grab, InteractionMoveType) == 0x0091);
static_assert(offsetof(USBInteractionNode_Grab, OutputExec) == 0x0098);
static_assert(offsetof(USBInteractionNode_IntCompare, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_IntCompare, CustomDataKeyA) == 0x0090);
static_assert(offsetof(USBInteractionNode_IntCompare, CustomDataKeyB) == 0x00B0);
static_assert(offsetof(USBInteractionNode_IntCompare, Operation) == 0x00D0);
static_assert(offsetof(USBInteractionNode_IntCompare, OutputTrueExec) == 0x00D8);
static_assert(offsetof(USBInteractionNode_IntCompare, OutputFalseExec) == 0x00F8);
static_assert(offsetof(USBInteractionNode_IntCompare, RefTableAlias) == 0x0120);
static_assert(offsetof(USBInteractionNode_InteractCamp, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_InteractCamp, InteractType) == 0x0090);
static_assert(offsetof(USBInteractionNode_InteractCamp, OwnerShow) == 0x0098);
static_assert(offsetof(USBInteractionNode_InteractCamp, CasterShow) == 0x00A0);
static_assert(offsetof(USBInteractionNode_InteractCamp, CasterLoopShowAsset) == 0x00A8);
static_assert(offsetof(USBInteractionNode_InteractCamp, ShowPlayRuleType) == 0x00D4);
static_assert(offsetof(USBInteractionNode_InteractCamp, InteractionMoveType) == 0x00DD);
static_assert(offsetof(USBInteractionNode_InteractCamp, OutputExec) == 0x00E0);
static_assert(offsetof(USBInteractionNode_InteractionUIData, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_InteractionUIData, InteractionUIDataType) == 0x0090);
static_assert(offsetof(USBInteractionNode_InteractionUIData, TextValue) == 0x0098);
static_assert(offsetof(USBInteractionNode_MessageBoxYN, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_MessageBoxYN, MessageText) == 0x0090);
static_assert(offsetof(USBInteractionNode_MessageBoxYN, Yes) == 0x00A8);
static_assert(offsetof(USBInteractionNode_MessageBoxYN, No) == 0x00C8);
static_assert(offsetof(USBInteractionNode_PropertyAcquireItem, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_PropertyAcquireItem, PropertyData) == 0x0098);
static_assert(offsetof(USBInteractionNode_PropertyAcquireItem, OutputExec) == 0x00A8);
static_assert(offsetof(USBInteractionNode_PropertyAcquireItem, RefTableAlias) == 0x00C8);
static_assert(offsetof(USBInteractionNode_PropertyAcquireQuest, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_PropertyAcquireQuest, OutputExec) == 0x0090);
static_assert(offsetof(USBInteractionNode_PropertyAcquireQuest, RefTableAlias) == 0x00B0);
static_assert(offsetof(USBInteractionNode_PropertyConsumeItem, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_PropertyConsumeItem, OutputExec) == 0x0090);
static_assert(offsetof(USBInteractionNode_PropertyConsumeItem, PropertyData) == 0x00B0);
static_assert(offsetof(USBInteractionNode_PropertyConsumeItem, RefTableAlias) == 0x00C4);
static_assert(offsetof(USBInteractionNode_PropertyDespawnItem, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_PropertyDespawnItem, OutputExec) == 0x0090);
static_assert(offsetof(USBInteractionNode_PropertyDespawnItem, PropertyData) == 0x00B0);
static_assert(offsetof(USBInteractionNode_PropertyDespawnItem, ItemBucketType) == 0x00C4);
static_assert(offsetof(USBInteractionNode_PropertyDespawnItem, CheckRange) == 0x00C5);
static_assert(offsetof(USBInteractionNode_PropertyDespawnItem, RefTableAlias) == 0x00C8);
static_assert(offsetof(USBInteractionNode_PropertyRemoveItem, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_PropertyRemoveItem, OutputExec) == 0x0090);
static_assert(offsetof(USBInteractionNode_PropertyRemoveItem, PropertyData) == 0x00B0);
static_assert(offsetof(USBInteractionNode_PropertyRemoveItem, CheckRange) == 0x00C4);
static_assert(offsetof(USBInteractionNode_PropertyRemoveItem, RefTableAlias) == 0x00C8);
static_assert(offsetof(USBInteractionNode_PropertySupplyChargeItem, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_PropertySupplyChargeItem, PropertyData) == 0x0098);
static_assert(offsetof(USBInteractionNode_PropertySupplyChargeItem, OutputExec) == 0x00A8);
static_assert(offsetof(USBInteractionNode_PropertySupplyChargeItem, RefTableAlias) == 0x00C8);
static_assert(offsetof(USBInteractionNode_Puzzle, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_Puzzle, PuzzleWidgetPath) == 0x0090);
static_assert(offsetof(USBInteractionNode_Puzzle, OpenUIType) == 0x00A0);
static_assert(offsetof(USBInteractionNode_Puzzle, PuzzleInputText) == 0x00A1);
static_assert(offsetof(USBInteractionNode_Puzzle, OwnerShow) == 0x00A8);
static_assert(offsetof(USBInteractionNode_Puzzle, CasterShow) == 0x00B8);
static_assert(offsetof(USBInteractionNode_Puzzle, OwnerShowAsset) == 0x00C8);
static_assert(offsetof(USBInteractionNode_Puzzle, CasterShowAsset) == 0x00F0);
static_assert(offsetof(USBInteractionNode_Puzzle, CasterLoopShowAsset) == 0x0118);
static_assert(offsetof(USBInteractionNode_Puzzle, ShowPlayRuleType) == 0x0144);
static_assert(offsetof(USBInteractionNode_Puzzle, Success_Sound) == 0x0148);
static_assert(offsetof(USBInteractionNode_Puzzle, Fail_Sound) == 0x0150);
static_assert(offsetof(USBInteractionNode_Puzzle, InteractionMoveType) == 0x0160);
static_assert(offsetof(USBInteractionNode_Puzzle, Result_Success) == 0x0168);
static_assert(offsetof(USBInteractionNode_Puzzle, Result_Fail) == 0x0188);
static_assert(offsetof(USBInteractionNode_Puzzle, InputConditions) == 0x01A8);
static_assert(offsetof(USBInteractionNode_QuestEvent, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_QuestEvent, QuestEventType) == 0x0090);
static_assert(offsetof(USBInteractionNode_QuestEvent, QuestTaskAlias) == 0x0094);
static_assert(offsetof(USBInteractionNode_QuestEvent, OutputExec) == 0x00B0);
static_assert(offsetof(USBInteractionNode_RandomInt, ResultInfo) == 0x0078);
static_assert(offsetof(USBInteractionNode_RequestBoardUI, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_RequestBoardUI, InteractionMoveType) == 0x0095);
static_assert(offsetof(USBInteractionNode_RequestBoardUI, RequestBoardType) == 0x0096);
static_assert(offsetof(USBInteractionNode_RequestBoardUI, OutputExec) == 0x0098);
static_assert(offsetof(USBInteractionNode_ResultSwitch, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_ResultSwitch, InputConditions) == 0x0090);
static_assert(offsetof(USBInteractionNode_ResultSwitch, Success_Sound) == 0x00A0);
static_assert(offsetof(USBInteractionNode_ResultSwitch, Fail_Sound) == 0x00A8);
static_assert(offsetof(USBInteractionNode_ResultSwitch, ResultSucces) == 0x00B0);
static_assert(offsetof(USBInteractionNode_ResultSwitch, ResultFail) == 0x00D0);
static_assert(offsetof(USBInteractionNode_ResultSwitch, ResultValueInfo) == 0x00F0);
static_assert(offsetof(USBInteractionNode_Root, RootExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_Root, InputConditions) == 0x0080);
static_assert(offsetof(USBInteractionNode_Root, ConditionCheckType) == 0x0093);
static_assert(offsetof(USBInteractionNode_Root, HoldDurationType) == 0x0094);
static_assert(offsetof(USBInteractionNode_Root, OwnerRotationType) == 0x0095);
static_assert(offsetof(USBInteractionNode_Root, CancelFilterType) == 0x009E);
static_assert(offsetof(USBInteractionNode_Root, PhotoModeAllowType) == 0x00A2);
static_assert(offsetof(USBInteractionNode_Root, ExecCheckCondition) == 0x00A4);
static_assert(offsetof(USBInteractionNode_SaveGame, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_SaveGame, OutputExec) == 0x0098);
static_assert(offsetof(USBInteractionNode_SelectDataSwitch, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_SelectDataSwitch, SelectData) == 0x0090);
static_assert(offsetof(USBInteractionNode_SelectDataSwitch, Equation) == 0x00AC);
static_assert(offsetof(USBInteractionNode_SelectDataSwitch, ResultTrue) == 0x00B0);
static_assert(offsetof(USBInteractionNode_SelectDataSwitch, ResultFalse) == 0x00D0);
static_assert(offsetof(USBInteractionNode_SetCustomValue, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_SetCustomValue, CustomDataKey) == 0x0090);
static_assert(offsetof(USBInteractionNode_SetCustomValue, ValueApplyType) == 0x009C);
static_assert(offsetof(USBInteractionNode_SetCustomValue, OutputExec) == 0x00A0);
static_assert(offsetof(USBInteractionNode_SetCustomValue, InputCustomValueInfo) == 0x00C0);
static_assert(offsetof(USBInteractionNode_SetCustomValue, RefTableAlias) == 0x00E0);
static_assert(offsetof(USBInteractionNode_ShopUI, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_ShopUI, ShopName) == 0x0090);
static_assert(offsetof(USBInteractionNode_ShopUI, ShopTitleTag) == 0x00A0);
static_assert(offsetof(USBInteractionNode_ShopUI, InteractionMoveType) == 0x00B5);
static_assert(offsetof(USBInteractionNode_ShopUI, TargetShopDataType) == 0x00B6);
static_assert(offsetof(USBInteractionNode_ShopUI, UIActionRequestGroup) == 0x00C0);
static_assert(offsetof(USBInteractionNode_ShopUI, OutputExec) == 0x00D8);
static_assert(offsetof(USBInteractionNode_Switch, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_Switch, InputConditions) == 0x0090);
static_assert(offsetof(USBInteractionNode_Switch, OutputExecConnection) == 0x00A0);
static_assert(offsetof(USBInteractionNode_Switch, DefaultResult) == 0x00B0);
static_assert(offsetof(USBInteractionNode_SwitchOnInt, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_SwitchOnInt, InputIntValue) == 0x0090);
static_assert(offsetof(USBInteractionNode_SwitchOnInt, OutputExecConnection) == 0x00B0);
static_assert(offsetof(USBInteractionNode_SwitchOnInt, DefaultResult) == 0x00C0);
static_assert(offsetof(USBInteractionNode_TemplateEnd, OutputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_TemplateEnd, TemplateName) == 0x0090);
static_assert(offsetof(USBInteractionNode_TemplateInst, InputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_TemplateInst, OutputExec) == 0x0090);
static_assert(offsetof(USBInteractionNode_TemplateInst, TemplateName) == 0x00B0);
static_assert(offsetof(USBInteractionNode_TemplateStart, OutputExec) == 0x0070);
static_assert(offsetof(USBInteractionNode_TemplateStart, TemplateName) == 0x0090);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, RefConditionAlias) == 0x0070);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, ConditionType) == 0x0088);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, ConditionEq) == 0x0089);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, ConditionAlias) == 0x008C);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, CustomStr01) == 0x0098);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, CustomStr02) == 0x00B0);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, CustomStr03) == 0x00C8);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, CheckStrValue) == 0x00E0);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, CheckStatCalcType) == 0x00FC);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, ActorTargetType) == 0x00FD);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, Description) == 0x0100);
static_assert(offsetof(USBInteractionNode_TheaterChoiceCondition, FailNotifyMsg) == 0x0110);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, SelectConditions) == 0x0070);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, ConditionGroup) == 0x0080);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, TextVisibleType) == 0x0098);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, DisplayText) == 0x00A0);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, NextTask) == 0x00B8);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, InteractionGraphExec) == 0x00C0);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, SelectedMessagePopupText) == 0x00D0);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, Output) == 0x00F0);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, QuestSymbolType) == 0x0110);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, QuestSymbol_VisibilityConditionGorup) == 0x0118);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, LinkToSelectDataName) == 0x0128);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, DesignType) == 0x0130);
static_assert(offsetof(USBInteractionNode_TheaterChoiceData, TitleMessageText) == 0x0138);
static_assert(offsetof(USBInteractionNode_TheaterInteractionSelectData, SelectDataName) == 0x0070);
static_assert(offsetof(USBInteractionNode_TheaterInteractionSelectData, DesignType) == 0x0079);
static_assert(offsetof(USBInteractionNode_TheaterInteractionSelectData, TitleMessageText) == 0x0080);
static_assert(offsetof(USBInteractionNode_TheaterInteractionSelectData, Description) == 0x0098);
static_assert(offsetof(USBInteractionNode_TheaterInteractionSelectData, InputChoiceDataList) == 0x00A8);
static_assert(offsetof(USBInteractionNode_Tick, Exec) == 0x0070);
static_assert(offsetof(USBInteractionNode_UI, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_UI, OpenUIType) == 0x0090);
static_assert(offsetof(USBInteractionNode_UI, OpenUILogicType) == 0x0091);
static_assert(offsetof(USBInteractionNode_UI, OwnerShow) == 0x0098);
static_assert(offsetof(USBInteractionNode_UI, CasterShow) == 0x00A0);
static_assert(offsetof(USBInteractionNode_UI, CasterLoopShowAsset) == 0x00A8);
static_assert(offsetof(USBInteractionNode_UI, ShowPlayRuleType) == 0x00D4);
static_assert(offsetof(USBInteractionNode_UI, InteractionMoveType) == 0x00DE);
static_assert(offsetof(USBInteractionNode_UI, UIActionRequestGroup) == 0x00E0);
static_assert(offsetof(USBInteractionNode_UI, OutputExec) == 0x00F8);
static_assert(offsetof(USBInteractionNode_UISystemNotice, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_UISystemNotice, MessageText) == 0x0090);
static_assert(offsetof(USBInteractionNode_UISystemNotice, OutputExec) == 0x00A8);
static_assert(offsetof(USBInteractionNode_WorkShopUI, ExecInput) == 0x0070);
static_assert(offsetof(USBInteractionNode_WorkShopUI, OpenUIType) == 0x0090);
static_assert(offsetof(USBInteractionNode_WorkShopUI, OwnerShow) == 0x0098);
static_assert(offsetof(USBInteractionNode_WorkShopUI, CasterShow) == 0x00A0);
static_assert(offsetof(USBInteractionNode_WorkShopUI, CasterLoopShowAsset) == 0x00A8);
static_assert(offsetof(USBInteractionNode_WorkShopUI, ShowPlayRuleType) == 0x00D4);
static_assert(offsetof(USBInteractionNode_WorkShopUI, InteractionMoveType) == 0x00DD);
static_assert(offsetof(USBInteractionNode_WorkShopUI, ShopName) == 0x00E0);
static_assert(offsetof(USBInteractionNode_WorkShopUI, TargetShopDataType) == 0x00F0);
static_assert(offsetof(USBInteractionNode_WorkShopUI, UIActionRequestGroup) == 0x00F8);
static_assert(offsetof(USBInteractionNode_WorkShopUI, OutputExec) == 0x0110);
static_assert(offsetof(ASBItem, SpawnOffset) == 0x0314);
static_assert(offsetof(ASBItem, ShowSpawn) == 0x0328);
static_assert(offsetof(ASBItem, ShowInteraction) == 0x0330);
static_assert(offsetof(ASBItem, PocketGuid) == 0x0340);
static_assert(offsetof(ASBItem, Arguemnts) == 0x0358);
static_assert(offsetof(ASBItem, LastExistFloorHitLocation) == 0x036C);
static_assert(offsetof(ASBItem, TargetLocation) == 0x0378);
static_assert(offsetof(ASBItem, ActorActiveVolumeNameArray) == 0x0390);
static_assert(offsetof(ASBItem, FloorLevelName) == 0x03A4);
static_assert(offsetof(ASBItem, SpawnLocation) == 0x0424);
static_assert(offsetof(ASBItem, SpawnRotation) == 0x0430);
static_assert(offsetof(ASBItem, ResourcePath) == 0x0440);
static_assert(offsetof(ASBItem, LastLocation) == 0x045C);
static_assert(offsetof(ASBItem, PrimitiveComps) == 0x0480);
static_assert(offsetof(ASBItem, SkeletalMeshComp) == 0x0490);
static_assert(offsetof(ASBItem, StaticMeshComp) == 0x0498);
static_assert(offsetof(ASBItem, CachedActorBoundExtents) == 0x04A0);
static_assert(offsetof(USBItemAssetData, SpawnCommon) == 0x0038);
static_assert(offsetof(USBItemAssetData, SpawnUncommon) == 0x0040);
static_assert(offsetof(USBItemAssetData, SpawnRare) == 0x0048);
static_assert(offsetof(USBItemAssetData, SpawnEpic) == 0x0050);
static_assert(offsetof(USBItemAssetData, SpawnLegendary) == 0x0058);
static_assert(offsetof(USBLaserUserData, BounceType) == 0x0029);
static_assert(offsetof(FSBLaserSegment, StartPosition) == 0x0000);
static_assert(offsetof(FSBLaserSegment, EndPosition) == 0x000C);
static_assert(offsetof(FSBLaserSegment, BeamNiagaraComponent) == 0x0018);
static_assert(offsetof(FSBLaserSegment, SoundGUID) == 0x0024);
static_assert(offsetof(FSBLaserSegment, HitSoundGUID) == 0x0034);
static_assert(offsetof(FSBLaserSegment, SoundAttenuation) == 0x0048);
static_assert(offsetof(FSBLaserSegment, HitActor) == 0x03E8);
static_assert(offsetof(USBLaserComponent, GroupName) == 0x0264);
static_assert(offsetof(USBLaserComponent, OverrideUniqueName) == 0x026C);
static_assert(offsetof(USBLaserComponent, ZoneEventActorTriggerTag) == 0x0274);
static_assert(offsetof(USBLaserComponent, HitSound) == 0x0298);
static_assert(offsetof(USBLaserComponent, HitSoundAttenuation) == 0x02A0);
static_assert(offsetof(USBLaserComponent, LaserSound) == 0x02A8);
static_assert(offsetof(USBLaserComponent, LaserSoundAttenuation) == 0x02B0);
static_assert(offsetof(USBLaserComponent, OnSound) == 0x02B8);
static_assert(offsetof(USBLaserComponent, OnSoundAttenuation) == 0x02C0);
static_assert(offsetof(USBLaserComponent, OffSound) == 0x02C8);
static_assert(offsetof(USBLaserComponent, OffSoundAttenuation) == 0x02D0);
static_assert(offsetof(USBLaserComponent, BeamNiagaraSystem) == 0x02F0);
static_assert(offsetof(USBLaserComponent, HitEffectAlias) == 0x02F8);
static_assert(offsetof(USBLaserComponent, ZoneEventAliasWhenHit) == 0x0304);
static_assert(offsetof(USBLaserComponent, StoryMode_BeamNiagaraSystem) == 0x0318);
static_assert(offsetof(USBLaserComponent, StoryMode_HitEffectAlias) == 0x0320);
static_assert(offsetof(USBLaserComponent, StoryMode_ZoneEventAliasWhenHit) == 0x032C);
static_assert(offsetof(USBLaserComponent, LaserSegmentArray) == 0x0348);
static_assert(offsetof(ASBLevelLoadVolume, Levels) == 0x0318);
static_assert(offsetof(ASBLevelLoadVolume, LevelObjOrigin) == 0x0378);
static_assert(offsetof(ASBLevelLoadVolume, LevelObjExtent) == 0x0384);
static_assert(offsetof(FSBLevelSequenceAnimTrailSectionData, PSTemplate) == 0x0000);
static_assert(offsetof(FSBLevelSequenceAnimTrailSectionData, FirstSocketName) == 0x0008);
static_assert(offsetof(FSBLevelSequenceAnimTrailSectionData, SecondSocketName) == 0x0010);
static_assert(offsetof(FSBLevelSequenceAnimTrailSectionData, MoreSocketNames) == 0x0018);
static_assert(offsetof(FSBLevelSequenceAnimTrailSectionData, WidthScaleMode) == 0x0028);
static_assert(offsetof(FSBLevelSequenceAnimTrailSectionData, WidthScaleCurve) == 0x002C);
static_assert(offsetof(USBLevelSequenceAnimTrailSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceAnimTrailTrack, AnimationSections) == 0x0080);
static_assert(offsetof(FSBLevelSequenceBKMovieSectionData, BKAssetPath) == 0x0000);
static_assert(offsetof(FSBLevelSequenceBKMovieSectionData, BKAssetPath_Low) == 0x0010);
static_assert(offsetof(USBLevelSequenceBKMovieSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceBookmarkSectionData, BookmarkName) == 0x0000);
static_assert(offsetof(USBLevelSequenceBookmarkSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceBookmarkTrack, Sections) == 0x0080);
static_assert(offsetof(FSBLevelSequenceCameraActorBoundsSectionData, ActorBindingArray) == 0x0000);
static_assert(offsetof(FSBLevelSequenceCameraActorBoundsSectionData, ActorBoneTemplateData) == 0x0010);
static_assert(offsetof(FSBLevelSequenceCameraActorBoundsSectionData, ActorBoneNameArray) == 0x0018);
static_assert(offsetof(USBLevelSequenceCameraActorBoundsSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceCameraActorBoundsTemplateSectionData, ActorBoneTemplateData) == 0x0000);
static_assert(offsetof(USBLevelSequenceCameraActorBoundsTemplateSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceCameraActorBoundsTemplateTrack, Sections) == 0x0080);
static_assert(offsetof(USBLevelSequenceCameraActorBoundsTrack, Sections) == 0x0080);
static_assert(offsetof(FSBLevelSequenceCameraLookAtTargetSectionData, SourceBinding) == 0x0000);
static_assert(offsetof(FSBLevelSequenceCameraLookAtTargetSectionData, TargetBinding) == 0x0018);
static_assert(offsetof(USBLevelSequenceCameraLookAtTargetSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceCameraLookAtTargetTrack, Sections) == 0x0080);
static_assert(offsetof(FSBLevelSequenceCharacterActionSectionData, ActionType) == 0x0000);
static_assert(offsetof(FSBLevelSequenceCharacterActionSectionData, ChangeMovement) == 0x0005);
static_assert(offsetof(FSBLevelSequenceCharacterActionSectionData, ValidLandingMovement) == 0x0011);
static_assert(offsetof(FSBLevelSequenceCharacterActionSectionData, FinishMovement) == 0x0013);
static_assert(offsetof(FSBLevelSequenceCharacterActionSectionData, NotifyShowEventTagName) == 0x0018);
static_assert(offsetof(FSBLevelSequenceCharacterActionSectionData, NotifyShowCustomNameValue) == 0x0020);
static_assert(offsetof(USBLevelSequenceCharacterActionSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceCharacterActionTrack, AnimationSections) == 0x0080);
static_assert(offsetof(USBLevelSequenceCommonTrack, Sections) == 0x0080);
static_assert(offsetof(USBLevelSequenceEnvControlVolumeSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceEnvControlVolumeTrack, AnimationSections) == 0x0080);
static_assert(offsetof(FSBLevelSequenceEventActorActiveSectionData, EventAlias) == 0x0000);
static_assert(offsetof(USBLevelSequenceEventActorActiveSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventActorAISectionData, ActorTarget) == 0x0000);
static_assert(offsetof(FSBLevelSequenceEventActorAISectionData, ActorTagName) == 0x0004);
static_assert(offsetof(FSBLevelSequenceEventActorAISectionData, MovementMode) == 0x000E);
static_assert(offsetof(USBLevelSequenceEventActorAISection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventActorBattleStateSectionData, EventAlias) == 0x0000);
static_assert(offsetof(USBLevelSequenceEventActorBattleStateSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventActorEffectSectionData, EventAlias) == 0x0000);
static_assert(offsetof(FSBLevelSequenceEventActorEffectSectionData, TeardownEventAlias) == 0x0018);
static_assert(offsetof(USBLevelSequenceEventActorEffectSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventAmbientSoundControlSectionData, AmbientSoundVolumeName) == 0x0000);
static_assert(offsetof(FSBLevelSequenceEventAmbientSoundControlSectionData, ControlType) == 0x0008);
static_assert(offsetof(USBLevelSequenceEventAmbientSoundControlSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventBGMPrioritySectionData, BGMVolumeName) == 0x0000);
static_assert(offsetof(USBLevelSequenceEventBGMPrioritySection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventBGMSectionData, BGMTrack) == 0x0018);
static_assert(offsetof(USBLevelSequenceEventBGMSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceEventGlobalValueSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventHUDActionSectionData, ActionType) == 0x0000);
static_assert(offsetof(USBLevelSequenceEventHUDActionSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventLockOnAtChatSectionData, CharacterTag) == 0x0000);
static_assert(offsetof(USBLevelSequenceEventLockOnAtChatSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventPlayerActionSectionData, ActionType) == 0x0000);
static_assert(offsetof(FSBLevelSequenceEventPlayerActionSectionData, FinishMovement) == 0x0009);
static_assert(offsetof(FSBLevelSequenceEventPlayerActionSectionData, ChangeMovement) == 0x001E);
static_assert(offsetof(FSBLevelSequenceEventPlayerActionSectionData, UpdateVolumeEnvVolumeTag) == 0x0028);
static_assert(offsetof(USBLevelSequenceEventPlayerActionSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2SectionData, Waveform) == 0x0000);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2SectionData, Rot_Pitch) == 0x000C);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2SectionData, Rot_Yaw) == 0x0014);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2SectionData, Rot_Roll) == 0x001C);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2SectionData, Loc_X) == 0x0024);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2SectionData, Loc_Y) == 0x002C);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2SectionData, Loc_Z) == 0x0034);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2SectionData, ScaleCurve) == 0x0048);
static_assert(offsetof(USBLevelSequenceEventPlayerCameraShake2Section, ShakeData) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShakeSectionData, ShakeClass) == 0x0000);
static_assert(offsetof(USBLevelSequenceEventPlayerCameraShakeSection, ShakeData) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventSoundEventSectionData, SoundEventAlias) == 0x0000);
static_assert(offsetof(USBLevelSequenceEventSoundEventSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventSoundMixSectionData, SoundMix) == 0x0008);
static_assert(offsetof(USBLevelSequenceEventSoundMixSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventSoundVolumeSectionData, SoundVolumeChannel) == 0x0000);
static_assert(offsetof(USBLevelSequenceEventSoundVolumeSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceEventTrack, Sections) == 0x0080);
static_assert(offsetof(FSBLevelSequenceEventUIActionSectionData, EventAlias) == 0x0000);
static_assert(offsetof(FSBLevelSequenceEventUIActionSectionData, EventAlias2) == 0x001C);
static_assert(offsetof(USBLevelSequenceEventUIActionSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventVibrationSectionData, VibrationSet) == 0x0000);
static_assert(offsetof(USBLevelSequenceEventVibrationSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventZoneEventSectionData, EventAlias) == 0x0000);
static_assert(offsetof(USBLevelSequenceEventZoneEventSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceEventZoneLoadWaitSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceGraphicsAutoScaleTrack, Sections) == 0x0080);
static_assert(offsetof(USBLevelSequenceHLODSection, BoolCurve) == 0x00E8);
static_assert(offsetof(FSBTheaterLevelSequenceSkipFadeParam, FadeColor) == 0x0014);
static_assert(offsetof(FSBLevelSequenceLevelStreamingWaitSectionData, FadeParam) == 0x0000);
static_assert(offsetof(USBLevelSequenceLevelStreamingWaitSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceLookAtTargetSectionData, ActionType) == 0x0000);
static_assert(offsetof(FSBLevelSequenceLookAtTargetSectionData, TargetBinding) == 0x0004);
static_assert(offsetof(FSBLevelSequenceLookAtTargetSectionData, TargetSocket) == 0x0020);
static_assert(offsetof(USBLevelSequenceLookAtTargetSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceLookAtTargetTrack, AnimationSections) == 0x0080);
static_assert(offsetof(FSBLevelSequenceMoveToLocationSectionData, Type) == 0x0000);
static_assert(offsetof(FSBLevelSequenceMoveToLocationSectionData, TargetLocation) == 0x0004);
static_assert(offsetof(FSBLevelSequenceMoveToLocationSectionData, TargetPoint) == 0x0010);
static_assert(offsetof(FSBLevelSequenceMoveToLocationSectionData, OverrideBrakingInputType) == 0x002A);
static_assert(offsetof(FSBLevelSequenceMoveToLocationSectionData, TargetRotation) == 0x003C);
static_assert(offsetof(FSBLevelSequenceMoveToLocationSectionData, EndToMark) == 0x0050);
static_assert(offsetof(USBLevelSequenceMoveToLocationSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceMoveToLocationTrack, AnimationSections) == 0x0080);
static_assert(offsetof(USBLevelSequenceObserver, KeyName) == 0x00A0);
static_assert(offsetof(FSBLevelSequenceSetAnimBPPropertySectionData, Name) == 0x0000);
static_assert(offsetof(USBLevelSequenceSetAnimBPPropertySection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceSetAnimBPPropertyTrack, AnimationSections) == 0x0080);
static_assert(offsetof(FSBTableIndex, Index) == 0x0000);
static_assert(offsetof(FSBTableIndex, ColumnName) == 0x000C);
static_assert(offsetof(FSBTableIndex, Custom_BrowseClassName) == 0x001C);
static_assert(offsetof(FSBSocialAnimDescAlias, Group) == 0x0000);
static_assert(offsetof(FSBSocialAnimDescAlias, Motion) == 0x0008);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, PlayType) == 0x0000);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, AnimMeshSlot) == 0x0001);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, AssetType) == 0x0002);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, Animation) == 0x0008);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, SocialAnimGroup) == 0x0010);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, SocialAnimDescAlias) == 0x0034);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, FootIKControl) == 0x005C);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, StopFootIKControl) == 0x0064);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, StartFrameOffset) == 0x006C);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, EndFrameOffset) == 0x0070);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationParams, DeltaFrameOffset) == 0x0074);
static_assert(offsetof(USBLevelSequenceSkeletalAnimationSection, Params) == 0x00E8);
static_assert(offsetof(USBLevelSequenceSkeletalAnimationTrack, AnimationSections) == 0x0080);
static_assert(offsetof(USBLevelSequenceSkeletalAnimationTrack, RootMotionParams) == 0x0098);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimMoveStateParams, MoveStateBlendSpace) == 0x0000);
static_assert(offsetof(USBLevelSequenceSkeletalAnimMoveStateSection, Params) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceSkipSectionData, FadeParam) == 0x0000);
static_assert(offsetof(USBLevelSequenceSkipSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceSkipTrack, Sections) == 0x0080);
static_assert(offsetof(FSBLevelSequenceSplineCineCamTrackingSectionData, TrackingCharacterTag) == 0x0000);
static_assert(offsetof(USBLevelSequenceSplineCineCamTrackingSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceSplineCineCamTrackingTrack, AnimationSections) == 0x0080);
static_assert(offsetof(FSBLevelSequenceTheaterAreaSectionData, MainText) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterAreaSectionData, SubText) == 0x0018);
static_assert(offsetof(FSBLevelSequenceTheaterAreaSectionData, Blank) == 0x0030);
static_assert(offsetof(USBLevelSequenceTheaterAreaSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceTheaterAttachWidgetSectionData, WidgetPath) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterAttachWidgetSectionData, Arguments) == 0x0028);
static_assert(offsetof(FSBLevelSequenceTheaterAttachWidgetSectionData, ScreenHorizontalAlignment) == 0x0038);
static_assert(offsetof(FSBLevelSequenceTheaterAttachWidgetSectionData, ScreenVerticalAlignment) == 0x0039);
static_assert(offsetof(FSBLevelSequenceTheaterAttachWidgetSectionData, ScreenOffset) == 0x003C);
static_assert(offsetof(USBLevelSequenceTheaterAttachWidgetSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceTheaterDialogueSectionData, Message) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterDialogueSectionData, Blank) == 0x0020);
static_assert(offsetof(USBLevelSequenceTheaterDialogueSection, Message) == 0x00E8);
static_assert(offsetof(USBLevelSequenceTheaterDialogueSection, Data) == 0x0108);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterActorInfo, ActorTags) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterActorInfo, ActorSocketName) == 0x0010);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterActorInfo, ActorOffset) == 0x0018);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterLocationData, LocationType) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterLocationData, ScreenHorizontalAlignment) == 0x0001);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterLocationData, ScreenVerticalAlignment) == 0x0002);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterLocationData, ScreenOffset) == 0x0004);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterLocationData, ActorInfo) == 0x0010);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterFlowData, ActionKey) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterFlowData, LocationData) == 0x0008);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterFlowData, StartFrame) == 0x0038);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterFlowData, EndFrame) == 0x003C);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, ActionKey) == 0x0000);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, TakeSelectPercentArray) == 0x0008);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, HitEventName) == 0x0030);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, SingleInputKey) == 0x0048);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, SingleLocationData) == 0x0058);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, SingleHitShowData) == 0x0088);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, SingleHitShowMainActor) == 0x0090);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, SingleHitShowOtherActorArray) == 0x00A8);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, SingleDualSenseData) == 0x00B8);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, DoubleLocationData) == 0x00D8);
static_assert(offsetof(FSBLevelSequenceEventInputCounterSectionData, FlowInputKeyArray) == 0x0108);
static_assert(offsetof(USBLevelSequenceTheaterInputCounterSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceEventInputFeedbackActionData, SequenceEventType) == 0x0000);
static_assert(offsetof(FSBLevelSequenceEventInputFeedbackActionData, ActionType) == 0x0001);
static_assert(offsetof(FSBLevelSequenceEventInputFeedbackActionData, Sequence) == 0x0008);
static_assert(offsetof(FSBLevelSequenceEventInputFeedbackActionData, AttachActorTagNames) == 0x0010);
static_assert(offsetof(FSBLevelSequenceEventInputFeedbackSectionData, ActionList) == 0x0000);
static_assert(offsetof(USBLevelSequenceTheaterInputFeedbackSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceTheaterInteractionSelectSectionData, Tag) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterInteractionSelectSectionData, ContentType) == 0x0010);
static_assert(offsetof(USBLevelSequenceTheaterInteractionSelectSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceTheaterPlayerChoiceSectionData, MessageArray) == 0x0000);
static_assert(offsetof(USBLevelSequenceTheaterPlayerChoiceSection, MessageArray) == 0x00E8);
static_assert(offsetof(USBLevelSequenceTheaterPlayerChoiceSection, Data) == 0x0100);
static_assert(offsetof(USBLevelSequenceTheaterPlayerChoiceSection, Blank) == 0x0118);
static_assert(offsetof(FSBLevelSequenceTheaterQTEActorInfo, ActorTags) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterQTEActorInfo, ActorSocketName) == 0x0010);
static_assert(offsetof(FSBLevelSequenceTheaterQTEActorInfo, ActorOffset) == 0x0018);
static_assert(offsetof(FSBLevelSequenceTheaterQTELocationData, LocationType) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterQTELocationData, ScreenHorizontalAlignment) == 0x0001);
static_assert(offsetof(FSBLevelSequenceTheaterQTELocationData, ScreenVerticalAlignment) == 0x0002);
static_assert(offsetof(FSBLevelSequenceTheaterQTELocationData, ScreenOffset) == 0x0004);
static_assert(offsetof(FSBLevelSequenceTheaterQTELocationData, ActorInfo) == 0x0010);
static_assert(offsetof(FSBLevelSequenceEventQTESectionData, TakeSelectPercentArray) == 0x0008);
static_assert(offsetof(FSBLevelSequenceEventQTESectionData, HitEventName) == 0x0030);
static_assert(offsetof(FSBLevelSequenceEventQTESectionData, SingleInputAction) == 0x0044);
static_assert(offsetof(FSBLevelSequenceEventQTESectionData, SingleLocationData) == 0x0058);
static_assert(offsetof(FSBLevelSequenceEventQTESectionData, SingleHitShowData) == 0x0088);
static_assert(offsetof(FSBLevelSequenceEventQTESectionData, SingleHitShowMainActor) == 0x0090);
static_assert(offsetof(FSBLevelSequenceEventQTESectionData, SingleHitShowOtherActorArray) == 0x00A8);
static_assert(offsetof(FSBLevelSequenceEventQTESectionData, SingleDualSenseData) == 0x00B8);
static_assert(offsetof(USBLevelSequenceTheaterQTESection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceTheaterReactionTriggerSectionData, DualSenseTriggerData) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterReactionTriggerSectionData, InputKey) == 0x0008);
static_assert(offsetof(FSBLevelSequenceTheaterReactionTriggerSectionData, ScreenHorizontalAlignment) == 0x0011);
static_assert(offsetof(FSBLevelSequenceTheaterReactionTriggerSectionData, ScreenVerticalAlignment) == 0x0012);
static_assert(offsetof(FSBLevelSequenceTheaterReactionTriggerSectionData, ScreenOffset) == 0x0014);
static_assert(offsetof(USBLevelSequenceTheaterReactionTriggerSection, Data) == 0x00E8);
static_assert(offsetof(FSBLevelSequenceTheaterSubtitleSectionData, Type) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterSubtitleSectionData, title) == 0x0008);
static_assert(offsetof(FSBLevelSequenceTheaterSubtitleSectionData, Message) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterSubtitleSectionData, FacialAnimCharacterTag) == 0x0044);
static_assert(offsetof(FSBLevelSequenceTheaterSubtitleSectionData, ContentType) == 0x004C);
static_assert(offsetof(FSBLevelSequenceTheaterSubtitleSectionData, Blank) == 0x004D);
static_assert(offsetof(USBLevelSequenceTheaterSubtitleSection, Data) == 0x00E8);
static_assert(offsetof(USBLevelSequenceTheaterTrack, Sections) == 0x0080);
static_assert(offsetof(USBLevelSequenceVisibilityTagSection, VisibilityTag) == 0x00E8);
static_assert(offsetof(USBLevelSequenceVisibilityTagTrack, Sections) == 0x0080);
static_assert(offsetof(USBLevelStreamingContext, ZoneAlias) == 0x0028);
static_assert(offsetof(USBLevelStreamingContext, CachedLoadLevels) == 0x0050);
static_assert(offsetof(USBLevelStreamingContext, CachedUnloadLevels) == 0x0060);
static_assert(offsetof(USBLevelStreamingContext, CachedPersistentLevels) == 0x0070);
static_assert(offsetof(USBLevelStreamingContext, CachedOriginalLevels) == 0x0080);
static_assert(offsetof(USBLevelStreamingContext, CachedRemoveLevels) == 0x0090);
static_assert(offsetof(USBLevelStreamingContext, CachedIgnoreRemoveLevels) == 0x00A0);
static_assert(offsetof(USBLevelStreamingContext, CachedStreamingVolumes) == 0x00B0);
static_assert(offsetof(USBLevelStreamingContext, NewWorld) == 0x0120);
static_assert(offsetof(ASBLevelVisibilityVolume, Levels) == 0x0318);
static_assert(offsetof(ASBLevelVisibilityVolume, LevelObjOrigin) == 0x0378);
static_assert(offsetof(ASBLevelVisibilityVolume, LevelObjExtent) == 0x0384);
static_assert(offsetof(ASBLimitedScanVolume, SectorID) == 0x0318);
static_assert(offsetof(ASBLimitedScanVolume, LevelObjOrigin) == 0x0324);
static_assert(offsetof(ASBLimitedScanVolume, LevelObjExtent) == 0x0330);
static_assert(offsetof(USBLoadingScreenWidget, RootWidget) == 0x0680);
static_assert(offsetof(USBLoadingScreenWidget, ThrobberWidget) == 0x0688);
static_assert(offsetof(USBLoadingScreenWidget, Overlay_LoadingScreen) == 0x0690);
static_assert(offsetof(USBLoadingScreenWidget, ProgressBar_Shader) == 0x0698);
static_assert(offsetof(USBLoadingScreenWidget, Image_Working) == 0x06A0);
static_assert(offsetof(USBLoadingScreenWidget, TextBlock_Tip) == 0x06A8);
static_assert(offsetof(FSBMapObjectResInfoData, DensityType) == 0x0000);
static_assert(offsetof(FSBMapObjectResInfoData, ObjectName) == 0x0004);
static_assert(offsetof(FSBMapObjectResInfoData, RefMeshObject) == 0x0010);
static_assert(offsetof(USBMapObjectResourceMap, Objects) == 0x0030);
static_assert(offsetof(USBMapObjectResourceMap, HighDensityObjIndices) == 0x0048);
static_assert(offsetof(USBMapObjectResourceMap, MidDensityObjIndices) == 0x0058);
static_assert(offsetof(USBMapObjectResourceMap, LowDensityObjIndices) == 0x0068);
static_assert(offsetof(FSBSectorObjectInfoData, position) == 0x0000);
static_assert(offsetof(FSBSectorObjectInfoData, Rotation) == 0x000C);
static_assert(offsetof(FSBSectorObjectLayerData, ObjectLists) == 0x0000);
static_assert(offsetof(FSBSectorData, ObjectLayerList) == 0x0008);
static_assert(offsetof(FSBSectorData, ResourceMapList) == 0x0018);
static_assert(offsetof(USBMapData, SectorDataLists) == 0x0030);
static_assert(offsetof(ASBMeshStudioActor, MeshStudioType) == 0x02D0);
static_assert(offsetof(ASBMeshStudioActor, Root) == 0x02D8);
static_assert(offsetof(ASBMeshStudioActor, Capturer) == 0x02E0);
static_assert(offsetof(ASBMeshStudioActor, StaticMeshBody) == 0x02E8);
static_assert(offsetof(ASBMeshStudioActor, SkeletalMeshBody) == 0x02F0);
static_assert(offsetof(ASBMeshStudioActor, MeshInfoTagList) == 0x02F8);
static_assert(offsetof(ASBMeshStudioActor, MeshInfoList) == 0x0308);
static_assert(offsetof(ASBMeshStudioActor, CaptureTMTag) == 0x0388);
static_assert(offsetof(ASBMeshStudioActor, CanMaterials) == 0x0390);
static_assert(offsetof(ASBMeshStudioActor, MeshBodyTMMap) == 0x03E0);
static_assert(offsetof(ASBMeshStudioActor, DefaultSBSkeletalTag) == 0x0434);
static_assert(offsetof(ASBMeshStudioActor, BodyCustomAnimNodeName) == 0x043C);
static_assert(offsetof(ASBMeshStudioActor, BodyCustomAnimNodeNameMap) == 0x0448);
static_assert(offsetof(ASBMeshStudioActor, BodyCustomAnimAdditiveNodeName) == 0x0498);
static_assert(offsetof(ASBMeshStudioActor, ClothResetComponentTag) == 0x066C);
static_assert(offsetof(FMoveInfo, position) == 0x0000);
static_assert(offsetof(FMoveInfo, Rotation) == 0x000C);
static_assert(offsetof(USBMoveTracker, MoveHistory) == 0x0028);
static_assert(offsetof(FSBMovieSceneEventCharacterSoundSetKeyStruct, SoundSet) == 0x0010);
static_assert(offsetof(FSBMovieSceneEventCharacterSoundSetChannel, KeyTimes) == 0x0068);
static_assert(offsetof(FSBMovieSceneEventCharacterSoundSetChannel, KeyValues) == 0x0078);
static_assert(offsetof(USBMovieSceneEventCharacterSoundSetSection, EventChannel) == 0x00F8);
static_assert(offsetof(FSBMovieSceneEventSoundEventKeyStruct, SoundEventAlias) == 0x0010);
static_assert(offsetof(FSBMovieSceneEventSoundEventChannel, KeyTimes) == 0x0068);
static_assert(offsetof(FSBMovieSceneEventSoundEventChannel, KeyValues) == 0x0078);
static_assert(offsetof(USBMovieSceneEventSoundEventSection, EventChannel) == 0x00F8);
static_assert(offsetof(FSBMovieSceneEventTestKeyStruct, LogData) == 0x0010);
static_assert(offsetof(FSBMovieSceneEventTestChannel, KeyTimes) == 0x0068);
static_assert(offsetof(FSBMovieSceneEventTestChannel, KeyValues) == 0x0078);
static_assert(offsetof(USBMovieSceneEventTestSection, EventChannel) == 0x00F8);
static_assert(offsetof(USBMovieSceneEventTrack, EventPosition) == 0x0084);
static_assert(offsetof(USBMovieSceneEventTrack, Sections) == 0x0088);
static_assert(offsetof(FSBMovieSceneEventVibrationKeyStruct, VibrationSet) == 0x0010);
static_assert(offsetof(FSBMovieSceneEventVibrationChannel, KeyTimes) == 0x0068);
static_assert(offsetof(FSBMovieSceneEventVibrationChannel, KeyValues) == 0x0078);
static_assert(offsetof(USBMovieSceneEventVibrationSection, EventChannel) == 0x00F8);
static_assert(offsetof(ASBNetworkPlayerState, PlayerSessionId) == 0x03D0);
static_assert(offsetof(USBObjectMaterialData, Categorys) == 0x0038);
static_assert(offsetof(ASBOptimizationActor, PrimitiveComponents) == 0x02E0);
static_assert(offsetof(ASBOptimizationActor, KeepTransform) == 0x0310);
static_assert(offsetof(FSBLevelStreamVolumeTracker, LevelStatus) == 0x0000);
static_assert(offsetof(FSBLevelStreamVolumeTracker, VolumeStatus) == 0x0050);
static_assert(offsetof(ASBPerformanceProfilerActor, CameraComponent) == 0x02C8);
static_assert(offsetof(ASBPerformanceProfilerActor, SceneComponent) == 0x02D0);
static_assert(offsetof(ASBPerformanceProfilerActor, CameraSpline) == 0x02D8);
static_assert(offsetof(ASBPerformanceProfilerActor, ViewTargetActor) == 0x0300);
static_assert(offsetof(ASBPerformanceProfilerActor, Filename) == 0x0308);
static_assert(offsetof(ASBPerformanceProfilerActor, LevelStreamVolumeTracker) == 0x0328);
static_assert(offsetof(ASBPhotoModePawn, Camera) == 0x0350);
static_assert(offsetof(ASBPhotoModePawn, DOF_VisualizeMID) == 0x0358);
static_assert(offsetof(ASBPhotoModePawn, ZoomBlurMID) == 0x0360);
static_assert(offsetof(ASBPhotoModePawn, ChromaticAberrationMID) == 0x0368);
static_assert(offsetof(ASBPhotoModePawn, HueMID) == 0x0370);
static_assert(offsetof(ASBPhotoModePawn, NoLightMID) == 0x0378);
static_assert(offsetof(ASBPhotoModePawn, ImageGrainMIDArray) == 0x0380);
static_assert(offsetof(ASBPhotoModePawn, ImageFilters) == 0x0390);
static_assert(offsetof(ASBPhotoModePawn, HDRImageFilters) == 0x03A0);
static_assert(offsetof(USBPhysicalMaterial, MoveScaleCurveOnSliding) == 0x0088);
static_assert(offsetof(USBPhysicalMaterial, SlidingSlipStartAnimPath) == 0x00A8);
static_assert(offsetof(USBPhysicalMaterial, PhysicalForceCenterBone) == 0x00D8);
static_assert(offsetof(USBPhysicalMaterial, OverrideEffectAlias) == 0x00F8);
static_assert(offsetof(USBPhysicalMaterial, OverrideEffectVolumeID) == 0x0108);
static_assert(offsetof(USBPlayerInput, DefinedSprintKeyLists) == 0x0030);
static_assert(offsetof(USBPlayerInput, DefinedSprintActionKeyLists) == 0x0040);
static_assert(offsetof(USBPlayerInput, DefinedSprintActionLists) == 0x0050);
static_assert(offsetof(USBPlayerInput, DefinedSwimUpKeyLists) == 0x0060);
static_assert(offsetof(USBPlayerInput, DefinedSwimDownKeyLists) == 0x0070);
static_assert(offsetof(USBPlayerInput, DefinedSwimUpActionKeyLists) == 0x0080);
static_assert(offsetof(USBPlayerInput, DefinedSwimUpActionLists) == 0x0090);
static_assert(offsetof(USBPlayerInput, DefinedSwimDownActionKeyLists) == 0x00A0);
static_assert(offsetof(USBPlayerInput, DefinedSwimDownActionLists) == 0x00B0);
static_assert(offsetof(USBPlayerInput, DefinedFlyActionKeyLists) == 0x00C0);
static_assert(offsetof(USBPlayerInput, DefinedEventMoveSlidingKeyLists) == 0x00D0);
static_assert(offsetof(USBPlayerInput, DefinedCinematicSpeedUpComboKeyLists) == 0x00E0);
static_assert(offsetof(USBPlayerInput, DefinedJumpKeyLists) == 0x00F8);
static_assert(offsetof(USBPlayerInput, DefinedTimeControlKeyLists) == 0x0108);
static_assert(offsetof(USBPlayerInput, DefinedWireActionPadKey) == 0x0118);
static_assert(offsetof(USBPlayerInput, DefinedForceWalkKey) == 0x0138);
static_assert(offsetof(USBPlayerInput, DefinedForceWalkActionKeyLists) == 0x0148);
static_assert(offsetof(USBPlayerInput, DefinedForceWalkActionKeyStateLists) == 0x0158);
static_assert(offsetof(USBPlayerInput, DefinedForceWalkActionLists) == 0x0170);
static_assert(offsetof(FSBPMatParticleSetInfo, NiagaraSystem) == 0x0008);
static_assert(offsetof(FSBPMatParticleSetInfo, ParticleSystemPath) == 0x0070);
static_assert(offsetof(FSBPMatParticleSetInfo, InstanceParameters) == 0x0090);
static_assert(offsetof(FSBDecalParamCurve, ParamName) == 0x0000);
static_assert(offsetof(FSBDecalParamCurve, Curve) == 0x0008);
static_assert(offsetof(FSBPMaDecalInfo, DecalMaterial) == 0x0000);
static_assert(offsetof(FSBPMaDecalInfo, Size) == 0x0008);
static_assert(offsetof(FSBPMaDecalInfo, Rotation) == 0x0014);
static_assert(offsetof(FSBPMaDecalInfo, ParamCurves) == 0x0030);
static_assert(offsetof(FSBPMatParticleSetInfoArray, Array) == 0x0000);
static_assert(offsetof(FSBPMatParticleSetInfoArray, DecalArray) == 0x0010);
static_assert(offsetof(FSBPMatParticleSetInfoArray, SoundArray) == 0x0020);
static_assert(offsetof(FSBPMatParticleSetInfoArray, SoundClassOverride) == 0x0030);
static_assert(offsetof(FSBPMatParticleSetInfoArray, AttenuationOverride) == 0x0038);
static_assert(offsetof(FSBPMatParticleSetInfoArray, VibrationSetArray) == 0x0040);
static_assert(offsetof(FSBPrimaryAssetLabelInfo, PrimaryAssetLabel) == 0x0000);
static_assert(offsetof(FSBPrimaryAssetLabelInfo, AssetDirectoryArray) == 0x0018);
static_assert(offsetof(FSBPrimaryAssetLabelInfo, FileOpenLogPath) == 0x0028);
static_assert(offsetof(FSBPrimaryAssetLabelInfo, ResourceCacheCharacterAliasToAppend) == 0x0068);
static_assert(offsetof(USBPrimaryAssetLabelGenerator, PrimaryAssetLabelInfoArray) == 0x0030);
static_assert(offsetof(FSBProjectileUpdateInfo, MovementCurveType) == 0x0020);
static_assert(offsetof(FSBProjectileUpdateInfo, AutoGenerationMovementCurveMin) == 0x0024);
static_assert(offsetof(FSBProjectileUpdateInfo, AutoGenerationMovementCurveMax) == 0x0030);
static_assert(offsetof(FSBProjectileUpdateInfo, AutoGenerationMovementCurveRecordTime) == 0x003C);
static_assert(offsetof(FSBProjectileUpdateInfo, MovementCurve) == 0x0050);
static_assert(offsetof(ASBProjectile, DummyRoot) == 0x0300);
static_assert(offsetof(ASBProjectile, NiagaraComponent) == 0x0308);
static_assert(offsetof(ASBProjectile, ParticleComponent) == 0x0310);
static_assert(offsetof(ASBProjectile, CollisionGroupComponent) == 0x0318);
static_assert(offsetof(ASBProjectile, ProjectileType) == 0x0320);
static_assert(offsetof(ASBProjectile, PhysicsShapeComponent) == 0x0328);
static_assert(offsetof(ASBProjectile, BeamTrackingCurve) == 0x0338);
static_assert(offsetof(ASBProjectile, ProjectileUpdateInfo) == 0x0348);
static_assert(offsetof(USBQuestNode, ChildNodes) == 0x0048);
static_assert(offsetof(USBQuestActionNode, EventType) == 0x0068);
static_assert(offsetof(USBQuestActionTypeAIDecoratorNode, EventAIDecorator) == 0x0070);
static_assert(offsetof(USBQuestActionTypeAttachActorEffectNode, EventActorEffect) == 0x0070);
static_assert(offsetof(USBQuestActionTypeDespawnNode, LevelTargetFilter) == 0x0070);
static_assert(offsetof(USBQuestActionTypeEnvControlNode, EventEnvControl) == 0x0070);
static_assert(offsetof(USBQuestActionTypeInteractionNode, LevelTargetFilter) == 0x0070);
static_assert(offsetof(USBQuestActionTypeItemNode, EventItem) == 0x0070);
static_assert(offsetof(USBQuestActionTypePlayLevelSeqNode, EventLevelSeq) == 0x0070);
static_assert(offsetof(USBQuestActionTypeQuestNode, EventQuest) == 0x0070);
static_assert(offsetof(USBQuestActionTypeSpawnNode, EventSpawn) == 0x0070);
static_assert(offsetof(USBQuestActionTypeTheaterNode, EventTheater) == 0x0070);
static_assert(offsetof(USBQuestActionTypeZone, EventZone) == 0x0070);
static_assert(offsetof(USBQuestActionTypeZoneControlNode, EventZoneControl) == 0x0070);
static_assert(offsetof(USBQuestActionTypeZoneObjectControlNode, EventObjControl) == 0x0070);
static_assert(offsetof(FSBQuestEventActionDataInfo, EventType) == 0x0000);
static_assert(offsetof(FSBQuestEventActionDataInfo, EventSpawnAlias) == 0x0008);
static_assert(offsetof(USBQuestElementNode, QuestAlias) == 0x0058);
static_assert(offsetof(USBQuestElementNode, TitleName) == 0x0068);
static_assert(offsetof(USBQuestElementNode, TitleName_) == 0x0078);
static_assert(offsetof(USBQuestElementNode, QuestDescription) == 0x0090);
static_assert(offsetof(USBQuestElementNode, QuestDescription_) == 0x00A0);
static_assert(offsetof(USBQuestElementNode, QuestType) == 0x00B8);
static_assert(offsetof(USBQuestElementNode, QuestUIType) == 0x00B9);
static_assert(offsetof(USBQuestElementNode, RewardGroupIndex) == 0x00BC);
static_assert(offsetof(USBQuestElementNode, NextQuest) == 0x00E0);
static_assert(offsetof(USBQuestElementNode, FailAchievementCondition) == 0x00F8);
static_assert(offsetof(USBQuestElementNode, FailConditionGroup) == 0x0110);
static_assert(offsetof(USBQuestElementNode, FailConditionEventType) == 0x0128);
static_assert(offsetof(USBQuestElementNode, FailConditionResultType) == 0x0129);
static_assert(offsetof(USBQuestElementNode, RequiredQuestArray) == 0x0130);
static_assert(offsetof(USBQuestElementNode, AcquireActionArray) == 0x0140);
static_assert(offsetof(USBQuestElementNode, CompleteActionArray) == 0x0150);
static_assert(offsetof(USBQuestElementNode, PrevQuestPin) == 0x0160);
static_assert(offsetof(USBQuestElementNode, TaskGroupArray) == 0x0168);
static_assert(offsetof(USBQuestElementNode, QuestPathStartNodes) == 0x0178);
static_assert(offsetof(USBQuestElementNode, QuestPathWorlds) == 0x0188);
static_assert(offsetof(USBQuestElementNode, AcquireEventActionList) == 0x0198);
static_assert(offsetof(USBQuestLevelTargetFilter, TargetFilter) == 0x0058);
static_assert(offsetof(FSBQuestTaskContainer, TaskAliasArray) == 0x0000);
static_assert(offsetof(FSBQuestWarpNodeData, WarpType) == 0x0000);
static_assert(offsetof(FSBQuestWarpNodeData, WarpUIDescription) == 0x0008);
static_assert(offsetof(FSBQuestWarpNodeData, ConditionGroup) == 0x0020);
static_assert(offsetof(FSBQuestWarpNodeData, TargetCamp) == 0x0028);
static_assert(offsetof(FSBQuestWarpNodeData, TargetWorld) == 0x0040);
static_assert(offsetof(FSBQuestWarpNodeData, TargetLocation) == 0x0058);
static_assert(offsetof(FSBQuestWarpNodeData, TargetRotation) == 0x0064);
static_assert(offsetof(FSBQuestWarpNodeData, TargetSpawnPoint) == 0x0070);
static_assert(offsetof(FSBQuestWarpNodeData, WarpChoiceYesPlayTheater) == 0x0088);
static_assert(offsetof(FSBQuestWarpNodeData, WarpChoiceNoPlayTheater) == 0x00A0);
static_assert(offsetof(USBQuestMissionNode, TaskGroupAlias) == 0x0058);
static_assert(offsetof(USBQuestMissionNode, Description) == 0x0068);
static_assert(offsetof(USBQuestMissionNode, ActivateActionArray) == 0x0080);
static_assert(offsetof(USBQuestMissionNode, ProgressActionArray) == 0x0090);
static_assert(offsetof(USBQuestMissionNode, CompleteActionArray) == 0x00A0);
static_assert(offsetof(USBQuestMissionNode, TaskContainerArray) == 0x00B0);
static_assert(offsetof(USBQuestMissionNode, QuestPathStartNodes) == 0x00C0);
static_assert(offsetof(USBQuestMissionNode, QuestPathWorlds) == 0x00D0);
static_assert(offsetof(USBQuestMissionNode, QuestPathAreas) == 0x00E0);
static_assert(offsetof(USBQuestMissionNode, RestartRuleData) == 0x00F0);
static_assert(offsetof(USBQuestMissionNode, WarpWhenComplete) == 0x0108);
static_assert(offsetof(USBQuestPathNode, StartNodeAlias) == 0x0058);
static_assert(offsetof(USBQuestPathNode, WorldAlias) == 0x0060);
static_assert(offsetof(USBQuestPathNode, AreaAlias) == 0x0070);
static_assert(offsetof(ASBQuestPathNodeActor, NodeAlias) == 0x02CC);
static_assert(offsetof(ASBQuestPathNodeActor, Extent) == 0x02DC);
static_assert(offsetof(ASBQuestPathNodeActor, NextNode) == 0x02F0);
static_assert(offsetof(ASBQuestPathNodeActor, PrevNode) == 0x02F8);
static_assert(offsetof(ASBQuestPathNodeActor, TargetPoint) == 0x0300);
static_assert(offsetof(ASBQuestPathNodeActor, ActorRootComponent) == 0x0308);
static_assert(offsetof(USBQuestRequestNode, Alias) == 0x0058);
static_assert(offsetof(USBQuestRequestNode, title) == 0x0068);
static_assert(offsetof(USBQuestRequestNode, Description) == 0x0080);
static_assert(offsetof(USBQuestRequestNode, RequestDescription) == 0x0098);
static_assert(offsetof(USBQuestRequestNode, Report) == 0x00B0);
static_assert(offsetof(USBQuestRequestNode, GameMenuReport) == 0x00C8);
static_assert(offsetof(USBQuestRequestNode, RequestType) == 0x00E0);
static_assert(offsetof(USBQuestRequestNode, UIType) == 0x00E1);
static_assert(offsetof(USBQuestRequestNode, DisplayRequestBoardType) == 0x00E2);
static_assert(offsetof(USBQuestRequestNode, RewardGroupIndex) == 0x00E4);
static_assert(offsetof(USBQuestRequestNode, FailAchievementCondition) == 0x0108);
static_assert(offsetof(USBQuestRequestNode, FailConditionGroup) == 0x0120);
static_assert(offsetof(USBQuestRequestNode, FailConditionEventType) == 0x0138);
static_assert(offsetof(USBQuestRequestNode, FailConditionResultType) == 0x0139);
static_assert(offsetof(USBQuestRequestNode, AvailableConditionGroup) == 0x013C);
static_assert(offsetof(USBQuestRequestNode, ValidConditionGroup) == 0x0154);
static_assert(offsetof(USBQuestRequestNode, AcquireSound) == 0x0170);
static_assert(offsetof(USBQuestRequestNode, AcquireSubtitleType) == 0x0178);
static_assert(offsetof(USBQuestRequestNode, AcquireSubtitleTitle) == 0x0180);
static_assert(offsetof(USBQuestRequestNode, AcquireSubtitleMessage) == 0x0198);
static_assert(offsetof(USBQuestRequestNode, AcquireActionArray) == 0x01B0);
static_assert(offsetof(USBQuestRequestNode, CompleteActionArray) == 0x01C0);
static_assert(offsetof(USBQuestRequestNode, TaskGroupArray) == 0x01D0);
static_assert(offsetof(USBQuestRequestNode, AcquireEventActionList) == 0x01E0);
static_assert(offsetof(USBQuestTaskNode, TaskAlias) == 0x0058);
static_assert(offsetof(USBQuestTaskNode, Description) == 0x0068);
static_assert(offsetof(USBQuestTaskNode, UIType) == 0x0080);
static_assert(offsetof(USBQuestTaskNode, DescriptionUIType) == 0x0081);
static_assert(offsetof(USBQuestTaskNode, TrackingTargetFilters) == 0x0088);
static_assert(offsetof(USBQuestTaskNode, TrackingConditionGroup) == 0x0098);
static_assert(offsetof(USBQuestTaskNode, MissionType) == 0x00B0);
static_assert(offsetof(USBQuestTasktypeAchievement, Achievement) == 0x00B8);
static_assert(offsetof(USBQuestTasktypeAchievement, StartEventList) == 0x00D0);
static_assert(offsetof(USBQuestTasktypeAchievement, UpdateEventList) == 0x00E0);
static_assert(offsetof(USBQuestTasktypeAchievement, CompleteEventList) == 0x00F0);
static_assert(offsetof(USBQuestTaskTypeActorInBound, TargetFilters) == 0x00B8);
static_assert(offsetof(USBQuestTaskTypeActorInBound, OwnerFilter) == 0x00C8);
static_assert(offsetof(USBQuestTaskTypeActorInBound, StartEventList) == 0x00D8);
static_assert(offsetof(USBQuestTaskTypeActorInBound, UpdateEventList) == 0x00E8);
static_assert(offsetof(USBQuestTaskTypeActorInBound, CompleteEventList) == 0x00F8);
static_assert(offsetof(USBQuestTasktypeCounter, StartEventList) == 0x00C0);
static_assert(offsetof(USBQuestTasktypeCounter, UpdateEventList) == 0x00D0);
static_assert(offsetof(USBQuestTasktypeCounter, CompleteEventList) == 0x00E0);
static_assert(offsetof(USBQuestTaskTypeDelayTime, StartEventList) == 0x00C0);
static_assert(offsetof(USBQuestTaskTypeDelayTime, UpdateEventList) == 0x00D0);
static_assert(offsetof(USBQuestTaskTypeDelayTime, CompleteEventList) == 0x00E0);
static_assert(offsetof(USBQuestTaskTypeEnterTrigger, ZoneTrigger) == 0x00B8);
static_assert(offsetof(USBQuestTaskTypeEnterTrigger, StartEventList) == 0x00D0);
static_assert(offsetof(USBQuestTaskTypeEnterTrigger, UpdateEventList) == 0x00E0);
static_assert(offsetof(USBQuestTaskTypeEnterTrigger, CompleteEventList) == 0x00F0);
static_assert(offsetof(USBQuestTaskTypeEnterZone, ZoneArray) == 0x00B8);
static_assert(offsetof(USBQuestTaskTypeEnterZone, StartEventList) == 0x00C8);
static_assert(offsetof(USBQuestTaskTypeEnterZone, UpdateEventList) == 0x00D8);
static_assert(offsetof(USBQuestTaskTypeEnterZone, CompleteEventList) == 0x00E8);
static_assert(offsetof(USBQuestTaskTypeEnvState, ZoneEnvSpawn) == 0x00B8);
static_assert(offsetof(USBQuestTaskTypeEnvState, EnvStateTagName) == 0x00D0);
static_assert(offsetof(USBQuestTaskTypeEnvState, StartEventList) == 0x00D8);
static_assert(offsetof(USBQuestTaskTypeEnvState, UpdateEventList) == 0x00E8);
static_assert(offsetof(USBQuestTaskTypeEnvState, CompleteEventList) == 0x00F8);
static_assert(offsetof(USBQuestTaskTypeEnvState, Achievement) == 0x0108);
static_assert(offsetof(USBQuestTaskTypeInteraction, TargetFilters) == 0x00B8);
static_assert(offsetof(USBQuestTaskTypeInteraction, StartEventList) == 0x00D0);
static_assert(offsetof(USBQuestTaskTypeInteraction, UpdateEventList) == 0x00E0);
static_assert(offsetof(USBQuestTaskTypeInteraction, CompleteEventList) == 0x00F0);
static_assert(offsetof(USBQuestTaskTypeKillTargetNode, TargetFilters) == 0x00B8);
static_assert(offsetof(USBQuestTaskTypeKillTargetNode, StartEventList) == 0x00D0);
static_assert(offsetof(USBQuestTaskTypeKillTargetNode, UpdateEventList) == 0x00E0);
static_assert(offsetof(USBQuestTaskTypeKillTargetNode, CompleteEventList) == 0x00F0);
static_assert(offsetof(USBQuestTaskTypeLeaveTrigger, ZoneTrigger) == 0x00B8);
static_assert(offsetof(USBQuestTaskTypeLeaveTrigger, StartEventList) == 0x00D0);
static_assert(offsetof(USBQuestTaskTypeLeaveTrigger, UpdateEventList) == 0x00E0);
static_assert(offsetof(USBQuestTaskTypeLeaveTrigger, CompleteEventList) == 0x00F0);
static_assert(offsetof(USBQuestTaskTypeLeaveZone, ZoneArray) == 0x00B8);
static_assert(offsetof(USBQuestTaskTypeLeaveZone, StartEventList) == 0x00C8);
static_assert(offsetof(USBQuestTaskTypeLeaveZone, UpdateEventList) == 0x00D8);
static_assert(offsetof(USBQuestTaskTypeLeaveZone, CompleteEventList) == 0x00E8);
static_assert(offsetof(USBQuestTaskTypeRequireItem, CountType) == 0x00B8);
static_assert(offsetof(USBQuestTaskTypeRequireItem, CheckItemType) == 0x00C0);
static_assert(offsetof(USBQuestTaskTypeRequireItem, ItemAlias) == 0x00C4);
static_assert(offsetof(USBQuestTaskTypeRequireItem, CheckItemCategory) == 0x00DC);
static_assert(offsetof(USBQuestTaskTypeRequireItem, CheckItemCategoryTag) == 0x00E0);
static_assert(offsetof(USBQuestTaskTypeRequireItem, StartEventList) == 0x00F0);
static_assert(offsetof(USBQuestTaskTypeRequireItem, UpdateEventList) == 0x0100);
static_assert(offsetof(USBQuestTaskTypeRequireItem, CompleteEventList) == 0x0110);
static_assert(offsetof(USBQuestTasktypeScan, ZoneTrigger) == 0x00B8);
static_assert(offsetof(USBQuestTasktypeScan, StartEventList) == 0x00D0);
static_assert(offsetof(USBQuestTasktypeScan, UpdateEventList) == 0x00E0);
static_assert(offsetof(USBQuestTasktypeScan, CompleteEventList) == 0x00F0);
static_assert(offsetof(USBQuestTaskTypeTaskCondition, TaskArray) == 0x00B8);
static_assert(offsetof(USBQuestTaskTypeTaskCondition, ConditionType) == 0x00C8);
static_assert(offsetof(USBQuestTaskTypeTaskCondition, ShowType) == 0x00D0);
static_assert(offsetof(USBQuestTaskTypeTaskCondition, StartEventList) == 0x00D8);
static_assert(offsetof(USBQuestTaskTypeTaskCondition, UpdateEventList) == 0x00E8);
static_assert(offsetof(USBQuestTaskTypeTaskCondition, CompleteEventList) == 0x00F8);
static_assert(offsetof(USBQuestWarpNode, EditorDescription) == 0x0058);
static_assert(offsetof(USBQuestWarpNode, WarpWhenComplete) == 0x0070);
static_assert(offsetof(USBQuestZoneEventRefNode, ZoneEvent) == 0x0058);
static_assert(offsetof(USBQuestZoneNode, Zone) == 0x0058);
static_assert(offsetof(ASBRegionVolume, SectorID) == 0x031C);
static_assert(offsetof(ASBRegionVolume, MainText) == 0x0328);
static_assert(offsetof(ASBRegionVolume, SubText) == 0x0340);
static_assert(offsetof(ASBRegionVolume, LevelObjOrigin) == 0x0358);
static_assert(offsetof(ASBRegionVolume, LevelObjExtent) == 0x0364);
static_assert(offsetof(ASBResourceCacheActor, AssetObjects) == 0x02F8);
static_assert(offsetof(ASBResourceCacheActor, QuestConditions) == 0x0308);
static_assert(offsetof(ASBResourceCacheActor, Description) == 0x0318);
static_assert(offsetof(USBResourceCacheZoneData, ZoneMerges) == 0x0030);
static_assert(offsetof(USBResourceCacheZoneData, ExclusiveZoneAliases) == 0x0080);
static_assert(offsetof(USBResourceCacheZoneData, ZoneBoundPadOverrides) == 0x0090);
static_assert(offsetof(USBResourceCacheZoneData, ZoneBoundOriginOverrides) == 0x00E0);
static_assert(offsetof(USBResourceCacheZoneData, ZoneBoundExtentOverrides) == 0x0130);
static_assert(offsetof(USBResourceCacheZoneData, ZoneBoundScaleOnExtraSprit) == 0x0180);
static_assert(offsetof(ASBRestorationWorldActor, DummyRoot) == 0x0308);
static_assert(offsetof(ASBRestorationWorldActor, ActorSaveType) == 0x0310);
static_assert(offsetof(USBRewardGroupSpawnFormation, SpawnRangeType) == 0x0030);
static_assert(offsetof(USBRewardGroupSpawnFormation, SpawnTargetType) == 0x0050);
static_assert(offsetof(USBRewardGroupSpawnFormation, RandomRangeCharSocket) == 0x0078);
static_assert(offsetof(USBRewardGroupSpawnFormation, SequentialArcOffset) == 0x0098);
static_assert(offsetof(USBRewardGroupSpawnFormation, SequentialArcForwardRotation) == 0x00A4);
static_assert(offsetof(FSBExtractRootMotionData, CharacterMoveAlias) == 0x0000);
static_assert(offsetof(FSBExtractRootMotionData, TransformArray) == 0x0008);
static_assert(offsetof(USBRootMotionData, RootMotionDataArray) == 0x0030);
static_assert(offsetof(USBRootMotionData, TimeBasedAnimationName) == 0x0048);
static_assert(offsetof(USBRootMotionData, BaseMeshScale) == 0x0050);
static_assert(offsetof(FItemData, ItemAlias) == 0x0000);
static_assert(offsetof(FAchievementData, AchievementAlias) == 0x0000);
static_assert(offsetof(USBSaveData, SaveGameInstance) == 0x0030);
static_assert(offsetof(USBSaveData, BaseFilePath) == 0x0038);
static_assert(offsetof(USBSaveData, SavFilePath) == 0x0048);
static_assert(offsetof(USBSaveData, CSVFilePath) == 0x0060);
static_assert(offsetof(USBSaveData, Location) == 0x0070);
static_assert(offsetof(USBSaveData, Rotation) == 0x007C);
static_assert(offsetof(USBSaveData, OpenCampAliases) == 0x0088);
static_assert(offsetof(USBSaveData, LastInteractCampEnvSpawnAlias) == 0x0098);
static_assert(offsetof(USBSaveData, LastInteractTetrapodEnvSpawnAlias) == 0x00A0);
static_assert(offsetof(USBSaveData, SkillAliases) == 0x00A8);
static_assert(offsetof(USBSaveData, Items) == 0x00C0);
static_assert(offsetof(USBSaveData, Achievements) == 0x0200);
static_assert(offsetof(USBSaveData, InitialOpenCampAliases) == 0x0250);
static_assert(offsetof(FSBSaveGameData_ActorItemEnhanceState, NanosuitEnhanceStateMap) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ActorItemEnhanceState, DronEnhanceStateMap) == 0x0050);
static_assert(offsetof(FSBSaveGameData_ActorItemEnhanceState, ExospineEnhanceStateMap) == 0x00A0);
static_assert(offsetof(FSBSaveGameData_ActorItemEnhanceState, FlagStateInfoMap) == 0x00F0);
static_assert(offsetof(FSBSaveGameData_Actor, ActorDataAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_Actor, ActorLocation) == 0x0010);
static_assert(offsetof(FSBSaveGameData_Actor, ActorRotation) == 0x001C);
static_assert(offsetof(FSBSaveGameData_Actor, StanceAlias) == 0x004C);
static_assert(offsetof(FSBSaveGameData_Actor, Equipment) == 0x0058);
static_assert(offsetof(FSBSaveGameData_Actor, ItemQuickSlotArray) == 0x00A8);
static_assert(offsetof(FSBSaveGameData_Actor, BodySuitSlotArray) == 0x00B8);
static_assert(offsetof(FSBSaveGameData_Actor, CampEnvSpawnAlias) == 0x00C8);
static_assert(offsetof(FSBSaveGameData_Actor, CampInteractActorLocation) == 0x00D0);
static_assert(offsetof(FSBSaveGameData_Actor, CampInteractActorRotation) == 0x00DC);
static_assert(offsetof(FSBSaveGameData_Actor, SoundEventAlias) == 0x00E8);
static_assert(offsetof(FSBSaveGameData_Actor, TetrapodCampEnvSpawnAlias) == 0x00F0);
static_assert(offsetof(FSBSaveGameData_Actor, TetrapodCampInteractActorLocation) == 0x00F8);
static_assert(offsetof(FSBSaveGameData_Actor, TetrapodCampInteractActorRotation) == 0x0104);
static_assert(offsetof(FSBSaveGameData_Actor, ItemEnhanceState) == 0x0110);
static_assert(offsetof(FSBSaveGameData_Actor, LevelArray) == 0x0258);
static_assert(offsetof(FSBSaveGameData_Actor, LastFullCampEnvSpawnAlias) == 0x026C);
static_assert(offsetof(FSBSaveGameData_Actor, LastFullCampInteractActorLocation) == 0x0274);
static_assert(offsetof(FSBSaveGameData_Actor, LastFullCampInteractActorRotation) == 0x0280);
static_assert(offsetof(FSBSaveGameData_Actor, LastSimplyCampEnvSpawnAlias) == 0x028C);
static_assert(offsetof(FSBSaveGameData_Actor, LastSimplyCampInteractActorLocation) == 0x0294);
static_assert(offsetof(FSBSaveGameData_Actor, LastSimplyCampInteractActorRotation) == 0x02A0);
static_assert(offsetof(FSBSaveGameData_Effect, EffectList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_QuestTask, TaskAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_QuestTask, TaskState) == 0x000C);
static_assert(offsetof(FSBSaveGameData_QuestTask, CustomIntMap) == 0x0018);
static_assert(offsetof(FSBSaveGameData_QuestTask, CustomFloatMap) == 0x0068);
static_assert(offsetof(FSBSaveGameData_QuestTask, ChildTaskAliasList) == 0x00B8);
static_assert(offsetof(FSBSaveGameData_QuestTaskInfo, TaskList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_QuestTaskGroup, TaskGroupAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_QuestTaskGroup, TaskGroupState) == 0x0008);
static_assert(offsetof(FSBSaveGameData_QuestTaskGroup, TaskValueMap) == 0x0010);
static_assert(offsetof(FSBSaveGameData_QuestTaskGroup, TaskInfoList) == 0x0060);
static_assert(offsetof(FSBSaveGameData_QuestTaskGroup, AllChildTaskList) == 0x0070);
static_assert(offsetof(FSBSaveGameData_QuestObject, QuestAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_QuestObject, QuestTaskGroupList) == 0x0010);
static_assert(offsetof(FSBSaveGameData_QuestCustomTracking, TargetAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_QuestCustomTracking, TargetType) == 0x0008);
static_assert(offsetof(FSBSaveGameData_QuestCustomTracking, TargetWorldAlias) == 0x000C);
static_assert(offsetof(FSBSaveGameData_QuestCustomTracking, TargetAreaAlias) == 0x0014);
static_assert(offsetof(FSBSaveGameData_CustomPin, PinWorldLocation) == 0x0004);
static_assert(offsetof(FSBSaveGameData_CustomPin, TypeTag) == 0x000C);
static_assert(offsetof(FSBSaveGameData_CustomPinContainer, WorldAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_CustomPinContainer, AreaAlias) == 0x0008);
static_assert(offsetof(FSBSaveGameData_CustomPinContainer, WorldMapAlias) == 0x0010);
static_assert(offsetof(FSBSaveGameData_CustomPinContainer, CustomPinList) == 0x0018);
static_assert(offsetof(FSBSaveGameData_Quest, ProgressQuestList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_Quest, CompleteQuestList) == 0x0010);
static_assert(offsetof(FSBSaveGameData_Quest, FailedQuestList) == 0x0020);
static_assert(offsetof(FSBSaveGameData_Quest, TrackingQuestAliases) == 0x0030);
static_assert(offsetof(FSBSaveGameData_Quest, CustomTrackingList) == 0x0040);
static_assert(offsetof(FSBSaveGameData_Quest, CustomPinContainerList) == 0x0050);
static_assert(offsetof(FSBSaveGameData_Quest, CustomTrackingTargetAlias) == 0x0060);
static_assert(offsetof(FSBSaveGameData_Quest, CustomTrackingTargetType) == 0x0068);
static_assert(offsetof(FSBSaveGameData_Quest, CustomTrackingTargetWorldAlias) == 0x006C);
static_assert(offsetof(FSBSaveGameData_Quest, CustomTrackingTargetAreaAlias) == 0x0074);
static_assert(offsetof(FSBSaveGameData_Quest, TrackingQuestAlias) == 0x007C);
static_assert(offsetof(FSBZoneEventActor_RestoreChunkInfo, Location) == 0x0004);
static_assert(offsetof(FSBZoneEventActor_RestoreChunkInfo, Rotation) == 0x0010);
static_assert(offsetof(FSBZoneEventActor_RestoreMeshInfo, Transform) == 0x0010);
static_assert(offsetof(FSBSaveGameData_ZoneEventActorStorage, ZoneEventActorName) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ZoneEventActorStorage, Location) == 0x0010);
static_assert(offsetof(FSBSaveGameData_ZoneEventActorStorage, Rotation) == 0x001C);
static_assert(offsetof(FSBSaveGameData_ZoneEventActorStorage, RestoreChunkInfoMap) == 0x0028);
static_assert(offsetof(FSBSaveGameData_ZoneEventActorStorage, MeshInfoMap) == 0x0078);
static_assert(offsetof(FSBSaveGameData_ZoneEventActorStorage, PhysicsConstraintStateMap) == 0x0118);
static_assert(offsetof(FSBSaveGameData_ZoneEventActorStorage, SaveType) == 0x0168);
static_assert(offsetof(FSBSaveGameData_WorldContainer, WorldAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_WorldContainer, ZoneEventActorStorageList) == 0x0008);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStateInfo, StateTagName) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ZoneEnvProgressInfo, NotifyInfoList) == 0x0028);
static_assert(offsetof(FSBSaveGameData_InteractInfo, CustomDataMap) == 0x0008);
static_assert(offsetof(FSBSaveGameData_ZoneEnvChildObjInfo, ObjectName) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ZoneEnvChildObjInfo, ObjectType) == 0x0008);
static_assert(offsetof(FSBSaveGameData_ZoneEnvChildObjInfo, Location) == 0x000C);
static_assert(offsetof(FSBSaveGameData_ZoneEnvChildObjInfo, Rotation) == 0x0018);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, EnvStateSlotTag) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, EnvActivate) == 0x0008);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, EnvActiveState) == 0x0009);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, EnvAlias) == 0x000C);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, SaveType) == 0x01A8);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, StateInfoList) == 0x01B0);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, EnvProgressInfo) == 0x01C0);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, ActorLocation) == 0x01D4);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, ActorRotation) == 0x01E0);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, QuestMarkerLocation) == 0x01EC);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, InteractData) == 0x01F8);
static_assert(offsetof(FSBSaveGameData_ZoneEnvStorage, PhysMainObject) == 0x0250);
static_assert(offsetof(FSBSaveGameData_MetaAI, SpecialBehaviorTag) == 0x0000);
static_assert(offsetof(FSBSaveGameData_MetaAI, ForceThink) == 0x0008);
static_assert(offsetof(FSBSaveGameData_MetaAI, ForceThink_BehaviorAlias) == 0x000C);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, CharacterDataAlias) == 0x0008);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, ActorLocation) == 0x0010);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, ActorRotation) == 0x001C);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, ObjectState) == 0x002E);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, SaveType) == 0x002F);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, StayZoneAlias) == 0x0030);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, RetargetSpawnPointName) == 0x0038);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, AI_Int32Map) == 0x0040);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, AI_FloatMap) == 0x0090);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, AI_VectorMap) == 0x00E0);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, AI_BoolMap) == 0x0130);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, AI_UsableTimeMap) == 0x0180);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, AI_ReactTimerMap) == 0x01D0);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, InteractData) == 0x0220);
static_assert(offsetof(FSBSaveGameData_ZoneNpcStorage, MetaAIData) == 0x0278);
static_assert(offsetof(FSBSaveGameData_ZoneTriggerStorage, TriggerActivate) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ZoneTriggerStorage, TriggerAlias) == 0x0008);
static_assert(offsetof(FSBSaveGameData_ZoneTriggerStorage, SaveType) == 0x0010);
static_assert(offsetof(FSBSaveGameData_ZoneEventItemStorage, EventSpawnAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ZoneEventItemStorage, ActorLocation) == 0x0008);
static_assert(offsetof(FSBSaveGameData_ZoneEventItemStorage, ActorRotation) == 0x0014);
static_assert(offsetof(FSBSaveGameData_ZoneEventItemStorage, SaveType) == 0x0020);
static_assert(offsetof(FSBSaveGameData_WorldObjectStorage, UniqueKey) == 0x0000);
static_assert(offsetof(FSBSaveGameData_WorldObjectStorage, ObjectType) == 0x0008);
static_assert(offsetof(FSBSaveGameData_WorldObjectStorage, Activate) == 0x0009);
static_assert(offsetof(FSBSaveGameData_WorldObjectStorage, SaveType) == 0x000A);
static_assert(offsetof(FSBSaveGameData_WorldObjectStorage, JsonInfo) == 0x0010);
static_assert(offsetof(FSBSaveGameData_ZoneContainer, ZoneAlias) == 0x0004);
static_assert(offsetof(FSBSaveGameData_ZoneContainer, ZoneObjectState) == 0x000C);
static_assert(offsetof(FSBSaveGameData_ZoneContainer, ZoneEnvStorageList) == 0x0010);
static_assert(offsetof(FSBSaveGameData_ZoneContainer, ZoneNpcStorageList) == 0x0020);
static_assert(offsetof(FSBSaveGameData_ZoneContainer, ZoneTriggerStorageList) == 0x0030);
static_assert(offsetof(FSBSaveGameData_ZoneContainer, ZoneEventItemStorageList) == 0x0040);
static_assert(offsetof(FSBSaveGameData_ZoneContainer, ZoneEventActorStorageList) == 0x0050);
static_assert(offsetof(FSBSaveGameData_ZoneContainer, WorldObjectStorageMap) == 0x0060);
static_assert(offsetof(FSBSaveGameData_Env, WorldContainerList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_Env, ZoneContainerList) == 0x0010);
static_assert(offsetof(FSBSaveGameData_ItemObject, ItemAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ItemObject, ItemInstance) == 0x0010);
static_assert(offsetof(FSBItemPocket, BucketType) == 0x0000);
static_assert(offsetof(FSBItemPocket, Guid) == 0x0004);
static_assert(offsetof(FSBItemPocket, SpawnPosition) == 0x0018);
static_assert(offsetof(FSBItemPocket, SpawnRotation) == 0x0024);
static_assert(offsetof(FSBItemPocket, LastLocation) == 0x0030);
static_assert(offsetof(FSBItemPocket, LastRotation) == 0x003C);
static_assert(offsetof(FSBItemPocket, SpawnPointName) == 0x004C);
static_assert(offsetof(FSBItemPocket, ItemInstArray) == 0x0058);
static_assert(offsetof(FSBSaveGameData_PocketObject, Alias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_PocketObject, SpawnPocketArray) == 0x0008);
static_assert(offsetof(FSBSaveGameData_WorldEventItem, WorldAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_WorldEventItem, EventSpawnItemList) == 0x0008);
static_assert(offsetof(FSBSaveGameData_Item, Inventory) == 0x0000);
static_assert(offsetof(FSBSaveGameData_Item, WorldPocketMap) == 0x0010);
static_assert(offsetof(FSBSaveGameData_Item, WorldEventItemMap) == 0x0060);
static_assert(offsetof(FSBSaveGameData_Item, ZonePocketMap) == 0x00B0);
static_assert(offsetof(FSBSaveGameData_Item, BulletSubIndexArray) == 0x0160);
static_assert(offsetof(FSBSaveGameData_AcquisitionSkillObject, AcquisitionSkillAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_AcquisitionSkill, AcquisitionSkillList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_AchievementObject, AchievementAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_Achievement, AchievementList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_FishingLog, FishAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_FishingLogBook, FishingLogList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ShopLimitedItemHistoryObject, ItemAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ShopLimitedItemHistoryArray, Array) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ShopLimitedItemHistory, Purchase) == 0x0000);
static_assert(offsetof(FSBSaveGameData_ShopLimitedItemHistory, FriendShip) == 0x0050);
static_assert(offsetof(FSBSaveGameData_ActorStorage, ActorStorageMap) == 0x0000);
static_assert(offsetof(FSBSaveGameData_RedDot, DotAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_RedDot, DotState) == 0x0008);
static_assert(offsetof(FSBSaveGameData_RedDot, ParentDotAlias) == 0x000C);
static_assert(offsetof(FSBSaveGameData_UI, RedDotArray) == 0x0000);
static_assert(offsetof(FSBSaveGameData_PlayRecordTaskData, DataAlias) == 0x0004);
static_assert(offsetof(FSBSaveGameData_PlayRecordTaskList, TaskDataList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_PlayRecordGroup, RecordGroupName) == 0x0000);
static_assert(offsetof(FSBSaveGameData_PlayRecordData, ProgressRecordGroup) == 0x0000);
static_assert(offsetof(FSBSaveGameData_HintObject, HintAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_Hint, DelayActivateHintList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_Hint, ActivateHintList) == 0x0010);
static_assert(offsetof(FSBSaveGameData_Hint, CompleteHintList) == 0x0020);
static_assert(offsetof(FSBSaveGameData_TrainingRoom, FirstTimeAcquisionSkill) == 0x0008);
static_assert(offsetof(FSBSaveGameData_EventGiftInfo, GiftList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_NikkeStageInfo, StageAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_NikkeStageInfo, CompleteEntryEnv) == 0x0014);
static_assert(offsetof(FSBSaveGameData_Nikke, NikkeStageInfoList) == 0x0000);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, TrainingRoomData) == 0x0028);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, ActorSaveData) == 0x0080);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, ZoneContainerMap) == 0x0330);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, AcquisitionSkill) == 0x0380);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, AchievementSaveData) == 0x03E0);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, UISaveData) == 0x03F0);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, ItemSaveData) == 0x0400);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, FishingLogBookSaveData) == 0x0570);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, TheaterData) == 0x0580);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, EventGiftData) == 0x05D0);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, NikkeStageInfo) == 0x05E0);
static_assert(offsetof(FSBSaveGameData_NewGamePlusBaseInfo, QuestData) == 0x05F0);
static_assert(offsetof(FSBSaveGameData_DebugHistoryLogSection, LogSectionType) == 0x0000);
static_assert(offsetof(FSBSaveGameData_DebugHistoryLogSection, LogList) == 0x0008);
static_assert(offsetof(FSBSaveGameData_DebugHistoryLog, KeyAlias) == 0x0000);
static_assert(offsetof(FSBSaveGameData_DebugHistoryLog, LogSectionList) == 0x0008);
static_assert(offsetof(USBSaveGame, SnapShotZoneAlias) == 0x0090);
static_assert(offsetof(USBSaveGame, VersionInfo) == 0x00A0);
static_assert(offsetof(USBSaveGame, DataMap_SBActor) == 0x00E8);
static_assert(offsetof(USBSaveGame, DataMap_SBEffect) == 0x0138);
static_assert(offsetof(USBSaveGame, DataMap_SBQuest) == 0x0188);
static_assert(offsetof(USBSaveGame, DataMap_SBEnv) == 0x01D8);
static_assert(offsetof(USBSaveGame, DataMap_SBItem) == 0x0228);
static_assert(offsetof(USBSaveGame, DataMap_SBAcquisitionSkill) == 0x0278);
static_assert(offsetof(USBSaveGame, SBAchievement) == 0x02C8);
static_assert(offsetof(USBSaveGame, SBFishingLogBook) == 0x02D8);
static_assert(offsetof(USBSaveGame, DataMap_float) == 0x02E8);
static_assert(offsetof(USBSaveGame, DataMap_FString) == 0x0338);
static_assert(offsetof(USBSaveGame, DataMap_int32) == 0x0388);
static_assert(offsetof(USBSaveGame, DataMap_int64) == 0x03D8);
static_assert(offsetof(USBSaveGame, DataMap_FVector) == 0x0428);
static_assert(offsetof(USBSaveGame, SBShopHistory) == 0x0478);
static_assert(offsetof(USBSaveGame, LevelActorStorage) == 0x0518);
static_assert(offsetof(USBSaveGame, TheaterStorage) == 0x0568);
static_assert(offsetof(USBSaveGame, UIStorage) == 0x05B8);
static_assert(offsetof(USBSaveGame, GamePlayProgressRecordData) == 0x05C8);
static_assert(offsetof(USBSaveGame, SBHint) == 0x0618);
static_assert(offsetof(USBSaveGame, TrainingRoomData) == 0x0648);
static_assert(offsetof(USBSaveGame, NewGamePlusBaseData) == 0x06A0);
static_assert(offsetof(USBSaveGame, EventGiftInfo) == 0x0D18);
static_assert(offsetof(USBSaveGame, NikkeStageInfo) == 0x0D28);
static_assert(offsetof(USBSaveGame, DebugHistoryLogMap) == 0x0D38);
static_assert(offsetof(FSBActorSectorInfo, ActorOrigin) == 0x0014);
static_assert(offsetof(FSBActorSectorInfo, ActorExtent) == 0x0020);
static_assert(offsetof(USBSaveGameComponent, BoxExtents) == 0x0260);
static_assert(offsetof(USBSaveGameComponent, VolumeBoxColor) == 0x026C);
static_assert(offsetof(USBSaveGameComponent, SectorInfo) == 0x0270);
static_assert(offsetof(USBSaveGameComponent, ModeType) == 0x029C);
static_assert(offsetof(FSBSaveObjectInfo, SaveSlotName) == 0x0008);
static_assert(offsetof(FSBSaveObjectInfo, SaveGameObject) == 0x0018);
static_assert(offsetof(FSBSaveObjectInfo, SaveObjectType) == 0x0020);
static_assert(offsetof(FSBSaveObjectInfo, WithSaveFilePath) == 0x0028);
static_assert(offsetof(FSBSaveObjectInfo, WithSaveFileName) == 0x0038);
static_assert(offsetof(USBSaveManager, SaveObjectList) == 0x0048);
static_assert(offsetof(ASBSaveVolume, SectorID) == 0x0318);
static_assert(offsetof(ASBSaveVolume, LevelObjOrigin) == 0x0324);
static_assert(offsetof(ASBSaveVolume, LevelObjExtent) == 0x0330);
static_assert(offsetof(ASBScanActor, ScanEffectMaterial) == 0x02C8);
static_assert(offsetof(ASBScanActor, ContrastEffectMaterial) == 0x02D0);
static_assert(offsetof(ASBScanActor, ContrastPP) == 0x02D8);
static_assert(offsetof(ASBScanActor, ContrastMID) == 0x02E0);
static_assert(offsetof(ASBScanActor, ScanEffectPP) == 0x02E8);
static_assert(offsetof(ASBScanActor, ScanEffectMID) == 0x02F0);
static_assert(offsetof(ASBScanActor, ScanEffectMaterialParamCI) == 0x02F8);
static_assert(offsetof(ASBScanActor, ScanEffectMaterialParamCI_NavDecal) == 0x0300);
static_assert(offsetof(USBSequencerBaseWidget, Input) == 0x06A8);
static_assert(offsetof(USBSequencerBaseWidget, inputSB) == 0x06B0);
static_assert(offsetof(USBSequencerAreaWidget, MainText) == 0x06C0);
static_assert(offsetof(USBSequencerAreaWidget, SubText) == 0x06D8);
static_assert(offsetof(USBSequencerAttachChildWidget, Arguments) == 0x0680);
static_assert(offsetof(USBSequencerAttachWidget, SectionData) == 0x06C0);
static_assert(offsetof(USBSequencerAttachWidget, LastAssetPath) == 0x0708);
static_assert(offsetof(USBSequencerAttachWidget, ChildWidget) == 0x0718);
static_assert(offsetof(USBSequencerDialogueWidget, Message) == 0x06C0);
static_assert(offsetof(FSBSequencerInputCounterInputInfo, InputType) == 0x0000);
static_assert(offsetof(FSBSequencerInputCounterInputInfo, CheckInputActionArray) == 0x0008);
static_assert(offsetof(FSBSequencerInputCounterActorInfo, PanelWidget) == 0x0000);
static_assert(offsetof(USBSequencerInputCounterWidget, SectionData) == 0x06C0);
static_assert(offsetof(USBSequencerInputCounterWidget, ActionKey) == 0x07D8);
static_assert(offsetof(USBSequencerInputCounterWidget, InputType) == 0x07D9);
static_assert(offsetof(USBSequencerInputCounterWidget, ChildWidgets) == 0x07E8);
static_assert(offsetof(USBSequencerInputCounterWidget, InputInfoArray) == 0x07F8);
static_assert(offsetof(USBSequencerInputCounterWidget, CheckInputActionArray) == 0x0808);
static_assert(offsetof(USBSequencerInputCounterWidget, targetWidget) == 0x0828);
static_assert(offsetof(USBSequencerInputCounterWidget, actorInfoArray) == 0x0830);
static_assert(offsetof(USBSequencerInputCounterWidget, FrameRate) == 0x0840);
static_assert(offsetof(USBSequencerInputCounterWidget, BindCountMap) == 0x0850);
static_assert(offsetof(USBSequencerInputCounterWidget, HitShowData) == 0x08A8);
static_assert(offsetof(USBSequencerInputCounterWidget, HitEventName) == 0x08B0);
static_assert(offsetof(FSBTheaterInteractionLineData, SelectType) == 0x0000);
static_assert(offsetof(FSBTheaterInteractionLineData, DisplayText) == 0x0008);
static_assert(offsetof(FSBTheaterInteractionLineData, TakeAlias) == 0x0020);
static_assert(offsetof(FSBTheaterInteractionLineData, InteractionGraphExec) == 0x0028);
static_assert(offsetof(FSBTheaterInteractionLineData, MarkerType) == 0x0030);
static_assert(offsetof(FSBTheaterInteractionLineData, QuestSymbolUIType) == 0x0031);
static_assert(offsetof(FSBTheaterInteractionLineData, SelectedMsgPopupText) == 0x0038);
static_assert(offsetof(USBSequencerInteractionSelectWidget, DesignType) == 0x06C4);
static_assert(offsetof(USBSequencerInteractionSelectWidget, DataArray) == 0x06C8);
static_assert(offsetof(USBSequencerInteractionSelectWidget, Message) == 0x06E0);
static_assert(offsetof(USBSequencerInteractionSelectWidget, ContentType) == 0x06F8);
static_assert(offsetof(USBSequencerInteractionSelectWidget, SectionData) == 0x06FC);
static_assert(offsetof(USBSequencerMovieWidget, BinkMediaPlayerTemplate) == 0x06C0);
static_assert(offsetof(USBSequencerMovieWidget, BKAssetPath) == 0x06E8);
static_assert(offsetof(USBSequencerMovieWidget, BinkMoviePlayer) == 0x0704);
static_assert(offsetof(USBSequencerPlayerChoiceWidget, SectionData) == 0x0720);
static_assert(offsetof(FSBSequencerQTEInputInfo, InputType) == 0x0000);
static_assert(offsetof(FSBSequencerQTEInputInfo, CheckInputActionArray) == 0x0008);
static_assert(offsetof(FSBSequencerQTEActorInfo, PanelWidget) == 0x0000);
static_assert(offsetof(USBSequencerQTEWidget, SectionData) == 0x06C0);
static_assert(offsetof(USBSequencerQTEWidget, InputType) == 0x0780);
static_assert(offsetof(USBSequencerQTEWidget, InputAction) == 0x0784);
static_assert(offsetof(USBSequencerQTEWidget, UIInputAction) == 0x078C);
static_assert(offsetof(USBSequencerQTEWidget, ChildWidgets) == 0x07A0);
static_assert(offsetof(USBSequencerQTEWidget, InputInfoArray) == 0x07B0);
static_assert(offsetof(USBSequencerQTEWidget, CheckInputActionArray) == 0x07C0);
static_assert(offsetof(USBSequencerQTEWidget, targetWidget) == 0x07E0);
static_assert(offsetof(USBSequencerQTEWidget, actorInfoArray) == 0x07E8);
static_assert(offsetof(USBSequencerQTEWidget, FrameRate) == 0x07F8);
static_assert(offsetof(USBSequencerQTEWidget, BindCountMap) == 0x0808);
static_assert(offsetof(USBSequencerQTEWidget, HitShowData) == 0x0860);
static_assert(offsetof(USBSequencerQTEWidget, HitEventName) == 0x0868);
static_assert(offsetof(USBSequencerReactionTriggerWidget, SectionData) == 0x06C0);
static_assert(offsetof(USBSequencerReactionTriggerWidget, InputType) == 0x06E0);
static_assert(offsetof(USBSequencerReactionTriggerWidget, CheckInputActionArray) == 0x06F0);
static_assert(offsetof(USBSequencerReactionTriggerWidget, BindCountMap) == 0x0700);
static_assert(offsetof(USBSequencerRootWidget, WidgetBackground) == 0x0680);
static_assert(offsetof(USBSequencerRootWidget, WidgetArea) == 0x0688);
static_assert(offsetof(USBSequencerRootWidget, WidgetDialogue) == 0x0690);
static_assert(offsetof(USBSequencerRootWidget, WidgetPlayerChoice) == 0x0698);
static_assert(offsetof(USBSequencerRootWidget, WidgetInputCounter) == 0x06A0);
static_assert(offsetof(USBSequencerRootWidget, WidgetQTE) == 0x06A8);
static_assert(offsetof(USBSequencerRootWidget, WidgetInteractionSelect) == 0x06B0);
static_assert(offsetof(USBSequencerRootWidget, WidgetSubtitle) == 0x06B8);
static_assert(offsetof(USBSequencerRootWidget, WidgetMovie) == 0x06C0);
static_assert(offsetof(USBSequencerRootWidget, WidgetSkip) == 0x06C8);
static_assert(offsetof(USBSequencerRootWidget, WidgetReactionTrigger) == 0x06D0);
static_assert(offsetof(USBSequencerRootWidget, WidgetAttach) == 0x06D8);
static_assert(offsetof(USBSequencerRootWidget, WidgetArray) == 0x06E0);
static_assert(offsetof(USBSequencerSubtitle2SlotWidget, SubtitleVisibleType) == 0x0689);
static_assert(offsetof(USBSequencerSubtitle2SlotWidget, SubtitleSizeType) == 0x068A);
static_assert(offsetof(USBSequencerSubtitle2Widget, SubtitleVisibleType) == 0x06C0);
static_assert(offsetof(USBSequencerSubtitle2Widget, SubtitleSizeType) == 0x06C1);
static_assert(offsetof(USBSequencerSubtitle2Widget, SubtitleBGType) == 0x06C2);
static_assert(offsetof(USBSequencerSubtitle2Widget, FontInfo) == 0x06D0);
static_assert(offsetof(USBSequencerSubtitle2Widget, SequencePlayer) == 0x0734);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, Type) == 0x0680);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, author) == 0x0688);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, Message) == 0x06A0);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, SubtitleVisibleType) == 0x06BC);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, SubtitleSizeType) == 0x06BD);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, SubtitleAuthorType) == 0x06BE);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, WB_Typewriter) == 0x06C0);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, CultureLetterTimeMap) == 0x06C8);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, CultureLetterSpaceTimeMap) == 0x0718);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, ContentType) == 0x0768);
static_assert(offsetof(USBSequencerSubtitle3SlotWidget, AuthorColor) == 0x076C);
static_assert(offsetof(USBSequencerSubtitle3Widget, SubtitleVisibleType) == 0x06C0);
static_assert(offsetof(USBSequencerSubtitle3Widget, SubtitleSizeType) == 0x06C1);
static_assert(offsetof(USBSequencerSubtitle3Widget, SubtitleBGType) == 0x06C2);
static_assert(offsetof(USBSequencerSubtitle3Widget, SubtitleAuthorType) == 0x06C3);
static_assert(offsetof(USBSequencerSubtitle3Widget, FontInfo) == 0x06D0);
static_assert(offsetof(USBSequencerSubtitle3Widget, ContentType) == 0x0738);
static_assert(offsetof(USBSequencerSubtitle3Widget, AuthorColor) == 0x073C);
static_assert(offsetof(USBSequencerSubtitle3Widget, AuthorColorMap) == 0x0750);
static_assert(offsetof(USBSequencerSubtitle3Widget, SequencePlayer) == 0x07A0);
static_assert(offsetof(USBShowKey, CheckShowKeyTag) == 0x0028);
static_assert(offsetof(USBShowKey, CheckNoneShowKeyTag) == 0x0038);
static_assert(offsetof(USBShowKey, IsBattle) == 0x0048);
static_assert(offsetof(USBShowActorAnimKey, ComponentTag) == 0x0058);
static_assert(offsetof(USBShowActorAnimKey, MeshSlot) == 0x0061);
static_assert(offsetof(USBShowActorAnimKey, AnimResource) == 0x0068);
static_assert(offsetof(USBShowActorAnimKey, Target) == 0x009C);
static_assert(offsetof(USBShowActorCompVisibleKey, Tag) == 0x0058);
static_assert(offsetof(USBShowActorCompVisibleKey, Target) == 0x0062);
static_assert(offsetof(USBShowActorEventNotificationKey, EventName) == 0x0058);
static_assert(offsetof(USBShowActorEventNotificationKey, Target) == 0x0060);
static_assert(offsetof(USBShowActorKey, DisableClothCollisionMeshSlot) == 0x005F);
static_assert(offsetof(USBShowActorKey, DisableClothCollisionNameArray) == 0x0060);
static_assert(offsetof(USBShowActorKey, ClothWindMeshSlot) == 0x0070);
static_assert(offsetof(USBShowActorKey, ClothWindDirectionType) == 0x007C);
static_assert(offsetof(USBShowActorKey, ClothWindDirection) == 0x0080);
static_assert(offsetof(USBShowActorKey, PhysicsResetSlot) == 0x0092);
static_assert(offsetof(USBShowAnimBlendSpaceKey, BlendSpaceSlot) == 0x005C);
static_assert(offsetof(USBShowAnimBlendSpaceKey, BlendSpaceChannel) == 0x005D);
static_assert(offsetof(USBShowAnimBlendSpaceKey, Target) == 0x0061);
static_assert(offsetof(USBShowAnimBlendSpaceKey, DefaultResourcePath) == 0x0070);
static_assert(offsetof(USBShowAnimBlendSpaceKey, DefaultResourcePathWhenStruggle) == 0x0080);
static_assert(offsetof(USBShowAnimBlendSpaceKey, FrontResourcePath) == 0x0098);
static_assert(offsetof(USBShowAnimBlendSpaceKey, BackResourcePath) == 0x00A8);
static_assert(offsetof(USBShowAnimBlendSpaceKey, LeftResourcePath) == 0x00B8);
static_assert(offsetof(USBShowAnimBlendSpaceKey, RightResourcePath) == 0x00C8);
static_assert(offsetof(USBShowAnimBPSetValueKey, Target) == 0x0058);
static_assert(offsetof(USBShowAnimBPSetValueKey, Name) == 0x0060);
static_assert(offsetof(USBShowAnimBPSetValueKey, Value) == 0x0068);
static_assert(offsetof(USBShowAnimBPSetValueKey_String, Target) == 0x0058);
static_assert(offsetof(USBShowAnimBPSetValueKey_String, Name) == 0x0060);
static_assert(offsetof(USBShowAnimBPSetValueKey_String, Value) == 0x0068);
static_assert(offsetof(USBShowAnimBPSetValueKey_String, RecoverValue) == 0x0070);
static_assert(offsetof(USBShowAnimByMeshSlotKey, MeshSlot) == 0x0058);
static_assert(offsetof(USBShowAnimByMeshSlotKey, AnimResourcePath) == 0x0060);
static_assert(offsetof(USBShowAnimByMeshSlotKey, Target) == 0x007C);
static_assert(offsetof(FSBCustomLayeredBoneBlendInfo, BoneName) == 0x0000);
static_assert(offsetof(FOptionalAnimationByAngle, AnimResourcePath) == 0x0000);
static_assert(offsetof(FSBShowAnimKeyStep, LookAtTargetSocket) == 0x0010);
static_assert(offsetof(USBShowAnimKey, CheckActiveType) == 0x0058);
static_assert(offsetof(USBShowAnimKey, Swimming) == 0x0064);
static_assert(offsetof(USBShowAnimKey, UnderWaterSwimming) == 0x0065);
static_assert(offsetof(USBShowAnimKey, CharacterAxisUpDirection) == 0x0066);
static_assert(offsetof(USBShowAnimKey, AnimSequencePlayType) == 0x0067);
static_assert(offsetof(USBShowAnimKey, AnimResourcePath) == 0x0070);
static_assert(offsetof(USBShowAnimKey, CustomAnim) == 0x0080);
static_assert(offsetof(USBShowAnimKey, DirectionalAnimationType) == 0x0086);
static_assert(offsetof(USBShowAnimKey, AreaDirectionCheckType) == 0x0089);
static_assert(offsetof(USBShowAnimKey, DefaultDirection) == 0x008C);
static_assert(offsetof(USBShowAnimKey, FrontCustomAnim) == 0x0094);
static_assert(offsetof(USBShowAnimKey, BackCustomAnim) == 0x0095);
static_assert(offsetof(USBShowAnimKey, LeftCustomAnim) == 0x0096);
static_assert(offsetof(USBShowAnimKey, RightCustomAnim) == 0x0097);
static_assert(offsetof(USBShowAnimKey, UpCustomAnim) == 0x0098);
static_assert(offsetof(USBShowAnimKey, DownCustomAnim) == 0x0099);
static_assert(offsetof(USBShowAnimKey, FrontAnimResourcePath) == 0x00A0);
static_assert(offsetof(USBShowAnimKey, BackAnimResourcePath) == 0x00B0);
static_assert(offsetof(USBShowAnimKey, LeftAnimResourcePath) == 0x00C0);
static_assert(offsetof(USBShowAnimKey, RightAnimResourcePath) == 0x00D0);
static_assert(offsetof(USBShowAnimKey, UpAnimResourcePath) == 0x00E0);
static_assert(offsetof(USBShowAnimKey, DownAnimResourcePath) == 0x00F0);
static_assert(offsetof(USBShowAnimKey, CustomAnimPlayType) == 0x0100);
static_assert(offsetof(USBShowAnimKey, CustomBlendSpaceInputType1) == 0x0101);
static_assert(offsetof(USBShowAnimKey, CustomBlendSpaceInputType2) == 0x0102);
static_assert(offsetof(USBShowAnimKey, CustomLayeredBoneBlendInfo) == 0x0108);
static_assert(offsetof(USBShowAnimKey, OptionalAnimationByAngleArray) == 0x0118);
static_assert(offsetof(USBShowAnimKey, StopCustomAniNameArray) == 0x0128);
static_assert(offsetof(USBShowAnimKey, PlayBodyType) == 0x0138);
static_assert(offsetof(USBShowAnimKey, Target) == 0x0139);
static_assert(offsetof(USBShowAnimKey, MeshSlot) == 0x013A);
static_assert(offsetof(USBShowAnimKey, PlayIfSamePriorityCustomAniNameArray) == 0x0168);
static_assert(offsetof(USBShowAnimKey, ShowStepArray) == 0x0198);
static_assert(offsetof(USBShowAnimKey, RootMotionKey) == 0x01A8);
static_assert(offsetof(USBShowAnimKey, RootMotionDataPath) == 0x01B0);
static_assert(offsetof(USBShowAnimKey, PlayerCheck) == 0x01C9);
static_assert(offsetof(USBShowAnimKey, ResetAnimSlotSequenceSlot) == 0x01CC);
static_assert(offsetof(USBShowAnimKey, AnimResourcePathAtMoveStruggle) == 0x01D8);
static_assert(offsetof(USBShowAnimKey, AnimApplyIKType) == 0x01F4);
static_assert(offsetof(USBShowAnimNodeGroundCollisionKey, StartBone) == 0x0058);
static_assert(offsetof(USBShowAnimNodeGroundCollisionKey, EndBone) == 0x0060);
static_assert(offsetof(USBShowAnimNodeTargetTrackingKey, StartBone) == 0x0058);
static_assert(offsetof(USBShowAnimNodeTargetTrackingKey, EndBone) == 0x0060);
static_assert(offsetof(USBShowAnimNodeTargetTrackingKey, Target) == 0x0074);
static_assert(offsetof(USBShowAnimTransitKey, TransitAnimType) == 0x0058);
static_assert(offsetof(USBShowAnimTransitKey, TransitAnimGroupData) == 0x0060);
static_assert(offsetof(USBShowAnimTransitKey, TransitAnimGroupName) == 0x0068);
static_assert(offsetof(USBShowAnimTransitKey, TransitAnimChannel) == 0x0070);
static_assert(offsetof(USBShowAnimTransitKey, Target) == 0x0073);
static_assert(offsetof(USBShowAnimTransitKey, DefaultResourcePath) == 0x0080);
static_assert(offsetof(USBShowAttachSocketToSocketKey, IKBoneName) == 0x0058);
static_assert(offsetof(USBShowAttachSocketToSocketKey, MySocketSlot) == 0x0060);
static_assert(offsetof(USBShowAttachSocketToSocketKey, MySocketName) == 0x0064);
static_assert(offsetof(USBShowAttachSocketToSocketKey, TargetSocketSlot) == 0x006C);
static_assert(offsetof(USBShowAttachSocketToSocketKey, TargetSocketName) == 0x0070);
static_assert(offsetof(USBShowBoneScaleIgnoreKey, IgnoreBones) == 0x0060);
static_assert(offsetof(USBShowCableKey, ThrowTimeCurve) == 0x0060);
static_assert(offsetof(USBShowCableKey, RetrieveTimeCurve) == 0x00F8);
static_assert(offsetof(USBShowCableKey, EndLocation) == 0x0180);
static_assert(offsetof(USBShowCableKey, ThrowLocationX) == 0x0190);
static_assert(offsetof(USBShowCableKey, ThrowLocationY) == 0x0218);
static_assert(offsetof(USBShowCableKey, ThrowLocationZ) == 0x02A0);
static_assert(offsetof(USBShowCableKey, StartAttachBoneName) == 0x0328);
static_assert(offsetof(USBShowCableKey, StartRelativeLocation) == 0x0330);
static_assert(offsetof(USBShowCableKey, CableMaterial) == 0x0360);
static_assert(offsetof(USBShowCableKey, TargetAttachBoneName) == 0x0378);
static_assert(offsetof(USBShowCableKey, TargetRelativeLocation) == 0x0380);
static_assert(offsetof(FSBShowMatineeCamAnimByFactorType, CharacterFactorTypeName) == 0x0000);
static_assert(offsetof(FSBShowMatineeCamAnimByFactorType, MatineeCameraAnim) == 0x0008);
static_assert(offsetof(USBShowCamAnimKey, CheckTarget) == 0x0068);
static_assert(offsetof(USBShowCamAnimKey, BoneName) == 0x006C);
static_assert(offsetof(USBShowCamAnimKey, ManualFocalTarget) == 0x007C);
static_assert(offsetof(USBShowCamAnimKey, ManualFocalBoneName) == 0x0080);
static_assert(offsetof(USBShowCamAnimKey, BasedCustomAnimName) == 0x0098);
static_assert(offsetof(USBShowCamAnimKey, RelativeRot) == 0x00A0);
static_assert(offsetof(USBShowCamAnimKey, MatineeCameraAnim) == 0x00B0);
static_assert(offsetof(USBShowCamAnimKey, ExtraCameraAnimsByFactorType) == 0x00E0);
static_assert(offsetof(USBShowCamAnimKey, FovCurve) == 0x00F0);
static_assert(offsetof(FSBShowCameraShakeParams, RotOscillation) == 0x000C);
static_assert(offsetof(FSBShowCameraShakeParams, LocOscillation) == 0x0030);
static_assert(offsetof(FSBShowCameraShakeParams, FOVOscillation) == 0x0054);
static_assert(offsetof(FSBShowCameraShakeParams, Anim) == 0x0078);
static_assert(offsetof(USBShowCamShakeKey, CameraShakeObject) == 0x0058);
static_assert(offsetof(USBShowCamShakeKey, CameraShakeParams) == 0x0068);
static_assert(offsetof(USBShowCamShakeKey, PlayTarget) == 0x011E);
static_assert(offsetof(USBShowChangeAttachTo, EventTagName) == 0x0058);
static_assert(offsetof(USBShowChangeAttachTo, EventCustomNameValue) == 0x0060);
static_assert(offsetof(USBShowClientEventKey, ClientEvent) == 0x0058);
static_assert(offsetof(USBShowClientEventKey, FreeMoveMounting_StartControlPointDirection) == 0x0064);
static_assert(offsetof(USBShowClientEventKey, FreeMoveMounting_EndControlPointDirection) == 0x0070);
static_assert(offsetof(USBShowClientEventKey, FreeMoveMounting_InterpType) == 0x007C);
static_assert(offsetof(USBShowClientEventKey, FreeMoveMounting_Rotation) == 0x0080);
static_assert(offsetof(USBShowControlCameraVolumeKey, AddOffsetYCurve) == 0x0060);
static_assert(offsetof(USBShowControlCameraVolumeKey, AddOffsetXCurve) == 0x0068);
static_assert(offsetof(USBShowControlCameraVolumeKey, AddFovCurve) == 0x0070);
static_assert(offsetof(USBShowControlCameraVolumeKey, YawToPivotCurve) == 0x0078);
static_assert(offsetof(USBShowControlCameraVolumeKey, PitchToPivotCurve) == 0x0080);
static_assert(offsetof(USBShowControlCamLagSpeedKey, PlayTarget) == 0x0074);
static_assert(offsetof(USBShowControlLockOnTargetBoneKey, PlayTarget) == 0x005C);
static_assert(offsetof(USBShowControlLockOnTargetBoneKey, TargetBoneSocketName) == 0x0064);
static_assert(offsetof(FSBShowCreateDestructibleCollisionResponseToChannel, Channel) == 0x0000);
static_assert(offsetof(FSBShowCreateDestructibleCollisionResponseToChannel, Response) == 0x0001);
static_assert(offsetof(USBShowCreateDestructibleKey, SocketName) == 0x0058);
static_assert(offsetof(USBShowCreateDestructibleKey, DestructibleMesh) == 0x0060);
static_assert(offsetof(USBShowCreateDestructibleKey, LocationBaseTarget) == 0x0068);
static_assert(offsetof(USBShowCreateDestructibleKey, RelativeLocation) == 0x0070);
static_assert(offsetof(USBShowCreateDestructibleKey, RelativeRotation) == 0x007C);
static_assert(offsetof(USBShowCreateDestructibleKey, Scale) == 0x0088);
static_assert(offsetof(USBShowCreateDestructibleKey, CollisionType) == 0x00C1);
static_assert(offsetof(USBShowCreateDestructibleKey, ChunkAttachedParticle) == 0x00D0);
static_assert(offsetof(USBShowCreateDestructibleKey, ComponentTag) == 0x00E0);
static_assert(offsetof(USBShowCreateDestructibleKey, CollisionResponseToChannel) == 0x00F0);
static_assert(offsetof(USBShowCreateDestructibleKey, HurtOriginOffset) == 0x0104);
static_assert(offsetof(USBShowCreateDestructibleKey, RegisterKey) == 0x011C);
static_assert(offsetof(USBShowCreateStaticMeshKey, SocketName) == 0x0058);
static_assert(offsetof(USBShowCreateStaticMeshKey, StaticMesh) == 0x0060);
static_assert(offsetof(USBShowCreateStaticMeshKey, pMaterialArray) == 0x0068);
static_assert(offsetof(USBShowCreateStaticMeshKey, MaterialInstanceArray) == 0x0078);
static_assert(offsetof(USBShowCreateStaticMeshKey, LocationBaseTarget) == 0x0088);
static_assert(offsetof(USBShowCreateStaticMeshKey, TargetEquipment) == 0x0091);
static_assert(offsetof(USBShowCreateStaticMeshKey, RelativeLocation) == 0x0094);
static_assert(offsetof(USBShowCreateStaticMeshKey, RelativeRotation) == 0x00A0);
static_assert(offsetof(USBShowCreateStaticMeshKey, Scale) == 0x00AC);
static_assert(offsetof(USBShowCreateStaticMeshKey, CollisionProfileName) == 0x00B8);
static_assert(offsetof(USBShowCreateStaticMeshKey, ActorTag) == 0x00C8);
static_assert(offsetof(USBShowCreateStaticMeshKey, ComponentTag) == 0x00D0);
static_assert(offsetof(USBShowCreateStaticMeshKey, RegisterKey) == 0x00DC);
static_assert(offsetof(USBShowCreateStaticMeshKey, RelativeLocationXCurve) == 0x00E8);
static_assert(offsetof(USBShowCreateStaticMeshKey, RelativeLocationYCurve) == 0x0170);
static_assert(offsetof(USBShowCreateStaticMeshKey, RelativeLocationZCurve) == 0x01F8);
static_assert(offsetof(USBShowCreateStaticMeshKey, RelativeRotationXCurve) == 0x0288);
static_assert(offsetof(USBShowCreateStaticMeshKey, RelativeRotationYCurve) == 0x0310);
static_assert(offsetof(USBShowCreateStaticMeshKey, RelativeRotationZCurve) == 0x0398);
static_assert(offsetof(USBShowCreateStaticMeshKey, ScaleCurve) == 0x0428);
static_assert(offsetof(USBShowCreateStaticMeshKey, PhotoModeShowHiddenFlag) == 0x04B0);
static_assert(offsetof(FSBShowKeyContainer, Keys) == 0x0000);
static_assert(offsetof(FSBJsonEffect, Alias) == 0x0000);
static_assert(offsetof(FSBJsonSkillStepEndCondition, NextStepAlias) == 0x0004);
static_assert(offsetof(FSBJsonSkillStepEndCondition, IsGround) == 0x000C);
static_assert(offsetof(FSBJsonSkillStepEndCondition, IsSwimming) == 0x000D);
static_assert(offsetof(FSBJsonSkillStepEndCondition, IsRuleMoveActive) == 0x000F);
static_assert(offsetof(FSBJsonSkillStepEndCondition, IsTargetDead) == 0x0010);
static_assert(offsetof(FSBJsonSkillStepEndCondition, EffectAliasArray) == 0x0018);
static_assert(offsetof(FSBJsonCollisionGroup, CollisionGroupName) == 0x0004);
static_assert(offsetof(FSBJsonNextStepCheckEffect, Effect) == 0x0000);
static_assert(offsetof(FSBJsonNextStepCheckEffect, NextStepAlias) == 0x0008);
static_assert(offsetof(FSBSkillActiveStepTableProperty, Type) == 0x0014);
static_assert(offsetof(FSBSkillActiveStepTableProperty, AttackDirection) == 0x001C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAlias) == 0x0034);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenParry) == 0x003C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenJustParry) == 0x0044);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenPerfectParry) == 0x004C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenSuperParry) == 0x0054);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenGuard) == 0x005C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenBreakGuard) == 0x0064);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenCancel) == 0x006C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenHit) == 0x0074);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenPerfectHit) == 0x007C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenHoldRelease) == 0x0084);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenHoldAndDualSenseTriggerEffectWeaponFired) == 0x008C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenAttacked) == 0x0094);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenNoTarget) == 0x009C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenLinkBreak) == 0x00A4);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepAliasWhenInvalidItemConsume) == 0x00AC);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepCheckEffectArray) == 0x00B8);
static_assert(offsetof(FSBSkillActiveStepTableProperty, SkillResultAlias) == 0x00CC);
static_assert(offsetof(FSBSkillActiveStepTableProperty, SkillResultAliasWhenParry) == 0x00D4);
static_assert(offsetof(FSBSkillActiveStepTableProperty, SkillResultAliasWhenJustParry) == 0x00DC);
static_assert(offsetof(FSBSkillActiveStepTableProperty, SkillResultAliasWhenPerfectParry) == 0x00E4);
static_assert(offsetof(FSBSkillActiveStepTableProperty, SkillResultAliasWhenSuperParry) == 0x00EC);
static_assert(offsetof(FSBSkillActiveStepTableProperty, SkillResultAliasWhenGuard) == 0x00F4);
static_assert(offsetof(FSBSkillActiveStepTableProperty, SkillResultAliasWhenBreakGuard) == 0x00FC);
static_assert(offsetof(FSBSkillActiveStepTableProperty, SkillResultElementType) == 0x0104);
static_assert(offsetof(FSBSkillActiveStepTableProperty, StartSelfEffect) == 0x0110);
static_assert(offsetof(FSBSkillActiveStepTableProperty, StartTargetEffect) == 0x0120);
static_assert(offsetof(FSBSkillActiveStepTableProperty, SelfMoveAliasArray) == 0x0138);
static_assert(offsetof(FSBSkillActiveStepTableProperty, TargetMoveAliasArray) == 0x0148);
static_assert(offsetof(FSBSkillActiveStepTableProperty, PeacefulShowPath) == 0x0158);
static_assert(offsetof(FSBSkillActiveStepTableProperty, ShowPath) == 0x0160);
static_assert(offsetof(FSBSkillActiveStepTableProperty, TargetShowPath) == 0x016C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, UsableNonTargetProjectileTargetType) == 0x0174);
static_assert(offsetof(FSBSkillActiveStepTableProperty, UsableNonTargetProjectileAliasArray) == 0x0178);
static_assert(offsetof(FSBSkillActiveStepTableProperty, UsableTargetProjectileTargetType) == 0x0188);
static_assert(offsetof(FSBSkillActiveStepTableProperty, UsableTargetProjectileAliasArray) == 0x0190);
static_assert(offsetof(FSBSkillActiveStepTableProperty, HitDetectionType) == 0x01A5);
static_assert(offsetof(FSBSkillActiveStepTableProperty, TargetDetectionType) == 0x01A6);
static_assert(offsetof(FSBSkillActiveStepTableProperty, OverrideTargetFilterAlias) == 0x01B4);
static_assert(offsetof(FSBSkillActiveStepTableProperty, AttackCollisionGroupArray) == 0x01C0);
static_assert(offsetof(FSBSkillActiveStepTableProperty, AttackedCollisionGroupArray) == 0x01D0);
static_assert(offsetof(FSBSkillActiveStepTableProperty, BlockingCollisionArray) == 0x01E8);
static_assert(offsetof(FSBSkillActiveStepTableProperty, CreateEffectSelfPosition) == 0x0208);
static_assert(offsetof(FSBSkillActiveStepTableProperty, CreateEffectTargetPosition) == 0x0218);
static_assert(offsetof(FSBSkillActiveStepTableProperty, TargetDeadEffect) == 0x0228);
static_assert(offsetof(FSBSkillActiveStepTableProperty, ConditionEnd1) == 0x0248);
static_assert(offsetof(FSBSkillActiveStepTableProperty, ConditionEnd2) == 0x0258);
static_assert(offsetof(FSBSkillActiveStepTableProperty, UIActionRequestGroup) == 0x027C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, UIChargingVisibleType) == 0x0284);
static_assert(offsetof(FSBSkillActiveStepTableProperty, StepUIEvent) == 0x0285);
static_assert(offsetof(FSBSkillActiveStepTableProperty, DualSenseTriggerEffect) == 0x028C);
static_assert(offsetof(FSBSkillActiveStepTableProperty, DualSenseTriggerEffectParameters) == 0x0290);
static_assert(offsetof(FSBSkillActiveStepTableProperty, CheckValidMoveAliasArray) == 0x02A8);
static_assert(offsetof(FSBSkillActiveStepTableProperty, Loc_SystemNotice) == 0x02B8);
static_assert(offsetof(FSBSkillActiveStepTableProperty, TrainingRoomOverrideAcquisitionSkillAlias) == 0x02C8);
static_assert(offsetof(FSBSkillActiveStepTableProperty, TrainingRoomLogStringKey) == 0x02D0);
static_assert(offsetof(FSBSkillActiveStepTableProperty, ActionAssistTargetFilter) == 0x02E4);
static_assert(offsetof(FSBSkillActiveStepTableProperty, FileSuffix) == 0x02F8);
static_assert(offsetof(FSBSkillActiveStepTableProperty, StartSelfEffectArray) == 0x0300);
static_assert(offsetof(FSBSkillActiveStepTableProperty, StartTargetEffectArray) == 0x0310);
static_assert(offsetof(FSBSkillActiveStepTableProperty, CreateEffectSelfPositionArray) == 0x0320);
static_assert(offsetof(FSBSkillActiveStepTableProperty, CreateEffectTargetPositionArray) == 0x0330);
static_assert(offsetof(FSBSkillActiveStepTableProperty, TargetDeadEffectArray) == 0x0340);
static_assert(offsetof(FSBSkillActiveStepTableProperty, EndConditionArray) == 0x0350);
static_assert(offsetof(FSBSkillActiveStepTableProperty, AttackedCollisionGroupJsonArray) == 0x0360);
static_assert(offsetof(FSBSkillActiveStepTableProperty, AttackCollisionGroupJsonArray) == 0x0370);
static_assert(offsetof(FSBSkillActiveStepTableProperty, NextStepCheckEffectJsonArray) == 0x0380);
static_assert(offsetof(FSBShowKeyStep, StepProperty) == 0x0008);
static_assert(offsetof(USBShowData, Annotation) == 0x0038);
static_assert(offsetof(USBShowData, KeyContanerMap) == 0x0060);
static_assert(offsetof(USBShowData, ShowStepArray) == 0x00B0);
static_assert(offsetof(USBShowDeactiveParticleKey, MeshSlot) == 0x0058);
static_assert(offsetof(USBShowDeactiveParticleKey, SocketNameList) == 0x0060);
static_assert(offsetof(USBShowParticleBase, SocketName) == 0x0058);
static_assert(offsetof(USBShowParticleBase, RelativeLocationAxis) == 0x0071);
static_assert(offsetof(USBShowParticleBase, RelativeLocation) == 0x0074);
static_assert(offsetof(USBShowParticleBase, RelativeRotationAxis) == 0x0080);
static_assert(offsetof(USBShowParticleBase, RelativeRotation) == 0x0084);
static_assert(offsetof(USBShowParticleBase, Target) == 0x0096);
static_assert(offsetof(USBShowParticleBase, TargetEquipment) == 0x009D);
static_assert(offsetof(USBShowParticleBase, TargetComponentTag) == 0x00A0);
static_assert(offsetof(USBShowParticleBase, RelativeLocationXCurve) == 0x00B0);
static_assert(offsetof(USBShowParticleBase, RelativeLocationYCurve) == 0x0138);
static_assert(offsetof(USBShowParticleBase, RelativeLocationZCurve) == 0x01C0);
static_assert(offsetof(USBShowParticleBase, RelativeRotationXCurve) == 0x0250);
static_assert(offsetof(USBShowParticleBase, RelativeRotationYCurve) == 0x02D8);
static_assert(offsetof(USBShowParticleBase, RelativeRotationZCurve) == 0x0360);
static_assert(offsetof(USBShowParticleBase, ParticleScaleCurve) == 0x03F0);
static_assert(offsetof(USBShowParticleBase, RandomLocationMin) == 0x047C);
static_assert(offsetof(USBShowParticleBase, RandomLocationMax) == 0x0488);
static_assert(offsetof(FSBShowDecalParamCurve, ParamName) == 0x0000);
static_assert(offsetof(FSBShowDecalParamCurve, Curve) == 0x0008);
static_assert(offsetof(USBShowDecalKey, DecalMaterial) == 0x0498);
static_assert(offsetof(USBShowDecalKey, DecalSize) == 0x04B8);
static_assert(offsetof(USBShowDecalKey, Rotation) == 0x04D0);
static_assert(offsetof(USBShowDecalKey, RandomRotationOffsetMin) == 0x04E0);
static_assert(offsetof(USBShowDecalKey, RandomRotationOffsetMax) == 0x04EC);
static_assert(offsetof(USBShowDecalKey, ParamCurves) == 0x0500);
static_assert(offsetof(USBShowDecalKey, ScaleXCurve) == 0x0518);
static_assert(offsetof(USBShowDecalKey, ScaleYCurve) == 0x05A0);
static_assert(offsetof(USBShowDecalKey, ScaleZCurve) == 0x0628);
static_assert(offsetof(USBShowDecalKey, ApplyMeshSlotWhenTargetOnlyDecal) == 0x06B1);
static_assert(offsetof(FSBDepthOfFieldRuntimeFloatCurve, Curve) == 0x0008);
static_assert(offsetof(FSBPostProcessDepthOfFieldAdvanceData, DepthOfFieldBokehShape) == 0x0008);
static_assert(offsetof(FSBPostProcessDepthOfFieldData, DepthOfFieldMethod) == 0x0002);
static_assert(offsetof(FSBPostProcessDepthOfFieldData, DepthOfFieldFocalDistanceCurve) == 0x0008);
static_assert(offsetof(FSBPostProcessDepthOfFieldData, DepthOfFieldDepthBlurRadiusCurve) == 0x00A0);
static_assert(offsetof(FSBPostProcessDepthOfFieldData, DepthOfFieldFocalRegionCurve) == 0x0138);
static_assert(offsetof(FSBPostProcessDepthOfFieldData, DepthOfFieldScaleCurve) == 0x01D8);
static_assert(offsetof(FSBPostProcessDepthOfFieldData, DepthOfFieldNearBlurSizeCurve) == 0x0270);
static_assert(offsetof(FSBPostProcessDepthOfFieldData, DepthOfFieldFarBlurSizeCurve) == 0x0308);
static_assert(offsetof(FSBPostProcessDepthOfFieldData, AdvanceData) == 0x0398);
static_assert(offsetof(USBShowDepthOfFieldKey, DOFFocalDistanceType) == 0x005D);
static_assert(offsetof(USBShowDepthOfFieldKey, DOFData) == 0x0068);
static_assert(offsetof(USBShowDynamicPhysicBonesKey, PhysicHitType) == 0x0074);
static_assert(offsetof(FSBJsonEffectEndCondition, DeactiveShowPath) == 0x0008);
static_assert(offsetof(FSBJsonEffectEndCondition, ChainEffectAlias) == 0x0018);
static_assert(offsetof(FSBJsonEffectEndCondition, IsGround) == 0x0020);
static_assert(offsetof(FSBJsonEffectEndCondition, IsJump) == 0x0021);
static_assert(offsetof(FSBJsonEffectEndCondition, IsSwimming) == 0x0022);
static_assert(offsetof(FSBJsonEffectEndCondition, IsSprint) == 0x0023);
static_assert(offsetof(FSBJsonEffectEndCondition, IsWallHit) == 0x0024);
static_assert(offsetof(FSBJsonEffectEndCondition, IsEventMoving) == 0x0025);
static_assert(offsetof(FSBJsonEffectEndCondition, IsRunPathWay) == 0x0026);
static_assert(offsetof(FSBJsonEffectEndCondition, IsAttachedLevelSeq) == 0x0027);
static_assert(offsetof(FSBJsonEffectEndCondition, IsSlopeMoving) == 0x0028);
static_assert(offsetof(FSBJsonEffectEndCondition, CheckActorStat) == 0x0029);
static_assert(offsetof(FSBJsonEffectEndCondition, CheckActorStatCompare) == 0x002B);
static_assert(offsetof(FSBJsonEffectEndCondition, ItemAlias) == 0x0034);
static_assert(offsetof(FSBJsonEffectEndCondition, ItemCompare) == 0x003C);
static_assert(offsetof(FSBEffectTableProperty, Flag) == 0x0014);
static_assert(offsetof(FSBEffectTableProperty, DispelFlagsArray) == 0x0020);
static_assert(offsetof(FSBEffectTableProperty, Tags) == 0x0030);
static_assert(offsetof(FSBEffectTableProperty, OverrideTribe) == 0x0040);
static_assert(offsetof(FSBEffectTableProperty, EffectGroupName) == 0x0048);
static_assert(offsetof(FSBEffectTableProperty, EffectAttributeType) == 0x0050);
static_assert(offsetof(FSBEffectTableProperty, EffectAttackType) == 0x0051);
static_assert(offsetof(FSBEffectTableProperty, ConditionDelay_Jump) == 0x0052);
static_assert(offsetof(FSBEffectTableProperty, ConditionDelay_Swimming) == 0x0053);
static_assert(offsetof(FSBEffectTableProperty, ConditionDelay_Down) == 0x0054);
static_assert(offsetof(FSBEffectTableProperty, ConditionDelay_Airborne) == 0x0055);
static_assert(offsetof(FSBEffectTableProperty, ConditionDelay_KnockBack) == 0x0056);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_Swimming) == 0x005C);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_UnderWater) == 0x005D);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_Airborne) == 0x005E);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_Jump) == 0x005F);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_BattleMode) == 0x0060);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_TargetType) == 0x0061);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ActiveActorState1) == 0x0062);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ActiveActorState2) == 0x0063);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ActiveActorState3) == 0x0064);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_DeactiveActorState1) == 0x0065);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_DeactiveActorState2) == 0x0066);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_DeactiveActorState3) == 0x0067);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ActorType1) == 0x0068);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ActorType2) == 0x0069);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ActorType3) == 0x006A);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ActorStat1) == 0x006B);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ActorStatCheck1) == 0x006C);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_CheckEffectAliasArray) == 0x0080);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_CheckNoneEffectAliasArray) == 0x0090);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ConstructorActorAcquisitionAlias) == 0x00A0);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_DeactiveConstructorActorAcquisitionAlias) == 0x00A8);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_MainActorAcquisitionAlias) == 0x00B0);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_DeactiveMainActorAcquisitionAlias) == 0x00B8);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ActiveTribe) == 0x00C0);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_DeactiveTribe) == 0x00D0);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_CheckCharacterRankArray) == 0x00E0);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_CheckNoneCharacterRankArray) == 0x00F0);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_CheckCharacterFlagAliasArray) == 0x0100);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_CheckNoneCharacterFlagAliasArray) == 0x0110);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_CheckEffectSkillFlagArray) == 0x0120);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ConstructorEffectActiveTag) == 0x0130);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ConstructorEffectDeactiveTag) == 0x0140);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_SkillHitResult) == 0x0150);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_StoryMode) == 0x0151);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_EventMove) == 0x0152);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ItemAlias) == 0x0154);
static_assert(offsetof(FSBEffectTableProperty, ConditionActive_ItemCompare) == 0x015C);
static_assert(offsetof(FSBEffectTableProperty, StatType) == 0x0164);
static_assert(offsetof(FSBEffectTableProperty, StatSecondCategory) == 0x0168);
static_assert(offsetof(FSBEffectTableProperty, StatCalculationType) == 0x0170);
static_assert(offsetof(FSBEffectTableProperty, StatCalculationTarget) == 0x0171);
static_assert(offsetof(FSBEffectTableProperty, Overlap) == 0x0193);
static_assert(offsetof(FSBEffectTableProperty, LifeType) == 0x0198);
static_assert(offsetof(FSBEffectTableProperty, FixedTime) == 0x01A8);
static_assert(offsetof(FSBEffectTableProperty, ActiveTargetFilterAlias) == 0x01B8);
static_assert(offsetof(FSBEffectTableProperty, ActiveTargetEffectAliasArray) == 0x01C0);
static_assert(offsetof(FSBEffectTableProperty, ActiveTargetResultShowPath) == 0x01D0);
static_assert(offsetof(FSBEffectTableProperty, LoopTargetFilterAlias) == 0x01E4);
static_assert(offsetof(FSBEffectTableProperty, LoopTargetEffectAliasArray) == 0x01F0);
static_assert(offsetof(FSBEffectTableProperty, LoopTargetResultShowPath) == 0x0200);
static_assert(offsetof(FSBEffectTableProperty, FixedTargetFilterAlias) == 0x0214);
static_assert(offsetof(FSBEffectTableProperty, DeactiveTargetFilterAlias) == 0x021C);
static_assert(offsetof(FSBEffectTableProperty, DeactiveTargetEffectAliasArray) == 0x0228);
static_assert(offsetof(FSBEffectTableProperty, DeactiveTargetResultShowPath) == 0x0238);
static_assert(offsetof(FSBEffectTableProperty, ActiveShowPath) == 0x0250);
static_assert(offsetof(FSBEffectTableProperty, LoopShowPath) == 0x0260);
static_assert(offsetof(FSBEffectTableProperty, DeactiveShowPath) == 0x0270);
static_assert(offsetof(FSBEffectTableProperty, CollisionBPPath) == 0x0280);
static_assert(offsetof(FSBEffectTableProperty, ChainEffectAliasArray) == 0x0290);
static_assert(offsetof(FSBEffectTableProperty, TargetChainEffectAliasWhenZeroShieldArray) == 0x02A0);
static_assert(offsetof(FSBEffectTableProperty, StanceAlias) == 0x02B0);
static_assert(offsetof(FSBEffectTableProperty, ActiveAttackedCollisionGroupArray) == 0x02B8);
static_assert(offsetof(FSBEffectTableProperty, ActorState1) == 0x02C8);
static_assert(offsetof(FSBEffectTableProperty, ActorState2) == 0x02C9);
static_assert(offsetof(FSBEffectTableProperty, ActorState3) == 0x02CA);
static_assert(offsetof(FSBEffectTableProperty, ActorState4) == 0x02CB);
static_assert(offsetof(FSBEffectTableProperty, ActorState5) == 0x02CC);
static_assert(offsetof(FSBEffectTableProperty, ActorState6) == 0x02CD);
static_assert(offsetof(FSBEffectTableProperty, ActorState7) == 0x02CE);
static_assert(offsetof(FSBEffectTableProperty, ActorState8) == 0x02CF);
static_assert(offsetof(FSBEffectTableProperty, ActorState9) == 0x02D0);
static_assert(offsetof(FSBEffectTableProperty, ActorState10) == 0x02D1);
static_assert(offsetof(FSBEffectTableProperty, Action1) == 0x02FC);
static_assert(offsetof(FSBEffectTableProperty, ActionValue1) == 0x0300);
static_assert(offsetof(FSBEffectTableProperty, Action2) == 0x0310);
static_assert(offsetof(FSBEffectTableProperty, ActionValue2) == 0x0318);
static_assert(offsetof(FSBEffectTableProperty, Action3) == 0x0328);
static_assert(offsetof(FSBEffectTableProperty, ActionValue3) == 0x0330);
static_assert(offsetof(FSBEffectTableProperty, Action4) == 0x0340);
static_assert(offsetof(FSBEffectTableProperty, ActionValue4) == 0x0348);
static_assert(offsetof(FSBEffectTableProperty, Action5) == 0x0358);
static_assert(offsetof(FSBEffectTableProperty, ActionValue5) == 0x0360);
static_assert(offsetof(FSBEffectTableProperty, AttackedCollisionGroup) == 0x0370);
static_assert(offsetof(FSBEffectTableProperty, AttackedCollisionGroupResultType) == 0x0378);
static_assert(offsetof(FSBEffectTableProperty, ImmuneEffectGroupArray) == 0x0380);
static_assert(offsetof(FSBEffectTableProperty, MoveAlias) == 0x0390);
static_assert(offsetof(FSBEffectTableProperty, ConditionEnd1) == 0x03A0);
static_assert(offsetof(FSBEffectTableProperty, ConditionEnd2) == 0x03B0);
static_assert(offsetof(FSBEffectTableProperty, ConditionEnd3) == 0x03C0);
static_assert(offsetof(FSBEffectTableProperty, ConditionEnd4) == 0x03D0);
static_assert(offsetof(FSBEffectTableProperty, ConditionEnd5) == 0x03E0);
static_assert(offsetof(FSBEffectTableProperty, ActiveStanceAnimType) == 0x03F0);
static_assert(offsetof(FSBEffectTableProperty, WarpToSafeLocationEffectAlias) == 0x03F8);
static_assert(offsetof(FSBEffectTableProperty, TargetDeadType) == 0x0404);
static_assert(offsetof(FSBEffectTableProperty, ConditionChainType) == 0x0414);
static_assert(offsetof(FSBEffectTableProperty, ConditionChainSelfEffectAliasArray) == 0x0418);
static_assert(offsetof(FSBEffectTableProperty, ConditionChainTargetEffectAliasArray) == 0x0428);
static_assert(offsetof(FSBEffectTableProperty, CreateEffectStartPosition) == 0x0439);
static_assert(offsetof(FSBEffectTableProperty, CreateEffectRelativeLocation) == 0x0440);
static_assert(offsetof(FSBEffectTableProperty, CreateEffectLocationRandomRange) == 0x044C);
static_assert(offsetof(FSBEffectTableProperty, CreateEffectRelativeAxisType) == 0x0458);
static_assert(offsetof(FSBEffectTableProperty, CreateEffectRelativeRotation) == 0x045C);
static_assert(offsetof(FSBEffectTableProperty, CreateEffectRotationRandomRange) == 0x0468);
static_assert(offsetof(FSBEffectTableProperty, Loc_EffectTimeUIText) == 0x0478);
static_assert(offsetof(FSBEffectTableProperty, EffectUIType) == 0x0488);
static_assert(offsetof(FSBEffectTableProperty, ExpansionFromAcquisitionAlias1) == 0x048C);
static_assert(offsetof(FSBEffectTableProperty, ExpansionType1) == 0x0494);
static_assert(offsetof(FSBEffectTableProperty, ExpansionValue1) == 0x0498);
static_assert(offsetof(FSBEffectTableProperty, ExpansionFromAcquisitionAlias2) == 0x04A8);
static_assert(offsetof(FSBEffectTableProperty, ExpansionType2) == 0x04B0);
static_assert(offsetof(FSBEffectTableProperty, ExpansionValue2) == 0x04B8);
static_assert(offsetof(FSBEffectTableProperty, ExpansionFromAcquisitionAlias3) == 0x04C8);
static_assert(offsetof(FSBEffectTableProperty, ExpansionType3) == 0x04D0);
static_assert(offsetof(FSBEffectTableProperty, ExpansionValue3) == 0x04D8);
static_assert(offsetof(FSBEffectTableProperty, ExpansionFromAcquisitionAlias4) == 0x04E8);
static_assert(offsetof(FSBEffectTableProperty, ExpansionType4) == 0x04F0);
static_assert(offsetof(FSBEffectTableProperty, ExpansionValue4) == 0x04F8);
static_assert(offsetof(FSBEffectTableProperty, ExpansionFromAcquisitionAlias5) == 0x0508);
static_assert(offsetof(FSBEffectTableProperty, ExpansionType5) == 0x0510);
static_assert(offsetof(FSBEffectTableProperty, ExpansionValue5) == 0x0518);
static_assert(offsetof(FSBEffectTableProperty, ShowKeyTag) == 0x0528);
static_assert(offsetof(FSBEffectTableProperty, ElementTargetFilterAlias) == 0x0534);
static_assert(offsetof(FSBEffectTableProperty, ElementType) == 0x053C);
static_assert(offsetof(FSBEffectTableProperty, ActiveProjectileTargetFilterAlias) == 0x054C);
static_assert(offsetof(FSBEffectTableProperty, ActiveProjectileAlias) == 0x0554);
static_assert(offsetof(FSBEffectTableProperty, ActionAssistTargetFilter) == 0x0560);
static_assert(offsetof(FSBEffectTableProperty, FileSuffix) == 0x0570);
static_assert(offsetof(FSBEffectTableProperty, EndConditionArray) == 0x0578);
static_assert(offsetof(USBShowEffectKey, EffectAlias) == 0x0058);
static_assert(offsetof(USBShowEffectKey, CreateEffectAlias) == 0x0070);
static_assert(offsetof(USBShowEffectKey, TableFieldType) == 0x0078);
static_assert(offsetof(USBShowEffectKey, EffectTableProperty) == 0x0080);
static_assert(offsetof(USBShowForceFeedbackKey, ForceFeedbackTemplate) == 0x0058);
static_assert(offsetof(USBShowHitReactionKey, FrontAnimResourcePath) == 0x0058);
static_assert(offsetof(USBShowHitReactionKey, BackAnimResourcePath) == 0x0068);
static_assert(offsetof(USBShowHitReactionKey, LeftAnimResourcePath) == 0x0078);
static_assert(offsetof(USBShowHitReactionKey, RightAnimResourcePath) == 0x0088);
static_assert(offsetof(USBShowMaterialChangeKey, pMaterialArray) == 0x0060);
static_assert(offsetof(USBShowMaterialChangeKey, pMaterial) == 0x0070);
static_assert(offsetof(USBShowMaterialChangeKey, ApplyMeshIndex) == 0x0078);
static_assert(offsetof(USBShowMaterialChangeKey, Target) == 0x0098);
static_assert(offsetof(USBShowMaterialCollectionParamKey, MaterialParameterCollection) == 0x0058);
static_assert(offsetof(USBShowMaterialCollectionParamKey, PlayerCharacterCheckTarget) == 0x0060);
static_assert(offsetof(USBShowMaterialCollectionParamKey, ParamValue1) == 0x0068);
static_assert(offsetof(USBShowMaterialCollectionParamKey, ParamValue2) == 0x00F0);
static_assert(offsetof(USBShowMaterialCollectionParamKey, ParamValue3) == 0x0178);
static_assert(offsetof(USBShowMaterialCollectionParamKey, ParamValueName) == 0x0200);
static_assert(offsetof(USBShowMaterialCollectionParamKey, ParamType) == 0x0208);
static_assert(offsetof(USBShowMaterialParamKey, ParamValue1) == 0x0060);
static_assert(offsetof(USBShowMaterialParamKey, ParamValue2) == 0x00E8);
static_assert(offsetof(USBShowMaterialParamKey, ParamValue3) == 0x0170);
static_assert(offsetof(USBShowMaterialParamKey, ParamValueName) == 0x01F8);
static_assert(offsetof(USBShowMaterialParamKey, ParamType) == 0x0200);
static_assert(offsetof(USBShowMaterialParamKey, ApplyMeshIndex) == 0x0202);
static_assert(offsetof(USBShowMaterialParamKey, ApplyMaterialIndex) == 0x0218);
static_assert(offsetof(USBShowMaterialParamKey, Target) == 0x022E);
static_assert(offsetof(USBShowMaterialParamKey, TargetEquipment) == 0x0235);
static_assert(offsetof(USBShowMovementBoneKey, ModifyBoneName) == 0x0058);
static_assert(offsetof(USBShowMovementBoneKey, TargetBoneName) == 0x0060);
static_assert(offsetof(USBShowMovementBoneKey, OwnerMeshSlot) == 0x0068);
static_assert(offsetof(USBShowMovementBoneKey, TargetMeshSlot) == 0x0069);
static_assert(offsetof(USBShowMovementBoneKey, InterpolationType) == 0x006A);
static_assert(offsetof(USBShowMovementBoneKey, CurveType) == 0x006B);
static_assert(offsetof(USBShowMovementBoneKey, SplineComponent) == 0x0078);
static_assert(offsetof(USBShowNiagaraKey, NiagaraTemplate) == 0x0498);
static_assert(offsetof(USBShowNotifyEventKey, StartEventTagName) == 0x0058);
static_assert(offsetof(USBShowNotifyEventKey, StartEventCustomNameValue) == 0x0060);
static_assert(offsetof(USBShowNotifyEventKey, EndEventTagName) == 0x0068);
static_assert(offsetof(USBShowNotifyEventKey, EndEventCustomNameValue) == 0x0070);
static_assert(offsetof(USBShowNotifyEventKey, Target) == 0x0078);
static_assert(offsetof(FSBShowParticleDynamicInstanceParameter, ParamName) == 0x0000);
static_assert(offsetof(FSBShowParticleDynamicInstanceParameter, Type) == 0x0008);
static_assert(offsetof(FSBShowParticleDynamicInstanceParameter, Curve1) == 0x0010);
static_assert(offsetof(FSBShowParticleDynamicInstanceParameter, Curve2) == 0x0098);
static_assert(offsetof(FSBShowParticleDynamicInstanceParameter, Curve3) == 0x0120);
static_assert(offsetof(FSBShowParticleDynamicInstanceParameter, TargetActor) == 0x01A8);
static_assert(offsetof(FSBShowParticleDynamicInstanceParameter, TargetEquipment) == 0x01B1);
static_assert(offsetof(FSBShowParticleDynamicInstanceParameter, SocketName) == 0x01B4);
static_assert(offsetof(USBShowParticleKey, NiagaraSystem) == 0x0498);
static_assert(offsetof(USBShowParticleKey, ParticleSystemPath) == 0x0500);
static_assert(offsetof(USBShowParticleKey, StageParticleName) == 0x0524);
static_assert(offsetof(USBShowParticleKey, CharacterParticleSetKey) == 0x0530);
static_assert(offsetof(USBShowParticleKey, TargetForCharacterPaticle) == 0x0539);
static_assert(offsetof(USBShowParticleKey, ExtraParticleSocketName) == 0x0540);
static_assert(offsetof(USBShowParticleKey, PhysCheckDirectionType) == 0x0553);
static_assert(offsetof(USBShowParticleKey, PhysParticleSet) == 0x0560);
static_assert(offsetof(USBShowParticleKey, TargetForVibration) == 0x056B);
static_assert(offsetof(USBShowParticleKey, TargetForSoundOwner) == 0x0570);
static_assert(offsetof(USBShowParticleKey, InstanceParameters) == 0x0588);
static_assert(offsetof(USBShowParticleKey, ActorParameterName) == 0x059C);
static_assert(offsetof(USBShowParticleKey, DynamicInstanceParameters) == 0x05A8);
static_assert(offsetof(USBShowParticleKey, PhotoModeShowHiddenFlag) == 0x05BC);
static_assert(offsetof(ASBShowPlayableActor, Root) == 0x02D0);
static_assert(offsetof(ASBShowPlayableActor, MeshBody) == 0x02D8);
static_assert(offsetof(ASBShowPlayableActor, BodyCustomAnimNodeName) == 0x02E0);
static_assert(offsetof(USBShowPlayShowKey, ShowData) == 0x0058);
static_assert(offsetof(USBShowPlayShowKey, Target) == 0x0060);
static_assert(offsetof(USBShowPlayShowKey, ShowResourcePath) == 0x0068);
static_assert(offsetof(USBShowPlayShowKey, ShowResourcePathWhenFailedRelativeShow) == 0x0078);
static_assert(offsetof(USBShowPlayTheaterKey, TheaterData) == 0x0058);
static_assert(offsetof(USBShowPlayTheaterKey, TheaterAssetPath) == 0x0060);
static_assert(offsetof(USBShowPoseSnapshotKey, PoseSnapBlendWeightCurve) == 0x0068);
static_assert(offsetof(USBShowPostProcessKey, PostProcessSettings) == 0x0070);
static_assert(offsetof(FSBShowMaterialParamCurve, ParamName) == 0x0000);
static_assert(offsetof(FSBShowMaterialParamCurve, Curve) == 0x0010);
static_assert(offsetof(USBShowPostProcessMaterialKey, CustomMaterialTag) == 0x0064);
static_assert(offsetof(USBShowPostProcessMaterialKey, PostProcessMaterials) == 0x0070);
static_assert(offsetof(USBShowPostProcessMaterialKey, BlendWeightCurve) == 0x0088);
static_assert(offsetof(USBShowPostProcessMaterialKey, MaterialParamCurves) == 0x0110);
static_assert(offsetof(USBShowProjectileKey, TableAlias) == 0x0060);
static_assert(offsetof(USBShowProjectileKey, ProjectileResourcePath) == 0x0070);
static_assert(offsetof(USBShowProjectileKey, StartTarget) == 0x0080);
static_assert(offsetof(USBShowProjectileKey, StartTargetUpdate) == 0x0081);
static_assert(offsetof(USBShowProjectileKey, StartTargetTransformType) == 0x0082);
static_assert(offsetof(USBShowProjectileKey, StartTargetTransformName) == 0x0084);
static_assert(offsetof(USBShowProjectileKey, StartTargetRelativeLocation) == 0x0090);
static_assert(offsetof(USBShowProjectileKey, StartTargetRelativeRotation) == 0x009C);
static_assert(offsetof(USBShowProjectileKey, StartTargetRelativeAxisType) == 0x00A8);
static_assert(offsetof(USBShowProjectileKey, DestTarget) == 0x00A9);
static_assert(offsetof(USBShowProjectileKey, DestTargetUpdate) == 0x00AA);
static_assert(offsetof(USBShowProjectileKey, DestTargetTransformType) == 0x00AB);
static_assert(offsetof(USBShowProjectileKey, DestTargetTransformName) == 0x00AC);
static_assert(offsetof(USBShowProjectileKey, DestTargetRandomRange) == 0x00B4);
static_assert(offsetof(USBShowProjectileKey, DestTargetRelativeLocation) == 0x00C0);
static_assert(offsetof(USBShowProjectileKey, DestTargetRelativeLocationCurve) == 0x00D0);
static_assert(offsetof(USBShowProjectileKey, DestTargetRelativeLocationScaleCurve) == 0x00D8);
static_assert(offsetof(USBShowProjectileKey, DestTargetRelativeAxisType) == 0x00E0);
static_assert(offsetof(USBShowProjectileKey, MovementType) == 0x00E2);
static_assert(offsetof(USBShowProjectileKey, UpdateInfo) == 0x00E8);
static_assert(offsetof(USBShowRadialForceKey, RegisterKey) == 0x005C);
static_assert(offsetof(USBShowRadialForceKey, LocationBaseTarget) == 0x0064);
static_assert(offsetof(USBShowRadialForceKey, RelativeLocation) == 0x006C);
static_assert(offsetof(USBShowRadialForceKey, Falloff) == 0x007C);
static_assert(offsetof(USBShowRagdollKey, BoneName) == 0x0058);
static_assert(offsetof(USBShowRagdollKey, LockBodyLocationType) == 0x0060);
static_assert(offsetof(USBShowRagdollKey, CapsuleComponentFollowingSocketName) == 0x0070);
static_assert(offsetof(USBShowRagdollKey, MassScaleCurve) == 0x0078);
static_assert(offsetof(USBShowRagdollKey, ImpulseBoneName) == 0x0110);
static_assert(offsetof(USBShowRagdollKey, DirectionType) == 0x011C);
static_assert(offsetof(USBShowRagdollKey, AdditiveDirectionType) == 0x0125);
static_assert(offsetof(USBShowRagdollKey, ImpulseDirection) == 0x0128);
static_assert(offsetof(USBShowRagdollKey, ForceBoneArray) == 0x0140);
static_assert(offsetof(USBShowRagdollKey, Force) == 0x0150);
static_assert(offsetof(USBShowRagdollKey, ForceScaleCurve) == 0x0160);
static_assert(offsetof(USBShowRagdollKey, Target) == 0x01E8);
static_assert(offsetof(USBShowRootMotionKey, RootMotionPath) == 0x0058);
static_assert(offsetof(USBShowRootMotionKey, Target) == 0x006C);
static_assert(offsetof(USBShowRootMotionKey, TranslationCurve) == 0x0078);
static_assert(offsetof(USBShowRootMotionKey, RotationCurve) == 0x0080);
static_assert(offsetof(FSBCharacterMoveTableProperty, TargetFilterAlias) == 0x0018);
static_assert(offsetof(FSBCharacterMoveTableProperty, RootMotionDataPath) == 0x0024);
static_assert(offsetof(FSBCharacterMoveTableProperty, MoveType) == 0x003A);
static_assert(offsetof(FSBCharacterMoveTableProperty, PositionType) == 0x003B);
static_assert(offsetof(FSBCharacterMoveTableProperty, PositionInterpType) == 0x003C);
static_assert(offsetof(FSBCharacterMoveTableProperty, PositionInterpCurveDataPath) == 0x0040);
static_assert(offsetof(FSBCharacterMoveTableProperty, StaticMoveZVAlueCurveDataPath) == 0x004C);
static_assert(offsetof(FSBCharacterMoveTableProperty, MoveOffsetCurveDataPath) == 0x0058);
static_assert(offsetof(FSBCharacterMoveTableProperty, PositionDirectionAxis) == 0x0060);
static_assert(offsetof(FSBCharacterMoveTableProperty, LinkSocketName) == 0x0064);
static_assert(offsetof(FSBCharacterMoveTableProperty, DefaultInputDirection) == 0x006C);
static_assert(offsetof(FSBCharacterMoveTableProperty, RotationType) == 0x00BC);
static_assert(offsetof(FSBCharacterMoveTableProperty, RotationDirectionType) == 0x00BD);
static_assert(offsetof(FSBCharacterMoveTableProperty, RotationInterpCurveDataPath) == 0x00C0);
static_assert(offsetof(FSBCharacterMoveTableProperty, CollisionCheckBoneNameWhenLinkFrom) == 0x00D0);
static_assert(offsetof(FSBCharacterMoveTableProperty, RuleMoveBlockAreaApplyToTarget) == 0x00F6);
static_assert(offsetof(FSBCharacterMoveTableProperty, ConditionEnd_UnderWater) == 0x0112);
static_assert(offsetof(FSBCharacterMoveTableProperty, ConditionEnd_Swimming) == 0x0113);
static_assert(offsetof(FSBCharacterMoveTableProperty, PathWay) == 0x0118);
static_assert(offsetof(FSBCharacterMoveTableProperty, FileSuffix) == 0x0128);
static_assert(offsetof(USBShowRuleMoveKey, TableAlias) == 0x0058);
static_assert(offsetof(USBShowRuleMoveKey, Target) == 0x0070);
static_assert(offsetof(USBShowRuleMoveKey, MoveTableProperty) == 0x0078);
static_assert(offsetof(USBShowSetAIDecoratorKey, SetVarType) == 0x0058);
static_assert(offsetof(USBShowSetAIDecoratorKey, VarKey) == 0x005C);
static_assert(offsetof(USBShowSetAIDecoratorKey, VectorVar) == 0x0070);
static_assert(offsetof(USBShowSetAIDecoratorKey, SetEnd_VectorVar) == 0x008C);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfCommonEffect) == 0x0018);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetCommonEffect) == 0x0028);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetCommonEffect) == 0x0038);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfCommonShowPath) == 0x0048);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetCommonShowPath) == 0x0058);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetCommonMoveAlias) == 0x0068);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetCommonMoveAlias) == 0x0070);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfDownEffect) == 0x0078);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetDownEffect) == 0x0088);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetDownEffect) == 0x0098);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfDownShowPath) == 0x00A8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetDownShowPath) == 0x00B8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetDownMoveAlias) == 0x00C8);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetDownMoveAlias) == 0x00D0);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfGroggyEffect) == 0x00D8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetGroggyEffect) == 0x00E8);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetGroggyEffect) == 0x00F8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfGroggyShowPath) == 0x0108);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetGroggyShowPath) == 0x0118);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetGroggyMoveAlias) == 0x0128);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetGroggyMoveAlias) == 0x0130);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfAirborneEffect) == 0x0138);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetAirborneEffect) == 0x0148);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetAirborneEffect) == 0x0158);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfAirborneShowPath) == 0x0168);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetAirborneShowPath) == 0x0178);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetAirborneMoveAlias) == 0x0188);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetAirborneMoveAlias) == 0x0190);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfAirEffect) == 0x0198);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetAirEffect) == 0x01A8);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetAirEffect) == 0x01B8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfAirShowPath) == 0x01C8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetAirShowPath) == 0x01D8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetAirMoveAlias) == 0x01E8);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetAirMoveAlias) == 0x01F0);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfSwimmingEffect) == 0x01F8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetSwimmingEffect) == 0x0208);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetSwimmingEffect) == 0x0218);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfSwimmingShowPath) == 0x0228);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetSwimmingShowPath) == 0x0238);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetSwimmingMoveAlias) == 0x0248);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetSwimmingMoveAlias) == 0x0250);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfCriticalEffect) == 0x0258);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetCriticalEffect) == 0x0268);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfCriticalShowPath) == 0x0278);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetCriticalShowPath) == 0x0288);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfWeakpointHitEffect) == 0x0298);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetWeakpointHitEffect) == 0x02A8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfEventMovingEffect) == 0x02B8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetEventMovingEffect) == 0x02C8);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetEventMovingEffect) == 0x02D8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfEventMovingShowPath) == 0x02E8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetEventMovingShowPath) == 0x02F8);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetEventMovingMoveAlias) == 0x0308);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetEventMovingMoveAlias) == 0x0310);
static_assert(offsetof(FSBSkillResultTableProperty, FileSuffix) == 0x0318);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfCommonEffectArray) == 0x0320);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfDownEffectArray) == 0x0330);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfGroggyEffectArray) == 0x0340);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfAirborneEffectArray) == 0x0350);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfAirEffectArray) == 0x0360);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfSwimmingEffectArray) == 0x0370);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfEventMovingEffectArray) == 0x0380);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfCriticalEffectArray) == 0x0390);
static_assert(offsetof(FSBSkillResultTableProperty, ResultSelfWeakpointHitEffectArray) == 0x03A0);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetCommonEffectArray) == 0x03B0);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetDownEffectArray) == 0x03C0);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetGroggyEffectArray) == 0x03D0);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetAirborneEffectArray) == 0x03E0);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetAirEffectArray) == 0x03F0);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetSwimmingEffectArray) == 0x0400);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetEventMovingEffectArray) == 0x0410);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetCriticalEffectArray) == 0x0420);
static_assert(offsetof(FSBSkillResultTableProperty, ResultTargetWeakpointHitEffectArray) == 0x0430);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetCommonEffectArray) == 0x0440);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetDownEffectArray) == 0x0450);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetGroggyEffectArray) == 0x0460);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetAirborneEffectArray) == 0x0470);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetAirEffectArray) == 0x0480);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetSwimmingEffectArray) == 0x0490);
static_assert(offsetof(FSBSkillResultTableProperty, HitLevelResultTargetEventMovingEffectArray) == 0x04A0);
static_assert(offsetof(USBShowSkillResultKey, SkillResultAlias) == 0x0058);
static_assert(offsetof(USBShowSkillResultKey, TableFieldType) == 0x0070);
static_assert(offsetof(USBShowSkillResultKey, SkillResultTableProperty) == 0x0078);
static_assert(offsetof(USBShowSoundAdjusterKey, SoundVolumeChannel) == 0x0058);
static_assert(offsetof(USBShowSoundAmbientControlKey, AmbientSoundVolumeName) == 0x0058);
static_assert(offsetof(USBShowSoundAmbientControlKey, ControlType) == 0x0060);
static_assert(offsetof(USBShowSoundBGMPriorityKey, BGMVolumeName) == 0x0058);
static_assert(offsetof(USBShowSoundEventKey, SoundEventAlias) == 0x0058);
static_assert(offsetof(FSBShowVectorCurve, XCurve) == 0x0008);
static_assert(offsetof(FSBShowVectorCurve, YCurve) == 0x0090);
static_assert(offsetof(FSBShowVectorCurve, ZCurve) == 0x0118);
static_assert(offsetof(USBShowSoundKey, Sound) == 0x0058);
static_assert(offsetof(USBShowSoundKey, SoundSoftObject) == 0x0060);
static_assert(offsetof(USBShowSoundKey, TargetForSoundOwner) == 0x0090);
static_assert(offsetof(USBShowSoundKey, SubscribeSoundParam) == 0x0098);
static_assert(offsetof(USBShowSoundKey, SoundClassOverride) == 0x00A8);
static_assert(offsetof(USBShowSoundKey, AttenuationOverride) == 0x00B0);
static_assert(offsetof(USBShowSoundKey, AttachName) == 0x00C8);
static_assert(offsetof(USBShowSoundKey, SocketName) == 0x00D8);
static_assert(offsetof(USBShowSoundKey, RelativeLocationAxis) == 0x00E0);
static_assert(offsetof(USBShowSoundKey, RelativeLocation) == 0x00E4);
static_assert(offsetof(USBShowSoundKey, Target) == 0x00F0);
static_assert(offsetof(USBShowSoundKey, TargetEquipment) == 0x00F9);
static_assert(offsetof(USBShowSoundKey, CharacterParticleSetKey) == 0x00FC);
static_assert(offsetof(USBShowSoundKey, TargetForCharacterParticle) == 0x0104);
static_assert(offsetof(USBShowSoundKey, RelativeLocationCurve) == 0x0110);
static_assert(offsetof(USBShowCharSESoundKey, CharacterVoiceKey) == 0x02B0);
static_assert(offsetof(USBShowCharSESoundKey, CharacterReactKey) == 0x02B8);
static_assert(offsetof(USBShowCharSESoundKey, CharacterHitKey) == 0x02C0);
static_assert(offsetof(USBShowCharSESoundKey, CharacterHitType) == 0x02C8);
static_assert(offsetof(USBShowCharSESoundKey, SoundConditionKey) == 0x02CC);
static_assert(offsetof(USBShowCharSESoundKey, TargetForCharacterVoice) == 0x02D4);
static_assert(offsetof(USBShowCharSESoundKey, SESoundAttachType) == 0x02DC);
static_assert(offsetof(USBShowTrailKey, PSTemplate) == 0x0058);
static_assert(offsetof(USBShowTrailKey, FirstSocketName) == 0x0060);
static_assert(offsetof(USBShowTrailKey, SecondSocketName) == 0x0068);
static_assert(offsetof(USBShowTrailKey, MoreSocketNames) == 0x0070);
static_assert(offsetof(USBShowTrailKey, WidthScaleMode) == 0x0080);
static_assert(offsetof(USBShowTrailKey, WidthScaleCurve) == 0x0084);
static_assert(offsetof(USBShowTrailKey, Target) == 0x008E);
static_assert(offsetof(USBShowTrailKey, TargetEquipment) == 0x0095);
static_assert(offsetof(USBShowTrailKey, AttachUniqueName) == 0x0098);
static_assert(offsetof(USBShowUIStudioSequenceKey, ActionType) == 0x0058);
static_assert(offsetof(USBShowUIStudioSequenceKey, SequenceTag) == 0x005C);
static_assert(offsetof(FSBShowHapticProperty, AttachName) == 0x0010);
static_assert(offsetof(FSBShowHapticProperty, SubscribeSoundParam) == 0x0018);
static_assert(offsetof(FSBShowHapticProperty, AttenuationOverride) == 0x0028);
static_assert(offsetof(FSBShowForceFeedbackProperty, AttenuationOverride) == 0x0008);
static_assert(offsetof(USBShowVibrationKey, VibrationSet) == 0x0058);
static_assert(offsetof(USBShowVibrationKey, PlayTarget) == 0x0060);
static_assert(offsetof(USBShowVibrationKey, HapticProperty) == 0x0068);
static_assert(offsetof(USBShowVibrationKey, ForceFeedbackProperty) == 0x0098);
static_assert(offsetof(USBShowVisibilityKey, MeshSlot) == 0x0059);
static_assert(offsetof(USBShowWindVolumeKey, Target) == 0x0058);
static_assert(offsetof(USBShowWindVolumeKey, Strength) == 0x0070);
static_assert(offsetof(USBShowWindVolumeKey, DirectionType) == 0x00A8);
static_assert(offsetof(USBShowWindVolumeKey, Direction) == 0x00AC);
static_assert(offsetof(USBShowWindVolumeKey, Bound) == 0x00D4);
static_assert(offsetof(USBShowWorldMatineeKey, PlayMatineeActorTagName) == 0x0058);
static_assert(offsetof(ASBSignificanceDebugActor, DummyRoot) == 0x02C8);
static_assert(offsetof(ASBSignificanceDebugActor, TextRenderComponent) == 0x02D0);
static_assert(offsetof(ASBSignificanceDebugActor, PendingText) == 0x02D8);
static_assert(offsetof(ASBSignificanceDebugActor, PendingLocation) == 0x02E8);
static_assert(offsetof(ASBSignificanceDebugActor, PendingRotation) == 0x02F4);
static_assert(offsetof(ASBSignificanceDebugActor, PendingScale) == 0x0300);
static_assert(offsetof(ASBSignificanceDebugActor, PendingColor) == 0x030C);
static_assert(offsetof(USBSingleSoundData, SoundWave) == 0x0030);
static_assert(offsetof(USBSingleSoundData, TransitType) == 0x0038);
static_assert(offsetof(USBSingleSoundData, OverrideSound) == 0x0050);
static_assert(offsetof(USBSingleSoundComponent, SingleSoundData) == 0x0260);
static_assert(offsetof(USBSingleSoundComponent, AttenuationSettings) == 0x0270);
static_assert(offsetof(FMaterialDefaultInfo, ParamType) == 0x0004);
static_assert(offsetof(FMaterialDefaultInfo, ParamInfo) == 0x0008);
static_assert(offsetof(FMaterialDefaultInfo, Value) == 0x0018);
static_assert(offsetof(FVertexShakeInfo, ShakeHitPosition) == 0x0000);
static_assert(offsetof(FVertexShakeInfo, ShakeHitDirection) == 0x000C);
static_assert(offsetof(FBoneAnimScaleIgnoreInfo, IgnoreBoneMap) == 0x0000);
static_assert(offsetof(USBSkeletalMeshComponent, LastKeepAllBodiesBoneLocation) == 0x12F0);
static_assert(offsetof(USBSkeletalMeshComponent, LastKeepAllBodiesBoneQuat) == 0x1300);
static_assert(offsetof(USBSkeletalMeshComponent, HistoryResetPhysVelocty) == 0x1310);
static_assert(offsetof(USBSkeletalMeshComponent, HistoryResetPhysDegree) == 0x1320);
static_assert(offsetof(USBSkeletalMeshComponent, MeshSlot) == 0x133C);
static_assert(offsetof(USBSkeletalMeshComponent, MeshSlotAttachType) == 0x133D);
static_assert(offsetof(USBSkeletalMeshComponent, MaterialParamDefaultValue) == 0x1340);
static_assert(offsetof(USBSkeletalMeshComponent, DynamicPhysicControlBones) == 0x1350);
static_assert(offsetof(USBSkeletalMeshComponent, DynamicPhysicExclusiveBones) == 0x1360);
static_assert(offsetof(USBSkeletalMeshComponent, CustomAnimStateName) == 0x1370);
static_assert(offsetof(USBSkeletalMeshComponent, SBSkeletalMeshTag) == 0x1380);
static_assert(offsetof(USBSkeletalMeshComponent, AdditiveBoundsBoxExtent) == 0x1390);
static_assert(offsetof(USBSkeletalMeshComponent, IKTargetInfoMap) == 0x13A8);
static_assert(offsetof(USBSkeletalMeshComponent, DurationIKDataList) == 0x13F8);
static_assert(offsetof(USBSkeletalMeshComponent, PhysicalHitForceVector) == 0x1424);
static_assert(offsetof(USBSkeletalMeshComponent, PhysicalHitForceTargetBone) == 0x1430);
static_assert(offsetof(USBSkeletalMeshComponent, PhysicalHitForceLocation) == 0x1438);
static_assert(offsetof(USBSkeletalMeshComponent, PhysicalHitType) == 0x1448);
static_assert(offsetof(USBSkeletalMeshComponent, VertexShakeInfo) == 0x144C);
static_assert(offsetof(USBSkeletalMeshComponent, BoneAnimScaleIgnoreInfo) == 0x1478);
static_assert(offsetof(USBSkeletalMeshComponent, RestoreAttachBoneName) == 0x14E0);
static_assert(offsetof(USBSkeletalMeshComponent, RestoreAttachComponent) == 0x14E8);
static_assert(offsetof(USBSkeletalMeshComponent, MovementBoneDataList) == 0x14F0);
static_assert(offsetof(USBSkeletalMeshComponent, RelativeBlendOffset) == 0x1510);
static_assert(offsetof(USBSkeletalMeshComponent, BackupRelativeLocation) == 0x151C);
static_assert(offsetof(FSBSkillNavigationPath, SkillTreeSlotName) == 0x0000);
static_assert(offsetof(FSBSkillNavigationPath, SkillSlotName) == 0x0008);
static_assert(offsetof(USBSkillSlotBase, SubNavigationInfo) == 0x0680);
static_assert(offsetof(USBSkillSlotBase, SubNavigationInfo2) == 0x06D0);
static_assert(offsetof(USBSkillSlotBase, SubNavigationInfo3) == 0x0720);
static_assert(offsetof(USBSkillSlotBase, SubNavigationInfo4) == 0x0770);
static_assert(offsetof(USBSkillSlotBase, SubNavigationInfo5) == 0x07C0);
static_assert(offsetof(FSBSkillSlotBases, Array) == 0x0000);
static_assert(offsetof(FSBSkillSlotLines, Array) == 0x0000);
static_assert(offsetof(FSBSkillSlotRequiredInfo, SlotArray) == 0x0000);
static_assert(offsetof(FSBSkillSlotRequiredInfo, LineArray) == 0x0010);
static_assert(offsetof(USBSkillTreeBase, SkillCategory) == 0x0680);
static_assert(offsetof(USBSkillTreeBase, SkillSlotPanel) == 0x0688);
static_assert(offsetof(USBSkillTreeBase, SkillLinePanel) == 0x0690);
static_assert(offsetof(USBSkillTreeBase, SkillTreeType) == 0x0698);
static_assert(offsetof(USBSkillTreeBase, UnlockAnimationType) == 0x069C);
static_assert(offsetof(USBSkillTreeBase, NewGamePlusUnlockAnimationType) == 0x06A0);
static_assert(offsetof(USBSkillTreeBase, SlotFocusChangedSound) == 0x06A8);
static_assert(offsetof(USBSkillTreeBase, SkillSlotMap) == 0x06B0);
static_assert(offsetof(USBSkillTreeBase, SkillLineMap) == 0x0700);
static_assert(offsetof(USBSkillTreeBase, RequiredInfoMap) == 0x0750);
static_assert(offsetof(USBSkillTreeBase, SkillTreeAlias) == 0x07A0);
static_assert(offsetof(FSBSliceSkeletalMeshHeader, PathName) == 0x0008);
static_assert(offsetof(FSBSliceSkeletalMeshTriangle, VertexType) == 0x0008);
static_assert(offsetof(FSBSliceSkeletalMeshSection, Triangles) == 0x0008);
static_assert(offsetof(FSBSliceSkeletalMeshBone, BoneName) == 0x0000);
static_assert(offsetof(FSBSliceSkeletalMeshBone, Sections) == 0x0008);
static_assert(offsetof(FSBSliceSkeletalMeshLOD, Bones) == 0x0010);
static_assert(offsetof(USBSliceSkeletalMeshDataAsset, Header) == 0x0030);
static_assert(offsetof(USBSliceSkeletalMeshDataAsset, LODMeshs) == 0x0048);
static_assert(offsetof(FSBSliceSkeletalMeshTemplateData, BoneName) == 0x0000);
static_assert(offsetof(FSBSliceSkeletalMeshTemplateData, OverrideCapMaterial) == 0x0010);
static_assert(offsetof(USBSliceSkeletalMeshTemplateDataAsset, CapMaterial) == 0x0030);
static_assert(offsetof(USBSliceSkeletalMeshTemplateDataAsset, SliceableBones) == 0x0040);
static_assert(offsetof(FSBSoundPCMData, Data) == 0x0000);
static_assert(offsetof(USBSoundConcatenation, ByCreatedSoundAsset) == 0x03D8);
static_assert(offsetof(USBSoundConcatenation, SoundArray) == 0x03F0);
static_assert(offsetof(USBSoundConcatenation, PCMDataArray) == 0x0400);
static_assert(offsetof(USBSoundProceduralAsset, SoundGroup) == 0x0030);
static_assert(offsetof(USBSoundProceduralAsset, SoundClassObject) == 0x0038);
static_assert(offsetof(USBSoundProceduralAsset, VirtualizationMode) == 0x0040);
static_assert(offsetof(USBSoundConcatenationAsset, SoundArray) == 0x0048);
static_assert(offsetof(USBSoundConcatenationAsset, PCMDataArray) == 0x0058);
static_assert(offsetof(USBSoundDebuggerWidget, SoundFixedLogRoot) == 0x0680);
static_assert(offsetof(USBSoundDebuggerWidget, FixedEventLog_ListView) == 0x0688);
static_assert(offsetof(USBSoundDebuggerWidget, SoundEventLogRoot) == 0x0690);
static_assert(offsetof(USBSoundDebuggerWidget, EventLogCategory_ListView) == 0x0698);
static_assert(offsetof(USBSoundDebuggerWidget, EventLogDescription_ListView) == 0x06A0);
static_assert(offsetof(USBSoundDebuggerWidget, WorldLogRoot) == 0x06A8);
static_assert(offsetof(USBSoundDebuggerWidget, WorldLog1) == 0x06B0);
static_assert(offsetof(USBSoundDebuggerWidget, WorldLog2) == 0x06B8);
static_assert(offsetof(USBSoundDebuggerWidget, WorldLog3) == 0x06C0);
static_assert(offsetof(USBSoundDebuggerWidget, WorldLog4) == 0x06C8);
static_assert(offsetof(USBSoundDebuggerWidget, WorldLog5) == 0x06D0);
static_assert(offsetof(USBSoundDebuggerWidget, WorldLog6) == 0x06D8);
static_assert(offsetof(USBSoundDebuggerWidget, WorldLog7) == 0x06E0);
static_assert(offsetof(USBSoundDebuggerWidget, WorldLog8) == 0x06E8);
static_assert(offsetof(USBSoundDebuggerWidget, WorldLog9) == 0x06F0);
static_assert(offsetof(USBSoundDebuggerWidget, StatLogRoot) == 0x06F8);
static_assert(offsetof(USBSoundDebuggerWidget, StatSoundsLogRoot) == 0x0700);
static_assert(offsetof(USBSoundDebuggerWidget, StatSoundsIndex_ListView) == 0x0708);
static_assert(offsetof(USBSoundDebuggerWidget, StatSoundsOption_ListView) == 0x0710);
static_assert(offsetof(USBSoundDebuggerWidget, StatSoundsClass_ListView) == 0x0718);
static_assert(offsetof(USBSoundDebuggerWidget, StatSoundsPath_ListView) == 0x0720);
static_assert(offsetof(USBSoundDebuggerWidget, StatWaveLogRoot) == 0x0728);
static_assert(offsetof(USBSoundDebuggerWidget, StatWaveIndex_ListView) == 0x0730);
static_assert(offsetof(USBSoundDebuggerWidget, StatWaveOption_ListView) == 0x0738);
static_assert(offsetof(USBSoundDebuggerWidget, StatWavePath_ListView) == 0x0740);
static_assert(offsetof(USBSoundDebuggerWidget, StatCueLogRoot) == 0x0748);
static_assert(offsetof(USBSoundDebuggerWidget, StatCueIndex_ListView) == 0x0750);
static_assert(offsetof(USBSoundDebuggerWidget, StatCueOption_ListView) == 0x0758);
static_assert(offsetof(USBSoundDebuggerWidget, StatCuePath_ListView) == 0x0760);
static_assert(offsetof(USBSoundDebuggerWidget, StatVibrationLogRoot) == 0x0768);
static_assert(offsetof(USBSoundDebuggerWidget, StatVibrationIndex_ListView) == 0x0770);
static_assert(offsetof(USBSoundDebuggerWidget, StatVibrationOption_ListView) == 0x0778);
static_assert(offsetof(USBSoundDebuggerWidget, StatVibrationPath_ListView) == 0x0780);
static_assert(offsetof(USBSoundDebuggerWidget, StatForceFeedbackLogRoot) == 0x0788);
static_assert(offsetof(USBSoundDebuggerWidget, StatForceFeedbackIndex_ListView) == 0x0790);
static_assert(offsetof(USBSoundDebuggerWidget, StatForceFeedbackLeftLarge_ListView) == 0x0798);
static_assert(offsetof(USBSoundDebuggerWidget, StatForceFeedbackLeftSmall_ListView) == 0x07A0);
static_assert(offsetof(USBSoundDebuggerWidget, StatForceFeedbackRightLarge_ListView) == 0x07A8);
static_assert(offsetof(USBSoundDebuggerWidget, StatForceFeedbackRightSmall_ListView) == 0x07B0);
static_assert(offsetof(USBSoundDebuggerWidget, StatForceFeedbackPath_ListView) == 0x07B8);
static_assert(offsetof(ASBSoundEventVolume, SoundEventAlias) == 0x0318);
static_assert(offsetof(ASBSoundEventVolume, LevelObjOrigin) == 0x0324);
static_assert(offsetof(ASBSoundEventVolume, LevelObjExtent) == 0x0330);
static_assert(offsetof(USBSoundNodeConcatenator, InputVolume) == 0x0048);
static_assert(offsetof(USBSoundNodeConditionBranch, ConditionType) == 0x0048);
static_assert(offsetof(USBSoundNodeFadeSwitch, IntParameterName) == 0x0048);
static_assert(offsetof(USBSoundNodeHighPassFilter, FilterType) == 0x0048);
static_assert(offsetof(USBSoundNodeLoopingMixer, InputVolume) == 0x0048);
static_assert(offsetof(USBSoundNodeLowPassFilter, FilterType) == 0x0048);
static_assert(offsetof(USBSoundNodeParamFade, ParamName) == 0x0048);
static_assert(offsetof(USBSoundNodeParamVolumeCurve, ParamName) == 0x0048);
static_assert(offsetof(USBSoundNodeParamVolumeCurve, VolumeCurve) == 0x0058);
static_assert(offsetof(USBSoundNodeProcedural, ProceduralSound) == 0x0050);
static_assert(offsetof(USBSoundNodeProcedural, ProceduralSoundAsset) == 0x0058);
static_assert(offsetof(ASBSoundOcclusionActor, ShapeType) == 0x02C8);
static_assert(offsetof(ASBSoundOcclusionActor, BoxExtent) == 0x02CC);
static_assert(offsetof(ASBSoundOcclusionActor, CollisionComponent) == 0x02E8);
static_assert(offsetof(ASBSoundOcclusionActor, SelectionColor) == 0x0360);
static_assert(offsetof(USBSoundProceduralSimple, ByCreatedSoundAsset) == 0x03D8);
static_assert(offsetof(USBSoundProceduralSimple, SoundWave) == 0x0540);
static_assert(offsetof(USBSoundProceduralSimple, PCMData) == 0x0548);
static_assert(offsetof(USBSoundProceduralSimpleAsset, SoundWave) == 0x0048);
static_assert(offsetof(USBSoundProceduralSimpleAsset, PCMData) == 0x0050);
static_assert(offsetof(USBSoundVolumeData, SoundControlDataMap) == 0x0030);
static_assert(offsetof(USBSoundVolumeData, SoundChannelData) == 0x0080);
static_assert(offsetof(ASBSpawnArea, SpawnAreaName) == 0x02C8);
static_assert(offsetof(ASBSpawnArea, AreaBox) == 0x02D0);
static_assert(offsetof(ASBSpawnArea, ValidSpawnMap) == 0x02E8);
static_assert(offsetof(FSBSpawnLocationInfo, LocalRotation) == 0x0004);
static_assert(offsetof(FSBSpawnLocationInfo, LocalDirForDistance) == 0x0010);
static_assert(offsetof(USBSpawnFormationData, FormationLocationInfos) == 0x0030);
static_assert(offsetof(FSBAssetPicker, Alias) == 0x0000);
static_assert(offsetof(FSBAssetPicker, BaseResourcePath) == 0x0008);
static_assert(offsetof(FSBAssetPicker, ResultResourcePath) == 0x0018);
static_assert(offsetof(FSBAssetPicker, Custom_BrowseClassName) == 0x002C);
static_assert(offsetof(ASBSpawnPoint, SpawnPointName) == 0x02F8);
static_assert(offsetof(ASBSpawnPoint, FormationData) == 0x0300);
static_assert(offsetof(ASBSpawnPoint, Description) == 0x0308);
static_assert(offsetof(ASBSpawnPoint, ActorActiveVolumeNameArray) == 0x0318);
static_assert(offsetof(ASBSpawnPoint, AnimationPreview) == 0x0328);
static_assert(offsetof(ASBSpawnPoint, CurrentMeshAssetPath) == 0x0368);
static_assert(offsetof(ASBSpawnPoint, LinkTargetComponentList) == 0x0378);
static_assert(offsetof(FSpiderNavigationDataHeader, Transform) == 0x0030);
static_assert(offsetof(FSpiderNavigationDataHeader, VolumeStartLocation) == 0x0060);
static_assert(offsetof(FSpiderNavigationDataHeader, VolumeEndLocation) == 0x006C);
static_assert(offsetof(FSpiderNavigationDataHeader, VolumeLength) == 0x0078);
static_assert(offsetof(FSpiderNavigationDataHeader, InvalidPlaceVolumeUniqueIDs) == 0x0088);
static_assert(offsetof(FSpiderNavigationPointData, Location) == 0x0004);
static_assert(offsetof(FSpiderNavigationPointData, Normal) == 0x0010);
static_assert(offsetof(FSpiderNavigationPointData, NeighborsID) == 0x0020);
static_assert(offsetof(USBSpiderNavigationDataAsset, Header) == 0x0030);
static_assert(offsetof(USBSpiderNavigationDataAsset, PointDatas) == 0x00D0);
static_assert(offsetof(ASBSpiderNavigationVolume, Name) == 0x0318);
static_assert(offsetof(ASBSpiderNavigationVolume, VolumeStartLocation) == 0x035C);
static_assert(offsetof(ASBSpiderNavigationVolume, VolumeEndLocation) == 0x0368);
static_assert(offsetof(ASBSpiderNavigationVolume, VolumeLength) == 0x0374);
static_assert(offsetof(ASBSpiderNavigationVolume, TracerLocations) == 0x0388);
static_assert(offsetof(ASBSpiderNavigationVolume, NavigationVolumePoints) == 0x0398);
static_assert(offsetof(ASBSpiderNavigationVolume, NavigationDataAsset) == 0x03B8);
static_assert(offsetof(ASBSpiderNavigationVolume, NavigationDataIndex) == 0x03C0);
static_assert(offsetof(ASBSplineCameraActor, TargetSpline) == 0x0900);
static_assert(offsetof(ASBSplineCameraActor, CameraSpline) == 0x0908);
static_assert(offsetof(ASBSplineCameraActor, CameraRoot) == 0x0918);
static_assert(offsetof(ASBSplineCameraActor, TargetDummy) == 0x0930);
static_assert(offsetof(USBSplineCameraComponent, SplineMetadata) == 0x0630);
static_assert(offsetof(USBSplineCameraComponent, CameraRotation) == 0x0638);
static_assert(offsetof(USBSplineCameraComponent, CameraCurrentFocalLength) == 0x0650);
static_assert(offsetof(USBSplineCameraComponent, CameraManualFocusDistance) == 0x0668);
static_assert(offsetof(ASBSplineCameraSpringActor, RollbackEasingFunc) == 0x0950);
static_assert(offsetof(ASBSplineCameraSpringActor, CameraBoom) == 0x0958);
static_assert(offsetof(ASBSplineCameraSpringActor, LastBoomRotation) == 0x0968);
static_assert(offsetof(ASBSplineCameraSpringActor, LastPCRot) == 0x0974);
static_assert(offsetof(ASBSplineTexture, TextureRenderTargetFormat) == 0x02CD);
static_assert(offsetof(ASBSplineTexture, SplineComponent) == 0x02D0);
static_assert(offsetof(ASBSplineTexture, SplineTexture) == 0x02D8);
static_assert(offsetof(ASBSplineTexture, MinLocation) == 0x02E4);
static_assert(offsetof(ASBSplineTexture, MaxLocation) == 0x02F0);
static_assert(offsetof(FCameraDollySplineExtra, Type) == 0x0000);
static_assert(offsetof(FCameraDollySplineExtra, DollySplineComponent) == 0x0008);
static_assert(offsetof(FCameraDollySplineBlend, LastLocation) == 0x000C);
static_assert(offsetof(USBSpringArmComponent, CameraDollyTrackData) == 0x02F8);
static_assert(offsetof(USBSpringArmComponent, CameraDollyPositionSpline) == 0x0300);
static_assert(offsetof(USBSpringArmComponent, CameraDollyPositionSplineExtra) == 0x0308);
static_assert(offsetof(USBSpringArmComponent, CurrentArmLocation) == 0x0318);
static_assert(offsetof(USBSpringArmComponent, CurrentDollyDirection) == 0x0324);
static_assert(offsetof(USBSpringArmComponent, PreviousCamLoc) == 0x0340);
static_assert(offsetof(USBSpringArmComponent, CustomOffset) == 0x0354);
static_assert(offsetof(USBSpringArmComponent, CurrentCustomOffset) == 0x0364);
static_assert(offsetof(USBSpringArmComponent, PostZOffsetCurveByArmLength) == 0x0388);
static_assert(offsetof(USBSpringArmComponent, YawAutoRotateSpeedByDirDiff) == 0x0390);
static_assert(offsetof(USBSpringArmComponent, YawAutoRotateSpeedByDirDiffAtSwim) == 0x0398);
static_assert(offsetof(USBSpringArmComponent, DollyBlends) == 0x03D0);
static_assert(offsetof(ASBStreamingLevelLoadingBarrierVolume, StreamingLevelNames) == 0x0318);
static_assert(offsetof(ASBStreamingLevelLoadingBarrierVolume, BlockingDirection) == 0x0330);
static_assert(offsetof(FSBStudioSequenceResourceData, ResourceTag) == 0x0000);
static_assert(offsetof(FSBStudioSequenceResourceData, SequencePath) == 0x0008);
static_assert(offsetof(FSBStudioSequenceResourceData, FinishSplineTag) == 0x0034);
static_assert(offsetof(USBStudioSequenceDataAsset, SequenceResourceMap) == 0x0030);
static_assert(offsetof(FSBStudioShowResourceData, ResourceTag) == 0x0000);
static_assert(offsetof(FSBStudioShowResourceData, ShowPath) == 0x0008);
static_assert(offsetof(USBStudioShowDataAsset, ShowResourceMap) == 0x0030);
static_assert(offsetof(ASBStudioActor, MeshInfoTagList) == 0x02D0);
static_assert(offsetof(ASBStudioActor, MeshInfoList) == 0x02E0);
static_assert(offsetof(ASBStudioActor, Root) == 0x0350);
static_assert(offsetof(ASBStudioActor, MeshBody) == 0x0358);
static_assert(offsetof(ASBStudioActor, MeshBodyTMMap) == 0x0360);
static_assert(offsetof(ASBStudioActor, StudioTag) == 0x03B0);
static_assert(offsetof(ASBStudioActor, ExitLoadingGuid) == 0x0414);
static_assert(offsetof(ASBStudioActor, LastViewTarget) == 0x0424);
static_assert(offsetof(ASBStudioActor, BodyCustomAnimNodeName) == 0x0434);
static_assert(offsetof(ASBStudioActor, BodyCustomAnimNodeNameMap) == 0x0440);
static_assert(offsetof(ASBStudioActor, BodyCustomAnimAdditiveNodeName) == 0x0490);
static_assert(offsetof(ASBStudioActor, TagCustomAnimNodeNameMap) == 0x04E8);
static_assert(offsetof(ASBStudioActor, DefaultSBSkeletalTag) == 0x0538);
static_assert(offsetof(ASBStudioActor, TemplateSequenceActor) == 0x0590);
static_assert(offsetof(ASBStudioActor, SequenceResourceDataAsset) == 0x0598);
static_assert(offsetof(ASBStudioActor, ShowResourceDataAsset) == 0x0648);
static_assert(offsetof(ASBStudioActor, ItemRoot) == 0x06F0);
static_assert(offsetof(ASBStudioActor, SpawnItemActor) == 0x06F8);
static_assert(offsetof(ASBStudioActor, SpawnItemOrigLocation) == 0x0700);
static_assert(offsetof(ASBStudioActor, SpawnItemOrigRotation) == 0x070C);
static_assert(offsetof(ASBStudioActor, CacheCameraCompoennt) == 0x0720);
static_assert(offsetof(ASBStudioActor, CaptureCameraTM) == 0x0730);
static_assert(offsetof(ASBStudioActor, CaptureCameraPivot1TM) == 0x0760);
static_assert(offsetof(ASBStudioActor, CaptureCameraPivot2TM) == 0x0790);
static_assert(offsetof(ASBStudioActor, LastSplineComponentTag) == 0x0818);
static_assert(offsetof(ASBStudioActor, PostProcessWeightedBlendablesMap) == 0x0838);
static_assert(offsetof(ASBStudioActor, ClothResetComponentTag) == 0x0984);
static_assert(offsetof(ASBStudioActor, VisibleComponentTag) == 0x09A8);
static_assert(offsetof(ASBStudioActor, IdleAdditiveAnimationVisibleComponentTag) == 0x09B4);
static_assert(offsetof(ASBStudioActor, DisableIdleAdditiveAnimVisibleComponentTag) == 0x09BC);
static_assert(offsetof(ASBTargetingPoint, PointName) == 0x02F0);
static_assert(offsetof(FSBTextureStyleInfo, Default) == 0x0000);
static_assert(offsetof(FSBTextureStyleInfo, StanardKeyboard) == 0x0008);
static_assert(offsetof(FSBTextureStyleInfo, StanardJoystic) == 0x0010);
static_assert(offsetof(FSBTextureStyleInfo, PS4) == 0x0018);
static_assert(offsetof(FSBTextureStyleInfo, XBox) == 0x0020);
static_assert(offsetof(USBTextureStyleSetData, actions) == 0x0030);
static_assert(offsetof(USBTextureStyleSetData, Keys) == 0x0080);
static_assert(offsetof(USBTheaterData, TransitTakeData) == 0x0040);
static_assert(offsetof(USBTheaterData, TakeArray) == 0x0048);
static_assert(offsetof(USBTheaterData, CommonAttachActorTagNames) == 0x0060);
static_assert(offsetof(USBTheaterLevelSequenceObserver, SequenceName) == 0x0028);
static_assert(offsetof(USBTheaterLevelSequenceObserver, Sequence) == 0x0030);
static_assert(offsetof(USBTheaterLevelSequenceObserver, Player) == 0x0038);
static_assert(offsetof(USBTheaterLevelSequenceObserver, SequenceActor) == 0x0040);
static_assert(offsetof(USBTheaterLevelSequenceObserver, AttachActorTagNames) == 0x0048);
static_assert(offsetof(USBTheaterLevelSequenceObserver, TakeGuid) == 0x0064);
static_assert(offsetof(USBTheaterLevelSequenceObserver, SceneGuid) == 0x0074);
static_assert(offsetof(FSBLevelSequenceBookmarkAlias, BookmarkName) == 0x0000);
static_assert(offsetof(FSBLevelSequenceBookmarkAlias, Sequence) == 0x0008);
static_assert(offsetof(FSBLevelAlias, WorldName) == 0x0000);
static_assert(offsetof(FSBLevelAlias, ActorName) == 0x0008);
static_assert(offsetof(FSBLevelAlias, Type) == 0x0010);
static_assert(offsetof(USBTheaterTakeData, NextTakeUIDs) == 0x0030);
static_assert(offsetof(USBTheaterTakeData, TakeAlias) == 0x0044);
static_assert(offsetof(USBTheaterTakeData, BookmarkAlias) == 0x0050);
static_assert(offsetof(USBTheaterTakeData, FinishEvent) == 0x0060);
static_assert(offsetof(USBTheaterTakeData, AttachActorTagNames) == 0x0078);
static_assert(offsetof(USBTheaterTakeData, LevelActorName) == 0x0088);
static_assert(offsetof(USBTheaterTakeData, TemplateSequence) == 0x00A0);
static_assert(offsetof(USBTheaterTakeData, CultureTemplateSequenceMap) == 0x00A8);
static_assert(offsetof(USBTheaterTakeData, TemplateSettingActor) == 0x00F8);
static_assert(offsetof(USBTheaterTakeData, FinishFade) == 0x010C);
static_assert(offsetof(ASBTickManagedActor, TickingGroup) == 0x02C8);
static_assert(offsetof(USBToolDataAsset, ToolDataVersion) == 0x0040);
static_assert(offsetof(USBToolDataAsset, ToolDataNodeList) == 0x0048);
static_assert(offsetof(USBToolDataAsset, ToolDataNodeGraph) == 0x0058);
static_assert(offsetof(USBToolDataNode_AliasEffect, EffectAlias) == 0x0048);
static_assert(offsetof(USBToolDataNode_AliasEffect, AliasController) == 0x0060);
static_assert(offsetof(USBToolDataNode_AliasRewardGroup, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_AliasRewardGroup, RewardGroupAlias) == 0x0050);
static_assert(offsetof(USBToolDataNode_AliasRewardGroup, RewardGroupIndex) == 0x0068);
static_assert(offsetof(USBToolDataNode_AliasRewardGroup, TableIndexController) == 0x0090);
static_assert(offsetof(USBToolDataNode_AreaControlVolume, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_AreaControlVolume, InitActivate) == 0x0054);
static_assert(offsetof(USBToolDataNode_AreaControlVolume, AdmissionPossibleTribeArray) == 0x0058);
static_assert(offsetof(USBToolDataNode_AreaControlVolume, AdmissionPossibleCharacterTagArray) == 0x0068);
static_assert(offsetof(USBToolDataNode_AreaControlVolume, SaveType) == 0x0079);
static_assert(offsetof(USBToolDataNode_AreaControlVolume, Description) == 0x0080);
static_assert(offsetof(USBToolDataNode_Condition, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_Condition, ConditionType) == 0x0054);
static_assert(offsetof(USBToolDataNode_Condition, ConditionEq) == 0x0055);
static_assert(offsetof(USBToolDataNode_Condition, CustomStr01) == 0x0058);
static_assert(offsetof(USBToolDataNode_Condition, CustomStr02) == 0x0068);
static_assert(offsetof(USBToolDataNode_Condition, RefCustomStr01) == 0x0078);
static_assert(offsetof(USBToolDataNode_Condition, RefCustomStr02) == 0x0090);
static_assert(offsetof(USBToolDataNode_Condition, RefCustomStr03) == 0x00A8);
static_assert(offsetof(USBToolDataNode_Condition, CheckStrValue) == 0x00C0);
static_assert(offsetof(USBToolDataNode_Condition, RefCheckStrValue) == 0x00D0);
static_assert(offsetof(USBToolDataNode_Condition, ActorTargetType) == 0x00EC);
static_assert(offsetof(USBToolDataNode_Condition, CheckStatCalcType) == 0x00ED);
static_assert(offsetof(USBToolDataNode_Condition, GameOptionType) == 0x00EF);
static_assert(offsetof(USBToolDataNode_Condition, FailNotifyMsg) == 0x00F0);
static_assert(offsetof(USBToolDataNode_Condition, Description) == 0x0100);
static_assert(offsetof(USBToolDataNode_ConditionGroup, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ConditionGroup, Conditions) == 0x0058);
static_assert(offsetof(USBToolDataNode_ConditionGroup, ConditionEq) == 0x0068);
static_assert(offsetof(USBToolDataNode_ConditionGroup, ConditionGroup1) == 0x006C);
static_assert(offsetof(USBToolDataNode_ConditionGroup, GroupEq1) == 0x0084);
static_assert(offsetof(USBToolDataNode_ConditionGroup, ConditionGroup2) == 0x0088);
static_assert(offsetof(USBToolDataNode_ConditionGroup, GroupEq2) == 0x00A0);
static_assert(offsetof(USBToolDataNode_ConditionGroup, Description) == 0x00A8);
static_assert(offsetof(USBToolDataNode_EnvState_Reward, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EnvState_Reward, RewardGroupSpawnFormation) == 0x0050);
static_assert(offsetof(USBToolDataNode_EnvState_Reward, RewardGroupAlias) == 0x0058);
static_assert(offsetof(USBToolDataNode_EnvState_Reward, RewardGroupIndex) == 0x0070);
static_assert(offsetof(USBToolDataNode_EnvState_Reward, Description) == 0x0098);
static_assert(offsetof(FSBZoneEnvToTargetStateInfo, TargetTagName) == 0x0000);
static_assert(offsetof(FSBZoneEnvToTargetStateInfo, AttachTagNames) == 0x0008);
static_assert(offsetof(FSBZoneEnvToTargetStateInfo, ToTransitLevelSequence) == 0x0018);
static_assert(offsetof(FSBZoneEnvToTargetStateInfo, SequenceActorTemplate) == 0x0040);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, TransitOut_TheaterData) == 0x0050);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, TransitOut_LevelSequence) == 0x0078);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, TransitOut_SequenceActorTemplate) == 0x00A0);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, TransitOut_AttachTagNames) == 0x00A8);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, Active_TheaterData) == 0x00B8);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, Active_LevelSequence) == 0x00E0);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, Active_SequenceActorTemplate) == 0x0108);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, Active_AttachTagNames) == 0x0110);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, Loop_LevelSequence) == 0x0120);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, Loop_SequenceActorTemplate) == 0x0148);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, Loop_AttachTagNames) == 0x0150);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, PlayTransformOwnerType) == 0x0162);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, ToTargetStateInfoList) == 0x0168);
static_assert(offsetof(USBToolDataNode_EnvState_Sequence, Description) == 0x0178);
static_assert(offsetof(USBToolDataNode_EventActorEffect, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventActorEffect, EffectAlias) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventActorEffect, ActorEffectAlias) == 0x006C);
static_assert(offsetof(USBToolDataNode_EventActorEffect, ToTarget) == 0x0084);
static_assert(offsetof(USBToolDataNode_EventActorEffect, EventorType) == 0x0085);
static_assert(offsetof(USBToolDataNode_EventActorEffect, TargetTagName) == 0x0088);
static_assert(offsetof(USBToolDataNode_EventActorEffect, EventCondition) == 0x0090);
static_assert(offsetof(USBToolDataNode_EventActorEffect, EventConditionGroup) == 0x00A8);
static_assert(offsetof(USBToolDataNode_EventActorEffect, ToCaster) == 0x00C0);
static_assert(offsetof(USBToolDataNode_EventActorEffect, CasterTagName) == 0x00C4);
static_assert(offsetof(USBToolDataNode_EventActorEffect, Description) == 0x00D8);
static_assert(offsetof(USBToolDataNode_EventAIDecorator, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventAIDecorator, TargetFilter) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventAIDecorator, ValueKey) == 0x006C);
static_assert(offsetof(USBToolDataNode_EventAIDecorator, ValueType) == 0x0074);
static_assert(offsetof(USBToolDataNode_EventAIDecorator, CustomVectorValue) == 0x0078);
static_assert(offsetof(USBToolDataNode_EventAIDecorator, EventCondition) == 0x0084);
static_assert(offsetof(USBToolDataNode_EventAIDecorator, EventConditionGroup) == 0x009C);
static_assert(offsetof(USBToolDataNode_EventAIDecorator, Description) == 0x00C0);
static_assert(offsetof(USBToolDataNode_EventAreaControlVolumeControl, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventAreaControlVolumeControl, AreaControlVolume1) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventAreaControlVolumeControl, AreaControlVolume2) == 0x006C);
static_assert(offsetof(USBToolDataNode_EventAreaControlVolumeControl, AreaControlVolume3) == 0x0084);
static_assert(offsetof(USBToolDataNode_EventAreaControlVolumeControl, AreaControlVolume4) == 0x009C);
static_assert(offsetof(USBToolDataNode_EventAreaControlVolumeControl, AreaControlVolume5) == 0x00B4);
static_assert(offsetof(USBToolDataNode_EventAreaControlVolumeControl, Activate) == 0x00CC);
static_assert(offsetof(USBToolDataNode_EventAreaControlVolumeControl, EventCondition) == 0x00D0);
static_assert(offsetof(USBToolDataNode_EventAreaControlVolumeControl, EventConditionGroup) == 0x00E8);
static_assert(offsetof(USBToolDataNode_EventAreaControlVolumeControl, Description) == 0x0110);
static_assert(offsetof(USBToolDataNode_EventAreaName, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventAreaName, MainAreaText) == 0x0058);
static_assert(offsetof(USBToolDataNode_EventAreaName, SubAreaText) == 0x0070);
static_assert(offsetof(USBToolDataNode_EventAreaName, EventCondition) == 0x0088);
static_assert(offsetof(USBToolDataNode_EventAreaName, EventConditionGroup) == 0x00A0);
static_assert(offsetof(USBToolDataNode_EventAreaName, EventorType) == 0x00B8);
static_assert(offsetof(USBToolDataNode_EventAreaName, Description) == 0x00C0);
static_assert(offsetof(USBToolDataNode_EventEffectVolumeControl, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventEffectVolumeControl, EffectVolume) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventEffectVolumeControl, Activate) == 0x006C);
static_assert(offsetof(USBToolDataNode_EventEffectVolumeControl, EventCondition) == 0x0070);
static_assert(offsetof(USBToolDataNode_EventEffectVolumeControl, EventConditionGroup) == 0x0088);
static_assert(offsetof(USBToolDataNode_EventEffectVolumeControl, Description) == 0x00B0);
static_assert(offsetof(USBToolDataNode_EventEnhanceResult, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventEnhanceResult, Item) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventEnhanceResult, ResultText) == 0x0070);
static_assert(offsetof(USBToolDataNode_EventEnhanceResult, EventCondition) == 0x0088);
static_assert(offsetof(USBToolDataNode_EventEnhanceResult, EventConditionGroup) == 0x00A0);
static_assert(offsetof(USBToolDataNode_EventEnhanceResult, EventorType) == 0x00B8);
static_assert(offsetof(USBToolDataNode_EventEnhanceResult, Description) == 0x00C0);
static_assert(offsetof(USBToolDataNode_EventEnvControl, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventEnvControl, EnvSpawnAlias) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventEnvControl, EnvControlType) == 0x006C);
static_assert(offsetof(USBToolDataNode_EventEnvControl, TargetCampAlias) == 0x0070);
static_assert(offsetof(USBToolDataNode_EventEnvControl, TagName) == 0x0088);
static_assert(offsetof(USBToolDataNode_EventEnvControl, Activate) == 0x0090);
static_assert(offsetof(USBToolDataNode_EventEnvControl, EventCondition) == 0x009C);
static_assert(offsetof(USBToolDataNode_EventEnvControl, EventConditionGroup) == 0x00B4);
static_assert(offsetof(USBToolDataNode_EventEnvControl, Description) == 0x00F0);
static_assert(offsetof(USBToolDataNode_EventGuideAction, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventGuideAction, GuideActionAlias) == 0x0058);
static_assert(offsetof(USBToolDataNode_EventGuideAction, ToTarget) == 0x0070);
static_assert(offsetof(USBToolDataNode_EventGuideAction, TargetTagName) == 0x0074);
static_assert(offsetof(USBToolDataNode_EventGuideAction, FollowerTagNameArray) == 0x0080);
static_assert(offsetof(USBToolDataNode_EventGuideAction, EventCondition) == 0x0094);
static_assert(offsetof(USBToolDataNode_EventGuideAction, EventConditionGroup) == 0x00AC);
static_assert(offsetof(USBToolDataNode_EventGuideAction, Description) == 0x00C8);
static_assert(offsetof(USBToolDataNode_EventInteractCamp, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventInteractCamp, EnvSpawnAlias) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventInteractCamp, InteractType) == 0x006C);
static_assert(offsetof(USBToolDataNode_EventInteractCamp, EventCondition) == 0x0070);
static_assert(offsetof(USBToolDataNode_EventInteractCamp, EventConditionGroup) == 0x0088);
static_assert(offsetof(USBToolDataNode_EventInteractCamp, Description) == 0x00A8);
static_assert(offsetof(USBToolDataNode_EventInteractCamp, DoingSaveType) == 0x00B8);
static_assert(offsetof(USBToolDataNode_EventInteractCamp, SoundEventAlias) == 0x00BC);
static_assert(offsetof(USBToolDataNode_EventItemAction, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventItemAction, ActionType) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventItemAction, Item) == 0x0058);
static_assert(offsetof(USBToolDataNode_EventItemAction, TargetFilter) == 0x0074);
static_assert(offsetof(USBToolDataNode_EventItemAction, EventCondition) == 0x008C);
static_assert(offsetof(USBToolDataNode_EventItemAction, EventConditionGroup) == 0x00A4);
static_assert(offsetof(USBToolDataNode_EventItemAction, Description) == 0x00C8);
static_assert(offsetof(USBToolDataNode_EventLaserControl, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventLaserControl, LaserUniqueName) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventLaserControl, LaserGroupName) == 0x005C);
static_assert(offsetof(USBToolDataNode_EventLaserControl, Activate) == 0x0064);
static_assert(offsetof(USBToolDataNode_EventLaserControl, EventCondition) == 0x0068);
static_assert(offsetof(USBToolDataNode_EventLaserControl, EventConditionGroup) == 0x0080);
static_assert(offsetof(USBToolDataNode_EventLaserControl, Description) == 0x00A0);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, LevelSeqAlias) == 0x0058);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, LevelSeq) == 0x0068);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, SequenceActorTemplate) == 0x0090);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, AttachTagNames) == 0x0098);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, Type) == 0x00A8);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, EventCondition) == 0x00AC);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, EventConditionGroup) == 0x00C4);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, EventorType) == 0x00DC);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, LevelSequenceContentsType) == 0x00EF);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, Description) == 0x00F0);
static_assert(offsetof(USBToolDataNode_EventLevelSequence, RandomLevelSeqAliases) == 0x0108);
static_assert(offsetof(USBToolDataNode_EventMetaAI, Description) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventMetaAI, Alias) == 0x0058);
static_assert(offsetof(USBToolDataNode_EventMetaAI, ToTarget) == 0x0064);
static_assert(offsetof(USBToolDataNode_EventMetaAI, TargetTagName) == 0x0068);
static_assert(offsetof(USBToolDataNode_EventMetaAI, MetaAIEventType) == 0x0070);
static_assert(offsetof(USBToolDataNode_EventMetaAI, SpecialBehaviorTag) == 0x0074);
static_assert(offsetof(USBToolDataNode_EventMetaAI, AddTag) == 0x007C);
static_assert(offsetof(USBToolDataNode_EventMetaAI, ForceThink) == 0x0084);
static_assert(offsetof(USBToolDataNode_EventMetaAI, ForceThink_BehaviorAlias) == 0x0088);
static_assert(offsetof(USBToolDataNode_EventMetaAI, EventCondition) == 0x0090);
static_assert(offsetof(USBToolDataNode_EventMetaAI, EventConditionGroup) == 0x00A8);
static_assert(offsetof(USBToolDataNode_EventObjectControl, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventObjectControl, TargetDataAlias) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventObjectControl, TargetFilter) == 0x005C);
static_assert(offsetof(USBToolDataNode_EventObjectControl, ObjectType) == 0x0074);
static_assert(offsetof(USBToolDataNode_EventObjectControl, Activate) == 0x0075);
static_assert(offsetof(USBToolDataNode_EventObjectControl, ObjectControlActionType) == 0x0076);
static_assert(offsetof(USBToolDataNode_EventObjectControl, RetargetSpawnPointName) == 0x0078);
static_assert(offsetof(USBToolDataNode_EventObjectControl, EventCondition) == 0x0084);
static_assert(offsetof(USBToolDataNode_EventObjectControl, EventConditionGroup) == 0x009C);
static_assert(offsetof(USBToolDataNode_EventObjectControl, Description) == 0x00C0);
static_assert(offsetof(USBToolDataNode_EventQuest, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventQuest, Quest) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventQuest, TargetType) == 0x006C);
static_assert(offsetof(USBToolDataNode_EventQuest, EventCondition) == 0x0070);
static_assert(offsetof(USBToolDataNode_EventQuest, EventConditionGroup) == 0x0088);
static_assert(offsetof(USBToolDataNode_EventQuest, Description) == 0x00B0);
static_assert(offsetof(USBToolDataNode_EventRequestPathWay, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventRequestPathWay, ActionType) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventRequestPathWay, LevelTargetFilter) == 0x0058);
static_assert(offsetof(USBToolDataNode_EventRequestPathWay, PathWayAlias) == 0x0070);
static_assert(offsetof(USBToolDataNode_EventRequestPathWay, EventCondition) == 0x0080);
static_assert(offsetof(USBToolDataNode_EventRequestPathWay, EventConditionGroup) == 0x0098);
static_assert(offsetof(USBToolDataNode_EventRequestPathWay, Description) == 0x00B0);
static_assert(offsetof(USBToolDataNode_EventTheater, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventTheater, Theater) == 0x0058);
static_assert(offsetof(USBToolDataNode_EventTheater, LevelSeq) == 0x0080);
static_assert(offsetof(USBToolDataNode_EventTheater, ControlType) == 0x00A8);
static_assert(offsetof(USBToolDataNode_EventTheater, EventCondition) == 0x00AC);
static_assert(offsetof(USBToolDataNode_EventTheater, EventConditionGroup) == 0x00C4);
static_assert(offsetof(USBToolDataNode_EventTheater, SequencePlayTransformType) == 0x00E8);
static_assert(offsetof(USBToolDataNode_EventTheater, SequencePlayTrasnformCastType) == 0x00E9);
static_assert(offsetof(USBToolDataNode_EventTheater, BindTargetType) == 0x00EA);
static_assert(offsetof(USBToolDataNode_EventTheater, EventSpawnAlias) == 0x00F8);
static_assert(offsetof(USBToolDataNode_EventTheater, BindZoneEnvAlias) == 0x0110);
static_assert(offsetof(USBToolDataNode_EventTheater, Description) == 0x0128);
static_assert(offsetof(USBToolDataNode_EventTheater, TheaterAlias) == 0x0138);
static_assert(offsetof(USBToolDataNode_EventTheater, TheaterSelectDataList) == 0x0148);
static_assert(offsetof(USBToolDataNode_EventTheater, MeshClipingApplyType1) == 0x0168);
static_assert(offsetof(USBToolDataNode_EventTheater, MeshClipingLocation1) == 0x016C);
static_assert(offsetof(USBToolDataNode_EventTheater, MeshClipingRotation1) == 0x0178);
static_assert(offsetof(USBToolDataNode_EventTheater, MeshClipingScale1) == 0x0184);
static_assert(offsetof(USBToolDataNode_EventTheater, MeshClipingApplyType2) == 0x0190);
static_assert(offsetof(USBToolDataNode_EventTheater, MeshClipingLocation2) == 0x0194);
static_assert(offsetof(USBToolDataNode_EventTheater, MeshClipingRotation2) == 0x01A0);
static_assert(offsetof(USBToolDataNode_EventTheater, MeshClipingScale2) == 0x01AC);
static_assert(offsetof(USBToolDataNode_EventUIAction, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventUIAction, UIActionType) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventUIAction, UILogicType) == 0x0055);
static_assert(offsetof(USBToolDataNode_EventUIAction, UIActionRequestIndex) == 0x0058);
static_assert(offsetof(USBToolDataNode_EventUIAction, EventCondition) == 0x007C);
static_assert(offsetof(USBToolDataNode_EventUIAction, EventConditionGroup) == 0x0094);
static_assert(offsetof(USBToolDataNode_EventUIAction, EventorType) == 0x00AC);
static_assert(offsetof(USBToolDataNode_EventUIAction, Notify_AlbumAlias) == 0x00B0);
static_assert(offsetof(USBToolDataNode_EventUIAction, SendUIWidgetEventString) == 0x00C0);
static_assert(offsetof(USBToolDataNode_EventUIAction, Description) == 0x00E0);
static_assert(offsetof(USBToolDataNode_EventUIAction, TableIndexController) == 0x00F8);
static_assert(offsetof(USBToolDataNode_EventZoneControl, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventZoneControl, Zone) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventZoneControl, ControlType) == 0x006C);
static_assert(offsetof(USBToolDataNode_EventZoneControl, EventCondition) == 0x0070);
static_assert(offsetof(USBToolDataNode_EventZoneControl, EventConditionGroup) == 0x0088);
static_assert(offsetof(USBToolDataNode_EventZoneControl, Description) == 0x00B0);
static_assert(offsetof(USBToolDataNode_EventZoneEventActorControl, Description) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventZoneEventActorControl, Alias) == 0x0058);
static_assert(offsetof(USBToolDataNode_EventZoneEventActorControl, ZoneEventActorName) == 0x0064);
static_assert(offsetof(USBToolDataNode_EventZoneEventActorControl, ZoneEventActorControlType) == 0x006C);
static_assert(offsetof(USBToolDataNode_EventZoneEventActorControl, EventCondition) == 0x0078);
static_assert(offsetof(USBToolDataNode_EventZoneEventActorControl, EventConditionGroup) == 0x0090);
static_assert(offsetof(USBToolDataNode_EventZoneWarp, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_EventZoneWarp, EventCondition) == 0x0054);
static_assert(offsetof(USBToolDataNode_EventZoneWarp, EventConditionGroup) == 0x006C);
static_assert(offsetof(USBToolDataNode_EventZoneWarp, World) == 0x0084);
static_assert(offsetof(USBToolDataNode_EventZoneWarp, ZoneCamp) == 0x009C);
static_assert(offsetof(USBToolDataNode_EventZoneWarp, TargetSpawnPoint) == 0x00B4);
static_assert(offsetof(USBToolDataNode_EventZoneWarp, WarpToLocation) == 0x00BC);
static_assert(offsetof(USBToolDataNode_EventZoneWarp, WarpToRotation) == 0x00C8);
static_assert(offsetof(USBToolDataNode_EventZoneWarp, Description) == 0x00E8);
static_assert(offsetof(USBToolDataNode_GuideAction, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_GuideAction, PathWayName) == 0x0058);
static_assert(offsetof(USBToolDataNode_GuideAction, ZoneEventsWhenStart) == 0x0068);
static_assert(offsetof(USBToolDataNode_GuideAction, ZoneEventsWhenArrive) == 0x0078);
static_assert(offsetof(USBToolDataNode_GuideAction, ZoneEventsWhenComplete) == 0x0088);
static_assert(offsetof(USBToolDataNode_GuideAction, TheaterWhenStart) == 0x0098);
static_assert(offsetof(USBToolDataNode_GuideAction, TheaterWhenArrive) == 0x00C0);
static_assert(offsetof(USBToolDataNode_GuideAction, TheaterWhenComplete) == 0x00E8);
static_assert(offsetof(USBToolDataNode_GuideAction, TheaterWhenMovePause) == 0x0110);
static_assert(offsetof(USBToolDataNode_GuideAction, LevelSequenceWhenStart) == 0x0138);
static_assert(offsetof(USBToolDataNode_GuideAction, LevelSequenceWhenArrive) == 0x0160);
static_assert(offsetof(USBToolDataNode_GuideAction, LevelSequenceWhenComplete) == 0x0188);
static_assert(offsetof(USBToolDataNode_GuideAction, LevelSequenceWhenMovePause) == 0x01B0);
static_assert(offsetof(USBToolDataNode_GuideAction, QuestTaskGroupAlias) == 0x01D8);
static_assert(offsetof(USBToolDataNode_GuideAction, StanceAlias) == 0x01F0);
static_assert(offsetof(USBToolDataNode_GuideAction, MoveStateFromForwardPlayer) == 0x021D);
static_assert(offsetof(USBToolDataNode_GuideAction, MoveStateFromBackwardPlayer) == 0x0228);
static_assert(offsetof(USBToolDataNode_GuideAction, MovePauseShow) == 0x0248);
static_assert(offsetof(USBToolDataNode_GuideAction, ArriveShow) == 0x0278);
static_assert(offsetof(USBToolDataNode_GuideAction, StartShow) == 0x02A8);
static_assert(offsetof(USBToolDataNode_GuideAction, FormationType) == 0x02F8);
static_assert(offsetof(USBToolDataNode_GuideAction, Description) == 0x0308);
static_assert(offsetof(USBToolDataNode_LevelSequence, LevelSequence) == 0x0048);
static_assert(offsetof(USBToolDataNode_LevelSequence, LevelSeqAlias) == 0x0070);
static_assert(offsetof(USBToolDataNode_LevelTargetFilter, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_LevelTargetFilter, TargetType) == 0x0054);
static_assert(offsetof(USBToolDataNode_LevelTargetFilter, EventSpawnAlias) == 0x0058);
static_assert(offsetof(USBToolDataNode_LevelTargetFilter, TargetAlias) == 0x0060);
static_assert(offsetof(USBToolDataNode_LevelTargetFilter, EnvSpawnAlias) == 0x0068);
static_assert(offsetof(USBToolDataNode_LevelTargetFilter, EnvAlias) == 0x0070);
static_assert(offsetof(USBToolDataNode_LevelTargetFilter, SpawnPointName) == 0x0078);
static_assert(offsetof(USBToolDataNode_LevelTargetFilter, Description) == 0x0088);
static_assert(offsetof(FSBSpawnConditionInfo, CheckAchievement) == 0x0008);
static_assert(offsetof(FSBObjectConditionTriggerInfo, Guid) == 0x0000);
static_assert(offsetof(FSBObjectConditionTriggerInfo, Condition) == 0x0010);
static_assert(offsetof(FSBObjectConditionTriggerInfo, ZoneEvent) == 0x0028);
static_assert(offsetof(FSBObjectConditionTriggerInfo, RunType) == 0x0040);
static_assert(offsetof(FSBObjectConditionTriggerInfo, ExecuteType) == 0x0041);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SpawnPointName) == 0x0054);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, InitActivate) == 0x005C);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, CharacterAlias) == 0x0060);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SpawnType) == 0x0070);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SpawnRotationType) == 0x0071);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SpawnZone) == 0x0074);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SpawnGroupRuleAlias) == 0x008C);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, TransitStayZoneSaveType) == 0x0097);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SaveType) == 0x0098);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SaveSubProperty) == 0x0099);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SpawnRuleType) == 0x009A);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, KeepObjResetTransformType) == 0x00A5);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, EventOnSpawning) == 0x00C0);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, EventOnDead) == 0x00D0);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, EventOnBattle) == 0x00E0);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, EventFirstTimeOnBattle) == 0x00F0);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, ObjectMaterial) == 0x0100);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, PathWay) == 0x0128);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, PathWayAlias) == 0x013C);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, RewardGroup) == 0x0154);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, RewardGroupIndex) == 0x016C);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, RewardSpawnBucketType) == 0x0190);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, RewardOverrideSaveType) == 0x0191);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, TagName) == 0x0194);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, AIGroupAlias) == 0x01A0);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, AIGroupName) == 0x01B8);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, MetaAIAlias) == 0x01C4);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, MetaAI_InitThink) == 0x01DC);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, MetaAI_SpecialBehaviorTag) == 0x01E0);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, InteractionGraphAsset) == 0x01E8);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, InteractionGraph) == 0x0210);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, AdjustInteractTargetPosType) == 0x0238);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, OwnerRotationType) == 0x0239);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, FormationData) == 0x0240);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, CheckAchievements) == 0x0250);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SpawnConditions) == 0x0260);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, ConditionTriggerList) == 0x0278);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SpawnShow) == 0x0288);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, ShopData) == 0x02B8);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SpawnEffectList) == 0x02C8);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, PuzzleInputText1) == 0x02D8);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, PuzzleInputText2) == 0x02F0);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, PuzzleInputText3) == 0x0308);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, PuzzleInputText4) == 0x0320);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, PuzzleInputTextList5) == 0x0338);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, Description) == 0x0348);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, SpawnPosition) == 0x0358);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, WorldMapDisplayType) == 0x0364);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, WorldMapDisplayTitle) == 0x0368);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, WorldMapDisplayDesc) == 0x0378);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, WorldMapDisplayConditionGroup) == 0x0388);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, WorldMapIconTag) == 0x0390);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, InteractionRelevantType) == 0x039C);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, InteractionDisable_Condition) == 0x03A8);
static_assert(offsetof(USBToolDataNode_NGPlusZoneEventCharacterSpawn, InteractionDisable_ConditionGroup) == 0x03B8);
static_assert(offsetof(USBToolDataNode_World, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_World, Level) == 0x0058);
static_assert(offsetof(USBToolDataNode_World, LevelPath) == 0x0080);
static_assert(offsetof(USBToolDataNode_World, Description) == 0x0090);
static_assert(offsetof(FSBTransitZoneInfo, TransitAchievement) == 0x0000);
static_assert(offsetof(FSBTransitZoneInfo, TransitZone) == 0x0018);
static_assert(offsetof(USBToolDataNode_ZoneData, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZoneData, StartPointAlias) == 0x0054);
static_assert(offsetof(USBToolDataNode_ZoneData, WorldData) == 0x005C);
static_assert(offsetof(USBToolDataNode_ZoneData, IsolatedAreaAlias) == 0x0074);
static_assert(offsetof(USBToolDataNode_ZoneData, ZoneType) == 0x007D);
static_assert(offsetof(USBToolDataNode_ZoneData, NpcTransitType) == 0x007E);
static_assert(offsetof(USBToolDataNode_ZoneData, InitActive) == 0x007F);
static_assert(offsetof(USBToolDataNode_ZoneData, EnterResetZoneLayerList) == 0x0080);
static_assert(offsetof(USBToolDataNode_ZoneData, LeaveResetZoneLayerList) == 0x0090);
static_assert(offsetof(USBToolDataNode_ZoneData, EnterZoneEffectTargetType) == 0x00A0);
static_assert(offsetof(USBToolDataNode_ZoneData, EnterZoneEffectAtLeaveState) == 0x00A1);
static_assert(offsetof(USBToolDataNode_ZoneData, EnterZoneEffects) == 0x00A8);
static_assert(offsetof(USBToolDataNode_ZoneData, EnterZoneEvent) == 0x00B8);
static_assert(offsetof(USBToolDataNode_ZoneData, LeaveZoneEvent) == 0x00C8);
static_assert(offsetof(USBToolDataNode_ZoneData, ActiveZoneEvent) == 0x00D8);
static_assert(offsetof(USBToolDataNode_ZoneData, DeactiveZoneEvent) == 0x00E8);
static_assert(offsetof(USBToolDataNode_ZoneData, ZoneSpawnEvent) == 0x00F8);
static_assert(offsetof(USBToolDataNode_ZoneData, PlayRule) == 0x0108);
static_assert(offsetof(USBToolDataNode_ZoneData, AdditiveDesignLevel) == 0x0128);
static_assert(offsetof(USBToolDataNode_ZoneData, Description) == 0x0138);
static_assert(offsetof(USBToolDataNode_ZoneData, TransitZone) == 0x0148);
static_assert(offsetof(USBToolDataNode_ZoneData, SpiritRoomEscapeCondition) == 0x017C);
static_assert(offsetof(USBToolDataNode_ZoneData, SpiritRoomEscapeConditionGroup) == 0x0194);
static_assert(offsetof(USBToolDataNode_ZoneData, LevelGraphicsOptionsAlias) == 0x01B0);
static_assert(offsetof(FSBEffectVolumeDeadCountInfo, DeadCountEffectAliasList) == 0x0008);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, VolumeType) == 0x0054);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, InitActivate) == 0x0055);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, ActiveZoneAlias) == 0x0058);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, EnterEffectAlias) == 0x0070);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, AlwaysActiveEffectAlias) == 0x0088);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, DeadCountVolumeInfo) == 0x00A0);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, EffectVolumeProperty) == 0x00B0);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, SaveType) == 0x00C8);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, ResetType) == 0x00C9);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, ResetTargetAlias) == 0x00CC);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, ResetTargetState) == 0x00D8);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, Description) == 0x00F0);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, ZoneAliasController) == 0x0100);
static_assert(offsetof(USBToolDataNode_ZoneEffectVolume, EffectAliasController) == 0x0108);
static_assert(offsetof(FSBZoneEnvTagProperty, TagName) == 0x0000);
static_assert(offsetof(FSBZoneEnvTagProperty, EffectList) == 0x0008);
static_assert(offsetof(FSBZoneEnvTagProperty, ZoneEventList) == 0x0018);
static_assert(offsetof(FSBZoneEnvTagProperty, ConditionGroup) == 0x0028);
static_assert(offsetof(FSBZoneEnvTagProperty, RewardGroup) == 0x0040);
static_assert(offsetof(FSBZoneEnvTagProperty, RewardGroupIndex) == 0x0058);
static_assert(offsetof(FSBZoneEnvTagProperty, ProgressTargetTagName) == 0x0080);
static_assert(offsetof(FSBZoneEnvTagProperty, CasterShowData) == 0x0088);
static_assert(offsetof(FSBZoneEnvProgressNotifyData, ZoneEventList) == 0x0008);
static_assert(offsetof(FSBZoneEnvProgressProperty, ProgressNotify) == 0x0008);
static_assert(offsetof(FSBZoneEnvProgressProperty, NotifyFireType) == 0x0018);
static_assert(offsetof(USBToolDataNode_ZoneEnv, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZoneEnv, EnvType) == 0x0054);
static_assert(offsetof(USBToolDataNode_ZoneEnv, EnvTagProperty) == 0x0058);
static_assert(offsetof(USBToolDataNode_ZoneEnv, RewardBucketType) == 0x0068);
static_assert(offsetof(USBToolDataNode_ZoneEnv, RewardOverrideSaveType) == 0x0069);
static_assert(offsetof(USBToolDataNode_ZoneEnv, RewardGroupSpawnFormation) == 0x0070);
static_assert(offsetof(USBToolDataNode_ZoneEnv, EnvObjectMaterial) == 0x0078);
static_assert(offsetof(USBToolDataNode_ZoneEnv, ActiveEnterEvents) == 0x00A8);
static_assert(offsetof(USBToolDataNode_ZoneEnv, ActiveLeaveEvents) == 0x00B8);
static_assert(offsetof(USBToolDataNode_ZoneEnv, ProgressMaxValue) == 0x00C8);
static_assert(offsetof(USBToolDataNode_ZoneEnv, ProgressInfo) == 0x00D8);
static_assert(offsetof(USBToolDataNode_ZoneEnv, TriggerCondition) == 0x00EC);
static_assert(offsetof(USBToolDataNode_ZoneEnv, TriggerTrueEvents) == 0x0108);
static_assert(offsetof(USBToolDataNode_ZoneEnv, TriggerFalseEvents) == 0x0118);
static_assert(offsetof(USBToolDataNode_ZoneEnv, TrueEnvState) == 0x0128);
static_assert(offsetof(USBToolDataNode_ZoneEnv, FalseEnvState) == 0x0130);
static_assert(offsetof(USBToolDataNode_ZoneEnv, InteractionGraph) == 0x0138);
static_assert(offsetof(USBToolDataNode_ZoneEnv, CampType) == 0x0179);
static_assert(offsetof(USBToolDataNode_ZoneEnv, CampObjectType) == 0x017A);
static_assert(offsetof(USBToolDataNode_ZoneEnv, PuzzleCompareData) == 0x0180);
static_assert(offsetof(USBToolDataNode_ZoneEnv, PuzzleDataType) == 0x0190);
static_assert(offsetof(USBToolDataNode_ZoneEnv, PuzzleEq) == 0x0191);
static_assert(offsetof(USBToolDataNode_ZoneEnv, ScanDisplayType) == 0x0192);
static_assert(offsetof(USBToolDataNode_ZoneEnv, NikkeDefenseArea_EnemyEnter_Events) == 0x0198);
static_assert(offsetof(USBToolDataNode_ZoneEnv, NikkeDefenseArea_EnemyEmpty_Events) == 0x01A8);
static_assert(offsetof(USBToolDataNode_ZoneEnv, Description) == 0x01B8);
static_assert(offsetof(USBToolDataNode_ZoneEvent, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZoneEvent, EventType) == 0x0054);
static_assert(offsetof(USBToolDataNode_ZoneEvent, RefTableAlias) == 0x0058);
static_assert(offsetof(USBToolDataNode_ZoneEvent, EventCondition) == 0x0070);
static_assert(offsetof(USBToolDataNode_ZoneEvent, EventConditionGroup) == 0x0088);
static_assert(offsetof(USBToolDataNode_ZoneEvent, EventConditionCheckType) == 0x00A0);
static_assert(offsetof(USBToolDataNode_ZoneEvent, FinishEvents) == 0x00B8);
static_assert(offsetof(USBToolDataNode_ZoneEvent, AddEventList) == 0x00C8);
static_assert(offsetof(USBToolDataNode_ZoneEvent, Description) == 0x00D8);
static_assert(offsetof(FSBJsonEffectAlias, Alias) == 0x0000);
static_assert(offsetof(FSBZoneEventActorProperty, RewardGroupAlias) == 0x0004);
static_assert(offsetof(FSBZoneEventActorProperty, RewardGroupIndex) == 0x001C);
static_assert(offsetof(FSBZoneEventActorProperty, RewardBucketType) == 0x0040);
static_assert(offsetof(FSBZoneEventActorProperty, EffectAlias) == 0x0044);
static_assert(offsetof(FSBZoneEventActorProperty, ZoneEventAlias) == 0x005C);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, CustomEffectValue) == 0x0060);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, CustomEffectValueByFireElement) == 0x0070);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, EventStepProperty) == 0x0090);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, DestructionEventEffectAlias) == 0x00BC);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, DestructionEventRewardGroupAlias) == 0x00D4);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, DestructionEventRewardGroupIndex) == 0x00EC);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, DestructionEvent_RewardBucketType) == 0x0110);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, DestructionEvent_RewardOverrideSaveType) == 0x0111);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, DestructionEventZoneEventAlias) == 0x0114);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, DestructionEventZoneEventAliasArray) == 0x0130);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, DestructionEventEffectAliasArray) == 0x0140);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, RewardGroupSpawnFormation) == 0x0150);
static_assert(offsetof(USBToolDataNode_ZoneEventActor, Description) == 0x0158);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SpawnPointName) == 0x0054);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, InitActivate) == 0x005C);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, CharacterAlias) == 0x0060);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SpawnType) == 0x0070);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SpawnRotationType) == 0x0071);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SpawnZone) == 0x0074);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SpawnGroupRuleAlias) == 0x008C);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, TransitStayZoneSaveType) == 0x0097);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SaveType) == 0x0098);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SaveSubProperty) == 0x0099);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SpawnRuleType) == 0x009A);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, KeepObjResetTransformType) == 0x00A5);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, EventOnSpawning) == 0x00C0);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, EventOnDead) == 0x00D0);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, EventOnBattle) == 0x00E0);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, EventFirstTimeOnBattle) == 0x00F0);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, ObjectMaterial) == 0x0100);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, PathWay) == 0x0128);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, PathWayAlias) == 0x013C);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, RewardGroup) == 0x0154);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, RewardGroupIndex) == 0x016C);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, RewardSpawnBucketType) == 0x0190);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, RewardOverrideSaveType) == 0x0191);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, TagName) == 0x0194);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, AIGroupAlias) == 0x01A0);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, AIGroupName) == 0x01B8);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, MetaAIAlias) == 0x01C4);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, MetaAI_InitThink) == 0x01DC);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, MetaAI_SpecialBehaviorTag) == 0x01E0);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, InteractionGraphAsset) == 0x01E8);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, InteractionGraph) == 0x0210);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, AdjustInteractTargetPosType) == 0x0238);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, OwnerRotationType) == 0x0239);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, FormationData) == 0x0240);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, CheckAchievements) == 0x0250);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SpawnConditions) == 0x0260);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, ConditionTriggerList) == 0x0278);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SpawnShow) == 0x0288);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, ShopData) == 0x02B8);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SpawnEffectList) == 0x02C8);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, PuzzleInputText1) == 0x02D8);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, PuzzleInputText2) == 0x02F0);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, PuzzleInputText3) == 0x0308);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, PuzzleInputText4) == 0x0320);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, PuzzleInputTextList5) == 0x0338);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, Description) == 0x0348);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, SpawnPosition) == 0x0358);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, WorldMapDisplayType) == 0x0364);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, WorldMapDisplayTitle) == 0x0368);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, WorldMapDisplayDesc) == 0x0378);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, WorldMapDisplayConditionGroup) == 0x0388);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, WorldMapIconTag) == 0x0390);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, InteractionRelevantType) == 0x039C);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, InteractionDisable_Condition) == 0x03A8);
static_assert(offsetof(USBToolDataNode_ZoneEventCharacterSpawn, InteractionDisable_ConditionGroup) == 0x03B8);
static_assert(offsetof(FSBZoneEnvTagEvent, StateTagName) == 0x0000);
static_assert(offsetof(FSBZoneEnvTagEvent, EventList) == 0x0008);
static_assert(offsetof(FSBZoneEnvProgressInitProperty, NotifyFireType) == 0x000C);
static_assert(offsetof(FSBZoneEnvProgressInitProperty, ProgressNotify) == 0x0010);
static_assert(offsetof(FSBZoneEnvRewardGroupInfo, EnvStateTagName) == 0x0000);
static_assert(offsetof(FSBZoneEnvRewardGroupInfo, RewardGroupAlias) == 0x0008);
static_assert(offsetof(FSBZoneEnvRewardGroupInfo, RewardGroupIndex) == 0x0020);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, TagName) == 0x0000);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, TransitOut_TheaterData) == 0x0008);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, TransitOut_LevelSequence) == 0x0030);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, TransitOut_PlayTemplate) == 0x0058);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, TransitOut_AttachTagNames) == 0x0068);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, Active_TheaterData) == 0x0078);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, Active_LevelSequence) == 0x00A0);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, Active_PlayTemplate) == 0x00C8);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, Active_AttachTagNames) == 0x00D8);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, Loop_LevelSequence) == 0x00E8);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, Loop_PlayTemplate) == 0x0110);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, Loop_AttachTagNames) == 0x0120);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, PlayTransformOwnerType) == 0x0133);
static_assert(offsetof(FSBZoneEnvSequenceGroupInfo, ToTargetStateInfoList) == 0x0138);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, ZoneAlias) == 0x0054);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, ZoneAliasList) == 0x0070);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, EnvActorName) == 0x0080);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, EnvBlueprint) == 0x0088);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, SpawnConditionGroup) == 0x0090);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, EnvAlias) == 0x00A8);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, InitActivate) == 0x00C0);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, InitEnvActiveState) == 0x00C1);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, EventsByStateTag) == 0x00C8);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, InitStateTag) == 0x00D8);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, SaveType) == 0x00E1);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, ResetFilterType) == 0x00E3);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, ResetFilterCondition) == 0x00E4);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, EventConditionGroup) == 0x0114);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, SpawnPosition) == 0x0130);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, WorldMapDisplayType) == 0x013C);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, WorldMapDisplayTitle) == 0x0140);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, WorldMapDisplayDesc) == 0x0150);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, WorldMapDisplayConditionGroup) == 0x0160);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, WorldMapIconTag) == 0x0168);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, InteractionRelevantType) == 0x0174);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, ProgressInit) == 0x0180);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, TriggerCondition) == 0x0194);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, TriggerTrueEvents) == 0x01B0);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, TriggerFalseEvents) == 0x01C0);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, TrueEnvState) == 0x01D0);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, FalseEnvState) == 0x01D8);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, TargetCamp) == 0x01E0);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, ActiveEnterEvents) == 0x01F8);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, ActiveLeaveEvents) == 0x0208);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, LinkEnvSpawnList) == 0x0218);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, ShopData) == 0x0230);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, InteractionGraphAsset) == 0x0248);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, RewardSpawnBucketType) == 0x0270);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, RewardOverrideSaveType) == 0x0271);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, RewardGroupSpawnFormation) == 0x0278);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, RewardGroupList) == 0x0280);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, Description) == 0x0290);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, PuzzleCompareData) == 0x02A0);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, PuzzleDataType) == 0x02B0);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, PuzzleEq) == 0x02B1);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, PuzzleInputText1) == 0x02B4);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, PuzzleInputText2) == 0x02CC);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, PuzzleInputText3) == 0x02E4);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, PuzzleInputText4) == 0x02FC);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, PuzzleInputTextList5) == 0x0318);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, SequenceInfoList) == 0x0328);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, ScanOverrideStencilValue) == 0x0338);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, InteractionDisable_Condition) == 0x0340);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, InteractionDisable_ConditionGroup) == 0x0350);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, NikkeLostArticle) == 0x0368);
static_assert(offsetof(USBToolDataNode_ZoneEventEnvSpawn, NikkeFriendlyNpc) == 0x0380);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, SpawnPointName) == 0x0054);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, SpawnItemAlias) == 0x005C);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, SpawnInfoAlias) == 0x0078);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, ControlType) == 0x0090);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, SpawnType) == 0x0091);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, SpawnWorld) == 0x0094);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, SpawnZone) == 0x00AC);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, SpawnItemBucketType) == 0x00C4);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, SaveType) == 0x00C6);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, EventorType) == 0x00C7);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, CheckAchievements) == 0x00C8);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, AcquireZoneEvents) == 0x00D8);
static_assert(offsetof(USBToolDataNode_ZoneEventItem, Description) == 0x00F8);
static_assert(offsetof(USBToolDataNode_ZoneLayer, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZoneLayer, LayerName) == 0x0054);
static_assert(offsetof(USBToolDataNode_ZoneLayer, ZoneList) == 0x0060);
static_assert(offsetof(USBToolDataNode_ZoneLayer, Description) == 0x0070);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, PhaseEventType) == 0x0054);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, PhaseEventCompleteType) == 0x0055);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, NextPhaseEventName) == 0x005C);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, EventCondition) == 0x0068);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, EventConditionGroup) == 0x0080);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, Description) == 0x00A0);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, EventList) == 0x00E0);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, StartEventList) == 0x00F0);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, CompleteEventList) == 0x0100);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, ActiveZoneEventList) == 0x0110);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, StartZoneEventList) == 0x0120);
static_assert(offsetof(USBToolDataNode_ZonePhaseEvent, CompleteZoneEventList) == 0x0130);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, Alias) == 0x0048);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, ZoneAlias) == 0x0054);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, InitActivate) == 0x006C);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, TriggerType) == 0x006D);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, EnterEvent) == 0x0070);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, LeaveEvent) == 0x0080);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, Condition) == 0x0090);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, ConditionGroup) == 0x00A8);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, DoingType) == 0x00C4);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, LevelTargetFilter) == 0x00D0);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, SaveType) == 0x00E8);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, IgnoreFilter) == 0x00EB);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, ConditionObjectMaterial) == 0x00F0);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, VolumeBoxExtent) == 0x0118);
static_assert(offsetof(USBToolDataNode_ZoneTrigger, Description) == 0x0128);
static_assert(offsetof(USBTransitAnimGroupData, TransitAnimGroupMap) == 0x0030);
static_assert(offsetof(USBTypeWriterWidget, LineText) == 0x0280);
static_assert(offsetof(USBTypeWriterWidget, CurrentLine) == 0x02A0);
static_assert(offsetof(USBUIDefinitionData, WidgetPath) == 0x0038);
static_assert(offsetof(USBUIDefinitionData, LogicType) == 0x0060);
static_assert(offsetof(USBUIItemSettingsData, colorCommon) == 0x0030);
static_assert(offsetof(USBUIItemSettingsData, colorUncommon) == 0x0034);
static_assert(offsetof(USBUIItemSettingsData, colorRare) == 0x0038);
static_assert(offsetof(USBUIItemSettingsData, colorEpic) == 0x003C);
static_assert(offsetof(USBUIItemSettingsData, colorLegendary) == 0x0040);
static_assert(offsetof(ASBUtilLevelNotice, textNotice) == 0x02C8);
static_assert(offsetof(ASBUtilLevelNotice, textNoticeColor) == 0x02D8);
static_assert(offsetof(USBUtilLevelNoticeWidget, noticeText) == 0x0280);
static_assert(offsetof(USBUtilLevelNoticeWidget, noticeTextColor) == 0x0298);
static_assert(offsetof(USBUtilLevelNoticeWidget, TextBlockNotice) == 0x02C0);
static_assert(offsetof(USBVertexAnimStaticMeshComponent, AnimParameterName) == 0x05E0);
static_assert(offsetof(USBVertexAnimStaticMeshComponent, FadeParameterName) == 0x05F8);
static_assert(offsetof(FSBVFXParticle, PSTemplate) == 0x0000);
static_assert(offsetof(FSBVFXParticle, RelativeLocation) == 0x0008);
static_assert(offsetof(FSBVFXParticle, Rotation) == 0x0014);
static_assert(offsetof(ASBVFXVolume, ParticlesAttachToCamera) == 0x0320);
static_assert(offsetof(ASBVFXVolume, SectorID) == 0x0334);
static_assert(offsetof(ASBVFXVolume, LevelObjOrigin) == 0x033C);
static_assert(offsetof(ASBVFXVolume, LevelObjExtent) == 0x0348);
static_assert(offsetof(USBVibrationComponent, VibrationSet) == 0x0260);
static_assert(offsetof(USBVibrationComponent, HapticAttenuationSetting) == 0x0278);
static_assert(offsetof(USBVibrationComponent, ForceFeedbackAttenuation) == 0x0288);
static_assert(offsetof(USBVibrationComponent, HapticComponent) == 0x02B0);
static_assert(offsetof(USBVibrationComponent, ForceFeedbackComponent) == 0x02B8);
static_assert(offsetof(FSBVibrationSectionData, VibrationSet) == 0x0000);
static_assert(offsetof(USBVibrationSection, Data) == 0x00E8);
static_assert(offsetof(USBVibrationSection, HapticVolume) == 0x0108);
static_assert(offsetof(USBVibrationSection, ForceFeedbackIntensity) == 0x01A8);
static_assert(offsetof(USBVibrationSection, AttachActorData) == 0x0248);
static_assert(offsetof(USBVibrationSet, ForceFeedback) == 0x0030);
static_assert(offsetof(USBVibrationSet, HapticSound) == 0x0038);
static_assert(offsetof(USBVibrationTrack, Sections) == 0x0080);
static_assert(offsetof(ASBWaterVolume, WaterPlaneActor) == 0x0508);
static_assert(offsetof(ASBWaterVolume, Type) == 0x0510);
static_assert(offsetof(ASBWaterVolume, SectorID) == 0x0514);
static_assert(offsetof(ASBWaterVolume, RewardGroup) == 0x051C);
static_assert(offsetof(ASBWaterVolume, PhysMaterial) == 0x0528);
static_assert(offsetof(ASBWaterVolume, LevelObjOrigin) == 0x0530);
static_assert(offsetof(ASBWaterVolume, LevelObjExtent) == 0x053C);
static_assert(offsetof(FSBWayPointEventInfo, ZoneEvent) == 0x0004);
static_assert(offsetof(ASBWayPointActor, ZoneEventList) == 0x02F0);
static_assert(offsetof(ASBWayPointActor, MoveState) == 0x0300);
static_assert(offsetof(ASBWayPointActor, ReturnMoveState) == 0x0301);
static_assert(offsetof(ASBWayPointActor, InterpType) == 0x0302);
static_assert(offsetof(ASBWayPointActor, EntryType) == 0x0303);
static_assert(offsetof(ASBWayPointActor, NextPathWayAlias) == 0x030C);
static_assert(offsetof(ASBWayPointActor, StopToMoveRandEvents) == 0x0320);
static_assert(offsetof(ASBWayPointActor, PathWayAlias) == 0x0330);
static_assert(offsetof(ASBWayPointActor, SplineComponent) == 0x0350);
static_assert(offsetof(ASBWayPointActor, TurnType) == 0x0364);
static_assert(offsetof(ASBWayPointActor, PreWayPoint) == 0x0380);
static_assert(offsetof(ASBWayPointActor, NextWayPoint) == 0x0388);
static_assert(offsetof(USBWidgetComponent, Space) == 0x0560);
static_assert(offsetof(USBWidgetComponent, TimingPolicy) == 0x0561);
static_assert(offsetof(USBWidgetComponent, WidgetClass) == 0x0568);
static_assert(offsetof(USBWidgetComponent, DrawSize) == 0x0570);
static_assert(offsetof(USBWidgetComponent, CurrentDrawSize) == 0x0588);
static_assert(offsetof(USBWidgetComponent, Pivot) == 0x0594);
static_assert(offsetof(USBWidgetComponent, OwnerPlayer) == 0x05A0);
static_assert(offsetof(USBWidgetComponent, BackgroundColor) == 0x05A8);
static_assert(offsetof(USBWidgetComponent, TintColorAndOpacity) == 0x05B8);
static_assert(offsetof(USBWidgetComponent, BlendMode) == 0x05CC);
static_assert(offsetof(USBWidgetComponent, Widget) == 0x05D0);
static_assert(offsetof(USBWidgetComponent, BodySetup) == 0x05F8);
static_assert(offsetof(USBWidgetComponent, TranslucentMaterial) == 0x0600);
static_assert(offsetof(USBWidgetComponent, TranslucentMaterial_OneSided) == 0x0608);
static_assert(offsetof(USBWidgetComponent, OpaqueMaterial) == 0x0610);
static_assert(offsetof(USBWidgetComponent, OpaqueMaterial_OneSided) == 0x0618);
static_assert(offsetof(USBWidgetComponent, MaskedMaterial) == 0x0620);
static_assert(offsetof(USBWidgetComponent, MaskedMaterial_OneSided) == 0x0628);
static_assert(offsetof(USBWidgetComponent, RenderTarget) == 0x0630);
static_assert(offsetof(USBWidgetComponent, MaterialInstance) == 0x0638);
static_assert(offsetof(USBWidgetComponent, SharedLayerName) == 0x0644);
static_assert(offsetof(USBWidgetComponent, GeometryMode) == 0x0650);
static_assert(offsetof(ASBWindVolume, LevelObjOrigin) == 0x0318);
static_assert(offsetof(ASBWindVolume, LevelObjExtent) == 0x0324);
static_assert(offsetof(ASBWindVolume, Direction) == 0x0354);
static_assert(offsetof(ASBWindVolume, Strength) == 0x0378);
static_assert(offsetof(ASBWorldCompositionStreamingBlockingVolume, LevelObjOrigin) == 0x0318);
static_assert(offsetof(ASBWorldCompositionStreamingBlockingVolume, LevelObjExtent) == 0x0324);
static_assert(offsetof(ASBWorldHeightTexVolume, strGeneratedTexturePackage) == 0x0348);
static_assert(offsetof(ASBWorldHeightTexVolume, strGeneratedTextureName) == 0x0358);
static_assert(offsetof(ASBWorldHeightTexVolume, SectorID) == 0x0380);
static_assert(offsetof(ASBWorldHeightTexVolume, LevelObjOrigin) == 0x0388);
static_assert(offsetof(ASBWorldHeightTexVolume, LevelObjExtent) == 0x0394);
static_assert(offsetof(ASBWorldMapVolume, MapAlias) == 0x0318);
static_assert(offsetof(FSBZoneEnvProgressInfo, ProgressSpline) == 0x0000);
static_assert(offsetof(FSBZoneEnvProgressInfo, InterpGraph) == 0x0008);
static_assert(offsetof(FSBEnvZoneProperty, EnvAlias) == 0x0004);
static_assert(offsetof(FSBEnvZoneProperty, ZoneAlias) == 0x000C);
static_assert(offsetof(FSBEnvStateProperty, EnvStateTagName) == 0x0000);
static_assert(offsetof(FSBEnvStateProperty, LevelSequence_Active) == 0x0008);
static_assert(offsetof(FSBEnvStateProperty, PlayType_Active) == 0x0010);
static_assert(offsetof(FSBEnvStateProperty, ActiveAttachTagName) == 0x0020);
static_assert(offsetof(FSBEnvStateProperty, LevelSequence_OutTransit) == 0x0030);
static_assert(offsetof(FSBEnvStateProperty, PlayType_OutTransit) == 0x0038);
static_assert(offsetof(FSBEnvStateProperty, TransitAttachTagName) == 0x0048);
static_assert(offsetof(ASBZoneEnvActor, StateTagName) == 0x0334);
static_assert(offsetof(ASBZoneEnvActor, ScanEffectStateTagName) == 0x033C);
static_assert(offsetof(ASBZoneEnvActor, ProgressInfoList) == 0x0350);
static_assert(offsetof(ASBZoneEnvActor, ZoneProperty) == 0x0360);
static_assert(offsetof(ASBZoneEnvActor, EnvActorName) == 0x0370);
static_assert(offsetof(ASBZoneEnvActor, EnvStateProperty) == 0x0378);
static_assert(offsetof(ASBZoneEnvActor, InteractAdjustPosType) == 0x0389);
static_assert(offsetof(ASBZoneEnvActor, ActiveBoundType) == 0x038A);
static_assert(offsetof(ASBZoneEnvActor, BoundExtent) == 0x038C);
static_assert(offsetof(ASBZoneEnvActor, MainPrimitiveComponentName) == 0x0398);
static_assert(offsetof(ASBZoneEnvActor, LevelSequenceBindActors) == 0x03A0);
static_assert(offsetof(ASBZoneEnvActor, CampRespawnActor) == 0x03D8);
static_assert(offsetof(ASBZoneEnvActor, LevelSequenceTagName) == 0x03E4);
static_assert(offsetof(ASBZoneEnvActor, SoundSet) == 0x03F0);
static_assert(offsetof(ASBZoneEnvActor, MeshClipingApplyType1) == 0x0401);
static_assert(offsetof(ASBZoneEnvActor, MeshClipingApplyType2) == 0x0402);
static_assert(offsetof(ASBZoneEnvActor, MeshClipingApplyType3) == 0x0403);
static_assert(offsetof(ASBZoneEnvActor, MeshClipingApplyType4) == 0x0404);
static_assert(offsetof(ASBZoneEnvActor, BindZoneAlias) == 0x0408);
static_assert(offsetof(ASBZoneEnvActor, EnvSpawnAlias) == 0x0410);
static_assert(offsetof(ASBZoneEnvActor, EnvSkeletalMeshComponent) == 0x0418);
static_assert(offsetof(ASBZoneEnvActor, EnvStaticMeshComponent) == 0x0420);
static_assert(offsetof(ASBZoneEnvActor, PhysicsEnablePrimitiveComponent) == 0x0428);
static_assert(offsetof(ASBZoneEnvActor, PhysicCompInitRelativeLocation) == 0x0430);
static_assert(offsetof(ASBZoneEnvActor, PhysicCompInitRelativeRotation) == 0x043C);
static_assert(offsetof(ASBZoneEnvActor, ProgressValueMap) == 0x0448);
static_assert(offsetof(ASBZoneEnvActor, StateProgressMaxCountMap) == 0x0498);
static_assert(offsetof(ASBZoneEnvActor, OriginComponent) == 0x04F0);
static_assert(offsetof(ASBZoneEnvActor, InteractionPointComponents) == 0x04F8);
static_assert(offsetof(ASBZoneEnvActor, EventMoveDataComponent) == 0x0508);
static_assert(offsetof(ASBZoneEnvActor, QuestMarkerComponent) == 0x0510);
static_assert(offsetof(ASBZoneEnvActor, ActorActiveVolumeNameArray) == 0x0518);
static_assert(offsetof(ASBZoneEnvActor, ActiveLevelSequencePath) == 0x0530);
static_assert(offsetof(ASBZoneEnvActor, LastFloorHitLocation) == 0x0544);
static_assert(offsetof(ASBZoneEnvActor, CachedActorBoundExtents) == 0x0550);
static_assert(offsetof(ASBZoneEnvActor, CachedBeginActorBoundExtents) == 0x055C);
static_assert(offsetof(ASBZoneEnvActor, MeshClipingBoundCompList) == 0x0570);
static_assert(offsetof(ASBZoneEnvActor, MeshClipingExclusivePlaneCompList) == 0x0580);
static_assert(offsetof(ASBZoneEnvActor, SectorInfo) == 0x05A4);
static_assert(offsetof(ASBZoneEnvActor, ControlInputVector) == 0x067C);
static_assert(offsetof(ASBZoneEnvActor, LocalControlInputVector) == 0x0688);
static_assert(offsetof(ASBZoneEnvActor, LastControlInputVector) == 0x0694);
static_assert(offsetof(ASBZoneEnvActor, LocalLastControlInputVector) == 0x06A0);
static_assert(offsetof(ASBZoneEnvActor, InitCollisionAtRootComponent) == 0x06B4);
static_assert(offsetof(ASBZoneEnvActor, InertiaTensorScale_HighFrame) == 0x06CC);
static_assert(offsetof(ASBZoneEnvActor, ControlInertiaTensorScaleTargetObjectName) == 0x06EC);
static_assert(offsetof(ASBZoneEnvActor, ControlInertiaTensorScaleTargetObject) == 0x06F4);
static_assert(offsetof(ASBZoneEnvBoxActor, ZoneEnvRoot) == 0x0700);
static_assert(offsetof(ASBZoneEnvSphereActor, ZoneEnvRoot) == 0x0700);
static_assert(offsetof(USBZoneEnvGrabComponent, GrabSet) == 0x00C0);
static_assert(offsetof(USBZoneEnvGrabComponent, ZoneEnvOwner) == 0x00FC);
static_assert(offsetof(USBZoneEnvGrabComponent, GrabHandArray) == 0x0118);
static_assert(offsetof(USBZoneEnvGrabComponent, Target) == 0x0128);
static_assert(offsetof(USBZoneEnvGrabComponent, InputLocalVector) == 0x0134);
static_assert(offsetof(USBZoneEnvGrabSet, NonAccelSpeedEasingFunc) == 0x0040);
static_assert(offsetof(USBZoneEnvGrabSet, BlendSpace) == 0x0058);
static_assert(offsetof(USBZoneEnvGrabSet, AnimSpeedAccelCurve) == 0x0068);
static_assert(offsetof(USBZoneEnvGrabSet, TransitGrabStart) == 0x0070);
static_assert(offsetof(USBZoneEnvGrabSet, CurveGrabIKStart) == 0x0098);
static_assert(offsetof(USBZoneEnvGrabSet, TransitGrabEnd) == 0x00A8);
static_assert(offsetof(USBZoneEnvGrabSet, CurveGrabIKEnd) == 0x00D0);
static_assert(offsetof(USBZoneEnvMovementComponent, MovementMode) == 0x0150);
static_assert(offsetof(USBZoneEnvMovementComponent, NonAccelSpeedEasingFunc) == 0x0164);
static_assert(offsetof(USBZoneEnvMovementComponent, DefaultBoxExtend) == 0x0170);
static_assert(offsetof(USBZoneEnvMovementComponent, ZoneEnvOwner) == 0x01A8);
static_assert(offsetof(USBZoneEnvMovementComponent, CurrentFloorHit) == 0x01B0);
static_assert(offsetof(USBZoneEnvMovementComponent, PrevFloorHit) == 0x023C);
static_assert(offsetof(USBZoneEnvMovementComponent, BaseComponent) == 0x02C8);
static_assert(offsetof(USBZoneEnvMovementComponent, BaseLocationCurrent) == 0x02D0);
static_assert(offsetof(USBZoneEnvMovementComponent, BaseLocationPrevious) == 0x02DC);
static_assert(offsetof(USBZoneEnvMovementComponent, BaseRotationCurrent) == 0x02E8);
static_assert(offsetof(USBZoneEnvMovementComponent, BaseRotationPrevious) == 0x02F4);
static_assert(offsetof(USBZoneEnvMovementComponent, ForwardDirection) == 0x0300);
static_assert(offsetof(USBZoneEnvMovementComponent, RightDirection) == 0x030C);
static_assert(offsetof(USBZoneEnvMovementComponent, LastAcceleration) == 0x031C);
static_assert(offsetof(USBZoneEnvMovementComponent, LastValidLocation) == 0x0340);
static_assert(offsetof(USBZoneEnvMovementComponent, LastValidRotation) == 0x0350);
static_assert(offsetof(FSBDestructionFromActorAttackTriggerInfo, WeightType) == 0x0001);
static_assert(offsetof(FSBDestructionFromActorAttackTriggerInfo, ValidTribeArray) == 0x0008);
static_assert(offsetof(FSBDestructionFromActorRangedAttackTriggerInfo, WeightType) == 0x0001);
static_assert(offsetof(FSBDestructionFromActorRangedAttackTriggerInfo, ValidTribeArray) == 0x0008);
static_assert(offsetof(FSBDestructionFromActorMoveTriggerInfo, WeightType) == 0x0001);
static_assert(offsetof(FSBDestructionFromActorMoveTriggerInfo, ValidTribeArray) == 0x0008);
static_assert(offsetof(FSBDestructionFromActorRuleMoveTriggerInfo, WeightType) == 0x0001);
static_assert(offsetof(FSBDestructionFromActorRuleMoveTriggerInfo, ValidTribeArray) == 0x0008);
static_assert(offsetof(USBZoneEventActorTriggerInfo, ActorAttackTriggerInfo) == 0x0030);
static_assert(offsetof(USBZoneEventActorTriggerInfo, ActorRangedAttackTriggerInfo) == 0x0048);
static_assert(offsetof(USBZoneEventActorTriggerInfo, ActorMoveTriggerInfo) == 0x0060);
static_assert(offsetof(USBZoneEventActorTriggerInfo, ActorRuleMoveTriggerInfo) == 0x0078);
static_assert(offsetof(USBZoneEventActorTriggerInfo, TriggerTagArray) == 0x0090);
static_assert(offsetof(FSBResetZoneCollisionUpdateInfo, RestoreCollisionType) == 0x0000);
static_assert(offsetof(FSBResetZoneCollisionUpdateInfo, MeshComponent) == 0x0008);
static_assert(offsetof(ASBZoneEventActor, CollisionGroupComponent) == 0x0310);
static_assert(offsetof(ASBZoneEventActor, DummyRoot) == 0x0318);
static_assert(offsetof(ASBZoneEventActor, ZoneEventActorRootComponentName) == 0x0320);
static_assert(offsetof(ASBZoneEventActor, ZoneEventActorTableAlias) == 0x0328);
static_assert(offsetof(ASBZoneEventActor, ZoneEventActorSaveType) == 0x0330);
static_assert(offsetof(ASBZoneEventActor, RootTransformOffsetPosition) == 0x0334);
static_assert(offsetof(ASBZoneEventActor, ZLockPrimitiveComponentName) == 0x0350);
static_assert(offsetof(ASBZoneEventActor, CountEventStepArray) == 0x03A8);
static_assert(offsetof(ASBZoneEventActor, MainPrimitiveComponentNameBeforeDestruction) == 0x03B8);
static_assert(offsetof(ASBZoneEventActor, MainPrimitiveComponentNameAfterDestruction) == 0x03C8);
static_assert(offsetof(ASBZoneEventActor, TriggerInfo) == 0x03E0);
static_assert(offsetof(ASBZoneEventActor, SpecialTag) == 0x03E8);
static_assert(offsetof(ASBZoneEventActor, DestructionCollisionResponse) == 0x03F0);
static_assert(offsetof(ASBZoneEventActor, ElementType) == 0x03F1);
static_assert(offsetof(ASBZoneEventActor, DestructionShapeComponentsArray) == 0x0408);
static_assert(offsetof(ASBZoneEventActor, DestructibleComponent) == 0x0418);
static_assert(offsetof(ASBZoneEventActor, InitMainCompCollisionEnabled) == 0x0425);
static_assert(offsetof(ASBZoneEventActor, InitMainCompLocation) == 0x0428);
static_assert(offsetof(ASBZoneEventActor, InitMainCompRotation) == 0x0434);
static_assert(offsetof(ASBZoneEventActor, ResetZoneCollisionUpdateMeshList) == 0x0448);
static_assert(offsetof(ASBZoneEventActor, LastExistFloorHitLocation) == 0x045C);
static_assert(offsetof(ASBZoneEventActor, FloorCheckPrimitiveComponent) == 0x0468);
static_assert(offsetof(ASBZoneEventActor, FloorCheckMoveHistroy) == 0x0470);
static_assert(offsetof(ASBZoneEventActor, CachedActorBoundExtents) == 0x0480);
static_assert(offsetof(ASBZoneTriggerActor, TriggerAlias) == 0x02F4);
static_assert(offsetof(ASBZoneTriggerActor, SBTriggerParentActor) == 0x0300);
static_assert(offsetof(ASBZoneTriggerActor, MinCameraRotationRange) == 0x030C);
static_assert(offsetof(ASBZoneTriggerActor, MaxCameraRotationRange) == 0x0318);
static_assert(offsetof(ASBZoneTriggerActor, ZoneAlias) == 0x0324);
static_assert(offsetof(ASBZoneTriggerActor, BoxExtent) == 0x0330);
static_assert(offsetof(ASBZoneTriggerActor, ConditionGroup) == 0x033C);
static_assert(offsetof(ASBZoneTriggerActor, SubZoneEvents) == 0x0360);
static_assert(offsetof(ASBZoneTriggerActor, CaptureRelativeParentTM) == 0x0380);
static_assert(offsetof(ASBZoneTriggerActor, RelativeParentTM) == 0x03B0);
static_assert(offsetof(ASBZoneTriggerActor, DoingType) == 0x03E4);
static_assert(offsetof(ASBZoneTriggerActor, BindZoneAlias) == 0x03F0);
static_assert(offsetof(ASBZoneTriggerActor, BindTriggerAlias) == 0x03F8);
static_assert(offsetof(ASBZoneTriggerActor, TriggerType) == 0x0400);
static_assert(offsetof(ASBZoneTriggerActor, ActorSectorInfo) == 0x0404);
static_assert(offsetof(ASBZoneVolume, SectorID) == 0x031C);
static_assert(offsetof(ASBZoneVolume, ZoneAlias) == 0x0324);
static_assert(offsetof(ASBZoneVolume, LevelObjOrigin) == 0x0358);
static_assert(offsetof(ASBZoneVolume, LevelObjExtent) == 0x0364);
static_assert(offsetof(FSBWidgetNavigationInfo, LeftTarget) == 0x0000);
static_assert(offsetof(FSBWidgetNavigationInfo, RightTarget) == 0x0008);
static_assert(offsetof(FSBWidgetNavigationInfo, UpTarget) == 0x0010);
static_assert(offsetof(FSBWidgetNavigationInfo, DownTarget) == 0x0018);
static_assert(offsetof(FSBActorCustomRecord, NameRecords) == 0x0008);
static_assert(offsetof(FSBActorProperty, WeightType) == 0x0214);
static_assert(offsetof(FSBActorProperty, RewardGroupAlias) == 0x022C);
static_assert(offsetof(FSBActorProperty, RewardSpawnBucketType) == 0x0234);
static_assert(offsetof(FSBActorProperty, Tribe) == 0x0250);
static_assert(offsetof(FSBActorProperty, ActorType) == 0x0258);
static_assert(offsetof(FSBActorProperty, Tags) == 0x0260);
static_assert(offsetof(FSBActorProperty, Flag) == 0x0270);
static_assert(offsetof(FSBActorProperty, LevelArray) == 0x0278);
static_assert(offsetof(FSBActorProperty, AdditiveSkillDamageRateMap) == 0x0288);
static_assert(offsetof(FSBActorProperty, Equipment) == 0x02D8);
static_assert(offsetof(FSBActorProperty, CustomRecord) == 0x0328);
static_assert(offsetof(FSBAnimInstanceProxy, AnimSlotSequence) == 0x0770);
static_assert(offsetof(FSBAnimInstanceProxy, AnimSlotSequence_Lower) == 0x0780);
static_assert(offsetof(FSBAnimInstanceProxy, BlendSpaceSlot) == 0x0798);
static_assert(offsetof(FSBAnimInstanceProxy, BlendSpaceSlot_Lower) == 0x07A8);
static_assert(offsetof(FSkelMeshMergeSectionMapping_BP, SectionIDs) == 0x0000);
static_assert(offsetof(FSkelMeshMergeUVTransform, UVTransforms) == 0x0000);
static_assert(offsetof(FSkelMeshMergeUVTransformMapping, UVTransformsPerMesh) == 0x0000);
static_assert(offsetof(FSkeletalMeshMergeParams, MeshSectionMappings) == 0x0000);
static_assert(offsetof(FSkeletalMeshMergeParams, UVTransformsPerMesh) == 0x0010);
static_assert(offsetof(FSkeletalMeshMergeParams, MeshesToMerge) == 0x0020);
static_assert(offsetof(FSkeletalMeshMergeParams, Skeleton) == 0x0038);
static_assert(offsetof(FSBCharacterMoveInfo, LastMovementInputVector) == 0x0000);
static_assert(offsetof(FSBCharacterMoveInfo, LastForwardVector) == 0x000C);
static_assert(offsetof(FSBCharacterMoveInfo, TargetCharacterForward) == 0x0018);
static_assert(offsetof(FSBCharacterMoveInfo, RopeAxisLocation) == 0x0024);
static_assert(offsetof(FSBCharacterMoveInfo, NewMovementMode) == 0x0030);
static_assert(offsetof(FSBCharacterMoveInfo, LastMoveType) == 0x0032);
static_assert(offsetof(FSBCharacterMoveInfo, InputDuration) == 0x0048);
static_assert(offsetof(FSBCharacterMoveInfo, BroadcastMoveType) == 0x0054);
static_assert(offsetof(FSliceSkeletalMeshSliceableBoneData, BoneName) == 0x0000);
static_assert(offsetof(FSliceSkeletalMeshSliceableBoneData, OverrideCapMaterial) == 0x0010);
static_assert(offsetof(FSBCollisionAnimationTransformEditInfo, AnimSequence) == 0x0000);
static_assert(offsetof(FSBCollisionAnimationTransformEditInfo, SocketNameArray) == 0x0008);
static_assert(offsetof(FSBCollisionAnimationTransformEditInfo, SocketNameArrayWithoutConstraint) == 0x0018);
static_assert(offsetof(FSBCollisionAnimationTransformEditInfo, ConstraintBoneName) == 0x0034);
static_assert(offsetof(FSBCollisionAnimationTransformEditInfo, ConstraintRotationBoneName) == 0x003C);
static_assert(offsetof(FSBCollisionAnimationTransformEditInfo, SocketNameArray0) == 0x0048);
static_assert(offsetof(FSBCollisionAnimationTransformEditInfo, ConstraintTranslationBoneName) == 0x0058);
static_assert(offsetof(FSBCollisionAnimationTransformEditInfo, ConstraintRotationBoneName1) == 0x0060);
static_assert(offsetof(FSBNikkeLostArticleTableProperty, ClearNikkeStageAlias) == 0x0018);
static_assert(offsetof(FSBNikkeLostArticleTableProperty, ClearSequencePath) == 0x0028);
static_assert(offsetof(FSBNikkeLostArticleTableProperty, ClearSequenceUITime) == 0x0038);
static_assert(offsetof(FSBNikkeLostArticleTableProperty, ClearRewardGroupAlias) == 0x0048);
static_assert(offsetof(FSBNikkeLostArticleTableProperty, Category) == 0x0050);
static_assert(offsetof(FSBNikkeLostArticleTableProperty, ImageAssetPath) == 0x0058);
static_assert(offsetof(FSBNikkeLostArticleTableProperty, MusicQNRTAssetPath) == 0x0068);
static_assert(offsetof(FSBNikkeLostArticleTableProperty, ItemAlias) == 0x007C);
static_assert(offsetof(FSBNikkeLostArticleTableProperty, DontDetectConditionGroup) == 0x008C);
static_assert(offsetof(FSBArtBookTableProperty, GroupAlias) == 0x0014);
static_assert(offsetof(FSBArtBookTableProperty, TitleStringKey) == 0x0020);
static_assert(offsetof(FSBArtBookTableProperty, ArtistStringKey) == 0x0030);
static_assert(offsetof(FSBArtBookTableProperty, ImagePath) == 0x0040);
static_assert(offsetof(FSBMailBoxGiftTableProperty, TitleStringKey) == 0x0018);
static_assert(offsetof(FSBMailBoxGiftTableProperty, DescStringKey) == 0x0028);
static_assert(offsetof(FSBMailBoxGiftTableProperty, ReceivableConditionGroup) == 0x0038);
static_assert(offsetof(FSBMailBoxGiftTableProperty, EnableMailBoxEnvSpawnList) == 0x0040);
static_assert(offsetof(FSBMailBoxGiftTableProperty, EventGiftAlias) == 0x0050);
static_assert(offsetof(FSBMailBoxGiftTableProperty, MailImagePath) == 0x0058);
static_assert(offsetof(FSBLoadingScreenGameTipTableProperty, Description) == 0x0018);
static_assert(offsetof(FSBLoadingScreenGameTipTableProperty, TipGroup) == 0x0028);
static_assert(offsetof(FSBLoadingScreenGameTipTableProperty, Condition) == 0x0030);
static_assert(offsetof(FSBLoadingScreenGameTipTableProperty, ConditionGroup) == 0x0038);
static_assert(offsetof(FSBLoadingScreenGameTipTableProperty, FileSuffix) == 0x0040);
static_assert(offsetof(FSBTurntableSoundTableProperty, ConditionGroup) == 0x0014);
static_assert(offsetof(FSBTurntableSoundTableProperty, NotifyAchievement) == 0x001C);
static_assert(offsetof(FSBTurntableSoundTableProperty, MusicPath) == 0x0028);
static_assert(offsetof(FSBTurntableSoundTableProperty, NoiseMusicPath) == 0x0038);
static_assert(offsetof(FSBTurntableSoundTableProperty, TitleStringKey) == 0x0048);
static_assert(offsetof(FSBTurntableSoundTableProperty, ImagePath) == 0x0058);
static_assert(offsetof(FSBTurntableSoundTableProperty, QNRTAssetPath) == 0x0068);
static_assert(offsetof(FSBTurntableSoundTableProperty, FileSuffix) == 0x0078);
static_assert(offsetof(FSBKeyMappingRolloverTableProperty, FirstKey) == 0x0014);
static_assert(offsetof(FSBKeyMappingRolloverTableProperty, SecondKey) == 0x001C);
static_assert(offsetof(FSBKeyMappingRolloverTableProperty, FileSuffix) == 0x0024);
static_assert(offsetof(FSBKeyMappingTableProperty, RecommendationStrength) == 0x0014);
static_assert(offsetof(FSBKeyMappingTableProperty, MappingGroup) == 0x0018);
static_assert(offsetof(FSBKeyMappingTableProperty, DuplicateDenyArray) == 0x0020);
static_assert(offsetof(FSBKeyMappingTableProperty, DuplicateAllowArray) == 0x0030);
static_assert(offsetof(FSBKeyMappingTableProperty, DuplicateCombinationKeyAllowArray) == 0x0048);
static_assert(offsetof(FSBKeyMappingTableProperty, ActionNames) == 0x0058);
static_assert(offsetof(FSBKeyMappingTableProperty, AxisNames) == 0x0068);
static_assert(offsetof(FSBKeyMappingTableProperty, AxisScaleType) == 0x0078);
static_assert(offsetof(FSBKeyMappingTableProperty, SlotName) == 0x0080);
static_assert(offsetof(FSBKeyMappingTableProperty, SlotDesc) == 0x0090);
static_assert(offsetof(FSBKeyMappingTableProperty, MoviePath) == 0x00A0);
static_assert(offsetof(FSBKeyMappingTableProperty, ImagePath) == 0x00B0);
static_assert(offsetof(FSBKeyMappingTableProperty, ViewerCategoryTypes) == 0x00C0);
static_assert(offsetof(FSBKeyMappingTableProperty, FileSuffix) == 0x00D4);
static_assert(offsetof(FSBPhotoModeMovementTableProperty, InputDirection) == 0x0014);
static_assert(offsetof(FSBPhotoModeMovementTableProperty, CameraType) == 0x0015);
static_assert(offsetof(FSBPhotoModeMovementTableProperty, FileSuffix) == 0x002C);
static_assert(offsetof(FSBPhotoModeImageTableProperty, UIOperateArray) == 0x0018);
static_assert(offsetof(FSBPhotoModeImageTableProperty, OptionStringKey) == 0x0028);
static_assert(offsetof(FSBPhotoModeImageTableProperty, ImagePath) == 0x0038);
static_assert(offsetof(FSBPhotoModeImageTableProperty, EnableConditionGroup) == 0x0048);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, OptionType) == 0x0014);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, CameraType) == 0x0015);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, UISlotType) == 0x0016);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, PhotoModeUITab) == 0x0017);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, UIOperateVariableName) == 0x001C);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, ChangeNoticeStringKey) == 0x0028);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, OptionToUICurvePath) == 0x0060);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, UIToOptionCurvePath) == 0x0070);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, MaterialMaskValue1) == 0x009C);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, FloatArrayValue1) == 0x00A8);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, OptionStringArray) == 0x00B8);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, AliasArrayValue1) == 0x00C8);
static_assert(offsetof(FSBPhotoModeOptionTableProperty, FileSuffix) == 0x00DC);
static_assert(offsetof(FSBPhotoChallengeTableProperty, TargetZoneEnvActorAlias) == 0x0014);
static_assert(offsetof(FSBPhotoChallengeTableProperty, LinkedQuestTaskAlias) == 0x002C);
static_assert(offsetof(FSBPhotoChallengeTableProperty, ExceptActorAlias) == 0x0034);
static_assert(offsetof(FSBPhotoModeEyesPositionByPoseProperty, PoseName) == 0x0014);
static_assert(offsetof(FSBPhotoModeEyesPositionByPoseProperty, CameraType) == 0x001C);
static_assert(offsetof(FSBPhotoModeEyesPositionByPoseProperty, EyesPosition) == 0x0020);
static_assert(offsetof(FSBPhotoModeEyesPositionByPoseProperty, EyesPosition_Adam) == 0x0030);
static_assert(offsetof(FSBPhotoModeEyesPositionByPoseProperty, EyesPosition_Lily) == 0x0040);
static_assert(offsetof(FSBPhotoModeEyesPositionByPoseProperty, FileSuffix) == 0x0050);
static_assert(offsetof(FSBPhotoModeFacialAnimationTableProperty, PhotoModeTag) == 0x0014);
static_assert(offsetof(FSBPhotoModeFacialAnimationTableProperty, CameraType) == 0x001C);
static_assert(offsetof(FSBPhotoModeFacialAnimationTableProperty, AssetPath) == 0x0020);
static_assert(offsetof(FSBPhotoModeFacialAnimationTableProperty, EyesPosition) == 0x0030);
static_assert(offsetof(FSBPhotoModeFacialAnimationTableProperty, FileSuffix) == 0x0040);
static_assert(offsetof(FSBPhotoModeImageFilterTableProperty, AssetPath) == 0x0018);
static_assert(offsetof(FSBPhotoModeImageFilterTableProperty, FileSuffix) == 0x0028);
static_assert(offsetof(FSBEventGiftTableProperty, GiftType) == 0x0014);
static_assert(offsetof(FSBEventGiftTableProperty, ItemList) == 0x0018);
static_assert(offsetof(FSBEventGiftTableProperty, ItemAmountList) == 0x0028);
static_assert(offsetof(FSBEventGiftTableProperty, ItemLevelList) == 0x0038);
static_assert(offsetof(FSBEventGiftTableProperty, FileSuffix) == 0x0048);
static_assert(offsetof(FSBNikkeStageTableProperty, StageName) == 0x0018);
static_assert(offsetof(FSBNikkeStageTableProperty, StageType) == 0x0028);
static_assert(offsetof(FSBNikkeStageTableProperty, PlayerStartEffects) == 0x0030);
static_assert(offsetof(FSBNikkeStageTableProperty, PlayerStartItems) == 0x0040);
static_assert(offsetof(FSBNikkeStageTableProperty, PlayerStartItemsCount) == 0x0050);
static_assert(offsetof(FSBNikkeStageTableProperty, PlayerAcquisitionSkillList) == 0x0060);
static_assert(offsetof(FSBNikkeStageTableProperty, DefenseAreaEnv) == 0x007C);
static_assert(offsetof(FSBNikkeStageTableProperty, EnterStagePlayShow) == 0x0088);
static_assert(offsetof(FSBNikkeStageTableProperty, StartTheater) == 0x0098);
static_assert(offsetof(FSBNikkeStageTableProperty, VictoryTheater) == 0x00B0);
static_assert(offsetof(FSBNikkeStageTableProperty, DefeatTheater) == 0x00C0);
static_assert(offsetof(FSBNikkeStageTableProperty, TimeoutTheater) == 0x00D0);
static_assert(offsetof(FSBNikkeStageTableProperty, PlayerDeadTheater) == 0x00E0);
static_assert(offsetof(FSBNikkeStageTableProperty, StartCamp) == 0x00F0);
static_assert(offsetof(FSBNikkeStageTableProperty, BossEnemySpawnList) == 0x0100);
static_assert(offsetof(FSBNikkeStageTableProperty, TipGroup) == 0x0110);
static_assert(offsetof(FSBNikkeStageTableProperty, DronStateAfterClear) == 0x0118);
static_assert(offsetof(FSBNikkeStageTableProperty, DronFriendlyNpcEffectAfterClear) == 0x0120);
static_assert(offsetof(FSBNikkeStageTableProperty, DebugCheatGroupName) == 0x0130);
static_assert(offsetof(FSBNikkeStageTableProperty, FileSuffix) == 0x0138);
static_assert(offsetof(FSBBossChallengeTableProperty, StageGroup) == 0x0014);
static_assert(offsetof(FSBBossChallengeTableProperty, ZoneAlias) == 0x0020);
static_assert(offsetof(FSBBossChallengeTableProperty, SpawnPointAlias) == 0x0028);
static_assert(offsetof(FSBBossChallengeTableProperty, UnlockAchievementArray) == 0x0030);
static_assert(offsetof(FSBBossChallengeTableProperty, UnlockEntitlementArray) == 0x0040);
static_assert(offsetof(FSBBossChallengeTableProperty, EnemyEventSpawnList) == 0x0050);
static_assert(offsetof(FSBBossChallengeTableProperty, MaximumPresetAlias) == 0x0060);
static_assert(offsetof(FSBBossChallengeTableProperty, MaximumNewGamePlusPresetAlias) == 0x0068);
static_assert(offsetof(FSBBossChallengeTableProperty, MinimumPresetAlias) == 0x0070);
static_assert(offsetof(FSBBossChallengeTableProperty, MaximumPresetAliasStoryMode) == 0x0078);
static_assert(offsetof(FSBBossChallengeTableProperty, MaximumNewGamePlusPresetAliasStoryMode) == 0x0080);
static_assert(offsetof(FSBBossChallengeTableProperty, MinimumPresetAliasStoryMode) == 0x0088);
static_assert(offsetof(FSBBossChallengeTableProperty, MaximumPresetAliasHardMode) == 0x0090);
static_assert(offsetof(FSBBossChallengeTableProperty, MaximumNewGamePlusPresetAliasHardMode) == 0x0098);
static_assert(offsetof(FSBBossChallengeTableProperty, MinimumPresetAliasHardMode) == 0x00A0);
static_assert(offsetof(FSBBossChallengeTableProperty, BossStringKey) == 0x00A8);
static_assert(offsetof(FSBBossChallengeTableProperty, RegionStringKey) == 0x00B8);
static_assert(offsetof(FSBBossChallengeTableProperty, ThumbnailImagePath) == 0x00C8);
static_assert(offsetof(FSBBossChallengeTableProperty, ThumbnailIconImagePath) == 0x00D8);
static_assert(offsetof(FSBBossChallengeTableProperty, ResourceCacheCharacterAliases) == 0x00E8);
static_assert(offsetof(FSBBossChallengeTableProperty, FileSuffix) == 0x00F8);
static_assert(offsetof(FSBActorPlayPresetTableProperty, PlayerDifficultyStatGroupAlias) == 0x002C);
static_assert(offsetof(FSBActorPlayPresetTableProperty, AcquisitionSkillList) == 0x0038);
static_assert(offsetof(FSBActorPlayPresetTableProperty, PreCompleteAchievementAliasList) == 0x0048);
static_assert(offsetof(FSBActorPlayPresetTableProperty, MaintainCompleteAchievementList) == 0x0058);
static_assert(offsetof(FSBActorPlayPresetTableProperty, ItemList) == 0x0068);
static_assert(offsetof(FSBActorPlayPresetTableProperty, ItemAmountList) == 0x0078);
static_assert(offsetof(FSBActorPlayPresetTableProperty, ItemLevelList) == 0x0088);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_Gear1) == 0x0098);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_Gear2) == 0x00A0);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_Gear3) == 0x00A8);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_Gear4) == 0x00B0);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_NanoSuit) == 0x00B8);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_Protector1) == 0x00C0);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_Protector2) == 0x00C8);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_Hair1) == 0x00D0);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_Accessory1) == 0x00D8);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_Accessory2) == 0x00E0);
static_assert(offsetof(FSBActorPlayPresetTableProperty, EquipItem_Drone) == 0x00E8);
static_assert(offsetof(FSBActorPlayPresetTableProperty, FileSuffix) == 0x00F4);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, CommandGroup) == 0x0014);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, PreCommand) == 0x0020);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, CommandSlot1) == 0x0030);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, CommandSlot1NewGamePlus) == 0x0040);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, CommandSlot2) == 0x0050);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, CommandSlot2NewGamePlus) == 0x0060);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, CommandSlot3) == 0x0070);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, CommandSlot3NewGamePlus) == 0x0080);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, CommandSlot4) == 0x0090);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, CommandSlot4NewGamePlus) == 0x00A0);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, PostCommand) == 0x00B0);
static_assert(offsetof(FSBGamePlayProgressCheatTableProperty, FileSuffix) == 0x00C0);
static_assert(offsetof(FSBNewGamePlusAlreadySetupTableProperty, ObjectType) == 0x0014);
static_assert(offsetof(FSBNewGamePlusAlreadySetupTableProperty, DataAlias) == 0x0018);
static_assert(offsetof(FSBNewGamePlusAlreadySetupTableProperty, StateName) == 0x0020);
static_assert(offsetof(FSBNewGamePlusAlreadySetupTableProperty, Enable) == 0x0028);
static_assert(offsetof(FSBNewGamePlusAlreadySetupTableProperty, FileSuffix) == 0x002C);
static_assert(offsetof(FSBLevelGraphicsOptionsTableProperty, FSR2QualityMode) == 0x0014);
static_assert(offsetof(FSBSequenceActorTagTableProperty, TextActorKey) == 0x0014);
static_assert(offsetof(FSBSequenceActorTagTableProperty, ActorTag) == 0x001C);
static_assert(offsetof(FSBSequenceActorTagTableProperty, FileSuffix) == 0x0024);
static_assert(offsetof(FSBCreditTableProperty, VoiceLanguage) == 0x0014);
static_assert(offsetof(FSBCreditTableProperty, CreditType) == 0x001C);
static_assert(offsetof(FSBCreditTableProperty, Arg1) == 0x0028);
static_assert(offsetof(FSBCreditTableProperty, Arg2) == 0x0038);
static_assert(offsetof(FSBCreditTableProperty, Arg3) == 0x0048);
static_assert(offsetof(FSBCreditTableProperty, Arg4) == 0x0058);
static_assert(offsetof(FSBCreditTableProperty, Arg5) == 0x0068);
static_assert(offsetof(FSBCreditTableProperty, Arg6) == 0x0078);
static_assert(offsetof(FSBCreditTableProperty, Arg7) == 0x0088);
static_assert(offsetof(FSBCreditTableProperty, Arg8) == 0x0098);
static_assert(offsetof(FSBCreditTableProperty, Arg9) == 0x00A8);
static_assert(offsetof(FSBCreditTableProperty, Arg10) == 0x00B8);
static_assert(offsetof(FSBCreditTableProperty, FileSuffix) == 0x00C8);
static_assert(offsetof(FSBManualTableProperty, ManualType) == 0x0014);
static_assert(offsetof(FSBManualTableProperty, GroupStringKey) == 0x0018);
static_assert(offsetof(FSBManualTableProperty, DescStringKeyArray) == 0x0028);
static_assert(offsetof(FSBManualTableProperty, MoviePathArray) == 0x0038);
static_assert(offsetof(FSBManualTableProperty, ImagePathArray) == 0x0048);
static_assert(offsetof(FSBManualTableProperty, GroupUnlockAchievementAlias) == 0x0058);
static_assert(offsetof(FSBManualTableProperty, GroupUnlockConditionGroupAlias) == 0x0060);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, Zone) == 0x0014);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, RegionActorName) == 0x001C);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, InitRegionActorEvent) == 0x0024);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, PlayerStartPoint) == 0x0030);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, PlayerStartEffects) == 0x0040);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, PlayerStartSkill) == 0x0050);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, EnemyStartEffects) == 0x0058);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, EnemyNpcAIType) == 0x0068);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, EnemyNpcSpawnPointPreFix) == 0x0070);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, EnemyNpcReSpawnPointPreFix) == 0x0080);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, EnemySpawnList) == 0x0090);
static_assert(offsetof(FSBTrainningRoomSettingTableProperty, FileSuffix) == 0x00B0);
static_assert(offsetof(FSBResourceCacheSequenceTableProperty, Zone) == 0x0014);
static_assert(offsetof(FSBResourceCacheSequenceTableProperty, QuestEpic) == 0x001C);
static_assert(offsetof(FSBResourceCacheSequenceTableProperty, CustomGroup1) == 0x0024);
static_assert(offsetof(FSBResourceCacheSequenceTableProperty, AssetPath) == 0x0030);
static_assert(offsetof(FSBResourceCacheSequenceTableProperty, FileSuffix) == 0x0040);
static_assert(offsetof(FSBEffectVolumePropTableProperty, DeadCountEffectAliasList01) == 0x0018);
static_assert(offsetof(FSBEffectVolumePropTableProperty, DeadCountEffectAliasList02) == 0x0030);
static_assert(offsetof(FSBEffectVolumePropTableProperty, DeadCountEffectAliasList03) == 0x0048);
static_assert(offsetof(FSBEffectVolumePropTableProperty, DeadCountEffectAliasList04) == 0x0060);
static_assert(offsetof(FSBEffectVolumePropTableProperty, DeadCountEffectAliasList05) == 0x0078);
static_assert(offsetof(FSBEffectVolumePropTableProperty, DeadCountEffectAliasList06) == 0x0090);
static_assert(offsetof(FSBEffectVolumePropTableProperty, DeadCountEffectAliasList07) == 0x00A8);
static_assert(offsetof(FSBEffectVolumePropTableProperty, DeadCountEffectAliasList08) == 0x00C0);
static_assert(offsetof(FSBEffectVolumePropTableProperty, DeadCountEffectAliasList09) == 0x00D8);
static_assert(offsetof(FSBEffectVolumePropTableProperty, DeadCountEffectAliasList10) == 0x00F0);
static_assert(offsetof(FSBEffectVolumePropTableProperty, FileSuffix) == 0x0100);
static_assert(offsetof(FSBUITutorialTableProperty, TitleStringKey) == 0x0018);
static_assert(offsetof(FSBUITutorialTableProperty, DescStringKey) == 0x0028);
static_assert(offsetof(FSBUITutorialTableProperty, EnableInputAliases) == 0x0040);
static_assert(offsetof(FSBUITutorialTableProperty, BlockingWidgetEventNameList) == 0x0050);
static_assert(offsetof(FSBUITutorialTableProperty, NextTutorialAlias) == 0x0060);
static_assert(offsetof(FSBUITutorialTableProperty, OpenUILogicType) == 0x0068);
static_assert(offsetof(FSBUITutorialTableProperty, OpenUIType) == 0x0069);
static_assert(offsetof(FSBUITutorialTableProperty, StartConditionGroup) == 0x006C);
static_assert(offsetof(FSBUITutorialTableProperty, CompleteWidgetEventName) == 0x0074);
static_assert(offsetof(FSBUITutorialTableProperty, CompleteAchievementAlias) == 0x007C);
static_assert(offsetof(FSBCheatQuestTableProperty, CheatProgressQuestCommandsTable) == 0x0014);
static_assert(offsetof(FSBCheatQuestTableProperty, StartWorld) == 0x0020);
static_assert(offsetof(FSBCheatQuestTableProperty, StartSpawnLocation) == 0x0028);
static_assert(offsetof(FSBCheatQuestTableProperty, CheatGroupCommands) == 0x0038);
static_assert(offsetof(FSBCheatQuestTableProperty, FileSuffix) == 0x0048);
static_assert(offsetof(FSBSocialAnimTableProperty, Group) == 0x0014);
static_assert(offsetof(FSBSocialAnimTableProperty, Motion) == 0x001C);
static_assert(offsetof(FSBSocialAnimTableProperty, Stance) == 0x0024);
static_assert(offsetof(FSBSocialAnimTableProperty, AssetPath) == 0x0030);
static_assert(offsetof(FSBSocialAnimTableProperty, FileSuffix) == 0x0048);
static_assert(offsetof(FSBWorldMapTableProperty, WorldAlias) == 0x0014);
static_assert(offsetof(FSBWorldMapTableProperty, PrevWorldMapAlias) == 0x001C);
static_assert(offsetof(FSBWorldMapTableProperty, NextWorldMapAlias) == 0x0024);
static_assert(offsetof(FSBWorldMapTableProperty, ExceptIsolatedAreaAlias) == 0x002C);
static_assert(offsetof(FSBWorldMapTableProperty, AssetImage) == 0x0038);
static_assert(offsetof(FSBWorldMapTableProperty, AssetImageBG) == 0x0048);
static_assert(offsetof(FSBWorldMapTableProperty, AssetImageTitle) == 0x0058);
static_assert(offsetof(FSBWorldMapTableProperty, UnlockAchievementAlias) == 0x0088);
static_assert(offsetof(FSBShowParamTableProperty, FileSuffix) == 0x0020);
static_assert(offsetof(FSBCanTableProperty, ItemAlias) == 0x0014);
static_assert(offsetof(FSBCanTableProperty, StringKeyTitle) == 0x0020);
static_assert(offsetof(FSBCanTableProperty, StringKeyFunc) == 0x0030);
static_assert(offsetof(FSBCanTableProperty, StringKeyContent) == 0x0040);
static_assert(offsetof(FSBCanTableProperty, Asset3D) == 0x0050);
static_assert(offsetof(FSBCanTableProperty, AssetMaterial) == 0x0060);
static_assert(offsetof(FSBCanTableProperty, DetectEnvSpawnAlias) == 0x0070);
static_assert(offsetof(FSBCanTableProperty, AcquireEnvSpawnAlias) == 0x0078);
static_assert(offsetof(FSBCanTableProperty, CollectionEnvSpawnAliases) == 0x0080);
static_assert(offsetof(FSBCanTableProperty, CollectionXList) == 0x0090);
static_assert(offsetof(FSBCanTableProperty, CollectionYList) == 0x00A0);
static_assert(offsetof(FSBCanTableProperty, AchievementAlias) == 0x00B0);
static_assert(offsetof(FSBGuideMessageTableProperty, MessageType) == 0x0018);
static_assert(offsetof(FSBGuideMessageTableProperty, StringKey) == 0x0020);
static_assert(offsetof(FSBGuideMessageTableProperty, DisplayType) == 0x0038);
static_assert(offsetof(FSBGuideMessageTableProperty, GuideStartType) == 0x0039);
static_assert(offsetof(FSBGuideMessageTableProperty, GuideCompleteType) == 0x0040);
static_assert(offsetof(FSBGuideMessageTableProperty, CustomAliases) == 0x0050);
static_assert(offsetof(FSBGuideMessageTableProperty, Command) == 0x0060);
static_assert(offsetof(FSBGuideMessageTableProperty, ActorCondition) == 0x0061);
static_assert(offsetof(FSBGuideMessageTableProperty, FishingMode) == 0x0062);
static_assert(offsetof(FSBGuideMessageTableProperty, GuideCompleteAchievementAlias) == 0x0064);
static_assert(offsetof(FSBGuideMessageTableProperty, GuideTimeOutAchievementAlias) == 0x006C);
static_assert(offsetof(FSBGuideMessageTableProperty, GuideSkipAchievementAlias) == 0x0074);
static_assert(offsetof(FSBGuideMessageTableProperty, StartConditionGroup) == 0x007C);
static_assert(offsetof(FSBGuideMessageTableProperty, CancelConditionGroup) == 0x0084);
static_assert(offsetof(FSBGuideMessageTableProperty, UIActionRequestGroup) == 0x008C);
static_assert(offsetof(FSBStudioTransitionTableProperty, StartState) == 0x0014);
static_assert(offsetof(FSBStudioTransitionTableProperty, TargetState) == 0x0015);
static_assert(offsetof(FSBStudioTransitionTableProperty, TransitionShowTag) == 0x0018);
static_assert(offsetof(FSBStudioTransitionTableProperty, TransitionSequenceTag) == 0x0020);
static_assert(offsetof(FSBWorldTransitionTableProperty, TransitionType) == 0x0014);
static_assert(offsetof(FSBWorldTransitionTableProperty, EnableConditionGroup) == 0x0018);
static_assert(offsetof(FSBWorldTransitionTableProperty, TriggerAlias) == 0x0020);
static_assert(offsetof(FSBWorldTransitionTableProperty, ZoneEventAlias) == 0x0028);
static_assert(offsetof(FSBWorldTransitionTableProperty, EnvSpawnAlias) == 0x0030);
static_assert(offsetof(FSBWorldTransitionTableProperty, EventSpawnAliasArray) == 0x0038);
static_assert(offsetof(FSBWorldTransitionTableProperty, FromWorldAlias) == 0x0048);
static_assert(offsetof(FSBWorldTransitionTableProperty, FromIsolatedAreaAlias) == 0x0050);
static_assert(offsetof(FSBWorldTransitionTableProperty, ToWorldAlias) == 0x0058);
static_assert(offsetof(FSBWorldTransitionTableProperty, ToIsolatedAreaAlias) == 0x0060);
static_assert(offsetof(FSBWorldTransitionTableProperty, ToDescStringKey) == 0x0068);
static_assert(offsetof(FSBWorldTransitionTableProperty, PortalTag) == 0x0078);
static_assert(offsetof(FSBHintTableProperty, HintMessage_StringKey) == 0x001C);
static_assert(offsetof(FSBHintTableProperty, ActivateZoneTriggerAliasArray) == 0x0028);
static_assert(offsetof(FSBHintTableProperty, FileSuffix) == 0x0038);
static_assert(offsetof(FSBRestartRuleTableProperty, MainLevelTarget) == 0x0014);
static_assert(offsetof(FSBRestartRuleTableProperty, LookAtLevelTarget) == 0x001C);
static_assert(offsetof(FSBRestartRuleTableProperty, OutSideLevelSequence) == 0x002C);
static_assert(offsetof(FSBRestartRuleTableProperty, OutSideTheaterEvent) == 0x0034);
static_assert(offsetof(FSBRestartRuleTableProperty, FileSuffix) == 0x003C);
static_assert(offsetof(FSBCheatProgressQuestCommandsTableProperty, CompleteQuestList) == 0x0018);
static_assert(offsetof(FSBCheatProgressQuestCommandsTableProperty, GamePlayProgressRecord) == 0x0028);
static_assert(offsetof(FSBCheatProgressQuestCommandsTableProperty, FileSuffix) == 0x0038);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, QuestTaskGroup) == 0x0014);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, QuestTaskType) == 0x001C);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DataAlias) == 0x0020);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, EnvState) == 0x0028);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, Enable) == 0x0030);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, Zone) == 0x0034);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, InteractionKey) == 0x003C);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, InteractionValue) == 0x0048);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, RecordFilterType) == 0x0058);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DebugTargetCamp) == 0x005C);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DebugSpawnPoint) == 0x0064);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DebugCommands) == 0x0070);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DebugCommands2) == 0x0080);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DebugCommands3) == 0x0090);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DebugCommands4) == 0x00A0);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DebugCommandsForNewGamePlus) == 0x00B0);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DebugCommandsForNewGamePlus2) == 0x00C0);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DebugCommandsForNewGamePlus3) == 0x00D0);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, DebugCommandsForNewGamePlus4) == 0x00E0);
static_assert(offsetof(FSBGamePlayProgressRecordTableProperty, FileSuffix) == 0x00F0);
static_assert(offsetof(FSBEditorTooltipTableProperty, Type) == 0x0010);
static_assert(offsetof(FSBEditorTooltipTableProperty, Target) == 0x0018);
static_assert(offsetof(FSBEditorTooltipTableProperty, FieldName) == 0x0020);
static_assert(offsetof(FSBEditorTooltipTableProperty, FieldNameArray) == 0x0028);
static_assert(offsetof(FSBEditorTooltipTableProperty, FileSuffix) == 0x0038);
static_assert(offsetof(FSBSoundEquipmentSetTableProperty, EquipmentAlias) == 0x0010);
static_assert(offsetof(FSBSoundEquipmentSetTableProperty, CharacterSoundSetOverride) == 0x0018);
static_assert(offsetof(FSBSoundEquipmentSetTableProperty, CharacterFootstepSetOverride) == 0x0028);
static_assert(offsetof(FSBSoundEquipmentSetTableProperty, SoundEventAlias) == 0x0038);
static_assert(offsetof(FSBSoundEquipmentSetTableProperty, FileSuffix) == 0x0040);
static_assert(offsetof(FSBSoundAttenuationEventTableProperty, Editor_Description) == 0x0010);
static_assert(offsetof(FSBSoundAttenuationEventTableProperty, DialogAttenuationPath) == 0x0020);
static_assert(offsetof(FSBSoundAttenuationEventTableProperty, ActionVoiceAttenuationPath) == 0x0030);
static_assert(offsetof(FSBSoundAttenuationEventTableProperty, FootstepAttenuationPath) == 0x0040);
static_assert(offsetof(FSBSoundAttenuationEventTableProperty, FileSuffix) == 0x0050);
static_assert(offsetof(FSBSoundEventLevelSequenceTableProperty, LevelSequenceBeginSoundEvent) == 0x0010);
static_assert(offsetof(FSBSoundEventLevelSequenceTableProperty, LevelSequenceFinishSoundEvent) == 0x001C);
static_assert(offsetof(FSBSoundEventLevelSequenceTableProperty, SoundMixPath) == 0x0028);
static_assert(offsetof(FSBSoundEventLevelSequenceTableProperty, FileSuffix) == 0x0038);
static_assert(offsetof(FSBSoundEventQuestTableProperty, QuestAcquireSoundEvent) == 0x0010);
static_assert(offsetof(FSBSoundEventQuestTableProperty, QuestCompleteSoundEvent) == 0x0018);
static_assert(offsetof(FSBSoundEventQuestTableProperty, FileSuffix) == 0x0020);
static_assert(offsetof(FSBSoundEventTableProperty, MainBGMPath) == 0x0010);
static_assert(offsetof(FSBSoundEventTableProperty, AmbientBGMPath) == 0x0020);
static_assert(offsetof(FSBSoundEventTableProperty, SoundStateRule) == 0x0030);
static_assert(offsetof(FSBSoundEventTableProperty, EventBattleState) == 0x0034);
static_assert(offsetof(FSBSoundEventTableProperty, IntParams) == 0x0040);
static_assert(offsetof(FSBSoundEventTableProperty, SoundBasePath) == 0x0090);
static_assert(offsetof(FSBSoundEventTableProperty, AttachActorTag) == 0x00A0);
static_assert(offsetof(FSBSoundEventTableProperty, AttachSocket) == 0x00A8);
static_assert(offsetof(FSBSoundEventTableProperty, AttenuationEventAlias) == 0x00B0);
static_assert(offsetof(FSBSoundEventTableProperty, FileSuffix) == 0x00B8);
static_assert(offsetof(FSBItemSpawnTableProperty, ItemAlias) == 0x0014);
static_assert(offsetof(FSBItemSpawnTableProperty, FileSuffix) == 0x0020);
static_assert(offsetof(FSBItemFishTableProperty, FishRarity) == 0x0014);
static_assert(offsetof(FSBItemFishTableProperty, RunAwayStaminaRate) == 0x0020);
static_assert(offsetof(FSBItemFishTableProperty, LiftUpCamStartLocation) == 0x0044);
static_assert(offsetof(FSBItemFishTableProperty, LiftUpCamFinalLocation) == 0x0050);
static_assert(offsetof(FSBItemFishTableProperty, FishFinalLocation) == 0x005C);
static_assert(offsetof(FSBItemFishTableProperty, ConditionGroup) == 0x0068);
static_assert(offsetof(FSBItemFishTableProperty, ConditionRewardGroup) == 0x0070);
static_assert(offsetof(FSBItemFishTableProperty, RewardGroup) == 0x0078);
static_assert(offsetof(FSBItemFishTableProperty, RewardItemAlias) == 0x0080);
static_assert(offsetof(FSBItemFishTableProperty, MovePatternCurveDataPath1) == 0x008C);
static_assert(offsetof(FSBItemFishTableProperty, MovePatternCurveDataPath2) == 0x0098);
static_assert(offsetof(FSBItemFishTableProperty, MovePatternCurveDataPath3) == 0x00A4);
static_assert(offsetof(FSBItemFishTableProperty, MovePatternCurveDataPath4) == 0x00B0);
static_assert(offsetof(FSBItemFishTableProperty, MovePatternCurveDataPath5) == 0x00BC);
static_assert(offsetof(FSBItemFishTableProperty, FileSuffix) == 0x00F8);
static_assert(offsetof(FSBAlbumTableProperty, EntityAlias) == 0x0014);
static_assert(offsetof(FSBAlbumTableProperty, AlbumType) == 0x001C);
static_assert(offsetof(FSBAlbumTableProperty, GroupName) == 0x0020);
static_assert(offsetof(FSBAlbumTableProperty, Name) == 0x0030);
static_assert(offsetof(FSBAlbumTableProperty, Desc) == 0x0040);
static_assert(offsetof(FSBAlbumTableProperty, Asset2DIcon) == 0x0050);
static_assert(offsetof(FSBAlbumTableProperty, Asset2DImage) == 0x0060);
static_assert(offsetof(FSBAlbumTableProperty, AchievementUnlocked) == 0x0070);
static_assert(offsetof(FSBAlbumTableProperty, AchievementUsed) == 0x0078);
static_assert(offsetof(FSBAlbumTableProperty, AchievementPopup) == 0x0080);
static_assert(offsetof(FSBAlbumTableProperty, ConditionGroupDisplay) == 0x0088);
static_assert(offsetof(FSBUIKeyImageAssetProperty, Key) == 0x0014);
static_assert(offsetof(FSBUIKeyImageAssetProperty, Platform) == 0x001C);
static_assert(offsetof(FSBUIKeyImageAssetProperty, Tag) == 0x0024);
static_assert(offsetof(FSBUIKeyImageAssetProperty, AxisScale) == 0x002C);
static_assert(offsetof(FSBUIKeyImageAssetProperty, AssetPath) == 0x0030);
static_assert(offsetof(FSBUIKeyImageAssetProperty, FileSuffix) == 0x0040);
static_assert(offsetof(FSBUITextInputDefineProperty, Key) == 0x0014);
static_assert(offsetof(FSBUITextInputDefineProperty, Platform) == 0x001C);
static_assert(offsetof(FSBUITextInputDefineProperty, AxisScale) == 0x0024);
static_assert(offsetof(FSBUITextInputDefineProperty, text) == 0x0028);
static_assert(offsetof(FSBUITextInputDefineProperty, FileSuffix) == 0x0038);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Group) == 0x0014);
static_assert(offsetof(FSBUITextActionFormatTableProperty, GameOptionType) == 0x001C);
static_assert(offsetof(FSBUITextActionFormatTableProperty, GameOptionRedirectValue1) == 0x0020);
static_assert(offsetof(FSBUITextActionFormatTableProperty, GameOptionRedirectValue2) == 0x0028);
static_assert(offsetof(FSBUITextActionFormatTableProperty, StreamInputRedirectValue) == 0x0030);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Platform) == 0x0038);
static_assert(offsetof(FSBUITextActionFormatTableProperty, FallBackGroupAlias) == 0x0040);
static_assert(offsetof(FSBUITextActionFormatTableProperty, StringTableNamespace) == 0x0048);
static_assert(offsetof(FSBUITextActionFormatTableProperty, StringTableKey) == 0x0058);
static_assert(offsetof(FSBUITextActionFormatTableProperty, StringFormat) == 0x0068);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Action1) == 0x0078);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Action2) == 0x0090);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Action3) == 0x00A8);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Action4) == 0x00C0);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Action5) == 0x00D8);
static_assert(offsetof(FSBUITextActionFormatTableProperty, InputDefine1) == 0x00F0);
static_assert(offsetof(FSBUITextActionFormatTableProperty, InputDefine2) == 0x0108);
static_assert(offsetof(FSBUITextActionFormatTableProperty, InputDefine3) == 0x0120);
static_assert(offsetof(FSBUITextActionFormatTableProperty, InputDefine4) == 0x0138);
static_assert(offsetof(FSBUITextActionFormatTableProperty, InputDefine5) == 0x0150);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Axis1) == 0x0168);
static_assert(offsetof(FSBUITextActionFormatTableProperty, AxisScale1) == 0x0178);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Axis2) == 0x0180);
static_assert(offsetof(FSBUITextActionFormatTableProperty, AxisScale2) == 0x0190);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Axis3) == 0x0198);
static_assert(offsetof(FSBUITextActionFormatTableProperty, AxisScale3) == 0x01A8);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Axis4) == 0x01B0);
static_assert(offsetof(FSBUITextActionFormatTableProperty, AxisScale4) == 0x01C0);
static_assert(offsetof(FSBUITextActionFormatTableProperty, Axis5) == 0x01C8);
static_assert(offsetof(FSBUITextActionFormatTableProperty, AxisScale5) == 0x01D8);
static_assert(offsetof(FSBUITextActionFormatTableProperty, SwipeOption) == 0x01E0);
static_assert(offsetof(FSBUITextActionFormatTableProperty, FileSuffix) == 0x01E8);
static_assert(offsetof(FSBUIActionRequestTableProperty, Group) == 0x0014);
static_assert(offsetof(FSBUIActionRequestTableProperty, StartConditionGroup) == 0x0028);
static_assert(offsetof(FSBUIActionRequestTableProperty, AchievementAction) == 0x0030);
static_assert(offsetof(FSBUIActionRequestTableProperty, ExecuteType) == 0x0038);
static_assert(offsetof(FSBUIActionRequestTableProperty, FinishType) == 0x0044);
static_assert(offsetof(FSBUIActionRequestTableProperty, Arg1) == 0x0048);
static_assert(offsetof(FSBUIActionRequestTableProperty, Arg2) == 0x0058);
static_assert(offsetof(FSBUIActionRequestTableProperty, Arg3) == 0x0068);
static_assert(offsetof(FSBUIActionRequestTableProperty, AffectedByVisibleFailReplaceGroup) == 0x0078);
static_assert(offsetof(FSBUIActionRequestTableProperty, FileSuffix) == 0x0080);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, GameRuleType) == 0x0014);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, TargetQuest) == 0x0018);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, Name) == 0x0020);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, DescContent) == 0x0030);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, DescFunction) == 0x0040);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, ImageAsset2D) == 0x0050);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, UnlockAchievement) == 0x0060);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, Level) == 0x0068);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, RewardItemAlias) == 0x0070);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, StartEffectAlias) == 0x0098);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, ComaEffectAlias) == 0x00A8);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, InteractionEffectAlias) == 0x00B8);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, ZoneEventAlias1) == 0x00D0);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, ZoneEventAlias2) == 0x00E0);
static_assert(offsetof(FSBMultiPlayRuleTableProperty, ZoneEventAlias3) == 0x00F0);
static_assert(offsetof(FSBMultiMapTableProperty, MapName) == 0x0014);
static_assert(offsetof(FSBTransformCharacterTableProperty, CharacterAlias1) == 0x0018);
static_assert(offsetof(FSBTransformCharacterTableProperty, CharacterAlias2) == 0x0024);
static_assert(offsetof(FSBTransformCharacterTableProperty, CharacterAlias3) == 0x0030);
static_assert(offsetof(FSBTransformCharacterTableProperty, CharacterAlias4) == 0x003C);
static_assert(offsetof(FSBTransformCharacterTableProperty, CharacterAlias5) == 0x0048);
static_assert(offsetof(FSBTransformCharacterTableProperty, CharacterAlias6) == 0x0054);
static_assert(offsetof(FSBTransformCharacterTableProperty, CharacterAlias7) == 0x0060);
static_assert(offsetof(FSBTransformCharacterTableProperty, CharacterAlias8) == 0x006C);
static_assert(offsetof(FSBTransformCharacterTableProperty, CharacterAlias9) == 0x0078);
static_assert(offsetof(FSBTransformCharacterTableProperty, CharacterAlias10) == 0x0084);
static_assert(offsetof(FSBTransformCharacterTableProperty, FileSuffix) == 0x0090);
static_assert(offsetof(FSBEventZoneWarpTableProperty, EventConditionGroup) == 0x0014);
static_assert(offsetof(FSBEventZoneWarpTableProperty, EventCondition) == 0x001C);
static_assert(offsetof(FSBEventZoneWarpTableProperty, TargetWorld) == 0x0024);
static_assert(offsetof(FSBEventZoneWarpTableProperty, TargetZoneCamp) == 0x002C);
static_assert(offsetof(FSBEventZoneWarpTableProperty, TargetSpawnPoint) == 0x0034);
static_assert(offsetof(FSBEventZoneWarpTableProperty, TargetLocation) == 0x003C);
static_assert(offsetof(FSBEventZoneWarpTableProperty, TargetRotation) == 0x0048);
static_assert(offsetof(FSBEventZoneWarpTableProperty, FileSuffix) == 0x0064);
static_assert(offsetof(FSBZoneCampTableProperty, CampName) == 0x0018);
static_assert(offsetof(FSBZoneCampTableProperty, CampType) == 0x0028);
static_assert(offsetof(FSBZoneCampTableProperty, Region) == 0x002C);
static_assert(offsetof(FSBZoneCampTableProperty, RegionName) == 0x0034);
static_assert(offsetof(FSBZoneCampTableProperty, CampImage) == 0x0040);
static_assert(offsetof(FSBZoneCampTableProperty, InGameUICampImage) == 0x0050);
static_assert(offsetof(FSBZoneCampTableProperty, CoinSpawnPointName) == 0x0060);
static_assert(offsetof(FSBZoneCampTableProperty, CampDisplayType) == 0x006C);
static_assert(offsetof(FSBZoneCampTableProperty, LinkCampAlias) == 0x0070);
static_assert(offsetof(FSBZoneCampTableProperty, CampDisplayLinkAlias) == 0x0078);
static_assert(offsetof(FSBZoneCampTableProperty, ActiveTag) == 0x0080);
static_assert(offsetof(FSBZoneCampTableProperty, EnableMapMakerCondition) == 0x0088);
static_assert(offsetof(FSBZoneCampTableProperty, ForceCampTrophyAchievementForEnvState) == 0x0094);
static_assert(offsetof(FSBZoneCampTableProperty, FileSuffix) == 0x009C);
static_assert(offsetof(FSBShopItemTableProperty, ShopType) == 0x0014);
static_assert(offsetof(FSBShopItemTableProperty, ItemAlias) == 0x0018);
static_assert(offsetof(FSBShopItemTableProperty, NanosuitAliasForRecipe) == 0x0020);
static_assert(offsetof(FSBShopItemTableProperty, MoneyItemAlias1) == 0x002C);
static_assert(offsetof(FSBShopItemTableProperty, MoneyItemAlias2) == 0x003C);
static_assert(offsetof(FSBShopItemTableProperty, MoneyItemAlias3) == 0x004C);
static_assert(offsetof(FSBShopItemTableProperty, MoneyItemAlias4) == 0x005C);
static_assert(offsetof(FSBShopItemTableProperty, CheckAchievement) == 0x006C);
static_assert(offsetof(FSBShopItemTableProperty, CheckCondition) == 0x0074);
static_assert(offsetof(FSBShopItemTableProperty, CheckConditionGroup) == 0x007C);
static_assert(offsetof(FSBShopItemTableProperty, LinkedShopItemAlias) == 0x0084);
static_assert(offsetof(FSBShopItemTableProperty, FileSuffix) == 0x0094);
static_assert(offsetof(FSBShopTableProperty, ConditionGroup_ApplyDiscount) == 0x0018);
static_assert(offsetof(FSBShopTableProperty, CurrencyItemAlias) == 0x0020);
static_assert(offsetof(FSBShopTableProperty, Tags) == 0x0028);
static_assert(offsetof(FSBShopTableProperty, ShopItems) == 0x0038);
static_assert(offsetof(FSBShopTableProperty, RequiredFriendShipLevelUp) == 0x0048);
static_assert(offsetof(FSBShopTableProperty, FriendShipLevelUpSound) == 0x0058);
static_assert(offsetof(FSBShopTableProperty, FriendShipLevelUpSubtitleDuration) == 0x0078);
static_assert(offsetof(FSBShopTableProperty, FriendShipLevelUpSubtitleTitle) == 0x0088);
static_assert(offsetof(FSBShopTableProperty, FriendShipLevelUpSubtitleMessage) == 0x0098);
static_assert(offsetof(FSBJsonShopItem_Money, Alias) == 0x0000);
static_assert(offsetof(FSBSPLevelTableProperty, FileSuffix) == 0x0018);
static_assert(offsetof(FSBSpawnGroupRuleTableProperty, Desc) == 0x0018);
static_assert(offsetof(FSBSpawnGroupRuleTableProperty, ZoneAlias) == 0x0028);
static_assert(offsetof(FSBSpawnGroupRuleTableProperty, SpawnGroupRuleAlias) == 0x0030);
static_assert(offsetof(FSBSpawnGroupRuleTableProperty, SubGroup) == 0x0038);
static_assert(offsetof(FSBSpawnGroupRuleTableProperty, DuplicationPreventKey) == 0x0044);
static_assert(offsetof(FSBSpawnGroupRuleTableProperty, EventSpawnArray) == 0x0050);
static_assert(offsetof(FSBEventInteractCampTableProperty, CampEnvSpawnAlias) == 0x0014);
static_assert(offsetof(FSBEventInteractCampTableProperty, InteractType) == 0x001C);
static_assert(offsetof(FSBEventInteractCampTableProperty, EventCondition) == 0x0020);
static_assert(offsetof(FSBEventInteractCampTableProperty, EventConditionGroup) == 0x0028);
static_assert(offsetof(FSBEventInteractCampTableProperty, DoingSaveType) == 0x0031);
static_assert(offsetof(FSBEventInteractCampTableProperty, SoundEventAlias) == 0x0034);
static_assert(offsetof(FSBEventInteractCampTableProperty, FileSuffix) == 0x003C);
static_assert(offsetof(FSBCharacterDeadTableProperty, DefaultDeadShowArray) == 0x0010);
static_assert(offsetof(FSBCharacterDeadTableProperty, MoveAliasWhenDead) == 0x002C);
static_assert(offsetof(FSBCharacterDeadTableProperty, StandDeadShow) == 0x0038);
static_assert(offsetof(FSBCharacterDeadTableProperty, Step0DeadShow) == 0x0058);
static_assert(offsetof(FSBCharacterDeadTableProperty, Step1DeadShow) == 0x0078);
static_assert(offsetof(FSBCharacterDeadTableProperty, Step2DeadShow) == 0x0098);
static_assert(offsetof(FSBCharacterDeadTableProperty, Step3DeadShow) == 0x00B8);
static_assert(offsetof(FSBCharacterDeadTableProperty, Explosion1DeadShow) == 0x00D8);
static_assert(offsetof(FSBCharacterDeadTableProperty, Explosion2DeadShow) == 0x00F8);
static_assert(offsetof(FSBCharacterDeadTableProperty, Custom1DeadShow) == 0x0118);
static_assert(offsetof(FSBCharacterDeadTableProperty, Custom2DeadShow) == 0x0138);
static_assert(offsetof(FSBCharacterDeadTableProperty, Custom3DeadShow) == 0x0158);
static_assert(offsetof(FSBCharacterDeadTableProperty, Custom4DeadShow) == 0x0178);
static_assert(offsetof(FSBCharacterDeadTableProperty, Custom5DeadShow) == 0x0198);
static_assert(offsetof(FSBCharacterDeadTableProperty, Custom6DeadShow) == 0x01B8);
static_assert(offsetof(FSBCharacterDeadTableProperty, Custom7DeadShow) == 0x01D8);
static_assert(offsetof(FSBCharacterDeadTableProperty, Custom8DeadShow) == 0x01F8);
static_assert(offsetof(FSBCharacterDeadTableProperty, Custom9DeadShow) == 0x0218);
static_assert(offsetof(FSBCharacterDeadTableProperty, Custom10DeadShow) == 0x0238);
static_assert(offsetof(FSBCharacterDeadTableProperty, DownDeadShow) == 0x0258);
static_assert(offsetof(FSBCharacterDeadTableProperty, AirborneDeadShow) == 0x0278);
static_assert(offsetof(FSBCharacterDeadTableProperty, SwimmingDeadShow) == 0x0298);
static_assert(offsetof(FSBCharacterDeadTableProperty, AdditiveDeadShow) == 0x02B8);
static_assert(offsetof(FSBCharacterDeadTableProperty, FileSuffix) == 0x02C8);
static_assert(offsetof(FSBCharacterDetectAITableProperty, FileSuffix) == 0x0048);
static_assert(offsetof(FSBItemSkillEquipableTableProperty, ItemSkillEquipableAlias) == 0x0010);
static_assert(offsetof(FSBItemSkillEquipableTableProperty, AcquisitionSkillAliasArray) == 0x0020);
static_assert(offsetof(FSBItemSkillEquipableTableProperty, SkillCommandAlias) == 0x0030);
static_assert(offsetof(FSBItemSkillEquipableTableProperty, EquipEffectAliasArray) == 0x0038);
static_assert(offsetof(FSBItemSkillEquipableTableProperty, UnequipEffectAliasArray) == 0x0048);
static_assert(offsetof(FSBItemSkillEquipableTableProperty, RequiredItemAliasArray) == 0x0058);
static_assert(offsetof(FSBItemSkillEquipableTableProperty, RequiredItemAmountArray) == 0x0068);
static_assert(offsetof(FSBItemSkillEquipableTableProperty, FileSuffix) == 0x0078);
static_assert(offsetof(FSBCheatCommandTableProperty, Distribution) == 0x0014);
static_assert(offsetof(FSBCheatCommandTableProperty, Tab) == 0x0018);
static_assert(offsetof(FSBCheatCommandTableProperty, TabName) == 0x0020);
static_assert(offsetof(FSBCheatCommandTableProperty, Category) == 0x0028);
static_assert(offsetof(FSBCheatCommandTableProperty, CategoryName) == 0x0030);
static_assert(offsetof(FSBCheatCommandTableProperty, CategoryStringKey) == 0x0038);
static_assert(offsetof(FSBCheatCommandTableProperty, Desc) == 0x0048);
static_assert(offsetof(FSBCheatCommandTableProperty, DescStringKey) == 0x0058);
static_assert(offsetof(FSBCheatCommandTableProperty, Group) == 0x0068);
static_assert(offsetof(FSBCheatCommandTableProperty, Command) == 0x0070);
static_assert(offsetof(FSBCheatCommandTableProperty, FileSuffix) == 0x0084);
static_assert(offsetof(FSBTrophyTableProperty, TrophyGroup) == 0x0014);
static_assert(offsetof(FSBTrophyTableProperty, Name) == 0x001C);
static_assert(offsetof(FSBTrophyTableProperty, grade) == 0x0028);
static_assert(offsetof(FSBTrophyTableProperty, ProgressAchievement) == 0x0030);
static_assert(offsetof(FSBTrophyTableProperty, DisplayName_StringKey) == 0x0040);
static_assert(offsetof(FSBTrophyTableProperty, DisplayDescription_StringKey) == 0x0048);
static_assert(offsetof(FSBTrophyTableProperty, DisplayName_en_us) == 0x0050);
static_assert(offsetof(FSBTrophyTableProperty, DisplayDescription_en_us) == 0x0060);
static_assert(offsetof(FSBTrophyTableProperty, DisplayName_ko_kr) == 0x0070);
static_assert(offsetof(FSBTrophyTableProperty, DisplayDescription_ko_kr) == 0x0080);
static_assert(offsetof(FSBTrophyTableProperty, FileSuffix) == 0x0090);
static_assert(offsetof(FSBActivityTableProperty, Name) == 0x0014);
static_assert(offsetof(FSBActivityTableProperty, Type) == 0x001C);
static_assert(offsetof(FSBActivityTableProperty, StartActivityAchievement) == 0x0028);
static_assert(offsetof(FSBActivityTableProperty, EndActivityAchievement) == 0x0030);
static_assert(offsetof(FSBActivityTableProperty, LinkActivities) == 0x0038);
static_assert(offsetof(FSBActivityTableProperty, SubCategory) == 0x0048);
static_assert(offsetof(FSBActivityTableProperty, DisplayName_StringKey) == 0x0050);
static_assert(offsetof(FSBActivityTableProperty, DisplayDescription_StringKey) == 0x0058);
static_assert(offsetof(FSBActivityTableProperty, DisplayName_en_us) == 0x0060);
static_assert(offsetof(FSBActivityTableProperty, DisplayDescription_en_us) == 0x0068);
static_assert(offsetof(FSBActivityTableProperty, DisplayName_ko_kr) == 0x0070);
static_assert(offsetof(FSBActivityTableProperty, DisplayDescription_ko_kr) == 0x0078);
static_assert(offsetof(FSBActivityTableProperty, FileSuffix) == 0x0080);
static_assert(offsetof(FSBAchievementTableProperty, EventType) == 0x0014);
static_assert(offsetof(FSBAchievementTableProperty, CategoryType) == 0x0015);
static_assert(offsetof(FSBAchievementTableProperty, ParamType1) == 0x0017);
static_assert(offsetof(FSBAchievementTableProperty, ParamValue1) == 0x0018);
static_assert(offsetof(FSBAchievementTableProperty, OpType1) == 0x0028);
static_assert(offsetof(FSBAchievementTableProperty, ParamType2) == 0x0029);
static_assert(offsetof(FSBAchievementTableProperty, ParamValue2) == 0x0030);
static_assert(offsetof(FSBAchievementTableProperty, OpType2) == 0x0040);
static_assert(offsetof(FSBAchievementTableProperty, ParamType3) == 0x0041);
static_assert(offsetof(FSBAchievementTableProperty, ParamValue3) == 0x0048);
static_assert(offsetof(FSBAchievementTableProperty, OpType3) == 0x0058);
static_assert(offsetof(FSBAchievementTableProperty, ParamType4) == 0x0059);
static_assert(offsetof(FSBAchievementTableProperty, ParamValue4) == 0x0060);
static_assert(offsetof(FSBAchievementTableProperty, OpType4) == 0x0070);
static_assert(offsetof(FSBAchievementTableProperty, CheckAchievementAliasArray) == 0x0078);
static_assert(offsetof(FSBAchievementTableProperty, CompleteUIRequestGroup) == 0x0088);
static_assert(offsetof(FSBAchievementTableProperty, CompleteAcquisitionSkillArray) == 0x0090);
static_assert(offsetof(FSBAchievementTableProperty, RewardAcquisitionSkillArray) == 0x00A0);
static_assert(offsetof(FSBAchievementTableProperty, ProgressAchievementOnCompleted) == 0x00B4);
static_assert(offsetof(FSBAchievementTableProperty, ProgressAchievementOnCompleted2) == 0x00C0);
static_assert(offsetof(FSBAchievementTableProperty, ProgressAchievementArrayOnCompleted) == 0x00D0);
static_assert(offsetof(FSBAchievementTableProperty, FileSuffix) == 0x00E8);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, DifficultyAlias) == 0x0014);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, DifficultyStatGroupAlias) == 0x001C);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, Stat1) == 0x0024);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, StatCalculationType1) == 0x0025);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, Stat2) == 0x002C);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, StatCalculationType2) == 0x002D);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, Stat3) == 0x0034);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, StatCalculationType3) == 0x0035);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, Stat4) == 0x003C);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, StatCalculationType4) == 0x003D);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, Stat5) == 0x0044);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, StatCalculationType5) == 0x0045);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, Stat6) == 0x004C);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, StatCalculationType6) == 0x004D);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, Stat7) == 0x0054);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, StatCalculationType7) == 0x0055);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, Stat8) == 0x005C);
static_assert(offsetof(FSBDifficultyStatGroupTableProperty, StatCalculationType8) == 0x005D);
static_assert(offsetof(FSBCharacterLevelTableProperty, LevelType) == 0x0010);
static_assert(offsetof(FSBCharacterLevelTableProperty, Stat1) == 0x0018);
static_assert(offsetof(FSBCharacterLevelTableProperty, Stat2) == 0x0020);
static_assert(offsetof(FSBCharacterLevelTableProperty, RequiredItemAlias1) == 0x0028);
static_assert(offsetof(FSBCharacterLevelTableProperty, RequiredItemAlias2) == 0x0034);
static_assert(offsetof(FSBCharacterLevelTableProperty, ConditionGroup) == 0x0040);
static_assert(offsetof(FSBCharacterLevelTableProperty, ResultDescription) == 0x0048);
static_assert(offsetof(FSBCharacterLevelTableProperty, FileSuffix) == 0x0058);
static_assert(offsetof(FSBZonePhaseEventTableProperty, PhaseEventType) == 0x0014);
static_assert(offsetof(FSBZonePhaseEventTableProperty, ActiveEvent) == 0x0028);
static_assert(offsetof(FSBZonePhaseEventTableProperty, StartEvent) == 0x0048);
static_assert(offsetof(FSBZonePhaseEventTableProperty, CompleteEvent) == 0x0068);
static_assert(offsetof(FSBZonePhaseEventTableProperty, ActiveZoneEventList) == 0x0078);
static_assert(offsetof(FSBZonePhaseEventTableProperty, StartZoneEventList) == 0x0088);
static_assert(offsetof(FSBZonePhaseEventTableProperty, CompleteZoneEventList) == 0x0098);
static_assert(offsetof(FSBZonePhaseEventTableProperty, PhaseEventCompleteType) == 0x00A8);
static_assert(offsetof(FSBZonePhaseEventTableProperty, NextPhaseEvent) == 0x00B0);
static_assert(offsetof(FSBZonePhaseEventTableProperty, EventCondition) == 0x00BC);
static_assert(offsetof(FSBZonePhaseEventTableProperty, EventConditionGroup) == 0x00C4);
static_assert(offsetof(FSBZonePhaseEventTableProperty, FileSuffix) == 0x00D0);
static_assert(offsetof(FSBPuzzleStringArrayTableProperty, StringArray) == 0x0018);
static_assert(offsetof(FSBPuzzleStringArrayTableProperty, FileSuffix) == 0x0028);
static_assert(offsetof(FSBEventMetaAITableProperty, ToTarget) == 0x0014);
static_assert(offsetof(FSBEventMetaAITableProperty, TargetTagName) == 0x0018);
static_assert(offsetof(FSBEventMetaAITableProperty, EventConditionGroup) == 0x0020);
static_assert(offsetof(FSBEventMetaAITableProperty, EventCondition) == 0x0028);
static_assert(offsetof(FSBEventMetaAITableProperty, MetaAIEventType) == 0x0030);
static_assert(offsetof(FSBEventMetaAITableProperty, SpecialBehaviorTag) == 0x0034);
static_assert(offsetof(FSBEventMetaAITableProperty, AddTag) == 0x003C);
static_assert(offsetof(FSBEventMetaAITableProperty, ForceThink) == 0x0044);
static_assert(offsetof(FSBEventMetaAITableProperty, ForceThink_BehaviorAlias) == 0x0048);
static_assert(offsetof(FSBEventMetaAITableProperty, FileSuffix) == 0x0050);
static_assert(offsetof(FSBEventGuideActionTableProperty, ToTarget) == 0x0014);
static_assert(offsetof(FSBEventGuideActionTableProperty, TargetTagName) == 0x0018);
static_assert(offsetof(FSBEventGuideActionTableProperty, FollowerTagNameArray) == 0x0020);
static_assert(offsetof(FSBEventGuideActionTableProperty, GuideActionAlias) == 0x0038);
static_assert(offsetof(FSBEventGuideActionTableProperty, EventCondition) == 0x0040);
static_assert(offsetof(FSBEventGuideActionTableProperty, EventConditionGroup) == 0x0048);
static_assert(offsetof(FSBEventGuideActionTableProperty, FileSuffix) == 0x0050);
static_assert(offsetof(FSBGuideActionTableProperty, PathWayName) == 0x0018);
static_assert(offsetof(FSBGuideActionTableProperty, ZoneEventsWhenStart) == 0x0028);
static_assert(offsetof(FSBGuideActionTableProperty, ZoneEventsWhenArrive) == 0x0038);
static_assert(offsetof(FSBGuideActionTableProperty, ZoneEventsWhenComplete) == 0x0048);
static_assert(offsetof(FSBGuideActionTableProperty, TheaterWhenStart) == 0x0058);
static_assert(offsetof(FSBGuideActionTableProperty, TheaterWhenArrive) == 0x0068);
static_assert(offsetof(FSBGuideActionTableProperty, TheaterWhenComplete) == 0x0078);
static_assert(offsetof(FSBGuideActionTableProperty, TheaterWhenMovePause) == 0x0088);
static_assert(offsetof(FSBGuideActionTableProperty, LevelSequenceWhenStart) == 0x0098);
static_assert(offsetof(FSBGuideActionTableProperty, LevelSequenceWhenArrive) == 0x00A8);
static_assert(offsetof(FSBGuideActionTableProperty, LevelSequenceWhenComplete) == 0x00B8);
static_assert(offsetof(FSBGuideActionTableProperty, LevelSequenceWhenMovePause) == 0x00C8);
static_assert(offsetof(FSBGuideActionTableProperty, QuestTaskGroupAlias) == 0x00D8);
static_assert(offsetof(FSBGuideActionTableProperty, MoveStateFromForwardPlayer) == 0x00F1);
static_assert(offsetof(FSBGuideActionTableProperty, MoveStateFromBackwardPlayer) == 0x00FC);
static_assert(offsetof(FSBGuideActionTableProperty, MovePauseShow) == 0x0118);
static_assert(offsetof(FSBGuideActionTableProperty, StartShow) == 0x0130);
static_assert(offsetof(FSBGuideActionTableProperty, ArriveShow) == 0x0148);
static_assert(offsetof(FSBGuideActionTableProperty, StanceAlias) == 0x0170);
static_assert(offsetof(FSBGuideActionTableProperty, FormationType) == 0x018C);
static_assert(offsetof(FSBGuideActionTableProperty, FileSuffix) == 0x0198);
static_assert(offsetof(FSBZoneEventActorBattleStateTableProperty, ToTarget) == 0x0015);
static_assert(offsetof(FSBZoneEventActorBattleStateTableProperty, TargetTagName) == 0x0018);
static_assert(offsetof(FSBZoneEventActorBattleStateTableProperty, FileSuffix) == 0x0024);
static_assert(offsetof(FSBEquipStatViewerTableProperty, StatType) == 0x0014);
static_assert(offsetof(FSBEquipStatViewerTableProperty, CalculatedStatType) == 0x0015);
static_assert(offsetof(FSBEquipStatViewerTableProperty, EnhanceCharLevelType) == 0x0026);
static_assert(offsetof(FSBEquipStatViewerTableProperty, Achievement) == 0x002C);
static_assert(offsetof(FSBEquipStatViewerTableProperty, ConditionGroup) == 0x0034);
static_assert(offsetof(FSBEquipStatViewerTableProperty, FileSuffix) == 0x003C);
static_assert(offsetof(FSBActorStatTextTableProperty, StatType) == 0x0014);
static_assert(offsetof(FSBActorStatTextTableProperty, CalculatedStatType) == 0x0015);
static_assert(offsetof(FSBActorStatTextTableProperty, TextType) == 0x0016);
static_assert(offsetof(FSBActorStatTextTableProperty, FileSuffix) == 0x0018);
static_assert(offsetof(FSBZoneLayerTableProperty, LayerName) == 0x0014);
static_assert(offsetof(FSBZoneLayerTableProperty, ZoneList) == 0x0020);
static_assert(offsetof(FSBZoneLayerTableProperty, FileSuffix) == 0x0030);
static_assert(offsetof(FSBEventRequestPathWayTableProperty, LevelTargetFilter) == 0x0014);
static_assert(offsetof(FSBEventRequestPathWayTableProperty, ActionType) == 0x001C);
static_assert(offsetof(FSBEventRequestPathWayTableProperty, PathWayAlias) == 0x0020);
static_assert(offsetof(FSBEventRequestPathWayTableProperty, EventCondition) == 0x0028);
static_assert(offsetof(FSBEventRequestPathWayTableProperty, EventConditionGroup) == 0x0030);
static_assert(offsetof(FSBEventRequestPathWayTableProperty, FileSuffix) == 0x0038);
static_assert(offsetof(FSBEffectCombinationTableProperty, Effect1) == 0x0018);
static_assert(offsetof(FSBEffectCombinationTableProperty, Effect2) == 0x0028);
static_assert(offsetof(FSBEffectCombinationTableProperty, Effect3) == 0x0038);
static_assert(offsetof(FSBEffectCombinationTableProperty, Effect4) == 0x0048);
static_assert(offsetof(FSBEffectCombinationTableProperty, Effect5) == 0x0058);
static_assert(offsetof(FSBEffectCombinationTableProperty, ResultEffectAliasArray) == 0x0068);
static_assert(offsetof(FSBEffectCombinationTableProperty, FileSuffix) == 0x0078);
static_assert(offsetof(FSBSkillPriorityTableProperty, SkillSlotType) == 0x0014);
static_assert(offsetof(FSBSkillPriorityTableProperty, SkillAliasArray) == 0x0018);
static_assert(offsetof(FSBSkillPriorityTableProperty, FileSuffix) == 0x0028);
static_assert(offsetof(FSBPassiveSkillFunctionTableProperty, PassiveSkillEffectAliasArray) == 0x0018);
static_assert(offsetof(FSBPassiveSkillFunctionTableProperty, FileSuffix) == 0x0028);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, Type) == 0x0014);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, UsableSlot) == 0x0015);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, ConsumeItemAlias) == 0x0018);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, RequiredCompleteAchievement) == 0x002C);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, RequiredAcquisitionSkillAliasArray) == 0x0038);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, VisibleCondition) == 0x0049);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, PassiveSkillFunctionAlias) == 0x004C);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, SkillIconName) == 0x0054);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, SkillPreviewPath) == 0x0060);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, SkillEnergyVisibleType) == 0x0070);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, SkillImportanceType) == 0x0071);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, SkillTreeAlias) == 0x0074);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, SkillSlotAlias) == 0x007C);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, AchievementTag) == 0x0084);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, TitleName) == 0x0090);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, Description) == 0x00A0);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, Command) == 0x00B0);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, SkillPriorityAlias) == 0x00C0);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, SkillCommandAlias) == 0x00C8);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, TrainingRoom) == 0x00D0);
static_assert(offsetof(FSBAcquisitionSkillTableProperty, FileSuffix) == 0x00D8);
static_assert(offsetof(FSBMetaAIBehaviorTableProperty, Condition_StartTiredness_OperationType) == 0x002C);
static_assert(offsetof(FSBMetaAIBehaviorTableProperty, Condition_EndTiredness_OperationType) == 0x0034);
static_assert(offsetof(FSBMetaAIBehaviorTableProperty, FileSuffix) == 0x0038);
static_assert(offsetof(FSBMetaAITableProperty, Job) == 0x0014);
static_assert(offsetof(FSBMetaAITableProperty, Appearance) == 0x0018);
static_assert(offsetof(FSBMetaAITableProperty, InitTagArray) == 0x0020);
static_assert(offsetof(FSBMetaAITableProperty, ValidThinkArray) == 0x0030);
static_assert(offsetof(FSBMetaAITableProperty, BehaviorAliasArray) == 0x0040);
static_assert(offsetof(FSBMetaAITableProperty, LookAtType) == 0x005E);
static_assert(offsetof(FSBMetaAITableProperty, ShoulderChargeShowPath) == 0x0090);
static_assert(offsetof(FSBMetaAITableProperty, MoveAroundCustomBehavior1_ShowPath) == 0x00A8);
static_assert(offsetof(FSBMetaAITableProperty, MoveAroundCustomBehavior2_ShowPath) == 0x00C0);
static_assert(offsetof(FSBMetaAITableProperty, MoveAroundCustomBehavior3_ShowPath) == 0x00D8);
static_assert(offsetof(FSBMetaAITableProperty, MoveAroundCustomBehavior4_ShowPath) == 0x00F0);
static_assert(offsetof(FSBMetaAITableProperty, MoveAroundCustomBehavior5_ShowPath) == 0x0108);
static_assert(offsetof(FSBMetaAITableProperty, FileSuffix) == 0x0120);
static_assert(offsetof(FSBEventZoneEventActorControlTableProperty, ZoneEventActorName) == 0x0014);
static_assert(offsetof(FSBEventZoneEventActorControlTableProperty, ZoneEventActorControlType) == 0x001C);
static_assert(offsetof(FSBEventZoneEventActorControlTableProperty, EventCondition) == 0x0028);
static_assert(offsetof(FSBEventZoneEventActorControlTableProperty, EventConditionGroup) == 0x0030);
static_assert(offsetof(FSBEventZoneEventActorControlTableProperty, FileSuffix) == 0x0038);
static_assert(offsetof(FSBAIGroupTableProperty, TargetShareCondition) == 0x0018);
static_assert(offsetof(FSBAIGroupTableProperty, AttackerSelectMethod) == 0x0028);
static_assert(offsetof(FSBAIGroupTableProperty, MetaAIFormationType) == 0x0044);
static_assert(offsetof(FSBAIGroupTableProperty, FileSuffix) == 0x0050);
static_assert(offsetof(FSBEventItemActionTableProperty, ActionType) == 0x0014);
static_assert(offsetof(FSBEventItemActionTableProperty, Item) == 0x0018);
static_assert(offsetof(FSBEventItemActionTableProperty, TargetFilter) == 0x0024);
static_assert(offsetof(FSBEventItemActionTableProperty, EventCondition) == 0x002C);
static_assert(offsetof(FSBEventItemActionTableProperty, EventConditionGroup) == 0x0034);
static_assert(offsetof(FSBEventItemActionTableProperty, FileSuffix) == 0x003C);
static_assert(offsetof(FSBEventLaserControlTableProperty, LaserUniqueName) == 0x0014);
static_assert(offsetof(FSBEventLaserControlTableProperty, LaserGroupName) == 0x001C);
static_assert(offsetof(FSBEventLaserControlTableProperty, Activate) == 0x0024);
static_assert(offsetof(FSBEventLaserControlTableProperty, EventCondition) == 0x0028);
static_assert(offsetof(FSBEventLaserControlTableProperty, EventConditionGroup) == 0x0030);
static_assert(offsetof(FSBEventLaserControlTableProperty, FileSuffix) == 0x0038);
static_assert(offsetof(FSBEventAreaControlVolumeControlTableProperty, AreaControlVolume1) == 0x0014);
static_assert(offsetof(FSBEventAreaControlVolumeControlTableProperty, AreaControlVolume2) == 0x001C);
static_assert(offsetof(FSBEventAreaControlVolumeControlTableProperty, AreaControlVolume3) == 0x0024);
static_assert(offsetof(FSBEventAreaControlVolumeControlTableProperty, AreaControlVolume4) == 0x002C);
static_assert(offsetof(FSBEventAreaControlVolumeControlTableProperty, AreaControlVolume5) == 0x0034);
static_assert(offsetof(FSBEventAreaControlVolumeControlTableProperty, Activate) == 0x003C);
static_assert(offsetof(FSBEventAreaControlVolumeControlTableProperty, EventCondition) == 0x0040);
static_assert(offsetof(FSBEventAreaControlVolumeControlTableProperty, EventConditionGroup) == 0x0048);
static_assert(offsetof(FSBEventAreaControlVolumeControlTableProperty, FileSuffix) == 0x0050);
static_assert(offsetof(FSBAreaControlVolumeTableProperty, InitActivate) == 0x0014);
static_assert(offsetof(FSBAreaControlVolumeTableProperty, AdmissionPossibleTribeArray) == 0x0018);
static_assert(offsetof(FSBAreaControlVolumeTableProperty, AdmissionPossibleCharacterTagArray) == 0x0028);
static_assert(offsetof(FSBAreaControlVolumeTableProperty, SaveType) == 0x0039);
static_assert(offsetof(FSBAreaControlVolumeTableProperty, FileSuffix) == 0x003C);
static_assert(offsetof(FSBEventEffectVolumeControlTableProperty, EffectVolume) == 0x0014);
static_assert(offsetof(FSBEventEffectVolumeControlTableProperty, Activate) == 0x001C);
static_assert(offsetof(FSBEventEffectVolumeControlTableProperty, EventCondition) == 0x0020);
static_assert(offsetof(FSBEventEffectVolumeControlTableProperty, EventConditionGroup) == 0x0028);
static_assert(offsetof(FSBEventEffectVolumeControlTableProperty, FileSuffix) == 0x0030);
static_assert(offsetof(FSBEventEnvControlTableProperty, EnvSpawnAlias) == 0x0014);
static_assert(offsetof(FSBEventEnvControlTableProperty, EnvControlType) == 0x001C);
static_assert(offsetof(FSBEventEnvControlTableProperty, TargetCamp) == 0x0020);
static_assert(offsetof(FSBEventEnvControlTableProperty, TagName) == 0x0028);
static_assert(offsetof(FSBEventEnvControlTableProperty, Activate) == 0x0030);
static_assert(offsetof(FSBEventEnvControlTableProperty, EventCondition) == 0x0054);
static_assert(offsetof(FSBEventEnvControlTableProperty, EventConditionGroup) == 0x005C);
static_assert(offsetof(FSBEventEnvControlTableProperty, FileSuffix) == 0x0064);
static_assert(offsetof(FSBZoneEventActorTableProperty, CustomEffectValue) == 0x0020);
static_assert(offsetof(FSBZoneEventActorTableProperty, CustomEffectValueByFireElement) == 0x0030);
static_assert(offsetof(FSBZoneEventActorTableProperty, RewardSpawnFormationAsset) == 0x0058);
static_assert(offsetof(FSBZoneEventActorTableProperty, DestructionEvent_EffectAlias) == 0x0070);
static_assert(offsetof(FSBZoneEventActorTableProperty, DestructionEvent_RewardGroupAlias) == 0x0078);
static_assert(offsetof(FSBZoneEventActorTableProperty, DestructionEvent_RewardBucketType) == 0x0080);
static_assert(offsetof(FSBZoneEventActorTableProperty, DestructionEvent_RewardOverrideSaveType) == 0x0081);
static_assert(offsetof(FSBZoneEventActorTableProperty, DestructionEvent_ZoneEventAlias) == 0x0084);
static_assert(offsetof(FSBZoneEventActorTableProperty, DestructionEvent_ZoneEventAliasArray) == 0x0090);
static_assert(offsetof(FSBZoneEventActorTableProperty, DestructionEvent_EffectAliasArray) == 0x00A0);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEventStepArray) == 0x00B8);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEventRewardGroupAliasArray) == 0x00C8);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEventEffectAliasArray) == 0x00E8);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEventZoneEventAliasArray) == 0x00F8);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent1_RewardGroupAlias) == 0x0108);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent1_EffectAlias) == 0x0110);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent1_ZoneEventAlias) == 0x0118);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent2_RewardGroupAlias) == 0x0120);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent2_EffectAlias) == 0x0128);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent2_ZoneEventAlias) == 0x0130);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent3_RewardGroupAlias) == 0x0138);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent3_EffectAlias) == 0x0140);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent3_ZoneEventAlias) == 0x0148);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent4_RewardGroupAlias) == 0x0150);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent4_EffectAlias) == 0x0158);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent4_ZoneEventAlias) == 0x0160);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent5_RewardGroupAlias) == 0x0168);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent5_EffectAlias) == 0x0170);
static_assert(offsetof(FSBZoneEventActorTableProperty, CountEvent5_ZoneEventAlias) == 0x0178);
static_assert(offsetof(FSBZoneEventActorTableProperty, FileSuffix) == 0x0180);
static_assert(offsetof(FSBZoneEventActorTableProperty, EffectAliasArray) == 0x0188);
static_assert(offsetof(FSBZoneEventActorTableProperty, EffectAliasArrayByFireElement) == 0x0198);
static_assert(offsetof(FSBDropRateAdjustTableTableProperty, FileSuffix) == 0x0028);
static_assert(offsetof(FSBRewardGroupTableProperty, Group) == 0x0014);
static_assert(offsetof(FSBRewardGroupTableProperty, GiveType) == 0x001C);
static_assert(offsetof(FSBRewardGroupTableProperty, GroupAlias) == 0x0020);
static_assert(offsetof(FSBRewardGroupTableProperty, ItemAlias) == 0x0028);
static_assert(offsetof(FSBRewardGroupTableProperty, ItemVisualAlias) == 0x0030);
static_assert(offsetof(FSBRewardGroupTableProperty, ItemCategory) == 0x0038);
static_assert(offsetof(FSBRewardGroupTableProperty, ItemCategoryTag) == 0x003C);
static_assert(offsetof(FSBRewardGroupTableProperty, ItemRarity) == 0x0044);
static_assert(offsetof(FSBRewardGroupTableProperty, ConditionGroup) == 0x0048);
static_assert(offsetof(FSBRewardGroupTableProperty, DropType) == 0x0050);
static_assert(offsetof(FSBRewardGroupTableProperty, DropRateRarity) == 0x0051);
static_assert(offsetof(FSBRewardGroupTableProperty, RewardUIType) == 0x0070);
static_assert(offsetof(FSBRewardGroupTableProperty, FileSuffix) == 0x0074);
static_assert(offsetof(FSBGearStatGroupTableProperty, Group) == 0x0014);
static_assert(offsetof(FSBGearStatGroupTableProperty, StatCategoryTag) == 0x001C);
static_assert(offsetof(FSBGearStatGroupTableProperty, GearStatType) == 0x0024);
static_assert(offsetof(FSBGearStatGroupTableProperty, ActorStatType) == 0x0025);
static_assert(offsetof(FSBGearStatGroupTableProperty, EffectStatTag) == 0x0028);
static_assert(offsetof(FSBGearStatGroupTableProperty, FileSuffix) == 0x0030);
static_assert(offsetof(FSBGearStatTableProperty, StatCategoryTag) == 0x0014);
static_assert(offsetof(FSBGearStatTableProperty, GearStatType) == 0x001C);
static_assert(offsetof(FSBGearStatTableProperty, ActorStatType) == 0x001D);
static_assert(offsetof(FSBGearStatTableProperty, EffectStatTag) == 0x0020);
static_assert(offsetof(FSBGearStatTableProperty, Rarity) == 0x002C);
static_assert(offsetof(FSBGearStatTableProperty, EffectAliasArray) == 0x0038);
static_assert(offsetof(FSBGearStatTableProperty, TextEffectName) == 0x0048);
static_assert(offsetof(FSBGearStatTableProperty, TextEffectDesc) == 0x0058);
static_assert(offsetof(FSBGearStatTableProperty, FileSuffix) == 0x0068);
static_assert(offsetof(FSBItemReplacementTableProperty, ReplacementItemAlias) == 0x0014);
static_assert(offsetof(FSBItemReplacementTableProperty, FileSuffix) == 0x0024);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory1) == 0x0014);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory2) == 0x0020);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory3) == 0x002C);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory4) == 0x0038);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory5) == 0x0044);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory6) == 0x0050);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory7) == 0x005C);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory8) == 0x0068);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory9) == 0x0074);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory10) == 0x0080);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory11) == 0x008C);
static_assert(offsetof(FSBItemLureTableProperty, FishCategory12) == 0x0098);
static_assert(offsetof(FSBItemLureTableProperty, WeightUp) == 0x00A4);
static_assert(offsetof(FSBItemLureTableProperty, FileSuffix) == 0x00A8);
static_assert(offsetof(FSBItemBulletTableProperty, BulletAimImageType) == 0x0014);
static_assert(offsetof(FSBItemBulletTableProperty, BulletStartEffectArray) == 0x0020);
static_assert(offsetof(FSBItemBulletTableProperty, BulletDroneStartEffectArray) == 0x0030);
static_assert(offsetof(FSBItemBulletTableProperty, FileSuffix) == 0x006C);
static_assert(offsetof(FSBItemConsumableTableProperty, ConditionGroup) == 0x0014);
static_assert(offsetof(FSBItemConsumableTableProperty, EffectAliasArray) == 0x0020);
static_assert(offsetof(FSBItemConsumableTableProperty, ConsumeSkillAlias) == 0x0038);
static_assert(offsetof(FSBItemConsumableTableProperty, ConsumeEnergyType) == 0x0040);
static_assert(offsetof(FSBItemConsumableTableProperty, FileSuffix) == 0x004C);
static_assert(offsetof(FSBItemEquipableTableProperty, GearType) == 0x0014);
static_assert(offsetof(FSBItemEquipableTableProperty, BaseStatGroupAlias) == 0x0018);
static_assert(offsetof(FSBItemEquipableTableProperty, FileSuffix) == 0x0020);
static_assert(offsetof(FSBItemTableProperty, InventoryAlias) == 0x0014);
static_assert(offsetof(FSBItemTableProperty, NamePlural) == 0x0020);
static_assert(offsetof(FSBItemTableProperty, Name) == 0x0030);
static_assert(offsetof(FSBItemTableProperty, Desc) == 0x0040);
static_assert(offsetof(FSBItemTableProperty, DescFunction) == 0x0050);
static_assert(offsetof(FSBItemTableProperty, DescContent) == 0x0060);
static_assert(offsetof(FSBItemTableProperty, Category) == 0x0070);
static_assert(offsetof(FSBItemTableProperty, CategoryTag) == 0x0074);
static_assert(offsetof(FSBItemTableProperty, Rarity) == 0x007C);
static_assert(offsetof(FSBItemTableProperty, SaveType) == 0x007D);
static_assert(offsetof(FSBItemTableProperty, MaxAmountOverrideActorStat) == 0x0088);
static_assert(offsetof(FSBItemTableProperty, ChargeOverrideActorStat) == 0x0090);
static_assert(offsetof(FSBItemTableProperty, StudioAsset3D) == 0x0098);
static_assert(offsetof(FSBItemTableProperty, Asset3D) == 0x00A8);
static_assert(offsetof(FSBItemTableProperty, Asset3DArg) == 0x00B8);
static_assert(offsetof(FSBItemTableProperty, Asset2D) == 0x00D0);
static_assert(offsetof(FSBItemTableProperty, AlbumAsset2D) == 0x00E0);
static_assert(offsetof(FSBItemTableProperty, SpecialRewardAsset2D) == 0x00F0);
static_assert(offsetof(FSBItemTableProperty, GainAllowShowPath) == 0x0108);
static_assert(offsetof(FSBItemTableProperty, AfterGainShowPath) == 0x0118);
static_assert(offsetof(FSBItemTableProperty, AfterGainShowParam) == 0x0128);
static_assert(offsetof(FSBItemTableProperty, EquipableAlias) == 0x0144);
static_assert(offsetof(FSBItemTableProperty, ConsumableAlias) == 0x014C);
static_assert(offsetof(FSBItemTableProperty, SkillEquipableAlias) == 0x0154);
static_assert(offsetof(FSBItemTableProperty, EquipmentAlias) == 0x015C);
static_assert(offsetof(FSBItemTableProperty, EquipmentAlias2) == 0x0164);
static_assert(offsetof(FSBItemTableProperty, BulletAlias) == 0x0180);
static_assert(offsetof(FSBItemTableProperty, AutoCharacterLevelUpType) == 0x0188);
static_assert(offsetof(FSBItemTableProperty, NotiType) == 0x0189);
static_assert(offsetof(FSBItemTableProperty, ScanDisplayType) == 0x018A);
static_assert(offsetof(FSBItemTableProperty, ScanDisplayGroup) == 0x018C);
static_assert(offsetof(FSBItemTableProperty, LureAlias) == 0x019C);
static_assert(offsetof(FSBItemTableProperty, ValidConditionGroup) == 0x01AC);
static_assert(offsetof(FSBItemTableProperty, FileSuffix) == 0x01B4);
static_assert(offsetof(FSBZoneEnvNotifyInfo, NotifyZoneEvent) == 0x0008);
static_assert(offsetof(FSBZoneEnvProgressNotifyInfo, NotifyFireType) == 0x0000);
static_assert(offsetof(FSBZoneEnvProgressNotifyInfo, ProgressNotifyList) == 0x0008);
static_assert(offsetof(FSBZoneEnvTargetStateInfo, ToStateTagNameList) == 0x0000);
static_assert(offsetof(FSBZoneEnvTargetStateInfo, TransitSequenceList) == 0x0010);
static_assert(offsetof(FSBZoneEnvTargetStateInfo, TransitActorTemplate) == 0x0020);
static_assert(offsetof(FSBZoneEnvTargetStateInfo, AttachTagName) == 0x0030);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, Zone) == 0x0014);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ZoneList) == 0x0020);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EnvActorName) == 0x0030);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EnvBPPath) == 0x0038);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, SpawnPointName) == 0x0048);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, SpawnConditionGroup) == 0x0050);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EnvAlias) == 0x0058);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, InitActivate) == 0x0060);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, InitEnvActiveState) == 0x0061);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, InitStateTag) == 0x0064);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, SaveType) == 0x006C);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EventTagName1) == 0x0070);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TagEventList1) == 0x0078);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EventTagName2) == 0x0088);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TagEventList2) == 0x0090);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EventTagName3) == 0x00A0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TagEventList3) == 0x00A8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EventTagName4) == 0x00B8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TagEventList4) == 0x00C0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EventTagName5) == 0x00D0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TagEventList5) == 0x00D8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EventTagName6) == 0x00E8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TagEventList6) == 0x00F0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EventTagName7) == 0x0100);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TagEventList7) == 0x0108);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EventTagName8) == 0x0118);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TagEventList8) == 0x0120);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EventTagName9) == 0x0130);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TagEventList9) == 0x0138);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EventTagName10) == 0x0148);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TagEventList10) == 0x0150);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardTagName1) == 0x0160);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, State_RewardGroup1) == 0x0168);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardTagName2) == 0x0170);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, State_RewardGroup2) == 0x0178);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardTagName3) == 0x0180);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, State_RewardGroup3) == 0x0188);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardTagName4) == 0x0190);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, State_RewardGroup4) == 0x0198);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardTagName5) == 0x01A0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, State_RewardGroup5) == 0x01A8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardTagName6) == 0x01B0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, State_RewardGroup6) == 0x01B8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardTagName7) == 0x01C0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, State_RewardGroup7) == 0x01C8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardTagName8) == 0x01D0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, State_RewardGroup8) == 0x01D8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardTagName9) == 0x01E0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, State_RewardGroup9) == 0x01E8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardTagName10) == 0x01F0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, State_RewardGroup10) == 0x01F8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardSpawnFormationAsset) == 0x0200);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardSpawnBucketType) == 0x0210);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, RewardOverrideSaveType) == 0x0211);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, Interaction) == 0x0230);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ActiveEnterEvents) == 0x0240);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ActiveLeaveEvents) == 0x0250);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, LinkEnvSpawnList) == 0x0260);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TargetCamp) == 0x0270);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TriggerCondition) == 0x027C);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TriggerTrueEvents) == 0x0288);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TriggerFalseEvents) == 0x0298);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, TrueEnvState) == 0x02A8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, FalseEnvState) == 0x02B0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, InitProgressValue) == 0x02B8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, StartProgressValue) == 0x02C8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, EndProgressValue) == 0x02D8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ProgressNotifyEventList) == 0x02E8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, Description) == 0x02F8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, PuzzleCompareData) == 0x0308);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, PuzzleDataType) == 0x0318);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, PuzzleEq) == 0x0319);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, PuzzleInputText1) == 0x031C);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, PuzzleInputText2) == 0x0324);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, PuzzleInputText3) == 0x032C);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, PuzzleInputText4) == 0x0334);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, PuzzleInputTextList5) == 0x0340);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, SequenceTagNameList) == 0x0350);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, OutTransitTheaterList) == 0x0360);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, OutTransitSequenceList) == 0x0370);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, OutTransitTemplatePath) == 0x0380);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, OutTransitAttachTagNames) == 0x0390);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ActiveTheaterList) == 0x03A0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ActiveSequenceList) == 0x03B0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ActiveTemplatePath) == 0x03C0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ActiveAttachTagNames) == 0x03D0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, LoopSequenceList) == 0x03E0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, LoopTemplatePath) == 0x03F0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, LoopAttachTagNames) == 0x0400);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ForceLoopStopWhenChangeState) == 0x0410);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, DontStopLoopSequenceAtDestoryOptionList) == 0x0420);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, UseTemplateTransformList) == 0x0430);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ToTargetStateInfoList) == 0x0440);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ShopDataList) == 0x0460);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, SpawnPosition) == 0x0470);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ResetFilterType) == 0x047D);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ResetFilterCondition) == 0x0480);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, WorldMapDisplayType) == 0x0488);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, WorldMapDisplayTitle) == 0x0490);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, WorldMapDisplayDesc) == 0x04A0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, WorldMapDisplayConditionGroup) == 0x04B0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, WorldMapIconTag) == 0x04B8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, InteractionRelevantType) == 0x04C9);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, ScanOverrideStencilValue) == 0x04D0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, InteractionDisable_Condition) == 0x04D8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, InteractionDisable_ConditionGroup) == 0x04E8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, NikkeLostArticle) == 0x04F0);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, NikkeFriendlyNpc) == 0x04F8);
static_assert(offsetof(FSBZoneEnvSpawnTableProperty, FileSuffix) == 0x0500);
static_assert(offsetof(FSBEffectDataList, EffectList) == 0x0000);
static_assert(offsetof(FSBZoneEventDataList, ZoneEventList) == 0x0000);
static_assert(offsetof(FSBZoneEnvTableProperty, EnvType) == 0x0014);
static_assert(offsetof(FSBZoneEnvTableProperty, StateTagNameList) == 0x0018);
static_assert(offsetof(FSBZoneEnvTableProperty, StateEffectList) == 0x0028);
static_assert(offsetof(FSBZoneEnvTableProperty, StateZoneEventList) == 0x0038);
static_assert(offsetof(FSBZoneEnvTableProperty, StateConditionGroupList) == 0x0048);
static_assert(offsetof(FSBZoneEnvTableProperty, StateRewardGroupList) == 0x0058);
static_assert(offsetof(FSBZoneEnvTableProperty, StateCasterShowPathList) == 0x0068);
static_assert(offsetof(FSBZoneEnvTableProperty, StateProgressCountList) == 0x0078);
static_assert(offsetof(FSBZoneEnvTableProperty, StateProgressChangeTagNameList) == 0x0088);
static_assert(offsetof(FSBZoneEnvTableProperty, RewardSpawnBucketType) == 0x0098);
static_assert(offsetof(FSBZoneEnvTableProperty, RewardOverrideSaveType) == 0x0099);
static_assert(offsetof(FSBZoneEnvTableProperty, RewardSpawnFormationAsset) == 0x00A0);
static_assert(offsetof(FSBZoneEnvTableProperty, EnvObjectMaterial) == 0x00B0);
static_assert(offsetof(FSBZoneEnvTableProperty, ActiveEnterEvents) == 0x00C8);
static_assert(offsetof(FSBZoneEnvTableProperty, ActiveLeaveEvents) == 0x00D8);
static_assert(offsetof(FSBZoneEnvTableProperty, ProgressMaxValue) == 0x00E8);
static_assert(offsetof(FSBZoneEnvTableProperty, bProgressAlwaysUpdates) == 0x00F8);
static_assert(offsetof(FSBZoneEnvTableProperty, ProgressNotifyEventList) == 0x0108);
static_assert(offsetof(FSBZoneEnvTableProperty, TriggerCondition) == 0x011C);
static_assert(offsetof(FSBZoneEnvTableProperty, TriggerTrueEvents) == 0x0128);
static_assert(offsetof(FSBZoneEnvTableProperty, TriggerFalseEvents) == 0x0138);
static_assert(offsetof(FSBZoneEnvTableProperty, TrueEnvState) == 0x0148);
static_assert(offsetof(FSBZoneEnvTableProperty, FalseEnvState) == 0x0150);
static_assert(offsetof(FSBZoneEnvTableProperty, Interaction) == 0x0170);
static_assert(offsetof(FSBZoneEnvTableProperty, CampType) == 0x0181);
static_assert(offsetof(FSBZoneEnvTableProperty, CampObjectType) == 0x0182);
static_assert(offsetof(FSBZoneEnvTableProperty, PuzzleCompareData) == 0x0188);
static_assert(offsetof(FSBZoneEnvTableProperty, PuzzleDataType) == 0x0198);
static_assert(offsetof(FSBZoneEnvTableProperty, PuzzleEq) == 0x0199);
static_assert(offsetof(FSBZoneEnvTableProperty, ScanDisplayType) == 0x019A);
static_assert(offsetof(FSBZoneEnvTableProperty, NikkeDefenseArea_EnemyEnter_Events) == 0x01A0);
static_assert(offsetof(FSBZoneEnvTableProperty, NikkeDefenseArea_EnemyEmpty_Events) == 0x01B0);
static_assert(offsetof(FSBZoneEnvTableProperty, FileSuffix) == 0x01C0);
static_assert(offsetof(FSBConditionGroupTableProperty, Conditions) == 0x0018);
static_assert(offsetof(FSBConditionGroupTableProperty, ConditionEq) == 0x0028);
static_assert(offsetof(FSBConditionGroupTableProperty, ConditionGroup1) == 0x002C);
static_assert(offsetof(FSBConditionGroupTableProperty, GroupEq1) == 0x0034);
static_assert(offsetof(FSBConditionGroupTableProperty, ConditionGroup2) == 0x0038);
static_assert(offsetof(FSBConditionGroupTableProperty, GroupEq2) == 0x0040);
static_assert(offsetof(FSBConditionGroupTableProperty, FileSuffix) == 0x0044);
static_assert(offsetof(FSBConditionTableProperty, ConditionType) == 0x0014);
static_assert(offsetof(FSBConditionTableProperty, ConditionEq) == 0x0015);
static_assert(offsetof(FSBConditionTableProperty, CustomStr01) == 0x0018);
static_assert(offsetof(FSBConditionTableProperty, CustomStr02) == 0x0028);
static_assert(offsetof(FSBConditionTableProperty, CustomStr03) == 0x0038);
static_assert(offsetof(FSBConditionTableProperty, CheckStrValue) == 0x0048);
static_assert(offsetof(FSBConditionTableProperty, CheckStatCalcType) == 0x005C);
static_assert(offsetof(FSBConditionTableProperty, ActorTargetType) == 0x005D);
static_assert(offsetof(FSBConditionTableProperty, GameOptionType) == 0x005E);
static_assert(offsetof(FSBConditionTableProperty, FailNotifyMsg) == 0x0060);
static_assert(offsetof(FSBConditionTableProperty, FileSuffix) == 0x0070);
static_assert(offsetof(FSBQuestTaskTableProperty, Description) == 0x0018);
static_assert(offsetof(FSBQuestTaskTableProperty, MissionType) == 0x0030);
static_assert(offsetof(FSBQuestTaskTableProperty, OwnerFilter) == 0x0034);
static_assert(offsetof(FSBQuestTaskTableProperty, TargetFilter) == 0x0040);
static_assert(offsetof(FSBQuestTaskTableProperty, TrackingTargetFilter) == 0x0050);
static_assert(offsetof(FSBQuestTaskTableProperty, TrackingConditionGroup) == 0x0060);
static_assert(offsetof(FSBQuestTaskTableProperty, CustomNameArray) == 0x0068);
static_assert(offsetof(FSBQuestTaskTableProperty, CustomStr) == 0x0078);
static_assert(offsetof(FSBQuestTaskTableProperty, CustomStr2) == 0x0088);
static_assert(offsetof(FSBQuestTaskTableProperty, UIType) == 0x00A8);
static_assert(offsetof(FSBQuestTaskTableProperty, DescriptionUIType) == 0x00A9);
static_assert(offsetof(FSBQuestTaskTableProperty, TaskConditionUIType) == 0x00AA);
static_assert(offsetof(FSBQuestTaskTableProperty, TaskStartEventSpawnAliasList) == 0x00C0);
static_assert(offsetof(FSBQuestTaskTableProperty, TaskCompleteEventSpawnAliasList) == 0x00E0);
static_assert(offsetof(FSBQuestTaskTableProperty, TaskProgressEventProgressCountList) == 0x0100);
static_assert(offsetof(FSBQuestTaskTableProperty, TaskProgressEventSpawnAliasList) == 0x0110);
static_assert(offsetof(FSBQuestTaskTableProperty, FileSuffix) == 0x0120);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, Description) == 0x0018);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, TaskContainerArray) == 0x0030);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, ActivateEvent) == 0x0040);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, ProgressEvent) == 0x0050);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, CompleteEvent) == 0x0060);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, QuestPathStartNodes) == 0x0070);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, QuestPathWorlds) == 0x0080);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, QuestPathAreas) == 0x0090);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, RestartRule) == 0x00A0);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, WarpType) == 0x00A9);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, WarpUIDescription) == 0x00B0);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, WarpConditionGroup) == 0x00C8);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, WarpTargetCamp) == 0x00D0);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, WarpTargetWorld) == 0x00D8);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, WarpTargetLocation) == 0x00E0);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, WarpTargetRotation) == 0x00EC);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, WarpTargetSpawnPoint) == 0x00F8);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, WarpChoiceYesPlayTheater) == 0x0100);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, WarpChoiceNoPlayTheater) == 0x0108);
static_assert(offsetof(FSBQuestTaskGroupTableProperty, FileSuffix) == 0x0110);
static_assert(offsetof(FSBEventQuestTableProperty, Quest) == 0x0014);
static_assert(offsetof(FSBEventQuestTableProperty, TargetType) == 0x001C);
static_assert(offsetof(FSBEventQuestTableProperty, EventCondition) == 0x0020);
static_assert(offsetof(FSBEventQuestTableProperty, EventConditionGroup) == 0x0028);
static_assert(offsetof(FSBEventQuestTableProperty, FileSuffix) == 0x0030);
static_assert(offsetof(FSBQuestMissionTableProperty, MissionType) == 0x0014);
static_assert(offsetof(FSBQuestMissionTableProperty, OwnerFilter) == 0x0018);
static_assert(offsetof(FSBQuestMissionTableProperty, TargetFilter) == 0x0020);
static_assert(offsetof(FSBQuestMissionTableProperty, CustomStr) == 0x0028);
static_assert(offsetof(FSBQuestMissionTableProperty, ActivateEvent) == 0x0048);
static_assert(offsetof(FSBQuestMissionTableProperty, ProgressEvent) == 0x0058);
static_assert(offsetof(FSBQuestMissionTableProperty, CompleteEvent) == 0x0068);
static_assert(offsetof(FSBQuestMissionTableProperty, FileSuffix) == 0x0078);
static_assert(offsetof(FSBQuestTableProperty, QuestType) == 0x0014);
static_assert(offsetof(FSBQuestTableProperty, QuestUIType) == 0x0015);
static_assert(offsetof(FSBQuestTableProperty, RequestType) == 0x0016);
static_assert(offsetof(FSBQuestTableProperty, DisplayRequestBoardType) == 0x0017);
static_assert(offsetof(FSBQuestTableProperty, NextQuest) == 0x0018);
static_assert(offsetof(FSBQuestTableProperty, TitleName_) == 0x0020);
static_assert(offsetof(FSBQuestTableProperty, Description_) == 0x0038);
static_assert(offsetof(FSBQuestTableProperty, RequestDescription) == 0x0050);
static_assert(offsetof(FSBQuestTableProperty, Report) == 0x0068);
static_assert(offsetof(FSBQuestTableProperty, reward) == 0x0080);
static_assert(offsetof(FSBQuestTableProperty, FailAchievementCondition) == 0x0088);
static_assert(offsetof(FSBQuestTableProperty, FailConditionGroup) == 0x0090);
static_assert(offsetof(FSBQuestTableProperty, FailConditionEventType) == 0x0098);
static_assert(offsetof(FSBQuestTableProperty, FailConditionResultType) == 0x0099);
static_assert(offsetof(FSBQuestTableProperty, AvailableConditionGroup) == 0x009C);
static_assert(offsetof(FSBQuestTableProperty, ValidConditionGroup) == 0x00A4);
static_assert(offsetof(FSBQuestTableProperty, AcquireSound) == 0x00B0);
static_assert(offsetof(FSBQuestTableProperty, AcquireSubtitleType) == 0x00C0);
static_assert(offsetof(FSBQuestTableProperty, AcquireSubtitleTitle) == 0x00C8);
static_assert(offsetof(FSBQuestTableProperty, AcquireSubtitleMessage) == 0x00E0);
static_assert(offsetof(FSBQuestTableProperty, RequiredQuestArray) == 0x00F8);
static_assert(offsetof(FSBQuestTableProperty, TaskGroupAlias) == 0x0108);
static_assert(offsetof(FSBQuestTableProperty, AcquireEventArray) == 0x0118);
static_assert(offsetof(FSBQuestTableProperty, CompleteEventArray) == 0x0128);
static_assert(offsetof(FSBQuestTableProperty, QuestPathStartNodes) == 0x0138);
static_assert(offsetof(FSBQuestTableProperty, QuestPathWorlds) == 0x0148);
static_assert(offsetof(FSBQuestTableProperty, AcquireEventActionAliasList) == 0x0168);
static_assert(offsetof(FSBQuestTableProperty, FileSuffix) == 0x017C);
static_assert(offsetof(FSBQuestEventInfo, EventAlias) == 0x0000);
static_assert(offsetof(FSBConditionTriggerTableProperty, ConditionType) == 0x0010);
static_assert(offsetof(FSBConditionTriggerTableProperty, ResultType) == 0x0011);
static_assert(offsetof(FSBConditionTriggerTableProperty, FileSuffix) == 0x0014);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetTribe1) == 0x0014);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetRelation1) == 0x001C);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetTribe2) == 0x0020);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetRelation2) == 0x0028);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetTribe3) == 0x002C);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetRelation3) == 0x0034);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetTribe4) == 0x0038);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetRelation4) == 0x0040);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetTribe5) == 0x0044);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetRelation5) == 0x004C);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetTribe6) == 0x0050);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetRelation6) == 0x0058);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetTribe7) == 0x005C);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetRelation7) == 0x0064);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetTribe8) == 0x0068);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetRelation8) == 0x0070);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetTribe9) == 0x0074);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetRelation9) == 0x007C);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetTribe10) == 0x0080);
static_assert(offsetof(FSBCharacterTribeTableProperty, TargetRelation10) == 0x0088);
static_assert(offsetof(FSBCharacterTribeTableProperty, FileSuffix) == 0x008C);
static_assert(offsetof(FSBLevelTargetFilterTableProperty, TargetType) == 0x0014);
static_assert(offsetof(FSBLevelTargetFilterTableProperty, EventSpawnAlias) == 0x0018);
static_assert(offsetof(FSBLevelTargetFilterTableProperty, TargetAlias) == 0x0020);
static_assert(offsetof(FSBLevelTargetFilterTableProperty, SpawnPointName) == 0x0028);
static_assert(offsetof(FSBLevelTargetFilterTableProperty, EnvSpawnAlias) == 0x0030);
static_assert(offsetof(FSBLevelTargetFilterTableProperty, EnvAlias) == 0x0038);
static_assert(offsetof(FSBLevelTargetFilterTableProperty, FileSuffix) == 0x0044);
static_assert(offsetof(FSBCharacterWeightTableProperty, FileSuffix) == 0x003C);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, CharacterAssetPath) == 0x0014);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, BodyMesh) == 0x0024);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FaceMesh) == 0x002C);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, BodyAnimAssetPath) == 0x0034);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FaceAnimAssetPath) == 0x003C);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FaceAttachType) == 0x0044);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, BattleToPeacefulShowPath) == 0x0048);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, PeacefulToBattleShowPath) == 0x0050);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, PeacefulToBattleShowPath_LockOn) == 0x0058);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, BattleToPeacefulShowPath_Move) == 0x0060);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, PeacefulToBattleShowPath_Move) == 0x0068);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, PeacefulToBattleShowPath_Move_LockOn) == 0x0070);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, BattleToPeacefulShowPath_NoneAnim) == 0x0078);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, PeacefulToBattleShowPath_NoneAnim) == 0x0080);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, PeacefulToBattleShowPath_NoneAnim_LockOn) == 0x0088);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, IdleToGroggyShowPath) == 0x0090);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, IdleToDownShowPath) == 0x0098);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, IdleToDeadShowPath) == 0x00A0);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, IdleToAirborneShowPath) == 0x00A8);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, DownToIdleShowPath) == 0x00B0);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, GroggyToIdleShowPath) == 0x00B8);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, AirborneToIdleShowPath) == 0x00C0);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, GroggyToAirborneShowPath) == 0x00C8);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, DownToAirborneShowPath) == 0x00D0);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, GroggyToDownShowPath) == 0x00D8);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, AirborneToDownShowPath) == 0x00E0);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, StartSlopeShow) == 0x00E8);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, EndSlopeShow) == 0x00F8);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FishingAimToTakeBackShowPath) == 0x0108);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FishingTakeBackToAimShowPath) == 0x0110);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FishingTakeBackToCastingShowPath) == 0x0118);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FishingCastingToWaitShowPath) == 0x0120);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FishingWaitToFightShowPath) == 0x0128);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FishingWaitToIdleShowPath) == 0x0130);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FishingFightToIdleShowPath) == 0x0138);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FishingCatchShowPath) == 0x0140);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FishingLureChangeShowPath) == 0x0148);
static_assert(offsetof(FSBCharacterAppearanceTableProperty, FileSuffix) == 0x0150);
static_assert(offsetof(FSBZoneEventActorActiveTableProperty, ToTarget) == 0x0015);
static_assert(offsetof(FSBZoneEventActorActiveTableProperty, TargetTagName) == 0x0018);
static_assert(offsetof(FSBZoneEventActorActiveTableProperty, FileSuffix) == 0x0020);
static_assert(offsetof(FSBZoneEventUIActionTableProperty, UIActionType) == 0x0014);
static_assert(offsetof(FSBZoneEventUIActionTableProperty, UILogicType) == 0x0015);
static_assert(offsetof(FSBZoneEventUIActionTableProperty, UIActionRequestIndex) == 0x0018);
static_assert(offsetof(FSBZoneEventUIActionTableProperty, CustomStrValue1) == 0x0028);
static_assert(offsetof(FSBZoneEventUIActionTableProperty, CustomStrValue2) == 0x0038);
static_assert(offsetof(FSBZoneEventUIActionTableProperty, EventCondition) == 0x0048);
static_assert(offsetof(FSBZoneEventUIActionTableProperty, EventConditionGroup) == 0x0050);
static_assert(offsetof(FSBZoneEventUIActionTableProperty, EventorType) == 0x0058);
static_assert(offsetof(FSBZoneEventUIActionTableProperty, FileSuffix) == 0x005C);
static_assert(offsetof(FSBZoneEventObjControl, TargetDataAlias) == 0x0014);
static_assert(offsetof(FSBZoneEventObjControl, TargetFilter) == 0x001C);
static_assert(offsetof(FSBZoneEventObjControl, ObjectType) == 0x0024);
static_assert(offsetof(FSBZoneEventObjControl, Activate) == 0x0025);
static_assert(offsetof(FSBZoneEventObjControl, ObjectControlActionType) == 0x0026);
static_assert(offsetof(FSBZoneEventObjControl, RetargetSpawnPointName) == 0x0028);
static_assert(offsetof(FSBZoneEventObjControl, EventCondition) == 0x0034);
static_assert(offsetof(FSBZoneEventObjControl, EventConditionGroup) == 0x003C);
static_assert(offsetof(FSBZoneEventObjControl, FileSuffix) == 0x0044);
static_assert(offsetof(FSBZoneEventAIDecoTableProperty, TargetFilter) == 0x0014);
static_assert(offsetof(FSBZoneEventAIDecoTableProperty, ValueKey) == 0x001C);
static_assert(offsetof(FSBZoneEventAIDecoTableProperty, ValueType) == 0x0024);
static_assert(offsetof(FSBZoneEventAIDecoTableProperty, EventCondition) == 0x0034);
static_assert(offsetof(FSBZoneEventAIDecoTableProperty, EventConditionGroup) == 0x003C);
static_assert(offsetof(FSBZoneEventAIDecoTableProperty, FileSuffix) == 0x0044);
static_assert(offsetof(FSBZoneEventItemTableProperty, ControlType) == 0x0014);
static_assert(offsetof(FSBZoneEventItemTableProperty, SpawnType) == 0x0015);
static_assert(offsetof(FSBZoneEventItemTableProperty, World) == 0x0018);
static_assert(offsetof(FSBZoneEventItemTableProperty, Zone) == 0x0020);
static_assert(offsetof(FSBZoneEventItemTableProperty, SaveType) == 0x0028);
static_assert(offsetof(FSBZoneEventItemTableProperty, EventorType) == 0x0029);
static_assert(offsetof(FSBZoneEventItemTableProperty, SpawnPointName) == 0x002C);
static_assert(offsetof(FSBZoneEventItemTableProperty, SpawnItemAlias) == 0x0034);
static_assert(offsetof(FSBZoneEventItemTableProperty, SpawnInfoAlias) == 0x0040);
static_assert(offsetof(FSBZoneEventItemTableProperty, SpawnItemBucketType) == 0x0048);
static_assert(offsetof(FSBZoneEventItemTableProperty, CheckAchievements) == 0x0050);
static_assert(offsetof(FSBZoneEventItemTableProperty, AcquireZoneEvents) == 0x0060);
static_assert(offsetof(FSBZoneEventItemTableProperty, FileSuffix) == 0x0078);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, SelectDataName) == 0x0014);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, Conditions) == 0x0020);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, ConditionGroup) == 0x0030);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, DesignType) == 0x0038);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, TitleMessageText) == 0x0040);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, TextVisibleType) == 0x0058);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, DisplayText) == 0x0060);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, NextTaskTagName) == 0x0078);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, InteractionGraphExec) == 0x0084);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, QuestSymbolType) == 0x008D);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, QuestSymbol_VisibilityConditionGorup) == 0x0090);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, SelectedMessagePopupText) == 0x00A8);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, Description) == 0x00C0);
static_assert(offsetof(FSBTheaterSelectDataTableProperty, FileSuffix) == 0x00D0);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, TheaterAlias) == 0x0014);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, TheaterAssetPath) == 0x0020);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, LevelSeqAssetPath) == 0x0030);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, ControlType) == 0x0040);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, SequencePlayTransformType) == 0x0041);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, SequencePlayTransformCastType) == 0x0042);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, BindTargetType) == 0x0043);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, EventSpawnAlias) == 0x0050);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, BindZoneEnvAlias) == 0x0058);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, EventCondition) == 0x006C);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, EventConditionGroup) == 0x0074);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, TheaterSelectDataList) == 0x0080);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, MeshClipingApplyType1) == 0x009E);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, MeshClipingLocation1) == 0x00A0);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, MeshClipingRotation1) == 0x00AC);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, MeshClipingScale1) == 0x00B8);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, MeshClipingApplyType2) == 0x00C4);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, MeshClipingLocation2) == 0x00C8);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, MeshClipingRotation2) == 0x00D4);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, MeshClipingScale2) == 0x00E0);
static_assert(offsetof(FSBZoneEventTheaterTableProperty, FileSuffix) == 0x00F0);
static_assert(offsetof(FSBZoneEventZoneControlTableProperty, ZoneAlias) == 0x0014);
static_assert(offsetof(FSBZoneEventZoneControlTableProperty, ControlType) == 0x001C);
static_assert(offsetof(FSBZoneEventZoneControlTableProperty, EventCondition) == 0x0020);
static_assert(offsetof(FSBZoneEventZoneControlTableProperty, EventConditionGroup) == 0x0028);
static_assert(offsetof(FSBZoneEventZoneControlTableProperty, FileSuffix) == 0x0030);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, SpawnPointName) == 0x0014);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, InitActivate) == 0x001C);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, CharacterAlias) == 0x0020);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, SpawnType) == 0x0030);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, SpawnRotationType) == 0x0031);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, Zone) == 0x0034);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, SpawnGroupRuleAlias) == 0x003C);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, SaveType) == 0x0044);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, SaveSubProperty) == 0x0045);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, KeepObjResetTransformType) == 0x0047);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, EventOnSpawning) == 0x0060);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, EventOnDead) == 0x0070);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, EventOnBattle) == 0x0080);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, EventFirstTimeOnBattle) == 0x0090);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, SpawnShow) == 0x00A0);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, PathWay) == 0x00B8);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, RewardGroup) == 0x00C8);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, RewardSpawnBucketType) == 0x00D0);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, RewardOverrideSaveType) == 0x00D1);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, TagName) == 0x00D4);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, AIGroupAlias) == 0x00E0);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, AIGroupName) == 0x00E8);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, MetaAIAlias) == 0x00F4);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, MetaAI_InitThink) == 0x00FC);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, MetaAI_SpecialBehaviorTag) == 0x0100);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, OwnerRotationType) == 0x0120);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, TransitStayZoneSaveType) == 0x0123);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, AdjustInteractTargetPosType) == 0x0124);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, Interaction) == 0x0128);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, ConditionsTrigger) == 0x0138);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, ConditionTriggerEvent) == 0x0148);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, CheckAchievements) == 0x0178);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, bCheckAchievementNotOperate) == 0x0188);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, CheckAchievementProgress) == 0x0198);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, ShopDataList) == 0x01A8);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, SpawnEffectList) == 0x01B8);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, SpawnRuleType) == 0x01C8);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, PuzzleInputText1) == 0x01D4);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, PuzzleInputText2) == 0x01DC);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, PuzzleInputText3) == 0x01E4);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, PuzzleInputText4) == 0x01EC);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, PuzzleInputTextList5) == 0x01F8);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, SpawnPosition) == 0x0208);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, WorldMapDisplayType) == 0x0214);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, WorldMapDisplayTitle) == 0x0218);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, WorldMapDisplayDesc) == 0x0228);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, WorldMapDisplayConditionGroup) == 0x0238);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, WorldMapIconTag) == 0x0240);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, InteractionRelevantType) == 0x0251);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, ObjectMaterial) == 0x0258);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, InteractionDisable_Condition) == 0x0268);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, InteractionDisable_ConditionGroup) == 0x0278);
static_assert(offsetof(FSBNGPlusZoneEventSpawnTableProperty, FileSuffix) == 0x0284);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, SpawnPointName) == 0x0014);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, InitActivate) == 0x001C);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, CharacterAlias) == 0x0020);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, SpawnType) == 0x0030);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, SpawnRotationType) == 0x0031);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, Zone) == 0x0034);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, SpawnGroupRuleAlias) == 0x003C);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, SaveType) == 0x0044);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, SaveSubProperty) == 0x0045);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, KeepObjResetTransformType) == 0x0047);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, EventOnSpawning) == 0x0060);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, EventOnDead) == 0x0070);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, EventOnBattle) == 0x0080);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, EventFirstTimeOnBattle) == 0x0090);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, SpawnShow) == 0x00A0);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, PathWay) == 0x00B8);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, RewardGroup) == 0x00C8);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, RewardSpawnBucketType) == 0x00D0);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, RewardOverrideSaveType) == 0x00D1);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, TagName) == 0x00D4);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, AIGroupAlias) == 0x00E0);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, AIGroupName) == 0x00E8);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, MetaAIAlias) == 0x00F4);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, MetaAI_InitThink) == 0x00FC);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, MetaAI_SpecialBehaviorTag) == 0x0100);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, OwnerRotationType) == 0x0120);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, TransitStayZoneSaveType) == 0x0123);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, AdjustInteractTargetPosType) == 0x0124);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, Interaction) == 0x0128);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, ConditionsTrigger) == 0x0138);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, ConditionTriggerEvent) == 0x0148);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, CheckAchievements) == 0x0178);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, bCheckAchievementNotOperate) == 0x0188);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, CheckAchievementProgress) == 0x0198);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, ShopDataList) == 0x01A8);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, SpawnEffectList) == 0x01B8);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, SpawnRuleType) == 0x01C8);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, PuzzleInputText1) == 0x01D4);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, PuzzleInputText2) == 0x01DC);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, PuzzleInputText3) == 0x01E4);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, PuzzleInputText4) == 0x01EC);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, PuzzleInputTextList5) == 0x01F8);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, SpawnPosition) == 0x0208);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, WorldMapDisplayType) == 0x0214);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, WorldMapDisplayTitle) == 0x0218);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, WorldMapDisplayDesc) == 0x0228);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, WorldMapDisplayConditionGroup) == 0x0238);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, WorldMapIconTag) == 0x0240);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, InteractionRelevantType) == 0x0251);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, ObjectMaterial) == 0x0258);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, InteractionDisable_Condition) == 0x0268);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, InteractionDisable_ConditionGroup) == 0x0278);
static_assert(offsetof(FSBZoneEventSpawnTableProperty, FileSuffix) == 0x0284);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, LevelSeqAlias) == 0x0014);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, LevelSequencePath) == 0x0020);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, AttachTagNames) == 0x0030);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, Type) == 0x0040);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, SequenceTemplatePath) == 0x0048);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, EventCondition) == 0x0058);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, EventConditionGroup) == 0x0060);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, EventorType) == 0x0068);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, LevelSequenceContentsType) == 0x006A);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, FileSuffix) == 0x006C);
static_assert(offsetof(FSBZoneEventLevelSeqTableProperty, RandomLevelSequencePaths) == 0x0078);
static_assert(offsetof(FSBZoneEventActorEffectTableProperty, ActorEffectAlias) == 0x0014);
static_assert(offsetof(FSBZoneEventActorEffectTableProperty, ToTarget) == 0x001C);
static_assert(offsetof(FSBZoneEventActorEffectTableProperty, EventorType) == 0x001D);
static_assert(offsetof(FSBZoneEventActorEffectTableProperty, TargetTagName) == 0x0020);
static_assert(offsetof(FSBZoneEventActorEffectTableProperty, EventCondition) == 0x0028);
static_assert(offsetof(FSBZoneEventActorEffectTableProperty, EventConditionGroup) == 0x0030);
static_assert(offsetof(FSBZoneEventActorEffectTableProperty, ToCaster) == 0x0038);
static_assert(offsetof(FSBZoneEventActorEffectTableProperty, CasterTagName) == 0x003C);
static_assert(offsetof(FSBZoneEventActorEffectTableProperty, FileSuffix) == 0x0044);
static_assert(offsetof(FSBZoneEventTableProperty, Type) == 0x0014);
static_assert(offsetof(FSBZoneEventTableProperty, EventAlias) == 0x0018);
static_assert(offsetof(FSBZoneEventTableProperty, EventConditionGroup) == 0x0020);
static_assert(offsetof(FSBZoneEventTableProperty, EventCondition) == 0x0028);
static_assert(offsetof(FSBZoneEventTableProperty, EventConditionCheckType) == 0x0030);
static_assert(offsetof(FSBZoneEventTableProperty, FinishEvents) == 0x0048);
static_assert(offsetof(FSBZoneEventTableProperty, AddEvents) == 0x0058);
static_assert(offsetof(FSBZoneEventTableProperty, FileSuffix) == 0x0068);
static_assert(offsetof(FSBEffectVolumeTableProperty, InitActivate) == 0x0014);
static_assert(offsetof(FSBEffectVolumeTableProperty, VolumeType) == 0x0015);
static_assert(offsetof(FSBEffectVolumeTableProperty, ActiveZoneAlias) == 0x0018);
static_assert(offsetof(FSBEffectVolumeTableProperty, EnterEffectAlias) == 0x0020);
static_assert(offsetof(FSBEffectVolumeTableProperty, AlwaysActiveEffectAlias) == 0x0028);
static_assert(offsetof(FSBEffectVolumeTableProperty, DeadCountEffectAliasList01) == 0x0038);
static_assert(offsetof(FSBEffectVolumeTableProperty, DeadCountEffectAliasList02) == 0x0050);
static_assert(offsetof(FSBEffectVolumeTableProperty, DeadCountEffectAliasList03) == 0x0068);
static_assert(offsetof(FSBEffectVolumeTableProperty, DeadCountEffectAliasList04) == 0x0080);
static_assert(offsetof(FSBEffectVolumeTableProperty, PropertyData) == 0x0090);
static_assert(offsetof(FSBEffectVolumeTableProperty, ResetType) == 0x0098);
static_assert(offsetof(FSBEffectVolumeTableProperty, ResetTargetAlias) == 0x009C);
static_assert(offsetof(FSBEffectVolumeTableProperty, ResetTargetState) == 0x00A8);
static_assert(offsetof(FSBEffectVolumeTableProperty, SaveType) == 0x00B8);
static_assert(offsetof(FSBZoneTriggerTableProperty, Zone) == 0x0014);
static_assert(offsetof(FSBZoneTriggerTableProperty, InitActivate) == 0x001C);
static_assert(offsetof(FSBZoneTriggerTableProperty, TriggerType) == 0x001D);
static_assert(offsetof(FSBZoneTriggerTableProperty, TouchEvents) == 0x0020);
static_assert(offsetof(FSBZoneTriggerTableProperty, LeaveEvents) == 0x0030);
static_assert(offsetof(FSBZoneTriggerTableProperty, Condition) == 0x0040);
static_assert(offsetof(FSBZoneTriggerTableProperty, ConditionGroup) == 0x0048);
static_assert(offsetof(FSBZoneTriggerTableProperty, TriggerActorAlias) == 0x0050);
static_assert(offsetof(FSBZoneTriggerTableProperty, DoingType) == 0x0058);
static_assert(offsetof(FSBZoneTriggerTableProperty, SaveType) == 0x0068);
static_assert(offsetof(FSBZoneTriggerTableProperty, BoxExtent) == 0x006C);
static_assert(offsetof(FSBZoneTriggerTableProperty, IgnoreFilter) == 0x0078);
static_assert(offsetof(FSBZoneTriggerTableProperty, ConditionObjectMaterial) == 0x0080);
static_assert(offsetof(FSBZoneTriggerTableProperty, LevelTargetFilter) == 0x0090);
static_assert(offsetof(FSBZoneTriggerTableProperty, FileSuffix) == 0x009C);
static_assert(offsetof(FSBZoneTableProperty, WorldAlias) == 0x0014);
static_assert(offsetof(FSBZoneTableProperty, IsolatedAreaAlias) == 0x001C);
static_assert(offsetof(FSBZoneTableProperty, ZoneType) == 0x0025);
static_assert(offsetof(FSBZoneTableProperty, NpcTransitType) == 0x0026);
static_assert(offsetof(FSBZoneTableProperty, InitActive) == 0x0027);
static_assert(offsetof(FSBZoneTableProperty, TrainningRoom) == 0x0028);
static_assert(offsetof(FSBZoneTableProperty, StartPointAlias) == 0x0030);
static_assert(offsetof(FSBZoneTableProperty, EnterZoneResetLayerList) == 0x0040);
static_assert(offsetof(FSBZoneTableProperty, LeaveZoneResetLayerList) == 0x0050);
static_assert(offsetof(FSBZoneTableProperty, EnterEvents) == 0x0060);
static_assert(offsetof(FSBZoneTableProperty, LeaveEvents) == 0x0070);
static_assert(offsetof(FSBZoneTableProperty, ActiveEvents) == 0x0080);
static_assert(offsetof(FSBZoneTableProperty, DeactiveEvents) == 0x0090);
static_assert(offsetof(FSBZoneTableProperty, ZoneSpawnEvents) == 0x00A0);
static_assert(offsetof(FSBZoneTableProperty, EnterZoneEffectTargetType) == 0x00B0);
static_assert(offsetof(FSBZoneTableProperty, EnterZoneEffectAtLeaveState) == 0x00B1);
static_assert(offsetof(FSBZoneTableProperty, EnterZoneEffects) == 0x00B8);
static_assert(offsetof(FSBZoneTableProperty, TransitAchievement) == 0x00C8);
static_assert(offsetof(FSBZoneTableProperty, TransitZone) == 0x00D8);
static_assert(offsetof(FSBZoneTableProperty, LoadLevels) == 0x00E8);
static_assert(offsetof(FSBZoneTableProperty, UnloadLevels) == 0x00F8);
static_assert(offsetof(FSBZoneTableProperty, PlayRule) == 0x010C);
static_assert(offsetof(FSBZoneTableProperty, SpiritRoomEscapeCondition) == 0x0114);
static_assert(offsetof(FSBZoneTableProperty, SpiritRoomEscapeConditionGroup) == 0x011C);
static_assert(offsetof(FSBZoneTableProperty, LevelGraphicsOptionsAlias) == 0x0128);
static_assert(offsetof(FSBZoneTableProperty, AdditiveDesignLevel) == 0x0138);
static_assert(offsetof(FSBZoneTableProperty, FileSuffix) == 0x0148);
static_assert(offsetof(FSBWorldTableProperty, UMapPath) == 0x0018);
static_assert(offsetof(FSBWorldTableProperty, FileSuffix) == 0x0028);
static_assert(offsetof(FSBProjectileTableProperty, ResourcePath) == 0x0018);
static_assert(offsetof(FSBProjectileTableProperty, LifeType) == 0x0029);
static_assert(offsetof(FSBProjectileTableProperty, DestroyType) == 0x0030);
static_assert(offsetof(FSBProjectileTableProperty, PhysicsType) == 0x0038);
static_assert(offsetof(FSBProjectileTableProperty, HitType) == 0x0044);
static_assert(offsetof(FSBProjectileTableProperty, TargetFilterAlias) == 0x004C);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileShotEffectAlias) == 0x0058);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileArriveEffectAlias) == 0x0068);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileEndEffectAlias) == 0x0078);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileLifeTimeEndEffectAlias) == 0x0088);
static_assert(offsetof(FSBProjectileTableProperty, ElementType) == 0x0098);
static_assert(offsetof(FSBProjectileTableProperty, CreateProjectileAliasArrayWhenDestruction) == 0x00A0);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileEndCreateProjectileAliasArray) == 0x00B0);
static_assert(offsetof(FSBProjectileTableProperty, ZoneEventActorTriggerTag) == 0x00C4);
static_assert(offsetof(FSBProjectileTableProperty, SkillResultAliasWhenProjectileHit) == 0x00CC);
static_assert(offsetof(FSBProjectileTableProperty, SkillResultAliasWhenProjectileParry) == 0x00D4);
static_assert(offsetof(FSBProjectileTableProperty, SkillResultAliasWhenProjectileSuperParry) == 0x00DC);
static_assert(offsetof(FSBProjectileTableProperty, SkillResultAliasWhenProjectileGuard) == 0x00E4);
static_assert(offsetof(FSBProjectileTableProperty, SkillResultAliasWhenProjectileJustParry) == 0x00EC);
static_assert(offsetof(FSBProjectileTableProperty, SkillResultAliasWhenProjectileJustGuard) == 0x00F4);
static_assert(offsetof(FSBProjectileTableProperty, SkillResultAliasWhenProjectileReflectHit) == 0x00FC);
static_assert(offsetof(FSBProjectileTableProperty, TargetDeadType) == 0x0104);
static_assert(offsetof(FSBProjectileTableProperty, EndLocationDecalShowPath) == 0x0110);
static_assert(offsetof(FSBProjectileTableProperty, ReflectDestTargetOverrideAlias) == 0x0140);
static_assert(offsetof(FSBProjectileTableProperty, ReflectTargetFilterAlias) == 0x0148);
static_assert(offsetof(FSBProjectileTableProperty, ReflectJustActionTargetFilterAlias) == 0x0150);
static_assert(offsetof(FSBProjectileTableProperty, ReflectProjectileArriveEffectAlias) == 0x0158);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileDestructionAttackerEffectAlias) == 0x0178);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileDestructionOwnerEffectAlias) == 0x0188);
static_assert(offsetof(FSBProjectileTableProperty, CheckShotPositionSocketName) == 0x01A4);
static_assert(offsetof(FSBProjectileTableProperty, MovementType) == 0x01B4);
static_assert(offsetof(FSBProjectileTableProperty, StartTarget) == 0x01B5);
static_assert(offsetof(FSBProjectileTableProperty, StartTargetUpdate) == 0x01B6);
static_assert(offsetof(FSBProjectileTableProperty, StartTargetTransformType) == 0x01B7);
static_assert(offsetof(FSBProjectileTableProperty, StartTargetTransformName) == 0x01B8);
static_assert(offsetof(FSBProjectileTableProperty, StartTargetRelativeLocation) == 0x01C4);
static_assert(offsetof(FSBProjectileTableProperty, StartTargetRelativeAxisType) == 0x01DC);
static_assert(offsetof(FSBProjectileTableProperty, DestTarget) == 0x01DD);
static_assert(offsetof(FSBProjectileTableProperty, DestTargetUpdate) == 0x01DF);
static_assert(offsetof(FSBProjectileTableProperty, DestTargetTransformType) == 0x01E0);
static_assert(offsetof(FSBProjectileTableProperty, DestTargetTransformName) == 0x01E4);
static_assert(offsetof(FSBProjectileTableProperty, DestTargetRandomRange) == 0x01EC);
static_assert(offsetof(FSBProjectileTableProperty, DestTargetRelativeLocation) == 0x01F8);
static_assert(offsetof(FSBProjectileTableProperty, DestTargetRelativeLocationCurvePath) == 0x0208);
static_assert(offsetof(FSBProjectileTableProperty, DestTargetRelativeLocationScaleCurvePath) == 0x0218);
static_assert(offsetof(FSBProjectileTableProperty, DestTargetRelativeAxisType) == 0x0228);
static_assert(offsetof(FSBProjectileTableProperty, MovementCurveType) == 0x025C);
static_assert(offsetof(FSBProjectileTableProperty, MovementCurve) == 0x0260);
static_assert(offsetof(FSBProjectileTableProperty, AutoGenerationMovementCurveMin) == 0x0274);
static_assert(offsetof(FSBProjectileTableProperty, AutoGenerationMovementCurveMax) == 0x0280);
static_assert(offsetof(FSBProjectileTableProperty, AutoGenerationMovementCurveRecordTime) == 0x028C);
static_assert(offsetof(FSBProjectileTableProperty, MissOffsetRandomRangeMin) == 0x02D8);
static_assert(offsetof(FSBProjectileTableProperty, MissOffsetRandomRangeMax) == 0x02E4);
static_assert(offsetof(FSBProjectileTableProperty, FileSuffix) == 0x031C);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileShotEffectAliasArray) == 0x0328);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileArriveEffectAliasArray) == 0x0338);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileEndEffectAliasArray) == 0x0348);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileLifeTimeEndEffectAliasArray) == 0x0358);
static_assert(offsetof(FSBProjectileTableProperty, ReflectProjectileArriveEffectAliasArray) == 0x0368);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileDestructionAttackerEffectAliasArray) == 0x0378);
static_assert(offsetof(FSBProjectileTableProperty, ProjectileDestructionOwnerEffectAliasArray) == 0x0388);
static_assert(offsetof(FSBCharacterStanceTableProperty, CombatType) == 0x0018);
static_assert(offsetof(FSBCharacterStanceTableProperty, BoneBlendType) == 0x001B);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_DestroyCollisionGroupArray) == 0x0020);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_ActorStat) == 0x0030);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_ActorStatCheck) == 0x0031);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_DeactiveActorState1) == 0x0038);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_DeactiveActorState2) == 0x0039);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_DeactiveActorState3) == 0x003A);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_DeactiveActorState4) == 0x003B);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_DeactiveActorState5) == 0x003C);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_BattleMode) == 0x003D);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_Jumping) == 0x003E);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_Swimming) == 0x003F);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_EventMoving) == 0x0040);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_ChildGuideAction) == 0x0041);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_ActiveEffectAliasArray) == 0x0048);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_NoneEffectAliasArray) == 0x0058);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_PressCommandKey1) == 0x0068);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_PressCommandKey2) == 0x006A);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_WeaponEquipmentAlias) == 0x006C);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_SecondaryWeaponEquipmentAlias) == 0x0074);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_ThirdlyWeaponEquipmentAlias) == 0x007C);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_FourthlyWeaponEquipmentAlias) == 0x0084);
static_assert(offsetof(FSBCharacterStanceTableProperty, Condition_MetaAI_TiredState) == 0x008C);
static_assert(offsetof(FSBCharacterStanceTableProperty, CommandArray) == 0x0090);
static_assert(offsetof(FSBCharacterStanceTableProperty, StartShowPathWhenPeaceful) == 0x00F0);
static_assert(offsetof(FSBCharacterStanceTableProperty, StartShowPathWhenBattle) == 0x0100);
static_assert(offsetof(FSBCharacterStanceTableProperty, StartEffect) == 0x0110);
static_assert(offsetof(FSBCharacterStanceTableProperty, EndShowPathWhenPeaceful) == 0x0120);
static_assert(offsetof(FSBCharacterStanceTableProperty, EndShowPathWhenBattle) == 0x0130);
static_assert(offsetof(FSBCharacterStanceTableProperty, EndEffect) == 0x0140);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Peaceful_UpperBody) == 0x0150);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Peaceful_LowerBody) == 0x0158);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Battle_UpperBody) == 0x0160);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Battle_LowerBody) == 0x0168);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Groggy_UpperBody) == 0x0170);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Groggy_LowerBody) == 0x0178);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Down_UpperBody) == 0x0180);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Down_LowerBody) == 0x0188);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Dead_UpperBody) == 0x0190);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Dead_LowerBody) == 0x0198);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Airborne_UpperBody) == 0x01A0);
static_assert(offsetof(FSBCharacterStanceTableProperty, AnimSet_Airborne_LowerBody) == 0x01A8);
static_assert(offsetof(FSBCharacterStanceTableProperty, OverridePhysicsAsset) == 0x01B8);
static_assert(offsetof(FSBCharacterStanceTableProperty, DeadSkillAlias) == 0x01C8);
static_assert(offsetof(FSBCharacterStanceTableProperty, DeadSkillSelfDeadType) == 0x01D4);
static_assert(offsetof(FSBCharacterStanceTableProperty, MountableEquipmentAliasArray) == 0x01E0);
static_assert(offsetof(FSBCharacterStanceTableProperty, FileSuffix) == 0x01F4);
static_assert(offsetof(FSBCharacterStanceTableProperty, StartEffectArray) == 0x0200);
static_assert(offsetof(FSBCharacterStanceTableProperty, EndEffectArray) == 0x0210);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, RunBlendSpace) == 0x0018);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, RunTiltBlendSpace) == 0x0028);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, IdleAnimType) == 0x0038);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnSprintBlendSpace) == 0x0040);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, BlockMoveBlendSpace) == 0x0050);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, AimOffsetBlendSpace) == 0x0060);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SelfieBlendSpace) == 0x0070);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, WallRun) == 0x0080);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnFall) == 0x0090);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnRunBlendSpace) == 0x00A0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, FlyingBlendSpace) == 0x00B0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, FlyingStart) == 0x00C0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, FlyingToFall) == 0x00D0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, FlyingToIdle) == 0x00E0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Fall) == 0x00F0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Sprint) == 0x0100);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Jump) == 0x0110);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Jump2) == 0x0120);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Jump3) == 0x0130);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpFront) == 0x0140);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpFront2) == 0x0150);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpFront3) == 0x0160);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, WallJump) == 0x0170);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, WallRunJump) == 0x0180);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, DoubleJump) == 0x0190);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, DoubleJump2) == 0x01A0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, DoubleJump3) == 0x01B0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, DoubleJumpFront) == 0x01C0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, DoubleJumpFront2) == 0x01D0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, DoubleJumpFront3) == 0x01E0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpToIdle) == 0x01F0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpToSprint) == 0x0200);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpToSprintShort) == 0x0210);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpToWalk) == 0x0220);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpToRun) == 0x0230);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpHighToRun) == 0x0240);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpHighToIdle) == 0x0250);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, JumpHighToWalk) == 0x0260);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, RunToIdle_L) == 0x0270);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, RunToIdle_R) == 0x0280);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, RunToIdle) == 0x0290);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, WalkToIdle_L) == 0x02A0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, WalkToIdle_R) == 0x02B0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, WalkToIdle) == 0x02C0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, ShortMoveToIdle_L) == 0x02D0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, ShortMoveToIdle_R) == 0x02E0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, ShortMoveToIdle) == 0x02F0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, StartSprint) == 0x0300);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SprintToIdle) == 0x0310);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SprintToRun) == 0x0320);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, RunStart) == 0x0330);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, RunStartAfterEvade) == 0x0340);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, RunTurn_L) == 0x0350);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, RunTurn_R) == 0x0360);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, WalkTurn_L) == 0x0370);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, WalkTurn_R) == 0x0380);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, IdleTurn_L) == 0x0390);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, IdleTurn_R) == 0x03A0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, IdleTurnToWalk_L) == 0x03B0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, IdleTurnToWalk_R) == 0x03C0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SprintTurn) == 0x03D0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SprintTurn_L) == 0x03E0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpNoMoving) == 0x03F0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnDoubleJumpNoMoving) == 0x0400);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpFront) == 0x0410);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpLeft) == 0x0420);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpRight) == 0x0430);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpBack) == 0x0440);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnDoubleJumpFront) == 0x0450);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnDoubleJumpLeft) == 0x0460);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnDoubleJumpRight) == 0x0470);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnDoubleJumpBack) == 0x0480);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpToIdleFront) == 0x0490);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpToIdleBack) == 0x04A0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpToIdleLeft) == 0x04B0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpToIdleRight) == 0x04C0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpToRunFront) == 0x04D0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpToRunBack) == 0x04E0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpToRunLeft) == 0x04F0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnJumpToRunRight) == 0x0500);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnStartSprintFront) == 0x0510);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnStartSprintBack) == 0x0520);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnStartSprintLeft) == 0x0530);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnStartSprintRight) == 0x0540);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnGuardRotationR) == 0x0550);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnGuardRotationL) == 0x0560);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnRotationR) == 0x0570);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnRotationL) == 0x0580);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatRotationR) == 0x0590);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatRotationL) == 0x05A0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatTurn_L) == 0x05B0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatTurn_R) == 0x05C0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, UnLockOnAtChat) == 0x05D0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnStartRunFront) == 0x05E0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnStartRunBack) == 0x05F0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnStartRunLeft) == 0x0600);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnStartRunRight) == 0x0610);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnRunToIdleFront) == 0x0620);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnRunToIdleBack) == 0x0630);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnRunToIdleLeft) == 0x0640);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnRunToIdleRight) == 0x0650);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatMoveToIdleFrontRFront) == 0x0660);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatMoveToIdleBackRFront) == 0x0670);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatMoveToIdleLeftRFront) == 0x0680);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatMoveToIdleRightRFront) == 0x0690);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatMoveToIdleFrontLFront) == 0x06A0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatMoveToIdleBackLFront) == 0x06B0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatMoveToIdleLeftLFront) == 0x06C0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnAtChatMoveToIdleRightLFront) == 0x06D0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnSprintToIdleFront) == 0x06E0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnSprintToIdleBack) == 0x06F0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnSprintToIdleLeft) == 0x0700);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, LockOnSprintToIdleRight) == 0x0710);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, CliffReaction) == 0x0720);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, BlockWallFrontRun) == 0x0730);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, BlockWallFrontWalk) == 0x0740);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, BlockWallFrontSprint) == 0x0750);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpGround) == 0x0760);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpGroundHigh) == 0x0770);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpFalling) == 0x0780);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpGroundToLow) == 0x0790);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpGroundHighToLow) == 0x07A0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpFallingHigh) == 0x07B0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpSideRod) == 0x07C0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpSideRodWallless) == 0x07D0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpGroundType2ToLow) == 0x07E0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpGroundType2) == 0x07F0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpGroundType3ToLow) == 0x0800);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, HuddleUpGroundType3) == 0x0810);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, StartFallToLowDist) == 0x0820);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, FallToLowDistToRun) == 0x0830);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, FallToLowDistToIdle) == 0x0840);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, FallToSwim) == 0x0850);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, GroundToSwim) == 0x0860);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, UnderWaterToWaterLine) == 0x0870);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, WaterLineToUnderWater) == 0x0880);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, WaterLineToUnderWaterFail) == 0x0890);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SwimToGround) == 0x08A0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SwimJump) == 0x08B0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SwimTurn) == 0x08C0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, UnderWaterSwimTurn) == 0x08D0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, GroundToSlope) == 0x08E0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, FallToSlope) == 0x08F0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SlopeJump) == 0x0900);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SlopeDoubleJump) == 0x0910);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SlopeToGround) == 0x0920);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SlopeToFall) == 0x0930);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, SlopeJumpToLand) == 0x0940);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, StartWalkSlidingSlip) == 0x0950);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, EndWalkSlidingSlip) == 0x0960);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandLight1Left) == 0x0970);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandLight1Right) == 0x0980);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandLight1Back) == 0x0990);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandLight1Front) == 0x09A0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandLight2Left) == 0x09B0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandLight2Right) == 0x09C0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandLight2Back) == 0x09D0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandLight2Front) == 0x09E0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandStrong1Left) == 0x09F0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandStrong1Right) == 0x0A00);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandStrong1Back) == 0x0A10);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandStrong1Front) == 0x0A20);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandStrong2Left) == 0x0A30);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandStrong2Right) == 0x0A40);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandStrong2Back) == 0x0A50);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitStandStrong2Front) == 0x0A60);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Groggy_Start) == 0x0A70);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Groggy_Loop) == 0x0A80);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Groggy_End) == 0x0A90);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Airborne_Loop) == 0x0AA0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_KnockDown_Start_Front) == 0x0AB0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_KnockDown_Start_Back) == 0x0AC0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_KnockDown_Loop) == 0x0AD0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_KnockDown_End) == 0x0AE0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Caution_LeftToIdle) == 0x0AF0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Caution_RightToIdle) == 0x0B00);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitSwordNormalLinkAttack1) == 0x0B10);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitSwordNormalFinishLinkAttack1) == 0x0B20);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitSwordAirDropAttack1) == 0x0B30);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_HitSwordNormalBackStab1) == 0x0B40);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim1) == 0x0B50);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim2) == 0x0B60);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim3) == 0x0B70);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim4) == 0x0B80);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim5) == 0x0B90);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim6) == 0x0BA0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim7) == 0x0BB0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim8) == 0x0BC0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim9) == 0x0BD0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim10) == 0x0BE0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim11) == 0x0BF0);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim12) == 0x0C00);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim13) == 0x0C10);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim14) == 0x0C20);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim15) == 0x0C30);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim16) == 0x0C40);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim17) == 0x0C50);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim18) == 0x0C60);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim19) == 0x0C70);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, Custom_Anim20) == 0x0C80);
static_assert(offsetof(FSBCharacterAnimSetTableProperty, FileSuffix) == 0x0C90);
static_assert(offsetof(FSBEquipmentMaterialTableProperty, Group) == 0x0014);
static_assert(offsetof(FSBEquipmentMaterialTableProperty, MaterialAssetPath) == 0x0028);
static_assert(offsetof(FSBEquipmentMaterialTableProperty, IconColorAssetPath) == 0x0038);
static_assert(offsetof(FSBEquipmentMaterialTableProperty, FileSuffix) == 0x0048);
static_assert(offsetof(FSBEquipmentTableProperty, Type) == 0x0014);
static_assert(offsetof(FSBEquipmentTableProperty, SubType) == 0x0015);
static_assert(offsetof(FSBEquipmentTableProperty, Tag) == 0x0018);
static_assert(offsetof(FSBEquipmentTableProperty, EffectAliasArray) == 0x0020);
static_assert(offsetof(FSBEquipmentTableProperty, MountingResourcePath) == 0x0030);
static_assert(offsetof(FSBEquipmentTableProperty, MaterialGroup) == 0x0040);
static_assert(offsetof(FSBEquipmentTableProperty, MountingResourceCollisionProfileName) == 0x0048);
static_assert(offsetof(FSBEquipmentTableProperty, UnmountingResourcePath) == 0x0050);
static_assert(offsetof(FSBEquipmentTableProperty, MountingShowPath) == 0x0068);
static_assert(offsetof(FSBEquipmentTableProperty, MountingSocketName) == 0x0078);
static_assert(offsetof(FSBEquipmentTableProperty, MountingEquipShowPath) == 0x0080);
static_assert(offsetof(FSBEquipmentTableProperty, CompletedMountingEquipShowPath) == 0x0090);
static_assert(offsetof(FSBEquipmentTableProperty, AnimAssetPath) == 0x00A4);
static_assert(offsetof(FSBEquipmentTableProperty, FoldShow) == 0x00B0);
static_assert(offsetof(FSBEquipmentTableProperty, UnFoldShow) == 0x00C0);
static_assert(offsetof(FSBEquipmentTableProperty, ForceFoldShow) == 0x00D0);
static_assert(offsetof(FSBEquipmentTableProperty, UseSkillUnFoldShow) == 0x00E0);
static_assert(offsetof(FSBEquipmentTableProperty, StartSlopeShow) == 0x00F0);
static_assert(offsetof(FSBEquipmentTableProperty, EndSlopeShow) == 0x0100);
static_assert(offsetof(FSBEquipmentTableProperty, ChangeEquipmentShow) == 0x0110);
static_assert(offsetof(FSBEquipmentTableProperty, CompleteChangeEquipmentShow) == 0x0120);
static_assert(offsetof(FSBEquipmentTableProperty, AttachSocket) == 0x0130);
static_assert(offsetof(FSBEquipmentTableProperty, EditorAttachSocket) == 0x0138);
static_assert(offsetof(FSBEquipmentTableProperty, RelativePosition) == 0x0140);
static_assert(offsetof(FSBEquipmentTableProperty, RelativeRotation) == 0x014C);
static_assert(offsetof(FSBEquipmentTableProperty, AttachType) == 0x0158);
static_assert(offsetof(FSBEquipmentTableProperty, ActiveIdleAdditiveBody) == 0x0159);
static_assert(offsetof(FSBEquipmentTableProperty, AttachRopeRelativeSocketName) == 0x0168);
static_assert(offsetof(FSBEquipmentTableProperty, AttachRopeRelativeLocation) == 0x0178);
static_assert(offsetof(FSBEquipmentTableProperty, AdditionalComaReviveShowPath) == 0x0188);
static_assert(offsetof(FSBEquipmentTableProperty, CharacterSoundSetOverride) == 0x01A0);
static_assert(offsetof(FSBEquipmentTableProperty, CharacterFootstepSetOverride) == 0x01B0);
static_assert(offsetof(FSBEquipmentTableProperty, PhotoModePoseSnapshotData) == 0x01C0);
static_assert(offsetof(FSBEquipmentTableProperty, PhotoModePonytailSnapshotData) == 0x01D8);
static_assert(offsetof(FSBEquipmentTableProperty, PhotoModeHairSnapshotData) == 0x01E8);
static_assert(offsetof(FSBEquipmentTableProperty, PhotoModeTachyWingSnapshotData) == 0x01F8);
static_assert(offsetof(FSBEquipmentTableProperty, SelfieModePoseSnapshotData) == 0x0208);
static_assert(offsetof(FSBEquipmentTableProperty, OverrideMaterialMeshSlot) == 0x0218);
static_assert(offsetof(FSBEquipmentTableProperty, OverrideMeshMaterialGroup) == 0x021C);
static_assert(offsetof(FSBEquipmentTableProperty, HideMeshSlot) == 0x0225);
static_assert(offsetof(FSBEquipmentTableProperty, MountingResourcePathWhenLongHair) == 0x0228);
static_assert(offsetof(FSBEquipmentTableProperty, ForceBodyType) == 0x0238);
static_assert(offsetof(FSBEquipmentTableProperty, MountingResourcePathWhenForceBodyType1) == 0x0240);
static_assert(offsetof(FSBEquipmentTableProperty, FileSuffix) == 0x0250);
static_assert(offsetof(FSBSkillCommandTableProperty, CommandActionType) == 0x0014);
static_assert(offsetof(FSBSkillCommandTableProperty, SkillAlias) == 0x0018);
static_assert(offsetof(FSBSkillCommandTableProperty, SkillPriorityAlias) == 0x0020);
static_assert(offsetof(FSBSkillCommandTableProperty, CombinationKey1CheckType) == 0x002C);
static_assert(offsetof(FSBSkillCommandTableProperty, CombinationKey2CheckType) == 0x002D);
static_assert(offsetof(FSBSkillCommandTableProperty, CombinationCrossUpCheckType) == 0x002E);
static_assert(offsetof(FSBSkillCommandTableProperty, CombinationCrossDownCheckType) == 0x002F);
static_assert(offsetof(FSBSkillCommandTableProperty, CombinationCrossLeftCheckType) == 0x0030);
static_assert(offsetof(FSBSkillCommandTableProperty, CombinationCrossRightCheckType) == 0x0031);
static_assert(offsetof(FSBSkillCommandTableProperty, Command) == 0x0032);
static_assert(offsetof(FSBSkillCommandTableProperty, PressCheckCommand) == 0x0033);
static_assert(offsetof(FSBSkillCommandTableProperty, HitResult) == 0x0034);
static_assert(offsetof(FSBSkillCommandTableProperty, ActorState) == 0x0048);
static_assert(offsetof(FSBSkillCommandTableProperty, WeaponType) == 0x0049);
static_assert(offsetof(FSBSkillCommandTableProperty, bJumping) == 0x004A);
static_assert(offsetof(FSBSkillCommandTableProperty, bWallRun) == 0x004B);
static_assert(offsetof(FSBSkillCommandTableProperty, bSprint) == 0x004C);
static_assert(offsetof(FSBSkillCommandTableProperty, bRun) == 0x004D);
static_assert(offsetof(FSBSkillCommandTableProperty, bLockOn) == 0x004E);
static_assert(offsetof(FSBSkillCommandTableProperty, bFly) == 0x004F);
static_assert(offsetof(FSBSkillCommandTableProperty, bSwimming) == 0x0050);
static_assert(offsetof(FSBSkillCommandTableProperty, bUWSwimming) == 0x0051);
static_assert(offsetof(FSBSkillCommandTableProperty, bFirstSwimming) == 0x0052);
static_assert(offsetof(FSBSkillCommandTableProperty, bEventMoving) == 0x0053);
static_assert(offsetof(FSBSkillCommandTableProperty, bInBreakfallRange) == 0x0054);
static_assert(offsetof(FSBSkillCommandTableProperty, bTachyGaugeMax) == 0x0055);
static_assert(offsetof(FSBSkillCommandTableProperty, CheckActiveEffectAliasArray) == 0x0058);
static_assert(offsetof(FSBSkillCommandTableProperty, CheckActiveNoneEffectAliasArray) == 0x0068);
static_assert(offsetof(FSBSkillCommandTableProperty, InputType) == 0x0078);
static_assert(offsetof(FSBSkillCommandTableProperty, Stance) == 0x007C);
static_assert(offsetof(FSBSkillCommandTableProperty, BulletItemAlias) == 0x0084);
static_assert(offsetof(FSBSkillCommandTableProperty, NextComboCommandArray) == 0x0090);
static_assert(offsetof(FSBSkillCommandTableProperty, TargetShowPath) == 0x00B8);
static_assert(offsetof(FSBSkillCommandTableProperty, CommandUIImage) == 0x00C8);
static_assert(offsetof(FSBSkillCommandTableProperty, ReqEnergyType) == 0x00D0);
static_assert(offsetof(FSBSkillCommandTableProperty, DualSenseCheckType) == 0x00DC);
static_assert(offsetof(FSBSkillCommandTableProperty, FileSuffix) == 0x00F8);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, TargetType) == 0x0014);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, SortType) == 0x0028);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, TargetCheckShape) == 0x003C);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, ActorState1) == 0x004C);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, ActorState2) == 0x004D);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, ActorState3) == 0x004E);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, ActorState4) == 0x004F);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, ActorState5) == 0x0050);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, NonActorState1) == 0x0051);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, NonActorState2) == 0x0052);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, NonActorState3) == 0x0053);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, NonActorState4) == 0x0054);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, NonActorState5) == 0x0055);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, ActorStat1) == 0x0056);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, ActorStatCheck1) == 0x0057);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, CheckBattleMode) == 0x0067);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, CheckActiveEffectAliasArray) == 0x0068);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, CheckActiveNoneEffectAliasArray) == 0x0078);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, CheckActiveEffectAliasArrayWhenEasyMode) == 0x0088);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, CheckActiveNoneEffectAliasArrayWhenEasyMode) == 0x0098);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, bSwimming) == 0x00AC);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, bEncroachmentable) == 0x00AD);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, bDead) == 0x00AE);
static_assert(offsetof(FSBSkillTargetFilterTableProperty, FileSuffix) == 0x00B0);
static_assert(offsetof(FSBJsonSkillBranchEffect, Effect) == 0x0000);
static_assert(offsetof(FSBJsonSkillBranchEffect, SkillActiveStepAlias) == 0x0008);
static_assert(offsetof(FSBSkillTableProperty, Loc_SkillName) == 0x0018);
static_assert(offsetof(FSBSkillTableProperty, Loc_SystemNotice_IsBeingCooltime) == 0x0028);
static_assert(offsetof(FSBSkillTableProperty, Loc_SystemNotice_CannotUse) == 0x0038);
static_assert(offsetof(FSBSkillTableProperty, Flag) == 0x0048);
static_assert(offsetof(FSBSkillTableProperty, AdditiveSkillDamageGroup) == 0x0050);
static_assert(offsetof(FSBSkillTableProperty, AchievementTags) == 0x0058);
static_assert(offsetof(FSBSkillTableProperty, AttributeType) == 0x0074);
static_assert(offsetof(FSBSkillTableProperty, SkillType) == 0x0075);
static_assert(offsetof(FSBSkillTableProperty, ActorAction) == 0x0076);
static_assert(offsetof(FSBSkillTableProperty, EffectSkillFlag) == 0x0078);
static_assert(offsetof(FSBSkillTableProperty, AISkillFlag) == 0x0080);
static_assert(offsetof(FSBSkillTableProperty, CheckValidMoveAliasArray) == 0x0090);
static_assert(offsetof(FSBSkillTableProperty, CheckInvalidMoveAliasArray) == 0x00A0);
static_assert(offsetof(FSBSkillTableProperty, TargetFilterAlias) == 0x00B4);
static_assert(offsetof(FSBSkillTableProperty, LockOnOverrideTargetFilterAlias) == 0x00BC);
static_assert(offsetof(FSBSkillTableProperty, ZoneEventActorTargetFilterAlias) == 0x00C4);
static_assert(offsetof(FSBSkillTableProperty, FirstActiveStepByEffect) == 0x00E8);
static_assert(offsetof(FSBSkillTableProperty, NextSkillBranchStep) == 0x00F8);
static_assert(offsetof(FSBSkillTableProperty, FirstSkillActiveAlias) == 0x0100);
static_assert(offsetof(FSBSkillTableProperty, JustSkillActiveAlias) == 0x0110);
static_assert(offsetof(FSBSkillTableProperty, UseableCheckGroup) == 0x011C);
static_assert(offsetof(FSBSkillTableProperty, UseEnergyType) == 0x012C);
static_assert(offsetof(FSBSkillTableProperty, ConsumeItemAlias) == 0x0134);
static_assert(offsetof(FSBSkillTableProperty, ConsumeItemCountType) == 0x013C);
static_assert(offsetof(FSBSkillTableProperty, TargetDeadAnimBS) == 0x0150);
static_assert(offsetof(FSBSkillTableProperty, TargetDeadType) == 0x0158);
static_assert(offsetof(FSBSkillTableProperty, WorldObjectHitShow) == 0x0160);
static_assert(offsetof(FSBSkillTableProperty, AcquisitionSkillAlias) == 0x017C);
static_assert(offsetof(FSBSkillTableProperty, ConditionEnd_Swimming) == 0x0184);
static_assert(offsetof(FSBSkillTableProperty, ConditionEnd_UWSwimming) == 0x0185);
static_assert(offsetof(FSBSkillTableProperty, ConditionEnd_MeleeCombat) == 0x0186);
static_assert(offsetof(FSBSkillTableProperty, ConditionEnd_RangedCombat) == 0x0187);
static_assert(offsetof(FSBSkillTableProperty, ExpansionFromAcquisitionAlias1) == 0x018C);
static_assert(offsetof(FSBSkillTableProperty, ExpansionType1) == 0x0194);
static_assert(offsetof(FSBSkillTableProperty, ExpansionValue1) == 0x0198);
static_assert(offsetof(FSBSkillTableProperty, ExpansionFromAcquisitionAlias2) == 0x01A8);
static_assert(offsetof(FSBSkillTableProperty, ExpansionType2) == 0x01B0);
static_assert(offsetof(FSBSkillTableProperty, ExpansionValue2) == 0x01B8);
static_assert(offsetof(FSBSkillTableProperty, ExpansionFromAcquisitionAlias3) == 0x01C8);
static_assert(offsetof(FSBSkillTableProperty, ExpansionType3) == 0x01D0);
static_assert(offsetof(FSBSkillTableProperty, ExpansionValue3) == 0x01D8);
static_assert(offsetof(FSBSkillTableProperty, ExpansionFromAcquisitionAlias4) == 0x01E8);
static_assert(offsetof(FSBSkillTableProperty, ExpansionType4) == 0x01F0);
static_assert(offsetof(FSBSkillTableProperty, ExpansionValue4) == 0x01F8);
static_assert(offsetof(FSBSkillTableProperty, ExpansionFromAcquisitionAlias5) == 0x0208);
static_assert(offsetof(FSBSkillTableProperty, ExpansionType5) == 0x0210);
static_assert(offsetof(FSBSkillTableProperty, ExpansionValue5) == 0x0218);
static_assert(offsetof(FSBSkillTableProperty, ExpansionFromAcquisitionAlias6) == 0x0228);
static_assert(offsetof(FSBSkillTableProperty, ExpansionType6) == 0x0230);
static_assert(offsetof(FSBSkillTableProperty, ExpansionValue6) == 0x0238);
static_assert(offsetof(FSBSkillTableProperty, ExpansionFromAcquisitionAlias7) == 0x0248);
static_assert(offsetof(FSBSkillTableProperty, ExpansionType7) == 0x0250);
static_assert(offsetof(FSBSkillTableProperty, ExpansionValue7) == 0x0258);
static_assert(offsetof(FSBSkillTableProperty, ExpansionFromAcquisitionAlias8) == 0x0268);
static_assert(offsetof(FSBSkillTableProperty, ExpansionType8) == 0x0270);
static_assert(offsetof(FSBSkillTableProperty, ExpansionValue8) == 0x0278);
static_assert(offsetof(FSBSkillTableProperty, ExpansionFromAcquisitionAlias9) == 0x0288);
static_assert(offsetof(FSBSkillTableProperty, ExpansionType9) == 0x0290);
static_assert(offsetof(FSBSkillTableProperty, ExpansionValue9) == 0x0298);
static_assert(offsetof(FSBSkillTableProperty, ExpansionFromAcquisitionAlias10) == 0x02A8);
static_assert(offsetof(FSBSkillTableProperty, ExpansionType10) == 0x02B0);
static_assert(offsetof(FSBSkillTableProperty, ExpansionValue10) == 0x02B8);
static_assert(offsetof(FSBSkillTableProperty, AimLockOnTargetVibrationSetPath) == 0x02D0);
static_assert(offsetof(FSBSkillTableProperty, TrainingRoomLogStringKey) == 0x02E0);
static_assert(offsetof(FSBSkillTableProperty, FileSuffix) == 0x02F0);
static_assert(offsetof(FSBSkillTableProperty, FirstActiveStepByEffectArray) == 0x02F8);
static_assert(offsetof(FSBCharacterTableProperty, Rank) == 0x0014);
static_assert(offsetof(FSBCharacterTableProperty, Type) == 0x0020);
static_assert(offsetof(FSBCharacterTableProperty, Tribe) == 0x0030);
static_assert(offsetof(FSBCharacterTableProperty, OverrideTribe) == 0x0038);
static_assert(offsetof(FSBCharacterTableProperty, ConditionList_OverrideTribe) == 0x0040);
static_assert(offsetof(FSBCharacterTableProperty, Tags) == 0x0050);
static_assert(offsetof(FSBCharacterTableProperty, LinkSkillRandomActiveStepFlagArray) == 0x0060);
static_assert(offsetof(FSBCharacterTableProperty, Flag) == 0x0070);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasWhenZeroHPArray) == 0x0148);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasWhenZeroShieldArray) == 0x0158);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasWhenZeroStaminaArray) == 0x0168);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasByRageSkillArray) == 0x0178);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasBy1ComboSkillArray) == 0x0188);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasBy2ComboSkillArray) == 0x0198);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasBy3ComboSkillArray) == 0x01A8);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasBy4ComboSkillArray) == 0x01B8);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasBy5ComboSkillArray) == 0x01C8);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasByCriticalHitArray) == 0x01D8);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasToTargetByCriticalHitArray) == 0x01E8);
static_assert(offsetof(FSBCharacterTableProperty, WeightType) == 0x01F8);
static_assert(offsetof(FSBCharacterTableProperty, DefaultEffectArray) == 0x0220);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasByPlayerCount2) == 0x0230);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasByPlayerCount3) == 0x0240);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasByPlayerCount4) == 0x0250);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasArrayForStoryMode) == 0x0260);
static_assert(offsetof(FSBCharacterTableProperty, DifficultyStatGroupAlias) == 0x0270);
static_assert(offsetof(FSBCharacterTableProperty, DefaultEquipmentAliasArray) == 0x0278);
static_assert(offsetof(FSBCharacterTableProperty, AttackerEffectWhenDead) == 0x0288);
static_assert(offsetof(FSBCharacterTableProperty, DeadAlias) == 0x0298);
static_assert(offsetof(FSBCharacterTableProperty, DespawnShow) == 0x02A8);
static_assert(offsetof(FSBCharacterTableProperty, SpawnShow) == 0x02B8);
static_assert(offsetof(FSBCharacterTableProperty, SpawnEffectList) == 0x02C8);
static_assert(offsetof(FSBCharacterTableProperty, MonsterWarpShow) == 0x02D8);
static_assert(offsetof(FSBCharacterTableProperty, MonsterWarpEffectList) == 0x02E8);
static_assert(offsetof(FSBCharacterTableProperty, CollisionGroupName1) == 0x02F8);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasArrayWhenCollisionGroupGaugeZero1) == 0x0308);
static_assert(offsetof(FSBCharacterTableProperty, CollisionGroupName2) == 0x0318);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasArrayWhenCollisionGroupGaugeZero2) == 0x0328);
static_assert(offsetof(FSBCharacterTableProperty, CollisionGroupName3) == 0x0338);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasArrayWhenCollisionGroupGaugeZero3) == 0x0348);
static_assert(offsetof(FSBCharacterTableProperty, CollisionGroupName4) == 0x0358);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasArrayWhenCollisionGroupGaugeZero4) == 0x0368);
static_assert(offsetof(FSBCharacterTableProperty, CollisionGroupName5) == 0x0378);
static_assert(offsetof(FSBCharacterTableProperty, EffectAliasArrayWhenCollisionGroupGaugeZero5) == 0x0388);
static_assert(offsetof(FSBCharacterTableProperty, StanceAliasArray) == 0x0398);
static_assert(offsetof(FSBCharacterTableProperty, DefaultStanceAlias) == 0x03A8);
static_assert(offsetof(FSBCharacterTableProperty, GetupMoveAlias) == 0x03B4);
static_assert(offsetof(FSBCharacterTableProperty, JumpEffectArray) == 0x03C0);
static_assert(offsetof(FSBCharacterTableProperty, SprintEffectArray) == 0x03D0);
static_assert(offsetof(FSBCharacterTableProperty, BehaviorTreeRes) == 0x03E8);
static_assert(offsetof(FSBCharacterTableProperty, DefaultDetectAIAlias) == 0x03F8);
static_assert(offsetof(FSBCharacterTableProperty, NarrowDetectAIAlias) == 0x0400);
static_assert(offsetof(FSBCharacterTableProperty, DetectViewingSocketName) == 0x0408);
static_assert(offsetof(FSBCharacterTableProperty, ActorType) == 0x041C);
static_assert(offsetof(FSBCharacterTableProperty, RefAppearance) == 0x0420);
static_assert(offsetof(FSBCharacterTableProperty, Interaction) == 0x0438);
static_assert(offsetof(FSBCharacterTableProperty, RewardGroupAlias) == 0x0450);
static_assert(offsetof(FSBCharacterTableProperty, RewardSpawnBucketType) == 0x0458);
static_assert(offsetof(FSBCharacterTableProperty, RewardOverrideSaveType) == 0x0459);
static_assert(offsetof(FSBCharacterTableProperty, RewardFormationAssetPath) == 0x0460);
static_assert(offsetof(FSBCharacterTableProperty, UITextWhenDead) == 0x0478);
static_assert(offsetof(FSBCharacterTableProperty, EncroachmentType) == 0x04D0);
static_assert(offsetof(FSBCharacterTableProperty, RelativeShowPath) == 0x04E0);
static_assert(offsetof(FSBCharacterTableProperty, ScanDisplayType) == 0x0500);
static_assert(offsetof(FSBCharacterTableProperty, Name) == 0x0508);
static_assert(offsetof(FSBCharacterTableProperty, OverrideEquip) == 0x0518);
static_assert(offsetof(FSBCharacterTableProperty, OverrideCharacterSoundSet) == 0x0520);
static_assert(offsetof(FSBCharacterTableProperty, FileSuffix) == 0x0530);
static_assert(offsetof(FSBCharacterTableProperty, AttackerEffectWhenDeadArray) == 0x0538);
static_assert(offsetof(FSBTableMetaData, Guid) == 0x0000);
static_assert(offsetof(FSBTableMetaData, Filename) == 0x0010);
static_assert(offsetof(FSBJsonEffectAction_UnmountingEquipment, EquipmentType) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_MountingEquipment, EquipmentType) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_MountingEquipment, TargetFilterAlias) == 0x0004);
static_assert(offsetof(FSBJsonEffectAction_MountingEquipment, CheckEquipmentAlias) == 0x000C);
static_assert(offsetof(FSBJsonEffectAction_ZoneEventActorDestruction, TargetFilterAlias) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_ZoneEventActorDestruction, ZoneEventActorTriggerTag) == 0x0008);
static_assert(offsetof(FSBJsonEffectAction_ZoneEventActorDestruction, IgnoreSpecialTag) == 0x0010);
static_assert(offsetof(FSBJsonEffectAction_ActionAssist, SkillCommandName1) == 0x0004);
static_assert(offsetof(FSBJsonEffectAction_ActionAssist, SkillCommandName2) == 0x000C);
static_assert(offsetof(FSBJsonEffectAction_ActionAssist, SkillCommandName3) == 0x0014);
static_assert(offsetof(FSBJsonEffectAction_ActionAssist, SkillCommandName4) == 0x001C);
static_assert(offsetof(FSBJsonEffectAction_ActionAssist, SkillCommandName5) == 0x0024);
static_assert(offsetof(FSBJsonEffectAction_UIClientEvent, Event) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_UIClientEvent, BulletAlias) == 0x0010);
static_assert(offsetof(FSBJsonEffectAction_UIClientEvent, CoverPosition) == 0x0018);
static_assert(offsetof(FSBJsonEffectAction_FishingMode, FishingModeType) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_NotifyTagEvent, TagName) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_NotifyTagEvent, CustomNameValue) == 0x0008);
static_assert(offsetof(FSBJsonEffectAction_ItemRefill, ItemAlias) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_AdditiveSkillEnergyAmount, SkillAlias) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_AdditiveSkillCoolTime, SkillAlias) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_AdditiveSkillCommandCoolTime, Command) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_ActiveInteraction, Interaction) == 0x0008);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, CharacterAlias) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, SpawnLocationType) == 0x000A);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, SpawnLocationSocketName) == 0x000C);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, SpawnRotationType) == 0x0014);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, SpawnPointName) == 0x0018);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, SpawnLocation) == 0x0024);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, Effect1) == 0x0030);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, Effect2) == 0x0038);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, Tag1) == 0x0040);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, SpawnShow) == 0x0050);
static_assert(offsetof(FSBJsonEffectAction_SummonActor, AIGroup) == 0x0064);
static_assert(offsetof(FSBJsonEffectAction_TargetEncroachment, TargetFilterAlias) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_TargetEncroachment, BindingIdleBlendSpace) == 0x0018);
static_assert(offsetof(FSBJsonEffectAction_TargetEncroachment, BindingPhysicsAsset) == 0x0028);
static_assert(offsetof(FSBJsonEffectAction_TPSMiniGame, TargetLocation) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_TryLinkBreak, Command) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_PlayTheaterParam, AssetPath) == 0x0000);
static_assert(offsetof(FSBJsonEffectAction_AreaTimeScale, TargetFilterAlias) == 0x0000);
static_assert(offsetof(FSBJsonString, V) == 0x0000);
static_assert(offsetof(FSBEdGraphNodePinInfo, PinName) == 0x0008);
static_assert(offsetof(FSBEdGraphNodePinInfo, DataCategory) == 0x0010);
static_assert(offsetof(FSBEdGraphNodePinInfo, DefaultValue) == 0x0018);
static_assert(offsetof(FSBEdGraphNodePinInfo, DataTableType) == 0x0028);
static_assert(offsetof(FSBEdGraphNodePinInfo, SubCategoryObject) == 0x002C);
static_assert(offsetof(FSBEdGraphNodePinInfo, GraphPinType) == 0x0038);
static_assert(offsetof(FSBEdGraphNodePinInfo, PinDirectionType) == 0x0090);
static_assert(offsetof(FSBEventMoveDataUpdate, StartTargetLocation) == 0x0000);
static_assert(offsetof(FSBEventMoveDataUpdate, StartTargetRotation) == 0x000C);
static_assert(offsetof(FSBEventMoveDataUpdate, EndTargetLocation) == 0x0018);
static_assert(offsetof(FSBEventMoveDataUpdate, EndTargetRotation) == 0x0024);
static_assert(offsetof(FSBEventMoveDataUpdate, StartLeaveLocation) == 0x0030);
static_assert(offsetof(FSBEventMoveDataUpdate, StartLeaveRotation) == 0x003C);
static_assert(offsetof(FSBEventMoveDataUpdate, EndLeaveLocation) == 0x0048);
static_assert(offsetof(FSBEventMoveDataUpdate, EndLeaveRotation) == 0x0054);
static_assert(offsetof(FSBSaveOptionData_Preset, BossChallengePresetType) == 0x0000);
static_assert(offsetof(FSBSaveOptionData_Preset, Equipment) == 0x0008);
static_assert(offsetof(FSBItemAliasInfo, ItemDataAlias) == 0x0000);
static_assert(offsetof(FSBItemSpawnCasterInfo, ZoneEnvAlias) == 0x0000);
static_assert(offsetof(FSBItemSpawnCasterInfo, CharacterAlias) == 0x0008);
static_assert(offsetof(FSBItemSpawnCasterInfo, CharacterEventSpawnAlias) == 0x0010);
static_assert(offsetof(FSBItemSpawnCasterInfo, ZoneEventActorTableAlias) == 0x0018);
static_assert(offsetof(FSBItemSpawnCasterInfo, ZoneEventActorName) == 0x0020);
static_assert(offsetof(FSBItemSpawnCasterInfo, RewardOverrideSaveType) == 0x0028);
static_assert(offsetof(FSBItemSpawnFormation, SpawnRangeType) == 0x0004);
static_assert(offsetof(FSBItemSpawnFormation, RandomRangeCharSocket) == 0x0044);
static_assert(offsetof(FSBItemSpawnFormation, SequentialArcOffset) == 0x0064);
static_assert(offsetof(FSBItemSpawnFormation, SequentialArcForwardRotation) == 0x0070);
static_assert(offsetof(FSBItemSpawnFormation, SequentialArcForward) == 0x007C);
static_assert(offsetof(FSBItemInstanceForRPC, SavedGuid) == 0x0000);
static_assert(offsetof(FSBItemInstanceForRPC, PocketGuid) == 0x0010);
static_assert(offsetof(FSBItemInstanceForRPC, ItemAlias) == 0x0020);
static_assert(offsetof(FSBItemInstanceForRPC, GearType) == 0x0035);
static_assert(offsetof(FSBItemInstanceForRPC, EquipStatAliasKeyArray) == 0x0040);
static_assert(offsetof(FSBItemInstanceForRPC, EquipStatAliasValueArray) == 0x0050);
static_assert(offsetof(FSBItemInstanceForRPC, EquipStatRangeKeyArray) == 0x0060);
static_assert(offsetof(FSBItemInstanceForRPC, EquipStatRangeValueArray) == 0x0070);
static_assert(offsetof(FSBLevelSequenceAnimTrailTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceBKMovieTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceBKMovieTemplate, StartFrame) == 0x0048);
static_assert(offsetof(FSBLevelSequenceBKMovieTemplate, EndFrame) == 0x004C);
static_assert(offsetof(FSBLevelSequenceBookmarkTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceBookmarkTemplate, StartFrame) == 0x0030);
static_assert(offsetof(FSBLevelSequenceBookmarkTemplate, EndFrame) == 0x0034);
static_assert(offsetof(FSBLevelSequenceCameraActorBoundsTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceCameraActorBoundsTemplate, StartFrame) == 0x0050);
static_assert(offsetof(FSBLevelSequenceCameraActorBoundsTemplate, EndFrame) == 0x0054);
static_assert(offsetof(FSBLevelSequenceCameraActorBoundsTemplateTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceCameraActorBoundsTemplateTemplate, StartFrame) == 0x0028);
static_assert(offsetof(FSBLevelSequenceCameraActorBoundsTemplateTemplate, EndFrame) == 0x002C);
static_assert(offsetof(FSBLevelSequenceCameraLookAtTargetTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceCameraLookAtTargetTemplate, StartFrame) == 0x0054);
static_assert(offsetof(FSBLevelSequenceCameraLookAtTargetTemplate, EndFrame) == 0x0058);
static_assert(offsetof(FSBLevelSequenceCharacterActionTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceCharacterActionTemplate, StartFrame) == 0x0048);
static_assert(offsetof(FSBLevelSequenceCharacterActionTemplate, EndFrame) == 0x004C);
static_assert(offsetof(FSBLevelSequenceEnvControlVolumeTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventActorActiveTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventActorAITemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventActorBattleStateTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventActorEffectTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventActorEffectTemplate, SectionSignature) == 0x0054);
static_assert(offsetof(FSBLevelSequenceEventAmbientSoundControlTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventBGMPriorityTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventBGMTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventGlobalValueTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventHUDActionTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventLockOnAtChatTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventPlayerActionTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2Template, ShakeData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2Template, StartFrame) == 0x0070);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShake2Template, EndFrame) == 0x0074);
static_assert(offsetof(FSBLevelSequenceEventPlayerCameraShakeTemplate, ShakeData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventSoundEventTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventSoundMixTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventSoundVolumeTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventUIActionTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventVibrationTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventZoneEventTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceEventZoneEventTemplate, SectionSignature) == 0x003C);
static_assert(offsetof(FSBLevelSequenceEventZoneLoadWaitTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceHLODTemplate, HLOD) == 0x0020);
static_assert(offsetof(FSBLevelSequenceLevelStreamingWaitTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceLevelStreamingWaitTemplate, StartFrame) == 0x0048);
static_assert(offsetof(FSBLevelSequenceLevelStreamingWaitTemplate, EndFrame) == 0x004C);
static_assert(offsetof(FSBLevelSequenceLevelStreamingWaitTemplate, TimerGuid) == 0x0050);
static_assert(offsetof(FSBLevelSequenceLookAtTargetTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceLookAtTargetTemplate, StartFrame) == 0x0050);
static_assert(offsetof(FSBLevelSequenceLookAtTargetTemplate, EndFrame) == 0x0054);
static_assert(offsetof(FSBLevelSequenceMoveToLocationTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceMoveToLocationTemplate, StartFrame) == 0x0080);
static_assert(offsetof(FSBLevelSequenceMoveToLocationTemplate, EndFrame) == 0x0084);
static_assert(offsetof(FSBLevelSequenceSetAnimBPPropertyTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationSectionTemplateParameters, SectionStartTime) == 0x00A0);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationSectionTemplateParameters, SectionEndTime) == 0x00A4);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimationSectionTemplate, Params) == 0x0020);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimMoveStateSectionTemplateParameters, SectionStartTime) == 0x0028);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimMoveStateSectionTemplateParameters, SectionEndTime) == 0x002C);
static_assert(offsetof(FSBLevelSequenceSkeletalAnimMoveStateTemplate, Params) == 0x0020);
static_assert(offsetof(FSBLevelSequenceSkipTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceSkipTemplate, StartFrame) == 0x0048);
static_assert(offsetof(FSBLevelSequenceSkipTemplate, EndFrame) == 0x004C);
static_assert(offsetof(FSBLevelSequenceSplineCineCamTrackingTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceSplineCineCamTrackingTemplate, StartFrame) == 0x0028);
static_assert(offsetof(FSBLevelSequenceSplineCineCamTrackingTemplate, EndFrame) == 0x002C);
static_assert(offsetof(FSBLevelSequenceTheaterAreaTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterAreaTemplate, StartFrame) == 0x0058);
static_assert(offsetof(FSBLevelSequenceTheaterAreaTemplate, EndFrame) == 0x005C);
static_assert(offsetof(FSBLevelSequenceTheaterAttachWidgetTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterAttachWidgetTemplate, StartFrame) == 0x0068);
static_assert(offsetof(FSBLevelSequenceTheaterAttachWidgetTemplate, EndFrame) == 0x006C);
static_assert(offsetof(FSBLevelSequenceTheaterDialogueTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterDialogueTemplate, StartFrame) == 0x0048);
static_assert(offsetof(FSBLevelSequenceTheaterDialogueTemplate, EndFrame) == 0x004C);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterTemplate, StartFrame) == 0x0138);
static_assert(offsetof(FSBLevelSequenceTheaterInputCounterTemplate, EndFrame) == 0x013C);
static_assert(offsetof(FSBLevelSequenceTheaterInputFeedbackTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterInputFeedbackTemplate, StartFrame) == 0x0030);
static_assert(offsetof(FSBLevelSequenceTheaterInputFeedbackTemplate, EndFrame) == 0x0034);
static_assert(offsetof(FSBLevelSequenceTheaterInteractionSelectTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterInteractionSelectTemplate, StartFrame) == 0x0034);
static_assert(offsetof(FSBLevelSequenceTheaterInteractionSelectTemplate, EndFrame) == 0x0038);
static_assert(offsetof(FSBLevelSequenceTheaterPlayerChoiceTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterPlayerChoiceTemplate, StartFrame) == 0x0038);
static_assert(offsetof(FSBLevelSequenceTheaterPlayerChoiceTemplate, EndFrame) == 0x003C);
static_assert(offsetof(FSBLevelSequenceTheaterQTEFlowData, ActionKey) == 0x0000);
static_assert(offsetof(FSBLevelSequenceTheaterQTEFlowData, LocationData) == 0x0008);
static_assert(offsetof(FSBLevelSequenceTheaterQTEFlowData, StartFrame) == 0x0038);
static_assert(offsetof(FSBLevelSequenceTheaterQTEFlowData, EndFrame) == 0x003C);
static_assert(offsetof(FSBLevelSequenceTheaterQTETemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterQTETemplate, StartFrame) == 0x00E0);
static_assert(offsetof(FSBLevelSequenceTheaterQTETemplate, EndFrame) == 0x00E4);
static_assert(offsetof(FSBLevelSequenceTheaterReactionTriggerTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterReactionTriggerTemplate, StartFrame) == 0x0040);
static_assert(offsetof(FSBLevelSequenceTheaterReactionTriggerTemplate, EndFrame) == 0x0044);
static_assert(offsetof(FSBLevelSequenceTheaterSubtitleTemplate, SectionData) == 0x0020);
static_assert(offsetof(FSBLevelSequenceTheaterSubtitleTemplate, SectionSignature) == 0x0070);
static_assert(offsetof(FSBLevelSequenceTheaterSubtitleTemplate, StartFrame) == 0x0080);
static_assert(offsetof(FSBLevelSequenceTheaterSubtitleTemplate, EndFrame) == 0x0084);
static_assert(offsetof(FSBLevelSequenceVisibilityTagTemplate, VisibilityTag) == 0x0020);
static_assert(offsetof(FSBMovieSceneEventTriggerData, ObjectBindingID) == 0x0000);
static_assert(offsetof(FSBMovieSceneEventChannel, KeyTimes) == 0x0068);
static_assert(offsetof(FSBMovieSceneEventChannel, KeyValues) == 0x0078);
static_assert(offsetof(FSBKeyMappingsJsonObject, ActionMappings) == 0x0000);
static_assert(offsetof(FSBKeyMappingsJsonObject, AxisMappings) == 0x0010);
static_assert(offsetof(FSBQuestDataDescriptionInfo, ToolData) == 0x0000);
static_assert(offsetof(FSBQuestDataDescriptionInfo, ToolDataDescription) == 0x0028);
static_assert(offsetof(FSBSaveJsonData_RestorationMeshInfo, Transform) == 0x0010);
static_assert(offsetof(FSBSaveJsonData_RestorationMeshInfo, CollisionEnabled) == 0x0040);
static_assert(offsetof(FSBSaveJsonData_RestorationWorldActor, MeshInfoMap) == 0x0000);
static_assert(offsetof(FSBSaveJsonData_RestorationWorldActor, Transform) == 0x0060);
static_assert(offsetof(FSBRootMotionTablePropertyInfo, CharacterMoveAlias) == 0x0000);
static_assert(offsetof(FSBLocalPlayerData, ActorData) == 0x0008);
static_assert(offsetof(FSBLocalPlayerData, EffectData) == 0x02B8);
static_assert(offsetof(FSBLocalPlayerData, TurntableSoundAlias) == 0x02CC);
static_assert(offsetof(FSBLocalPlayerData, AcquisitionSkillData) == 0x02D8);
static_assert(offsetof(FSBLocalPlayerData, AchievementData) == 0x0338);
static_assert(offsetof(FSBLocalPlayerData, FishingLogBookData) == 0x0348);
static_assert(offsetof(FSBLocalPlayerData, ShopSaveData) == 0x0358);
static_assert(offsetof(FSBLocalPlayerData, ActorStorageData) == 0x03F8);
static_assert(offsetof(FSBLocalPlayerData, TheaterData) == 0x0448);
static_assert(offsetof(FSBLocalPlayerData, UIData) == 0x0498);
static_assert(offsetof(FSBLocalPlayerData, ItemData) == 0x04A8);
static_assert(offsetof(FSBLocalPlayerData, HintSaveData) == 0x0618);
static_assert(offsetof(FSBSaveGameDataStorage, GameDifficulty) == 0x0001);
static_assert(offsetof(FSBSaveGameDataStorage, ActionAssist) == 0x0002);
static_assert(offsetof(FSBSaveGameDataStorage, SnapShotZoneAlias) == 0x000C);
static_assert(offsetof(FSBSaveGameDataStorage, MapName) == 0x0018);
static_assert(offsetof(FSBSaveGameDataStorage, LastHitCampAlias) == 0x002C);
static_assert(offsetof(FSBSaveGameDataStorage, TurntableAlias) == 0x0034);
static_assert(offsetof(FSBSaveGameDataStorage, ActorSaveData) == 0x0040);
static_assert(offsetof(FSBSaveGameDataStorage, EffectSaveData) == 0x02F0);
static_assert(offsetof(FSBSaveGameDataStorage, QuestSaveData) == 0x0300);
static_assert(offsetof(FSBSaveGameDataStorage, EnvSaveData) == 0x0388);
static_assert(offsetof(FSBSaveGameDataStorage, ItemSaveData) == 0x03A8);
static_assert(offsetof(FSBSaveGameDataStorage, AcquisitionSkillSaveData) == 0x0518);
static_assert(offsetof(FSBSaveGameDataStorage, AchievementSaveData) == 0x0578);
static_assert(offsetof(FSBSaveGameDataStorage, FishingLogBookSaveData) == 0x0588);
static_assert(offsetof(FSBSaveGameDataStorage, History) == 0x0598);
static_assert(offsetof(FSBSaveGameDataStorage, ActorStorages) == 0x0638);
static_assert(offsetof(FSBSaveGameDataStorage, TheaterData) == 0x0688);
static_assert(offsetof(FSBSaveGameDataStorage, UIData) == 0x06D8);
static_assert(offsetof(FSBSaveGameDataStorage, GamePlayProgressRecordData) == 0x06E8);
static_assert(offsetof(FSBSaveGameDataStorage, HintSaveData) == 0x0738);
static_assert(offsetof(FSBSaveGameDataStorage, TrainingRoomData) == 0x0768);
static_assert(offsetof(FSBSaveGameDataStorage, EndingInfo) == 0x07C0);
static_assert(offsetof(FSBSaveGameDataStorage, NewGamePlusBaseInfo) == 0x07D8);
static_assert(offsetof(FSBSaveGameDataStorage, EventGiftInfo) == 0x0E50);
static_assert(offsetof(FSBSaveGameDataStorage, NikkeStageInfo) == 0x0E60);
static_assert(offsetof(FSBSaveGameDataStorage, DebugHistoryLogMap) == 0x0E78);
static_assert(offsetof(FSBScanNavigationUnit, DecalComp) == 0x0000);
static_assert(offsetof(FSBScanNavigationUnit, DecalMID) == 0x0008);
static_assert(offsetof(FSBSequencerReactionTriggerInputInfo, InputType) == 0x0000);
static_assert(offsetof(FSBSequencerReactionTriggerInputInfo, CheckInputActionArray) == 0x0008);
static_assert(offsetof(FSBPhysParticle, SurfaceType) == 0x0000);
static_assert(offsetof(FSBPhysParticle, PSTemplate) == 0x0008);
static_assert(offsetof(FSBTheaterInteractionSelectData, DesignType) == 0x0000);
static_assert(offsetof(FSBTheaterInteractionSelectData, Tag) == 0x0004);
static_assert(offsetof(FSBTheaterInteractionSelectData, SelectionArray) == 0x0010);
static_assert(offsetof(FSBTheaterInteractionSelectData, Message) == 0x0028);
static_assert(offsetof(FSBTheaterInteractionData, SelectMap) == 0x0000);
static_assert(offsetof(FSBTheaterInteractionData, Guid) == 0x0050);
static_assert(offsetof(FSBUIActionEventRefreshNikkeLostGoodsIndicator, AddedNikkeLostGoodsArray) == 0x0000);
static_assert(offsetof(FSBUIActionEventScreenShotCapture, Path) == 0x0008);
static_assert(offsetof(FSBUIActionEventItemUse, ItemUseType) == 0x0000);
static_assert(offsetof(FSBUIActionEventAchieveNewQuestByFriendShip, StringKey) == 0x0000);
static_assert(offsetof(FSBUIActionEventActionAssistStart, ActionAssistSignalType) == 0x0000);
static_assert(offsetof(FSBUIActionEventTrainingRoomActiveStep, StepAlias) == 0x0000);
static_assert(offsetof(FSBUIActionEventTrainingRoomSkillCommand, SkillCommandAlias) == 0x0000);
static_assert(offsetof(FSBUIActionEventHUDGuideMessage, GuideDataAlias) == 0x0000);
static_assert(offsetof(FSBUIActionEventHUDGuideMessage, GuideEventType) == 0x0010);
static_assert(offsetof(FSBUIActionEventHUDGuideMessageRequest, GuideDataAlias) == 0x0000);
static_assert(offsetof(FSBUIActionEventHUDQuestInfo, EventType) == 0x0000);
static_assert(offsetof(FSBUIActionEventHUDQuestInfo, QuestType) == 0x0001);
static_assert(offsetof(FSBUIActionEventHUDQuestInfo, QuestAlias) == 0x0004);
static_assert(offsetof(FSBUIActionEventHUDQuestInfo, TaskGroupAlias) == 0x000C);
static_assert(offsetof(FSBUIActionEventHUDQuestInfo, TaskAlias) == 0x0014);
static_assert(offsetof(FSBUIActionEventCloseSettingPopup, SettingPopupType) == 0x0000);
static_assert(offsetof(FSBUIActionEventCloseSettingPopup, UILogicType) == 0x0001);
static_assert(offsetof(FSBUIActionEventRefreshSettingUI, OptionTypeArray) == 0x0000);
static_assert(offsetof(FSBUIActionEventHUDShowChange, ShowType) == 0x0000);
static_assert(offsetof(FSBUIActionEventHUDSizeChange, SizeType) == 0x0000);
static_assert(offsetof(FSBUIActionEventHUDVisible, Tag) == 0x0004);
static_assert(offsetof(FSBUIActionEventLobbySlotPopupUpdate, SlotPopupType) == 0x0000);
static_assert(offsetof(FSBUIActionEventLobbyStateUpdate, LobbyUIState) == 0x0000);
static_assert(offsetof(FSBUIActionEventTopTabVisibility, LogicType) == 0x0000);
static_assert(offsetof(FSBUIActionEventTopTabVisibility, Visibility) == 0x0001);
static_assert(offsetof(FSBUIActionEventWorkshopCoveredByPopup, PopupType) == 0x0000);
static_assert(offsetof(FSBUIActionEventWorkshopPopupClosed, PopupType) == 0x0000);
static_assert(offsetof(FSBUIActionEventWorkshopPopupOpen, PopupType) == 0x0000);
static_assert(offsetof(FSBUIActionEventWorkshopPopupOpen, TextData) == 0x0008);
static_assert(offsetof(FSBUIActionEventWorkshopPopupOpen, IconPath) == 0x0020);
static_assert(offsetof(FSBUIActionEventNotifyUpdate, UpdateAlias) == 0x0000);
static_assert(offsetof(FSBUIActionEventNotifyUpdate, AchievementAlias) == 0x0008);
static_assert(offsetof(FSBUIActionEventNotifyUpdate, UpdateType) == 0x0010);
static_assert(offsetof(FSBUIActionEventQuestTaskGroupChangedState, TaskGroupAlias) == 0x0000);
static_assert(offsetof(FSBUIActionEventQuestTaskGroupChangedState, TaskGroupState) == 0x0008);
static_assert(offsetof(FSBUIActionEventQuestTaskUpdate, TaskAlias) == 0x0000);
static_assert(offsetof(FSBUIActionEventQuestTaskUpdate, QuestAlias) == 0x0008);
static_assert(offsetof(FSBUIActionEventSkillTreeUnlock, SkillTreeType) == 0x0000);
static_assert(offsetof(FSBUIActionEventSkillTreeUnlock, ProgressType) == 0x0001);
static_assert(offsetof(FSBUIActionEventSkillTreeUnlock, UnlockPresentationType) == 0x0002);
static_assert(offsetof(FSBUIActionEventSkillTreeUnlock, AchievementAlias) == 0x0004);
static_assert(offsetof(FSBUIActionEventUpdateIndicator, IndicatorType) == 0x0000);
static_assert(offsetof(FSBSettingComboBoxItemData, TitleText) == 0x0000);
static_assert(offsetof(FSBMailBoxItemData, GiftAlias) == 0x0000);
static_assert(offsetof(FSBMailBoxItemData, TitleStringKey) == 0x0008);
static_assert(offsetof(FSBTurntableItemData, TitleText) == 0x0000);
static_assert(offsetof(FSBTurntableItemData, RedDotState) == 0x0019);
static_assert(offsetof(FSBBossChallengeRewardMissionItemData, TitleText) == 0x0000);
static_assert(offsetof(FSBBossChallengeListData, BossNameText) == 0x0000);
static_assert(offsetof(FSBBossChallengeListData, AreaNameText) == 0x0018);
static_assert(offsetof(FSBBossChallengeListData, ThumbnailIconImagePath) == 0x0030);
static_assert(offsetof(FSBBossChallengeListData, Difficulty) == 0x0040);
static_assert(offsetof(FSBManualGroupListData, GroupStringKey) == 0x0008);
static_assert(offsetof(FSBManualGroupListData, RedDotState) == 0x0018);
static_assert(offsetof(FSBItemNewNoticeListData, ItemName) == 0x0000);
static_assert(offsetof(FSBItemNewNoticeListData, Category) == 0x001C);
static_assert(offsetof(FSBItemNewNoticeListData, Rarity) == 0x001D);
static_assert(offsetof(FSBGuideRewardListData, ItemName) == 0x0000);
static_assert(offsetof(FSBGuideRewardListData, Rarity) == 0x001C);
static_assert(offsetof(FSBGuideRewardListData, IconAssetPath) == 0x0020);
static_assert(offsetof(FSBGuideRewardListData, ItemAlias) == 0x0034);
static_assert(offsetof(FSBSoundStatLogData, Category) == 0x0000);
static_assert(offsetof(FSBSoundStatLogData, Description) == 0x0008);
static_assert(offsetof(FSBSoundEventFixedLogData, Category) == 0x0000);
static_assert(offsetof(FSBSoundEventFixedLogData, Description) == 0x0008);
static_assert(offsetof(FSBSoundEventLogData, StringValue) == 0x0000);
static_assert(offsetof(FSBWorkshopExospineTitleData, title) == 0x0000);
static_assert(offsetof(FSBWorkshopExospineTitleData, RedDotState) == 0x001D);
static_assert(offsetof(FSBWorkshopExospineTitleData, IconAssetPath) == 0x0020);
static_assert(offsetof(FSBWorkshopExospineTitleData, Rarity) == 0x0030);
static_assert(offsetof(FSBWorkshopNanoSuitTitleData, title) == 0x0000);
static_assert(offsetof(FSBWorkshopNanoSuitTitleData, State) == 0x0018);
static_assert(offsetof(FSBWorkshopNanoSuitTitleData, RedDotState) == 0x0019);
static_assert(offsetof(FSBWorkshopNanoSuitTitleData, IconAssetPath) == 0x0020);
static_assert(offsetof(FSBWorkshopNanoSuitTitleData, Rarity) == 0x0030);
static_assert(offsetof(FSBListTabData, title) == 0x0000);
static_assert(offsetof(FSBRealTimeDebugProperty, Object) == 0x0000);
static_assert(offsetof(FSBRealTimeDebugProperty, Instance) == 0x0008);
static_assert(offsetof(FSBRealTimeDebugProperty, Property) == 0x0020);
static_assert(offsetof(FSBRealTimeDebugProperty, Value) == 0x0038);
static_assert(offsetof(FSBRealTimeDebugProperty, DataState) == 0x0050);
static_assert(offsetof(FSBDebugViewerProperty, Key) == 0x0000);
static_assert(offsetof(FSBDebugViewerProperty, Value) == 0x0018);
static_assert(offsetof(FSBDebugViewerProperty, DataState) == 0x0031);
static_assert(offsetof(FSBDebugViewerData, Category) == 0x0000);
static_assert(offsetof(FSBDebugViewerData, Name) == 0x0008);
static_assert(offsetof(FSBDebugViewerData, DataState) == 0x0020);
static_assert(offsetof(FSBMultiPlayPlayerData, PlayerName) == 0x0000);
static_assert(offsetof(FSBTeleportCampData, CampName) == 0x0008);
static_assert(offsetof(FSBTeleportCampData, CampAlias) == 0x0020);
static_assert(offsetof(FSBTeleportCampData, RedDotState) == 0x0028);
static_assert(offsetof(FSBBHUDCommandCheatData, CategoryText) == 0x0008);
static_assert(offsetof(FSBBHUDCommandCheatData, CheatText) == 0x0020);
static_assert(offsetof(FSBGameMenuTaskData, TextData) == 0x0000);
static_assert(offsetof(FSBGameMenuTaskData, UIType) == 0x0018);
static_assert(offsetof(FSBGameMenuTaskData, DescriptionUIType) == 0x0019);
static_assert(offsetof(FSBRequestTitleData, title) == 0x0000);
static_assert(offsetof(FSBRequestTitleData, Alias) == 0x0018);
static_assert(offsetof(FSBRequestTitleData, RedDotState) == 0x0020);
static_assert(offsetof(FSBRequestTitleData, RequestState) == 0x0021);
static_assert(offsetof(FSBRequestTitleData, DisplayRequestBoardType) == 0x0023);
static_assert(offsetof(FSBGameMenuQuestTitleData, QuestTitle) == 0x0000);
static_assert(offsetof(FSBGameMenuQuestTitleData, QuestAlias) == 0x001C);
static_assert(offsetof(FSBGameMenuQuestTitleData, QuestType) == 0x0024);
static_assert(offsetof(FSBGameMenuQuestTitleData, QuestState) == 0x0025);
static_assert(offsetof(FSBGameMenuQuestTitleData, RedDotState) == 0x0026);
static_assert(offsetof(FSBGameMenuEquipStatViewerData, StatName) == 0x0000);
static_assert(offsetof(FSBGameMenuEquipStatViewerData, StatValue) == 0x0018);
static_assert(offsetof(FSBGameMenuEquipInvenData, ItemName) == 0x0000);
static_assert(offsetof(FSBGameMenuEquipInvenData, ItemAlias) == 0x0018);
static_assert(offsetof(FSBGameMenuEquipInvenData, IconAssetPath) == 0x0020);
static_assert(offsetof(FSBGameMenuEquipInvenData, SlotType) == 0x0030);
static_assert(offsetof(FSBGameMenuEquipInvenData, Rarity) == 0x0031);
static_assert(offsetof(FSBGameMenuEquipInvenData, RedDotState) == 0x0048);
static_assert(offsetof(FSBUILogicInitParameterCanCollection, CollectionEnvSpawnAlias) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterCanGain, CanAlias) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterCommonCurrency, BindingCurrency) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterCommonMessageBoxV3, title) == 0x0050);
static_assert(offsetof(FSBUILogicInitParameterCommonMessageBoxV3, Desc) == 0x0068);
static_assert(offsetof(FSBUILogicInitParameterCommonMessageBoxV3, TitleTID) == 0x0080);
static_assert(offsetof(FSBUILogicInitParameterCommonMessageBoxV3, DescTID) == 0x0090);
static_assert(offsetof(FSBUILogicInitParameterCommonMessageBoxV3, EffectAliasList) == 0x00A8);
static_assert(offsetof(FSBUILogicInitParameterCommonMessageBoxV3, ButtonType) == 0x00B8);
static_assert(offsetof(FSBUILogicInitParameterCoupon, CouponEnvSpawnAlias) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterDLCPurchasePopup, DLCPurchasePopupType) == 0x0000);
static_assert(offsetof(FSBUILogicEventKey, UMGWidgetName) == 0x0008);
static_assert(offsetof(FSBUILogicEventKey, UMGWidgetActionPath) == 0x0010);
static_assert(offsetof(FSBUILogicInitParameterFinishEve, EndingTag) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterFishingBoxReward, FishAlias) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterFishingBoxReward, BoxRewardItemAliasArray) == 0x0008);
static_assert(offsetof(FSBUILogicInitParameterFishingBoxReward, BoxRewardItemCountArray) == 0x0018);
static_assert(offsetof(FSBUILogicInitParameterFishingResult, FishAlias) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterFishingResult, BoxRewardItemAliasArray) == 0x0010);
static_assert(offsetof(FSBUILogicInitParameterFishingResult, BoxRewardItemCountArray) == 0x0020);
static_assert(offsetof(FSBUILogicInitParameterGuideRewardListData, ItemAlias) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterGuideRewardList, ItemArray) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterGuideUnlockMode, TitleKey) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterGuideVideoData, TitleKey) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterGuideVideoData, DescKey) == 0x0010);
static_assert(offsetof(FSBUILogicInitParameterGuideVideoData, MovieBKAssetPath) == 0x0020);
static_assert(offsetof(FSBUILogicInitParameterGuideVideoData, ImageAssetPath) == 0x0030);
static_assert(offsetof(FSBUILogicInitParameterGuideVideo, DataArray) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterHairSalon, BackUIType) == 0x0000);
static_assert(offsetof(FSBHairSalonColorData, VarAssetPathArray) == 0x0008);
static_assert(offsetof(FSBUILogicInitParameterHUDEnhanceResult, ItemAlais) == 0x0000);
static_assert(offsetof(FSBUILogicHUDItemEquipData, ItemAlias) == 0x0000);
static_assert(offsetof(FSBUILogicHUDItemEquipData, icon) == 0x0008);
static_assert(offsetof(FSBUILogicHUDItemEquipData, Name) == 0x0018);
static_assert(offsetof(FSBUILogicHUDItemEquipData, DescFunction) == 0x0030);
static_assert(offsetof(FSBUILogicHUDItemEquipData, ItemCategory) == 0x0054);
static_assert(offsetof(FSBUILogicHUDTPSBulletData, ItemAlias) == 0x0000);
static_assert(offsetof(FSBUILogicHUDTPSBulletData, icon) == 0x0008);
static_assert(offsetof(FSBUILogicHUDTPSBulletData, AcquisionSkill) == 0x0018);
static_assert(offsetof(FSBUILogicHUDTPSBulletData, ItemName) == 0x0040);
static_assert(offsetof(FSBUILogicInitParameterHUDTPSNikkeMode, StageAlias) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterLobby, LobbyType) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterMailBox, MailBoxEnvSpawnAlias) == 0x0000);
static_assert(offsetof(FSBUIMessageBoxListMessageData, title) == 0x0000);
static_assert(offsetof(FSBUIMessageBoxListMessageData, Description) == 0x0010);
static_assert(offsetof(FSBUIMessageBoxListMessageData, TitleText) == 0x0020);
static_assert(offsetof(FSBUIMessageBoxListMessageData, DescriptionText) == 0x0038);
static_assert(offsetof(FSBUIMessageBoxListMessageData, ButtonType) == 0x0050);
static_assert(offsetof(FSBUIMessageBoxListMessageData, AppearanceType) == 0x0051);
static_assert(offsetof(FSBUILogicInitParameterMessageBoxList, DataArray) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterMessageBoxList, BackgroundType) == 0x0010);
static_assert(offsetof(FSBUILogicInitParameterNextChapterPopup, NextCampSpawnAlias) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterNextChapterPopup, NextSpawnLocation) == 0x0008);
static_assert(offsetof(FSBUILogicInitParameterNextChapterPopup, NextSpawnRotation) == 0x0014);
static_assert(offsetof(FSBUILogicInitParameterNikkeLostArticlePopup, NikkeLostArticleAlias) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterNikkeMinigameResult, NikkeStageAlias) == 0x0008);
static_assert(offsetof(FSBUILogicInitParameterNikkeMinigameResult, LostArticleAlias) == 0x0018);
static_assert(offsetof(FSBUILogicInitParameterRecordPopup, AlbumAlias) == 0x0000);
static_assert(offsetof(FSBUILogicInitParameterRequestBoard, RequestBoardType) == 0x0000);
static_assert(offsetof(FSBUILogicTestTextCorrectTextInfo, StringTableType) == 0x0000);
static_assert(offsetof(FSBUILogicTestTextCorrectTextInfo, StringKey) == 0x0008);
static_assert(offsetof(FSBUILogicTestTextCorrectTextInfo, DisplayStringKey) == 0x0018);
static_assert(offsetof(FSBBossChallengeRewardItemData, State) == 0x0000);
static_assert(offsetof(FSBBossChallengeRewardItemData, IconAssetPath) == 0x0008);
static_assert(offsetof(FSBHairSalonItemData, ShopItemAlias) == 0x0004);
static_assert(offsetof(FSBHairSalonItemData, ItemAlias) == 0x000C);
static_assert(offsetof(FSBHairSalonItemData, ItemName) == 0x0018);
static_assert(offsetof(FSBHairSalonItemData, IconAssetPath) == 0x0030);
static_assert(offsetof(FSBHairSalonItemData, RedDotState) == 0x0042);
static_assert(offsetof(FSBNightOperationItemData, OperationAlias) == 0x0000);
static_assert(offsetof(FSBNightOperationItemData, IconAssetPath) == 0x0008);
static_assert(offsetof(FSBAlbumItemData, ItemAlias) == 0x0000);
static_assert(offsetof(FSBAlbumItemData, AlbumType) == 0x0008);
static_assert(offsetof(FSBAlbumItemData, ImagePath) == 0x0010);
static_assert(offsetof(FSBAlbumItemData, RedDotState) == 0x0022);
static_assert(offsetof(FSBShopItemData, ItemName) == 0x0000);
static_assert(offsetof(FSBShopItemData, Rarity) == 0x0018);
static_assert(offsetof(FSBShopItemData, IconAssetPath) == 0x0020);
static_assert(offsetof(FSBShopItemData, RedDotState) == 0x0039);
static_assert(offsetof(FSBShopItemData, MoneyItemAlias1) == 0x003C);
static_assert(offsetof(FSBShopItemData, MoneyItemAlias2) == 0x0044);
static_assert(offsetof(FSBShopItemData, MoneyItemAlias3) == 0x004C);
static_assert(offsetof(FSBShopItemData, MoneyItemAlias4) == 0x0054);
static_assert(offsetof(FSBVibrationTemplate, VibrationSection) == 0x0020);
static_assert(offsetof(FSBVibrationTemplate, SectionData) == 0x0028);
static_assert(offsetof(FSBVibrationTemplate, StartFrame) == 0x0048);
static_assert(offsetof(FSBVibrationTemplate, EndFrame) == 0x004C);
static_assert(offsetof(FSBWebJobSchemaCouponUserInfo, user_id) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaCouponUserInfo, created_at) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaCouponUserInfo, updated_at) == 0x0020);
static_assert(offsetof(FSBWebJobSchemaCouponUserInfo, coupon_id) == 0x0038);
static_assert(offsetof(FSBWebJobSchemaCouponUserInfo, coupon_code) == 0x0048);
static_assert(offsetof(FSBWebJobSchemaCouponUserInfo, coupon_server) == 0x0058);
static_assert(offsetof(FSBWebJobSchemaCouponUserInfo, coupon_issuance_start_time) == 0x0070);
static_assert(offsetof(FSBWebJobSchemaCouponUserInfo, coupon_issuance_expiration_time) == 0x0080);
static_assert(offsetof(FSBWebJobSchemaCouponUserInfo, coupon_limit_time) == 0x0090);
static_assert(offsetof(FSBWebJobSchemaGetCoupon, coupon_id) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaGetCoupon, coupon_code) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaGetCoupon, coupon_server) == 0x0020);
static_assert(offsetof(FSBWebJobSchemaGetCoupon, user_id) == 0x0030);
static_assert(offsetof(FSBWebJobSchemaGetCoupon, Platform) == 0x0040);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, user_id) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, pos) == 0x0018);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, level_id) == 0x0028);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, zone_id) == 0x0038);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, Difficulty) == 0x0048);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, public_ip) == 0x0060);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, private_ip) == 0x0070);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, Tag) == 0x0080);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, newgame_create_time) == 0x00A0);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, activity) == 0x00B0);
static_assert(offsetof(FSBWebJobSchemaPlayerEventHeader, activity_list) == 0x00C0);
static_assert(offsetof(FSBWebJobSchemaSaveLoadEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaSaveLoadEvent, saveload_type) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaActivityEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaActivityEvent, activity_id) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaActivityEvent, activity_state) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaChangeSPExpEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaDamageEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaDamageEvent, attacker_alias) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaDamageEvent, defender_alias) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaDamageEvent, skill_alias) == 0x0108);
static_assert(offsetof(FSBWebJobSchemaKillEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaKillEvent, character_alias) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaBuyItemEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaBuyItemEvent, item_alias) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaBuyItemEvent, item_category) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaSellFishEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaSellFishEvent, fish_alias) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaFishingResultEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaFishingResultEvent, fish_alias) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaFishingFightingEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaFishingFightingEvent, fish_alias) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaFishingCastingEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaFishingCastingEvent, lure_alias) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaSpawnItemEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaSpawnItemEvent, spawn_type) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaSpawnItemEvent, item_alias) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaSpawnItemEvent, zone_env_spawn_alias) == 0x0110);
static_assert(offsetof(FSBWebJobSchemaSpawnItemEvent, zone_env_alias) == 0x0120);
static_assert(offsetof(FSBWebJobSchemaSpawnItemEvent, npc_alias) == 0x0130);
static_assert(offsetof(FSBWebJobSchemaSpawnItemEvent, event_spawn_alias) == 0x0140);
static_assert(offsetof(FSBWebJobSchemaSpawnItemEvent, zone_event_actor_table_alias) == 0x0150);
static_assert(offsetof(FSBWebJobSchemaSpawnItemEvent, zone_event_actor_name) == 0x0160);
static_assert(offsetof(FSBWebJobSchemaSpawnItemEvent, fish_alias) == 0x0170);
static_assert(offsetof(FSBWebJobSchemaNanoSuitEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaNanoSuitEvent, item_id) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaNanoSuitEvent, item_category) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaQuestEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaQuestEvent, quest_id) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaQuestEvent, quest_type) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaQuestEvent, quest_state) == 0x0108);
static_assert(offsetof(FSBWebJobSchemaAcquisitionSkillEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaAcquisitionSkillEvent, skill_id) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaAcquisitionSkillEvent, skill_category) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaLevelUpEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaLevelUpEvent, level_type) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaLevelUpEvent, item_id) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaGainCoreEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaGainCoreEvent, item_id) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaGainCoreEvent, zone_env_spawn_id) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaGainCoreEvent, zone_env_id) == 0x0108);
static_assert(offsetof(FSBWebJobSchemaItemAmount, item_id) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaSkillAmount, skill_id) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaDefeatEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaDefeatEvent, defeat_type) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaDefeatEvent, defeat_id) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaDefeatEvent, item_use_count) == 0x0140);
static_assert(offsetof(FSBWebJobSchemaDefeatEvent, damage_by_skill) == 0x0150);
static_assert(offsetof(FSBWebJobSchemaDefeatEvent, damaged_by_skill) == 0x0160);
static_assert(offsetof(FSBWebJobSchemaDefeatEvent, skill_count) == 0x0170);
static_assert(offsetof(FSBWebJobSchemaDefeatEvent, equip_exo_spine_list) == 0x0180);
static_assert(offsetof(FSBWebJobSchemaDefeatEvent, equip_gear_list) == 0x0190);
static_assert(offsetof(FSBWebJobSchemaDefeatEvent, equip_nano_suit) == 0x01A0);
static_assert(offsetof(FSBWebJobSchemaAcquireItemEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaAcquireItemEvent, item_id) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaAcquireItemEvent, item_category) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaConsumeItemEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaConsumeItemEvent, boss_id) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaConsumeItemEvent, item_id) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaPlayerDeadEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaPlayerDeadEvent, boss_id) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaPlayerDeadEvent, entity_type) == 0x00F8);
static_assert(offsetof(FSBWebJobSchemaChangeCoinEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaChangeGoldEvent, event_type) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaGetPublicIP, PublicIP) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaUpdateCognitoStatus, ResultCode) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaUpdateCognitoStatus, PlayerName) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaUpdateCognitoStatus, IdToken) == 0x0020);
static_assert(offsetof(FSBWebJobSchemaUpdateCognitoStatus, CognitoStatus) == 0x0030);
static_assert(offsetof(FSBWebJobSchemaUpdateCognitoStatus, ErrorMessage) == 0x0040);
static_assert(offsetof(FSBWebJobSchemaSignInCognito, ResultCode) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaSignInCognito, PlayerName) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaSignInCognito, IdToken) == 0x0020);
static_assert(offsetof(FSBWebJobSchemaSignInCognito, ErrorMessage) == 0x0030);
static_assert(offsetof(FSBWebJobSchemaSendHello, Event) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaSendHello, Output) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaSendHello, Timestamp) == 0x0020);
static_assert(offsetof(FSBWebJobSchemaUpdateDummyState, DummyState) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaGetNetCommand, NetCommand) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaDefeatBoss, PlayerName) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaDefeatBoss, Bossname) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaDefeatBoss, Result) == 0x0028);
static_assert(offsetof(FSBWebJobSchemaMatchResult, PlayerName) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaMatchResult, MatchResult) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaMatchStop, Status) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaMatchStatus, IpAddress) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaMatchStatus, PlayerSessionId) == 0x0018);
static_assert(offsetof(FSBWebJobSchemaMatchStatus, Status) == 0x0028);
static_assert(offsetof(FSBWebJobSchemaMatchRequest, TicketId) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaJiraCommon, Self) == 0x0008);
static_assert(offsetof(FSBWebJobSchemaJiraCommon, Key) == 0x0018);
static_assert(offsetof(FSBWebJobSchemaJiraIssuePriority, Self) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaJiraIssuePriority, iconUrl) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaJiraIssuePriority, Name) == 0x0020);
static_assert(offsetof(FSBWebJobSchemaJiraIssuePriority, ID) == 0x0030);
static_assert(offsetof(FSBWebJobSchemaJiraIssueCreator, Name) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaJiraIssueCreator, DisplayName) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaJiraIssueCommentAuthor, Name) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaJiraIssueCommentAuthor, Key) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaJiraIssueCommentAuthor, DisplayName) == 0x0020);
static_assert(offsetof(FSBWebJobSchemaJiraIssueCommentInfo, Self) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaJiraIssueCommentInfo, ID) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaJiraIssueCommentInfo, author) == 0x0020);
static_assert(offsetof(FSBWebJobSchemaJiraIssueCommentInfo, Body) == 0x0050);
static_assert(offsetof(FSBWebJobSchemaJiraIssueCommentInfo, updateAuthor) == 0x0060);
static_assert(offsetof(FSBWebJobSchemaJiraIssueComment, comments) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaJiraIssueVote, Self) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaJiraIssueAssignee, Name) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaJiraIssueAssignee, DisplayName) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaJiraIssueStatus, Name) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaJiraIssueStatus, ID) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, Description) == 0x0000);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, Priority) == 0x0010);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, customfield) == 0x0050);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, summary) == 0x0060);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, creator) == 0x0070);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, comment) == 0x0090);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, votes) == 0x00B0);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, created) == 0x00C8);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, labels) == 0x00D8);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, assignee) == 0x00E8);
static_assert(offsetof(FSBWebJobSchemaJiraIssueFields, Status) == 0x0108);
static_assert(offsetof(FSBWebJobSchemaJiraIssue, Fields) == 0x0028);
static_assert(offsetof(FSBToolDataDescriptionInfo, LevelSequence) == 0x0000);
static_assert(offsetof(FSBToolDataDescriptionInfo, TriggerDescription) == 0x0028);
