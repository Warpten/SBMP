
/********************************************************
*                                                       *
*   Package generated using UEDumper by Spuckwaffel.    *
*                                                       *
********************************************************/

#pragma once
/// dependency: BasicType
/// dependency: AudioExtensions
/// dependency: AudioPlatformConfiguration
/// dependency: Chaos
/// dependency: ClothingSystemRuntimeInterface
/// dependency: CoreUObject
/// dependency: DeveloperSettings
/// dependency: InputCore
/// dependency: PacketHandler
/// dependency: PhysicsCore
/// dependency: PropertyAccess
/// dependency: PropertyPath
/// dependency: Slate
/// dependency: SlateCore
/// dependency: StaticMeshDescription

#pragma pack(push, 0x1)

/// Enum /Script/AudioMixer.EMusicalNoteName
/// Size: 0x01 (1 bytes)
enum class EMusicalNoteName : uint8_t
{
	C                                                                                = 0,
	Db                                                                               = 1,
	D                                                                                = 2,
	Eb                                                                               = 3,
	E                                                                                = 4,
	F                                                                                = 5,
	Gb                                                                               = 6,
	G                                                                                = 7,
	Ab                                                                               = 8,
	A                                                                                = 9,
	Bb                                                                               = 10,
	B                                                                                = 11
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsChannelLinkMode
/// Size: 0x01 (1 bytes)
enum class ESubmixEffectDynamicsChannelLinkMode : uint8_t
{
	Disabled                                                                         = 0,
	Average                                                                          = 1,
	Peak                                                                             = 2,
	Count                                                                            = 3
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsPeakMode
/// Size: 0x01 (1 bytes)
enum class ESubmixEffectDynamicsPeakMode : uint8_t
{
	MeanSquared                                                                      = 0,
	RootMeanSquared                                                                  = 1,
	Peak                                                                             = 2,
	Count                                                                            = 3
};

/// Enum /Script/AudioMixer.ESubmixEffectDynamicsProcessorType
/// Size: 0x01 (1 bytes)
enum class ESubmixEffectDynamicsProcessorType : uint8_t
{
	Compressor                                                                       = 0,
	Limiter                                                                          = 1,
	Expander                                                                         = 2,
	Gate                                                                             = 3,
	Count                                                                            = 4
};

/// Enum /Script/Engine.ETextGender
/// Size: 0x01 (1 bytes)
enum class ETextGender : uint8_t
{
	Masculine                                                                        = 0,
	Feminine                                                                         = 1,
	Neuter                                                                           = 2
};

/// Enum /Script/Engine.EFormatArgumentType
/// Size: 0x01 (1 bytes)
enum class EFormatArgumentType : uint8_t
{
	Int                                                                              = 0,
	UInt                                                                             = 1,
	Float                                                                            = 2,
	Double                                                                           = 3,
	Text                                                                             = 4,
	Gender                                                                           = 5
};

/// Enum /Script/Engine.EEndPlayReason
/// Size: 0x01 (1 bytes)
enum class EEndPlayReason : uint8_t
{
	Destroyed                                                                        = 0,
	LevelTransition                                                                  = 1,
	EndPlayInEditor                                                                  = 2,
	RemovedFromWorld                                                                 = 3,
	Quit                                                                             = 4
};

/// Enum /Script/Engine.ETickingGroup
/// Size: 0x01 (1 bytes)
enum class ETickingGroup : uint8_t
{
	TG_PrePhysics                                                                    = 0,
	TG_StartPhysics                                                                  = 1,
	TG_DuringPhysics                                                                 = 2,
	TG_EndPhysics                                                                    = 3,
	TG_PostPhysics                                                                   = 4,
	TG_PostUpdateWork                                                                = 5,
	TG_LastDemotable                                                                 = 6,
	TG_NewlySpawned                                                                  = 7
};

/// Enum /Script/Engine.EComponentCreationMethod
/// Size: 0x01 (1 bytes)
enum class EComponentCreationMethod : uint8_t
{
	Native                                                                           = 0,
	SimpleConstructionScript                                                         = 1,
	UserConstructionScript                                                           = 2,
	Instance                                                                         = 3
};

/// Enum /Script/Engine.ETemperatureSeverityType
/// Size: 0x01 (1 bytes)
enum class ETemperatureSeverityType : uint8_t
{
	Unknown                                                                          = 0,
	Good                                                                             = 1,
	Bad                                                                              = 2,
	Serious                                                                          = 3,
	Critical                                                                         = 4,
	NumSeverities                                                                    = 5
};

/// Enum /Script/Engine.EQuartzCommandQuantization
/// Size: 0x01 (1 bytes)
enum class EQuartzCommandQuantization : uint8_t
{
	Bar                                                                              = 0,
	Beat                                                                             = 1,
	ThirtySecondNote                                                                 = 2,
	SixteenthNote                                                                    = 3,
	EighthNote                                                                       = 4,
	QuarterNote                                                                      = 5,
	HalfNote                                                                         = 6,
	WholeNote                                                                        = 7,
	DottedSixteenthNote                                                              = 8,
	DottedEighthNote                                                                 = 9,
	DottedQuarterNote                                                                = 10,
	DottedHalfNote                                                                   = 11,
	DottedWholeNote                                                                  = 12,
	SixteenthNoteTriplet                                                             = 13,
	EighthNoteTriplet                                                                = 14,
	QuarterNoteTriplet                                                               = 15,
	HalfNoteTriplet                                                                  = 16,
	Tick                                                                             = 17,
	Count                                                                            = 18
};

/// Enum /Script/Engine.EQuartzCommandDelegateSubType
/// Size: 0x01 (1 bytes)
enum class EQuartzCommandDelegateSubType : uint8_t
{
	CommandOnFailedToQueue                                                           = 0,
	CommandOnQueued                                                                  = 1,
	CommandOnCanceled                                                                = 2,
	CommandOnAboutToStart                                                            = 3,
	CommandOnStarted                                                                 = 4,
	Count                                                                            = 5
};

/// Enum /Script/Engine.EAudioComponentPlayState
/// Size: 0x01 (1 bytes)
enum class EAudioComponentPlayState : uint8_t
{
	Playing                                                                          = 0,
	Stopped                                                                          = 1,
	Paused                                                                           = 2,
	FadingIn                                                                         = 3,
	FadingOut                                                                        = 4,
	Count                                                                            = 5
};

/// Enum /Script/Engine.EPlaneConstraintAxisSetting
/// Size: 0x01 (1 bytes)
enum class EPlaneConstraintAxisSetting : uint8_t
{
	Custom                                                                           = 0,
	X                                                                                = 1,
	Y                                                                                = 2,
	Z                                                                                = 3,
	UseGlobalPhysicsSetting                                                          = 4
};

/// Enum /Script/Engine.EInterpToBehaviourType
/// Size: 0x01 (1 bytes)
enum class EInterpToBehaviourType : uint8_t
{
	OneShot                                                                          = 0,
	OneShot_Reverse                                                                  = 1,
	Loop_Reset                                                                       = 2,
	PingPong                                                                         = 3
};

/// Enum /Script/Engine.ETeleportType
/// Size: 0x01 (1 bytes)
enum class ETeleportType : uint8_t
{
	None                                                                             = 0,
	TeleportPhysics                                                                  = 1,
	ResetPhysics                                                                     = 2
};

/// Enum /Script/Engine.EPlatformInterfaceDataType
/// Size: 0x01 (1 bytes)
enum class EPlatformInterfaceDataType : uint8_t
{
	PIDT_None                                                                        = 0,
	PIDT_Int                                                                         = 1,
	PIDT_Float                                                                       = 2,
	PIDT_String                                                                      = 3,
	PIDT_Object                                                                      = 4,
	PIDT_Custom                                                                      = 5
};

/// Enum /Script/Engine.EMovementMode
/// Size: 0x01 (1 bytes)
enum class EMovementMode : uint8_t
{
	MOVE_None                                                                        = 0,
	MOVE_Walking                                                                     = 1,
	MOVE_NavWalking                                                                  = 2,
	MOVE_Falling                                                                     = 3,
	MOVE_Swimming                                                                    = 4,
	MOVE_Flying                                                                      = 5,
	MOVE_Custom                                                                      = 6
};

/// Enum /Script/Engine.ENetworkFailure
/// Size: 0x01 (1 bytes)
enum class ENetworkFailure : uint8_t
{
	NetDriverAlreadyExists                                                           = 0,
	NetDriverCreateFailure                                                           = 1,
	NetDriverListenFailure                                                           = 2,
	ConnectionLost                                                                   = 3,
	ConnectionTimeout                                                                = 4,
	FailureReceived                                                                  = 5,
	OutdatedClient                                                                   = 6,
	OutdatedServer                                                                   = 7,
	PendingConnectionFailure                                                         = 8,
	NetGuidMismatch                                                                  = 9,
	NetChecksumMismatch                                                              = 10
};

/// Enum /Script/Engine.ETravelFailure
/// Size: 0x01 (1 bytes)
enum class ETravelFailure : uint8_t
{
	NoLevel                                                                          = 0,
	LoadMapFailure                                                                   = 1,
	InvalidURL                                                                       = 2,
	PackageMissing                                                                   = 3,
	PackageVersion                                                                   = 4,
	NoDownload                                                                       = 5,
	TravelFailure                                                                    = 6,
	CheatCommands                                                                    = 7,
	PendingNetGameCreateFailure                                                      = 8,
	CloudSaveFailure                                                                 = 9,
	ServerTravelFailure                                                              = 10,
	ClientTravelFailure                                                              = 11
};

/// Enum /Script/Engine.EScreenOrientation
/// Size: 0x01 (1 bytes)
enum class EScreenOrientation : uint8_t
{
	Unknown                                                                          = 0,
	Portrait                                                                         = 1,
	PortraitUpsideDown                                                               = 2,
	LandscapeLeft                                                                    = 3,
	LandscapeRight                                                                   = 4,
	FaceUp                                                                           = 5,
	FaceDown                                                                         = 6
};

/// Enum /Script/Engine.EApplicationState
/// Size: 0x01 (1 bytes)
enum class EApplicationState : uint8_t
{
	Unknown                                                                          = 0,
	Inactive                                                                         = 1,
	Background                                                                       = 2,
	Active                                                                           = 3
};

/// Enum /Script/Engine.EObjectTypeQuery
/// Size: 0x01 (1 bytes)
enum class EObjectTypeQuery : uint8_t
{
	ObjectTypeQuery1                                                                 = 0,
	ObjectTypeQuery2                                                                 = 1,
	ObjectTypeQuery3                                                                 = 2,
	ObjectTypeQuery4                                                                 = 3,
	ObjectTypeQuery5                                                                 = 4,
	ObjectTypeQuery6                                                                 = 5,
	ObjectTypeQuery7                                                                 = 6,
	ObjectTypeQuery8                                                                 = 7,
	ObjectTypeQuery9                                                                 = 8,
	ObjectTypeQuery10                                                                = 9,
	ObjectTypeQuery11                                                                = 10,
	ObjectTypeQuery12                                                                = 11,
	ObjectTypeQuery13                                                                = 12,
	ObjectTypeQuery14                                                                = 13,
	ObjectTypeQuery15                                                                = 14,
	ObjectTypeQuery16                                                                = 15,
	ObjectTypeQuery17                                                                = 16,
	ObjectTypeQuery18                                                                = 17,
	ObjectTypeQuery19                                                                = 18,
	ObjectTypeQuery20                                                                = 19,
	ObjectTypeQuery21                                                                = 20,
	ObjectTypeQuery22                                                                = 21,
	ObjectTypeQuery23                                                                = 22,
	ObjectTypeQuery24                                                                = 23,
	ObjectTypeQuery25                                                                = 24,
	ObjectTypeQuery26                                                                = 25,
	ObjectTypeQuery27                                                                = 26,
	ObjectTypeQuery28                                                                = 27,
	ObjectTypeQuery29                                                                = 28,
	ObjectTypeQuery30                                                                = 29,
	ObjectTypeQuery31                                                                = 30,
	ObjectTypeQuery32                                                                = 31
};

/// Enum /Script/Engine.EDrawDebugTrace
/// Size: 0x01 (1 bytes)
enum class EDrawDebugTrace : uint8_t
{
	None                                                                             = 0,
	ForOneFrame                                                                      = 1,
	ForDuration                                                                      = 2,
	Persistent                                                                       = 3
};

/// Enum /Script/Engine.ETraceTypeQuery
/// Size: 0x01 (1 bytes)
enum class ETraceTypeQuery : uint8_t
{
	TraceTypeQuery1                                                                  = 0,
	TraceTypeQuery2                                                                  = 1,
	TraceTypeQuery3                                                                  = 2,
	TraceTypeQuery4                                                                  = 3,
	TraceTypeQuery5                                                                  = 4,
	TraceTypeQuery6                                                                  = 5,
	TraceTypeQuery7                                                                  = 6,
	TraceTypeQuery8                                                                  = 7,
	TraceTypeQuery9                                                                  = 8,
	TraceTypeQuery10                                                                 = 9,
	TraceTypeQuery11                                                                 = 10,
	TraceTypeQuery12                                                                 = 11,
	TraceTypeQuery13                                                                 = 12,
	TraceTypeQuery14                                                                 = 13,
	TraceTypeQuery15                                                                 = 14,
	TraceTypeQuery16                                                                 = 15,
	TraceTypeQuery17                                                                 = 16,
	TraceTypeQuery18                                                                 = 17,
	TraceTypeQuery19                                                                 = 18,
	TraceTypeQuery20                                                                 = 19,
	TraceTypeQuery21                                                                 = 20,
	TraceTypeQuery22                                                                 = 21,
	TraceTypeQuery23                                                                 = 22,
	TraceTypeQuery24                                                                 = 23,
	TraceTypeQuery25                                                                 = 24,
	TraceTypeQuery26                                                                 = 25,
	TraceTypeQuery27                                                                 = 26,
	TraceTypeQuery28                                                                 = 27,
	TraceTypeQuery29                                                                 = 28,
	TraceTypeQuery30                                                                 = 29,
	TraceTypeQuery31                                                                 = 30,
	TraceTypeQuery32                                                                 = 31
};

/// Enum /Script/Engine.EMoveComponentAction
/// Size: 0x01 (1 bytes)
enum class EMoveComponentAction : uint8_t
{
	Move                                                                             = 0,
	Stop                                                                             = 1,
	Return                                                                           = 2
};

/// Enum /Script/Engine.EQuitPreference
/// Size: 0x01 (1 bytes)
enum class EQuitPreference : uint8_t
{
	Quit                                                                             = 0,
	Background                                                                       = 1
};

/// Enum /Script/Engine.ERelativeTransformSpace
/// Size: 0x01 (1 bytes)
enum class ERelativeTransformSpace : uint8_t
{
	RTS_World                                                                        = 0,
	RTS_Actor                                                                        = 1,
	RTS_Component                                                                    = 2,
	RTS_ParentBoneSpace                                                              = 3
};

/// Enum /Script/Engine.EAttachLocation
/// Size: 0x01 (1 bytes)
enum class EAttachLocation : uint8_t
{
	KeepRelativeOffset                                                               = 0,
	KeepWorldPosition                                                                = 1,
	SnapToTarget                                                                     = 2,
	SnapToTargetIncludingScale                                                       = 3
};

/// Enum /Script/Engine.EAttachmentRule
/// Size: 0x01 (1 bytes)
enum class EAttachmentRule : uint8_t
{
	KeepRelative                                                                     = 0,
	KeepWorld                                                                        = 1,
	SnapToTarget                                                                     = 2
};

/// Enum /Script/Engine.EDetachmentRule
/// Size: 0x01 (1 bytes)
enum class EDetachmentRule : uint8_t
{
	KeepRelative                                                                     = 0,
	KeepWorld                                                                        = 1
};

/// Enum /Script/Engine.EComponentMobility
/// Size: 0x01 (1 bytes)
enum class EComponentMobility : uint8_t
{
	Static                                                                           = 0,
	Stationary                                                                       = 1,
	Movable                                                                          = 2
};

/// Enum /Script/Engine.EDetailMode
/// Size: 0x01 (1 bytes)
enum class EDetailMode : uint8_t
{
	DM_Low                                                                           = 0,
	DM_Medium                                                                        = 1,
	DM_High                                                                          = 2
};

/// Enum /Script/Engine.EMouseLockMode
/// Size: 0x01 (1 bytes)
enum class EMouseLockMode : uint8_t
{
	DoNotLock                                                                        = 0,
	LockOnCapture                                                                    = 1,
	LockAlways                                                                       = 2,
	LockInFullscreen                                                                 = 3
};

/// Enum /Script/Engine.EWindowTitleBarMode
/// Size: 0x01 (1 bytes)
enum class EWindowTitleBarMode : uint8_t
{
	Overlay                                                                          = 0,
	VerticalBox                                                                      = 1
};

/// Enum /Script/Engine.ENetRole
/// Size: 0x01 (1 bytes)
enum class ENetRole : uint8_t
{
	ROLE_None                                                                        = 0,
	ROLE_SimulatedProxy                                                              = 1,
	ROLE_AutonomousProxy                                                             = 2,
	ROLE_Authority                                                                   = 3
};

/// Enum /Script/Engine.ENetDormancy
/// Size: 0x01 (1 bytes)
enum class ENetDormancy : uint8_t
{
	DORM_Never                                                                       = 0,
	DORM_Awake                                                                       = 1,
	DORM_DormantAll                                                                  = 2,
	DORM_DormantPartial                                                              = 3,
	DORM_Initial                                                                     = 4
};

/// Enum /Script/Engine.EAutoReceiveInput
/// Size: 0x01 (1 bytes)
enum class EAutoReceiveInput : uint8_t
{
	Disabled                                                                         = 0,
	Player0                                                                          = 1,
	Player1                                                                          = 2,
	Player2                                                                          = 3,
	Player3                                                                          = 4,
	Player4                                                                          = 5,
	Player5                                                                          = 6,
	Player6                                                                          = 7,
	Player7                                                                          = 8
};

/// Enum /Script/Engine.ESpawnActorCollisionHandlingMethod
/// Size: 0x01 (1 bytes)
enum class ESpawnActorCollisionHandlingMethod : uint8_t
{
	Undefined                                                                        = 0,
	AlwaysSpawn                                                                      = 1,
	AdjustIfPossibleButAlwaysSpawn                                                   = 2,
	AdjustIfPossibleButDontSpawnIfColliding                                          = 3,
	DontSpawnIfColliding                                                             = 4
};

/// Enum /Script/Engine.ERotatorQuantization
/// Size: 0x01 (1 bytes)
enum class ERotatorQuantization : uint8_t
{
	ByteComponents                                                                   = 0,
	ShortComponents                                                                  = 1
};

/// Enum /Script/Engine.EVectorQuantization
/// Size: 0x01 (1 bytes)
enum class EVectorQuantization : uint8_t
{
	RoundWholeNumber                                                                 = 0,
	RoundOneDecimal                                                                  = 1,
	RoundTwoDecimals                                                                 = 2
};

/// Enum /Script/Engine.EActorUpdateOverlapsMethod
/// Size: 0x01 (1 bytes)
enum class EActorUpdateOverlapsMethod : uint8_t
{
	UseConfigDefault                                                                 = 0,
	AlwaysUpdate                                                                     = 1,
	OnlyUpdateMovable                                                                = 2,
	NeverUpdate                                                                      = 3
};

/// Enum /Script/Engine.EAspectRatioAxisConstraint
/// Size: 0x01 (1 bytes)
enum class EAspectRatioAxisConstraint : uint8_t
{
	AspectRatio_MaintainYFOV                                                         = 0,
	AspectRatio_MaintainXFOV                                                         = 1,
	AspectRatio_MajorAxisFOV                                                         = 2
};

/// Enum /Script/Engine.EAlphaBlendOption
/// Size: 0x01 (1 bytes)
enum class EAlphaBlendOption : uint8_t
{
	Linear                                                                           = 0,
	Cubic                                                                            = 1,
	HermiteCubic                                                                     = 2,
	Sinusoidal                                                                       = 3,
	QuadraticInOut                                                                   = 4,
	CubicInOut                                                                       = 5,
	QuarticInOut                                                                     = 6,
	QuinticInOut                                                                     = 7,
	CircularIn                                                                       = 8,
	CircularOut                                                                      = 9,
	CircularInOut                                                                    = 10,
	ExpIn                                                                            = 11,
	ExpOut                                                                           = 12,
	ExpInOut                                                                         = 13,
	Custom                                                                           = 14
};

/// Enum /Script/Engine.EAnimSyncGroupScope
/// Size: 0x01 (1 bytes)
enum class EAnimSyncGroupScope : uint8_t
{
	Local                                                                            = 0,
	Component                                                                        = 1
};

/// Enum /Script/Engine.EAnimGroupRole
/// Size: 0x01 (1 bytes)
enum class EAnimGroupRole : uint8_t
{
	CanBeLeader                                                                      = 0,
	AlwaysFollower                                                                   = 1,
	AlwaysLeader                                                                     = 2,
	TransitionLeader                                                                 = 3,
	TransitionFollower                                                               = 4
};

/// Enum /Script/Engine.EPreviewAnimationBlueprintApplicationMethod
/// Size: 0x01 (1 bytes)
enum class EPreviewAnimationBlueprintApplicationMethod : uint8_t
{
	LinkedLayers                                                                     = 0,
	LinkedAnimGraph                                                                  = 1
};

/// Enum /Script/Engine.AnimationKeyFormat
/// Size: 0x01 (1 bytes)
enum class AnimationKeyFormat : uint8_t
{
	AKF_ConstantKeyLerp                                                              = 0,
	AKF_VariableKeyLerp                                                              = 1,
	AKF_PerTrackCompression                                                          = 2
};

/// Enum /Script/Engine.ERawCurveTrackTypes
/// Size: 0x01 (1 bytes)
enum class ERawCurveTrackTypes : uint8_t
{
	RCT_Float                                                                        = 0,
	RCT_Vector                                                                       = 1,
	RCT_Transform                                                                    = 2
};

/// Enum /Script/Engine.EAnimAssetCurveFlags
/// Size: 0x01 (1 bytes)
enum class EAnimAssetCurveFlags : uint8_t
{
	AACF_NONE                                                                        = 0,
	AACF_DriveMorphTarget_DEPRECATED                                                 = 1,
	AACF_DriveAttribute_DEPRECATED                                                   = 2,
	AACF_Editable                                                                    = 4,
	AACF_DriveMaterial_DEPRECATED                                                    = 8,
	AACF_Metadata                                                                    = 16,
	AACF_DriveTrack                                                                  = 32,
	AACF_Disabled                                                                    = 64
};

/// Enum /Script/Engine.AnimationCompressionFormat
/// Size: 0x01 (1 bytes)
enum class AnimationCompressionFormat : uint8_t
{
	ACF_None                                                                         = 0,
	ACF_Float96NoW                                                                   = 1,
	ACF_Fixed48NoW                                                                   = 2,
	ACF_IntervalFixed32NoW                                                           = 3,
	ACF_Fixed32NoW                                                                   = 4,
	ACF_Float32NoW                                                                   = 5,
	ACF_Identity                                                                     = 6
};

/// Enum /Script/Engine.EAdditiveBasePoseType
/// Size: 0x01 (1 bytes)
enum class EAdditiveBasePoseType : uint8_t
{
	ABPT_None                                                                        = 0,
	ABPT_RefPose                                                                     = 1,
	ABPT_AnimScaled                                                                  = 2,
	ABPT_AnimFrame                                                                   = 3
};

/// Enum /Script/Engine.ERootMotionMode
/// Size: 0x01 (1 bytes)
enum class ERootMotionMode : uint8_t
{
	NoRootMotionExtraction                                                           = 0,
	IgnoreRootMotion                                                                 = 1,
	RootMotionFromEverything                                                         = 2,
	RootMotionFromMontagesOnly                                                       = 3
};

/// Enum /Script/Engine.ERootMotionRootLock
/// Size: 0x01 (1 bytes)
enum class ERootMotionRootLock : uint8_t
{
	RefPose                                                                          = 0,
	AnimFirstFrame                                                                   = 1,
	Zero                                                                             = 2
};

/// Enum /Script/Engine.EMontagePlayReturnType
/// Size: 0x01 (1 bytes)
enum class EMontagePlayReturnType : uint8_t
{
	MontageLength                                                                    = 0,
	Duration                                                                         = 1
};

/// Enum /Script/Engine.EDrawDebugItemType
/// Size: 0x01 (1 bytes)
enum class EDrawDebugItemType : uint8_t
{
	DirectionalArrow                                                                 = 0,
	Sphere                                                                           = 1,
	Line                                                                             = 2,
	OnScreenMessage                                                                  = 3,
	CoordinateSystem                                                                 = 4
};

/// Enum /Script/Engine.EAnimLinkMethod
/// Size: 0x01 (1 bytes)
enum class EAnimLinkMethod : uint8_t
{
	Absolute                                                                         = 0,
	Relative                                                                         = 1,
	Proportional                                                                     = 2
};

/// Enum /Script/Engine.EMontageSubStepResult
/// Size: 0x01 (1 bytes)
enum class EMontageSubStepResult : uint8_t
{
	Moved                                                                            = 0,
	NotMoved                                                                         = 1,
	InvalidSection                                                                   = 2,
	InvalidMontage                                                                   = 3
};

/// Enum /Script/Engine.EAnimNotifyEventType
/// Size: 0x01 (1 bytes)
enum class EAnimNotifyEventType : uint8_t
{
	Begin                                                                            = 0,
	End                                                                              = 1
};

/// Enum /Script/Engine.EInertializationSpace
/// Size: 0x01 (1 bytes)
enum class EInertializationSpace : uint8_t
{
	Default                                                                          = 0,
	WorldSpace                                                                       = 1,
	WorldRotation                                                                    = 2
};

/// Enum /Script/Engine.EInertializationBoneState
/// Size: 0x01 (1 bytes)
enum class EInertializationBoneState : uint8_t
{
	Invalid                                                                          = 0,
	Valid                                                                            = 1,
	Excluded                                                                         = 2
};

/// Enum /Script/Engine.EInertializationState
/// Size: 0x01 (1 bytes)
enum class EInertializationState : uint8_t
{
	Inactive                                                                         = 0,
	Pending                                                                          = 1,
	Active                                                                           = 2
};

/// Enum /Script/Engine.EEvaluatorMode
/// Size: 0x01 (1 bytes)
enum class EEvaluatorMode : uint8_t
{
	EM_Standard                                                                      = 0,
	EM_Freeze                                                                        = 1,
	EM_DelayedFreeze                                                                 = 2
};

/// Enum /Script/Engine.EEvaluatorDataSource
/// Size: 0x01 (1 bytes)
enum class EEvaluatorDataSource : uint8_t
{
	EDS_SourcePose                                                                   = 0,
	EDS_DestinationPose                                                              = 1
};

/// Enum /Script/Engine.EPostCopyOperation
/// Size: 0x01 (1 bytes)
enum class EPostCopyOperation : uint8_t
{
	None                                                                             = 0,
	LogicalNegateBool                                                                = 1
};

/// Enum /Script/Engine.EPinHidingMode
/// Size: 0x01 (1 bytes)
enum class EPinHidingMode : uint8_t
{
	NeverAsPin                                                                       = 0,
	PinHiddenByDefault                                                               = 1,
	PinShownByDefault                                                                = 2,
	AlwaysAsPin                                                                      = 3
};

/// Enum /Script/Engine.AnimPhysCollisionType
/// Size: 0x01 (1 bytes)
enum class AnimPhysCollisionType : uint8_t
{
	CoM                                                                              = 0,
	CustomSphere                                                                     = 1,
	InnerSphere                                                                      = 2,
	OuterSphere                                                                      = 3
};

/// Enum /Script/Engine.AnimPhysTwistAxis
/// Size: 0x01 (1 bytes)
enum class AnimPhysTwistAxis : uint8_t
{
	AxisX                                                                            = 0,
	AxisY                                                                            = 1,
	AxisZ                                                                            = 2
};

/// Enum /Script/Engine.ETypeAdvanceAnim
/// Size: 0x01 (1 bytes)
enum class ETypeAdvanceAnim : uint8_t
{
	ETAA_Default                                                                     = 0,
	ETAA_Finished                                                                    = 1,
	ETAA_Looped                                                                      = 2
};

/// Enum /Script/Engine.ETransitionLogicType
/// Size: 0x01 (1 bytes)
enum class ETransitionLogicType : uint8_t
{
	TLT_StandardBlend                                                                = 0,
	TLT_Inertialization                                                              = 1,
	TLT_Custom                                                                       = 2
};

/// Enum /Script/Engine.ETransitionBlendMode
/// Size: 0x01 (1 bytes)
enum class ETransitionBlendMode : uint8_t
{
	TBM_Linear                                                                       = 0,
	TBM_Cubic                                                                        = 1
};

/// Enum /Script/Engine.EComponentType
/// Size: 0x01 (1 bytes)
enum class EComponentType : uint8_t
{
	None                                                                             = 0,
	TranslationX                                                                     = 1,
	TranslationY                                                                     = 2,
	TranslationZ                                                                     = 3,
	RotationX                                                                        = 4,
	RotationY                                                                        = 5,
	RotationZ                                                                        = 6,
	Scale                                                                            = 7,
	ScaleX                                                                           = 8,
	ScaleY                                                                           = 9,
	ScaleZ                                                                           = 10
};

/// Enum /Script/Engine.EAxisOption
/// Size: 0x01 (1 bytes)
enum class EAxisOption : uint8_t
{
	X                                                                                = 0,
	Y                                                                                = 1,
	Z                                                                                = 2,
	X_Neg                                                                            = 3,
	Y_Neg                                                                            = 4,
	Z_Neg                                                                            = 5,
	Custom                                                                           = 6
};

/// Enum /Script/Engine.EAnimInterpolationType
/// Size: 0x01 (1 bytes)
enum class EAnimInterpolationType : uint8_t
{
	Linear                                                                           = 0,
	Step                                                                             = 1
};

/// Enum /Script/Engine.ECurveBlendOption
/// Size: 0x01 (1 bytes)
enum class ECurveBlendOption : uint8_t
{
	Override                                                                         = 0,
	DoNotOverride                                                                    = 1,
	NormalizeByWeight                                                                = 2,
	BlendByWeight                                                                    = 3,
	UseBasePose                                                                      = 4,
	UseMaxValue                                                                      = 5,
	UseMinValue                                                                      = 6
};

/// Enum /Script/Engine.EAdditiveAnimationType
/// Size: 0x01 (1 bytes)
enum class EAdditiveAnimationType : uint8_t
{
	AAT_None                                                                         = 0,
	AAT_LocalSpaceBase                                                               = 1,
	AAT_RotationOffsetMeshSpace                                                      = 2
};

/// Enum /Script/Engine.ENotifyFilterType
/// Size: 0x01 (1 bytes)
enum class ENotifyFilterType : uint8_t
{
	NoFiltering                                                                      = 0,
	LOD                                                                              = 1
};

/// Enum /Script/Engine.EMontageNotifyTickType
/// Size: 0x01 (1 bytes)
enum class EMontageNotifyTickType : uint8_t
{
	Queued                                                                           = 0,
	BranchingPoint                                                                   = 1
};

/// Enum /Script/Engine.EBoneRotationSource
/// Size: 0x01 (1 bytes)
enum class EBoneRotationSource : uint8_t
{
	BRS_KeepComponentSpaceRotation                                                   = 0,
	BRS_KeepLocalSpaceRotation                                                       = 1,
	BRS_CopyFromTarget                                                               = 2
};

/// Enum /Script/Engine.EBoneControlSpace
/// Size: 0x01 (1 bytes)
enum class EBoneControlSpace : uint8_t
{
	BCS_WorldSpace                                                                   = 0,
	BCS_ComponentSpace                                                               = 1,
	BCS_ParentBoneSpace                                                              = 2,
	BCS_BoneSpace                                                                    = 3
};

/// Enum /Script/Engine.EBoneAxis
/// Size: 0x01 (1 bytes)
enum class EBoneAxis : uint8_t
{
	BA_X                                                                             = 0,
	BA_Y                                                                             = 1,
	BA_Z                                                                             = 2
};

/// Enum /Script/Engine.EPrimaryAssetCookRule
/// Size: 0x01 (1 bytes)
enum class EPrimaryAssetCookRule : uint8_t
{
	Unknown                                                                          = 0,
	NeverCook                                                                        = 1,
	DevelopmentCook                                                                  = 2,
	DevelopmentAlwaysCook                                                            = 3,
	AlwaysCook                                                                       = 4
};

/// Enum /Script/Engine.ENaturalSoundFalloffMode
/// Size: 0x01 (1 bytes)
enum class ENaturalSoundFalloffMode : uint8_t
{
	Continues                                                                        = 0,
	Silent                                                                           = 1,
	Hold                                                                             = 2
};

/// Enum /Script/Engine.EAttenuationShape
/// Size: 0x01 (1 bytes)
enum class EAttenuationShape : uint8_t
{
	Sphere                                                                           = 0,
	Capsule                                                                          = 1,
	Box                                                                              = 2,
	Cone                                                                             = 3
};

/// Enum /Script/Engine.EAttenuationDistanceModel
/// Size: 0x01 (1 bytes)
enum class EAttenuationDistanceModel : uint8_t
{
	Linear                                                                           = 0,
	Logarithmic                                                                      = 1,
	Inverse                                                                          = 2,
	LogReverse                                                                       = 3,
	NaturalSound                                                                     = 4,
	Custom                                                                           = 5
};

/// Enum /Script/Engine.EAudioBusChannels
/// Size: 0x01 (1 bytes)
enum class EAudioBusChannels : uint8_t
{
	Mono                                                                             = 0,
	Stereo                                                                           = 1
};

/// Enum /Script/Engine.EAudioFaderCurve
/// Size: 0x01 (1 bytes)
enum class EAudioFaderCurve : uint8_t
{
	Linear                                                                           = 0,
	Logarithmic                                                                      = 1,
	SCurve                                                                           = 2,
	Sin                                                                              = 3,
	Count                                                                            = 4
};

/// Enum /Script/Engine.EAudioOutputTarget
/// Size: 0x01 (1 bytes)
enum class EAudioOutputTarget : uint8_t
{
	Speaker                                                                          = 0,
	Controller                                                                       = 1,
	ControllerFallbackToSpeaker                                                      = 2
};

/// Enum /Script/Engine.EMonoChannelUpmixMethod
/// Size: 0x01 (1 bytes)
enum class EMonoChannelUpmixMethod : uint8_t
{
	Linear                                                                           = 0,
	EqualPower                                                                       = 1,
	FullVolume                                                                       = 2
};

/// Enum /Script/Engine.EPanningMethod
/// Size: 0x01 (1 bytes)
enum class EPanningMethod : uint8_t
{
	Linear                                                                           = 0,
	EqualPower                                                                       = 1
};

/// Enum /Script/Engine.EVoiceSampleRate
/// Size: 0x04 (4 bytes)
enum class EVoiceSampleRate : uint32_t
{
	Low16000Hz                                                                       = 16000,
	Normal24000Hz                                                                    = 24000
};

/// Enum /Script/Engine.EAudioVolumeLocationState
/// Size: 0x01 (1 bytes)
enum class EAudioVolumeLocationState : uint8_t
{
	InsideTheVolume                                                                  = 0,
	OutsideTheVolume                                                                 = 1
};

/// Enum /Script/Engine.EBlendableLocation
/// Size: 0x01 (1 bytes)
enum class EBlendableLocation : uint8_t
{
	BL_AfterTonemapping                                                              = 0,
	BL_BeforeTonemapping                                                             = 1,
	BL_BeforeTranslucency                                                            = 2,
	BL_ReplacingTonemapper                                                           = 3,
	BL_SSRInput                                                                      = 4
};

/// Enum /Script/Engine.ENotifyTriggerMode
/// Size: 0x01 (1 bytes)
enum class ENotifyTriggerMode : uint8_t
{
	AllAnimations                                                                    = 0,
	HighestWeightedAnimation                                                         = 1,
	None                                                                             = 2
};

/// Enum /Script/Engine.EBlendSpaceAxis
/// Size: 0x01 (1 bytes)
enum class EBlendSpaceAxis : uint8_t
{
	BSA_None                                                                         = 0,
	BSA_X                                                                            = 1,
	BSA_Y                                                                            = 2,
	BSA_Max                                                                          = 3
};

/// Enum /Script/Engine.EBlueprintNativizationFlag
/// Size: 0x01 (1 bytes)
enum class EBlueprintNativizationFlag : uint8_t
{
	Disabled                                                                         = 0,
	Dependency                                                                       = 1,
	ExplicitlyEnabled                                                                = 2
};

/// Enum /Script/Engine.EBlueprintCompileMode
/// Size: 0x01 (1 bytes)
enum class EBlueprintCompileMode : uint8_t
{
	Default                                                                          = 0,
	Development                                                                      = 1,
	FinalRelease                                                                     = 2
};

/// Enum /Script/Engine.EBlueprintType
/// Size: 0x01 (1 bytes)
enum class EBlueprintType : uint8_t
{
	BPTYPE_Normal                                                                    = 0,
	BPTYPE_Const                                                                     = 1,
	BPTYPE_MacroLibrary                                                              = 2,
	BPTYPE_Interface                                                                 = 3,
	BPTYPE_LevelScript                                                               = 4,
	BPTYPE_FunctionLibrary                                                           = 5
};

/// Enum /Script/Engine.EBlueprintStatus
/// Size: 0x01 (1 bytes)
enum class EBlueprintStatus : uint8_t
{
	BS_Unknown                                                                       = 0,
	BS_Dirty                                                                         = 1,
	BS_Error                                                                         = 2,
	BS_UpToDate                                                                      = 3,
	BS_BeingCreated                                                                  = 4,
	BS_UpToDateWithWarnings                                                          = 5
};

/// Enum /Script/Engine.EDOFMode
/// Size: 0x01 (1 bytes)
enum class EDOFMode : uint8_t
{
	Default                                                                          = 0,
	SixDOF                                                                           = 1,
	YZPlane                                                                          = 2,
	XZPlane                                                                          = 3,
	XYPlane                                                                          = 4,
	CustomPlane                                                                      = 5,
	None                                                                             = 6
};

/// Enum /Script/Engine.ESBSoundOcclusionSetting_BoxCollision
/// Size: 0x01 (1 bytes)
enum class ESBSoundOcclusionSetting_BoxCollision : uint8_t
{
	Default                                                                          = 0,
	ForceEnable                                                                      = 1
};

/// Enum /Script/Engine.EBrushType
/// Size: 0x01 (1 bytes)
enum class EBrushType : uint8_t
{
	Brush_Default                                                                    = 0,
	Brush_Add                                                                        = 1,
	Brush_Subtract                                                                   = 2
};

/// Enum /Script/Engine.ECsgOper
/// Size: 0x01 (1 bytes)
enum class ECsgOper : uint8_t
{
	CSG_Active                                                                       = 0,
	CSG_Add                                                                          = 1,
	CSG_Subtract                                                                     = 2,
	CSG_Intersect                                                                    = 3,
	CSG_Deintersect                                                                  = 4,
	CSG_None                                                                         = 5
};

/// Enum /Script/Engine.EInitialOscillatorOffset
/// Size: 0x01 (1 bytes)
enum class EInitialOscillatorOffset : uint8_t
{
	EOO_OffsetRandom                                                                 = 0,
	EOO_OffsetZero                                                                   = 1
};

/// Enum /Script/Engine.EOscillatorWaveform
/// Size: 0x01 (1 bytes)
enum class EOscillatorWaveform : uint8_t
{
	SineWave                                                                         = 0,
	PerlinNoise                                                                      = 1,
	Static                                                                           = 2
};

/// Enum /Script/Engine.ECameraShakeDurationType
/// Size: 0x01 (1 bytes)
enum class ECameraShakeDurationType : uint8_t
{
	Fixed                                                                            = 0,
	Infinite                                                                         = 1,
	Custom                                                                           = 2
};

/// Enum /Script/Engine.ECameraShakeUpdateResultFlags
/// Size: 0x01 (1 bytes)
enum class ECameraShakeUpdateResultFlags : uint8_t
{
	ApplyAsAbsolute                                                                  = 1,
	SkipAutoScale                                                                    = 2,
	SkipAutoPlaySpace                                                                = 4,
	Default                                                                          = 0
};

/// Enum /Script/Engine.ECameraShakeAttenuation
/// Size: 0x01 (1 bytes)
enum class ECameraShakeAttenuation : uint8_t
{
	Linear                                                                           = 0,
	Quadratic                                                                        = 1
};

/// Enum /Script/Engine.ECameraAlphaBlendMode
/// Size: 0x01 (1 bytes)
enum class ECameraAlphaBlendMode : uint8_t
{
	CABM_Linear                                                                      = 0,
	CABM_Cubic                                                                       = 1
};

/// Enum /Script/Engine.ECameraShakePlaySpace
/// Size: 0x01 (1 bytes)
enum class ECameraShakePlaySpace : uint8_t
{
	CameraLocal                                                                      = 0,
	World                                                                            = 1,
	UserDefined                                                                      = 2
};

/// Enum /Script/Engine.ECameraProjectionMode
/// Size: 0x01 (1 bytes)
enum class ECameraProjectionMode : uint8_t
{
	Perspective                                                                      = 0,
	Orthographic                                                                     = 1
};

/// Enum /Script/Engine.ECloudStorageDelegate
/// Size: 0x01 (1 bytes)
enum class ECloudStorageDelegate : uint8_t
{
	CSD_KeyValueReadComplete                                                         = 0,
	CSD_KeyValueWriteComplete                                                        = 1,
	CSD_ValueChanged                                                                 = 2,
	CSD_DocumentQueryComplete                                                        = 3,
	CSD_DocumentReadComplete                                                         = 4,
	CSD_DocumentWriteComplete                                                        = 5,
	CSD_DocumentConflictDetected                                                     = 6
};

/// Enum /Script/Engine.EAngularDriveMode
/// Size: 0x01 (1 bytes)
enum class EAngularDriveMode : uint8_t
{
	SLERP                                                                            = 0,
	TwistAndSwing                                                                    = 1
};

/// Enum /Script/Engine.ECurveTableMode
/// Size: 0x01 (1 bytes)
enum class ECurveTableMode : uint8_t
{
	Empty                                                                            = 0,
	SimpleCurves                                                                     = 1,
	RichCurves                                                                       = 2
};

/// Enum /Script/Engine.ECustomAttributeBlendType
/// Size: 0x01 (1 bytes)
enum class ECustomAttributeBlendType : uint8_t
{
	Override                                                                         = 0,
	Blend                                                                            = 1
};

/// Enum /Script/Engine.EEvaluateCurveTableResult
/// Size: 0x01 (1 bytes)
enum class EEvaluateCurveTableResult : uint8_t
{
	RowFound                                                                         = 0,
	RowNotFound                                                                      = 1
};

/// Enum /Script/Engine.EGrammaticalNumber
/// Size: 0x01 (1 bytes)
enum class EGrammaticalNumber : uint8_t
{
	Singular                                                                         = 0,
	Plural                                                                           = 1
};

/// Enum /Script/Engine.EGrammaticalGender
/// Size: 0x01 (1 bytes)
enum class EGrammaticalGender : uint8_t
{
	Neuter                                                                           = 0,
	Masculine                                                                        = 1,
	Feminine                                                                         = 2,
	Mixed                                                                            = 3
};

/// Enum /Script/Engine.DistributionParamMode
/// Size: 0x01 (1 bytes)
enum class DistributionParamMode : uint8_t
{
	DPM_Normal                                                                       = 0,
	DPM_Abs                                                                          = 1,
	DPM_Direct                                                                       = 2
};

/// Enum /Script/Engine.EDistributionVectorMirrorFlags
/// Size: 0x01 (1 bytes)
enum class EDistributionVectorMirrorFlags : uint8_t
{
	EDVMF_Same                                                                       = 0,
	EDVMF_Different                                                                  = 1,
	EDVMF_Mirror                                                                     = 2
};

/// Enum /Script/Engine.EDistributionVectorLockFlags
/// Size: 0x01 (1 bytes)
enum class EDistributionVectorLockFlags : uint8_t
{
	EDVLF_None                                                                       = 0,
	EDVLF_XY                                                                         = 1,
	EDVLF_XZ                                                                         = 2,
	EDVLF_YZ                                                                         = 3,
	EDVLF_XYZ                                                                        = 4
};

/// Enum /Script/Engine.ENodeEnabledState
/// Size: 0x01 (1 bytes)
enum class ENodeEnabledState : uint8_t
{
	Enabled                                                                          = 0,
	Disabled                                                                         = 1,
	DevelopmentOnly                                                                  = 2
};

/// Enum /Script/Engine.ENodeAdvancedPins
/// Size: 0x01 (1 bytes)
enum class ENodeAdvancedPins : uint8_t
{
	NoPins                                                                           = 0,
	Shown                                                                            = 1,
	Hidden                                                                           = 2
};

/// Enum /Script/Engine.ENodeTitleType
/// Size: 0x01 (1 bytes)
enum class ENodeTitleType : uint8_t
{
	FullTitle                                                                        = 0,
	ListView                                                                         = 1,
	EditableTitle                                                                    = 2,
	MenuTitle                                                                        = 3,
	MAX_TitleTypes                                                                   = 4
};

/// Enum /Script/Engine.EPinContainerType
/// Size: 0x01 (1 bytes)
enum class EPinContainerType : uint8_t
{
	None                                                                             = 0,
	Array                                                                            = 1,
	Set                                                                              = 2,
	Map                                                                              = 3
};

/// Enum /Script/Engine.EEdGraphPinDirection
/// Size: 0x01 (1 bytes)
enum class EEdGraphPinDirection : uint8_t
{
	EGPD_Input                                                                       = 0,
	EGPD_Output                                                                      = 1
};

/// Enum /Script/Engine.EBlueprintPinStyleType
/// Size: 0x01 (1 bytes)
enum class EBlueprintPinStyleType : uint8_t
{
	BPST_Original                                                                    = 0,
	BPST_VariantA                                                                    = 1
};

/// Enum /Script/Engine.ECanCreateConnectionResponse
/// Size: 0x01 (1 bytes)
enum class ECanCreateConnectionResponse : uint8_t
{
	CONNECT_RESPONSE_MAKE                                                            = 0,
	CONNECT_RESPONSE_DISALLOW                                                        = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A                                                  = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B                                                  = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB                                                 = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE                                       = 5
};

/// Enum /Script/Engine.EGraphType
/// Size: 0x01 (1 bytes)
enum class EGraphType : uint8_t
{
	GT_Function                                                                      = 0,
	GT_Ubergraph                                                                     = 1,
	GT_Macro                                                                         = 2,
	GT_Animation                                                                     = 3,
	GT_StateMachine                                                                  = 4
};

/// Enum /Script/Engine.ETransitionType
/// Size: 0x01 (1 bytes)
enum class ETransitionType : uint8_t
{
	None                                                                             = 0,
	Paused                                                                           = 1,
	Loading                                                                          = 2,
	Saving                                                                           = 3,
	Connecting                                                                       = 4,
	Precaching                                                                       = 5,
	WaitingToConnect                                                                 = 6
};

/// Enum /Script/Engine.EFullyLoadPackageType
/// Size: 0x01 (1 bytes)
enum class EFullyLoadPackageType : uint8_t
{
	FULLYLOAD_Map                                                                    = 0,
	FULLYLOAD_Game_PreLoadClass                                                      = 1,
	FULLYLOAD_Game_PostLoadClass                                                     = 2,
	FULLYLOAD_Always                                                                 = 3,
	FULLYLOAD_Mutator                                                                = 4
};

/// Enum /Script/Engine.EViewModeIndex
/// Size: 0x01 (1 bytes)
enum class EViewModeIndex : uint8_t
{
	VMI_BrushWireframe                                                               = 0,
	VMI_Wireframe                                                                    = 1,
	VMI_Unlit                                                                        = 2,
	VMI_Lit                                                                          = 3,
	VMI_Lit_DetailLighting                                                           = 4,
	VMI_LightingOnly                                                                 = 5,
	VMI_LightComplexity                                                              = 6,
	VMI_ShaderComplexity                                                             = 8,
	VMI_LightmapDensity                                                              = 9,
	VMI_LitLightmapDensity                                                           = 10,
	VMI_ReflectionOverride                                                           = 11,
	VMI_VisualizeBuffer                                                              = 12,
	VMI_StationaryLightOverlap                                                       = 14,
	VMI_CollisionPawn                                                                = 15,
	VMI_CollisionVisibility                                                          = 16,
	VMI_LODColoration                                                                = 18,
	VMI_QuadOverdraw                                                                 = 19,
	VMI_PrimitiveDistanceAccuracy                                                    = 20,
	VMI_MeshUVDensityAccuracy                                                        = 21,
	VMI_ShaderComplexityWithQuadOverdraw                                             = 22,
	VMI_HLODColoration                                                               = 23,
	VMI_GroupLODColoration                                                           = 24,
	VMI_MaterialTextureScaleAccuracy                                                 = 25,
	VMI_RequiredTextureResolution                                                    = 26,
	VMI_PathTracing                                                                  = 27,
	VMI_RayTracingDebug                                                              = 28,
	VMI_CastShadowActivationObject                                                   = 29,
	VMI_PhysicsActiveDistanceObject                                                  = 30,
	VMI_Max                                                                          = 31,
	VMI_Unknown                                                                      = 255
};

/// Enum /Script/Engine.EDemoPlayFailure
/// Size: 0x01 (1 bytes)
enum class EDemoPlayFailure : uint8_t
{
	Generic                                                                          = 0,
	DemoNotFound                                                                     = 1,
	Corrupt                                                                          = 2,
	InvalidVersion                                                                   = 3,
	InitBase                                                                         = 4,
	GameSpecificHeader                                                               = 5,
	ReplayStreamerInternal                                                           = 6,
	LoadMap                                                                          = 7,
	Serialization                                                                    = 8
};

/// Enum /Script/Engine.ETravelType
/// Size: 0x01 (1 bytes)
enum class ETravelType : uint8_t
{
	TRAVEL_Absolute                                                                  = 0,
	TRAVEL_Partial                                                                   = 1,
	TRAVEL_Relative                                                                  = 2
};

/// Enum /Script/Engine.ENetworkLagState
/// Size: 0x01 (1 bytes)
enum class ENetworkLagState : uint8_t
{
	NotLagging                                                                       = 0,
	Lagging                                                                          = 1
};

/// Enum /Script/Engine.EMouseCaptureMode
/// Size: 0x01 (1 bytes)
enum class EMouseCaptureMode : uint8_t
{
	NoCapture                                                                        = 0,
	CapturePermanently                                                               = 1,
	CapturePermanently_IncludingInitialMouseDown                                     = 2,
	CaptureDuringMouseDown                                                           = 3,
	CaptureDuringRightMouseDown                                                      = 4
};

/// Enum /Script/Engine.EInputEvent
/// Size: 0x01 (1 bytes)
enum class EInputEvent : uint8_t
{
	IE_Pressed                                                                       = 0,
	IE_Released                                                                      = 1,
	IE_Repeat                                                                        = 2,
	IE_DoubleClick                                                                   = 3,
	IE_Axis                                                                          = 4
};

/// Enum /Script/Engine.ECustomTimeStepSynchronizationState
/// Size: 0x01 (1 bytes)
enum class ECustomTimeStepSynchronizationState : uint8_t
{
	Closed                                                                           = 0,
	Error                                                                            = 1,
	Synchronized                                                                     = 2,
	Synchronizing                                                                    = 3
};

/// Enum /Script/Engine.EMeshBufferAccess
/// Size: 0x01 (1 bytes)
enum class EMeshBufferAccess : uint8_t
{
	Default                                                                          = 0,
	ForceCPUAndGPU                                                                   = 1
};

/// Enum /Script/Engine.EComponentSocketType
/// Size: 0x01 (1 bytes)
enum class EComponentSocketType : uint8_t
{
	Invalid                                                                          = 0,
	Bone                                                                             = 1,
	Socket                                                                           = 2
};

/// Enum /Script/Engine.EPhysicalMaterialMaskColor
/// Size: 0x01 (1 bytes)
enum class EPhysicalMaterialMaskColor : uint8_t
{
	Red                                                                              = 0,
	Green                                                                            = 1,
	Blue                                                                             = 2,
	Cyan                                                                             = 3,
	Magenta                                                                          = 4,
	Yellow                                                                           = 5,
	White                                                                            = 6,
	Black                                                                            = 7
};

/// Enum /Script/Engine.EWalkableSlopeBehavior
/// Size: 0x01 (1 bytes)
enum class EWalkableSlopeBehavior : uint8_t
{
	WalkableSlope_Default                                                            = 0,
	WalkableSlope_Increase                                                           = 1,
	WalkableSlope_Decrease                                                           = 2,
	WalkableSlope_Unwalkable                                                         = 3,
	WalkableSlope_Max                                                                = 4
};

/// Enum /Script/Engine.EAutoPossessAI
/// Size: 0x01 (1 bytes)
enum class EAutoPossessAI : uint8_t
{
	Disabled                                                                         = 0,
	PlacedInWorld                                                                    = 1,
	Spawned                                                                          = 2,
	PlacedInWorldOrSpawned                                                           = 3
};

/// Enum /Script/Engine.EUpdateRateShiftBucket
/// Size: 0x01 (1 bytes)
enum class EUpdateRateShiftBucket : uint8_t
{
	ShiftBucket0                                                                     = 0,
	ShiftBucket1                                                                     = 1,
	ShiftBucket2                                                                     = 2,
	ShiftBucket3                                                                     = 3,
	ShiftBucket4                                                                     = 4,
	ShiftBucket5                                                                     = 5,
	ShiftBucketMax                                                                   = 6
};

/// Enum /Script/Engine.EComponentToWorldUpdateType
/// Size: 0x01 (1 bytes)
enum class EComponentToWorldUpdateType : uint8_t
{
	Default                                                                          = 0,
	ManualUpdate                                                                     = 1
};

/// Enum /Script/Engine.EShadowMapFlags
/// Size: 0x01 (1 bytes)
enum class EShadowMapFlags : uint8_t
{
	SMF_None                                                                         = 0,
	SMF_Streamed                                                                     = 1
};

/// Enum /Script/Engine.ELightMapPaddingType
/// Size: 0x01 (1 bytes)
enum class ELightMapPaddingType : uint8_t
{
	LMPT_NormalPadding                                                               = 0,
	LMPT_PrePadding                                                                  = 1,
	LMPT_NoPadding                                                                   = 2
};

/// Enum /Script/Engine.ECollisionEnabled
/// Size: 0x01 (1 bytes)
enum class ECollisionEnabled : uint8_t
{
	NoCollision                                                                      = 0,
	QueryOnly                                                                        = 1,
	PhysicsOnly                                                                      = 2,
	QueryAndPhysics                                                                  = 3
};

/// Enum /Script/Engine.ETimelineSigType
/// Size: 0x01 (1 bytes)
enum class ETimelineSigType : uint8_t
{
	ETS_EventSignature                                                               = 0,
	ETS_FloatSignature                                                               = 1,
	ETS_VectorSignature                                                              = 2,
	ETS_LinearColorSignature                                                         = 3,
	ETS_InvalidSignature                                                             = 4
};

/// Enum /Script/Engine.EFilterInterpolationType
/// Size: 0x01 (1 bytes)
enum class EFilterInterpolationType : uint8_t
{
	BSIT_Average                                                                     = 0,
	BSIT_Linear                                                                      = 1,
	BSIT_Cubic                                                                       = 2
};

/// Enum /Script/Engine.ECollisionResponse
/// Size: 0x01 (1 bytes)
enum class ECollisionResponse : uint8_t
{
	ECR_Ignore                                                                       = 0,
	ECR_Overlap                                                                      = 1,
	ECR_Block                                                                        = 2
};

/// Enum /Script/Engine.EOverlapFilterOption
/// Size: 0x01 (1 bytes)
enum class EOverlapFilterOption : uint8_t
{
	OverlapFilter_All                                                                = 0,
	OverlapFilter_DynamicOnly                                                        = 1,
	OverlapFilter_StaticOnly                                                         = 2
};

/// Enum /Script/Engine.ECollisionChannel
/// Size: 0x01 (1 bytes)
enum class ECollisionChannel : uint8_t
{
	ECC_WorldStatic                                                                  = 0,
	ECC_WorldDynamic                                                                 = 1,
	ECC_Pawn                                                                         = 2,
	ECC_Visibility                                                                   = 3,
	ECC_Camera                                                                       = 4,
	ECC_PhysicsBody                                                                  = 5,
	ECC_Vehicle                                                                      = 6,
	ECC_Destructible                                                                 = 7,
	ECC_EngineTraceChannel1                                                          = 8,
	ECC_EngineTraceChannel2                                                          = 9,
	ECC_EngineTraceChannel3                                                          = 10,
	ECC_EngineTraceChannel4                                                          = 11,
	ECC_EngineTraceChannel5                                                          = 12,
	ECC_EngineTraceChannel6                                                          = 13,
	ECC_GameTraceChannel1                                                            = 14,
	ECC_GameTraceChannel2                                                            = 15,
	ECC_GameTraceChannel3                                                            = 16,
	ECC_GameTraceChannel4                                                            = 17,
	ECC_GameTraceChannel5                                                            = 18,
	ECC_GameTraceChannel6                                                            = 19,
	ECC_GameTraceChannel7                                                            = 20,
	ECC_GameTraceChannel8                                                            = 21,
	ECC_GameTraceChannel9                                                            = 22,
	ECC_GameTraceChannel10                                                           = 23,
	ECC_GameTraceChannel11                                                           = 24,
	ECC_GameTraceChannel12                                                           = 25,
	ECC_GameTraceChannel13                                                           = 26,
	ECC_GameTraceChannel14                                                           = 27,
	ECC_GameTraceChannel15                                                           = 28,
	ECC_GameTraceChannel16                                                           = 29,
	ECC_GameTraceChannel17                                                           = 30,
	ECC_GameTraceChannel18                                                           = 31,
	ECC_OverlapAll_Deprecated                                                        = 32
};

/// Enum /Script/Engine.ENetworkSmoothingMode
/// Size: 0x01 (1 bytes)
enum class ENetworkSmoothingMode : uint8_t
{
	Disabled                                                                         = 0,
	Linear                                                                           = 1,
	Exponential                                                                      = 2,
	Replay                                                                           = 3
};

/// Enum /Script/Engine.ELightingBuildQuality
/// Size: 0x01 (1 bytes)
enum class ELightingBuildQuality : uint8_t
{
	Quality_Preview                                                                  = 0,
	Quality_Medium                                                                   = 1,
	Quality_High                                                                     = 2,
	Quality_Production                                                               = 3
};

/// Enum /Script/Engine.EMaterialShadingRate
/// Size: 0x01 (1 bytes)
enum class EMaterialShadingRate : uint8_t
{
	MSR_1x1                                                                          = 0,
	MSR_2x1                                                                          = 1,
	MSR_1x2                                                                          = 2,
	MSR_2x2                                                                          = 3,
	MSR_4x2                                                                          = 4,
	MSR_2x4                                                                          = 5,
	MSR_4x4                                                                          = 6,
	MSR_Count                                                                        = 7
};

/// Enum /Script/Engine.EMaterialStencilCompare
/// Size: 0x01 (1 bytes)
enum class EMaterialStencilCompare : uint8_t
{
	MSC_Less                                                                         = 0,
	MSC_LessEqual                                                                    = 1,
	MSC_Greater                                                                      = 2,
	MSC_GreaterEqual                                                                 = 3,
	MSC_Equal                                                                        = 4,
	MSC_NotEqual                                                                     = 5,
	MSC_Never                                                                        = 6,
	MSC_Always                                                                       = 7,
	MSC_Count                                                                        = 8
};

/// Enum /Script/Engine.EMaterialSamplerType
/// Size: 0x01 (1 bytes)
enum class EMaterialSamplerType : uint8_t
{
	SAMPLERTYPE_Color                                                                = 0,
	SAMPLERTYPE_Grayscale                                                            = 1,
	SAMPLERTYPE_Alpha                                                                = 2,
	SAMPLERTYPE_Normal                                                               = 3,
	SAMPLERTYPE_Masks                                                                = 4,
	SAMPLERTYPE_DistanceFieldFont                                                    = 5,
	SAMPLERTYPE_LinearColor                                                          = 6,
	SAMPLERTYPE_LinearGrayscale                                                      = 7,
	SAMPLERTYPE_Data                                                                 = 8,
	SAMPLERTYPE_External                                                             = 9,
	SAMPLERTYPE_VirtualColor                                                         = 10,
	SAMPLERTYPE_VirtualGrayscale                                                     = 11,
	SAMPLERTYPE_VirtualAlpha                                                         = 12,
	SAMPLERTYPE_VirtualNormal                                                        = 13,
	SAMPLERTYPE_VirtualMasks                                                         = 14,
	SAMPLERTYPE_VirtualLinearColor                                                   = 15,
	SAMPLERTYPE_VirtualLinearGrayscale                                               = 16
};

/// Enum /Script/Engine.EMaterialTessellationMode
/// Size: 0x01 (1 bytes)
enum class EMaterialTessellationMode : uint8_t
{
	MTM_NoTessellation                                                               = 0,
	MTM_FlatTessellation                                                             = 1,
	MTM_PNTriangles                                                                  = 2
};

/// Enum /Script/Engine.EMaterialShadingModel
/// Size: 0x01 (1 bytes)
enum class EMaterialShadingModel : uint8_t
{
	MSM_Unlit                                                                        = 0,
	MSM_DefaultLit                                                                   = 1,
	MSM_Subsurface                                                                   = 2,
	MSM_PreintegratedSkin                                                            = 3,
	MSM_ClearCoat                                                                    = 4,
	MSM_SubsurfaceProfile                                                            = 5,
	MSM_TwoSidedFoliage                                                              = 6,
	MSM_Hair                                                                         = 7,
	MSM_Cloth                                                                        = 8,
	MSM_Eye                                                                          = 9,
	MSM_SingleLayerWater                                                             = 10,
	MSM_ThinTranslucent                                                              = 11,
	MSM_LitReactive                                                                  = 12,
	MSM_UnlitReactive                                                                = 13,
	MSM_NUM                                                                          = 14,
	MSM_FromMaterialExpression                                                       = 15
};

/// Enum /Script/Engine.EParticleCollisionMode
/// Size: 0x01 (1 bytes)
enum class EParticleCollisionMode : uint8_t
{
	SceneDepth                                                                       = 0,
	DistanceField                                                                    = 1
};

/// Enum /Script/Engine.ETrailWidthMode
/// Size: 0x01 (1 bytes)
enum class ETrailWidthMode : uint8_t
{
	FromCentre                                                                       = 0,
	FromFirst                                                                        = 1,
	FromSecond                                                                       = 2
};

/// Enum /Script/Engine.EGBufferFormat
/// Size: 0x01 (1 bytes)
enum class EGBufferFormat : uint8_t
{
	Force8BitsPerChannel                                                             = 0,
	Default                                                                          = 1,
	HighPrecisionNormals                                                             = 3,
	Force16BitsPerChannel                                                            = 5
};

/// Enum /Script/Engine.ESceneCaptureCompositeMode
/// Size: 0x01 (1 bytes)
enum class ESceneCaptureCompositeMode : uint8_t
{
	SCCM_Overwrite                                                                   = 0,
	SCCM_Additive                                                                    = 1,
	SCCM_Composite                                                                   = 2
};

/// Enum /Script/Engine.ESceneCaptureSource
/// Size: 0x01 (1 bytes)
enum class ESceneCaptureSource : uint8_t
{
	SCS_SceneColorHDR                                                                = 0,
	SCS_SceneColorHDRNoAlpha                                                         = 1,
	SCS_FinalColorLDR                                                                = 2,
	SCS_SceneColorSceneDepth                                                         = 3,
	SCS_SceneDepth                                                                   = 4,
	SCS_DeviceDepth                                                                  = 5,
	SCS_Normal                                                                       = 6,
	SCS_BaseColor                                                                    = 7,
	SCS_FinalColorHDR                                                                = 8,
	SCS_FinalToneCurveHDR                                                            = 9
};

/// Enum /Script/Engine.ETranslucentSortPolicy
/// Size: 0x01 (1 bytes)
enum class ETranslucentSortPolicy : uint8_t
{
	SortByDistance                                                                   = 0,
	SortByProjectedZ                                                                 = 1,
	SortAlongAxis                                                                    = 2
};

/// Enum /Script/Engine.ERefractionMode
/// Size: 0x01 (1 bytes)
enum class ERefractionMode : uint8_t
{
	RM_IndexOfRefraction                                                             = 0,
	RM_PixelNormalOffset                                                             = 1
};

/// Enum /Script/Engine.ETranslucencyLightingMode
/// Size: 0x01 (1 bytes)
enum class ETranslucencyLightingMode : uint8_t
{
	TLM_VolumetricNonDirectional                                                     = 0,
	TLM_VolumetricDirectional                                                        = 1,
	TLM_VolumetricPerVertexNonDirectional                                            = 2,
	TLM_VolumetricPerVertexDirectional                                               = 3,
	TLM_Surface                                                                      = 4,
	TLM_SurfacePerPixelLighting                                                      = 5
};

/// Enum /Script/Engine.ESamplerSourceMode
/// Size: 0x01 (1 bytes)
enum class ESamplerSourceMode : uint8_t
{
	SSM_FromTextureAsset                                                             = 0,
	SSM_Wrap_WorldGroupSettings                                                      = 1,
	SSM_Clamp_WorldGroupSettings                                                     = 2
};

/// Enum /Script/Engine.EBlendMode
/// Size: 0x01 (1 bytes)
enum class EBlendMode : uint8_t
{
	BLEND_Opaque                                                                     = 0,
	BLEND_Masked                                                                     = 1,
	BLEND_Translucent                                                                = 2,
	BLEND_Additive                                                                   = 3,
	BLEND_Modulate                                                                   = 4,
	BLEND_AlphaComposite                                                             = 5,
	BLEND_AlphaHoldout                                                               = 6
};

/// Enum /Script/Engine.EOcclusionCombineMode
/// Size: 0x01 (1 bytes)
enum class EOcclusionCombineMode : uint8_t
{
	OCM_Minimum                                                                      = 0,
	OCM_Multiply                                                                     = 1
};

/// Enum /Script/Engine.ELightmapType
/// Size: 0x01 (1 bytes)
enum class ELightmapType : uint8_t
{
	Default                                                                          = 0,
	ForceSurface                                                                     = 1,
	ForceVolumetric                                                                  = 2
};

/// Enum /Script/Engine.EIndirectLightingCacheQuality
/// Size: 0x01 (1 bytes)
enum class EIndirectLightingCacheQuality : uint8_t
{
	ILCQ_Off                                                                         = 0,
	ILCQ_Point                                                                       = 1,
	ILCQ_Volume                                                                      = 2
};

/// Enum /Script/Engine.ESceneDepthPriorityGroup
/// Size: 0x01 (1 bytes)
enum class ESceneDepthPriorityGroup : uint8_t
{
	SDPG_World                                                                       = 0,
	SDPG_Foreground                                                                  = 1
};

/// Enum /Script/Engine.EFontCacheType
/// Size: 0x01 (1 bytes)
enum class EFontCacheType : uint8_t
{
	Offline                                                                          = 0,
	Runtime                                                                          = 1
};

/// Enum /Script/Engine.EFontImportCharacterSet
/// Size: 0x01 (1 bytes)
enum class EFontImportCharacterSet : uint8_t
{
	FontICS_Default                                                                  = 0,
	FontICS_Ansi                                                                     = 1,
	FontICS_Symbol                                                                   = 2
};

/// Enum /Script/Engine.EStandbyType
/// Size: 0x01 (1 bytes)
enum class EStandbyType : uint8_t
{
	STDBY_Rx                                                                         = 0,
	STDBY_Tx                                                                         = 1,
	STDBY_BadPing                                                                    = 2
};

/// Enum /Script/Engine.ESuggestProjVelocityTraceOption
/// Size: 0x01 (1 bytes)
enum class ESuggestProjVelocityTraceOption : uint8_t
{
	DoNotTrace                                                                       = 0,
	TraceFullPath                                                                    = 1,
	OnlyTraceWhileAscending                                                          = 2
};

/// Enum /Script/Engine.EWindowMode
/// Size: 0x01 (1 bytes)
enum class EWindowMode : uint8_t
{
	Fullscreen                                                                       = 0,
	WindowedFullscreen                                                               = 1,
	Windowed                                                                         = 2
};

/// Enum /Script/Engine.EHitProxyPriority
/// Size: 0x01 (1 bytes)
enum class EHitProxyPriority : uint8_t
{
	HPP_World                                                                        = 0,
	HPP_Wireframe                                                                    = 1,
	HPP_Foreground                                                                   = 2,
	HPP_UI                                                                           = 3
};

/// Enum /Script/Engine.EImportanceWeight
/// Size: 0x01 (1 bytes)
enum class EImportanceWeight : uint8_t
{
	Luminance                                                                        = 0,
	Red                                                                              = 1,
	Green                                                                            = 2,
	Blue                                                                             = 3,
	Alpha                                                                            = 4
};

/// Enum /Script/Engine.EAdManagerDelegate
/// Size: 0x01 (1 bytes)
enum class EAdManagerDelegate : uint8_t
{
	AMD_ClickedBanner                                                                = 0,
	AMD_UserClosedAd                                                                 = 1
};

/// Enum /Script/Engine.EControllerAnalogStick
/// Size: 0x01 (1 bytes)
enum class EControllerAnalogStick : uint8_t
{
	CAS_LeftStick                                                                    = 0,
	CAS_RightStick                                                                   = 1
};

/// Enum /Script/Engine.EAnimAlphaInputType
/// Size: 0x01 (1 bytes)
enum class EAnimAlphaInputType : uint8_t
{
	Float                                                                            = 0,
	Bool                                                                             = 1,
	Curve                                                                            = 2
};

/// Enum /Script/Engine.ETrackActiveCondition
/// Size: 0x01 (1 bytes)
enum class ETrackActiveCondition : uint8_t
{
	ETAC_Always                                                                      = 0,
	ETAC_GoreEnabled                                                                 = 1,
	ETAC_GoreDisabled                                                                = 2
};

/// Enum /Script/Engine.EInterpTrackMoveRotMode
/// Size: 0x01 (1 bytes)
enum class EInterpTrackMoveRotMode : uint8_t
{
	IMR_Keyframed                                                                    = 0,
	IMR_LookAtGroup                                                                  = 1,
	IMR_Ignore                                                                       = 2
};

/// Enum /Script/Engine.EInterpMoveAxis
/// Size: 0x01 (1 bytes)
enum class EInterpMoveAxis : uint8_t
{
	AXIS_TranslationX                                                                = 0,
	AXIS_TranslationY                                                                = 1,
	AXIS_TranslationZ                                                                = 2,
	AXIS_RotationX                                                                   = 3,
	AXIS_RotationY                                                                   = 4,
	AXIS_RotationZ                                                                   = 5
};

/// Enum /Script/Engine.ETrackToggleAction
/// Size: 0x01 (1 bytes)
enum class ETrackToggleAction : uint8_t
{
	ETTA_Off                                                                         = 0,
	ETTA_On                                                                          = 1,
	ETTA_Toggle                                                                      = 2,
	ETTA_Trigger                                                                     = 3
};

/// Enum /Script/Engine.EVisibilityTrackCondition
/// Size: 0x01 (1 bytes)
enum class EVisibilityTrackCondition : uint8_t
{
	EVTC_Always                                                                      = 0,
	EVTC_GoreEnabled                                                                 = 1,
	EVTC_GoreDisabled                                                                = 2
};

/// Enum /Script/Engine.EVisibilityTrackAction
/// Size: 0x01 (1 bytes)
enum class EVisibilityTrackAction : uint8_t
{
	EVTA_Hide                                                                        = 0,
	EVTA_Show                                                                        = 1,
	EVTA_Toggle                                                                      = 2
};

/// Enum /Script/Engine.ESlateGesture
/// Size: 0x01 (1 bytes)
enum class ESlateGesture : uint8_t
{
	None                                                                             = 0,
	Scroll                                                                           = 1,
	Magnify                                                                          = 2,
	Swipe                                                                            = 3,
	Rotate                                                                           = 4,
	LongPress                                                                        = 5
};

/// Enum /Script/Engine.EMIDCreationFlags
/// Size: 0x01 (1 bytes)
enum class EMIDCreationFlags : uint8_t
{
	None                                                                             = 0,
	Transient                                                                        = 1
};

/// Enum /Script/Engine.EMatrixColumns
/// Size: 0x01 (1 bytes)
enum class EMatrixColumns : uint8_t
{
	First                                                                            = 0,
	Second                                                                           = 1,
	Third                                                                            = 2,
	Fourth                                                                           = 3
};

/// Enum /Script/Engine.ELerpInterpolationMode
/// Size: 0x01 (1 bytes)
enum class ELerpInterpolationMode : uint8_t
{
	QuatInterp                                                                       = 0,
	EulerInterp                                                                      = 1,
	DualQuatInterp                                                                   = 2
};

/// Enum /Script/Engine.EEasingFunc
/// Size: 0x01 (1 bytes)
enum class EEasingFunc : uint8_t
{
	Linear                                                                           = 0,
	Step                                                                             = 1,
	SinusoidalIn                                                                     = 2,
	SinusoidalOut                                                                    = 3,
	SinusoidalInOut                                                                  = 4,
	EaseIn                                                                           = 5,
	EaseOut                                                                          = 6,
	EaseInOut                                                                        = 7,
	ExpoIn                                                                           = 8,
	ExpoOut                                                                          = 9,
	ExpoInOut                                                                        = 10,
	CircularIn                                                                       = 11,
	CircularOut                                                                      = 12,
	CircularInOut                                                                    = 13
};

/// Enum /Script/Engine.ERoundingMode
/// Size: 0x01 (1 bytes)
enum class ERoundingMode : uint8_t
{
	HalfToEven                                                                       = 0,
	HalfFromZero                                                                     = 1,
	HalfToZero                                                                       = 2,
	FromZero                                                                         = 3,
	ToZero                                                                           = 4,
	ToNegativeInfinity                                                               = 5,
	ToPositiveInfinity                                                               = 6
};

/// Enum /Script/Engine.EStreamingVolumeUsage
/// Size: 0x01 (1 bytes)
enum class EStreamingVolumeUsage : uint8_t
{
	SVB_Loading                                                                      = 0,
	SVB_LoadingAndVisibility                                                         = 1,
	SVB_VisibilityBlockingOnLoad                                                     = 2,
	SVB_BlockingOnLoad                                                               = 3,
	SVB_LoadingNotVisible                                                            = 4,
	SVB_InvisibilityBlockingOnLoad                                                   = 5
};

/// Enum /Script/Engine.ESBControlLightByCamType
/// Size: 0x01 (1 bytes)
enum class ESBControlLightByCamType : uint8_t
{
	ESBControlLightByCam_Multiply                                                    = 0,
	ESBControlLightByCam_Add                                                         = 1
};

/// Enum /Script/Engine.ESyncOption
/// Size: 0x01 (1 bytes)
enum class ESyncOption : uint8_t
{
	Drive                                                                            = 0,
	Passive                                                                          = 1,
	Disabled                                                                         = 2
};

/// Enum /Script/Engine.EMaterialDecalResponse
/// Size: 0x01 (1 bytes)
enum class EMaterialDecalResponse : uint8_t
{
	MDR_None                                                                         = 0,
	MDR_ColorNormalRoughness                                                         = 1,
	MDR_Color                                                                        = 2,
	MDR_ColorNormal                                                                  = 3,
	MDR_ColorRoughness                                                               = 4,
	MDR_Normal                                                                       = 5,
	MDR_NormalRoughness                                                              = 6,
	MDR_Roughness                                                                    = 7
};

/// Enum /Script/Engine.EDecalBlendMode
/// Size: 0x01 (1 bytes)
enum class EDecalBlendMode : uint8_t
{
	DBM_Translucent                                                                  = 0,
	DBM_Stain                                                                        = 1,
	DBM_Normal                                                                       = 2,
	DBM_Emissive                                                                     = 3,
	DBM_DBuffer_ColorNormalRoughness                                                 = 4,
	DBM_DBuffer_Color                                                                = 5,
	DBM_DBuffer_ColorNormal                                                          = 6,
	DBM_DBuffer_ColorRoughness                                                       = 7,
	DBM_DBuffer_Normal                                                               = 8,
	DBM_DBuffer_NormalRoughness                                                      = 9,
	DBM_DBuffer_Roughness                                                            = 10,
	DBM_DBuffer_Emissive                                                             = 11,
	DBM_DBuffer_AlphaComposite                                                       = 12,
	DBM_DBuffer_EmissiveAlphaComposite                                               = 13,
	DBM_Volumetric_DistanceFunction                                                  = 14,
	DBM_AlphaComposite                                                               = 15,
	DBM_AmbientOcclusion                                                             = 16
};

/// Enum /Script/Engine.ETextureColorChannel
/// Size: 0x01 (1 bytes)
enum class ETextureColorChannel : uint8_t
{
	TCC_Red                                                                          = 0,
	TCC_Green                                                                        = 1,
	TCC_Blue                                                                         = 2,
	TCC_Alpha                                                                        = 3
};

/// Enum /Script/Engine.EMaterialAttributeBlend
/// Size: 0x01 (1 bytes)
enum class EMaterialAttributeBlend : uint8_t
{
	Blend                                                                            = 0,
	UseA                                                                             = 1,
	UseB                                                                             = 2
};

/// Enum /Script/Engine.EChannelMaskParameterColor
/// Size: 0x01 (1 bytes)
enum class EChannelMaskParameterColor : uint8_t
{
	Red                                                                              = 0,
	Green                                                                            = 1,
	Blue                                                                             = 2,
	Alpha                                                                            = 3
};

/// Enum /Script/Engine.EClampMode
/// Size: 0x01 (1 bytes)
enum class EClampMode : uint8_t
{
	CMODE_Clamp                                                                      = 0,
	CMODE_ClampMin                                                                   = 1,
	CMODE_ClampMax                                                                   = 2
};

/// Enum /Script/Engine.ECustomMaterialOutputType
/// Size: 0x01 (1 bytes)
enum class ECustomMaterialOutputType : uint8_t
{
	CMOT_Float1                                                                      = 0,
	CMOT_Float2                                                                      = 1,
	CMOT_Float3                                                                      = 2,
	CMOT_Float4                                                                      = 3,
	CMOT_MaterialAttributes                                                          = 4
};

/// Enum /Script/Engine.EDepthOfFieldFunctionValue
/// Size: 0x01 (1 bytes)
enum class EDepthOfFieldFunctionValue : uint8_t
{
	TDOF_NearAndFarMask                                                              = 0,
	TDOF_NearMask                                                                    = 1,
	TDOF_FarMask                                                                     = 2,
	TDOF_CircleOfConfusionRadius                                                     = 3
};

/// Enum /Script/Engine.EFunctionInputType
/// Size: 0x01 (1 bytes)
enum class EFunctionInputType : uint8_t
{
	FunctionInput_Scalar                                                             = 0,
	FunctionInput_Vector2                                                            = 1,
	FunctionInput_Vector3                                                            = 2,
	FunctionInput_Vector4                                                            = 3,
	FunctionInput_Texture2D                                                          = 4,
	FunctionInput_TextureCube                                                        = 5,
	FunctionInput_Texture2DArray                                                     = 6,
	FunctionInput_VolumeTexture                                                      = 7,
	FunctionInput_StaticBool                                                         = 8,
	FunctionInput_MaterialAttributes                                                 = 9,
	FunctionInput_TextureExternal                                                    = 10
};

/// Enum /Script/Engine.ENoiseFunction
/// Size: 0x01 (1 bytes)
enum class ENoiseFunction : uint8_t
{
	NOISEFUNCTION_SimplexTex                                                         = 0,
	NOISEFUNCTION_GradientTex                                                        = 1,
	NOISEFUNCTION_GradientTex3D                                                      = 2,
	NOISEFUNCTION_GradientALU                                                        = 3,
	NOISEFUNCTION_ValueALU                                                           = 4,
	NOISEFUNCTION_VoronoiALU                                                         = 5
};

/// Enum /Script/Engine.ERuntimeVirtualTextureTextureAddressMode
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureTextureAddressMode : uint8_t
{
	RVTTA_Clamp                                                                      = 0,
	RVTTA_Wrap                                                                       = 1
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMipValueMode
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureMipValueMode : uint8_t
{
	RVTMVM_None                                                                      = 0,
	RVTMVM_MipLevel                                                                  = 1,
	RVTMVM_MipBias                                                                   = 2
};

/// Enum /Script/Engine.EMaterialSceneAttributeInputMode
/// Size: 0x01 (1 bytes)
enum class EMaterialSceneAttributeInputMode : uint8_t
{
	Coordinates                                                                      = 0,
	OffsetFraction                                                                   = 1
};

/// Enum /Script/Engine.ESpeedTreeLODType
/// Size: 0x01 (1 bytes)
enum class ESpeedTreeLODType : uint8_t
{
	STLOD_Pop                                                                        = 0,
	STLOD_Smooth                                                                     = 1
};

/// Enum /Script/Engine.ESpeedTreeWindType
/// Size: 0x01 (1 bytes)
enum class ESpeedTreeWindType : uint8_t
{
	STW_None                                                                         = 0,
	STW_Fastest                                                                      = 1,
	STW_Fast                                                                         = 2,
	STW_Better                                                                       = 3,
	STW_Best                                                                         = 4,
	STW_Palm                                                                         = 5,
	STW_BestPlus                                                                     = 6
};

/// Enum /Script/Engine.ESpeedTreeGeometryType
/// Size: 0x01 (1 bytes)
enum class ESpeedTreeGeometryType : uint8_t
{
	STG_Branch                                                                       = 0,
	STG_Frond                                                                        = 1,
	STG_Leaf                                                                         = 2,
	STG_FacingLeaf                                                                   = 3,
	STG_Billboard                                                                    = 4
};

/// Enum /Script/Engine.EMaterialExposedTextureProperty
/// Size: 0x01 (1 bytes)
enum class EMaterialExposedTextureProperty : uint8_t
{
	TMTM_TextureSize                                                                 = 0,
	TMTM_TexelSize                                                                   = 1
};

/// Enum /Script/Engine.ETextureMipValueMode
/// Size: 0x01 (1 bytes)
enum class ETextureMipValueMode : uint8_t
{
	TMVM_None                                                                        = 0,
	TMVM_MipLevel                                                                    = 1,
	TMVM_MipBias                                                                     = 2,
	TMVM_Derivative                                                                  = 3
};

/// Enum /Script/Engine.EMaterialVectorCoordTransform
/// Size: 0x01 (1 bytes)
enum class EMaterialVectorCoordTransform : uint8_t
{
	TRANSFORM_Tangent                                                                = 0,
	TRANSFORM_Local                                                                  = 1,
	TRANSFORM_World                                                                  = 2,
	TRANSFORM_View                                                                   = 3,
	TRANSFORM_Camera                                                                 = 4,
	TRANSFORM_ParticleWorld                                                          = 5
};

/// Enum /Script/Engine.EMaterialVectorCoordTransformSource
/// Size: 0x01 (1 bytes)
enum class EMaterialVectorCoordTransformSource : uint8_t
{
	TRANSFORMSOURCE_Tangent                                                          = 0,
	TRANSFORMSOURCE_Local                                                            = 1,
	TRANSFORMSOURCE_World                                                            = 2,
	TRANSFORMSOURCE_View                                                             = 3,
	TRANSFORMSOURCE_Camera                                                           = 4,
	TRANSFORMSOURCE_ParticleWorld                                                    = 5
};

/// Enum /Script/Engine.EMaterialPositionTransformSource
/// Size: 0x01 (1 bytes)
enum class EMaterialPositionTransformSource : uint8_t
{
	TRANSFORMPOSSOURCE_Local                                                         = 0,
	TRANSFORMPOSSOURCE_World                                                         = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld                                               = 2,
	TRANSFORMPOSSOURCE_View                                                          = 3,
	TRANSFORMPOSSOURCE_Camera                                                        = 4,
	TRANSFORMPOSSOURCE_Particle                                                      = 5
};

/// Enum /Script/Engine.EVectorNoiseFunction
/// Size: 0x01 (1 bytes)
enum class EVectorNoiseFunction : uint8_t
{
	VNF_CellnoiseALU                                                                 = 0,
	VNF_VectorALU                                                                    = 1,
	VNF_GradientALU                                                                  = 2,
	VNF_CurlALU                                                                      = 3,
	VNF_VoronoiALU                                                                   = 4
};

/// Enum /Script/Engine.EMaterialExposedViewProperty
/// Size: 0x01 (1 bytes)
enum class EMaterialExposedViewProperty : uint8_t
{
	MEVP_BufferSize                                                                  = 0,
	MEVP_FieldOfView                                                                 = 1,
	MEVP_TanHalfFieldOfView                                                          = 2,
	MEVP_ViewSize                                                                    = 3,
	MEVP_WorldSpaceViewPosition                                                      = 4,
	MEVP_WorldSpaceCameraPosition                                                    = 5,
	MEVP_ViewportOffset                                                              = 6,
	MEVP_TemporalSampleCount                                                         = 7,
	MEVP_TemporalSampleIndex                                                         = 8,
	MEVP_TemporalSampleOffset                                                        = 9,
	MEVP_RuntimeVirtualTextureOutputLevel                                            = 10,
	MEVP_RuntimeVirtualTextureOutputDerivative                                       = 11,
	MEVP_PreExposure                                                                 = 12,
	MEVP_RuntimeVirtualTextureMaxLevel                                               = 13
};

/// Enum /Script/Engine.EWorldPositionIncludedOffsets
/// Size: 0x01 (1 bytes)
enum class EWorldPositionIncludedOffsets : uint8_t
{
	WPT_Default                                                                      = 0,
	WPT_ExcludeAllShaderOffsets                                                      = 1,
	WPT_CameraRelative                                                               = 2,
	WPT_CameraRelativeNoOffsets                                                      = 3
};

/// Enum /Script/Engine.EMaterialFunctionUsage
/// Size: 0x01 (1 bytes)
enum class EMaterialFunctionUsage : uint8_t
{
	Default                                                                          = 0,
	MaterialLayer                                                                    = 1,
	MaterialLayerBlend                                                               = 2
};

/// Enum /Script/Engine.EMaterialUsage
/// Size: 0x01 (1 bytes)
enum class EMaterialUsage : uint8_t
{
	MATUSAGE_SkeletalMesh                                                            = 0,
	MATUSAGE_ParticleSprites                                                         = 1,
	MATUSAGE_BeamTrails                                                              = 2,
	MATUSAGE_MeshParticles                                                           = 3,
	MATUSAGE_StaticLighting                                                          = 4,
	MATUSAGE_MorphTargets                                                            = 5,
	MATUSAGE_SplineMesh                                                              = 6,
	MATUSAGE_InstancedStaticMeshes                                                   = 7,
	MATUSAGE_GeometryCollections                                                     = 8,
	MATUSAGE_Clothing                                                                = 9,
	MATUSAGE_NiagaraSprites                                                          = 10,
	MATUSAGE_NiagaraRibbons                                                          = 11,
	MATUSAGE_NiagaraMeshParticles                                                    = 12,
	MATUSAGE_GeometryCache                                                           = 13,
	MATUSAGE_Water                                                                   = 14,
	MATUSAGE_HairStrands                                                             = 15,
	MATUSAGE_LidarPointCloud                                                         = 16,
	MATUSAGE_VirtualHeightfieldMesh                                                  = 17
};

/// Enum /Script/Engine.EMaterialLayerLinkState
/// Size: 0x01 (1 bytes)
enum class EMaterialLayerLinkState : uint8_t
{
	Uninitialized                                                                    = 0,
	LinkedToParent                                                                   = 1,
	UnlinkedFromParent                                                               = 2,
	NotFromParent                                                                    = 3
};

/// Enum /Script/Engine.EMaterialParameterAssociation
/// Size: 0x01 (1 bytes)
enum class EMaterialParameterAssociation : uint8_t
{
	LayerParameter                                                                   = 0,
	BlendParameter                                                                   = 1,
	GlobalParameter                                                                  = 2
};

/// Enum /Script/Engine.EMaterialMergeType
/// Size: 0x01 (1 bytes)
enum class EMaterialMergeType : uint8_t
{
	MaterialMergeType_Default                                                        = 0,
	MaterialMergeType_Simplygon                                                      = 1
};

/// Enum /Script/Engine.ETextureSizingType
/// Size: 0x01 (1 bytes)
enum class ETextureSizingType : uint8_t
{
	TextureSizingType_UseSingleTextureSize                                           = 0,
	TextureSizingType_UseAutomaticBiasedSizes                                        = 1,
	TextureSizingType_UseManualOverrideTextureSize                                   = 2,
	TextureSizingType_UseSimplygonAutomaticSizing                                    = 3
};

/// Enum /Script/Engine.ESceneTextureId
/// Size: 0x01 (1 bytes)
enum class ESceneTextureId : uint8_t
{
	PPI_SceneColor                                                                   = 0,
	PPI_SceneDepth                                                                   = 1,
	PPI_DiffuseColor                                                                 = 2,
	PPI_SpecularColor                                                                = 3,
	PPI_SubsurfaceColor                                                              = 4,
	PPI_BaseColor                                                                    = 5,
	PPI_Specular                                                                     = 6,
	PPI_Metallic                                                                     = 7,
	PPI_WorldNormal                                                                  = 8,
	PPI_SeparateTranslucency                                                         = 9,
	PPI_Opacity                                                                      = 10,
	PPI_Roughness                                                                    = 11,
	PPI_MaterialAO                                                                   = 12,
	PPI_CustomDepth                                                                  = 13,
	PPI_PostProcessInput0                                                            = 14,
	PPI_PostProcessInput1                                                            = 15,
	PPI_PostProcessInput2                                                            = 16,
	PPI_PostProcessInput3                                                            = 17,
	PPI_PostProcessInput4                                                            = 18,
	PPI_PostProcessInput5                                                            = 19,
	PPI_PostProcessInput6                                                            = 20,
	PPI_DecalMask                                                                    = 21,
	PPI_ShadingModelColor                                                            = 22,
	PPI_ShadingModelID                                                               = 23,
	PPI_AmbientOcclusion                                                             = 24,
	PPI_CustomStencil                                                                = 25,
	PPI_StoredBaseColor                                                              = 26,
	PPI_StoredSpecular                                                               = 27,
	PPI_Velocity                                                                     = 28,
	PPI_WorldTangent                                                                 = 29,
	PPI_Anisotropy                                                                   = 30
};

/// Enum /Script/Engine.EMaterialDomain
/// Size: 0x01 (1 bytes)
enum class EMaterialDomain : uint8_t
{
	MD_Surface                                                                       = 0,
	MD_DeferredDecal                                                                 = 1,
	MD_LightFunction                                                                 = 2,
	MD_Volume                                                                        = 3,
	MD_PostProcess                                                                   = 4,
	MD_UI                                                                            = 5,
	MD_RuntimeVirtualTexture                                                         = 6
};

/// Enum /Script/Engine.EMeshInstancingReplacementMethod
/// Size: 0x01 (1 bytes)
enum class EMeshInstancingReplacementMethod : uint8_t
{
	RemoveOriginalActors                                                             = 0,
	KeepOriginalActorsAsEditorOnly                                                   = 1
};

/// Enum /Script/Engine.EUVOutput
/// Size: 0x01 (1 bytes)
enum class EUVOutput : uint8_t
{
	DoNotOutputChannel                                                               = 0,
	OutputChannel                                                                    = 1
};

/// Enum /Script/Engine.EMeshMergeType
/// Size: 0x01 (1 bytes)
enum class EMeshMergeType : uint8_t
{
	MeshMergeType_Default                                                            = 0,
	MeshMergeType_MergeActor                                                         = 1
};

/// Enum /Script/Engine.EMeshLODSelectionType
/// Size: 0x01 (1 bytes)
enum class EMeshLODSelectionType : uint8_t
{
	AllLODs                                                                          = 0,
	SpecificLOD                                                                      = 1,
	CalculateLOD                                                                     = 2,
	LowestDetailLOD                                                                  = 3
};

/// Enum /Script/Engine.EProxyNormalComputationMethod
/// Size: 0x01 (1 bytes)
enum class EProxyNormalComputationMethod : uint8_t
{
	AngleWeighted                                                                    = 0,
	AreaWeighted                                                                     = 1,
	EqualWeighted                                                                    = 2
};

/// Enum /Script/Engine.ELandscapeCullingPrecision
/// Size: 0x01 (1 bytes)
enum class ELandscapeCullingPrecision : uint8_t
{
	High                                                                             = 0,
	Medium                                                                           = 1,
	Low                                                                              = 2
};

/// Enum /Script/Engine.EStaticMeshReductionTerimationCriterion
/// Size: 0x01 (1 bytes)
enum class EStaticMeshReductionTerimationCriterion : uint8_t
{
	Triangles                                                                        = 0,
	Vertices                                                                         = 1,
	Any                                                                              = 2
};

/// Enum /Script/Engine.EMeshFeatureImportance
/// Size: 0x01 (1 bytes)
enum class EMeshFeatureImportance : uint8_t
{
	Off                                                                              = 0,
	Lowest                                                                           = 1,
	Low                                                                              = 2,
	Normal                                                                           = 3,
	High                                                                             = 4,
	Highest                                                                          = 5
};

/// Enum /Script/Engine.EVertexPaintAxis
/// Size: 0x01 (1 bytes)
enum class EVertexPaintAxis : uint8_t
{
	X                                                                                = 0,
	Y                                                                                = 1,
	Z                                                                                = 2
};

/// Enum /Script/Engine.EMicroTransactionResult
/// Size: 0x01 (1 bytes)
enum class EMicroTransactionResult : uint8_t
{
	MTR_Succeeded                                                                    = 0,
	MTR_Failed                                                                       = 1,
	MTR_Canceled                                                                     = 2,
	MTR_RestoredFromServer                                                           = 3
};

/// Enum /Script/Engine.EMicroTransactionDelegate
/// Size: 0x01 (1 bytes)
enum class EMicroTransactionDelegate : uint8_t
{
	MTD_PurchaseQueryComplete                                                        = 0,
	MTD_PurchaseComplete                                                             = 1
};

/// Enum /Script/Engine.FNavigationSystemRunMode
/// Size: 0x01 (1 bytes)
enum class FNavigationSystemRunMode : uint8_t
{
	InvalidMode                                                                      = 0,
	GameMode                                                                         = 1,
	EditorMode                                                                       = 2,
	SimulationMode                                                                   = 3,
	PIEMode                                                                          = 4,
	InferFromWorldMode                                                               = 5
};

/// Enum /Script/Engine.ENavigationQueryResult
/// Size: 0x01 (1 bytes)
enum class ENavigationQueryResult : uint8_t
{
	Invalid                                                                          = 0,
	Error                                                                            = 1,
	Fail                                                                             = 2,
	Success                                                                          = 3
};

/// Enum /Script/Engine.ENavPathEvent
/// Size: 0x01 (1 bytes)
enum class ENavPathEvent : uint8_t
{
	Cleared                                                                          = 0,
	NewPath                                                                          = 1,
	UpdatedDueToGoalMoved                                                            = 2,
	UpdatedDueToNavigationChanged                                                    = 3,
	Invalidated                                                                      = 4,
	RePathFailed                                                                     = 5,
	MetaPathUpdate                                                                   = 6,
	Custom                                                                           = 7
};

/// Enum /Script/Engine.ENavDataGatheringModeConfig
/// Size: 0x01 (1 bytes)
enum class ENavDataGatheringModeConfig : uint8_t
{
	Invalid                                                                          = 0,
	Instant                                                                          = 1,
	Lazy                                                                             = 2
};

/// Enum /Script/Engine.ENavDataGatheringMode
/// Size: 0x01 (1 bytes)
enum class ENavDataGatheringMode : uint8_t
{
	Default                                                                          = 0,
	Instant                                                                          = 1,
	Lazy                                                                             = 2
};

/// Enum /Script/Engine.ENavigationOptionFlag
/// Size: 0x01 (1 bytes)
enum class ENavigationOptionFlag : uint8_t
{
	Default                                                                          = 0,
	Enable                                                                           = 1,
	Disable                                                                          = 2
};

/// Enum /Script/Engine.ENavLinkDirection
/// Size: 0x01 (1 bytes)
enum class ENavLinkDirection : uint8_t
{
	BothWays                                                                         = 0,
	LeftToRight                                                                      = 1,
	RightToLeft                                                                      = 2
};

/// Enum /Script/Engine.EFastArraySerializerDeltaFlags
/// Size: 0x01 (1 bytes)
enum class EFastArraySerializerDeltaFlags : uint8_t
{
	None                                                                             = 0,
	HasBeenSerialized                                                                = 1,
	HasDeltaBeenRequested                                                            = 2,
	IsUsingDeltaSerialization                                                        = 4
};

/// Enum /Script/Engine.EEmitterRenderMode
/// Size: 0x01 (1 bytes)
enum class EEmitterRenderMode : uint8_t
{
	ERM_Normal                                                                       = 0,
	ERM_Point                                                                        = 1,
	ERM_Cross                                                                        = 2,
	ERM_LightsOnly                                                                   = 3,
	ERM_None                                                                         = 4
};

/// Enum /Script/Engine.EParticleSubUVInterpMethod
/// Size: 0x01 (1 bytes)
enum class EParticleSubUVInterpMethod : uint8_t
{
	PSUVIM_None                                                                      = 0,
	PSUVIM_Linear                                                                    = 1,
	PSUVIM_Linear_Blend                                                              = 2,
	PSUVIM_Random                                                                    = 3,
	PSUVIM_Random_Blend                                                              = 4
};

/// Enum /Script/Engine.EParticleBurstMethod
/// Size: 0x01 (1 bytes)
enum class EParticleBurstMethod : uint8_t
{
	EPBM_Instant                                                                     = 0,
	EPBM_Interpolated                                                                = 1
};

/// Enum /Script/Engine.EParticleSystemInsignificanceReaction
/// Size: 0x01 (1 bytes)
enum class EParticleSystemInsignificanceReaction : uint8_t
{
	Auto                                                                             = 0,
	Complete                                                                         = 1,
	DisableTick                                                                      = 2,
	DisableTickAndKill                                                               = 3,
	Num                                                                              = 4
};

/// Enum /Script/Engine.EParticleSignificanceLevel
/// Size: 0x01 (1 bytes)
enum class EParticleSignificanceLevel : uint8_t
{
	Low                                                                              = 0,
	Medium                                                                           = 1,
	High                                                                             = 2,
	Critical                                                                         = 3,
	Num                                                                              = 4
};

/// Enum /Script/Engine.EParticleDetailMode
/// Size: 0x01 (1 bytes)
enum class EParticleDetailMode : uint8_t
{
	PDM_Low                                                                          = 0,
	PDM_Medium                                                                       = 1,
	PDM_High                                                                         = 2
};

/// Enum /Script/Engine.EParticleSourceSelectionMethod
/// Size: 0x01 (1 bytes)
enum class EParticleSourceSelectionMethod : uint8_t
{
	EPSSM_Random                                                                     = 0,
	EPSSM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.EModuleType
/// Size: 0x01 (1 bytes)
enum class EModuleType : uint8_t
{
	EPMT_General                                                                     = 0,
	EPMT_TypeData                                                                    = 1,
	EPMT_Beam                                                                        = 2,
	EPMT_Trail                                                                       = 3,
	EPMT_Spawn                                                                       = 4,
	EPMT_Required                                                                    = 5,
	EPMT_Event                                                                       = 6,
	EPMT_Light                                                                       = 7,
	EPMT_SubUV                                                                       = 8
};

/// Enum /Script/Engine.EAttractorParticleSelectionMethod
/// Size: 0x01 (1 bytes)
enum class EAttractorParticleSelectionMethod : uint8_t
{
	EAPSM_Random                                                                     = 0,
	EAPSM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.Beam2SourceTargetTangentMethod
/// Size: 0x01 (1 bytes)
enum class Beam2SourceTargetTangentMethod : uint8_t
{
	PEB2STTM_Direct                                                                  = 0,
	PEB2STTM_UserSet                                                                 = 1,
	PEB2STTM_Distribution                                                            = 2,
	PEB2STTM_Emitter                                                                 = 3
};

/// Enum /Script/Engine.Beam2SourceTargetMethod
/// Size: 0x01 (1 bytes)
enum class Beam2SourceTargetMethod : uint8_t
{
	PEB2STM_Default                                                                  = 0,
	PEB2STM_UserSet                                                                  = 1,
	PEB2STM_Emitter                                                                  = 2,
	PEB2STM_Particle                                                                 = 3,
	PEB2STM_Actor                                                                    = 4
};

/// Enum /Script/Engine.BeamModifierType
/// Size: 0x01 (1 bytes)
enum class BeamModifierType : uint8_t
{
	PEB2MT_Source                                                                    = 0,
	PEB2MT_Target                                                                    = 1
};

/// Enum /Script/Engine.EParticleCameraOffsetUpdateMethod
/// Size: 0x01 (1 bytes)
enum class EParticleCameraOffsetUpdateMethod : uint8_t
{
	EPCOUM_DirectSet                                                                 = 0,
	EPCOUM_Additive                                                                  = 1,
	EPCOUM_Scalar                                                                    = 2
};

/// Enum /Script/Engine.EParticleCollisionComplete
/// Size: 0x01 (1 bytes)
enum class EParticleCollisionComplete : uint8_t
{
	EPCC_Kill                                                                        = 0,
	EPCC_Freeze                                                                      = 1,
	EPCC_HaltCollisions                                                              = 2,
	EPCC_FreezeTranslation                                                           = 3,
	EPCC_FreezeRotation                                                              = 4,
	EPCC_FreezeMovement                                                              = 5
};

/// Enum /Script/Engine.EParticleCollisionResponse
/// Size: 0x01 (1 bytes)
enum class EParticleCollisionResponse : uint8_t
{
	Bounce                                                                           = 0,
	Stop                                                                             = 1,
	Kill                                                                             = 2
};

/// Enum /Script/Engine.ELocationBoneSocketSelectionMethod
/// Size: 0x01 (1 bytes)
enum class ELocationBoneSocketSelectionMethod : uint8_t
{
	BONESOCKETSEL_Sequential                                                         = 0,
	BONESOCKETSEL_Random                                                             = 1
};

/// Enum /Script/Engine.ELocationBoneSocketSource
/// Size: 0x01 (1 bytes)
enum class ELocationBoneSocketSource : uint8_t
{
	BONESOCKETSOURCE_Bones                                                           = 0,
	BONESOCKETSOURCE_Sockets                                                         = 1
};

/// Enum /Script/Engine.ELocationEmitterSelectionMethod
/// Size: 0x01 (1 bytes)
enum class ELocationEmitterSelectionMethod : uint8_t
{
	ELESM_Random                                                                     = 0,
	ELESM_Sequential                                                                 = 1
};

/// Enum /Script/Engine.CylinderHeightAxis
/// Size: 0x01 (1 bytes)
enum class CylinderHeightAxis : uint8_t
{
	PMLPC_HEIGHTAXIS_X                                                               = 0,
	PMLPC_HEIGHTAXIS_Y                                                               = 1,
	PMLPC_HEIGHTAXIS_Z                                                               = 2
};

/// Enum /Script/Engine.ELocationSkelVertSurfaceSource
/// Size: 0x01 (1 bytes)
enum class ELocationSkelVertSurfaceSource : uint8_t
{
	VERTSURFACESOURCE_Vert                                                           = 0,
	VERTSURFACESOURCE_Surface                                                        = 1
};

/// Enum /Script/Engine.EOrbitChainMode
/// Size: 0x01 (1 bytes)
enum class EOrbitChainMode : uint8_t
{
	EOChainMode_Add                                                                  = 0,
	EOChainMode_Scale                                                                = 1,
	EOChainMode_Link                                                                 = 2
};

/// Enum /Script/Engine.EParticleAxisLock
/// Size: 0x01 (1 bytes)
enum class EParticleAxisLock : uint8_t
{
	EPAL_NONE                                                                        = 0,
	EPAL_X                                                                           = 1,
	EPAL_Y                                                                           = 2,
	EPAL_Z                                                                           = 3,
	EPAL_NEGATIVE_X                                                                  = 4,
	EPAL_NEGATIVE_Y                                                                  = 5,
	EPAL_NEGATIVE_Z                                                                  = 6,
	EPAL_ROTATE_X                                                                    = 7,
	EPAL_ROTATE_Y                                                                    = 8,
	EPAL_ROTATE_Z                                                                    = 9
};

/// Enum /Script/Engine.EEmitterDynamicParameterValue
/// Size: 0x01 (1 bytes)
enum class EEmitterDynamicParameterValue : uint8_t
{
	EDPV_UserSet                                                                     = 0,
	EDPV_AutoSet                                                                     = 1,
	EDPV_VelocityX                                                                   = 2,
	EDPV_VelocityY                                                                   = 3,
	EDPV_VelocityZ                                                                   = 4,
	EDPV_VelocityMag                                                                 = 5
};

/// Enum /Script/Engine.EEmitterNormalsMode
/// Size: 0x01 (1 bytes)
enum class EEmitterNormalsMode : uint8_t
{
	ENM_CameraFacing                                                                 = 0,
	ENM_Spherical                                                                    = 1,
	ENM_Cylindrical                                                                  = 2
};

/// Enum /Script/Engine.EParticleSortMode
/// Size: 0x01 (1 bytes)
enum class EParticleSortMode : uint8_t
{
	PSORTMODE_None                                                                   = 0,
	PSORTMODE_ViewProjDepth                                                          = 1,
	PSORTMODE_DistanceToView                                                         = 2,
	PSORTMODE_Age_OldestFirst                                                        = 3,
	PSORTMODE_Age_NewestFirst                                                        = 4
};

/// Enum /Script/Engine.EParticleUVFlipMode
/// Size: 0x01 (1 bytes)
enum class EParticleUVFlipMode : uint8_t
{
	None                                                                             = 0,
	FlipUV                                                                           = 1,
	FlipUOnly                                                                        = 2,
	FlipVOnly                                                                        = 3,
	RandomFlipUV                                                                     = 4,
	RandomFlipUOnly                                                                  = 5,
	RandomFlipVOnly                                                                  = 6,
	RandomFlipUVIndependent                                                          = 7
};

/// Enum /Script/Engine.ETrail2SourceMethod
/// Size: 0x01 (1 bytes)
enum class ETrail2SourceMethod : uint8_t
{
	PET2SRCM_Default                                                                 = 0,
	PET2SRCM_Particle                                                                = 1,
	PET2SRCM_Actor                                                                   = 2
};

/// Enum /Script/Engine.EBeamTaperMethod
/// Size: 0x01 (1 bytes)
enum class EBeamTaperMethod : uint8_t
{
	PEBTM_None                                                                       = 0,
	PEBTM_Full                                                                       = 1,
	PEBTM_Partial                                                                    = 2
};

/// Enum /Script/Engine.EBeam2Method
/// Size: 0x01 (1 bytes)
enum class EBeam2Method : uint8_t
{
	PEB2M_Distance                                                                   = 0,
	PEB2M_Target                                                                     = 1,
	PEB2M_Branch                                                                     = 2
};

/// Enum /Script/Engine.EMeshCameraFacingOptions
/// Size: 0x01 (1 bytes)
enum class EMeshCameraFacingOptions : uint8_t
{
	XAxisFacing_NoUp                                                                 = 0,
	XAxisFacing_ZUp                                                                  = 1,
	XAxisFacing_NegativeZUp                                                          = 2,
	XAxisFacing_YUp                                                                  = 3,
	XAxisFacing_NegativeYUp                                                          = 4,
	LockedAxis_ZAxisFacing                                                           = 5,
	LockedAxis_NegativeZAxisFacing                                                   = 6,
	LockedAxis_YAxisFacing                                                           = 7,
	LockedAxis_NegativeYAxisFacing                                                   = 8,
	VelocityAligned_ZAxisFacing                                                      = 9,
	VelocityAligned_NegativeZAxisFacing                                              = 10,
	VelocityAligned_YAxisFacing                                                      = 11,
	VelocityAligned_NegativeYAxisFacing                                              = 12
};

/// Enum /Script/Engine.EMeshCameraFacingUpAxis
/// Size: 0x01 (1 bytes)
enum class EMeshCameraFacingUpAxis : uint8_t
{
	CameraFacing_NoneUP                                                              = 0,
	CameraFacing_ZUp                                                                 = 1,
	CameraFacing_NegativeZUp                                                         = 2,
	CameraFacing_YUp                                                                 = 3,
	CameraFacing_NegativeYUp                                                         = 4
};

/// Enum /Script/Engine.EMeshScreenAlignment
/// Size: 0x01 (1 bytes)
enum class EMeshScreenAlignment : uint8_t
{
	PSMA_MeshFaceCameraWithRoll                                                      = 0,
	PSMA_MeshFaceCameraWithSpin                                                      = 1,
	PSMA_MeshFaceCameraWithLockedAxis                                                = 2
};

/// Enum /Script/Engine.ETrailsRenderAxisOption
/// Size: 0x01 (1 bytes)
enum class ETrailsRenderAxisOption : uint8_t
{
	Trails_CameraUp                                                                  = 0,
	Trails_SourceUp                                                                  = 1,
	Trails_WorldUp                                                                   = 2
};

/// Enum /Script/Engine.EParticleScreenAlignment
/// Size: 0x01 (1 bytes)
enum class EParticleScreenAlignment : uint8_t
{
	PSA_FacingCameraPosition                                                         = 0,
	PSA_Square                                                                       = 1,
	PSA_Rectangle                                                                    = 2,
	PSA_Velocity                                                                     = 3,
	PSA_AwayFromCenter                                                               = 4,
	PSA_TypeSpecific                                                                 = 5,
	PSA_FacingCameraDistanceBlend                                                    = 6
};

/// Enum /Script/Engine.EParticleSystemOcclusionBoundsMethod
/// Size: 0x01 (1 bytes)
enum class EParticleSystemOcclusionBoundsMethod : uint8_t
{
	EPSOBM_None                                                                      = 0,
	EPSOBM_ParticleBounds                                                            = 1,
	EPSOBM_CustomBounds                                                              = 2
};

/// Enum /Script/Engine.ParticleSystemLODMethod
/// Size: 0x01 (1 bytes)
enum class ParticleSystemLODMethod : uint8_t
{
	PARTICLESYSTEMLODMETHOD_Automatic                                                = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                                                = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic                                        = 2
};

/// Enum /Script/Engine.EParticleSystemUpdateMode
/// Size: 0x01 (1 bytes)
enum class EParticleSystemUpdateMode : uint8_t
{
	EPSUM_RealTime                                                                   = 0,
	EPSUM_FixedTime                                                                  = 1
};

/// Enum /Script/Engine.EParticleEventType
/// Size: 0x01 (1 bytes)
enum class EParticleEventType : uint8_t
{
	EPET_Any                                                                         = 0,
	EPET_Spawn                                                                       = 1,
	EPET_Death                                                                       = 2,
	EPET_Collision                                                                   = 3,
	EPET_Burst                                                                       = 4,
	EPET_Blueprint                                                                   = 5
};

/// Enum /Script/Engine.ParticleReplayState
/// Size: 0x01 (1 bytes)
enum class ParticleReplayState : uint8_t
{
	PRS_Disabled                                                                     = 0,
	PRS_Capturing                                                                    = 1,
	PRS_Replaying                                                                    = 2
};

/// Enum /Script/Engine.EParticleSysParamType
/// Size: 0x01 (1 bytes)
enum class EParticleSysParamType : uint8_t
{
	PSPT_None                                                                        = 0,
	PSPT_Scalar                                                                      = 1,
	PSPT_ScalarRand                                                                  = 2,
	PSPT_Vector                                                                      = 3,
	PSPT_VectorRand                                                                  = 4,
	PSPT_Color                                                                       = 5,
	PSPT_Actor                                                                       = 6,
	PSPT_Material                                                                    = 7,
	PSPT_VectorUnitRand                                                              = 8
};

/// Enum /Script/Engine.ESettingsLockedAxis
/// Size: 0x01 (1 bytes)
enum class ESettingsLockedAxis : uint8_t
{
	None                                                                             = 0,
	X                                                                                = 1,
	Y                                                                                = 2,
	Z                                                                                = 3,
	Invalid                                                                          = 4
};

/// Enum /Script/Engine.ESettingsDOF
/// Size: 0x01 (1 bytes)
enum class ESettingsDOF : uint8_t
{
	Full3D                                                                           = 0,
	YZPlane                                                                          = 1,
	XZPlane                                                                          = 2,
	XYPlane                                                                          = 3
};

/// Enum /Script/Engine.EViewTargetBlendFunction
/// Size: 0x01 (1 bytes)
enum class EViewTargetBlendFunction : uint8_t
{
	VTBlend_Linear                                                                   = 0,
	VTBlend_Cubic                                                                    = 1,
	VTBlend_EaseIn                                                                   = 2,
	VTBlend_EaseOut                                                                  = 3,
	VTBlend_EaseInOut                                                                = 4
};

/// Enum /Script/Engine.EDynamicForceFeedbackAction
/// Size: 0x01 (1 bytes)
enum class EDynamicForceFeedbackAction : uint8_t
{
	Start                                                                            = 0,
	Update                                                                           = 1,
	Stop                                                                             = 2
};

/// Enum /Script/Engine.ERendererStencilMask
/// Size: 0x01 (1 bytes)
enum class ERendererStencilMask : uint8_t
{
	ERSM_Default                                                                     = 0,
	ERSM                                                                             = 1,
	ERSM3                                                                            = 2,
	ERSM4                                                                            = 3,
	ERSM5                                                                            = 4,
	ERSM6                                                                            = 5,
	ERSM7                                                                            = 6,
	ERSM8                                                                            = 7,
	ERSM9                                                                            = 8,
	ERSM10                                                                           = 9
};

/// Enum /Script/Engine.EHasCustomNavigableGeometry
/// Size: 0x01 (1 bytes)
enum class EHasCustomNavigableGeometry : uint8_t
{
	No                                                                               = 0,
	Yes                                                                              = 1,
	EvenIfNotCollidable                                                              = 2,
	DontExport                                                                       = 3
};

/// Enum /Script/Engine.ECanBeCharacterBase
/// Size: 0x01 (1 bytes)
enum class ECanBeCharacterBase : uint8_t
{
	ECB_No                                                                           = 0,
	ECB_Yes                                                                          = 1,
	ECB_Owner                                                                        = 2
};

/// Enum /Script/Engine.EQuarztQuantizationReference
/// Size: 0x01 (1 bytes)
enum class EQuarztQuantizationReference : uint8_t
{
	BarRelative                                                                      = 0,
	TransportRelative                                                                = 1,
	CurrentTimeRelative                                                              = 2,
	Count                                                                            = 3
};

/// Enum /Script/Engine.EQuartzDelegateType
/// Size: 0x01 (1 bytes)
enum class EQuartzDelegateType : uint8_t
{
	MetronomeTick                                                                    = 0,
	CommandEvent                                                                     = 1,
	Count                                                                            = 2
};

/// Enum /Script/Engine.EQuartzTimeSignatureQuantization
/// Size: 0x01 (1 bytes)
enum class EQuartzTimeSignatureQuantization : uint8_t
{
	HalfNote                                                                         = 0,
	QuarterNote                                                                      = 1,
	EighthNote                                                                       = 2,
	SixteenthNote                                                                    = 3,
	ThirtySecondNote                                                                 = 4,
	Count                                                                            = 5
};

/// Enum /Script/Engine.ERichCurveExtrapolation
/// Size: 0x01 (1 bytes)
enum class ERichCurveExtrapolation : uint8_t
{
	RCCE_Cycle                                                                       = 0,
	RCCE_CycleWithOffset                                                             = 1,
	RCCE_Oscillate                                                                   = 2,
	RCCE_Linear                                                                      = 3,
	RCCE_Constant                                                                    = 4,
	RCCE_None                                                                        = 5
};

/// Enum /Script/Engine.ERichCurveInterpMode
/// Size: 0x01 (1 bytes)
enum class ERichCurveInterpMode : uint8_t
{
	RCIM_Linear                                                                      = 0,
	RCIM_Constant                                                                    = 1,
	RCIM_Cubic                                                                       = 2,
	RCIM_None                                                                        = 3
};

/// Enum /Script/Engine.EMobileReflectionCompression
/// Size: 0x01 (1 bytes)
enum class EMobileReflectionCompression : uint8_t
{
	Default                                                                          = 0,
	On                                                                               = 1,
	Off                                                                              = 2
};

/// Enum /Script/Engine.EReflectionSourceType
/// Size: 0x01 (1 bytes)
enum class EReflectionSourceType : uint8_t
{
	CapturedScene                                                                    = 0,
	SpecifiedCubemap                                                                 = 1
};

/// Enum /Script/Engine.EDefaultBackBufferPixelFormat
/// Size: 0x01 (1 bytes)
enum class EDefaultBackBufferPixelFormat : uint8_t
{
	DBBPF_B8G8R8A8                                                                   = 0,
	DBBPF_A16B16G16R16_DEPRECATED                                                    = 1,
	DBBPF_FloatRGB_DEPRECATED                                                        = 2,
	DBBPF_FloatRGBA                                                                  = 3,
	DBBPF_A2B10G10R10                                                                = 4
};

/// Enum /Script/Engine.EAutoExposureMethodUI
/// Size: 0x01 (1 bytes)
enum class EAutoExposureMethodUI : uint8_t
{
	AEM_Histogram                                                                    = 0,
	AEM_Basic                                                                        = 1,
	AEM_Manual                                                                       = 2
};

/// Enum /Script/Engine.EAlphaChannelMode
/// Size: 0x01 (1 bytes)
enum class EAlphaChannelMode : uint8_t
{
	Disabled                                                                         = 0,
	LinearColorSpaceOnly                                                             = 1,
	AllowThroughTonemapper                                                           = 2
};

/// Enum /Script/Engine.EEarlyZPass
/// Size: 0x01 (1 bytes)
enum class EEarlyZPass : uint8_t
{
	None                                                                             = 0,
	OpaqueOnly                                                                       = 1,
	OpaqueAndMasked                                                                  = 2,
	Auto                                                                             = 3
};

/// Enum /Script/Engine.ECustomDepthStencil
/// Size: 0x01 (1 bytes)
enum class ECustomDepthStencil : uint8_t
{
	Disabled                                                                         = 0,
	Enabled                                                                          = 1,
	EnabledOnDemand                                                                  = 2,
	EnabledWithStencil                                                               = 3
};

/// Enum /Script/Engine.EMobileMSAASampleCount
/// Size: 0x01 (1 bytes)
enum class EMobileMSAASampleCount : uint8_t
{
	One                                                                              = 1,
	Two                                                                              = 2,
	Four                                                                             = 4,
	Eight                                                                            = 8
};

/// Enum /Script/Engine.ECompositingSampleCount
/// Size: 0x01 (1 bytes)
enum class ECompositingSampleCount : uint8_t
{
	One                                                                              = 1,
	Two                                                                              = 2,
	Four                                                                             = 4,
	Eight                                                                            = 8
};

/// Enum /Script/Engine.EClearSceneOptions
/// Size: 0x01 (1 bytes)
enum class EClearSceneOptions : uint8_t
{
	NoClear                                                                          = 0,
	HardwareClear                                                                    = 1,
	QuadAtMaxZ                                                                       = 2
};

/// Enum /Script/Engine.EReporterLineStyle
/// Size: 0x01 (1 bytes)
enum class EReporterLineStyle : uint8_t
{
	Line                                                                             = 0,
	Dash                                                                             = 1
};

/// Enum /Script/Engine.ELegendPosition
/// Size: 0x01 (1 bytes)
enum class ELegendPosition : uint8_t
{
	Outside                                                                          = 0,
	Inside                                                                           = 1
};

/// Enum /Script/Engine.EGraphDataStyle
/// Size: 0x01 (1 bytes)
enum class EGraphDataStyle : uint8_t
{
	Lines                                                                            = 0,
	Filled                                                                           = 1
};

/// Enum /Script/Engine.EGraphAxisStyle
/// Size: 0x01 (1 bytes)
enum class EGraphAxisStyle : uint8_t
{
	Lines                                                                            = 0,
	Notches                                                                          = 1,
	Grid                                                                             = 2
};

/// Enum /Script/Engine.ReverbPreset
/// Size: 0x01 (1 bytes)
enum class ReverbPreset : uint8_t
{
	REVERB_Default                                                                   = 0,
	REVERB_Bathroom                                                                  = 1,
	REVERB_StoneRoom                                                                 = 2,
	REVERB_Auditorium                                                                = 3,
	REVERB_ConcertHall                                                               = 4,
	REVERB_Cave                                                                      = 5,
	REVERB_Hallway                                                                   = 6,
	REVERB_StoneCorridor                                                             = 7,
	REVERB_Alley                                                                     = 8,
	REVERB_Forest                                                                    = 9,
	REVERB_City                                                                      = 10,
	REVERB_Mountains                                                                 = 11,
	REVERB_Quarry                                                                    = 12,
	REVERB_Plain                                                                     = 13,
	REVERB_ParkingLot                                                                = 14,
	REVERB_SewerPipe                                                                 = 15,
	REVERB_Underwater                                                                = 16,
	REVERB_SmallRoom                                                                 = 17,
	REVERB_MediumRoom                                                                = 18,
	REVERB_LargeRoom                                                                 = 19,
	REVERB_MediumHall                                                                = 20,
	REVERB_LargeHall                                                                 = 21,
	REVERB_Plate                                                                     = 22
};

/// Enum /Script/Engine.ERichCurveKeyTimeCompressionFormat
/// Size: 0x01 (1 bytes)
enum class ERichCurveKeyTimeCompressionFormat : uint8_t
{
	RCKTCF_uint16                                                                    = 0,
	RCKTCF_float32                                                                   = 1
};

/// Enum /Script/Engine.ERichCurveCompressionFormat
/// Size: 0x01 (1 bytes)
enum class ERichCurveCompressionFormat : uint8_t
{
	RCCF_Empty                                                                       = 0,
	RCCF_Constant                                                                    = 1,
	RCCF_Linear                                                                      = 2,
	RCCF_Cubic                                                                       = 3,
	RCCF_Mixed                                                                       = 4,
	RCCF_Weighted                                                                    = 5
};

/// Enum /Script/Engine.ERichCurveTangentWeightMode
/// Size: 0x01 (1 bytes)
enum class ERichCurveTangentWeightMode : uint8_t
{
	RCTWM_WeightedNone                                                               = 0,
	RCTWM_WeightedArrive                                                             = 1,
	RCTWM_WeightedLeave                                                              = 2,
	RCTWM_WeightedBoth                                                               = 3
};

/// Enum /Script/Engine.ERichCurveTangentMode
/// Size: 0x01 (1 bytes)
enum class ERichCurveTangentMode : uint8_t
{
	RCTM_Auto                                                                        = 0,
	RCTM_User                                                                        = 1,
	RCTM_Break                                                                       = 2,
	RCTM_None                                                                        = 3
};

/// Enum /Script/Engine.EConstraintTransform
/// Size: 0x01 (1 bytes)
enum class EConstraintTransform : uint8_t
{
	Absolute                                                                         = 0,
	Relative                                                                         = 1
};

/// Enum /Script/Engine.EControlConstraint
/// Size: 0x01 (1 bytes)
enum class EControlConstraint : uint8_t
{
	Orientation                                                                      = 0,
	Translation                                                                      = 1
};

/// Enum /Script/Engine.ERootMotionFinishVelocityMode
/// Size: 0x01 (1 bytes)
enum class ERootMotionFinishVelocityMode : uint8_t
{
	MaintainLastRootMotionVelocity                                                   = 0,
	SetVelocity                                                                      = 1,
	ClampVelocity                                                                    = 2
};

/// Enum /Script/Engine.ERootMotionSourceSettingsFlags
/// Size: 0x01 (1 bytes)
enum class ERootMotionSourceSettingsFlags : uint8_t
{
	UseSensitiveLiftoffCheck                                                         = 1,
	DisablePartialEndTick                                                            = 2,
	IgnoreZAccumulate                                                                = 4
};

/// Enum /Script/Engine.ERootMotionSourceStatusFlags
/// Size: 0x01 (1 bytes)
enum class ERootMotionSourceStatusFlags : uint8_t
{
	Prepared                                                                         = 1,
	Finished                                                                         = 2,
	MarkedForRemoval                                                                 = 4
};

/// Enum /Script/Engine.ERootMotionAccumulateMode
/// Size: 0x01 (1 bytes)
enum class ERootMotionAccumulateMode : uint8_t
{
	Override                                                                         = 0,
	Additive                                                                         = 1
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMainPassType
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureMainPassType : uint8_t
{
	Never                                                                            = 0,
	Exclusive                                                                        = 1,
	Always                                                                           = 2
};

/// Enum /Script/Engine.ERuntimeVirtualTextureMaterialType
/// Size: 0x01 (1 bytes)
enum class ERuntimeVirtualTextureMaterialType : uint8_t
{
	BaseColor                                                                        = 0,
	BaseColor_Normal_DEPRECATED                                                      = 1,
	BaseColor_Normal_Specular                                                        = 2,
	BaseColor_Normal_Specular_YCoCg                                                  = 3,
	BaseColor_Normal_Specular_Mask_YCoCg                                             = 4,
	WorldHeight                                                                      = 5,
	Count                                                                            = 6
};

/// Enum /Script/Engine.ESBSkyAtmosphereTransformMode
/// Size: 0x01 (1 bytes)
enum class ESBSkyAtmosphereTransformMode : uint8_t
{
	SBPlanetTopAtAbsoluteWorldOrigin                                                 = 0,
	SBPlanetTopAtComponentTransform                                                  = 1,
	SBPlanetCenterAtComponentTransform                                               = 2
};

/// Enum /Script/Engine.EMobilePixelProjectedReflectionQuality
/// Size: 0x01 (1 bytes)
enum class EMobilePixelProjectedReflectionQuality : uint8_t
{
	Disabled                                                                         = 0,
	BestPerformance                                                                  = 1,
	BetterQuality                                                                    = 2,
	BestQuality                                                                      = 3
};

/// Enum /Script/Engine.EMobilePlanarReflectionMode
/// Size: 0x01 (1 bytes)
enum class EMobilePlanarReflectionMode : uint8_t
{
	Usual                                                                            = 0,
	MobilePPRExclusive                                                               = 1,
	MobilePPR                                                                        = 2
};

/// Enum /Script/Engine.EReflectedAndRefractedRayTracedShadows
/// Size: 0x01 (1 bytes)
enum class EReflectedAndRefractedRayTracedShadows : uint8_t
{
	Disabled                                                                         = 0,
	Hard_shadows                                                                     = 1,
	Area_shadows                                                                     = 2
};

/// Enum /Script/Engine.ERayTracingGlobalIlluminationType
/// Size: 0x01 (1 bytes)
enum class ERayTracingGlobalIlluminationType : uint8_t
{
	Disabled                                                                         = 0,
	BruteForce                                                                       = 1,
	FinalGather                                                                      = 2
};

/// Enum /Script/Engine.ETranslucencyType
/// Size: 0x01 (1 bytes)
enum class ETranslucencyType : uint8_t
{
	Raster                                                                           = 0,
	RayTracing                                                                       = 1
};

/// Enum /Script/Engine.EReflectionsType
/// Size: 0x01 (1 bytes)
enum class EReflectionsType : uint8_t
{
	ScreenSpace                                                                      = 0,
	RayTracing                                                                       = 1
};

/// Enum /Script/Engine.ELightUnits
/// Size: 0x01 (1 bytes)
enum class ELightUnits : uint8_t
{
	Unitless                                                                         = 0,
	Candelas                                                                         = 1,
	Lumens                                                                           = 2
};

/// Enum /Script/Engine.EBloomMethod
/// Size: 0x01 (1 bytes)
enum class EBloomMethod : uint8_t
{
	BM_SOG                                                                           = 0,
	BM_FFT                                                                           = 1
};

/// Enum /Script/Engine.EAutoExposureMethod
/// Size: 0x01 (1 bytes)
enum class EAutoExposureMethod : uint8_t
{
	AEM_Histogram                                                                    = 0,
	AEM_Basic                                                                        = 1,
	AEM_Manual                                                                       = 2
};

/// Enum /Script/Engine.EAntiAliasingMethod
/// Size: 0x01 (1 bytes)
enum class EAntiAliasingMethod : uint8_t
{
	AAM_None                                                                         = 0,
	AAM_FXAA                                                                         = 1,
	AAM_TemporalAA                                                                   = 2,
	AAM_MSAA                                                                         = 3
};

/// Enum /Script/Engine.EDepthOfFieldMethod
/// Size: 0x01 (1 bytes)
enum class EDepthOfFieldMethod : uint8_t
{
	DOFM_BokehDOF                                                                    = 0,
	DOFM_Gaussian                                                                    = 1,
	DOFM_CircleDOF                                                                   = 2
};

/// Enum /Script/Engine.EFSRUpscaleQuality
/// Size: 0x01 (1 bytes)
enum class EFSRUpscaleQuality : uint8_t
{
	Performance                                                                      = 0,
	Balanced                                                                         = 1,
	Quality                                                                          = 2,
	Ultra                                                                            = 3,
	Ultra2                                                                           = 4,
	Ultra3                                                                           = 5
};

/// Enum /Script/Engine.ESceneCapturePrimitiveRenderMode
/// Size: 0x01 (1 bytes)
enum class ESceneCapturePrimitiveRenderMode : uint8_t
{
	PRM_LegacySceneCapture                                                           = 0,
	PRM_RenderScenePrimitives                                                        = 1,
	PRM_UseShowOnlyList                                                              = 2
};

/// Enum /Script/Engine.EMaterialProperty
/// Size: 0x01 (1 bytes)
enum class EMaterialProperty : uint8_t
{
	MP_EmissiveColor                                                                 = 0,
	MP_Opacity                                                                       = 1,
	MP_OpacityMask                                                                   = 2,
	MP_DiffuseColor                                                                  = 3,
	MP_SpecularColor                                                                 = 4,
	MP_BaseColor                                                                     = 5,
	MP_Metallic                                                                      = 6,
	MP_Specular                                                                      = 7,
	MP_Roughness                                                                     = 8,
	MP_Anisotropy                                                                    = 9,
	MP_Normal                                                                        = 10,
	MP_Tangent                                                                       = 11,
	MP_WorldPositionOffset                                                           = 12,
	MP_WorldDisplacement                                                             = 13,
	MP_TessellationMultiplier                                                        = 14,
	MP_SubsurfaceColor                                                               = 15,
	MP_CustomData0                                                                   = 16,
	MP_CustomData1                                                                   = 17,
	MP_AmbientOcclusion                                                              = 18,
	MP_Refraction                                                                    = 19,
	MP_CustomizedUVs0                                                                = 20,
	MP_CustomizedUVs1                                                                = 21,
	MP_CustomizedUVs2                                                                = 22,
	MP_CustomizedUVs3                                                                = 23,
	MP_CustomizedUVs4                                                                = 24,
	MP_CustomizedUVs5                                                                = 25,
	MP_CustomizedUVs6                                                                = 26,
	MP_CustomizedUVs7                                                                = 27,
	MP_PixelDepthOffset                                                              = 28,
	MP_ShadingModel                                                                  = 29,
	MP_HeightFogScale                                                                = 30,
	MP_MaterialAttributes                                                            = 31,
	MP_CustomOutput                                                                  = 32
};

/// Enum /Script/Engine.ESkinCacheDefaultBehavior
/// Size: 0x01 (1 bytes)
enum class ESkinCacheDefaultBehavior : uint8_t
{
	Exclusive                                                                        = 0,
	Inclusive                                                                        = 1
};

/// Enum /Script/Engine.ESkinCacheUsage
/// Size: 0x01 (1 bytes)
enum class ESkinCacheUsage : uint8_t
{
	Auto                                                                             = 0,
	Disabled                                                                         = 255,
	Enabled                                                                          = 1
};

/// Enum /Script/Engine.EPhysicsTransformUpdateMode
/// Size: 0x01 (1 bytes)
enum class EPhysicsTransformUpdateMode : uint8_t
{
	SimulationUpatesComponentTransform                                               = 0,
	ComponentTransformIsKinematic                                                    = 1
};

/// Enum /Script/Engine.EAnimationMode
/// Size: 0x01 (1 bytes)
enum class EAnimationMode : uint8_t
{
	AnimationBlueprint                                                               = 0,
	AnimationSingleNode                                                              = 1,
	AnimationCustomMode                                                              = 2
};

/// Enum /Script/Engine.EKinematicBonesUpdateToPhysics
/// Size: 0x01 (1 bytes)
enum class EKinematicBonesUpdateToPhysics : uint8_t
{
	SkipSimulatingBones                                                              = 0,
	SkipAllBones                                                                     = 1
};

/// Enum /Script/Engine.ECustomBoneAttributeLookup
/// Size: 0x01 (1 bytes)
enum class ECustomBoneAttributeLookup : uint8_t
{
	BoneOnly                                                                         = 0,
	ImmediateParent                                                                  = 1,
	ParentHierarchy                                                                  = 2
};

/// Enum /Script/Engine.EClothMassMode
/// Size: 0x01 (1 bytes)
enum class EClothMassMode : uint8_t
{
	UniformMass                                                                      = 0,
	TotalMass                                                                        = 1,
	Density                                                                          = 2,
	MaxClothMassMode                                                                 = 3
};

/// Enum /Script/Engine.EAnimCurveType
/// Size: 0x01 (1 bytes)
enum class EAnimCurveType : uint8_t
{
	AttributeCurve                                                                   = 0,
	MaterialCurve                                                                    = 1,
	MorphTargetCurve                                                                 = 2,
	MaxAnimCurveType                                                                 = 3
};

/// Enum /Script/Engine.ESkeletalMeshSkinningImportVersions
/// Size: 0x01 (1 bytes)
enum class ESkeletalMeshSkinningImportVersions : uint8_t
{
	Before_Versionning                                                               = 0,
	SkeletalMeshBuildRefactor                                                        = 1,
	VersionPlusOne                                                                   = 2,
	LatestVersion                                                                    = 1
};

/// Enum /Script/Engine.ESkeletalMeshGeoImportVersions
/// Size: 0x01 (1 bytes)
enum class ESkeletalMeshGeoImportVersions : uint8_t
{
	Before_Versionning                                                               = 0,
	SkeletalMeshBuildRefactor                                                        = 1,
	VersionPlusOne                                                                   = 2,
	LatestVersion                                                                    = 1
};

/// Enum /Script/Engine.EBoneFilterActionOption
/// Size: 0x01 (1 bytes)
enum class EBoneFilterActionOption : uint8_t
{
	Remove                                                                           = 0,
	Keep                                                                             = 1,
	Invalid                                                                          = 2
};

/// Enum /Script/Engine.SkeletalMeshOptimizationImportance
/// Size: 0x01 (1 bytes)
enum class SkeletalMeshOptimizationImportance : uint8_t
{
	SMOI_Off                                                                         = 0,
	SMOI_Lowest                                                                      = 1,
	SMOI_Low                                                                         = 2,
	SMOI_Normal                                                                      = 3,
	SMOI_High                                                                        = 4,
	SMOI_Highest                                                                     = 5
};

/// Enum /Script/Engine.SkeletalMeshOptimizationType
/// Size: 0x01 (1 bytes)
enum class SkeletalMeshOptimizationType : uint8_t
{
	SMOT_NumOfTriangles                                                              = 0,
	SMOT_MaxDeviation                                                                = 1,
	SMOT_TriangleOrDeviation                                                         = 2
};

/// Enum /Script/Engine.SkeletalMeshTerminationCriterion
/// Size: 0x01 (1 bytes)
enum class SkeletalMeshTerminationCriterion : uint8_t
{
	SMTC_NumOfTriangles                                                              = 0,
	SMTC_NumOfVerts                                                                  = 1,
	SMTC_TriangleOrVert                                                              = 2,
	SMTC_AbsNumOfTriangles                                                           = 3,
	SMTC_AbsNumOfVerts                                                               = 4,
	SMTC_AbsTriangleOrVert                                                           = 5
};

/// Enum /Script/Engine.EBoneTranslationRetargetingMode
/// Size: 0x01 (1 bytes)
enum class EBoneTranslationRetargetingMode : uint8_t
{
	Animation                                                                        = 0,
	Skeleton                                                                         = 1,
	AnimationScaled                                                                  = 2,
	AnimationRelative                                                                = 3,
	OrientAndScale                                                                   = 4
};

/// Enum /Script/Engine.EVertexOffsetUsageType
/// Size: 0x01 (1 bytes)
enum class EVertexOffsetUsageType : uint8_t
{
	None                                                                             = 0,
	PreSkinningOffset                                                                = 1,
	PostSkinningOffset                                                               = 2
};

/// Enum /Script/Engine.EBoneSpaces
/// Size: 0x01 (1 bytes)
enum class EBoneSpaces : uint8_t
{
	WorldSpace                                                                       = 0,
	ComponentSpace                                                                   = 1
};

/// Enum /Script/Engine.EVisibilityBasedAnimTickOption
/// Size: 0x01 (1 bytes)
enum class EVisibilityBasedAnimTickOption : uint8_t
{
	AlwaysTickPoseAndRefreshBones                                                    = 0,
	AlwaysTickPose                                                                   = 1,
	OnlyTickMontagesWhenNotRendered                                                  = 2,
	OnlyTickPoseWhenRendered                                                         = 3
};

/// Enum /Script/Engine.EPhysBodyOp
/// Size: 0x01 (1 bytes)
enum class EPhysBodyOp : uint8_t
{
	PBO_None                                                                         = 0,
	PBO_Term                                                                         = 1
};

/// Enum /Script/Engine.EBoneVisibilityStatus
/// Size: 0x01 (1 bytes)
enum class EBoneVisibilityStatus : uint8_t
{
	BVS_HiddenByParent                                                               = 0,
	BVS_Visible                                                                      = 1,
	BVS_ExplicitlyHidden                                                             = 2
};

/// Enum /Script/Engine.ESkyAtmosphereTransformMode
/// Size: 0x01 (1 bytes)
enum class ESkyAtmosphereTransformMode : uint8_t
{
	PlanetTopAtAbsoluteWorldOrigin                                                   = 0,
	PlanetTopAtComponentTransform                                                    = 1,
	PlanetCenterAtComponentTransform                                                 = 2
};

/// Enum /Script/Engine.ESkyLightSourceType
/// Size: 0x01 (1 bytes)
enum class ESkyLightSourceType : uint8_t
{
	SLS_CapturedScene                                                                = 0,
	SLS_SpecifiedCubemap                                                             = 1
};

/// Enum /Script/Engine.EPriorityAttenuationMethod
/// Size: 0x01 (1 bytes)
enum class EPriorityAttenuationMethod : uint8_t
{
	Linear                                                                           = 0,
	CustomCurve                                                                      = 1,
	Manual                                                                           = 2
};

/// Enum /Script/Engine.ESubmixSendMethod
/// Size: 0x01 (1 bytes)
enum class ESubmixSendMethod : uint8_t
{
	Linear                                                                           = 0,
	CustomCurve                                                                      = 1,
	Manual                                                                           = 2
};

/// Enum /Script/Engine.EReverbSendMethod
/// Size: 0x01 (1 bytes)
enum class EReverbSendMethod : uint8_t
{
	Linear                                                                           = 0,
	CustomCurve                                                                      = 1,
	Manual                                                                           = 2
};

/// Enum /Script/Engine.EAirAbsorptionMethod
/// Size: 0x01 (1 bytes)
enum class EAirAbsorptionMethod : uint8_t
{
	Linear                                                                           = 0,
	CustomCurve                                                                      = 1
};

/// Enum /Script/Engine.ESoundSpatializationAlgorithm
/// Size: 0x01 (1 bytes)
enum class ESoundSpatializationAlgorithm : uint8_t
{
	SPATIALIZATION_Default                                                           = 0,
	SPATIALIZATION_HRTF                                                              = 1
};

/// Enum /Script/Engine.ESoundDistanceCalc
/// Size: 0x01 (1 bytes)
enum class ESoundDistanceCalc : uint8_t
{
	SOUNDDISTANCE_Normal                                                             = 0,
	SOUNDDISTANCE_InfiniteXYPlane                                                    = 1,
	SOUNDDISTANCE_InfiniteXZPlane                                                    = 2,
	SOUNDDISTANCE_InfiniteYZPlane                                                    = 3
};

/// Enum /Script/Engine.EVirtualizationMode
/// Size: 0x01 (1 bytes)
enum class EVirtualizationMode : uint8_t
{
	Disabled                                                                         = 0,
	PlayWhenSilent                                                                   = 1,
	Restart                                                                          = 2
};

/// Enum /Script/Engine.EConcurrencyVolumeScaleMode
/// Size: 0x04 (4 bytes)
enum class EConcurrencyVolumeScaleMode : uint32_t
{
	Default                                                                          = 0,
	Distance                                                                         = 1,
	Priority                                                                         = 2
};

/// Enum /Script/Engine.EMaxConcurrentResolutionRule
/// Size: 0x01 (1 bytes)
enum class EMaxConcurrentResolutionRule : uint8_t
{
	PreventNew                                                                       = 0,
	StopOldest                                                                       = 1,
	StopFarthestThenPreventNew                                                       = 2,
	StopFarthestThenOldest                                                           = 3,
	StopLowestPriority                                                               = 4,
	StopQuietest                                                                     = 5,
	StopLowestPriorityThenPreventNew                                                 = 6,
	StopLowestPriorityOfSound                                                        = 7,
	StopLowestPriorityOfSoundThenPreventNew                                          = 8,
	Count                                                                            = 9
};

/// Enum /Script/Engine.ESoundGroup
/// Size: 0x01 (1 bytes)
enum class ESoundGroup : uint8_t
{
	SOUNDGROUP_Default                                                               = 0,
	SOUNDGROUP_Effects                                                               = 1,
	SOUNDGROUP_UI                                                                    = 2,
	SOUNDGROUP_Music                                                                 = 3,
	SOUNDGROUP_Voice                                                                 = 4,
	SOUNDGROUP_GameSoundGroup1                                                       = 5,
	SOUNDGROUP_GameSoundGroup2                                                       = 6,
	SOUNDGROUP_GameSoundGroup3                                                       = 7,
	SOUNDGROUP_GameSoundGroup4                                                       = 8,
	SOUNDGROUP_GameSoundGroup5                                                       = 9,
	SOUNDGROUP_GameSoundGroup6                                                       = 10,
	SOUNDGROUP_GameSoundGroup7                                                       = 11,
	SOUNDGROUP_GameSoundGroup8                                                       = 12,
	SOUNDGROUP_GameSoundGroup9                                                       = 13,
	SOUNDGROUP_GameSoundGroup10                                                      = 14,
	SOUNDGROUP_GameSoundGroup11                                                      = 15,
	SOUNDGROUP_GameSoundGroup12                                                      = 16,
	SOUNDGROUP_GameSoundGroup13                                                      = 17,
	SOUNDGROUP_GameSoundGroup14                                                      = 18,
	SOUNDGROUP_GameSoundGroup15                                                      = 19,
	SOUNDGROUP_GameSoundGroup16                                                      = 20,
	SOUNDGROUP_GameSoundGroup17                                                      = 21,
	SOUNDGROUP_GameSoundGroup18                                                      = 22,
	SOUNDGROUP_GameSoundGroup19                                                      = 23,
	SOUNDGROUP_GameSoundGroup20                                                      = 24
};

/// Enum /Script/Engine.EModulationRouting
/// Size: 0x01 (1 bytes)
enum class EModulationRouting : uint8_t
{
	Disable                                                                          = 0,
	Inherit                                                                          = 1,
	Override                                                                         = 2
};

/// Enum /Script/Engine.ModulationParamMode
/// Size: 0x01 (1 bytes)
enum class ModulationParamMode : uint8_t
{
	MPM_Normal                                                                       = 0,
	MPM_Abs                                                                          = 1,
	MPM_Direct                                                                       = 2
};

/// Enum /Script/Engine.ESourceBusChannels
/// Size: 0x01 (1 bytes)
enum class ESourceBusChannels : uint8_t
{
	Mono                                                                             = 0,
	Stereo                                                                           = 1
};

/// Enum /Script/Engine.ESourceBusSendLevelControlMethod
/// Size: 0x01 (1 bytes)
enum class ESourceBusSendLevelControlMethod : uint8_t
{
	Linear                                                                           = 0,
	CustomCurve                                                                      = 1,
	Manual                                                                           = 2
};

/// Enum /Script/Engine.EGainParamMode
/// Size: 0x01 (1 bytes)
enum class EGainParamMode : uint8_t
{
	Linear                                                                           = 0,
	Decibels                                                                         = 1
};

/// Enum /Script/Engine.EAudioSpectrumType
/// Size: 0x01 (1 bytes)
enum class EAudioSpectrumType : uint8_t
{
	MagnitudeSpectrum                                                                = 0,
	PowerSpectrum                                                                    = 1,
	Decibel                                                                          = 2
};

/// Enum /Script/Engine.EFFTWindowType
/// Size: 0x01 (1 bytes)
enum class EFFTWindowType : uint8_t
{
	None                                                                             = 0,
	Hamming                                                                          = 1,
	Hann                                                                             = 2,
	Blackman                                                                         = 3
};

/// Enum /Script/Engine.EFFTPeakInterpolationMethod
/// Size: 0x01 (1 bytes)
enum class EFFTPeakInterpolationMethod : uint8_t
{
	NearestNeighbor                                                                  = 0,
	Linear                                                                           = 1,
	Quadratic                                                                        = 2,
	ConstantQ                                                                        = 3
};

/// Enum /Script/Engine.EFFTSize
/// Size: 0x01 (1 bytes)
enum class EFFTSize : uint8_t
{
	DefaultSize                                                                      = 0,
	Min                                                                              = 1,
	Small                                                                            = 2,
	Medium                                                                           = 3,
	Large                                                                            = 4,
	VeryLarge                                                                        = 5,
	Max                                                                              = 6
};

/// Enum /Script/Engine.ESubmixSendStage
/// Size: 0x01 (1 bytes)
enum class ESubmixSendStage : uint8_t
{
	PostDistanceAttenuation                                                          = 0,
	PreDistanceAttenuation                                                           = 1
};

/// Enum /Script/Engine.ESendLevelControlMethod
/// Size: 0x01 (1 bytes)
enum class ESendLevelControlMethod : uint8_t
{
	Linear                                                                           = 0,
	CustomCurve                                                                      = 1,
	Manual                                                                           = 2
};

/// Enum /Script/Engine.EAudioRecordingExportType
/// Size: 0x01 (1 bytes)
enum class EAudioRecordingExportType : uint8_t
{
	SoundWave                                                                        = 0,
	WavFile                                                                          = 1
};

/// Enum /Script/Engine.EAudioSpectrumBandPresetType
/// Size: 0x01 (1 bytes)
enum class EAudioSpectrumBandPresetType : uint8_t
{
	KickDrum                                                                         = 0,
	SnareDrum                                                                        = 1,
	Voice                                                                            = 2,
	Cymbals                                                                          = 3
};

/// Enum /Script/Engine.ESoundAssetCompressionType
/// Size: 0x01 (1 bytes)
enum class ESoundAssetCompressionType : uint8_t
{
	BinkAudio                                                                        = 0,
	ADPCM                                                                            = 1,
	PCM                                                                              = 2,
	PlatformSpecific                                                                 = 3
};

/// Enum /Script/Engine.ESoundWaveFFTSize
/// Size: 0x01 (1 bytes)
enum class ESoundWaveFFTSize : uint8_t
{
	VerySmall                                                                        = 0,
	Small                                                                            = 1,
	Medium                                                                           = 2,
	Large                                                                            = 3,
	VeryLarge                                                                        = 4
};

/// Enum /Script/Engine.EDecompressionType
/// Size: 0x01 (1 bytes)
enum class EDecompressionType : uint8_t
{
	DTYPE_Setup                                                                      = 0,
	DTYPE_Invalid                                                                    = 1,
	DTYPE_Preview                                                                    = 2,
	DTYPE_Native                                                                     = 3,
	DTYPE_RealTime                                                                   = 4,
	DTYPE_Procedural                                                                 = 5,
	DTYPE_Xenon                                                                      = 6,
	DTYPE_Streaming                                                                  = 7
};

/// Enum /Script/Engine.ESoundWaveLoadingBehavior
/// Size: 0x01 (1 bytes)
enum class ESoundWaveLoadingBehavior : uint8_t
{
	Inherited                                                                        = 0,
	RetainOnLoad                                                                     = 1,
	PrimeOnLoad                                                                      = 2,
	LoadOnDemand                                                                     = 3,
	ForceInline                                                                      = 4,
	Uninitialized                                                                    = 255
};

/// Enum /Script/Engine.ESplineCoordinateSpace
/// Size: 0x01 (1 bytes)
enum class ESplineCoordinateSpace : uint8_t
{
	Local                                                                            = 0,
	World                                                                            = 1
};

/// Enum /Script/Engine.ESplinePointType
/// Size: 0x01 (1 bytes)
enum class ESplinePointType : uint8_t
{
	Linear                                                                           = 0,
	Curve                                                                            = 1,
	Constant                                                                         = 2,
	CurveClamped                                                                     = 3,
	CurveCustomTangent                                                               = 4
};

/// Enum /Script/Engine.ESplineMeshAxis
/// Size: 0x01 (1 bytes)
enum class ESplineMeshAxis : uint8_t
{
	X                                                                                = 0,
	Y                                                                                = 1,
	Z                                                                                = 2
};

/// Enum /Script/Engine.EOptimizationType
/// Size: 0x01 (1 bytes)
enum class EOptimizationType : uint8_t
{
	OT_NumOfTriangles                                                                = 0,
	OT_MaxDeviation                                                                  = 1
};

/// Enum /Script/Engine.EImportanceLevel
/// Size: 0x01 (1 bytes)
enum class EImportanceLevel : uint8_t
{
	IL_Off                                                                           = 0,
	IL_Lowest                                                                        = 1,
	IL_Low                                                                           = 2,
	IL_Normal                                                                        = 3,
	IL_High                                                                          = 4,
	IL_Highest                                                                       = 5,
	TEMP_BROKEN2                                                                     = 6
};

/// Enum /Script/Engine.ENormalMode
/// Size: 0x01 (1 bytes)
enum class ENormalMode : uint8_t
{
	NM_PreserveSmoothingGroups                                                       = 0,
	NM_RecalculateNormals                                                            = 1,
	NM_RecalculateNormalsSmooth                                                      = 2,
	NM_RecalculateNormalsHard                                                        = 3,
	TEMP_BROKEN                                                                      = 4
};

/// Enum /Script/Engine.ESBSoundOcclusionSetting
/// Size: 0x01 (1 bytes)
enum class ESBSoundOcclusionSetting : uint8_t
{
	Default                                                                          = 0,
	ForceEnable                                                                      = 1
};

/// Enum /Script/Engine.EStereoLayerShape
/// Size: 0x01 (1 bytes)
enum class EStereoLayerShape : uint8_t
{
	SLSH_QuadLayer                                                                   = 0,
	SLSH_CylinderLayer                                                               = 1,
	SLSH_CubemapLayer                                                                = 2,
	SLSH_EquirectLayer                                                               = 3
};

/// Enum /Script/Engine.EStereoLayerType
/// Size: 0x01 (1 bytes)
enum class EStereoLayerType : uint8_t
{
	SLT_WorldLocked                                                                  = 0,
	SLT_TrackerLocked                                                                = 1,
	SLT_FaceLocked                                                                   = 2
};

/// Enum /Script/Engine.EOpacitySourceMode
/// Size: 0x01 (1 bytes)
enum class EOpacitySourceMode : uint8_t
{
	OSM_Alpha                                                                        = 0,
	OSM_ColorBrightness                                                              = 1,
	OSM_RedChannel                                                                   = 2,
	OSM_GreenChannel                                                                 = 3,
	OSM_BlueChannel                                                                  = 4
};

/// Enum /Script/Engine.ESubUVBoundingVertexCount
/// Size: 0x01 (1 bytes)
enum class ESubUVBoundingVertexCount : uint8_t
{
	BVC_FourVertices                                                                 = 0,
	BVC_EightVertices                                                                = 1
};

/// Enum /Script/Engine.EVerticalTextAligment
/// Size: 0x01 (1 bytes)
enum class EVerticalTextAligment : uint8_t
{
	EVRTA_TextTop                                                                    = 0,
	EVRTA_TextCenter                                                                 = 1,
	EVRTA_TextBottom                                                                 = 2,
	EVRTA_QuadTop                                                                    = 3
};

/// Enum /Script/Engine.EHorizTextAligment
/// Size: 0x01 (1 bytes)
enum class EHorizTextAligment : uint8_t
{
	EHTA_Left                                                                        = 0,
	EHTA_Center                                                                      = 1,
	EHTA_Right                                                                       = 2
};

/// Enum /Script/Engine.ETextureCompressionQuality
/// Size: 0x01 (1 bytes)
enum class ETextureCompressionQuality : uint8_t
{
	TCQ_Default                                                                      = 0,
	TCQ_Lowest                                                                       = 1,
	TCQ_Low                                                                          = 2,
	TCQ_Medium                                                                       = 3,
	TCQ_High                                                                         = 4,
	TCQ_Highest                                                                      = 5
};

/// Enum /Script/Engine.ETextureSourceFormat
/// Size: 0x01 (1 bytes)
enum class ETextureSourceFormat : uint8_t
{
	TSF_Invalid                                                                      = 0,
	TSF_G8                                                                           = 1,
	TSF_BGRA8                                                                        = 2,
	TSF_BGRE8                                                                        = 3,
	TSF_RGBA16                                                                       = 4,
	TSF_RGBA16F                                                                      = 5,
	TSF_RGBA8                                                                        = 6,
	TSF_RGBE8                                                                        = 7,
	TSF_G16                                                                          = 8
};

/// Enum /Script/Engine.ETextureSourceArtType
/// Size: 0x01 (1 bytes)
enum class ETextureSourceArtType : uint8_t
{
	TSAT_Uncompressed                                                                = 0,
	TSAT_PNGCompressed                                                               = 1,
	TSAT_DDSFile                                                                     = 2
};

/// Enum /Script/Engine.ETextureMipCount
/// Size: 0x01 (1 bytes)
enum class ETextureMipCount : uint8_t
{
	TMC_ResidentMips                                                                 = 0,
	TMC_AllMips                                                                      = 1,
	TMC_AllMipsBiased                                                                = 2
};

/// Enum /Script/Engine.ECompositeTextureMode
/// Size: 0x01 (1 bytes)
enum class ECompositeTextureMode : uint8_t
{
	CTM_Disabled                                                                     = 0,
	CTM_NormalRoughnessToRed                                                         = 1,
	CTM_NormalRoughnessToGreen                                                       = 2,
	CTM_NormalRoughnessToBlue                                                        = 3,
	CTM_NormalRoughnessToAlpha                                                       = 4
};

/// Enum /Script/Engine.TextureAddress
/// Size: 0x01 (1 bytes)
enum class TextureAddress : uint8_t
{
	TA_Wrap                                                                          = 0,
	TA_Clamp                                                                         = 1,
	TA_Mirror                                                                        = 2
};

/// Enum /Script/Engine.TextureFilter
/// Size: 0x01 (1 bytes)
enum class TextureFilter : uint8_t
{
	TF_Nearest                                                                       = 0,
	TF_Bilinear                                                                      = 1,
	TF_Trilinear                                                                     = 2,
	TF_Default                                                                       = 3
};

/// Enum /Script/Engine.TextureCompressionSettings
/// Size: 0x01 (1 bytes)
enum class TextureCompressionSettings : uint8_t
{
	TC_Default                                                                       = 0,
	TC_Normalmap                                                                     = 1,
	TC_Masks                                                                         = 2,
	TC_Grayscale                                                                     = 3,
	TC_Displacementmap                                                               = 4,
	TC_VectorDisplacementmap                                                         = 5,
	TC_HDR                                                                           = 6,
	TC_EditorIcon                                                                    = 7,
	TC_Alpha                                                                         = 8,
	TC_DistanceFieldFont                                                             = 9,
	TC_HDR_Compressed                                                                = 10,
	TC_BC7                                                                           = 11,
	TC_HalfFloat                                                                     = 12,
	TC_ReflectionCapture                                                             = 13
};

/// Enum /Script/Engine.ETextureDownscaleOptions
/// Size: 0x01 (1 bytes)
enum class ETextureDownscaleOptions : uint8_t
{
	Default                                                                          = 0,
	Unfiltered                                                                       = 1,
	SimpleAverage                                                                    = 2,
	Sharpen0                                                                         = 3,
	Sharpen1                                                                         = 4,
	Sharpen2                                                                         = 5,
	Sharpen3                                                                         = 6,
	Sharpen4                                                                         = 7,
	Sharpen5                                                                         = 8,
	Sharpen6                                                                         = 9,
	Sharpen7                                                                         = 10,
	Sharpen8                                                                         = 11,
	Sharpen9                                                                         = 12,
	Sharpen10                                                                        = 13
};

/// Enum /Script/Engine.ETextureMipLoadOptions
/// Size: 0x01 (1 bytes)
enum class ETextureMipLoadOptions : uint8_t
{
	Default                                                                          = 0,
	AllMips                                                                          = 1,
	OnlyFirstMip                                                                     = 2
};

/// Enum /Script/Engine.ETextureSamplerFilter
/// Size: 0x01 (1 bytes)
enum class ETextureSamplerFilter : uint8_t
{
	Point                                                                            = 0,
	Bilinear                                                                         = 1,
	Trilinear                                                                        = 2,
	AnisotropicPoint                                                                 = 3,
	AnisotropicLinear                                                                = 4
};

/// Enum /Script/Engine.ETexturePowerOfTwoSetting
/// Size: 0x01 (1 bytes)
enum class ETexturePowerOfTwoSetting : uint8_t
{
	None                                                                             = 0,
	PadToPowerOfTwo                                                                  = 1,
	PadToSquarePowerOfTwo                                                            = 2
};

/// Enum /Script/Engine.ETextureLossyCompressionAmount
/// Size: 0x01 (1 bytes)
enum class ETextureLossyCompressionAmount : uint8_t
{
	TLCA_Default                                                                     = 0,
	TLCA_None                                                                        = 1,
	TLCA_Lowest                                                                      = 2,
	TLCA_Low                                                                         = 3,
	TLCA_Medium                                                                      = 4,
	TLCA_High                                                                        = 5,
	TLCA_Highest                                                                     = 6
};

/// Enum /Script/Engine.TextureMipGenSettings
/// Size: 0x01 (1 bytes)
enum class TextureMipGenSettings : uint8_t
{
	TMGS_FromTextureGroup                                                            = 0,
	TMGS_SimpleAverage                                                               = 1,
	TMGS_Sharpen0                                                                    = 2,
	TMGS_Sharpen1                                                                    = 3,
	TMGS_Sharpen2                                                                    = 4,
	TMGS_Sharpen3                                                                    = 5,
	TMGS_Sharpen4                                                                    = 6,
	TMGS_Sharpen5                                                                    = 7,
	TMGS_Sharpen6                                                                    = 8,
	TMGS_Sharpen7                                                                    = 9,
	TMGS_Sharpen8                                                                    = 10,
	TMGS_Sharpen9                                                                    = 11,
	TMGS_Sharpen10                                                                   = 12,
	TMGS_NoMipmaps                                                                   = 13,
	TMGS_LeaveExistingMips                                                           = 14,
	TMGS_Blur1                                                                       = 15,
	TMGS_Blur2                                                                       = 16,
	TMGS_Blur3                                                                       = 17,
	TMGS_Blur4                                                                       = 18,
	TMGS_Blur5                                                                       = 19,
	TMGS_Unfiltered                                                                  = 20
};

/// Enum /Script/Engine.TextureGroup
/// Size: 0x01 (1 bytes)
enum class TextureGroup : uint8_t
{
	TEXTUREGROUP_World                                                               = 0,
	TEXTUREGROUP_WorldNormalMap                                                      = 1,
	TEXTUREGROUP_WorldSpecular                                                       = 2,
	TEXTUREGROUP_Character                                                           = 3,
	TEXTUREGROUP_CharacterNormalMap                                                  = 4,
	TEXTUREGROUP_CharacterSpecular                                                   = 5,
	TEXTUREGROUP_Weapon                                                              = 6,
	TEXTUREGROUP_WeaponNormalMap                                                     = 7,
	TEXTUREGROUP_WeaponSpecular                                                      = 8,
	TEXTUREGROUP_Vehicle                                                             = 9,
	TEXTUREGROUP_VehicleNormalMap                                                    = 10,
	TEXTUREGROUP_VehicleSpecular                                                     = 11,
	TEXTUREGROUP_Cinematic                                                           = 12,
	TEXTUREGROUP_Effects                                                             = 13,
	TEXTUREGROUP_EffectsNotFiltered                                                  = 14,
	TEXTUREGROUP_Skybox                                                              = 15,
	TEXTUREGROUP_UI                                                                  = 16,
	TEXTUREGROUP_Lightmap                                                            = 17,
	TEXTUREGROUP_RenderTarget                                                        = 18,
	TEXTUREGROUP_MobileFlattened                                                     = 19,
	TEXTUREGROUP_ProcBuilding_Face                                                   = 20,
	TEXTUREGROUP_ProcBuilding_LightMap                                               = 21,
	TEXTUREGROUP_Shadowmap                                                           = 22,
	TEXTUREGROUP_ColorLookupTable                                                    = 23,
	TEXTUREGROUP_Terrain_Heightmap                                                   = 24,
	TEXTUREGROUP_Terrain_Weightmap                                                   = 25,
	TEXTUREGROUP_Bokeh                                                               = 26,
	TEXTUREGROUP_IESLightProfile                                                     = 27,
	TEXTUREGROUP_Pixels2D                                                            = 28,
	TEXTUREGROUP_HierarchicalLOD                                                     = 29,
	TEXTUREGROUP_Impostor                                                            = 30,
	TEXTUREGROUP_ImpostorNormalDepth                                                 = 31,
	TEXTUREGROUP_8BitData                                                            = 32,
	TEXTUREGROUP_16BitData                                                           = 33,
	TEXTUREGROUP_Project01                                                           = 34,
	TEXTUREGROUP_Project02                                                           = 35,
	TEXTUREGROUP_Project03                                                           = 36,
	TEXTUREGROUP_Project04                                                           = 37,
	TEXTUREGROUP_Project05                                                           = 38,
	TEXTUREGROUP_Project06                                                           = 39,
	TEXTUREGROUP_Project07                                                           = 40,
	TEXTUREGROUP_Project08                                                           = 41,
	TEXTUREGROUP_Project09                                                           = 42,
	TEXTUREGROUP_Project10                                                           = 43,
	TEXTUREGROUP_Project11                                                           = 44,
	TEXTUREGROUP_Project12                                                           = 45,
	TEXTUREGROUP_Project13                                                           = 46,
	TEXTUREGROUP_Project14                                                           = 47,
	TEXTUREGROUP_Project15                                                           = 48,
	TEXTUREGROUP_Project16                                                           = 49,
	TEXTUREGROUP_Project17                                                           = 50,
	TEXTUREGROUP_Project18                                                           = 51,
	TEXTUREGROUP_Project19                                                           = 52,
	TEXTUREGROUP_Project20                                                           = 53,
	TEXTUREGROUP_Project21                                                           = 54,
	TEXTUREGROUP_Project22                                                           = 55,
	TEXTUREGROUP_Project23                                                           = 56,
	TEXTUREGROUP_Project24                                                           = 57,
	TEXTUREGROUP_Project25                                                           = 58,
	TEXTUREGROUP_Project26                                                           = 59,
	TEXTUREGROUP_Project27                                                           = 60,
	TEXTUREGROUP_Project28                                                           = 61,
	TEXTUREGROUP_Project29                                                           = 62,
	TEXTUREGROUP_Project30                                                           = 63,
	TEXTUREGROUP_Project31                                                           = 64,
	TEXTUREGROUP_Project32                                                           = 65,
	TEXTUREGROUP_Project33                                                           = 66,
	TEXTUREGROUP_Project34                                                           = 67,
	TEXTUREGROUP_Project35                                                           = 68,
	TEXTUREGROUP_Project36                                                           = 69,
	TEXTUREGROUP_Project37                                                           = 70,
	TEXTUREGROUP_Project38                                                           = 71,
	TEXTUREGROUP_Project39                                                           = 72,
	TEXTUREGROUP_Project40                                                           = 73,
	TEXTUREGROUP_Project41                                                           = 74,
	TEXTUREGROUP_Project42                                                           = 75,
	TEXTUREGROUP_Project43                                                           = 76,
	TEXTUREGROUP_Project44                                                           = 77,
	TEXTUREGROUP_Project45                                                           = 78,
	TEXTUREGROUP_Project46                                                           = 79,
	TEXTUREGROUP_Project47                                                           = 80,
	TEXTUREGROUP_Project48                                                           = 81,
	TEXTUREGROUP_Project49                                                           = 82,
	TEXTUREGROUP_Project50                                                           = 83,
	TEXTUREGROUP_Project51                                                           = 84,
	TEXTUREGROUP_Project52                                                           = 85,
	TEXTUREGROUP_Project53                                                           = 86,
	TEXTUREGROUP_Project54                                                           = 87,
	TEXTUREGROUP_Project55                                                           = 88,
	TEXTUREGROUP_Project56                                                           = 89,
	TEXTUREGROUP_Project57                                                           = 90,
	TEXTUREGROUP_Project58                                                           = 91,
	TEXTUREGROUP_Project59                                                           = 92,
	TEXTUREGROUP_Project60                                                           = 93,
	TEXTUREGROUP_Project61                                                           = 94,
	TEXTUREGROUP_Project62                                                           = 95,
	TEXTUREGROUP_Project63                                                           = 96,
	TEXTUREGROUP_Project64                                                           = 97,
	TEXTUREGROUP_Project65                                                           = 98,
	TEXTUREGROUP_Project66                                                           = 99,
	TEXTUREGROUP_Project67                                                           = 100,
	TEXTUREGROUP_Project68                                                           = 101,
	TEXTUREGROUP_Project69                                                           = 102
};

/// Enum /Script/Engine.ETextureRenderTargetFormat
/// Size: 0x01 (1 bytes)
enum class ETextureRenderTargetFormat : uint8_t
{
	RTF_R8                                                                           = 0,
	RTF_RG8                                                                          = 1,
	RTF_RGBA8                                                                        = 2,
	RTF_RGBA8_SRGB                                                                   = 3,
	RTF_R16f                                                                         = 4,
	RTF_RG16f                                                                        = 5,
	RTF_RGBA16f                                                                      = 6,
	RTF_R32f                                                                         = 7,
	RTF_RG32f                                                                        = 8,
	RTF_RGBA32f                                                                      = 9,
	RTF_RGB10A2                                                                      = 10,
	RTF_RGB16f                                                                       = 11
};

/// Enum /Script/Engine.ETimecodeProviderSynchronizationState
/// Size: 0x01 (1 bytes)
enum class ETimecodeProviderSynchronizationState : uint8_t
{
	Closed                                                                           = 0,
	Error                                                                            = 1,
	Synchronized                                                                     = 2,
	Synchronizing                                                                    = 3
};

/// Enum /Script/Engine.ETimelineDirection
/// Size: 0x01 (1 bytes)
enum class ETimelineDirection : uint8_t
{
	Forward                                                                          = 0,
	Backward                                                                         = 1
};

/// Enum /Script/Engine.ETimelineLengthMode
/// Size: 0x01 (1 bytes)
enum class ETimelineLengthMode : uint8_t
{
	TL_TimelineLength                                                                = 0,
	TL_LastKeyFrame                                                                  = 1
};

/// Enum /Script/Engine.ETimeStretchCurveMapping
/// Size: 0x01 (1 bytes)
enum class ETimeStretchCurveMapping : uint8_t
{
	T_Original                                                                       = 0,
	T_TargetMin                                                                      = 1,
	T_TargetMax                                                                      = 2
};

/// Enum /Script/Engine.ETwitterIntegrationDelegate
/// Size: 0x01 (1 bytes)
enum class ETwitterIntegrationDelegate : uint8_t
{
	TID_AuthorizeComplete                                                            = 0,
	TID_TweetUIComplete                                                              = 1,
	TID_RequestComplete                                                              = 2
};

/// Enum /Script/Engine.ETwitterRequestMethod
/// Size: 0x01 (1 bytes)
enum class ETwitterRequestMethod : uint8_t
{
	TRM_Get                                                                          = 0,
	TRM_Post                                                                         = 1,
	TRM_Delete                                                                       = 2
};

/// Enum /Script/Engine.EUserDefinedStructureStatus
/// Size: 0x01 (1 bytes)
enum class EUserDefinedStructureStatus : uint8_t
{
	UDSS_UpToDate                                                                    = 0,
	UDSS_Dirty                                                                       = 1,
	UDSS_Error                                                                       = 2,
	UDSS_Duplicate                                                                   = 3
};

/// Enum /Script/Engine.EUIScalingRule
/// Size: 0x01 (1 bytes)
enum class EUIScalingRule : uint8_t
{
	ShortestSide                                                                     = 0,
	LongestSide                                                                      = 1,
	Horizontal                                                                       = 2,
	Vertical                                                                         = 3,
	ScaleToFit                                                                       = 4,
	Custom                                                                           = 5
};

/// Enum /Script/Engine.ERenderFocusRule
/// Size: 0x01 (1 bytes)
enum class ERenderFocusRule : uint8_t
{
	Always                                                                           = 0,
	NonPointer                                                                       = 1,
	NavigationOnly                                                                   = 2,
	Never                                                                            = 3
};

/// Enum /Script/Engine.EVectorFieldConstructionOp
/// Size: 0x01 (1 bytes)
enum class EVectorFieldConstructionOp : uint8_t
{
	VFCO_Extrude                                                                     = 0,
	VFCO_Revolve                                                                     = 1
};

/// Enum /Script/Engine.EWindSourceType
/// Size: 0x01 (1 bytes)
enum class EWindSourceType : uint8_t
{
	Directional                                                                      = 0,
	Point                                                                            = 1
};

/// Enum /Script/Engine.EPSCPoolMethod
/// Size: 0x01 (1 bytes)
enum class EPSCPoolMethod : uint8_t
{
	None                                                                             = 0,
	AutoRelease                                                                      = 1,
	ManualRelease                                                                    = 2,
	ManualRelease_OnComplete                                                         = 3,
	FreeInPool                                                                       = 4
};

/// Enum /Script/Engine.EVolumeLightingMethod
/// Size: 0x01 (1 bytes)
enum class EVolumeLightingMethod : uint8_t
{
	VLM_VolumetricLightmap                                                           = 0,
	VLM_SparseVolumeLightingSamples                                                  = 1
};

/// Enum /Script/Engine.EVisibilityAggressiveness
/// Size: 0x01 (1 bytes)
enum class EVisibilityAggressiveness : uint8_t
{
	VIS_LeastAggressive                                                              = 0,
	VIS_ModeratelyAggressive                                                         = 1,
	VIS_MostAggressive                                                               = 2,
	VIS_Max                                                                          = 3
};

/// Enum /Script/UMG.ESlateAccessibleBehavior
/// Size: 0x01 (1 bytes)
enum class ESlateAccessibleBehavior : uint8_t
{
	NotAccessible                                                                    = 0,
	Auto                                                                             = 1,
	Summary                                                                          = 2,
	Custom                                                                           = 3,
	ToolTip                                                                          = 4
};

/// Enum /Script/UMG.ESlateVisibility
/// Size: 0x01 (1 bytes)
enum class ESlateVisibility : uint8_t
{
	Visible                                                                          = 0,
	Collapsed                                                                        = 1,
	Hidden                                                                           = 2,
	HitTestInvisible                                                                 = 3,
	SelfHitTestInvisible                                                             = 4
};

/// Enum /Script/UMG.EVirtualKeyboardType
/// Size: 0x01 (1 bytes)
enum class EVirtualKeyboardType : uint8_t
{
	Default                                                                          = 0,
	Number                                                                           = 1,
	Web                                                                              = 2,
	Email                                                                            = 3,
	Password                                                                         = 4,
	AlphaNumeric                                                                     = 5
};

/// Enum /Script/UMG.EDragPivot
/// Size: 0x01 (1 bytes)
enum class EDragPivot : uint8_t
{
	MouseDown                                                                        = 0,
	TopLeft                                                                          = 1,
	TopCenter                                                                        = 2,
	TopRight                                                                         = 3,
	CenterLeft                                                                       = 4,
	CenterCenter                                                                     = 5,
	CenterRight                                                                      = 6,
	BottomLeft                                                                       = 7,
	BottomCenter                                                                     = 8,
	BottomRight                                                                      = 9
};

/// Enum /Script/UMG.EDynamicBoxType
/// Size: 0x01 (1 bytes)
enum class EDynamicBoxType : uint8_t
{
	Horizontal                                                                       = 0,
	Vertical                                                                         = 1,
	Wrap                                                                             = 2,
	VerticalWrap                                                                     = 3,
	Radial                                                                           = 4,
	Overlay                                                                          = 5
};

/// Enum /Script/UMG.ESlateSizeRule
/// Size: 0x01 (1 bytes)
enum class ESlateSizeRule : uint8_t
{
	Automatic                                                                        = 0,
	Fill                                                                             = 1
};

/// Enum /Script/UMG.EUMGSequencePlayMode
/// Size: 0x01 (1 bytes)
enum class EUMGSequencePlayMode : uint8_t
{
	Forward                                                                          = 0,
	Reverse                                                                          = 1,
	PingPong                                                                         = 2
};

/// Enum /Script/UMG.EWidgetAnimationEvent
/// Size: 0x01 (1 bytes)
enum class EWidgetAnimationEvent : uint8_t
{
	Started                                                                          = 0,
	Finished                                                                         = 1
};

/// Enum /Script/UMG.EWidgetTickFrequency
/// Size: 0x01 (1 bytes)
enum class EWidgetTickFrequency : uint8_t
{
	Never                                                                            = 0,
	Auto                                                                             = 1
};

/// Enum /Script/UMG.EWidgetDesignFlags
/// Size: 0x01 (1 bytes)
enum class EWidgetDesignFlags : uint8_t
{
	None                                                                             = 0,
	Designing                                                                        = 1,
	ShowOutline                                                                      = 2,
	ExecutePreConstruct                                                              = 4
};

/// Enum /Script/UMG.EBindingKind
/// Size: 0x01 (1 bytes)
enum class EBindingKind : uint8_t
{
	Function                                                                         = 0,
	Property                                                                         = 1
};

/// Enum /Script/UMG.ETickMode
/// Size: 0x01 (1 bytes)
enum class ETickMode : uint8_t
{
	Disabled                                                                         = 0,
	Enabled                                                                          = 1,
	Automatic                                                                        = 2
};

/// Enum /Script/UMG.EWindowVisibility
/// Size: 0x01 (1 bytes)
enum class EWindowVisibility : uint8_t
{
	Visible                                                                          = 0,
	SelfHitTestInvisible                                                             = 1
};

/// Enum /Script/UMG.EWidgetGeometryMode
/// Size: 0x01 (1 bytes)
enum class EWidgetGeometryMode : uint8_t
{
	Plane                                                                            = 0,
	Cylinder                                                                         = 1
};

/// Enum /Script/UMG.EWidgetBlendMode
/// Size: 0x01 (1 bytes)
enum class EWidgetBlendMode : uint8_t
{
	Opaque                                                                           = 0,
	Masked                                                                           = 1,
	Transparent                                                                      = 2
};

/// Enum /Script/UMG.EWidgetTimingPolicy
/// Size: 0x01 (1 bytes)
enum class EWidgetTimingPolicy : uint8_t
{
	RealTime                                                                         = 0,
	GameTime                                                                         = 1
};

/// Enum /Script/UMG.EWidgetSpace
/// Size: 0x01 (1 bytes)
enum class EWidgetSpace : uint8_t
{
	World                                                                            = 0,
	Screen                                                                           = 1
};

/// Enum /Script/UMG.EWidgetInteractionSource
/// Size: 0x01 (1 bytes)
enum class EWidgetInteractionSource : uint8_t
{
	World                                                                            = 0,
	Mouse                                                                            = 1,
	CenterScreen                                                                     = 2,
	Custom                                                                           = 3
};

/// Enum /Script/MovieScene.EMovieSceneKeyInterpolation
/// Size: 0x01 (1 bytes)
enum class EMovieSceneKeyInterpolation : uint8_t
{
	Auto                                                                             = 0,
	User                                                                             = 1,
	Break                                                                            = 2,
	Linear                                                                           = 3,
	Constant                                                                         = 4
};

/// Enum /Script/MovieScene.EMovieSceneBlendType
/// Size: 0x01 (1 bytes)
enum class EMovieSceneBlendType : uint8_t
{
	Invalid                                                                          = 0,
	Absolute                                                                         = 1,
	Additive                                                                         = 2,
	Relative                                                                         = 4,
	AdditiveFromBase                                                                 = 8
};

/// Enum /Script/MovieScene.EMovieSceneCompletionMode
/// Size: 0x01 (1 bytes)
enum class EMovieSceneCompletionMode : uint8_t
{
	KeepState                                                                        = 0,
	RestoreState                                                                     = 1,
	ProjectDefault                                                                   = 2
};

/// Enum /Script/MovieScene.EMovieSceneBuiltInEasing
/// Size: 0x01 (1 bytes)
enum class EMovieSceneBuiltInEasing : uint8_t
{
	Linear                                                                           = 0,
	SinIn                                                                            = 1,
	SinOut                                                                           = 2,
	SinInOut                                                                         = 3,
	QuadIn                                                                           = 4,
	QuadOut                                                                          = 5,
	QuadInOut                                                                        = 6,
	CubicIn                                                                          = 7,
	CubicOut                                                                         = 8,
	CubicInOut                                                                       = 9,
	QuartIn                                                                          = 10,
	QuartOut                                                                         = 11,
	QuartInOut                                                                       = 12,
	QuintIn                                                                          = 13,
	QuintOut                                                                         = 14,
	QuintInOut                                                                       = 15,
	ExpoIn                                                                           = 16,
	ExpoOut                                                                          = 17,
	ExpoInOut                                                                        = 18,
	CircIn                                                                           = 19,
	CircOut                                                                          = 20,
	CircInOut                                                                        = 21
};

/// Enum /Script/MovieScene.EEvaluationMethod
/// Size: 0x01 (1 bytes)
enum class EEvaluationMethod : uint8_t
{
	Static                                                                           = 0,
	Swept                                                                            = 1
};

/// Enum /Script/MovieScene.EMovieSceneSequenceFlags
/// Size: 0x01 (1 bytes)
enum class EMovieSceneSequenceFlags : uint8_t
{
	None                                                                             = 0,
	Volatile                                                                         = 1,
	BlockingEvaluation                                                               = 2,
	InheritedFlags                                                                   = 1
};

/// Enum /Script/MovieScene.EUpdateClockSource
/// Size: 0x01 (1 bytes)
enum class EUpdateClockSource : uint8_t
{
	Tick                                                                             = 0,
	Platform                                                                         = 1,
	Audio                                                                            = 2,
	RelativeTimecode                                                                 = 3,
	Timecode                                                                         = 4,
	Custom                                                                           = 5
};

/// Enum /Script/MovieScene.EMovieSceneEvaluationType
/// Size: 0x01 (1 bytes)
enum class EMovieSceneEvaluationType : uint8_t
{
	FrameLocked                                                                      = 0,
	WithSubFrames                                                                    = 1
};

/// Enum /Script/MovieScene.EMovieScenePlayerStatus
/// Size: 0x01 (1 bytes)
enum class EMovieScenePlayerStatus : uint8_t
{
	Stopped                                                                          = 0,
	Playing                                                                          = 1,
	Recording                                                                        = 2,
	Scrubbing                                                                        = 3,
	Jumping                                                                          = 4,
	Stepping                                                                         = 5,
	Paused                                                                           = 6
};

/// Enum /Script/MovieScene.EMovieSceneObjectBindingSpace
/// Size: 0x01 (1 bytes)
enum class EMovieSceneObjectBindingSpace : uint8_t
{
	Local                                                                            = 0,
	Root                                                                             = 1
};

/// Enum /Script/MovieScene.ESectionEvaluationFlags
/// Size: 0x01 (1 bytes)
enum class ESectionEvaluationFlags : uint8_t
{
	None                                                                             = 0,
	PreRoll                                                                          = 1,
	PostRoll                                                                         = 2
};

/// Enum /Script/MovieScene.EMovieScenePositionType
/// Size: 0x01 (1 bytes)
enum class EMovieScenePositionType : uint8_t
{
	Frame                                                                            = 0,
	Time                                                                             = 1,
	MarkedFrame                                                                      = 2
};

/// Enum /Script/MovieScene.EUpdatePositionMethod
/// Size: 0x01 (1 bytes)
enum class EUpdatePositionMethod : uint8_t
{
	Play                                                                             = 0,
	Jump                                                                             = 1,
	Scrub                                                                            = 2
};

/// Enum /Script/MovieScene.ESBMovieSceneSequencecContentType
/// Size: 0x01 (1 bytes)
enum class ESBMovieSceneSequencecContentType : uint8_t
{
	None                                                                             = 0,
	Talk                                                                             = 1,
	Dialogue                                                                         = 2
};

/// Enum /Script/MovieScene.ESBOverrideStartMovementType
/// Size: 0x01 (1 bytes)
enum class ESBOverrideStartMovementType : uint8_t
{
	None                                                                             = 0,
	True                                                                             = 1,
	False                                                                            = 2
};

/// Enum /Script/MovieScene.ESpawnOwnership
/// Size: 0x01 (1 bytes)
enum class ESpawnOwnership : uint8_t
{
	InnerSequence                                                                    = 0,
	MasterSequence                                                                   = 1,
	External                                                                         = 2
};

/// Enum /Script/MovieSceneTracks.MovieScene3DPathSection_Axis
/// Size: 0x01 (1 bytes)
enum class MovieScene3DPathSection_Axis : uint8_t
{
	X                                                                                = 0,
	Y                                                                                = 1,
	Z                                                                                = 2,
	NEG_X                                                                            = 3,
	NEG_Y                                                                            = 4,
	NEG_Z                                                                            = 5
};

/// Enum /Script/MovieSceneTracks.ESBTargetAspectRatioType
/// Size: 0x01 (1 bytes)
enum class ESBTargetAspectRatioType : uint8_t
{
	None                                                                             = 0,
	Under                                                                            = 1,
	Over                                                                             = 2
};

/// Enum /Script/MovieSceneTracks.ESBMovieSceneAudioSectionAttachType
/// Size: 0x01 (1 bytes)
enum class ESBMovieSceneAudioSectionAttachType : uint8_t
{
	None                                                                             = 0,
	Player                                                                           = 1
};

/// Enum /Script/MovieSceneTracks.EFireEventsAtPosition
/// Size: 0x01 (1 bytes)
enum class EFireEventsAtPosition : uint8_t
{
	AtStartOfEvaluation                                                              = 0,
	AtEndOfEvaluation                                                                = 1,
	AfterSpawn                                                                       = 2
};

/// Enum /Script/MovieSceneTracks.ELevelVisibility
/// Size: 0x01 (1 bytes)
enum class ELevelVisibility : uint8_t
{
	Visible                                                                          = 0,
	Hidden                                                                           = 1
};

/// Enum /Script/MovieSceneTracks.EParticleKey
/// Size: 0x01 (1 bytes)
enum class EParticleKey : uint8_t
{
	Activate                                                                         = 0,
	Deactivate                                                                       = 1,
	Trigger                                                                          = 2
};

/// Struct /Script/Engine.TickFunction
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FTickFunction
{ 
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	TEnumAsByte<ETickingGroup>                         TickGroup;                                                  // 0x0008   (0x0001)  
	TEnumAsByte<ETickingGroup>                         EndTickGroup;                                               // 0x0009   (0x0001)  
	bool                                               bTickEvenWhenPaused : 1;                                    // 0x000A:0 (0x0001)  
	bool                                               bCanEverTick : 1;                                           // 0x000A:1 (0x0001)  
	bool                                               bStartWithTickEnabled : 1;                                  // 0x000A:2 (0x0001)  
	bool                                               bAllowTickOnDedicatedServer : 1;                            // 0x000A:3 (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x000B   (0x0001)  MISSED
	float                                              TickInterval;                                               // 0x000C   (0x0004)  
	unsigned char                                      UnknownData05_7[0x18];                                      // 0x0010   (0x0018)  MISSED
};

/// Struct /Script/Engine.ActorComponentTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FActorComponentTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.SimpleMemberReference
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSimpleMemberReference
{ 
	class UObject*                                     MemberParent;                                               // 0x0000   (0x0008)  
	FName                                              MemberName;                                                 // 0x0008   (0x0008)  
	FGuid                                              MemberGuid;                                                 // 0x0010   (0x0010)  
};

/// Class /Script/Engine.ActorComponent
/// Size: 0x00C0 (192 bytes) (0x000028 - 0x0000C0) align n/a MaxSize: 0x00C0
class UActorComponent : public UObject
{ 
public:
	unsigned char                                      UnknownData19_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	FActorComponentTickFunction                        PrimaryComponentTick;                                       // 0x0030   (0x0030)  
	TArray<FName>                                      ComponentTags;                                              // 0x0060   (0x0010)  
	TArray<FName>                                      VisibilityTags;                                             // 0x0070   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0080   (0x0010)  
	unsigned char                                      UnknownData20_6[0x4];                                       // 0x0090   (0x0004)  MISSED
	int32_t                                            UCSSerializationIndex;                                      // 0x0094   (0x0004)  
	unsigned char                                      UnknownBit21 : 1;                                           // 0x0098:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit22 : 1;                                           // 0x0098:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit23 : 1;                                           // 0x0098:2 (0x0001)  MISSED
	bool                                               bNetAddressable : 1;                                        // 0x0098:3 (0x0001)  
	bool                                               bReplicates : 1;                                            // 0x0098:4 (0x0001)  
	unsigned char                                      UnknownBit24 : 1;                                           // 0x0098:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit25 : 1;                                           // 0x0098:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit26 : 1;                                           // 0x0098:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit27 : 1;                                           // 0x0099:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit28 : 1;                                           // 0x0099:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit29 : 1;                                           // 0x0099:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit30 : 1;                                           // 0x0099:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit31 : 1;                                           // 0x0099:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit32 : 1;                                           // 0x0099:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit33 : 1;                                           // 0x0099:6 (0x0001)  MISSED
	bool                                               bAutoActivate : 1;                                          // 0x0099:7 (0x0001)  
	bool                                               bRegisterPausePhysicsScene : 1;                             // 0x009A:0 (0x0001)  
	bool                                               bIsActive : 1;                                              // 0x009A:1 (0x0001)  
	bool                                               bEditableWhenInherited : 1;                                 // 0x009A:2 (0x0001)  
	unsigned char                                      UnknownBit34 : 1;                                           // 0x009A:3 (0x0001)  MISSED
	bool                                               bCanEverAffectNavigation : 1;                               // 0x009A:4 (0x0001)  
	unsigned char                                      UnknownBit35 : 1;                                           // 0x009A:5 (0x0001)  MISSED
	bool                                               bIsEditorOnly : 1;                                          // 0x009A:6 (0x0001)  
	unsigned char                                      UnknownData36_5[0x2];                                       // 0x009B   (0x0002)  MISSED
	EComponentCreationMethod                           CreationMethod;                                             // 0x009D   (0x0001)  
	FMulticastSparseDelegate                           OnComponentActivated;                                       // 0x009E   (0x0001)  
	FMulticastSparseDelegate                           OnComponentDeactivated;                                     // 0x009F   (0x0001)  
	TArray<FSimpleMemberReference>                     UCSModifiedProperties;                                      // 0x00A0   (0x0010)  
	unsigned char                                      UnknownData37_7[0x10];                                      // 0x00B0   (0x0010)  MISSED

	/// Functions
	// Function /Script/Engine.ActorComponent.ToggleActive
	constexpr static const FunctionPointer<UActorComponent, void> ToggleActive = { 0x3da6ff0, 0 }; 
	// Function /Script/Engine.ActorComponent.SetTickGroup
	constexpr static const FunctionPointer<UActorComponent, void, const TEnumAsByte<ETickingGroup>> SetTickGroup = { 0x46fab70, 1 }; 
	// Function /Script/Engine.ActorComponent.SetTickableWhenPaused
	constexpr static const FunctionPointer<UActorComponent, void, const bool> SetTickableWhenPaused = { 0x46fb0f0, 2 }; 
	// Function /Script/Engine.ActorComponent.SetIsReplicated
	constexpr static const FunctionPointer<UActorComponent, void, const bool> SetIsReplicated = { 0x46fb010, 3 }; 
	// Function /Script/Engine.ActorComponent.SetComponentTickIntervalAndCooldown
	constexpr static const FunctionPointer<UActorComponent, void, const float> SetComponentTickIntervalAndCooldown = { 0x46fad60, 4 }; 
	// Function /Script/Engine.ActorComponent.SetComponentTickInterval
	constexpr static const FunctionPointer<UActorComponent, void, const float> SetComponentTickInterval = { 0x46fae30, 5 }; 
	// Function /Script/Engine.ActorComponent.SetComponentTickEnabled
	constexpr static const FunctionPointer<UActorComponent, void, const bool> SetComponentTickEnabled = { 0x46faf30, 6 }; 
	// Function /Script/Engine.ActorComponent.SetAutoActivate
	constexpr static const FunctionPointer<UActorComponent, void, const bool> SetAutoActivate = { 0x46fb1d0, 7 }; 
	// Function /Script/Engine.ActorComponent.SetActive
	constexpr static const FunctionPointer<UActorComponent, void, const bool, const bool> SetActive = { 0x46fb2e0, 8 }; 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteComponent
	constexpr static const FunctionPointer<UActorComponent, void, const UActorComponent*> RemoveTickPrerequisiteComponent = { 0x46fa7f0, 9 }; 
	// Function /Script/Engine.ActorComponent.RemoveTickPrerequisiteActor
	constexpr static const FunctionPointer<UActorComponent, void, const AActor*> RemoveTickPrerequisiteActor = { 0x46fa8d0, 10 }; 
	// Function /Script/Engine.ActorComponent.ReceiveTick
	constexpr static const FunctionPointer<UActorComponent, void, const float> ReceiveTick = { 0x2bbb090, 11 }; 
	// Function /Script/Engine.ActorComponent.ReceiveEndPlay
	constexpr static const FunctionPointer<UActorComponent, void, const TEnumAsByte<EEndPlayReason>> ReceiveEndPlay = { 0x2bbb090, 12 }; 
	// Function /Script/Engine.ActorComponent.ReceiveBeginPlay
	constexpr static const FunctionPointer<UActorComponent, void> ReceiveBeginPlay = { 0x2bbb090, 13 }; 
	// Function /Script/Engine.ActorComponent.OnRep_IsActive
	constexpr static const FunctionPointer<UActorComponent, void> OnRep_IsActive = { 0x3817110, 14 }; 
	// Function /Script/Engine.ActorComponent.K2_DestroyComponent
	constexpr static const FunctionPointer<UActorComponent, void, const UObject*> K2_DestroyComponent = { 0x46fac40, 15 }; 
	// Function /Script/Engine.ActorComponent.IsComponentTickEnabled
	constexpr static const FunctionPointer<UActorComponent, bool> IsComponentTickEnabled = { 0x46faf00, 16 }; 
	// Function /Script/Engine.ActorComponent.IsBeingDestroyed
	constexpr static const FunctionPointer<UActorComponent, bool> IsBeingDestroyed = { 0x46fb570, 17 }; 
	// Function /Script/Engine.ActorComponent.IsActive
	constexpr static const FunctionPointer<UActorComponent, bool> IsActive = { 0x46fb2b0, 18 }; 
	// Function /Script/Engine.ActorComponent.GetOwner
	constexpr static const FunctionPointer<UActorComponent, AActor*> GetOwner = { 0x38475f0, 19 }; 
	// Function /Script/Engine.ActorComponent.GetComponentTickInterval
	constexpr static const FunctionPointer<UActorComponent, float> GetComponentTickInterval = { 0x46fad40, 20 }; 
	// Function /Script/Engine.ActorComponent.Deactivate
	constexpr static const FunctionPointer<UActorComponent, void> Deactivate = { 0x38170d0, 21 }; 
	// Function /Script/Engine.ActorComponent.ComponentHasTag
	constexpr static const FunctionPointer<UActorComponent, bool, const FName> ComponentHasTag = { 0x46fb450, 22 }; 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteComponent
	constexpr static const FunctionPointer<UActorComponent, void, const UActorComponent*> AddTickPrerequisiteComponent = { 0x46fa9b0, 23 }; 
	// Function /Script/Engine.ActorComponent.AddTickPrerequisiteActor
	constexpr static const FunctionPointer<UActorComponent, void, const AActor*> AddTickPrerequisiteActor = { 0x46faa90, 24 }; 
	// Function /Script/Engine.ActorComponent.Activate
	constexpr static const FunctionPointer<UActorComponent, void, const bool> Activate = { 0x3daf5f0, 25 }; 
};

/// Class /Script/Engine.SceneComponent
/// Size: 0x0260 (608 bytes) (0x0000C0 - 0x000260) align n/a MaxSize: 0x0260
class USceneComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData08_8[0x10];                                      // 0x00C0   (0x0010)  MISSED
	TWeakObjectPtr<class APhysicsVolume*>              PhysicsVolume;                                              // 0x00D0   (0x0008)  
	class USceneComponent*                             AttachParent;                                               // 0x00D8   (0x0008)  
	FName                                              AttachSocketName;                                           // 0x00E0   (0x0008)  
	TArray<class USceneComponent*>                     AttachChildren;                                             // 0x00E8   (0x0010)  
	TArray<class USceneComponent*>                     ClientAttachedChildren;                                     // 0x00F8   (0x0010)  
	uint64_t                                           LastFrameNumberManualUpdateComponentToWorld;                // 0x0108   (0x0008)  
	unsigned char                                      UnknownData09_6[0x2C];                                      // 0x0110   (0x002C)  MISSED
	FVector                                            RelativeLocation;                                           // 0x013C   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0148   (0x000C)  
	FVector                                            RelativeScale3D;                                            // 0x0154   (0x000C)  
	float                                              PhysicsSceneActiveDistance;                                 // 0x0160   (0x0004)  
	FVector                                            ComponentVelocity;                                          // 0x0164   (0x000C)  
	bool                                               bComponentToWorldUpdated : 1;                               // 0x0170:0 (0x0001)  
	unsigned char                                      UnknownBit10 : 1;                                           // 0x0170:1 (0x0001)  MISSED
	bool                                               bAbsoluteLocation : 1;                                      // 0x0170:2 (0x0001)  
	bool                                               bAbsoluteRotation : 1;                                      // 0x0170:3 (0x0001)  
	bool                                               bAbsoluteScale : 1;                                         // 0x0170:4 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x0170:5 (0x0001)  
	bool                                               bShouldBeAttached : 1;                                      // 0x0170:6 (0x0001)  
	bool                                               bShouldSnapLocationWhenAttached : 1;                        // 0x0170:7 (0x0001)  
	bool                                               bShouldSnapRotationWhenAttached : 1;                        // 0x0171:0 (0x0001)  
	bool                                               bShouldUpdatePhysicsVolume : 1;                             // 0x0171:1 (0x0001)  
	bool                                               bHiddenInGame : 1;                                          // 0x0171:2 (0x0001)  
	bool                                               bBoundsChangeTriggersStreamingDataRebuild : 1;              // 0x0171:3 (0x0001)  
	bool                                               bUseAttachParentBound : 1;                                  // 0x0171:4 (0x0001)  
	unsigned char                                      UnknownBit11 : 1;                                           // 0x0171:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit12 : 1;                                           // 0x0171:6 (0x0001)  MISSED
	bool                                               bUseWorldSector : 1;                                        // 0x0171:7 (0x0001)  
	unsigned char                                      UnknownData13_5[0x1];                                       // 0x0172   (0x0001)  MISSED
	TEnumAsByte<EComponentMobility>                    Mobility;                                                   // 0x0173   (0x0001)  
	TEnumAsByte<EDetailMode>                           DetailMode;                                                 // 0x0174   (0x0001)  
	FMulticastSparseDelegate                           PhysicsVolumeChangedDelegate;                               // 0x0175   (0x0001)  
	unsigned char                                      UnknownData14_6[0xD6];                                      // 0x0176   (0x00D6)  MISSED
	FName                                              CustomName;                                                 // 0x024C   (0x0008)  
	FName                                              SBPhotoModeTag;                                             // 0x0254   (0x0008)  
	unsigned char                                      UnknownData15_7[0x4];                                       // 0x025C   (0x0004)  MISSED

	/// Functions
	// Function /Script/Engine.SceneComponent.ToggleVisibility
	constexpr static const FunctionPointer<USceneComponent, void, const bool> ToggleVisibility = { 0x4944cc0, 0 }; 
	// Function /Script/Engine.SceneComponent.SnapTo
	constexpr static const FunctionPointer<USceneComponent, bool, const USceneComponent*, const FName> SnapTo = { 0x4945a70, 1 }; 
	// Function /Script/Engine.SceneComponent.SetWorldScale3D
	constexpr static const FunctionPointer<USceneComponent, void, const FVector> SetWorldScale3D = { 0x4947a50, 2 }; 
	// Function /Script/Engine.SceneComponent.SetVisibility
	constexpr static const FunctionPointer<USceneComponent, void, const bool, const bool> SetVisibility = { 0x4944db0, 3 }; 
	// Function /Script/Engine.SceneComponent.SetShouldUpdatePhysicsVolume
	constexpr static const FunctionPointer<USceneComponent, void, const bool> SetShouldUpdatePhysicsVolume = { 0x4949ab0, 4 }; 
	// Function /Script/Engine.SceneComponent.SetRelativeScale3D
	constexpr static const FunctionPointer<USceneComponent, void, const FVector> SetRelativeScale3D = { 0x4948f50, 5 }; 
	// Function /Script/Engine.SceneComponent.SetMobility
	constexpr static const FunctionPointer<USceneComponent, void, const TEnumAsByte<EComponentMobility>> SetMobility = { 0x4944110, 6 }; 
	// Function /Script/Engine.SceneComponent.SetHiddenInGame
	constexpr static const FunctionPointer<USceneComponent, void, const bool, const bool> SetHiddenInGame = { 0x4944b50, 7 }; 
	// Function /Script/Engine.SceneComponent.SetAbsolute
	constexpr static const FunctionPointer<USceneComponent, void, const bool, const bool, const bool> SetAbsolute = { 0x4944550, 8 }; 
	// Function /Script/Engine.SceneComponent.ResetRelativeTransform
	constexpr static const FunctionPointer<USceneComponent, void> ResetRelativeTransform = { 0x4949030, 9 }; 
	// Function /Script/Engine.SceneComponent.OnRep_Visibility
	constexpr static const FunctionPointer<USceneComponent, void, const bool> OnRep_Visibility = { 0x4949940, 10 }; 
	// Function /Script/Engine.SceneComponent.OnRep_Transform
	constexpr static const FunctionPointer<USceneComponent, void> OnRep_Transform = { 0x4949a90, 11 }; 
	// Function /Script/Engine.SceneComponent.OnRep_AttachSocketName
	constexpr static const FunctionPointer<USceneComponent, void> OnRep_AttachSocketName = { 0x4949a50, 12 }; 
	// Function /Script/Engine.SceneComponent.OnRep_AttachParent
	constexpr static const FunctionPointer<USceneComponent, void> OnRep_AttachParent = { 0x4949a50, 13 }; 
	// Function /Script/Engine.SceneComponent.OnRep_AttachChildren
	constexpr static const FunctionPointer<USceneComponent, void> OnRep_AttachChildren = { 0x4949a70, 14 }; 
	// Function /Script/Engine.SceneComponent.K2_SetWorldTransform
	constexpr static const FunctionPointer<USceneComponent, void, const FTransform&, const bool, const FHitResult&, const bool> K2_SetWorldTransform = { 0x4947750, 15 }; 
	// Function /Script/Engine.SceneComponent.K2_SetWorldRotation
	constexpr static const FunctionPointer<USceneComponent, void, const FRotator, const bool, const FHitResult&, const bool> K2_SetWorldRotation = { 0x4947b30, 16 }; 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocationAndRotation
	constexpr static const FunctionPointer<USceneComponent, void, const FVector, const FRotator, const bool, const FHitResult&, const bool> K2_SetWorldLocationAndRotation = { 0x49441e0, 17 }; 
	// Function /Script/Engine.SceneComponent.K2_SetWorldLocation
	constexpr static const FunctionPointer<USceneComponent, void, const FVector, const bool, const FHitResult&, const bool> K2_SetWorldLocation = { 0x4947e10, 18 }; 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeTransform
	constexpr static const FunctionPointer<USceneComponent, void, const FTransform&, const bool, const FHitResult&, const bool> K2_SetRelativeTransform = { 0x49490a0, 19 }; 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeRotation
	constexpr static const FunctionPointer<USceneComponent, void, const FRotator, const bool, const FHitResult&, const bool> K2_SetRelativeRotation = { 0x49493a0, 20 }; 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocationAndRotation
	constexpr static const FunctionPointer<USceneComponent, void, const FVector, const FRotator, const bool, const FHitResult&, const bool> K2_SetRelativeLocationAndRotation = { 0x4944770, 21 }; 
	// Function /Script/Engine.SceneComponent.K2_SetRelativeLocation
	constexpr static const FunctionPointer<USceneComponent, void, const FVector, const bool, const FHitResult&, const bool> K2_SetRelativeLocation = { 0x4949670, 22 }; 
	// Function /Script/Engine.SceneComponent.K2_GetComponentToWorld
	constexpr static const FunctionPointer<USceneComponent, FTransform> K2_GetComponentToWorld = { 0x49468c0, 23 }; 
	// Function /Script/Engine.SceneComponent.K2_GetComponentScale
	constexpr static const FunctionPointer<USceneComponent, FVector> K2_GetComponentScale = { 0x4946900, 24 }; 
	// Function /Script/Engine.SceneComponent.K2_GetComponentRotation
	constexpr static const FunctionPointer<USceneComponent, FRotator> K2_GetComponentRotation = { 0x4946940, 25 }; 
	// Function /Script/Engine.SceneComponent.K2_GetComponentLocation
	constexpr static const FunctionPointer<USceneComponent, FVector> K2_GetComponentLocation = { 0x49469d0, 26 }; 
	// Function /Script/Engine.SceneComponent.K2_DetachFromComponent
	constexpr static const FunctionPointer<USceneComponent, void, const EDetachmentRule, const EDetachmentRule, const EDetachmentRule, const bool> K2_DetachFromComponent = { 0x4945680, 27 }; 
	// Function /Script/Engine.SceneComponent.K2_AttachToComponent
	constexpr static const FunctionPointer<USceneComponent, bool, const USceneComponent*, const FName, const EAttachmentRule, const EAttachmentRule, const EAttachmentRule, const bool> K2_AttachToComponent = { 0x4945be0, 28 }; 
	// Function /Script/Engine.SceneComponent.K2_AttachTo
	constexpr static const FunctionPointer<USceneComponent, bool, const USceneComponent*, const FName, const TEnumAsByte<EAttachLocation>, const bool> K2_AttachTo = { 0x4945f70, 29 }; 
	// Function /Script/Engine.SceneComponent.K2_AddWorldTransformKeepScale
	constexpr static const FunctionPointer<USceneComponent, void, const FTransform&, const bool, const FHitResult&, const bool> K2_AddWorldTransformKeepScale = { 0x4946a10, 30 }; 
	// Function /Script/Engine.SceneComponent.K2_AddWorldTransform
	constexpr static const FunctionPointer<USceneComponent, void, const FTransform&, const bool, const FHitResult&, const bool> K2_AddWorldTransform = { 0x4946dd0, 31 }; 
	// Function /Script/Engine.SceneComponent.K2_AddWorldRotation
	constexpr static const FunctionPointer<USceneComponent, void, const FRotator, const bool, const FHitResult&, const bool> K2_AddWorldRotation = { 0x4947170, 32 }; 
	// Function /Script/Engine.SceneComponent.K2_AddWorldOffset
	constexpr static const FunctionPointer<USceneComponent, void, const FVector, const bool, const FHitResult&, const bool> K2_AddWorldOffset = { 0x4947450, 33 }; 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeRotation
	constexpr static const FunctionPointer<USceneComponent, void, const FRotator, const bool, const FHitResult&, const bool> K2_AddRelativeRotation = { 0x49489b0, 34 }; 
	// Function /Script/Engine.SceneComponent.K2_AddRelativeLocation
	constexpr static const FunctionPointer<USceneComponent, void, const FVector, const bool, const FHitResult&, const bool> K2_AddRelativeLocation = { 0x4948c80, 35 }; 
	// Function /Script/Engine.SceneComponent.K2_AddLocalTransform
	constexpr static const FunctionPointer<USceneComponent, void, const FTransform&, const bool, const FHitResult&, const bool> K2_AddLocalTransform = { 0x49480f0, 36 }; 
	// Function /Script/Engine.SceneComponent.K2_AddLocalRotation
	constexpr static const FunctionPointer<USceneComponent, void, const FRotator, const bool, const FHitResult&, const bool> K2_AddLocalRotation = { 0x49483f0, 37 }; 
	// Function /Script/Engine.SceneComponent.K2_AddLocalOffset
	constexpr static const FunctionPointer<USceneComponent, void, const FVector, const bool, const FHitResult&, const bool> K2_AddLocalOffset = { 0x49486d0, 38 }; 
	// Function /Script/Engine.SceneComponent.IsVisible
	constexpr static const FunctionPointer<USceneComponent, bool> IsVisible = { 0x4944f20, 39 }; 
	// Function /Script/Engine.SceneComponent.IsSimulatingPhysics
	constexpr static const FunctionPointer<USceneComponent, bool, const FName> IsSimulatingPhysics = { 0x4946690, 40 }; 
	// Function /Script/Engine.SceneComponent.IsAnySimulatingPhysics
	constexpr static const FunctionPointer<USceneComponent, bool> IsAnySimulatingPhysics = { 0x4946660, 41 }; 
	// Function /Script/Engine.SceneComponent.GetUpVector
	constexpr static const FunctionPointer<USceneComponent, FVector> GetUpVector = { 0x4946820, 42 }; 
	// Function /Script/Engine.SceneComponent.GetSocketTransform
	constexpr static const FunctionPointer<USceneComponent, FTransform, const FName, const TEnumAsByte<ERelativeTransformSpace>> GetSocketTransform = { 0x4945380, 43 }; 
	// Function /Script/Engine.SceneComponent.GetSocketRotation
	constexpr static const FunctionPointer<USceneComponent, FRotator, const FName> GetSocketRotation = { 0x4945180, 44 }; 
	// Function /Script/Engine.SceneComponent.GetSocketQuaternion
	constexpr static const FunctionPointer<USceneComponent, FQuat, const FName> GetSocketQuaternion = { 0x4945080, 45 }; 
	// Function /Script/Engine.SceneComponent.GetSocketLocation
	constexpr static const FunctionPointer<USceneComponent, FVector, const FName> GetSocketLocation = { 0x4945280, 46 }; 
	// Function /Script/Engine.SceneComponent.GetShouldUpdatePhysicsVolume
	constexpr static const FunctionPointer<USceneComponent, bool> GetShouldUpdatePhysicsVolume = { 0x4949bb0, 47 }; 
	// Function /Script/Engine.SceneComponent.GetRightVector
	constexpr static const FunctionPointer<USceneComponent, FVector> GetRightVector = { 0x4946780, 48 }; 
	// Function /Script/Engine.SceneComponent.GetRelativeTransform
	constexpr static const FunctionPointer<USceneComponent, FTransform> GetRelativeTransform = { 0x4949050, 49 }; 
	// Function /Script/Engine.SceneComponent.GetPhysicsVolume
	constexpr static const FunctionPointer<USceneComponent, APhysicsVolume*> GetPhysicsVolume = { 0x4944ae0, 50 }; 
	// Function /Script/Engine.SceneComponent.GetParentComponents
	constexpr static const FunctionPointer<USceneComponent, void, const TArray<USceneComponent*>&> GetParentComponents = { 0x4946500, 51 }; 
	// Function /Script/Engine.SceneComponent.GetNumChildrenComponents
	constexpr static const FunctionPointer<USceneComponent, int32_t> GetNumChildrenComponents = { 0x3c79890, 52 }; 
	// Function /Script/Engine.SceneComponent.GetForwardVector
	constexpr static const FunctionPointer<USceneComponent, FVector> GetForwardVector = { 0x4905110, 53 }; 
	// Function /Script/Engine.SceneComponent.GetComponentVelocity
	constexpr static const FunctionPointer<USceneComponent, FVector> GetComponentVelocity = { 0x4944f50, 54 }; 
	// Function /Script/Engine.SceneComponent.GetChildrenComponents
	constexpr static const FunctionPointer<USceneComponent, void, const bool, const TArray<USceneComponent*>&> GetChildrenComponents = { 0x4946240, 55 }; 
	// Function /Script/Engine.SceneComponent.GetChildComponent
	constexpr static const FunctionPointer<USceneComponent, USceneComponent*, const int32_t> GetChildComponent = { 0x49463f0, 56 }; 
	// Function /Script/Engine.SceneComponent.GetAttachSocketName
	constexpr static const FunctionPointer<USceneComponent, FName> GetAttachSocketName = { 0x3847690, 57 }; 
	// Function /Script/Engine.SceneComponent.GetAttachParent
	constexpr static const FunctionPointer<USceneComponent, USceneComponent*> GetAttachParent = { 0x4946640, 58 }; 
	// Function /Script/Engine.SceneComponent.GetAllSocketNames
	constexpr static const FunctionPointer<USceneComponent, TArray<FName>> GetAllSocketNames = { 0x4945530, 59 }; 
	// Function /Script/Engine.SceneComponent.DoesSocketExist
	constexpr static const FunctionPointer<USceneComponent, bool, const FName> DoesSocketExist = { 0x4944f90, 60 }; 
	// Function /Script/Engine.SceneComponent.DetachFromParent
	constexpr static const FunctionPointer<USceneComponent, void, const bool, const bool> DetachFromParent = { 0x4945900, 61 }; 
};

/// Struct /Script/Engine.KeyHandleMap
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FKeyHandleMap
{ 
	unsigned char                                      UnknownData01_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.IndexedCurve
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FIndexedCurve
{ 
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FKeyHandleMap                                      KeyHandlesToIndices;                                        // 0x0008   (0x0060)  
};

/// Struct /Script/Engine.RealCurve
/// Size: 0x0070 (112 bytes) (0x000068 - 0x000070) align n/a MaxSize: 0x0070
struct FRealCurve : FIndexedCurve
{ 
	float                                              DefaultValue;                                               // 0x0068   (0x0004)  
	TEnumAsByte<ERichCurveExtrapolation>               PreInfinityExtrap;                                          // 0x006C   (0x0001)  
	TEnumAsByte<ERichCurveExtrapolation>               PostInfinityExtrap;                                         // 0x006D   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x006E   (0x0002)  MISSED
};

/// Struct /Script/Engine.RichCurveKey
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FRichCurveKey
{ 
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x0000   (0x0001)  
	TEnumAsByte<ERichCurveTangentMode>                 TangentMode;                                                // 0x0001   (0x0001)  
	TEnumAsByte<ERichCurveTangentWeightMode>           TangentWeightMode;                                          // 0x0002   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              Time;                                                       // 0x0004   (0x0004)  
	float                                              Value;                                                      // 0x0008   (0x0004)  
	float                                              ArriveTangent;                                              // 0x000C   (0x0004)  
	float                                              ArriveTangentWeight;                                        // 0x0010   (0x0004)  
	float                                              LeaveTangent;                                               // 0x0014   (0x0004)  
	float                                              LeaveTangentWeight;                                         // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.RichCurve
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align n/a MaxSize: 0x0080
struct FRichCurve : FRealCurve
{ 
	TArray<FRichCurveKey>                              Keys;                                                       // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.RuntimeFloatCurve
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align n/a MaxSize: 0x0088
struct FRuntimeFloatCurve
{ 
	FRichCurve                                         EditorCurveData;                                            // 0x0000   (0x0080)  
	class UCurveFloat*                                 ExternalCurve;                                              // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.BaseAttenuationSettings
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FBaseAttenuationSettings
{ 
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	EAttenuationDistanceModel                          DistanceAlgorithm;                                          // 0x0008   (0x0001)  
	TEnumAsByte<EAttenuationShape>                     AttenuationShape;                                           // 0x0009   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              dBAttenuationAtMax;                                         // 0x000C   (0x0004)  
	ENaturalSoundFalloffMode                           FalloffMode;                                                // 0x0010   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	FVector                                            AttenuationShapeExtents;                                    // 0x0014   (0x000C)  
	float                                              ConeOffset;                                                 // 0x0020   (0x0004)  
	float                                              FalloffDistance;                                            // 0x0024   (0x0004)  
	FRuntimeFloatCurve                                 CustomAttenuationCurve;                                     // 0x0028   (0x0088)  
};

/// Struct /Script/Engine.AttenuationSubmixSendSettings
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align n/a MaxSize: 0x00A8
struct FAttenuationSubmixSendSettings
{ 
	class USoundSubmixBase*                            Submix;                                                     // 0x0000   (0x0008)  
	ESubmixSendMethod                                  SubmixSendMethod;                                           // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              SubmixSendLevelMin;                                         // 0x000C   (0x0004)  
	float                                              SubmixSendLevelMax;                                         // 0x0010   (0x0004)  
	float                                              SubmixSendDistanceMin;                                      // 0x0014   (0x0004)  
	float                                              SubmixSendDistanceMax;                                      // 0x0018   (0x0004)  
	float                                              ManualSubmixSendLevel;                                      // 0x001C   (0x0004)  
	FRuntimeFloatCurve                                 CustomSubmixSendCurve;                                      // 0x0020   (0x0088)  
};

/// Struct /Script/Engine.SoundAttenuationPluginSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSoundAttenuationPluginSettings
{ 
	TArray<class USpatializationPluginSourceSettingsBase*> SpatializationPluginSettingsArray;                      // 0x0000   (0x0010)  
	TArray<class UOcclusionPluginSourceSettingsBase*>  OcclusionPluginSettingsArray;                               // 0x0010   (0x0010)  
	TArray<class UReverbPluginSourceSettingsBase*>     ReverbPluginSettingsArray;                                  // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.SoundAttenuationSettings
/// Size: 0x03A0 (928 bytes) (0x0000B0 - 0x0003A0) align n/a MaxSize: 0x03A0
struct FSoundAttenuationSettings : FBaseAttenuationSettings
{ 
	bool                                               bAttenuate : 1;                                             // 0x00B0:0 (0x0001)  
	bool                                               bSpatialize : 1;                                            // 0x00B0:1 (0x0001)  
	bool                                               bAttenuateWithLPF : 1;                                      // 0x00B0:2 (0x0001)  
	bool                                               bEnableListenerFocus : 1;                                   // 0x00B0:3 (0x0001)  
	bool                                               bEnableFocusInterpolation : 1;                              // 0x00B0:4 (0x0001)  
	bool                                               bEnableOcclusion : 1;                                       // 0x00B0:5 (0x0001)  
	bool                                               bUseComplexCollisionForOcclusion : 1;                       // 0x00B0:6 (0x0001)  
	bool                                               bEnableReverbSend : 1;                                      // 0x00B0:7 (0x0001)  
	bool                                               bEnablePriorityAttenuation : 1;                             // 0x00B1:0 (0x0001)  
	bool                                               bApplyNormalizationToStereoSounds : 1;                      // 0x00B1:1 (0x0001)  
	bool                                               bEnableLogFrequencyScaling : 1;                             // 0x00B1:2 (0x0001)  
	bool                                               bEnableSubmixSends : 1;                                     // 0x00B1:3 (0x0001)  
	TEnumAsByte<ESoundSpatializationAlgorithm>         SpatializationAlgorithm;                                    // 0x00B2   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x00B3   (0x0001)  MISSED
	float                                              BinauralRadius;                                             // 0x00B4   (0x0004)  
	EAirAbsorptionMethod                               AbsorptionMethod;                                           // 0x00B8   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     OcclusionTraceChannel;                                      // 0x00B9   (0x0001)  
	EReverbSendMethod                                  ReverbSendMethod;                                           // 0x00BA   (0x0001)  
	EPriorityAttenuationMethod                         PriorityAttenuationMethod;                                  // 0x00BB   (0x0001)  
	float                                              OmniRadius;                                                 // 0x00BC   (0x0004)  
	float                                              StereoSpread;                                               // 0x00C0   (0x0004)  
	float                                              LPFRadiusMin;                                               // 0x00C4   (0x0004)  
	float                                              LPFRadiusMax;                                               // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomLowpassAirAbsorptionCurve;                            // 0x00D0   (0x0088)  
	FRuntimeFloatCurve                                 CustomHighpassAirAbsorptionCurve;                           // 0x0158   (0x0088)  
	float                                              LPFFrequencyAtMin;                                          // 0x01E0   (0x0004)  
	float                                              LPFFrequencyAtMax;                                          // 0x01E4   (0x0004)  
	float                                              HPFFrequencyAtMin;                                          // 0x01E8   (0x0004)  
	float                                              HPFFrequencyAtMax;                                          // 0x01EC   (0x0004)  
	float                                              FocusAzimuth;                                               // 0x01F0   (0x0004)  
	float                                              NonFocusAzimuth;                                            // 0x01F4   (0x0004)  
	float                                              FocusDistanceScale;                                         // 0x01F8   (0x0004)  
	float                                              NonFocusDistanceScale;                                      // 0x01FC   (0x0004)  
	float                                              FocusPriorityScale;                                         // 0x0200   (0x0004)  
	float                                              NonFocusPriorityScale;                                      // 0x0204   (0x0004)  
	float                                              FocusVolumeAttenuation;                                     // 0x0208   (0x0004)  
	float                                              NonFocusVolumeAttenuation;                                  // 0x020C   (0x0004)  
	float                                              FocusAttackInterpSpeed;                                     // 0x0210   (0x0004)  
	float                                              FocusReleaseInterpSpeed;                                    // 0x0214   (0x0004)  
	float                                              OcclusionLowPassFilterFrequency;                            // 0x0218   (0x0004)  
	float                                              OcclusionVolumeAttenuation;                                 // 0x021C   (0x0004)  
	float                                              OcclusionInterpolationTime;                                 // 0x0220   (0x0004)  
	float                                              ReverbWetLevelMin;                                          // 0x0224   (0x0004)  
	float                                              ReverbWetLevelMax;                                          // 0x0228   (0x0004)  
	float                                              ReverbDistanceMin;                                          // 0x022C   (0x0004)  
	float                                              ReverbDistanceMax;                                          // 0x0230   (0x0004)  
	float                                              ManualReverbSendLevel;                                      // 0x0234   (0x0004)  
	FRuntimeFloatCurve                                 CustomReverbSendCurve;                                      // 0x0238   (0x0088)  
	TArray<FAttenuationSubmixSendSettings>             SubmixSendSettings;                                         // 0x02C0   (0x0010)  
	float                                              PriorityAttenuationMin;                                     // 0x02D0   (0x0004)  
	float                                              PriorityAttenuationMax;                                     // 0x02D4   (0x0004)  
	float                                              PriorityAttenuationDistanceMin;                             // 0x02D8   (0x0004)  
	float                                              PriorityAttenuationDistanceMax;                             // 0x02DC   (0x0004)  
	float                                              ManualPriorityAttenuation;                                  // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x02E4   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomPriorityAttenuationCurve;                             // 0x02E8   (0x0088)  
	FSoundAttenuationPluginSettings                    PluginSettings;                                             // 0x0370   (0x0030)  
};

/// Struct /Script/Engine.SoundSubmixSendInfo
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FSoundSubmixSendInfo
{ 
	ESendLevelControlMethod                            SendLevelControlMethod;                                     // 0x0000   (0x0001)  
	ESubmixSendStage                                   SendStage;                                                  // 0x0001   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	class USoundSubmixBase*                            SoundSubmix;                                                // 0x0008   (0x0008)  
	float                                              SendLevel;                                                  // 0x0010   (0x0004)  
	float                                              MinSendLevel;                                               // 0x0014   (0x0004)  
	float                                              MaxSendLevel;                                               // 0x0018   (0x0004)  
	float                                              MinSendDistance;                                            // 0x001C   (0x0004)  
	float                                              MaxSendDistance;                                            // 0x0020   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomSendLevelCurve;                                       // 0x0028   (0x0088)  
};

/// Struct /Script/Engine.SoundSourceBusSendInfo
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FSoundSourceBusSendInfo
{ 
	ESourceBusSendLevelControlMethod                   SourceBusSendLevelControlMethod;                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class USoundSourceBus*                             SoundSourceBus;                                             // 0x0008   (0x0008)  
	class UAudioBus*                                   AudioBus;                                                   // 0x0010   (0x0008)  
	float                                              SendLevel;                                                  // 0x0018   (0x0004)  
	float                                              MinSendLevel;                                               // 0x001C   (0x0004)  
	float                                              MaxSendLevel;                                               // 0x0020   (0x0004)  
	float                                              MinSendDistance;                                            // 0x0024   (0x0004)  
	float                                              MaxSendDistance;                                            // 0x0028   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FRuntimeFloatCurve                                 CustomSendLevelCurve;                                       // 0x0030   (0x0088)  
};

/// Class /Script/AudioMixer.SynthComponent
/// Size: 0x0730 (1840 bytes) (0x000260 - 0x000730) align n/a MaxSize: 0x0730
class USynthComponent : public USceneComponent
{ 
public:
	bool                                               bAutoDestroy : 1;                                           // 0x0260:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x0260:1 (0x0001)  
	bool                                               bAllowSpatialization : 1;                                   // 0x0260:2 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x0260:3 (0x0001)  
	unsigned char                                      UnknownData06_3[0x3];                                       // 0x0261   (0x0003)  MISSED
	bool                                               bOutputToBusOnly : 1;                                       // 0x0264:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0265   (0x0003)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0268   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0270   (0x03A0)  
	class USoundConcurrency*                           ConcurrencySettings;                                        // 0x0610   (0x0008)  
	TSet<USoundConcurrency*>                           ConcurrencySet;                                             // 0x0618   (0x0050)  
	class USoundClass*                                 SoundClass;                                                 // 0x0668   (0x0008)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0670   (0x0008)  
	class USoundSubmixBase*                            SoundSubmix;                                                // 0x0678   (0x0008)  
	TArray<FSoundSubmixSendInfo>                       SoundSubmixSends;                                           // 0x0680   (0x0010)  
	TArray<FSoundSourceBusSendInfo>                    BusSends;                                                   // 0x0690   (0x0010)  
	TArray<FSoundSourceBusSendInfo>                    PreEffectBusSends;                                          // 0x06A0   (0x0010)  
	bool                                               bIsUISound : 1;                                             // 0x06B0:0 (0x0001)  
	bool                                               bIsPreviewSound : 1;                                        // 0x06B0:1 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x06B1   (0x0003)  MISSED
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x06B4   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x06B8   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x06BC   (0x0004)  MISSED
	FMulticastInlineDelegate                           OnAudioEnvelopeValue;                                       // 0x06C0   (0x0010)  
	unsigned char                                      UnknownData10_6[0x20];                                      // 0x06D0   (0x0020)  MISSED
	class USynthSound*                                 Synth;                                                      // 0x06F0   (0x0008)  
	class UAudioComponent*                             AudioComponent;                                             // 0x06F8   (0x0008)  
	unsigned char                                      UnknownData11_7[0x30];                                      // 0x0700   (0x0030)  MISSED

	/// Functions
	// Function /Script/AudioMixer.SynthComponent.Stop
	constexpr static const FunctionPointer<USynthComponent, void> Stop = { 0x3e44fc0, 0 }; 
	// Function /Script/AudioMixer.SynthComponent.Start
	constexpr static const FunctionPointer<USynthComponent, void> Start = { 0x3e44fe0, 1 }; 
	// Function /Script/AudioMixer.SynthComponent.SetVolumeMultiplier
	constexpr static const FunctionPointer<USynthComponent, void, const float> SetVolumeMultiplier = { 0x3e44e90, 2 }; 
	// Function /Script/AudioMixer.SynthComponent.SetSubmixSend
	constexpr static const FunctionPointer<USynthComponent, void, const USoundSubmixBase*, const float> SetSubmixSend = { 0x3e44d00, 3 }; 
	// Function /Script/AudioMixer.SynthComponent.SetLowPassFilterFrequency
	constexpr static const FunctionPointer<USynthComponent, void, const float> SetLowPassFilterFrequency = { 0x3e44b50, 4 }; 
	// Function /Script/AudioMixer.SynthComponent.SetLowPassFilterEnabled
	constexpr static const FunctionPointer<USynthComponent, void, const bool> SetLowPassFilterEnabled = { 0x3e44c20, 5 }; 
	// Function /Script/AudioMixer.SynthComponent.IsPlaying
	constexpr static const FunctionPointer<USynthComponent, bool> IsPlaying = { 0x3e44f70, 6 }; 
};

/// Class /Script/AudioMixer.AudioGenerator
/// Size: 0x00A8 (168 bytes) (0x000028 - 0x0000A8) align n/a MaxSize: 0x00A8
class UAudioGenerator : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x80];                                      // 0x0028   (0x0080)  MISSED
};

/// Class /Script/Engine.BlueprintFunctionLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UBlueprintFunctionLibrary : public UObject
{ 
public:
};

/// Class /Script/AudioMixer.AudioMixerBlueprintLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.TrimAudioCache
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, float, const float> TrimAudioCache = { 0x3e3a0c0, 0 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StopRecordingOutput
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, USoundWave*, const UObject*, const EAudioRecordingExportType, const FString, const FString, const USoundSubmix*, const USoundWave*> StopRecordingOutput = { 0x3e3c9b0, 1 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StopAudioBus
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const UAudioBus*> StopAudioBus = { 0x3e39ce0, 2 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StopAnalyzingOutput
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundSubmix*> StopAnalyzingOutput = { 0x3e3c0f0, 3 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StartRecordingOutput
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const float, const USoundSubmix*> StartRecordingOutput = { 0x3e3cd80, 4 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StartAudioBus
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const UAudioBus*> StartAudioBus = { 0x3e39e60, 5 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.StartAnalyzingOutput
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundSubmix*, const EFFTSize, const EFFTPeakInterpolationMethod, const EFFTWindowType, const float, const EAudioSpectrumType> StartAnalyzingOutput = { 0x3e3c270, 6 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.SetSubmixEffectChainOverride
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundSubmix*, const TArray<USoundEffectSubmixPreset*>, const float> SetSubmixEffectChainOverride = { 0x3e3d1a0, 7 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.SetBypassSourceEffectChainEntry
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundEffectSourcePresetChain*, const int32_t, const bool> SetBypassSourceEffectChainEntry = { 0x3e3a6d0, 8 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ResumeRecordingOutput
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundSubmix*> ResumeRecordingOutput = { 0x3e3c6b0, 9 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ReplaceSoundEffectSubmix
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundSubmix*, const int32_t, const USoundEffectSubmixPreset*> ReplaceSoundEffectSubmix = { 0x3e3d6c0, 10 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPresetAtIndex
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundSubmix*, const int32_t> RemoveSubmixEffectPresetAtIndex = { 0x3e3d9f0, 11 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPreset
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundSubmix*, const USoundEffectSubmixPreset*> RemoveSubmixEffectPreset = { 0x3e3dcc0, 12 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveSourceEffectFromPresetChain
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundEffectSourcePresetChain*, const int32_t> RemoveSourceEffectFromPresetChain = { 0x3e3aa10, 13 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.RemoveMasterSubmixEffect
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundEffectSubmixPreset*> RemoveMasterSubmixEffect = { 0x3e3e370, 14 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundForPlayback
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const USoundWave*, const FDelegateProperty> PrimeSoundForPlayback = { 0x3e3a2f0, 15 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundCueForPlayback
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const USoundCue*> PrimeSoundCueForPlayback = { 0x3e3a210, 16 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.PauseRecordingOutput
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundSubmix*> PauseRecordingOutput = { 0x3e3c830, 17 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.MakePresetSpectralAnalysisBandSettings
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, TArray<FSoundSubmixSpectralAnalysisBandSettings>, const EAudioSpectrumBandPresetType, const int32_t, const int32_t, const int32_t> MakePresetSpectralAnalysisBandSettings = { 0x3e3b590, 18 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.MakeMusicalSpectralAnalysisBandSettings
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, TArray<FSoundSubmixSpectralAnalysisBandSettings>, const int32_t, const EMusicalNoteName, const int32_t, const int32_t, const int32_t> MakeMusicalSpectralAnalysisBandSettings = { 0x3e3bc60, 19 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.MakeFullSpectrumSpectralAnalysisBandSettings
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, TArray<FSoundSubmixSpectralAnalysisBandSettings>, const int32_t, const float, const float, const int32_t, const int32_t> MakeFullSpectrumSpectralAnalysisBandSettings = { 0x3e3b8e0, 20 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.IsAudioBusActive
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, bool, const UObject*, const UAudioBus*> IsAudioBusActive = { 0x3e39ad0, 21 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.GetPhaseForFrequencies
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const TArray<float>&, const TArray<float>&, const USoundSubmix*> GetPhaseForFrequencies = { 0x3e3afd0, 22 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.GetNumberOfEntriesInSourceEffectChain
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, int32_t, const UObject*, const USoundEffectSourcePresetChain*> GetNumberOfEntriesInSourceEffectChain = { 0x3e3a510, 23 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.GetMagnitudeForFrequencies
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const TArray<float>&, const TArray<float>&, const USoundSubmix*> GetMagnitudeForFrequencies = { 0x3e3b2b0, 24 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffects
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundSubmix*> ClearSubmixEffects = { 0x3e3d460, 25 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffectChainOverride
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundSubmix*, const float> ClearSubmixEffectChainOverride = { 0x3e3cf90, 26 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.ClearMasterSubmixEffects
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*> ClearMasterSubmixEffects = { 0x3e3e270, 27 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.AddSubmixEffect
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, int32_t, const UObject*, const USoundSubmix*, const USoundEffectSubmixPreset*> AddSubmixEffect = { 0x3e3dfa0, 28 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.AddSourceEffectToPresetChain
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundEffectSourcePresetChain*, const FSourceEffectChainEntry> AddSourceEffectToPresetChain = { 0x3e3ad00, 29 }; 
	// Function /Script/AudioMixer.AudioMixerBlueprintLibrary.AddMasterSubmixEffect
	constexpr static const FunctionPointer<UAudioMixerBlueprintLibrary, void, const UObject*, const USoundEffectSubmixPreset*> AddMasterSubmixEffect = { 0x3e3e540, 30 }; 
};

/// Class /Script/AudioMixer.QuartzClockHandle
/// Size: 0x0190 (400 bytes) (0x000028 - 0x000190) align n/a MaxSize: 0x0190
class UQuartzClockHandle : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x140];                                     // 0x0028   (0x0140)  MISSED
	class UQuartzSubsystem*                            QuartzSubsystem;                                            // 0x0168   (0x0008)  
	unsigned char                                      UnknownData03_6[0x18];                                      // 0x0170   (0x0018)  MISSED
	class UWorld*                                      WorldPtr;                                                   // 0x0188   (0x0008)  

	/// Functions
	// Function /Script/AudioMixer.QuartzClockHandle.UnsubscribeFromTimeDivision
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*, const EQuartzCommandQuantization> UnsubscribeFromTimeDivision = { 0x3e405d0, 0 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.UnsubscribeFromAllTimeDivisions
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*> UnsubscribeFromAllTimeDivisions = { 0x3e404a0, 1 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.SubscribeToQuantizationEvent
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*, const EQuartzCommandQuantization, const FDelegateProperty&> SubscribeToQuantizationEvent = { 0x3e409f0, 2 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.SubscribeToAllQuantizationEvents
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*, const FDelegateProperty&> SubscribeToAllQuantizationEvents = { 0x3e40790, 3 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.SetTicksPerSecond
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*, const FQuartzQuantizationBoundary&, const FDelegateProperty&, const float> SetTicksPerSecond = { 0x3e3fee0, 4 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.SetThirtySecondNotesPerMinute
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*, const FQuartzQuantizationBoundary&, const FDelegateProperty&, const float> SetThirtySecondNotesPerMinute = { 0x3e3f920, 5 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.SetSecondsPerTick
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*, const FQuartzQuantizationBoundary&, const FDelegateProperty&, const float> SetSecondsPerTick = { 0x3e3fc00, 6 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.SetMillisecondsPerTick
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*, const FQuartzQuantizationBoundary&, const FDelegateProperty&, const float> SetMillisecondsPerTick = { 0x3e401c0, 7 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.SetBeatsPerMinute
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*, const FQuartzQuantizationBoundary&, const FDelegateProperty&, const float> SetBeatsPerMinute = { 0x3e3f640, 8 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.ResumeClock
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*> ResumeClock = { 0x3e40d90, 9 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.ResetTransport
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*, const FDelegateProperty&> ResetTransport = { 0x3e40c00, 10 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.PauseClock
	constexpr static const FunctionPointer<UQuartzClockHandle, void, const UObject*> PauseClock = { 0x3e40e80, 11 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.GetTicksPerSecond
	constexpr static const FunctionPointer<UQuartzClockHandle, float, const UObject*> GetTicksPerSecond = { 0x3e3f400, 12 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.GetThirtySecondNotesPerMinute
	constexpr static const FunctionPointer<UQuartzClockHandle, float, const UObject*> GetThirtySecondNotesPerMinute = { 0x3e3f1e0, 13 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.GetSecondsPerTick
	constexpr static const FunctionPointer<UQuartzClockHandle, float, const UObject*> GetSecondsPerTick = { 0x3e3f2f0, 14 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.GetMillisecondsPerTick
	constexpr static const FunctionPointer<UQuartzClockHandle, float, const UObject*> GetMillisecondsPerTick = { 0x3e3f530, 15 }; 
	// Function /Script/AudioMixer.QuartzClockHandle.GetBeatsPerMinute
	constexpr static const FunctionPointer<UQuartzClockHandle, float, const UObject*> GetBeatsPerMinute = { 0x3e3f0d0, 16 }; 
};

/// Class /Script/Engine.SoundEffectPreset
/// Size: 0x0068 (104 bytes) (0x000028 - 0x000068) align n/a MaxSize: 0x0068
class USoundEffectPreset : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x40];                                      // 0x0028   (0x0040)  MISSED
};

/// Class /Script/Engine.SoundEffectSubmixPreset
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align n/a MaxSize: 0x0068
class USoundEffectSubmixPreset : public USoundEffectPreset
{ 
public:
};

/// Struct /Script/AudioMixer.SubmixEffectDynamicProcessorFilterSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSubmixEffectDynamicProcessorFilterSettings
{ 
	bool                                               bEnabled : 1;                                               // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Cutoff;                                                     // 0x0004   (0x0004)  
	float                                              GainDb;                                                     // 0x0008   (0x0004)  
};

/// Struct /Script/AudioMixer.SubmixEffectDynamicsProcessorSettings
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSubmixEffectDynamicsProcessorSettings
{ 
	ESubmixEffectDynamicsProcessorType                 DynamicsProcessorType;                                      // 0x0000   (0x0001)  
	ESubmixEffectDynamicsPeakMode                      PeakMode;                                                   // 0x0001   (0x0001)  
	ESubmixEffectDynamicsChannelLinkMode               LinkMode;                                                   // 0x0002   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              InputGainDb;                                                // 0x0004   (0x0004)  
	float                                              ThresholdDb;                                                // 0x0008   (0x0004)  
	float                                              Ratio;                                                      // 0x000C   (0x0004)  
	float                                              KneeBandwidthDb;                                            // 0x0010   (0x0004)  
	float                                              LookAheadMsec;                                              // 0x0014   (0x0004)  
	float                                              AttackTimeMsec;                                             // 0x0018   (0x0004)  
	float                                              ReleaseTimeMsec;                                            // 0x001C   (0x0004)  
	class USoundSubmix*                                ExternalSubmix;                                             // 0x0020   (0x0008)  
	bool                                               bChannelLinked : 1;                                         // 0x0028:0 (0x0001)  
	bool                                               bAnalogMode : 1;                                            // 0x0028:1 (0x0001)  
	bool                                               bKeyAudition : 1;                                           // 0x0028:2 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              KeyGainDb;                                                  // 0x002C   (0x0004)  
	float                                              OutputGainDb;                                               // 0x0030   (0x0004)  
	FSubmixEffectDynamicProcessorFilterSettings        KeyHighshelf;                                               // 0x0034   (0x000C)  
	FSubmixEffectDynamicProcessorFilterSettings        KeyLowshelf;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset
/// Size: 0x0130 (304 bytes) (0x000068 - 0x000130) align n/a MaxSize: 0x0130
class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
{ 
public:
	unsigned char                                      UnknownData01_8[0x78];                                      // 0x0068   (0x0078)  MISSED
	FSubmixEffectDynamicsProcessorSettings             Settings;                                                   // 0x00E0   (0x0050)  

	/// Functions
	// Function /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset.SetSettings
	constexpr static const FunctionPointer<USubmixEffectDynamicsProcessorPreset, void, const FSubmixEffectDynamicsProcessorSettings&> SetSettings = { 0x3e41ad0, 0 }; 
	// Function /Script/AudioMixer.SubmixEffectDynamicsProcessorPreset.SetExternalSubmix
	constexpr static const FunctionPointer<USubmixEffectDynamicsProcessorPreset, void, const USoundSubmix*> SetExternalSubmix = { 0x3e41cb0, 1 }; 
};

/// Struct /Script/AudioMixer.SubmixEffectEQBand
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSubmixEffectEQBand
{ 
	float                                              Frequency;                                                  // 0x0000   (0x0004)  
	float                                              Bandwidth;                                                  // 0x0004   (0x0004)  
	float                                              GainDb;                                                     // 0x0008   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/AudioMixer.SubmixEffectSubmixEQSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSubmixEffectSubmixEQSettings
{ 
	TArray<FSubmixEffectEQBand>                        EQBands;                                                    // 0x0000   (0x0010)  
};

/// Class /Script/AudioMixer.SubmixEffectSubmixEQPreset
/// Size: 0x00B0 (176 bytes) (0x000068 - 0x0000B0) align n/a MaxSize: 0x00B0
class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
{ 
public:
	unsigned char                                      UnknownData01_8[0x38];                                      // 0x0068   (0x0038)  MISSED
	FSubmixEffectSubmixEQSettings                      Settings;                                                   // 0x00A0   (0x0010)  

	/// Functions
	// Function /Script/AudioMixer.SubmixEffectSubmixEQPreset.SetSettings
	constexpr static const FunctionPointer<USubmixEffectSubmixEQPreset, void, const FSubmixEffectSubmixEQSettings&> SetSettings = { 0x19e1a10, 0 }; 
};

/// Struct /Script/AudioMixer.SubmixEffectReverbSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSubmixEffectReverbSettings
{ 
	bool                                               bBypassEarlyReflections;                                    // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ReflectionsDelay;                                           // 0x0004   (0x0004)  
	float                                              GainHF;                                                     // 0x0008   (0x0004)  
	float                                              ReflectionsGain;                                            // 0x000C   (0x0004)  
	bool                                               bBypassLateReflections;                                     // 0x0010   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              LateDelay;                                                  // 0x0014   (0x0004)  
	float                                              DecayTime;                                                  // 0x0018   (0x0004)  
	float                                              Density;                                                    // 0x001C   (0x0004)  
	float                                              Diffusion;                                                  // 0x0020   (0x0004)  
	float                                              AirAbsorptionGainHF;                                        // 0x0024   (0x0004)  
	float                                              DecayHFRatio;                                               // 0x0028   (0x0004)  
	float                                              LateGain;                                                   // 0x002C   (0x0004)  
	float                                              Gain;                                                       // 0x0030   (0x0004)  
	float                                              WetLevel;                                                   // 0x0034   (0x0004)  
	float                                              DryLevel;                                                   // 0x0038   (0x0004)  
	bool                                               bBypass;                                                    // 0x003C   (0x0001)  
	unsigned char                                      UnknownData05_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Class /Script/AudioMixer.SubmixEffectReverbPreset
/// Size: 0x0110 (272 bytes) (0x000068 - 0x000110) align n/a MaxSize: 0x0110
class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
{ 
public:
	unsigned char                                      UnknownData01_8[0x68];                                      // 0x0068   (0x0068)  MISSED
	FSubmixEffectReverbSettings                        Settings;                                                   // 0x00D0   (0x0040)  

	/// Functions
	// Function /Script/AudioMixer.SubmixEffectReverbPreset.SetSettingsWithReverbEffect
	constexpr static const FunctionPointer<USubmixEffectReverbPreset, void, const UReverbEffect*, const float, const float> SetSettingsWithReverbEffect = { 0x3e42c30, 0 }; 
	// Function /Script/AudioMixer.SubmixEffectReverbPreset.SetSettings
	constexpr static const FunctionPointer<USubmixEffectReverbPreset, void, const FSubmixEffectReverbSettings&> SetSettings = { 0x3e42ec0, 1 }; 
};

/// Class /Script/Engine.Subsystem
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class USubsystem : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.WorldSubsystem
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UWorldSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/AudioMixer.QuartzSubsystem
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class UQuartzSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x50];                                      // 0x0030   (0x0050)  MISSED

	/// Functions
	// Function /Script/AudioMixer.QuartzSubsystem.GetRoundTripMinLatency
	constexpr static const FunctionPointer<UQuartzSubsystem, float, const UObject*> GetRoundTripMinLatency = { 0x3e43550, 0 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.GetRoundTripMaxLatency
	constexpr static const FunctionPointer<UQuartzSubsystem, float, const UObject*> GetRoundTripMaxLatency = { 0x3e433f0, 1 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.GetRoundTripAverageLatency
	constexpr static const FunctionPointer<UQuartzSubsystem, float, const UObject*> GetRoundTripAverageLatency = { 0x3e436b0, 2 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.GetHandleForClock
	constexpr static const FunctionPointer<UQuartzSubsystem, UQuartzClockHandle*, const UObject*, const FName> GetHandleForClock = { 0x3e43ce0, 3 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadMinLatency
	constexpr static const FunctionPointer<UQuartzSubsystem, float, const UObject*> GetGameThreadToAudioRenderThreadMinLatency = { 0x3e43930, 4 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadMaxLatency
	constexpr static const FunctionPointer<UQuartzSubsystem, float, const UObject*> GetGameThreadToAudioRenderThreadMaxLatency = { 0x3e43930, 5 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadAverageLatency
	constexpr static const FunctionPointer<UQuartzSubsystem, float, const UObject*> GetGameThreadToAudioRenderThreadAverageLatency = { 0x3e43a40, 6 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadMinLatency
	constexpr static const FunctionPointer<UQuartzSubsystem, float> GetAudioRenderThreadToGameThreadMinLatency = { 0x3e43870, 7 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadMaxLatency
	constexpr static const FunctionPointer<UQuartzSubsystem, float> GetAudioRenderThreadToGameThreadMaxLatency = { 0x3e43810, 8 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadAverageLatency
	constexpr static const FunctionPointer<UQuartzSubsystem, float> GetAudioRenderThreadToGameThreadAverageLatency = { 0x3e438d0, 9 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.DoesClockExist
	constexpr static const FunctionPointer<UQuartzSubsystem, bool, const UObject*, const FName> DoesClockExist = { 0x3e43b50, 10 }; 
	// Function /Script/AudioMixer.QuartzSubsystem.CreateNewClock
	constexpr static const FunctionPointer<UQuartzSubsystem, UQuartzClockHandle*, const UObject*, const FName, const FQuartzClockSettings, const bool> CreateNewClock = { 0x3e43eb0, 11 }; 
};

/// Struct /Script/Engine.SoundConcurrencySettings
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSoundConcurrencySettings
{ 
	int32_t                                            MaxCount;                                                   // 0x0000   (0x0004)  
	bool                                               bLimitToOwner : 1;                                          // 0x0004:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0005   (0x0003)  MISSED
	TEnumAsByte<EMaxConcurrentResolutionRule>          ResolutionRule;                                             // 0x0008   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              RetriggerTime;                                              // 0x000C   (0x0004)  
	float                                              VolumeScale;                                                // 0x0010   (0x0004)  
	EConcurrencyVolumeScaleMode                        VolumeScaleMode;                                            // 0x0014   (0x0004)  
	float                                              VolumeScaleAttackTime;                                      // 0x0018   (0x0004)  
	bool                                               bVolumeScaleCanRelease : 1;                                 // 0x001C:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x001D   (0x0003)  MISSED
	float                                              VolumeScaleReleaseTime;                                     // 0x0020   (0x0004)  
	float                                              VoiceStealReleaseTime;                                      // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.SoundModulationDestinationSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSoundModulationDestinationSettings
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class USoundModulatorBase*                         Modulator;                                                  // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.SoundModulationDefaultSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FSoundModulationDefaultSettings
{ 
	FSoundModulationDestinationSettings                VolumeModulationDestination;                                // 0x0000   (0x0010)  
	FSoundModulationDestinationSettings                PitchModulationDestination;                                 // 0x0010   (0x0010)  
	FSoundModulationDestinationSettings                HighpassModulationDestination;                              // 0x0020   (0x0010)  
	FSoundModulationDestinationSettings                LowpassModulationDestination;                               // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.SoundModulationDefaultRoutingSettings
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
struct FSoundModulationDefaultRoutingSettings : FSoundModulationDefaultSettings
{ 
	EModulationRouting                                 VolumeRouting;                                              // 0x0040   (0x0001)  
	EModulationRouting                                 PitchRouting;                                               // 0x0041   (0x0001)  
	EModulationRouting                                 HighpassRouting;                                            // 0x0042   (0x0001)  
	EModulationRouting                                 LowpassRouting;                                             // 0x0043   (0x0001)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundBase
/// Size: 0x01B8 (440 bytes) (0x000028 - 0x0001B8) align n/a MaxSize: 0x01B8
class USoundBase : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	class USoundClass*                                 SoundClassObject;                                           // 0x0030   (0x0008)  
	bool                                               bDebug : 1;                                                 // 0x0038:0 (0x0001)  
	bool                                               bOverrideConcurrency : 1;                                   // 0x0038:1 (0x0001)  
	bool                                               bOutputToBusOnly : 1;                                       // 0x0038:2 (0x0001)  
	bool                                               bHasDelayNode : 1;                                          // 0x0038:3 (0x0001)  
	bool                                               bHasConcatenatorNode : 1;                                   // 0x0038:4 (0x0001)  
	bool                                               bBypassVolumeScaleForPriority : 1;                          // 0x0038:5 (0x0001)  
	EVirtualizationMode                                VirtualizationMode;                                         // 0x0039   (0x0001)  
	unsigned char                                      UnknownData03_6[0x56];                                      // 0x003A   (0x0056)  MISSED
	TSet<USoundConcurrency*>                           ConcurrencySet;                                             // 0x0090   (0x0050)  
	FSoundConcurrencySettings                          ConcurrencyOverrides;                                       // 0x00E0   (0x0028)  
	float                                              Duration;                                                   // 0x0108   (0x0004)  
	float                                              MaxDistance;                                                // 0x010C   (0x0004)  
	float                                              TotalSamples;                                               // 0x0110   (0x0004)  
	float                                              Priority;                                                   // 0x0114   (0x0004)  
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0118   (0x0008)  
	FSoundModulationDefaultRoutingSettings             ModulationSettings;                                         // 0x0120   (0x0048)  
	class USoundSubmixBase*                            SoundSubmixObject;                                          // 0x0168   (0x0008)  
	TArray<FSoundSubmixSendInfo>                       SoundSubmixSends;                                           // 0x0170   (0x0010)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0180   (0x0008)  
	TArray<FSoundSourceBusSendInfo>                    BusSends;                                                   // 0x0188   (0x0010)  
	TArray<FSoundSourceBusSendInfo>                    PreEffectBusSends;                                          // 0x0198   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x01A8   (0x0010)  
};

/// Struct /Script/Engine.SoundWaveSpectralDataEntry
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSoundWaveSpectralDataEntry
{ 
	float                                              Magnitude;                                                  // 0x0000   (0x0004)  
	float                                              NormalizedMagnitude;                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveSpectralTimeData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSoundWaveSpectralTimeData
{ 
	TArray<FSoundWaveSpectralDataEntry>                Data;                                                       // 0x0000   (0x0010)  
	float                                              TimeSec;                                                    // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.SoundWaveEnvelopeTimeData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSoundWaveEnvelopeTimeData
{ 
	float                                              Amplitude;                                                  // 0x0000   (0x0004)  
	float                                              TimeSec;                                                    // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SubtitleCue
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSubtitleCue
{ 
	FText                                              text;                                                       // 0x0000   (0x0018)  
	float                                              Time;                                                       // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundWave
/// Size: 0x0378 (888 bytes) (0x0001B8 - 0x000378) align n/a MaxSize: 0x0378
class USoundWave : public USoundBase
{ 
public:
	int32_t                                            CompressionQuality;                                         // 0x01B8   (0x0004)  
	int32_t                                            StreamingPriority;                                          // 0x01BC   (0x0004)  
	ESoundwaveSampleRateSettings                       SampleRateQuality;                                          // 0x01C0   (0x0001)  
	unsigned char                                      UnknownData11_6[0x1];                                       // 0x01C1   (0x0001)  MISSED
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                                 // 0x01C2   (0x0001)  
	bool                                               bLooping : 1;                                               // 0x01C3:0 (0x0001)  
	bool                                               bStreaming : 1;                                             // 0x01C3:1 (0x0001)  
	ESoundAssetCompressionType                         SoundAssetCompressionType;                                  // 0x01C4   (0x0001)  
	bool                                               bSeekableStreaming : 1;                                     // 0x01C5:0 (0x0001)  
	ESoundWaveLoadingBehavior                          LoadingBehavior;                                            // 0x01C6   (0x0001)  
	unsigned char                                      UnknownBit12 : 1;                                           // 0x01C7:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit13 : 1;                                           // 0x01C7:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit14 : 1;                                           // 0x01C7:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit15 : 1;                                           // 0x01C7:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit16 : 1;                                           // 0x01C7:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit17 : 1;                                           // 0x01C7:5 (0x0001)  MISSED
	bool                                               bMature : 1;                                                // 0x01C7:6 (0x0001)  
	bool                                               bManualWordWrap : 1;                                        // 0x01C7:7 (0x0001)  
	bool                                               bSingleLine : 1;                                            // 0x01C8:0 (0x0001)  
	bool                                               bIsAmbisonics : 1;                                          // 0x01C8:1 (0x0001)  
	unsigned char                                      UnknownData18_5[0x7];                                       // 0x01C9   (0x0007)  MISSED
	TArray<float>                                      FrequenciesToAnalyze;                                       // 0x01D0   (0x0010)  
	TArray<FSoundWaveSpectralTimeData>                 CookedSpectralTimeData;                                     // 0x01E0   (0x0010)  
	TArray<FSoundWaveEnvelopeTimeData>                 CookedEnvelopeTimeData;                                     // 0x01F0   (0x0010)  
	int32_t                                            InitialChunkSize;                                           // 0x0200   (0x0004)  
	unsigned char                                      UnknownData19_6[0x44];                                      // 0x0204   (0x0044)  MISSED
	FString                                            SpokenText;                                                 // 0x0248   (0x0010)  
	float                                              SubtitlePriority;                                           // 0x0258   (0x0004)  
	float                                              Volume;                                                     // 0x025C   (0x0004)  
	float                                              Pitch;                                                      // 0x0260   (0x0004)  
	int32_t                                            NumChannels;                                                // 0x0264   (0x0004)  
	int32_t                                            SampleRate;                                                 // 0x0268   (0x0004)  
	unsigned char                                      UnknownData20_6[0xC];                                       // 0x026C   (0x000C)  MISSED
	TArray<FSubtitleCue>                               Subtitles;                                                  // 0x0278   (0x0010)  
	class UCurveTable*                                 Curves;                                                     // 0x0288   (0x0008)  
	class UCurveTable*                                 InternalCurves;                                             // 0x0290   (0x0008)  
	unsigned char                                      UnknownData21_7[0xE0];                                      // 0x0298   (0x00E0)  MISSED
};

/// Class /Script/Engine.SoundWaveProcedural
/// Size: 0x03D0 (976 bytes) (0x000378 - 0x0003D0) align n/a MaxSize: 0x03D0
class USoundWaveProcedural : public USoundWave
{ 
public:
	unsigned char                                      UnknownData01_1[0x58];                                      // 0x0378   (0x0058)  MISSED
};

/// Class /Script/AudioMixer.SynthSound
/// Size: 0x03F0 (1008 bytes) (0x0003D0 - 0x0003F0) align n/a MaxSize: 0x03F0
class USynthSound : public USoundWaveProcedural
{ 
public:
	class USynthComponent*                             OwningSynthComponent;                                       // 0x03D0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x03D8   (0x0018)  MISSED
};

/// Class /Script/Engine.DataAsset
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UDataAsset : public UObject
{ 
public:
	class UClass*                                      NativeClass;                                                // 0x0028   (0x0008)  
};

/// Class /Script/Engine.GameInstance
/// Size: 0x01A8 (424 bytes) (0x000028 - 0x0001A8) align n/a MaxSize: 0x01A8
class UGameInstance : public UObject
{ 
public:
	unsigned char                                      UnknownData03_8[0x10];                                      // 0x0028   (0x0010)  MISSED
	TArray<class ULocalPlayer*>                        LocalPlayers;                                               // 0x0038   (0x0010)  
	class UOnlineSession*                              OnlineSession;                                              // 0x0048   (0x0008)  
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0050   (0x0010)  
	unsigned char                                      UnknownData04_6[0x18];                                      // 0x0060   (0x0018)  MISSED
	FMulticastInlineDelegate                           OnPawnControllerChangedDelegates;                           // 0x0078   (0x0010)  
	unsigned char                                      UnknownData05_7[0x120];                                     // 0x0088   (0x0120)  MISSED

	/// Functions
	// Function /Script/Engine.GameInstance.ReceiveShutdown
	constexpr static const FunctionPointer<UGameInstance, void> ReceiveShutdown = { 0x2bbb090, 0 }; 
	// Function /Script/Engine.GameInstance.ReceiveInit
	constexpr static const FunctionPointer<UGameInstance, void> ReceiveInit = { 0x2bbb090, 1 }; 
	// Function /Script/Engine.GameInstance.HandleTravelError
	constexpr static const FunctionPointer<UGameInstance, void, const TEnumAsByte<ETravelFailure>> HandleTravelError = { 0x2bbb090, 2 }; 
	// Function /Script/Engine.GameInstance.HandleNetworkError
	constexpr static const FunctionPointer<UGameInstance, void, const TEnumAsByte<ENetworkFailure>, const bool> HandleNetworkError = { 0x2bbb090, 3 }; 
	// Function /Script/Engine.GameInstance.DebugRemovePlayer
	constexpr static const FunctionPointer<UGameInstance, void, const int32_t> DebugRemovePlayer = { 0x478d160, 4 }; 
	// Function /Script/Engine.GameInstance.DebugCreatePlayer
	constexpr static const FunctionPointer<UGameInstance, void, const int32_t> DebugCreatePlayer = { 0x478d240, 5 }; 
};

/// Struct /Script/Engine.LightingChannels
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FLightingChannels
{ 
	bool                                               bChannel0 : 1;                                              // 0x0000:0 (0x0001)  
	bool                                               bChannel1 : 1;                                              // 0x0000:1 (0x0001)  
	bool                                               bChannel2 : 1;                                              // 0x0000:2 (0x0001)  
	bool                                               bChannel3 : 1;                                              // 0x0000:3 (0x0001)  
};

/// Struct /Script/Engine.CustomPrimitiveData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FCustomPrimitiveData
{ 
	TArray<float>                                      Data;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.CollisionResponseContainer
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FCollisionResponseContainer
{ 
	TEnumAsByte<ECollisionResponse>                    WorldStatic;                                                // 0x0000   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    WorldDynamic;                                               // 0x0001   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Pawn;                                                       // 0x0002   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Visibility;                                                 // 0x0003   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Camera;                                                     // 0x0004   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    PhysicsBody;                                                // 0x0005   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Vehicle;                                                    // 0x0006   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    Destructible;                                               // 0x0007   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel1;                                        // 0x0008   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel2;                                        // 0x0009   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel3;                                        // 0x000A   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel4;                                        // 0x000B   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel5;                                        // 0x000C   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    EngineTraceChannel6;                                        // 0x000D   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel1;                                          // 0x000E   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel2;                                          // 0x000F   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel3;                                          // 0x0010   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel4;                                          // 0x0011   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel5;                                          // 0x0012   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel6;                                          // 0x0013   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel7;                                          // 0x0014   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel8;                                          // 0x0015   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel9;                                          // 0x0016   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel10;                                         // 0x0017   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel11;                                         // 0x0018   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel12;                                         // 0x0019   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel13;                                         // 0x001A   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel14;                                         // 0x001B   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel15;                                         // 0x001C   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel16;                                         // 0x001D   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel17;                                         // 0x001E   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    GameTraceChannel18;                                         // 0x001F   (0x0001)  
};

/// Struct /Script/Engine.ResponseChannel
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FResponseChannel
{ 
	FName                                              Channel;                                                    // 0x0000   (0x0008)  
	TEnumAsByte<ECollisionResponse>                    Response;                                                   // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.CollisionResponse
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FCollisionResponse
{ 
	FCollisionResponseContainer                        ResponseToChannels;                                         // 0x0000   (0x0020)  
	TArray<FResponseChannel>                           ResponseArray;                                              // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.WalkableSlopeOverride
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FWalkableSlopeOverride
{ 
	TEnumAsByte<EWalkableSlopeBehavior>                WalkableSlopeBehavior;                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              WalkableSlopeAngle;                                         // 0x0004   (0x0004)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.BodyInstance
/// Size: 0x01A8 (424 bytes) (0x000018 - 0x0001A8) align n/a MaxSize: 0x01A8
struct FBodyInstance : FBodyInstanceCore
{ 
	unsigned char                                      UnknownData12_8[0x6];                                       // 0x0018   (0x0006)  MISSED
	TEnumAsByte<ECollisionChannel>                     ObjectType;                                                 // 0x001E   (0x0001)  
	unsigned char                                      UnknownData13_6[0x1];                                       // 0x001F   (0x0001)  MISSED
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x0020   (0x0001)  
	unsigned char                                      UnknownData14_6[0x38];                                      // 0x0021   (0x0038)  MISSED
	ESleepFamily                                       SleepFamily;                                                // 0x0059   (0x0001)  
	TEnumAsByte<EDOFMode>                              DOFMode;                                                    // 0x005A   (0x0001)  
	bool                                               bUseCCD : 1;                                                // 0x005B:0 (0x0001)  
	bool                                               bIgnoreAnalyticCollisions : 1;                              // 0x005B:1 (0x0001)  
	bool                                               bMaskFilter1 : 1;                                           // 0x005B:2 (0x0001)  
	bool                                               bMaskFilter2 : 1;                                           // 0x005B:3 (0x0001)  
	bool                                               bMaskFilter3 : 1;                                           // 0x005B:4 (0x0001)  
	bool                                               bNotifyRigidBodyCollision : 1;                              // 0x005B:5 (0x0001)  
	unsigned char                                      UnknownBit15 : 1;                                           // 0x005B:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit16 : 1;                                           // 0x005B:7 (0x0001)  MISSED
	bool                                               bLockTranslation : 1;                                       // 0x005C:0 (0x0001)  
	bool                                               bLockRotation : 1;                                          // 0x005C:1 (0x0001)  
	bool                                               bLockXTranslation : 1;                                      // 0x005C:2 (0x0001)  
	bool                                               bLockYTranslation : 1;                                      // 0x005C:3 (0x0001)  
	bool                                               bLockZTranslation : 1;                                      // 0x005C:4 (0x0001)  
	bool                                               bLockXRotation : 1;                                         // 0x005C:5 (0x0001)  
	bool                                               bLockYRotation : 1;                                         // 0x005C:6 (0x0001)  
	bool                                               bLockZRotation : 1;                                         // 0x005C:7 (0x0001)  
	bool                                               bOverrideMaxAngularVelocity : 1;                            // 0x005D:0 (0x0001)  
	unsigned char                                      UnknownBit17 : 1;                                           // 0x005D:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit18 : 1;                                           // 0x005D:2 (0x0001)  MISSED
	bool                                               bOverrideMaxDepenetrationVelocity : 1;                      // 0x005D:3 (0x0001)  
	bool                                               bOverrideWalkableSlopeOnInstance : 1;                       // 0x005D:4 (0x0001)  
	bool                                               bInterpolateWhenSubStepping : 1;                            // 0x005D:5 (0x0001)  
	unsigned char                                      UnknownData19_5[0xE];                                       // 0x005E   (0x000E)  MISSED
	FName                                              CollisionProfileName;                                       // 0x006C   (0x0008)  
	char                                               PositionSolverIterationCount;                               // 0x0074   (0x0001)  
	char                                               VelocitySolverIterationCount;                               // 0x0075   (0x0001)  
	unsigned char                                      UnknownData20_6[0x2];                                       // 0x0076   (0x0002)  MISSED
	FCollisionResponse                                 CollisionResponses;                                         // 0x0078   (0x0030)  
	float                                              MaxDepenetrationVelocity;                                   // 0x00A8   (0x0004)  
	float                                              MassInKgOverride;                                           // 0x00AC   (0x0004)  
	unsigned char                                      UnknownData21_6[0x8];                                       // 0x00B0   (0x0008)  MISSED
	float                                              LinearDamping;                                              // 0x00B8   (0x0004)  
	float                                              AngularDamping;                                             // 0x00BC   (0x0004)  
	FVector                                            CustomDOFPlaneNormal;                                       // 0x00C0   (0x000C)  
	FVector                                            COMNudge;                                                   // 0x00CC   (0x000C)  
	float                                              MassScale;                                                  // 0x00D8   (0x0004)  
	FVector                                            InertiaTensorScale;                                         // 0x00DC   (0x000C)  
	FRotator                                           LimitRotation;                                              // 0x00E8   (0x000C)  
	FRotator                                           LimitRotationOffset;                                        // 0x00F4   (0x000C)  
	FName                                              DisableTag;                                                 // 0x0100   (0x0008)  
	unsigned char                                      UnknownData22_6[0x10];                                      // 0x0108   (0x0010)  MISSED
	FWalkableSlopeOverride                             WalkableSlopeOverride;                                      // 0x0118   (0x0010)  
	class UPhysicalMaterial*                           PhysMaterialOverride;                                       // 0x0128   (0x0008)  
	float                                              MaxAngularVelocity;                                         // 0x0130   (0x0004)  
	float                                              CustomSleepThresholdMultiplier;                             // 0x0134   (0x0004)  
	float                                              StabilizationThresholdMultiplier;                           // 0x0138   (0x0004)  
	float                                              PhysicsBlendWeight;                                         // 0x013C   (0x0004)  
	float                                              MaxPhysicsBlendWeight;                                      // 0x0140   (0x0004)  
	float                                              SmoothPhysicsBlendWeightCurrentTime;                        // 0x0144   (0x0004)  
	float                                              SmoothPhysicsBlendWeightTime;                               // 0x0148   (0x0004)  
	float                                              SmoothStartPhysicsBlendWeight;                              // 0x014C   (0x0004)  
	float                                              SmoothEndPhysicsBlendWeight;                                // 0x0150   (0x0004)  
	float                                              OverrideLinearDamping;                                      // 0x0154   (0x0004)  
	float                                              OverrideAngularDamping;                                     // 0x0158   (0x0004)  
	float                                              CurrentControledBlendWeight;                                // 0x015C   (0x0004)  
	float                                              CurrentControledVelocity;                                   // 0x0160   (0x0004)  
	FVector                                            CurrentTranslate;                                           // 0x0164   (0x000C)  
	unsigned char                                      UnknownData23_7[0x38];                                      // 0x0170   (0x0038)  MISSED
};

/// Class /Script/Engine.PrimitiveComponent
/// Size: 0x0540 (1344 bytes) (0x000260 - 0x000540) align n/a MaxSize: 0x0538
class UPrimitiveComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData18_8[0x8];                                       // 0x0260   (0x0008)  MISSED
	float                                              MinDrawDistance;                                            // 0x0268   (0x0004)  
	float                                              LDMaxDrawDistance;                                          // 0x026C   (0x0004)  
	float                                              CachedMaxDrawDistance;                                      // 0x0270   (0x0004)  
	unsigned char                                      UnknownData19_6[0x4];                                       // 0x0274   (0x0004)  MISSED
	float                                              FloorMaxStepHeight;                                         // 0x0278   (0x0004)  
	float                                              FloorWalkableFloorAngle;                                    // 0x027C   (0x0004)  
	unsigned char                                      UnknownData20_6[0x8];                                       // 0x0280   (0x0008)  MISSED
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                         // 0x0288   (0x0001)  
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                                // 0x0289   (0x0001)  
	TEnumAsByte<EIndirectLightingCacheQuality>         IndirectLightingCacheQuality;                               // 0x028A   (0x0001)  
	ELightmapType                                      LightmapType;                                               // 0x028B   (0x0001)  
	bool                                               bUseMaxLODAsImposter : 1;                                   // 0x028C:0 (0x0001)  
	bool                                               bBatchImpostersAsInstances : 1;                             // 0x028C:1 (0x0001)  
	bool                                               bNeverDistanceCull : 1;                                     // 0x028C:2 (0x0001)  
	unsigned char                                      UnknownBit21 : 1;                                           // 0x028C:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit22 : 1;                                           // 0x028C:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit23 : 1;                                           // 0x028C:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit24 : 1;                                           // 0x028C:6 (0x0001)  MISSED
	bool                                               bAlwaysCreatePhysicsState : 1;                              // 0x028C:7 (0x0001)  
	bool                                               bGenerateOverlapEvents : 1;                                 // 0x028D:0 (0x0001)  
	bool                                               bMultiBodyOverlap : 1;                                      // 0x028D:1 (0x0001)  
	bool                                               bTraceComplexOnMove : 1;                                    // 0x028D:2 (0x0001)  
	bool                                               bReturnMaterialOnMove : 1;                                  // 0x028D:3 (0x0001)  
	bool                                               bUseViewOwnerDepthPriorityGroup : 1;                        // 0x028D:4 (0x0001)  
	bool                                               bAllowCullDistanceVolume : 1;                               // 0x028D:5 (0x0001)  
	bool                                               bHasMotionBlurVelocityMeshes : 1;                           // 0x028D:6 (0x0001)  
	bool                                               bVisibleInReflectionCaptures : 1;                           // 0x028D:7 (0x0001)  
	bool                                               bVisibleInRealTimeSkyCaptures : 1;                          // 0x028E:0 (0x0001)  
	bool                                               bVisibleInRayTracing : 1;                                   // 0x028E:1 (0x0001)  
	bool                                               bRenderInMainPass : 1;                                      // 0x028E:2 (0x0001)  
	bool                                               bRenderInDepthPass : 1;                                     // 0x028E:3 (0x0001)  
	bool                                               bReceivesDecals : 1;                                        // 0x028E:4 (0x0001)  
	bool                                               bOwnerNoSee : 1;                                            // 0x028E:5 (0x0001)  
	bool                                               bOnlyOwnerSee : 1;                                          // 0x028E:6 (0x0001)  
	bool                                               bTreatAsBackgroundForOcclusion : 1;                         // 0x028E:7 (0x0001)  
	bool                                               bRenderInSceneCaptureDepthOnly : 1;                         // 0x028F:0 (0x0001)  
	bool                                               bRenderHiddenDepthInSceneCapture : 1;                       // 0x028F:1 (0x0001)  
	bool                                               bUseAsOccluder : 1;                                         // 0x028F:2 (0x0001)  
	bool                                               bSelectable : 1;                                            // 0x028F:3 (0x0001)  
	bool                                               bForceMipStreaming : 1;                                     // 0x028F:4 (0x0001)  
	bool                                               bHasPerInstanceHitProxies : 1;                              // 0x028F:5 (0x0001)  
	bool                                               CastShadow : 1;                                             // 0x028F:6 (0x0001)  
	bool                                               bAffectDynamicIndirectLighting : 1;                         // 0x028F:7 (0x0001)  
	bool                                               bAffectDistanceFieldLighting : 1;                           // 0x0290:0 (0x0001)  
	bool                                               bCastDynamicShadow : 1;                                     // 0x0290:1 (0x0001)  
	bool                                               bCastStaticShadow : 1;                                      // 0x0290:2 (0x0001)  
	bool                                               bCastVolumetricTranslucentShadow : 1;                       // 0x0290:3 (0x0001)  
	bool                                               bCastContactShadow : 1;                                     // 0x0290:4 (0x0001)  
	bool                                               bSelfShadowOnly : 1;                                        // 0x0290:5 (0x0001)  
	bool                                               bCastFarShadow : 1;                                         // 0x0290:6 (0x0001)  
	bool                                               bCastInsetShadow : 1;                                       // 0x0290:7 (0x0001)  
	bool                                               bCastCinematicShadow : 1;                                   // 0x0291:0 (0x0001)  
	bool                                               bCastHiddenShadow : 1;                                      // 0x0291:1 (0x0001)  
	bool                                               bCastShadowAsTwoSided : 1;                                  // 0x0291:2 (0x0001)  
	bool                                               bLightAsIfStatic : 1;                                       // 0x0291:3 (0x0001)  
	bool                                               bLightAttachmentsAsGroup : 1;                               // 0x0291:4 (0x0001)  
	bool                                               bExcludeFromLightAttachmentGroup : 1;                       // 0x0291:5 (0x0001)  
	bool                                               bReceiveMobileCSMShadows : 1;                               // 0x0291:6 (0x0001)  
	bool                                               bSingleSampleShadowFromStationaryLights : 1;                // 0x0291:7 (0x0001)  
	bool                                               bIgnoreRadialImpulse : 1;                                   // 0x0292:0 (0x0001)  
	bool                                               bIgnoreRadialForce : 1;                                     // 0x0292:1 (0x0001)  
	bool                                               bApplyImpulseOnDamage : 1;                                  // 0x0292:2 (0x0001)  
	bool                                               bReplicatePhysicsToAutonomousProxy : 1;                     // 0x0292:3 (0x0001)  
	bool                                               bPhysicsActiveDistanceUsingCullDistance : 1;                // 0x0292:4 (0x0001)  
	bool                                               bFillCollisionUnderneathForNavmesh : 1;                     // 0x0292:5 (0x0001)  
	bool                                               bIgnoreUpdateOverlapsWhenMoveComponent : 1;                 // 0x0292:6 (0x0001)  
	bool                                               AlwaysLoadOnClient : 1;                                     // 0x0292:7 (0x0001)  
	bool                                               AlwaysLoadOnServer : 1;                                     // 0x0293:0 (0x0001)  
	bool                                               bUseEditorCompositing : 1;                                  // 0x0293:1 (0x0001)  
	bool                                               bRenderCustomDepth : 1;                                     // 0x0293:2 (0x0001)  
	bool                                               bForceDisableDrawVelocity : 1;                              // 0x0293:3 (0x0001)  
	TEnumAsByte<EHasCustomNavigableGeometry>           bHasCustomNavigableGeometry;                                // 0x0294   (0x0001)  
	unsigned char                                      UnknownData25_6[0x3];                                       // 0x0295   (0x0003)  MISSED
	float                                              PhysicsActiveDistance;                                      // 0x0298   (0x0004)  
	TEnumAsByte<ECanBeCharacterBase>                   CanCharacterStepUpOn;                                       // 0x029C   (0x0001)  
	char                                               DecalChannelMask;                                           // 0x029D   (0x0001)  
	FLightingChannels                                  LightingChannels;                                           // 0x029E   (0x0001)  
	ERendererStencilMask                               CustomDepthStencilWriteMask;                                // 0x029F   (0x0001)  
	int32_t                                            CustomDepthStencilValue;                                    // 0x02A0   (0x0004)  
	unsigned char                                      UnknownData26_6[0x4];                                       // 0x02A4   (0x0004)  MISSED
	FCustomPrimitiveData                               CustomPrimitiveData;                                        // 0x02A8   (0x0010)  
	FCustomPrimitiveData                               CustomPrimitiveDataInternal;                                // 0x02B8   (0x0010)  
	int32_t                                            ReservedCustomDepthStencilValue;                            // 0x02C8   (0x0004)  
	unsigned char                                      UnknownData27_6[0xC];                                       // 0x02CC   (0x000C)  MISSED
	int32_t                                            TranslucencySortPriority;                                   // 0x02D8   (0x0004)  
	int32_t                                            VisibilityId;                                               // 0x02DC   (0x0004)  
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextures;                                     // 0x02E0   (0x0010)  
	int8_t                                             VirtualTextureLodBias;                                      // 0x02F0   (0x0001)  
	int8_t                                             VirtualTextureCullMips;                                     // 0x02F1   (0x0001)  
	int8_t                                             VirtualTextureMinCoverage;                                  // 0x02F2   (0x0001)  
	ERuntimeVirtualTextureMainPassType                 VirtualTextureRenderPassType;                               // 0x02F3   (0x0001)  
	unsigned char                                      UnknownData28_6[0x4];                                       // 0x02F4   (0x0004)  MISSED
	float                                              LpvBiasMultiplier;                                          // 0x02F8   (0x0004)  
	unsigned char                                      UnknownData29_6[0x8];                                       // 0x02FC   (0x0008)  MISSED
	float                                              BoundsScale;                                                // 0x0304   (0x0004)  
	unsigned char                                      UnknownData30_6[0x10];                                      // 0x0308   (0x0010)  MISSED
	TArray<TWeakObjectPtr<AActor*>>                    MoveIgnoreActors;                                           // 0x0318   (0x0010)  
	TArray<class UPrimitiveComponent*>                 MoveIgnoreComponents;                                       // 0x0328   (0x0010)  
	unsigned char                                      UnknownData31_6[0x10];                                      // 0x0338   (0x0010)  MISSED
	FBodyInstance                                      BodyInstance;                                               // 0x0348   (0x01A8)  
	bool                                               bMakePlayerTouchAtSimulateMove;                             // 0x04F0   (0x0001)  
	unsigned char                                      UnknownData32_6[0x7];                                       // 0x04F1   (0x0007)  MISSED
	class UPhysicalMaterial*                           PhysicsMaterialForTouchSimulateMove;                        // 0x04F8   (0x0008)  
	bool                                               bLockAxisAtHurdle;                                          // 0x0500   (0x0001)  
	FMulticastSparseDelegate                           OnComponentHit;                                             // 0x0501   (0x0001)  
	FMulticastSparseDelegate                           OnComponentBeginOverlap;                                    // 0x0502   (0x0001)  
	FMulticastSparseDelegate                           OnComponentEndOverlap;                                      // 0x0503   (0x0001)  
	FMulticastSparseDelegate                           OnComponentWake;                                            // 0x0504   (0x0001)  
	FMulticastSparseDelegate                           OnComponentSleep;                                           // 0x0505   (0x0001)  
	unsigned char                                      UnknownData33_6[0x1];                                       // 0x0506   (0x0001)  MISSED
	FMulticastSparseDelegate                           OnBeginCursorOver;                                          // 0x0507   (0x0001)  
	FMulticastSparseDelegate                           OnEndCursorOver;                                            // 0x0508   (0x0001)  
	FMulticastSparseDelegate                           OnClicked;                                                  // 0x0509   (0x0001)  
	FMulticastSparseDelegate                           OnReleased;                                                 // 0x050A   (0x0001)  
	FMulticastSparseDelegate                           OnInputTouchBegin;                                          // 0x050B   (0x0001)  
	FMulticastSparseDelegate                           OnInputTouchEnd;                                            // 0x050C   (0x0001)  
	FMulticastSparseDelegate                           OnInputTouchEnter;                                          // 0x050D   (0x0001)  
	FMulticastSparseDelegate                           OnInputTouchLeave;                                          // 0x050E   (0x0001)  
	unsigned char                                      UnknownData34_6[0x19];                                      // 0x050F   (0x0019)  MISSED
	class UPrimitiveComponent*                         LODParentPrimitive;                                         // 0x0528   (0x0008)  
	unsigned char                                      UnknownData35_7[0x8];                                       // 0x0530   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.PrimitiveComponent.WasRecentlyRendered
	constexpr static const FunctionPointer<UPrimitiveComponent, bool, const float> WasRecentlyRendered = { 0x4930970, 0 }; 
	// Function /Script/Engine.PrimitiveComponent.WakeRigidBody
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FName> WakeRigidBody = { 0x492aa70, 1 }; 
	// Function /Script/Engine.PrimitiveComponent.WakeAllRigidBodies
	constexpr static const FunctionPointer<UPrimitiveComponent, void> WakeAllRigidBodies = { 0x49273a0, 2 }; 
	// Function /Script/Engine.PrimitiveComponent.SetWalkableSlopeOverride
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FWalkableSlopeOverride&> SetWalkableSlopeOverride = { 0x492dde0, 3 }; 
	// Function /Script/Engine.PrimitiveComponent.SetUseCCD
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool, const FName> SetUseCCD = { 0x4926700, 4 }; 
	// Function /Script/Engine.PrimitiveComponent.SetTranslucentSortPriority
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t> SetTranslucentSortPriority = { 0x492a0a0, 5 }; 
	// Function /Script/Engine.PrimitiveComponent.SetSingleSampleShadowFromStationaryLights
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetSingleSampleShadowFromStationaryLights = { 0x492a180, 6 }; 
	// Function /Script/Engine.PrimitiveComponent.SetSimulatePhysics
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetSimulatePhysics = { 0x492dd00, 7 }; 
	// Function /Script/Engine.PrimitiveComponent.SetRenderInMainPass
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetRenderInMainPass = { 0x4928020, 8 }; 
	// Function /Script/Engine.PrimitiveComponent.SetRenderHiddenDepthInSceneCapture
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetRenderHiddenDepthInSceneCapture = { 0x4927c30, 9 }; 
	// Function /Script/Engine.PrimitiveComponent.SetRenderCustomDepth
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetRenderCustomDepth = { 0x4928370, 10 }; 
	// Function /Script/Engine.PrimitiveComponent.SetReceivesDecals
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetReceivesDecals = { 0x4929fa0, 11 }; 
	// Function /Script/Engine.PrimitiveComponent.SetPhysMaterialOverride
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const UPhysicalMaterial*> SetPhysMaterialOverride = { 0x49262d0, 12 }; 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInRadians
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float, const bool, const FName> SetPhysicsMaxAngularVelocityInRadians = { 0x492b180, 13 }; 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocityInDegrees
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float, const bool, const FName> SetPhysicsMaxAngularVelocityInDegrees = { 0x492b370, 14 }; 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsMaxAngularVelocity
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float, const bool, const FName> SetPhysicsMaxAngularVelocity = { 0x492b370, 15 }; 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsLinearVelocity
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const bool, const FName> SetPhysicsLinearVelocity = { 0x492bec0, 16 }; 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInRadians
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const bool, const FName> SetPhysicsAngularVelocityInRadians = { 0x492b790, 17 }; 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocityInDegrees
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const bool, const FName> SetPhysicsAngularVelocityInDegrees = { 0x492b570, 18 }; 
	// Function /Script/Engine.PrimitiveComponent.SetPhysicsAngularVelocity
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const bool, const FName> SetPhysicsAngularVelocity = { 0x492b570, 19 }; 
	// Function /Script/Engine.PrimitiveComponent.SetOwnerNoSee
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetOwnerNoSee = { 0x492a780, 20 }; 
	// Function /Script/Engine.PrimitiveComponent.SetOverrideLinearDamping
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float> SetOverrideLinearDamping = { 0x476f0e0, 21 }; 
	// Function /Script/Engine.PrimitiveComponent.SetOverrideAngularDamping
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float> SetOverrideAngularDamping = { 0x49270b0, 22 }; 
	// Function /Script/Engine.PrimitiveComponent.SetOnlyOwnerSee
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetOnlyOwnerSee = { 0x492a680, 23 }; 
	// Function /Script/Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetNotifyRigidBodyCollision = { 0x492a880, 24 }; 
	// Function /Script/Engine.PrimitiveComponent.SetMinDrawDistance
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float> SetMinDrawDistance = { 0x4724d80, 25 }; 
	// Function /Script/Engine.PrimitiveComponent.SetMaterialByName
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FName, const UMaterialInterface*> SetMaterialByName = { 0x492e510, 26 }; 
	// Function /Script/Engine.PrimitiveComponent.SetMaterial
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t, const UMaterialInterface*> SetMaterial = { 0x492e680, 27 }; 
	// Function /Script/Engine.PrimitiveComponent.SetMassScale
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FName, const float> SetMassScale = { 0x4926f00, 28 }; 
	// Function /Script/Engine.PrimitiveComponent.SetMassOverrideInKg
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FName, const float, const bool> SetMassOverrideInKg = { 0x4926b50, 29 }; 
	// Function /Script/Engine.PrimitiveComponent.SetLinearDamping
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float> SetLinearDamping = { 0x476f1b0, 30 }; 
	// Function /Script/Engine.PrimitiveComponent.SetLightingChannels
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool, const bool, const bool> SetLightingChannels = { 0x4930a50, 31 }; 
	// Function /Script/Engine.PrimitiveComponent.SetLightAttachmentsAsGroup
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetLightAttachmentsAsGroup = { 0x492a380, 32 }; 
	// Function /Script/Engine.PrimitiveComponent.SetGenerateOverlapEvents
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetGenerateOverlapEvents = { 0x4930c50, 33 }; 
	// Function /Script/Engine.PrimitiveComponent.SetExcludeFromLightAttachmentGroup
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetExcludeFromLightAttachmentGroup = { 0x492a280, 34 }; 
	// Function /Script/Engine.PrimitiveComponent.SetEnableGravity
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetEnableGravity = { 0x49272c0, 35 }; 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector4
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t, const FVector4> SetDefaultCustomPrimitiveDataVector4 = { 0x492eed0, 36 }; 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector3
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t, const FVector> SetDefaultCustomPrimitiveDataVector3 = { 0x492f150, 37 }; 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataVector2
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t, const FVector2D> SetDefaultCustomPrimitiveDataVector2 = { 0x492f400, 38 }; 
	// Function /Script/Engine.PrimitiveComponent.SetDefaultCustomPrimitiveDataFloat
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t, const float> SetDefaultCustomPrimitiveDataFloat = { 0x492f650, 39 }; 
	// Function /Script/Engine.PrimitiveComponent.SetDecalChannelMask
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t> SetDecalChannelMask = { 0x4927f50, 40 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector4
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t, const FVector4> SetCustomPrimitiveDataVector4 = { 0x492f8a0, 41 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector3
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t, const FVector> SetCustomPrimitiveDataVector3 = { 0x492fb30, 42 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataVector2
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t, const FVector2D> SetCustomPrimitiveDataVector2 = { 0x492fdf0, 43 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCustomPrimitiveDataFloat
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t, const float> SetCustomPrimitiveDataFloat = { 0x4930060, 44 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilWriteMask
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const ERendererStencilMask> SetCustomDepthStencilWriteMask = { 0x4928120, 45 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilValueWithReserve
	constexpr static const FunctionPointer<UPrimitiveComponent, void> SetCustomDepthStencilValueWithReserve = { 0x4928200, 46 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCustomDepthStencilValue
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const int32_t> SetCustomDepthStencilValue = { 0x4928260, 47 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCullDistance
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float> SetCullDistance = { 0x4926200, 48 }; 
	// Function /Script/Engine.PrimitiveComponent.SetConstraintMode
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const TEnumAsByte<EDOFMode>> SetConstraintMode = { 0x492dc30, 49 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToChannel
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const TEnumAsByte<ECollisionChannel>, const TEnumAsByte<ECollisionResponse>> SetCollisionResponseToChannel = { 0x4926480, 50 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionResponseToAllChannels
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const TEnumAsByte<ECollisionResponse>> SetCollisionResponseToAllChannels = { 0x49263b0, 51 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionProfileName
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FName, const bool> SetCollisionProfileName = { 0x4929d60, 52 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionObjectType
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const TEnumAsByte<ECollisionChannel>> SetCollisionObjectType = { 0x4929c40, 53 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCollisionEnabled
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const TEnumAsByte<ECollisionEnabled>> SetCollisionEnabled = { 0x4929ed0, 54 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCenterOfMass
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FName> SetCenterOfMass = { 0x492ab50, 55 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCastStaticShadow
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetCastStaticShadow = { 0x4927d30, 56 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCastShadow
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetCastShadow = { 0x492a580, 57 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCastInsetShadow
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetCastInsetShadow = { 0x492a480, 58 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCastDynamicShadow
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetCastDynamicShadow = { 0x4927e30, 59 }; 
	// Function /Script/Engine.PrimitiveComponent.SetCachedMaxDrawDistance
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float> SetCachedMaxDrawDistance = { 0x49260e0, 60 }; 
	// Function /Script/Engine.PrimitiveComponent.SetBoundsScale
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float> SetBoundsScale = { 0x492e8e0, 61 }; 
	// Function /Script/Engine.PrimitiveComponent.SetAngularDamping
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float> SetAngularDamping = { 0x4927180, 62 }; 
	// Function /Script/Engine.PrimitiveComponent.SetAllUseCCD
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const bool> SetAllUseCCD = { 0x4926620, 63 }; 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsLinearVelocity
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const bool> SetAllPhysicsLinearVelocity = { 0x492b990, 64 }; 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInRadians
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector&, const bool> SetAllPhysicsAngularVelocityInRadians = { 0x49273c0, 65 }; 
	// Function /Script/Engine.PrimitiveComponent.SetAllPhysicsAngularVelocityInDegrees
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector&, const bool> SetAllPhysicsAngularVelocityInDegrees = { 0x4927540, 66 }; 
	// Function /Script/Engine.PrimitiveComponent.SetAllMassScale
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const float> SetAllMassScale = { 0x4926d40, 67 }; 
	// Function /Script/Engine.PrimitiveComponent.ScaleByMomentOfInertia
	constexpr static const FunctionPointer<UPrimitiveComponent, FVector, const FVector, const FName> ScaleByMomentOfInertia = { 0x4926870, 68 }; 
	// Function /Script/Engine.PrimitiveComponent.PutRigidBodyToSleep
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FName> PutRigidBodyToSleep = { 0x492a960, 69 }; 
	// Function /Script/Engine.PrimitiveComponent.K2_SphereTraceComponent
	constexpr static const FunctionPointer<UPrimitiveComponent, bool, const FVector, const FVector, const float, const bool, const bool, const bool, const FVector&, const FVector&, const FName&, const FHitResult&> K2_SphereTraceComponent = { 0x4928f90, 70 }; 
	// Function /Script/Engine.PrimitiveComponent.K2_SphereOverlapComponent
	constexpr static const FunctionPointer<UPrimitiveComponent, bool, const FVector, const float, const bool, const bool, const bool, const FVector&, const FVector&, const FName&, const FHitResult&> K2_SphereOverlapComponent = { 0x4928450, 71 }; 
	// Function /Script/Engine.PrimitiveComponent.K2_LineTraceComponent
	constexpr static const FunctionPointer<UPrimitiveComponent, bool, const FVector, const FVector, const bool, const bool, const bool, const FVector&, const FVector&, const FName&, const FHitResult&> K2_LineTraceComponent = { 0x4929690, 72 }; 
	// Function /Script/Engine.PrimitiveComponent.K2_IsQueryCollisionEnabled
	constexpr static const FunctionPointer<UPrimitiveComponent, bool> K2_IsQueryCollisionEnabled = { 0x4927860, 73 }; 
	// Function /Script/Engine.PrimitiveComponent.K2_IsPhysicsCollisionEnabled
	constexpr static const FunctionPointer<UPrimitiveComponent, bool> K2_IsPhysicsCollisionEnabled = { 0x4927820, 74 }; 
	// Function /Script/Engine.PrimitiveComponent.K2_IsCollisionEnabled
	constexpr static const FunctionPointer<UPrimitiveComponent, bool> K2_IsCollisionEnabled = { 0x49278a0, 75 }; 
	// Function /Script/Engine.PrimitiveComponent.K2_BoxOverlapComponent
	constexpr static const FunctionPointer<UPrimitiveComponent, bool, const FVector, const FBox, const bool, const bool, const bool, const FVector&, const FVector&, const FName&, const FHitResult&> K2_BoxOverlapComponent = { 0x49289d0, 76 }; 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingComponent
	constexpr static const FunctionPointer<UPrimitiveComponent, bool, const UPrimitiveComponent*> IsOverlappingComponent = { 0x492edb0, 77 }; 
	// Function /Script/Engine.PrimitiveComponent.IsOverlappingActor
	constexpr static const FunctionPointer<UPrimitiveComponent, bool, const AActor*> IsOverlappingActor = { 0x492ec80, 78 }; 
	// Function /Script/Engine.PrimitiveComponent.IsGravityEnabled
	constexpr static const FunctionPointer<UPrimitiveComponent, bool> IsGravityEnabled = { 0x4927290, 79 }; 
	// Function /Script/Engine.PrimitiveComponent.IsAnyRigidBodyAwake
	constexpr static const FunctionPointer<UPrimitiveComponent, bool> IsAnyRigidBodyAwake = { 0x49265f0, 80 }; 
	// Function /Script/Engine.PrimitiveComponent.IgnoreComponentWhenMoving
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const UPrimitiveComponent*, const bool> IgnoreComponentWhenMoving = { 0x4930490, 81 }; 
	// Function /Script/Engine.PrimitiveComponent.IgnoreActorWhenMoving
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const AActor*, const bool> IgnoreActorWhenMoving = { 0x4930800, 82 }; 
	// Function /Script/Engine.PrimitiveComponent.GetWalkableSlopeOverride
	constexpr static const FunctionPointer<UPrimitiveComponent, FWalkableSlopeOverride> GetWalkableSlopeOverride = { 0x492ded0, 83 }; 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocityAtPoint
	constexpr static const FunctionPointer<UPrimitiveComponent, FVector, const FVector, const FName> GetPhysicsLinearVelocityAtPoint = { 0x492bb20, 84 }; 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsLinearVelocity
	constexpr static const FunctionPointer<UPrimitiveComponent, FVector, const FName> GetPhysicsLinearVelocity = { 0x492bd40, 85 }; 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInRadians
	constexpr static const FunctionPointer<UPrimitiveComponent, FVector, const FName> GetPhysicsAngularVelocityInRadians = { 0x492ae10, 86 }; 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocityInDegrees
	constexpr static const FunctionPointer<UPrimitiveComponent, FVector, const FName> GetPhysicsAngularVelocityInDegrees = { 0x492af80, 87 }; 
	// Function /Script/Engine.PrimitiveComponent.GetPhysicsAngularVelocity
	constexpr static const FunctionPointer<UPrimitiveComponent, FVector, const FName> GetPhysicsAngularVelocity = { 0x492b080, 88 }; 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingComponents
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const TArray<UPrimitiveComponent*>&> GetOverlappingComponents = { 0x492e9e0, 89 }; 
	// Function /Script/Engine.PrimitiveComponent.GetOverlappingActors
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const TArray<AActor*>&, const UClass*> GetOverlappingActors = { 0x492ead0, 90 }; 
	// Function /Script/Engine.PrimitiveComponent.GetNumMaterials
	constexpr static const FunctionPointer<UPrimitiveComponent, int32_t> GetNumMaterials = { 0x4927c00, 91 }; 
	// Function /Script/Engine.PrimitiveComponent.GetMaterialFromCollisionFaceIndex
	constexpr static const FunctionPointer<UPrimitiveComponent, UMaterialInterface*, const int32_t, const int32_t&> GetMaterialFromCollisionFaceIndex = { 0x492df40, 92 }; 
	// Function /Script/Engine.PrimitiveComponent.GetMaterial
	constexpr static const FunctionPointer<UPrimitiveComponent, UMaterialInterface*, const int32_t> GetMaterial = { 0x492e7f0, 93 }; 
	// Function /Script/Engine.PrimitiveComponent.GetMassScale
	constexpr static const FunctionPointer<UPrimitiveComponent, float, const FName> GetMassScale = { 0x4926e10, 94 }; 
	// Function /Script/Engine.PrimitiveComponent.GetMass
	constexpr static const FunctionPointer<UPrimitiveComponent, float> GetMass = { 0x4926b10, 95 }; 
	// Function /Script/Engine.PrimitiveComponent.GetLinearDamping
	constexpr static const FunctionPointer<UPrimitiveComponent, float> GetLinearDamping = { 0x4927250, 96 }; 
	// Function /Script/Engine.PrimitiveComponent.GetInertiaTensor
	constexpr static const FunctionPointer<UPrimitiveComponent, FVector, const FName> GetInertiaTensor = { 0x4926a10, 97 }; 
	// Function /Script/Engine.PrimitiveComponent.GetGenerateOverlapEvents
	constexpr static const FunctionPointer<UPrimitiveComponent, bool> GetGenerateOverlapEvents = { 0x4930d40, 98 }; 
	// Function /Script/Engine.PrimitiveComponent.GetDecalChannelMask
	constexpr static const FunctionPointer<UPrimitiveComponent, int32_t> GetDecalChannelMask = { 0x4927f30, 99 }; 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionResponseToChannel
	constexpr static const FunctionPointer<UPrimitiveComponent, TEnumAsByte<ECollisionResponse>, const TEnumAsByte<ECollisionChannel>> GetCollisionResponseToChannel = { 0x4927730, 100 }; 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionProfileName
	constexpr static const FunctionPointer<UPrimitiveComponent, FName> GetCollisionProfileName = { 0x4929d10, 101 }; 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionObjectType
	constexpr static const FunctionPointer<UPrimitiveComponent, TEnumAsByte<ECollisionChannel>> GetCollisionObjectType = { 0x4927700, 102 }; 
	// Function /Script/Engine.PrimitiveComponent.GetCollisionEnabled
	constexpr static const FunctionPointer<UPrimitiveComponent, TEnumAsByte<ECollisionEnabled>> GetCollisionEnabled = { 0x49278e0, 103 }; 
	// Function /Script/Engine.PrimitiveComponent.GetClosestPointOnCollision
	constexpr static const FunctionPointer<UPrimitiveComponent, float, const FVector&, const FVector&, const FName> GetClosestPointOnCollision = { 0x4927910, 104 }; 
	// Function /Script/Engine.PrimitiveComponent.GetCenterOfMass
	constexpr static const FunctionPointer<UPrimitiveComponent, FVector, const FName> GetCenterOfMass = { 0x492acf0, 105 }; 
	// Function /Script/Engine.PrimitiveComponent.GetAngularDamping
	constexpr static const FunctionPointer<UPrimitiveComponent, float> GetAngularDamping = { 0x4927070, 106 }; 
	// Function /Script/Engine.PrimitiveComponent.CreateDynamicMaterialInstance
	constexpr static const FunctionPointer<UPrimitiveComponent, UMaterialInstanceDynamic*, const int32_t, const UMaterialInterface*, const FName> CreateDynamicMaterialInstance = { 0x492e0c0, 107 }; 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamicFromMaterial
	constexpr static const FunctionPointer<UPrimitiveComponent, UMaterialInstanceDynamic*, const int32_t, const UMaterialInterface*> CreateAndSetMaterialInstanceDynamicFromMaterial = { 0x492e2b0, 108 }; 
	// Function /Script/Engine.PrimitiveComponent.CreateAndSetMaterialInstanceDynamic
	constexpr static const FunctionPointer<UPrimitiveComponent, UMaterialInstanceDynamic*, const int32_t> CreateAndSetMaterialInstanceDynamic = { 0x492e420, 109 }; 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreComponents
	constexpr static const FunctionPointer<UPrimitiveComponent, TArray<UPrimitiveComponent*>> CopyArrayOfMoveIgnoreComponents = { 0x49302f0, 110 }; 
	// Function /Script/Engine.PrimitiveComponent.CopyArrayOfMoveIgnoreActors
	constexpr static const FunctionPointer<UPrimitiveComponent, TArray<AActor*>> CopyArrayOfMoveIgnoreActors = { 0x4930780, 111 }; 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreComponents
	constexpr static const FunctionPointer<UPrimitiveComponent, void> ClearMoveIgnoreComponents = { 0x49302c0, 112 }; 
	// Function /Script/Engine.PrimitiveComponent.ClearMoveIgnoreActors
	constexpr static const FunctionPointer<UPrimitiveComponent, void> ClearMoveIgnoreActors = { 0x4930750, 113 }; 
	// Function /Script/Engine.PrimitiveComponent.CanCharacterStepUp
	constexpr static const FunctionPointer<UPrimitiveComponent, bool, const APawn*> CanCharacterStepUp = { 0x4925ff0, 114 }; 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInRadians
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FName, const bool> AddTorqueInRadians = { 0x492c2f0, 115 }; 
	// Function /Script/Engine.PrimitiveComponent.AddTorqueInDegrees
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FName, const bool> AddTorqueInDegrees = { 0x492c0c0, 116 }; 
	// Function /Script/Engine.PrimitiveComponent.AddTorque
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FName, const bool> AddTorque = { 0x492c2f0, 117 }; 
	// Function /Script/Engine.PrimitiveComponent.AddRadialImpulse
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const float, const float, const TEnumAsByte<ERadialImpulseFalloff>, const bool> AddRadialImpulse = { 0x492ce80, 118 }; 
	// Function /Script/Engine.PrimitiveComponent.AddRadialForce
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const float, const float, const TEnumAsByte<ERadialImpulseFalloff>, const bool> AddRadialForce = { 0x492c500, 119 }; 
	// Function /Script/Engine.PrimitiveComponent.AddImpulseAtLocation
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FVector, const FName> AddImpulseAtLocation = { 0x492d1b0, 120 }; 
	// Function /Script/Engine.PrimitiveComponent.AddImpulse
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FName, const bool> AddImpulse = { 0x492da20, 121 }; 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocationLocal
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FVector, const FName> AddForceAtLocationLocal = { 0x492c830, 122 }; 
	// Function /Script/Engine.PrimitiveComponent.AddForceAtLocation
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FVector, const FName> AddForceAtLocation = { 0x492ca50, 123 }; 
	// Function /Script/Engine.PrimitiveComponent.AddForce
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FName, const bool> AddForce = { 0x492cc70, 124 }; 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInRadians
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FName, const bool> AddAngularImpulseInRadians = { 0x492d600, 125 }; 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulseInDegrees
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FName, const bool> AddAngularImpulseInDegrees = { 0x492d3d0, 126 }; 
	// Function /Script/Engine.PrimitiveComponent.AddAngularImpulse
	constexpr static const FunctionPointer<UPrimitiveComponent, void, const FVector, const FName, const bool> AddAngularImpulse = { 0x492d810, 127 }; 
};

/// Class /Script/Engine.MeshComponent
/// Size: 0x0560 (1376 bytes) (0x000538 - 0x000560) align n/a MaxSize: 0x0560
class UMeshComponent : public UPrimitiveComponent
{ 
public:
	TArray<class UMaterialInterface*>                  OverrideMaterials;                                          // 0x0538   (0x0010)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x0548   (0x0010)  MISSED
	bool                                               bEnableMaterialParameterCaching : 1;                        // 0x0558:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0559   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.MeshComponent.SetVectorParameterValueOnMaterials
	constexpr static const FunctionPointer<UMeshComponent, void, const FName, const FVector> SetVectorParameterValueOnMaterials = { 0x48c2820, 0 }; 
	// Function /Script/Engine.MeshComponent.SetScalarParameterValueOnMaterials
	constexpr static const FunctionPointer<UMeshComponent, void, const FName, const float> SetScalarParameterValueOnMaterials = { 0x48c2990, 1 }; 
	// Function /Script/Engine.MeshComponent.PrestreamTextures
	constexpr static const FunctionPointer<UMeshComponent, void, const float, const bool, const int32_t> PrestreamTextures = { 0x48c2b00, 2 }; 
	// Function /Script/Engine.MeshComponent.IsMaterialSlotNameValid
	constexpr static const FunctionPointer<UMeshComponent, bool, const FName> IsMaterialSlotNameValid = { 0x48c2cf0, 3 }; 
	// Function /Script/Engine.MeshComponent.GetMaterialSlotNames
	constexpr static const FunctionPointer<UMeshComponent, TArray<FName>> GetMaterialSlotNames = { 0x48c2de0, 4 }; 
	// Function /Script/Engine.MeshComponent.GetMaterials
	constexpr static const FunctionPointer<UMeshComponent, TArray<UMaterialInterface*>> GetMaterials = { 0x48c2f50, 5 }; 
	// Function /Script/Engine.MeshComponent.GetMaterialIndex
	constexpr static const FunctionPointer<UMeshComponent, int32_t, const FName> GetMaterialIndex = { 0x48c2e60, 6 }; 
};

/// Struct /Script/Engine.VertexOffsetUsage
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FVertexOffsetUsage
{ 
	int32_t                                            Usage;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.SkelMeshComponentLODInfo
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSkelMeshComponentLODInfo
{ 
	TArray<bool>                                       HiddenMaterials;                                            // 0x0000   (0x0010)  
	unsigned char                                      UnknownData01_7[0x38];                                      // 0x0010   (0x0038)  MISSED
};

/// Class /Script/Engine.SkinnedMeshComponent
/// Size: 0x0880 (2176 bytes) (0x000560 - 0x000880) align n/a MaxSize: 0x0880
class USkinnedMeshComponent : public UMeshComponent
{ 
public:
	unsigned char                                      UnknownData17_8[0x8];                                       // 0x0560   (0x0008)  MISSED
	class USkeletalMesh*                               SkeletalMesh;                                               // 0x0568   (0x0008)  
	TWeakObjectPtr<class USkinnedMeshComponent*>       MasterPoseComponent;                                        // 0x0570   (0x0008)  
	TArray<FName>                                      AdditiveMasterBoneArray;                                    // 0x0578   (0x0010)  
	TArray<ESkinCacheUsage>                            SkinCacheUsage;                                             // 0x0588   (0x0010)  
	TArray<FVertexOffsetUsage>                         VertexOffsetUsage;                                          // 0x0598   (0x0010)  
	unsigned char                                      UnknownData18_6[0x1C8];                                     // 0x05A8   (0x01C8)  MISSED
	class UPhysicsAsset*                               PhysicsAssetOverride;                                       // 0x0770   (0x0008)  
	int32_t                                            ForcedLodModel;                                             // 0x0778   (0x0004)  
	int32_t                                            MinLodModel;                                                // 0x077C   (0x0004)  
	unsigned char                                      UnknownData19_6[0x8];                                       // 0x0780   (0x0008)  MISSED
	float                                              StreamingDistanceMultiplier;                                // 0x0788   (0x0004)  
	unsigned char                                      UnknownData20_6[0xC];                                       // 0x078C   (0x000C)  MISSED
	TArray<FSkelMeshComponentLODInfo>                  LODInfo;                                                    // 0x0798   (0x0010)  
	unsigned char                                      UnknownData21_6[0x24];                                      // 0x07A8   (0x0024)  MISSED
	EVisibilityBasedAnimTickOption                     VisibilityBasedAnimTickOption;                              // 0x07CC   (0x0001)  
	unsigned char                                      UnknownData22_6[0x3];                                       // 0x07CD   (0x0003)  MISSED
	float                                              AlwaysTickPoseDistance;                                     // 0x07D0   (0x0004)  
	unsigned char                                      UnknownData23_6[0x1];                                       // 0x07D4   (0x0001)  MISSED
	unsigned char                                      UnknownBit24 : 1;                                           // 0x07D5:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit25 : 1;                                           // 0x07D5:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit26 : 1;                                           // 0x07D5:2 (0x0001)  MISSED
	bool                                               bOverrideMinLod : 1;                                        // 0x07D5:3 (0x0001)  
	bool                                               bUseBoundsFromMasterPoseComponent : 1;                      // 0x07D5:4 (0x0001)  
	bool                                               bForceWireframe : 1;                                        // 0x07D5:5 (0x0001)  
	bool                                               bDisplayBones : 1;                                          // 0x07D5:6 (0x0001)  
	bool                                               bDisableMorphTarget : 1;                                    // 0x07D5:7 (0x0001)  
	bool                                               bHideSkin : 1;                                              // 0x07D6:0 (0x0001)  
	bool                                               bPerBoneMotionBlur : 1;                                     // 0x07D6:1 (0x0001)  
	bool                                               bComponentUseFixedSkelBounds : 1;                           // 0x07D6:2 (0x0001)  
	bool                                               bConsiderAllBodiesForBounds : 1;                            // 0x07D6:3 (0x0001)  
	bool                                               bSyncAttachParentLOD : 1;                                   // 0x07D6:4 (0x0001)  
	bool                                               bCanHighlightSelectedSections : 1;                          // 0x07D6:5 (0x0001)  
	bool                                               bRecentlyRendered : 1;                                      // 0x07D6:6 (0x0001)  
	bool                                               bCastCapsuleDirectShadow : 1;                               // 0x07D6:7 (0x0001)  
	bool                                               bCastCapsuleIndirectShadow : 1;                             // 0x07D7:0 (0x0001)  
	bool                                               bCPUSkinning : 1;                                           // 0x07D7:1 (0x0001)  
	bool                                               bEnableUpdateRateOptimizations : 1;                         // 0x07D7:2 (0x0001)  
	bool                                               bDisplayDebugUpdateRateOptimizations : 1;                   // 0x07D7:3 (0x0001)  
	bool                                               bRenderStatic : 1;                                          // 0x07D7:4 (0x0001)  
	bool                                               bIgnoreMasterPoseComponentLOD : 1;                          // 0x07D7:5 (0x0001)  
	bool                                               bCanBeOccluded : 1;                                         // 0x07D7:6 (0x0001)  
	unsigned char                                      UnknownBit27 : 1;                                           // 0x07D7:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit28 : 1;                                           // 0x07D8:0 (0x0001)  MISSED
	bool                                               bCachedLocalBoundsUpToDate : 1;                             // 0x07D8:1 (0x0001)  
	unsigned char                                      UnknownData29_3[0x7];                                       // 0x07D9   (0x0007)  MISSED
	bool                                               bForceMeshObjectUpdate : 1;                                 // 0x07E0:0 (0x0001)  
	unsigned char                                      UnknownData30_5[0x3];                                       // 0x07E1   (0x0003)  MISSED
	float                                              CapsuleIndirectShadowMinVisibility;                         // 0x07E4   (0x0004)  
	unsigned char                                      UnknownData31_6[0x10];                                      // 0x07E8   (0x0010)  MISSED
	FBoxSphereBounds                                   CachedWorldSpaceBounds;                                     // 0x07F8   (0x001C)  
	unsigned char                                      UnknownData32_6[0xC];                                       // 0x0814   (0x000C)  MISSED
	FMatrix                                            CachedWorldToLocalTransform;                                // 0x0820   (0x0040)  
	unsigned char                                      UnknownData33_7[0x20];                                      // 0x0860   (0x0020)  MISSED

	/// Functions
	// Function /Script/Engine.SkinnedMeshComponent.UnloadSkinWeightProfile
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const FName> UnloadSkinWeightProfile = { 0x4962f10, 0 }; 
	// Function /Script/Engine.SkinnedMeshComponent.UnHideBoneByName
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const FName> UnHideBoneByName = { 0x4961590, 1 }; 
	// Function /Script/Engine.SkinnedMeshComponent.TransformToBoneSpace
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const FName, const FVector, const FRotator, const FVector&, const FRotator&> TransformToBoneSpace = { 0x4961eb0, 2 }; 
	// Function /Script/Engine.SkinnedMeshComponent.TransformFromBoneSpace
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const FName, const FVector, const FRotator, const FVector&, const FRotator&> TransformFromBoneSpace = { 0x4961b90, 3 }; 
	// Function /Script/Engine.SkinnedMeshComponent.ShowMaterialSection
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t, const int32_t, const bool, const int32_t> ShowMaterialSection = { 0x4961190, 4 }; 
	// Function /Script/Engine.SkinnedMeshComponent.ShowAllMaterialSections
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t> ShowAllMaterialSections = { 0x49610c0, 5 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetVertexOffsetUsage
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t, const int32_t> SetVertexOffsetUsage = { 0x4962b60, 6 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetVertexColorOverride_LinearColor
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t, const TArray<FLinearColor>&> SetVertexColorOverride_LinearColor = { 0x4963760, 7 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightProfile
	constexpr static const FunctionPointer<USkinnedMeshComponent, bool, const FName> SetSkinWeightProfile = { 0x4963290, 8 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkinWeightOverride
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t, const TArray<FSkelMeshSkinWeightInfo>&> SetSkinWeightOverride = { 0x49634a0, 9 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetSkeletalMesh
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const USkeletalMesh*, const bool> SetSkeletalMesh = { 0x4963eb0, 10 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetRenderStatic
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const bool> SetRenderStatic = { 0x4960e20, 11 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetPreSkinningOffsets
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t, const TArray<FVector>> SetPreSkinningOffsets = { 0x49628f0, 12 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetPostSkinningOffsets
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t, const TArray<FVector>> SetPostSkinningOffsets = { 0x4962680, 13 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetPhysicsAsset
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const UPhysicsAsset*, const bool> SetPhysicsAsset = { 0x4964930, 14 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetMinLOD
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t> SetMinLOD = { 0x49647c0, 15 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetMasterPoseComponent
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const USkinnedMeshComponent*, const bool> SetMasterPoseComponent = { 0x4962510, 16 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetForcedLodModel
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t> SetForcedLodModel = { 0x4964690, 17 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetForcedLOD
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t> SetForcedLOD = { 0x4964690, 18 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleIndirectShadow
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const bool> SetCastCapsuleIndirectShadow = { 0x4964480, 19 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetCastCapsuleDirectShadow
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const bool> SetCastCapsuleDirectShadow = { 0x4964570, 20 }; 
	// Function /Script/Engine.SkinnedMeshComponent.SetCapsuleIndirectShadowMinVisibility
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const float> SetCapsuleIndirectShadowMinVisibility = { 0x49643a0, 21 }; 
	// Function /Script/Engine.SkinnedMeshComponent.IsUsingSkinWeightProfile
	constexpr static const FunctionPointer<USkinnedMeshComponent, bool> IsUsingSkinWeightProfile = { 0x4962ec0, 22 }; 
	// Function /Script/Engine.SkinnedMeshComponent.IsMaterialSectionShown
	constexpr static const FunctionPointer<USkinnedMeshComponent, bool, const int32_t, const int32_t> IsMaterialSectionShown = { 0x4960f20, 23 }; 
	// Function /Script/Engine.SkinnedMeshComponent.IsBoneHiddenByName
	constexpr static const FunctionPointer<USkinnedMeshComponent, bool, const FName> IsBoneHiddenByName = { 0x4961420, 24 }; 
	// Function /Script/Engine.SkinnedMeshComponent.HideBoneByName
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const FName, const TEnumAsByte<EPhysBodyOp>> HideBoneByName = { 0x49616e0, 25 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetVertexOffsetUsage
	constexpr static const FunctionPointer<USkinnedMeshComponent, int32_t, const int32_t> GetVertexOffsetUsage = { 0x4962db0, 26 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetTwistAndSwingAngleOfDeltaRotationFromRefPose
	constexpr static const FunctionPointer<USkinnedMeshComponent, bool, const FName, const float&, const float&> GetTwistAndSwingAngleOfDeltaRotationFromRefPose = { 0x4963950, 27 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetSocketBoneName
	constexpr static const FunctionPointer<USkinnedMeshComponent, FName, const FName> GetSocketBoneName = { 0x4964020, 28 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetRefPosePosition
	constexpr static const FunctionPointer<USkinnedMeshComponent, FVector, const int32_t> GetRefPosePosition = { 0x49621d0, 29 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetParentBone
	constexpr static const FunctionPointer<USkinnedMeshComponent, FName, const FName> GetParentBone = { 0x4963d00, 30 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumLODs
	constexpr static const FunctionPointer<USkinnedMeshComponent, int32_t> GetNumLODs = { 0x49648e0, 31 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetNumBones
	constexpr static const FunctionPointer<USkinnedMeshComponent, int32_t> GetNumBones = { 0x4964360, 32 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetForcedLodModel
	constexpr static const FunctionPointer<USkinnedMeshComponent, int32_t> GetForcedLodModel = { 0x4964670, 33 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetForcedLOD
	constexpr static const FunctionPointer<USkinnedMeshComponent, int32_t> GetForcedLOD = { 0x4964670, 34 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetDeltaTransformFromRefPose
	constexpr static const FunctionPointer<USkinnedMeshComponent, FTransform, const FName, const FName> GetDeltaTransformFromRefPose = { 0x4963b60, 35 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetCurrentSkinWeightProfileName
	constexpr static const FunctionPointer<USkinnedMeshComponent, FName> GetCurrentSkinWeightProfileName = { 0x4962ef0, 36 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneName
	constexpr static const FunctionPointer<USkinnedMeshComponent, FName, const int32_t> GetBoneName = { 0x4964110, 37 }; 
	// Function /Script/Engine.SkinnedMeshComponent.GetBoneIndex
	constexpr static const FunctionPointer<USkinnedMeshComponent, int32_t, const FName> GetBoneIndex = { 0x4964220, 38 }; 
	// Function /Script/Engine.SkinnedMeshComponent.FindClosestBone_K2
	constexpr static const FunctionPointer<USkinnedMeshComponent, FName, const FVector, const FVector&, const float, const bool> FindClosestBone_K2 = { 0x49618c0, 39 }; 
	// Function /Script/Engine.SkinnedMeshComponent.ClearVertexColorOverride
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t> ClearVertexColorOverride = { 0x4963640, 40 }; 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightProfile
	constexpr static const FunctionPointer<USkinnedMeshComponent, void> ClearSkinWeightProfile = { 0x4963150, 41 }; 
	// Function /Script/Engine.SkinnedMeshComponent.ClearSkinWeightOverride
	constexpr static const FunctionPointer<USkinnedMeshComponent, void, const int32_t> ClearSkinWeightOverride = { 0x4963380, 42 }; 
	// Function /Script/Engine.SkinnedMeshComponent.BoneIsChildOf
	constexpr static const FunctionPointer<USkinnedMeshComponent, bool, const FName, const FName> BoneIsChildOf = { 0x4962310, 43 }; 
};

/// Struct /Script/Engine.SingleAnimationPlayData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSingleAnimationPlayData
{ 
	class UAnimationAsset*                             AnimToPlay;                                                 // 0x0000   (0x0008)  
	bool                                               bSavedLooping : 1;                                          // 0x0008:0 (0x0001)  
	bool                                               bSavedPlaying : 1;                                          // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              SavedPosition;                                              // 0x000C   (0x0004)  
	float                                              SavedPlayRate;                                              // 0x0010   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/Engine.SkeletalMeshComponent
/// Size: 0x12F0 (4848 bytes) (0x000880 - 0x0012F0) align n/a MaxSize: 0x12F0
class USkeletalMeshComponent : public USkinnedMeshComponent
{ 
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintGeneratedClass;                                // 0x0880   (0x0008)  
	class UClass*                                      AnimClass;                                                  // 0x0888   (0x0008)  
	class UAnimInstance*                               AnimScriptInstance;                                         // 0x0890   (0x0008)  
	class UAnimInstance*                               PostProcessAnimInstance;                                    // 0x0898   (0x0008)  
	bool                                               bRequestRecreateCloth;                                      // 0x08A0   (0x0001)  
	unsigned char                                      UnknownData33_6[0x7];                                       // 0x08A1   (0x0007)  MISSED
	FSingleAnimationPlayData                           AnimationData;                                              // 0x08A8   (0x0018)  
	unsigned char                                      UnknownData34_6[0x10];                                      // 0x08C0   (0x0010)  MISSED
	FVector                                            RootBoneTranslation;                                        // 0x08D0   (0x000C)  
	FVector                                            LineCheckBoundsScale;                                       // 0x08DC   (0x000C)  
	unsigned char                                      UnknownData35_6[0x30];                                      // 0x08E8   (0x0030)  MISSED
	TArray<class UAnimInstance*>                       LinkedInstances;                                            // 0x0918   (0x0010)  
	TArray<FTransform>                                 CachedBoneSpaceTransforms;                                  // 0x0928   (0x0010)  
	TArray<FTransform>                                 CachedComponentSpaceTransforms;                             // 0x0938   (0x0010)  
	unsigned char                                      UnknownData36_6[0x150];                                     // 0x0948   (0x0150)  MISSED
	uint32_t                                           LastUpdateVehicleOnBoardFrameNumber;                        // 0x0A98   (0x0004)  
	unsigned char                                      UnknownData37_6[0x4];                                       // 0x0A9C   (0x0004)  MISSED
	FTransform                                         VehicleOnBoardTransformOffset;                              // 0x0AA0   (0x0030)  
	FTransform                                         CachedVehicleOnBoardTransformPhysicsOffset;                 // 0x0AD0   (0x0030)  
	FTransform                                         ForceClothTeleportTransform;                                // 0x0B00   (0x0030)  
	bool                                               bLockPelvisBodyLocationXY;                                  // 0x0B30   (0x0001)  
	bool                                               bLockPelvisBodyLocationZ;                                   // 0x0B31   (0x0001)  
	unsigned char                                      UnknownData38_6[0x2];                                       // 0x0B32   (0x0002)  MISSED
	FName                                              LockBodyName;                                               // 0x0B34   (0x0008)  
	bool                                               bLockupSimulatePhysics;                                     // 0x0B3C   (0x0001)  
	unsigned char                                      UnknownData39_6[0x3];                                       // 0x0B3D   (0x0003)  MISSED
	FTransform                                         LockupTransform;                                            // 0x0B40   (0x0030)  
	FVector                                            ClothAdditiveWindDirection;                                 // 0x0B70   (0x000C)  
	FVector                                            SBWindForce;                                                // 0x0B7C   (0x000C)  
	FVector                                            SBKawaiiPhysicsForce;                                       // 0x0B88   (0x000C)  
	bool                                               bKawaiiPhysicsReset;                                        // 0x0B94   (0x0001)  
	unsigned char                                      UnknownData40_6[0x3];                                       // 0x0B95   (0x0003)  MISSED
	float                                              GlobalAnimRateScale;                                        // 0x0B98   (0x0004)  
	TEnumAsByte<EKinematicBonesUpdateToPhysics>        KinematicBonesUpdateType;                                   // 0x0B9C   (0x0001)  
	TEnumAsByte<EPhysicsTransformUpdateMode>           PhysicsTransformUpdateMode;                                 // 0x0B9D   (0x0001)  
	unsigned char                                      UnknownData41_6[0x52];                                      // 0x0B9E   (0x0052)  MISSED
	TEnumAsByte<EAnimationMode>                        AnimationMode;                                              // 0x0BF0   (0x0001)  
	unsigned char                                      UnknownData42_6[0x1];                                       // 0x0BF1   (0x0001)  MISSED
	bool                                               bDisablePostProcessBlueprint : 1;                           // 0x0BF2:0 (0x0001)  
	bool                                               bBodyNoCollisionIfNotKeep : 1;                              // 0x0BF2:1 (0x0001)  
	unsigned char                                      UnknownData43_5[0x19];                                      // 0x0BF3   (0x0019)  MISSED
	bool                                               bForceResetPhysicsFlag;                                     // 0x0C0C   (0x0001)  
	unsigned char                                      UnknownBit44 : 1;                                           // 0x0C0D:0 (0x0001)  MISSED
	bool                                               bUpdateOverlapsOnAnimationFinalize : 1;                     // 0x0C0D:1 (0x0001)  
	unsigned char                                      UnknownBit45 : 1;                                           // 0x0C0D:2 (0x0001)  MISSED
	bool                                               bHasValidBodies : 1;                                        // 0x0C0D:3 (0x0001)  
	bool                                               bBlendPhysics : 1;                                          // 0x0C0D:4 (0x0001)  
	bool                                               bEnablePhysicsOnDedicatedServer : 1;                        // 0x0C0D:5 (0x0001)  
	bool                                               bUpdateJointsFromAnimation : 1;                             // 0x0C0D:6 (0x0001)  
	bool                                               bAllowClothActors : 1;                                      // 0x0C0D:7 (0x0001)  
	bool                                               bDisableClothSimulation : 1;                                // 0x0C0E:0 (0x0001)  
	unsigned char                                      UnknownData46_3[0x5];                                       // 0x0C0F   (0x0005)  MISSED
	unsigned char                                      UnknownBit47 : 1;                                           // 0x0C14:0 (0x0001)  MISSED
	bool                                               bDislablePhysicsAlways : 1;                                 // 0x0C14:1 (0x0001)  
	bool                                               bPauseClothTickAlways : 1;                                  // 0x0C14:2 (0x0001)  
	bool                                               bDisableRigidBodyAnimNode : 1;                              // 0x0C14:3 (0x0001)  
	bool                                               bAllowAnimCurveEvaluation : 1;                              // 0x0C14:4 (0x0001)  
	bool                                               bDisableAnimCurves : 1;                                     // 0x0C14:5 (0x0001)  
	unsigned char                                      UnknownBit48 : 1;                                           // 0x0C14:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit49 : 1;                                           // 0x0C14:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit50 : 1;                                           // 0x0C15:0 (0x0001)  MISSED
	bool                                               bCollideWithEnvironment : 1;                                // 0x0C15:1 (0x0001)  
	bool                                               bCollideWithAttachedChildren : 1;                           // 0x0C15:2 (0x0001)  
	bool                                               bLocalSpaceSimulation : 1;                                  // 0x0C15:3 (0x0001)  
	bool                                               bResetAfterTeleport : 1;                                    // 0x0C15:4 (0x0001)  
	unsigned char                                      UnknownBit51 : 1;                                           // 0x0C15:5 (0x0001)  MISSED
	bool                                               bDeferKinematicBoneUpdate : 1;                              // 0x0C15:6 (0x0001)  
	bool                                               bNoSkeletonUpdate : 1;                                      // 0x0C15:7 (0x0001)  
	bool                                               bPauseAnims : 1;                                            // 0x0C16:0 (0x0001)  
	bool                                               bUseRefPoseOnInitAnim : 1;                                  // 0x0C16:1 (0x0001)  
	bool                                               bEnablePerPolyCollision : 1;                                // 0x0C16:2 (0x0001)  
	bool                                               bForceRefpose : 1;                                          // 0x0C16:3 (0x0001)  
	bool                                               bOnlyAllowAutonomousTickPose : 1;                           // 0x0C16:4 (0x0001)  
	bool                                               bIsAutonomousTickPose : 1;                                  // 0x0C16:5 (0x0001)  
	bool                                               bOldForceRefPose : 1;                                       // 0x0C16:6 (0x0001)  
	bool                                               bShowPrePhysBones : 1;                                      // 0x0C16:7 (0x0001)  
	bool                                               bRequiredBonesUpToDate : 1;                                 // 0x0C17:0 (0x0001)  
	bool                                               bAnimTreeInitialised : 1;                                   // 0x0C17:1 (0x0001)  
	bool                                               bIncludeComponentLocationIntoBounds : 1;                    // 0x0C17:2 (0x0001)  
	bool                                               bEnableLineCheckWithBounds : 1;                             // 0x0C17:3 (0x0001)  
	bool                                               bUseBendingElements : 1;                                    // 0x0C17:4 (0x0001)  
	bool                                               bUseTetrahedralConstraints : 1;                             // 0x0C17:5 (0x0001)  
	bool                                               bUseThinShellVolumeConstraints : 1;                         // 0x0C17:6 (0x0001)  
	bool                                               bUseSelfCollisions : 1;                                     // 0x0C17:7 (0x0001)  
	bool                                               bUseContinuousCollisionDetection : 1;                       // 0x0C18:0 (0x0001)  
	bool                                               bPropagateCurvesToSlaves : 1;                               // 0x0C18:1 (0x0001)  
	bool                                               bSkipKinematicUpdateWhenInterpolating : 1;                  // 0x0C18:2 (0x0001)  
	bool                                               bSkipBoundsUpdateWhenInterpolating : 1;                     // 0x0C18:3 (0x0001)  
	unsigned char                                      UnknownBit52 : 1;                                           // 0x0C18:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit53 : 1;                                           // 0x0C18:5 (0x0001)  MISSED
	bool                                               bNeedsQueuedAnimEventsDispatched : 1;                       // 0x0C18:6 (0x0001)  
	unsigned char                                      UnknownData54_5[0x1];                                       // 0x0C19   (0x0001)  MISSED
	uint16_t                                           CachedAnimCurveUidVersion;                                  // 0x0C1A   (0x0002)  
	EClothMassMode                                     MassMode;                                                   // 0x0C1C   (0x0001)  
	unsigned char                                      UnknownData55_6[0x3];                                       // 0x0C1D   (0x0003)  MISSED
	float                                              UniformMass;                                                // 0x0C20   (0x0004)  
	float                                              TotalMass;                                                  // 0x0C24   (0x0004)  
	float                                              Density;                                                    // 0x0C28   (0x0004)  
	float                                              MinPerParticleMass;                                         // 0x0C2C   (0x0004)  
	float                                              ClothBlendWeight;                                           // 0x0C30   (0x0004)  
	float                                              EdgeStiffness;                                              // 0x0C34   (0x0004)  
	float                                              BendingStiffness;                                           // 0x0C38   (0x0004)  
	float                                              AreaStiffness;                                              // 0x0C3C   (0x0004)  
	float                                              VolumeStiffness;                                            // 0x0C40   (0x0004)  
	float                                              StrainLimitingStiffness;                                    // 0x0C44   (0x0004)  
	float                                              ShapeTargetStiffness;                                       // 0x0C48   (0x0004)  
	bool                                               bWaitForParallelClothTask;                                  // 0x0C4C   (0x0001)  
	unsigned char                                      UnknownData56_6[0x3];                                       // 0x0C4D   (0x0003)  MISSED
	TArray<FName>                                      DisallowedAnimCurves;                                       // 0x0C50   (0x0010)  
	FName                                              DisablePhysicsTag;                                          // 0x0C60   (0x0008)  
	class UBodySetup*                                  BodySetup;                                                  // 0x0C68   (0x0008)  
	unsigned char                                      UnknownData57_6[0x8];                                       // 0x0C70   (0x0008)  MISSED
	FMulticastInlineDelegate                           OnConstraintBroken;                                         // 0x0C78   (0x0010)  
	class UClass*                                      ClothingSimulationFactory;                                  // 0x0C88   (0x0008)  
	unsigned char                                      UnknownData58_6[0xC8];                                      // 0x0C90   (0x00C8)  MISSED
	float                                              TeleportDistanceThreshold;                                  // 0x0D58   (0x0004)  
	float                                              TeleportRotationThreshold;                                  // 0x0D5C   (0x0004)  
	unsigned char                                      UnknownData59_6[0x8];                                       // 0x0D60   (0x0008)  MISSED
	uint32_t                                           LastPoseTickFrame;                                          // 0x0D68   (0x0004)  
	bool                                               bNeedResetPhysicsAsset;                                     // 0x0D6C   (0x0001)  
	unsigned char                                      UnknownData60_6[0x3];                                       // 0x0D6D   (0x0003)  MISSED
	FName                                              NotifyAnimName;                                             // 0x0D70   (0x0008)  
	float                                              PhysTransformStabilizationLerpValue;                        // 0x0D78   (0x0004)  
	unsigned char                                      UnknownData61_6[0x54];                                      // 0x0D7C   (0x0054)  MISSED
	class UClothingSimulationInteractor*               ClothingInteractor;                                         // 0x0DD0   (0x0008)  
	class UPhysicsAsset*                               OverrideClothPhysicsAsset;                                  // 0x0DD8   (0x0008)  
	bool                                               bNeedOverridePhysicsAssetAndUpdate;                         // 0x0DE0   (0x0001)  
	unsigned char                                      UnknownData62_6[0x7];                                       // 0x0DE1   (0x0007)  MISSED
	class UPhysicsAsset*                               AttachParentCollisionsOverrideClothPhysicsAsset;            // 0x0DE8   (0x0008)  
	unsigned char                                      UnknownData63_6[0x138];                                     // 0x0DF0   (0x0138)  MISSED
	FMulticastInlineDelegate                           OnAnimInitialized;                                          // 0x0F28   (0x0010)  
	unsigned char                                      UnknownData64_6[0x10];                                      // 0x0F38   (0x0010)  MISSED
	bool                                               bCreateClothingUseRefTransform;                             // 0x0F48   (0x0001)  
	unsigned char                                      UnknownData65_7[0x3A7];                                     // 0x0F49   (0x03A7)  MISSED

	/// Functions
	// Function /Script/Engine.SkeletalMeshComponent.UnlinkAnimClassLayers
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const UClass*> UnlinkAnimClassLayers = { 0x4959cf0, 0 }; 
	// Function /Script/Engine.SkeletalMeshComponent.UnbindClothFromMasterPoseComponent
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool> UnbindClothFromMasterPoseComponent = { 0x49585a0, 1 }; 
	// Function /Script/Engine.SkeletalMeshComponent.ToggleDisablePostProcessBlueprint
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> ToggleDisablePostProcessBlueprint = { 0x495be70, 2 }; 
	// Function /Script/Engine.SkeletalMeshComponent.TermBodiesBelow
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName> TermBodiesBelow = { 0x4956280, 3 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SuspendClothingSimulation
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> SuspendClothingSimulation = { 0x49587b0, 4 }; 
	// Function /Script/Engine.SkeletalMeshComponent.Stop
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> Stop = { 0x4959510, 5 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SnapshotPose
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FPoseSnapshot&> SnapshotPose = { 0x49588e0, 6 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetUpdateClothInEditor
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool> SetUpdateClothInEditor = { 0x26a9510, 7 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetUpdateAnimationInEditor
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool> SetUpdateAnimationInEditor = { 0x26a9510, 8 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportRotationThreshold
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const float> SetTeleportRotationThreshold = { 0x4957c90, 9 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetTeleportDistanceThreshold
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const float> SetTeleportDistanceThreshold = { 0x4957b90, 10 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetSBKawaiiPhysicsForce
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FVector&, const float> SetSBKawaiiPhysicsForce = { 0x495bb90, 11 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetPosition
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const float, const bool> SetPosition = { 0x4959320, 12 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetPlayRate
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const float> SetPlayRate = { 0x4959190, 13 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetPhysTransformStabilizationValue
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const float> SetPhysTransformStabilizationValue = { 0x4957aa0, 14 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetPhysicsBlendWeight
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const float> SetPhysicsBlendWeight = { 0x4956000, 15 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetNotifyRigidBodyCollisionBelow
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool, const FName, const bool> SetNotifyRigidBodyCollisionBelow = { 0x4957740, 16 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetMorphTarget
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName, const float, const bool> SetMorphTarget = { 0x4958ba0, 17 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnablePhysicsBlending
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool> SetEnablePhysicsBlending = { 0x4955f20, 18 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableGravityOnAllBodiesBelow
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool, const FName, const bool> SetEnableGravityOnAllBodiesBelow = { 0x4957270, 19 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetEnableBodyGravity
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool, const FName> SetEnableBodyGravity = { 0x49575a0, 20 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisablePostProcessBlueprint
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool> SetDisablePostProcessBlueprint = { 0x495bd30, 21 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisablePhysicsTag
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName> SetDisablePhysicsTag = { 0x4956d10, 22 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetDisableAnimCurves
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool> SetDisableAnimCurves = { 0x49582a0, 23 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfileForAll
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName, const bool> SetConstraintProfileForAll = { 0x4953aa0, 24 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetConstraintProfile
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName, const FName, const bool> SetConstraintProfile = { 0x4953cd0, 25 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetClothMaxDistanceScale
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const float> SetClothMaxDistanceScale = { 0x4958810, 26 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetBodyNotifyRigidBodyCollision
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool, const FName> SetBodyNotifyRigidBodyCollision = { 0x4957930, 27 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimClass
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const UClass*> SetAnimClass = { 0x495a4f0, 28 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimationMode
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const TEnumAsByte<EAnimationMode>> SetAnimationMode = { 0x4959910, 29 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAnimation
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const UAnimationAsset*> SetAnimation = { 0x49596a0, 30 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAngularLimits
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName, const float, const float, const float> SetAngularLimits = { 0x4953350, 31 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowRigidBodyAnimNode
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool, const bool> SetAllowRigidBodyAnimNode = { 0x49583d0, 32 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowedAnimCurvesEvaluation
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const TArray<FName>&, const bool> SetAllowedAnimCurvesEvaluation = { 0x4957d70, 33 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllowAnimCurveEvaluation
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool> SetAllowAnimCurveEvaluation = { 0x4958170, 34 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularVelocityDrive
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool, const bool, const bool> SetAllMotorsAngularVelocityDrive = { 0x4954320, 35 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularPositionDrive
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool, const bool, const bool> SetAllMotorsAngularPositionDrive = { 0x4954660, 36 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllMotorsAngularDriveParams
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const float, const float, const float, const bool> SetAllMotorsAngularDriveParams = { 0x4953f80, 37 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesSimulatePhysics
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool> SetAllBodiesSimulatePhysics = { 0x49560d0, 38 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesPhysicsBlendWeight
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const float, const bool> SetAllBodiesPhysicsBlendWeight = { 0x4954ea0, 39 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesIgnoreDynamicSimulatePhysics
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName&, const bool> SetAllBodiesIgnoreDynamicSimulatePhysics = { 0x4955b60, 40 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowSimulatePhysics
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName&, const bool, const bool> SetAllBodiesBelowSimulatePhysics = { 0x4955d10, 41 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowPhysicsBlendWeight
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName&, const float, const bool, const bool> SetAllBodiesBelowPhysicsBlendWeight = { 0x4954c00, 42 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowDynamicSmoothPhysicsBlendWeight
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName&, const bool, const float, const float> SetAllBodiesBelowDynamicSmoothPhysicsBlendWeight = { 0x4955030, 43 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowDynamicSimulatePhysics
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName&, const bool, const float> SetAllBodiesBelowDynamicSimulatePhysics = { 0x4955960, 44 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowDynamicPhysicsBlendWeight
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName&, const bool, const float> SetAllBodiesBelowDynamicPhysicsBlendWeight = { 0x4955760, 45 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowDynamicLinearVelocity
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName&, const bool, const FVector&> SetAllBodiesBelowDynamicLinearVelocity = { 0x4955540, 46 }; 
	// Function /Script/Engine.SkeletalMeshComponent.SetAllBodiesBelowDynamicEnableGravity
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName&, const bool, const bool> SetAllBodiesBelowDynamicEnableGravity = { 0x4955300, 47 }; 
	// Function /Script/Engine.SkeletalMeshComponent.ResumeClothingSimulation
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> ResumeClothingSimulation = { 0x4958780, 48 }; 
	// Function /Script/Engine.SkeletalMeshComponent.ResetClothTeleportMode
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> ResetClothTeleportMode = { 0x4958730, 49 }; 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAnimInstanceDynamics
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const ETeleportType> ResetAnimInstanceDynamics = { 0x49599e0, 50 }; 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllowedAnimCurveEvaluation
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> ResetAllowedAnimCurveEvaluation = { 0x4957f20, 51 }; 
	// Function /Script/Engine.SkeletalMeshComponent.ResetAllBodiesSimulatePhysics
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> ResetAllBodiesSimulatePhysics = { 0x4955010, 52 }; 
	// Function /Script/Engine.SkeletalMeshComponent.PlayAnimation
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const UAnimationAsset*, const bool> PlayAnimation = { 0x4959780, 53 }; 
	// Function /Script/Engine.SkeletalMeshComponent.Play
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const bool> Play = { 0x4959570, 54 }; 
	// Function /Script/Engine.SkeletalMeshComponent.OverrideAnimationData
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const UAnimationAsset*, const bool, const bool, const float, const float> OverrideAnimationData = { 0x4958d90, 55 }; 
	// Function /Script/Engine.SkeletalMeshComponent.LinkAnimGraphByTag
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName, const UClass*> LinkAnimGraphByTag = { 0x4959ef0, 56 }; 
	// Function /Script/Engine.SkeletalMeshComponent.LinkAnimClassLayers
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const UClass*> LinkAnimClassLayers = { 0x4959df0, 57 }; 
	// Function /Script/Engine.SkeletalMeshComponent.K2_GetClosestPointOnPhysicsAsset
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool, const FVector&, const FVector&, const FVector&, const FName&, const float&> K2_GetClosestPointOnPhysicsAsset = { 0x4956ea0, 58 }; 
	// Function /Script/Engine.SkeletalMeshComponent.IsPlaying
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool> IsPlaying = { 0x4959490, 59 }; 
	// Function /Script/Engine.SkeletalMeshComponent.IsClothingSimulationSuspended
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool> IsClothingSimulationSuspended = { 0x4958750, 60 }; 
	// Function /Script/Engine.SkeletalMeshComponent.IsBodyGravityEnabled
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool, const FName> IsBodyGravityEnabled = { 0x49574a0, 61 }; 
	// Function /Script/Engine.SkeletalMeshComponent.HasValidAnimationInstance
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool> HasValidAnimationInstance = { 0x4959ab0, 62 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportRotationThreshold
	constexpr static const FunctionPointer<USkeletalMeshComponent, float> GetTeleportRotationThreshold = { 0x4957c70, 63 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetTeleportDistanceThreshold
	constexpr static const FunctionPointer<USkeletalMeshComponent, float> GetTeleportDistanceThreshold = { 0x4957c70, 64 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetStringAttribute_Ref
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool, const FName&, const FName&, const FString&, const ECustomBoneAttributeLookup> GetStringAttribute_Ref = { 0x495b150, 65 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetStringAttribute
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool, const FName&, const FName&, const FString, const FString&, const ECustomBoneAttributeLookup> GetStringAttribute = { 0x495a5d0, 66 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetSkeletalCenterOfMass
	constexpr static const FunctionPointer<USkeletalMeshComponent, FVector> GetSkeletalCenterOfMass = { 0x49568c0, 67 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetPostProcessInstance
	constexpr static const FunctionPointer<USkeletalMeshComponent, UAnimInstance*> GetPostProcessInstance = { 0x495a440, 68 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetPosition
	constexpr static const FunctionPointer<USkeletalMeshComponent, float> GetPosition = { 0x49592a0, 69 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetPlayRate
	constexpr static const FunctionPointer<USkeletalMeshComponent, float> GetPlayRate = { 0x4959110, 70 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetMorphTarget
	constexpr static const FunctionPointer<USkeletalMeshComponent, float, const FName> GetMorphTarget = { 0x4958a30, 71 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByGroup
	constexpr static const FunctionPointer<USkeletalMeshComponent, UAnimInstance*, const FName> GetLinkedAnimLayerInstanceByGroup = { 0x4959bf0, 72 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimLayerInstanceByClass
	constexpr static const FunctionPointer<USkeletalMeshComponent, UAnimInstance*, const UClass*> GetLinkedAnimLayerInstanceByClass = { 0x4959af0, 73 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstancesByTag
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName, const TArray<UAnimInstance*>&> GetLinkedAnimGraphInstancesByTag = { 0x495a190, 74 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetLinkedAnimGraphInstanceByTag
	constexpr static const FunctionPointer<USkeletalMeshComponent, UAnimInstance*, const FName> GetLinkedAnimGraphInstanceByTag = { 0x495a340, 75 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetIntegerAttribute_Ref
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool, const FName&, const FName&, const int32_t&, const ECustomBoneAttributeLookup> GetIntegerAttribute_Ref = { 0x495b470, 76 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetIntegerAttribute
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool, const FName&, const FName&, const int32_t, const int32_t&, const ECustomBoneAttributeLookup> GetIntegerAttribute = { 0x495a960, 77 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetFloatAttribute_Ref
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool, const FName&, const FName&, const float&, const ECustomBoneAttributeLookup> GetFloatAttribute_Ref = { 0x495b800, 78 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetFloatAttribute
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool, const FName&, const FName&, const float, const float&, const ECustomBoneAttributeLookup> GetFloatAttribute = { 0x495ad50, 79 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisablePostProcessBlueprint
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool> GetDisablePostProcessBlueprint = { 0x495be40, 80 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetDisableAnimCurves
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool> GetDisableAnimCurves = { 0x4958270, 81 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetCurrentJointAngles
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName, const float&, const float&, const float&> GetCurrentJointAngles = { 0x4953010, 82 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothMaxDistanceScale
	constexpr static const FunctionPointer<USkeletalMeshComponent, float> GetClothMaxDistanceScale = { 0x26a6600, 83 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetClothingSimulationInteractor
	constexpr static const FunctionPointer<USkeletalMeshComponent, UClothingSimulationInteractor*> GetClothingSimulationInteractor = { 0x4957b70, 84 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetBoneMass
	constexpr static const FunctionPointer<USkeletalMeshComponent, float, const FName, const bool> GetBoneMass = { 0x4956af0, 85 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimInstance
	constexpr static const FunctionPointer<USkeletalMeshComponent, UAnimInstance*> GetAnimInstance = { 0x495a460, 86 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimClass
	constexpr static const FunctionPointer<USkeletalMeshComponent, UClass*> GetAnimClass = { 0x495a480, 87 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetAnimationMode
	constexpr static const FunctionPointer<USkeletalMeshComponent, TEnumAsByte<EAnimationMode>> GetAnimationMode = { 0x49598f0, 88 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowRigidBodyAnimNode
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool> GetAllowRigidBodyAnimNode = { 0x49583a0, 89 }; 
	// Function /Script/Engine.SkeletalMeshComponent.GetAllowedAnimCurveEvaluate
	constexpr static const FunctionPointer<USkeletalMeshComponent, bool> GetAllowedAnimCurveEvaluate = { 0x4958140, 90 }; 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleportAndReset
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> ForceClothNextUpdateTeleportAndReset = { 0x49587d0, 91 }; 
	// Function /Script/Engine.SkeletalMeshComponent.ForceClothNextUpdateTeleport
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> ForceClothNextUpdateTeleport = { 0x49587f0, 92 }; 
	// Function /Script/Engine.SkeletalMeshComponent.FindConstraintBoneName
	constexpr static const FunctionPointer<USkeletalMeshComponent, FName, const int32_t> FindConstraintBoneName = { 0x4953970, 93 }; 
	// Function /Script/Engine.SkeletalMeshComponent.ClearMorphTargets
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> ClearMorphTargets = { 0x4958b60, 94 }; 
	// Function /Script/Engine.SkeletalMeshComponent.BreakConstraint
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FVector, const FVector, const FName> BreakConstraint = { 0x4953750, 95 }; 
	// Function /Script/Engine.SkeletalMeshComponent.BindClothToMasterPoseComponent
	constexpr static const FunctionPointer<USkeletalMeshComponent, void> BindClothToMasterPoseComponent = { 0x49586b0, 96 }; 
	// Function /Script/Engine.SkeletalMeshComponent.AllowAnimCurveEvaluation
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName, const bool> AllowAnimCurveEvaluation = { 0x4957f70, 97 }; 
	// Function /Script/Engine.SkeletalMeshComponent.AddImpulseToAllBodiesBelow
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FVector, const FName, const bool, const bool> AddImpulseToAllBodiesBelow = { 0x4956360, 98 }; 
	// Function /Script/Engine.SkeletalMeshComponent.AddForceToAllBodiesBelow
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FVector, const FName, const bool, const bool> AddForceToAllBodiesBelow = { 0x4956610, 99 }; 
	// Function /Script/Engine.SkeletalMeshComponent.AccumulateAllBodiesBelowPhysicsBlendWeight
	constexpr static const FunctionPointer<USkeletalMeshComponent, void, const FName&, const float, const bool> AccumulateAllBodiesBelowPhysicsBlendWeight = { 0x4954990, 100 }; 
};

/// Struct /Script/Engine.AnimNotifyEventReference
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FAnimNotifyEventReference
{ 
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UObject*                                     NotifySource;                                               // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.AnimNotifyArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FAnimNotifyArray
{ 
	TArray<FAnimNotifyEventReference>                  Notifies;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.AnimNotifyQueue
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align n/a MaxSize: 0x0080
struct FAnimNotifyQueue
{ 
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	TArray<FAnimNotifyEventReference>                  AnimNotifies;                                               // 0x0010   (0x0010)  
	TMap<FName, FAnimNotifyArray>                      UnfilteredMontageAnimNotifies;                              // 0x0020   (0x0050)  
	TArray<FAnimNotifyEventReference>                  ForceAnimNotifies;                                          // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.AnimLinkableElement
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FAnimLinkableElement
{ 
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UAnimMontage*                                LinkedMontage;                                              // 0x0008   (0x0008)  
	int32_t                                            SlotIndex;                                                  // 0x0010   (0x0004)  
	int32_t                                            SegmentIndex;                                               // 0x0014   (0x0004)  
	TEnumAsByte<EAnimLinkMethod>                       LinkMethod;                                                 // 0x0018   (0x0001)  
	TEnumAsByte<EAnimLinkMethod>                       CachedLinkMethod;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x001A   (0x0002)  MISSED
	float                                              SegmentBeginTime;                                           // 0x001C   (0x0004)  
	float                                              SegmentLength;                                              // 0x0020   (0x0004)  
	float                                              LinkValue;                                                  // 0x0024   (0x0004)  
	class UAnimSequenceBase*                           LinkedSequence;                                             // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.AnimNotifyEvent
/// Size: 0x00B8 (184 bytes) (0x000030 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FAnimNotifyEvent : FAnimLinkableElement
{ 
	float                                              DisplayTime;                                                // 0x0030   (0x0004)  
	float                                              TriggerTimeOffset;                                          // 0x0034   (0x0004)  
	float                                              EndTriggerTimeOffset;                                       // 0x0038   (0x0004)  
	float                                              TriggerWeightThreshold;                                     // 0x003C   (0x0004)  
	FName                                              NotifyName;                                                 // 0x0040   (0x0008)  
	class UAnimNotify*                                 Notify;                                                     // 0x0048   (0x0008)  
	class UAnimNotifyState*                            NotifyStateClass;                                           // 0x0050   (0x0008)  
	float                                              Duration;                                                   // 0x0058   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FAnimLinkableElement                               EndLink;                                                    // 0x0060   (0x0030)  
	bool                                               bConvertedFromBranchingPoint;                               // 0x0090   (0x0001)  
	TEnumAsByte<EMontageNotifyTickType>                MontageTickType;                                            // 0x0091   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x0092   (0x0002)  MISSED
	float                                              NotifyTriggerChance;                                        // 0x0094   (0x0004)  
	TEnumAsByte<ENotifyFilterType>                     NotifyFilterType;                                           // 0x0098   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0099   (0x0003)  MISSED
	int32_t                                            NotifyFilterLOD;                                            // 0x009C   (0x0004)  
	bool                                               bTriggerOnDedicatedServer;                                  // 0x00A0   (0x0001)  
	bool                                               bTriggerOnFollower;                                         // 0x00A1   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x00A2   (0x0002)  MISSED
	int32_t                                            TrackIndex;                                                 // 0x00A4   (0x0004)  
	unsigned char                                      UnknownData09_7[0x10];                                      // 0x00A8   (0x0010)  MISSED
};

/// Class /Script/Engine.AnimInstance
/// Size: 0x02D0 (720 bytes) (0x000028 - 0x0002D0) align n/a MaxSize: 0x02C8
class UAnimInstance : public UObject
{ 
public:
	class USkeleton*                                   CurrentSkeleton;                                            // 0x0028   (0x0008)  
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                             // 0x0030   (0x0001)  
	bool                                               bUseMultiThreadedAnimationUpdate : 1;                       // 0x0031:0 (0x0001)  
	bool                                               bUsingCopyPoseFromMesh : 1;                                 // 0x0031:1 (0x0001)  
	unsigned char                                      UnknownBit05 : 1;                                           // 0x0031:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x0031:3 (0x0001)  MISSED
	bool                                               bReceiveNotifiesFromLinkedInstances : 1;                    // 0x0031:4 (0x0001)  
	bool                                               bPropagateNotifiesToLinkedInstances : 1;                    // 0x0031:5 (0x0001)  
	bool                                               bQueueMontageEvents : 1;                                    // 0x0031:6 (0x0001)  
	unsigned char                                      UnknownData07_5[0x6];                                       // 0x0032   (0x0006)  MISSED
	FMulticastInlineDelegate                           OnMontageBlendingOut;                                       // 0x0038   (0x0010)  
	FMulticastInlineDelegate                           OnMontageStarted;                                           // 0x0048   (0x0010)  
	FMulticastInlineDelegate                           OnMontageEnded;                                             // 0x0058   (0x0010)  
	FMulticastInlineDelegate                           OnAllMontageInstancesEnded;                                 // 0x0068   (0x0010)  
	unsigned char                                      UnknownData08_6[0x88];                                      // 0x0078   (0x0088)  MISSED
	FAnimNotifyQueue                                   NotifyQueue;                                                // 0x0100   (0x0080)  
	TArray<FAnimNotifyEvent>                           ActiveAnimNotifyState;                                      // 0x0180   (0x0010)  
	unsigned char                                      UnknownData09_7[0x138];                                     // 0x0190   (0x0138)  MISSED

	/// Functions
	// Function /Script/Engine.AnimInstance.UnlockAIResources
	constexpr static const FunctionPointer<UAnimInstance, void, const bool, const bool> UnlockAIResources = { 0x26c3d60, 0 }; 
	// Function /Script/Engine.AnimInstance.UnlinkAnimClassLayers
	constexpr static const FunctionPointer<UAnimInstance, void, const UClass*> UnlinkAnimClassLayers = { 0x47082f0, 1 }; 
	// Function /Script/Engine.AnimInstance.TryGetPawnOwner
	constexpr static const FunctionPointer<UAnimInstance, APawn*> TryGetPawnOwner = { 0x470c280, 2 }; 
	// Function /Script/Engine.AnimInstance.StopSlotAnimation
	constexpr static const FunctionPointer<UAnimInstance, void, const float, const FName> StopSlotAnimation = { 0x470ab60, 3 }; 
	// Function /Script/Engine.AnimInstance.SnapshotPose
	constexpr static const FunctionPointer<UAnimInstance, void, const FPoseSnapshot&> SnapshotPose = { 0x470c050, 4 }; 
	// Function /Script/Engine.AnimInstance.SetRootMotionMode
	constexpr static const FunctionPointer<UAnimInstance, void, const TEnumAsByte<ERootMotionMode>> SetRootMotionMode = { 0x46efb90, 5 }; 
	// Function /Script/Engine.AnimInstance.SetReceiveNotifiesFromLinkedInstances
	constexpr static const FunctionPointer<UAnimInstance, void, const bool> SetReceiveNotifiesFromLinkedInstances = { 0x470bf40, 6 }; 
	// Function /Script/Engine.AnimInstance.SetPropagateNotifiesToLinkedInstances
	constexpr static const FunctionPointer<UAnimInstance, void, const bool> SetPropagateNotifiesToLinkedInstances = { 0x470be30, 7 }; 
	// Function /Script/Engine.AnimInstance.SetMorphTarget
	constexpr static const FunctionPointer<UAnimInstance, void, const FName, const float> SetMorphTarget = { 0x4705f90, 8 }; 
	// Function /Script/Engine.AnimInstance.SavePoseSnapshot
	constexpr static const FunctionPointer<UAnimInstance, void, const FName> SavePoseSnapshot = { 0x470c1a0, 9 }; 
	// Function /Script/Engine.AnimInstance.ResetDynamics
	constexpr static const FunctionPointer<UAnimInstance, void, const ETeleportType> ResetDynamics = { 0x4705410, 10 }; 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimationAsDynamicMontage
	constexpr static const FunctionPointer<UAnimInstance, UAnimMontage*, const UAnimSequenceBase*, const FName, const float, const float, const float, const int32_t, const float, const float> PlaySlotAnimationAsDynamicMontage = { 0x470ae50, 11 }; 
	// Function /Script/Engine.AnimInstance.PlaySlotAnimation
	constexpr static const FunctionPointer<UAnimInstance, float, const UAnimSequenceBase*, const FName, const float, const float, const float, const int32_t> PlaySlotAnimation = { 0x470b760, 12 }; 
	// Function /Script/Engine.AnimInstance.Montage_StopGroupByName
	constexpr static const FunctionPointer<UAnimInstance, void, const float, const FName> Montage_StopGroupByName = { 0x4709fd0, 13 }; 
	// Function /Script/Engine.AnimInstance.Montage_Stop
	constexpr static const FunctionPointer<UAnimInstance, void, const float, const UAnimMontage*> Montage_Stop = { 0x470a140, 14 }; 
	// Function /Script/Engine.AnimInstance.Montage_SetPosition
	constexpr static const FunctionPointer<UAnimInstance, void, const UAnimMontage*, const float> Montage_SetPosition = { 0x4708e10, 15 }; 
	// Function /Script/Engine.AnimInstance.Montage_SetPlayRate
	constexpr static const FunctionPointer<UAnimInstance, void, const UAnimMontage*, const float> Montage_SetPlayRate = { 0x4709540, 16 }; 
	// Function /Script/Engine.AnimInstance.Montage_SetNextSection
	constexpr static const FunctionPointer<UAnimInstance, void, const FName, const FName, const UAnimMontage*> Montage_SetNextSection = { 0x4709710, 17 }; 
	// Function /Script/Engine.AnimInstance.Montage_Resume
	constexpr static const FunctionPointer<UAnimInstance, void, const UAnimMontage*> Montage_Resume = { 0x4709d50, 18 }; 
	// Function /Script/Engine.AnimInstance.Montage_Play
	constexpr static const FunctionPointer<UAnimInstance, float, const UAnimMontage*, const float, const EMontagePlayReturnType, const float, const bool> Montage_Play = { 0x470a2b0, 19 }; 
	// Function /Script/Engine.AnimInstance.Montage_Pause
	constexpr static const FunctionPointer<UAnimInstance, void, const UAnimMontage*> Montage_Pause = { 0x4709ea0, 20 }; 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSectionsEnd
	constexpr static const FunctionPointer<UAnimInstance, void, const FName, const UAnimMontage*> Montage_JumpToSectionsEnd = { 0x4709970, 21 }; 
	// Function /Script/Engine.AnimInstance.Montage_JumpToSection
	constexpr static const FunctionPointer<UAnimInstance, void, const FName, const UAnimMontage*> Montage_JumpToSection = { 0x4709b60, 22 }; 
	// Function /Script/Engine.AnimInstance.Montage_IsPlaying
	constexpr static const FunctionPointer<UAnimInstance, bool, const UAnimMontage*> Montage_IsPlaying = { 0x47092c0, 23 }; 
	// Function /Script/Engine.AnimInstance.Montage_IsActive
	constexpr static const FunctionPointer<UAnimInstance, bool, const UAnimMontage*> Montage_IsActive = { 0x4709410, 24 }; 
	// Function /Script/Engine.AnimInstance.Montage_GetPosition
	constexpr static const FunctionPointer<UAnimInstance, float, const UAnimMontage*> Montage_GetPosition = { 0x4709000, 25 }; 
	// Function /Script/Engine.AnimInstance.Montage_GetPlayRate
	constexpr static const FunctionPointer<UAnimInstance, float, const UAnimMontage*> Montage_GetPlayRate = { 0x4708a90, 26 }; 
	// Function /Script/Engine.AnimInstance.Montage_GetIsStopped
	constexpr static const FunctionPointer<UAnimInstance, bool, const UAnimMontage*> Montage_GetIsStopped = { 0x4708d10, 27 }; 
	// Function /Script/Engine.AnimInstance.Montage_GetCurrentSection
	constexpr static const FunctionPointer<UAnimInstance, FName, const UAnimMontage*> Montage_GetCurrentSection = { 0x4709140, 28 }; 
	// Function /Script/Engine.AnimInstance.Montage_GetBlendTime
	constexpr static const FunctionPointer<UAnimInstance, float, const UAnimMontage*> Montage_GetBlendTime = { 0x4708bd0, 29 }; 
	// Function /Script/Engine.AnimInstance.LockAIResources
	constexpr static const FunctionPointer<UAnimInstance, void, const bool, const bool> LockAIResources = { 0x26c3d60, 30 }; 
	// Function /Script/Engine.AnimInstance.LinkAnimGraphByTag
	constexpr static const FunctionPointer<UAnimInstance, void, const FName, const UClass*> LinkAnimGraphByTag = { 0x47084d0, 31 }; 
	// Function /Script/Engine.AnimInstance.LinkAnimClassLayers
	constexpr static const FunctionPointer<UAnimInstance, void, const UClass*> LinkAnimClassLayers = { 0x47083e0, 32 }; 
	// Function /Script/Engine.AnimInstance.IsSyncGroupBetweenMarkers
	constexpr static const FunctionPointer<UAnimInstance, bool, const FName, const FName, const FName, const bool> IsSyncGroupBetweenMarkers = { 0x47056b0, 33 }; 
	// Function /Script/Engine.AnimInstance.IsPlayingSlotAnimation
	constexpr static const FunctionPointer<UAnimInstance, bool, const UAnimSequenceBase*, const FName> IsPlayingSlotAnimation = { 0x470a930, 34 }; 
	// Function /Script/Engine.AnimInstance.IsAnyMontagePlaying
	constexpr static const FunctionPointer<UAnimInstance, bool> IsAnyMontagePlaying = { 0x4708a60, 35 }; 
	// Function /Script/Engine.AnimInstance.HasMarkerBeenHitThisFrame
	constexpr static const FunctionPointer<UAnimInstance, bool, const FName, const FName> HasMarkerBeenHitThisFrame = { 0x4705a50, 36 }; 
	// Function /Script/Engine.AnimInstance.GetTimeToClosestMarker
	constexpr static const FunctionPointer<UAnimInstance, bool, const FName, const FName, const float&> GetTimeToClosestMarker = { 0x4705bc0, 37 }; 
	// Function /Script/Engine.AnimInstance.GetSyncGroupPosition
	constexpr static const FunctionPointer<UAnimInstance, FMarkerSyncAnimPosition, const FName> GetSyncGroupPosition = { 0x47054f0, 38 }; 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemainingFraction
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t, const int32_t> GetRelevantAnimTimeRemainingFraction = { 0x4706ce0, 39 }; 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeRemaining
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t, const int32_t> GetRelevantAnimTimeRemaining = { 0x4706e50, 40 }; 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTimeFraction
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t, const int32_t> GetRelevantAnimTimeFraction = { 0x4706720, 41 }; 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimTime
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t, const int32_t> GetRelevantAnimTime = { 0x4706970, 42 }; 
	// Function /Script/Engine.AnimInstance.GetRelevantAnimLength
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t, const int32_t> GetRelevantAnimLength = { 0x4706ae0, 43 }; 
	// Function /Script/Engine.AnimInstance.GetReceiveNotifiesFromLinkedInstances
	constexpr static const FunctionPointer<UAnimInstance, bool> GetReceiveNotifiesFromLinkedInstances = { 0x470c020, 44 }; 
	// Function /Script/Engine.AnimInstance.GetPropagateNotifiesToLinkedInstances
	constexpr static const FunctionPointer<UAnimInstance, bool> GetPropagateNotifiesToLinkedInstances = { 0x470bf10, 45 }; 
	// Function /Script/Engine.AnimInstance.GetOwningComponent
	constexpr static const FunctionPointer<UAnimInstance, USkeletalMeshComponent*> GetOwningComponent = { 0x470bde0, 46 }; 
	// Function /Script/Engine.AnimInstance.GetOwningActor
	constexpr static const FunctionPointer<UAnimInstance, AActor*> GetOwningActor = { 0x470be00, 47 }; 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstancesByGroup
	constexpr static const FunctionPointer<UAnimInstance, void, const FName, const TArray<UAnimInstance*>&> GetLinkedAnimLayerInstancesByGroup = { 0x4708060, 48 }; 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroupAndClass
	constexpr static const FunctionPointer<UAnimInstance, UAnimInstance*, const FName, const UClass*> GetLinkedAnimLayerInstanceByGroupAndClass = { 0x4707ef0, 49 }; 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByGroup
	constexpr static const FunctionPointer<UAnimInstance, UAnimInstance*, const FName> GetLinkedAnimLayerInstanceByGroup = { 0x4708200, 50 }; 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimLayerInstanceByClass
	constexpr static const FunctionPointer<UAnimInstance, UAnimInstance*, const UClass*> GetLinkedAnimLayerInstanceByClass = { 0x4707e00, 51 }; 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimGraphInstancesByTag
	constexpr static const FunctionPointer<UAnimInstance, void, const FName, const TArray<UAnimInstance*>&> GetLinkedAnimGraphInstancesByTag = { 0x4708760, 52 }; 
	// Function /Script/Engine.AnimInstance.GetLinkedAnimGraphInstanceByTag
	constexpr static const FunctionPointer<UAnimInstance, UAnimInstance*, const FName> GetLinkedAnimGraphInstanceByTag = { 0x4708900, 53 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsedFraction
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t, const int32_t> GetInstanceTransitionTimeElapsedFraction = { 0x4706fc0, 54 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionTimeElapsed
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t, const int32_t> GetInstanceTransitionTimeElapsed = { 0x4707130, 55 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceTransitionCrossfadeDuration
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t, const int32_t> GetInstanceTransitionCrossfadeDuration = { 0x47072a0, 56 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceStateWeight
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t, const int32_t> GetInstanceStateWeight = { 0x4707500, 57 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceMachineWeight
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t> GetInstanceMachineWeight = { 0x4707670, 58 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceCurrentStateElapsedTime
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t> GetInstanceCurrentStateElapsedTime = { 0x4707410, 59 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEndFraction
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t> GetInstanceAssetPlayerTimeFromEndFraction = { 0x4707760, 60 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFromEnd
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t> GetInstanceAssetPlayerTimeFromEnd = { 0x4707910, 61 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTimeFraction
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t> GetInstanceAssetPlayerTimeFraction = { 0x4707ab0, 62 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerTime
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t> GetInstanceAssetPlayerTime = { 0x4707ba0, 63 }; 
	// Function /Script/Engine.AnimInstance.GetInstanceAssetPlayerLength
	constexpr static const FunctionPointer<UAnimInstance, float, const int32_t> GetInstanceAssetPlayerLength = { 0x4707c90, 64 }; 
	// Function /Script/Engine.AnimInstance.GetCurveValue
	constexpr static const FunctionPointer<UAnimInstance, float, const FName> GetCurveValue = { 0x4706630, 65 }; 
	// Function /Script/Engine.AnimInstance.GetCurrentStateName
	constexpr static const FunctionPointer<UAnimInstance, FName, const int32_t> GetCurrentStateName = { 0x4706120, 66 }; 
	// Function /Script/Engine.AnimInstance.GetCurrentActiveMontage
	constexpr static const FunctionPointer<UAnimInstance, UAnimMontage*> GetCurrentActiveMontage = { 0x47089f0, 67 }; 
	// Function /Script/Engine.AnimInstance.GetAllCurveNames
	constexpr static const FunctionPointer<UAnimInstance, void, const TArray<FName>&> GetAllCurveNames = { 0x4706260, 68 }; 
	// Function /Script/Engine.AnimInstance.GetActiveCurveNames
	constexpr static const FunctionPointer<UAnimInstance, void, const EAnimCurveType, const TArray<FName>&> GetActiveCurveNames = { 0x4706390, 69 }; 
	// Function /Script/Engine.AnimInstance.ClearMorphTargets
	constexpr static const FunctionPointer<UAnimInstance, void> ClearMorphTargets = { 0x4705f40, 70 }; 
	// Function /Script/Engine.AnimInstance.CalculateDirection
	constexpr static const FunctionPointer<UAnimInstance, float, const FVector&, const FRotator&> CalculateDirection = { 0x4705dc0, 71 }; 
	// Function /Script/Engine.AnimInstance.BlueprintUpdateAnimation
	constexpr static const FunctionPointer<UAnimInstance, void, const float> BlueprintUpdateAnimation = { 0x2bbb090, 72 }; 
	// Function /Script/Engine.AnimInstance.BlueprintPostEvaluateAnimation
	constexpr static const FunctionPointer<UAnimInstance, void> BlueprintPostEvaluateAnimation = { 0x2bbb090, 73 }; 
	// Function /Script/Engine.AnimInstance.BlueprintLinkedAnimationLayersInitialized
	constexpr static const FunctionPointer<UAnimInstance, void> BlueprintLinkedAnimationLayersInitialized = { 0x2bbb090, 74 }; 
	// Function /Script/Engine.AnimInstance.BlueprintInitializeAnimation
	constexpr static const FunctionPointer<UAnimInstance, void> BlueprintInitializeAnimation = { 0x2bbb090, 75 }; 
	// Function /Script/Engine.AnimInstance.BlueprintBeginPlay
	constexpr static const FunctionPointer<UAnimInstance, void> BlueprintBeginPlay = { 0x2bbb090, 76 }; 
	// Function /Script/Engine.AnimInstance.BlueprintAsyncUpdateAnimation
	constexpr static const FunctionPointer<UAnimInstance, void, const float> BlueprintAsyncUpdateAnimation = { 0x2bbb090, 77 }; 
};

/// Class /Script/Engine.TimecodeProvider
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UTimecodeProvider : public UObject
{ 
public:
	float                                              FrameDelay;                                                 // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED

	/// Functions
	// Function /Script/Engine.TimecodeProvider.GetTimecode
	constexpr static const FunctionPointer<UTimecodeProvider, FTimecode> GetTimecode = { 0x49a2c20, 0 }; 
	// Function /Script/Engine.TimecodeProvider.GetSynchronizationState
	constexpr static const FunctionPointer<UTimecodeProvider, ETimecodeProviderSynchronizationState> GetSynchronizationState = { 0x49a2ac0, 1 }; 
	// Function /Script/Engine.TimecodeProvider.GetQualifiedFrameTime
	constexpr static const FunctionPointer<UTimecodeProvider, FQualifiedFrameTime> GetQualifiedFrameTime = { 0x49a2d50, 2 }; 
	// Function /Script/Engine.TimecodeProvider.GetFrameRate
	constexpr static const FunctionPointer<UTimecodeProvider, FFrameRate> GetFrameRate = { 0x49a2af0, 3 }; 
	// Function /Script/Engine.TimecodeProvider.GetDelayedTimecode
	constexpr static const FunctionPointer<UTimecodeProvider, FTimecode> GetDelayedTimecode = { 0x49a2b30, 4 }; 
	// Function /Script/Engine.TimecodeProvider.GetDelayedQualifiedFrameTime
	constexpr static const FunctionPointer<UTimecodeProvider, FQualifiedFrameTime> GetDelayedQualifiedFrameTime = { 0x49a2d10, 5 }; 
	// Function /Script/Engine.TimecodeProvider.FetchTimecode
	constexpr static const FunctionPointer<UTimecodeProvider, bool, const FQualifiedFrameTime&> FetchTimecode = { 0x49a2d90, 6 }; 
	// Function /Script/Engine.TimecodeProvider.FetchAndUpdate
	constexpr static const FunctionPointer<UTimecodeProvider, void> FetchAndUpdate = { 0x38170f0, 7 }; 
};

/// Struct /Script/Engine.ActorTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FActorTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.RepMovement
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align n/a MaxSize: 0x0034
struct FRepMovement
{ 
	FVector                                            LinearVelocity;                                             // 0x0000   (0x000C)  
	FVector                                            AngularVelocity;                                            // 0x000C   (0x000C)  
	FVector                                            Location;                                                   // 0x0018   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0024   (0x000C)  
	bool                                               bSimulatedPhysicSleep : 1;                                  // 0x0030:0 (0x0001)  
	bool                                               bRepPhysics : 1;                                            // 0x0030:1 (0x0001)  
	EVectorQuantization                                LocationQuantizationLevel;                                  // 0x0031   (0x0001)  
	EVectorQuantization                                VelocityQuantizationLevel;                                  // 0x0032   (0x0001)  
	ERotatorQuantization                               RotationQuantizationLevel;                                  // 0x0033   (0x0001)  
};

/// Struct /Script/Engine.Vector_NetQuantize100
/// Size: 0x000C (12 bytes) (0x00000C - 0x00000C) align n/a MaxSize: 0x000C
struct FVector_NetQuantize100 : FVector
{ 
};

/// Struct /Script/Engine.RepAttachment
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FRepAttachment
{ 
	class AActor*                                      AttachParent;                                               // 0x0000   (0x0008)  
	FVector_NetQuantize100                             LocationOffset;                                             // 0x0008   (0x000C)  
	FVector_NetQuantize100                             RelativeScale3D;                                            // 0x0014   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x0020   (0x000C)  
	FName                                              AttachSocket;                                               // 0x002C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	class USceneComponent*                             AttachComponent;                                            // 0x0038   (0x0008)  
};

/// Class /Script/Engine.Actor
/// Size: 0x02C8 (712 bytes) (0x000028 - 0x0002C8) align n/a MaxSize: 0x02C8
class AActor : public UObject
{ 
public:
	FActorTickFunction                                 PrimaryActorTick;                                           // 0x0028   (0x0030)  
	bool                                               bNetTemporary : 1;                                          // 0x0058:0 (0x0001)  
	bool                                               bNetStartup : 1;                                            // 0x0058:1 (0x0001)  
	bool                                               bOnlyRelevantToOwner : 1;                                   // 0x0058:2 (0x0001)  
	bool                                               bAlwaysRelevant : 1;                                        // 0x0058:3 (0x0001)  
	bool                                               bReplicateMovement : 1;                                     // 0x0058:4 (0x0001)  
	bool                                               bHidden : 1;                                                // 0x0058:5 (0x0001)  
	bool                                               bTearOff : 1;                                               // 0x0058:6 (0x0001)  
	bool                                               bTransformTeleportPhysicsInMovieScene;                      // 0x0059   (0x0001)  
	bool                                               bExchangedRoles : 1;                                        // 0x005A:0 (0x0001)  
	bool                                               bNetLoadOnClient : 1;                                       // 0x005A:1 (0x0001)  
	bool                                               bNetUseOwnerRelevancy : 1;                                  // 0x005A:2 (0x0001)  
	bool                                               bRelevantForNetworkReplays : 1;                             // 0x005A:3 (0x0001)  
	bool                                               bRelevantForLevelBounds : 1;                                // 0x005A:4 (0x0001)  
	bool                                               bReplayRewindable : 1;                                      // 0x005A:5 (0x0001)  
	bool                                               bAllowTickBeforeBeginPlay : 1;                              // 0x005A:6 (0x0001)  
	bool                                               bAutoDestroyWhenFinished : 1;                               // 0x005A:7 (0x0001)  
	bool                                               bCanBeDamaged : 1;                                          // 0x005B:0 (0x0001)  
	bool                                               bBlockInput : 1;                                            // 0x005B:1 (0x0001)  
	bool                                               bCollideWhenPlacing : 1;                                    // 0x005B:2 (0x0001)  
	bool                                               bFindCameraComponentWhenViewTarget : 1;                     // 0x005B:3 (0x0001)  
	bool                                               bGenerateOverlapEventsDuringLevelStreaming : 1;             // 0x005B:4 (0x0001)  
	bool                                               bIgnoresOriginShifting : 1;                                 // 0x005B:5 (0x0001)  
	bool                                               bEnableAutoLODGeneration : 1;                               // 0x005B:6 (0x0001)  
	bool                                               bIsEditorOnlyActor : 1;                                     // 0x005B:7 (0x0001)  
	bool                                               bActorSeamlessTraveled : 1;                                 // 0x005C:0 (0x0001)  
	bool                                               bEnableBindChangedLevels : 1;                               // 0x005C:1 (0x0001)  
	unsigned char                                      UnknownData18_5[0x13];                                      // 0x005D   (0x0013)  MISSED
	bool                                               bPendingApplyActorStorage;                                  // 0x0070   (0x0001)  
	bool                                               bRegisteActorStorage;                                       // 0x0071   (0x0001)  
	bool                                               bSaveActorStorage;                                          // 0x0072   (0x0001)  
	bool                                               bReplicates : 1;                                            // 0x0073:0 (0x0001)  
	bool                                               bCanBeInCluster : 1;                                        // 0x0073:1 (0x0001)  
	bool                                               bAllowReceiveTickEventOnDedicatedServer : 1;                // 0x0073:2 (0x0001)  
	bool                                               bUseWorldSector : 1;                                        // 0x0073:3 (0x0001)  
	unsigned char                                      UnknownBit19 : 1;                                           // 0x0073:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit20 : 1;                                           // 0x0073:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit21 : 1;                                           // 0x0073:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit22 : 1;                                           // 0x0073:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit23 : 1;                                           // 0x0074:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit24 : 1;                                           // 0x0074:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit25 : 1;                                           // 0x0074:2 (0x0001)  MISSED
	bool                                               bActorEnableCollision : 1;                                  // 0x0074:3 (0x0001)  
	bool                                               bActorIsBeingDestroyed : 1;                                 // 0x0074:4 (0x0001)  
	EActorUpdateOverlapsMethod                         UpdateOverlapsMethodDuringLevelStreaming;                   // 0x0075   (0x0001)  
	EActorUpdateOverlapsMethod                         DefaultUpdateOverlapsMethodDuringLevelStreaming;            // 0x0076   (0x0001)  
	TEnumAsByte<ENetRole>                              RemoteRole;                                                 // 0x0077   (0x0001)  
	FRepMovement                                       ReplicatedMovement;                                         // 0x0078   (0x0034)  
	float                                              InitialLifeSpan;                                            // 0x00AC   (0x0004)  
	float                                              CustomTimeDilation;                                         // 0x00B0   (0x0004)  
	bool                                               bDisableCustomTimeDilation;                                 // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData26_6[0x3];                                       // 0x00B5   (0x0003)  MISSED
	float                                              DrawDistance;                                               // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData27_6[0xC];                                       // 0x00BC   (0x000C)  MISSED
	FRepAttachment                                     AttachmentReplication;                                      // 0x00C8   (0x0040)  
	class AActor*                                      Owner;                                                      // 0x0108   (0x0008)  
	FName                                              NetDriverName;                                              // 0x0110   (0x0008)  
	TEnumAsByte<ENetRole>                              Role;                                                       // 0x0118   (0x0001)  
	bool                                               bSequenceDummyActor;                                        // 0x0119   (0x0001)  
	unsigned char                                      UnknownData28_6[0x2];                                       // 0x011A   (0x0002)  MISSED
	float                                              SequenceSpawnableDelayDespawnTime;                          // 0x011C   (0x0004)  
	TEnumAsByte<ENetDormancy>                          NetDormancy;                                                // 0x0120   (0x0001)  
	unsigned char                                      UnknownData29_6[0x7];                                       // 0x0121   (0x0007)  MISSED
	TArray<class AActor*>                              IgnoreBlockingHitActor;                                     // 0x0128   (0x0010)  
	ESpawnActorCollisionHandlingMethod                 SpawnCollisionHandlingMethod;                               // 0x0138   (0x0001)  
	TEnumAsByte<EAutoReceiveInput>                     AutoReceiveInput;                                           // 0x0139   (0x0001)  
	unsigned char                                      UnknownData30_6[0x2];                                       // 0x013A   (0x0002)  MISSED
	int32_t                                            InputPriority;                                              // 0x013C   (0x0004)  
	class UInputComponent*                             InputComponent;                                             // 0x0140   (0x0008)  
	float                                              NetCullDistanceSquared;                                     // 0x0148   (0x0004)  
	int32_t                                            NetTag;                                                     // 0x014C   (0x0004)  
	float                                              NetUpdateFrequency;                                         // 0x0150   (0x0004)  
	float                                              MinNetUpdateFrequency;                                      // 0x0154   (0x0004)  
	float                                              NetPriority;                                                // 0x0158   (0x0004)  
	unsigned char                                      UnknownData31_6[0x4];                                       // 0x015C   (0x0004)  MISSED
	class APawn*                                       Instigator;                                                 // 0x0160   (0x0008)  
	TArray<class AActor*>                              Children;                                                   // 0x0168   (0x0010)  
	class USceneComponent*                             RootComponent;                                              // 0x0178   (0x0008)  
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                                   // 0x0180   (0x0010)  
	unsigned char                                      UnknownData32_6[0x8];                                       // 0x0190   (0x0008)  MISSED
	TArray<FName>                                      Layers;                                                     // 0x0198   (0x0010)  
	TWeakObjectPtr<class UChildActorComponent*>        ParentComponent;                                            // 0x01A8   (0x0008)  
	unsigned char                                      UnknownData33_6[0x8];                                       // 0x01B0   (0x0008)  MISSED
	TArray<FName>                                      Tags;                                                       // 0x01B8   (0x0010)  
	TArray<FName>                                      VisibilityTags;                                             // 0x01C8   (0x0010)  
	FMulticastSparseDelegate                           OnTakeAnyDamage;                                            // 0x01D8   (0x0001)  
	FMulticastSparseDelegate                           OnTakePointDamage;                                          // 0x01D9   (0x0001)  
	FMulticastSparseDelegate                           OnTakeRadialDamage;                                         // 0x01DA   (0x0001)  
	FMulticastSparseDelegate                           OnActorBeginOverlap;                                        // 0x01DB   (0x0001)  
	FMulticastSparseDelegate                           OnActorEndOverlap;                                          // 0x01DC   (0x0001)  
	FMulticastSparseDelegate                           OnBeginCursorOver;                                          // 0x01DD   (0x0001)  
	FMulticastSparseDelegate                           OnEndCursorOver;                                            // 0x01DE   (0x0001)  
	FMulticastSparseDelegate                           OnClicked;                                                  // 0x01DF   (0x0001)  
	FMulticastSparseDelegate                           OnReleased;                                                 // 0x01E0   (0x0001)  
	FMulticastSparseDelegate                           OnInputTouchBegin;                                          // 0x01E1   (0x0001)  
	FMulticastSparseDelegate                           OnInputTouchEnd;                                            // 0x01E2   (0x0001)  
	FMulticastSparseDelegate                           OnInputTouchEnter;                                          // 0x01E3   (0x0001)  
	FMulticastSparseDelegate                           OnInputTouchLeave;                                          // 0x01E4   (0x0001)  
	FMulticastSparseDelegate                           OnActorHit;                                                 // 0x01E5   (0x0001)  
	FMulticastSparseDelegate                           OnDestroyed;                                                // 0x01E6   (0x0001)  
	FMulticastSparseDelegate                           OnEndPlay;                                                  // 0x01E7   (0x0001)  
	unsigned char                                      UnknownData34_6[0xB0];                                      // 0x01E8   (0x00B0)  MISSED
	TArray<class UActorComponent*>                     InstanceComponents;                                         // 0x0298   (0x0010)  
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                                 // 0x02A8   (0x0010)  
	unsigned char                                      UnknownData35_7[0x10];                                      // 0x02B8   (0x0010)  MISSED

	/// Functions
	// Function /Script/Engine.Actor.WasRecentlyRendered
	constexpr static const FunctionPointer<AActor, bool, const float> WasRecentlyRendered = { 0x46efab0, 0 }; 
	// Function /Script/Engine.Actor.UserConstructionScript
	constexpr static const FunctionPointer<AActor, void> UserConstructionScript = { 0x2bbb090, 1 }; 
	// Function /Script/Engine.Actor.TearOff
	constexpr static const FunctionPointer<AActor, void> TearOff = { 0x38170f0, 2 }; 
	// Function /Script/Engine.Actor.SnapRootComponentTo
	constexpr static const FunctionPointer<AActor, void, const AActor*, const FName> SnapRootComponentTo = { 0x46f1510, 3 }; 
	// Function /Script/Engine.Actor.SetTickGroup
	constexpr static const FunctionPointer<AActor, void, const TEnumAsByte<ETickingGroup>> SetTickGroup = { 0x46efb90, 4 }; 
	// Function /Script/Engine.Actor.SetTickableWhenPaused
	constexpr static const FunctionPointer<AActor, void, const bool> SetTickableWhenPaused = { 0x46f0bd0, 5 }; 
	// Function /Script/Engine.Actor.SetReplicates
	constexpr static const FunctionPointer<AActor, void, const bool> SetReplicates = { 0x46f7ea0, 6 }; 
	// Function /Script/Engine.Actor.SetReplicateMovement
	constexpr static const FunctionPointer<AActor, void, const bool> SetReplicateMovement = { 0x46f7dc0, 7 }; 
	// Function /Script/Engine.Actor.SetOwner
	constexpr static const FunctionPointer<AActor, void, const AActor*> SetOwner = { 0x46f0490, 8 }; 
	// Function /Script/Engine.Actor.SetNetDormancy
	constexpr static const FunctionPointer<AActor, void, const TEnumAsByte<ENetDormancy>> SetNetDormancy = { 0x46f02d0, 9 }; 
	// Function /Script/Engine.Actor.SetLifeSpan
	constexpr static const FunctionPointer<AActor, void, const float> SetLifeSpan = { 0x46f07c0, 10 }; 
	// Function /Script/Engine.Actor.SetAutoDestroyWhenFinished
	constexpr static const FunctionPointer<AActor, void, const bool> SetAutoDestroyWhenFinished = { 0x46f7fa0, 11 }; 
	// Function /Script/Engine.Actor.SetActorTickInterval
	constexpr static const FunctionPointer<AActor, void, const float> SetActorTickInterval = { 0x46f05b0, 12 }; 
	// Function /Script/Engine.Actor.SetActorTickEnabled
	constexpr static const FunctionPointer<AActor, void, const bool> SetActorTickEnabled = { 0x46f06a0, 13 }; 
	// Function /Script/Engine.Actor.SetActorScale3D
	constexpr static const FunctionPointer<AActor, void, const FVector> SetActorScale3D = { 0x46f6590, 14 }; 
	// Function /Script/Engine.Actor.SetActorRelativeScale3D
	constexpr static const FunctionPointer<AActor, void, const FVector> SetActorRelativeScale3D = { 0x46f3360, 15 }; 
	// Function /Script/Engine.Actor.SetActorHiddenInGame
	constexpr static const FunctionPointer<AActor, void, const bool> SetActorHiddenInGame = { 0x46f3220, 16 }; 
	// Function /Script/Engine.Actor.SetActorEnableCollision
	constexpr static const FunctionPointer<AActor, void, const bool, const bool> SetActorEnableCollision = { 0x46f30c0, 17 }; 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteComponent
	constexpr static const FunctionPointer<AActor, void, const UActorComponent*> RemoveTickPrerequisiteComponent = { 0x46f0cd0, 18 }; 
	// Function /Script/Engine.Actor.RemoveTickPrerequisiteActor
	constexpr static const FunctionPointer<AActor, void, const AActor*> RemoveTickPrerequisiteActor = { 0x46f0db0, 19 }; 
	// Function /Script/Engine.Actor.ReceiveTick
	constexpr static const FunctionPointer<AActor, void, const float> ReceiveTick = { 0x2bbb090, 20 }; 
	// Function /Script/Engine.Actor.ReceiveRadialDamage
	constexpr static const FunctionPointer<AActor, void, const float, const UDamageType*, const FVector, const FHitResult&, const AController*, const AActor*> ReceiveRadialDamage = { 0x2bbb090, 21 }; 
	// Function /Script/Engine.Actor.ReceivePointDamage
	constexpr static const FunctionPointer<AActor, void, const float, const UDamageType*, const FVector, const FVector, const UPrimitiveComponent*, const FName, const FVector, const AController*, const AActor*, const FHitResult&> ReceivePointDamage = { 0x2bbb090, 22 }; 
	// Function /Script/Engine.Actor.ReceiveHit
	constexpr static const FunctionPointer<AActor, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const bool, const FVector, const FVector, const FVector, const FHitResult&> ReceiveHit = { 0x2bbb090, 23 }; 
	// Function /Script/Engine.Actor.ReceiveEndPlay
	constexpr static const FunctionPointer<AActor, void, const TEnumAsByte<EEndPlayReason>> ReceiveEndPlay = { 0x2bbb090, 24 }; 
	// Function /Script/Engine.Actor.ReceiveDestroyed
	constexpr static const FunctionPointer<AActor, void> ReceiveDestroyed = { 0x2bbb090, 25 }; 
	// Function /Script/Engine.Actor.ReceiveBeginPlay
	constexpr static const FunctionPointer<AActor, void> ReceiveBeginPlay = { 0x2bbb090, 26 }; 
	// Function /Script/Engine.Actor.ReceiveAnyDamage
	constexpr static const FunctionPointer<AActor, void, const float, const UDamageType*, const AController*, const AActor*> ReceiveAnyDamage = { 0x2bbb090, 27 }; 
	// Function /Script/Engine.Actor.ReceiveActorOnReleased
	constexpr static const FunctionPointer<AActor, void, const FKey> ReceiveActorOnReleased = { 0x2bbb090, 28 }; 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchLeave
	constexpr static const FunctionPointer<AActor, void, const TEnumAsByte<ETouchIndex>> ReceiveActorOnInputTouchLeave = { 0x2bbb090, 29 }; 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnter
	constexpr static const FunctionPointer<AActor, void, const TEnumAsByte<ETouchIndex>> ReceiveActorOnInputTouchEnter = { 0x2bbb090, 30 }; 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchEnd
	constexpr static const FunctionPointer<AActor, void, const TEnumAsByte<ETouchIndex>> ReceiveActorOnInputTouchEnd = { 0x2bbb090, 31 }; 
	// Function /Script/Engine.Actor.ReceiveActorOnInputTouchBegin
	constexpr static const FunctionPointer<AActor, void, const TEnumAsByte<ETouchIndex>> ReceiveActorOnInputTouchBegin = { 0x2bbb090, 32 }; 
	// Function /Script/Engine.Actor.ReceiveActorOnClicked
	constexpr static const FunctionPointer<AActor, void, const FKey> ReceiveActorOnClicked = { 0x2bbb090, 33 }; 
	// Function /Script/Engine.Actor.ReceiveActorEndOverlap
	constexpr static const FunctionPointer<AActor, void, const AActor*> ReceiveActorEndOverlap = { 0x2bbb090, 34 }; 
	// Function /Script/Engine.Actor.ReceiveActorEndCursorOver
	constexpr static const FunctionPointer<AActor, void> ReceiveActorEndCursorOver = { 0x2bbb090, 35 }; 
	// Function /Script/Engine.Actor.ReceiveActorBeginOverlap
	constexpr static const FunctionPointer<AActor, void, const AActor*> ReceiveActorBeginOverlap = { 0x2bbb090, 36 }; 
	// Function /Script/Engine.Actor.ReceiveActorBeginCursorOver
	constexpr static const FunctionPointer<AActor, void> ReceiveActorBeginCursorOver = { 0x2bbb090, 37 }; 
	// Function /Script/Engine.Actor.PrestreamTextures
	constexpr static const FunctionPointer<AActor, void, const float, const bool, const int32_t> PrestreamTextures = { 0x46ef8a0, 38 }; 
	// Function /Script/Engine.Actor.OnRep_ReplicateMovement
	constexpr static const FunctionPointer<AActor, void> OnRep_ReplicateMovement = { 0x3817110, 39 }; 
	// Function /Script/Engine.Actor.OnRep_ReplicatedMovement
	constexpr static const FunctionPointer<AActor, void> OnRep_ReplicatedMovement = { 0x46f0570, 40 }; 
	// Function /Script/Engine.Actor.OnRep_Owner
	constexpr static const FunctionPointer<AActor, void> OnRep_Owner = { 0x46f7f80, 41 }; 
	// Function /Script/Engine.Actor.OnRep_Instigator
	constexpr static const FunctionPointer<AActor, void> OnRep_Instigator = { 0x46f7d40, 42 }; 
	// Function /Script/Engine.Actor.OnRep_AttachmentReplication
	constexpr static const FunctionPointer<AActor, void> OnRep_AttachmentReplication = { 0x46f7d60, 43 }; 
	// Function /Script/Engine.Actor.MakeNoise
	constexpr static const FunctionPointer<AActor, void, const float, const APawn*, const FVector, const float, const FName> MakeNoise = { 0x46eebb0, 44 }; 
	// Function /Script/Engine.Actor.MakeMIDForMaterial
	constexpr static const FunctionPointer<AActor, UMaterialInstanceDynamic*, const UMaterialInterface*> MakeMIDForMaterial = { 0x3f3eb70, 45 }; 
	// Function /Script/Engine.Actor.K2_TeleportTo
	constexpr static const FunctionPointer<AActor, bool, const FVector, const FRotator> K2_TeleportTo = { 0x46efea0, 46 }; 
	// Function /Script/Engine.Actor.K2_SetActorTransform
	constexpr static const FunctionPointer<AActor, bool, const FTransform&, const bool, const FHitResult&, const bool> K2_SetActorTransform = { 0x46f4850, 47 }; 
	// Function /Script/Engine.Actor.K2_SetActorRotation
	constexpr static const FunctionPointer<AActor, bool, const FRotator, const bool> K2_SetActorRotation = { 0x46f6a00, 48 }; 
	// Function /Script/Engine.Actor.K2_SetActorRelativeTransform
	constexpr static const FunctionPointer<AActor, void, const FTransform&, const bool, const FHitResult&, const bool> K2_SetActorRelativeTransform = { 0x46f3440, 49 }; 
	// Function /Script/Engine.Actor.K2_SetActorRelativeRotation
	constexpr static const FunctionPointer<AActor, void, const FRotator, const bool, const FHitResult&, const bool> K2_SetActorRelativeRotation = { 0x46f3740, 50 }; 
	// Function /Script/Engine.Actor.K2_SetActorRelativeLocation
	constexpr static const FunctionPointer<AActor, void, const FVector, const bool, const FHitResult&, const bool> K2_SetActorRelativeLocation = { 0x46f3a20, 51 }; 
	// Function /Script/Engine.Actor.K2_SetActorLocationAndRotation
	constexpr static const FunctionPointer<AActor, bool, const FVector, const FRotator, const bool, const FHitResult&, const bool> K2_SetActorLocationAndRotation = { 0x46f6680, 52 }; 
	// Function /Script/Engine.Actor.K2_SetActorLocation
	constexpr static const FunctionPointer<AActor, bool, const FVector, const bool, const FHitResult&, const bool> K2_SetActorLocation = { 0x46f7240, 53 }; 
	// Function /Script/Engine.Actor.K2_OnReset
	constexpr static const FunctionPointer<AActor, void> K2_OnReset = { 0x2bbb090, 54 }; 
	// Function /Script/Engine.Actor.K2_OnEndViewTarget
	constexpr static const FunctionPointer<AActor, void, const APlayerController*> K2_OnEndViewTarget = { 0x2bbb090, 55 }; 
	// Function /Script/Engine.Actor.K2_OnBecomeViewTarget
	constexpr static const FunctionPointer<AActor, void, const APlayerController*> K2_OnBecomeViewTarget = { 0x2bbb090, 56 }; 
	// Function /Script/Engine.Actor.K2_GetRootComponent
	constexpr static const FunctionPointer<AActor, USceneComponent*> K2_GetRootComponent = { 0x46f6c10, 57 }; 
	// Function /Script/Engine.Actor.K2_GetComponentsByClass
	constexpr static const FunctionPointer<AActor, TArray<UActorComponent*>, const UClass*> K2_GetComponentsByClass = { 0x46ef4b0, 58 }; 
	// Function /Script/Engine.Actor.K2_GetActorRotation
	constexpr static const FunctionPointer<AActor, FRotator> K2_GetActorRotation = { 0x46f7180, 59 }; 
	// Function /Script/Engine.Actor.K2_GetActorLocation
	constexpr static const FunctionPointer<AActor, FVector> K2_GetActorLocation = { 0x46f7520, 60 }; 
	// Function /Script/Engine.Actor.K2_DetachFromActor
	constexpr static const FunctionPointer<AActor, void, const EDetachmentRule, const EDetachmentRule, const EDetachmentRule> K2_DetachFromActor = { 0x46f11b0, 61 }; 
	// Function /Script/Engine.Actor.K2_DestroyComponent
	constexpr static const FunctionPointer<AActor, void, const UActorComponent*> K2_DestroyComponent = { 0x46f23f0, 62 }; 
	// Function /Script/Engine.Actor.K2_DestroyActor
	constexpr static const FunctionPointer<AActor, void> K2_DestroyActor = { 0x46f3070, 63 }; 
	// Function /Script/Engine.Actor.K2_AttachToComponent
	constexpr static const FunctionPointer<AActor, void, const USceneComponent*, const FName, const EAttachmentRule, const EAttachmentRule, const EAttachmentRule, const bool> K2_AttachToComponent = { 0x46f1d60, 64 }; 
	// Function /Script/Engine.Actor.K2_AttachToActor
	constexpr static const FunctionPointer<AActor, void, const AActor*, const FName, const EAttachmentRule, const EAttachmentRule, const EAttachmentRule, const bool> K2_AttachToActor = { 0x46f16b0, 65 }; 
	// Function /Script/Engine.Actor.K2_AttachRootComponentToActor
	constexpr static const FunctionPointer<AActor, void, const AActor*, const FName, const TEnumAsByte<EAttachLocation>, const bool> K2_AttachRootComponentToActor = { 0x46f1a80, 66 }; 
	// Function /Script/Engine.Actor.K2_AttachRootComponentTo
	constexpr static const FunctionPointer<AActor, void, const USceneComponent*, const FName, const TEnumAsByte<EAttachLocation>, const bool> K2_AttachRootComponentTo = { 0x46f2110, 67 }; 
	// Function /Script/Engine.Actor.K2_AddActorWorldTransformKeepScale
	constexpr static const FunctionPointer<AActor, void, const FTransform&, const bool, const FHitResult&, const bool> K2_AddActorWorldTransformKeepScale = { 0x46f4b60, 68 }; 
	// Function /Script/Engine.Actor.K2_AddActorWorldTransform
	constexpr static const FunctionPointer<AActor, void, const FTransform&, const bool, const FHitResult&, const bool> K2_AddActorWorldTransform = { 0x46f4e60, 69 }; 
	// Function /Script/Engine.Actor.K2_AddActorWorldRotation
	constexpr static const FunctionPointer<AActor, void, const FRotator, const bool, const FHitResult&, const bool> K2_AddActorWorldRotation = { 0x46f5160, 70 }; 
	// Function /Script/Engine.Actor.K2_AddActorWorldOffset
	constexpr static const FunctionPointer<AActor, void, const FVector, const bool, const FHitResult&, const bool> K2_AddActorWorldOffset = { 0x46f5440, 71 }; 
	// Function /Script/Engine.Actor.K2_AddActorLocalTransform
	constexpr static const FunctionPointer<AActor, void, const FTransform&, const bool, const FHitResult&, const bool> K2_AddActorLocalTransform = { 0x46f3d00, 72 }; 
	// Function /Script/Engine.Actor.K2_AddActorLocalRotation
	constexpr static const FunctionPointer<AActor, void, const FRotator, const bool, const FHitResult&, const bool> K2_AddActorLocalRotation = { 0x46f40b0, 73 }; 
	// Function /Script/Engine.Actor.K2_AddActorLocalOffset
	constexpr static const FunctionPointer<AActor, void, const FVector, const bool, const FHitResult&, const bool> K2_AddActorLocalOffset = { 0x46f4480, 74 }; 
	// Function /Script/Engine.Actor.IsOverlappingActor
	constexpr static const FunctionPointer<AActor, bool, const AActor*> IsOverlappingActor = { 0x46f03a0, 75 }; 
	// Function /Script/Engine.Actor.IsChildActor
	constexpr static const FunctionPointer<AActor, bool> IsChildActor = { 0x46f0280, 76 }; 
	// Function /Script/Engine.Actor.IsActorTickEnabled
	constexpr static const FunctionPointer<AActor, bool> IsActorTickEnabled = { 0x46f0680, 77 }; 
	// Function /Script/Engine.Actor.IsActorBeingDestroyed
	constexpr static const FunctionPointer<AActor, bool> IsActorBeingDestroyed = { 0x46f0b30, 78 }; 
	// Function /Script/Engine.Actor.HasAuthority
	constexpr static const FunctionPointer<AActor, bool> HasAuthority = { 0x46f3040, 79 }; 
	// Function /Script/Engine.Actor.GetVerticalDistanceTo
	constexpr static const FunctionPointer<AActor, float, const AActor*> GetVerticalDistanceTo = { 0x46f5ef0, 80 }; 
	// Function /Script/Engine.Actor.GetVelocity
	constexpr static const FunctionPointer<AActor, FVector> GetVelocity = { 0x46f6bd0, 81 }; 
	// Function /Script/Engine.Actor.GetTransform
	constexpr static const FunctionPointer<AActor, FTransform> GetTransform = { 0x46f75a0, 82 }; 
	// Function /Script/Engine.Actor.GetTickableWhenPaused
	constexpr static const FunctionPointer<AActor, bool> GetTickableWhenPaused = { 0x46f0cb0, 83 }; 
	// Function /Script/Engine.Actor.GetSquaredDistanceTo
	constexpr static const FunctionPointer<AActor, float, const AActor*> GetSquaredDistanceTo = { 0x46f61c0, 84 }; 
	// Function /Script/Engine.Actor.GetRemoteRole
	constexpr static const FunctionPointer<AActor, TEnumAsByte<ENetRole>> GetRemoteRole = { 0x46f7d80, 85 }; 
	// Function /Script/Engine.Actor.GetParentComponent
	constexpr static const FunctionPointer<AActor, UChildActorComponent*> GetParentComponent = { 0x46f00a0, 86 }; 
	// Function /Script/Engine.Actor.GetParentActor
	constexpr static const FunctionPointer<AActor, AActor*> GetParentActor = { 0x46f0050, 87 }; 
	// Function /Script/Engine.Actor.GetOwner
	constexpr static const FunctionPointer<AActor, AActor*> GetOwner = { 0x3849530, 88 }; 
	// Function /Script/Engine.Actor.GetOverlappingComponents
	constexpr static const FunctionPointer<AActor, void, const TArray<UPrimitiveComponent*>&> GetOverlappingComponents = { 0x46f0890, 89 }; 
	// Function /Script/Engine.Actor.GetOverlappingActors
	constexpr static const FunctionPointer<AActor, void, const TArray<AActor*>&, const UClass*> GetOverlappingActors = { 0x46f0980, 90 }; 
	// Function /Script/Engine.Actor.GetLocalRole
	constexpr static const FunctionPointer<AActor, TEnumAsByte<ENetRole>> GetLocalRole = { 0x46f7da0, 91 }; 
	// Function /Script/Engine.Actor.GetLifeSpan
	constexpr static const FunctionPointer<AActor, float> GetLifeSpan = { 0x46f0780, 92 }; 
	// Function /Script/Engine.Actor.GetInstigatorController
	constexpr static const FunctionPointer<AActor, AController*> GetInstigatorController = { 0x46f75f0, 93 }; 
	// Function /Script/Engine.Actor.GetInstigator
	constexpr static const FunctionPointer<AActor, APawn*> GetInstigator = { 0x46f7630, 94 }; 
	// Function /Script/Engine.Actor.GetInputVectorAxisValue
	constexpr static const FunctionPointer<AActor, FVector, const FKey> GetInputVectorAxisValue = { 0x46f7650, 95 }; 
	// Function /Script/Engine.Actor.GetInputAxisValue
	constexpr static const FunctionPointer<AActor, float, const FName> GetInputAxisValue = { 0x46f7a50, 96 }; 
	// Function /Script/Engine.Actor.GetInputAxisKeyValue
	constexpr static const FunctionPointer<AActor, float, const FKey> GetInputAxisKeyValue = { 0x46f7860, 97 }; 
	// Function /Script/Engine.Actor.GetHorizontalDotProductTo
	constexpr static const FunctionPointer<AActor, float, const AActor*> GetHorizontalDotProductTo = { 0x46f5830, 98 }; 
	// Function /Script/Engine.Actor.GetHorizontalDistanceTo
	constexpr static const FunctionPointer<AActor, float, const AActor*> GetHorizontalDistanceTo = { 0x46f6040, 99 }; 
	// Function /Script/Engine.Actor.GetGameTimeSinceCreation
	constexpr static const FunctionPointer<AActor, float> GetGameTimeSinceCreation = { 0x46f0b60, 100 }; 
	// Function /Script/Engine.Actor.GetDotProductTo
	constexpr static const FunctionPointer<AActor, float, const AActor*> GetDotProductTo = { 0x46f5b80, 101 }; 
	// Function /Script/Engine.Actor.GetDistanceTo
	constexpr static const FunctionPointer<AActor, float, const AActor*> GetDistanceTo = { 0x46f6370, 102 }; 
	// Function /Script/Engine.Actor.GetComponentsByTag
	constexpr static const FunctionPointer<AActor, TArray<UActorComponent*>, const UClass*, const FName> GetComponentsByTag = { 0x46ef2e0, 103 }; 
	// Function /Script/Engine.Actor.GetComponentsByInterface
	constexpr static const FunctionPointer<AActor, TArray<UActorComponent*>, const UClass*> GetComponentsByInterface = { 0x46eeeb0, 104 }; 
	// Function /Script/Engine.Actor.GetComponentByClass
	constexpr static const FunctionPointer<AActor, UActorComponent*, const UClass*> GetComponentByClass = { 0x46ef630, 105 }; 
	// Function /Script/Engine.Actor.GetAttachParentSocketName
	constexpr static const FunctionPointer<AActor, FName> GetAttachParentSocketName = { 0x46efe10, 106 }; 
	// Function /Script/Engine.Actor.GetAttachParentActor
	constexpr static const FunctionPointer<AActor, AActor*> GetAttachParentActor = { 0x46efe60, 107 }; 
	// Function /Script/Engine.Actor.GetAttachedActors
	constexpr static const FunctionPointer<AActor, void, const TArray<AActor*>&, const bool> GetAttachedActors = { 0x46efc60, 108 }; 
	// Function /Script/Engine.Actor.GetAllChildActors
	constexpr static const FunctionPointer<AActor, void, const TArray<AActor*>&, const bool> GetAllChildActors = { 0x46f00d0, 109 }; 
	// Function /Script/Engine.Actor.GetActorUpVector
	constexpr static const FunctionPointer<AActor, FVector> GetActorUpVector = { 0x46f6fc0, 110 }; 
	// Function /Script/Engine.Actor.GetActorTimeDilation
	constexpr static const FunctionPointer<AActor, float> GetActorTimeDilation = { 0x46f1050, 111 }; 
	// Function /Script/Engine.Actor.GetActorTickInterval
	constexpr static const FunctionPointer<AActor, float> GetActorTickInterval = { 0x46f0590, 112 }; 
	// Function /Script/Engine.Actor.GetActorScale3D
	constexpr static const FunctionPointer<AActor, FVector> GetActorScale3D = { 0x46f6520, 113 }; 
	// Function /Script/Engine.Actor.GetActorRightVector
	constexpr static const FunctionPointer<AActor, FVector> GetActorRightVector = { 0x46f6ee0, 114 }; 
	// Function /Script/Engine.Actor.GetActorRelativeScale3D
	constexpr static const FunctionPointer<AActor, FVector> GetActorRelativeScale3D = { 0x46f3300, 115 }; 
	// Function /Script/Engine.Actor.GetActorForwardVector
	constexpr static const FunctionPointer<AActor, FVector> GetActorForwardVector = { 0x46f70a0, 116 }; 
	// Function /Script/Engine.Actor.GetActorEyesViewPoint
	constexpr static const FunctionPointer<AActor, void, const FVector&, const FRotator&> GetActorEyesViewPoint = { 0x46ef720, 117 }; 
	// Function /Script/Engine.Actor.GetActorEnableCollision
	constexpr static const FunctionPointer<AActor, bool> GetActorEnableCollision = { 0x46f3090, 118 }; 
	// Function /Script/Engine.Actor.GetActorBounds
	constexpr static const FunctionPointer<AActor, void, const bool, const FVector&, const FVector&, const bool> GetActorBounds = { 0x46f6c30, 119 }; 
	// Function /Script/Engine.Actor.ForceNetUpdate
	constexpr static const FunctionPointer<AActor, void> ForceNetUpdate = { 0x46efa90, 120 }; 
	// Function /Script/Engine.Actor.FlushNetDormancy
	constexpr static const FunctionPointer<AActor, void> FlushNetDormancy = { 0x46f02b0, 121 }; 
	// Function /Script/Engine.Actor.FinishAddComponent
	constexpr static const FunctionPointer<AActor, void, const UActorComponent*, const bool, const FTransform&> FinishAddComponent = { 0x46f24e0, 122 }; 
	// Function /Script/Engine.Actor.EventSBRelationStartEventMove
	constexpr static const FunctionPointer<AActor, void> EventSBRelationStartEventMove = { 0x2bbb090, 123 }; 
	// Function /Script/Engine.Actor.EventChangedWorldLevel
	constexpr static const FunctionPointer<AActor, void> EventChangedWorldLevel = { 0x2bbb090, 124 }; 
	// Function /Script/Engine.Actor.EnableInput
	constexpr static const FunctionPointer<AActor, void, const APlayerController*> EnableInput = { 0x46f7c60, 125 }; 
	// Function /Script/Engine.Actor.DisableInput
	constexpr static const FunctionPointer<AActor, void, const APlayerController*> DisableInput = { 0x46f7b80, 126 }; 
	// Function /Script/Engine.Actor.DetachRootComponentFromParent
	constexpr static const FunctionPointer<AActor, void, const bool> DetachRootComponentFromParent = { 0x46f13d0, 127 }; 
	// Function /Script/Engine.Actor.AddTickPrerequisiteComponent
	constexpr static const FunctionPointer<AActor, void, const UActorComponent*> AddTickPrerequisiteComponent = { 0x46f0e90, 128 }; 
	// Function /Script/Engine.Actor.AddTickPrerequisiteActor
	constexpr static const FunctionPointer<AActor, void, const AActor*> AddTickPrerequisiteActor = { 0x46f0f70, 129 }; 
	// Function /Script/Engine.Actor.AddComponentByClass
	constexpr static const FunctionPointer<AActor, UActorComponent*, const UClass*, const bool, const FTransform&, const bool> AddComponentByClass = { 0x46f2910, 130 }; 
	// Function /Script/Engine.Actor.AddComponent
	constexpr static const FunctionPointer<AActor, UActorComponent*, const FName, const bool, const FTransform&, const UObject*, const bool> AddComponent = { 0x46f2cc0, 131 }; 
	// Function /Script/Engine.Actor.ActorHasTag
	constexpr static const FunctionPointer<AActor, bool, const FName> ActorHasTag = { 0x46f1080, 132 }; 
};

/// Class /Script/Engine.FXSystemComponent
/// Size: 0x0580 (1408 bytes) (0x000538 - 0x000580) align n/a MaxSize: 0x0578
class UFXSystemComponent : public UPrimitiveComponent
{ 
public:
	TWeakObjectPtr<class USceneComponent*>             FollowTargetComponent;                                      // 0x0538   (0x0008)  
	FName                                              FollowTargetSocketName;                                     // 0x0540   (0x0008)  
	bool                                               bFollowSpring;                                              // 0x0548   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0549   (0x0003)  MISSED
	float                                              FollowingStiffness;                                         // 0x054C   (0x0004)  
	float                                              FollowingDamping;                                           // 0x0550   (0x0004)  
	FVector                                            FollowVelocity;                                             // 0x0554   (0x000C)  
	FVector                                            FollowingRelativeLocation;                                  // 0x0560   (0x000C)  
	FRotator                                           FollowingRelativeRotation;                                  // 0x056C   (0x000C)  

	/// Functions
	// Function /Script/Engine.FXSystemComponent.SetVectorParameter
	constexpr static const FunctionPointer<UFXSystemComponent, void, const FName, const FVector> SetVectorParameter = { 0x48f4020, 0 }; 
	// Function /Script/Engine.FXSystemComponent.SetUseAutoManageAttachment
	constexpr static const FunctionPointer<UFXSystemComponent, void, const bool> SetUseAutoManageAttachment = { 0x48f37c0, 1 }; 
	// Function /Script/Engine.FXSystemComponent.SetIntParameter
	constexpr static const FunctionPointer<UFXSystemComponent, void, const FName, const int32_t> SetIntParameter = { 0x48f4310, 2 }; 
	// Function /Script/Engine.FXSystemComponent.SetFollowTarget
	constexpr static const FunctionPointer<UFXSystemComponent, void, const USceneComponent*, const FName, const FVector, const FRotator, const bool, const float, const float> SetFollowTarget = { 0x48f3230, 3 }; 
	// Function /Script/Engine.FXSystemComponent.SetFloatParameter
	constexpr static const FunctionPointer<UFXSystemComponent, void, const FName, const float> SetFloatParameter = { 0x48f41a0, 4 }; 
	// Function /Script/Engine.FXSystemComponent.SetEmitterEnable
	constexpr static const FunctionPointer<UFXSystemComponent, void, const FName, const bool> SetEmitterEnable = { 0x48f3ba0, 5 }; 
	// Function /Script/Engine.FXSystemComponent.SetColorParameter
	constexpr static const FunctionPointer<UFXSystemComponent, void, const FName, const FLinearColor> SetColorParameter = { 0x48f3eb0, 6 }; 
	// Function /Script/Engine.FXSystemComponent.SetBoolParameter
	constexpr static const FunctionPointer<UFXSystemComponent, void, const FName, const bool> SetBoolParameter = { 0x48f4480, 7 }; 
	// Function /Script/Engine.FXSystemComponent.SetAutoAttachmentParameters
	constexpr static const FunctionPointer<UFXSystemComponent, void, const USceneComponent*, const FName, const EAttachmentRule, const EAttachmentRule, const EAttachmentRule> SetAutoAttachmentParameters = { 0x48f38a0, 8 }; 
	// Function /Script/Engine.FXSystemComponent.SetActorParameter
	constexpr static const FunctionPointer<UFXSystemComponent, void, const FName, const AActor*> SetActorParameter = { 0x48f3d40, 9 }; 
	// Function /Script/Engine.FXSystemComponent.ReleaseToPool
	constexpr static const FunctionPointer<UFXSystemComponent, void> ReleaseToPool = { 0x48f37a0, 10 }; 
	// Function /Script/Engine.FXSystemComponent.GetFXSystemAsset
	constexpr static const FunctionPointer<UFXSystemComponent, UFXSystemAsset*> GetFXSystemAsset = { 0x48f3d10, 11 }; 
};

/// Class /Script/Engine.FXSystemAsset
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UFXSystemAsset : public UObject
{ 
public:
	uint32_t                                           MaxPoolSize;                                                // 0x0028   (0x0004)  
	uint32_t                                           PoolPrimeSize;                                              // 0x002C   (0x0004)  
};

/// Class /Script/Engine.AnimNotify
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UAnimNotify : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x1];                                       // 0x0028   (0x0001)  MISSED
	bool                                               bCheckSkeletalMeshNotifyAnim;                               // 0x0029   (0x0001)  
	unsigned char                                      UnknownData03_7[0xE];                                       // 0x002A   (0x000E)  MISSED

	/// Functions
	// Function /Script/Engine.AnimNotify.Received_Notify
	constexpr static const FunctionPointer<UAnimNotify, bool, const USkeletalMeshComponent*, const UAnimSequenceBase*> Received_Notify = { 0x2bbb090, 0 }; 
	// Function /Script/Engine.AnimNotify.GetNotifyName
	constexpr static const FunctionPointer<UAnimNotify, FString> GetNotifyName = { 0x3f30ac0, 1 }; 
};

/// Class /Script/Engine.AnimNotifyState
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UAnimNotifyState : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.AnimNotifyState.Received_NotifyTick
	constexpr static const FunctionPointer<UAnimNotifyState, bool, const USkeletalMeshComponent*, const UAnimSequenceBase*, const float> Received_NotifyTick = { 0x2bbb090, 0 }; 
	// Function /Script/Engine.AnimNotifyState.Received_NotifyEnd
	constexpr static const FunctionPointer<UAnimNotifyState, bool, const USkeletalMeshComponent*, const UAnimSequenceBase*> Received_NotifyEnd = { 0x2bbb090, 1 }; 
	// Function /Script/Engine.AnimNotifyState.Received_NotifyBegin
	constexpr static const FunctionPointer<UAnimNotifyState, bool, const USkeletalMeshComponent*, const UAnimSequenceBase*, const float> Received_NotifyBegin = { 0x2bbb090, 2 }; 
	// Function /Script/Engine.AnimNotifyState.GetNotifyName
	constexpr static const FunctionPointer<UAnimNotifyState, FString> GetNotifyName = { 0x3f30ac0, 3 }; 
};

/// Struct /Script/Engine.BPComponentClassOverride
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FBPComponentClassOverride
{ 
	FName                                              ComponentName;                                              // 0x0000   (0x0008)  
	class UClass*                                      ComponentClass;                                             // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.BlueprintComponentChangedPropertyInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FBlueprintComponentChangedPropertyInfo
{ 
	FName                                              PropertyName;                                               // 0x0000   (0x0008)  
	int32_t                                            ArrayIndex;                                                 // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	class Ustruct*                                     PropertyScope;                                              // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.BlueprintCookedComponentInstancingData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FBlueprintCookedComponentInstancingData
{ 
	TArray<FBlueprintComponentChangedPropertyInfo>     ChangedPropertyList;                                        // 0x0000   (0x0010)  
	unsigned char                                      UnknownData02_6[0x11];                                      // 0x0010   (0x0011)  MISSED
	bool                                               bHasValidCookedData;                                        // 0x0021   (0x0001)  
	unsigned char                                      UnknownData03_7[0x26];                                      // 0x0022   (0x0026)  MISSED
};

/// Class /Script/Engine.BlueprintGeneratedClass
/// Size: 0x0328 (808 bytes) (0x000230 - 0x000328) align n/a MaxSize: 0x0328
class UBlueprintGeneratedClass : public UClass
{ 
public:
	int32_t                                            NumReplicatedProperties;                                    // 0x0230   (0x0004)  
	bool                                               bHasNativizedParent : 1;                                    // 0x0234:0 (0x0001)  
	bool                                               bHasCookedComponentInstancingData : 1;                      // 0x0234:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0235   (0x0003)  MISSED
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                      // 0x0238   (0x0010)  
	TArray<class UActorComponent*>                     ComponentTemplates;                                         // 0x0248   (0x0010)  
	TArray<class UTimelineTemplate*>                   Timelines;                                                  // 0x0258   (0x0010)  
	TArray<FBPComponentClassOverride>                  ComponentClassOverrides;                                    // 0x0268   (0x0010)  
	class USimpleConstructionScript*                   SimpleConstructionScript;                                   // 0x0278   (0x0008)  
	class UInheritableComponentHandler*                InheritableComponentHandler;                                // 0x0280   (0x0008)  
	class UStructProperty*                             UberGraphFramePointerProperty;                              // 0x0288   (0x0008)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0290   (0x0008)  MISSED
	class UFunction*                                   UberGraphFunction;                                          // 0x0298   (0x0008)  
	TMap<FName, FBlueprintCookedComponentInstancingData> CookedComponentInstancingData;                            // 0x02A0   (0x0050)  
	unsigned char                                      UnknownData05_7[0x38];                                      // 0x02F0   (0x0038)  MISSED
};

/// Class /Script/Engine.StreamableRenderAsset
/// Size: 0x0068 (104 bytes) (0x000028 - 0x000068) align n/a MaxSize: 0x0068
class UStreamableRenderAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x18];                                      // 0x0028   (0x0018)  MISSED
	double                                             ForceMipLevelsToBeResidentTimestamp;                        // 0x0040   (0x0008)  
	int32_t                                            NumCinematicMipLevels;                                      // 0x0048   (0x0004)  
	int32_t                                            OverrideMinAllowedMip;                                      // 0x004C   (0x0004)  
	int32_t                                            StreamingIndex;                                             // 0x0050   (0x0004)  
	int32_t                                            CachedCombinedLODBias;                                      // 0x0054   (0x0004)  
	bool                                               NeverStream : 1;                                            // 0x0058:0 (0x0001)  
	bool                                               bGlobalForceMipLevelsToBeResident : 1;                      // 0x0058:1 (0x0001)  
	bool                                               bHasStreamingUpdatePending : 1;                             // 0x0058:2 (0x0001)  
	bool                                               bForceMiplevelsToBeResident : 1;                            // 0x0058:3 (0x0001)  
	bool                                               bIgnoreStreamingMipBias : 1;                                // 0x0058:4 (0x0001)  
	bool                                               bUseCinematicMipLevels : 1;                                 // 0x0058:5 (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x0059   (0x000F)  MISSED
};

/// Struct /Script/Engine.MeshUVChannelInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FMeshUVChannelInfo
{ 
	bool                                               bInitialized;                                               // 0x0000   (0x0001)  
	bool                                               bOverrideDensities;                                         // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              LocalUVDensities[4];                                        // 0x0004   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMaterial
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSkeletalMaterial
{ 
	class UMaterialInterface*                          MaterialInterface;                                          // 0x0000   (0x0008)  
	FName                                              MaterialSlotName;                                           // 0x0008   (0x0008)  
	FMeshUVChannelInfo                                 UVChannelData;                                              // 0x0010   (0x0014)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.BoneMirrorInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FBoneMirrorInfo
{ 
	int32_t                                            SourceIndex;                                                // 0x0000   (0x0004)  
	TEnumAsByte<EAxis>                                 BoneFlipAxis;                                               // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.PerPlatformFloat
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FPerPlatformFloat
{ 
	float                                              Default;                                                    // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.SkeletalMeshBuildSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSkeletalMeshBuildSettings
{ 
	bool                                               bRecomputeNormals : 1;                                      // 0x0000:0 (0x0001)  
	bool                                               bRecomputeTangents : 1;                                     // 0x0000:1 (0x0001)  
	bool                                               bUseMikkTSpace : 1;                                         // 0x0000:2 (0x0001)  
	bool                                               bComputeWeightedNormals : 1;                                // 0x0000:3 (0x0001)  
	bool                                               bRemoveDegenerates : 1;                                     // 0x0000:4 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x0000:5 (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x0000:6 (0x0001)  
	bool                                               bBuildAdjacencyBuffer : 1;                                  // 0x0000:7 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ThresholdPosition;                                          // 0x0004   (0x0004)  
	float                                              ThresholdTangentNormal;                                     // 0x0008   (0x0004)  
	float                                              ThresholdUV;                                                // 0x000C   (0x0004)  
	float                                              MorphThresholdPosition;                                     // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.SkeletalMeshOptimizationSettings
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align n/a MaxSize: 0x003C
struct FSkeletalMeshOptimizationSettings
{ 
	TEnumAsByte<SkeletalMeshTerminationCriterion>      TerminationCriterion;                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              NumOfTrianglesPercentage;                                   // 0x0004   (0x0004)  
	float                                              NumOfVertPercentage;                                        // 0x0008   (0x0004)  
	uint32_t                                           MaxNumOfTriangles;                                          // 0x000C   (0x0004)  
	uint32_t                                           MaxNumOfVerts;                                              // 0x0010   (0x0004)  
	float                                              MaxDeviationPercentage;                                     // 0x0014   (0x0004)  
	TEnumAsByte<SkeletalMeshOptimizationType>          ReductionMethod;                                            // 0x0018   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    SilhouetteImportance;                                       // 0x0019   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    TextureImportance;                                          // 0x001A   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    ShadingImportance;                                          // 0x001B   (0x0001)  
	TEnumAsByte<SkeletalMeshOptimizationImportance>    SkinningImportance;                                         // 0x001C   (0x0001)  
	bool                                               bRemapMorphTargets : 1;                                     // 0x001D:0 (0x0001)  
	bool                                               bRecalcNormals : 1;                                         // 0x001D:1 (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x001E   (0x0002)  MISSED
	float                                              WeldingThreshold;                                           // 0x0020   (0x0004)  
	float                                              NormalsThreshold;                                           // 0x0024   (0x0004)  
	int32_t                                            MaxBonesPerVertex;                                          // 0x0028   (0x0004)  
	bool                                               bEnforceBoneBoundaries : 1;                                 // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	float                                              VolumeImportance;                                           // 0x0030   (0x0004)  
	bool                                               bLockEdges : 1;                                             // 0x0034:0 (0x0001)  
	bool                                               bLockColorBounaries : 1;                                    // 0x0034:1 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0035   (0x0003)  MISSED
	int32_t                                            BaseLOD;                                                    // 0x0038   (0x0004)  
};

/// Struct /Script/Engine.BoneReference
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FBoneReference
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshLODInfo
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FSkeletalMeshLODInfo
{ 
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              LODHysteresis;                                              // 0x0004   (0x0004)  
	TArray<int32_t>                                    LODMaterialMap;                                             // 0x0008   (0x0010)  
	FSkeletalMeshBuildSettings                         BuildSettings;                                              // 0x0018   (0x0014)  
	FSkeletalMeshOptimizationSettings                  ReductionSettings;                                          // 0x002C   (0x003C)  
	TArray<FBoneReference>                             BonesToRemove;                                              // 0x0068   (0x0010)  
	TArray<FBoneReference>                             BonesToPrioritize;                                          // 0x0078   (0x0010)  
	float                                              WeightOfPrioritization;                                     // 0x0088   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	class UAnimSequence*                               BakePose;                                                   // 0x0090   (0x0008)  
	class UAnimSequence*                               BakePoseOverride;                                           // 0x0098   (0x0008)  
	FString                                            SourceImportFilename;                                       // 0x00A0   (0x0010)  
	ESkinCacheUsage                                    SkinCacheUsage;                                             // 0x00B0   (0x0001)  
	bool                                               bHasBeenSimplified : 1;                                     // 0x00B1:0 (0x0001)  
	bool                                               bHasPerLODVertexColors : 1;                                 // 0x00B1:1 (0x0001)  
	bool                                               bAllowCPUAccess : 1;                                        // 0x00B1:2 (0x0001)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x00B1:3 (0x0001)  
	unsigned char                                      UnknownData03_7[0x6];                                       // 0x00B2   (0x0006)  MISSED
};

/// Struct /Script/Engine.PerPlatformInt
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FPerPlatformInt
{ 
	int32_t                                            Default;                                                    // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.PerPlatformBool
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FPerPlatformBool
{ 
	bool                                               Default;                                                    // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.StablePhysicsBoneInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FStablePhysicsBoneInfo
{ 
	int32_t                                            StableParentBoneIndex;                                      // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0004   (0x000C)  MISSED
	FTransform                                         LocalBoneTransform;                                         // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionMaterialFilter
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSkeletalMeshSamplingRegionMaterialFilter
{ 
	FName                                              MaterialName;                                               // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBoneFilter
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSkeletalMeshSamplingRegionBoneFilter
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	bool                                               bIncludeOrExclude : 1;                                      // 0x0008:0 (0x0001)  
	bool                                               bApplyToChildren : 1;                                       // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegion
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSkeletalMeshSamplingRegion
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	int32_t                                            LODIndex;                                                   // 0x0008   (0x0004)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	TArray<FSkeletalMeshSamplingRegionMaterialFilter>  MaterialFilters;                                            // 0x0010   (0x0010)  
	TArray<FSkeletalMeshSamplingRegionBoneFilter>      BoneFilters;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingLODBuiltData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FSkeletalMeshSamplingLODBuiltData
{ 
	unsigned char                                      UnknownData01_2[0x48];                                      // 0x0000   (0x0048)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingRegionBuiltData
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align n/a MaxSize: 0x0078
struct FSkeletalMeshSamplingRegionBuiltData
{ 
	unsigned char                                      UnknownData01_2[0x78];                                      // 0x0000   (0x0078)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshSamplingBuiltData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSkeletalMeshSamplingBuiltData
{ 
	TArray<FSkeletalMeshSamplingLODBuiltData>          WholeMeshBuiltData;                                         // 0x0000   (0x0010)  
	TArray<FSkeletalMeshSamplingRegionBuiltData>       RegionBuiltData;                                            // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.SkeletalMeshSamplingInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FSkeletalMeshSamplingInfo
{ 
	TArray<FSkeletalMeshSamplingRegion>                Regions;                                                    // 0x0000   (0x0010)  
	FSkeletalMeshSamplingBuiltData                     BuiltData;                                                  // 0x0010   (0x0020)  
};

/// Struct /Script/Engine.SkinWeightProfileInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSkinWeightProfileInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FPerPlatformBool                                   DefaultProfile;                                             // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	FPerPlatformInt                                    DefaultProfileFromLODIndex;                                 // 0x000C   (0x0004)  
};

/// Class /Script/Engine.SkeletalMesh
/// Size: 0x03C0 (960 bytes) (0x000068 - 0x0003C0) align n/a MaxSize: 0x03C0
class USkeletalMesh : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData06_8[0x20];                                      // 0x0068   (0x0020)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0088   (0x0008)  
	FBoxSphereBounds                                   ImportedBounds;                                             // 0x0090   (0x001C)  
	FBoxSphereBounds                                   ExtendedBounds;                                             // 0x00AC   (0x001C)  
	FVector                                            PositiveBoundsExtension;                                    // 0x00C8   (0x000C)  
	FVector                                            NegativeBoundsExtension;                                    // 0x00D4   (0x000C)  
	TArray<FSkeletalMaterial>                          Materials;                                                  // 0x00E0   (0x0010)  
	TArray<FBoneMirrorInfo>                            SkelMirrorTable;                                            // 0x00F0   (0x0010)  
	TArray<FSkeletalMeshLODInfo>                       LODInfo;                                                    // 0x0100   (0x0010)  
	unsigned char                                      UnknownData07_6[0x50];                                      // 0x0110   (0x0050)  MISSED
	FPerPlatformInt                                    MinLOD;                                                     // 0x0160   (0x0004)  
	FPerPlatformBool                                   DisableBelowMinLodStripping;                                // 0x0164   (0x0001)  
	bool                                               bOverrideLODStreamingSettings;                              // 0x0165   (0x0001)  
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                             // 0x0166   (0x0001)  
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                         // 0x0167   (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x0168:0 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x0168:1 (0x0001)  
	bool                                               bHasBeenSimplified : 1;                                     // 0x0168:2 (0x0001)  
	bool                                               bHasVertexColors : 1;                                       // 0x0168:3 (0x0001)  
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0168:4 (0x0001)  MISSED
	bool                                               bEnablePerPolyCollision : 1;                                // 0x0168:5 (0x0001)  
	unsigned char                                      UnknownData09_5[0x7];                                       // 0x0169   (0x0007)  MISSED
	class UBodySetup*                                  BodySetup;                                                  // 0x0170   (0x0008)  
	class UPhysicsAsset*                               PhysicsAsset;                                               // 0x0178   (0x0008)  
	class UPhysicsAsset*                               ShadowPhysicsAsset;                                         // 0x0180   (0x0008)  
	TArray<class UNodeMappingContainer*>               NodeMappingData;                                            // 0x0188   (0x0010)  
	TArray<class UMorphTarget*>                        MorphTargets;                                               // 0x0198   (0x0010)  
	class USBCurveRemapData*                           CurveRemapData;                                             // 0x01A8   (0x0008)  
	unsigned char                                      UnknownData10_6[0x178];                                     // 0x01B0   (0x0178)  MISSED
	TArray<FStablePhysicsBoneInfo>                     StablePhysicsTransforms;                                    // 0x0328   (0x0010)  
	class UClass*                                      PostProcessAnimBlueprint;                                   // 0x0338   (0x0008)  
	TArray<class UClothingAssetBase*>                  MeshClothingAssets;                                         // 0x0340   (0x0010)  
	FSkeletalMeshSamplingInfo                          SamplingInfo;                                               // 0x0350   (0x0030)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0380   (0x0010)  
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                    // 0x0390   (0x0010)  
	unsigned char                                      UnknownData11_6[0x10];                                      // 0x03A0   (0x0010)  MISSED
	TArray<FSkinWeightProfileInfo>                     SkinWeightProfiles;                                         // 0x03B0   (0x0010)  

	/// Functions
	// Function /Script/Engine.SkeletalMesh.SetLODSettings
	constexpr static const FunctionPointer<USkeletalMesh, void, const USkeletalMeshLODSettings*> SetLODSettings = { 0x17a7aa0, 0 }; 
	// Function /Script/Engine.SkeletalMesh.SetDefaultAnimatingRig
	constexpr static const FunctionPointer<USkeletalMesh, void, const TWeakObjectPtr<UObject*>> SetDefaultAnimatingRig = { 0x4950fe0, 1 }; 
	// Function /Script/Engine.SkeletalMesh.NumSockets
	constexpr static const FunctionPointer<USkeletalMesh, int32_t> NumSockets = { 0x4950630, 2 }; 
	// Function /Script/Engine.SkeletalMesh.K2_GetAllMorphTargetNames
	constexpr static const FunctionPointer<USkeletalMesh, TArray<FString>> K2_GetAllMorphTargetNames = { 0x4950c90, 3 }; 
	// Function /Script/Engine.SkeletalMesh.IsSectionUsingCloth
	constexpr static const FunctionPointer<USkeletalMesh, bool, const int32_t, const bool> IsSectionUsingCloth = { 0x4950330, 4 }; 
	// Function /Script/Engine.SkeletalMesh.GetSocketByIndex
	constexpr static const FunctionPointer<USkeletalMesh, USkeletalMeshSocket*, const int32_t> GetSocketByIndex = { 0x49504f0, 5 }; 
	// Function /Script/Engine.SkeletalMesh.GetNodeMappingContainer
	constexpr static const FunctionPointer<USkeletalMesh, UNodeMappingContainer*, const UBlueprint*> GetNodeMappingContainer = { 0x4950e70, 6 }; 
	// Function /Script/Engine.SkeletalMesh.GetImportedBounds
	constexpr static const FunctionPointer<USkeletalMesh, FBoxSphereBounds> GetImportedBounds = { 0x4951130, 7 }; 
	// Function /Script/Engine.SkeletalMesh.GetDefaultAnimatingRig
	constexpr static const FunctionPointer<USkeletalMesh, TWeakObjectPtr<UObject*>> GetDefaultAnimatingRig = { 0x4950f60, 8 }; 
	// Function /Script/Engine.SkeletalMesh.GetBounds
	constexpr static const FunctionPointer<USkeletalMesh, FBoxSphereBounds> GetBounds = { 0x4951170, 9 }; 
	// Function /Script/Engine.SkeletalMesh.FindSocketInfo
	constexpr static const FunctionPointer<USkeletalMesh, USkeletalMeshSocket*, const FName, const FTransform&, const int32_t&, const int32_t&> FindSocketInfo = { 0x4950670, 10 }; 
	// Function /Script/Engine.SkeletalMesh.FindSocketAndIndex
	constexpr static const FunctionPointer<USkeletalMesh, USkeletalMeshSocket*, const FName, const int32_t&> FindSocketAndIndex = { 0x4950970, 11 }; 
	// Function /Script/Engine.SkeletalMesh.FindSocket
	constexpr static const FunctionPointer<USkeletalMesh, USkeletalMeshSocket*, const FName> FindSocket = { 0x4950b50, 12 }; 
};

/// Class /Script/Engine.Texture
/// Size: 0x00E0 (224 bytes) (0x000068 - 0x0000E0) align n/a MaxSize: 0x00E0
class UTexture : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData03_8[0x8];                                       // 0x0068   (0x0008)  MISSED
	FGuid                                              LightingGuid;                                               // 0x0070   (0x0010)  
	int32_t                                            LODBias;                                                    // 0x0080   (0x0004)  
	TEnumAsByte<TextureCompressionSettings>            CompressionSettings;                                        // 0x0084   (0x0001)  
	TEnumAsByte<TextureFilter>                         Filter;                                                     // 0x0085   (0x0001)  
	ETextureMipLoadOptions                             MipLoadOptions;                                             // 0x0086   (0x0001)  
	TEnumAsByte<TextureGroup>                          LODGroup;                                                   // 0x0087   (0x0001)  
	FPerPlatformFloat                                  Downscale;                                                  // 0x0088   (0x0004)  
	ETextureDownscaleOptions                           DownscaleOptions;                                           // 0x008C   (0x0001)  
	bool                                               SRGB : 1;                                                   // 0x008D:0 (0x0001)  
	bool                                               bNoTiling : 1;                                              // 0x008D:1 (0x0001)  
	bool                                               VirtualTextureStreaming : 1;                                // 0x008D:2 (0x0001)  
	bool                                               CompressionYCoCg : 1;                                       // 0x008D:3 (0x0001)  
	bool                                               bNotOfflineProcessed : 1;                                   // 0x008D:4 (0x0001)  
	bool                                               bAsyncResourceReleaseHasBeenStarted : 1;                    // 0x008D:5 (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x008E   (0x0002)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0090   (0x0010)  
	unsigned char                                      UnknownData05_7[0x40];                                      // 0x00A0   (0x0040)  MISSED
};

/// Class /Script/Engine.Texture2DDynamic
/// Size: 0x00F8 (248 bytes) (0x0000E0 - 0x0000F8) align n/a MaxSize: 0x00F8
class UTexture2DDynamic : public UTexture
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x00E0   (0x0008)  MISSED
	TEnumAsByte<EPixelFormat>                          Format;                                                     // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x00E9   (0x000F)  MISSED
};

/// Class /Script/Engine.AssetImportData
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAssetImportData : public UObject
{ 
public:
};

/// Struct /Script/Engine.ParticleSysParam
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align n/a MaxSize: 0x0080
struct FParticleSysParam
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TEnumAsByte<EParticleSysParamType>                 ParamType;                                                  // 0x0008   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              Scalar;                                                     // 0x000C   (0x0004)  
	float                                              Scalar_Low;                                                 // 0x0010   (0x0004)  
	FVector                                            Vector;                                                     // 0x0014   (0x000C)  
	FVector                                            Vector_Low;                                                 // 0x0020   (0x000C)  
	FColor                                             Color;                                                      // 0x002C   (0x0004)  
	class AActor*                                      Actor;                                                      // 0x0030   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0038   (0x0008)  
	unsigned char                                      UnknownData03_7[0x40];                                      // 0x0040   (0x0040)  MISSED
};

/// Class /Script/Engine.ParticleSystemComponent
/// Size: 0x07E0 (2016 bytes) (0x000578 - 0x0007E0) align n/a MaxSize: 0x07E0
class UParticleSystemComponent : public UFXSystemComponent
{ 
public:
	class UParticleSystem*                             Template;                                                   // 0x0578   (0x0008)  
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                           // 0x0580   (0x0010)  
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                         // 0x0590   (0x0010)  
	unsigned char                                      UnknownData15_6[0x1];                                       // 0x05A0   (0x0001)  MISSED
	bool                                               bResetOnDetach : 1;                                         // 0x05A1:0 (0x0001)  
	bool                                               bUpdateOnDedicatedServer : 1;                               // 0x05A1:1 (0x0001)  
	unsigned char                                      UnknownBit16 : 1;                                           // 0x05A1:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit17 : 1;                                           // 0x05A1:3 (0x0001)  MISSED
	bool                                               bAllowRecycling : 1;                                        // 0x05A1:4 (0x0001)  
	bool                                               bAutoManageAttachment : 1;                                  // 0x05A1:5 (0x0001)  
	bool                                               bAutoAttachWeldSimulatedBodies : 1;                         // 0x05A1:6 (0x0001)  
	unsigned char                                      UnknownBit18 : 1;                                           // 0x05A1:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit19 : 1;                                           // 0x05A2:0 (0x0001)  MISSED
	bool                                               bWarmingUp : 1;                                             // 0x05A2:1 (0x0001)  
	bool                                               bOverrideLODMethod : 1;                                     // 0x05A2:2 (0x0001)  
	bool                                               bSkipUpdateDynamicDataDuringTick : 1;                       // 0x05A2:3 (0x0001)  
	unsigned char                                      UnknownData20_5[0xA];                                       // 0x05A3   (0x000A)  MISSED
	TEnumAsByte<ParticleSystemLODMethod>               LODMethod;                                                  // 0x05AD   (0x0001)  
	EParticleSignificanceLevel                         RequiredSignificance;                                       // 0x05AE   (0x0001)  
	unsigned char                                      UnknownData21_6[0x1];                                       // 0x05AF   (0x0001)  MISSED
	TArray<FParticleSysParam>                          InstanceParameters;                                         // 0x05B0   (0x0010)  
	FMulticastInlineDelegate                           OnParticleSpawn;                                            // 0x05C0   (0x0010)  
	FMulticastInlineDelegate                           OnParticleBurst;                                            // 0x05D0   (0x0010)  
	FMulticastInlineDelegate                           OnParticleDeath;                                            // 0x05E0   (0x0010)  
	FMulticastInlineDelegate                           OnParticleCollide;                                          // 0x05F0   (0x0010)  
	bool                                               bOldPositionValid;                                          // 0x0600   (0x0001)  
	unsigned char                                      UnknownData22_6[0x3];                                       // 0x0601   (0x0003)  MISSED
	FVector                                            OldPosition;                                                // 0x0604   (0x000C)  
	FVector                                            PartSysVelocity;                                            // 0x0610   (0x000C)  
	float                                              WarmupTime;                                                 // 0x061C   (0x0004)  
	float                                              WarmupTickRate;                                             // 0x0620   (0x0004)  
	unsigned char                                      UnknownData23_6[0x4];                                       // 0x0624   (0x0004)  MISSED
	float                                              SecondsBeforeInactive;                                      // 0x0628   (0x0004)  
	unsigned char                                      UnknownData24_6[0x4];                                       // 0x062C   (0x0004)  MISSED
	float                                              MaxTimeBeforeForceUpdateTransform;                          // 0x0630   (0x0004)  
	unsigned char                                      UnknownData25_6[0x1C];                                      // 0x0634   (0x001C)  MISSED
	TArray<class UParticleSystemReplay*>               ReplayClips;                                                // 0x0650   (0x0010)  
	unsigned char                                      UnknownData26_6[0x8];                                       // 0x0660   (0x0008)  MISSED
	float                                              CustomTimeDilation;                                         // 0x0668   (0x0004)  
	unsigned char                                      UnknownData27_6[0x54];                                      // 0x066C   (0x0054)  MISSED
	TWeakObjectPtr<class USceneComponent*>             AutoAttachParent;                                           // 0x06C0   (0x0008)  
	FName                                              AutoAttachSocketName;                                       // 0x06C8   (0x0008)  
	EAttachmentRule                                    AutoAttachLocationRule;                                     // 0x06D0   (0x0001)  
	EAttachmentRule                                    AutoAttachRotationRule;                                     // 0x06D1   (0x0001)  
	EAttachmentRule                                    AutoAttachScaleRule;                                        // 0x06D2   (0x0001)  
	unsigned char                                      UnknownData28_6[0x2D];                                      // 0x06D3   (0x002D)  MISSED
	FMulticastInlineDelegate                           OnSystemFinished;                                           // 0x0700   (0x0010)  
	unsigned char                                      UnknownData29_7[0xD0];                                      // 0x0710   (0x00D0)  MISSED

	/// Functions
	// Function /Script/Engine.ParticleSystemComponent.SetTrailSourceData
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const FName, const FName, const TEnumAsByte<ETrailWidthMode>, const float> SetTrailSourceData = { 0x48f5160, 0 }; 
	// Function /Script/Engine.ParticleSystemComponent.SetTemplate
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const UParticleSystem*> SetTemplate = { 0x48f5780, 1 }; 
	// Function /Script/Engine.ParticleSystemComponent.SetMaterialParameter
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const FName, const UMaterialInterface*> SetMaterialParameter = { 0x48f5860, 2 }; 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetTangent
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const int32_t, const FVector, const int32_t> SetBeamTargetTangent = { 0x48f68f0, 3 }; 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetStrength
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const int32_t, const float, const int32_t> SetBeamTargetStrength = { 0x48f6710, 4 }; 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamTargetPoint
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const int32_t, const FVector, const int32_t> SetBeamTargetPoint = { 0x48f6af0, 5 }; 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceTangent
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const int32_t, const FVector, const int32_t> SetBeamSourceTangent = { 0x48f6ed0, 6 }; 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourceStrength
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const int32_t, const float, const int32_t> SetBeamSourceStrength = { 0x48f6cf0, 7 }; 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamSourcePoint
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const int32_t, const FVector, const int32_t> SetBeamSourcePoint = { 0x48f70d0, 8 }; 
	// Function /Script/Engine.ParticleSystemComponent.SetBeamEndPoint
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const int32_t, const FVector> SetBeamEndPoint = { 0x48f72d0, 9 }; 
	// Function /Script/Engine.ParticleSystemComponent.SetAutoAttachParams
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const USceneComponent*, const FName, const TEnumAsByte<EAttachLocation>> SetAutoAttachParams = { 0x48f7450, 10 }; 
	// Function /Script/Engine.ParticleSystemComponent.GetNumActiveParticles
	constexpr static const FunctionPointer<UParticleSystemComponent, int32_t> GetNumActiveParticles = { 0x48f5750, 11 }; 
	// Function /Script/Engine.ParticleSystemComponent.GetNamedMaterial
	constexpr static const FunctionPointer<UParticleSystemComponent, UMaterialInterface*, const FName> GetNamedMaterial = { 0x48f4f00, 12 }; 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetTangent
	constexpr static const FunctionPointer<UParticleSystemComponent, bool, const int32_t, const int32_t, const FVector&> GetBeamTargetTangent = { 0x48f5bd0, 13 }; 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetStrength
	constexpr static const FunctionPointer<UParticleSystemComponent, bool, const int32_t, const int32_t, const float&> GetBeamTargetStrength = { 0x48f59d0, 14 }; 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamTargetPoint
	constexpr static const FunctionPointer<UParticleSystemComponent, bool, const int32_t, const int32_t, const FVector&> GetBeamTargetPoint = { 0x48f5dc0, 15 }; 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceTangent
	constexpr static const FunctionPointer<UParticleSystemComponent, bool, const int32_t, const int32_t, const FVector&> GetBeamSourceTangent = { 0x48f61b0, 16 }; 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourceStrength
	constexpr static const FunctionPointer<UParticleSystemComponent, bool, const int32_t, const int32_t, const float&> GetBeamSourceStrength = { 0x48f5fb0, 17 }; 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamSourcePoint
	constexpr static const FunctionPointer<UParticleSystemComponent, bool, const int32_t, const int32_t, const FVector&> GetBeamSourcePoint = { 0x48f63a0, 18 }; 
	// Function /Script/Engine.ParticleSystemComponent.GetBeamEndPoint
	constexpr static const FunctionPointer<UParticleSystemComponent, bool, const int32_t, const FVector&> GetBeamEndPoint = { 0x48f6590, 19 }; 
	// Function /Script/Engine.ParticleSystemComponent.GenerateParticleEvent
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const FName, const float, const FVector, const FVector, const FVector> GenerateParticleEvent = { 0x48f4b90, 20 }; 
	// Function /Script/Engine.ParticleSystemComponent.EndTrails
	constexpr static const FunctionPointer<UParticleSystemComponent, void> EndTrails = { 0x48f5430, 21 }; 
	// Function /Script/Engine.ParticleSystemComponent.CreateNamedDynamicMaterialInstance
	constexpr static const FunctionPointer<UParticleSystemComponent, UMaterialInstanceDynamic*, const FName, const UMaterialInterface*> CreateNamedDynamicMaterialInstance = { 0x48f4ff0, 22 }; 
	// Function /Script/Engine.ParticleSystemComponent.BeginTrails
	constexpr static const FunctionPointer<UParticleSystemComponent, void, const FName, const FName, const TEnumAsByte<ETrailWidthMode>, const float> BeginTrails = { 0x48f5450, 23 }; 
};

/// Class /Script/Engine.BlueprintAsyncActionBase
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UBlueprintAsyncActionBase : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.BlueprintAsyncActionBase.Activate
	constexpr static const FunctionPointer<UBlueprintAsyncActionBase, void> Activate = { 0x3817110, 0 }; 
};

/// Class /Script/Engine.OnlineBlueprintCallProxyBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
{ 
public:
};

/// Class /Script/Engine.Player
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class UPlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	class APlayerController*                           PlayerController;                                           // 0x0030   (0x0008)  
	int32_t                                            CurrentNetSpeed;                                            // 0x0038   (0x0004)  
	int32_t                                            ConfiguredInternetSpeed;                                    // 0x003C   (0x0004)  
	int32_t                                            ConfiguredLanSpeed;                                         // 0x0040   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.UniqueNetIdRepl
/// Size: 0x0028 (40 bytes) (0x000001 - 0x000028) align n/a MaxSize: 0x0028
struct FUniqueNetIdRepl : FUniqueNetIdWrapper
{ 
	unsigned char                                      UnknownData01_8[0x17];                                      // 0x0001   (0x0017)  MISSED
	TArray<char>                                       ReplicationBytes;                                           // 0x0018   (0x0010)  
};

/// Class /Script/Engine.NetConnection
/// Size: 0x1AF0 (6896 bytes) (0x000048 - 0x001AF0) align n/a MaxSize: 0x1AF0
class UNetConnection : public UPlayer
{ 
public:
	TArray<class UChildConnection*>                    Children;                                                   // 0x0048   (0x0010)  
	class UNetDriver*                                  Driver;                                                     // 0x0058   (0x0008)  
	class UClass*                                      PackageMapClass;                                            // 0x0060   (0x0008)  
	class UPackageMap*                                 PackageMap;                                                 // 0x0068   (0x0008)  
	TArray<class UChannel*>                            OpenChannels;                                               // 0x0070   (0x0010)  
	TArray<class AActor*>                              SentTemporaries;                                            // 0x0080   (0x0010)  
	class AActor*                                      ViewTarget;                                                 // 0x0090   (0x0008)  
	class AActor*                                      OwningActor;                                                // 0x0098   (0x0008)  
	int32_t                                            MaxPacket;                                                  // 0x00A0   (0x0004)  
	bool                                               InternalAck : 1;                                            // 0x00A4:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0xBB];                                      // 0x00A5   (0x00BB)  MISSED
	FUniqueNetIdRepl                                   PlayerId;                                                   // 0x0160   (0x0028)  
	unsigned char                                      UnknownData05_6[0x48];                                      // 0x0188   (0x0048)  MISSED
	double                                             LastReceiveTime;                                            // 0x01D0   (0x0008)  
	unsigned char                                      UnknownData06_6[0x1340];                                    // 0x01D8   (0x1340)  MISSED
	TArray<class UChannel*>                            ChannelsToTick;                                             // 0x1518   (0x0010)  
	unsigned char                                      UnknownData07_7[0x5C8];                                     // 0x1528   (0x05C8)  MISSED
};

/// Struct /Script/Engine.ChannelDefinition
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FChannelDefinition
{ 
	FName                                              ChannelName;                                                // 0x0000   (0x0008)  
	FName                                              ClassName;                                                  // 0x0008   (0x0008)  
	class UClass*                                      ChannelClass;                                               // 0x0010   (0x0008)  
	int32_t                                            StaticChannelIndex;                                         // 0x0018   (0x0004)  
	bool                                               bTickOnCreate;                                              // 0x001C   (0x0001)  
	bool                                               bServerOpen;                                                // 0x001D   (0x0001)  
	bool                                               bClientOpen;                                                // 0x001E   (0x0001)  
	bool                                               bInitialServer;                                             // 0x001F   (0x0001)  
	bool                                               bInitialClient;                                             // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Class /Script/Engine.NetDriver
/// Size: 0x0748 (1864 bytes) (0x000028 - 0x000748) align n/a MaxSize: 0x0748
class UNetDriver : public UObject
{ 
public:
	unsigned char                                      UnknownData10_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	FString                                            NetConnectionClassName;                                     // 0x0030   (0x0010)  
	FString                                            ReplicationDriverClassName;                                 // 0x0040   (0x0010)  
	int32_t                                            MaxDownloadSize;                                            // 0x0050   (0x0004)  
	bool                                               bClampListenServerTickRate : 1;                             // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	int32_t                                            NetServerMaxTickRate;                                       // 0x0058   (0x0004)  
	int32_t                                            MaxNetTickRate;                                             // 0x005C   (0x0004)  
	int32_t                                            MaxInternetClientRate;                                      // 0x0060   (0x0004)  
	int32_t                                            MaxClientRate;                                              // 0x0064   (0x0004)  
	float                                              ServerTravelPause;                                          // 0x0068   (0x0004)  
	float                                              SpawnPrioritySeconds;                                       // 0x006C   (0x0004)  
	float                                              RelevantTimeout;                                            // 0x0070   (0x0004)  
	float                                              KeepAliveTime;                                              // 0x0074   (0x0004)  
	float                                              InitialConnectTimeout;                                      // 0x0078   (0x0004)  
	float                                              ConnectionTimeout;                                          // 0x007C   (0x0004)  
	float                                              TimeoutMultiplierForUnoptimizedBuilds;                      // 0x0080   (0x0004)  
	bool                                               bNoTimeouts;                                                // 0x0084   (0x0001)  
	bool                                               bNeverApplyNetworkEmulationSettings;                        // 0x0085   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x0086   (0x0002)  MISSED
	class UNetConnection*                              ServerConnection;                                           // 0x0088   (0x0008)  
	TArray<class UNetConnection*>                      ClientConnections;                                          // 0x0090   (0x0010)  
	unsigned char                                      UnknownData13_6[0x60];                                      // 0x00A0   (0x0060)  MISSED
	int32_t                                            RecentlyDisconnectedTrackingTime;                           // 0x0100   (0x0004)  
	unsigned char                                      UnknownData14_6[0x3C];                                      // 0x0104   (0x003C)  MISSED
	class UWorld*                                      World;                                                      // 0x0140   (0x0008)  
	class UPackage*                                    WorldPackage;                                               // 0x0148   (0x0008)  
	unsigned char                                      UnknownData15_6[0x20];                                      // 0x0150   (0x0020)  MISSED
	class UClass*                                      NetConnectionClass;                                         // 0x0170   (0x0008)  
	class UClass*                                      ReplicationDriverClass;                                     // 0x0178   (0x0008)  
	unsigned char                                      UnknownData16_6[0x10];                                      // 0x0180   (0x0010)  MISSED
	FName                                              NetDriverName;                                              // 0x0190   (0x0008)  
	TArray<FChannelDefinition>                         ChannelDefinitions;                                         // 0x0198   (0x0010)  
	TMap<FName, FChannelDefinition>                    ChannelDefinitionMap;                                       // 0x01A8   (0x0050)  
	TArray<class UChannel*>                            ActorChannelPool;                                           // 0x01F8   (0x0010)  
	unsigned char                                      UnknownData17_6[0x8];                                       // 0x0208   (0x0008)  MISSED
	float                                              Time;                                                       // 0x0210   (0x0004)  
	unsigned char                                      UnknownData18_6[0x4D4];                                     // 0x0214   (0x04D4)  MISSED
	class UReplicationDriver*                          ReplicationDriver;                                          // 0x06E8   (0x0008)  
	unsigned char                                      UnknownData19_7[0x58];                                      // 0x06F0   (0x0058)  MISSED
};

/// Class /Script/Engine.OnlineEngineInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UOnlineEngineInterface : public UObject
{ 
public:
};

/// Class /Script/Engine.OnlineSession
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UOnlineSession : public UObject
{ 
public:
};

/// Class /Script/Engine.MaterialExpression
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpression : public UObject
{ 
public:
	class UMaterial*                                   Material;                                                   // 0x0028   (0x0008)  
	class UMaterialFunction*                           Function;                                                   // 0x0030   (0x0008)  
	bool                                               bIsParameterExpression : 1;                                 // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.AnimBoneCompressionCodec
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UAnimBoneCompressionCodec : public UObject
{ 
public:
	FString                                            Description;                                                // 0x0028   (0x0010)  
};

/// Class /Script/Engine.AnimCurveCompressionCodec
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAnimCurveCompressionCodec : public UObject
{ 
public:
};

/// Class /Script/Engine.Pawn
/// Size: 0x0328 (808 bytes) (0x0002C8 - 0x000328) align n/a MaxSize: 0x0328
class APawn : public AActor
{ 
public:
	unsigned char                                      UnknownData06_8[0x8];                                       // 0x02C8   (0x0008)  MISSED
	bool                                               bUseControllerRotationPitch : 1;                            // 0x02D0:0 (0x0001)  
	bool                                               bUseControllerRotationYaw : 1;                              // 0x02D0:1 (0x0001)  
	bool                                               bUseControllerRotationRoll : 1;                             // 0x02D0:2 (0x0001)  
	bool                                               bCanAffectNavigationGeneration : 1;                         // 0x02D0:3 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x02D1   (0x0003)  MISSED
	float                                              BaseEyeHeight;                                              // 0x02D4   (0x0004)  
	TEnumAsByte<EAutoReceiveInput>                     AutoPossessPlayer;                                          // 0x02D8   (0x0001)  
	EAutoPossessAI                                     AutoPossessAI;                                              // 0x02D9   (0x0001)  
	char                                               RemoteViewPitch;                                            // 0x02DA   (0x0001)  
	unsigned char                                      UnknownData08_6[0x5];                                       // 0x02DB   (0x0005)  MISSED
	class UClass*                                      AIControllerClass;                                          // 0x02E0   (0x0008)  
	class APlayerState*                                PlayerState;                                                // 0x02E8   (0x0008)  
	unsigned char                                      UnknownData09_6[0x8];                                       // 0x02F0   (0x0008)  MISSED
	class AController*                                 LastHitBy;                                                  // 0x02F8   (0x0008)  
	class AController*                                 Controller;                                                 // 0x0300   (0x0008)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x0308   (0x0004)  MISSED
	bool                                               bUsePawnStreamLocation;                                     // 0x030C   (0x0001)  
	unsigned char                                      UnknownData11_6[0x3];                                       // 0x030D   (0x0003)  MISSED
	FVector                                            ControlInputVector;                                         // 0x0310   (0x000C)  
	FVector                                            LastControlInputVector;                                     // 0x031C   (0x000C)  

	/// Functions
	// Function /Script/Engine.Pawn.SpawnDefaultController
	constexpr static const FunctionPointer<APawn, void> SpawnDefaultController = { 0x48f9940, 0 }; 
	// Function /Script/Engine.Pawn.SetCanAffectNavigationGeneration
	constexpr static const FunctionPointer<APawn, void, const bool, const bool> SetCanAffectNavigationGeneration = { 0x48f9a40, 1 }; 
	// Function /Script/Engine.Pawn.ReceiveUnpossessed
	constexpr static const FunctionPointer<APawn, void, const AController*> ReceiveUnpossessed = { 0x2bbb090, 2 }; 
	// Function /Script/Engine.Pawn.ReceivePossessed
	constexpr static const FunctionPointer<APawn, void, const AController*> ReceivePossessed = { 0x2bbb090, 3 }; 
	// Function /Script/Engine.Pawn.PawnMakeNoise
	constexpr static const FunctionPointer<APawn, void, const float, const FVector, const bool, const AActor*> PawnMakeNoise = { 0x48f9eb0, 4 }; 
	// Function /Script/Engine.Pawn.OnRep_PlayerState
	constexpr static const FunctionPointer<APawn, void> OnRep_PlayerState = { 0x48f9c10, 5 }; 
	// Function /Script/Engine.Pawn.OnRep_Controller
	constexpr static const FunctionPointer<APawn, void> OnRep_Controller = { 0x48f9c60, 6 }; 
	// Function /Script/Engine.Pawn.LaunchPawn
	constexpr static const FunctionPointer<APawn, void, const FVector, const bool, const bool> LaunchPawn = { 0x48f91c0, 7 }; 
	// Function /Script/Engine.Pawn.K2_GetMovementInputVector
	constexpr static const FunctionPointer<APawn, FVector> K2_GetMovementInputVector = { 0x48f9190, 8 }; 
	// Function /Script/Engine.Pawn.IsPlayerControlled
	constexpr static const FunctionPointer<APawn, bool> IsPlayerControlled = { 0x4790040, 9 }; 
	// Function /Script/Engine.Pawn.IsPawnControlled
	constexpr static const FunctionPointer<APawn, bool> IsPawnControlled = { 0x48f9d10, 10 }; 
	// Function /Script/Engine.Pawn.IsMoveInputIgnored
	constexpr static const FunctionPointer<APawn, bool> IsMoveInputIgnored = { 0x48f9420, 11 }; 
	// Function /Script/Engine.Pawn.IsLocallyControlled
	constexpr static const FunctionPointer<APawn, bool> IsLocallyControlled = { 0x4762860, 12 }; 
	// Function /Script/Engine.Pawn.IsControlled
	constexpr static const FunctionPointer<APawn, bool> IsControlled = { 0x48f9d40, 13 }; 
	// Function /Script/Engine.Pawn.IsBotControlled
	constexpr static const FunctionPointer<APawn, bool> IsBotControlled = { 0x48f99c0, 14 }; 
	// Function /Script/Engine.Pawn.IsAttachedToLevelSequence
	constexpr static const FunctionPointer<APawn, bool> IsAttachedToLevelSequence = { 0x48f9c30, 15 }; 
	// Function /Script/Engine.Pawn.GetPendingMovementInputVector
	constexpr static const FunctionPointer<APawn, FVector> GetPendingMovementInputVector = { 0x48f9190, 16 }; 
	// Function /Script/Engine.Pawn.GetNavAgentLocation
	constexpr static const FunctionPointer<APawn, FVector> GetNavAgentLocation = { 0x48f99f0, 17 }; 
	// Function /Script/Engine.Pawn.GetMovementComponent
	constexpr static const FunctionPointer<APawn, UPawnMovementComponent*> GetMovementComponent = { 0x476c030, 18 }; 
	// Function /Script/Engine.Pawn.GetMovementBaseActor
	constexpr static const FunctionPointer<APawn, AActor*, const APawn*> GetMovementBaseActor = { 0x48f9db0, 19 }; 
	// Function /Script/Engine.Pawn.GetLastMovementInputVector
	constexpr static const FunctionPointer<APawn, FVector> GetLastMovementInputVector = { 0x48f9700, 20 }; 
	// Function /Script/Engine.Pawn.GetControlRotation
	constexpr static const FunctionPointer<APawn, FRotator> GetControlRotation = { 0x48f9c80, 21 }; 
	// Function /Script/Engine.Pawn.GetController
	constexpr static const FunctionPointer<APawn, AController*> GetController = { 0x48f9cf0, 22 }; 
	// Function /Script/Engine.Pawn.GetBaseAimRotation
	constexpr static const FunctionPointer<APawn, FRotator> GetBaseAimRotation = { 0x48f9980, 23 }; 
	// Function /Script/Engine.Pawn.DetachFromControllerPendingDestroy
	constexpr static const FunctionPointer<APawn, void> DetachFromControllerPendingDestroy = { 0x48f9960, 24 }; 
	// Function /Script/Engine.Pawn.ConsumeMovementInputVector
	constexpr static const FunctionPointer<APawn, FVector> ConsumeMovementInputVector = { 0x48f96c0, 25 }; 
	// Function /Script/Engine.Pawn.AddMovementInput
	constexpr static const FunctionPointer<APawn, void, const FVector, const float, const bool> AddMovementInput = { 0x48f9730, 26 }; 
	// Function /Script/Engine.Pawn.AddControllerYawInput
	constexpr static const FunctionPointer<APawn, void, const float> AddControllerYawInput = { 0x48f9520, 27 }; 
	// Function /Script/Engine.Pawn.AddControllerRollInput
	constexpr static const FunctionPointer<APawn, void, const float> AddControllerRollInput = { 0x48f9450, 28 }; 
	// Function /Script/Engine.Pawn.AddControllerPitchInput
	constexpr static const FunctionPointer<APawn, void, const float> AddControllerPitchInput = { 0x48f95f0, 29 }; 
};

/// Struct /Script/Engine.BasedMovementInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FBasedMovementInfo
{ 
	class UPrimitiveComponent*                         MovementBase;                                               // 0x0000   (0x0008)  
	FName                                              BoneName;                                                   // 0x0008   (0x0008)  
	FVector_NetQuantize100                             Location;                                                   // 0x0010   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x001C   (0x000C)  
	bool                                               bServerHasBaseComponent;                                    // 0x0028   (0x0001)  
	bool                                               bRelativeRotation;                                          // 0x0029   (0x0001)  
	bool                                               bServerHasVelocity;                                         // 0x002A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x5];                                       // 0x002B   (0x0005)  MISSED
};

/// Struct /Script/Engine.RootMotionSourceSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FRootMotionSourceSettings
{ 
	char                                               Flags;                                                      // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.Vector_NetQuantize10
/// Size: 0x000C (12 bytes) (0x00000C - 0x00000C) align n/a MaxSize: 0x000C
struct FVector_NetQuantize10 : FVector
{ 
};

/// Struct /Script/Engine.RootMotionSourceGroup
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FRootMotionSourceGroup
{ 
	unsigned char                                      UnknownData02_7[0x28];                                      // 0x0000   (0x0028)  MISSED
	bool                                               bHasAdditiveSources : 1;                                    // 0x0028:0 (0x0001)  
	bool                                               bHasOverrideSources : 1;                                    // 0x0028:1 (0x0001)  
	bool                                               bHasOverrideSourcesWithIgnoreZAccumulate : 1;               // 0x0028:2 (0x0001)  
	bool                                               bIsAdditiveVelocityApplied : 1;                             // 0x0028:3 (0x0001)  
	FRootMotionSourceSettings                          LastAccumulatedSettings;                                    // 0x0029   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	FVector_NetQuantize10                              LastPreAdditiveVelocity;                                    // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.RootMotionMovementParams
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FRootMotionMovementParams
{ 
	bool                                               bHasRootMotion;                                             // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              BlendWeight;                                                // 0x0004   (0x0004)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         RootMotionTransform;                                        // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.RepRootMotionMontage
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align n/a MaxSize: 0x0098
struct FRepRootMotionMontage
{ 
	bool                                               bIsActive;                                                  // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UAnimMontage*                                AnimMontage;                                                // 0x0008   (0x0008)  
	float                                              position;                                                   // 0x0010   (0x0004)  
	FVector_NetQuantize100                             Location;                                                   // 0x0014   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0020   (0x000C)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	class UPrimitiveComponent*                         MovementBase;                                               // 0x0030   (0x0008)  
	FName                                              MovementBaseBoneName;                                       // 0x0038   (0x0008)  
	bool                                               bRelativePosition;                                          // 0x0040   (0x0001)  
	bool                                               bRelativeRotation;                                          // 0x0041   (0x0001)  
	unsigned char                                      UnknownData05_6[0x6];                                       // 0x0042   (0x0006)  MISSED
	FRootMotionSourceGroup                             AuthoritativeRootMotion;                                    // 0x0048   (0x0038)  
	FVector_NetQuantize10                              Acceleration;                                               // 0x0080   (0x000C)  
	FVector_NetQuantize10                              LinearVelocity;                                             // 0x008C   (0x000C)  
};

/// Struct /Script/Engine.SimulatedRootMotionReplicatedMove
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FSimulatedRootMotionReplicatedMove
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FRepRootMotionMontage                              RootMotion;                                                 // 0x0008   (0x0098)  
};

/// Class /Script/Engine.Character
/// Size: 0x0560 (1376 bytes) (0x000328 - 0x000560) align n/a MaxSize: 0x0558
class ACharacter : public APawn
{ 
public:
	class USkeletalMeshComponent*                      Mesh;                                                       // 0x0328   (0x0008)  
	class UCharacterMovementComponent*                 CharacterMovement;                                          // 0x0330   (0x0008)  
	class UCapsuleComponent*                           CapsuleComponent;                                           // 0x0338   (0x0008)  
	FBasedMovementInfo                                 BasedMovement;                                              // 0x0340   (0x0030)  
	FBasedMovementInfo                                 ReplicatedBasedMovement;                                    // 0x0370   (0x0030)  
	float                                              AnimRootMotionTranslationScale;                             // 0x03A0   (0x0004)  
	FVector                                            BaseTranslationOffset;                                      // 0x03A4   (0x000C)  
	FQuat                                              BaseRotationOffset;                                         // 0x03B0   (0x0010)  
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;               // 0x03C0   (0x0004)  
	float                                              ReplayLastTransformUpdateTimeStamp;                         // 0x03C4   (0x0004)  
	char                                               ReplicatedMovementMode;                                     // 0x03C8   (0x0001)  
	bool                                               bInBaseReplication;                                         // 0x03C9   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x03CA   (0x0002)  MISSED
	float                                              CrouchedEyeHeight;                                          // 0x03CC   (0x0004)  
	bool                                               bIsCrouched : 1;                                            // 0x03D0:0 (0x0001)  
	bool                                               bProxyIsJumpForceApplied : 1;                               // 0x03D0:1 (0x0001)  
	bool                                               bPressedJump : 1;                                           // 0x03D0:2 (0x0001)  
	bool                                               bClientUpdating : 1;                                        // 0x03D0:3 (0x0001)  
	bool                                               bClientWasFalling : 1;                                      // 0x03D0:4 (0x0001)  
	bool                                               bClientResimulateRootMotion : 1;                            // 0x03D0:5 (0x0001)  
	bool                                               bClientResimulateRootMotionSources : 1;                     // 0x03D0:6 (0x0001)  
	bool                                               bSimGravityDisabled : 1;                                    // 0x03D0:7 (0x0001)  
	bool                                               bClientCheckEncroachmentOnNetUpdate : 1;                    // 0x03D1:0 (0x0001)  
	bool                                               bServerMoveIgnoreRootMotion : 1;                            // 0x03D1:1 (0x0001)  
	bool                                               bWasJumping : 1;                                            // 0x03D1:2 (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x03D2   (0x0002)  MISSED
	float                                              JumpKeyHoldTime;                                            // 0x03D4   (0x0004)  
	float                                              JumpForceTimeRemaining;                                     // 0x03D8   (0x0004)  
	float                                              ProxyJumpForceStartedTime;                                  // 0x03DC   (0x0004)  
	float                                              JumpMaxHoldTime;                                            // 0x03E0   (0x0004)  
	int32_t                                            JumpMaxCount;                                               // 0x03E4   (0x0004)  
	int32_t                                            JumpCurrentCount;                                           // 0x03E8   (0x0004)  
	int32_t                                            JumpCurrentCountPreJump;                                    // 0x03EC   (0x0004)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x03F0   (0x0008)  MISSED
	FMulticastInlineDelegate                           OnReachedJumpApex;                                          // 0x03F8   (0x0010)  
	unsigned char                                      UnknownData07_6[0x10];                                      // 0x0408   (0x0010)  MISSED
	FMulticastInlineDelegate                           MovementModeChangedDelegate;                                // 0x0418   (0x0010)  
	FMulticastInlineDelegate                           OnCharacterMovementUpdated;                                 // 0x0428   (0x0010)  
	FRootMotionSourceGroup                             SavedRootMotion;                                            // 0x0438   (0x0038)  
	FRootMotionMovementParams                          ClientRootMotionParams;                                     // 0x0470   (0x0040)  
	TArray<FSimulatedRootMotionReplicatedMove>         RootMotionRepMoves;                                         // 0x04B0   (0x0010)  
	FRepRootMotionMontage                              RepRootMotion;                                              // 0x04C0   (0x0098)  

	/// Functions
	// Function /Script/Engine.Character.UnCrouch
	constexpr static const FunctionPointer<ACharacter, void, const bool> UnCrouch = { 0x4751f80, 0 }; 
	// Function /Script/Engine.Character.StopJumping
	constexpr static const FunctionPointer<ACharacter, void> StopJumping = { 0x4752a00, 1 }; 
	// Function /Script/Engine.Character.StopAnimMontage
	constexpr static const FunctionPointer<ACharacter, void, const UAnimMontage*> StopAnimMontage = { 0x4752650, 2 }; 
	// Function /Script/Engine.Character.ServerMovePacked
	constexpr static const FunctionPointer<ACharacter, void, const FCharacterServerMovePackedBits> ServerMovePacked = { 0x4756d80, 3 }; 
	// Function /Script/Engine.Character.ServerMoveOld
	constexpr static const FunctionPointer<ACharacter, void, const float, const FVector_NetQuantize10, const char> ServerMoveOld = { 0x47546e0, 4 }; 
	// Function /Script/Engine.Character.ServerMoveNoBase
	constexpr static const FunctionPointer<ACharacter, void, const float, const FVector_NetQuantize10, const FVector_NetQuantize100, const char, const char, const uint32_t, const char> ServerMoveNoBase = { 0x4756100, 5 }; 
	// Function /Script/Engine.Character.ServerMoveDualNoBase
	constexpr static const FunctionPointer<ACharacter, void, const float, const FVector_NetQuantize10, const char, const uint32_t, const float, const FVector_NetQuantize10, const FVector_NetQuantize100, const char, const char, const uint32_t, const char> ServerMoveDualNoBase = { 0x4755180, 6 }; 
	// Function /Script/Engine.Character.ServerMoveDualHybridRootMotion
	constexpr static const FunctionPointer<ACharacter, void, const float, const FVector_NetQuantize10, const char, const uint32_t, const float, const FVector_NetQuantize10, const FVector_NetQuantize100, const char, const char, const uint32_t, const UPrimitiveComponent*, const FName, const char> ServerMoveDualHybridRootMotion = { 0x4754940, 7 }; 
	// Function /Script/Engine.Character.ServerMoveDual
	constexpr static const FunctionPointer<ACharacter, void, const float, const FVector_NetQuantize10, const char, const uint32_t, const float, const FVector_NetQuantize10, const FVector_NetQuantize100, const char, const char, const uint32_t, const UPrimitiveComponent*, const FName, const char> ServerMoveDual = { 0x47558c0, 8 }; 
	// Function /Script/Engine.Character.ServerMove
	constexpr static const FunctionPointer<ACharacter, void, const float, const FVector_NetQuantize10, const FVector_NetQuantize100, const char, const char, const uint32_t, const UPrimitiveComponent*, const FName, const char> ServerMove = { 0x47565f0, 9 }; 
	// Function /Script/Engine.Character.RootMotionDebugClientPrintOnScreen
	constexpr static const FunctionPointer<ACharacter, void, const FString> RootMotionDebugClientPrintOnScreen = { 0x4751e00, 10 }; 
	// Function /Script/Engine.Character.PlayAnimMontage
	constexpr static const FunctionPointer<ACharacter, float, const UAnimMontage*, const float, const FName> PlayAnimMontage = { 0x4752730, 11 }; 
	// Function /Script/Engine.Character.OnWalkingOffLedge
	constexpr static const FunctionPointer<ACharacter, void, const FVector&, const FVector&, const FVector&, const float> OnWalkingOffLedge = { 0x4752140, 12 }; 
	// Function /Script/Engine.Character.OnRep_RootMotion
	constexpr static const FunctionPointer<ACharacter, void> OnRep_RootMotion = { 0x4751cf0, 13 }; 
	// Function /Script/Engine.Character.OnRep_ReplicatedBasedMovement
	constexpr static const FunctionPointer<ACharacter, void> OnRep_ReplicatedBasedMovement = { 0x4752b10, 14 }; 
	// Function /Script/Engine.Character.OnRep_ReplayLastTransformUpdateTimeStamp
	constexpr static const FunctionPointer<ACharacter, void> OnRep_ReplayLastTransformUpdateTimeStamp = { 0x4752ae0, 15 }; 
	// Function /Script/Engine.Character.OnRep_IsCrouched
	constexpr static const FunctionPointer<ACharacter, void> OnRep_IsCrouched = { 0x4752a40, 16 }; 
	// Function /Script/Engine.Character.OnLaunched
	constexpr static const FunctionPointer<ACharacter, void, const FVector, const bool, const bool> OnLaunched = { 0x2bbb090, 17 }; 
	// Function /Script/Engine.Character.OnLanded
	constexpr static const FunctionPointer<ACharacter, void, const FHitResult&> OnLanded = { 0x2bbb090, 18 }; 
	// Function /Script/Engine.Character.OnJumped
	constexpr static const FunctionPointer<ACharacter, void> OnJumped = { 0x4752400, 19 }; 
	// Function /Script/Engine.Character.LaunchCharacter
	constexpr static const FunctionPointer<ACharacter, void, const FVector, const bool, const bool> LaunchCharacter = { 0x4752420, 20 }; 
	// Function /Script/Engine.Character.K2_UpdateCustomMovement
	constexpr static const FunctionPointer<ACharacter, void, const float> K2_UpdateCustomMovement = { 0x2bbb090, 21 }; 
	// Function /Script/Engine.Character.K2_OnStartCrouch
	constexpr static const FunctionPointer<ACharacter, void, const float, const float> K2_OnStartCrouch = { 0x2bbb090, 22 }; 
	// Function /Script/Engine.Character.K2_OnMovementModeChanged
	constexpr static const FunctionPointer<ACharacter, void, const TEnumAsByte<EMovementMode>, const TEnumAsByte<EMovementMode>, const char, const char> K2_OnMovementModeChanged = { 0x2bbb090, 23 }; 
	// Function /Script/Engine.Character.K2_OnEndCrouch
	constexpr static const FunctionPointer<ACharacter, void, const float, const float> K2_OnEndCrouch = { 0x2bbb090, 24 }; 
	// Function /Script/Engine.Character.Jump
	constexpr static const FunctionPointer<ACharacter, void> Jump = { 0x4752a20, 25 }; 
	// Function /Script/Engine.Character.IsPlayingRootMotion
	constexpr static const FunctionPointer<ACharacter, bool> IsPlayingRootMotion = { 0x4751ca0, 26 }; 
	// Function /Script/Engine.Character.IsPlayingNetworkedRootMotionMontage
	constexpr static const FunctionPointer<ACharacter, bool> IsPlayingNetworkedRootMotionMontage = { 0x4751c00, 27 }; 
	// Function /Script/Engine.Character.IsJumpProvidingForce
	constexpr static const FunctionPointer<ACharacter, bool> IsJumpProvidingForce = { 0x4752930, 28 }; 
	// Function /Script/Engine.Character.HasAnyRootMotion
	constexpr static const FunctionPointer<ACharacter, bool> HasAnyRootMotion = { 0x4751c50, 29 }; 
	// Function /Script/Engine.Character.GetCurrentMontage
	constexpr static const FunctionPointer<ACharacter, UAnimMontage*> GetCurrentMontage = { 0x4752620, 30 }; 
	// Function /Script/Engine.Character.GetBaseTranslationOffset
	constexpr static const FunctionPointer<ACharacter, FVector> GetBaseTranslationOffset = { 0x4752ab0, 31 }; 
	// Function /Script/Engine.Character.GetBaseRotationOffsetRotator
	constexpr static const FunctionPointer<ACharacter, FRotator> GetBaseRotationOffsetRotator = { 0x4752a60, 32 }; 
	// Function /Script/Engine.Character.GetAnimRootMotionTranslationScale
	constexpr static const FunctionPointer<ACharacter, float> GetAnimRootMotionTranslationScale = { 0x4751be0, 33 }; 
	// Function /Script/Engine.Character.Crouch
	constexpr static const FunctionPointer<ACharacter, void, const bool> Crouch = { 0x4752060, 34 }; 
	// Function /Script/Engine.Character.ClientVeryShortAdjustPosition
	constexpr static const FunctionPointer<ACharacter, void, const float, const FVector, const UPrimitiveComponent*, const FName, const bool, const bool, const char> ClientVeryShortAdjustPosition = { 0x4753d20, 35 }; 
	// Function /Script/Engine.Character.ClientMoveResponsePacked
	constexpr static const FunctionPointer<ACharacter, void, const FCharacterMoveResponsePackedBits> ClientMoveResponsePacked = { 0x4756bc0, 36 }; 
	// Function /Script/Engine.Character.ClientCheatWalk
	constexpr static const FunctionPointer<ACharacter, void> ClientCheatWalk = { 0x4751f30, 37 }; 
	// Function /Script/Engine.Character.ClientCheatGhost
	constexpr static const FunctionPointer<ACharacter, void> ClientCheatGhost = { 0x4751ef0, 38 }; 
	// Function /Script/Engine.Character.ClientCheatFly
	constexpr static const FunctionPointer<ACharacter, void> ClientCheatFly = { 0x4751f10, 39 }; 
	// Function /Script/Engine.Character.ClientAdjustRootMotionSourcePosition
	constexpr static const FunctionPointer<ACharacter, void, const float, const FRootMotionSourceGroup, const bool, const float, const FVector, const FVector_NetQuantizeNormal, const float, const UPrimitiveComponent*, const FName, const bool, const bool, const char> ClientAdjustRootMotionSourcePosition = { 0x4752cc0, 40 }; 
	// Function /Script/Engine.Character.ClientAdjustRootMotionPosition
	constexpr static const FunctionPointer<ACharacter, void, const float, const float, const FVector, const FVector_NetQuantizeNormal, const float, const UPrimitiveComponent*, const FName, const bool, const bool, const char> ClientAdjustRootMotionPosition = { 0x4753750, 41 }; 
	// Function /Script/Engine.Character.ClientAdjustPosition
	constexpr static const FunctionPointer<ACharacter, void, const float, const FVector, const FVector, const UPrimitiveComponent*, const FName, const bool, const bool, const char> ClientAdjustPosition = { 0x4754150, 42 }; 
	// Function /Script/Engine.Character.ClientAckGoodMove
	constexpr static const FunctionPointer<ACharacter, void, const float> ClientAckGoodMove = { 0x4754600, 43 }; 
	// Function /Script/Engine.Character.CanJumpInternal
	constexpr static const FunctionPointer<ACharacter, bool> CanJumpInternal = { 0x4752960, 44 }; 
	// Function /Script/Engine.Character.CanJump
	constexpr static const FunctionPointer<ACharacter, bool> CanJump = { 0x4752990, 45 }; 
	// Function /Script/Engine.Character.CanCrouch
	constexpr static const FunctionPointer<ACharacter, bool> CanCrouch = { 0x4751f50, 46 }; 
	// Function /Script/Engine.Character.CacheInitialMeshOffset
	constexpr static const FunctionPointer<ACharacter, void, const FVector, const FRotator> CacheInitialMeshOffset = { 0x4752b30, 47 }; 
};

/// Class /Script/Engine.Controller
/// Size: 0x0340 (832 bytes) (0x0002C8 - 0x000340) align n/a MaxSize: 0x0340
class AController : public AActor
{ 
public:
	unsigned char                                      UnknownData05_8[0x8];                                       // 0x02C8   (0x0008)  MISSED
	class APlayerState*                                PlayerState;                                                // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x02D8   (0x0008)  MISSED
	FMulticastInlineDelegate                           OnInstigatedAnyDamage;                                      // 0x02E0   (0x0010)  
	FName                                              StateName;                                                  // 0x02F0   (0x0008)  
	class APawn*                                       Pawn;                                                       // 0x02F8   (0x0008)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x0300   (0x0008)  MISSED
	class ACharacter*                                  Character;                                                  // 0x0308   (0x0008)  
	class USceneComponent*                             TransformComponent;                                         // 0x0310   (0x0008)  
	unsigned char                                      UnknownData08_6[0x18];                                      // 0x0318   (0x0018)  MISSED
	FRotator                                           ControlRotation;                                            // 0x0330   (0x000C)  
	bool                                               bAttachToPawn : 1;                                          // 0x033C:0 (0x0001)  
	unsigned char                                      UnknownData09_7[0x3];                                       // 0x033D   (0x0003)  MISSED

	/// Functions
	// Function /Script/Engine.Controller.UnPossess
	constexpr static const FunctionPointer<AController, void> UnPossess = { 0x4762760, 0 }; 
	// Function /Script/Engine.Controller.StopMovement
	constexpr static const FunctionPointer<AController, void> StopMovement = { 0x4762740, 1 }; 
	// Function /Script/Engine.Controller.SetInitialLocationAndRotation
	constexpr static const FunctionPointer<AController, void, const FVector&, const FRotator&> SetInitialLocationAndRotation = { 0x4763000, 2 }; 
	// Function /Script/Engine.Controller.SetIgnoreMoveInput
	constexpr static const FunctionPointer<AController, void, const bool> SetIgnoreMoveInput = { 0x4762660, 3 }; 
	// Function /Script/Engine.Controller.SetIgnoreLookInput
	constexpr static const FunctionPointer<AController, void, const bool> SetIgnoreLookInput = { 0x4762530, 4 }; 
	// Function /Script/Engine.Controller.SetControlRotation
	constexpr static const FunctionPointer<AController, void, const FRotator&> SetControlRotation = { 0x4763180, 5 }; 
	// Function /Script/Engine.Controller.ResetIgnoreMoveInput
	constexpr static const FunctionPointer<AController, void> ResetIgnoreMoveInput = { 0x4762640, 6 }; 
	// Function /Script/Engine.Controller.ResetIgnoreLookInput
	constexpr static const FunctionPointer<AController, void> ResetIgnoreLookInput = { 0x4762510, 7 }; 
	// Function /Script/Engine.Controller.ResetIgnoreInputFlags
	constexpr static const FunctionPointer<AController, void> ResetIgnoreInputFlags = { 0x47624c0, 8 }; 
	// Function /Script/Engine.Controller.ReceiveUnPossess
	constexpr static const FunctionPointer<AController, void, const APawn*> ReceiveUnPossess = { 0x2bbb090, 9 }; 
	// Function /Script/Engine.Controller.ReceivePossess
	constexpr static const FunctionPointer<AController, void, const APawn*> ReceivePossess = { 0x2bbb090, 10 }; 
	// Function /Script/Engine.Controller.ReceiveInstigatedAnyDamage
	constexpr static const FunctionPointer<AController, void, const float, const UDamageType*, const AActor*, const AActor*> ReceiveInstigatedAnyDamage = { 0x2bbb090, 11 }; 
	// Function /Script/Engine.Controller.Possess
	constexpr static const FunctionPointer<AController, void, const APawn*> Possess = { 0x4762780, 12 }; 
	// Function /Script/Engine.Controller.OnRep_PlayerState
	constexpr static const FunctionPointer<AController, void> OnRep_PlayerState = { 0x4762dc0, 13 }; 
	// Function /Script/Engine.Controller.OnRep_Pawn
	constexpr static const FunctionPointer<AController, void> OnRep_Pawn = { 0x4762de0, 14 }; 
	// Function /Script/Engine.Controller.LineOfSightTo
	constexpr static const FunctionPointer<AController, bool, const AActor*, const FVector, const bool> LineOfSightTo = { 0x4762e00, 15 }; 
	// Function /Script/Engine.Controller.K2_GetPawn
	constexpr static const FunctionPointer<AController, APawn*> K2_GetPawn = { 0x4762980, 16 }; 
	// Function /Script/Engine.Controller.IsPlayerController
	constexpr static const FunctionPointer<AController, bool> IsPlayerController = { 0x47628e0, 17 }; 
	// Function /Script/Engine.Controller.IsMoveInputIgnored
	constexpr static const FunctionPointer<AController, bool> IsMoveInputIgnored = { 0x4762610, 18 }; 
	// Function /Script/Engine.Controller.IsLookInputIgnored
	constexpr static const FunctionPointer<AController, bool> IsLookInputIgnored = { 0x47624e0, 19 }; 
	// Function /Script/Engine.Controller.IsLocalPlayerController
	constexpr static const FunctionPointer<AController, bool> IsLocalPlayerController = { 0x4762890, 20 }; 
	// Function /Script/Engine.Controller.IsLocalController
	constexpr static const FunctionPointer<AController, bool> IsLocalController = { 0x4762860, 21 }; 
	// Function /Script/Engine.Controller.GetViewTarget
	constexpr static const FunctionPointer<AController, AActor*> GetViewTarget = { 0x4762950, 22 }; 
	// Function /Script/Engine.Controller.GetDesiredRotation
	constexpr static const FunctionPointer<AController, FRotator> GetDesiredRotation = { 0x4762910, 23 }; 
	// Function /Script/Engine.Controller.GetControlRotation
	constexpr static const FunctionPointer<AController, FRotator> GetControlRotation = { 0x4763260, 24 }; 
	// Function /Script/Engine.Controller.ClientSetRotation
	constexpr static const FunctionPointer<AController, void, const FRotator, const bool> ClientSetRotation = { 0x47629a0, 25 }; 
	// Function /Script/Engine.Controller.ClientSetLocation
	constexpr static const FunctionPointer<AController, void, const FVector, const FRotator> ClientSetLocation = { 0x4762b70, 26 }; 
	// Function /Script/Engine.Controller.CastToPlayerController
	constexpr static const FunctionPointer<AController, APlayerController*> CastToPlayerController = { 0x4762d50, 27 }; 
};

/// Struct /Script/Engine.ActiveForceFeedbackEffect
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FActiveForceFeedbackEffect
{ 
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                        // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0008   (0x0010)  MISSED
};

/// Class /Script/Engine.PlayerController
/// Size: 0x0668 (1640 bytes) (0x000340 - 0x000668) align n/a MaxSize: 0x0668
class APlayerController : public AController
{ 
public:
	class UPlayer*                                     Player;                                                     // 0x0340   (0x0008)  
	class APawn*                                       AcknowledgedPawn;                                           // 0x0348   (0x0008)  
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                    // 0x0350   (0x0008)  
	class AHUD*                                        MyHUD;                                                      // 0x0358   (0x0008)  
	class APlayerCameraManager*                        PlayerCameraManager;                                        // 0x0360   (0x0008)  
	class UClass*                                      PlayerCameraManagerClass;                                   // 0x0368   (0x0008)  
	bool                                               bAutoManageActiveCameraTarget;                              // 0x0370   (0x0001)  
	unsigned char                                      UnknownData22_6[0x3];                                       // 0x0371   (0x0003)  MISSED
	FRotator                                           TargetViewRotation;                                         // 0x0374   (0x000C)  
	unsigned char                                      UnknownData23_6[0xC];                                       // 0x0380   (0x000C)  MISSED
	float                                              SmoothTargetViewRotationSpeed;                              // 0x038C   (0x0004)  
	unsigned char                                      UnknownData24_6[0x8];                                       // 0x0390   (0x0008)  MISSED
	TArray<class AActor*>                              HiddenActors;                                               // 0x0398   (0x0010)  
	TArray<TWeakObjectPtr<UPrimitiveComponent*>>       HiddenPrimitiveComponents;                                  // 0x03A8   (0x0010)  
	unsigned char                                      UnknownData25_6[0x4];                                       // 0x03B8   (0x0004)  MISSED
	float                                              LastSpectatorStateSynchTime;                                // 0x03BC   (0x0004)  
	FVector                                            LastSpectatorSyncLocation;                                  // 0x03C0   (0x000C)  
	FRotator                                           LastSpectatorSyncRotation;                                  // 0x03CC   (0x000C)  
	int32_t                                            ClientCap;                                                  // 0x03D8   (0x0004)  
	unsigned char                                      UnknownData26_6[0x4];                                       // 0x03DC   (0x0004)  MISSED
	class UCheatManager*                               CheatManager;                                               // 0x03E0   (0x0008)  
	class UClass*                                      CheatClass;                                                 // 0x03E8   (0x0008)  
	class UPlayerInput*                                PlayerInput;                                                // 0x03F0   (0x0008)  
	TArray<FActiveForceFeedbackEffect>                 ActiveForceFeedbackEffects;                                 // 0x03F8   (0x0010)  
	unsigned char                                      UnknownData27_6[0x70];                                      // 0x0408   (0x0070)  MISSED
	unsigned char                                      UnknownBit28 : 1;                                           // 0x0478:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit29 : 1;                                           // 0x0478:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit30 : 1;                                           // 0x0478:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit31 : 1;                                           // 0x0478:3 (0x0001)  MISSED
	bool                                               bPlayerIsWaiting : 1;                                       // 0x0478:4 (0x0001)  
	unsigned char                                      UnknownData32_5[0x3];                                       // 0x0479   (0x0003)  MISSED
	char                                               NetPlayerIndex;                                             // 0x047C   (0x0001)  
	unsigned char                                      UnknownData33_6[0x3B];                                      // 0x047D   (0x003B)  MISSED
	class UNetConnection*                              PendingSwapConnection;                                      // 0x04B8   (0x0008)  
	class UNetConnection*                              NetConnection;                                              // 0x04C0   (0x0008)  
	unsigned char                                      UnknownData34_6[0xC];                                       // 0x04C8   (0x000C)  MISSED
	float                                              InputYawScale;                                              // 0x04D4   (0x0004)  
	float                                              InputPitchScale;                                            // 0x04D8   (0x0004)  
	float                                              InputRollScale;                                             // 0x04DC   (0x0004)  
	bool                                               bShowMouseCursor : 1;                                       // 0x04E0:0 (0x0001)  
	bool                                               bEnableClickEvents : 1;                                     // 0x04E0:1 (0x0001)  
	bool                                               bEnableTouchEvents : 1;                                     // 0x04E0:2 (0x0001)  
	bool                                               bEnableMouseOverEvents : 1;                                 // 0x04E0:3 (0x0001)  
	bool                                               bEnableTouchOverEvents : 1;                                 // 0x04E0:4 (0x0001)  
	bool                                               bForceFeedbackEnabled : 1;                                  // 0x04E0:5 (0x0001)  
	unsigned char                                      UnknownData35_5[0x3];                                       // 0x04E1   (0x0003)  MISSED
	float                                              ForceFeedbackScale;                                         // 0x04E4   (0x0004)  
	TArray<FKey>                                       ClickEventKeys;                                             // 0x04E8   (0x0010)  
	TEnumAsByte<EMouseCursor>                          DefaultMouseCursor;                                         // 0x04F8   (0x0001)  
	TEnumAsByte<EMouseCursor>                          CurrentMouseCursor;                                         // 0x04F9   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     DefaultClickTraceChannel;                                   // 0x04FA   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     CurrentClickTraceChannel;                                   // 0x04FB   (0x0001)  
	float                                              HitResultTraceDistance;                                     // 0x04FC   (0x0004)  
	uint16_t                                           SeamlessTravelCount;                                        // 0x0500   (0x0002)  
	uint16_t                                           LastCompletedSeamlessTravelCount;                           // 0x0502   (0x0002)  
	unsigned char                                      UnknownData36_6[0x74];                                      // 0x0504   (0x0074)  MISSED
	class UInputComponent*                             InactiveStateInputComponent;                                // 0x0578   (0x0008)  
	unsigned char                                      UnknownBit37 : 1;                                           // 0x0580:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit38 : 1;                                           // 0x0580:1 (0x0001)  MISSED
	bool                                               bShouldPerformFullTickWhenPaused : 1;                       // 0x0580:2 (0x0001)  
	unsigned char                                      UnknownData39_5[0x67];                                      // 0x0581   (0x0067)  MISSED
	class UTouchInterface*                             CurrentTouchInterface;                                      // 0x05E8   (0x0008)  
	unsigned char                                      UnknownData40_6[0x50];                                      // 0x05F0   (0x0050)  MISSED
	class ASpectatorPawn*                              SpectatorPawn;                                              // 0x0640   (0x0008)  
	unsigned char                                      UnknownData41_6[0x4];                                       // 0x0648   (0x0004)  MISSED
	bool                                               bIsLocalPlayerController;                                   // 0x064C   (0x0001)  
	unsigned char                                      UnknownData42_6[0x3];                                       // 0x064D   (0x0003)  MISSED
	FVector                                            SpawnLocation;                                              // 0x0650   (0x000C)  
	unsigned char                                      UnknownData43_7[0xC];                                       // 0x065C   (0x000C)  MISSED

	/// Functions
	// Function /Script/Engine.PlayerController.WasInputKeyJustReleased
	constexpr static const FunctionPointer<APlayerController, bool, const FKey> WasInputKeyJustReleased = { 0x490ffe0, 0 }; 
	// Function /Script/Engine.PlayerController.WasInputKeyJustPressed
	constexpr static const FunctionPointer<APlayerController, bool, const FKey> WasInputKeyJustPressed = { 0x4910180, 1 }; 
	// Function /Script/Engine.PlayerController.ToggleSpeaking
	constexpr static const FunctionPointer<APlayerController, void, const bool> ToggleSpeaking = { 0x4917f70, 2 }; 
	// Function /Script/Engine.PlayerController.TestServerLevelVisibilityChange
	constexpr static const FunctionPointer<APlayerController, void, const FName, const FName> TestServerLevelVisibilityChange = { 0x49133b0, 3 }; 
	// Function /Script/Engine.PlayerController.SwitchLevel
	constexpr static const FunctionPointer<APlayerController, void, const FString> SwitchLevel = { 0x4919ef0, 4 }; 
	// Function /Script/Engine.PlayerController.StopHapticEffect
	constexpr static const FunctionPointer<APlayerController, void, const EControllerHand> StopHapticEffect = { 0x4912c20, 5 }; 
	// Function /Script/Engine.PlayerController.StartFire
	constexpr static const FunctionPointer<APlayerController, void, const char> StartFire = { 0x4918130, 6 }; 
	// Function /Script/Engine.PlayerController.ShowControllerBindingPanel
	constexpr static const FunctionPointer<APlayerController, bool> ShowControllerBindingPanel = { 0x4912830, 7 }; 
	// Function /Script/Engine.PlayerController.SetVirtualJoystickVisibility
	constexpr static const FunctionPointer<APlayerController, void, const bool> SetVirtualJoystickVisibility = { 0x490ed40, 8 }; 
	// Function /Script/Engine.PlayerController.SetViewTargetWithBlend
	constexpr static const FunctionPointer<APlayerController, void, const AActor*, const float, const TEnumAsByte<EViewTargetBlendFunction>, const float, const bool> SetViewTargetWithBlend = { 0x490e950, 9 }; 
	// Function /Script/Engine.PlayerController.SetName
	constexpr static const FunctionPointer<APlayerController, void, const FString> SetName = { 0x4919fe0, 10 }; 
	// Function /Script/Engine.PlayerController.SetMouseLocation
	constexpr static const FunctionPointer<APlayerController, void, const int32_t, const int32_t> SetMouseLocation = { 0x4918200, 11 }; 
	// Function /Script/Engine.PlayerController.SetMouseCursorWidget
	constexpr static const FunctionPointer<APlayerController, void, const TEnumAsByte<EMouseCursor>, const UUserWidget*> SetMouseCursorWidget = { 0x49146e0, 12 }; 
	// Function /Script/Engine.PlayerController.SetHapticsByValue
	constexpr static const FunctionPointer<APlayerController, void, const float, const float, const EControllerHand> SetHapticsByValue = { 0x4912a30, 13 }; 
	// Function /Script/Engine.PlayerController.SetDisableHaptics
	constexpr static const FunctionPointer<APlayerController, void, const bool> SetDisableHaptics = { 0x4912950, 14 }; 
	// Function /Script/Engine.PlayerController.SetControllerLightColor
	constexpr static const FunctionPointer<APlayerController, void, const FColor> SetControllerLightColor = { 0x4912880, 15 }; 
	// Function /Script/Engine.PlayerController.SetCinematicMode
	constexpr static const FunctionPointer<APlayerController, void, const bool, const bool, const bool, const bool, const bool> SetCinematicMode = { 0x490e010, 16 }; 
	// Function /Script/Engine.PlayerController.SetAudioListenerOverride
	constexpr static const FunctionPointer<APlayerController, void, const USceneComponent*, const FVector, const FRotator> SetAudioListenerOverride = { 0x490e660, 17 }; 
	// Function /Script/Engine.PlayerController.SetAudioListenerAttenuationOverride
	constexpr static const FunctionPointer<APlayerController, void, const USceneComponent*, const FVector> SetAudioListenerAttenuationOverride = { 0x490e3d0, 18 }; 
	// Function /Script/Engine.PlayerController.ServerViewSelf
	constexpr static const FunctionPointer<APlayerController, void, const FViewTargetTransitionParams> ServerViewSelf = { 0x4910a40, 19 }; 
	// Function /Script/Engine.PlayerController.ServerViewPrevPlayer
	constexpr static const FunctionPointer<APlayerController, void> ServerViewPrevPlayer = { 0x4910b70, 20 }; 
	// Function /Script/Engine.PlayerController.ServerViewNextPlayer
	constexpr static const FunctionPointer<APlayerController, void> ServerViewNextPlayer = { 0x4910bd0, 21 }; 
	// Function /Script/Engine.PlayerController.ServerVerifyViewTarget
	constexpr static const FunctionPointer<APlayerController, void> ServerVerifyViewTarget = { 0x4910c30, 22 }; 
	// Function /Script/Engine.PlayerController.ServerUpdateMultipleLevelsVisibility
	constexpr static const FunctionPointer<APlayerController, void, const TArray<FUpdateLevelVisibilityLevelInfo>> ServerUpdateMultipleLevelsVisibility = { 0x4910c90, 23 }; 
	// Function /Script/Engine.PlayerController.ServerUpdateLevelVisibility
	constexpr static const FunctionPointer<APlayerController, void, const FUpdateLevelVisibilityLevelInfo> ServerUpdateLevelVisibility = { 0x4910de0, 24 }; 
	// Function /Script/Engine.PlayerController.ServerUpdateCamera
	constexpr static const FunctionPointer<APlayerController, void, const FVector_NetQuantize, const int32_t> ServerUpdateCamera = { 0x4910ef0, 25 }; 
	// Function /Script/Engine.PlayerController.ServerUnmutePlayer
	constexpr static const FunctionPointer<APlayerController, void, const FUniqueNetIdRepl> ServerUnmutePlayer = { 0x4917bf0, 26 }; 
	// Function /Script/Engine.PlayerController.ServerToggleAILogging
	constexpr static const FunctionPointer<APlayerController, void> ServerToggleAILogging = { 0x4910730, 27 }; 
	// Function /Script/Engine.PlayerController.ServerShortTimeout
	constexpr static const FunctionPointer<APlayerController, void> ServerShortTimeout = { 0x49110c0, 28 }; 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorWaiting
	constexpr static const FunctionPointer<APlayerController, void, const bool> ServerSetSpectatorWaiting = { 0x491a7f0, 29 }; 
	// Function /Script/Engine.PlayerController.ServerSetSpectatorLocation
	constexpr static const FunctionPointer<APlayerController, void, const FVector, const FRotator> ServerSetSpectatorLocation = { 0x49111e0, 30 }; 
	// Function /Script/Engine.PlayerController.ServerRestartPlayer
	constexpr static const FunctionPointer<APlayerController, void> ServerRestartPlayer = { 0x49113c0, 31 }; 
	// Function /Script/Engine.PlayerController.ServerPause
	constexpr static const FunctionPointer<APlayerController, void> ServerPause = { 0x4911420, 32 }; 
	// Function /Script/Engine.PlayerController.ServerNotifyLoadedWorld
	constexpr static const FunctionPointer<APlayerController, void, const FName> ServerNotifyLoadedWorld = { 0x4911480, 33 }; 
	// Function /Script/Engine.PlayerController.ServerMutePlayer
	constexpr static const FunctionPointer<APlayerController, void, const FUniqueNetIdRepl> ServerMutePlayer = { 0x4917da0, 34 }; 
	// Function /Script/Engine.PlayerController.ServerExecRPC
	constexpr static const FunctionPointer<APlayerController, void, const FString> ServerExecRPC = { 0x491a3f0, 35 }; 
	// Function /Script/Engine.PlayerController.ServerExec
	constexpr static const FunctionPointer<APlayerController, void, const FString> ServerExec = { 0x1640450, 36 }; 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossessionReliable
	constexpr static const FunctionPointer<APlayerController, void> ServerCheckClientPossessionReliable = { 0x4911120, 37 }; 
	// Function /Script/Engine.PlayerController.ServerCheckClientPossession
	constexpr static const FunctionPointer<APlayerController, void> ServerCheckClientPossession = { 0x4911180, 38 }; 
	// Function /Script/Engine.PlayerController.ServerChangeName
	constexpr static const FunctionPointer<APlayerController, void, const FString> ServerChangeName = { 0x4911660, 39 }; 
	// Function /Script/Engine.PlayerController.ServerCamera
	constexpr static const FunctionPointer<APlayerController, void, const FName> ServerCamera = { 0x4911780, 40 }; 
	// Function /Script/Engine.PlayerController.ServerAcknowledgePossession
	constexpr static const FunctionPointer<APlayerController, void, const APawn*> ServerAcknowledgePossession = { 0x4911890, 41 }; 
	// Function /Script/Engine.PlayerController.SendToConsole
	constexpr static const FunctionPointer<APlayerController, void, const FString> SendToConsole = { 0x49176e0, 42 }; 
	// Function /Script/Engine.PlayerController.RestartLevel
	constexpr static const FunctionPointer<APlayerController, void> RestartLevel = { 0x491a600, 43 }; 
	// Function /Script/Engine.PlayerController.ResetControllerLightColor
	constexpr static const FunctionPointer<APlayerController, void> ResetControllerLightColor = { 0x4912860, 44 }; 
	// Function /Script/Engine.PlayerController.ProjectWorldLocationToScreen
	constexpr static const FunctionPointer<APlayerController, bool, const FVector, const FVector2D&, const bool> ProjectWorldLocationToScreen = { 0x49183a0, 45 }; 
	// Function /Script/Engine.PlayerController.PlayHapticEffect
	constexpr static const FunctionPointer<APlayerController, void, const UHapticFeedbackEffect_Base*, const EControllerHand, const float, const bool> PlayHapticEffect = { 0x4912cf0, 46 }; 
	// Function /Script/Engine.PlayerController.PlayDynamicForceFeedback
	constexpr static const FunctionPointer<APlayerController, void, const float, const float, const bool, const bool, const bool, const bool, const TEnumAsByte<EDynamicForceFeedbackAction>, const FLatentActionInfo> PlayDynamicForceFeedback = { 0x49134f0, 47 }; 
	// Function /Script/Engine.PlayerController.Pause
	constexpr static const FunctionPointer<APlayerController, void> Pause = { 0x491a0d0, 48 }; 
	// Function /Script/Engine.PlayerController.OnServerStartedVisualLogger
	constexpr static const FunctionPointer<APlayerController, void, const bool> OnServerStartedVisualLogger = { 0x490df30, 49 }; 
	// Function /Script/Engine.PlayerController.LocalTravel
	constexpr static const FunctionPointer<APlayerController, void, const FString> LocalTravel = { 0x491a510, 50 }; 
	// Function /Script/Engine.PlayerController.K2_ClientPlayForceFeedback
	constexpr static const FunctionPointer<APlayerController, void, const UForceFeedbackEffect*, const FName, const bool, const bool, const bool> K2_ClientPlayForceFeedback = { 0x4913cc0, 51 }; 
	// Function /Script/Engine.PlayerController.IsInputKeyDown
	constexpr static const FunctionPointer<APlayerController, bool, const FKey> IsInputKeyDown = { 0x4910320, 52 }; 
	// Function /Script/Engine.PlayerController.GetViewportSize
	constexpr static const FunctionPointer<APlayerController, void, const int32_t&, const int32_t&> GetViewportSize = { 0x4914970, 53 }; 
	// Function /Script/Engine.PlayerController.GetSpectatorPawn
	constexpr static const FunctionPointer<APlayerController, ASpectatorPawn*> GetSpectatorPawn = { 0x490df10, 54 }; 
	// Function /Script/Engine.PlayerController.GetMousePosition
	constexpr static const FunctionPointer<APlayerController, bool, const float&, const float&> GetMousePosition = { 0x490f560, 55 }; 
	// Function /Script/Engine.PlayerController.GetInputVectorKeyState
	constexpr static const FunctionPointer<APlayerController, FVector, const FKey> GetInputVectorKeyState = { 0x490fcd0, 56 }; 
	// Function /Script/Engine.PlayerController.GetInputTouchState
	constexpr static const FunctionPointer<APlayerController, void, const TEnumAsByte<ETouchIndex>, const float&, const float&, const bool&> GetInputTouchState = { 0x490f990, 57 }; 
	// Function /Script/Engine.PlayerController.GetInputMouseDelta
	constexpr static const FunctionPointer<APlayerController, void, const float&, const float&> GetInputMouseDelta = { 0x490f200, 58 }; 
	// Function /Script/Engine.PlayerController.GetInputMotionState
	constexpr static const FunctionPointer<APlayerController, void, const FVector&, const FVector&, const FVector&, const FVector&> GetInputMotionState = { 0x490f6f0, 59 }; 
	// Function /Script/Engine.PlayerController.GetInputKeyTimeDown
	constexpr static const FunctionPointer<APlayerController, float, const FKey> GetInputKeyTimeDown = { 0x490f410, 60 }; 
	// Function /Script/Engine.PlayerController.GetInputAnalogStickState
	constexpr static const FunctionPointer<APlayerController, void, const TEnumAsByte<EControllerAnalogStick>, const float&, const float&> GetInputAnalogStickState = { 0x490ef00, 61 }; 
	// Function /Script/Engine.PlayerController.GetInputAnalogKeyState
	constexpr static const FunctionPointer<APlayerController, float, const FKey> GetInputAnalogKeyState = { 0x490fe30, 62 }; 
	// Function /Script/Engine.PlayerController.GetHUD
	constexpr static const FunctionPointer<APlayerController, AHUD*> GetHUD = { 0x4914950, 63 }; 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerForObjects
	constexpr static const FunctionPointer<APlayerController, bool, const TEnumAsByte<ETouchIndex>, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const FHitResult&> GetHitResultUnderFingerForObjects = { 0x4918a30, 64 }; 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFingerByChannel
	constexpr static const FunctionPointer<APlayerController, bool, const TEnumAsByte<ETouchIndex>, const TEnumAsByte<ETraceTypeQuery>, const bool, const FHitResult&> GetHitResultUnderFingerByChannel = { 0x4918e10, 65 }; 
	// Function /Script/Engine.PlayerController.GetHitResultUnderFinger
	constexpr static const FunctionPointer<APlayerController, bool, const TEnumAsByte<ETouchIndex>, const TEnumAsByte<ECollisionChannel>, const bool, const FHitResult&> GetHitResultUnderFinger = { 0x4919250, 66 }; 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorForObjects
	constexpr static const FunctionPointer<APlayerController, bool, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const FHitResult&> GetHitResultUnderCursorForObjects = { 0x4919520, 67 }; 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursorByChannel
	constexpr static const FunctionPointer<APlayerController, bool, const TEnumAsByte<ETraceTypeQuery>, const bool, const FHitResult&> GetHitResultUnderCursorByChannel = { 0x4919850, 68 }; 
	// Function /Script/Engine.PlayerController.GetHitResultUnderCursor
	constexpr static const FunctionPointer<APlayerController, bool, const TEnumAsByte<ECollisionChannel>, const bool, const FHitResult&> GetHitResultUnderCursor = { 0x4919ba0, 69 }; 
	// Function /Script/Engine.PlayerController.GetFocalLocation
	constexpr static const FunctionPointer<APlayerController, FVector> GetFocalLocation = { 0x490ded0, 70 }; 
	// Function /Script/Engine.PlayerController.FOV
	constexpr static const FunctionPointer<APlayerController, void, const float> FOV = { 0x491a620, 71 }; 
	// Function /Script/Engine.PlayerController.EnableCheats
	constexpr static const FunctionPointer<APlayerController, void> EnableCheats = { 0x491a6f0, 72 }; 
	// Function /Script/Engine.PlayerController.DeprojectScreenPositionToWorld
	constexpr static const FunctionPointer<APlayerController, bool, const float, const float, const FVector&, const FVector&> DeprojectScreenPositionToWorld = { 0x49185c0, 73 }; 
	// Function /Script/Engine.PlayerController.DeprojectMousePositionToWorld
	constexpr static const FunctionPointer<APlayerController, bool, const FVector&, const FVector&> DeprojectMousePositionToWorld = { 0x4918870, 74 }; 
	// Function /Script/Engine.PlayerController.ConsoleKey
	constexpr static const FunctionPointer<APlayerController, void, const FKey> ConsoleKey = { 0x49177d0, 75 }; 
	// Function /Script/Engine.PlayerController.ClientWasKicked
	constexpr static const FunctionPointer<APlayerController, void, const FText> ClientWasKicked = { 0x4911cf0, 76 }; 
	// Function /Script/Engine.PlayerController.ClientVoiceHandshakeComplete
	constexpr static const FunctionPointer<APlayerController, void> ClientVoiceHandshakeComplete = { 0x4917f50, 77 }; 
	// Function /Script/Engine.PlayerController.ClientUpdateMultipleLevelsStreamingStatus
	constexpr static const FunctionPointer<APlayerController, void, const TArray<FUpdateLevelStreamingLevelStatus>> ClientUpdateMultipleLevelsStreamingStatus = { 0x4911e20, 78 }; 
	// Function /Script/Engine.PlayerController.ClientUpdateLevelStreamingStatus
	constexpr static const FunctionPointer<APlayerController, void, const FName, const bool, const bool, const bool, const int32_t> ClientUpdateLevelStreamingStatus = { 0x4911f10, 79 }; 
	// Function /Script/Engine.PlayerController.ClientUnmutePlayer
	constexpr static const FunctionPointer<APlayerController, void, const FUniqueNetIdRepl> ClientUnmutePlayer = { 0x4917910, 80 }; 
	// Function /Script/Engine.PlayerController.ClientTravelInternal
	constexpr static const FunctionPointer<APlayerController, void, const FString, const TEnumAsByte<ETravelType>, const bool, const FGuid> ClientTravelInternal = { 0x4912250, 81 }; 
	// Function /Script/Engine.PlayerController.ClientTravel
	constexpr static const FunctionPointer<APlayerController, void, const FString, const TEnumAsByte<ETravelType>, const bool, const FGuid> ClientTravel = { 0x4912510, 82 }; 
	// Function /Script/Engine.PlayerController.ClientTeamMessage
	constexpr static const FunctionPointer<APlayerController, void, const APlayerState*, const FString, const FName, const float> ClientTeamMessage = { 0x4910790, 83 }; 
	// Function /Script/Engine.PlayerController.ClientStopForceFeedback
	constexpr static const FunctionPointer<APlayerController, void, const UForceFeedbackEffect*, const FName> ClientStopForceFeedback = { 0x49139c0, 84 }; 
	// Function /Script/Engine.PlayerController.ClientStopCameraShakesFromSource
	constexpr static const FunctionPointer<APlayerController, void, const UCameraShakeSourceComponent*, const bool> ClientStopCameraShakesFromSource = { 0x4913ff0, 85 }; 
	// Function /Script/Engine.PlayerController.ClientStopCameraShakeByGuid
	constexpr static const FunctionPointer<APlayerController, void, const FGuid, const bool> ClientStopCameraShakeByGuid = { 0x4914180, 86 }; 
	// Function /Script/Engine.PlayerController.ClientStopCameraShake
	constexpr static const FunctionPointer<APlayerController, void, const UClass*, const bool> ClientStopCameraShake = { 0x4914300, 87 }; 
	// Function /Script/Engine.PlayerController.ClientStopCameraAnim
	constexpr static const FunctionPointer<APlayerController, void, const UCameraAnim*> ClientStopCameraAnim = { 0x3dbcae0, 88 }; 
	// Function /Script/Engine.PlayerController.ClientStartOnlineSession
	constexpr static const FunctionPointer<APlayerController, void> ClientStartOnlineSession = { 0x4911cd0, 89 }; 
	// Function /Script/Engine.PlayerController.ClientStartCameraShakeFromSource
	constexpr static const FunctionPointer<APlayerController, void, const UClass*, const UCameraShakeSourceComponent*> ClientStartCameraShakeFromSource = { 0x4915f10, 90 }; 
	// Function /Script/Engine.PlayerController.ClientStartCameraShake
	constexpr static const FunctionPointer<APlayerController, void, const UClass*, const float, const ECameraShakePlaySpace, const FRotator, const FString> ClientStartCameraShake = { 0x4916400, 91 }; 
	// Function /Script/Engine.PlayerController.ClientSpawnCameraLensEffect
	constexpr static const FunctionPointer<APlayerController, void, const UClass*> ClientSpawnCameraLensEffect = { 0x4914470, 92 }; 
	// Function /Script/Engine.PlayerController.ClientSetViewTarget
	constexpr static const FunctionPointer<APlayerController, void, const AActor*, const FViewTargetTransitionParams> ClientSetViewTarget = { 0x4914550, 93 }; 
	// Function /Script/Engine.PlayerController.ClientSetSpectatorWaiting
	constexpr static const FunctionPointer<APlayerController, void, const bool> ClientSetSpectatorWaiting = { 0x491a710, 94 }; 
	// Function /Script/Engine.PlayerController.ClientSetHUD
	constexpr static const FunctionPointer<APlayerController, void, const UClass*> ClientSetHUD = { 0x4914ae0, 95 }; 
	// Function /Script/Engine.PlayerController.ClientSetForceMipLevelsToBeResident
	constexpr static const FunctionPointer<APlayerController, void, const UMaterialInterface*, const float, const int32_t> ClientSetForceMipLevelsToBeResident = { 0x4914bc0, 96 }; 
	// Function /Script/Engine.PlayerController.ClientSetCinematicMode
	constexpr static const FunctionPointer<APlayerController, void, const bool, const bool, const bool, const bool> ClientSetCinematicMode = { 0x4914db0, 97 }; 
	// Function /Script/Engine.PlayerController.ClientSetCameraMode
	constexpr static const FunctionPointer<APlayerController, void, const FName> ClientSetCameraMode = { 0x4915060, 98 }; 
	// Function /Script/Engine.PlayerController.ClientSetCameraFade
	constexpr static const FunctionPointer<APlayerController, void, const bool, const FColor, const FVector2D, const float, const bool, const bool> ClientSetCameraFade = { 0x4915140, 99 }; 
	// Function /Script/Engine.PlayerController.ClientSetBlockOnAsyncLoading
	constexpr static const FunctionPointer<APlayerController, void> ClientSetBlockOnAsyncLoading = { 0x49154e0, 100 }; 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenuWithTextReason
	constexpr static const FunctionPointer<APlayerController, void, const FText> ClientReturnToMainMenuWithTextReason = { 0x491a1d0, 101 }; 
	// Function /Script/Engine.PlayerController.ClientReturnToMainMenu
	constexpr static const FunctionPointer<APlayerController, void, const FString> ClientReturnToMainMenu = { 0x491a300, 102 }; 
	// Function /Script/Engine.PlayerController.ClientRetryClientRestart
	constexpr static const FunctionPointer<APlayerController, void, const APawn*> ClientRetryClientRestart = { 0x122af70, 103 }; 
	// Function /Script/Engine.PlayerController.ClientRestart
	constexpr static const FunctionPointer<APlayerController, void, const APawn*> ClientRestart = { 0x4915500, 104 }; 
	// Function /Script/Engine.PlayerController.ClientReset
	constexpr static const FunctionPointer<APlayerController, void> ClientReset = { 0x49155e0, 105 }; 
	// Function /Script/Engine.PlayerController.ClientRepObjRef
	constexpr static const FunctionPointer<APlayerController, void, const UObject*> ClientRepObjRef = { 0x491a0f0, 106 }; 
	// Function /Script/Engine.PlayerController.ClientReceiveLocalizedMessage
	constexpr static const FunctionPointer<APlayerController, void, const UClass*, const int32_t, const APlayerState*, const APlayerState*, const UObject*> ClientReceiveLocalizedMessage = { 0x49119a0, 107 }; 
	// Function /Script/Engine.PlayerController.ClientPrestreamTextures
	constexpr static const FunctionPointer<APlayerController, void, const AActor*, const float, const bool, const int32_t> ClientPrestreamTextures = { 0x4915600, 108 }; 
	// Function /Script/Engine.PlayerController.ClientPrepareMapChange
	constexpr static const FunctionPointer<APlayerController, void, const FName, const bool, const bool> ClientPrepareMapChange = { 0x4915880, 109 }; 
	// Function /Script/Engine.PlayerController.ClientPlaySoundAtLocation
	constexpr static const FunctionPointer<APlayerController, void, const USoundBase*, const FVector, const float, const float> ClientPlaySoundAtLocation = { 0x4915a80, 110 }; 
	// Function /Script/Engine.PlayerController.ClientPlaySound
	constexpr static const FunctionPointer<APlayerController, void, const USoundBase*, const float, const float> ClientPlaySound = { 0x4915d20, 111 }; 
	// Function /Script/Engine.PlayerController.ClientPlayForceFeedback_Internal
	constexpr static const FunctionPointer<APlayerController, void, const UForceFeedbackEffect*, const FForceFeedbackParameters> ClientPlayForceFeedback_Internal = { 0x4913b30, 112 }; 
	// Function /Script/Engine.PlayerController.ClientPlayCameraShake_Raw
	constexpr static const FunctionPointer<APlayerController, void, const UCameraShakeBase*, const float, const ECameraShakePlaySpace, const FRotator, const FString> ClientPlayCameraShake_Raw = { 0x49160d0, 113 }; 
	// Function /Script/Engine.PlayerController.ClientPlayCameraAnim
	constexpr static const FunctionPointer<APlayerController, void, const UCameraAnim*, const float, const float, const float, const float, const bool, const bool, const ECameraShakePlaySpace, const FRotator> ClientPlayCameraAnim = { 0x4916730, 114 }; 
	// Function /Script/Engine.PlayerController.ClientMutePlayer
	constexpr static const FunctionPointer<APlayerController, void, const FUniqueNetIdRepl> ClientMutePlayer = { 0x4917a80, 115 }; 
	// Function /Script/Engine.PlayerController.ClientMessage
	constexpr static const FunctionPointer<APlayerController, void, const FString, const FName, const float> ClientMessage = { 0x4916c80, 116 }; 
	// Function /Script/Engine.PlayerController.ClientIgnoreMoveInput
	constexpr static const FunctionPointer<APlayerController, void, const bool> ClientIgnoreMoveInput = { 0x4916ea0, 117 }; 
	// Function /Script/Engine.PlayerController.ClientIgnoreLookInput
	constexpr static const FunctionPointer<APlayerController, void, const bool> ClientIgnoreLookInput = { 0x4916f80, 118 }; 
	// Function /Script/Engine.PlayerController.ClientGotoState
	constexpr static const FunctionPointer<APlayerController, void, const FName> ClientGotoState = { 0x4917060, 119 }; 
	// Function /Script/Engine.PlayerController.ClientGameEnded
	constexpr static const FunctionPointer<APlayerController, void, const AActor*, const bool> ClientGameEnded = { 0x4917140, 120 }; 
	// Function /Script/Engine.PlayerController.ClientForceGarbageCollection
	constexpr static const FunctionPointer<APlayerController, void> ClientForceGarbageCollection = { 0x49172b0, 121 }; 
	// Function /Script/Engine.PlayerController.ClientFlushLevelStreaming
	constexpr static const FunctionPointer<APlayerController, void> ClientFlushLevelStreaming = { 0x49172d0, 122 }; 
	// Function /Script/Engine.PlayerController.ClientEndOnlineSession
	constexpr static const FunctionPointer<APlayerController, void> ClientEndOnlineSession = { 0x4911cb0, 123 }; 
	// Function /Script/Engine.PlayerController.ClientEnableNetworkVoice
	constexpr static const FunctionPointer<APlayerController, void, const bool> ClientEnableNetworkVoice = { 0x4918050, 124 }; 
	// Function /Script/Engine.PlayerController.ClientCommitMapChange
	constexpr static const FunctionPointer<APlayerController, void> ClientCommitMapChange = { 0x4917390, 125 }; 
	// Function /Script/Engine.PlayerController.ClientClearCameraLensEffects
	constexpr static const FunctionPointer<APlayerController, void> ClientClearCameraLensEffects = { 0x2831f70, 126 }; 
	// Function /Script/Engine.PlayerController.ClientCapBandwidth
	constexpr static const FunctionPointer<APlayerController, void, const int32_t> ClientCapBandwidth = { 0x49173b0, 127 }; 
	// Function /Script/Engine.PlayerController.ClientCancelPendingMapChange
	constexpr static const FunctionPointer<APlayerController, void> ClientCancelPendingMapChange = { 0x4917490, 128 }; 
	// Function /Script/Engine.PlayerController.ClientAddTextureStreamingLoc
	constexpr static const FunctionPointer<APlayerController, void, const FVector, const float, const bool> ClientAddTextureStreamingLoc = { 0x49174b0, 129 }; 
	// Function /Script/Engine.PlayerController.ClearAudioListenerOverride
	constexpr static const FunctionPointer<APlayerController, void> ClearAudioListenerOverride = { 0x490e620, 130 }; 
	// Function /Script/Engine.PlayerController.ClearAudioListenerAttenuationOverride
	constexpr static const FunctionPointer<APlayerController, void> ClearAudioListenerAttenuationOverride = { 0x490e390, 131 }; 
	// Function /Script/Engine.PlayerController.CanRestartPlayer
	constexpr static const FunctionPointer<APlayerController, bool> CanRestartPlayer = { 0x490e360, 132 }; 
	// Function /Script/Engine.PlayerController.Camera
	constexpr static const FunctionPointer<APlayerController, void, const FName> Camera = { 0x490ec60, 133 }; 
	// Function /Script/Engine.PlayerController.AddYawInput
	constexpr static const FunctionPointer<APlayerController, void, const float> AddYawInput = { 0x4910590, 134 }; 
	// Function /Script/Engine.PlayerController.AddRollInput
	constexpr static const FunctionPointer<APlayerController, void, const float> AddRollInput = { 0x49104c0, 135 }; 
	// Function /Script/Engine.PlayerController.AddPitchInput
	constexpr static const FunctionPointer<APlayerController, void, const float> AddPitchInput = { 0x4910660, 136 }; 
	// Function /Script/Engine.PlayerController.ActivateTouchInterface
	constexpr static const FunctionPointer<APlayerController, void, const UTouchInterface*> ActivateTouchInterface = { 0x490ee20, 137 }; 
};

/// Class /Script/Engine.Info
/// Size: 0x02C8 (712 bytes) (0x0002C8 - 0x0002C8) align n/a MaxSize: 0x02C8
class AInfo : public AActor
{ 
public:
};

/// Class /Script/Engine.GameModeBase
/// Size: 0x0368 (872 bytes) (0x0002C8 - 0x000368) align n/a MaxSize: 0x0368
class AGameModeBase : public AInfo
{ 
public:
	FString                                            OptionsString;                                              // 0x02C8   (0x0010)  
	class UClass*                                      GameSessionClass;                                           // 0x02D8   (0x0008)  
	class UClass*                                      GameStateClass;                                             // 0x02E0   (0x0008)  
	class UClass*                                      PlayerControllerClass;                                      // 0x02E8   (0x0008)  
	class UClass*                                      PlayerStateClass;                                           // 0x02F0   (0x0008)  
	class UClass*                                      HUDClass;                                                   // 0x02F8   (0x0008)  
	class UClass*                                      DefaultPawnClass;                                           // 0x0300   (0x0008)  
	class UClass*                                      SpectatorClass;                                             // 0x0308   (0x0008)  
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                       // 0x0310   (0x0008)  
	class UClass*                                      ServerStatReplicatorClass;                                  // 0x0318   (0x0008)  
	class AGameSession*                                GameSession;                                                // 0x0320   (0x0008)  
	class AGameStateBase*                              GameState;                                                  // 0x0328   (0x0008)  
	class AServerStatReplicator*                       ServerStatReplicator;                                       // 0x0330   (0x0008)  
	FText                                              DefaultPlayerName;                                          // 0x0338   (0x0018)  
	bool                                               bUseSeamlessTravel : 1;                                     // 0x0350:0 (0x0001)  
	bool                                               bStartPlayersAsSpectators : 1;                              // 0x0350:1 (0x0001)  
	bool                                               bPauseable : 1;                                             // 0x0350:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x17];                                      // 0x0351   (0x0017)  MISSED

	/// Functions
	// Function /Script/Engine.GameModeBase.StartPlay
	constexpr static const FunctionPointer<AGameModeBase, void> StartPlay = { 0x4790070, 0 }; 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnFor
	constexpr static const FunctionPointer<AGameModeBase, APawn*, const AController*, const AActor*> SpawnDefaultPawnFor = { 0x478eed0, 1 }; 
	// Function /Script/Engine.GameModeBase.SpawnDefaultPawnAtTransform
	constexpr static const FunctionPointer<AGameModeBase, APawn*, const AController*, const FTransform&> SpawnDefaultPawnAtTransform = { 0x478ed10, 2 }; 
	// Function /Script/Engine.GameModeBase.ShouldReset
	constexpr static const FunctionPointer<AGameModeBase, bool, const AActor*> ShouldReset = { 0x478ff50, 3 }; 
	// Function /Script/Engine.GameModeBase.ReturnToMainMenuHost
	constexpr static const FunctionPointer<AGameModeBase, void> ReturnToMainMenuHost = { 0x27adeb0, 4 }; 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtTransform
	constexpr static const FunctionPointer<AGameModeBase, void, const AController*, const FTransform&> RestartPlayerAtTransform = { 0x478f040, 5 }; 
	// Function /Script/Engine.GameModeBase.RestartPlayerAtPlayerStart
	constexpr static const FunctionPointer<AGameModeBase, void, const AController*, const AActor*> RestartPlayerAtPlayerStart = { 0x478f200, 6 }; 
	// Function /Script/Engine.GameModeBase.RestartPlayer
	constexpr static const FunctionPointer<AGameModeBase, void, const AController*> RestartPlayer = { 0x478f370, 7 }; 
	// Function /Script/Engine.GameModeBase.ResetLevel
	constexpr static const FunctionPointer<AGameModeBase, void> ResetLevel = { 0x478ff30, 8 }; 
	// Function /Script/Engine.GameModeBase.PlayerCanRestart
	constexpr static const FunctionPointer<AGameModeBase, bool, const APlayerController*> PlayerCanRestart = { 0x478f450, 9 }; 
	// Function /Script/Engine.GameModeBase.MustSpectate
	constexpr static const FunctionPointer<AGameModeBase, bool, const APlayerController*> MustSpectate = { 0x478fd60, 10 }; 
	// Function /Script/Engine.GameModeBase.K2_PostLogin
	constexpr static const FunctionPointer<AGameModeBase, void, const APlayerController*> K2_PostLogin = { 0x2bbb090, 11 }; 
	// Function /Script/Engine.GameModeBase.K2_OnSwapPlayerControllers
	constexpr static const FunctionPointer<AGameModeBase, void, const APlayerController*, const APlayerController*> K2_OnSwapPlayerControllers = { 0x2bbb090, 12 }; 
	// Function /Script/Engine.GameModeBase.K2_OnRestartPlayer
	constexpr static const FunctionPointer<AGameModeBase, void, const AController*> K2_OnRestartPlayer = { 0x2bbb090, 13 }; 
	// Function /Script/Engine.GameModeBase.K2_OnLogout
	constexpr static const FunctionPointer<AGameModeBase, void, const AController*> K2_OnLogout = { 0x2bbb090, 14 }; 
	// Function /Script/Engine.GameModeBase.K2_OnChangeName
	constexpr static const FunctionPointer<AGameModeBase, void, const AController*, const FString, const bool> K2_OnChangeName = { 0x2bbb090, 15 }; 
	// Function /Script/Engine.GameModeBase.K2_FindPlayerStart
	constexpr static const FunctionPointer<AGameModeBase, AActor*, const AController*, const FString> K2_FindPlayerStart = { 0x478f540, 16 }; 
	// Function /Script/Engine.GameModeBase.InitStartSpot
	constexpr static const FunctionPointer<AGameModeBase, void, const AActor*, const AController*> InitStartSpot = { 0x478eba0, 17 }; 
	// Function /Script/Engine.GameModeBase.InitializeHUDForPlayer
	constexpr static const FunctionPointer<AGameModeBase, void, const APlayerController*> InitializeHUDForPlayer = { 0x477be70, 18 }; 
	// Function /Script/Engine.GameModeBase.HasMatchStarted
	constexpr static const FunctionPointer<AGameModeBase, bool> HasMatchStarted = { 0x4762860, 19 }; 
	// Function /Script/Engine.GameModeBase.HasMatchEnded
	constexpr static const FunctionPointer<AGameModeBase, bool> HasMatchEnded = { 0x4790040, 20 }; 
	// Function /Script/Engine.GameModeBase.HandleStartingNewPlayer
	constexpr static const FunctionPointer<AGameModeBase, void, const APlayerController*> HandleStartingNewPlayer = { 0x478fe50, 21 }; 
	// Function /Script/Engine.GameModeBase.GetNumSpectators
	constexpr static const FunctionPointer<AGameModeBase, int32_t> GetNumSpectators = { 0x4790090, 22 }; 
	// Function /Script/Engine.GameModeBase.GetNumPlayers
	constexpr static const FunctionPointer<AGameModeBase, int32_t> GetNumPlayers = { 0x47900c0, 23 }; 
	// Function /Script/Engine.GameModeBase.GetDefaultPawnClassForController
	constexpr static const FunctionPointer<AGameModeBase, UClass*, const AController*> GetDefaultPawnClassForController = { 0x47900f0, 24 }; 
	// Function /Script/Engine.GameModeBase.FindPlayerStart
	constexpr static const FunctionPointer<AGameModeBase, AActor*, const AController*, const FString> FindPlayerStart = { 0x478f740, 25 }; 
	// Function /Script/Engine.GameModeBase.ChoosePlayerStart
	constexpr static const FunctionPointer<AGameModeBase, AActor*, const AController*> ChoosePlayerStart = { 0x478f8e0, 26 }; 
	// Function /Script/Engine.GameModeBase.ChangeName
	constexpr static const FunctionPointer<AGameModeBase, void, const AController*, const FString, const bool> ChangeName = { 0x478f9d0, 27 }; 
	// Function /Script/Engine.GameModeBase.CanSpectate
	constexpr static const FunctionPointer<AGameModeBase, bool, const APlayerController*, const APlayerState*> CanSpectate = { 0x478fbf0, 28 }; 
};

/// Struct /Script/Engine.DebugTextInfo
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FDebugTextInfo
{ 
	class AActor*                                      SrcActor;                                                   // 0x0000   (0x0008)  
	FVector                                            SrcActorOffset;                                             // 0x0008   (0x000C)  
	FVector                                            SrcActorDesiredOffset;                                      // 0x0014   (0x000C)  
	FString                                            DebugText;                                                  // 0x0020   (0x0010)  
	float                                              TimeRemaining;                                              // 0x0030   (0x0004)  
	float                                              Duration;                                                   // 0x0034   (0x0004)  
	FColor                                             TextColor;                                                  // 0x0038   (0x0004)  
	bool                                               bAbsoluteLocation : 1;                                      // 0x003C:0 (0x0001)  
	bool                                               bKeepAttachedToActor : 1;                                   // 0x003C:1 (0x0001)  
	bool                                               bDrawShadow : 1;                                            // 0x003C:2 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	FVector                                            OrigActorLocation;                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x004C   (0x0004)  MISSED
	class UFont*                                       Font;                                                       // 0x0050   (0x0008)  
	float                                              FontScale;                                                  // 0x0058   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.HUD
/// Size: 0x03B8 (952 bytes) (0x0002C8 - 0x0003B8) align n/a MaxSize: 0x03B8
class AHUD : public AActor
{ 
public:
	class APlayerController*                           PlayerOwner;                                                // 0x02C8   (0x0008)  
	bool                                               bLostFocusPaused : 1;                                       // 0x02D0:0 (0x0001)  
	bool                                               bShowHUD : 1;                                               // 0x02D0:1 (0x0001)  
	bool                                               bShowDebugInfo : 1;                                         // 0x02D0:2 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x02D1   (0x0003)  MISSED
	int32_t                                            CurrentTargetIndex;                                         // 0x02D4   (0x0004)  
	bool                                               bShowHitBoxDebugInfo : 1;                                   // 0x02D8:0 (0x0001)  
	bool                                               bShowOverlays : 1;                                          // 0x02D8:1 (0x0001)  
	bool                                               bEnableDebugTextShadow : 1;                                 // 0x02D8:2 (0x0001)  
	unsigned char                                      UnknownData05_5[0x7];                                       // 0x02D9   (0x0007)  MISSED
	TArray<class AActor*>                              PostRenderedActors;                                         // 0x02E0   (0x0010)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x02F0   (0x0008)  MISSED
	TArray<FName>                                      DebugDisplay;                                               // 0x02F8   (0x0010)  
	TArray<FName>                                      ToggledDebugCategories;                                     // 0x0308   (0x0010)  
	class UCanvas*                                     Canvas;                                                     // 0x0318   (0x0008)  
	class UCanvas*                                     DebugCanvas;                                                // 0x0320   (0x0008)  
	TArray<FDebugTextInfo>                             DebugTextList;                                              // 0x0328   (0x0010)  
	class UClass*                                      ShowDebugTargetDesiredClass;                                // 0x0338   (0x0008)  
	class AActor*                                      ShowDebugTargetActor;                                       // 0x0340   (0x0008)  
	unsigned char                                      UnknownData07_7[0x70];                                      // 0x0348   (0x0070)  MISSED

	/// Functions
	// Function /Script/Engine.HUD.ShowHUD
	constexpr static const FunctionPointer<AHUD, void> ShowHUD = { 0x47887a0, 0 }; 
	// Function /Script/Engine.HUD.ShowDebugToggleSubCategory
	constexpr static const FunctionPointer<AHUD, void, const FName> ShowDebugToggleSubCategory = { 0x47bcd90, 1 }; 
	// Function /Script/Engine.HUD.ShowDebugForReticleTargetToggle
	constexpr static const FunctionPointer<AHUD, void, const UClass*> ShowDebugForReticleTargetToggle = { 0x47bcca0, 2 }; 
	// Function /Script/Engine.HUD.ShowDebug
	constexpr static const FunctionPointer<AHUD, void, const FName> ShowDebug = { 0x47bce70, 3 }; 
	// Function /Script/Engine.HUD.RemoveDebugText
	constexpr static const FunctionPointer<AHUD, void, const AActor*, const bool> RemoveDebugText = { 0x47bc070, 4 }; 
	// Function /Script/Engine.HUD.RemoveAllDebugStrings
	constexpr static const FunctionPointer<AHUD, void> RemoveAllDebugStrings = { 0x47bc1e0, 5 }; 
	// Function /Script/Engine.HUD.ReceiveHitBoxRelease
	constexpr static const FunctionPointer<AHUD, void, const FName> ReceiveHitBoxRelease = { 0x2bbb090, 6 }; 
	// Function /Script/Engine.HUD.ReceiveHitBoxEndCursorOver
	constexpr static const FunctionPointer<AHUD, void, const FName> ReceiveHitBoxEndCursorOver = { 0x2bbb090, 7 }; 
	// Function /Script/Engine.HUD.ReceiveHitBoxClick
	constexpr static const FunctionPointer<AHUD, void, const FName> ReceiveHitBoxClick = { 0x2bbb090, 8 }; 
	// Function /Script/Engine.HUD.ReceiveHitBoxBeginCursorOver
	constexpr static const FunctionPointer<AHUD, void, const FName> ReceiveHitBoxBeginCursorOver = { 0x2bbb090, 9 }; 
	// Function /Script/Engine.HUD.ReceiveDrawHUD
	constexpr static const FunctionPointer<AHUD, void, const int32_t, const int32_t> ReceiveDrawHUD = { 0x2bbb090, 10 }; 
	// Function /Script/Engine.HUD.Project
	constexpr static const FunctionPointer<AHUD, FVector, const FVector> Project = { 0x47b8900, 11 }; 
	// Function /Script/Engine.HUD.PreviousDebugTarget
	constexpr static const FunctionPointer<AHUD, void> PreviousDebugTarget = { 0x47b7df0, 12 }; 
	// Function /Script/Engine.HUD.NextDebugTarget
	constexpr static const FunctionPointer<AHUD, void> NextDebugTarget = { 0x14b27d0, 13 }; 
	// Function /Script/Engine.HUD.GetTextSize
	constexpr static const FunctionPointer<AHUD, void, const FString, const float&, const float&, const UFont*, const float> GetTextSize = { 0x47bbc70, 14 }; 
	// Function /Script/Engine.HUD.GetOwningPlayerController
	constexpr static const FunctionPointer<AHUD, APlayerController*> GetOwningPlayerController = { 0x17d0710, 15 }; 
	// Function /Script/Engine.HUD.GetOwningPawn
	constexpr static const FunctionPointer<AHUD, APawn*> GetOwningPawn = { 0x47b7e10, 16 }; 
	// Function /Script/Engine.HUD.GetActorsInSelectionRectangle
	constexpr static const FunctionPointer<AHUD, void, const UClass*, const FVector2D&, const FVector2D&, const TArray<AActor*>&, const bool, const bool> GetActorsInSelectionRectangle = { 0x47b8230, 17 }; 
	// Function /Script/Engine.HUD.DrawTextureSimple
	constexpr static const FunctionPointer<AHUD, void, const UTexture*, const float, const float, const float, const bool> DrawTextureSimple = { 0x47ba0b0, 18 }; 
	// Function /Script/Engine.HUD.DrawTexture
	constexpr static const FunctionPointer<AHUD, void, const UTexture*, const float, const float, const float, const float, const float, const float, const float, const float, const FLinearColor, const TEnumAsByte<EBlendMode>, const float, const bool, const float, const FVector2D> DrawTexture = { 0x47ba480, 19 }; 
	// Function /Script/Engine.HUD.DrawText
	constexpr static const FunctionPointer<AHUD, void, const FString, const FLinearColor, const float, const float, const UFont*, const float, const bool> DrawText = { 0x47bb700, 20 }; 
	// Function /Script/Engine.HUD.DrawRect
	constexpr static const FunctionPointer<AHUD, void, const FLinearColor, const float, const float, const float, const float> DrawRect = { 0x47baee0, 21 }; 
	// Function /Script/Engine.HUD.DrawMaterialTriangle
	constexpr static const FunctionPointer<AHUD, void, const UMaterialInterface*, const FVector2D, const FVector2D, const FVector2D, const FVector2D, const FVector2D, const FVector2D, const FLinearColor, const FLinearColor, const FLinearColor> DrawMaterialTriangle = { 0x47b8a30, 22 }; 
	// Function /Script/Engine.HUD.DrawMaterialSimple
	constexpr static const FunctionPointer<AHUD, void, const UMaterialInterface*, const float, const float, const float, const float, const float, const bool> DrawMaterialSimple = { 0x47b9260, 23 }; 
	// Function /Script/Engine.HUD.DrawMaterial
	constexpr static const FunctionPointer<AHUD, void, const UMaterialInterface*, const float, const float, const float, const float, const float, const float, const float, const float, const float, const bool, const float, const FVector2D> DrawMaterial = { 0x47b97a0, 24 }; 
	// Function /Script/Engine.HUD.DrawLine
	constexpr static const FunctionPointer<AHUD, void, const float, const float, const float, const float, const FLinearColor, const float> DrawLine = { 0x47bb2d0, 25 }; 
	// Function /Script/Engine.HUD.Deproject
	constexpr static const FunctionPointer<AHUD, void, const float, const float, const FVector&, const FVector&> Deproject = { 0x47b8610, 26 }; 
	// Function /Script/Engine.HUD.AddHitBox
	constexpr static const FunctionPointer<AHUD, void, const FVector2D, const FVector2D, const FName, const bool, const int32_t> AddHitBox = { 0x47b7e50, 27 }; 
	// Function /Script/Engine.HUD.AddDebugText
	constexpr static const FunctionPointer<AHUD, void, const FString, const AActor*, const float, const FVector, const FVector, const FColor, const bool, const bool, const bool, const UFont*, const float, const bool> AddDebugText = { 0x47bc2a0, 28 }; 
};

/// Class /Script/Engine.MaterialExpressionTextureBase
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionTextureBase : public UMaterialExpression
{ 
public:
	class UTexture*                                    Texture;                                                    // 0x0040   (0x0008)  
};

/// Struct /Script/Engine.ExpressionInput
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FExpressionInput
{ 
	int32_t                                            OutputIndex;                                                // 0x0000   (0x0004)  
	FName                                              ExpressionName;                                             // 0x0004   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionTextureSample
/// Size: 0x0060 (96 bytes) (0x000048 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0048   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0054   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter
/// Size: 0x0080 (128 bytes) (0x000060 - 0x000080) align n/a MaxSize: 0x0080
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{ 
public:
	FName                                              ParameterName;                                              // 0x0060   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0068   (0x0010)  
	FName                                              Group;                                                      // 0x0078   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2D
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Struct /Script/Engine.SplineCurves
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FSplineCurves
{ 
	FInterpCurveVector                                 position;                                                   // 0x0000   (0x0018)  
	FInterpCurveQuat                                   Rotation;                                                   // 0x0018   (0x0018)  
	FInterpCurveVector                                 Scale;                                                      // 0x0030   (0x0018)  
	FInterpCurveFloat                                  ReparamTable;                                               // 0x0048   (0x0018)  
	class USplineMetadata*                             MetaData;                                                   // 0x0060   (0x0008)  
	uint32_t                                           Version;                                                    // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.SplineComponent
/// Size: 0x0630 (1584 bytes) (0x000538 - 0x000630) align n/a MaxSize: 0x0630
class USplineComponent : public UPrimitiveComponent
{ 
public:
	FSplineCurves                                      SplineCurves;                                               // 0x0538   (0x0070)  
	FInterpCurveVector                                 SplineInfo;                                                 // 0x05A8   (0x0018)  
	FInterpCurveQuat                                   SplineRotInfo;                                              // 0x05C0   (0x0018)  
	FInterpCurveVector                                 SplineScaleInfo;                                            // 0x05D8   (0x0018)  
	FInterpCurveFloat                                  SplineReparamTable;                                         // 0x05F0   (0x0018)  
	bool                                               bAllowSplineEditingPerInstance;                             // 0x0608   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0609   (0x0003)  MISSED
	int32_t                                            ReparamStepsPerSegment;                                     // 0x060C   (0x0004)  
	float                                              Duration;                                                   // 0x0610   (0x0004)  
	bool                                               bStationaryEndpoints;                                       // 0x0614   (0x0001)  
	bool                                               bSplineHasBeenEdited;                                       // 0x0615   (0x0001)  
	bool                                               bModifiedByConstructionScript;                              // 0x0616   (0x0001)  
	bool                                               bInputSplinePointsToConstructionScript;                     // 0x0617   (0x0001)  
	bool                                               bDrawDebug;                                                 // 0x0618   (0x0001)  
	bool                                               bClosedLoop;                                                // 0x0619   (0x0001)  
	bool                                               bLoopPositionOverride;                                      // 0x061A   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x061B   (0x0001)  MISSED
	float                                              LoopPosition;                                               // 0x061C   (0x0004)  
	FVector                                            DefaultUpVector;                                            // 0x0620   (0x000C)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x062C   (0x0004)  MISSED

	/// Functions
	// Function /Script/Engine.SplineComponent.UpdateSpline
	constexpr static const FunctionPointer<USplineComponent, void> UpdateSpline = { 0x498b900, 0 }; 
	// Function /Script/Engine.SplineComponent.SetWorldLocationAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const FVector&> SetWorldLocationAtSplinePoint = { 0x4988220, 1 }; 
	// Function /Script/Engine.SplineComponent.SetUpVectorAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>, const bool> SetUpVectorAtSplinePoint = { 0x4987370, 2 }; 
	// Function /Script/Engine.SplineComponent.SetUnselectedSplineSegmentColor
	constexpr static const FunctionPointer<USplineComponent, void, const FLinearColor&> SetUnselectedSplineSegmentColor = { 0x18d98c0, 3 }; 
	// Function /Script/Engine.SplineComponent.SetTangentsAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const FVector&, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>, const bool> SetTangentsAtSplinePoint = { 0x49878e0, 4 }; 
	// Function /Script/Engine.SplineComponent.SetTangentColor
	constexpr static const FunctionPointer<USplineComponent, void, const FLinearColor&> SetTangentColor = { 0x18d98c0, 5 }; 
	// Function /Script/Engine.SplineComponent.SetTangentAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>, const bool> SetTangentAtSplinePoint = { 0x4987e30, 6 }; 
	// Function /Script/Engine.SplineComponent.SetSplineWorldPoints
	constexpr static const FunctionPointer<USplineComponent, void, const TArray<FVector>&> SetSplineWorldPoints = { 0x49889b0, 7 }; 
	// Function /Script/Engine.SplineComponent.SetSplinePointType
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const TEnumAsByte<ESplinePointType>, const bool> SetSplinePointType = { 0x4986b00, 8 }; 
	// Function /Script/Engine.SplineComponent.SetSplinePoints
	constexpr static const FunctionPointer<USplineComponent, void, const TArray<FVector>&, const TEnumAsByte<ESplineCoordinateSpace>, const bool> SetSplinePoints = { 0x4988ab0, 9 }; 
	// Function /Script/Engine.SplineComponent.SetSplineLocalPoints
	constexpr static const FunctionPointer<USplineComponent, void, const TArray<FVector>&> SetSplineLocalPoints = { 0x49888b0, 10 }; 
	// Function /Script/Engine.SplineComponent.SetSelectedSplineSegmentColor
	constexpr static const FunctionPointer<USplineComponent, void, const FLinearColor&> SetSelectedSplineSegmentColor = { 0x18d98c0, 11 }; 
	// Function /Script/Engine.SplineComponent.SetScaleAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const FVector&, const bool> SetScaleAtSplinePoint = { 0x4986e90, 12 }; 
	// Function /Script/Engine.SplineComponent.SetRotationAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const FRotator&, const TEnumAsByte<ESplineCoordinateSpace>, const bool> SetRotationAtSplinePoint = { 0x49870d0, 13 }; 
	// Function /Script/Engine.SplineComponent.SetLocationAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>, const bool> SetLocationAtSplinePoint = { 0x49884d0, 14 }; 
	// Function /Script/Engine.SplineComponent.SetDrawDebug
	constexpr static const FunctionPointer<USplineComponent, void, const bool> SetDrawDebug = { 0x4989d30, 15 }; 
	// Function /Script/Engine.SplineComponent.SetDefaultUpVector
	constexpr static const FunctionPointer<USplineComponent, void, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>> SetDefaultUpVector = { 0x49840a0, 16 }; 
	// Function /Script/Engine.SplineComponent.SetClosedLoopAtPosition
	constexpr static const FunctionPointer<USplineComponent, void, const bool, const float, const bool> SetClosedLoopAtPosition = { 0x4989970, 17 }; 
	// Function /Script/Engine.SplineComponent.SetClosedLoop
	constexpr static const FunctionPointer<USplineComponent, void, const bool, const bool> SetClosedLoop = { 0x4989b90, 18 }; 
	// Function /Script/Engine.SplineComponent.RemoveSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const bool> RemoveSplinePoint = { 0x4988ea0, 19 }; 
	// Function /Script/Engine.SplineComponent.IsClosedLoop
	constexpr static const FunctionPointer<USplineComponent, bool> IsClosedLoop = { 0x4989950, 20 }; 
	// Function /Script/Engine.SplineComponent.GetWorldTangentAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FVector, const float> GetWorldTangentAtDistanceAlongSpline = { 0x49830b0, 21 }; 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtTime
	constexpr static const FunctionPointer<USplineComponent, FRotator, const float, const bool> GetWorldRotationAtTime = { 0x4981260, 22 }; 
	// Function /Script/Engine.SplineComponent.GetWorldRotationAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FRotator, const float> GetWorldRotationAtDistanceAlongSpline = { 0x4982dd0, 23 }; 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtTime
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const bool> GetWorldLocationAtTime = { 0x4981cf0, 24 }; 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FVector, const int32_t> GetWorldLocationAtSplinePoint = { 0x4986690, 25 }; 
	// Function /Script/Engine.SplineComponent.GetWorldLocationAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FVector, const float> GetWorldLocationAtDistanceAlongSpline = { 0x49839c0, 26 }; 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtTime
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const bool> GetWorldDirectionAtTime = { 0x4981940, 27 }; 
	// Function /Script/Engine.SplineComponent.GetWorldDirectionAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FVector, const float> GetWorldDirectionAtDistanceAlongSpline = { 0x49834a0, 28 }; 
	// Function /Script/Engine.SplineComponent.GetVectorPropertyAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FVector, const int32_t, const FName> GetVectorPropertyAtSplinePoint = { 0x49843a0, 29 }; 
	// Function /Script/Engine.SplineComponent.GetVectorPropertyAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const FName> GetVectorPropertyAtSplineInputKey = { 0x4989e10, 30 }; 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtTime
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>, const bool> GetUpVectorAtTime = { 0x4980c20, 31 }; 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FVector, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>> GetUpVectorAtSplinePoint = { 0x49858b0, 32 }; 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetUpVectorAtSplineInputKey = { 0x498abe0, 33 }; 
	// Function /Script/Engine.SplineComponent.GetUpVectorAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetUpVectorAtDistanceAlongSpline = { 0x4982a60, 34 }; 
	// Function /Script/Engine.SplineComponent.GetTransformAtTime
	constexpr static const FunctionPointer<USplineComponent, FTransform, const float, const TEnumAsByte<ESplineCoordinateSpace>, const bool, const bool> GetTransformAtTime = { 0x4980270, 35 }; 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FTransform, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>, const bool> GetTransformAtSplinePoint = { 0x4984f80, 36 }; 
	// Function /Script/Engine.SplineComponent.GetTransformAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, FTransform, const float, const TEnumAsByte<ESplineCoordinateSpace>, const bool> GetTransformAtSplineInputKey = { 0x498a670, 37 }; 
	// Function /Script/Engine.SplineComponent.GetTransformAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FTransform, const float, const TEnumAsByte<ESplineCoordinateSpace>, const bool> GetTransformAtDistanceAlongSpline = { 0x49821b0, 38 }; 
	// Function /Script/Engine.SplineComponent.GetTangentAtTime
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>, const bool> GetTangentAtTime = { 0x4981610, 39 }; 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FVector, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>> GetTangentAtSplinePoint = { 0x4985e30, 40 }; 
	// Function /Script/Engine.SplineComponent.GetTangentAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetTangentAtSplineInputKey = { 0x498b4a0, 41 }; 
	// Function /Script/Engine.SplineComponent.GetTangentAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetTangentAtDistanceAlongSpline = { 0x4983250, 42 }; 
	// Function /Script/Engine.SplineComponent.GetSplinePointType
	constexpr static const FunctionPointer<USplineComponent, TEnumAsByte<ESplinePointType>, const int32_t> GetSplinePointType = { 0x4986d50, 43 }; 
	// Function /Script/Engine.SplineComponent.GetSplineLength
	constexpr static const FunctionPointer<USplineComponent, float> GetSplineLength = { 0x4984350, 44 }; 
	// Function /Script/Engine.SplineComponent.GetScaleAtTime
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const bool> GetScaleAtTime = { 0x497fd30, 45 }; 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FVector, const int32_t> GetScaleAtSplinePoint = { 0x4985210, 46 }; 
	// Function /Script/Engine.SplineComponent.GetScaleAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, FVector, const float> GetScaleAtSplineInputKey = { 0x498a3c0, 47 }; 
	// Function /Script/Engine.SplineComponent.GetScaleAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FVector, const float> GetScaleAtDistanceAlongSpline = { 0x4982410, 48 }; 
	// Function /Script/Engine.SplineComponent.GetRotationAtTime
	constexpr static const FunctionPointer<USplineComponent, FRotator, const float, const TEnumAsByte<ESplineCoordinateSpace>, const bool> GetRotationAtTime = { 0x49813f0, 49 }; 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FRotator, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>> GetRotationAtSplinePoint = { 0x4985c50, 50 }; 
	// Function /Script/Engine.SplineComponent.GetRotationAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, FRotator, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetRotationAtSplineInputKey = { 0x498af20, 51 }; 
	// Function /Script/Engine.SplineComponent.GetRotationAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FRotator, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetRotationAtDistanceAlongSpline = { 0x4982f00, 52 }; 
	// Function /Script/Engine.SplineComponent.GetRollAtTime
	constexpr static const FunctionPointer<USplineComponent, float, const float, const TEnumAsByte<ESplineCoordinateSpace>, const bool> GetRollAtTime = { 0x497ff90, 53 }; 
	// Function /Script/Engine.SplineComponent.GetRollAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, float, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>> GetRollAtSplinePoint = { 0x4985340, 54 }; 
	// Function /Script/Engine.SplineComponent.GetRollAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, float, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetRollAtSplineInputKey = { 0x498a4e0, 55 }; 
	// Function /Script/Engine.SplineComponent.GetRollAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, float, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetRollAtDistanceAlongSpline = { 0x4982550, 56 }; 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtTime
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>, const bool> GetRightVectorAtTime = { 0x49805e0, 57 }; 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FVector, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>> GetRightVectorAtSplinePoint = { 0x4985510, 58 }; 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetRightVectorAtSplineInputKey = { 0x498a8a0, 59 }; 
	// Function /Script/Engine.SplineComponent.GetRightVectorAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetRightVectorAtDistanceAlongSpline = { 0x49826f0, 60 }; 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplineSegments
	constexpr static const FunctionPointer<USplineComponent, int32_t> GetNumberOfSplineSegments = { 0x4986ab0, 61 }; 
	// Function /Script/Engine.SplineComponent.GetNumberOfSplinePoints
	constexpr static const FunctionPointer<USplineComponent, int32_t> GetNumberOfSplinePoints = { 0x4986ae0, 62 }; 
	// Function /Script/Engine.SplineComponent.GetLocationAtTime
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>, const bool> GetLocationAtTime = { 0x4981e80, 63 }; 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FVector, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>> GetLocationAtSplinePoint = { 0x4986840, 64 }; 
	// Function /Script/Engine.SplineComponent.GetLocationAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetLocationAtSplineInputKey = { 0x498b6d0, 65 }; 
	// Function /Script/Engine.SplineComponent.GetLocationAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetLocationAtDistanceAlongSpline = { 0x4983b60, 66 }; 
	// Function /Script/Engine.SplineComponent.GetLocationAndTangentAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const FVector&, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>> GetLocationAndTangentAtSplinePoint = { 0x4984b20, 67 }; 
	// Function /Script/Engine.SplineComponent.GetLocalLocationAndTangentAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const int32_t, const FVector&, const FVector&> GetLocalLocationAndTangentAtSplinePoint = { 0x4984870, 68 }; 
	// Function /Script/Engine.SplineComponent.GetLeaveTangentAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FVector, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>> GetLeaveTangentAtSplinePoint = { 0x4985e30, 69 }; 
	// Function /Script/Engine.SplineComponent.GetInputKeyAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, float, const float> GetInputKeyAtDistanceAlongSpline = { 0x4983dc0, 70 }; 
	// Function /Script/Engine.SplineComponent.GetFloatPropertyAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, float, const int32_t, const FName> GetFloatPropertyAtSplinePoint = { 0x4984580, 71 }; 
	// Function /Script/Engine.SplineComponent.GetFloatPropertyAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, float, const float, const FName> GetFloatPropertyAtSplineInputKey = { 0x498a020, 72 }; 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, float, const int32_t> GetDistanceAlongSplineAtSplinePoint = { 0x4984750, 73 }; 
	// Function /Script/Engine.SplineComponent.GetDistanceAlongSplineAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, float, const float> GetDistanceAlongSplineAtSplineInputKey = { 0x498a210, 74 }; 
	// Function /Script/Engine.SplineComponent.GetDirectionAtTime
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>, const bool> GetDirectionAtTime = { 0x4981ad0, 75 }; 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FVector, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>> GetDirectionAtSplinePoint = { 0x4986310, 76 }; 
	// Function /Script/Engine.SplineComponent.GetDirectionAtSplineInputKey
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetDirectionAtSplineInputKey = { 0x498b0b0, 77 }; 
	// Function /Script/Engine.SplineComponent.GetDirectionAtDistanceAlongSpline
	constexpr static const FunctionPointer<USplineComponent, FVector, const float, const TEnumAsByte<ESplineCoordinateSpace>> GetDirectionAtDistanceAlongSpline = { 0x49835c0, 78 }; 
	// Function /Script/Engine.SplineComponent.GetDefaultUpVector
	constexpr static const FunctionPointer<USplineComponent, FVector, const TEnumAsByte<ESplineCoordinateSpace>> GetDefaultUpVector = { 0x4983f00, 79 }; 
	// Function /Script/Engine.SplineComponent.GetArriveTangentAtSplinePoint
	constexpr static const FunctionPointer<USplineComponent, FVector, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>> GetArriveTangentAtSplinePoint = { 0x49860a0, 80 }; 
	// Function /Script/Engine.SplineComponent.FindUpVectorClosestToWorldLocation
	constexpr static const FunctionPointer<USplineComponent, FVector, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>> FindUpVectorClosestToWorldLocation = { 0x497e2a0, 81 }; 
	// Function /Script/Engine.SplineComponent.FindTransformClosestToWorldLocation
	constexpr static const FunctionPointer<USplineComponent, FTransform, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>, const bool> FindTransformClosestToWorldLocation = { 0x497d640, 82 }; 
	// Function /Script/Engine.SplineComponent.FindTangentClosestToWorldLocation
	constexpr static const FunctionPointer<USplineComponent, FVector, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>> FindTangentClosestToWorldLocation = { 0x497e9a0, 83 }; 
	// Function /Script/Engine.SplineComponent.FindScaleClosestToWorldLocation
	constexpr static const FunctionPointer<USplineComponent, FVector, const FVector&> FindScaleClosestToWorldLocation = { 0x497d980, 84 }; 
	// Function /Script/Engine.SplineComponent.FindRotationClosestToWorldLocation
	constexpr static const FunctionPointer<USplineComponent, FRotator, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>> FindRotationClosestToWorldLocation = { 0x497e6f0, 85 }; 
	// Function /Script/Engine.SplineComponent.FindRollClosestToWorldLocation
	constexpr static const FunctionPointer<USplineComponent, float, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>> FindRollClosestToWorldLocation = { 0x497dba0, 86 }; 
	// Function /Script/Engine.SplineComponent.FindRightVectorClosestToWorldLocation
	constexpr static const FunctionPointer<USplineComponent, FVector, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>> FindRightVectorClosestToWorldLocation = { 0x497de50, 87 }; 
	// Function /Script/Engine.SplineComponent.FindLocationClosestToWorldLocationBaseSegIndex
	constexpr static const FunctionPointer<USplineComponent, FVector, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>, const int32_t, const int32_t, const int32_t&> FindLocationClosestToWorldLocationBaseSegIndex = { 0x497f500, 88 }; 
	// Function /Script/Engine.SplineComponent.FindLocationClosestToWorldLocation
	constexpr static const FunctionPointer<USplineComponent, FVector, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>> FindLocationClosestToWorldLocation = { 0x497f1c0, 89 }; 
	// Function /Script/Engine.SplineComponent.FindInputKeyClosestToWorldLocationBaseSegIndex
	constexpr static const FunctionPointer<USplineComponent, float, const FVector&, const int32_t, const int32_t, const int32_t&> FindInputKeyClosestToWorldLocationBaseSegIndex = { 0x497f8d0, 90 }; 
	// Function /Script/Engine.SplineComponent.FindInputKeyClosestToWorldLocation
	constexpr static const FunctionPointer<USplineComponent, float, const FVector&> FindInputKeyClosestToWorldLocation = { 0x497fb50, 91 }; 
	// Function /Script/Engine.SplineComponent.FindDirectionClosestToWorldLocation
	constexpr static const FunctionPointer<USplineComponent, FVector, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>> FindDirectionClosestToWorldLocation = { 0x497ece0, 92 }; 
	// Function /Script/Engine.SplineComponent.ClearSplinePoints
	constexpr static const FunctionPointer<USplineComponent, void, const bool> ClearSplinePoints = { 0x49897f0, 93 }; 
	// Function /Script/Engine.SplineComponent.AddSplineWorldPoint
	constexpr static const FunctionPointer<USplineComponent, void, const FVector&> AddSplineWorldPoint = { 0x4988dc0, 94 }; 
	// Function /Script/Engine.SplineComponent.AddSplinePointAtIndex
	constexpr static const FunctionPointer<USplineComponent, void, const FVector&, const int32_t, const TEnumAsByte<ESplineCoordinateSpace>, const bool> AddSplinePointAtIndex = { 0x4989010, 95 }; 
	// Function /Script/Engine.SplineComponent.AddSplinePoint
	constexpr static const FunctionPointer<USplineComponent, void, const FVector&, const TEnumAsByte<ESplineCoordinateSpace>, const bool> AddSplinePoint = { 0x49892a0, 96 }; 
	// Function /Script/Engine.SplineComponent.AddSplineLocalPoint
	constexpr static const FunctionPointer<USplineComponent, void, const FVector&> AddSplineLocalPoint = { 0x4988ce0, 97 }; 
	// Function /Script/Engine.SplineComponent.AddPoints
	constexpr static const FunctionPointer<USplineComponent, void, const TArray<FSplinePoint>&, const bool> AddPoints = { 0x4989490, 98 }; 
	// Function /Script/Engine.SplineComponent.AddPoint
	constexpr static const FunctionPointer<USplineComponent, void, const FSplinePoint&, const bool> AddPoint = { 0x4989640, 99 }; 
};

/// Struct /Script/Engine.AudioComponentParam
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FAudioComponentParam
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	float                                              FloatParam;                                                 // 0x0008   (0x0004)  
	bool                                               BoolParam;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	int32_t                                            IntParam;                                                   // 0x0010   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	class USoundWave*                                  SoundWaveParam;                                             // 0x0018   (0x0008)  
};

/// Class /Script/Engine.AudioComponent
/// Size: 0x08F0 (2288 bytes) (0x000260 - 0x0008F0) align n/a MaxSize: 0x08E8
class UAudioComponent : public USceneComponent
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x0260   (0x0008)  
	TArray<FAudioComponentParam>                       InstanceParameters;                                         // 0x0268   (0x0010)  
	class USoundClass*                                 SoundClassOverride;                                         // 0x0278   (0x0008)  
	bool                                               bAutoDestroy : 1;                                           // 0x0280:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x0280:1 (0x0001)  
	bool                                               bShouldRemainActiveIfDropped : 1;                           // 0x0280:2 (0x0001)  
	bool                                               bAllowSpatialization : 1;                                   // 0x0280:3 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x0280:4 (0x0001)  
	bool                                               bOverrideSubtitlePriority : 1;                              // 0x0280:5 (0x0001)  
	bool                                               bIsUISound : 1;                                             // 0x0280:6 (0x0001)  
	bool                                               bEnableLowPassFilter : 1;                                   // 0x0280:7 (0x0001)  
	bool                                               bOverridePriority : 1;                                      // 0x0281:0 (0x0001)  
	bool                                               bSuppressSubtitles : 1;                                     // 0x0281:1 (0x0001)  
	bool                                               bAutoDestroyByLevelSequence;                                // 0x0282   (0x0001)  
	unsigned char                                      UnknownData14_6[0x1];                                       // 0x0283   (0x0001)  MISSED
	unsigned char                                      UnknownBit15 : 1;                                           // 0x0284:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit16 : 1;                                           // 0x0284:1 (0x0001)  MISSED
	bool                                               bAutoManageAttachment : 1;                                  // 0x0284:2 (0x0001)  
	unsigned char                                      UnknownData17_5[0x7];                                       // 0x0285   (0x0007)  MISSED
	FName                                              AudioComponentUserID;                                       // 0x028C   (0x0008)  
	float                                              PitchModulationMin;                                         // 0x0294   (0x0004)  
	float                                              PitchModulationMax;                                         // 0x0298   (0x0004)  
	float                                              VolumeModulationMin;                                        // 0x029C   (0x0004)  
	float                                              VolumeModulationMax;                                        // 0x02A0   (0x0004)  
	float                                              VolumeMultiplier;                                           // 0x02A4   (0x0004)  
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x02A8   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x02AC   (0x0004)  
	float                                              Priority;                                                   // 0x02B0   (0x0004)  
	float                                              SubtitlePriority;                                           // 0x02B4   (0x0004)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x02B8   (0x0008)  
	float                                              PitchMultiplier;                                            // 0x02C0   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x02C4   (0x0004)  
	unsigned char                                      UnknownData18_6[0x8];                                       // 0x02C8   (0x0008)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x02D0   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x02D8   (0x03A0)  
	class USoundConcurrency*                           ConcurrencySettings;                                        // 0x0678   (0x0008)  
	TSet<USoundConcurrency*>                           ConcurrencySet;                                             // 0x0680   (0x0050)  
	unsigned char                                      UnknownData19_6[0xC];                                       // 0x06D0   (0x000C)  MISSED
	EAttachmentRule                                    AutoAttachLocationRule;                                     // 0x06DC   (0x0001)  
	EAttachmentRule                                    AutoAttachRotationRule;                                     // 0x06DD   (0x0001)  
	EAttachmentRule                                    AutoAttachScaleRule;                                        // 0x06DE   (0x0001)  
	unsigned char                                      UnknownData20_6[0x1];                                       // 0x06DF   (0x0001)  MISSED
	FSoundModulationDefaultRoutingSettings             ModulationRouting;                                          // 0x06E0   (0x0048)  
	FMulticastInlineDelegate                           OnAudioPlayStateChanged;                                    // 0x0728   (0x0010)  
	unsigned char                                      UnknownData21_6[0x18];                                      // 0x0738   (0x0018)  MISSED
	FMulticastInlineDelegate                           OnAudioVirtualizationChanged;                               // 0x0750   (0x0010)  
	unsigned char                                      UnknownData22_6[0x18];                                      // 0x0760   (0x0018)  MISSED
	FMulticastInlineDelegate                           OnAudioFinished;                                            // 0x0778   (0x0010)  
	unsigned char                                      UnknownData23_6[0x30];                                      // 0x0788   (0x0030)  MISSED
	FMulticastInlineDelegate                           OnAudioPlaybackPercent;                                     // 0x07B8   (0x0010)  
	unsigned char                                      UnknownData24_6[0x18];                                      // 0x07C8   (0x0018)  MISSED
	FMulticastInlineDelegate                           OnAudioSingleEnvelopeValue;                                 // 0x07E0   (0x0010)  
	unsigned char                                      UnknownData25_6[0x18];                                      // 0x07F0   (0x0018)  MISSED
	FMulticastInlineDelegate                           OnAudioMultiEnvelopeValue;                                  // 0x0808   (0x0010)  
	unsigned char                                      UnknownData26_6[0x18];                                      // 0x0818   (0x0018)  MISSED
	FDelegateProperty                                  OnQueueSubtitles;                                           // 0x0830   (0x0010)  
	TWeakObjectPtr<class USceneComponent*>             AutoAttachParent;                                           // 0x0840   (0x0008)  
	FName                                              AutoAttachSocketName;                                       // 0x0848   (0x0008)  
	unsigned char                                      UnknownData27_7[0x98];                                      // 0x0850   (0x0098)  MISSED

	/// Functions
	// Function /Script/Engine.AudioComponent.StopDelayed
	constexpr static const FunctionPointer<UAudioComponent, void, const float> StopDelayed = { 0x4728c60, 0 }; 
	// Function /Script/Engine.AudioComponent.Stop
	constexpr static const FunctionPointer<UAudioComponent, void> Stop = { 0x4728d30, 1 }; 
	// Function /Script/Engine.AudioComponent.SetWaveParameter
	constexpr static const FunctionPointer<UAudioComponent, void, const FName, const USoundWave*> SetWaveParameter = { 0x4728620, 2 }; 
	// Function /Script/Engine.AudioComponent.SetVolumeMultiplier
	constexpr static const FunctionPointer<UAudioComponent, void, const float> SetVolumeMultiplier = { 0x4728270, 3 }; 
	// Function /Script/Engine.AudioComponent.SetUISound
	constexpr static const FunctionPointer<UAudioComponent, void, const bool> SetUISound = { 0x47280c0, 4 }; 
	// Function /Script/Engine.AudioComponent.SetSubmixSend
	constexpr static const FunctionPointer<UAudioComponent, void, const USoundSubmixBase*, const float> SetSubmixSend = { 0x4727e30, 5 }; 
	// Function /Script/Engine.AudioComponent.SetSourceBusSendPreEffect
	constexpr static const FunctionPointer<UAudioComponent, void, const USoundSourceBus*, const float> SetSourceBusSendPreEffect = { 0x4727cc0, 6 }; 
	// Function /Script/Engine.AudioComponent.SetSourceBusSendPostEffect
	constexpr static const FunctionPointer<UAudioComponent, void, const USoundSourceBus*, const float> SetSourceBusSendPostEffect = { 0x4727b50, 7 }; 
	// Function /Script/Engine.AudioComponent.SetSound
	constexpr static const FunctionPointer<UAudioComponent, void, const USoundBase*> SetSound = { 0x4729240, 8 }; 
	// Function /Script/Engine.AudioComponent.SetPitchMultiplier
	constexpr static const FunctionPointer<UAudioComponent, void, const float> SetPitchMultiplier = { 0x47281a0, 9 }; 
	// Function /Script/Engine.AudioComponent.SetPaused
	constexpr static const FunctionPointer<UAudioComponent, void, const bool> SetPaused = { 0x4728b80, 10 }; 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterFrequency
	constexpr static const FunctionPointer<UAudioComponent, void, const float> SetLowPassFilterFrequency = { 0x47276c0, 11 }; 
	// Function /Script/Engine.AudioComponent.SetLowPassFilterEnabled
	constexpr static const FunctionPointer<UAudioComponent, void, const bool> SetLowPassFilterEnabled = { 0x4727790, 12 }; 
	// Function /Script/Engine.AudioComponent.SetIntParameter
	constexpr static const FunctionPointer<UAudioComponent, void, const FName, const int32_t> SetIntParameter = { 0x4728340, 13 }; 
	// Function /Script/Engine.AudioComponent.SetFloatParameter
	constexpr static const FunctionPointer<UAudioComponent, void, const FName, const float> SetFloatParameter = { 0x4728790, 14 }; 
	// Function /Script/Engine.AudioComponent.SetBoolParameter
	constexpr static const FunctionPointer<UAudioComponent, void, const FName, const bool> SetBoolParameter = { 0x47284b0, 15 }; 
	// Function /Script/Engine.AudioComponent.SetAudioBusSendPreEffect
	constexpr static const FunctionPointer<UAudioComponent, void, const UAudioBus*, const float> SetAudioBusSendPreEffect = { 0x47279e0, 16 }; 
	// Function /Script/Engine.AudioComponent.SetAudioBusSendPostEffect
	constexpr static const FunctionPointer<UAudioComponent, void, const UAudioBus*, const float> SetAudioBusSendPostEffect = { 0x4727870, 17 }; 
	// Function /Script/Engine.AudioComponent.ResetSpatialization
	constexpr static const FunctionPointer<UAudioComponent, void> ResetSpatialization = { 0x4726fe0, 18 }; 
	// Function /Script/Engine.AudioComponent.PlayQuantized
	constexpr static const FunctionPointer<UAudioComponent, void, const UObject*, const UQuartzClockHandle*&, const FQuartzQuantizationBoundary&, const FDelegateProperty&, const float, const float, const float, const EAudioFaderCurve> PlayQuantized = { 0x4728d50, 19 }; 
	// Function /Script/Engine.AudioComponent.Play
	constexpr static const FunctionPointer<UAudioComponent, void, const float> Play = { 0x282a0d0, 20 }; 
	// Function /Script/Engine.AudioComponent.IsVirtualized
	constexpr static const FunctionPointer<UAudioComponent, bool> IsVirtualized = { 0x4728b20, 21 }; 
	// Function /Script/Engine.AudioComponent.IsPlaying
	constexpr static const FunctionPointer<UAudioComponent, bool> IsPlaying = { 0x4728b50, 22 }; 
	// Function /Script/Engine.AudioComponent.HasCookedFFTData
	constexpr static const FunctionPointer<UAudioComponent, bool> HasCookedFFTData = { 0x4727670, 23 }; 
	// Function /Script/Engine.AudioComponent.HasCookedAmplitudeEnvelopeData
	constexpr static const FunctionPointer<UAudioComponent, bool> HasCookedAmplitudeEnvelopeData = { 0x4727620, 24 }; 
	// Function /Script/Engine.AudioComponent.GetPlayState
	constexpr static const FunctionPointer<UAudioComponent, EAudioComponentPlayState> GetPlayState = { 0x4728af0, 25 }; 
	// Function /Script/Engine.AudioComponent.GetCookedFFTDataForAllPlayingSounds
	constexpr static const FunctionPointer<UAudioComponent, bool, const TArray<FSoundWaveSpectralDataPerSound>&> GetCookedFFTDataForAllPlayingSounds = { 0x4727320, 26 }; 
	// Function /Script/Engine.AudioComponent.GetCookedFFTData
	constexpr static const FunctionPointer<UAudioComponent, bool, const TArray<float>&, const TArray<FSoundWaveSpectralData>&> GetCookedFFTData = { 0x4727450, 27 }; 
	// Function /Script/Engine.AudioComponent.GetCookedEnvelopeDataForAllPlayingSounds
	constexpr static const FunctionPointer<UAudioComponent, bool, const TArray<FSoundWaveEnvelopeDataPerSound>&> GetCookedEnvelopeDataForAllPlayingSounds = { 0x4727130, 28 }; 
	// Function /Script/Engine.AudioComponent.GetCookedEnvelopeData
	constexpr static const FunctionPointer<UAudioComponent, bool, const float&> GetCookedEnvelopeData = { 0x4727230, 29 }; 
	// Function /Script/Engine.AudioComponent.FadeOut
	constexpr static const FunctionPointer<UAudioComponent, void, const float, const float, const EAudioFaderCurve> FadeOut = { 0x282a1a0, 30 }; 
	// Function /Script/Engine.AudioComponent.FadeIn
	constexpr static const FunctionPointer<UAudioComponent, void, const float, const float, const float, const EAudioFaderCurve> FadeIn = { 0x282a390, 31 }; 
	// Function /Script/Engine.AudioComponent.BP_GetAttenuationSettingsToApply
	constexpr static const FunctionPointer<UAudioComponent, bool, const FSoundAttenuationSettings&> BP_GetAttenuationSettingsToApply = { 0x4727000, 32 }; 
	// Function /Script/Engine.AudioComponent.AdjustVolume
	constexpr static const FunctionPointer<UAudioComponent, void, const float, const float, const EAudioFaderCurve> AdjustVolume = { 0x4728900, 33 }; 
	// Function /Script/Engine.AudioComponent.AdjustAttenuation
	constexpr static const FunctionPointer<UAudioComponent, void, const FSoundAttenuationSettings&> AdjustAttenuation = { 0x4727fa0, 34 }; 
};

/// Class /Script/Engine.AssetUserData
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAssetUserData : public UObject
{ 
public:
};

/// Class /Script/Engine.SaveGame
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USaveGame : public UObject
{ 
public:
};

/// Class /Script/Engine.GameMode
/// Size: 0x03B0 (944 bytes) (0x000368 - 0x0003B0) align n/a MaxSize: 0x03B0
class AGameMode : public AGameModeBase
{ 
public:
	FName                                              MatchState;                                                 // 0x0368   (0x0008)  
	bool                                               bDelayedStart : 1;                                          // 0x0370:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0371   (0x0003)  MISSED
	int32_t                                            NumSpectators;                                              // 0x0374   (0x0004)  
	int32_t                                            NumPlayers;                                                 // 0x0378   (0x0004)  
	int32_t                                            NumBots;                                                    // 0x037C   (0x0004)  
	float                                              MinRespawnDelay;                                            // 0x0380   (0x0004)  
	int32_t                                            NumTravellingPlayers;                                       // 0x0384   (0x0004)  
	class UClass*                                      EngineMessageClass;                                         // 0x0388   (0x0008)  
	TArray<class APlayerState*>                        InactivePlayerArray;                                        // 0x0390   (0x0010)  
	float                                              InactivePlayerStateLifeSpan;                                // 0x03A0   (0x0004)  
	int32_t                                            MaxInactivePlayers;                                         // 0x03A4   (0x0004)  
	bool                                               bHandleDedicatedServerReplays;                              // 0x03A8   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x03A9   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.GameMode.StartMatch
	constexpr static const FunctionPointer<AGameMode, void> StartMatch = { 0x478e880, 0 }; 
	// Function /Script/Engine.GameMode.SetBandwidthLimit
	constexpr static const FunctionPointer<AGameMode, void, const float> SetBandwidthLimit = { 0x478e600, 1 }; 
	// Function /Script/Engine.GameMode.Say
	constexpr static const FunctionPointer<AGameMode, void, const FString> Say = { 0x478e6d0, 2 }; 
	// Function /Script/Engine.GameMode.RestartGame
	constexpr static const FunctionPointer<AGameMode, void> RestartGame = { 0x478e840, 3 }; 
	// Function /Script/Engine.GameMode.ReadyToStartMatch
	constexpr static const FunctionPointer<AGameMode, bool> ReadyToStartMatch = { 0x478e7f0, 4 }; 
	// Function /Script/Engine.GameMode.ReadyToEndMatch
	constexpr static const FunctionPointer<AGameMode, bool> ReadyToEndMatch = { 0x478e7c0, 5 }; 
	// Function /Script/Engine.GameMode.K2_OnSetMatchState
	constexpr static const FunctionPointer<AGameMode, void, const FName> K2_OnSetMatchState = { 0x2bbb090, 6 }; 
	// Function /Script/Engine.GameMode.IsMatchInProgress
	constexpr static const FunctionPointer<AGameMode, bool> IsMatchInProgress = { 0x4751f50, 7 }; 
	// Function /Script/Engine.GameMode.GetMatchState
	constexpr static const FunctionPointer<AGameMode, FName> GetMatchState = { 0x478e8a0, 8 }; 
	// Function /Script/Engine.GameMode.EndMatch
	constexpr static const FunctionPointer<AGameMode, void> EndMatch = { 0x478e860, 9 }; 
	// Function /Script/Engine.GameMode.AbortMatch
	constexpr static const FunctionPointer<AGameMode, void> AbortMatch = { 0x478e820, 10 }; 
};

/// Class /Script/Engine.GameStateBase
/// Size: 0x0318 (792 bytes) (0x0002C8 - 0x000318) align n/a MaxSize: 0x0318
class AGameStateBase : public AInfo
{ 
public:
	class UClass*                                      GameModeClass;                                              // 0x02C8   (0x0008)  
	class AGameModeBase*                               AuthorityGameMode;                                          // 0x02D0   (0x0008)  
	class UClass*                                      SpectatorClass;                                             // 0x02D8   (0x0008)  
	TArray<class APlayerState*>                        PlayerArray;                                                // 0x02E0   (0x0010)  
	bool                                               bReplicatedHasBegunPlay;                                    // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x02F1   (0x0003)  MISSED
	float                                              ReplicatedWorldTimeSeconds;                                 // 0x02F4   (0x0004)  
	float                                              ServerWorldTimeSecondsDelta;                                // 0x02F8   (0x0004)  
	float                                              ServerWorldTimeSecondsUpdateFrequency;                      // 0x02FC   (0x0004)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x0300   (0x0018)  MISSED

	/// Functions
	// Function /Script/Engine.GameStateBase.OnRep_SpectatorClass
	constexpr static const FunctionPointer<AGameStateBase, void> OnRep_SpectatorClass = { 0x4762dc0, 0 }; 
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedWorldTimeSeconds
	constexpr static const FunctionPointer<AGameStateBase, void> OnRep_ReplicatedWorldTimeSeconds = { 0x4790070, 1 }; 
	// Function /Script/Engine.GameStateBase.OnRep_ReplicatedHasBegunPlay
	constexpr static const FunctionPointer<AGameStateBase, void> OnRep_ReplicatedHasBegunPlay = { 0x14b27d0, 2 }; 
	// Function /Script/Engine.GameStateBase.OnRep_GameModeClass
	constexpr static const FunctionPointer<AGameStateBase, void> OnRep_GameModeClass = { 0x4762de0, 3 }; 
	// Function /Script/Engine.GameStateBase.HasMatchStarted
	constexpr static const FunctionPointer<AGameStateBase, bool> HasMatchStarted = { 0x122e750, 4 }; 
	// Function /Script/Engine.GameStateBase.HasMatchEnded
	constexpr static const FunctionPointer<AGameStateBase, bool> HasMatchEnded = { 0x47b0f50, 5 }; 
	// Function /Script/Engine.GameStateBase.HasBegunPlay
	constexpr static const FunctionPointer<AGameStateBase, bool> HasBegunPlay = { 0x47b0f80, 6 }; 
	// Function /Script/Engine.GameStateBase.GetServerWorldTimeSeconds
	constexpr static const FunctionPointer<AGameStateBase, float> GetServerWorldTimeSeconds = { 0x47b0fb0, 7 }; 
	// Function /Script/Engine.GameStateBase.GetPlayerStartTime
	constexpr static const FunctionPointer<AGameStateBase, float, const AController*> GetPlayerStartTime = { 0x47b0e60, 8 }; 
	// Function /Script/Engine.GameStateBase.GetPlayerRespawnDelay
	constexpr static const FunctionPointer<AGameStateBase, float, const AController*> GetPlayerRespawnDelay = { 0x47b0d70, 9 }; 
};

/// Class /Script/Engine.GameState
/// Size: 0x0338 (824 bytes) (0x000318 - 0x000338) align n/a MaxSize: 0x0338
class AGameState : public AGameStateBase
{ 
public:
	FName                                              MatchState;                                                 // 0x0318   (0x0008)  
	FName                                              PreviousMatchState;                                         // 0x0320   (0x0008)  
	int32_t                                            ElapsedTime;                                                // 0x0328   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x032C   (0x000C)  MISSED

	/// Functions
	// Function /Script/Engine.GameState.OnRep_MatchState
	constexpr static const FunctionPointer<AGameState, void> OnRep_MatchState = { 0x47b0ac0, 0 }; 
	// Function /Script/Engine.GameState.OnRep_ElapsedTime
	constexpr static const FunctionPointer<AGameState, void> OnRep_ElapsedTime = { 0x478ff30, 1 }; 
};

/// Class /Script/Engine.ApplicationLifecycleComponent
/// Size: 0x0150 (336 bytes) (0x0000C0 - 0x000150) align n/a MaxSize: 0x0150
class UApplicationLifecycleComponent : public UActorComponent
{ 
public:
	FMulticastInlineDelegate                           ApplicationWillDeactivateDelegate;                          // 0x00C0   (0x0010)  
	FMulticastInlineDelegate                           ApplicationHasReactivatedDelegate;                          // 0x00D0   (0x0010)  
	FMulticastInlineDelegate                           ApplicationWillEnterBackgroundDelegate;                     // 0x00E0   (0x0010)  
	FMulticastInlineDelegate                           ApplicationHasEnteredForegroundDelegate;                    // 0x00F0   (0x0010)  
	FMulticastInlineDelegate                           ApplicationWillTerminateDelegate;                           // 0x0100   (0x0010)  
	FMulticastInlineDelegate                           ApplicationShouldUnloadResourcesDelegate;                   // 0x0110   (0x0010)  
	FMulticastInlineDelegate                           ApplicationReceivedStartupArgumentsDelegate;                // 0x0120   (0x0010)  
	FMulticastInlineDelegate                           OnTemperatureChangeDelegate;                                // 0x0130   (0x0010)  
	FMulticastInlineDelegate                           OnLowPowerModeDelegate;                                     // 0x0140   (0x0010)  
};

/// Class /Script/Engine.CameraShakeBase
/// Size: 0x00B0 (176 bytes) (0x000028 - 0x0000B0) align n/a MaxSize: 0x00A8
class UCameraShakeBase : public UObject
{ 
public:
	bool                                               bSingleInstance;                                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              ShakeScale;                                                 // 0x002C   (0x0004)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0030   (0x0008)  MISSED
	class APlayerCameraManager*                        CameraManager;                                              // 0x0038   (0x0008)  
	unsigned char                                      UnknownData05_7[0x68];                                      // 0x0040   (0x0068)  MISSED
};

/// Class /Script/Engine.MovementComponent
/// Size: 0x0100 (256 bytes) (0x0000C0 - 0x000100) align n/a MaxSize: 0x0100
class UMovementComponent : public UActorComponent
{ 
public:
	class USceneComponent*                             UpdatedComponent;                                           // 0x00C0   (0x0008)  
	class UPrimitiveComponent*                         UpdatedPrimitive;                                           // 0x00C8   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00D0   (0x0004)  MISSED
	FVector                                            Velocity;                                                   // 0x00D4   (0x000C)  
	FVector                                            PlaneConstraintNormal;                                      // 0x00E0   (0x000C)  
	FVector                                            PlaneConstraintOrigin;                                      // 0x00EC   (0x000C)  
	bool                                               bUpdateOnlyIfRendered : 1;                                  // 0x00F8:0 (0x0001)  
	bool                                               bAutoUpdateTickRegistration : 1;                            // 0x00F8:1 (0x0001)  
	bool                                               bTickBeforeOwner : 1;                                       // 0x00F8:2 (0x0001)  
	bool                                               bAutoRegisterUpdatedComponent : 1;                          // 0x00F8:3 (0x0001)  
	bool                                               bConstrainToPlane : 1;                                      // 0x00F8:4 (0x0001)  
	bool                                               bSnapToPlaneAtStart : 1;                                    // 0x00F8:5 (0x0001)  
	bool                                               bAutoRegisterPhysicsVolumeUpdates : 1;                      // 0x00F8:6 (0x0001)  
	bool                                               bComponentShouldUpdatePhysicsVolume : 1;                    // 0x00F8:7 (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x00F9   (0x0002)  MISSED
	EPlaneConstraintAxisSetting                        PlaneConstraintAxisSetting;                                 // 0x00FB   (0x0001)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x00FC   (0x0004)  MISSED

	/// Functions
	// Function /Script/Engine.MovementComponent.StopMovementImmediately
	constexpr static const FunctionPointer<UMovementComponent, void> StopMovementImmediately = { 0x48c7690, 0 }; 
	// Function /Script/Engine.MovementComponent.SnapUpdatedComponentToPlane
	constexpr static const FunctionPointer<UMovementComponent, void> SnapUpdatedComponentToPlane = { 0x48c66d0, 1 }; 
	// Function /Script/Engine.MovementComponent.SetUpdatedComponent
	constexpr static const FunctionPointer<UMovementComponent, void, const USceneComponent*> SetUpdatedComponent = { 0x48c74a0, 2 }; 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintOrigin
	constexpr static const FunctionPointer<UMovementComponent, void, const FVector> SetPlaneConstraintOrigin = { 0x48c6b30, 3 }; 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintNormal
	constexpr static const FunctionPointer<UMovementComponent, void, const FVector> SetPlaneConstraintNormal = { 0x48c6da0, 4 }; 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintFromVectors
	constexpr static const FunctionPointer<UMovementComponent, void, const FVector, const FVector> SetPlaneConstraintFromVectors = { 0x48c6c10, 5 }; 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintEnabled
	constexpr static const FunctionPointer<UMovementComponent, void, const bool> SetPlaneConstraintEnabled = { 0x48c6a50, 6 }; 
	// Function /Script/Engine.MovementComponent.SetPlaneConstraintAxisSetting
	constexpr static const FunctionPointer<UMovementComponent, void, const EPlaneConstraintAxisSetting> SetPlaneConstraintAxisSetting = { 0x48c6ea0, 7 }; 
	// Function /Script/Engine.MovementComponent.PhysicsVolumeChanged
	constexpr static const FunctionPointer<UMovementComponent, void, const APhysicsVolume*> PhysicsVolumeChanged = { 0x48c7580, 8 }; 
	// Function /Script/Engine.MovementComponent.K2_MoveUpdatedComponent
	constexpr static const FunctionPointer<UMovementComponent, bool, const FVector, const FRotator, const FHitResult&, const bool, const bool> K2_MoveUpdatedComponent = { 0x48c6f70, 9 }; 
	// Function /Script/Engine.MovementComponent.K2_GetModifiedMaxSpeed
	constexpr static const FunctionPointer<UMovementComponent, float> K2_GetModifiedMaxSpeed = { 0x48c77a0, 10 }; 
	// Function /Script/Engine.MovementComponent.K2_GetMaxSpeedModifier
	constexpr static const FunctionPointer<UMovementComponent, float> K2_GetMaxSpeedModifier = { 0x48c77e0, 11 }; 
	// Function /Script/Engine.MovementComponent.IsExceedingMaxSpeed
	constexpr static const FunctionPointer<UMovementComponent, bool, const float> IsExceedingMaxSpeed = { 0x48c76b0, 12 }; 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintOrigin
	constexpr static const FunctionPointer<UMovementComponent, FVector> GetPlaneConstraintOrigin = { 0x48c69f0, 13 }; 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintNormal
	constexpr static const FunctionPointer<UMovementComponent, FVector> GetPlaneConstraintNormal = { 0x48c6a20, 14 }; 
	// Function /Script/Engine.MovementComponent.GetPlaneConstraintAxisSetting
	constexpr static const FunctionPointer<UMovementComponent, EPlaneConstraintAxisSetting> GetPlaneConstraintAxisSetting = { 0x48c6e80, 15 }; 
	// Function /Script/Engine.MovementComponent.GetPhysicsVolume
	constexpr static const FunctionPointer<UMovementComponent, APhysicsVolume*> GetPhysicsVolume = { 0x48c7660, 16 }; 
	// Function /Script/Engine.MovementComponent.GetMaxSpeed
	constexpr static const FunctionPointer<UMovementComponent, float> GetMaxSpeed = { 0x48c7860, 17 }; 
	// Function /Script/Engine.MovementComponent.GetGravityZ
	constexpr static const FunctionPointer<UMovementComponent, float> GetGravityZ = { 0x48c78a0, 18 }; 
	// Function /Script/Engine.MovementComponent.GetCachedMaxSpeed
	constexpr static const FunctionPointer<UMovementComponent, float> GetCachedMaxSpeed = { 0x48c7820, 19 }; 
	// Function /Script/Engine.MovementComponent.ConstrainNormalToPlane
	constexpr static const FunctionPointer<UMovementComponent, FVector, const FVector> ConstrainNormalToPlane = { 0x48c66f0, 20 }; 
	// Function /Script/Engine.MovementComponent.ConstrainLocationToPlane
	constexpr static const FunctionPointer<UMovementComponent, FVector, const FVector> ConstrainLocationToPlane = { 0x48c67f0, 21 }; 
	// Function /Script/Engine.MovementComponent.ConstrainDirectionToPlane
	constexpr static const FunctionPointer<UMovementComponent, FVector, const FVector> ConstrainDirectionToPlane = { 0x48c68f0, 22 }; 
};

/// Struct /Script/Engine.MovementProperties
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FMovementProperties
{ 
	bool                                               bCanCrouch : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bCanJump : 1;                                               // 0x0000:1 (0x0001)  
	bool                                               bCanWalk : 1;                                               // 0x0000:2 (0x0001)  
	bool                                               bCanSwim : 1;                                               // 0x0000:3 (0x0001)  
	bool                                               bCanFly : 1;                                                // 0x0000:4 (0x0001)  
};

/// Struct /Script/Engine.NavAgentProperties
/// Size: 0x0030 (48 bytes) (0x000001 - 0x000030) align n/a MaxSize: 0x0030
struct FNavAgentProperties : FMovementProperties
{ 
	unsigned char                                      UnknownData02_8[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              AgentRadius;                                                // 0x0004   (0x0004)  
	float                                              AgentHeight;                                                // 0x0008   (0x0004)  
	float                                              AgentStepHeight;                                            // 0x000C   (0x0004)  
	float                                              NavWalkingSearchHeightScale;                                // 0x0010   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FSoftClassPath                                     PreferredNavData;                                           // 0x0018   (0x0018)  
};

/// Class /Script/Engine.NavMovementComponent
/// Size: 0x0150 (336 bytes) (0x000100 - 0x000150) align n/a MaxSize: 0x0150
class UNavMovementComponent : public UMovementComponent
{ 
public:
	FNavAgentProperties                                NavAgentProps;                                              // 0x0100   (0x0030)  
	float                                              FixedPathBrakingDistance;                                   // 0x0130   (0x0004)  
	bool                                               bUpdateNavAgentWithOwnersCollision : 1;                     // 0x0134:0 (0x0001)  
	bool                                               bUseAccelerationForPaths : 1;                               // 0x0134:1 (0x0001)  
	bool                                               bUseFixedBrakingDistanceForPaths : 1;                       // 0x0134:2 (0x0001)  
	unsigned char                                      UnknownBit03 : 1;                                           // 0x0134:3 (0x0001)  MISSED
	bool                                               bUseDeaccelerationForNearEnd : 1;                           // 0x0134:4 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0135   (0x0003)  MISSED
	float                                              DeaccelerationMaxDistance;                                  // 0x0138   (0x0004)  
	float                                              DeaccelerationMinDistance;                                  // 0x013C   (0x0004)  
	float                                              DeaccelerationMinPercent;                                   // 0x0140   (0x0004)  
	FMovementProperties                                MovementState;                                              // 0x0144   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0145   (0x0003)  MISSED
	class UObject*                                     PathFollowingComp;                                          // 0x0148   (0x0008)  

	/// Functions
	// Function /Script/Engine.NavMovementComponent.StopMovementKeepPathing
	constexpr static const FunctionPointer<UNavMovementComponent, void> StopMovementKeepPathing = { 0x48cc340, 0 }; 
	// Function /Script/Engine.NavMovementComponent.StopActiveMovement
	constexpr static const FunctionPointer<UNavMovementComponent, void> StopActiveMovement = { 0x48cc380, 1 }; 
	// Function /Script/Engine.NavMovementComponent.IsSwimming
	constexpr static const FunctionPointer<UNavMovementComponent, bool> IsSwimming = { 0x48cc310, 2 }; 
	// Function /Script/Engine.NavMovementComponent.IsMovingOnGround
	constexpr static const FunctionPointer<UNavMovementComponent, bool> IsMovingOnGround = { 0x4759a50, 3 }; 
	// Function /Script/Engine.NavMovementComponent.IsFlying
	constexpr static const FunctionPointer<UNavMovementComponent, bool> IsFlying = { 0x48cc2e0, 4 }; 
	// Function /Script/Engine.NavMovementComponent.IsFalling
	constexpr static const FunctionPointer<UNavMovementComponent, bool> IsFalling = { 0x27ee320, 5 }; 
	// Function /Script/Engine.NavMovementComponent.IsCrouching
	constexpr static const FunctionPointer<UNavMovementComponent, bool> IsCrouching = { 0x27ee350, 6 }; 
};

/// Class /Script/Engine.PawnMovementComponent
/// Size: 0x0158 (344 bytes) (0x000150 - 0x000158) align n/a MaxSize: 0x0158
class UPawnMovementComponent : public UNavMovementComponent
{ 
public:
	class APawn*                                       PawnOwner;                                                  // 0x0150   (0x0008)  

	/// Functions
	// Function /Script/Engine.PawnMovementComponent.K2_GetInputVector
	constexpr static const FunctionPointer<UPawnMovementComponent, FVector> K2_GetInputVector = { 0x48faa90, 0 }; 
	// Function /Script/Engine.PawnMovementComponent.IsMoveInputIgnored
	constexpr static const FunctionPointer<UPawnMovementComponent, bool> IsMoveInputIgnored = { 0x48fab20, 1 }; 
	// Function /Script/Engine.PawnMovementComponent.GetPendingInputVector
	constexpr static const FunctionPointer<UPawnMovementComponent, FVector> GetPendingInputVector = { 0x48faa90, 2 }; 
	// Function /Script/Engine.PawnMovementComponent.GetPawnOwner
	constexpr static const FunctionPointer<UPawnMovementComponent, APawn*> GetPawnOwner = { 0x48fab00, 3 }; 
	// Function /Script/Engine.PawnMovementComponent.GetLastInputVector
	constexpr static const FunctionPointer<UPawnMovementComponent, FVector> GetLastInputVector = { 0x48fab50, 4 }; 
	// Function /Script/Engine.PawnMovementComponent.ConsumeInputVector
	constexpr static const FunctionPointer<UPawnMovementComponent, FVector> ConsumeInputVector = { 0x2838f10, 5 }; 
	// Function /Script/Engine.PawnMovementComponent.AddInputVector
	constexpr static const FunctionPointer<UPawnMovementComponent, void, const FVector, const bool> AddInputVector = { 0x48fabc0, 6 }; 
};

/// Struct /Script/Engine.Vector_NetQuantize
/// Size: 0x000C (12 bytes) (0x00000C - 0x00000C) align n/a MaxSize: 0x000C
struct FVector_NetQuantize : FVector
{ 
};

/// Struct /Script/Engine.Vector_NetQuantizeNormal
/// Size: 0x000C (12 bytes) (0x00000C - 0x00000C) align n/a MaxSize: 0x000C
struct FVector_NetQuantizeNormal : FVector
{ 
};

/// Struct /Script/Engine.HitResult
/// Size: 0x008C (140 bytes) (0x000000 - 0x00008C) align n/a MaxSize: 0x008C
struct FHitResult
{ 
	bool                                               bBlockingHit : 1;                                           // 0x0000:0 (0x0001)  
	bool                                               bStartPenetrating : 1;                                      // 0x0000:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            FaceIndex;                                                  // 0x0004   (0x0004)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
	float                                              Distance;                                                   // 0x000C   (0x0004)  
	FVector_NetQuantize                                Location;                                                   // 0x0010   (0x000C)  
	FVector_NetQuantize                                ImpactPoint;                                                // 0x001C   (0x000C)  
	FVector_NetQuantizeNormal                          Normal;                                                     // 0x0028   (0x000C)  
	FVector_NetQuantizeNormal                          ImpactNormal;                                               // 0x0034   (0x000C)  
	FVector_NetQuantize                                TraceStart;                                                 // 0x0040   (0x000C)  
	FVector_NetQuantize                                TraceEnd;                                                   // 0x004C   (0x000C)  
	float                                              PenetrationDepth;                                           // 0x0058   (0x0004)  
	int32_t                                            Item;                                                       // 0x005C   (0x0004)  
	char                                               ElementIndex;                                               // 0x0060   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	TWeakObjectPtr<class UPhysicalMaterial*>           PhysMaterial;                                               // 0x0064   (0x0008)  
	TWeakObjectPtr<class AActor*>                      Actor;                                                      // 0x006C   (0x0008)  
	TWeakObjectPtr<class UPrimitiveComponent*>         Component;                                                  // 0x0074   (0x0008)  
	FName                                              BoneName;                                                   // 0x007C   (0x0008)  
	FName                                              MyBoneName;                                                 // 0x0084   (0x0008)  
};

/// Struct /Script/Engine.FindFloorResult
/// Size: 0x00A4 (164 bytes) (0x000000 - 0x0000A4) align n/a MaxSize: 0x00A4
struct FFindFloorResult
{ 
	bool                                               bBlockingHit : 1;                                           // 0x0000:0 (0x0001)  
	bool                                               bWalkableFloor : 1;                                         // 0x0000:1 (0x0001)  
	bool                                               bLineTrace : 1;                                             // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              FloorDist;                                                  // 0x0004   (0x0004)  
	float                                              LineDist;                                                   // 0x0008   (0x0004)  
	FHitResult                                         HitResult;                                                  // 0x000C   (0x008C)  
	float                                              FloorMaxStepHeight;                                         // 0x0098   (0x0004)  
	float                                              FloorWalkableFloorAngle;                                    // 0x009C   (0x0004)  
	float                                              FloorWalkableFloorZ;                                        // 0x00A0   (0x0004)  
};

/// Struct /Script/Engine.NavAvoidanceMask
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FNavAvoidanceMask
{ 
	bool                                               bGroup0 : 1;                                                // 0x0000:0 (0x0001)  
	bool                                               bGroup1 : 1;                                                // 0x0000:1 (0x0001)  
	bool                                               bGroup2 : 1;                                                // 0x0000:2 (0x0001)  
	bool                                               bGroup3 : 1;                                                // 0x0000:3 (0x0001)  
	bool                                               bGroup4 : 1;                                                // 0x0000:4 (0x0001)  
	bool                                               bGroup5 : 1;                                                // 0x0000:5 (0x0001)  
	bool                                               bGroup6 : 1;                                                // 0x0000:6 (0x0001)  
	bool                                               bGroup7 : 1;                                                // 0x0000:7 (0x0001)  
	bool                                               bGroup8 : 1;                                                // 0x0001:0 (0x0001)  
	bool                                               bGroup9 : 1;                                                // 0x0001:1 (0x0001)  
	bool                                               bGroup10 : 1;                                               // 0x0001:2 (0x0001)  
	bool                                               bGroup11 : 1;                                               // 0x0001:3 (0x0001)  
	bool                                               bGroup12 : 1;                                               // 0x0001:4 (0x0001)  
	bool                                               bGroup13 : 1;                                               // 0x0001:5 (0x0001)  
	bool                                               bGroup14 : 1;                                               // 0x0001:6 (0x0001)  
	bool                                               bGroup15 : 1;                                               // 0x0001:7 (0x0001)  
	bool                                               bGroup16 : 1;                                               // 0x0002:0 (0x0001)  
	bool                                               bGroup17 : 1;                                               // 0x0002:1 (0x0001)  
	bool                                               bGroup18 : 1;                                               // 0x0002:2 (0x0001)  
	bool                                               bGroup19 : 1;                                               // 0x0002:3 (0x0001)  
	bool                                               bGroup20 : 1;                                               // 0x0002:4 (0x0001)  
	bool                                               bGroup21 : 1;                                               // 0x0002:5 (0x0001)  
	bool                                               bGroup22 : 1;                                               // 0x0002:6 (0x0001)  
	bool                                               bGroup23 : 1;                                               // 0x0002:7 (0x0001)  
	bool                                               bGroup24 : 1;                                               // 0x0003:0 (0x0001)  
	bool                                               bGroup25 : 1;                                               // 0x0003:1 (0x0001)  
	bool                                               bGroup26 : 1;                                               // 0x0003:2 (0x0001)  
	bool                                               bGroup27 : 1;                                               // 0x0003:3 (0x0001)  
	bool                                               bGroup28 : 1;                                               // 0x0003:4 (0x0001)  
	bool                                               bGroup29 : 1;                                               // 0x0003:5 (0x0001)  
	bool                                               bGroup30 : 1;                                               // 0x0003:6 (0x0001)  
	bool                                               bGroup31 : 1;                                               // 0x0003:7 (0x0001)  
};

/// Struct /Script/Engine.CharacterMovementComponentPostPhysicsTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FCharacterMovementComponentPostPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.CharacterMovementComponent
/// Size: 0x0B50 (2896 bytes) (0x000158 - 0x000B50) align n/a MaxSize: 0x0B50
class UCharacterMovementComponent : public UPawnMovementComponent
{ 
public:
	unsigned char                                      UnknownData19_8[0x10];                                      // 0x0158   (0x0010)  MISSED
	class ACharacter*                                  CharacterOwner;                                             // 0x0168   (0x0008)  
	unsigned char                                      UnknownData20_6[0x14];                                      // 0x0170   (0x0014)  MISSED
	float                                              GravityScale;                                               // 0x0184   (0x0004)  
	float                                              MaxStepHeight;                                              // 0x0188   (0x0004)  
	float                                              JumpZVelocity;                                              // 0x018C   (0x0004)  
	float                                              JumpOffJumpZFactor;                                         // 0x0190   (0x0004)  
	float                                              WalkableFloorAngle;                                         // 0x0194   (0x0004)  
	float                                              WalkableFloorZ;                                             // 0x0198   (0x0004)  
	TEnumAsByte<EMovementMode>                         MovementMode;                                               // 0x019C   (0x0001)  
	char                                               CustomMovementMode;                                         // 0x019D   (0x0001)  
	ENetworkSmoothingMode                              NetworkSmoothingMode;                                       // 0x019E   (0x0001)  
	bool                                               bOverrideFloorWalkableValue;                                // 0x019F   (0x0001)  
	float                                              GroundFriction;                                             // 0x01A0   (0x0004)  
	unsigned char                                      UnknownData21_6[0x28];                                      // 0x01A4   (0x0028)  MISSED
	float                                              MaxWalkSpeed;                                               // 0x01CC   (0x0004)  
	float                                              MaxWalkSpeedCrouched;                                       // 0x01D0   (0x0004)  
	float                                              MaxSwimSpeed;                                               // 0x01D4   (0x0004)  
	float                                              MaxFlySpeed;                                                // 0x01D8   (0x0004)  
	float                                              MaxCustomMovementSpeed;                                     // 0x01DC   (0x0004)  
	float                                              MaxAcceleration;                                            // 0x01E0   (0x0004)  
	float                                              MinAnalogWalkSpeed;                                         // 0x01E4   (0x0004)  
	float                                              BrakingFrictionFactor;                                      // 0x01E8   (0x0004)  
	float                                              BrakingFriction;                                            // 0x01EC   (0x0004)  
	float                                              BrakingSubStepTime;                                         // 0x01F0   (0x0004)  
	float                                              BrakingDecelerationWalking;                                 // 0x01F4   (0x0004)  
	float                                              BrakingDecelerationFalling;                                 // 0x01F8   (0x0004)  
	float                                              BrakingDecelerationSwimming;                                // 0x01FC   (0x0004)  
	float                                              BrakingDecelerationFlying;                                  // 0x0200   (0x0004)  
	float                                              AirControl;                                                 // 0x0204   (0x0004)  
	float                                              AirControlBoostMultiplier;                                  // 0x0208   (0x0004)  
	float                                              AirControlBoostVelocityThreshold;                           // 0x020C   (0x0004)  
	float                                              FallingLateralFriction;                                     // 0x0210   (0x0004)  
	float                                              CrouchedHalfHeight;                                         // 0x0214   (0x0004)  
	float                                              Buoyancy;                                                   // 0x0218   (0x0004)  
	float                                              PerchRadiusThreshold;                                       // 0x021C   (0x0004)  
	float                                              PerchAdditionalHeight;                                      // 0x0220   (0x0004)  
	FRotator                                           RotationRate;                                               // 0x0224   (0x000C)  
	bool                                               bUseSeparateBrakingFriction : 1;                            // 0x0230:0 (0x0001)  
	bool                                               bApplyGravityWhileJumping : 1;                              // 0x0230:1 (0x0001)  
	bool                                               bUseControllerDesiredRotation : 1;                          // 0x0230:2 (0x0001)  
	bool                                               bOrientRotationToMovement : 1;                              // 0x0230:3 (0x0001)  
	bool                                               bSweepWhileNavWalking : 1;                                  // 0x0230:4 (0x0001)  
	unsigned char                                      UnknownBit22 : 1;                                           // 0x0230:5 (0x0001)  MISSED
	bool                                               bMovementInProgress : 1;                                    // 0x0230:6 (0x0001)  
	bool                                               bEnableScopedMovementUpdates : 1;                           // 0x0230:7 (0x0001)  
	bool                                               bEnableServerDualMoveScopedMovementUpdates : 1;             // 0x0231:0 (0x0001)  
	bool                                               bForceMaxAccel : 1;                                         // 0x0231:1 (0x0001)  
	bool                                               bRunPhysicsWithNoController : 1;                            // 0x0231:2 (0x0001)  
	bool                                               bForceNextFloorCheck : 1;                                   // 0x0231:3 (0x0001)  
	bool                                               bShrinkProxyCapsule : 1;                                    // 0x0231:4 (0x0001)  
	bool                                               bCanWalkOffLedges : 1;                                      // 0x0231:5 (0x0001)  
	bool                                               bCanWalkOffLedgesWhenCrouching : 1;                         // 0x0231:6 (0x0001)  
	unsigned char                                      UnknownBit23 : 1;                                           // 0x0231:7 (0x0001)  MISSED
	unsigned char                                      UnknownBit24 : 1;                                           // 0x0232:0 (0x0001)  MISSED
	bool                                               bNetworkSkipProxyPredictionOnNetUpdate : 1;                 // 0x0232:1 (0x0001)  
	bool                                               bNetworkAlwaysReplicateTransformUpdateTimestamp : 1;        // 0x0232:2 (0x0001)  
	bool                                               bDeferUpdateMoveComponent : 1;                              // 0x0232:3 (0x0001)  
	bool                                               bEnablePhysicsInteraction : 1;                              // 0x0232:4 (0x0001)  
	bool                                               bTouchForceScaledToMass : 1;                                // 0x0232:5 (0x0001)  
	bool                                               bPushForceScaledToMass : 1;                                 // 0x0232:6 (0x0001)  
	bool                                               bPushForceUsingZOffset : 1;                                 // 0x0232:7 (0x0001)  
	bool                                               bScalePushForceToVelocity : 1;                              // 0x0233:0 (0x0001)  
	unsigned char                                      UnknownData25_5[0x4];                                       // 0x0234   (0x0004)  MISSED
	class USceneComponent*                             DeferredUpdatedMoveComponent;                               // 0x0238   (0x0008)  
	float                                              MaxOutOfWaterStepHeight;                                    // 0x0240   (0x0004)  
	float                                              OutofWaterZ;                                                // 0x0244   (0x0004)  
	float                                              Mass;                                                       // 0x0248   (0x0004)  
	float                                              StandingDownwardForceScale;                                 // 0x024C   (0x0004)  
	float                                              InitialPushForceFactor;                                     // 0x0250   (0x0004)  
	float                                              PushForceFactor;                                            // 0x0254   (0x0004)  
	float                                              PushForcePointZOffsetFactor;                                // 0x0258   (0x0004)  
	float                                              TouchForceFactor;                                           // 0x025C   (0x0004)  
	float                                              MinTouchForce;                                              // 0x0260   (0x0004)  
	float                                              MaxTouchForce;                                              // 0x0264   (0x0004)  
	float                                              RepulsionForce;                                             // 0x0268   (0x0004)  
	FVector                                            Acceleration;                                               // 0x026C   (0x000C)  
	unsigned char                                      UnknownData26_6[0x8];                                       // 0x0278   (0x0008)  MISSED
	FQuat                                              LastUpdateRotation;                                         // 0x0280   (0x0010)  
	FVector                                            LastUpdateLocation;                                         // 0x0290   (0x000C)  
	FVector                                            LastUpdateVelocity;                                         // 0x029C   (0x000C)  
	float                                              ServerLastTransformUpdateTimeStamp;                         // 0x02A8   (0x0004)  
	float                                              ServerLastClientGoodMoveAckTime;                            // 0x02AC   (0x0004)  
	float                                              ServerLastClientAdjustmentTime;                             // 0x02B0   (0x0004)  
	FVector                                            PendingImpulseToApply;                                      // 0x02B4   (0x000C)  
	FVector                                            PendingForceToApply;                                        // 0x02C0   (0x000C)  
	float                                              AnalogInputModifier;                                        // 0x02CC   (0x0004)  
	unsigned char                                      UnknownData27_6[0xC];                                       // 0x02D0   (0x000C)  MISSED
	float                                              MaxSimulationTimeStep;                                      // 0x02DC   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x02E0   (0x0004)  
	int32_t                                            MaxJumpApexAttemptsPerSimulation;                           // 0x02E4   (0x0004)  
	float                                              MaxDepenetrationWithGeometry;                               // 0x02E8   (0x0004)  
	float                                              MaxDepenetrationWithGeometryAsProxy;                        // 0x02EC   (0x0004)  
	float                                              MaxDepenetrationWithPawn;                                   // 0x02F0   (0x0004)  
	float                                              MaxDepenetrationWithPawnAsProxy;                            // 0x02F4   (0x0004)  
	float                                              NetworkSimulatedSmoothLocationTime;                         // 0x02F8   (0x0004)  
	float                                              NetworkSimulatedSmoothRotationTime;                         // 0x02FC   (0x0004)  
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;             // 0x0300   (0x0004)  
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;             // 0x0304   (0x0004)  
	float                                              NetProxyShrinkRadius;                                       // 0x0308   (0x0004)  
	float                                              NetProxyShrinkHalfHeight;                                   // 0x030C   (0x0004)  
	float                                              NetworkMaxSmoothUpdateDistance;                             // 0x0310   (0x0004)  
	float                                              NetworkNoSmoothUpdateDistance;                              // 0x0314   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAckGoodMoves;                    // 0x0318   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAdjustments;                     // 0x031C   (0x0004)  
	float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;      // 0x0320   (0x0004)  
	float                                              NetworkLargeClientCorrectionDistance;                       // 0x0324   (0x0004)  
	float                                              LedgeCheckThreshold;                                        // 0x0328   (0x0004)  
	float                                              JumpOutOfWaterPitch;                                        // 0x032C   (0x0004)  
	FFindFloorResult                                   CurrentFloor;                                               // 0x0330   (0x00A4)  
	TEnumAsByte<EMovementMode>                         DefaultLandMovementMode;                                    // 0x03D4   (0x0001)  
	TEnumAsByte<EMovementMode>                         DefaultWaterMovementMode;                                   // 0x03D5   (0x0001)  
	TEnumAsByte<EMovementMode>                         GroundMovementMode;                                         // 0x03D6   (0x0001)  
	bool                                               bMaintainHorizontalGroundVelocity : 1;                      // 0x03D7:0 (0x0001)  
	bool                                               bImpartBaseVelocityX : 1;                                   // 0x03D7:1 (0x0001)  
	bool                                               bImpartBaseVelocityY : 1;                                   // 0x03D7:2 (0x0001)  
	bool                                               bImpartBaseVelocityZ : 1;                                   // 0x03D7:3 (0x0001)  
	bool                                               bImpartBaseAngularVelocity : 1;                             // 0x03D7:4 (0x0001)  
	bool                                               bJustTeleported : 1;                                        // 0x03D7:5 (0x0001)  
	bool                                               bNetworkUpdateReceived : 1;                                 // 0x03D7:6 (0x0001)  
	bool                                               bNetworkMovementModeChanged : 1;                            // 0x03D7:7 (0x0001)  
	bool                                               bIgnoreClientMovementErrorChecksAndCorrection : 1;          // 0x03D8:0 (0x0001)  
	bool                                               bServerAcceptClientAuthoritativePosition : 1;               // 0x03D8:1 (0x0001)  
	bool                                               bNotifyApex : 1;                                            // 0x03D8:2 (0x0001)  
	bool                                               bCheatFlying : 1;                                           // 0x03D8:3 (0x0001)  
	bool                                               bWantsToCrouch : 1;                                         // 0x03D8:4 (0x0001)  
	bool                                               bCrouchMaintainsBaseLocation : 1;                           // 0x03D8:5 (0x0001)  
	bool                                               bIgnoreBaseRotation : 1;                                    // 0x03D8:6 (0x0001)  
	bool                                               bFastAttachedMove : 1;                                      // 0x03D8:7 (0x0001)  
	bool                                               bAlwaysCheckFloor : 1;                                      // 0x03D9:0 (0x0001)  
	bool                                               bUseFlatBaseForFloorChecks : 1;                             // 0x03D9:1 (0x0001)  
	bool                                               bPerformingJumpOff : 1;                                     // 0x03D9:2 (0x0001)  
	bool                                               bWantsToLeaveNavWalking : 1;                                // 0x03D9:3 (0x0001)  
	bool                                               bUseRVOAvoidance : 1;                                       // 0x03D9:4 (0x0001)  
	bool                                               bRequestedMoveUseAcceleration : 1;                          // 0x03D9:5 (0x0001)  
	unsigned char                                      UnknownBit28 : 1;                                           // 0x03D9:6 (0x0001)  MISSED
	bool                                               bWasSimulatingRootMotion : 1;                               // 0x03D9:7 (0x0001)  
	bool                                               bAllowPhysicsRotationDuringAnimRootMotion : 1;              // 0x03DA:0 (0x0001)  
	bool                                               bHasRequestedVelocity : 1;                                  // 0x03DA:1 (0x0001)  
	bool                                               bRequestedMoveWithMaxSpeed : 1;                             // 0x03DA:2 (0x0001)  
	bool                                               bWasAvoidanceUpdated : 1;                                   // 0x03DA:3 (0x0001)  
	unsigned char                                      UnknownBit29 : 1;                                           // 0x03DA:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit30 : 1;                                           // 0x03DA:5 (0x0001)  MISSED
	bool                                               bProjectNavMeshWalking : 1;                                 // 0x03DA:6 (0x0001)  
	bool                                               bProjectNavMeshOnBothWorldChannels : 1;                     // 0x03DA:7 (0x0001)  
	unsigned char                                      UnknownData31_5[0x11];                                      // 0x03DB   (0x0011)  MISSED
	float                                              AvoidanceConsiderationRadius;                               // 0x03EC   (0x0004)  
	FVector                                            RequestedVelocity;                                          // 0x03F0   (0x000C)  
	int32_t                                            AvoidanceUID;                                               // 0x03FC   (0x0004)  
	FNavAvoidanceMask                                  AvoidanceGroup;                                             // 0x0400   (0x0004)  
	FNavAvoidanceMask                                  GroupsToAvoid;                                              // 0x0404   (0x0004)  
	FNavAvoidanceMask                                  GroupsToIgnore;                                             // 0x0408   (0x0004)  
	float                                              AvoidanceWeight;                                            // 0x040C   (0x0004)  
	FVector                                            PendingLaunchVelocity;                                      // 0x0410   (0x000C)  
	unsigned char                                      UnknownData32_6[0xA8];                                      // 0x041C   (0x00A8)  MISSED
	float                                              NavMeshProjectionInterval;                                  // 0x04C4   (0x0004)  
	float                                              NavMeshProjectionTimer;                                     // 0x04C8   (0x0004)  
	float                                              NavMeshProjectionInterpSpeed;                               // 0x04CC   (0x0004)  
	float                                              NavMeshProjectionHeightScaleUp;                             // 0x04D0   (0x0004)  
	float                                              NavMeshProjectionHeightScaleDown;                           // 0x04D4   (0x0004)  
	float                                              NavWalkingFloorDistTolerance;                               // 0x04D8   (0x0004)  
	unsigned char                                      UnknownData33_6[0x4];                                       // 0x04DC   (0x0004)  MISSED
	FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                                    // 0x04E0   (0x0030)  
	unsigned char                                      UnknownData34_6[0x18];                                      // 0x0510   (0x0018)  MISSED
	float                                              MinTimeBetweenTimeStampResets;                              // 0x0528   (0x0004)  
	unsigned char                                      UnknownData35_6[0x4AC];                                     // 0x052C   (0x04AC)  MISSED
	FRootMotionSourceGroup                             CurrentRootMotion;                                          // 0x09D8   (0x0038)  
	FRootMotionSourceGroup                             ServerCorrectionRootMotion;                                 // 0x0A10   (0x0038)  
	unsigned char                                      UnknownData36_6[0x98];                                      // 0x0A48   (0x0098)  MISSED
	FRootMotionMovementParams                          RootMotionParams;                                           // 0x0AE0   (0x0040)  
	FVector                                            AnimRootMotionVelocity;                                     // 0x0B20   (0x000C)  
	unsigned char                                      UnknownData37_7[0x24];                                      // 0x0B2C   (0x0024)  MISSED

	/// Functions
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorZ
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const float> SetWalkableFloorZ = { 0x4758ea0, 0 }; 
	// Function /Script/Engine.CharacterMovementComponent.SetWalkableFloorAngle
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const float> SetWalkableFloorAngle = { 0x4758fc0, 1 }; 
	// Function /Script/Engine.CharacterMovementComponent.SetMovementMode
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const TEnumAsByte<EMovementMode>, const char> SetMovementMode = { 0x4759a80, 2 }; 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnoreMask
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const FNavAvoidanceMask&> SetGroupsToIgnoreMask = { 0x19a4730, 3 }; 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToIgnore
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const int32_t> SetGroupsToIgnore = { 0x19a4810, 4 }; 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoidMask
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const FNavAvoidanceMask&> SetGroupsToAvoidMask = { 0x19a48f0, 5 }; 
	// Function /Script/Engine.CharacterMovementComponent.SetGroupsToAvoid
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const int32_t> SetGroupsToAvoid = { 0x19a49d0, 6 }; 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroupMask
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const FNavAvoidanceMask&> SetAvoidanceGroupMask = { 0x19a4ab0, 7 }; 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceGroup
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const int32_t> SetAvoidanceGroup = { 0x19a4b90, 8 }; 
	// Function /Script/Engine.CharacterMovementComponent.SetAvoidanceEnabled
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const bool> SetAvoidanceEnabled = { 0x4759c10, 9 }; 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorZ
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> K2_GetWalkableFloorZ = { 0x4758f70, 10 }; 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetWalkableFloorAngle
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> K2_GetWalkableFloorAngle = { 0x47590d0, 11 }; 
	// Function /Script/Engine.CharacterMovementComponent.K2_GetModifiedMaxAcceleration
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> K2_GetModifiedMaxAcceleration = { 0x4759620, 12 }; 
	// Function /Script/Engine.CharacterMovementComponent.K2_FindFloor
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const FVector, const FFindFloorResult&> K2_FindFloor = { 0x4758cb0, 13 }; 
	// Function /Script/Engine.CharacterMovementComponent.K2_ComputeFloorDist
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const FVector, const float, const float, const float, const FFindFloorResult&> K2_ComputeFloorDist = { 0x4758930, 14 }; 
	// Function /Script/Engine.CharacterMovementComponent.IsWalking
	constexpr static const FunctionPointer<UCharacterMovementComponent, bool> IsWalking = { 0x4759a50, 15 }; 
	// Function /Script/Engine.CharacterMovementComponent.IsWalkable
	constexpr static const FunctionPointer<UCharacterMovementComponent, bool, const FHitResult&> IsWalkable = { 0x4759120, 16 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetValidPerchRadius
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> GetValidPerchRadius = { 0x4759250, 17 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetPerchRadiusThreshold
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> GetPerchRadiusThreshold = { 0x4759280, 18 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetMovementBase
	constexpr static const FunctionPointer<UCharacterMovementComponent, UPrimitiveComponent*> GetMovementBase = { 0x47599f0, 19 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetMinAnalogSpeed
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> GetMinAnalogSpeed = { 0x4759660, 20 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeightWithJumpTime
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> GetMaxJumpHeightWithJumpTime = { 0x47596a0, 21 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxJumpHeight
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> GetMaxJumpHeight = { 0x47596e0, 22 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxBrakingDeceleration
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> GetMaxBrakingDeceleration = { 0x47595a0, 23 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetMaxAcceleration
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> GetMaxAcceleration = { 0x47595e0, 24 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateVelocity
	constexpr static const FunctionPointer<UCharacterMovementComponent, FVector> GetLastUpdateVelocity = { 0x4759d50, 25 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateRotation
	constexpr static const FunctionPointer<UCharacterMovementComponent, FRotator> GetLastUpdateRotation = { 0x4759d80, 26 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetLastUpdateLocation
	constexpr static const FunctionPointer<UCharacterMovementComponent, FVector> GetLastUpdateLocation = { 0x4759dd0, 27 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetImpartedMovementBaseVelocity
	constexpr static const FunctionPointer<UCharacterMovementComponent, FVector> GetImpartedMovementBaseVelocity = { 0x47599b0, 28 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetCurrentAcceleration
	constexpr static const FunctionPointer<UCharacterMovementComponent, FVector> GetCurrentAcceleration = { 0x4759570, 29 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetCharacterOwner
	constexpr static const FunctionPointer<UCharacterMovementComponent, ACharacter*> GetCharacterOwner = { 0x4759bf0, 30 }; 
	// Function /Script/Engine.CharacterMovementComponent.GetAnalogInputModifier
	constexpr static const FunctionPointer<UCharacterMovementComponent, float> GetAnalogInputModifier = { 0x4759550, 31 }; 
	// Function /Script/Engine.CharacterMovementComponent.DisableMovement
	constexpr static const FunctionPointer<UCharacterMovementComponent, void> DisableMovement = { 0x4759a30, 32 }; 
	// Function /Script/Engine.CharacterMovementComponent.ClearAccumulatedForces
	constexpr static const FunctionPointer<UCharacterMovementComponent, void> ClearAccumulatedForces = { 0x4759530, 33 }; 
	// Function /Script/Engine.CharacterMovementComponent.CapsuleTouched
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const UPrimitiveComponent*, const AActor*, const UPrimitiveComponent*, const int32_t, const bool, const FHitResult&> CapsuleTouched = { 0x4758570, 34 }; 
	// Function /Script/Engine.CharacterMovementComponent.CalcVelocity
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const float, const float, const bool, const float> CalcVelocity = { 0x4759720, 35 }; 
	// Function /Script/Engine.CharacterMovementComponent.AddImpulse
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const FVector, const bool> AddImpulse = { 0x47593a0, 36 }; 
	// Function /Script/Engine.CharacterMovementComponent.AddForce
	constexpr static const FunctionPointer<UCharacterMovementComponent, void, const FVector> AddForce = { 0x47592c0, 37 }; 
};

/// Class /Script/Engine.DynamicSubsystem
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UDynamicSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.EngineSubsystem
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UEngineSubsystem : public UDynamicSubsystem
{ 
public:
};

/// Class /Script/Engine.SoundEffectSourcePreset
/// Size: 0x0068 (104 bytes) (0x000068 - 0x000068) align n/a MaxSize: 0x0068
class USoundEffectSourcePreset : public USoundEffectPreset
{ 
public:
};

/// Struct /Script/Engine.GeomSelection
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FGeomSelection
{ 
	int32_t                                            Type;                                                       // 0x0000   (0x0004)  
	int32_t                                            Index;                                                      // 0x0004   (0x0004)  
	int32_t                                            SelectionIndex;                                             // 0x0008   (0x0004)  
};

/// Class /Script/Engine.Brush
/// Size: 0x0300 (768 bytes) (0x0002C8 - 0x000300) align n/a MaxSize: 0x0300
class ABrush : public AActor
{ 
public:
	TEnumAsByte<EBrushType>                            BrushType;                                                  // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x02C9   (0x0003)  MISSED
	FColor                                             BrushColor;                                                 // 0x02CC   (0x0004)  
	int32_t                                            PolyFlags;                                                  // 0x02D0   (0x0004)  
	bool                                               bColored : 1;                                               // 0x02D4:0 (0x0001)  
	bool                                               bSolidWhenSelected : 1;                                     // 0x02D4:1 (0x0001)  
	bool                                               bPlaceableFromClassBrowser : 1;                             // 0x02D4:2 (0x0001)  
	bool                                               bNotForClientOrServer : 1;                                  // 0x02D4:3 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x02D5   (0x0003)  MISSED
	class UModel*                                      Brush;                                                      // 0x02D8   (0x0008)  
	class UBrushComponent*                             BrushComponent;                                             // 0x02E0   (0x0008)  
	bool                                               bInManipulation : 1;                                        // 0x02E8:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x7];                                       // 0x02E9   (0x0007)  MISSED
	TArray<FGeomSelection>                             SavedSelections;                                            // 0x02F0   (0x0010)  
};

/// Class /Script/Engine.Volume
/// Size: 0x0318 (792 bytes) (0x000300 - 0x000318) align n/a MaxSize: 0x0318
class AVolume : public ABrush
{ 
public:
	float                                              VolumeRadius;                                               // 0x0300   (0x0004)  
	float                                              Interp_FloatSlot1;                                          // 0x0304   (0x0004)  
	FLinearColor                                       Interp_LinearColor1;                                        // 0x0308   (0x0010)  
};

/// Class /Script/Engine.ShapeComponent
/// Size: 0x0550 (1360 bytes) (0x000538 - 0x000550) align n/a MaxSize: 0x0550
class UShapeComponent : public UPrimitiveComponent
{ 
public:
	class UBodySetup*                                  ShapeBodySetup;                                             // 0x0538   (0x0008)  
	class UClass*                                      AreaClass;                                                  // 0x0540   (0x0008)  
	FColor                                             ShapeColor;                                                 // 0x0548   (0x0004)  
	bool                                               bDrawOnlyIfSelected : 1;                                    // 0x054C:0 (0x0001)  
	bool                                               bShouldCollideWhenPlacing : 1;                              // 0x054C:1 (0x0001)  
	bool                                               bDynamicObstacle : 1;                                       // 0x054C:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x054D   (0x0003)  MISSED
};

/// Class /Script/Engine.BoxComponent
/// Size: 0x0570 (1392 bytes) (0x000550 - 0x000570) align n/a MaxSize: 0x0568
class UBoxComponent : public UShapeComponent
{ 
public:
	FVector                                            BoxExtent;                                                  // 0x0550   (0x000C)  
	float                                              LineThickness;                                              // 0x055C   (0x0004)  
	ESBSoundOcclusionSetting_BoxCollision              SoundOcclusionSetting;                                      // 0x0560   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0561   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.BoxComponent.SetBoxExtent
	constexpr static const FunctionPointer<UBoxComponent, void, const FVector, const bool> SetBoxExtent = { 0x4743010, 0 }; 
	// Function /Script/Engine.BoxComponent.GetUnscaledBoxExtent
	constexpr static const FunctionPointer<UBoxComponent, FVector> GetUnscaledBoxExtent = { 0x4742f80, 1 }; 
	// Function /Script/Engine.BoxComponent.GetScaledBoxExtent
	constexpr static const FunctionPointer<UBoxComponent, FVector> GetScaledBoxExtent = { 0x4742fb0, 2 }; 
};

/// Struct /Script/Engine.WeightedBlendable
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FWeightedBlendable
{ 
	float                                              Weight;                                                     // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UObject*                                     Object;                                                     // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.WeightedBlendables
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FWeightedBlendables
{ 
	TArray<FWeightedBlendable>                         Array;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PostProcessSettings
/// Size: 0x05A0 (1440 bytes) (0x000000 - 0x0005A0) align n/a MaxSize: 0x05A0
struct FPostProcessSettings
{ 
	bool                                               bOverride_WhiteTemp : 1;                                    // 0x0000:0 (0x0001)  
	bool                                               bOverride_WhiteTint : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bOverride_ColorSaturation : 1;                              // 0x0000:2 (0x0001)  
	bool                                               bOverride_ColorContrast : 1;                                // 0x0000:3 (0x0001)  
	bool                                               bOverride_ColorGamma : 1;                                   // 0x0000:4 (0x0001)  
	bool                                               bOverride_ColorGain : 1;                                    // 0x0000:5 (0x0001)  
	bool                                               bOverride_ColorOffset : 1;                                  // 0x0000:6 (0x0001)  
	bool                                               bOverride_ColorSaturationShadows : 1;                       // 0x0000:7 (0x0001)  
	bool                                               bOverride_ColorContrastShadows : 1;                         // 0x0001:0 (0x0001)  
	bool                                               bOverride_ColorGammaShadows : 1;                            // 0x0001:1 (0x0001)  
	bool                                               bOverride_ColorGainShadows : 1;                             // 0x0001:2 (0x0001)  
	bool                                               bOverride_ColorOffsetShadows : 1;                           // 0x0001:3 (0x0001)  
	bool                                               bOverride_ColorSaturationMidtones : 1;                      // 0x0001:4 (0x0001)  
	bool                                               bOverride_ColorContrastMidtones : 1;                        // 0x0001:5 (0x0001)  
	bool                                               bOverride_ColorGammaMidtones : 1;                           // 0x0001:6 (0x0001)  
	bool                                               bOverride_ColorGainMidtones : 1;                            // 0x0001:7 (0x0001)  
	bool                                               bOverride_ColorOffsetMidtones : 1;                          // 0x0002:0 (0x0001)  
	bool                                               bOverride_ColorSaturationHighlights : 1;                    // 0x0002:1 (0x0001)  
	bool                                               bOverride_ColorContrastHighlights : 1;                      // 0x0002:2 (0x0001)  
	bool                                               bOverride_ColorGammaHighlights : 1;                         // 0x0002:3 (0x0001)  
	bool                                               bOverride_ColorGainHighlights : 1;                          // 0x0002:4 (0x0001)  
	bool                                               bOverride_ColorOffsetHighlights : 1;                        // 0x0002:5 (0x0001)  
	bool                                               bOverride_ColorCorrectionShadowsMax : 1;                    // 0x0002:6 (0x0001)  
	bool                                               bOverride_ColorCorrectionHighlightsMin : 1;                 // 0x0002:7 (0x0001)  
	bool                                               bOverride_BlueCorrection : 1;                               // 0x0003:0 (0x0001)  
	bool                                               bOverride_ExpandGamut : 1;                                  // 0x0003:1 (0x0001)  
	bool                                               bOverride_ToneCurveAmount : 1;                              // 0x0003:2 (0x0001)  
	bool                                               bOverride_FilmWhitePoint : 1;                               // 0x0003:3 (0x0001)  
	bool                                               bOverride_FilmSaturation : 1;                               // 0x0003:4 (0x0001)  
	bool                                               bOverride_FilmChannelMixerRed : 1;                          // 0x0003:5 (0x0001)  
	bool                                               bOverride_FilmChannelMixerGreen : 1;                        // 0x0003:6 (0x0001)  
	bool                                               bOverride_FilmChannelMixerBlue : 1;                         // 0x0003:7 (0x0001)  
	bool                                               bOverride_FilmContrast : 1;                                 // 0x0004:0 (0x0001)  
	bool                                               bOverride_FilmDynamicRange : 1;                             // 0x0004:1 (0x0001)  
	bool                                               bOverride_FilmHealAmount : 1;                               // 0x0004:2 (0x0001)  
	bool                                               bOverride_FilmToeAmount : 1;                                // 0x0004:3 (0x0001)  
	bool                                               bOverride_FilmShadowTint : 1;                               // 0x0004:4 (0x0001)  
	bool                                               bOverride_FilmShadowTintBlend : 1;                          // 0x0004:5 (0x0001)  
	bool                                               bOverride_FilmShadowTintAmount : 1;                         // 0x0004:6 (0x0001)  
	bool                                               bOverride_FilmSlope : 1;                                    // 0x0004:7 (0x0001)  
	bool                                               bOverride_FilmToe : 1;                                      // 0x0005:0 (0x0001)  
	bool                                               bOverride_FilmShoulder : 1;                                 // 0x0005:1 (0x0001)  
	bool                                               bOverride_FilmBlackClip : 1;                                // 0x0005:2 (0x0001)  
	bool                                               bOverride_FilmWhiteClip : 1;                                // 0x0005:3 (0x0001)  
	bool                                               bOverride_SceneColorTint : 1;                               // 0x0005:4 (0x0001)  
	bool                                               bOverride_SceneFringeIntensity : 1;                         // 0x0005:5 (0x0001)  
	bool                                               bOverride_ChromaticAberrationStartOffset : 1;               // 0x0005:6 (0x0001)  
	bool                                               bOverride_AmbientCubemapTint : 1;                           // 0x0005:7 (0x0001)  
	bool                                               bOverride_AmbientCubemapScale : 1;                          // 0x0006:0 (0x0001)  
	bool                                               bOverride_SkyVisibilityScaleForCharacter : 1;               // 0x0006:1 (0x0001)  
	bool                                               bOverride_TonemapperSharpen : 1;                            // 0x0006:2 (0x0001)  
	bool                                               bOverride_AmbientCubemapIntensity : 1;                      // 0x0006:3 (0x0001)  
	bool                                               bOverride_BloomMethod : 1;                                  // 0x0006:4 (0x0001)  
	bool                                               bOverride_BloomIntensity : 1;                               // 0x0006:5 (0x0001)  
	bool                                               bOverride_BloomThreshold : 1;                               // 0x0006:6 (0x0001)  
	bool                                               bOverride_Bloom1Tint : 1;                                   // 0x0006:7 (0x0001)  
	bool                                               bOverride_Bloom1Size : 1;                                   // 0x0007:0 (0x0001)  
	bool                                               bOverride_Bloom2Size : 1;                                   // 0x0007:1 (0x0001)  
	bool                                               bOverride_Bloom2Tint : 1;                                   // 0x0007:2 (0x0001)  
	bool                                               bOverride_Bloom3Tint : 1;                                   // 0x0007:3 (0x0001)  
	bool                                               bOverride_Bloom3Size : 1;                                   // 0x0007:4 (0x0001)  
	bool                                               bOverride_Bloom4Tint : 1;                                   // 0x0007:5 (0x0001)  
	bool                                               bOverride_Bloom4Size : 1;                                   // 0x0007:6 (0x0001)  
	bool                                               bOverride_Bloom5Tint : 1;                                   // 0x0007:7 (0x0001)  
	bool                                               bOverride_Bloom5Size : 1;                                   // 0x0008:0 (0x0001)  
	bool                                               bOverride_Bloom6Tint : 1;                                   // 0x0008:1 (0x0001)  
	bool                                               bOverride_Bloom6Size : 1;                                   // 0x0008:2 (0x0001)  
	bool                                               bOverride_BloomSizeScale : 1;                               // 0x0008:3 (0x0001)  
	bool                                               bOverride_BloomConvolutionTexture : 1;                      // 0x0008:4 (0x0001)  
	bool                                               bOverride_BloomConvolutionSize : 1;                         // 0x0008:5 (0x0001)  
	bool                                               bOverride_BloomConvolutionCenterUV : 1;                     // 0x0008:6 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilter : 1;                    // 0x0008:7 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMin : 1;                 // 0x0009:0 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMax : 1;                 // 0x0009:1 (0x0001)  
	bool                                               bOverride_BloomConvolutionPreFilterMult : 1;                // 0x0009:2 (0x0001)  
	bool                                               bOverride_BloomConvolutionBufferScale : 1;                  // 0x0009:3 (0x0001)  
	bool                                               bOverride_BloomDirtMaskIntensity : 1;                       // 0x0009:4 (0x0001)  
	bool                                               bOverride_BloomDirtMaskTint : 1;                            // 0x0009:5 (0x0001)  
	bool                                               bOverride_BloomDirtMask : 1;                                // 0x0009:6 (0x0001)  
	bool                                               bOverride_CameraShutterSpeed : 1;                           // 0x0009:7 (0x0001)  
	bool                                               bOverride_CameraISO : 1;                                    // 0x000A:0 (0x0001)  
	bool                                               bOverride_AutoExposureMethod : 1;                           // 0x000A:1 (0x0001)  
	bool                                               bOverride_AutoExposureLowPercent : 1;                       // 0x000A:2 (0x0001)  
	bool                                               bOverride_AutoExposureHighPercent : 1;                      // 0x000A:3 (0x0001)  
	bool                                               bOverride_AutoExposureMinBrightness : 1;                    // 0x000A:4 (0x0001)  
	bool                                               bOverride_AutoExposureMaxBrightness : 1;                    // 0x000A:5 (0x0001)  
	bool                                               bOverride_AutoExposureCalibrationConstant : 1;              // 0x000A:6 (0x0001)  
	bool                                               bOverride_AutoExposureSpeedUp : 1;                          // 0x000A:7 (0x0001)  
	bool                                               bOverride_AutoExposureSpeedDown : 1;                        // 0x000B:0 (0x0001)  
	bool                                               bOverride_AutoExposureBias : 1;                             // 0x000B:1 (0x0001)  
	bool                                               bOverride_AutoExposureBiasCurve : 1;                        // 0x000B:2 (0x0001)  
	bool                                               bOverride_AutoExposureMeterMask : 1;                        // 0x000B:3 (0x0001)  
	bool                                               bOverride_AutoExposureApplyPhysicalCameraExposure : 1;      // 0x000B:4 (0x0001)  
	bool                                               bOverride_HistogramLogMin : 1;                              // 0x000B:5 (0x0001)  
	bool                                               bOverride_HistogramLogMax : 1;                              // 0x000B:6 (0x0001)  
	bool                                               bOverride_LensFlareIntensity : 1;                           // 0x000B:7 (0x0001)  
	bool                                               bOverride_LensFlareTint : 1;                                // 0x000C:0 (0x0001)  
	bool                                               bOverride_LensFlareTints : 1;                               // 0x000C:1 (0x0001)  
	bool                                               bOverride_LensFlareBokehSize : 1;                           // 0x000C:2 (0x0001)  
	bool                                               bOverride_LensFlareBokehShape : 1;                          // 0x000C:3 (0x0001)  
	bool                                               bOverride_LensFlareThreshold : 1;                           // 0x000C:4 (0x0001)  
	bool                                               bOverride_VignetteIntensity : 1;                            // 0x000C:5 (0x0001)  
	bool                                               bOverride_GrainIntensity : 1;                               // 0x000C:6 (0x0001)  
	bool                                               bOverride_GrainJitter : 1;                                  // 0x000C:7 (0x0001)  
	bool                                               bOverride_AmbientOcclusionIntensity : 1;                    // 0x000D:0 (0x0001)  
	bool                                               bOverride_AmbientOcclusionStaticFraction : 1;               // 0x000D:1 (0x0001)  
	bool                                               bOverride_AmbientOcclusionRadius : 1;                       // 0x000D:2 (0x0001)  
	bool                                               bOverride_AmbientOcclusionFadeDistance : 1;                 // 0x000D:3 (0x0001)  
	bool                                               bOverride_AmbientOcclusionFadeRadius : 1;                   // 0x000D:4 (0x0001)  
	bool                                               bOverride_AmbientOcclusionDistance : 1;                     // 0x000D:5 (0x0001)  
	bool                                               bOverride_AmbientOcclusionRadiusInWS : 1;                   // 0x000D:6 (0x0001)  
	bool                                               bOverride_AmbientOcclusionPower : 1;                        // 0x000D:7 (0x0001)  
	bool                                               bOverride_AmbientOcclusionBias : 1;                         // 0x000E:0 (0x0001)  
	bool                                               bOverride_AmbientOcclusionQuality : 1;                      // 0x000E:1 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipBlend : 1;                     // 0x000E:2 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipScale : 1;                     // 0x000E:3 (0x0001)  
	bool                                               bOverride_AmbientOcclusionMipThreshold : 1;                 // 0x000E:4 (0x0001)  
	bool                                               bOverride_AmbientOcclusionTemporalBlendWeight : 1;          // 0x000E:5 (0x0001)  
	unsigned char                                      UnknownData21_3[0x1];                                       // 0x000F   (0x0001)  MISSED
	bool                                               bOverride_RayTracingAO : 1;                                 // 0x0010:0 (0x0001)  
	bool                                               bOverride_RayTracingAOSamplesPerPixel : 1;                  // 0x0010:1 (0x0001)  
	bool                                               bOverride_RayTracingAOIntensity : 1;                        // 0x0010:2 (0x0001)  
	bool                                               bOverride_RayTracingAORadius : 1;                           // 0x0010:3 (0x0001)  
	unsigned char                                      UnknownData22_3[0x3];                                       // 0x0011   (0x0003)  MISSED
	bool                                               bOverride_LPVIntensity : 1;                                 // 0x0014:0 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionIntensity : 1;             // 0x0014:1 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionRadius : 1;                // 0x0014:2 (0x0001)  
	bool                                               bOverride_LPVDiffuseOcclusionExponent : 1;                  // 0x0014:3 (0x0001)  
	bool                                               bOverride_LPVSpecularOcclusionExponent : 1;                 // 0x0014:4 (0x0001)  
	bool                                               bOverride_LPVDiffuseOcclusionIntensity : 1;                 // 0x0014:5 (0x0001)  
	bool                                               bOverride_LPVSpecularOcclusionIntensity : 1;                // 0x0014:6 (0x0001)  
	bool                                               bOverride_LPVSize : 1;                                      // 0x0014:7 (0x0001)  
	bool                                               bOverride_LPVSecondaryOcclusionIntensity : 1;               // 0x0015:0 (0x0001)  
	bool                                               bOverride_LPVSecondaryBounceIntensity : 1;                  // 0x0015:1 (0x0001)  
	bool                                               bOverride_LPVGeometryVolumeBias : 1;                        // 0x0015:2 (0x0001)  
	bool                                               bOverride_LPVVplInjectionBias : 1;                          // 0x0015:3 (0x0001)  
	bool                                               bOverride_LPVEmissiveInjectionIntensity : 1;                // 0x0015:4 (0x0001)  
	bool                                               bOverride_LPVFadeRange : 1;                                 // 0x0015:5 (0x0001)  
	bool                                               bOverride_LPVDirectionalOcclusionFadeRange : 1;             // 0x0015:6 (0x0001)  
	bool                                               bOverride_IndirectLightingColor : 1;                        // 0x0015:7 (0x0001)  
	bool                                               bOverride_IndirectLightingIntensity : 1;                    // 0x0016:0 (0x0001)  
	bool                                               bOverride_RelativeScaleForVolumeMap : 1;                    // 0x0016:1 (0x0001)  
	bool                                               bOverride_MaxLightingByVolumeMap : 1;                       // 0x0016:2 (0x0001)  
	bool                                               bOverride_ColorGradingIntensity : 1;                        // 0x0016:3 (0x0001)  
	bool                                               bOverride_ColorGradingLUT : 1;                              // 0x0016:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldFocalDistance : 1;                    // 0x0016:5 (0x0001)  
	bool                                               bOverride_DepthOfFieldFstop : 1;                            // 0x0016:6 (0x0001)  
	bool                                               bOverride_DepthOfFieldMinFstop : 1;                         // 0x0016:7 (0x0001)  
	bool                                               bOverride_DepthOfFieldBladeCount : 1;                       // 0x0017:0 (0x0001)  
	bool                                               bOverride_DepthOfFieldSensorWidth : 1;                      // 0x0017:1 (0x0001)  
	bool                                               bOverride_DepthOfFieldDepthBlurRadius : 1;                  // 0x0017:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldDepthBlurAmount : 1;                  // 0x0017:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldFocalRegion : 1;                      // 0x0017:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldNearTransitionRegion : 1;             // 0x0017:5 (0x0001)  
	bool                                               bOverride_DepthOfFieldFarTransitionRegion : 1;              // 0x0017:6 (0x0001)  
	bool                                               bOverride_DepthOfFieldScale : 1;                            // 0x0017:7 (0x0001)  
	bool                                               bOverride_DepthOfFieldNearBlurSize : 1;                     // 0x0018:0 (0x0001)  
	bool                                               bOverride_DepthOfFieldFarBlurSize : 1;                      // 0x0018:1 (0x0001)  
	bool                                               bOverride_MobileHQGaussian : 1;                             // 0x0018:2 (0x0001)  
	bool                                               bOverride_DepthOfFieldOcclusion : 1;                        // 0x0018:3 (0x0001)  
	bool                                               bOverride_DepthOfFieldSkyFocusDistance : 1;                 // 0x0018:4 (0x0001)  
	bool                                               bOverride_DepthOfFieldVignetteSize : 1;                     // 0x0018:5 (0x0001)  
	unsigned char                                      UnknownData23_3[0x3];                                       // 0x0019   (0x0003)  MISSED
	bool                                               bOverride_EnableFSR : 1;                                    // 0x001C:0 (0x0001)  
	bool                                               EnableFSRUpscale : 1;                                       // 0x001C:1 (0x0001)  
	unsigned char                                      UnknownData24_5[0x3];                                       // 0x001D   (0x0003)  MISSED
	TEnumAsByte<EFSRUpscaleQuality>                    FSRUpscaleQuality;                                          // 0x0020   (0x0001)  
	unsigned char                                      UnknownData25_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	bool                                               EnableFSRSharpening : 1;                                    // 0x0024:0 (0x0001)  
	unsigned char                                      UnknownData26_5[0x3];                                       // 0x0025   (0x0003)  MISSED
	float                                              FSRSoftness;                                                // 0x0028   (0x0004)  
	bool                                               bOverride_MotionBlurAmount : 1;                             // 0x002C:0 (0x0001)  
	bool                                               bOverride_MotionBlurMax : 1;                                // 0x002C:1 (0x0001)  
	bool                                               bOverride_MotionBlurTargetFPS : 1;                          // 0x002C:2 (0x0001)  
	bool                                               bOverride_MotionBlurPerObjectSize : 1;                      // 0x002C:3 (0x0001)  
	bool                                               bOverride_ScreenPercentage : 1;                             // 0x002C:4 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionIntensity : 1;               // 0x002C:5 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionQuality : 1;                 // 0x002C:6 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionMaxRoughness : 1;            // 0x002C:7 (0x0001)  
	bool                                               bOverride_ScreenSpaceReflectionRoughnessScale : 1;          // 0x002D:0 (0x0001)  
	unsigned char                                      UnknownData27_3[0x2];                                       // 0x002E   (0x0002)  MISSED
	bool                                               bOverride_ReflectionsType : 1;                              // 0x0030:0 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsMaxRoughness : 1;            // 0x0030:1 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsMaxBounces : 1;              // 0x0030:2 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsSamplesPerPixel : 1;         // 0x0030:3 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsShadows : 1;                 // 0x0030:4 (0x0001)  
	bool                                               bOverride_RayTracingReflectionsTranslucency : 1;            // 0x0030:5 (0x0001)  
	bool                                               bOverride_TranslucencyType : 1;                             // 0x0030:6 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyMaxRoughness : 1;           // 0x0030:7 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyRefractionRays : 1;         // 0x0031:0 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencySamplesPerPixel : 1;        // 0x0031:1 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyShadows : 1;                // 0x0031:2 (0x0001)  
	bool                                               bOverride_RayTracingTranslucencyRefraction : 1;             // 0x0031:3 (0x0001)  
	bool                                               bOverride_RayTracingGI : 1;                                 // 0x0031:4 (0x0001)  
	bool                                               bOverride_RayTracingGIMaxBounces : 1;                       // 0x0031:5 (0x0001)  
	bool                                               bOverride_RayTracingGISamplesPerPixel : 1;                  // 0x0031:6 (0x0001)  
	bool                                               bOverride_PathTracingMaxBounces : 1;                        // 0x0031:7 (0x0001)  
	bool                                               bOverride_PathTracingSamplesPerPixel : 1;                   // 0x0032:0 (0x0001)  
	unsigned char                                      UnknownData28_3[0x1];                                       // 0x0033   (0x0001)  MISSED
	bool                                               bMobileHQGaussian : 1;                                      // 0x0034:0 (0x0001)  
	TEnumAsByte<EBloomMethod>                          BloomMethod;                                                // 0x0035   (0x0001)  
	TEnumAsByte<EAutoExposureMethod>                   AutoExposureMethod;                                         // 0x0036   (0x0001)  
	unsigned char                                      UnknownData29_6[0x1];                                       // 0x0037   (0x0001)  MISSED
	float                                              WhiteTemp;                                                  // 0x0038   (0x0004)  
	float                                              WhiteTint;                                                  // 0x003C   (0x0004)  
	FVector4                                           ColorSaturation;                                            // 0x0040   (0x0010)  
	FVector4                                           ColorContrast;                                              // 0x0050   (0x0010)  
	FVector4                                           ColorGamma;                                                 // 0x0060   (0x0010)  
	FVector4                                           ColorGain;                                                  // 0x0070   (0x0010)  
	FVector4                                           ColorOffset;                                                // 0x0080   (0x0010)  
	FVector4                                           ColorSaturationShadows;                                     // 0x0090   (0x0010)  
	FVector4                                           ColorContrastShadows;                                       // 0x00A0   (0x0010)  
	FVector4                                           ColorGammaShadows;                                          // 0x00B0   (0x0010)  
	FVector4                                           ColorGainShadows;                                           // 0x00C0   (0x0010)  
	FVector4                                           ColorOffsetShadows;                                         // 0x00D0   (0x0010)  
	FVector4                                           ColorSaturationMidtones;                                    // 0x00E0   (0x0010)  
	FVector4                                           ColorContrastMidtones;                                      // 0x00F0   (0x0010)  
	FVector4                                           ColorGammaMidtones;                                         // 0x0100   (0x0010)  
	FVector4                                           ColorGainMidtones;                                          // 0x0110   (0x0010)  
	FVector4                                           ColorOffsetMidtones;                                        // 0x0120   (0x0010)  
	FVector4                                           ColorSaturationHighlights;                                  // 0x0130   (0x0010)  
	FVector4                                           ColorContrastHighlights;                                    // 0x0140   (0x0010)  
	FVector4                                           ColorGammaHighlights;                                       // 0x0150   (0x0010)  
	FVector4                                           ColorGainHighlights;                                        // 0x0160   (0x0010)  
	FVector4                                           ColorOffsetHighlights;                                      // 0x0170   (0x0010)  
	float                                              ColorCorrectionHighlightsMin;                               // 0x0180   (0x0004)  
	float                                              ColorCorrectionShadowsMax;                                  // 0x0184   (0x0004)  
	float                                              BlueCorrection;                                             // 0x0188   (0x0004)  
	float                                              ExpandGamut;                                                // 0x018C   (0x0004)  
	float                                              ToneCurveAmount;                                            // 0x0190   (0x0004)  
	float                                              FilmSlope;                                                  // 0x0194   (0x0004)  
	float                                              FilmToe;                                                    // 0x0198   (0x0004)  
	float                                              FilmShoulder;                                               // 0x019C   (0x0004)  
	float                                              FilmBlackClip;                                              // 0x01A0   (0x0004)  
	float                                              FilmWhiteClip;                                              // 0x01A4   (0x0004)  
	FLinearColor                                       FilmWhitePoint;                                             // 0x01A8   (0x0010)  
	FLinearColor                                       FilmShadowTint;                                             // 0x01B8   (0x0010)  
	float                                              FilmShadowTintBlend;                                        // 0x01C8   (0x0004)  
	float                                              FilmShadowTintAmount;                                       // 0x01CC   (0x0004)  
	float                                              FilmSaturation;                                             // 0x01D0   (0x0004)  
	FLinearColor                                       FilmChannelMixerRed;                                        // 0x01D4   (0x0010)  
	FLinearColor                                       FilmChannelMixerGreen;                                      // 0x01E4   (0x0010)  
	FLinearColor                                       FilmChannelMixerBlue;                                       // 0x01F4   (0x0010)  
	float                                              FilmContrast;                                               // 0x0204   (0x0004)  
	float                                              FilmToeAmount;                                              // 0x0208   (0x0004)  
	float                                              FilmHealAmount;                                             // 0x020C   (0x0004)  
	float                                              FilmDynamicRange;                                           // 0x0210   (0x0004)  
	FLinearColor                                       SceneColorTint;                                             // 0x0214   (0x0010)  
	float                                              SceneFringeIntensity;                                       // 0x0224   (0x0004)  
	float                                              ChromaticAberrationStartOffset;                             // 0x0228   (0x0004)  
	float                                              BloomIntensity;                                             // 0x022C   (0x0004)  
	float                                              BloomThreshold;                                             // 0x0230   (0x0004)  
	float                                              BloomSizeScale;                                             // 0x0234   (0x0004)  
	float                                              Bloom1Size;                                                 // 0x0238   (0x0004)  
	float                                              Bloom2Size;                                                 // 0x023C   (0x0004)  
	float                                              Bloom3Size;                                                 // 0x0240   (0x0004)  
	float                                              Bloom4Size;                                                 // 0x0244   (0x0004)  
	float                                              Bloom5Size;                                                 // 0x0248   (0x0004)  
	float                                              Bloom6Size;                                                 // 0x024C   (0x0004)  
	FLinearColor                                       Bloom1Tint;                                                 // 0x0250   (0x0010)  
	FLinearColor                                       Bloom2Tint;                                                 // 0x0260   (0x0010)  
	FLinearColor                                       Bloom3Tint;                                                 // 0x0270   (0x0010)  
	FLinearColor                                       Bloom4Tint;                                                 // 0x0280   (0x0010)  
	FLinearColor                                       Bloom5Tint;                                                 // 0x0290   (0x0010)  
	FLinearColor                                       Bloom6Tint;                                                 // 0x02A0   (0x0010)  
	float                                              BloomConvolutionSize;                                       // 0x02B0   (0x0004)  
	unsigned char                                      UnknownData30_6[0x4];                                       // 0x02B4   (0x0004)  MISSED
	class UTexture2D*                                  BloomConvolutionTexture;                                    // 0x02B8   (0x0008)  
	FVector2D                                          BloomConvolutionCenterUV;                                   // 0x02C0   (0x0008)  
	float                                              BloomConvolutionPreFilterMin;                               // 0x02C8   (0x0004)  
	float                                              BloomConvolutionPreFilterMax;                               // 0x02CC   (0x0004)  
	float                                              BloomConvolutionPreFilterMult;                              // 0x02D0   (0x0004)  
	float                                              BloomConvolutionBufferScale;                                // 0x02D4   (0x0004)  
	class UTexture*                                    BloomDirtMask;                                              // 0x02D8   (0x0008)  
	float                                              BloomDirtMaskIntensity;                                     // 0x02E0   (0x0004)  
	FLinearColor                                       BloomDirtMaskTint;                                          // 0x02E4   (0x0010)  
	FLinearColor                                       AmbientCubemapTint;                                         // 0x02F4   (0x0010)  
	FLinearColor                                       AmbientCubemapScale;                                        // 0x0304   (0x0010)  
	float                                              TonemapperSharpen;                                          // 0x0314   (0x0004)  
	float                                              SkyVisibilityScaleForCharacter;                             // 0x0318   (0x0004)  
	float                                              AmbientCubemapIntensity;                                    // 0x031C   (0x0004)  
	class UTextureCube*                                AmbientCubemap;                                             // 0x0320   (0x0008)  
	float                                              CameraShutterSpeed;                                         // 0x0328   (0x0004)  
	float                                              CameraISO;                                                  // 0x032C   (0x0004)  
	float                                              DepthOfFieldFstop;                                          // 0x0330   (0x0004)  
	float                                              DepthOfFieldMinFstop;                                       // 0x0334   (0x0004)  
	int32_t                                            DepthOfFieldBladeCount;                                     // 0x0338   (0x0004)  
	float                                              AutoExposureBias;                                           // 0x033C   (0x0004)  
	float                                              AutoExposureBiasBackup;                                     // 0x0340   (0x0004)  
	bool                                               bOverride_AutoExposureBiasBackup : 1;                       // 0x0344:0 (0x0001)  
	unsigned char                                      UnknownData31_3[0x3];                                       // 0x0345   (0x0003)  MISSED
	bool                                               AutoExposureApplyPhysicalCameraExposure : 1;                // 0x0348:0 (0x0001)  
	unsigned char                                      UnknownData32_5[0x7];                                       // 0x0349   (0x0007)  MISSED
	class UCurveFloat*                                 AutoExposureBiasCurve;                                      // 0x0350   (0x0008)  
	class UTexture*                                    AutoExposureMeterMask;                                      // 0x0358   (0x0008)  
	float                                              AutoExposureLowPercent;                                     // 0x0360   (0x0004)  
	float                                              AutoExposureHighPercent;                                    // 0x0364   (0x0004)  
	float                                              AutoExposureMinBrightness;                                  // 0x0368   (0x0004)  
	float                                              AutoExposureMaxBrightness;                                  // 0x036C   (0x0004)  
	float                                              AutoExposureSpeedUp;                                        // 0x0370   (0x0004)  
	float                                              AutoExposureSpeedDown;                                      // 0x0374   (0x0004)  
	float                                              HistogramLogMin;                                            // 0x0378   (0x0004)  
	float                                              HistogramLogMax;                                            // 0x037C   (0x0004)  
	float                                              AutoExposureCalibrationConstant;                            // 0x0380   (0x0004)  
	float                                              LensFlareIntensity;                                         // 0x0384   (0x0004)  
	FLinearColor                                       LensFlareTint;                                              // 0x0388   (0x0010)  
	float                                              LensFlareBokehSize;                                         // 0x0398   (0x0004)  
	float                                              LensFlareThreshold;                                         // 0x039C   (0x0004)  
	class UTexture*                                    LensFlareBokehShape;                                        // 0x03A0   (0x0008)  
	FLinearColor                                       LensFlareTints[8];                                          // 0x03A8   (0x0080)  
	float                                              VignetteIntensity;                                          // 0x0428   (0x0004)  
	float                                              GrainJitter;                                                // 0x042C   (0x0004)  
	float                                              GrainIntensity;                                             // 0x0430   (0x0004)  
	float                                              AmbientOcclusionIntensity;                                  // 0x0434   (0x0004)  
	float                                              AmbientOcclusionStaticFraction;                             // 0x0438   (0x0004)  
	float                                              AmbientOcclusionRadius;                                     // 0x043C   (0x0004)  
	bool                                               AmbientOcclusionRadiusInWS : 1;                             // 0x0440:0 (0x0001)  
	unsigned char                                      UnknownData33_5[0x3];                                       // 0x0441   (0x0003)  MISSED
	float                                              AmbientOcclusionFadeDistance;                               // 0x0444   (0x0004)  
	float                                              AmbientOcclusionFadeRadius;                                 // 0x0448   (0x0004)  
	float                                              AmbientOcclusionDistance;                                   // 0x044C   (0x0004)  
	float                                              AmbientOcclusionPower;                                      // 0x0450   (0x0004)  
	float                                              AmbientOcclusionBias;                                       // 0x0454   (0x0004)  
	float                                              AmbientOcclusionQuality;                                    // 0x0458   (0x0004)  
	float                                              AmbientOcclusionMipBlend;                                   // 0x045C   (0x0004)  
	float                                              AmbientOcclusionMipScale;                                   // 0x0460   (0x0004)  
	float                                              AmbientOcclusionMipThreshold;                               // 0x0464   (0x0004)  
	float                                              AmbientOcclusionTemporalBlendWeight;                        // 0x0468   (0x0004)  
	bool                                               bOverride_bUseAOChannelForCharacter : 1;                    // 0x046C:0 (0x0001)  
	bool                                               bUseAOChannelForCharacter;                                  // 0x046D   (0x0001)  
	unsigned char                                      UnknownData34_6[0x2];                                       // 0x046E   (0x0002)  MISSED
	float                                              AmbientOcclusionIntensityForCharacter;                      // 0x0470   (0x0004)  
	float                                              AmbientOcclusionRadiusForCharacter;                         // 0x0474   (0x0004)  
	bool                                               AmbientOcclusionRadiusInWSForCharacter : 1;                 // 0x0478:0 (0x0001)  
	unsigned char                                      UnknownData35_5[0x3];                                       // 0x0479   (0x0003)  MISSED
	float                                              AmbientOcclusionFadeDistanceForCharacter;                   // 0x047C   (0x0004)  
	float                                              AmbientOcclusionFadeRadiusForCharacter;                     // 0x0480   (0x0004)  
	float                                              AmbientOcclusionPowerForCharacter;                          // 0x0484   (0x0004)  
	float                                              AmbientOcclusionBiasForCharacter;                           // 0x0488   (0x0004)  
	bool                                               RayTracingAO : 1;                                           // 0x048C:0 (0x0001)  
	unsigned char                                      UnknownData36_5[0x3];                                       // 0x048D   (0x0003)  MISSED
	int32_t                                            RayTracingAOSamplesPerPixel;                                // 0x0490   (0x0004)  
	float                                              RayTracingAOIntensity;                                      // 0x0494   (0x0004)  
	float                                              RayTracingAORadius;                                         // 0x0498   (0x0004)  
	FLinearColor                                       IndirectLightingColor;                                      // 0x049C   (0x0010)  
	float                                              IndirectLightingIntensity;                                  // 0x04AC   (0x0004)  
	float                                              RelativeScaleForVolumeMap;                                  // 0x04B0   (0x0004)  
	float                                              MaxLightingByVolumeMap;                                     // 0x04B4   (0x0004)  
	ERayTracingGlobalIlluminationType                  RayTracingGIType;                                           // 0x04B8   (0x0001)  
	unsigned char                                      UnknownData37_6[0x3];                                       // 0x04B9   (0x0003)  MISSED
	int32_t                                            RayTracingGIMaxBounces;                                     // 0x04BC   (0x0004)  
	int32_t                                            RayTracingGISamplesPerPixel;                                // 0x04C0   (0x0004)  
	float                                              ColorGradingIntensity;                                      // 0x04C4   (0x0004)  
	class UTexture*                                    ColorGradingLUT;                                            // 0x04C8   (0x0008)  
	float                                              DepthOfFieldSensorWidth;                                    // 0x04D0   (0x0004)  
	float                                              DepthOfFieldFocalDistance;                                  // 0x04D4   (0x0004)  
	float                                              DepthOfFieldDepthBlurAmount;                                // 0x04D8   (0x0004)  
	float                                              DepthOfFieldDepthBlurRadius;                                // 0x04DC   (0x0004)  
	float                                              DepthOfFieldFocalRegion;                                    // 0x04E0   (0x0004)  
	float                                              DepthOfFieldNearTransitionRegion;                           // 0x04E4   (0x0004)  
	float                                              DepthOfFieldFarTransitionRegion;                            // 0x04E8   (0x0004)  
	float                                              DepthOfFieldScale;                                          // 0x04EC   (0x0004)  
	float                                              DepthOfFieldNearBlurSize;                                   // 0x04F0   (0x0004)  
	float                                              DepthOfFieldFarBlurSize;                                    // 0x04F4   (0x0004)  
	float                                              DepthOfFieldOcclusion;                                      // 0x04F8   (0x0004)  
	float                                              DepthOfFieldSkyFocusDistance;                               // 0x04FC   (0x0004)  
	float                                              DepthOfFieldVignetteSize;                                   // 0x0500   (0x0004)  
	float                                              MotionBlurAmount;                                           // 0x0504   (0x0004)  
	float                                              MotionBlurMax;                                              // 0x0508   (0x0004)  
	int32_t                                            MotionBlurTargetFPS;                                        // 0x050C   (0x0004)  
	float                                              MotionBlurPerObjectSize;                                    // 0x0510   (0x0004)  
	float                                              LPVIntensity;                                               // 0x0514   (0x0004)  
	float                                              LPVVplInjectionBias;                                        // 0x0518   (0x0004)  
	float                                              LPVSize;                                                    // 0x051C   (0x0004)  
	float                                              LPVSecondaryOcclusionIntensity;                             // 0x0520   (0x0004)  
	float                                              LPVSecondaryBounceIntensity;                                // 0x0524   (0x0004)  
	float                                              LPVGeometryVolumeBias;                                      // 0x0528   (0x0004)  
	float                                              LPVEmissiveInjectionIntensity;                              // 0x052C   (0x0004)  
	float                                              LPVDirectionalOcclusionIntensity;                           // 0x0530   (0x0004)  
	float                                              LPVDirectionalOcclusionRadius;                              // 0x0534   (0x0004)  
	float                                              LPVDiffuseOcclusionExponent;                                // 0x0538   (0x0004)  
	float                                              LPVSpecularOcclusionExponent;                               // 0x053C   (0x0004)  
	float                                              LPVDiffuseOcclusionIntensity;                               // 0x0540   (0x0004)  
	float                                              LPVSpecularOcclusionIntensity;                              // 0x0544   (0x0004)  
	EReflectionsType                                   ReflectionsType;                                            // 0x0548   (0x0001)  
	unsigned char                                      UnknownData38_6[0x3];                                       // 0x0549   (0x0003)  MISSED
	float                                              ScreenSpaceReflectionIntensity;                             // 0x054C   (0x0004)  
	float                                              ScreenSpaceReflectionQuality;                               // 0x0550   (0x0004)  
	float                                              ScreenSpaceReflectionMaxRoughness;                          // 0x0554   (0x0004)  
	float                                              RayTracingReflectionsMaxRoughness;                          // 0x0558   (0x0004)  
	int32_t                                            RayTracingReflectionsMaxBounces;                            // 0x055C   (0x0004)  
	int32_t                                            RayTracingReflectionsSamplesPerPixel;                       // 0x0560   (0x0004)  
	EReflectedAndRefractedRayTracedShadows             RayTracingReflectionsShadows;                               // 0x0564   (0x0001)  
	bool                                               RayTracingReflectionsTranslucency : 1;                      // 0x0565:0 (0x0001)  
	ETranslucencyType                                  TranslucencyType;                                           // 0x0566   (0x0001)  
	unsigned char                                      UnknownData39_6[0x1];                                       // 0x0567   (0x0001)  MISSED
	float                                              RayTracingTranslucencyMaxRoughness;                         // 0x0568   (0x0004)  
	int32_t                                            RayTracingTranslucencyRefractionRays;                       // 0x056C   (0x0004)  
	int32_t                                            RayTracingTranslucencySamplesPerPixel;                      // 0x0570   (0x0004)  
	EReflectedAndRefractedRayTracedShadows             RayTracingTranslucencyShadows;                              // 0x0574   (0x0001)  
	bool                                               RayTracingTranslucencyRefraction : 1;                       // 0x0575:0 (0x0001)  
	unsigned char                                      UnknownData40_5[0x2];                                       // 0x0576   (0x0002)  MISSED
	int32_t                                            PathTracingMaxBounces;                                      // 0x0578   (0x0004)  
	int32_t                                            PathTracingSamplesPerPixel;                                 // 0x057C   (0x0004)  
	float                                              LPVFadeRange;                                               // 0x0580   (0x0004)  
	float                                              LPVDirectionalOcclusionFadeRange;                           // 0x0584   (0x0004)  
	float                                              ScreenPercentage;                                           // 0x0588   (0x0004)  
	unsigned char                                      UnknownData41_6[0x4];                                       // 0x058C   (0x0004)  MISSED
	FWeightedBlendables                                WeightedBlendables;                                         // 0x0590   (0x0010)  
};

/// Class /Script/Engine.CameraComponent
/// Size: 0x08C0 (2240 bytes) (0x000260 - 0x0008C0) align n/a MaxSize: 0x08C0
class UCameraComponent : public USceneComponent
{ 
public:
	float                                              FieldOfView;                                                // 0x0260   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x0264   (0x0004)  
	float                                              OrthoNearClipPlane;                                         // 0x0268   (0x0004)  
	float                                              OrthoFarClipPlane;                                          // 0x026C   (0x0004)  
	float                                              AspectRatio;                                                // 0x0270   (0x0004)  
	bool                                               bConstrainAspectRatio : 1;                                  // 0x0274:0 (0x0001)  
	bool                                               bCropAspectRatio : 1;                                       // 0x0274:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0275   (0x0003)  MISSED
	float                                              CropAspectRatioViewportLess;                                // 0x0278   (0x0004)  
	bool                                               bUseFieldOfViewForLOD : 1;                                  // 0x027C:0 (0x0001)  
	bool                                               bLockToHmd : 1;                                             // 0x027C:1 (0x0001)  
	bool                                               bUsePawnControlRotation : 1;                                // 0x027C:2 (0x0001)  
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                             // 0x027D   (0x0001)  
	unsigned char                                      UnknownData04_6[0x72];                                      // 0x027E   (0x0072)  MISSED
	float                                              PostProcessBlendWeight;                                     // 0x02F0   (0x0004)  
	unsigned char                                      UnknownData05_6[0x2C];                                      // 0x02F4   (0x002C)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0320   (0x05A0)  

	/// Functions
	// Function /Script/Engine.CameraComponent.SetUseFieldOfViewForLOD
	constexpr static const FunctionPointer<UCameraComponent, void, const bool> SetUseFieldOfViewForLOD = { 0x4746e70, 0 }; 
	// Function /Script/Engine.CameraComponent.SetProjectionMode
	constexpr static const FunctionPointer<UCameraComponent, void, const TEnumAsByte<ECameraProjectionMode>> SetProjectionMode = { 0x4746da0, 1 }; 
	// Function /Script/Engine.CameraComponent.SetPostProcessBlendWeight
	constexpr static const FunctionPointer<UCameraComponent, void, const float> SetPostProcessBlendWeight = { 0x4746cd0, 2 }; 
	// Function /Script/Engine.CameraComponent.SetOrthoWidth
	constexpr static const FunctionPointer<UCameraComponent, void, const float> SetOrthoWidth = { 0x4747380, 3 }; 
	// Function /Script/Engine.CameraComponent.SetOrthoNearClipPlane
	constexpr static const FunctionPointer<UCameraComponent, void, const float> SetOrthoNearClipPlane = { 0x47472b0, 4 }; 
	// Function /Script/Engine.CameraComponent.SetOrthoFarClipPlane
	constexpr static const FunctionPointer<UCameraComponent, void, const float> SetOrthoFarClipPlane = { 0x47471e0, 5 }; 
	// Function /Script/Engine.CameraComponent.SetFieldOfView
	constexpr static const FunctionPointer<UCameraComponent, void, const float> SetFieldOfView = { 0x3e44b50, 6 }; 
	// Function /Script/Engine.CameraComponent.SetCropAspectRatio
	constexpr static const FunctionPointer<UCameraComponent, void, const bool> SetCropAspectRatio = { 0x4747030, 7 }; 
	// Function /Script/Engine.CameraComponent.SetConstraintAspectRatio
	constexpr static const FunctionPointer<UCameraComponent, void, const bool> SetConstraintAspectRatio = { 0x4746f50, 8 }; 
	// Function /Script/Engine.CameraComponent.SetAspectRatio
	constexpr static const FunctionPointer<UCameraComponent, void, const float> SetAspectRatio = { 0x4747110, 9 }; 
	// Function /Script/Engine.CameraComponent.RemoveBlendable
	constexpr static const FunctionPointer<UCameraComponent, void, const TScriptInterface<Class>> RemoveBlendable = { 0x4746720, 10 }; 
	// Function /Script/Engine.CameraComponent.OnCameraMeshHiddenChanged
	constexpr static const FunctionPointer<UCameraComponent, void> OnCameraMeshHiddenChanged = { 0x11615e0, 11 }; 
	// Function /Script/Engine.CameraComponent.GetCameraView
	constexpr static const FunctionPointer<UCameraComponent, void, const float, const FMinimalViewInfo&> GetCameraView = { 0x4746a80, 12 }; 
	// Function /Script/Engine.CameraComponent.AddOrUpdateBlendable
	constexpr static const FunctionPointer<UCameraComponent, void, const TScriptInterface<Class>, const float> AddOrUpdateBlendable = { 0x4746890, 13 }; 
};

/// Class /Script/Engine.CameraActor
/// Size: 0x08A0 (2208 bytes) (0x0002C8 - 0x0008A0) align n/a MaxSize: 0x08A0
class ACameraActor : public AActor
{ 
public:
	TEnumAsByte<EAutoReceiveInput>                     AutoActivateForPlayer;                                      // 0x02C8   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x02C9   (0x0007)  MISSED
	class UCameraComponent*                            CameraComponent;                                            // 0x02D0   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x02D8   (0x0008)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x02E0   (0x0008)  MISSED
	bool                                               bConstrainAspectRatio : 1;                                  // 0x02E8:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x02E9   (0x0003)  MISSED
	float                                              AspectRatio;                                                // 0x02EC   (0x0004)  
	float                                              FOVAngle;                                                   // 0x02F0   (0x0004)  
	float                                              PostProcessBlendWeight;                                     // 0x02F4   (0x0004)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x02F8   (0x0008)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0300   (0x05A0)  

	/// Functions
	// Function /Script/Engine.CameraActor.GetAutoActivatePlayerIndex
	constexpr static const FunctionPointer<ACameraActor, int32_t> GetAutoActivatePlayerIndex = { 0x4745840, 0 }; 
};

/// Class /Script/Engine.CheatManager
/// Size: 0x0078 (120 bytes) (0x000028 - 0x000078) align n/a MaxSize: 0x0078
class UCheatManager : public UObject
{ 
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                   // 0x0028   (0x0008)  
	class UClass*                                      DebugCameraControllerClass;                                 // 0x0030   (0x0008)  
	unsigned char                                      UnknownData01_7[0x40];                                      // 0x0038   (0x0040)  MISSED

	/// Functions
	// Function /Script/Engine.CheatManager.Walk
	constexpr static const FunctionPointer<UCheatManager, void> Walk = { 0x3816f70, 0 }; 
	// Function /Script/Engine.CheatManager.ViewSelf
	constexpr static const FunctionPointer<UCheatManager, void> ViewSelf = { 0x475c8b0, 1 }; 
	// Function /Script/Engine.CheatManager.ViewPlayer
	constexpr static const FunctionPointer<UCheatManager, void, const FString> ViewPlayer = { 0x475c7c0, 2 }; 
	// Function /Script/Engine.CheatManager.ViewClass
	constexpr static const FunctionPointer<UCheatManager, void, const UClass*> ViewClass = { 0x475c600, 3 }; 
	// Function /Script/Engine.CheatManager.ViewActor
	constexpr static const FunctionPointer<UCheatManager, void, const FName> ViewActor = { 0x475c6e0, 4 }; 
	// Function /Script/Engine.CheatManager.UpdateSafeArea
	constexpr static const FunctionPointer<UCheatManager, void> UpdateSafeArea = { 0x475b3b0, 5 }; 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorUpdateStatNet
	constexpr static const FunctionPointer<UCheatManager, void> ToggleServerStatReplicatorUpdateStatNet = { 0x475b3d0, 6 }; 
	// Function /Script/Engine.CheatManager.ToggleServerStatReplicatorClientOverwrite
	constexpr static const FunctionPointer<UCheatManager, void> ToggleServerStatReplicatorClientOverwrite = { 0x475b3f0, 7 }; 
	// Function /Script/Engine.CheatManager.ToggleDebugCamera
	constexpr static const FunctionPointer<UCheatManager, void> ToggleDebugCamera = { 0x475c340, 8 }; 
	// Function /Script/Engine.CheatManager.ToggleAILogging
	constexpr static const FunctionPointer<UCheatManager, void> ToggleAILogging = { 0x475c320, 9 }; 
	// Function /Script/Engine.CheatManager.TestCollisionDistance
	constexpr static const FunctionPointer<UCheatManager, void> TestCollisionDistance = { 0x475bf20, 10 }; 
	// Function /Script/Engine.CheatManager.Teleport
	constexpr static const FunctionPointer<UCheatManager, void> Teleport = { 0x475cd50, 11 }; 
	// Function /Script/Engine.CheatManager.Summon
	constexpr static const FunctionPointer<UCheatManager, void, const FString> Summon = { 0x475c8f0, 12 }; 
	// Function /Script/Engine.CheatManager.StreamLevelOut
	constexpr static const FunctionPointer<UCheatManager, void, const FName> StreamLevelOut = { 0x475c360, 13 }; 
	// Function /Script/Engine.CheatManager.StreamLevelIn
	constexpr static const FunctionPointer<UCheatManager, void, const FName> StreamLevelIn = { 0x475c520, 14 }; 
	// Function /Script/Engine.CheatManager.SpawnServerStatReplicator
	constexpr static const FunctionPointer<UCheatManager, void> SpawnServerStatReplicator = { 0x475b430, 15 }; 
	// Function /Script/Engine.CheatManager.Slomo
	constexpr static const FunctionPointer<UCheatManager, void, const float> Slomo = { 0x475cb90, 16 }; 
	// Function /Script/Engine.CheatManager.SetWorldOrigin
	constexpr static const FunctionPointer<UCheatManager, void> SetWorldOrigin = { 0x475b5f0, 17 }; 
	// Function /Script/Engine.CheatManager.SetMouseSensitivityToDefault
	constexpr static const FunctionPointer<UCheatManager, void> SetMouseSensitivityToDefault = { 0x475b5d0, 18 }; 
	// Function /Script/Engine.CheatManager.ServerToggleAILogging
	constexpr static const FunctionPointer<UCheatManager, void> ServerToggleAILogging = { 0x475c2c0, 19 }; 
	// Function /Script/Engine.CheatManager.ReceiveInitCheatManager
	constexpr static const FunctionPointer<UCheatManager, void> ReceiveInitCheatManager = { 0x2bbb090, 20 }; 
	// Function /Script/Engine.CheatManager.ReceiveEndPlay
	constexpr static const FunctionPointer<UCheatManager, void> ReceiveEndPlay = { 0x2bbb090, 21 }; 
	// Function /Script/Engine.CheatManager.PlayersOnly
	constexpr static const FunctionPointer<UCheatManager, void> PlayersOnly = { 0x475c8d0, 22 }; 
	// Function /Script/Engine.CheatManager.OnlyLoadLevel
	constexpr static const FunctionPointer<UCheatManager, void, const FName> OnlyLoadLevel = { 0x475c440, 23 }; 
	// Function /Script/Engine.CheatManager.LogLoc
	constexpr static const FunctionPointer<UCheatManager, void> LogLoc = { 0x475b6f0, 24 }; 
	// Function /Script/Engine.CheatManager.InvertMouse
	constexpr static const FunctionPointer<UCheatManager, void> InvertMouse = { 0x475b5b0, 25 }; 
	// Function /Script/Engine.CheatManager.God
	constexpr static const FunctionPointer<UCheatManager, void> God = { 0x475cc60, 26 }; 
	// Function /Script/Engine.CheatManager.Ghost
	constexpr static const FunctionPointer<UCheatManager, void> Ghost = { 0x4747a90, 27 }; 
	// Function /Script/Engine.CheatManager.FreezeFrame
	constexpr static const FunctionPointer<UCheatManager, void, const float> FreezeFrame = { 0x475cd70, 28 }; 
	// Function /Script/Engine.CheatManager.Fly
	constexpr static const FunctionPointer<UCheatManager, void> Fly = { 0x3f063d0, 29 }; 
	// Function /Script/Engine.CheatManager.FlushLog
	constexpr static const FunctionPointer<UCheatManager, void> FlushLog = { 0x475b710, 30 }; 
	// Function /Script/Engine.CheatManager.EnableDebugCamera
	constexpr static const FunctionPointer<UCheatManager, void> EnableDebugCamera = { 0x475b390, 31 }; 
	// Function /Script/Engine.CheatManager.DumpVoiceMutingState
	constexpr static const FunctionPointer<UCheatManager, void> DumpVoiceMutingState = { 0x475bea0, 32 }; 
	// Function /Script/Engine.CheatManager.DumpPartyState
	constexpr static const FunctionPointer<UCheatManager, void> DumpPartyState = { 0x475bee0, 33 }; 
	// Function /Script/Engine.CheatManager.DumpOnlineSessionState
	constexpr static const FunctionPointer<UCheatManager, void> DumpOnlineSessionState = { 0x475bf00, 34 }; 
	// Function /Script/Engine.CheatManager.DumpChatState
	constexpr static const FunctionPointer<UCheatManager, void> DumpChatState = { 0x475bec0, 35 }; 
	// Function /Script/Engine.CheatManager.DisableDebugCamera
	constexpr static const FunctionPointer<UCheatManager, void> DisableDebugCamera = { 0x475b370, 36 }; 
	// Function /Script/Engine.CheatManager.DestroyTarget
	constexpr static const FunctionPointer<UCheatManager, void> DestroyTarget = { 0x46f7d60, 37 }; 
	// Function /Script/Engine.CheatManager.DestroyServerStatReplicator
	constexpr static const FunctionPointer<UCheatManager, void> DestroyServerStatReplicator = { 0x475b410, 38 }; 
	// Function /Script/Engine.CheatManager.DestroyPawns
	constexpr static const FunctionPointer<UCheatManager, void, const UClass*> DestroyPawns = { 0x3d803c0, 39 }; 
	// Function /Script/Engine.CheatManager.DestroyAllPawnsExceptTarget
	constexpr static const FunctionPointer<UCheatManager, void> DestroyAllPawnsExceptTarget = { 0x3d8cd40, 40 }; 
	// Function /Script/Engine.CheatManager.DestroyAll
	constexpr static const FunctionPointer<UCheatManager, void, const UClass*> DestroyAll = { 0x475c9e0, 41 }; 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepSize
	constexpr static const FunctionPointer<UCheatManager, void, const float, const float> DebugCapsuleSweepSize = { 0x475c150, 42 }; 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepPawn
	constexpr static const FunctionPointer<UCheatManager, void> DebugCapsuleSweepPawn = { 0x475bf60, 43 }; 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepComplex
	constexpr static const FunctionPointer<UCheatManager, void, const bool> DebugCapsuleSweepComplex = { 0x475bfa0, 44 }; 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepClear
	constexpr static const FunctionPointer<UCheatManager, void> DebugCapsuleSweepClear = { 0x475bf40, 45 }; 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepChannel
	constexpr static const FunctionPointer<UCheatManager, void, const TEnumAsByte<ECollisionChannel>> DebugCapsuleSweepChannel = { 0x475c080, 46 }; 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweepCapture
	constexpr static const FunctionPointer<UCheatManager, void> DebugCapsuleSweepCapture = { 0x475bf80, 47 }; 
	// Function /Script/Engine.CheatManager.DebugCapsuleSweep
	constexpr static const FunctionPointer<UCheatManager, void> DebugCapsuleSweep = { 0x46f3070, 48 }; 
	// Function /Script/Engine.CheatManager.DamageTarget
	constexpr static const FunctionPointer<UCheatManager, void, const float> DamageTarget = { 0x475cac0, 49 }; 
	// Function /Script/Engine.CheatManager.CheatScript
	constexpr static const FunctionPointer<UCheatManager, void, const FString> CheatScript = { 0x475b470, 50 }; 
	// Function /Script/Engine.CheatManager.ChangeSize
	constexpr static const FunctionPointer<UCheatManager, void, const float> ChangeSize = { 0x475cc80, 51 }; 
	// Function /Script/Engine.CheatManager.BugItStringCreator
	constexpr static const FunctionPointer<UCheatManager, void, const FVector, const FRotator, const FString&, const FString&> BugItStringCreator = { 0x475b730, 52 }; 
	// Function /Script/Engine.CheatManager.BugItGo
	constexpr static const FunctionPointer<UCheatManager, void, const float, const float, const float, const float, const float, const float> BugItGo = { 0x475bb10, 53 }; 
	// Function /Script/Engine.CheatManager.BugIt
	constexpr static const FunctionPointer<UCheatManager, void, const FString> BugIt = { 0x475ba20, 54 }; 
};

/// Class /Script/Engine.Commandlet
/// Size: 0x0080 (128 bytes) (0x000028 - 0x000080) align n/a MaxSize: 0x0080
class UCommandlet : public UObject
{ 
public:
	FString                                            HelpDescription;                                            // 0x0028   (0x0010)  
	FString                                            HelpUsage;                                                  // 0x0038   (0x0010)  
	FString                                            HelpWebLink;                                                // 0x0048   (0x0010)  
	TArray<FString>                                    HelpParamNames;                                             // 0x0058   (0x0010)  
	TArray<FString>                                    HelpParamDescriptions;                                      // 0x0068   (0x0010)  
	bool                                               IsServer : 1;                                               // 0x0078:0 (0x0001)  
	bool                                               IsClient : 1;                                               // 0x0078:1 (0x0001)  
	bool                                               IsEditor : 1;                                               // 0x0078:2 (0x0001)  
	bool                                               LogToConsole : 1;                                           // 0x0078:3 (0x0001)  
	bool                                               ShowErrorCount : 1;                                         // 0x0078:4 (0x0001)  
	bool                                               ShowProgress : 1;                                           // 0x0078:5 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.SplineMetadata
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USplineMetadata : public UObject
{ 
public:
};

/// Class /Script/Engine.DPICustomScalingRule
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UDPICustomScalingRule : public UObject
{ 
public:
};

/// Class /Script/Engine.EdGraphNode
/// Size: 0x0098 (152 bytes) (0x000028 - 0x000098) align n/a MaxSize: 0x0098
class UEdGraphNode : public UObject
{ 
public:
	unsigned char                                      UnknownData07_8[0x10];                                      // 0x0028   (0x0010)  MISSED
	TArray<class UEdGraphPin_Deprecated*>              DeprecatedPins;                                             // 0x0038   (0x0010)  
	int32_t                                            NodePosX;                                                   // 0x0048   (0x0004)  
	int32_t                                            NodePosY;                                                   // 0x004C   (0x0004)  
	int32_t                                            NodeWidth;                                                  // 0x0050   (0x0004)  
	int32_t                                            NodeHeight;                                                 // 0x0054   (0x0004)  
	TEnumAsByte<ENodeAdvancedPins>                     AdvancedPinDisplay;                                         // 0x0058   (0x0001)  
	ENodeEnabledState                                  EnabledState;                                               // 0x0059   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x005A   (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x005B:0 (0x0001)  MISSED
	bool                                               bDisplayAsDisabled : 1;                                     // 0x005B:1 (0x0001)  
	bool                                               bUserSetEnabledState : 1;                                   // 0x005B:2 (0x0001)  
	unsigned char                                      UnknownBit10 : 1;                                           // 0x005B:3 (0x0001)  MISSED
	bool                                               bIsNodeEnabled : 1;                                         // 0x005B:4 (0x0001)  
	unsigned char                                      UnknownBit11 : 1;                                           // 0x005B:5 (0x0001)  MISSED
	bool                                               bHasCompilerMessage : 1;                                    // 0x005B:6 (0x0001)  
	unsigned char                                      UnknownData12_5[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            NodeComment;                                                // 0x0060   (0x0010)  
	int32_t                                            ErrorType;                                                  // 0x0070   (0x0004)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x0074   (0x0004)  MISSED
	FString                                            ErrorMsg;                                                   // 0x0078   (0x0010)  
	FGuid                                              NodeGuid;                                                   // 0x0088   (0x0010)  
};

/// Class /Script/Engine.NavigationObjectBase
/// Size: 0x02F0 (752 bytes) (0x0002C8 - 0x0002F0) align n/a MaxSize: 0x02F0
class ANavigationObjectBase : public AActor
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x02C8   (0x0008)  MISSED
	class UCapsuleComponent*                           CapsuleComponent;                                           // 0x02D0   (0x0008)  
	class UBillboardComponent*                         GoodSprite;                                                 // 0x02D8   (0x0008)  
	class UBillboardComponent*                         BadSprite;                                                  // 0x02E0   (0x0008)  
	bool                                               bIsPIEPlayerStart : 1;                                      // 0x02E8:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x02E9   (0x0007)  MISSED
};

/// Struct /Script/Engine.ForceFeedbackChannelDetails
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FForceFeedbackChannelDetails
{ 
	bool                                               bAffectsLeftLarge : 1;                                      // 0x0000:0 (0x0001)  
	bool                                               bAffectsLeftSmall : 1;                                      // 0x0000:1 (0x0001)  
	bool                                               bAffectsRightLarge : 1;                                     // 0x0000:2 (0x0001)  
	bool                                               bAffectsRightSmall : 1;                                     // 0x0000:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0001   (0x0007)  MISSED
	FRuntimeFloatCurve                                 Curve;                                                      // 0x0008   (0x0088)  
};

/// Class /Script/Engine.ForceFeedbackEffect
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class UForceFeedbackEffect : public UObject
{ 
public:
	TArray<FForceFeedbackChannelDetails>               ChannelDetails;                                             // 0x0028   (0x0010)  
	class UForceFeedbackAttenuation*                   Attenuation;                                                // 0x0038   (0x0008)  
	float                                              Duration;                                                   // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.GameUserSettings
/// Size: 0x0128 (296 bytes) (0x000028 - 0x000128) align n/a MaxSize: 0x0128
class UGameUserSettings : public UObject
{ 
public:
	bool                                               bUseVSync;                                                  // 0x0028   (0x0001)  
	bool                                               bUseDynamicResolution;                                      // 0x0029   (0x0001)  
	unsigned char                                      UnknownData08_6[0x56];                                      // 0x002A   (0x0056)  MISSED
	uint32_t                                           ResolutionSizeX;                                            // 0x0080   (0x0004)  
	uint32_t                                           ResolutionSizeY;                                            // 0x0084   (0x0004)  
	unsigned char                                      UnknownData09_6[0x18];                                      // 0x0088   (0x0018)  MISSED
	int32_t                                            WindowPosX;                                                 // 0x00A0   (0x0004)  
	int32_t                                            WindowPosY;                                                 // 0x00A4   (0x0004)  
	int32_t                                            FullscreenMode;                                             // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	int32_t                                            PreferredFullscreenMode;                                    // 0x00B0   (0x0004)  
	uint32_t                                           Version;                                                    // 0x00B4   (0x0004)  
	int32_t                                            AudioQualityLevel;                                          // 0x00B8   (0x0004)  
	int32_t                                            LastConfirmedAudioQualityLevel;                             // 0x00BC   (0x0004)  
	float                                              FrameRateLimit;                                             // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	int32_t                                            DesiredScreenWidth;                                         // 0x00C8   (0x0004)  
	bool                                               bUseDesiredScreenHeight;                                    // 0x00CC   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x00CD   (0x0003)  MISSED
	int32_t                                            DesiredScreenHeight;                                        // 0x00D0   (0x0004)  
	float                                              LastRecommendedScreenWidth;                                 // 0x00D4   (0x0004)  
	float                                              LastRecommendedScreenHeight;                                // 0x00D8   (0x0004)  
	float                                              LastCPUBenchmarkResult;                                     // 0x00DC   (0x0004)  
	float                                              LastGPUBenchmarkResult;                                     // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x00E4   (0x0004)  MISSED
	TArray<float>                                      LastCPUBenchmarkSteps;                                      // 0x00E8   (0x0010)  
	TArray<float>                                      LastGPUBenchmarkSteps;                                      // 0x00F8   (0x0010)  
	float                                              LastGPUBenchmarkMultiplier;                                 // 0x0108   (0x0004)  
	bool                                               bUseHDRDisplayOutput;                                       // 0x010C   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x010D   (0x0003)  MISSED
	int32_t                                            HDRDisplayOutputNits;                                       // 0x0110   (0x0004)  
	unsigned char                                      UnknownData15_6[0x4];                                       // 0x0114   (0x0004)  MISSED
	FMulticastInlineDelegate                           OnGameUserSettingsUINeedsUpdate;                            // 0x0118   (0x0010)  

	/// Functions
	// Function /Script/Engine.GameUserSettings.ValidateSettings
	constexpr static const FunctionPointer<UGameUserSettings, void, const bool> ValidateSettings = { 0x47b1dc0, 0 }; 
	// Function /Script/Engine.GameUserSettings.SupportsHDRDisplayOutput
	constexpr static const FunctionPointer<UGameUserSettings, bool> SupportsHDRDisplayOutput = { 0x47b1880, 1 }; 
	// Function /Script/Engine.GameUserSettings.SetVSyncEnabled
	constexpr static const FunctionPointer<UGameUserSettings, void, const bool> SetVSyncEnabled = { 0x47b34c0, 2 }; 
	// Function /Script/Engine.GameUserSettings.SetVisualEffectQuality
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetVisualEffectQuality = { 0x47b2210, 3 }; 
	// Function /Script/Engine.GameUserSettings.SetViewDistanceQuality
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetViewDistanceQuality = { 0x47b2630, 4 }; 
	// Function /Script/Engine.GameUserSettings.SetToDefaults
	constexpr static const FunctionPointer<UGameUserSettings, void> SetToDefaults = { 0x3d8cd40, 5 }; 
	// Function /Script/Engine.GameUserSettings.SetTextureQuality
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetTextureQuality = { 0x47b2330, 6 }; 
	// Function /Script/Engine.GameUserSettings.SetShadowQuality
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetShadowQuality = { 0x47b2530, 7 }; 
	// Function /Script/Engine.GameUserSettings.SetShadingQuality
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetShadingQuality = { 0x47b1ef0, 8 }; 
	// Function /Script/Engine.GameUserSettings.SetScreenResolution
	constexpr static const FunctionPointer<UGameUserSettings, void, const FIntPoint> SetScreenResolution = { 0x47b3770, 9 }; 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValueEx
	constexpr static const FunctionPointer<UGameUserSettings, void, const float> SetResolutionScaleValueEx = { 0x47b2820, 10 }; 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleValue
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetResolutionScaleValue = { 0x47b28f0, 11 }; 
	// Function /Script/Engine.GameUserSettings.SetResolutionScaleNormalized
	constexpr static const FunctionPointer<UGameUserSettings, void, const float> SetResolutionScaleNormalized = { 0x47b2730, 12 }; 
	// Function /Script/Engine.GameUserSettings.SetPostProcessingQuality
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetPostProcessingQuality = { 0x47b2110, 13 }; 
	// Function /Script/Engine.GameUserSettings.SetOverallScalabilityLevel
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetOverallScalabilityLevel = { 0x47b2ff0, 14 }; 
	// Function /Script/Engine.GameUserSettings.SetFullscreenMode
	constexpr static const FunctionPointer<UGameUserSettings, void, const TEnumAsByte<EWindowMode>> SetFullscreenMode = { 0x47b35c0, 15 }; 
	// Function /Script/Engine.GameUserSettings.SetFrameRateLimit
	constexpr static const FunctionPointer<UGameUserSettings, void, const float> SetFrameRateLimit = { 0x47b30d0, 16 }; 
	// Function /Script/Engine.GameUserSettings.SetFoliageQuality
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetFoliageQuality = { 0x47b1ff0, 17 }; 
	// Function /Script/Engine.GameUserSettings.SetDynamicResolutionEnabled
	constexpr static const FunctionPointer<UGameUserSettings, void, const bool> SetDynamicResolutionEnabled = { 0x47b33f0, 18 }; 
	// Function /Script/Engine.GameUserSettings.SetBenchmarkFallbackValues
	constexpr static const FunctionPointer<UGameUserSettings, void> SetBenchmarkFallbackValues = { 0x47b32a0, 19 }; 
	// Function /Script/Engine.GameUserSettings.SetAudioQualityLevel
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetAudioQualityLevel = { 0x47b31c0, 20 }; 
	// Function /Script/Engine.GameUserSettings.SetAntiAliasingQuality
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t> SetAntiAliasingQuality = { 0x47b2430, 21 }; 
	// Function /Script/Engine.GameUserSettings.SaveSettings
	constexpr static const FunctionPointer<UGameUserSettings, void> SaveSettings = { 0x46f7f80, 22 }; 
	// Function /Script/Engine.GameUserSettings.RunHardwareBenchmark
	constexpr static const FunctionPointer<UGameUserSettings, void, const int32_t, const float, const float> RunHardwareBenchmark = { 0x47b18b0, 23 }; 
	// Function /Script/Engine.GameUserSettings.ResetToCurrentSettings
	constexpr static const FunctionPointer<UGameUserSettings, void> ResetToCurrentSettings = { 0x47b1cc0, 24 }; 
	// Function /Script/Engine.GameUserSettings.LoadSettings
	constexpr static const FunctionPointer<UGameUserSettings, void, const bool> LoadSettings = { 0x47b1ce0, 25 }; 
	// Function /Script/Engine.GameUserSettings.IsVSyncEnabled
	constexpr static const FunctionPointer<UGameUserSettings, bool> IsVSyncEnabled = { 0x1667660, 26 }; 
	// Function /Script/Engine.GameUserSettings.IsVSyncDirty
	constexpr static const FunctionPointer<UGameUserSettings, bool> IsVSyncDirty = { 0x47b3310, 27 }; 
	// Function /Script/Engine.GameUserSettings.IsScreenResolutionDirty
	constexpr static const FunctionPointer<UGameUserSettings, bool> IsScreenResolutionDirty = { 0x47b3370, 28 }; 
	// Function /Script/Engine.GameUserSettings.IsHDREnabled
	constexpr static const FunctionPointer<UGameUserSettings, bool> IsHDREnabled = { 0x47b16c0, 29 }; 
	// Function /Script/Engine.GameUserSettings.IsFullscreenModeDirty
	constexpr static const FunctionPointer<UGameUserSettings, bool> IsFullscreenModeDirty = { 0x47b3340, 30 }; 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionEnabled
	constexpr static const FunctionPointer<UGameUserSettings, bool> IsDynamicResolutionEnabled = { 0x47b33d0, 31 }; 
	// Function /Script/Engine.GameUserSettings.IsDynamicResolutionDirty
	constexpr static const FunctionPointer<UGameUserSettings, bool> IsDynamicResolutionDirty = { 0x47b32c0, 32 }; 
	// Function /Script/Engine.GameUserSettings.IsDirty
	constexpr static const FunctionPointer<UGameUserSettings, bool> IsDirty = { 0x47b1ea0, 33 }; 
	// Function /Script/Engine.GameUserSettings.GetVisualEffectQuality
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetVisualEffectQuality = { 0x166b8f0, 34 }; 
	// Function /Script/Engine.GameUserSettings.GetViewDistanceQuality
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetViewDistanceQuality = { 0x46f0590, 35 }; 
	// Function /Script/Engine.GameUserSettings.GetTextureQuality
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetTextureQuality = { 0x47b2310, 36 }; 
	// Function /Script/Engine.GameUserSettings.GetSyncInterval
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetSyncInterval = { 0x47b1b30, 37 }; 
	// Function /Script/Engine.GameUserSettings.GetShadowQuality
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetShadowQuality = { 0x46fad40, 38 }; 
	// Function /Script/Engine.GameUserSettings.GetShadingQuality
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetShadingQuality = { 0x47b1ed0, 39 }; 
	// Function /Script/Engine.GameUserSettings.GetScreenResolution
	constexpr static const FunctionPointer<UGameUserSettings, FIntPoint> GetScreenResolution = { 0x47b38c0, 40 }; 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleNormalized
	constexpr static const FunctionPointer<UGameUserSettings, float> GetResolutionScaleNormalized = { 0x47b29d0, 41 }; 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformationEx
	constexpr static const FunctionPointer<UGameUserSettings, void, const float&, const float&, const float&, const float&> GetResolutionScaleInformationEx = { 0x47b2a10, 42 }; 
	// Function /Script/Engine.GameUserSettings.GetResolutionScaleInformation
	constexpr static const FunctionPointer<UGameUserSettings, void, const float&, const int32_t&, const int32_t&, const int32_t&> GetResolutionScaleInformation = { 0x47b2ce0, 43 }; 
	// Function /Script/Engine.GameUserSettings.GetRecommendedResolutionScale
	constexpr static const FunctionPointer<UGameUserSettings, float> GetRecommendedResolutionScale = { 0x47b1c40, 44 }; 
	// Function /Script/Engine.GameUserSettings.GetPreferredFullscreenMode
	constexpr static const FunctionPointer<UGameUserSettings, TEnumAsByte<EWindowMode>> GetPreferredFullscreenMode = { 0x47b3590, 45 }; 
	// Function /Script/Engine.GameUserSettings.GetPostProcessingQuality
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetPostProcessingQuality = { 0x47b20f0, 46 }; 
	// Function /Script/Engine.GameUserSettings.GetOverallScalabilityLevel
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetOverallScalabilityLevel = { 0x47b2fc0, 47 }; 
	// Function /Script/Engine.GameUserSettings.GetGameUserSettings
	constexpr static const FunctionPointer<UGameUserSettings, UGameUserSettings*> GetGameUserSettings = { 0x47b1a90, 48 }; 
	// Function /Script/Engine.GameUserSettings.GetFullscreenMode
	constexpr static const FunctionPointer<UGameUserSettings, TEnumAsByte<EWindowMode>> GetFullscreenMode = { 0x47b3730, 49 }; 
	// Function /Script/Engine.GameUserSettings.GetFrameRateLimit
	constexpr static const FunctionPointer<UGameUserSettings, float> GetFrameRateLimit = { 0x19ec0a0, 50 }; 
	// Function /Script/Engine.GameUserSettings.GetFramePace
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetFramePace = { 0x47b1b00, 51 }; 
	// Function /Script/Engine.GameUserSettings.GetFoliageQuality
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetFoliageQuality = { 0x384c790, 52 }; 
	// Function /Script/Engine.GameUserSettings.GetDesktopResolution
	constexpr static const FunctionPointer<UGameUserSettings, FIntPoint> GetDesktopResolution = { 0x47b3880, 53 }; 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowPosition
	constexpr static const FunctionPointer<UGameUserSettings, FIntPoint> GetDefaultWindowPosition = { 0x47b1bf0, 54 }; 
	// Function /Script/Engine.GameUserSettings.GetDefaultWindowMode
	constexpr static const FunctionPointer<UGameUserSettings, TEnumAsByte<EWindowMode>> GetDefaultWindowMode = { 0x151b2d0, 55 }; 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolutionScale
	constexpr static const FunctionPointer<UGameUserSettings, float> GetDefaultResolutionScale = { 0x47b1c80, 56 }; 
	// Function /Script/Engine.GameUserSettings.GetDefaultResolution
	constexpr static const FunctionPointer<UGameUserSettings, FIntPoint> GetDefaultResolution = { 0x47b1c10, 57 }; 
	// Function /Script/Engine.GameUserSettings.GetCurrentHDRDisplayNits
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetCurrentHDRDisplayNits = { 0x47b16e0, 58 }; 
	// Function /Script/Engine.GameUserSettings.GetAudioQualityLevel
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetAudioQualityLevel = { 0x47b31a0, 59 }; 
	// Function /Script/Engine.GameUserSettings.GetAntiAliasingQuality
	constexpr static const FunctionPointer<UGameUserSettings, int32_t> GetAntiAliasingQuality = { 0x163be10, 60 }; 
	// Function /Script/Engine.GameUserSettings.EnableHDRDisplayOutput
	constexpr static const FunctionPointer<UGameUserSettings, void, const bool, const int32_t> EnableHDRDisplayOutput = { 0x47b1710, 61 }; 
	// Function /Script/Engine.GameUserSettings.ApplySettings
	constexpr static const FunctionPointer<UGameUserSettings, void, const bool> ApplySettings = { 0x47b39d0, 62 }; 
	// Function /Script/Engine.GameUserSettings.ApplyResolutionSettings
	constexpr static const FunctionPointer<UGameUserSettings, void, const bool> ApplyResolutionSettings = { 0x47b38f0, 63 }; 
	// Function /Script/Engine.GameUserSettings.ApplyNonResolutionSettings
	constexpr static const FunctionPointer<UGameUserSettings, void, const bool> ApplyNonResolutionSettings = { 0x3daf5f0, 64 }; 
	// Function /Script/Engine.GameUserSettings.ApplyHardwareBenchmarkResults
	constexpr static const FunctionPointer<UGameUserSettings, void> ApplyHardwareBenchmarkResults = { 0x475c8b0, 65 }; 
};

/// Class /Script/Engine.EdGraph
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000060) align n/a MaxSize: 0x0060
class UEdGraph : public UObject
{ 
public:
	class UClass*                                      Schema;                                                     // 0x0028   (0x0008)  
	TArray<class UEdGraphNode*>                        Nodes;                                                      // 0x0030   (0x0010)  
	bool                                               bEditable : 1;                                              // 0x0040:0 (0x0001)  
	bool                                               bAllowDeletion : 1;                                         // 0x0040:1 (0x0001)  
	bool                                               bAllowRenaming : 1;                                         // 0x0040:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x1F];                                      // 0x0041   (0x001F)  MISSED
};

/// Class /Script/Engine.TriggerVolume
/// Size: 0x0318 (792 bytes) (0x000318 - 0x000318) align n/a MaxSize: 0x0318
class ATriggerVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.PlayerState
/// Size: 0x03C8 (968 bytes) (0x0002C8 - 0x0003C8) align n/a MaxSize: 0x03C8
class APlayerState : public AInfo
{ 
public:
	float                                              Score;                                                      // 0x02C8   (0x0004)  
	int32_t                                            PlayerId;                                                   // 0x02CC   (0x0004)  
	char                                               Ping;                                                       // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData07_6[0x1];                                       // 0x02D1   (0x0001)  MISSED
	bool                                               bShouldUpdateReplicatedPing : 1;                            // 0x02D2:0 (0x0001)  
	bool                                               bIsSpectator : 1;                                           // 0x02D2:1 (0x0001)  
	bool                                               bOnlySpectator : 1;                                         // 0x02D2:2 (0x0001)  
	bool                                               bIsABot : 1;                                                // 0x02D2:3 (0x0001)  
	unsigned char                                      UnknownBit08 : 1;                                           // 0x02D2:4 (0x0001)  MISSED
	bool                                               bIsInactive : 1;                                            // 0x02D2:5 (0x0001)  
	bool                                               bFromPreviousLevel : 1;                                     // 0x02D2:6 (0x0001)  
	unsigned char                                      UnknownData09_5[0x1];                                       // 0x02D3   (0x0001)  MISSED
	int32_t                                            StartTime;                                                  // 0x02D4   (0x0004)  
	class UClass*                                      EngineMessageClass;                                         // 0x02D8   (0x0008)  
	unsigned char                                      UnknownData10_6[0x8];                                       // 0x02E0   (0x0008)  MISSED
	FString                                            SavedNetworkAddress;                                        // 0x02E8   (0x0010)  
	FUniqueNetIdRepl                                   UniqueId;                                                   // 0x02F8   (0x0028)  
	unsigned char                                      UnknownData11_6[0x8];                                       // 0x0320   (0x0008)  MISSED
	class APawn*                                       PawnPrivate;                                                // 0x0328   (0x0008)  
	unsigned char                                      UnknownData12_6[0x78];                                      // 0x0330   (0x0078)  MISSED
	FString                                            PlayerNamePrivate;                                          // 0x03A8   (0x0010)  
	unsigned char                                      UnknownData13_7[0x10];                                      // 0x03B8   (0x0010)  MISSED

	/// Functions
	// Function /Script/Engine.PlayerState.ReceiveOverrideWith
	constexpr static const FunctionPointer<APlayerState, void, const APlayerState*> ReceiveOverrideWith = { 0x2bbb090, 0 }; 
	// Function /Script/Engine.PlayerState.ReceiveCopyProperties
	constexpr static const FunctionPointer<APlayerState, void, const APlayerState*> ReceiveCopyProperties = { 0x2bbb090, 1 }; 
	// Function /Script/Engine.PlayerState.OnRep_UniqueId
	constexpr static const FunctionPointer<APlayerState, void> OnRep_UniqueId = { 0x14b0940, 2 }; 
	// Function /Script/Engine.PlayerState.OnRep_Score
	constexpr static const FunctionPointer<APlayerState, void> OnRep_Score = { 0x47887a0, 3 }; 
	// Function /Script/Engine.PlayerState.OnRep_PlayerName
	constexpr static const FunctionPointer<APlayerState, void> OnRep_PlayerName = { 0x477be50, 4 }; 
	// Function /Script/Engine.PlayerState.OnRep_PlayerId
	constexpr static const FunctionPointer<APlayerState, void> OnRep_PlayerId = { 0x48c0890, 5 }; 
	// Function /Script/Engine.PlayerState.OnRep_bIsInactive
	constexpr static const FunctionPointer<APlayerState, void> OnRep_bIsInactive = { 0x48c08b0, 6 }; 
	// Function /Script/Engine.PlayerState.GetPlayerName
	constexpr static const FunctionPointer<APlayerState, FString> GetPlayerName = { 0x491e680, 7 }; 
};

/// Class /Script/Engine.DefaultPawn
/// Size: 0x0350 (848 bytes) (0x000328 - 0x000350) align n/a MaxSize: 0x0350
class ADefaultPawn : public APawn
{ 
public:
	float                                              BaseTurnRate;                                               // 0x0328   (0x0004)  
	float                                              BaseLookUpRate;                                             // 0x032C   (0x0004)  
	class UPawnMovementComponent*                      MovementComponent;                                          // 0x0330   (0x0008)  
	class USphereComponent*                            CollisionComponent;                                         // 0x0338   (0x0008)  
	class UStaticMeshComponent*                        MeshComponent;                                              // 0x0340   (0x0008)  
	bool                                               bAddDefaultMovementBindings : 1;                            // 0x0348:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0349   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.DefaultPawn.TurnAtRate
	constexpr static const FunctionPointer<ADefaultPawn, void, const float> TurnAtRate = { 0x476f1b0, 0 }; 
	// Function /Script/Engine.DefaultPawn.MoveUp_World
	constexpr static const FunctionPointer<ADefaultPawn, void, const float> MoveUp_World = { 0x476f280, 1 }; 
	// Function /Script/Engine.DefaultPawn.MoveRight
	constexpr static const FunctionPointer<ADefaultPawn, void, const float> MoveRight = { 0x476f350, 2 }; 
	// Function /Script/Engine.DefaultPawn.MoveForward
	constexpr static const FunctionPointer<ADefaultPawn, void, const float> MoveForward = { 0x476f420, 3 }; 
	// Function /Script/Engine.DefaultPawn.LookUpAtRate
	constexpr static const FunctionPointer<ADefaultPawn, void, const float> LookUpAtRate = { 0x476f0e0, 4 }; 
};

/// Class /Script/Engine.FloatingPawnMovement
/// Size: 0x0170 (368 bytes) (0x000158 - 0x000170) align n/a MaxSize: 0x0170
class UFloatingPawnMovement : public UPawnMovementComponent
{ 
public:
	float                                              MaxSpeed;                                                   // 0x0158   (0x0004)  
	float                                              Acceleration;                                               // 0x015C   (0x0004)  
	float                                              Deceleration;                                               // 0x0160   (0x0004)  
	float                                              TurningBoost;                                               // 0x0164   (0x0004)  
	bool                                               bPositionCorrected : 1;                                     // 0x0168:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0169   (0x0007)  MISSED
};

/// Class /Script/Engine.SpectatorPawnMovement
/// Size: 0x0178 (376 bytes) (0x000170 - 0x000178) align n/a MaxSize: 0x0178
class USpectatorPawnMovement : public UFloatingPawnMovement
{ 
public:
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0170:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0171   (0x0007)  MISSED
};

/// Struct /Script/Engine.KeyBind
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FKeyBind
{ 
	FKey                                               Key;                                                        // 0x0000   (0x0018)  
	FString                                            Command;                                                    // 0x0018   (0x0010)  
	bool                                               Control : 1;                                                // 0x0028:0 (0x0001)  
	bool                                               Shift : 1;                                                  // 0x0028:1 (0x0001)  
	bool                                               Alt : 1;                                                    // 0x0028:2 (0x0001)  
	bool                                               Cmd : 1;                                                    // 0x0028:3 (0x0001)  
	bool                                               bIgnoreCtrl : 1;                                            // 0x0028:4 (0x0001)  
	bool                                               bIgnoreShift : 1;                                           // 0x0028:5 (0x0001)  
	bool                                               bIgnoreAlt : 1;                                             // 0x0028:6 (0x0001)  
	bool                                               bIgnoreCmd : 1;                                             // 0x0028:7 (0x0001)  
	bool                                               bDisabled : 1;                                              // 0x0029:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x002A   (0x0006)  MISSED
};

/// Class /Script/Engine.PlayerInput
/// Size: 0x03A8 (936 bytes) (0x000028 - 0x0003A8) align n/a MaxSize: 0x03A8
class UPlayerInput : public UObject
{ 
public:
	unsigned char                                      UnknownData03_8[0xF8];                                      // 0x0028   (0x00F8)  MISSED
	TArray<FKeyBind>                                   DebugExecBindings;                                          // 0x0120   (0x0010)  
	unsigned char                                      UnknownData04_6[0x30];                                      // 0x0130   (0x0030)  MISSED
	TArray<FName>                                      InvertedAxis;                                               // 0x0160   (0x0010)  
	unsigned char                                      UnknownData05_7[0x238];                                     // 0x0170   (0x0238)  MISSED

	/// Functions
	// Function /Script/Engine.PlayerInput.SetMouseSensitivity
	constexpr static const FunctionPointer<UPlayerInput, void, const float> SetMouseSensitivity = { 0x491da20, 0 }; 
	// Function /Script/Engine.PlayerInput.SetBind
	constexpr static const FunctionPointer<UPlayerInput, void, const FName, const FString> SetBind = { 0x491d8b0, 1 }; 
	// Function /Script/Engine.PlayerInput.InvertAxisKey
	constexpr static const FunctionPointer<UPlayerInput, void, const FKey> InvertAxisKey = { 0x491d770, 2 }; 
	// Function /Script/Engine.PlayerInput.InvertAxis
	constexpr static const FunctionPointer<UPlayerInput, void, const FName> InvertAxis = { 0x491d690, 3 }; 
	// Function /Script/Engine.PlayerInput.ClearSmoothing
	constexpr static const FunctionPointer<UPlayerInput, void> ClearSmoothing = { 0x491d670, 4 }; 
};

/// Class /Script/Engine.RadialForceComponent
/// Size: 0x0290 (656 bytes) (0x000260 - 0x000290) align n/a MaxSize: 0x0290
class URadialForceComponent : public USceneComponent
{ 
public:
	float                                              Radius;                                                     // 0x0260   (0x0004)  
	TEnumAsByte<ERadialImpulseFalloff>                 Falloff;                                                    // 0x0264   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0265   (0x0003)  MISSED
	float                                              ImpulseStrength;                                            // 0x0268   (0x0004)  
	bool                                               bImpulseVelChange : 1;                                      // 0x026C:0 (0x0001)  
	bool                                               bIgnoreOwningActor : 1;                                     // 0x026C:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x026D   (0x0003)  MISSED
	float                                              ForceStrength;                                              // 0x0270   (0x0004)  
	float                                              DestructibleDamage;                                         // 0x0274   (0x0004)  
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypesToAffect;                                        // 0x0278   (0x0010)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x0288   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.RadialForceComponent.RemoveObjectTypeToAffect
	constexpr static const FunctionPointer<URadialForceComponent, void, const TEnumAsByte<EObjectTypeQuery>> RemoveObjectTypeToAffect = { 0x4934a30, 0 }; 
	// Function /Script/Engine.RadialForceComponent.FireImpulse
	constexpr static const FunctionPointer<URadialForceComponent, void> FireImpulse = { 0x3837ba0, 1 }; 
	// Function /Script/Engine.RadialForceComponent.ClearObjectTypesToAffect
	constexpr static const FunctionPointer<URadialForceComponent, void> ClearObjectTypesToAffect = { 0x49349e0, 2 }; 
	// Function /Script/Engine.RadialForceComponent.AddObjectTypeToAffect
	constexpr static const FunctionPointer<URadialForceComponent, void, const TEnumAsByte<EObjectTypeQuery>> AddObjectTypeToAffect = { 0x4934b00, 3 }; 
};

/// Class /Script/Engine.CapsuleComponent
/// Size: 0x0560 (1376 bytes) (0x000550 - 0x000560) align n/a MaxSize: 0x0560
class UCapsuleComponent : public UShapeComponent
{ 
public:
	float                                              CapsuleHalfHeight;                                          // 0x0550   (0x0004)  
	float                                              CapsuleRadius;                                              // 0x0554   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0558   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.CapsuleComponent.SetCapsuleSize
	constexpr static const FunctionPointer<UCapsuleComponent, void, const float, const float, const bool> SetCapsuleSize = { 0x4750650, 0 }; 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleRadius
	constexpr static const FunctionPointer<UCapsuleComponent, void, const float, const bool> SetCapsuleRadius = { 0x47504d0, 1 }; 
	// Function /Script/Engine.CapsuleComponent.SetCapsuleHalfHeight
	constexpr static const FunctionPointer<UCapsuleComponent, void, const float, const bool> SetCapsuleHalfHeight = { 0x4750350, 2 }; 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize_WithoutHemisphere
	constexpr static const FunctionPointer<UCapsuleComponent, void, const float&, const float&> GetUnscaledCapsuleSize_WithoutHemisphere = { 0x474fb80, 3 }; 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleSize
	constexpr static const FunctionPointer<UCapsuleComponent, void, const float&, const float&> GetUnscaledCapsuleSize = { 0x474fd10, 4 }; 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleRadius
	constexpr static const FunctionPointer<UCapsuleComponent, float> GetUnscaledCapsuleRadius = { 0x474fef0, 5 }; 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight_WithoutHemisphere
	constexpr static const FunctionPointer<UCapsuleComponent, float> GetUnscaledCapsuleHalfHeight_WithoutHemisphere = { 0x474fea0, 6 }; 
	// Function /Script/Engine.CapsuleComponent.GetUnscaledCapsuleHalfHeight
	constexpr static const FunctionPointer<UCapsuleComponent, float> GetUnscaledCapsuleHalfHeight = { 0x474fed0, 7 }; 
	// Function /Script/Engine.CapsuleComponent.GetShapeScale
	constexpr static const FunctionPointer<UCapsuleComponent, float> GetShapeScale = { 0x474fb40, 8 }; 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize_WithoutHemisphere
	constexpr static const FunctionPointer<UCapsuleComponent, void, const float&, const float&> GetScaledCapsuleSize_WithoutHemisphere = { 0x474ff10, 9 }; 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleSize
	constexpr static const FunctionPointer<UCapsuleComponent, void, const float&, const float&> GetScaledCapsuleSize = { 0x47500e0, 10 }; 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleRadius
	constexpr static const FunctionPointer<UCapsuleComponent, float> GetScaledCapsuleRadius = { 0x4750310, 11 }; 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight_WithoutHemisphere
	constexpr static const FunctionPointer<UCapsuleComponent, float> GetScaledCapsuleHalfHeight_WithoutHemisphere = { 0x4750290, 12 }; 
	// Function /Script/Engine.CapsuleComponent.GetScaledCapsuleHalfHeight
	constexpr static const FunctionPointer<UCapsuleComponent, float> GetScaledCapsuleHalfHeight = { 0x47502e0, 13 }; 
};

/// Struct /Script/Engine.EngineShowFlagsSetting
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FEngineShowFlagsSetting
{ 
	FString                                            ShowFlagName;                                               // 0x0000   (0x0010)  
	bool                                               Enabled;                                                    // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Class /Script/Engine.SceneCaptureComponent
/// Size: 0x0320 (800 bytes) (0x000260 - 0x000320) align n/a MaxSize: 0x0320
class USceneCaptureComponent : public USceneComponent
{ 
public:
	ESceneCapturePrimitiveRenderMode                   PrimitiveRenderMode;                                        // 0x0260   (0x0001)  
	TEnumAsByte<ESceneCaptureSource>                   CaptureSource;                                              // 0x0261   (0x0001)  
	bool                                               bCaptureEveryFrame : 1;                                     // 0x0262:0 (0x0001)  
	bool                                               bCaptureOnMovement : 1;                                     // 0x0262:1 (0x0001)  
	bool                                               bAlwaysPersistRenderingState;                               // 0x0263   (0x0001)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0264   (0x0004)  MISSED
	TArray<TWeakObjectPtr<UPrimitiveComponent*>>       HiddenComponents;                                           // 0x0268   (0x0010)  
	TArray<class AActor*>                              HiddenActors;                                               // 0x0278   (0x0010)  
	TArray<TWeakObjectPtr<UPrimitiveComponent*>>       ShowOnlyComponents;                                         // 0x0288   (0x0010)  
	TArray<class AActor*>                              ShowOnlyActors;                                             // 0x0298   (0x0010)  
	float                                              LODDistanceFactor;                                          // 0x02A8   (0x0004)  
	float                                              MaxViewDistanceOverride;                                    // 0x02AC   (0x0004)  
	int32_t                                            CaptureSortPriority;                                        // 0x02B0   (0x0004)  
	bool                                               bUseRayTracingIfEnabled;                                    // 0x02B4   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x02B5   (0x0003)  MISSED
	TArray<FEngineShowFlagsSetting>                    ShowFlagSettings;                                           // 0x02B8   (0x0010)  
	unsigned char                                      UnknownData06_6[0x30];                                      // 0x02C8   (0x0030)  MISSED
	FString                                            ProfilingEventName;                                         // 0x02F8   (0x0010)  
	bool                                               bBalancedEvenFrameCapture;                                  // 0x0308   (0x0001)  
	bool                                               bUseSimpleVisibilityUpdate;                                 // 0x0309   (0x0001)  
	bool                                               bIgnoreFoliageSceneCaptureOnLowPerformance;                 // 0x030A   (0x0001)  
	unsigned char                                      UnknownData07_7[0x15];                                      // 0x030B   (0x0015)  MISSED

	/// Functions
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyComponent
	constexpr static const FunctionPointer<USceneCaptureComponent, void, const UPrimitiveComponent*> ShowOnlyComponent = { 0x4942f50, 0 }; 
	// Function /Script/Engine.SceneCaptureComponent.ShowOnlyActorComponents
	constexpr static const FunctionPointer<USceneCaptureComponent, void, const AActor*, const bool> ShowOnlyActorComponents = { 0x4942c90, 1 }; 
	// Function /Script/Engine.SceneCaptureComponent.SetCaptureSortPriority
	constexpr static const FunctionPointer<USceneCaptureComponent, void, const int32_t> SetCaptureSortPriority = { 0x4942660, 2 }; 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyComponent
	constexpr static const FunctionPointer<USceneCaptureComponent, void, const UPrimitiveComponent*> RemoveShowOnlyComponent = { 0x4942af0, 3 }; 
	// Function /Script/Engine.SceneCaptureComponent.RemoveShowOnlyActorComponents
	constexpr static const FunctionPointer<USceneCaptureComponent, void, const AActor*, const bool> RemoveShowOnlyActorComponents = { 0x4942790, 4 }; 
	// Function /Script/Engine.SceneCaptureComponent.HideComponent
	constexpr static const FunctionPointer<USceneCaptureComponent, void, const UPrimitiveComponent*> HideComponent = { 0x49433f0, 5 }; 
	// Function /Script/Engine.SceneCaptureComponent.HideActorComponents
	constexpr static const FunctionPointer<USceneCaptureComponent, void, const AActor*, const bool> HideActorComponents = { 0x4943100, 6 }; 
	// Function /Script/Engine.SceneCaptureComponent.ClearShowOnlyComponents
	constexpr static const FunctionPointer<USceneCaptureComponent, void> ClearShowOnlyComponents = { 0x4942760, 7 }; 
	// Function /Script/Engine.SceneCaptureComponent.ClearHiddenComponents
	constexpr static const FunctionPointer<USceneCaptureComponent, void> ClearHiddenComponents = { 0x4942730, 8 }; 
};

/// Class /Script/Engine.SceneCaptureComponent2D
/// Size: 0x0970 (2416 bytes) (0x000320 - 0x000970) align n/a MaxSize: 0x0970
class USceneCaptureComponent2D : public USceneCaptureComponent
{ 
public:
	TEnumAsByte<ECameraProjectionMode>                 ProjectionType;                                             // 0x0320   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0321   (0x0003)  MISSED
	float                                              FOVAngle;                                                   // 0x0324   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x0328   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x032C   (0x0004)  MISSED
	class UTextureRenderTarget2D*                      TextureTarget;                                              // 0x0330   (0x0008)  
	TEnumAsByte<ESceneCaptureCompositeMode>            CompositeMode;                                              // 0x0338   (0x0001)  
	unsigned char                                      UnknownData10_6[0x7];                                       // 0x0339   (0x0007)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0340   (0x05A0)  
	float                                              PostProcessBlendWeight;                                     // 0x08E0   (0x0004)  
	bool                                               bOverride_CustomNearClippingPlane : 1;                      // 0x08E4:0 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x08E5   (0x0003)  MISSED
	float                                              CustomNearClippingPlane;                                    // 0x08E8   (0x0004)  
	bool                                               bUseCustomProjectionMatrix;                                 // 0x08EC   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x08ED   (0x0003)  MISSED
	FMatrix                                            CustomProjectionMatrix;                                     // 0x08F0   (0x0040)  
	bool                                               bEnableClipPlane;                                           // 0x0930   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x0931   (0x0003)  MISSED
	FVector                                            ClipPlaneBase;                                              // 0x0934   (0x000C)  
	FVector                                            ClipPlaneNormal;                                            // 0x0940   (0x000C)  
	bool                                               bCameraCutThisFrame : 1;                                    // 0x094C:0 (0x0001)  
	bool                                               bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1;       // 0x094C:1 (0x0001)  
	bool                                               bDepthOnly : 1;                                             // 0x094C:2 (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x094D   (0x0003)  MISSED
	int32_t                                            CaptureFrameCycle;                                          // 0x0950   (0x0004)  
	int32_t                                            CurrentCaptureFrameCycle;                                   // 0x0954   (0x0004)  
	bool                                               bDisableFlipCopyGLES;                                       // 0x0958   (0x0001)  
	unsigned char                                      UnknownData15_7[0x17];                                      // 0x0959   (0x0017)  MISSED

	/// Functions
	// Function /Script/Engine.SceneCaptureComponent2D.CaptureScene
	constexpr static const FunctionPointer<USceneCaptureComponent2D, void> CaptureScene = { 0x4943850, 0 }; 
	// Function /Script/Engine.SceneCaptureComponent2D.AddOrUpdateBlendable
	constexpr static const FunctionPointer<USceneCaptureComponent2D, void, const TScriptInterface<Class>, const float> AddOrUpdateBlendable = { 0x4943870, 1 }; 
};

/// Class /Script/Engine.StaticMeshActor
/// Size: 0x02D8 (728 bytes) (0x0002C8 - 0x0002D8) align n/a MaxSize: 0x02D8
class AStaticMeshActor : public AActor
{ 
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                        // 0x02C8   (0x0008)  
	bool                                               bStaticMeshReplicateMovement;                               // 0x02D0   (0x0001)  
	ENavDataGatheringMode                              NavigationGeometryGatheringMode;                            // 0x02D1   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x02D2   (0x0006)  MISSED

	/// Functions
	// Function /Script/Engine.StaticMeshActor.SetMobility
	constexpr static const FunctionPointer<AStaticMeshActor, void, const TEnumAsByte<EComponentMobility>> SetMobility = { 0x49936f0, 0 }; 
};

/// Class /Script/Engine.AmbientSound
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class AAmbientSound : public AActor
{ 
public:
	class UAudioComponent*                             AudioComponent;                                             // 0x02C8   (0x0008)  

	/// Functions
	// Function /Script/Engine.AmbientSound.Stop
	constexpr static const FunctionPointer<AAmbientSound, void> Stop = { 0x46fccc0, 0 }; 
	// Function /Script/Engine.AmbientSound.Play
	constexpr static const FunctionPointer<AAmbientSound, void, const float> Play = { 0x46fccf0, 1 }; 
	// Function /Script/Engine.AmbientSound.FadeOut
	constexpr static const FunctionPointer<AAmbientSound, void, const float, const float> FadeOut = { 0x46fcfd0, 2 }; 
	// Function /Script/Engine.AmbientSound.FadeIn
	constexpr static const FunctionPointer<AAmbientSound, void, const float, const float> FadeIn = { 0x46fd160, 3 }; 
	// Function /Script/Engine.AmbientSound.AdjustVolume
	constexpr static const FunctionPointer<AAmbientSound, void, const float, const float> AdjustVolume = { 0x46fce40, 4 }; 
};

/// Class /Script/Engine.SoundNode
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class USoundNode : public UObject
{ 
public:
	TArray<class USoundNode*>                          ChildNodes;                                                 // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0038   (0x0010)  MISSED
};

/// Class /Script/Engine.SpringArmComponent
/// Size: 0x02F0 (752 bytes) (0x000260 - 0x0002F0) align n/a MaxSize: 0x02F0
class USpringArmComponent : public USceneComponent
{ 
public:
	float                                              TargetArmLength;                                            // 0x0260   (0x0004)  
	FVector                                            SocketOffset;                                               // 0x0264   (0x000C)  
	FVector                                            TargetOffset;                                               // 0x0270   (0x000C)  
	float                                              ProbeSize;                                                  // 0x027C   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     ProbeChannel;                                               // 0x0280   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0281   (0x0003)  MISSED
	bool                                               bDoCollisionTest : 1;                                       // 0x0284:0 (0x0001)  
	bool                                               bUsePawnControlRotation : 1;                                // 0x0284:1 (0x0001)  
	bool                                               bInheritPitch : 1;                                          // 0x0284:2 (0x0001)  
	bool                                               bInheritYaw : 1;                                            // 0x0284:3 (0x0001)  
	bool                                               bInheritRoll : 1;                                           // 0x0284:4 (0x0001)  
	bool                                               bEnableCameraLag : 1;                                       // 0x0284:5 (0x0001)  
	bool                                               bEnableCameraRotationLag : 1;                               // 0x0284:6 (0x0001)  
	bool                                               bUseCameraLagSubstepping : 1;                               // 0x0284:7 (0x0001)  
	bool                                               bDrawDebugLagMarkers : 1;                                   // 0x0285:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x0286   (0x0002)  MISSED
	float                                              CameraLagSpeed;                                             // 0x0288   (0x0004)  
	float                                              CameraRotationLagSpeed;                                     // 0x028C   (0x0004)  
	float                                              CameraLagMaxTimeStep;                                       // 0x0290   (0x0004)  
	float                                              CameraLagMaxDistance;                                       // 0x0294   (0x0004)  
	unsigned char                                      UnknownData05_7[0x58];                                      // 0x0298   (0x0058)  MISSED

	/// Functions
	// Function /Script/Engine.SpringArmComponent.IsCollisionFixApplied
	constexpr static const FunctionPointer<USpringArmComponent, bool> IsCollisionFixApplied = { 0x4990930, 0 }; 
	// Function /Script/Engine.SpringArmComponent.GetUnfixedCameraPosition
	constexpr static const FunctionPointer<USpringArmComponent, FVector> GetUnfixedCameraPosition = { 0x4759d50, 1 }; 
	// Function /Script/Engine.SpringArmComponent.GetTargetRotation
	constexpr static const FunctionPointer<USpringArmComponent, FRotator> GetTargetRotation = { 0x4990950, 2 }; 
};

/// Struct /Script/Engine.StaticMeshComponentLODInfo
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FStaticMeshComponentLODInfo
{ 
	unsigned char                                      UnknownData01_2[0x90];                                      // 0x0000   (0x0090)  MISSED
};

/// Struct /Script/Engine.StreamingTextureBuildInfo
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FStreamingTextureBuildInfo
{ 
	uint32_t                                           PackedRelativeBox;                                          // 0x0000   (0x0004)  
	int32_t                                            TextureLevelIndex;                                          // 0x0004   (0x0004)  
	float                                              TexelFactor;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.LightmassPrimitiveSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FLightmassPrimitiveSettings
{ 
	bool                                               bUseTwoSidedLighting : 1;                                   // 0x0000:0 (0x0001)  
	bool                                               bShadowIndirectOnly : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bUseEmissiveForStaticLighting : 1;                          // 0x0000:2 (0x0001)  
	bool                                               bUseVertexNormalForHemisphereGather : 1;                    // 0x0000:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              EmissiveLightFalloffExponent;                               // 0x0004   (0x0004)  
	float                                              EmissiveLightExplicitInfluenceRadius;                       // 0x0008   (0x0004)  
	float                                              EmissiveBoost;                                              // 0x000C   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0010   (0x0004)  
	float                                              FullyOccludedSamplesFraction;                               // 0x0014   (0x0004)  
};

/// Class /Script/Engine.StaticMeshComponent
/// Size: 0x05E0 (1504 bytes) (0x000560 - 0x0005E0) align n/a MaxSize: 0x05E0
class UStaticMeshComponent : public UMeshComponent
{ 
public:
	int32_t                                            ForcedLodModel;                                             // 0x0560   (0x0004)  
	int32_t                                            PreviousLODLevel;                                           // 0x0564   (0x0004)  
	int32_t                                            MinLOD;                                                     // 0x0568   (0x0004)  
	int32_t                                            SubDivisionStepSize;                                        // 0x056C   (0x0004)  
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0570   (0x0008)  
	FColor                                             WireframeColorOverride;                                     // 0x0578   (0x0004)  
	bool                                               bEvaluateWorldPositionOffset : 1;                           // 0x057C:0 (0x0001)  
	bool                                               bOverrideWireframeColor : 1;                                // 0x057C:1 (0x0001)  
	bool                                               bOverrideMinLod : 1;                                        // 0x057C:2 (0x0001)  
	bool                                               bOverrideNavigationExport : 1;                              // 0x057C:3 (0x0001)  
	bool                                               bForceNavigationObstacle : 1;                               // 0x057C:4 (0x0001)  
	bool                                               bDisallowMeshPaintPerInstance : 1;                          // 0x057C:5 (0x0001)  
	bool                                               bCanBeOccluded : 1;                                         // 0x057C:6 (0x0001)  
	bool                                               bControlPhysicsState : 1;                                   // 0x057C:7 (0x0001)  
	bool                                               bControlPhysicsStateByWorldSector : 1;                      // 0x057D:0 (0x0001)  
	bool                                               bAlreadUpdateControlPhysicsState : 1;                       // 0x057D:1 (0x0001)  
	bool                                               bActiveSector : 1;                                          // 0x057D:2 (0x0001)  
	unsigned char                                      UnknownData04_5[0x2];                                       // 0x057E   (0x0002)  MISSED
	float                                              NeverOcclusionTestDistance;                                 // 0x0580   (0x0004)  
	float                                              MaxPhysicsLimitVelocity;                                    // 0x0584   (0x0004)  
	bool                                               bIgnoreInstanceForTextureStreaming : 1;                     // 0x0588:0 (0x0001)  
	bool                                               bOverrideLightMapRes : 1;                                   // 0x0588:1 (0x0001)  
	bool                                               bCastDistanceFieldIndirectShadow : 1;                       // 0x0588:2 (0x0001)  
	bool                                               bOverrideDistanceFieldSelfShadowBias : 1;                   // 0x0588:3 (0x0001)  
	bool                                               bUseSubDivisions : 1;                                       // 0x0588:4 (0x0001)  
	bool                                               bUseDefaultCollision : 1;                                   // 0x0588:5 (0x0001)  
	bool                                               bReverseCulling : 1;                                        // 0x0588:6 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0589   (0x0003)  MISSED
	int32_t                                            OverriddenLightMapRes;                                      // 0x058C   (0x0004)  
	float                                              DistanceFieldIndirectShadowMinVisibility;                   // 0x0590   (0x0004)  
	float                                              DistanceFieldSelfShadowBias;                                // 0x0594   (0x0004)  
	float                                              StreamingDistanceMultiplier;                                // 0x0598   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x059C   (0x0004)  MISSED
	TArray<FStaticMeshComponentLODInfo>                LODData;                                                    // 0x05A0   (0x0010)  
	TArray<FStreamingTextureBuildInfo>                 StreamingTextureData;                                       // 0x05B0   (0x0010)  
	FLightmassPrimitiveSettings                        LightmassSettings;                                          // 0x05C0   (0x0018)  
	ESBSoundOcclusionSetting                           SoundOcclusionSetting;                                      // 0x05D8   (0x0001)  
	unsigned char                                      UnknownData07_7[0x7];                                       // 0x05D9   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.StaticMeshComponent.SetStaticMesh
	constexpr static const FunctionPointer<UStaticMeshComponent, bool, const UStaticMesh*> SetStaticMesh = { 0x177ed70, 0 }; 
	// Function /Script/Engine.StaticMeshComponent.SetReverseCulling
	constexpr static const FunctionPointer<UStaticMeshComponent, void, const bool> SetReverseCulling = { 0x4993d20, 1 }; 
	// Function /Script/Engine.StaticMeshComponent.SetMaxPhysicsLimitVelocity
	constexpr static const FunctionPointer<UStaticMeshComponent, void, const float> SetMaxPhysicsLimitVelocity = { 0x4994360, 2 }; 
	// Function /Script/Engine.StaticMeshComponent.SetForcedLodModel
	constexpr static const FunctionPointer<UStaticMeshComponent, void, const int32_t> SetForcedLodModel = { 0x4994280, 3 }; 
	// Function /Script/Engine.StaticMeshComponent.SetEvaluateWorldPositionOffsetInRayTracing
	constexpr static const FunctionPointer<UStaticMeshComponent, void, const bool> SetEvaluateWorldPositionOffsetInRayTracing = { 0x4993fa0, 4 }; 
	// Function /Script/Engine.StaticMeshComponent.SetDistanceFieldSelfShadowBias
	constexpr static const FunctionPointer<UStaticMeshComponent, void, const float> SetDistanceFieldSelfShadowBias = { 0x49941b0, 5 }; 
	// Function /Script/Engine.StaticMeshComponent.OnRep_StaticMesh
	constexpr static const FunctionPointer<UStaticMeshComponent, void, const UStaticMesh*> OnRep_StaticMesh = { 0x4994450, 6 }; 
	// Function /Script/Engine.StaticMeshComponent.GetMaxPhysicsLimitVelocity
	constexpr static const FunctionPointer<UStaticMeshComponent, float> GetMaxPhysicsLimitVelocity = { 0x4994430, 7 }; 
	// Function /Script/Engine.StaticMeshComponent.GetLocalBounds
	constexpr static const FunctionPointer<UStaticMeshComponent, void, const FVector&, const FVector&> GetLocalBounds = { 0x4993e20, 8 }; 
};

/// Class /Script/Engine.PhysicsVolume
/// Size: 0x0508 (1288 bytes) (0x000318 - 0x000508) align n/a MaxSize: 0x0508
class APhysicsVolume : public AVolume
{ 
public:
	float                                              TerminalVelocity;                                           // 0x0318   (0x0004)  
	int32_t                                            Priority;                                                   // 0x031C   (0x0004)  
	float                                              FluidFriction;                                              // 0x0320   (0x0004)  
	bool                                               bWaterVolume : 1;                                           // 0x0324:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0325   (0x0003)  MISSED
	bool                                               bOverridePhysicsSimGravity;                                 // 0x0328   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0329   (0x0003)  MISSED
	float                                              OverridePhysicsSimGravityZ;                                 // 0x032C   (0x0004)  
	float                                              OverridePhysicsSimGravityZRandRange;                        // 0x0330   (0x0004)  
	float                                              OverridePhysicsSimGravityXY;                                // 0x0334   (0x0004)  
	float                                              OverridePhysicsSimGravityXYOnMove;                          // 0x0338   (0x0004)  
	float                                              OverridePhysicsSimGravityXYRandRange;                       // 0x033C   (0x0004)  
	FRuntimeFloatCurve                                 GravityXRandWeightCurve;                                    // 0x0340   (0x0088)  
	FRuntimeFloatCurve                                 GravityYRandWeightCurve;                                    // 0x03C8   (0x0088)  
	FRuntimeFloatCurve                                 GravityZRandWeightCurve;                                    // 0x0450   (0x0088)  
	float                                              GravityRandIntervalX;                                       // 0x04D8   (0x0004)  
	float                                              GravityRandIntervalY;                                       // 0x04DC   (0x0004)  
	float                                              GravityRandIntervalZ;                                       // 0x04E0   (0x0004)  
	float                                              CurrentGravityRandIntervalX;                                // 0x04E4   (0x0004)  
	float                                              CurrentGravityRandIntervalY;                                // 0x04E8   (0x0004)  
	float                                              CurrentGravityRandIntervalZ;                                // 0x04EC   (0x0004)  
	bool                                               bOverridePhysicsGravityZ;                                   // 0x04F0   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x04F1   (0x0003)  MISSED
	float                                              OverridePhysicsGravityZ;                                    // 0x04F4   (0x0004)  
	bool                                               bOverrideJumpScale;                                         // 0x04F8   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x04F9   (0x0003)  MISSED
	float                                              OverrideJumpScale;                                          // 0x04FC   (0x0004)  
	bool                                               bPhysicsOnContact : 1;                                      // 0x0500:0 (0x0001)  
	unsigned char                                      UnknownData09_7[0x7];                                       // 0x0501   (0x0007)  MISSED
};

/// Class /Script/Engine.SkyLight
/// Size: 0x02D8 (728 bytes) (0x0002C8 - 0x0002D8) align n/a MaxSize: 0x02D8
class ASkyLight : public AInfo
{ 
public:
	class USkyLightComponent*                          LightComponent;                                             // 0x02C8   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x02D0:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02D1   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.SkyLight.OnRep_bEnabled
	constexpr static const FunctionPointer<ASkyLight, void> OnRep_bEnabled = { 0x47887a0, 0 }; 
};

/// Class /Script/Engine.TextureCube
/// Size: 0x0138 (312 bytes) (0x0000E0 - 0x000138) align n/a MaxSize: 0x0138
class UTextureCube : public UTexture
{ 
public:
	unsigned char                                      UnknownData01_1[0x58];                                      // 0x00E0   (0x0058)  MISSED
};

/// Struct /Script/Engine.InstancedStaticMeshInstanceData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FInstancedStaticMeshInstanceData
{ 
	FMatrix                                            Transform;                                                  // 0x0000   (0x0040)  
};

/// Struct /Script/Engine.InstancedStaticMeshMappingInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FInstancedStaticMeshMappingInfo
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Class /Script/Engine.InstancedStaticMeshComponent
/// Size: 0x0690 (1680 bytes) (0x0005E0 - 0x000690) align n/a MaxSize: 0x0690
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{ 
public:
	TArray<FInstancedStaticMeshInstanceData>           PerInstanceSMData;                                          // 0x05E0   (0x0010)  
	int32_t                                            NumCustomDataFloats;                                        // 0x05F0   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x05F4   (0x0004)  MISSED
	TArray<float>                                      PerInstanceSMCustomData;                                    // 0x05F8   (0x0010)  
	int32_t                                            InstancingRandomSeed;                                       // 0x0608   (0x0004)  
	int32_t                                            InstanceStartCullDistance;                                  // 0x060C   (0x0004)  
	int32_t                                            InstanceEndCullDistance;                                    // 0x0610   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0614   (0x0004)  MISSED
	TArray<int32_t>                                    InstanceReorderTable;                                       // 0x0618   (0x0010)  
	unsigned char                                      UnknownData07_6[0x48];                                      // 0x0628   (0x0048)  MISSED
	int32_t                                            NumPendingLightmaps;                                        // 0x0670   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x0674   (0x0004)  MISSED
	TArray<FInstancedStaticMeshMappingInfo>            CachedMappings;                                             // 0x0678   (0x0010)  
	unsigned char                                      UnknownData09_7[0x8];                                       // 0x0688   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.InstancedStaticMeshComponent.UpdateInstanceTransform
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, bool, const int32_t, const FTransform&, const bool, const bool, const bool> UpdateInstanceTransform = { 0x47c7050, 0 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCustomDataValue
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, bool, const int32_t, const int32_t, const float, const bool> SetCustomDataValue = { 0x47c7610, 1 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.SetCullDistances
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, void, const int32_t, const int32_t> SetCullDistances = { 0x47c6630, 2 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.RemoveInstance
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, bool, const int32_t> RemoveInstance = { 0x47c67e0, 3 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceTransform
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, bool, const int32_t, const FTransform&, const bool> GetInstanceTransform = { 0x47c73d0, 4 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingSphere
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, TArray<int32_t>, const FVector&, const float, const bool> GetInstancesOverlappingSphere = { 0x47c63a0, 5 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstancesOverlappingBox
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, TArray<int32_t>, const FBox&, const bool> GetInstancesOverlappingBox = { 0x47c61a0, 6 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.GetInstanceCount
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, int32_t> GetInstanceCount = { 0x47c67a0, 7 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.ClearInstances
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, void> ClearInstances = { 0x47c67c0, 8 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransforms
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, bool, const int32_t, const TArray<FTransform>&, const bool, const bool, const bool> BatchUpdateInstancesTransforms = { 0x47c6cb0, 9 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.BatchUpdateInstancesTransform
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, bool, const int32_t, const int32_t, const FTransform&, const bool, const bool, const bool> BatchUpdateInstancesTransform = { 0x47c68d0, 10 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstanceWorldSpace
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, int32_t, const FTransform&> AddInstanceWorldSpace = { 0x47c7890, 11 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstances
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, TArray<int32_t>, const TArray<FTransform>&, const bool> AddInstances = { 0x47c79e0, 12 }; 
	// Function /Script/Engine.InstancedStaticMeshComponent.AddInstance
	constexpr static const FunctionPointer<UInstancedStaticMeshComponent, int32_t, const FTransform&> AddInstance = { 0x47c7be0, 13 }; 
};

/// Class /Script/Engine.HierarchicalInstancedStaticMeshComponent
/// Size: 0x0780 (1920 bytes) (0x000690 - 0x000780) align n/a MaxSize: 0x0778
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{ 
public:
	unsigned char                                      UnknownData05_8[0x8];                                       // 0x0690   (0x0008)  MISSED
	TArray<int32_t>                                    SortedInstances;                                            // 0x0698   (0x0010)  
	int32_t                                            NumBuiltInstances;                                          // 0x06A8   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x06AC   (0x0004)  MISSED
	FBox                                               BuiltInstanceBounds;                                        // 0x06B0   (0x001C)  
	FBox                                               UnbuiltInstanceBounds;                                      // 0x06CC   (0x001C)  
	TArray<FBox>                                       UnbuiltInstanceBoundsList;                                  // 0x06E8   (0x0010)  
	bool                                               bEnableDensityScaling : 1;                                  // 0x06F8:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x7];                                       // 0x06F9   (0x0007)  MISSED
	int32_t                                            OcclusionLayerNumNodes;                                     // 0x0700   (0x0004)  
	FBoxSphereBounds                                   CacheMeshExtendedBounds;                                    // 0x0704   (0x001C)  
	bool                                               bDisableCollision;                                          // 0x0720   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0721   (0x0003)  MISSED
	int32_t                                            InstanceCountToRender;                                      // 0x0724   (0x0004)  
	unsigned char                                      UnknownData09_7[0x50];                                      // 0x0728   (0x0050)  MISSED

	/// Functions
	// Function /Script/Engine.HierarchicalInstancedStaticMeshComponent.RemoveInstances
	constexpr static const FunctionPointer<UHierarchicalInstancedStaticMeshComponent, bool, const TArray<int32_t>&> RemoveInstances = { 0x47b6e50, 0 }; 
};

/// Struct /Script/Engine.LightmassMaterialInterfaceSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FLightmassMaterialInterfaceSettings
{ 
	float                                              EmissiveBoost;                                              // 0x0000   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0004   (0x0004)  
	float                                              ExportResolutionScale;                                      // 0x0008   (0x0004)  
	bool                                               bCastShadowAsMasked : 1;                                    // 0x000C:0 (0x0001)  
	bool                                               bOverrideCastShadowAsMasked : 1;                            // 0x000C:1 (0x0001)  
	bool                                               bOverrideEmissiveBoost : 1;                                 // 0x000C:2 (0x0001)  
	bool                                               bOverrideDiffuseBoost : 1;                                  // 0x000C:3 (0x0001)  
	bool                                               bOverrideExportResolutionScale : 1;                         // 0x000C:4 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.MaterialTextureInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMaterialTextureInfo
{ 
	float                                              SamplingScale;                                              // 0x0000   (0x0004)  
	int32_t                                            UVChannelIndex;                                             // 0x0004   (0x0004)  
	FName                                              TextureName;                                                // 0x0008   (0x0008)  
};

/// Class /Script/Engine.MaterialInterface
/// Size: 0x0088 (136 bytes) (0x000028 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialInterface : public UObject
{ 
public:
	unsigned char                                      UnknownData03_8[0x10];                                      // 0x0028   (0x0010)  MISSED
	class USubsurfaceProfile*                          SubsurfaceProfile;                                          // 0x0038   (0x0008)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x0040   (0x0010)  MISSED
	FLightmassMaterialInterfaceSettings                LightmassSettings;                                          // 0x0050   (0x0010)  
	TArray<FMaterialTextureInfo>                       TextureStreamingData;                                       // 0x0060   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0070   (0x0010)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x0080   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.MaterialInterface.SetForceMipLevelsToBeResident
	constexpr static const FunctionPointer<UMaterialInterface, void, const bool, const bool, const float, const int32_t, const bool> SetForceMipLevelsToBeResident = { 0x48be530, 0 }; 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterialMask
	constexpr static const FunctionPointer<UMaterialInterface, UPhysicalMaterialMask*> GetPhysicalMaterialMask = { 0x48beba0, 1 }; 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterialFromMap
	constexpr static const FunctionPointer<UMaterialInterface, UPhysicalMaterial*, const int32_t> GetPhysicalMaterialFromMap = { 0x48beab0, 2 }; 
	// Function /Script/Engine.MaterialInterface.GetPhysicalMaterial
	constexpr static const FunctionPointer<UMaterialInterface, UPhysicalMaterial*> GetPhysicalMaterial = { 0x3dacfb0, 3 }; 
	// Function /Script/Engine.MaterialInterface.GetParameterInfo
	constexpr static const FunctionPointer<UMaterialInterface, FMaterialParameterInfo, const TEnumAsByte<EMaterialParameterAssociation>, const FName, const UMaterialFunctionInterface*> GetParameterInfo = { 0x48be860, 4 }; 
	// Function /Script/Engine.MaterialInterface.GetBaseMaterial
	constexpr static const FunctionPointer<UMaterialInterface, UMaterial*> GetBaseMaterial = { 0x17955e0, 5 }; 
};

/// Struct /Script/Engine.MaterialParameterInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMaterialParameterInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TEnumAsByte<EMaterialParameterAssociation>         Association;                                                // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            Index;                                                      // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.ScalarParameterValue
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FScalarParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	float                                              ParameterValue;                                             // 0x0010   (0x0004)  
	FGuid                                              ExpressionGUID;                                             // 0x0014   (0x0010)  
};

/// Struct /Script/Engine.VectorParameterValue
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FVectorParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	FLinearColor                                       ParameterValue;                                             // 0x0010   (0x0010)  
	FGuid                                              ExpressionGUID;                                             // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.TextureParameterValue
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FTextureParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	class UTexture*                                    ParameterValue;                                             // 0x0010   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.RuntimeVirtualTextureParameterValue
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FRuntimeVirtualTextureParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	class URuntimeVirtualTexture*                      ParameterValue;                                             // 0x0010   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.FontParameterValue
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FFontParameterValue
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	class UFont*                                       FontValue;                                                  // 0x0010   (0x0008)  
	int32_t                                            FontPage;                                                   // 0x0018   (0x0004)  
	FGuid                                              ExpressionGUID;                                             // 0x001C   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.MaterialInstanceBasePropertyOverrides
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FMaterialInstanceBasePropertyOverrides
{ 
	bool                                               bOverride_OpacityMaskClipValue : 1;                         // 0x0000:0 (0x0001)  
	bool                                               bOverride_BlendMode : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bOverride_ShadingModel : 1;                                 // 0x0000:2 (0x0001)  
	bool                                               bOverride_DitheredLODTransition : 1;                        // 0x0000:3 (0x0001)  
	bool                                               bOverride_CastDynamicShadowAsMasked : 1;                    // 0x0000:4 (0x0001)  
	bool                                               bOverride_TwoSided : 1;                                     // 0x0000:5 (0x0001)  
	bool                                               bOverride_RenderAfterDOF : 1;                               // 0x0000:6 (0x0001)  
	bool                                               bOverride_UseAlphaDiscard : 1;                              // 0x0000:7 (0x0001)  
	bool                                               TwoSided : 1;                                               // 0x0001:0 (0x0001)  
	bool                                               DitheredLODTransition : 1;                                  // 0x0001:1 (0x0001)  
	bool                                               bCastDynamicShadowAsMasked : 1;                             // 0x0001:2 (0x0001)  
	TEnumAsByte<EBlendMode>                            BlendMode;                                                  // 0x0002   (0x0001)  
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                               // 0x0003   (0x0001)  
	float                                              OpacityMaskClipValue;                                       // 0x0004   (0x0004)  
	bool                                               RenderAfterDOF : 1;                                         // 0x0008:0 (0x0001)  
	bool                                               bUseAlphaDiscard : 1;                                       // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.StaticParameterBase
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FStaticParameterBase
{ 
	FMaterialParameterInfo                             ParameterInfo;                                              // 0x0000   (0x0010)  
	bool                                               bOverride;                                                  // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	FGuid                                              ExpressionGUID;                                             // 0x0014   (0x0010)  
};

/// Struct /Script/Engine.StaticSwitchParameter
/// Size: 0x0028 (40 bytes) (0x000024 - 0x000028) align n/a MaxSize: 0x0028
struct FStaticSwitchParameter : FStaticParameterBase
{ 
	bool                                               Value;                                                      // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0025   (0x0003)  MISSED
};

/// Struct /Script/Engine.StaticComponentMaskParameter
/// Size: 0x0028 (40 bytes) (0x000024 - 0x000028) align n/a MaxSize: 0x0028
struct FStaticComponentMaskParameter : FStaticParameterBase
{ 
	bool                                               R;                                                          // 0x0024   (0x0001)  
	bool                                               G;                                                          // 0x0025   (0x0001)  
	bool                                               B;                                                          // 0x0026   (0x0001)  
	bool                                               A;                                                          // 0x0027   (0x0001)  
};

/// Struct /Script/Engine.StaticTerrainLayerWeightParameter
/// Size: 0x002C (44 bytes) (0x000024 - 0x00002C) align n/a MaxSize: 0x002C
struct FStaticTerrainLayerWeightParameter : FStaticParameterBase
{ 
	int32_t                                            WeightmapIndex;                                             // 0x0024   (0x0004)  
	bool                                               bWeightBasedBlend;                                          // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0029   (0x0003)  MISSED
};

/// Struct /Script/Engine.MaterialLayersFunctions
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FMaterialLayersFunctions
{ 
	TArray<class UMaterialFunctionInterface*>          Layers;                                                     // 0x0000   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          Blends;                                                     // 0x0010   (0x0010)  
	TArray<bool>                                       LayerStates;                                                // 0x0020   (0x0010)  
	FString                                            KeyString;                                                  // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.StaticMaterialLayersParameter
/// Size: 0x0068 (104 bytes) (0x000024 - 0x000068) align n/a MaxSize: 0x0068
struct FStaticMaterialLayersParameter : FStaticParameterBase
{ 
	unsigned char                                      UnknownData01_8[0x4];                                       // 0x0024   (0x0004)  MISSED
	FMaterialLayersFunctions                           Value;                                                      // 0x0028   (0x0040)  
};

/// Struct /Script/Engine.StaticParameterSet
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FStaticParameterSet
{ 
	TArray<FStaticSwitchParameter>                     StaticSwitchParameters;                                     // 0x0000   (0x0010)  
	TArray<FStaticComponentMaskParameter>              StaticComponentMaskParameters;                              // 0x0010   (0x0010)  
	TArray<FStaticTerrainLayerWeightParameter>         TerrainLayerWeightParameters;                               // 0x0020   (0x0010)  
	TArray<FStaticMaterialLayersParameter>             MaterialLayersParameters;                                   // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.MaterialCachedParameterEntry
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FMaterialCachedParameterEntry
{ 
	TArray<uint64_t>                                   NameHashes;                                                 // 0x0000   (0x0010)  
	TArray<FMaterialParameterInfo>                     ParameterInfos;                                             // 0x0010   (0x0010)  
	TArray<FGuid>                                      ExpressionGuids;                                            // 0x0020   (0x0010)  
	TArray<bool>                                       Overrides;                                                  // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.MaterialCachedParameters
/// Size: 0x01A0 (416 bytes) (0x000000 - 0x0001A0) align n/a MaxSize: 0x01A0
struct FMaterialCachedParameters
{ 
	FMaterialCachedParameterEntry                      RuntimeEntries[5];                                          // 0x0000   (0x0140)  
	TArray<float>                                      ScalarValues;                                               // 0x0140   (0x0010)  
	TArray<FLinearColor>                               VectorValues;                                               // 0x0150   (0x0010)  
	TArray<class UTexture*>                            TextureValues;                                              // 0x0160   (0x0010)  
	TArray<class UFont*>                               FontValues;                                                 // 0x0170   (0x0010)  
	TArray<int32_t>                                    FontPageValues;                                             // 0x0180   (0x0010)  
	TArray<class URuntimeVirtualTexture*>              RuntimeVirtualTextureValues;                                // 0x0190   (0x0010)  
};

/// Class /Script/Engine.MaterialInstance
/// Size: 0x0360 (864 bytes) (0x000088 - 0x000360) align n/a MaxSize: 0x0360
class UMaterialInstance : public UMaterialInterface
{ 
public:
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0088   (0x0008)  
	class UPhysicalMaterial*                           PhysicalMaterialMap[8];                                     // 0x0090   (0x0040)  
	class UMaterialInterface*                          Parent;                                                     // 0x00D0   (0x0008)  
	bool                                               bHasStaticPermutationResource : 1;                          // 0x00D8:0 (0x0001)  
	bool                                               bOverrideSubsurfaceProfile : 1;                             // 0x00D8:1 (0x0001)  
	unsigned char                                      UnknownData05_3[0x1];                                       // 0x00D9   (0x0001)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x00DA:0 (0x0001)  MISSED
	bool                                               bUseAlphaDiscard : 1;                                       // 0x00DA:1 (0x0001)  
	unsigned char                                      UnknownData07_5[0x5];                                       // 0x00DB   (0x0005)  MISSED
	TArray<FScalarParameterValue>                      ScalarParameterValues;                                      // 0x00E0   (0x0010)  
	TArray<FVectorParameterValue>                      VectorParameterValues;                                      // 0x00F0   (0x0010)  
	TArray<FTextureParameterValue>                     TextureParameterValues;                                     // 0x0100   (0x0010)  
	TArray<FRuntimeVirtualTextureParameterValue>       RuntimeVirtualTextureParameterValues;                       // 0x0110   (0x0010)  
	TArray<FFontParameterValue>                        FontParameterValues;                                        // 0x0120   (0x0010)  
	FMaterialInstanceBasePropertyOverrides             BasePropertyOverrides;                                      // 0x0130   (0x000C)  
	unsigned char                                      UnknownData08_6[0xC];                                       // 0x013C   (0x000C)  MISSED
	FStaticParameterSet                                StaticParameters;                                           // 0x0148   (0x0040)  
	FMaterialCachedParameters                          CachedLayerParameters;                                      // 0x0188   (0x01A0)  
	TArray<class UObject*>                             CachedReferencedTextures;                                   // 0x0328   (0x0010)  
	unsigned char                                      UnknownData09_7[0x28];                                      // 0x0338   (0x0028)  MISSED
};

/// Class /Script/Engine.MaterialInstanceConstant
/// Size: 0x0368 (872 bytes) (0x000360 - 0x000368) align n/a MaxSize: 0x0368
class UMaterialInstanceConstant : public UMaterialInstance
{ 
public:
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                           // 0x0360   (0x0008)  

	/// Functions
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetVectorParameterValue
	constexpr static const FunctionPointer<UMaterialInstanceConstant, FLinearColor, const FName> K2_GetVectorParameterValue = { 0x48bb610, 0 }; 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetTextureParameterValue
	constexpr static const FunctionPointer<UMaterialInstanceConstant, UTexture*, const FName> K2_GetTextureParameterValue = { 0x48bb7a0, 1 }; 
	// Function /Script/Engine.MaterialInstanceConstant.K2_GetScalarParameterValue
	constexpr static const FunctionPointer<UMaterialInstanceConstant, float, const FName> K2_GetScalarParameterValue = { 0x48bb940, 2 }; 
};

/// Class /Script/Engine.MaterialExpressionCustomOutput
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionCustomOutput : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.EngineCustomTimeStep
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UEngineCustomTimeStep : public UObject
{ 
public:
};

/// Class /Script/Engine.DynamicBlueprintBinding
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UDynamicBlueprintBinding : public UObject
{ 
public:
};

/// Class /Script/Engine.BlueprintCore
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UBlueprintCore : public UObject
{ 
public:
	class UClass*                                      SkeletonGeneratedClass;                                     // 0x0028   (0x0008)  
	class UClass*                                      GeneratedClass;                                             // 0x0030   (0x0008)  
	bool                                               bLegacyNeedToPurgeSkelRefs;                                 // 0x0038   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FGuid                                              BlueprintGuid;                                              // 0x003C   (0x0010)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.Blueprint
/// Size: 0x00A0 (160 bytes) (0x000050 - 0x0000A0) align n/a MaxSize: 0x00A0
class UBlueprint : public UBlueprintCore
{ 
public:
	class UClass*                                      ParentClass;                                                // 0x0050   (0x0008)  
	TEnumAsByte<EBlueprintType>                        BlueprintType;                                              // 0x0058   (0x0001)  
	bool                                               bRecompileOnLoad : 1;                                       // 0x0059:0 (0x0001)  
	bool                                               bHasBeenRegenerated : 1;                                    // 0x0059:1 (0x0001)  
	bool                                               bIsRegeneratingOnLoad : 1;                                  // 0x0059:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x005A   (0x0002)  MISSED
	int32_t                                            BlueprintSystemVersion;                                     // 0x005C   (0x0004)  
	class USimpleConstructionScript*                   SimpleConstructionScript;                                   // 0x0060   (0x0008)  
	TArray<class UActorComponent*>                     ComponentTemplates;                                         // 0x0068   (0x0010)  
	TArray<class UTimelineTemplate*>                   Timelines;                                                  // 0x0078   (0x0010)  
	TArray<FBPComponentClassOverride>                  ComponentClassOverrides;                                    // 0x0088   (0x0010)  
	class UInheritableComponentHandler*                InheritableComponentHandler;                                // 0x0098   (0x0008)  
};

/// Class /Script/Engine.Model
/// Size: 0x0258 (600 bytes) (0x000028 - 0x000258) align n/a MaxSize: 0x0258
class UModel : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x230];                                     // 0x0028   (0x0230)  MISSED
};

/// Class /Script/Engine.Channel
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class UChannel : public UObject
{ 
public:
	class UNetConnection*                              Connection;                                                 // 0x0028   (0x0008)  
	unsigned char                                      UnknownData01_7[0x40];                                      // 0x0030   (0x0040)  MISSED
};

/// Class /Script/Engine.ActorChannel
/// Size: 0x0298 (664 bytes) (0x000070 - 0x000298) align n/a MaxSize: 0x0298
class UActorChannel : public UChannel
{ 
public:
	class AActor*                                      Actor;                                                      // 0x0070   (0x0008)  
	unsigned char                                      UnknownData02_6[0xE8];                                      // 0x0078   (0x00E8)  MISSED
	TArray<class UObject*>                             CreateSubObjects;                                           // 0x0160   (0x0010)  
	unsigned char                                      UnknownData03_7[0x128];                                     // 0x0170   (0x0128)  MISSED
};

/// Class /Script/Engine.AnimationAsset
/// Size: 0x0080 (128 bytes) (0x000028 - 0x000080) align n/a MaxSize: 0x0080
class UAnimationAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x10];                                      // 0x0028   (0x0010)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0038   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x0040   (0x0020)  MISSED
	TArray<class UAnimMetaData*>                       MetaData;                                                   // 0x0060   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.InterpolationParameter
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FInterpolationParameter
{ 
	float                                              InterpolationTime;                                          // 0x0000   (0x0004)  
	TEnumAsByte<EFilterInterpolationType>              InterpolationType;                                          // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.PerBoneInterpolation
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FPerBoneInterpolation
{ 
	FBoneReference                                     BoneReference;                                              // 0x0000   (0x0010)  
	float                                              InterpolationSpeedPerSec;                                   // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.BlendSample
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FBlendSample
{ 
	class UAnimSequence*                               Animation;                                                  // 0x0000   (0x0008)  
	FVector                                            SampleValue;                                                // 0x0008   (0x000C)  
	float                                              RateScale;                                                  // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.EditorElement
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FEditorElement
{ 
	int32_t                                            Indices[3];                                                 // 0x0000   (0x000C)  
	float                                              Weights[3];                                                 // 0x000C   (0x000C)  
};

/// Struct /Script/Engine.BlendParameter
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FBlendParameter
{ 
	FString                                            DisplayName;                                                // 0x0000   (0x0010)  
	float                                              Min;                                                        // 0x0010   (0x0004)  
	float                                              Max;                                                        // 0x0014   (0x0004)  
	int32_t                                            GridNum;                                                    // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.BlendSpaceBase
/// Size: 0x0148 (328 bytes) (0x000080 - 0x000148) align n/a MaxSize: 0x0148
class UBlendSpaceBase : public UAnimationAsset
{ 
public:
	unsigned char                                      UnknownData04_8[0x8];                                       // 0x0080   (0x0008)  MISSED
	bool                                               bRotationBlendInMeshSpace;                                  // 0x0088   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	float                                              AnimLength;                                                 // 0x008C   (0x0004)  
	FInterpolationParameter                            InterpolationParam[3];                                      // 0x0090   (0x0018)  
	float                                              TargetWeightInterpolationSpeedPerSec;                       // 0x00A8   (0x0004)  
	TEnumAsByte<ENotifyTriggerMode>                    NotifyTriggerMode;                                          // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	TArray<FPerBoneInterpolation>                      PerBoneBlend;                                               // 0x00B0   (0x0010)  
	int32_t                                            SampleIndexWithMarkers;                                     // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	TArray<FBlendSample>                               SampleData;                                                 // 0x00C8   (0x0010)  
	TArray<FEditorElement>                             GridSamples;                                                // 0x00D8   (0x0010)  
	FBlendParameter                                    BlendParameters[3];                                         // 0x00E8   (0x0060)  
};

/// Class /Script/Engine.BlendSpace
/// Size: 0x0150 (336 bytes) (0x000148 - 0x000150) align n/a MaxSize: 0x0150
class UBlendSpace : public UBlendSpaceBase
{ 
public:
	TEnumAsByte<EBlendSpaceAxis>                       AxisToScaleAnimation;                                       // 0x0148   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0149   (0x0007)  MISSED
};

/// Class /Script/Engine.AimOffsetBlendSpace
/// Size: 0x0150 (336 bytes) (0x000150 - 0x000150) align n/a MaxSize: 0x0150
class UAimOffsetBlendSpace : public UBlendSpace
{ 
public:
};

/// Class /Script/Engine.BlendSpace1D
/// Size: 0x0150 (336 bytes) (0x000148 - 0x000150) align n/a MaxSize: 0x0150
class UBlendSpace1D : public UBlendSpaceBase
{ 
public:
	bool                                               bScaleAnimation;                                            // 0x0148   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0149   (0x0007)  MISSED
};

/// Class /Script/Engine.AimOffsetBlendSpace1D
/// Size: 0x0150 (336 bytes) (0x000150 - 0x000150) align n/a MaxSize: 0x0150
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{ 
public:
};

/// Class /Script/Engine.AISystemBase
/// Size: 0x0058 (88 bytes) (0x000028 - 0x000058) align n/a MaxSize: 0x0058
class UAISystemBase : public UObject
{ 
public:
	FSoftClassPath                                     AISystemClassName;                                          // 0x0028   (0x0018)  
	FName                                              AISystemModuleName;                                         // 0x0040   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0048   (0x0008)  MISSED
	bool                                               bInstantiateAISystemOnClient;                               // 0x0050   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/Engine.CustomAttributeSetting
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FCustomAttributeSetting
{ 
	FString                                            Name;                                                       // 0x0000   (0x0010)  
	FString                                            Meaning;                                                    // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AnimationSettings
/// Size: 0x00D0 (208 bytes) (0x000038 - 0x0000D0) align n/a MaxSize: 0x00D0
class UAnimationSettings : public UDeveloperSettings
{ 
public:
	int32_t                                            CompressCommandletVersion;                                  // 0x0038   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	TArray<FString>                                    KeyEndEffectorsMatchNameArray;                              // 0x0040   (0x0010)  
	bool                                               ForceRecompression;                                         // 0x0050   (0x0001)  
	bool                                               bForceBelowThreshold;                                       // 0x0051   (0x0001)  
	bool                                               bFirstRecompressUsingCurrentOrDefault;                      // 0x0052   (0x0001)  
	bool                                               bRaiseMaxErrorToExisting;                                   // 0x0053   (0x0001)  
	bool                                               bEnablePerformanceLog;                                      // 0x0054   (0x0001)  
	bool                                               bStripAnimationDataOnDedicatedServer;                       // 0x0055   (0x0001)  
	bool                                               bTickAnimationOnSkeletalMeshInit;                           // 0x0056   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0057   (0x0001)  MISSED
	TArray<FCustomAttributeSetting>                    BoneCustomAttributesNames;                                  // 0x0058   (0x0010)  
	TArray<FString>                                    BoneNamesWithCustomAttributes;                              // 0x0068   (0x0010)  
	TMap<FName, ECustomAttributeBlendType>             AttributeBlendModes;                                        // 0x0078   (0x0050)  
	ECustomAttributeBlendType                          DefaultAttributeBlendMode;                                  // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00C9   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimGroupInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FAnimGroupInfo
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FLinearColor                                       Color;                                                      // 0x0008   (0x0010)  
};

/// Class /Script/Engine.AnimBlueprint
/// Size: 0x00C8 (200 bytes) (0x0000A0 - 0x0000C8) align n/a MaxSize: 0x00C8
class UAnimBlueprint : public UBlueprint
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x00A0   (0x0008)  MISSED
	class USkeleton*                                   TargetSkeleton;                                             // 0x00A8   (0x0008)  
	TArray<FAnimGroupInfo>                             Groups;                                                     // 0x00B0   (0x0010)  
	bool                                               bUseMultiThreadedAnimationUpdate;                           // 0x00C0   (0x0001)  
	bool                                               bWarnAboutBlueprintUsage;                                   // 0x00C1   (0x0001)  
	unsigned char                                      UnknownData03_7[0x6];                                       // 0x00C2   (0x0006)  MISSED
};

/// Struct /Script/Engine.BakedStateExitTransition
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FBakedStateExitTransition
{ 
	int32_t                                            CanTakeDelegateIndex;                                       // 0x0000   (0x0004)  
	int32_t                                            CustomResultNodeIndex;                                      // 0x0004   (0x0004)  
	int32_t                                            TransitionIndex;                                            // 0x0008   (0x0004)  
	bool                                               bDesiredTransitionReturnValue;                              // 0x000C   (0x0001)  
	bool                                               bAutomaticRemainingTimeRule;                                // 0x000D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x000E   (0x0002)  MISSED
	TArray<int32_t>                                    PoseEvaluatorLinks;                                         // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BakedAnimationState
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FBakedAnimationState
{ 
	FName                                              StateName;                                                  // 0x0000   (0x0008)  
	TArray<FBakedStateExitTransition>                  Transitions;                                                // 0x0008   (0x0010)  
	int32_t                                            StateRootNodeIndex;                                         // 0x0018   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x001C   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0020   (0x0004)  
	int32_t                                            FullyBlendedNotify;                                         // 0x0024   (0x0004)  
	bool                                               bIsAConduit;                                                // 0x0028   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	int32_t                                            EntryRuleNodeIndex;                                         // 0x002C   (0x0004)  
	TArray<int32_t>                                    PlayerNodeIndices;                                          // 0x0030   (0x0010)  
	TArray<int32_t>                                    LayerNodeIndices;                                           // 0x0040   (0x0010)  
	bool                                               bAlwaysResetOnEntry;                                        // 0x0050   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimationStateBase
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FAnimationStateBase
{ 
	FName                                              StateName;                                                  // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.AnimationTransitionBetweenStates
/// Size: 0x0040 (64 bytes) (0x000008 - 0x000040) align n/a MaxSize: 0x0040
struct FAnimationTransitionBetweenStates : FAnimationStateBase
{ 
	int32_t                                            PreviousState;                                              // 0x0008   (0x0004)  
	int32_t                                            NextState;                                                  // 0x000C   (0x0004)  
	float                                              CrossfadeDuration;                                          // 0x0010   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x0014   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0018   (0x0004)  
	int32_t                                            InterruptNotify;                                            // 0x001C   (0x0004)  
	EAlphaBlendOption                                  BlendMode;                                                  // 0x0020   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0021   (0x0007)  MISSED
	class UCurveFloat*                                 CustomCurve;                                                // 0x0028   (0x0008)  
	class UBlendProfile*                               BlendProfile;                                               // 0x0030   (0x0008)  
	TEnumAsByte<ETransitionLogicType>                  LogicType;                                                  // 0x0038   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.BakedAnimationStateMachine
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FBakedAnimationStateMachine
{ 
	FName                                              MachineName;                                                // 0x0000   (0x0008)  
	int32_t                                            InitialState;                                               // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FBakedAnimationState>                       States;                                                     // 0x0010   (0x0010)  
	TArray<FAnimationTransitionBetweenStates>          Transitions;                                                // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.CachedPoseIndices
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FCachedPoseIndices
{ 
	TArray<int32_t>                                    OrderedSavedPoseNodeIndices;                                // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ExposedValueCopyRecord
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FExposedValueCopyRecord
{ 
	int32_t                                            CopyIndex;                                                  // 0x0000   (0x0004)  
	EPostCopyOperation                                 PostCopyOperation;                                          // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.ExposedValueHandler
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FExposedValueHandler
{ 
	FName                                              BoundFunction;                                              // 0x0000   (0x0008)  
	TArray<FExposedValueCopyRecord>                    CopyRecords;                                                // 0x0008   (0x0010)  
	class UFunction*                                   Function;                                                   // 0x0018   (0x0008)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x0020   (0x0030)  MISSED
};

/// Struct /Script/Engine.GraphAssetPlayerInformation
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FGraphAssetPlayerInformation
{ 
	TArray<int32_t>                                    PlayerNodeIndices;                                          // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.AnimGraphBlendOptions
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FAnimGraphBlendOptions
{ 
	float                                              BlendInTime;                                                // 0x0000   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0004   (0x0004)  
};

/// Class /Script/Engine.AnimBlueprintGeneratedClass
/// Size: 0x05B0 (1456 bytes) (0x000328 - 0x0005B0) align n/a MaxSize: 0x05B0
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0328   (0x0008)  MISSED
	TArray<FBakedAnimationStateMachine>                BakedStateMachines;                                         // 0x0330   (0x0010)  
	class USkeleton*                                   TargetSkeleton;                                             // 0x0340   (0x0008)  
	TArray<FAnimNotifyEvent>                           AnimNotifies;                                               // 0x0348   (0x0010)  
	TMap<FName, FCachedPoseIndices>                    OrderedSavedPoseIndicesMap;                                 // 0x0358   (0x0050)  
	unsigned char                                      UnknownData03_6[0x80];                                      // 0x03A8   (0x0080)  MISSED
	TArray<FName>                                      SyncGroupNames;                                             // 0x0428   (0x0010)  
	TArray<FExposedValueHandler>                       EvaluateGraphExposedInputs;                                 // 0x0438   (0x0010)  
	TMap<FName, FGraphAssetPlayerInformation>          GraphAssetPlayerInformation;                                // 0x0448   (0x0050)  
	TMap<FName, FAnimGraphBlendOptions>                GraphBlendOptions;                                          // 0x0498   (0x0050)  
	FPropertyAccessLibrary                             PropertyAccessLibrary;                                      // 0x04E8   (0x00C8)  
};

/// Class /Script/Engine.AnimBoneCompressionSettings
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UAnimBoneCompressionSettings : public UObject
{ 
public:
	TArray<class UAnimBoneCompressionCodec*>           Codecs;                                                     // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.AnimBlueprintFunction
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FAnimBlueprintFunction
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FName                                              Group;                                                      // 0x0008   (0x0008)  
	int32_t                                            OutputPoseNodeIndex;                                        // 0x0010   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	TArray<FName>                                      InputPoseNames;                                             // 0x0018   (0x0010)  
	TArray<int32_t>                                    InputPoseNodeIndices;                                       // 0x0028   (0x0010)  
	unsigned char                                      UnknownData04_6[0x28];                                      // 0x0038   (0x0028)  MISSED
	bool                                               bImplemented;                                               // 0x0060   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Struct /Script/Engine.AnimBlueprintFunctionData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FAnimBlueprintFunctionData
{ 
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0000   (0x0020)  MISSED
	TArray<InputPoseNodeProperties>                    InputPoseNodeProperties;                                    // 0x0020   (0x0010)  
	TArray<InputProperties>                            InputProperties;                                            // 0x0030   (0x0010)  
};

/// Class /Script/Engine.AnimClassData
/// Size: 0x0330 (816 bytes) (0x000028 - 0x000330) align n/a MaxSize: 0x0330
class UAnimClassData : public UObject
{ 
public:
	unsigned char                                      UnknownData08_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	TArray<FBakedAnimationStateMachine>                BakedStateMachines;                                         // 0x0030   (0x0010)  
	class USkeleton*                                   TargetSkeleton;                                             // 0x0040   (0x0008)  
	TArray<FAnimNotifyEvent>                           AnimNotifies;                                               // 0x0048   (0x0010)  
	TMap<FName, FCachedPoseIndices>                    OrderedSavedPoseIndicesMap;                                 // 0x0058   (0x0050)  
	TArray<FAnimBlueprintFunction>                     AnimBlueprintFunctions;                                     // 0x00A8   (0x0010)  
	TArray<FAnimBlueprintFunctionData>                 AnimBlueprintFunctionData;                                  // 0x00B8   (0x0010)  
	TArray<AnimNodeProperties>                         AnimNodeProperties;                                         // 0x00C8   (0x0010)  
	unsigned char                                      UnknownData09_6[0x10];                                      // 0x00D8   (0x0010)  MISSED
	TArray<LinkedAnimGraphNodeProperties>              LinkedAnimGraphNodeProperties;                              // 0x00E8   (0x0010)  
	unsigned char                                      UnknownData10_6[0x10];                                      // 0x00F8   (0x0010)  MISSED
	TArray<LinkedAnimLayerNodeProperties>              LinkedAnimLayerNodeProperties;                              // 0x0108   (0x0010)  
	unsigned char                                      UnknownData11_6[0x10];                                      // 0x0118   (0x0010)  MISSED
	TArray<PreUpdateNodeProperties>                    PreUpdateNodeProperties;                                    // 0x0128   (0x0010)  
	unsigned char                                      UnknownData12_6[0x10];                                      // 0x0138   (0x0010)  MISSED
	TArray<DynamicResetNodeProperties>                 DynamicResetNodeProperties;                                 // 0x0148   (0x0010)  
	unsigned char                                      UnknownData13_6[0x10];                                      // 0x0158   (0x0010)  MISSED
	TArray<StateMachineNodeProperties>                 StateMachineNodeProperties;                                 // 0x0168   (0x0010)  
	unsigned char                                      UnknownData14_6[0x10];                                      // 0x0178   (0x0010)  MISSED
	TArray<InitializationNodeProperties>               InitializationNodeProperties;                               // 0x0188   (0x0010)  
	unsigned char                                      UnknownData15_6[0x10];                                      // 0x0198   (0x0010)  MISSED
	TMap<FName, FGraphAssetPlayerInformation>          GraphNameAssetPlayers;                                      // 0x01A8   (0x0050)  
	TArray<FName>                                      SyncGroupNames;                                             // 0x01F8   (0x0010)  
	TArray<FExposedValueHandler>                       EvaluateGraphExposedInputs;                                 // 0x0208   (0x0010)  
	TMap<FName, FAnimGraphBlendOptions>                GraphBlendOptions;                                          // 0x0218   (0x0050)  
	FPropertyAccessLibrary                             PropertyAccessLibrary;                                      // 0x0268   (0x00C8)  
};

/// Class /Script/Engine.AnimClassInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAnimClassInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.SmartName
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSmartName
{ 
	FName                                              DisplayName;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0008   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimCurveBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FAnimCurveBase
{ 
	FName                                              LastObservedName;                                           // 0x0000   (0x0008)  
	FSmartName                                         Name;                                                       // 0x0008   (0x000C)  
	int32_t                                            CurveTypeFlags;                                             // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.FloatCurve
/// Size: 0x0098 (152 bytes) (0x000018 - 0x000098) align n/a MaxSize: 0x0098
struct FFloatCurve : FAnimCurveBase
{ 
	FRichCurve                                         FloatCurve;                                                 // 0x0018   (0x0080)  
};

/// Struct /Script/Engine.RawCurveTracks
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FRawCurveTracks
{ 
	TArray<FFloatCurve>                                FloatCurves;                                                // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimSequenceBase
/// Size: 0x00A8 (168 bytes) (0x000080 - 0x0000A8) align n/a MaxSize: 0x00A8
class UAnimSequenceBase : public UAnimationAsset
{ 
public:
	TArray<FAnimNotifyEvent>                           Notifies;                                                   // 0x0080   (0x0010)  
	float                                              SequenceLength;                                             // 0x0090   (0x0004)  
	float                                              RateScale;                                                  // 0x0094   (0x0004)  
	FRawCurveTracks                                    RawCurveData;                                               // 0x0098   (0x0010)  

	/// Functions
	// Function /Script/Engine.AnimSequenceBase.GetPlayLength
	constexpr static const FunctionPointer<UAnimSequenceBase, float> GetPlayLength = { 0x4718fd0, 0 }; 
};

/// Class /Script/Engine.AnimCompositeBase
/// Size: 0x00A8 (168 bytes) (0x0000A8 - 0x0000A8) align n/a MaxSize: 0x00A8
class UAnimCompositeBase : public UAnimSequenceBase
{ 
public:
};

/// Struct /Script/Engine.AnimSegment
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FAnimSegment
{ 
	class UAnimSequenceBase*                           AnimReference;                                              // 0x0000   (0x0008)  
	float                                              StartPos;                                                   // 0x0008   (0x0004)  
	float                                              AnimStartTime;                                              // 0x000C   (0x0004)  
	float                                              AnimEndTime;                                                // 0x0010   (0x0004)  
	float                                              AnimPlayRate;                                               // 0x0014   (0x0004)  
	int32_t                                            LoopingCount;                                               // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimTrack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FAnimTrack
{ 
	TArray<FAnimSegment>                               AnimSegments;                                               // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimComposite
/// Size: 0x00B8 (184 bytes) (0x0000A8 - 0x0000B8) align n/a MaxSize: 0x00B8
class UAnimComposite : public UAnimCompositeBase
{ 
public:
	FAnimTrack                                         AnimationTrack;                                             // 0x00A8   (0x0010)  
};

/// Class /Script/Engine.AnimCompress
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align n/a MaxSize: 0x0040
class UAnimCompress : public UAnimBoneCompressionCodec
{ 
public:
	bool                                               bNeedsSkeleton : 1;                                         // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	TEnumAsByte<AnimationCompressionFormat>            TranslationCompressionFormat;                               // 0x003C   (0x0001)  
	TEnumAsByte<AnimationCompressionFormat>            RotationCompressionFormat;                                  // 0x003D   (0x0001)  
	TEnumAsByte<AnimationCompressionFormat>            ScaleCompressionFormat;                                     // 0x003E   (0x0001)  
	unsigned char                                      UnknownData03_7[0x1];                                       // 0x003F   (0x0001)  MISSED
};

/// Class /Script/Engine.AnimCompress_BitwiseCompressOnly
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{ 
public:
};

/// Class /Script/Engine.AnimCompress_LeastDestructive
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
{ 
public:
};

/// Class /Script/Engine.AnimCompress_RemoveLinearKeys
/// Size: 0x0060 (96 bytes) (0x000040 - 0x000060) align n/a MaxSize: 0x0060
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{ 
public:
	float                                              MaxPosDiff;                                                 // 0x0040   (0x0004)  
	float                                              MaxAngleDiff;                                               // 0x0044   (0x0004)  
	float                                              MaxScaleDiff;                                               // 0x0048   (0x0004)  
	float                                              MaxEffectorDiff;                                            // 0x004C   (0x0004)  
	float                                              MinEffectorDiff;                                            // 0x0050   (0x0004)  
	float                                              EffectorDiffSocket;                                         // 0x0054   (0x0004)  
	float                                              ParentKeyScale;                                             // 0x0058   (0x0004)  
	bool                                               bRetarget : 1;                                              // 0x005C:0 (0x0001)  
	bool                                               bActuallyFilterLinearKeys : 1;                              // 0x005C:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x005D   (0x0003)  MISSED
};

/// Class /Script/Engine.AnimCompress_PerTrackCompression
/// Size: 0x00D8 (216 bytes) (0x000060 - 0x0000D8) align n/a MaxSize: 0x00D8
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{ 
public:
	float                                              MaxZeroingThreshold;                                        // 0x0060   (0x0004)  
	float                                              MaxPosDiffBitwise;                                          // 0x0064   (0x0004)  
	float                                              MaxAngleDiffBitwise;                                        // 0x0068   (0x0004)  
	float                                              MaxScaleDiffBitwise;                                        // 0x006C   (0x0004)  
	TArray<TEnumAsByte<AnimationCompressionFormat>>    AllowedRotationFormats;                                     // 0x0070   (0x0010)  
	TArray<TEnumAsByte<AnimationCompressionFormat>>    AllowedTranslationFormats;                                  // 0x0080   (0x0010)  
	TArray<TEnumAsByte<AnimationCompressionFormat>>    AllowedScaleFormats;                                        // 0x0090   (0x0010)  
	bool                                               bResampleAnimation : 1;                                     // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	float                                              ResampledFramerate;                                         // 0x00A4   (0x0004)  
	int32_t                                            MinKeysForResampling;                                       // 0x00A8   (0x0004)  
	bool                                               bUseAdaptiveError : 1;                                      // 0x00AC:0 (0x0001)  
	bool                                               bUseOverrideForEndEffectors : 1;                            // 0x00AC:1 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x00AD   (0x0003)  MISSED
	int32_t                                            TrackHeightBias;                                            // 0x00B0   (0x0004)  
	float                                              ParentingDivisor;                                           // 0x00B4   (0x0004)  
	float                                              ParentingDivisorExponent;                                   // 0x00B8   (0x0004)  
	bool                                               bUseAdaptiveError2 : 1;                                     // 0x00BC:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x00BD   (0x0003)  MISSED
	float                                              RotationErrorSourceRatio;                                   // 0x00C0   (0x0004)  
	float                                              TranslationErrorSourceRatio;                                // 0x00C4   (0x0004)  
	float                                              ScaleErrorSourceRatio;                                      // 0x00C8   (0x0004)  
	float                                              MaxErrorPerTrackRatio;                                      // 0x00CC   (0x0004)  
	float                                              PerturbationProbeSize;                                      // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x00D4   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimCompress_RemoveEverySecondKey
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{ 
public:
	int32_t                                            MinKeys;                                                    // 0x0040   (0x0004)  
	bool                                               bStartAtSecondKey : 1;                                      // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Class /Script/Engine.AnimCompress_RemoveTrivialKeys
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align n/a MaxSize: 0x0050
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{ 
public:
	float                                              MaxPosDiff;                                                 // 0x0040   (0x0004)  
	float                                              MaxAngleDiff;                                               // 0x0044   (0x0004)  
	float                                              MaxScaleDiff;                                               // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimCurveCompressionCodec_CompressedRichCurve
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformIndexable
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionCodec_UniformlySampled
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
{ 
public:
};

/// Class /Script/Engine.AnimCurveCompressionSettings
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UAnimCurveCompressionSettings : public UObject
{ 
public:
	class UAnimCurveCompressionCodec*                  Codec;                                                      // 0x0028   (0x0008)  
};

/// Class /Script/Engine.AnimLayerInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAnimLayerInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.AnimMetaData
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAnimMetaData : public UObject
{ 
public:
};

/// Struct /Script/Engine.AlphaBlend
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FAlphaBlend
{ 
	class UCurveFloat*                                 CustomCurve;                                                // 0x0000   (0x0008)  
	float                                              BlendTime;                                                  // 0x0008   (0x0004)  
	unsigned char                                      UnknownData02_6[0x18];                                      // 0x000C   (0x0018)  MISSED
	EAlphaBlendOption                                  BlendOption;                                                // 0x0024   (0x0001)  
	unsigned char                                      UnknownData03_7[0xB];                                       // 0x0025   (0x000B)  MISSED
};

/// Struct /Script/Engine.AnimSyncMarker
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FAnimSyncMarker
{ 
	FName                                              MarkerName;                                                 // 0x0000   (0x0008)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.MarkerSyncData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FMarkerSyncData
{ 
	TArray<FAnimSyncMarker>                            AuthoredSyncMarkers;                                        // 0x0000   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Struct /Script/Engine.CompositeSection
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align n/a MaxSize: 0x0058
struct FCompositeSection : FAnimLinkableElement
{ 
	FName                                              SectionName;                                                // 0x0030   (0x0008)  
	float                                              StartTime;                                                  // 0x0038   (0x0004)  
	FName                                              NextSectionName;                                            // 0x003C   (0x0008)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<class UAnimMetaData*>                       MetaData;                                                   // 0x0048   (0x0010)  
};

/// Struct /Script/Engine.SlotAnimationTrack
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSlotAnimationTrack
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x0008)  
	FAnimTrack                                         AnimTrack;                                                  // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BranchingPoint
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
struct FBranchingPoint : FAnimLinkableElement
{ 
	FName                                              EventName;                                                  // 0x0030   (0x0008)  
	float                                              DisplayTime;                                                // 0x0038   (0x0004)  
	float                                              TriggerTimeOffset;                                          // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.BranchingPointMarker
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FBranchingPointMarker
{ 
	int32_t                                            NotifyIndex;                                                // 0x0000   (0x0004)  
	float                                              TriggerTime;                                                // 0x0004   (0x0004)  
	TEnumAsByte<EAnimNotifyEventType>                  NotifyEventType;                                            // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.TimeStretchCurveMarker
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FTimeStretchCurveMarker
{ 
	float                                              Time[3];                                                    // 0x0000   (0x000C)  
	float                                              Alpha;                                                      // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.TimeStretchCurve
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FTimeStretchCurve
{ 
	float                                              SamplingRate;                                               // 0x0000   (0x0004)  
	float                                              CurveValueMinPrecision;                                     // 0x0004   (0x0004)  
	TArray<FTimeStretchCurveMarker>                    Markers;                                                    // 0x0008   (0x0010)  
	float                                              Sum_dT_i_by_C_i[3];                                         // 0x0018   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimMontage
/// Size: 0x01D0 (464 bytes) (0x0000A8 - 0x0001D0) align n/a MaxSize: 0x01D0
class UAnimMontage : public UAnimCompositeBase
{ 
public:
	FAlphaBlend                                        BlendIn;                                                    // 0x00A8   (0x0030)  
	float                                              BlendInTime;                                                // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	FAlphaBlend                                        BlendOut;                                                   // 0x00E0   (0x0030)  
	float                                              BlendOutTime;                                               // 0x0110   (0x0004)  
	float                                              BlendOutTriggerTime;                                        // 0x0114   (0x0004)  
	FName                                              SyncGroup;                                                  // 0x0118   (0x0008)  
	int32_t                                            SyncSlotIndex;                                              // 0x0120   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	FMarkerSyncData                                    MarkerData;                                                 // 0x0128   (0x0020)  
	TArray<FCompositeSection>                          CompositeSections;                                          // 0x0148   (0x0010)  
	TArray<FSlotAnimationTrack>                        SlotAnimTracks;                                             // 0x0158   (0x0010)  
	TArray<FBranchingPoint>                            BranchingPoints;                                            // 0x0168   (0x0010)  
	bool                                               bEnableRootMotionTranslation;                               // 0x0178   (0x0001)  
	bool                                               bEnableRootMotionRotation;                                  // 0x0179   (0x0001)  
	bool                                               bEnableAutoBlendOut;                                        // 0x017A   (0x0001)  
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                         // 0x017B   (0x0001)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x017C   (0x0004)  MISSED
	TArray<FBranchingPointMarker>                      BranchingPointMarkers;                                      // 0x0180   (0x0010)  
	TArray<int32_t>                                    BranchingPointStateNotifyIndices;                           // 0x0190   (0x0010)  
	FTimeStretchCurve                                  TimeStretchCurve;                                           // 0x01A0   (0x0028)  
	FName                                              TimeStretchCurveName;                                       // 0x01C8   (0x0008)  

	/// Functions
	// Function /Script/Engine.AnimMontage.GetDefaultBlendOutTime
	constexpr static const FunctionPointer<UAnimMontage, float> GetDefaultBlendOutTime = { 0x4710050, 0 }; 
};

/// Class /Script/Engine.AnimNotify_PauseClothingSimulation
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align n/a MaxSize: 0x0038
class UAnimNotify_PauseClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_PlayParticleEffect
/// Size: 0x0090 (144 bytes) (0x000038 - 0x000090) align n/a MaxSize: 0x0090
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0038   (0x0008)  
	FVector                                            LocationOffset;                                             // 0x0040   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x004C   (0x000C)  
	FVector                                            Scale;                                                      // 0x0058   (0x000C)  
	unsigned char                                      UnknownData03_6[0x1C];                                      // 0x0064   (0x001C)  MISSED
	bool                                               Attached : 1;                                               // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0081   (0x0003)  MISSED
	FName                                              SocketName;                                                 // 0x0084   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.AnimNotify_PlaySound
/// Size: 0x0068 (104 bytes) (0x000038 - 0x000068) align n/a MaxSize: 0x0068
class UAnimNotify_PlaySound : public UAnimNotify
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x0038   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x0040   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x0044   (0x0004)  
	bool                                               bFollow : 1;                                                // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	FName                                              AttachName;                                                 // 0x004C   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	class USoundClass*                                 SoundClassOverride;                                         // 0x0058   (0x0008)  
	class USoundAttenuation*                           AttenuationOverride;                                        // 0x0060   (0x0008)  
};

/// Class /Script/Engine.AnimNotify_ResetClothingSimulation
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align n/a MaxSize: 0x0038
class UAnimNotify_ResetClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_ResetDynamics
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align n/a MaxSize: 0x0038
class UAnimNotify_ResetDynamics : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotify_ResumeClothingSimulation
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align n/a MaxSize: 0x0038
class UAnimNotify_ResumeClothingSimulation : public UAnimNotify
{ 
public:
};

/// Class /Script/Engine.AnimNotifyState_DisableRootMotion
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
{ 
public:
};

/// Class /Script/Engine.AnimNotifyState_TimedParticleEffect
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align n/a MaxSize: 0x0060
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0030   (0x0008)  
	FName                                              SocketName;                                                 // 0x0038   (0x0008)  
	FVector                                            LocationOffset;                                             // 0x0040   (0x000C)  
	FRotator                                           RotationOffset;                                             // 0x004C   (0x000C)  
	bool                                               bDestroyAtEnd;                                              // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.AnimNotifyState_Trail
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align n/a MaxSize: 0x0058
class UAnimNotifyState_Trail : public UAnimNotifyState
{ 
public:
	class UParticleSystem*                             PSTemplate;                                                 // 0x0030   (0x0008)  
	FName                                              FirstSocketName;                                            // 0x0038   (0x0008)  
	FName                                              SecondSocketName;                                           // 0x0040   (0x0008)  
	TEnumAsByte<ETrailWidthMode>                       WidthScaleMode;                                             // 0x0048   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FName                                              WidthScaleCurve;                                            // 0x004C   (0x0008)  
	bool                                               bRecycleSpawnedSystems : 1;                                 // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0055   (0x0003)  MISSED

	/// Functions
	// Function /Script/Engine.AnimNotifyState_Trail.OverridePSTemplate
	constexpr static const FunctionPointer<UAnimNotifyState_Trail, UParticleSystem*, const USkeletalMeshComponent*, const UAnimSequenceBase*> OverridePSTemplate = { 0x2bbb090, 0 }; 
};

/// Class /Script/Engine.SBAnimMaskData
/// Size: 0x0098 (152 bytes) (0x000030 - 0x000098) align n/a MaxSize: 0x0098
class USBAnimMaskData : public UDataAsset
{ 
public:
	TArray<FName>                                      IgnoreCurveNames;                                           // 0x0030   (0x0010)  
	bool                                               bUseFullWeightCurve;                                        // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0041   (0x0007)  MISSED
	TMap<FName, bool>                                  IgnoreCurveNamesMap;                                        // 0x0048   (0x0050)  
};

/// Struct /Script/Engine.SBCurveRemapElements
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSBCurveRemapElements
{ 
	FName                                              TargetName;                                                 // 0x0000   (0x0008)  
	float                                              SourceCurveClampMin;                                        // 0x0008   (0x0004)  
	float                                              SourceCurveClampMax;                                        // 0x000C   (0x0004)  
	float                                              MultiplyValueAfterClamp;                                    // 0x0010   (0x0004)  
	float                                              AddValueBeforeClamp;                                        // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.SBCurveRemapInfos
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSBCurveRemapInfos
{ 
	TArray<FSBCurveRemapElements>                      Elements;                                                   // 0x0000   (0x0010)  
};

/// Class /Script/Engine.SBCurveRemapData
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class USBCurveRemapData : public UDataAsset
{ 
public:
	TMap<FName, FSBCurveRemapInfos>                    RemappingTable;                                             // 0x0030   (0x0050)  
};

/// Struct /Script/Engine.TrackToSkeletonMap
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FTrackToSkeletonMap
{ 
	int32_t                                            BoneTreeIndex;                                              // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.StringCurveKey
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FStringCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            Value;                                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.StringCurve
/// Size: 0x0088 (136 bytes) (0x000068 - 0x000088) align n/a MaxSize: 0x0088
struct FStringCurve : FIndexedCurve
{ 
	FString                                            DefaultValue;                                               // 0x0068   (0x0010)  
	TArray<FStringCurveKey>                            Keys;                                                       // 0x0078   (0x0010)  
};

/// Struct /Script/Engine.BakedStringCustomAttribute
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FBakedStringCustomAttribute
{ 
	FName                                              AttributeName;                                              // 0x0000   (0x0008)  
	FStringCurve                                       StringCurve;                                                // 0x0008   (0x0088)  
};

/// Struct /Script/Engine.IntegralKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FIntegralKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	int32_t                                            Value;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.IntegralCurve
/// Size: 0x0080 (128 bytes) (0x000068 - 0x000080) align n/a MaxSize: 0x0080
struct FIntegralCurve : FIndexedCurve
{ 
	TArray<FIntegralKey>                               Keys;                                                       // 0x0068   (0x0010)  
	int32_t                                            DefaultValue;                                               // 0x0078   (0x0004)  
	bool                                               bUseDefaultValueBeforeFirstKey;                             // 0x007C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x007D   (0x0003)  MISSED
};

/// Struct /Script/Engine.BakedIntegerCustomAttribute
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align n/a MaxSize: 0x0088
struct FBakedIntegerCustomAttribute
{ 
	FName                                              AttributeName;                                              // 0x0000   (0x0008)  
	FIntegralCurve                                     IntCurve;                                                   // 0x0008   (0x0080)  
};

/// Struct /Script/Engine.SimpleCurveKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSimpleCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Value;                                                      // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.SimpleCurve
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
struct FSimpleCurve : FRealCurve
{ 
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x0070   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0071   (0x0007)  MISSED
	TArray<FSimpleCurveKey>                            Keys;                                                       // 0x0078   (0x0010)  
};

/// Struct /Script/Engine.BakedFloatCustomAttribute
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FBakedFloatCustomAttribute
{ 
	FName                                              AttributeName;                                              // 0x0000   (0x0008)  
	FSimpleCurve                                       FloatCurve;                                                 // 0x0008   (0x0088)  
};

/// Struct /Script/Engine.BakedCustomAttributePerBoneData
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FBakedCustomAttributePerBoneData
{ 
	int32_t                                            BoneTreeIndex;                                              // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FBakedStringCustomAttribute>                StringAttributes;                                           // 0x0008   (0x0010)  
	TArray<FBakedIntegerCustomAttribute>               IntAttributes;                                              // 0x0018   (0x0010)  
	TArray<FBakedFloatCustomAttribute>                 FloatAttributes;                                            // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.AnimSequenceTrackCacheData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FAnimSequenceTrackCacheData
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	int32_t                                            CacheIndex;                                                 // 0x0008   (0x0004)  
	float                                              Time;                                                       // 0x000C   (0x0004)  
	FVector                                            position;                                                   // 0x0010   (0x000C)  
	FVector                                            Velocity;                                                   // 0x001C   (0x000C)  
};

/// Struct /Script/Engine.AnimSequenceTrackCacheDataArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FAnimSequenceTrackCacheDataArray
{ 
	TArray<FAnimSequenceTrackCacheData>                Container;                                                  // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimSequence
/// Size: 0x0230 (560 bytes) (0x0000A8 - 0x000230) align n/a MaxSize: 0x0230
class UAnimSequence : public UAnimSequenceBase
{ 
public:
	int32_t                                            NumFrames;                                                  // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x00AC   (0x0004)  MISSED
	TArray<FTrackToSkeletonMap>                        TrackToSkeletonMapTable;                                    // 0x00B0   (0x0010)  
	unsigned char                                      UnknownData09_6[0x10];                                      // 0x00C0   (0x0010)  MISSED
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                    // 0x00D0   (0x0008)  
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                   // 0x00D8   (0x0008)  
	unsigned char                                      UnknownData10_6[0x70];                                      // 0x00E0   (0x0070)  MISSED
	TEnumAsByte<EAdditiveAnimationType>                AdditiveAnimType;                                           // 0x0150   (0x0001)  
	TEnumAsByte<EAdditiveBasePoseType>                 RefPoseType;                                                // 0x0151   (0x0001)  
	unsigned char                                      UnknownData11_6[0x6];                                       // 0x0152   (0x0006)  MISSED
	class UAnimSequence*                               RefPoseSeq;                                                 // 0x0158   (0x0008)  
	int32_t                                            RefFrameIndex;                                              // 0x0160   (0x0004)  
	FName                                              RetargetSource;                                             // 0x0164   (0x0008)  
	EAnimInterpolationType                             Interpolation;                                              // 0x016C   (0x0001)  
	bool                                               bEnableRootMotion;                                          // 0x016D   (0x0001)  
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                         // 0x016E   (0x0001)  
	bool                                               bForceRootLock;                                             // 0x016F   (0x0001)  
	bool                                               bUseNormalizedRootMotionScale;                              // 0x0170   (0x0001)  
	bool                                               bRootMotionSettingsCopiedFromMontage;                       // 0x0171   (0x0001)  
	unsigned char                                      UnknownData12_6[0x6];                                       // 0x0172   (0x0006)  MISSED
	class USBAnimMaskData*                             AnimMaskData;                                               // 0x0178   (0x0008)  
	TArray<FAnimSyncMarker>                            AuthoredSyncMarkers;                                        // 0x0180   (0x0010)  
	unsigned char                                      UnknownData13_6[0x18];                                      // 0x0190   (0x0018)  MISSED
	TArray<FBakedCustomAttributePerBoneData>           BakedPerBoneCustomAttributeData;                            // 0x01A8   (0x0010)  
	TArray<FName>                                      BakeTrackCacheBoneNames;                                    // 0x01B8   (0x0010)  
	float                                              BakeTrackCacheTimeSlice;                                    // 0x01C8   (0x0004)  
	unsigned char                                      UnknownData14_6[0x4];                                       // 0x01CC   (0x0004)  MISSED
	TMap<FName, FAnimSequenceTrackCacheDataArray>      TrackCacheMap;                                              // 0x01D0   (0x0050)  
	float                                              TrackCacheMaxPos;                                           // 0x0220   (0x0004)  
	unsigned char                                      UnknownData15_7[0xC];                                       // 0x0224   (0x000C)  MISSED
};

/// Struct /Script/Engine.AnimSetMeshLinkup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FAnimSetMeshLinkup
{ 
	TArray<int32_t>                                    BoneToTrackTable;                                           // 0x0000   (0x0010)  
};

/// Class /Script/Engine.AnimSet
/// Size: 0x00F0 (240 bytes) (0x000028 - 0x0000F0) align n/a MaxSize: 0x00F0
class UAnimSet : public UObject
{ 
public:
	bool                                               bAnimRotationOnly : 1;                                      // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	TArray<FName>                                      TrackBoneNames;                                             // 0x0030   (0x0010)  
	TArray<FAnimSetMeshLinkup>                         LinkupCache;                                                // 0x0040   (0x0010)  
	TArray<char>                                       BoneUseAnimTranslation;                                     // 0x0050   (0x0010)  
	TArray<char>                                       ForceUseMeshTranslation;                                    // 0x0060   (0x0010)  
	TArray<FName>                                      UseTranslationBoneNames;                                    // 0x0070   (0x0010)  
	TArray<FName>                                      ForceMeshTranslationBoneNames;                              // 0x0080   (0x0010)  
	FName                                              PreviewSkelMeshName;                                        // 0x0090   (0x0008)  
	FName                                              BestRatioSkelMeshName;                                      // 0x0098   (0x0008)  
	unsigned char                                      UnknownData03_7[0x50];                                      // 0x00A0   (0x0050)  MISSED
};

/// Class /Script/Engine.AnimSingleNodeInstance
/// Size: 0x02E0 (736 bytes) (0x0002C8 - 0x0002E0) align n/a MaxSize: 0x02E0
class UAnimSingleNodeInstance : public UAnimInstance
{ 
public:
	class UAnimationAsset*                             CurrentAsset;                                               // 0x02C8   (0x0008)  
	FDelegateProperty                                  PostEvaluateAnimEvent;                                      // 0x02D0   (0x0010)  

	/// Functions
	// Function /Script/Engine.AnimSingleNodeInstance.StopAnim
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void> StopAnim = { 0x471aa50, 0 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.SetReverse
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void, const bool> SetReverse = { 0x471b2b0, 1 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPreviewCurveOverride
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void, const FName&, const float, const bool> SetPreviewCurveOverride = { 0x471a510, 2 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPositionWithPreviousTime
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void, const float, const float, const bool> SetPositionWithPreviousTime = { 0x471af50, 3 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPosition
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void, const float, const bool> SetPosition = { 0x471b140, 4 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlayRate
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void, const float> SetPlayRate = { 0x471b4b0, 5 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.SetPlaying
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void, const bool> SetPlaying = { 0x471acd0, 6 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.SetLooping
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void, const bool> SetLooping = { 0x471b580, 7 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.SetBlendSpaceInput
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void, const FVector&> SetBlendSpaceInput = { 0x471adb0, 8 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.SetAnimationAsset
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void, const UAnimationAsset*, const bool, const float> SetAnimationAsset = { 0x471a860, 9 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.PlayAnim
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, void, const bool, const float, const float> PlayAnim = { 0x471aa70, 10 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.GetLength
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, float> GetLength = { 0x471aca0, 11 }; 
	// Function /Script/Engine.AnimSingleNodeInstance.GetAnimationAsset
	constexpr static const FunctionPointer<UAnimSingleNodeInstance, UAnimationAsset*> GetAnimationAsset = { 0x471a830, 12 }; 
};

/// Class /Script/Engine.AnimStateMachineTypes
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UAnimStateMachineTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.AnimStreamable
/// Size: 0x00E0 (224 bytes) (0x0000A8 - 0x0000E0) align n/a MaxSize: 0x00E0
class UAnimStreamable : public UAnimSequenceBase
{ 
public:
	int32_t                                            NumFrames;                                                  // 0x00A8   (0x0004)  
	EAnimInterpolationType                             Interpolation;                                              // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	FName                                              RetargetSource;                                             // 0x00B0   (0x0008)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x00B8   (0x0010)  MISSED
	class UAnimBoneCompressionSettings*                BoneCompressionSettings;                                    // 0x00C8   (0x0008)  
	class UAnimCurveCompressionSettings*               CurveCompressionSettings;                                   // 0x00D0   (0x0008)  
	bool                                               bEnableRootMotion;                                          // 0x00D8   (0x0001)  
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                         // 0x00D9   (0x0001)  
	bool                                               bForceRootLock;                                             // 0x00DA   (0x0001)  
	bool                                               bUseNormalizedRootMotionScale;                              // 0x00DB   (0x0001)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Class /Script/Engine.ArrowComponent
/// Size: 0x0550 (1360 bytes) (0x000538 - 0x000550) align n/a MaxSize: 0x0550
class UArrowComponent : public UPrimitiveComponent
{ 
public:
	FColor                                             ArrowColor;                                                 // 0x0538   (0x0004)  
	float                                              ArrowSize;                                                  // 0x053C   (0x0004)  
	float                                              ArrowLength;                                                // 0x0540   (0x0004)  
	float                                              ScreenSize;                                                 // 0x0544   (0x0004)  
	bool                                               bIsScreenSizeScaled : 1;                                    // 0x0548:0 (0x0001)  
	bool                                               bTreatAsASprite : 1;                                        // 0x0548:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0549   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.ArrowComponent.SetArrowColor
	constexpr static const FunctionPointer<UArrowComponent, void, const FLinearColor> SetArrowColor = { 0x471df00, 0 }; 
};

/// Class /Script/Engine.AssetExportTask
/// Size: 0x0078 (120 bytes) (0x000028 - 0x000078) align n/a MaxSize: 0x0078
class UAssetExportTask : public UObject
{ 
public:
	class UObject*                                     Object;                                                     // 0x0028   (0x0008)  
	class UExporter*                                   Exporter;                                                   // 0x0030   (0x0008)  
	FString                                            Filename;                                                   // 0x0038   (0x0010)  
	bool                                               bSelected;                                                  // 0x0048   (0x0001)  
	bool                                               bReplaceIdentical;                                          // 0x0049   (0x0001)  
	bool                                               bPrompt;                                                    // 0x004A   (0x0001)  
	bool                                               bAutomated;                                                 // 0x004B   (0x0001)  
	bool                                               bUseFileArchive;                                            // 0x004C   (0x0001)  
	bool                                               bWriteEmptyFiles;                                           // 0x004D   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x004E   (0x0002)  MISSED
	TArray<class UObject*>                             IgnoreObjectList;                                           // 0x0050   (0x0010)  
	class UObject*                                     OPTIONS;                                                    // 0x0060   (0x0008)  
	TArray<FString>                                    Errors;                                                     // 0x0068   (0x0010)  
};

/// Class /Script/Engine.AssetManager
/// Size: 0x0458 (1112 bytes) (0x000028 - 0x000458) align n/a MaxSize: 0x0458
class UAssetManager : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x298];                                     // 0x0028   (0x0298)  MISSED
	TArray<class UObject*>                             ObjectReferenceList;                                        // 0x02C0   (0x0010)  
	bool                                               bIsGlobalAsyncScanEnvironment;                              // 0x02D0   (0x0001)  
	bool                                               bShouldGuessTypeAndName;                                    // 0x02D1   (0x0001)  
	bool                                               bShouldUseSynchronousLoad;                                  // 0x02D2   (0x0001)  
	bool                                               bIsLoadingFromPakFiles;                                     // 0x02D3   (0x0001)  
	bool                                               bShouldAcquireMissingChunksOnLoad;                          // 0x02D4   (0x0001)  
	bool                                               bOnlyCookProductionAssets;                                  // 0x02D5   (0x0001)  
	bool                                               bIsBulkScanning;                                            // 0x02D6   (0x0001)  
	bool                                               bIsPrimaryAssetDirectoryCurrent;                            // 0x02D7   (0x0001)  
	bool                                               bIsManagementDatabaseCurrent;                               // 0x02D8   (0x0001)  
	bool                                               bUpdateManagementDatabaseAfterScan;                         // 0x02D9   (0x0001)  
	bool                                               bIncludeOnlyOnDiskAssets;                                   // 0x02DA   (0x0001)  
	bool                                               bHasCompletedInitialScan;                                   // 0x02DB   (0x0001)  
	int32_t                                            NumberOfSpawnedNotifications;                               // 0x02DC   (0x0004)  
	unsigned char                                      UnknownData03_7[0x178];                                     // 0x02E0   (0x0178)  MISSED
};

/// Struct /Script/Engine.DirectoryPath
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FDirectoryPath
{ 
	FString                                            Path;                                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PrimaryAssetRules
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FPrimaryAssetRules
{ 
	int32_t                                            Priority;                                                   // 0x0000   (0x0004)  
	int32_t                                            ChunkId;                                                    // 0x0004   (0x0004)  
	bool                                               bApplyRecursively;                                          // 0x0008   (0x0001)  
	EPrimaryAssetCookRule                              CookRule;                                                   // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Engine.PrimaryAssetTypeInfo
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align n/a MaxSize: 0x0088
struct FPrimaryAssetTypeInfo
{ 
	FName                                              PrimaryAssetType;                                           // 0x0000   (0x0008)  
	TSoftObjectPtr<class UClass*>                      AssetBaseClass;                                             // 0x0008   (0x0028)  
	class UClass*                                      AssetBaseClassLoaded;                                       // 0x0030   (0x0008)  
	bool                                               bHasBlueprintClasses;                                       // 0x0038   (0x0001)  
	bool                                               bIsEditorOnly;                                              // 0x0039   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x003A   (0x0006)  MISSED
	TArray<FDirectoryPath>                             Directories;                                                // 0x0040   (0x0010)  
	TArray<FSoftObjectPath>                            SpecificAssets;                                             // 0x0050   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0060   (0x000C)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	TArray<FString>                                    AssetScanPaths;                                             // 0x0070   (0x0010)  
	bool                                               bIsDynamicAsset;                                            // 0x0080   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	int32_t                                            NumberOfAssets;                                             // 0x0084   (0x0004)  
};

/// Struct /Script/Engine.PrimaryAssetRulesOverride
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FPrimaryAssetRulesOverride
{ 
	FPrimaryAssetId                                    PrimaryAssetId;                                             // 0x0000   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0010   (0x000C)  
};

/// Struct /Script/Engine.PrimaryAssetRulesCustomOverride
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FPrimaryAssetRulesCustomOverride
{ 
	FPrimaryAssetType                                  PrimaryAssetType;                                           // 0x0000   (0x0008)  
	FDirectoryPath                                     FilterDirectory;                                            // 0x0008   (0x0010)  
	FString                                            FilterString;                                               // 0x0018   (0x0010)  
	FPrimaryAssetRules                                 Rules;                                                      // 0x0028   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/Engine.AssetManagerRedirect
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FAssetManagerRedirect
{ 
	FString                                            Old;                                                        // 0x0000   (0x0010)  
	FString                                            New;                                                        // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AssetManagerSettings
/// Size: 0x0100 (256 bytes) (0x000038 - 0x000100) align n/a MaxSize: 0x0100
class UAssetManagerSettings : public UDeveloperSettings
{ 
public:
	TArray<FPrimaryAssetTypeInfo>                      PrimaryAssetTypesToScan;                                    // 0x0038   (0x0010)  
	TArray<FDirectoryPath>                             DirectoriesToExclude;                                       // 0x0048   (0x0010)  
	TArray<FPrimaryAssetRulesOverride>                 PrimaryAssetRules;                                          // 0x0058   (0x0010)  
	TArray<FPrimaryAssetRulesCustomOverride>           CustomPrimaryAssetRules;                                    // 0x0068   (0x0010)  
	bool                                               bOnlyCookProductionAssets;                                  // 0x0078   (0x0001)  
	bool                                               bShouldManagerDetermineTypeAndName;                         // 0x0079   (0x0001)  
	bool                                               bShouldGuessTypeAndNameInEditor;                            // 0x007A   (0x0001)  
	bool                                               bShouldAcquireMissingChunksOnLoad;                          // 0x007B   (0x0001)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FAssetManagerRedirect>                      PrimaryAssetIdRedirects;                                    // 0x0080   (0x0010)  
	TArray<FAssetManagerRedirect>                      PrimaryAssetTypeRedirects;                                  // 0x0090   (0x0010)  
	TArray<FAssetManagerRedirect>                      AssetPathRedirects;                                         // 0x00A0   (0x0010)  
	TSet<FName>                                        MetaDataTagsForAssetRegistry;                               // 0x00B0   (0x0050)  
};

/// Struct /Script/Engine.AssetMapping
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FAssetMapping
{ 
	class UAnimationAsset*                             SourceAsset;                                                // 0x0000   (0x0008)  
	class UAnimationAsset*                             TargetAsset;                                                // 0x0008   (0x0008)  
};

/// Class /Script/Engine.AssetMappingTable
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UAssetMappingTable : public UObject
{ 
public:
	TArray<FAssetMapping>                              MappedAssets;                                               // 0x0028   (0x0010)  
};

/// Class /Script/Engine.AsyncActionHandleSaveGame
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align n/a MaxSize: 0x0068
class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
{ 
public:
	FMulticastInlineDelegate                           Completed;                                                  // 0x0030   (0x0010)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0040   (0x0020)  MISSED
	class USaveGame*                                   SaveGameObject;                                             // 0x0060   (0x0008)  

	/// Functions
	// Function /Script/Engine.AsyncActionHandleSaveGame.AsyncSaveGameToSlot
	constexpr static const FunctionPointer<UAsyncActionHandleSaveGame, UAsyncActionHandleSaveGame*, const UObject*, const USaveGame*, const FString, const int32_t> AsyncSaveGameToSlot = { 0x47211a0, 0 }; 
	// Function /Script/Engine.AsyncActionHandleSaveGame.AsyncLoadGameFromSlot
	constexpr static const FunctionPointer<UAsyncActionHandleSaveGame, UAsyncActionHandleSaveGame*, const UObject*, const FString, const int32_t> AsyncLoadGameFromSlot = { 0x4720f00, 1 }; 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetBase
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align n/a MaxSize: 0x0078
class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
{ 
public:
	unsigned char                                      UnknownData01_1[0x48];                                      // 0x0030   (0x0048)  MISSED
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAsset
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align n/a MaxSize: 0x0088
class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	FMulticastInlineDelegate                           Completed;                                                  // 0x0078   (0x0010)  

	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAsset.AsyncLoadPrimaryAsset
	constexpr static const FunctionPointer<UAsyncActionLoadPrimaryAsset, UAsyncActionLoadPrimaryAsset*, const UObject*, const FPrimaryAssetId, const TArray<FName>&> AsyncLoadPrimaryAsset = { 0x4721e40, 0 }; 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClass
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align n/a MaxSize: 0x0088
class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	FMulticastInlineDelegate                           Completed;                                                  // 0x0078   (0x0010)  

	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClass.AsyncLoadPrimaryAssetClass
	constexpr static const FunctionPointer<UAsyncActionLoadPrimaryAssetClass, UAsyncActionLoadPrimaryAssetClass*, const UObject*, const FPrimaryAssetId, const TArray<FName>&> AsyncLoadPrimaryAssetClass = { 0x4722470, 0 }; 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetList
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align n/a MaxSize: 0x0088
class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	FMulticastInlineDelegate                           Completed;                                                  // 0x0078   (0x0010)  

	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetList.AsyncLoadPrimaryAssetList
	constexpr static const FunctionPointer<UAsyncActionLoadPrimaryAssetList, UAsyncActionLoadPrimaryAssetList*, const UObject*, const TArray<FPrimaryAssetId>&, const TArray<FName>&> AsyncLoadPrimaryAssetList = { 0x4722aa0, 0 }; 
};

/// Class /Script/Engine.AsyncActionLoadPrimaryAssetClassList
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align n/a MaxSize: 0x0088
class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	FMulticastInlineDelegate                           Completed;                                                  // 0x0078   (0x0010)  

	/// Functions
	// Function /Script/Engine.AsyncActionLoadPrimaryAssetClassList.AsyncLoadPrimaryAssetClassList
	constexpr static const FunctionPointer<UAsyncActionLoadPrimaryAssetClassList, UAsyncActionLoadPrimaryAssetClassList*, const UObject*, const TArray<FPrimaryAssetId>&, const TArray<FName>&> AsyncLoadPrimaryAssetClassList = { 0x47230b0, 0 }; 
};

/// Class /Script/Engine.AsyncActionChangePrimaryAssetBundles
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align n/a MaxSize: 0x0088
class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
{ 
public:
	FMulticastInlineDelegate                           Completed;                                                  // 0x0078   (0x0010)  

	/// Functions
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForPrimaryAssetList
	constexpr static const FunctionPointer<UAsyncActionChangePrimaryAssetBundles, UAsyncActionChangePrimaryAssetBundles*, const UObject*, const TArray<FPrimaryAssetId>&, const TArray<FName>&, const TArray<FName>&> AsyncChangeBundleStateForPrimaryAssetList = { 0x47236c0, 0 }; 
	// Function /Script/Engine.AsyncActionChangePrimaryAssetBundles.AsyncChangeBundleStateForMatchingPrimaryAssets
	constexpr static const FunctionPointer<UAsyncActionChangePrimaryAssetBundles, UAsyncActionChangePrimaryAssetBundles*, const UObject*, const TArray<FName>&, const TArray<FName>&> AsyncChangeBundleStateForMatchingPrimaryAssets = { 0x4723a10, 1 }; 
};

/// Class /Script/Engine.AtmosphericFog
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class AAtmosphericFog : public AInfo
{ 
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                    // 0x02C8   (0x0008)  
};

/// Struct /Script/Engine.AtmospherePrecomputeParameters
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align n/a MaxSize: 0x002C
struct FAtmospherePrecomputeParameters
{ 
	float                                              DensityHeight;                                              // 0x0000   (0x0004)  
	float                                              DecayHeight;                                                // 0x0004   (0x0004)  
	int32_t                                            MaxScatteringOrder;                                         // 0x0008   (0x0004)  
	int32_t                                            TransmittanceTexWidth;                                      // 0x000C   (0x0004)  
	int32_t                                            TransmittanceTexHeight;                                     // 0x0010   (0x0004)  
	int32_t                                            IrradianceTexWidth;                                         // 0x0014   (0x0004)  
	int32_t                                            IrradianceTexHeight;                                        // 0x0018   (0x0004)  
	int32_t                                            InscatterAltitudeSampleNum;                                 // 0x001C   (0x0004)  
	int32_t                                            InscatterMuNum;                                             // 0x0020   (0x0004)  
	int32_t                                            InscatterMuSNum;                                            // 0x0024   (0x0004)  
	int32_t                                            InscatterNuNum;                                             // 0x0028   (0x0004)  
};

/// Class /Script/Engine.AtmosphericFogComponent
/// Size: 0x0370 (880 bytes) (0x000260 - 0x000370) align n/a MaxSize: 0x0370
class UAtmosphericFogComponent : public USceneComponent
{ 
public:
	float                                              SunMultiplier;                                              // 0x0260   (0x0004)  
	float                                              FogMultiplier;                                              // 0x0264   (0x0004)  
	float                                              DensityMultiplier;                                          // 0x0268   (0x0004)  
	float                                              DensityOffset;                                              // 0x026C   (0x0004)  
	float                                              DistanceScale;                                              // 0x0270   (0x0004)  
	float                                              AltitudeScale;                                              // 0x0274   (0x0004)  
	float                                              DistanceOffset;                                             // 0x0278   (0x0004)  
	float                                              GroundOffset;                                               // 0x027C   (0x0004)  
	float                                              StartDistance;                                              // 0x0280   (0x0004)  
	float                                              SunDiscScale;                                               // 0x0284   (0x0004)  
	float                                              DefaultBrightness;                                          // 0x0288   (0x0004)  
	FColor                                             DefaultLightColor;                                          // 0x028C   (0x0004)  
	bool                                               bDisableSunDisk : 1;                                        // 0x0290:0 (0x0001)  
	bool                                               bAtmosphereAffectsSunIlluminance : 1;                       // 0x0290:1 (0x0001)  
	bool                                               bDisableGroundScattering : 1;                               // 0x0290:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0291   (0x0003)  MISSED
	FAtmospherePrecomputeParameters                    PrecomputeParams;                                           // 0x0294   (0x002C)  
	class UTexture2D*                                  TransmittanceTexture;                                       // 0x02C0   (0x0008)  
	class UTexture2D*                                  IrradianceTexture;                                          // 0x02C8   (0x0008)  
	unsigned char                                      UnknownData03_7[0xA0];                                      // 0x02D0   (0x00A0)  MISSED

	/// Functions
	// Function /Script/Engine.AtmosphericFogComponent.StartPrecompute
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void> StartPrecompute = { 0x11615e0, 0 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetSunMultiplier
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const float> SetSunMultiplier = { 0x4724f40, 1 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetStartDistance
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const float> SetStartDistance = { 0x4724a00, 2 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetPrecomputeParams
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const float, const int32_t, const int32_t> SetPrecomputeParams = { 0x4724570, 3 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetFogMultiplier
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const float> SetFogMultiplier = { 0x4724e60, 4 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetDistanceScale
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const float> SetDistanceScale = { 0x4724bc0, 5 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetDistanceOffset
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const float> SetDistanceOffset = { 0x4724920, 6 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetDensityOffset
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const float> SetDensityOffset = { 0x4724ca0, 7 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetDensityMultiplier
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const float> SetDensityMultiplier = { 0x4724d80, 8 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetDefaultLightColor
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const FLinearColor> SetDefaultLightColor = { 0x4725020, 9 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetDefaultBrightness
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const float> SetDefaultBrightness = { 0x4725120, 10 }; 
	// Function /Script/Engine.AtmosphericFogComponent.SetAltitudeScale
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const float> SetAltitudeScale = { 0x4724ae0, 11 }; 
	// Function /Script/Engine.AtmosphericFogComponent.DisableSunDisk
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const bool> DisableSunDisk = { 0x4724830, 12 }; 
	// Function /Script/Engine.AtmosphericFogComponent.DisableGroundScattering
	constexpr static const FunctionPointer<UAtmosphericFogComponent, void, const bool> DisableGroundScattering = { 0x4724730, 13 }; 
};

/// Class /Script/Engine.AudioBus
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UAudioBus : public UObject
{ 
public:
	EAudioBusChannels                                  AudioBusChannels;                                           // 0x0028   (0x0001)  
	bool                                               bIsAutomatic;                                               // 0x0029   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x002A   (0x0006)  MISSED
};

/// Struct /Script/Engine.AudioQualitySettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FAudioQualitySettings
{ 
	FText                                              DisplayName;                                                // 0x0000   (0x0018)  
	int32_t                                            MaxChannels;                                                // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.AudioSettings
/// Size: 0x0148 (328 bytes) (0x000038 - 0x000148) align n/a MaxSize: 0x0148
class UAudioSettings : public UDeveloperSettings
{ 
public:
	FSoftObjectPath                                    DefaultSoundClassName;                                      // 0x0038   (0x0018)  
	FSoftObjectPath                                    DefaultMediaSoundClassName;                                 // 0x0050   (0x0018)  
	FSoftObjectPath                                    DefaultSoundConcurrencyName;                                // 0x0068   (0x0018)  
	FSoftObjectPath                                    DefaultBaseSoundMix;                                        // 0x0080   (0x0018)  
	FSoftObjectPath                                    VoiPSoundClass;                                             // 0x0098   (0x0018)  
	FSoftObjectPath                                    MasterSubmix;                                               // 0x00B0   (0x0018)  
	FSoftObjectPath                                    ReverbSubmix;                                               // 0x00C8   (0x0018)  
	FSoftObjectPath                                    EQSubmix;                                                   // 0x00E0   (0x0018)  
	EVoiceSampleRate                                   VoiPSampleRate;                                             // 0x00F8   (0x0004)  
	float                                              DefaultReverbSendLevel;                                     // 0x00FC   (0x0004)  
	int32_t                                            MaximumConcurrentStreams;                                   // 0x0100   (0x0004)  
	float                                              GlobalMinPitchScale;                                        // 0x0104   (0x0004)  
	float                                              GlobalMaxPitchScale;                                        // 0x0108   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x010C   (0x0004)  MISSED
	TArray<FAudioQualitySettings>                      QualityLevels;                                              // 0x0110   (0x0010)  
	bool                                               bAllowPlayWhenSilent : 1;                                   // 0x0120:0 (0x0001)  
	bool                                               bDisableMasterEQ : 1;                                       // 0x0120:1 (0x0001)  
	bool                                               bAllowCenterChannel3DPanning : 1;                           // 0x0120:2 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0121   (0x0003)  MISSED
	uint32_t                                           NumStoppingSources;                                         // 0x0124   (0x0004)  
	EPanningMethod                                     PanningMethod;                                              // 0x0128   (0x0001)  
	EMonoChannelUpmixMethod                            MonoChannelUpmixMethod;                                     // 0x0129   (0x0001)  
	unsigned char                                      UnknownData06_6[0x6];                                       // 0x012A   (0x0006)  MISSED
	FString                                            DialogueFilenameFormat;                                     // 0x0130   (0x0010)  
	unsigned char                                      UnknownData07_7[0x8];                                       // 0x0140   (0x0008)  MISSED
};

/// Struct /Script/Engine.ReverbSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FReverbSettings
{ 
	bool                                               bApplyReverb;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	class UReverbEffect*                               ReverbEffect;                                               // 0x0008   (0x0008)  
	class USoundEffectSubmixPreset*                    ReverbPluginEffect;                                         // 0x0010   (0x0008)  
	float                                              Volume;                                                     // 0x0018   (0x0004)  
	float                                              FadeTime;                                                   // 0x001C   (0x0004)  
};

/// Struct /Script/Engine.InteriorSettings
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FInteriorSettings
{ 
	bool                                               bIsWorldSettings;                                           // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              ExteriorVolume;                                             // 0x0004   (0x0004)  
	float                                              ExteriorTime;                                               // 0x0008   (0x0004)  
	float                                              ExteriorLPF;                                                // 0x000C   (0x0004)  
	float                                              ExteriorLPFTime;                                            // 0x0010   (0x0004)  
	float                                              InteriorVolume;                                             // 0x0014   (0x0004)  
	float                                              InteriorTime;                                               // 0x0018   (0x0004)  
	float                                              InteriorLPF;                                                // 0x001C   (0x0004)  
	float                                              InteriorLPFTime;                                            // 0x0020   (0x0004)  
};

/// Struct /Script/Engine.AudioVolumeSubmixSendSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FAudioVolumeSubmixSendSettings
{ 
	EAudioVolumeLocationState                          ListenerLocationState;                                      // 0x0000   (0x0001)  
	EAudioVolumeLocationState                          SourceLocationState;                                        // 0x0001   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x0002   (0x0006)  MISSED
	TArray<FSoundSubmixSendInfo>                       SubmixSends;                                                // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AudioVolumeSubmixOverrideSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FAudioVolumeSubmixOverrideSettings
{ 
	class USoundSubmix*                                Submix;                                                     // 0x0000   (0x0008)  
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                          // 0x0008   (0x0010)  
	float                                              CrossfadeTime;                                              // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.AudioVolume
/// Size: 0x0388 (904 bytes) (0x000318 - 0x000388) align n/a MaxSize: 0x0388
class AAudioVolume : public AVolume
{ 
public:
	float                                              Priority;                                                   // 0x0318   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x031C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x031D   (0x0003)  MISSED
	FReverbSettings                                    Settings;                                                   // 0x0320   (0x0020)  
	FInteriorSettings                                  AmbientZoneSettings;                                        // 0x0340   (0x0024)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0364   (0x0004)  MISSED
	TArray<FAudioVolumeSubmixSendSettings>             SubmixSendSettings;                                         // 0x0368   (0x0010)  
	TArray<FAudioVolumeSubmixOverrideSettings>         SubmixOverrideSettings;                                     // 0x0378   (0x0010)  

	/// Functions
	// Function /Script/Engine.AudioVolume.SetSubmixSendSettings
	constexpr static const FunctionPointer<AAudioVolume, void, const TArray<FAudioVolumeSubmixSendSettings>&> SetSubmixSendSettings = { 0x472ac70, 0 }; 
	// Function /Script/Engine.AudioVolume.SetSubmixOverrideSettings
	constexpr static const FunctionPointer<AAudioVolume, void, const TArray<FAudioVolumeSubmixOverrideSettings>&> SetSubmixOverrideSettings = { 0x472ab40, 1 }; 
	// Function /Script/Engine.AudioVolume.SetReverbSettings
	constexpr static const FunctionPointer<AAudioVolume, void, const FReverbSettings&> SetReverbSettings = { 0x472aec0, 2 }; 
	// Function /Script/Engine.AudioVolume.SetPriority
	constexpr static const FunctionPointer<AAudioVolume, void, const float> SetPriority = { 0x472b130, 3 }; 
	// Function /Script/Engine.AudioVolume.SetInteriorSettings
	constexpr static const FunctionPointer<AAudioVolume, void, const FInteriorSettings&> SetInteriorSettings = { 0x472ada0, 4 }; 
	// Function /Script/Engine.AudioVolume.SetEnabled
	constexpr static const FunctionPointer<AAudioVolume, void, const bool> SetEnabled = { 0x472b020, 5 }; 
	// Function /Script/Engine.AudioVolume.OnRep_bEnabled
	constexpr static const FunctionPointer<AAudioVolume, void> OnRep_bEnabled = { 0x14b7100, 6 }; 
};

/// Class /Script/Engine.AutoDestroySubsystem
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
class UAutoDestroySubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0030   (0x0008)  MISSED
	TArray<class AActor*>                              ActorsToPoll;                                               // 0x0038   (0x0010)  

	/// Functions
	// Function /Script/Engine.AutoDestroySubsystem.OnActorEndPlay
	constexpr static const FunctionPointer<UAutoDestroySubsystem, void, const AActor*, const TEnumAsByte<EEndPlayReason>> OnActorEndPlay = { 0x472baa0, 0 }; 
};

/// Struct /Script/Engine.EditorMapPerformanceTestDefinition
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FEditorMapPerformanceTestDefinition
{ 
	FSoftObjectPath                                    PerformanceTestmap;                                         // 0x0000   (0x0018)  
	int32_t                                            TestTimer;                                                  // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.FilePath
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FFilePath
{ 
	FString                                            FilePath;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ImportFactorySettingValues
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FImportFactorySettingValues
{ 
	FString                                            SettingName;                                                // 0x0000   (0x0010)  
	FString                                            Value;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.EditorImportWorkflowDefinition
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FEditorImportWorkflowDefinition
{ 
	FFilePath                                          ImportFilePath;                                             // 0x0000   (0x0010)  
	TArray<FImportFactorySettingValues>                FactorySettings;                                            // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionImportWorkflowSettings
/// Size: 0x0150 (336 bytes) (0x000000 - 0x000150) align n/a MaxSize: 0x0150
struct FBuildPromotionImportWorkflowSettings
{ 
	FEditorImportWorkflowDefinition                    Diffuse;                                                    // 0x0000   (0x0020)  
	FEditorImportWorkflowDefinition                    Normal;                                                     // 0x0020   (0x0020)  
	FEditorImportWorkflowDefinition                    StaticMesh;                                                 // 0x0040   (0x0020)  
	FEditorImportWorkflowDefinition                    ReimportStaticMesh;                                         // 0x0060   (0x0020)  
	FEditorImportWorkflowDefinition                    BlendShapeMesh;                                             // 0x0080   (0x0020)  
	FEditorImportWorkflowDefinition                    MorphMesh;                                                  // 0x00A0   (0x0020)  
	FEditorImportWorkflowDefinition                    SkeletalMesh;                                               // 0x00C0   (0x0020)  
	FEditorImportWorkflowDefinition                    Animation;                                                  // 0x00E0   (0x0020)  
	FEditorImportWorkflowDefinition                    Sound;                                                      // 0x0100   (0x0020)  
	FEditorImportWorkflowDefinition                    SurroundSound;                                              // 0x0120   (0x0020)  
	TArray<FEditorImportWorkflowDefinition>            OtherAssetsToImport;                                        // 0x0140   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionOpenAssetSettings
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FBuildPromotionOpenAssetSettings
{ 
	FFilePath                                          BlueprintAsset;                                             // 0x0000   (0x0010)  
	FFilePath                                          MaterialAsset;                                              // 0x0010   (0x0010)  
	FFilePath                                          ParticleSystemAsset;                                        // 0x0020   (0x0010)  
	FFilePath                                          SkeletalMeshAsset;                                          // 0x0030   (0x0010)  
	FFilePath                                          StaticMeshAsset;                                            // 0x0040   (0x0010)  
	FFilePath                                          TextureAsset;                                               // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionNewProjectSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FBuildPromotionNewProjectSettings
{ 
	FDirectoryPath                                     NewProjectFolderOverride;                                   // 0x0000   (0x0010)  
	FString                                            NewProjectNameOverride;                                     // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.BuildPromotionTestSettings
/// Size: 0x01F0 (496 bytes) (0x000000 - 0x0001F0) align n/a MaxSize: 0x01F0
struct FBuildPromotionTestSettings
{ 
	FFilePath                                          DefaultStaticMeshAsset;                                     // 0x0000   (0x0010)  
	FBuildPromotionImportWorkflowSettings              ImportWorkflow;                                             // 0x0010   (0x0150)  
	FBuildPromotionOpenAssetSettings                   OpenAssets;                                                 // 0x0160   (0x0060)  
	FBuildPromotionNewProjectSettings                  NewProjectSettings;                                         // 0x01C0   (0x0020)  
	FFilePath                                          SourceControlMaterial;                                      // 0x01E0   (0x0010)  
};

/// Struct /Script/Engine.MaterialEditorPromotionSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FMaterialEditorPromotionSettings
{ 
	FFilePath                                          DefaultMaterialAsset;                                       // 0x0000   (0x0010)  
	FFilePath                                          DefaultDiffuseTexture;                                      // 0x0010   (0x0010)  
	FFilePath                                          DefaultNormalTexture;                                       // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ParticleEditorPromotionSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FParticleEditorPromotionSettings
{ 
	FFilePath                                          DefaultParticleAsset;                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.BlueprintEditorPromotionSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FBlueprintEditorPromotionSettings
{ 
	FFilePath                                          FirstMeshPath;                                              // 0x0000   (0x0010)  
	FFilePath                                          SecondMeshPath;                                             // 0x0010   (0x0010)  
	FFilePath                                          DefaultParticleAsset;                                       // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.ExternalToolDefinition
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FExternalToolDefinition
{ 
	FString                                            ToolName;                                                   // 0x0000   (0x0010)  
	FFilePath                                          ExecutablePath;                                             // 0x0010   (0x0010)  
	FString                                            CommandLineOptions;                                         // 0x0020   (0x0010)  
	FDirectoryPath                                     WorkingDirectory;                                           // 0x0030   (0x0010)  
	FString                                            ScriptExtension;                                            // 0x0040   (0x0010)  
	FDirectoryPath                                     ScriptDirectory;                                            // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.EditorImportExportTestDefinition
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FEditorImportExportTestDefinition
{ 
	FFilePath                                          ImportFilePath;                                             // 0x0000   (0x0010)  
	FString                                            ExportFileExtension;                                        // 0x0010   (0x0010)  
	bool                                               bSkipExport;                                                // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0021   (0x0007)  MISSED
	TArray<FImportFactorySettingValues>                FactorySettings;                                            // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.LaunchOnTestSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FLaunchOnTestSettings
{ 
	FFilePath                                          LaunchOnTestmap;                                            // 0x0000   (0x0010)  
	FString                                            DeviceID;                                                   // 0x0010   (0x0010)  
};

/// Class /Script/Engine.AutomationTestSettings
/// Size: 0x0340 (832 bytes) (0x000028 - 0x000340) align n/a MaxSize: 0x0340
class UAutomationTestSettings : public UObject
{ 
public:
	TArray<FString>                                    EngineTestModules;                                          // 0x0028   (0x0010)  
	TArray<FString>                                    EditorTestModules;                                          // 0x0038   (0x0010)  
	FSoftObjectPath                                    AutomationTestmap;                                          // 0x0048   (0x0018)  
	TArray<FEditorMapPerformanceTestDefinition>        EditorPerformanceTestMaps;                                  // 0x0060   (0x0010)  
	TArray<FSoftObjectPath>                            AssetsToOpen;                                               // 0x0070   (0x0010)  
	TArray<FString>                                    MapsToPIETest;                                              // 0x0080   (0x0010)  
	FBuildPromotionTestSettings                        BuildPromotionTest;                                         // 0x0090   (0x01F0)  
	FMaterialEditorPromotionSettings                   MaterialEditorPromotionTest;                                // 0x0280   (0x0030)  
	FParticleEditorPromotionSettings                   ParticleEditorPromotionTest;                                // 0x02B0   (0x0010)  
	FBlueprintEditorPromotionSettings                  BlueprintEditorPromotionTest;                               // 0x02C0   (0x0030)  
	TArray<FString>                                    TestLevelFolders;                                           // 0x02F0   (0x0010)  
	TArray<FExternalToolDefinition>                    ExternalTools;                                              // 0x0300   (0x0010)  
	TArray<FEditorImportExportTestDefinition>          ImportExportTestDefinitions;                                // 0x0310   (0x0010)  
	TArray<FLaunchOnTestSettings>                      LaunchOnSettings;                                           // 0x0320   (0x0010)  
	FIntPoint                                          DefaultScreenshotResolution;                                // 0x0330   (0x0008)  
	float                                              PIETestDuration;                                            // 0x0338   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x033C   (0x0004)  MISSED
};

/// Class /Script/Engine.AvoidanceManager
/// Size: 0x00E0 (224 bytes) (0x000028 - 0x0000E0) align n/a MaxSize: 0x00E0
class UAvoidanceManager : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	float                                              DefaultTimeToLive;                                          // 0x0030   (0x0004)  
	float                                              LockTimeAfterAvoid;                                         // 0x0034   (0x0004)  
	float                                              LockTimeAfterClean;                                         // 0x0038   (0x0004)  
	float                                              DeltaTimeToPredict;                                         // 0x003C   (0x0004)  
	float                                              ArtificialRadiusExpansion;                                  // 0x0040   (0x0004)  
	float                                              TestHeightDifference;                                       // 0x0044   (0x0004)  
	float                                              HeightCheckMargin;                                          // 0x0048   (0x0004)  
	unsigned char                                      UnknownData03_7[0x94];                                      // 0x004C   (0x0094)  MISSED

	/// Functions
	// Function /Script/Engine.AvoidanceManager.RegisterMovementComponent
	constexpr static const FunctionPointer<UAvoidanceManager, bool, const UMovementComponent*, const float> RegisterMovementComponent = { 0x472cee0, 0 }; 
	// Function /Script/Engine.AvoidanceManager.GetObjectCount
	constexpr static const FunctionPointer<UAvoidanceManager, int32_t> GetObjectCount = { 0x472d120, 1 }; 
	// Function /Script/Engine.AvoidanceManager.GetNewAvoidanceUID
	constexpr static const FunctionPointer<UAvoidanceManager, int32_t> GetNewAvoidanceUID = { 0x472d0f0, 2 }; 
	// Function /Script/Engine.AvoidanceManager.GetAvoidanceVelocityForComponent
	constexpr static const FunctionPointer<UAvoidanceManager, FVector, const UMovementComponent*> GetAvoidanceVelocityForComponent = { 0x472cd70, 3 }; 
};

/// Struct /Script/Engine.BandwidthTestItem
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FBandwidthTestItem
{ 
	TArray<char>                                       Kilobyte;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.BandwidthTestGenerator
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FBandwidthTestGenerator
{ 
	TArray<FBandwidthTestItem>                         ReplicatedBuffers;                                          // 0x0000   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Class /Script/Engine.BandwidthTestActor
/// Size: 0x02E8 (744 bytes) (0x0002C8 - 0x0002E8) align n/a MaxSize: 0x02E8
class ABandwidthTestActor : public AActor
{ 
public:
	FBandwidthTestGenerator                            BandwidthGenerator;                                         // 0x02C8   (0x0020)  
};

/// Class /Script/Engine.BillboardComponent
/// Size: 0x0560 (1376 bytes) (0x000538 - 0x000560) align n/a MaxSize: 0x0560
class UBillboardComponent : public UPrimitiveComponent
{ 
public:
	class UTexture2D*                                  Sprite;                                                     // 0x0538   (0x0008)  
	bool                                               bIsScreenSizeScaled : 1;                                    // 0x0540:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0541   (0x0003)  MISSED
	float                                              ScreenSize;                                                 // 0x0544   (0x0004)  
	float                                              U;                                                          // 0x0548   (0x0004)  
	float                                              UL;                                                         // 0x054C   (0x0004)  
	float                                              V;                                                          // 0x0550   (0x0004)  
	float                                              VL;                                                         // 0x0554   (0x0004)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0558   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.BillboardComponent.SetUV
	constexpr static const FunctionPointer<UBillboardComponent, void, const int32_t, const int32_t, const int32_t, const int32_t> SetUV = { 0x472de10, 0 }; 
	// Function /Script/Engine.BillboardComponent.SetSpriteAndUV
	constexpr static const FunctionPointer<UBillboardComponent, void, const UTexture2D*, const int32_t, const int32_t, const int32_t, const int32_t> SetSpriteAndUV = { 0x472db10, 1 }; 
	// Function /Script/Engine.BillboardComponent.SetSprite
	constexpr static const FunctionPointer<UBillboardComponent, void, const UTexture2D*> SetSprite = { 0x122abf0, 2 }; 
};

/// Class /Script/Engine.BlendableInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UBlendableInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.BoneNode
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FBoneNode
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	int32_t                                            ParentIndex;                                                // 0x0008   (0x0004)  
	TEnumAsByte<EBoneTranslationRetargetingMode>       TranslationRetargetingMode;                                 // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.VirtualBone
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FVirtualBone
{ 
	FName                                              SourceBoneName;                                             // 0x0000   (0x0008)  
	FName                                              TargetBoneName;                                             // 0x0008   (0x0008)  
	FName                                              VirtualBoneName;                                            // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.SmartNameContainer
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSmartNameContainer
{ 
	unsigned char                                      UnknownData01_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/Engine.AnimSlotGroup
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FAnimSlotGroup
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	TArray<FName>                                      SlotNames;                                                  // 0x0008   (0x0010)  
};

/// Class /Script/Engine.Skeleton
/// Size: 0x0390 (912 bytes) (0x000028 - 0x000390) align n/a MaxSize: 0x0390
class USkeleton : public UObject
{ 
public:
	unsigned char                                      UnknownData05_8[0x10];                                      // 0x0028   (0x0010)  MISSED
	TArray<FBoneNode>                                  BoneTree;                                                   // 0x0038   (0x0010)  
	TArray<FTransform>                                 RefLocalPoses;                                              // 0x0048   (0x0010)  
	unsigned char                                      UnknownData06_6[0x118];                                     // 0x0058   (0x0118)  MISSED
	FGuid                                              VirtualBoneGuid;                                            // 0x0170   (0x0010)  
	TArray<FVirtualBone>                               VirtualBones;                                               // 0x0180   (0x0010)  
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                    // 0x0190   (0x0010)  
	unsigned char                                      UnknownData07_6[0x50];                                      // 0x01A0   (0x0050)  MISSED
	FSmartNameContainer                                SmartNames;                                                 // 0x01F0   (0x0050)  
	unsigned char                                      UnknownData08_6[0x30];                                      // 0x0240   (0x0030)  MISSED
	TArray<class UBlendProfile*>                       BlendProfiles;                                              // 0x0270   (0x0010)  
	TArray<FAnimSlotGroup>                             SlotGroups;                                                 // 0x0280   (0x0010)  
	unsigned char                                      UnknownData09_6[0xF0];                                      // 0x0290   (0x00F0)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0380   (0x0010)  
};

/// Struct /Script/Engine.BlendProfileBoneEntry
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FBlendProfileBoneEntry
{ 
	FBoneReference                                     BoneReference;                                              // 0x0000   (0x0010)  
	float                                              BlendScale;                                                 // 0x0010   (0x0004)  
};

/// Class /Script/Engine.BlendProfile
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class UBlendProfile : public UObject
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	class USkeleton*                                   OwningSkeleton;                                             // 0x0030   (0x0008)  
	TArray<FBlendProfileBoneEntry>                     ProfileEntries;                                             // 0x0038   (0x0010)  
};

/// Class /Script/Engine.BlockingVolume
/// Size: 0x0318 (792 bytes) (0x000318 - 0x000318) align n/a MaxSize: 0x0318
class ABlockingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.BlueprintExtension
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UBlueprintExtension : public UObject
{ 
public:
};

/// Class /Script/Engine.BlueprintMapLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.BlueprintMapLibrary.SetMapPropertyByName
	constexpr static const FunctionPointer<UBlueprintMapLibrary, void, const UObject*, const FName, const TMap<int32_t, int32_t>&> SetMapPropertyByName = { 0x4735370, 0 }; 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Values
	constexpr static const FunctionPointer<UBlueprintMapLibrary, void, const TMap<int32_t, int32_t>&, const TArray<int32_t>&> Map_Values = { 0x4734d40, 1 }; 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Remove
	constexpr static const FunctionPointer<UBlueprintMapLibrary, bool, const TMap<int32_t, int32_t>&, const int32_t&> Map_Remove = { 0x4734570, 2 }; 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Length
	constexpr static const FunctionPointer<UBlueprintMapLibrary, int32_t, const TMap<int32_t, int32_t>&> Map_Length = { 0x4735150, 3 }; 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Keys
	constexpr static const FunctionPointer<UBlueprintMapLibrary, void, const TMap<int32_t, int32_t>&, const TArray<int32_t>&> Map_Keys = { 0x4734b80, 4 }; 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Find
	constexpr static const FunctionPointer<UBlueprintMapLibrary, bool, const TMap<int32_t, int32_t>&, const int32_t&, const int32_t&> Map_Find = { 0x4734800, 5 }; 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Contains
	constexpr static const FunctionPointer<UBlueprintMapLibrary, bool, const TMap<int32_t, int32_t>&, const int32_t&> Map_Contains = { 0x4734f00, 6 }; 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Clear
	constexpr static const FunctionPointer<UBlueprintMapLibrary, void, const TMap<int32_t, int32_t>&> Map_Clear = { 0x4735280, 7 }; 
	// Function /Script/Engine.BlueprintMapLibrary.Map_Add
	constexpr static const FunctionPointer<UBlueprintMapLibrary, void, const TMap<int32_t, int32_t>&, const int32_t&, const int32_t&> Map_Add = { 0x47341a0, 8 }; 
};

/// Class /Script/Engine.BlueprintPathsLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.BlueprintPathsLibrary.VideoCaptureDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> VideoCaptureDir = { 0x473a0b0, 0 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ValidatePath
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, void, const FString, const bool&, const FText&> ValidatePath = { 0x4736110, 1 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.Split
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, void, const FString, const FString&, const FString&, const FString&> Split = { 0x4735e10, 2 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.SourceConfigDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> SourceConfigDir = { 0x473a3b0, 3 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ShouldSaveToUserDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool> ShouldSaveToUserDir = { 0x473b280, 4 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ShaderWorkingDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ShaderWorkingDir = { 0x473a650, 5 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.SetProjectFilePath
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, void, const FString> SetProjectFilePath = { 0x4738fb0, 6 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.SetExtension
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString, const FString> SetExtension = { 0x47385b0, 7 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ScreenShotDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ScreenShotDir = { 0x473a1b0, 8 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.SandboxesDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> SandboxesDir = { 0x473a2b0, 9 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.RootDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> RootDir = { 0x473aa70, 10 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.RemoveDuplicateSlashes
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, void, const FString, const FString&> RemoveDuplicateSlashes = { 0x4737650, 11 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectUserDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProjectUserDir = { 0x473a8d0, 12 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectSavedDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProjectSavedDir = { 0x473a790, 13 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectPluginsDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProjectPluginsDir = { 0x473a5d0, 14 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectPersistentDownloadDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProjectPersistentDownloadDir = { 0x473a430, 15 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectModsDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProjectModsDir = { 0x473a550, 16 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectLogDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProjectLogDir = { 0x473a030, 17 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectIntermediateDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProjectIntermediateDir = { 0x473a710, 18 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProjectDir = { 0x473a950, 19 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectContentDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProjectContentDir = { 0x473a850, 20 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProjectConfigDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProjectConfigDir = { 0x473a3b0, 21 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ProfilingDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> ProfilingDir = { 0x473a230, 22 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.NormalizeFilename
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, void, const FString, const FString&> NormalizeFilename = { 0x4737f90, 23 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.NormalizeDirectoryName
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, void, const FString, const FString&> NormalizeDirectoryName = { 0x4737a20, 24 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.MakeValidFileName
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString, const FString> MakeValidFileName = { 0x4736390, 25 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.MakeStandardFilename
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, void, const FString, const FString&> MakeStandardFilename = { 0x4737470, 26 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.MakePlatformFilename
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, void, const FString, const FString&> MakePlatformFilename = { 0x4737290, 27 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.MakePathRelativeTo
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool, const FString, const FString, const FString&> MakePathRelativeTo = { 0x4737000, 28 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.LaunchDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> LaunchDir = { 0x473b200, 29 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.IsSamePath
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool, const FString, const FString> IsSamePath = { 0x4737c00, 30 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.IsRestrictedPath
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool, const FString> IsRestrictedPath = { 0x4739850, 31 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.IsRelative
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool, const FString> IsRelative = { 0x4738170, 32 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.IsProjectFilePathSet
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool> IsProjectFilePathSet = { 0x4739220, 33 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.IsDrive
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool, const FString> IsDrive = { 0x47382a0, 34 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.HasProjectPersistentDownloadDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool> HasProjectPersistentDownloadDir = { 0x151b2d0, 35 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetToolTipLocalizationPaths
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, TArray<FString>> GetToolTipLocalizationPaths = { 0x47399c0, 36 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetRestrictedFolderNames
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, TArray<FString>> GetRestrictedFolderNames = { 0x4739940, 37 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetRelativePathToRoot
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> GetRelativePathToRoot = { 0x4735dd0, 38 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetPropertyNameLocalizationPaths
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, TArray<FString>> GetPropertyNameLocalizationPaths = { 0x4739a00, 39 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetProjectFilePath
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> GetProjectFilePath = { 0x4739130, 40 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetPath
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString> GetPath = { 0x4738990, 41 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetInvalidFileSystemChars
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> GetInvalidFileSystemChars = { 0x4736590, 42 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetGameLocalizationPaths
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, TArray<FString>> GetGameLocalizationPaths = { 0x4739980, 43 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetExtension
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString, const bool> GetExtension = { 0x4738dd0, 44 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetEngineLocalizationPaths
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, TArray<FString>> GetEngineLocalizationPaths = { 0x4739a80, 45 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetEditorLocalizationPaths
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, TArray<FString>> GetEditorLocalizationPaths = { 0x4739a40, 46 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetCleanFilename
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString> GetCleanFilename = { 0x4738ca0, 47 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GetBaseFilename
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString, const bool> GetBaseFilename = { 0x4738ac0, 48 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GeneratedConfigDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> GeneratedConfigDir = { 0x473a330, 49 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GameUserDeveloperDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> GameUserDeveloperDir = { 0x4739c70, 50 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GameSourceDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> GameSourceDir = { 0x4739450, 51 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GameDevelopersDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> GameDevelopersDir = { 0x4739cf0, 52 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.GameAgnosticSavedDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> GameAgnosticSavedDir = { 0x47397d0, 53 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.FileExists
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool, const FString> FileExists = { 0x47384a0, 54 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.FeaturePackDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> FeaturePackDir = { 0x4739290, 55 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterprisePluginsDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EnterprisePluginsDir = { 0x473ace0, 56 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterpriseFeaturePackDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EnterpriseFeaturePackDir = { 0x473ab90, 57 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EnterpriseDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EnterpriseDir = { 0x473ad60, 58 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineVersionAgnosticUserDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EngineVersionAgnosticUserDir = { 0x473afe0, 59 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineUserDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EngineUserDir = { 0x473b060, 60 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineSourceDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EngineSourceDir = { 0x4739610, 61 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineSavedDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EngineSavedDir = { 0x47397d0, 62 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EnginePluginsDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EnginePluginsDir = { 0x473ade0, 63 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineIntermediateDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EngineIntermediateDir = { 0x473ae60, 64 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EngineDir = { 0x473b0e0, 65 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineContentDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EngineContentDir = { 0x473af60, 66 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.EngineConfigDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> EngineConfigDir = { 0x473aee0, 67 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.DirectoryExists
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool, const FString> DirectoryExists = { 0x4738390, 68 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.DiffDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> DiffDir = { 0x4739ac0, 69 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.CreateTempFilename
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString, const FString, const FString> CreateTempFilename = { 0x4736680, 70 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertToSandboxPath
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString, const FString> ConvertToSandboxPath = { 0x4736b00, 71 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertRelativePathToFull
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString, const FString> ConvertRelativePathToFull = { 0x4736cf0, 72 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ConvertFromSandboxPath
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString, const FString> ConvertFromSandboxPath = { 0x4736910, 73 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.Combine
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const TArray<FString>&> Combine = { 0x4735b00, 74 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.CollapseRelativeDirectories
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, bool, const FString, const FString&> CollapseRelativeDirectories = { 0x4737830, 75 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.CloudDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> CloudDir = { 0x4739d70, 76 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.ChangeExtension
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString, const FString, const FString> ChangeExtension = { 0x47387a0, 77 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.BugItDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> BugItDir = { 0x473a130, 78 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationTransientDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> AutomationTransientDir = { 0x4739f30, 79 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationLogDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> AutomationLogDir = { 0x4739df0, 80 }; 
	// Function /Script/Engine.BlueprintPathsLibrary.AutomationDir
	constexpr static const FunctionPointer<UBlueprintPathsLibrary, FString> AutomationDir = { 0x4739fb0, 81 }; 
};

/// Class /Script/Engine.PlatformGameInstance
/// Size: 0x0278 (632 bytes) (0x0001A8 - 0x000278) align n/a MaxSize: 0x0278
class UPlatformGameInstance : public UGameInstance
{ 
public:
	FMulticastInlineDelegate                           ApplicationWillDeactivateDelegate;                          // 0x01A8   (0x0010)  
	FMulticastInlineDelegate                           ApplicationHasReactivatedDelegate;                          // 0x01B8   (0x0010)  
	FMulticastInlineDelegate                           ApplicationWillEnterBackgroundDelegate;                     // 0x01C8   (0x0010)  
	FMulticastInlineDelegate                           ApplicationHasEnteredForegroundDelegate;                    // 0x01D8   (0x0010)  
	FMulticastInlineDelegate                           ApplicationWillTerminateDelegate;                           // 0x01E8   (0x0010)  
	FMulticastInlineDelegate                           ApplicationShouldUnloadResourcesDelegate;                   // 0x01F8   (0x0010)  
	FMulticastInlineDelegate                           ApplicationReceivedStartupArgumentsDelegate;                // 0x0208   (0x0010)  
	FMulticastInlineDelegate                           ApplicationRegisteredForRemoteNotificationsDelegate;        // 0x0218   (0x0010)  
	FMulticastInlineDelegate                           ApplicationRegisteredForUserNotificationsDelegate;          // 0x0228   (0x0010)  
	FMulticastInlineDelegate                           ApplicationFailedToRegisterForRemoteNotificationsDelegate;  // 0x0238   (0x0010)  
	FMulticastInlineDelegate                           ApplicationReceivedRemoteNotificationDelegate;              // 0x0248   (0x0010)  
	FMulticastInlineDelegate                           ApplicationReceivedLocalNotificationDelegate;               // 0x0258   (0x0010)  
	FMulticastInlineDelegate                           ApplicationReceivedScreenOrientationChangedNotificationDelegate; // 0x0268   (0x0010)  
};

/// Class /Script/Engine.BlueprintPlatformLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationFromNow
	constexpr static const FunctionPointer<UBlueprintPlatformLibrary, int32_t, const int32_t, const FText&, const FText&, const FText&, const FString> ScheduleLocalNotificationFromNow = { 0x473e110, 0 }; 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeFromNow
	constexpr static const FunctionPointer<UBlueprintPlatformLibrary, void, const int32_t, const FString> ScheduleLocalNotificationBadgeFromNow = { 0x473dc60, 1 }; 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationBadgeAtTime
	constexpr static const FunctionPointer<UBlueprintPlatformLibrary, int32_t, const FDateTime&, const bool, const FString> ScheduleLocalNotificationBadgeAtTime = { 0x473ded0, 2 }; 
	// Function /Script/Engine.BlueprintPlatformLibrary.ScheduleLocalNotificationAtTime
	constexpr static const FunctionPointer<UBlueprintPlatformLibrary, int32_t, const FDateTime&, const bool, const FText&, const FText&, const FText&, const FString> ScheduleLocalNotificationAtTime = { 0x473e610, 3 }; 
	// Function /Script/Engine.BlueprintPlatformLibrary.GetLaunchNotification
	constexpr static const FunctionPointer<UBlueprintPlatformLibrary, void, const bool&, const FString&, const int32_t&> GetLaunchNotification = { 0x473d860, 4 }; 
	// Function /Script/Engine.BlueprintPlatformLibrary.GetDeviceOrientation
	constexpr static const FunctionPointer<UBlueprintPlatformLibrary, TEnumAsByte<EScreenOrientation>> GetDeviceOrientation = { 0x113b860, 5 }; 
	// Function /Script/Engine.BlueprintPlatformLibrary.ClearAllLocalNotifications
	constexpr static const FunctionPointer<UBlueprintPlatformLibrary, void> ClearAllLocalNotifications = { 0x473eae0, 6 }; 
	// Function /Script/Engine.BlueprintPlatformLibrary.CancelLocalNotificationById
	constexpr static const FunctionPointer<UBlueprintPlatformLibrary, void, const int32_t> CancelLocalNotificationById = { 0x473daa0, 7 }; 
	// Function /Script/Engine.BlueprintPlatformLibrary.CancelLocalNotification
	constexpr static const FunctionPointer<UBlueprintPlatformLibrary, void, const FString> CancelLocalNotification = { 0x473db70, 8 }; 
};

/// Class /Script/Engine.BlueprintSetLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.BlueprintSetLibrary.SetSetPropertyByName
	constexpr static const FunctionPointer<UBlueprintSetLibrary, void, const UObject*, const FName, const TSet<int32_t>&> SetSetPropertyByName = { 0x4740860, 0 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Union
	constexpr static const FunctionPointer<UBlueprintSetLibrary, void, const TSet<int32_t>&, const TSet<int32_t>&, const TSet<int32_t>&> Set_Union = { 0x4740380, 1 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_ToArray
	constexpr static const FunctionPointer<UBlueprintSetLibrary, void, const TSet<int32_t>&, const TArray<int32_t>&> Set_ToArray = { 0x473f9e0, 2 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_RemoveItems
	constexpr static const FunctionPointer<UBlueprintSetLibrary, void, const TSet<int32_t>&, const TArray<int32_t>&> Set_RemoveItems = { 0x473f790, 3 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Remove
	constexpr static const FunctionPointer<UBlueprintSetLibrary, bool, const TSet<int32_t>&, const int32_t&> Set_Remove = { 0x473f540, 4 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Length
	constexpr static const FunctionPointer<UBlueprintSetLibrary, int32_t, const TSet<int32_t>&> Set_Length = { 0x473fd20, 5 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Intersection
	constexpr static const FunctionPointer<UBlueprintSetLibrary, void, const TSet<int32_t>&, const TSet<int32_t>&, const TSet<int32_t>&> Set_Intersection = { 0x4740110, 6 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Difference
	constexpr static const FunctionPointer<UBlueprintSetLibrary, void, const TSet<int32_t>&, const TSet<int32_t>&, const TSet<int32_t>&> Set_Difference = { 0x47405f0, 7 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Contains
	constexpr static const FunctionPointer<UBlueprintSetLibrary, bool, const TSet<int32_t>&, const int32_t&> Set_Contains = { 0x473fe30, 8 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Clear
	constexpr static const FunctionPointer<UBlueprintSetLibrary, void, const TSet<int32_t>&> Set_Clear = { 0x473fc30, 9 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_AddItems
	constexpr static const FunctionPointer<UBlueprintSetLibrary, void, const TSet<int32_t>&, const TArray<int32_t>&> Set_AddItems = { 0x473f290, 10 }; 
	// Function /Script/Engine.BlueprintSetLibrary.Set_Add
	constexpr static const FunctionPointer<UBlueprintSetLibrary, void, const TSet<int32_t>&, const int32_t&> Set_Add = { 0x473f020, 11 }; 
};

/// Struct /Script/Engine.KShapeElem
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FKShapeElem
{ 
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	float                                              RestOffset;                                                 // 0x0008   (0x0004)  
	FName                                              Name;                                                       // 0x000C   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	bool                                               bContributeToMass : 1;                                      // 0x0018:0 (0x0001)  
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData05_7[0x16];                                      // 0x001A   (0x0016)  MISSED
};

/// Struct /Script/Engine.KSphereElem
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
struct FKSphereElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	float                                              Radius;                                                     // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.KBoxElem
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align n/a MaxSize: 0x0058
struct FKBoxElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              X;                                                          // 0x0048   (0x0004)  
	float                                              Y;                                                          // 0x004C   (0x0004)  
	float                                              Z;                                                          // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/Engine.KSphylElem
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align n/a MaxSize: 0x0050
struct FKSphylElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              Radius;                                                     // 0x0048   (0x0004)  
	float                                              Length;                                                     // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.KConvexElem
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FKConvexElem : FKShapeElem
{ 
	TArray<FVector>                                    VertexData;                                                 // 0x0030   (0x0010)  
	TArray<int32_t>                                    IndexData;                                                  // 0x0040   (0x0010)  
	FBox                                               ElemBox;                                                    // 0x0050   (0x001C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x006C   (0x0004)  MISSED
	FTransform                                         Transform;                                                  // 0x0070   (0x0030)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x00A0   (0x0010)  MISSED
};

/// Struct /Script/Engine.KTaperedCapsuleElem
/// Size: 0x0058 (88 bytes) (0x000030 - 0x000058) align n/a MaxSize: 0x0058
struct FKTaperedCapsuleElem : FKShapeElem
{ 
	FVector                                            Center;                                                     // 0x0030   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x003C   (0x000C)  
	float                                              Radius0;                                                    // 0x0048   (0x0004)  
	float                                              Radius1;                                                    // 0x004C   (0x0004)  
	float                                              Length;                                                     // 0x0050   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Struct /Script/Engine.KAggregateGeom
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FKAggregateGeom
{ 
	TArray<FKSphereElem>                               SphereElems;                                                // 0x0000   (0x0010)  
	TArray<FKBoxElem>                                  BoxElems;                                                   // 0x0010   (0x0010)  
	TArray<FKSphylElem>                                SphylElems;                                                 // 0x0020   (0x0010)  
	TArray<FKConvexElem>                               ConvexElems;                                                // 0x0030   (0x0010)  
	TArray<FKTaperedCapsuleElem>                       TaperedCapsuleElems;                                        // 0x0040   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.BodySetup
/// Size: 0x0310 (784 bytes) (0x000048 - 0x000310) align n/a MaxSize: 0x0310
class UBodySetup : public UBodySetupCore
{ 
public:
	FKAggregateGeom                                    AggGeom;                                                    // 0x0048   (0x0058)  
	bool                                               bAlwaysFullAnimWeight : 1;                                  // 0x00A0:0 (0x0001)  
	bool                                               bConsiderForBounds : 1;                                     // 0x00A0:1 (0x0001)  
	bool                                               bMeshCollideAll : 1;                                        // 0x00A0:2 (0x0001)  
	bool                                               bDoubleSidedGeometry : 1;                                   // 0x00A0:3 (0x0001)  
	bool                                               bGenerateNonMirroredCollision : 1;                          // 0x00A0:4 (0x0001)  
	bool                                               bSharedCookedData : 1;                                      // 0x00A0:5 (0x0001)  
	bool                                               bGenerateMirroredCollision : 1;                             // 0x00A0:6 (0x0001)  
	bool                                               bSupportUVsAndFaceRemap : 1;                                // 0x00A0:7 (0x0001)  
	unsigned char                                      UnknownData05_5[0x7];                                       // 0x00A1   (0x0007)  MISSED
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x00A8   (0x0008)  
	FWalkableSlopeOverride                             WalkableSlopeOverride;                                      // 0x00B0   (0x0010)  
	bool                                               bIgnoreDynamicSimulatePhysics;                              // 0x00C0   (0x0001)  
	bool                                               bCookUVInfo : 1;                                            // 0x00C1:0 (0x0001)  
	bool                                               bKeepBodyCollisionEnableType : 1;                           // 0x00C1:1 (0x0001)  
	bool                                               bControlPhysicWeightByDeltaTime;                            // 0x00C2   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x00C3   (0x0001)  MISSED
	float                                              ControlPhysicWeightByDeltaTimeMulScale;                     // 0x00C4   (0x0004)  
	float                                              ControlPhysicWeightByDeltaMinWeight;                        // 0x00C8   (0x0004)  
	float                                              ControlPhysicWeightByDeltaMaxWeight;                        // 0x00CC   (0x0004)  
	float                                              ControlStartPhysicWeightByVelocityDiff;                     // 0x00D0   (0x0004)  
	float                                              ControlMaxPhysicWeightByVelocityDiff;                       // 0x00D4   (0x0004)  
	unsigned char                                      UnknownData07_6[0x70];                                      // 0x00D8   (0x0070)  MISSED
	FBodyInstance                                      DefaultInstance;                                            // 0x0148   (0x01A8)  
	unsigned char                                      UnknownData08_6[0x8];                                       // 0x02F0   (0x0008)  MISSED
	FVector                                            BuildScale3D;                                               // 0x02F8   (0x000C)  
	unsigned char                                      UnknownData09_7[0xC];                                       // 0x0304   (0x000C)  MISSED
};

/// Struct /Script/Engine.BranchFilter
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FBranchFilter
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	int32_t                                            BlendDepth;                                                 // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.InputBlendPose
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FInputBlendPose
{ 
	TArray<FBranchFilter>                              BranchFilters;                                              // 0x0000   (0x0010)  
};

/// Class /Script/Engine.BoneMaskFilter
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UBoneMaskFilter : public UObject
{ 
public:
	TArray<FInputBlendPose>                            BlendPoses;                                                 // 0x0028   (0x0010)  
};

/// Class /Script/Engine.BookmarkBase
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UBookmarkBase : public UObject
{ 
public:
};

/// Class /Script/Engine.BookMark
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UBookMark : public UBookmarkBase
{ 
public:
	FVector                                            Location;                                                   // 0x0028   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0034   (0x000C)  
	TArray<FString>                                    HiddenLevels;                                               // 0x0040   (0x0010)  
};

/// Class /Script/Engine.BookMark2D
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UBookMark2D : public UBookmarkBase
{ 
public:
	float                                              Zoom2D;                                                     // 0x0028   (0x0004)  
	FIntPoint                                          Location;                                                   // 0x002C   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.BoundsCopyComponent
/// Size: 0x0130 (304 bytes) (0x0000C0 - 0x000130) align n/a MaxSize: 0x0130
class UBoundsCopyComponent : public UActorComponent
{ 
public:
	TWeakObjectPtr<class AActor*>                      BoundsSourceActor;                                          // 0x00C0   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x00C8   (0x0020)  MISSED
	bool                                               bUseCollidingComponentsForSourceBounds;                     // 0x00E8   (0x0001)  
	bool                                               bKeepOwnBoundsScale;                                        // 0x00E9   (0x0001)  
	bool                                               bUseCollidingComponentsForOwnBounds;                        // 0x00EA   (0x0001)  
	unsigned char                                      UnknownData04_6[0x5];                                       // 0x00EB   (0x0005)  MISSED
	FTransform                                         PostTransform;                                              // 0x00F0   (0x0030)  
	bool                                               bCopyXBounds;                                               // 0x0120   (0x0001)  
	bool                                               bCopyYBounds;                                               // 0x0121   (0x0001)  
	bool                                               bCopyZBounds;                                               // 0x0122   (0x0001)  
	unsigned char                                      UnknownData05_7[0xD];                                       // 0x0123   (0x000D)  MISSED
};

/// Class /Script/Engine.ReflectionCapture
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class AReflectionCapture : public AActor
{ 
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                           // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.BoxReflectionCapture
/// Size: 0x02D0 (720 bytes) (0x0002D0 - 0x0002D0) align n/a MaxSize: 0x02D0
class ABoxReflectionCapture : public AReflectionCapture
{ 
public:
};

/// Class /Script/Engine.ReflectionCaptureComponent
/// Size: 0x02E0 (736 bytes) (0x000260 - 0x0002E0) align n/a MaxSize: 0x02D8
class UReflectionCaptureComponent : public USceneComponent
{ 
public:
	class UBillboardComponent*                         CaptureOffsetComponent;                                     // 0x0260   (0x0008)  
	EReflectionSourceType                              ReflectionSourceType;                                       // 0x0268   (0x0001)  
	EMobileReflectionCompression                       MobileReflectionCompression;                                // 0x0269   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x026A   (0x0006)  MISSED
	class UTextureCube*                                Cubemap;                                                    // 0x0270   (0x0008)  
	float                                              SourceCubemapAngle;                                         // 0x0278   (0x0004)  
	float                                              Brightness;                                                 // 0x027C   (0x0004)  
	bool                                               bModifyMaxValueRGBM;                                        // 0x0280   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0281   (0x0003)  MISSED
	float                                              MaxValueRGBM;                                               // 0x0284   (0x0004)  
	FVector                                            CaptureOffset;                                              // 0x0288   (0x000C)  
	FGuid                                              MapBuildDataId;                                             // 0x0294   (0x0010)  
	unsigned char                                      UnknownData06_6[0x14];                                      // 0x02A4   (0x0014)  MISSED
	class UTextureCube*                                CachedEncodedHDRCubemap;                                    // 0x02B8   (0x0008)  
	unsigned char                                      UnknownData07_7[0x18];                                      // 0x02C0   (0x0018)  MISSED
};

/// Class /Script/Engine.BoxReflectionCaptureComponent
/// Size: 0x02F0 (752 bytes) (0x0002D8 - 0x0002F0) align n/a MaxSize: 0x02F0
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              BoxTransitionDistance;                                      // 0x02D8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02DC   (0x0004)  MISSED
	class UBoxComponent*                               PreviewInfluenceBox;                                        // 0x02E0   (0x0008)  
	class UBoxComponent*                               PreviewCaptureBox;                                          // 0x02E8   (0x0008)  
};

/// Class /Script/Engine.Breakpoint
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UBreakpoint : public UObject
{ 
public:
	bool                                               bEnabled : 1;                                               // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	class UEdGraphNode*                                Node;                                                       // 0x0030   (0x0008)  
	bool                                               bStepOnce : 1;                                              // 0x0038:0 (0x0001)  
	bool                                               bStepOnce_WasPreviouslyDisabled : 1;                        // 0x0038:1 (0x0001)  
	bool                                               bStepOnce_RemoveAfterHit : 1;                               // 0x0038:2 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.BuilderPoly
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FBuilderPoly
{ 
	TArray<int32_t>                                    VertexIndices;                                              // 0x0000   (0x0010)  
	int32_t                                            Direction;                                                  // 0x0010   (0x0004)  
	FName                                              ItemName;                                                   // 0x0014   (0x0008)  
	int32_t                                            PolyFlags;                                                  // 0x001C   (0x0004)  
};

/// Class /Script/Engine.BrushBuilder
/// Size: 0x0080 (128 bytes) (0x000028 - 0x000080) align n/a MaxSize: 0x0080
class UBrushBuilder : public UObject
{ 
public:
	FString                                            BitmapFilename;                                             // 0x0028   (0x0010)  
	FString                                            ToolTip;                                                    // 0x0038   (0x0010)  
	bool                                               NotifyBadParams : 1;                                        // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0049   (0x0007)  MISSED
	TArray<FVector>                                    Vertices;                                                   // 0x0050   (0x0010)  
	TArray<FBuilderPoly>                               Polys;                                                      // 0x0060   (0x0010)  
	FName                                              Layer;                                                      // 0x0070   (0x0008)  
	bool                                               MergeCoplanars : 1;                                         // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.BrushComponent
/// Size: 0x0550 (1360 bytes) (0x000538 - 0x000550) align n/a MaxSize: 0x0550
class UBrushComponent : public UPrimitiveComponent
{ 
public:
	class UModel*                                      Brush;                                                      // 0x0538   (0x0008)  
	class UBodySetup*                                  BrushBodySetup;                                             // 0x0540   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0548   (0x0008)  MISSED
};

/// Class /Script/Engine.BrushShape
/// Size: 0x0300 (768 bytes) (0x000300 - 0x000300) align n/a MaxSize: 0x0300
class ABrushShape : public ABrush
{ 
public:
};

/// Class /Script/Engine.ButtonStyleAsset
/// Size: 0x02C0 (704 bytes) (0x000028 - 0x0002C0) align n/a MaxSize: 0x02C0
class UButtonStyleAsset : public UObject
{ 
public:
	FButtonStyle                                       ButtonStyle;                                                // 0x0028   (0x0298)  
};

/// Class /Script/Engine.CameraAnim
/// Size: 0x0620 (1568 bytes) (0x000028 - 0x000620) align n/a MaxSize: 0x0620
class UCameraAnim : public UObject
{ 
public:
	class UInterpGroup*                                CameraInterpGroup;                                          // 0x0028   (0x0008)  
	float                                              AnimLength;                                                 // 0x0030   (0x0004)  
	FBox                                               BoundingBox;                                                // 0x0034   (0x001C)  
	bool                                               bRelativeToInitialTransform : 1;                            // 0x0050:0 (0x0001)  
	bool                                               bRelativeToInitialFOV : 1;                                  // 0x0050:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              BaseFOV;                                                    // 0x0054   (0x0004)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0058   (0x0008)  MISSED
	FPostProcessSettings                               BasePostProcessSettings;                                    // 0x0060   (0x05A0)  
	float                                              BasePostProcessBlendWeight;                                 // 0x0600   (0x0004)  
	float                                              MovementScale;                                              // 0x0604   (0x0004)  
	bool                                               bAttachCharacter;                                           // 0x0608   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x0609   (0x0007)  MISSED
	class ACharacter*                                  AttachCharacter;                                            // 0x0610   (0x0008)  
	unsigned char                                      UnknownData07_7[0x8];                                       // 0x0618   (0x0008)  MISSED
};

/// Class /Script/Engine.CameraAnimInst
/// Size: 0x0170 (368 bytes) (0x000028 - 0x000170) align n/a MaxSize: 0x0170
class UCameraAnimInst : public UObject
{ 
public:
	class UCameraAnim*                                 CamAnim;                                                    // 0x0028   (0x0008)  
	class UInterpGroupInst*                            InterpGroupInst;                                            // 0x0030   (0x0008)  
	unsigned char                                      UnknownData07_6[0x1C];                                      // 0x0038   (0x001C)  MISSED
	float                                              PlayRate;                                                   // 0x0054   (0x0004)  
	unsigned char                                      UnknownData08_6[0x10];                                      // 0x0058   (0x0010)  MISSED
	class UInterpTrackMove*                            MoveTrack;                                                  // 0x0068   (0x0008)  
	class UInterpTrackInstMove*                        MoveInst;                                                   // 0x0070   (0x0008)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x0078   (0x0001)  
	unsigned char                                      UnknownData09_6[0x48];                                      // 0x0079   (0x0048)  MISSED
	bool                                               bAttachCharacter;                                           // 0x00C1   (0x0001)  
	unsigned char                                      UnknownData10_6[0x6];                                       // 0x00C2   (0x0006)  MISSED
	class ACharacter*                                  AttachCharacterPtr;                                         // 0x00C8   (0x0008)  
	bool                                               bUseAttachCharacterFirstRotation;                           // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData11_6[0xF];                                       // 0x00D1   (0x000F)  MISSED
	FQuat                                              AttachCharacterFirstRotation;                               // 0x00E0   (0x0010)  
	FVector                                            AttachCharacterFirstLocation;                               // 0x00F0   (0x000C)  
	bool                                               bFocalSkeletalMeshComponent;                                // 0x00FC   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x00FD   (0x0003)  MISSED
	FName                                              FocalSkeletalMeshBoneName;                                  // 0x0100   (0x0008)  
	float                                              FocalSkeletalMeshStartTime;                                 // 0x0108   (0x0004)  
	float                                              FocalSkeletalMeshDuration;                                  // 0x010C   (0x0004)  
	float                                              FocalSkeletalMeshFStop;                                     // 0x0110   (0x0004)  
	unsigned char                                      UnknownData13_7[0x5C];                                      // 0x0114   (0x005C)  MISSED

	/// Functions
	// Function /Script/Engine.CameraAnimInst.Stop
	constexpr static const FunctionPointer<UCameraAnimInst, void, const bool> Stop = { 0x4745f20, 0 }; 
	// Function /Script/Engine.CameraAnimInst.SetScale
	constexpr static const FunctionPointer<UCameraAnimInst, void, const float> SetScale = { 0x4745d40, 1 }; 
	// Function /Script/Engine.CameraAnimInst.SetDuration
	constexpr static const FunctionPointer<UCameraAnimInst, void, const float> SetDuration = { 0x4745e10, 2 }; 
};

/// Class /Script/Engine.CameraBlockingVolume
/// Size: 0x0318 (792 bytes) (0x000318 - 0x000318) align n/a MaxSize: 0x0318
class ACameraBlockingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.CameraModifier
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class UCameraModifier : public UObject
{ 
public:
	bool                                               bDebug : 1;                                                 // 0x0028:0 (0x0001)  
	bool                                               bExclusive : 1;                                             // 0x0028:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	char                                               Priority;                                                   // 0x002C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x002D   (0x0003)  MISSED
	class APlayerCameraManager*                        CameraOwner;                                                // 0x0030   (0x0008)  
	float                                              AlphaInTime;                                                // 0x0038   (0x0004)  
	float                                              AlphaOutTime;                                               // 0x003C   (0x0004)  
	float                                              Alpha;                                                      // 0x0040   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0044   (0x0004)  MISSED

	/// Functions
	// Function /Script/Engine.CameraModifier.IsDisabled
	constexpr static const FunctionPointer<UCameraModifier, bool> IsDisabled = { 0x3817070, 0 }; 
	// Function /Script/Engine.CameraModifier.GetViewTarget
	constexpr static const FunctionPointer<UCameraModifier, AActor*> GetViewTarget = { 0x3dacfe0, 1 }; 
	// Function /Script/Engine.CameraModifier.EnableModifier
	constexpr static const FunctionPointer<UCameraModifier, void> EnableModifier = { 0x4747a90, 2 }; 
	// Function /Script/Engine.CameraModifier.DisableModifier
	constexpr static const FunctionPointer<UCameraModifier, void, const bool> DisableModifier = { 0x4747ab0, 3 }; 
	// Function /Script/Engine.CameraModifier.BlueprintModifyPostProcess
	constexpr static const FunctionPointer<UCameraModifier, void, const float, const float&, const FPostProcessSettings&> BlueprintModifyPostProcess = { 0x2bbb090, 4 }; 
	// Function /Script/Engine.CameraModifier.BlueprintModifyCamera
	constexpr static const FunctionPointer<UCameraModifier, void, const float, const FVector, const FRotator, const float, const FVector&, const FRotator&, const float&> BlueprintModifyCamera = { 0x2bbb090, 5 }; 
};

/// Struct /Script/Engine.ActiveCameraShakeInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FActiveCameraShakeInfo
{ 
	class UCameraShakeBase*                            ShakeInstance;                                              // 0x0000   (0x0008)  
	TWeakObjectPtr<class UCameraShakeSourceComponent*> ShakeSource;                                                // 0x0008   (0x0008)  
	bool                                               bDynamicCameraShake;                                        // 0x0010   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	FGuid                                              ShakeGuid;                                                  // 0x0014   (0x0010)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.PooledCameraShakes
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FPooledCameraShakes
{ 
	TArray<class UCameraShakeBase*>                    PooledShakes;                                               // 0x0000   (0x0010)  
};

/// Class /Script/Engine.CameraModifier_CameraShake
/// Size: 0x00B8 (184 bytes) (0x000048 - 0x0000B8) align n/a MaxSize: 0x00B8
class UCameraModifier_CameraShake : public UCameraModifier
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0048   (0x0008)  MISSED
	TArray<FActiveCameraShakeInfo>                     ActiveShakes;                                               // 0x0050   (0x0010)  
	TMap<class UClass*, FPooledCameraShakes>           ExpiredPooledShakesMap;                                     // 0x0060   (0x0050)  
	float                                              SplitScreenShakeScale;                                      // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Struct /Script/Engine.FOscillator
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FFOscillator
{ 
	float                                              Amplitude;                                                  // 0x0000   (0x0004)  
	float                                              Frequency;                                                  // 0x0004   (0x0004)  
	TEnumAsByte<EInitialOscillatorOffset>              InitialOffset;                                              // 0x0008   (0x0001)  
	EOscillatorWaveform                                Waveform;                                                   // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Engine.ROscillator
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FROscillator
{ 
	FFOscillator                                       Pitch;                                                      // 0x0000   (0x000C)  
	FFOscillator                                       Yaw;                                                        // 0x000C   (0x000C)  
	FFOscillator                                       Roll;                                                       // 0x0018   (0x000C)  
};

/// Struct /Script/Engine.VOscillator
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FVOscillator
{ 
	FFOscillator                                       X;                                                          // 0x0000   (0x000C)  
	FFOscillator                                       Y;                                                          // 0x000C   (0x000C)  
	FFOscillator                                       Z;                                                          // 0x0018   (0x000C)  
};

/// Class /Script/Engine.MatineeCameraShake
/// Size: 0x0190 (400 bytes) (0x0000A8 - 0x000190) align n/a MaxSize: 0x0190
class UMatineeCameraShake : public UCameraShakeBase
{ 
public:
	float                                              OscillationDuration;                                        // 0x00A8   (0x0004)  
	float                                              OscillationBlendInTime;                                     // 0x00AC   (0x0004)  
	float                                              OscillationBlendOutTime;                                    // 0x00B0   (0x0004)  
	FROscillator                                       RotOscillation;                                             // 0x00B4   (0x0024)  
	FVOscillator                                       LocOscillation;                                             // 0x00D8   (0x0024)  
	FFOscillator                                       FOVOscillation;                                             // 0x00FC   (0x000C)  
	float                                              AnimPlayRate;                                               // 0x0108   (0x0004)  
	float                                              AnimScale;                                                  // 0x010C   (0x0004)  
	float                                              AnimBlendInTime;                                            // 0x0110   (0x0004)  
	float                                              AnimBlendOutTime;                                           // 0x0114   (0x0004)  
	float                                              RandomAnimSegmentDuration;                                  // 0x0118   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x011C   (0x0004)  MISSED
	class UCameraAnim*                                 Anim;                                                       // 0x0120   (0x0008)  
	bool                                               bRandomAnimSegment : 1;                                     // 0x0128:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0129   (0x0003)  MISSED
	float                                              OscillatorTimeRemaining;                                    // 0x012C   (0x0004)  
	class UCameraAnimInst*                             AnimInst;                                                   // 0x0130   (0x0008)  
	unsigned char                                      UnknownData05_7[0x58];                                      // 0x0138   (0x0058)  MISSED

	/// Functions
	// Function /Script/Engine.MatineeCameraShake.ReceiveStopShake
	constexpr static const FunctionPointer<UMatineeCameraShake, void, const bool> ReceiveStopShake = { 0x2bbb090, 0 }; 
	// Function /Script/Engine.MatineeCameraShake.ReceivePlayShake
	constexpr static const FunctionPointer<UMatineeCameraShake, void, const float> ReceivePlayShake = { 0x2bbb090, 1 }; 
	// Function /Script/Engine.MatineeCameraShake.ReceiveIsFinished
	constexpr static const FunctionPointer<UMatineeCameraShake, bool> ReceiveIsFinished = { 0x4749180, 2 }; 
	// Function /Script/Engine.MatineeCameraShake.BlueprintUpdateCameraShake
	constexpr static const FunctionPointer<UMatineeCameraShake, void, const float, const float, const FMinimalViewInfo&, const FMinimalViewInfo&> BlueprintUpdateCameraShake = { 0x2bbb090, 3 }; 
};

/// Class /Script/Engine.CameraShakeSourceActor
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ACameraShakeSourceActor : public AActor
{ 
public:
	class UCameraShakeSourceComponent*                 CameraShakeSourceComponent;                                 // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.CameraShakeSourceComponent
/// Size: 0x0280 (640 bytes) (0x000260 - 0x000280) align n/a MaxSize: 0x0280
class UCameraShakeSourceComponent : public USceneComponent
{ 
public:
	ECameraShakeAttenuation                            Attenuation;                                                // 0x0260   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0261   (0x0003)  MISSED
	float                                              InnerAttenuationRadius;                                     // 0x0264   (0x0004)  
	float                                              OuterAttenuationRadius;                                     // 0x0268   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x026C   (0x0004)  MISSED
	class UClass*                                      CameraShake;                                                // 0x0270   (0x0008)  
	bool                                               bAutoStart;                                                 // 0x0278   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0279   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.CameraShakeSourceComponent.StopAllCameraShakesOfType
	constexpr static const FunctionPointer<UCameraShakeSourceComponent, void, const UClass*, const bool> StopAllCameraShakesOfType = { 0x474a4a0, 0 }; 
	// Function /Script/Engine.CameraShakeSourceComponent.StopAllCameraShakes
	constexpr static const FunctionPointer<UCameraShakeSourceComponent, void, const bool> StopAllCameraShakes = { 0x474a3c0, 1 }; 
	// Function /Script/Engine.CameraShakeSourceComponent.StartCameraShake
	constexpr static const FunctionPointer<UCameraShakeSourceComponent, void, const UClass*, const float, const ECameraShakePlaySpace, const FRotator> StartCameraShake = { 0x474a610, 2 }; 
	// Function /Script/Engine.CameraShakeSourceComponent.Start
	constexpr static const FunctionPointer<UCameraShakeSourceComponent, void> Start = { 0x474a8b0, 3 }; 
	// Function /Script/Engine.CameraShakeSourceComponent.GetAttenuationFactor
	constexpr static const FunctionPointer<UCameraShakeSourceComponent, float, const FVector&> GetAttenuationFactor = { 0x474a2d0, 4 }; 
};

/// Class /Script/Engine.Canvas
/// Size: 0x02D0 (720 bytes) (0x000028 - 0x0002D0) align n/a MaxSize: 0x02D0
class UCanvas : public UObject
{ 
public:
	float                                              OrgX;                                                       // 0x0028   (0x0004)  
	float                                              OrgY;                                                       // 0x002C   (0x0004)  
	float                                              ClipX;                                                      // 0x0030   (0x0004)  
	float                                              ClipY;                                                      // 0x0034   (0x0004)  
	FColor                                             DrawColor;                                                  // 0x0038   (0x0004)  
	bool                                               bCenterX : 1;                                               // 0x003C:0 (0x0001)  
	bool                                               bCenterY : 1;                                               // 0x003C:1 (0x0001)  
	bool                                               bNoSmooth : 1;                                              // 0x003C:2 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	int32_t                                            SizeX;                                                      // 0x0040   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x0044   (0x0004)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0048   (0x0008)  MISSED
	FPlane                                             ColorModulate;                                              // 0x0050   (0x0010)  
	class UTexture2D*                                  DefaultTexture;                                             // 0x0060   (0x0008)  
	class UTexture2D*                                  GradientTexture0;                                           // 0x0068   (0x0008)  
	class UReporterGraph*                              ReporterGraph;                                              // 0x0070   (0x0008)  
	unsigned char                                      UnknownData05_7[0x258];                                     // 0x0078   (0x0258)  MISSED

	/// Functions
	// Function /Script/Engine.Canvas.K2_TextSize
	constexpr static const FunctionPointer<UCanvas, FVector2D, const UFont*, const FString, const FVector2D> K2_TextSize = { 0x474b200, 0 }; 
	// Function /Script/Engine.Canvas.K2_StrLen
	constexpr static const FunctionPointer<UCanvas, FVector2D, const UFont*, const FString> K2_StrLen = { 0x474b650, 1 }; 
	// Function /Script/Engine.Canvas.K2_Project
	constexpr static const FunctionPointer<UCanvas, FVector, const FVector> K2_Project = { 0x474bbc0, 2 }; 
	// Function /Script/Engine.Canvas.K2_DrawTriangle
	constexpr static const FunctionPointer<UCanvas, void, const UTexture*, const TArray<FCanvasUVTri>> K2_DrawTriangle = { 0x474c380, 3 }; 
	// Function /Script/Engine.Canvas.K2_DrawTexture
	constexpr static const FunctionPointer<UCanvas, void, const UTexture*, const FVector2D, const FVector2D, const FVector2D, const FVector2D, const FLinearColor, const TEnumAsByte<EBlendMode>, const float, const FVector2D> K2_DrawTexture = { 0x474e1e0, 4 }; 
	// Function /Script/Engine.Canvas.K2_DrawText
	constexpr static const FunctionPointer<UCanvas, void, const UFont*, const FString, const FVector2D, const FVector2D, const FLinearColor, const float, const FLinearColor, const FVector2D, const bool, const bool, const bool, const FLinearColor> K2_DrawText = { 0x474d300, 5 }; 
	// Function /Script/Engine.Canvas.K2_DrawPolygon
	constexpr static const FunctionPointer<UCanvas, void, const UTexture*, const FVector2D, const FVector2D, const int32_t, const FLinearColor> K2_DrawPolygon = { 0x474bcc0, 6 }; 
	// Function /Script/Engine.Canvas.K2_DrawMaterialTriangle
	constexpr static const FunctionPointer<UCanvas, void, const UMaterialInterface*, const TArray<FCanvasUVTri>> K2_DrawMaterialTriangle = { 0x474c0d0, 7 }; 
	// Function /Script/Engine.Canvas.K2_DrawMaterial
	constexpr static const FunctionPointer<UCanvas, void, const UMaterialInterface*, const FVector2D, const FVector2D, const FVector2D, const FVector2D, const float, const FVector2D> K2_DrawMaterial = { 0x474dc10, 8 }; 
	// Function /Script/Engine.Canvas.K2_DrawLine
	constexpr static const FunctionPointer<UCanvas, void, const FVector2D, const FVector2D, const float, const FLinearColor> K2_DrawLine = { 0x474e6e0, 9 }; 
	// Function /Script/Engine.Canvas.K2_DrawBox
	constexpr static const FunctionPointer<UCanvas, void, const FVector2D, const FVector2D, const float, const FLinearColor> K2_DrawBox = { 0x474c600, 10 }; 
	// Function /Script/Engine.Canvas.K2_DrawBorder
	constexpr static const FunctionPointer<UCanvas, void, const UTexture*, const UTexture*, const UTexture*, const UTexture*, const UTexture*, const UTexture*, const FVector2D, const FVector2D, const FVector2D, const FVector2D, const FLinearColor, const FVector2D, const FVector2D, const float, const FVector2D, const FVector2D> K2_DrawBorder = { 0x474c900, 11 }; 
	// Function /Script/Engine.Canvas.K2_Deproject
	constexpr static const FunctionPointer<UCanvas, void, const FVector2D, const FVector&, const FVector&> K2_Deproject = { 0x474b9c0, 12 }; 
};

/// Class /Script/Engine.TextureRenderTarget
/// Size: 0x00E8 (232 bytes) (0x0000E0 - 0x0000E8) align n/a MaxSize: 0x00E8
class UTextureRenderTarget : public UTexture
{ 
public:
	float                                              TargetGamma;                                                // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00E4   (0x0004)  MISSED
};

/// Class /Script/Engine.TextureRenderTarget2D
/// Size: 0x0110 (272 bytes) (0x0000E8 - 0x000110) align n/a MaxSize: 0x0110
class UTextureRenderTarget2D : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x00E8   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x00EC   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x00F0   (0x0010)  
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x0100   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x0101   (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x0102:0 (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x0102:1 (0x0001)  
	bool                                               bGPUSharedFlag : 1;                                         // 0x0102:2 (0x0001)  
	TEnumAsByte<ETextureRenderTargetFormat>            RenderTargetFormat;                                         // 0x0103   (0x0001)  
	bool                                               bAutoGenerateMips : 1;                                      // 0x0104:0 (0x0001)  
	TEnumAsByte<TextureFilter>                         MipsSamplerFilter;                                          // 0x0105   (0x0001)  
	TEnumAsByte<TextureAddress>                        MipsAddressU;                                               // 0x0106   (0x0001)  
	TEnumAsByte<TextureAddress>                        MipsAddressV;                                               // 0x0107   (0x0001)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x0108   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0109   (0x0007)  MISSED
};

/// Class /Script/Engine.CanvasRenderTarget2D
/// Size: 0x0130 (304 bytes) (0x000110 - 0x000130) align n/a MaxSize: 0x0130
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{ 
public:
	FMulticastInlineDelegate                           OnCanvasRenderTargetUpdate;                                 // 0x0110   (0x0010)  
	TWeakObjectPtr<class UWorld*>                      World;                                                      // 0x0120   (0x0008)  
	bool                                               bShouldClearRenderTargetOnReceiveUpdate;                    // 0x0128   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0129   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.CanvasRenderTarget2D.UpdateResource
	constexpr static const FunctionPointer<UCanvasRenderTarget2D, void> UpdateResource = { 0x474f530, 0 }; 
	// Function /Script/Engine.CanvasRenderTarget2D.ReceiveUpdate
	constexpr static const FunctionPointer<UCanvasRenderTarget2D, void, const UCanvas*, const int32_t, const int32_t> ReceiveUpdate = { 0x2bbb090, 1 }; 
	// Function /Script/Engine.CanvasRenderTarget2D.GetSize
	constexpr static const FunctionPointer<UCanvasRenderTarget2D, void, const int32_t&, const int32_t&> GetSize = { 0x474f000, 2 }; 
	// Function /Script/Engine.CanvasRenderTarget2D.CreateCanvasRenderTarget2D
	constexpr static const FunctionPointer<UCanvasRenderTarget2D, UCanvasRenderTarget2D*, const UObject*, const UClass*, const int32_t, const int32_t> CreateCanvasRenderTarget2D = { 0x474f1a0, 3 }; 
};

/// Class /Script/Engine.CheckBoxStyleAsset
/// Size: 0x05F0 (1520 bytes) (0x000028 - 0x0005F0) align n/a MaxSize: 0x05F0
class UCheckBoxStyleAsset : public UObject
{ 
public:
	FCheckBoxStyle                                     CheckBoxStyle;                                              // 0x0028   (0x05C8)  
};

/// Class /Script/Engine.ChildActorComponent
/// Size: 0x02A0 (672 bytes) (0x000260 - 0x0002A0) align n/a MaxSize: 0x02A0
class UChildActorComponent : public USceneComponent
{ 
public:
	class UClass*                                      ChildActorClass;                                            // 0x0260   (0x0008)  
	class AActor*                                      ChildActor;                                                 // 0x0268   (0x0008)  
	class AActor*                                      ChildActorTemplate;                                         // 0x0270   (0x0008)  
	unsigned char                                      UnknownData01_7[0x28];                                      // 0x0278   (0x0028)  MISSED

	/// Functions
	// Function /Script/Engine.ChildActorComponent.SetChildActorClass
	constexpr static const FunctionPointer<UChildActorComponent, void, const UClass*> SetChildActorClass = { 0x475e140, 0 }; 
};

/// Class /Script/Engine.ChildConnection
/// Size: 0x1AF8 (6904 bytes) (0x001AF0 - 0x001AF8) align n/a MaxSize: 0x1AF8
class UChildConnection : public UNetConnection
{ 
public:
	class UNetConnection*                              Parent;                                                     // 0x1AF0   (0x0008)  
};

/// Struct /Script/Engine.DelegateArray
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FDelegateArray
{ 
	TArray<FDelegateProperty>                          Delegates;                                                  // 0x0000   (0x0010)  
};

/// Class /Script/Engine.PlatformInterfaceBase
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UPlatformInterfaceBase : public UObject
{ 
public:
	TArray<FDelegateArray>                             AllDelegates;                                               // 0x0028   (0x0010)  
};

/// Class /Script/Engine.CloudStorageBase
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align n/a MaxSize: 0x0050
class UCloudStorageBase : public UPlatformInterfaceBase
{ 
public:
	TArray<FString>                                    LocalCloudFiles;                                            // 0x0038   (0x0010)  
	bool                                               bSuppressDelegateCalls : 1;                                 // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Struct /Script/Engine.CollisionResponseTemplate
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FCollisionResponseTemplate
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TEnumAsByte<ECollisionEnabled>                     CollisionEnabled;                                           // 0x0008   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x0009   (0x0001)  MISSED
	bool                                               bCanModify;                                                 // 0x000A   (0x0001)  
	unsigned char                                      UnknownData04_6[0x21];                                      // 0x000B   (0x0021)  MISSED
	FName                                              ObjectTypeName;                                             // 0x002C   (0x0008)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	TArray<FResponseChannel>                           CustomResponses;                                            // 0x0038   (0x0010)  
};

/// Struct /Script/Engine.CustomChannelSetup
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FCustomChannelSetup
{ 
	TEnumAsByte<ECollisionChannel>                     Channel;                                                    // 0x0000   (0x0001)  
	TEnumAsByte<ECollisionResponse>                    DefaultResponse;                                            // 0x0001   (0x0001)  
	bool                                               bTraceType;                                                 // 0x0002   (0x0001)  
	bool                                               bStaticObject;                                              // 0x0003   (0x0001)  
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.CustomProfile
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FCustomProfile
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	TArray<FResponseChannel>                           CustomResponses;                                            // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.Redirector
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FRedirector
{ 
	FName                                              OldName;                                                    // 0x0000   (0x0008)  
	FName                                              NewName;                                                    // 0x0008   (0x0008)  
};

/// Class /Script/Engine.CollisionProfile
/// Size: 0x0170 (368 bytes) (0x000038 - 0x000170) align n/a MaxSize: 0x0170
class UCollisionProfile : public UDeveloperSettings
{ 
public:
	TArray<FCollisionResponseTemplate>                 Profiles;                                                   // 0x0038   (0x0010)  
	TArray<FCustomChannelSetup>                        DefaultChannelResponses;                                    // 0x0048   (0x0010)  
	TArray<FCustomProfile>                             EditProfiles;                                               // 0x0058   (0x0010)  
	TArray<FRedirector>                                ProfileRedirects;                                           // 0x0068   (0x0010)  
	TArray<FRedirector>                                CollisionChannelRedirects;                                  // 0x0078   (0x0010)  
	unsigned char                                      UnknownData01_7[0xE8];                                      // 0x0088   (0x00E8)  MISSED
};

/// Struct /Script/Engine.BlueprintComponentDelegateBinding
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FBlueprintComponentDelegateBinding
{ 
	FName                                              ComponentPropertyName;                                      // 0x0000   (0x0008)  
	FName                                              DelegatePropertyName;                                       // 0x0008   (0x0008)  
	FName                                              FunctionNameToBind;                                         // 0x0010   (0x0008)  
};

/// Class /Script/Engine.ComponentDelegateBinding
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
	TArray<FBlueprintComponentDelegateBinding>         ComponentDelegateBindings;                                  // 0x0028   (0x0010)  
};

/// Class /Script/Engine.ActorComponentInstanceDataTransientOuter
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UActorComponentInstanceDataTransientOuter : public UObject
{ 
public:
};

/// Class /Script/Engine.CurveTable
/// Size: 0x00A0 (160 bytes) (0x000028 - 0x0000A0) align n/a MaxSize: 0x00A0
class UCurveTable : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x78];                                      // 0x0028   (0x0078)  MISSED
};

/// Class /Script/Engine.CompositeCurveTable
/// Size: 0x00C8 (200 bytes) (0x0000A0 - 0x0000C8) align n/a MaxSize: 0x00C8
class UCompositeCurveTable : public UCurveTable
{ 
public:
	TArray<class UCurveTable*>                         ParentTables;                                               // 0x00A0   (0x0010)  
	TArray<class UCurveTable*>                         OldParentTables;                                            // 0x00B0   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Class /Script/Engine.DataTable
/// Size: 0x02E0 (736 bytes) (0x000028 - 0x0002E0) align n/a MaxSize: 0x02E0
class UDataTable : public UObject
{ 
public:
	class UScriptStruct*                               RowStruct;                                                  // 0x0028   (0x0008)  
	unsigned char                                      UnknownData03_6[0x230];                                     // 0x0030   (0x0230)  MISSED
	TSet<FName>                                        IndexPropertySet;                                           // 0x0260   (0x0050)  
	bool                                               bStripFromClientBuilds : 1;                                 // 0x02B0:0 (0x0001)  
	bool                                               bIgnoreExtraFields : 1;                                     // 0x02B0:1 (0x0001)  
	bool                                               bIgnoreMissingFields : 1;                                   // 0x02B0:2 (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x02B1   (0x0007)  MISSED
	FString                                            ImportKeyField;                                             // 0x02B8   (0x0010)  
	unsigned char                                      UnknownData05_7[0x18];                                      // 0x02C8   (0x0018)  MISSED
};

/// Class /Script/Engine.CompositeDataTable
/// Size: 0x0308 (776 bytes) (0x0002E0 - 0x000308) align n/a MaxSize: 0x0308
class UCompositeDataTable : public UDataTable
{ 
public:
	TArray<class UDataTable*>                          ParentTables;                                               // 0x02E0   (0x0010)  
	TArray<class UDataTable*>                          OldParentTables;                                            // 0x02F0   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0300   (0x0008)  MISSED
};

/// Struct /Script/Engine.StatColorMapEntry
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FStatColorMapEntry
{ 
	float                                              In;                                                         // 0x0000   (0x0004)  
	FColor                                             Out;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.StatColorMapping
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FStatColorMapping
{ 
	FString                                            StatName;                                                   // 0x0000   (0x0010)  
	TArray<FStatColorMapEntry>                         ColorMap;                                                   // 0x0010   (0x0010)  
	bool                                               DisableBlend : 1;                                           // 0x0020:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/Engine.GameNameRedirect
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FGameNameRedirect
{ 
	FName                                              OldGameName;                                                // 0x0000   (0x0008)  
	FName                                              NewGameName;                                                // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.ClassRedirect
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align n/a MaxSize: 0x003C
struct FClassRedirect
{ 
	FName                                              ObjectName;                                                 // 0x0000   (0x0008)  
	FName                                              OldClassName;                                               // 0x0008   (0x0008)  
	FName                                              NewClassName;                                               // 0x0010   (0x0008)  
	FName                                              OldSubobjName;                                              // 0x0018   (0x0008)  
	FName                                              NewSubobjName;                                              // 0x0020   (0x0008)  
	FName                                              NewClassClass;                                              // 0x0028   (0x0008)  
	FName                                              NewClassPackage;                                            // 0x0030   (0x0008)  
	bool                                               InstanceOnly;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0039   (0x0003)  MISSED
};

/// Struct /Script/Engine.PluginRedirect
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FPluginRedirect
{ 
	FString                                            OldPluginName;                                              // 0x0000   (0x0010)  
	FString                                            NewPluginName;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.StructRedirect
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FStructRedirect
{ 
	FName                                              OldStructName;                                              // 0x0000   (0x0008)  
	FName                                              NewStructName;                                              // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.DropNoteInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FDropNoteInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	FString                                            comment;                                                    // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.NetDriverDefinition
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FNetDriverDefinition
{ 
	FName                                              DefName;                                                    // 0x0000   (0x0008)  
	FName                                              DriverClassName;                                            // 0x0008   (0x0008)  
	FName                                              DriverClassNameFallback;                                    // 0x0010   (0x0008)  
};

/// Class /Script/Engine.Engine
/// Size: 0x0DF8 (3576 bytes) (0x000028 - 0x000DF8) align n/a MaxSize: 0x0DF8
class UEngine : public UObject
{ 
public:
	unsigned char                                      UnknownData22_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	class UFont*                                       TinyFont;                                                   // 0x0030   (0x0008)  
	FSoftObjectPath                                    TinyFontName;                                               // 0x0038   (0x0018)  
	class UFont*                                       SmallFont;                                                  // 0x0050   (0x0008)  
	FSoftObjectPath                                    SmallFontName;                                              // 0x0058   (0x0018)  
	class UFont*                                       MediumFont;                                                 // 0x0070   (0x0008)  
	FSoftObjectPath                                    MediumFontName;                                             // 0x0078   (0x0018)  
	class UFont*                                       LargeFont;                                                  // 0x0090   (0x0008)  
	FSoftObjectPath                                    LargeFontName;                                              // 0x0098   (0x0018)  
	class UFont*                                       SubtitleFont;                                               // 0x00B0   (0x0008)  
	FSoftObjectPath                                    SubtitleFontName;                                           // 0x00B8   (0x0018)  
	TArray<class UFont*>                               AdditionalFonts;                                            // 0x00D0   (0x0010)  
	TArray<FString>                                    AdditionalFontNames;                                        // 0x00E0   (0x0010)  
	class UClass*                                      ConsoleClass;                                               // 0x00F0   (0x0008)  
	FSoftClassPath                                     ConsoleClassName;                                           // 0x00F8   (0x0018)  
	class UClass*                                      GameViewportClientClass;                                    // 0x0110   (0x0008)  
	FSoftClassPath                                     GameViewportClientClassName;                                // 0x0118   (0x0018)  
	class UClass*                                      LocalPlayerClass;                                           // 0x0130   (0x0008)  
	FSoftClassPath                                     LocalPlayerClassName;                                       // 0x0138   (0x0018)  
	class UClass*                                      WorldSettingsClass;                                         // 0x0150   (0x0008)  
	FSoftClassPath                                     WorldSettingsClassName;                                     // 0x0158   (0x0018)  
	FSoftClassPath                                     NavigationSystemClassName;                                  // 0x0170   (0x0018)  
	class UClass*                                      NavigationSystemClass;                                      // 0x0188   (0x0008)  
	FSoftClassPath                                     NavigationSystemConfigClassName;                            // 0x0190   (0x0018)  
	class UClass*                                      NavigationSystemConfigClass;                                // 0x01A8   (0x0008)  
	FSoftClassPath                                     AvoidanceManagerClassName;                                  // 0x01B0   (0x0018)  
	class UClass*                                      AvoidanceManagerClass;                                      // 0x01C8   (0x0008)  
	FSoftClassPath                                     AIControllerClassName;                                      // 0x01D0   (0x0018)  
	class UClass*                                      PhysicsCollisionHandlerClass;                               // 0x01E8   (0x0008)  
	FSoftClassPath                                     PhysicsCollisionHandlerClassName;                           // 0x01F0   (0x0018)  
	FSoftClassPath                                     GameUserSettingsClassName;                                  // 0x0208   (0x0018)  
	class UClass*                                      GameUserSettingsClass;                                      // 0x0220   (0x0008)  
	class UGameUserSettings*                           GameUserSettings;                                           // 0x0228   (0x0008)  
	class UClass*                                      LevelScriptActorClass;                                      // 0x0230   (0x0008)  
	FSoftClassPath                                     LevelScriptActorClassName;                                  // 0x0238   (0x0018)  
	FSoftClassPath                                     DefaultBlueprintBaseClassName;                              // 0x0250   (0x0018)  
	FSoftClassPath                                     GameSingletonClassName;                                     // 0x0268   (0x0018)  
	class UObject*                                     GameSingleton;                                              // 0x0280   (0x0008)  
	FSoftClassPath                                     AssetManagerClassName;                                      // 0x0288   (0x0018)  
	class UAssetManager*                               AssetManager;                                               // 0x02A0   (0x0008)  
	class UTexture2D*                                  DefaultTexture;                                             // 0x02A8   (0x0008)  
	FSoftObjectPath                                    DefaultTextureName;                                         // 0x02B0   (0x0018)  
	class UTexture*                                    DefaultDiffuseTexture;                                      // 0x02C8   (0x0008)  
	FSoftObjectPath                                    DefaultDiffuseTextureName;                                  // 0x02D0   (0x0018)  
	class UTexture2D*                                  DefaultBSPVertexTexture;                                    // 0x02E8   (0x0008)  
	FSoftObjectPath                                    DefaultBSPVertexTextureName;                                // 0x02F0   (0x0018)  
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                  // 0x0308   (0x0008)  
	FSoftObjectPath                                    HighFrequencyNoiseTextureName;                              // 0x0310   (0x0018)  
	class UTexture2D*                                  DefaultBokehTexture;                                        // 0x0328   (0x0008)  
	FSoftObjectPath                                    DefaultBokehTextureName;                                    // 0x0330   (0x0018)  
	class UTexture2D*                                  DefaultBloomKernelTexture;                                  // 0x0348   (0x0008)  
	FSoftObjectPath                                    DefaultBloomKernelTextureName;                              // 0x0350   (0x0018)  
	class UMaterial*                                   WireframeMaterial;                                          // 0x0368   (0x0008)  
	FString                                            WireframeMaterialName;                                      // 0x0370   (0x0010)  
	class UMaterial*                                   DebugMeshMaterial;                                          // 0x0380   (0x0008)  
	FSoftObjectPath                                    DebugMeshMaterialName;                                      // 0x0388   (0x0018)  
	class UMaterial*                                   EmissiveMeshMaterial;                                       // 0x03A0   (0x0008)  
	FSoftObjectPath                                    EmissiveMeshMaterialName;                                   // 0x03A8   (0x0018)  
	class UMaterial*                                   LevelColorationLitMaterial;                                 // 0x03C0   (0x0008)  
	FString                                            LevelColorationLitMaterialName;                             // 0x03C8   (0x0010)  
	class UMaterial*                                   LevelColorationUnlitMaterial;                               // 0x03D8   (0x0008)  
	FString                                            LevelColorationUnlitMaterialName;                           // 0x03E0   (0x0010)  
	class UMaterial*                                   LightingTexelDensityMaterial;                               // 0x03F0   (0x0008)  
	FString                                            LightingTexelDensityName;                                   // 0x03F8   (0x0010)  
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                           // 0x0408   (0x0008)  
	FString                                            ShadedLevelColorationLitMaterialName;                       // 0x0410   (0x0010)  
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                         // 0x0420   (0x0008)  
	FString                                            ShadedLevelColorationUnlitMaterialName;                     // 0x0428   (0x0010)  
	class UMaterial*                                   RemoveSurfaceMaterial;                                      // 0x0438   (0x0008)  
	FSoftObjectPath                                    RemoveSurfaceMaterialName;                                  // 0x0440   (0x0018)  
	class UMaterial*                                   VertexColorMaterial;                                        // 0x0458   (0x0008)  
	FString                                            VertexColorMaterialName;                                    // 0x0460   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                      // 0x0470   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_ColorOnly;                  // 0x0478   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                   // 0x0488   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_AlphaAsColor;               // 0x0490   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                        // 0x04A0   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_RedOnly;                    // 0x04A8   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                      // 0x04B8   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_GreenOnly;                  // 0x04C0   (0x0010)  
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                       // 0x04D0   (0x0008)  
	FString                                            VertexColorViewModeMaterialName_BlueOnly;                   // 0x04D8   (0x0010)  
	FSoftObjectPath                                    DebugEditorMaterialName;                                    // 0x04E8   (0x0018)  
	class UMaterial*                                   ConstraintLimitMaterial;                                    // 0x0500   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                   // 0x0508   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialXAxis;                               // 0x0510   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                   // 0x0518   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialYAxis;                               // 0x0520   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                   // 0x0528   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZAxis;                               // 0x0530   (0x0008)  
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialPrismatic;                           // 0x0538   (0x0008)  
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                            // 0x0540   (0x0008)  
	FSoftObjectPath                                    InvalidLightmapSettingsMaterialName;                        // 0x0548   (0x0018)  
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                            // 0x0560   (0x0008)  
	FSoftObjectPath                                    PreviewShadowsIndicatorMaterialName;                        // 0x0568   (0x0018)  
	class UMaterial*                                   ArrowMaterial;                                              // 0x0580   (0x0008)  
	class UMaterialInstanceDynamic*                    ArrowMaterialYellow;                                        // 0x0588   (0x0008)  
	FSoftObjectPath                                    ArrowMaterialName;                                          // 0x0590   (0x0018)  
	FLinearColor                                       LightingOnlyBrightness;                                     // 0x05A8   (0x0010)  
	TArray<FLinearColor>                               ShaderComplexityColors;                                     // 0x05B8   (0x0010)  
	TArray<FLinearColor>                               QuadComplexityColors;                                       // 0x05C8   (0x0010)  
	TArray<FLinearColor>                               LightComplexityColors;                                      // 0x05D8   (0x0010)  
	TArray<FLinearColor>                               StationaryLightOverlapColors;                               // 0x05E8   (0x0010)  
	TArray<FLinearColor>                               LODColorationColors;                                        // 0x05F8   (0x0010)  
	TArray<FLinearColor>                               HLODColorationColors;                                       // 0x0608   (0x0010)  
	TArray<FLinearColor>                               StreamingAccuracyColors;                                    // 0x0618   (0x0010)  
	float                                              MaxPixelShaderAdditiveComplexityCount;                      // 0x0628   (0x0004)  
	float                                              MaxES3PixelShaderAdditiveComplexityCount;                   // 0x062C   (0x0004)  
	float                                              MinLightMapDensity;                                         // 0x0630   (0x0004)  
	float                                              IdealLightMapDensity;                                       // 0x0634   (0x0004)  
	float                                              MaxLightMapDensity;                                         // 0x0638   (0x0004)  
	bool                                               bRenderLightMapDensityGrayscale : 1;                        // 0x063C:0 (0x0001)  
	unsigned char                                      UnknownData23_5[0x3];                                       // 0x063D   (0x0003)  MISSED
	float                                              RenderLightMapDensityGrayscaleScale;                        // 0x0640   (0x0004)  
	float                                              RenderLightMapDensityColorScale;                            // 0x0644   (0x0004)  
	FLinearColor                                       LightMapDensityVertexMappedColor;                           // 0x0648   (0x0010)  
	FLinearColor                                       LightMapDensitySelectedColor;                               // 0x0658   (0x0010)  
	TArray<FStatColorMapping>                          StatColorMappings;                                          // 0x0668   (0x0010)  
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                        // 0x0678   (0x0008)  
	FSoftObjectPath                                    DefaultPhysMaterialName;                                    // 0x0680   (0x0018)  
	TArray<FGameNameRedirect>                          ActiveGameNameRedirects;                                    // 0x0698   (0x0010)  
	TArray<FClassRedirect>                             ActiveClassRedirects;                                       // 0x06A8   (0x0010)  
	TArray<FPluginRedirect>                            ActivePluginRedirects;                                      // 0x06B8   (0x0010)  
	TArray<FStructRedirect>                            ActiveStructRedirects;                                      // 0x06C8   (0x0010)  
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                               // 0x06D8   (0x0008)  
	FSoftObjectPath                                    PreIntegratedSkinBRDFTextureName;                           // 0x06E0   (0x0018)  
	class UTexture2D*                                  BlueNoiseTexture;                                           // 0x06F8   (0x0008)  
	FSoftObjectPath                                    BlueNoiseTextureName;                                       // 0x0700   (0x0018)  
	class UTexture2D*                                  MiniFontTexture;                                            // 0x0718   (0x0008)  
	FSoftObjectPath                                    MiniFontTextureName;                                        // 0x0720   (0x0018)  
	class UTexture*                                    WeightMapPlaceholderTexture;                                // 0x0738   (0x0008)  
	FSoftObjectPath                                    WeightMapPlaceholderTextureName;                            // 0x0740   (0x0018)  
	class UTexture2D*                                  LightMapDensityTexture;                                     // 0x0758   (0x0008)  
	FSoftObjectPath                                    LightMapDensityTextureName;                                 // 0x0760   (0x0018)  
	unsigned char                                      UnknownData24_6[0x8];                                       // 0x0778   (0x0008)  MISSED
	class UGameViewportClient*                         GameViewport;                                               // 0x0780   (0x0008)  
	TArray<FString>                                    DeferredCommands;                                           // 0x0788   (0x0010)  
	float                                              NearClipPlane;                                              // 0x0798   (0x0004)  
	bool                                               bSubtitlesEnabled : 1;                                      // 0x079C:0 (0x0001)  
	bool                                               bSubtitlesForcedOff : 1;                                    // 0x079C:1 (0x0001)  
	unsigned char                                      UnknownData25_5[0x3];                                       // 0x079D   (0x0003)  MISSED
	int32_t                                            MaximumLoopIterationCount;                                  // 0x07A0   (0x0004)  
	bool                                               bCanBlueprintsTickByDefault : 1;                            // 0x07A4:0 (0x0001)  
	bool                                               bOptimizeAnimBlueprintMemberVariableAccess : 1;             // 0x07A4:1 (0x0001)  
	bool                                               bAllowMultiThreadedAnimationUpdate : 1;                     // 0x07A4:2 (0x0001)  
	bool                                               bEnableEditorPSysRealtimeLOD : 1;                           // 0x07A4:3 (0x0001)  
	unsigned char                                      UnknownBit26 : 1;                                           // 0x07A4:4 (0x0001)  MISSED
	bool                                               bSmoothFrameRate : 1;                                       // 0x07A4:5 (0x0001)  
	bool                                               bUseFixedFrameRate : 1;                                     // 0x07A4:6 (0x0001)  
	unsigned char                                      UnknownData27_5[0x3];                                       // 0x07A5   (0x0003)  MISSED
	float                                              FixedFrameRate;                                             // 0x07A8   (0x0004)  
	FFloatRange                                        SmoothedFrameRateRange;                                     // 0x07AC   (0x0010)  
	unsigned char                                      UnknownData28_6[0x4];                                       // 0x07BC   (0x0004)  MISSED
	class UEngineCustomTimeStep*                       CustomTimeStep;                                             // 0x07C0   (0x0008)  
	unsigned char                                      UnknownData29_6[0x20];                                      // 0x07C8   (0x0020)  MISSED
	FSoftClassPath                                     CustomTimeStepClassName;                                    // 0x07E8   (0x0018)  
	class UTimecodeProvider*                           TimecodeProvider;                                           // 0x0800   (0x0008)  
	unsigned char                                      UnknownData30_6[0x20];                                      // 0x0808   (0x0020)  MISSED
	FSoftClassPath                                     TimecodeProviderClassName;                                  // 0x0828   (0x0018)  
	bool                                               bGenerateDefaultTimecode;                                   // 0x0840   (0x0001)  
	unsigned char                                      UnknownData31_6[0x3];                                       // 0x0841   (0x0003)  MISSED
	FFrameRate                                         GenerateDefaultTimecodeFrameRate;                           // 0x0844   (0x0008)  
	float                                              GenerateDefaultTimecodeFrameDelay;                          // 0x084C   (0x0004)  
	bool                                               bCheckForMultiplePawnsSpawnedInAFrame : 1;                  // 0x0850:0 (0x0001)  
	unsigned char                                      UnknownData32_5[0x3];                                       // 0x0851   (0x0003)  MISSED
	int32_t                                            NumPawnsAllowedToBeSpawnedInAFrame;                         // 0x0854   (0x0004)  
	bool                                               bShouldGenerateLowQualityLightmaps : 1;                     // 0x0858:0 (0x0001)  
	unsigned char                                      UnknownData33_5[0x3];                                       // 0x0859   (0x0003)  MISSED
	FColor                                             C_WorldBox;                                                 // 0x085C   (0x0004)  
	FColor                                             C_BrushWire;                                                // 0x0860   (0x0004)  
	FColor                                             C_AddWire;                                                  // 0x0864   (0x0004)  
	FColor                                             C_SubtractWire;                                             // 0x0868   (0x0004)  
	FColor                                             C_SemiSolidWire;                                            // 0x086C   (0x0004)  
	FColor                                             C_NonSolidWire;                                             // 0x0870   (0x0004)  
	FColor                                             C_WireBackground;                                           // 0x0874   (0x0004)  
	FColor                                             C_ScaleBoxHi;                                               // 0x0878   (0x0004)  
	FColor                                             C_VolumeCollision;                                          // 0x087C   (0x0004)  
	FColor                                             C_BSPCollision;                                             // 0x0880   (0x0004)  
	FColor                                             C_OrthoBackground;                                          // 0x0884   (0x0004)  
	FColor                                             C_Volume;                                                   // 0x0888   (0x0004)  
	FColor                                             C_BrushShape;                                               // 0x088C   (0x0004)  
	float                                              StreamingDistanceFactor;                                    // 0x0890   (0x0004)  
	unsigned char                                      UnknownData34_6[0x4];                                       // 0x0894   (0x0004)  MISSED
	FDirectoryPath                                     GameScreenshotSaveDirectory;                                // 0x0898   (0x0010)  
	ETransitionType                                    TransitionType;                                             // 0x08A8   (0x0001)  
	unsigned char                                      UnknownData35_6[0x7];                                       // 0x08A9   (0x0007)  MISSED
	FString                                            TransitionDescription;                                      // 0x08B0   (0x0010)  
	FString                                            TransitionGameMode;                                         // 0x08C0   (0x0010)  
	bool                                               bAllowMatureLanguage : 1;                                   // 0x08D0:0 (0x0001)  
	unsigned char                                      UnknownData36_5[0x3];                                       // 0x08D1   (0x0003)  MISSED
	float                                              CameraRotationThreshold;                                    // 0x08D4   (0x0004)  
	float                                              CameraTranslationThreshold;                                 // 0x08D8   (0x0004)  
	float                                              PrimitiveProbablyVisibleTime;                               // 0x08DC   (0x0004)  
	float                                              MaxOcclusionPixelsFraction;                                 // 0x08E0   (0x0004)  
	bool                                               bPauseOnLossOfFocus : 1;                                    // 0x08E4:0 (0x0001)  
	unsigned char                                      UnknownData37_5[0x3];                                       // 0x08E5   (0x0003)  MISSED
	int32_t                                            MaxParticleResize;                                          // 0x08E8   (0x0004)  
	int32_t                                            MaxParticleResizeWarn;                                      // 0x08EC   (0x0004)  
	TArray<FDropNoteInfo>                              PendingDroppedNotes;                                        // 0x08F0   (0x0010)  
	float                                              NetClientTicksPerSecond;                                    // 0x0900   (0x0004)  
	float                                              DisplayGamma;                                               // 0x0904   (0x0004)  
	float                                              MinDesiredFrameRate;                                        // 0x0908   (0x0004)  
	FLinearColor                                       DefaultSelectedMaterialColor;                               // 0x090C   (0x0010)  
	FLinearColor                                       SelectedMaterialColor;                                      // 0x091C   (0x0010)  
	FLinearColor                                       SelectionOutlineColor;                                      // 0x092C   (0x0010)  
	FLinearColor                                       SubduedSelectionOutlineColor;                               // 0x093C   (0x0010)  
	FLinearColor                                       SelectedMaterialColorOverride;                              // 0x094C   (0x0010)  
	bool                                               bIsOverridingSelectedColor;                                 // 0x095C   (0x0001)  
	unsigned char                                      UnknownData38_6[0x3];                                       // 0x095D   (0x0003)  MISSED
	bool                                               bEnableOnScreenDebugMessages : 1;                           // 0x0960:0 (0x0001)  
	bool                                               bEnableOnScreenDebugMessagesDisplay : 1;                    // 0x0960:1 (0x0001)  
	bool                                               bSuppressMapWarnings : 1;                                   // 0x0960:2 (0x0001)  
	bool                                               bDisableAILogging : 1;                                      // 0x0960:3 (0x0001)  
	unsigned char                                      UnknownData39_5[0x3];                                       // 0x0961   (0x0003)  MISSED
	uint32_t                                           bEnableVisualLogRecordingOnStart;                           // 0x0964   (0x0004)  
	int32_t                                            ScreenSaverInhibitorSemaphore;                              // 0x0968   (0x0004)  
	bool                                               bLockReadOnlyLevels : 1;                                    // 0x096C:0 (0x0001)  
	unsigned char                                      UnknownData40_5[0x3];                                       // 0x096D   (0x0003)  MISSED
	FString                                            ParticleEventManagerClassPath;                              // 0x0970   (0x0010)  
	float                                              SelectionHighlightIntensity;                                // 0x0980   (0x0004)  
	float                                              BSPSelectionHighlightIntensity;                             // 0x0984   (0x0004)  
	float                                              SelectionHighlightIntensityBillboards;                      // 0x0988   (0x0004)  
	bool                                               bDisableBlockUnloadByAsyncLoading;                          // 0x098C   (0x0001)  
	unsigned char                                      UnknownData41_6[0x283];                                     // 0x098D   (0x0283)  MISSED
	TArray<FNetDriverDefinition>                       NetDriverDefinitions;                                       // 0x0C10   (0x0010)  
	TArray<FString>                                    ServerActors;                                               // 0x0C20   (0x0010)  
	TArray<FString>                                    RuntimeServerActors;                                        // 0x0C30   (0x0010)  
	float                                              NetErrorLogInterval;                                        // 0x0C40   (0x0004)  
	bool                                               bStartedLoadMapMovie : 1;                                   // 0x0C44:0 (0x0001)  
	unsigned char                                      UnknownData42_5[0x1B];                                      // 0x0C45   (0x001B)  MISSED
	int32_t                                            NextWorldContextHandle;                                     // 0x0C60   (0x0004)  
	unsigned char                                      UnknownData43_7[0x194];                                     // 0x0C64   (0x0194)  MISSED
};

/// Class /Script/Engine.ScriptViewportClient
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UScriptViewportClient : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Struct /Script/Engine.DebugDisplayProperty
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FDebugDisplayProperty
{ 
	class UObject*                                     Obj;                                                        // 0x0000   (0x0008)  
	class UClass*                                      WithinClass;                                                // 0x0008   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0010   (0x0010)  MISSED
};

/// Class /Script/Engine.GameViewportClient
/// Size: 0x0370 (880 bytes) (0x000038 - 0x000370) align n/a MaxSize: 0x0370
class UGameViewportClient : public UScriptViewportClient
{ 
public:
	unsigned char                                      UnknownData05_8[0x8];                                       // 0x0038   (0x0008)  MISSED
	class UConsole*                                    ViewportConsole;                                            // 0x0040   (0x0008)  
	TArray<FDebugDisplayProperty>                      DebugProperties;                                            // 0x0048   (0x0010)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x0058   (0x0010)  MISSED
	int32_t                                            MaxSplitscreenPlayers;                                      // 0x0068   (0x0004)  
	unsigned char                                      UnknownData07_6[0xC];                                       // 0x006C   (0x000C)  MISSED
	class UWorld*                                      World;                                                      // 0x0078   (0x0008)  
	class UGameInstance*                               GameInstance;                                               // 0x0080   (0x0008)  
	unsigned char                                      UnknownData08_6[0x2D8];                                     // 0x0088   (0x02D8)  MISSED
	class UTextureRenderTarget2D*                      CopyRenderTarget;                                           // 0x0360   (0x0008)  
	unsigned char                                      UnknownData09_7[0x8];                                       // 0x0368   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.GameViewportClient.SSSwapControllers
	constexpr static const FunctionPointer<UGameViewportClient, void> SSSwapControllers = { 0x3817110, 0 }; 
	// Function /Script/Engine.GameViewportClient.ShowTitleSafeArea
	constexpr static const FunctionPointer<UGameViewportClient, void> ShowTitleSafeArea = { 0x38170f0, 1 }; 
	// Function /Script/Engine.GameViewportClient.SetConsoleTarget
	constexpr static const FunctionPointer<UGameViewportClient, void, const int32_t> SetConsoleTarget = { 0x47b4a60, 2 }; 
};

/// Class /Script/Engine.Console
/// Size: 0x0130 (304 bytes) (0x000028 - 0x000130) align n/a MaxSize: 0x0130
class UConsole : public UObject
{ 
public:
	unsigned char                                      UnknownData03_8[0x10];                                      // 0x0028   (0x0010)  MISSED
	class ULocalPlayer*                                ConsoleTargetPlayer;                                        // 0x0038   (0x0008)  
	class UTexture2D*                                  DefaultTexture_Black;                                       // 0x0040   (0x0008)  
	class UTexture2D*                                  DefaultTexture_White;                                       // 0x0048   (0x0008)  
	unsigned char                                      UnknownData04_6[0x18];                                      // 0x0050   (0x0018)  MISSED
	TArray<FString>                                    HistoryBuffer;                                              // 0x0068   (0x0010)  
	unsigned char                                      UnknownData05_7[0xB8];                                      // 0x0078   (0x00B8)  MISSED
};

/// Class /Script/Engine.ControlChannel
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class UControlChannel : public UChannel
{ 
public:
	unsigned char                                      UnknownData01_1[0x18];                                      // 0x0070   (0x0018)  MISSED
};

/// Class /Script/Engine.StreamingSettings
/// Size: 0x0070 (112 bytes) (0x000038 - 0x000070) align n/a MaxSize: 0x0070
class UStreamingSettings : public UDeveloperSettings
{ 
public:
	bool                                               AsyncLoadingThreadEnabled : 1;                              // 0x0038:0 (0x0001)  
	bool                                               WarnIfTimeLimitExceeded : 1;                                // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              TimeLimitExceededMultiplier;                                // 0x003C   (0x0004)  
	float                                              TimeLimitExceededMinTime;                                   // 0x0040   (0x0004)  
	int32_t                                            MinBulkDataSizeForAsyncLoading;                             // 0x0044   (0x0004)  
	bool                                               UseBackgroundLevelStreaming : 1;                            // 0x0048:0 (0x0001)  
	bool                                               AsyncLoadingUseFullTimeLimit : 1;                           // 0x0048:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              AsyncLoadingTimeLimit;                                      // 0x004C   (0x0004)  
	float                                              PriorityAsyncLoadingExtraTime;                              // 0x0050   (0x0004)  
	float                                              LevelStreamingActorsUpdateTimeLimit;                        // 0x0054   (0x0004)  
	float                                              PriorityLevelStreamingActorsUpdateExtraTime;                // 0x0058   (0x0004)  
	int32_t                                            LevelStreamingComponentsRegistrationGranularity;            // 0x005C   (0x0004)  
	float                                              LevelStreamingUnregisterComponentsTimeLimit;                // 0x0060   (0x0004)  
	int32_t                                            LevelStreamingComponentsUnregistrationGranularity;          // 0x0064   (0x0004)  
	bool                                               FlushStreamingOnExit : 1;                                   // 0x0068:0 (0x0001)  
	bool                                               EventDrivenLoaderEnabled : 1;                               // 0x0068:1 (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.GarbageCollectionSettings
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align n/a MaxSize: 0x0058
class UGarbageCollectionSettings : public UDeveloperSettings
{ 
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                       // 0x0038   (0x0004)  
	bool                                               FlushStreamingOnGC : 1;                                     // 0x003C:0 (0x0001)  
	bool                                               AllowParallelGC : 1;                                        // 0x003C:1 (0x0001)  
	bool                                               IncrementalBeginDestroyEnabled : 1;                         // 0x003C:2 (0x0001)  
	bool                                               MultithreadedDestructionEnabled : 1;                        // 0x003C:3 (0x0001)  
	bool                                               CreateGCClusters : 1;                                       // 0x003C:4 (0x0001)  
	bool                                               AssetClusteringEnabled : 1;                                 // 0x003C:5 (0x0001)  
	bool                                               ActorClusteringEnabled : 1;                                 // 0x003C:6 (0x0001)  
	bool                                               BlueprintClusteringEnabled : 1;                             // 0x003C:7 (0x0001)  
	bool                                               UseDisregardForGCOnDedicatedServers : 1;                    // 0x003D:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x003E   (0x0002)  MISSED
	int32_t                                            MinGCClusterSize;                                           // 0x0040   (0x0004)  
	int32_t                                            NumRetriesBeforeForcingGC;                                  // 0x0044   (0x0004)  
	int32_t                                            MaxObjectsNotConsideredByGC;                                // 0x0048   (0x0004)  
	int32_t                                            SizeOfPermanentObjectPool;                                  // 0x004C   (0x0004)  
	int32_t                                            MaxObjectsInGame;                                           // 0x0050   (0x0004)  
	int32_t                                            MaxObjectsInEditor;                                         // 0x0054   (0x0004)  
};

/// Struct /Script/Engine.CullDistanceSizePair
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FCullDistanceSizePair
{ 
	float                                              Size;                                                       // 0x0000   (0x0004)  
	float                                              CullDistance;                                               // 0x0004   (0x0004)  
};

/// Class /Script/Engine.CullDistanceVolume
/// Size: 0x0330 (816 bytes) (0x000318 - 0x000330) align n/a MaxSize: 0x0330
class ACullDistanceVolume : public AVolume
{ 
public:
	TArray<FCullDistanceSizePair>                      CullDistances;                                              // 0x0318   (0x0010)  
	bool                                               bEnabled : 1;                                               // 0x0328:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0329   (0x0007)  MISSED
};

/// Class /Script/Engine.CurveBase
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UCurveBase : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.CurveBase.GetValueRange
	constexpr static const FunctionPointer<UCurveBase, void, const float&, const float&> GetValueRange = { 0x4764600, 0 }; 
	// Function /Script/Engine.CurveBase.GetTimeRange
	constexpr static const FunctionPointer<UCurveBase, void, const float&, const float&> GetTimeRange = { 0x4764780, 1 }; 
};

/// Class /Script/Engine.CurveEdPresetCurve
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UCurveEdPresetCurve : public UObject
{ 
public:
};

/// Class /Script/Engine.CurveFloat
/// Size: 0x00B8 (184 bytes) (0x000030 - 0x0000B8) align n/a MaxSize: 0x00B8
class UCurveFloat : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurve;                                                 // 0x0030   (0x0080)  
	bool                                               bIsEventCurve;                                              // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00B1   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.CurveFloat.GetFloatValue
	constexpr static const FunctionPointer<UCurveFloat, float, const float> GetFloatValue = { 0x47650e0, 0 }; 
};

/// Class /Script/Engine.CurveLinearColor
/// Size: 0x0250 (592 bytes) (0x000030 - 0x000250) align n/a MaxSize: 0x0250
class UCurveLinearColor : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurves[4];                                             // 0x0030   (0x0200)  
	float                                              AdjustHue;                                                  // 0x0230   (0x0004)  
	float                                              AdjustSaturation;                                           // 0x0234   (0x0004)  
	float                                              AdjustBrightness;                                           // 0x0238   (0x0004)  
	float                                              AdjustBrightnessCurve;                                      // 0x023C   (0x0004)  
	float                                              AdjustVibrance;                                             // 0x0240   (0x0004)  
	float                                              AdjustMinAlpha;                                             // 0x0244   (0x0004)  
	float                                              AdjustMaxAlpha;                                             // 0x0248   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x024C   (0x0004)  MISSED

	/// Functions
	// Function /Script/Engine.CurveLinearColor.GetLinearColorValue
	constexpr static const FunctionPointer<UCurveLinearColor, FLinearColor, const float> GetLinearColorValue = { 0x47660d0, 0 }; 
	// Function /Script/Engine.CurveLinearColor.GetClampedLinearColorValue
	constexpr static const FunctionPointer<UCurveLinearColor, FLinearColor, const float> GetClampedLinearColorValue = { 0x4765fe0, 1 }; 
};

/// Class /Script/Engine.Texture2D
/// Size: 0x0108 (264 bytes) (0x0000E0 - 0x000108) align n/a MaxSize: 0x0108
class UTexture2D : public UTexture
{ 
public:
	int32_t                                            LevelIndex;                                                 // 0x00E0   (0x0004)  
	int32_t                                            FirstResourceMemMip;                                        // 0x00E4   (0x0004)  
	bool                                               bTemporarilyDisableStreaming : 1;                           // 0x00E8:0 (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x00E9   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x00EA   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x00EB   (0x0001)  MISSED
	FIntPoint                                          ImportedSize;                                               // 0x00EC   (0x0008)  
	unsigned char                                      UnknownData03_7[0x14];                                      // 0x00F4   (0x0014)  MISSED

	/// Functions
	// Function /Script/Engine.Texture2D.HasAlphaChannel
	constexpr static const FunctionPointer<UTexture2D, bool> HasAlphaChannel = { 0x499ea70, 0 }; 
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeY
	constexpr static const FunctionPointer<UTexture2D, int32_t> Blueprint_GetSizeY = { 0x499ea10, 1 }; 
	// Function /Script/Engine.Texture2D.Blueprint_GetSizeX
	constexpr static const FunctionPointer<UTexture2D, int32_t> Blueprint_GetSizeX = { 0x499ea40, 2 }; 
};

/// Class /Script/Engine.CurveLinearColorAtlas
/// Size: 0x0120 (288 bytes) (0x000108 - 0x000120) align n/a MaxSize: 0x0120
class UCurveLinearColorAtlas : public UTexture2D
{ 
public:
	uint32_t                                           TextureSize;                                                // 0x0108   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x010C   (0x0004)  MISSED
	TArray<class UCurveLinearColor*>                   GradientCurves;                                             // 0x0110   (0x0010)  

	/// Functions
	// Function /Script/Engine.CurveLinearColorAtlas.GetCurvePosition
	constexpr static const FunctionPointer<UCurveLinearColorAtlas, bool, const UCurveLinearColor*, const float&> GetCurvePosition = { 0x47665c0, 0 }; 
};

/// Class /Script/Engine.CurveSourceInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UCurveSourceInterface : public UInterface
{ 
public:

	/// Functions
	// Function /Script/Engine.CurveSourceInterface.GetCurveValue
	constexpr static const FunctionPointer<UCurveSourceInterface, float, const FName> GetCurveValue = { 0x4766ca0, 0 }; 
	// Function /Script/Engine.CurveSourceInterface.GetCurves
	constexpr static const FunctionPointer<UCurveSourceInterface, void, const TArray<FNamedCurveValue>&> GetCurves = { 0x4766bb0, 1 }; 
	// Function /Script/Engine.CurveSourceInterface.GetBindingName
	constexpr static const FunctionPointer<UCurveSourceInterface, FName> GetBindingName = { 0x4766d90, 2 }; 
};

/// Class /Script/Engine.CurveVector
/// Size: 0x01B0 (432 bytes) (0x000030 - 0x0001B0) align n/a MaxSize: 0x01B0
class UCurveVector : public UCurveBase
{ 
public:
	FRichCurve                                         FloatCurves[3];                                             // 0x0030   (0x0180)  

	/// Functions
	// Function /Script/Engine.CurveVector.GetVectorValue
	constexpr static const FunctionPointer<UCurveVector, FVector, const float> GetVectorValue = { 0x47679a0, 0 }; 
};

/// Class /Script/Engine.DamageType
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UDamageType : public UObject
{ 
public:
	bool                                               bCausedByWorld : 1;                                         // 0x0028:0 (0x0001)  
	bool                                               bScaleMomentumByMass : 1;                                   // 0x0028:1 (0x0001)  
	bool                                               bRadialDamageVelChange : 1;                                 // 0x0028:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              DamageImpulse;                                              // 0x002C   (0x0004)  
	float                                              DestructibleImpulse;                                        // 0x0030   (0x0004)  
	float                                              DestructibleDamageSpreadScale;                              // 0x0034   (0x0004)  
	float                                              DamageFalloff;                                              // 0x0038   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.PrimaryDataAsset
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UPrimaryDataAsset : public UDataAsset
{ 
public:
};

/// Class /Script/Engine.DataTableFunctionLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableRowNames
	constexpr static const FunctionPointer<UDataTableFunctionLibrary, void, const UDataTable*, const TArray<FName>&> GetDataTableRowNames = { 0x476a070, 0 }; 
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableRowFromName
	constexpr static const FunctionPointer<UDataTableFunctionLibrary, bool, const UDataTable*, const FName, const FTableRowBase&> GetDataTableRowFromName = { 0x4769660, 1 }; 
	// Function /Script/Engine.DataTableFunctionLibrary.GetDataTableColumnAsString
	constexpr static const FunctionPointer<UDataTableFunctionLibrary, TArray<FString>, const UDataTable*, const FName> GetDataTableColumnAsString = { 0x4769cc0, 2 }; 
	// Function /Script/Engine.DataTableFunctionLibrary.EvaluateCurveTableRow
	constexpr static const FunctionPointer<UDataTableFunctionLibrary, void, const UCurveTable*, const FName, const float, const TEnumAsByte<EEvaluateCurveTableResult>&, const float&, const FString> EvaluateCurveTableRow = { 0x476a420, 3 }; 
	// Function /Script/Engine.DataTableFunctionLibrary.DoesDataTableRowExist
	constexpr static const FunctionPointer<UDataTableFunctionLibrary, bool, const UDataTable*, const FName> DoesDataTableRowExist = { 0x476a260, 4 }; 
};

/// Class /Script/Engine.DebugCameraController
/// Size: 0x0770 (1904 bytes) (0x000668 - 0x000770) align n/a MaxSize: 0x0770
class ADebugCameraController : public APlayerController
{ 
public:
	bool                                               bShowSelectedInfo : 1;                                      // 0x0668:0 (0x0001)  
	bool                                               bIsFrozenRendering : 1;                                     // 0x0668:1 (0x0001)  
	bool                                               bIsOrbitingSelectedActor : 1;                               // 0x0668:2 (0x0001)  
	bool                                               bOrbitPivotUseCenter : 1;                                   // 0x0668:3 (0x0001)  
	bool                                               bEnableBufferVisualization : 1;                             // 0x0668:4 (0x0001)  
	bool                                               bEnableBufferVisualizationFullMode : 1;                     // 0x0668:5 (0x0001)  
	bool                                               bIsBufferVisualizationInputSetup : 1;                       // 0x0668:6 (0x0001)  
	bool                                               bLastDisplayEnabled : 1;                                    // 0x0668:7 (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0669   (0x0007)  MISSED
	class UDrawFrustumComponent*                       DrawFrustum;                                                // 0x0670   (0x0008)  
	class AActor*                                      SelectedActor;                                              // 0x0678   (0x0008)  
	class UPrimitiveComponent*                         SelectedComponent;                                          // 0x0680   (0x0008)  
	FHitResult                                         SelectedHitPoint;                                           // 0x0688   (0x008C)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0714   (0x0004)  MISSED
	class APlayerController*                           OriginalControllerRef;                                      // 0x0718   (0x0008)  
	class UPlayer*                                     OriginalPlayer;                                             // 0x0720   (0x0008)  
	float                                              SpeedScale;                                                 // 0x0728   (0x0004)  
	float                                              InitialMaxSpeed;                                            // 0x072C   (0x0004)  
	float                                              InitialAccel;                                               // 0x0730   (0x0004)  
	float                                              InitialDecel;                                               // 0x0734   (0x0004)  
	unsigned char                                      UnknownData05_7[0x38];                                      // 0x0738   (0x0038)  MISSED

	/// Functions
	// Function /Script/Engine.DebugCameraController.ToggleDisplay
	constexpr static const FunctionPointer<ADebugCameraController, void> ToggleDisplay = { 0x476ad20, 0 }; 
	// Function /Script/Engine.DebugCameraController.ShowDebugSelectedInfo
	constexpr static const FunctionPointer<ADebugCameraController, void> ShowDebugSelectedInfo = { 0x476ad50, 1 }; 
	// Function /Script/Engine.DebugCameraController.SetPawnMovementSpeedScale
	constexpr static const FunctionPointer<ADebugCameraController, void, const float> SetPawnMovementSpeedScale = { 0x476ac20, 2 }; 
	// Function /Script/Engine.DebugCameraController.ReceiveOnDeactivate
	constexpr static const FunctionPointer<ADebugCameraController, void, const APlayerController*> ReceiveOnDeactivate = { 0x2bbb090, 3 }; 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActorSelected
	constexpr static const FunctionPointer<ADebugCameraController, void, const AActor*, const FVector&, const FVector&, const FHitResult&> ReceiveOnActorSelected = { 0x2bbb090, 4 }; 
	// Function /Script/Engine.DebugCameraController.ReceiveOnActivate
	constexpr static const FunctionPointer<ADebugCameraController, void, const APlayerController*> ReceiveOnActivate = { 0x2bbb090, 5 }; 
	// Function /Script/Engine.DebugCameraController.GetSelectedActor
	constexpr static const FunctionPointer<ADebugCameraController, AActor*> GetSelectedActor = { 0x476ad00, 6 }; 
};

/// Struct /Script/Engine.DebugCameraControllerSettingsViewModeIndex
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FDebugCameraControllerSettingsViewModeIndex
{ 
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	TEnumAsByte<EViewModeIndex>                        ViewModeIndex;                                              // 0x0008   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/Engine.DebugCameraControllerSettings
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align n/a MaxSize: 0x0048
class UDebugCameraControllerSettings : public UDeveloperSettings
{ 
public:
	TArray<FDebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                            // 0x0038   (0x0010)  
};

/// Class /Script/Engine.DebugCameraHUD
/// Size: 0x03B8 (952 bytes) (0x0003B8 - 0x0003B8) align n/a MaxSize: 0x03B8
class ADebugCameraHUD : public AHUD
{ 
public:
};

/// Class /Script/Engine.DebugDrawService
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UDebugDrawService : public UBlueprintFunctionLibrary
{ 
public:
};

/// Class /Script/Engine.DebugLogService
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UDebugLogService : public UObject
{ 
public:
};

/// Class /Script/Engine.DecalActor
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ADecalActor : public AActor
{ 
public:
	class UDecalComponent*                             Decal;                                                      // 0x02C8   (0x0008)  

	/// Functions
	// Function /Script/Engine.DecalActor.SetDecalMaterial
	constexpr static const FunctionPointer<ADecalActor, void, const UMaterialInterface*> SetDecalMaterial = { 0x476c0a0, 0 }; 
	// Function /Script/Engine.DecalActor.GetDecalMaterial
	constexpr static const FunctionPointer<ADecalActor, UMaterialInterface*> GetDecalMaterial = { 0x476c060, 1 }; 
	// Function /Script/Engine.DecalActor.CreateDynamicMaterialInstance
	constexpr static const FunctionPointer<ADecalActor, UMaterialInstanceDynamic*> CreateDynamicMaterialInstance = { 0x476c030, 2 }; 
};

/// Class /Script/Engine.DecalComponent
/// Size: 0x02C0 (704 bytes) (0x000260 - 0x0002C0) align n/a MaxSize: 0x02C0
class UDecalComponent : public USceneComponent
{ 
public:
	class UMaterialInterface*                          DecalMaterial;                                              // 0x0260   (0x0008)  
	int32_t                                            SortOrder;                                                  // 0x0268   (0x0004)  
	float                                              FadeScreenSize;                                             // 0x026C   (0x0004)  
	float                                              FadeStartDelay;                                             // 0x0270   (0x0004)  
	float                                              FadeDuration;                                               // 0x0274   (0x0004)  
	float                                              FadeInDuration;                                             // 0x0278   (0x0004)  
	float                                              FadeInStartDelay;                                           // 0x027C   (0x0004)  
	bool                                               bDestroyOwnerAfterFade : 1;                                 // 0x0280:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0281   (0x0003)  MISSED
	float                                              ClippingAngle;                                              // 0x0284   (0x0004)  
	TArray<char>                                       DecalChannelMaskArray;                                      // 0x0288   (0x0010)  
	FVector                                            DecalSize;                                                  // 0x0298   (0x000C)  
	unsigned char                                      UnknownData03_7[0x1C];                                      // 0x02A4   (0x001C)  MISSED

	/// Functions
	// Function /Script/Engine.DecalComponent.SetSortOrder
	constexpr static const FunctionPointer<UDecalComponent, void, const int32_t> SetSortOrder = { 0x476e0e0, 0 }; 
	// Function /Script/Engine.DecalComponent.SetFadeScreenSize
	constexpr static const FunctionPointer<UDecalComponent, void, const float> SetFadeScreenSize = { 0x476e1c0, 1 }; 
	// Function /Script/Engine.DecalComponent.SetFadeOut
	constexpr static const FunctionPointer<UDecalComponent, void, const float, const float, const bool> SetFadeOut = { 0x476e7e0, 2 }; 
	// Function /Script/Engine.DecalComponent.SetFadeIn
	constexpr static const FunctionPointer<UDecalComponent, void, const float, const float> SetFadeIn = { 0x476e630, 3 }; 
	// Function /Script/Engine.DecalComponent.SetDecalMaterial
	constexpr static const FunctionPointer<UDecalComponent, void, const UMaterialInterface*> SetDecalMaterial = { 0x476e000, 4 }; 
	// Function /Script/Engine.DecalComponent.RemoveDecalChannelMask
	constexpr static const FunctionPointer<UDecalComponent, void, const int32_t> RemoveDecalChannelMask = { 0x476e3c0, 5 }; 
	// Function /Script/Engine.DecalComponent.GetFadeStartDelay
	constexpr static const FunctionPointer<UDecalComponent, float> GetFadeStartDelay = { 0x476ea30, 6 }; 
	// Function /Script/Engine.DecalComponent.GetFadeInStartDelay
	constexpr static const FunctionPointer<UDecalComponent, float> GetFadeInStartDelay = { 0x476e9f0, 7 }; 
	// Function /Script/Engine.DecalComponent.GetFadeInDuration
	constexpr static const FunctionPointer<UDecalComponent, float> GetFadeInDuration = { 0x476e9d0, 8 }; 
	// Function /Script/Engine.DecalComponent.GetFadeDuration
	constexpr static const FunctionPointer<UDecalComponent, float> GetFadeDuration = { 0x476ea10, 9 }; 
	// Function /Script/Engine.DecalComponent.GetDecalMaterial
	constexpr static const FunctionPointer<UDecalComponent, UMaterialInterface*> GetDecalMaterial = { 0x476dfe0, 10 }; 
	// Function /Script/Engine.DecalComponent.CreateDynamicMaterialInstance
	constexpr static const FunctionPointer<UDecalComponent, UMaterialInstanceDynamic*> CreateDynamicMaterialInstance = { 0x476dfb0, 11 }; 
	// Function /Script/Engine.DecalComponent.ContainsDecalChannelMask
	constexpr static const FunctionPointer<UDecalComponent, bool, const int32_t> ContainsDecalChannelMask = { 0x476e2a0, 12 }; 
	// Function /Script/Engine.DecalComponent.AddDecalChannelMask
	constexpr static const FunctionPointer<UDecalComponent, bool, const int32_t> AddDecalChannelMask = { 0x476e540, 13 }; 
};

/// Class /Script/Engine.DefaultPhysicsVolume
/// Size: 0x0508 (1288 bytes) (0x000508 - 0x000508) align n/a MaxSize: 0x0508
class ADefaultPhysicsVolume : public APhysicsVolume
{ 
public:
};

/// Class /Script/Engine.DemoNetConnection
/// Size: 0x1B60 (7008 bytes) (0x001AF0 - 0x001B60) align n/a MaxSize: 0x1B60
class UDemoNetConnection : public UNetConnection
{ 
public:
	unsigned char                                      UnknownData01_1[0x70];                                      // 0x1AF0   (0x0070)  MISSED
};

/// Struct /Script/Engine.RollbackNetStartupActorInfo
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FRollbackNetStartupActorInfo
{ 
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UObject*                                     Archetype;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData04_6[0x28];                                      // 0x0010   (0x0028)  MISSED
	class ULevel*                                      Level;                                                      // 0x0038   (0x0008)  
	unsigned char                                      UnknownData05_6[0x60];                                      // 0x0040   (0x0060)  MISSED
	TArray<class UObject*>                             ObjReferences;                                              // 0x00A0   (0x0010)  
};

/// Struct /Script/Engine.MulticastRecordOptions
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMulticastRecordOptions
{ 
	FString                                            FuncPathName;                                               // 0x0000   (0x0010)  
	bool                                               bServerSkip;                                                // 0x0010   (0x0001)  
	bool                                               bClientSkip;                                                // 0x0011   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0012   (0x0006)  MISSED
};

/// Class /Script/Engine.DemoNetDriver
/// Size: 0x12C0 (4800 bytes) (0x000748 - 0x0012C0) align n/a MaxSize: 0x12C0
class UDemoNetDriver : public UNetDriver
{ 
public:
	unsigned char                                      UnknownData05_8[0xF8];                                      // 0x0748   (0x00F8)  MISSED
	TMap<FString, FRollbackNetStartupActorInfo>        RollbackNetStartupActors;                                   // 0x0840   (0x0050)  
	unsigned char                                      UnknownData06_6[0x15C];                                     // 0x0890   (0x015C)  MISSED
	float                                              CheckpointSaveMaxMSPerFrame;                                // 0x09EC   (0x0004)  
	unsigned char                                      UnknownData07_6[0x20];                                      // 0x09F0   (0x0020)  MISSED
	TArray<FMulticastRecordOptions>                    MulticastRecordOptions;                                     // 0x0A10   (0x0010)  
	bool                                               bIsLocalReplay;                                             // 0x0A20   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x0A21   (0x0007)  MISSED
	TArray<class APlayerController*>                   SpectatorControllers;                                       // 0x0A28   (0x0010)  
	unsigned char                                      UnknownData09_7[0x888];                                     // 0x0A38   (0x0888)  MISSED
};

/// Class /Script/Engine.PendingNetGame
/// Size: 0x00C0 (192 bytes) (0x000028 - 0x0000C0) align n/a MaxSize: 0x00C0
class UPendingNetGame : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	class UNetDriver*                                  NetDriver;                                                  // 0x0030   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x0038   (0x0008)  
	unsigned char                                      UnknownData03_7[0x80];                                      // 0x0040   (0x0080)  MISSED
};

/// Class /Script/Engine.DemoPendingNetGame
/// Size: 0x00C0 (192 bytes) (0x0000C0 - 0x0000C0) align n/a MaxSize: 0x00C0
class UDemoPendingNetGame : public UPendingNetGame
{ 
public:
};

/// Class /Script/Engine.DestructibleInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UDestructibleInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.TextureLODGroup
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align n/a MaxSize: 0x0078
struct FTextureLODGroup
{ 
	TEnumAsByte<TextureGroup>                          Group;                                                      // 0x0000   (0x0001)  
	unsigned char                                      UnknownData08_6[0xB];                                       // 0x0001   (0x000B)  MISSED
	int32_t                                            LODBias;                                                    // 0x000C   (0x0004)  
	int32_t                                            LODBias_Smaller;                                            // 0x0010   (0x0004)  
	int32_t                                            LODBias_Smallest;                                           // 0x0014   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x0018   (0x0004)  MISSED
	int32_t                                            NumStreamedMips;                                            // 0x001C   (0x0004)  
	TEnumAsByte<TextureMipGenSettings>                 MipGenSettings;                                             // 0x0020   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x0021   (0x0003)  MISSED
	int32_t                                            MinLODSize;                                                 // 0x0024   (0x0004)  
	int32_t                                            MaxLODSize;                                                 // 0x0028   (0x0004)  
	int32_t                                            MaxLODSize_Smaller;                                         // 0x002C   (0x0004)  
	int32_t                                            MaxLODSize_Smallest;                                        // 0x0030   (0x0004)  
	int32_t                                            OptionalLODBias;                                            // 0x0034   (0x0004)  
	int32_t                                            OptionalMaxLODSize;                                         // 0x0038   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FName                                              MinMagFilter;                                               // 0x0040   (0x0008)  
	FName                                              MipFilter;                                                  // 0x0048   (0x0008)  
	ETextureMipLoadOptions                             MipLoadOptions;                                             // 0x0050   (0x0001)  
	bool                                               DuplicateNonOptionalMips;                                   // 0x0051   (0x0001)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x0052   (0x0002)  MISSED
	float                                              Downscale;                                                  // 0x0054   (0x0004)  
	ETextureDownscaleOptions                           DownscaleOptions;                                           // 0x0058   (0x0001)  
	unsigned char                                      UnknownData13_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	int32_t                                            VirtualTextureTileCountBias;                                // 0x005C   (0x0004)  
	int32_t                                            VirtualTextureTileSizeBias;                                 // 0x0060   (0x0004)  
	TEnumAsByte<ETextureLossyCompressionAmount>        LossyCompressionAmount;                                     // 0x0064   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0065   (0x0003)  MISSED
	int32_t                                            MaxAniso;                                                   // 0x0068   (0x0004)  
	int32_t                                            MipBiasKey;                                                 // 0x006C   (0x0004)  
	bool                                               UltraQuality;                                               // 0x0070   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	int32_t                                            MaxMipBias;                                                 // 0x0074   (0x0004)  
};

/// Class /Script/Engine.TextureLODSettings
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UTextureLODSettings : public UObject
{ 
public:
	TArray<FTextureLODGroup>                           TextureLODGroups;                                           // 0x0028   (0x0010)  
};

/// Class /Script/Engine.DeviceProfile
/// Size: 0x00A8 (168 bytes) (0x000038 - 0x0000A8) align n/a MaxSize: 0x00A8
class UDeviceProfile : public UTextureLODSettings
{ 
public:
	FString                                            DeviceType;                                                 // 0x0038   (0x0010)  
	FString                                            BaseProfileName;                                            // 0x0048   (0x0010)  
	class UObject*                                     Parent;                                                     // 0x0058   (0x0008)  
	unsigned char                                      UnknownData02_6[0x28];                                      // 0x0060   (0x0028)  MISSED
	TArray<FString>                                    CVars;                                                      // 0x0088   (0x0010)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0098   (0x0010)  MISSED
};

/// Class /Script/Engine.DeviceProfileFragment
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UDeviceProfileFragment : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Class /Script/Engine.DeviceProfileManager
/// Size: 0x00B0 (176 bytes) (0x000028 - 0x0000B0) align n/a MaxSize: 0x00B0
class UDeviceProfileManager : public UObject
{ 
public:
	TArray<class UObject*>                             Profiles;                                                   // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_7[0x78];                                      // 0x0038   (0x0078)  MISSED
};

/// Class /Script/Engine.DialogueSoundWaveProxy
/// Size: 0x01D0 (464 bytes) (0x0001B8 - 0x0001D0) align n/a MaxSize: 0x01D0
class UDialogueSoundWaveProxy : public USoundBase
{ 
public:
	unsigned char                                      UnknownData01_1[0x18];                                      // 0x01B8   (0x0018)  MISSED
};

/// Class /Script/Engine.DialogueVoice
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UDialogueVoice : public UObject
{ 
public:
	TEnumAsByte<EGrammaticalGender>                    Gender;                                                     // 0x0028   (0x0001)  
	TEnumAsByte<EGrammaticalNumber>                    Plurality;                                                  // 0x0029   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	FGuid                                              LocalizationGUID;                                           // 0x002C   (0x0010)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Struct /Script/Engine.DialogueContext
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FDialogueContext
{ 
	class UDialogueVoice*                              Speaker;                                                    // 0x0000   (0x0008)  
	TArray<class UDialogueVoice*>                      Targets;                                                    // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.DialogueContextMapping
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FDialogueContextMapping
{ 
	FDialogueContext                                   Context;                                                    // 0x0000   (0x0018)  
	class USoundWave*                                  SoundWave;                                                  // 0x0018   (0x0008)  
	FString                                            LocalizationKeyFormat;                                      // 0x0020   (0x0010)  
	class UDialogueSoundWaveProxy*                     Proxy;                                                      // 0x0030   (0x0008)  
};

/// Class /Script/Engine.DialogueWave
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class UDialogueWave : public UObject
{ 
public:
	bool                                               bMature : 1;                                                // 0x0028:0 (0x0001)  
	bool                                               bOverride_SubtitleOverride : 1;                             // 0x0028:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0029   (0x0007)  MISSED
	FString                                            SpokenText;                                                 // 0x0030   (0x0010)  
	FString                                            SubtitleOverride;                                           // 0x0040   (0x0010)  
	TArray<FDialogueContextMapping>                    ContextMappings;                                            // 0x0050   (0x0010)  
	FGuid                                              LocalizationGUID;                                           // 0x0060   (0x0010)  
};

/// Class /Script/Engine.Light
/// Size: 0x02D8 (728 bytes) (0x0002C8 - 0x0002D8) align n/a MaxSize: 0x02D8
class ALight : public AActor
{ 
public:
	class ULightComponent*                             LightComponent;                                             // 0x02C8   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x02D0:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02D1   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.Light.ToggleEnabled
	constexpr static const FunctionPointer<ALight, void> ToggleEnabled = { 0x4879380, 0 }; 
	// Function /Script/Engine.Light.SetLightFunctionScale
	constexpr static const FunctionPointer<ALight, void, const FVector> SetLightFunctionScale = { 0x4878df0, 1 }; 
	// Function /Script/Engine.Light.SetLightFunctionMaterial
	constexpr static const FunctionPointer<ALight, void, const UMaterialInterface*> SetLightFunctionMaterial = { 0x4878f20, 2 }; 
	// Function /Script/Engine.Light.SetLightFunctionFadeDistance
	constexpr static const FunctionPointer<ALight, void, const float> SetLightFunctionFadeDistance = { 0x4878ce0, 3 }; 
	// Function /Script/Engine.Light.SetLightColor
	constexpr static const FunctionPointer<ALight, void, const FLinearColor> SetLightColor = { 0x48790e0, 4 }; 
	// Function /Script/Engine.Light.SetEnabled
	constexpr static const FunctionPointer<ALight, void, const bool> SetEnabled = { 0x4879400, 5 }; 
	// Function /Script/Engine.Light.SetCastShadows
	constexpr static const FunctionPointer<ALight, void, const bool> SetCastShadows = { 0x4878bb0, 6 }; 
	// Function /Script/Engine.Light.SetBrightness
	constexpr static const FunctionPointer<ALight, void, const float> SetBrightness = { 0x4879270, 7 }; 
	// Function /Script/Engine.Light.SetAffectTranslucentLighting
	constexpr static const FunctionPointer<ALight, void, const bool> SetAffectTranslucentLighting = { 0x4878a80, 8 }; 
	// Function /Script/Engine.Light.OnRep_bEnabled
	constexpr static const FunctionPointer<ALight, void> OnRep_bEnabled = { 0x47887a0, 9 }; 
	// Function /Script/Engine.Light.IsEnabled
	constexpr static const FunctionPointer<ALight, bool> IsEnabled = { 0x48793c0, 10 }; 
	// Function /Script/Engine.Light.GetLightColor
	constexpr static const FunctionPointer<ALight, FLinearColor> GetLightColor = { 0x4879030, 11 }; 
	// Function /Script/Engine.Light.GetBrightness
	constexpr static const FunctionPointer<ALight, float> GetBrightness = { 0x4879230, 12 }; 
};

/// Class /Script/Engine.DirectionalLight
/// Size: 0x02D8 (728 bytes) (0x0002D8 - 0x0002D8) align n/a MaxSize: 0x02D8
class ADirectionalLight : public ALight
{ 
public:
};

/// Class /Script/Engine.LightComponentBase
/// Size: 0x02C0 (704 bytes) (0x000260 - 0x0002C0) align n/a MaxSize: 0x02C0
class ULightComponentBase : public USceneComponent
{ 
public:
	FGuid                                              LightGuid;                                                  // 0x0260   (0x0010)  
	float                                              Brightness;                                                 // 0x0270   (0x0004)  
	float                                              Intensity;                                                  // 0x0274   (0x0004)  
	FColor                                             LightColor;                                                 // 0x0278   (0x0004)  
	bool                                               bAffectsWorld : 1;                                          // 0x027C:0 (0x0001)  
	bool                                               bIgnoreShadowOccluded : 1;                                  // 0x027C:1 (0x0001)  
	bool                                               CastShadows : 1;                                            // 0x027C:2 (0x0001)  
	bool                                               CastStaticShadows : 1;                                      // 0x027C:3 (0x0001)  
	bool                                               CastDynamicShadows : 1;                                     // 0x027C:4 (0x0001)  
	bool                                               bAffectTranslucentLighting : 1;                             // 0x027C:5 (0x0001)  
	bool                                               bTransmission : 1;                                          // 0x027C:6 (0x0001)  
	bool                                               bCastVolumetricShadow : 1;                                  // 0x027C:7 (0x0001)  
	bool                                               bCastDeepShadow : 1;                                        // 0x027D:0 (0x0001)  
	bool                                               bCastRaytracedShadow : 1;                                   // 0x027D:1 (0x0001)  
	bool                                               bAffectReflection : 1;                                      // 0x027D:2 (0x0001)  
	bool                                               bAffectGlobalIllumination : 1;                              // 0x027D:3 (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x027E   (0x0002)  MISSED
	float                                              DeepShadowLayerDistribution;                                // 0x0280   (0x0004)  
	float                                              IndirectLightingIntensity;                                  // 0x0284   (0x0004)  
	float                                              VolumetricScatteringIntensity;                              // 0x0288   (0x0004)  
	int32_t                                            SamplesPerPixel;                                            // 0x028C   (0x0004)  
	bool                                               bEnableIntensityControlByViewDir;                           // 0x0290   (0x0001)  
	TEnumAsByte<ESBControlLightByCamType>              IntensityControlByViewDirType;                              // 0x0291   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x0292   (0x0002)  MISSED
	uint32_t                                           IntensityControlByViewDirToLightChannel;                    // 0x0294   (0x0004)  
	class UCurveFloat*                                 ControlIntensityByViewDirCurve;                             // 0x0298   (0x0008)  
	bool                                               bUseViewDirToLightDir;                                      // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x02A1   (0x0003)  MISSED
	FRotator                                           ViewDirToLightDirAdjustRot;                                 // 0x02A4   (0x000C)  
	bool                                               bSBControl;                                                 // 0x02B0   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x02B1   (0x0003)  MISSED
	int32_t                                            SBControlIndex;                                             // 0x02B4   (0x0004)  
	bool                                               bUseMovableForCharacter;                                    // 0x02B8   (0x0001)  
	TEnumAsByte<EDetailMode>                           LightDetailMode;                                            // 0x02B9   (0x0001)  
	unsigned char                                      UnknownData09_7[0x6];                                       // 0x02BA   (0x0006)  MISSED

	/// Functions
	// Function /Script/Engine.LightComponentBase.SetSamplesPerPixel
	constexpr static const FunctionPointer<ULightComponentBase, void, const int32_t> SetSamplesPerPixel = { 0x487ca60, 0 }; 
	// Function /Script/Engine.LightComponentBase.SetCastVolumetricShadow
	constexpr static const FunctionPointer<ULightComponentBase, void, const bool> SetCastVolumetricShadow = { 0x487cff0, 1 }; 
	// Function /Script/Engine.LightComponentBase.SetCastShadows
	constexpr static const FunctionPointer<ULightComponentBase, void, const bool> SetCastShadows = { 0x487d180, 2 }; 
	// Function /Script/Engine.LightComponentBase.SetCastRaytracedShadow
	constexpr static const FunctionPointer<ULightComponentBase, void, const bool> SetCastRaytracedShadow = { 0x487cb70, 3 }; 
	// Function /Script/Engine.LightComponentBase.SetCastDeepShadow
	constexpr static const FunctionPointer<ULightComponentBase, void, const bool> SetCastDeepShadow = { 0x487ced0, 4 }; 
	// Function /Script/Engine.LightComponentBase.SetAffectReflection
	constexpr static const FunctionPointer<ULightComponentBase, void, const bool> SetAffectReflection = { 0x487cdb0, 5 }; 
	// Function /Script/Engine.LightComponentBase.SetAffectGlobalIllumination
	constexpr static const FunctionPointer<ULightComponentBase, void, const bool> SetAffectGlobalIllumination = { 0x487cc90, 6 }; 
	// Function /Script/Engine.LightComponentBase.GetLightColor
	constexpr static const FunctionPointer<ULightComponentBase, FLinearColor> GetLightColor = { 0x487d110, 7 }; 
};

/// Class /Script/Engine.LightComponent
/// Size: 0x03E0 (992 bytes) (0x0002C0 - 0x0003E0) align n/a MaxSize: 0x03D8
class ULightComponent : public ULightComponentBase
{ 
public:
	float                                              Temperature;                                                // 0x02C0   (0x0004)  
	float                                              MaxDrawDistance;                                            // 0x02C4   (0x0004)  
	float                                              MaxDistanceFadeRange;                                       // 0x02C8   (0x0004)  
	float                                              MaxCastShadowDistance;                                      // 0x02CC   (0x0004)  
	float                                              MaxCastShadowDistanceFadeRange;                             // 0x02D0   (0x0004)  
	float                                              CastShadowCullDistance;                                     // 0x02D4   (0x0004)  
	float                                              VolumetricFogGridSizeControlMinDistance;                    // 0x02D8   (0x0004)  
	float                                              VolumetricFogGridSizeControlMaxDistance;                    // 0x02DC   (0x0004)  
	bool                                               bUseTemperature : 1;                                        // 0x02E0:0 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x02E1   (0x0003)  MISSED
	int32_t                                            ShadowMapChannel;                                           // 0x02E4   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x02E8   (0x0004)  MISSED
	float                                              MinRoughness;                                               // 0x02EC   (0x0004)  
	float                                              SpecularScale;                                              // 0x02F0   (0x0004)  
	float                                              ShadowResolutionScale;                                      // 0x02F4   (0x0004)  
	float                                              ShadowBias;                                                 // 0x02F8   (0x0004)  
	float                                              ShadowSlopeBias;                                            // 0x02FC   (0x0004)  
	float                                              ShadowTransitionScale;                                      // 0x0300   (0x0004)  
	float                                              ShadowSharpen;                                              // 0x0304   (0x0004)  
	float                                              ContactShadowLength;                                        // 0x0308   (0x0004)  
	bool                                               ContactShadowLengthInWS : 1;                                // 0x030C:0 (0x0001)  
	bool                                               InverseSquaredFalloff : 1;                                  // 0x030C:1 (0x0001)  
	bool                                               CastTranslucentShadows : 1;                                 // 0x030C:2 (0x0001)  
	bool                                               bCastShadowsFromCinematicObjectsOnly : 1;                   // 0x030C:3 (0x0001)  
	bool                                               bAffectDynamicIndirectLighting : 1;                         // 0x030C:4 (0x0001)  
	bool                                               bForceCachedShadowsForMovablePrimitives : 1;                // 0x030C:5 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x030D   (0x0003)  MISSED
	FLightingChannels                                  LightingChannels;                                           // 0x0310   (0x0001)  
	unsigned char                                      UnknownData12_6[0x7];                                       // 0x0311   (0x0007)  MISSED
	class UMaterialInterface*                          LightFunctionMaterial;                                      // 0x0318   (0x0008)  
	FVector                                            LightFunctionScale;                                         // 0x0320   (0x000C)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x032C   (0x0004)  MISSED
	class UTextureLightProfile*                        IESTexture;                                                 // 0x0330   (0x0008)  
	bool                                               bUseIESBrightness : 1;                                      // 0x0338:0 (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x0339   (0x0003)  MISSED
	float                                              IESBrightnessScale;                                         // 0x033C   (0x0004)  
	float                                              LightFunctionFadeDistance;                                  // 0x0340   (0x0004)  
	float                                              DisabledBrightness;                                         // 0x0344   (0x0004)  
	bool                                               bEnableLightShaftBloom : 1;                                 // 0x0348:0 (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x0349   (0x0003)  MISSED
	float                                              BloomScale;                                                 // 0x034C   (0x0004)  
	float                                              BloomThreshold;                                             // 0x0350   (0x0004)  
	float                                              BloomMaxBrightness;                                         // 0x0354   (0x0004)  
	FColor                                             BloomTint;                                                  // 0x0358   (0x0004)  
	bool                                               bUseRayTracedDistanceFieldShadows;                          // 0x035C   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x035D   (0x0003)  MISSED
	float                                              RayStartOffsetDepthScale;                                   // 0x0360   (0x0004)  
	unsigned char                                      UnknownData17_7[0x74];                                      // 0x0364   (0x0074)  MISSED

	/// Functions
	// Function /Script/Engine.LightComponent.SetVolumetricScatteringIntensity
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetVolumetricScatteringIntensity = { 0x487b820, 0 }; 
	// Function /Script/Engine.LightComponent.SetUseIESBrightness
	constexpr static const FunctionPointer<ULightComponent, void, const bool> SetUseIESBrightness = { 0x487a680, 1 }; 
	// Function /Script/Engine.LightComponent.SetTransmission
	constexpr static const FunctionPointer<ULightComponent, void, const bool> SetTransmission = { 0x487add0, 2 }; 
	// Function /Script/Engine.LightComponent.SetTemperature
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetTemperature = { 0x487b570, 3 }; 
	// Function /Script/Engine.LightComponent.SetSpecularScale
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetSpecularScale = { 0x487a180, 4 }; 
	// Function /Script/Engine.LightComponent.SetShadowTransitionScale
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetShadowTransitionScale = { 0x487a280, 5 }; 
	// Function /Script/Engine.LightComponent.SetShadowSlopeBias
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetShadowSlopeBias = { 0x487a380, 6 }; 
	// Function /Script/Engine.LightComponent.SetShadowBias
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetShadowBias = { 0x487a480, 7 }; 
	// Function /Script/Engine.LightComponent.SetLightPerformance
	constexpr static const FunctionPointer<ULightComponent, void, const float, const float, const float, const float, const float> SetLightPerformance = { 0x4879ab0, 8 }; 
	// Function /Script/Engine.LightComponent.SetLightingChannels
	constexpr static const FunctionPointer<ULightComponent, void, const bool, const bool, const bool> SetLightingChannels = { 0x4879e00, 9 }; 
	// Function /Script/Engine.LightComponent.SetLightFunctionScale
	constexpr static const FunctionPointer<ULightComponent, void, const FVector> SetLightFunctionScale = { 0x487b330, 10 }; 
	// Function /Script/Engine.LightComponent.SetLightFunctionMaterial
	constexpr static const FunctionPointer<ULightComponent, void, const UMaterialInterface*> SetLightFunctionMaterial = { 0x487b460, 11 }; 
	// Function /Script/Engine.LightComponent.SetLightFunctionFadeDistance
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetLightFunctionFadeDistance = { 0x487b230, 12 }; 
	// Function /Script/Engine.LightComponent.SetLightFunctionDisabledBrightness
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetLightFunctionDisabledBrightness = { 0x487b130, 13 }; 
	// Function /Script/Engine.LightComponent.SetLightColor
	constexpr static const FunctionPointer<ULightComponent, void, const FLinearColor, const bool> SetLightColor = { 0x487b640, 14 }; 
	// Function /Script/Engine.LightComponent.SetIntensity
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetIntensity = { 0x487ba20, 15 }; 
	// Function /Script/Engine.LightComponent.SetIndirectLightingIntensity
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetIndirectLightingIntensity = { 0x487b8f0, 16 }; 
	// Function /Script/Engine.LightComponent.SetIESTexture
	constexpr static const FunctionPointer<ULightComponent, void, const UTextureLightProfile*> SetIESTexture = { 0x487a7a0, 17 }; 
	// Function /Script/Engine.LightComponent.SetIESBrightnessScale
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetIESBrightnessScale = { 0x487a580, 18 }; 
	// Function /Script/Engine.LightComponent.SetForceCachedShadowsForMovablePrimitives
	constexpr static const FunctionPointer<ULightComponent, void, const bool> SetForceCachedShadowsForMovablePrimitives = { 0x487a060, 19 }; 
	// Function /Script/Engine.LightComponent.SetEnableLightShaftBloom
	constexpr static const FunctionPointer<ULightComponent, void, const bool> SetEnableLightShaftBloom = { 0x487acb0, 20 }; 
	// Function /Script/Engine.LightComponent.SetContactShadowLength
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetContactShadowLength = { 0x48799b0, 21 }; 
	// Function /Script/Engine.LightComponent.SetBloomTint
	constexpr static const FunctionPointer<ULightComponent, void, const FColor> SetBloomTint = { 0x487a8b0, 22 }; 
	// Function /Script/Engine.LightComponent.SetBloomThreshold
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetBloomThreshold = { 0x487aab0, 23 }; 
	// Function /Script/Engine.LightComponent.SetBloomScale
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetBloomScale = { 0x487abb0, 24 }; 
	// Function /Script/Engine.LightComponent.SetBloomMaxBrightness
	constexpr static const FunctionPointer<ULightComponent, void, const float> SetBloomMaxBrightness = { 0x487a9b0, 25 }; 
	// Function /Script/Engine.LightComponent.SetAffectTranslucentLighting
	constexpr static const FunctionPointer<ULightComponent, void, const bool> SetAffectTranslucentLighting = { 0x487aef0, 26 }; 
	// Function /Script/Engine.LightComponent.SetAffectDynamicIndirectLighting
	constexpr static const FunctionPointer<ULightComponent, void, const bool> SetAffectDynamicIndirectLighting = { 0x487b010, 27 }; 
};

/// Struct /Script/Engine.LightmassLightSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FLightmassLightSettings
{ 
	float                                              IndirectLightingSaturation;                                 // 0x0000   (0x0004)  
	float                                              ShadowExponent;                                             // 0x0004   (0x0004)  
	bool                                               bUseAreaShadowsForStationaryLight;                          // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.LightmassDirectionalLightSettings
/// Size: 0x0010 (16 bytes) (0x00000C - 0x000010) align n/a MaxSize: 0x0010
struct FLightmassDirectionalLightSettings : FLightmassLightSettings
{ 
	float                                              LightSourceAngle;                                           // 0x000C   (0x0004)  
};

/// Class /Script/Engine.DirectionalLightComponent
/// Size: 0x04A0 (1184 bytes) (0x0003D8 - 0x0004A0) align n/a MaxSize: 0x04A0
class UDirectionalLightComponent : public ULightComponent
{ 
public:
	float                                              ShadowCascadeBiasDistribution;                              // 0x03D8   (0x0004)  
	bool                                               bEnableLightShaftOcclusion : 1;                             // 0x03DC:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x03DD   (0x0003)  MISSED
	float                                              OcclusionMaskDarkness;                                      // 0x03E0   (0x0004)  
	float                                              OcclusionDepthRange;                                        // 0x03E4   (0x0004)  
	FVector                                            LightShaftOverrideDirection;                                // 0x03E8   (0x000C)  
	float                                              WholeSceneDynamicShadowRadius;                              // 0x03F4   (0x0004)  
	float                                              DynamicShadowDistanceMovableLight;                          // 0x03F8   (0x0004)  
	float                                              DynamicShadowDistanceStationaryLight;                       // 0x03FC   (0x0004)  
	int32_t                                            DynamicShadowCascades;                                      // 0x0400   (0x0004)  
	float                                              CascadeDistributionExponent;                                // 0x0404   (0x0004)  
	float                                              CascadeTransitionFraction;                                  // 0x0408   (0x0004)  
	float                                              ShadowDistanceFadeoutFraction;                              // 0x040C   (0x0004)  
	bool                                               bUseInsetShadowsForMovableObjects : 1;                      // 0x0410:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0411   (0x0003)  MISSED
	int32_t                                            FarShadowCascadeCount;                                      // 0x0414   (0x0004)  
	float                                              FarShadowDistance;                                          // 0x0418   (0x0004)  
	float                                              DistanceFieldShadowDistance;                                // 0x041C   (0x0004)  
	float                                              LightSourceAngle;                                           // 0x0420   (0x0004)  
	float                                              LightSourceSoftAngle;                                       // 0x0424   (0x0004)  
	float                                              ShadowSourceAngleFactor;                                    // 0x0428   (0x0004)  
	float                                              TraceDistance;                                              // 0x042C   (0x0004)  
	bool                                               bUsedAsAtmosphereSunLight : 1;                              // 0x0430:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x0431   (0x0003)  MISSED
	int32_t                                            AtmosphereSunLightIndex;                                    // 0x0434   (0x0004)  
	FLinearColor                                       AtmosphereSunDiskColorScale;                                // 0x0438   (0x0010)  
	bool                                               bPerPixelAtmosphereTransmittance : 1;                       // 0x0448:0 (0x0001)  
	bool                                               bCastShadowsOnClouds : 1;                                   // 0x0448:1 (0x0001)  
	bool                                               bCastShadowsOnAtmosphere : 1;                               // 0x0448:2 (0x0001)  
	bool                                               bCastCloudShadows : 1;                                      // 0x0448:3 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x0449   (0x0003)  MISSED
	float                                              CloudShadowStrength;                                        // 0x044C   (0x0004)  
	float                                              CloudShadowOnAtmosphereStrength;                            // 0x0450   (0x0004)  
	float                                              CloudShadowOnSurfaceStrength;                               // 0x0454   (0x0004)  
	float                                              CloudShadowDepthBias;                                       // 0x0458   (0x0004)  
	float                                              CloudShadowExtent;                                          // 0x045C   (0x0004)  
	float                                              CloudShadowMapResolutionScale;                              // 0x0460   (0x0004)  
	float                                              CloudShadowRaySampleCountScale;                             // 0x0464   (0x0004)  
	FLinearColor                                       CloudScatteredLuminanceScale;                               // 0x0468   (0x0010)  
	FLightmassDirectionalLightSettings                 LightmassSettings;                                          // 0x0478   (0x0010)  
	bool                                               bCastModulatedShadows : 1;                                  // 0x0488:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0489   (0x0003)  MISSED
	FColor                                             ModulatedShadowColor;                                       // 0x048C   (0x0004)  
	float                                              ShadowAmount;                                               // 0x0490   (0x0004)  
	bool                                               bUseScissorRect;                                            // 0x0494   (0x0001)  
	unsigned char                                      UnknownData11_7[0xB];                                       // 0x0495   (0x000B)  MISSED

	/// Functions
	// Function /Script/Engine.DirectionalLightComponent.SetShadowDistanceFadeoutFraction
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const float> SetShadowDistanceFadeoutFraction = { 0x4772c20, 0 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetShadowAmount
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const float> SetShadowAmount = { 0x47727c0, 1 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetOcclusionMaskDarkness
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const float> SetOcclusionMaskDarkness = { 0x4772a00, 2 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetLightShaftOverrideDirection
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const FVector> SetLightShaftOverrideDirection = { 0x47728c0, 3 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetEnableLightShaftOcclusion
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const bool> SetEnableLightShaftOcclusion = { 0x4772b00, 4 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceStationaryLight
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const float> SetDynamicShadowDistanceStationaryLight = { 0x4772fa0, 5 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowDistanceMovableLight
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const float> SetDynamicShadowDistanceMovableLight = { 0x4773080, 6 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetDynamicShadowCascades
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const int32_t> SetDynamicShadowCascades = { 0x4772ec0, 7 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeTransitionFraction
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const float> SetCascadeTransitionFraction = { 0x4772d00, 8 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetCascadeDistributionExponent
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const float> SetCascadeDistributionExponent = { 0x4772de0, 9 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetAtmosphereSunLightIndex
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const int32_t> SetAtmosphereSunLightIndex = { 0x4772590, 10 }; 
	// Function /Script/Engine.DirectionalLightComponent.SetAtmosphereSunLight
	constexpr static const FunctionPointer<UDirectionalLightComponent, void, const bool> SetAtmosphereSunLight = { 0x47726a0, 11 }; 
};

/// Class /Script/Engine.Distribution
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UDistribution : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.DistributionFloat
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UDistributionFloat : public UDistribution
{ 
public:
	bool                                               bCanBeBaked : 1;                                            // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownBit02 : 1;                                           // 0x0030:1 (0x0001)  MISSED
	bool                                               bBakedDataSuccesfully : 1;                                  // 0x0030:2 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionFloatConstant
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align n/a MaxSize: 0x0040
class UDistributionFloatConstant : public UDistributionFloat
{ 
public:
	float                                              Constant;                                                   // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.DistributionFloatConstantCurve
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align n/a MaxSize: 0x0050
class UDistributionFloatConstantCurve : public UDistributionFloat
{ 
public:
	FInterpCurveFloat                                  ConstantCurve;                                              // 0x0038   (0x0018)  
};

/// Class /Script/Engine.DistributionFloatParameterBase
/// Size: 0x0060 (96 bytes) (0x000040 - 0x000060) align n/a MaxSize: 0x0060
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{ 
public:
	FName                                              ParameterName;                                              // 0x0040   (0x0008)  
	float                                              MinInput;                                                   // 0x0048   (0x0004)  
	float                                              MaxInput;                                                   // 0x004C   (0x0004)  
	float                                              MinOutput;                                                  // 0x0050   (0x0004)  
	float                                              MaxOutput;                                                  // 0x0054   (0x0004)  
	TEnumAsByte<DistributionParamMode>                 ParamMode;                                                  // 0x0058   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionFloatParticleParameter
/// Size: 0x0060 (96 bytes) (0x000060 - 0x000060) align n/a MaxSize: 0x0060
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{ 
public:
};

/// Class /Script/Engine.DistributionFloatUniform
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align n/a MaxSize: 0x0040
class UDistributionFloatUniform : public UDistributionFloat
{ 
public:
	float                                              Min;                                                        // 0x0038   (0x0004)  
	float                                              Max;                                                        // 0x003C   (0x0004)  
};

/// Class /Script/Engine.DistributionFloatUniformCurve
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align n/a MaxSize: 0x0050
class UDistributionFloatUniformCurve : public UDistributionFloat
{ 
public:
	FInterpCurveVector2D                               ConstantCurve;                                              // 0x0038   (0x0018)  
};

/// Class /Script/Engine.DistributionVector
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UDistributionVector : public UDistribution
{ 
public:
	bool                                               bCanBeBaked : 1;                                            // 0x0030:0 (0x0001)  
	bool                                               bIsDirty : 1;                                               // 0x0030:1 (0x0001)  
	bool                                               bBakedDataSuccesfully : 1;                                  // 0x0030:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorConstant
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align n/a MaxSize: 0x0050
class UDistributionVectorConstant : public UDistributionVector
{ 
public:
	FVector                                            Constant;                                                   // 0x0038   (0x000C)  
	bool                                               bLockAxes : 1;                                              // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                                 // 0x0048   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorConstantCurve
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align n/a MaxSize: 0x0058
class UDistributionVectorConstantCurve : public UDistributionVector
{ 
public:
	FInterpCurveVector                                 ConstantCurve;                                              // 0x0038   (0x0018)  
	bool                                               bLockAxes : 1;                                              // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                                 // 0x0054   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.DistributionVectorParameterBase
/// Size: 0x0090 (144 bytes) (0x000050 - 0x000090) align n/a MaxSize: 0x0090
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{ 
public:
	FName                                              ParameterName;                                              // 0x0050   (0x0008)  
	FVector                                            MinInput;                                                   // 0x0058   (0x000C)  
	FVector                                            MaxInput;                                                   // 0x0064   (0x000C)  
	FVector                                            MinOutput;                                                  // 0x0070   (0x000C)  
	FVector                                            MaxOutput;                                                  // 0x007C   (0x000C)  
	TEnumAsByte<DistributionParamMode>                 ParamModes[3];                                              // 0x0088   (0x0003)  
	unsigned char                                      UnknownData01_7[0x5];                                       // 0x008B   (0x0005)  MISSED
};

/// Class /Script/Engine.DistributionVectorParticleParameter
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{ 
public:
};

/// Class /Script/Engine.DistributionVectorUniform
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UDistributionVectorUniform : public UDistributionVector
{ 
public:
	FVector                                            Max;                                                        // 0x0038   (0x000C)  
	FVector                                            Min;                                                        // 0x0044   (0x000C)  
	bool                                               bLockAxes : 1;                                              // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                                 // 0x0054   (0x0001)  
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[3];                                             // 0x0055   (0x0003)  
	bool                                               bUseExtremes : 1;                                           // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.DistributionVectorUniformCurve
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UDistributionVectorUniformCurve : public UDistributionVector
{ 
public:
	FInterpCurveTwoVectors                             ConstantCurve;                                              // 0x0038   (0x0018)  
	bool                                               bLockAxes1 : 1;                                             // 0x0050:0 (0x0001)  
	bool                                               bLockAxes2 : 1;                                             // 0x0050:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0051   (0x0003)  MISSED
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[2];                                              // 0x0054   (0x0002)  
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[3];                                             // 0x0056   (0x0003)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	bool                                               bUseExtremes : 1;                                           // 0x005C:0 (0x0001)  
	unsigned char                                      UnknownData05_7[0x3];                                       // 0x005D   (0x0003)  MISSED
};

/// Class /Script/Engine.DocumentationActor
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ADocumentationActor : public AActor
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x02C8   (0x0008)  MISSED
};

/// Class /Script/Engine.DrawFrustumComponent
/// Size: 0x0560 (1376 bytes) (0x000538 - 0x000560) align n/a MaxSize: 0x0560
class UDrawFrustumComponent : public UPrimitiveComponent
{ 
public:
	FColor                                             FrustumColor;                                               // 0x0538   (0x0004)  
	float                                              FrustumAngle;                                               // 0x053C   (0x0004)  
	float                                              FrustumAspectRatio;                                         // 0x0540   (0x0004)  
	float                                              FrustumStartDist;                                           // 0x0544   (0x0004)  
	float                                              FrustumEndDist;                                             // 0x0548   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x054C   (0x0004)  MISSED
	class UTexture*                                    Texture;                                                    // 0x0550   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0558   (0x0008)  MISSED
};

/// Class /Script/Engine.SphereComponent
/// Size: 0x0560 (1376 bytes) (0x000550 - 0x000560) align n/a MaxSize: 0x0560
class USphereComponent : public UShapeComponent
{ 
public:
	float                                              SphereRadius;                                               // 0x0550   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0554   (0x000C)  MISSED

	/// Functions
	// Function /Script/Engine.SphereComponent.SetSphereRadius
	constexpr static const FunctionPointer<USphereComponent, void, const float, const bool> SetSphereRadius = { 0x497bf10, 0 }; 
	// Function /Script/Engine.SphereComponent.GetUnscaledSphereRadius
	constexpr static const FunctionPointer<USphereComponent, float> GetUnscaledSphereRadius = { 0x474fed0, 1 }; 
	// Function /Script/Engine.SphereComponent.GetShapeScale
	constexpr static const FunctionPointer<USphereComponent, float> GetShapeScale = { 0x474fb40, 2 }; 
	// Function /Script/Engine.SphereComponent.GetScaledSphereRadius
	constexpr static const FunctionPointer<USphereComponent, float> GetScaledSphereRadius = { 0x497bec0, 3 }; 
};

/// Class /Script/Engine.DrawSphereComponent
/// Size: 0x0560 (1376 bytes) (0x000560 - 0x000560) align n/a MaxSize: 0x0560
class UDrawSphereComponent : public USphereComponent
{ 
public:
};

/// Class /Script/Engine.GraphNodeContextMenuContext
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UGraphNodeContextMenuContext : public UObject
{ 
public:
	class UBlueprint*                                  Blueprint;                                                  // 0x0028   (0x0008)  
	class UEdGraph*                                    graph;                                                      // 0x0030   (0x0008)  
	class UEdGraphNode*                                Node;                                                       // 0x0038   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0040   (0x0008)  MISSED
	bool                                               bIsDebugging;                                               // 0x0048   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/Engine.EdGraphNode_Documentation
/// Size: 0x00B8 (184 bytes) (0x000098 - 0x0000B8) align n/a MaxSize: 0x00B8
class UEdGraphNode_Documentation : public UEdGraphNode
{ 
public:
	FString                                            Link;                                                       // 0x0098   (0x0010)  
	FString                                            Excerpt;                                                    // 0x00A8   (0x0010)  
};

/// Struct /Script/Engine.EdGraphTerminalType
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FEdGraphTerminalType
{ 
	FName                                              TerminalCategory;                                           // 0x0000   (0x0008)  
	FName                                              TerminalSubCategory;                                        // 0x0008   (0x0008)  
	TWeakObjectPtr<class UObject*>                     TerminalSubCategoryObject;                                  // 0x0010   (0x0008)  
	bool                                               bTerminalIsConst;                                           // 0x0018   (0x0001)  
	bool                                               bTerminalIsWeakPointer;                                     // 0x0019   (0x0001)  
	bool                                               bTerminalIsUObjectWrapper;                                  // 0x001A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/Engine.EdGraphPinType
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FEdGraphPinType
{ 
	FName                                              PinCategory;                                                // 0x0000   (0x0008)  
	FName                                              PinSubCategory;                                             // 0x0008   (0x0008)  
	TWeakObjectPtr<class UObject*>                     PinSubCategoryObject;                                       // 0x0010   (0x0008)  
	FSimpleMemberReference                             PinSubCategoryMemberReference;                              // 0x0018   (0x0020)  
	FEdGraphTerminalType                               PinValueType;                                               // 0x0038   (0x001C)  
	EPinContainerType                                  ContainerType;                                              // 0x0054   (0x0001)  
	bool                                               bIsArray : 1;                                               // 0x0055:0 (0x0001)  
	bool                                               bIsReference : 1;                                           // 0x0055:1 (0x0001)  
	bool                                               bIsConst : 1;                                               // 0x0055:2 (0x0001)  
	bool                                               bIsWeakPointer : 1;                                         // 0x0055:3 (0x0001)  
	bool                                               bIsUObjectWrapper : 1;                                      // 0x0055:4 (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.EdGraphPin_Deprecated
/// Size: 0x0118 (280 bytes) (0x000028 - 0x000118) align n/a MaxSize: 0x0118
class UEdGraphPin_Deprecated : public UObject
{ 
public:
	FString                                            PinName;                                                    // 0x0028   (0x0010)  
	FString                                            PinToolTip;                                                 // 0x0038   (0x0010)  
	TEnumAsByte<EEdGraphPinDirection>                  Direction;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0049   (0x0007)  MISSED
	FEdGraphPinType                                    PinType;                                                    // 0x0050   (0x0058)  
	FString                                            DefaultValue;                                               // 0x00A8   (0x0010)  
	FString                                            AutogeneratedDefaultValue;                                  // 0x00B8   (0x0010)  
	class UObject*                                     DefaultObject;                                              // 0x00C8   (0x0008)  
	FText                                              DefaultTextValue;                                           // 0x00D0   (0x0018)  
	TArray<class UEdGraphPin_Deprecated*>              LinkedTo;                                                   // 0x00E8   (0x0010)  
	TArray<class UEdGraphPin_Deprecated*>              SubPins;                                                    // 0x00F8   (0x0010)  
	class UEdGraphPin_Deprecated*                      ParentPin;                                                  // 0x0108   (0x0008)  
	class UEdGraphPin_Deprecated*                      ReferencePassThroughConnection;                             // 0x0110   (0x0008)  
};

/// Class /Script/Engine.EdGraphSchema
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UEdGraphSchema : public UObject
{ 
public:
};

/// Class /Script/Engine.Emitter
/// Size: 0x0318 (792 bytes) (0x0002C8 - 0x000318) align n/a MaxSize: 0x0318
class AEmitter : public AActor
{ 
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                    // 0x02C8   (0x0008)  
	bool                                               bDestroyOnSystemFinish : 1;                                 // 0x02D0:0 (0x0001)  
	bool                                               bPostUpdateTickGroup : 1;                                   // 0x02D0:1 (0x0001)  
	bool                                               bCurrentlyActive : 1;                                       // 0x02D0:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x02D1   (0x0007)  MISSED
	FMulticastInlineDelegate                           OnParticleSpawn;                                            // 0x02D8   (0x0010)  
	FMulticastInlineDelegate                           OnParticleBurst;                                            // 0x02E8   (0x0010)  
	FMulticastInlineDelegate                           OnParticleDeath;                                            // 0x02F8   (0x0010)  
	FMulticastInlineDelegate                           OnParticleCollide;                                          // 0x0308   (0x0010)  

	/// Functions
	// Function /Script/Engine.Emitter.ToggleActive
	constexpr static const FunctionPointer<AEmitter, void> ToggleActive = { 0x477bd60, 0 }; 
	// Function /Script/Engine.Emitter.SetVectorParameter
	constexpr static const FunctionPointer<AEmitter, void, const FName, const FVector> SetVectorParameter = { 0x477b910, 1 }; 
	// Function /Script/Engine.Emitter.SetTemplate
	constexpr static const FunctionPointer<AEmitter, void, const UParticleSystem*> SetTemplate = { 0x477bc40, 2 }; 
	// Function /Script/Engine.Emitter.SetMaterialParameter
	constexpr static const FunctionPointer<AEmitter, void, const FName, const UMaterialInterface*> SetMaterialParameter = { 0x477b460, 3 }; 
	// Function /Script/Engine.Emitter.SetFloatParameter
	constexpr static const FunctionPointer<AEmitter, void, const FName, const float> SetFloatParameter = { 0x477bab0, 4 }; 
	// Function /Script/Engine.Emitter.SetColorParameter
	constexpr static const FunctionPointer<AEmitter, void, const FName, const FLinearColor> SetColorParameter = { 0x477b780, 5 }; 
	// Function /Script/Engine.Emitter.SetActorParameter
	constexpr static const FunctionPointer<AEmitter, void, const FName, const AActor*> SetActorParameter = { 0x477b5f0, 6 }; 
	// Function /Script/Engine.Emitter.OnRep_bCurrentlyActive
	constexpr static const FunctionPointer<AEmitter, void> OnRep_bCurrentlyActive = { 0x477be50, 7 }; 
	// Function /Script/Engine.Emitter.OnParticleSystemFinished
	constexpr static const FunctionPointer<AEmitter, void, const UParticleSystemComponent*> OnParticleSystemFinished = { 0x477be70, 8 }; 
	// Function /Script/Engine.Emitter.IsActive
	constexpr static const FunctionPointer<AEmitter, bool> IsActive = { 0x477bd20, 9 }; 
	// Function /Script/Engine.Emitter.Deactivate
	constexpr static const FunctionPointer<AEmitter, void> Deactivate = { 0x477bdc0, 10 }; 
	// Function /Script/Engine.Emitter.Activate
	constexpr static const FunctionPointer<AEmitter, void> Activate = { 0x477be00, 11 }; 
};

/// Class /Script/Engine.EmitterCameraLensEffectBase
/// Size: 0x0380 (896 bytes) (0x000318 - 0x000380) align n/a MaxSize: 0x0380
class AEmitterCameraLensEffectBase : public AEmitter
{ 
public:
	class UParticleSystem*                             PS_CameraEffect;                                            // 0x0318   (0x0008)  
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                           // 0x0320   (0x0008)  
	class APlayerCameraManager*                        BaseCamera;                                                 // 0x0328   (0x0008)  
	FTransform                                         RelativeTransform;                                          // 0x0330   (0x0030)  
	float                                              BaseFOV;                                                    // 0x0360   (0x0004)  
	bool                                               bAllowMultipleInstances : 1;                                // 0x0364:0 (0x0001)  
	bool                                               bResetWhenRetriggered : 1;                                  // 0x0364:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0365   (0x0003)  MISSED
	TArray<class UClass*>                              EmittersToTreatAsSame;                                      // 0x0368   (0x0010)  
	float                                              DistFromCamera;                                             // 0x0378   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x037C   (0x0004)  MISSED
};

/// Class /Script/Engine.ViewModeUtils
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UViewModeUtils : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineBaseTypes
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UEngineBaseTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineHandlerComponentFactory
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UEngineHandlerComponentFactory : public UHandlerComponentFactory
{ 
public:
};

/// Class /Script/Engine.LocalMessage
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class ULocalMessage : public UObject
{ 
public:
};

/// Class /Script/Engine.EngineMessage
/// Size: 0x00A8 (168 bytes) (0x000028 - 0x0000A8) align n/a MaxSize: 0x00A8
class UEngineMessage : public ULocalMessage
{ 
public:
	FString                                            FailedPlaceMessage;                                         // 0x0028   (0x0010)  
	FString                                            MaxedOutMessage;                                            // 0x0038   (0x0010)  
	FString                                            EnteredMessage;                                             // 0x0048   (0x0010)  
	FString                                            LeftMessage;                                                // 0x0058   (0x0010)  
	FString                                            GlobalNameChange;                                           // 0x0068   (0x0010)  
	FString                                            SpecEnteredMessage;                                         // 0x0078   (0x0010)  
	FString                                            NewPlayerMessage;                                           // 0x0088   (0x0010)  
	FString                                            NewSpecMessage;                                             // 0x0098   (0x0010)  
};

/// Class /Script/Engine.EngineTypes
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UEngineTypes : public UObject
{ 
public:
};

/// Class /Script/Engine.ExponentialHeightFog
/// Size: 0x02D8 (728 bytes) (0x0002C8 - 0x0002D8) align n/a MaxSize: 0x02D8
class AExponentialHeightFog : public AInfo
{ 
public:
	class UExponentialHeightFogComponent*              Component;                                                  // 0x02C8   (0x0008)  
	bool                                               bEnabled : 1;                                               // 0x02D0:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02D1   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.ExponentialHeightFog.OnRep_bEnabled
	constexpr static const FunctionPointer<AExponentialHeightFog, void> OnRep_bEnabled = { 0x47887a0, 0 }; 
};

/// Struct /Script/Engine.ExponentialHeightFogData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FExponentialHeightFogData
{ 
	float                                              FogDensity;                                                 // 0x0000   (0x0004)  
	float                                              FogHeightFalloff;                                           // 0x0004   (0x0004)  
	float                                              FogHeightOffset;                                            // 0x0008   (0x0004)  
};

/// Class /Script/Engine.ExponentialHeightFogComponent
/// Size: 0x0300 (768 bytes) (0x000260 - 0x000300) align n/a MaxSize: 0x0300
class UExponentialHeightFogComponent : public USceneComponent
{ 
public:
	float                                              FogDensity;                                                 // 0x0260   (0x0004)  
	float                                              FogHeightFalloff;                                           // 0x0264   (0x0004)  
	FExponentialHeightFogData                          SecondFogData;                                              // 0x0268   (0x000C)  
	FLinearColor                                       FogInscatteringColor;                                       // 0x0274   (0x0010)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0284   (0x0004)  MISSED
	class UTextureCube*                                InscatteringColorCubemap;                                   // 0x0288   (0x0008)  
	float                                              InscatteringColorCubemapAngle;                              // 0x0290   (0x0004)  
	FLinearColor                                       InscatteringTextureTint;                                    // 0x0294   (0x0010)  
	float                                              FullyDirectionalInscatteringColorDistance;                  // 0x02A4   (0x0004)  
	float                                              NonDirectionalInscatteringColorDistance;                    // 0x02A8   (0x0004)  
	float                                              DirectionalInscatteringExponent;                            // 0x02AC   (0x0004)  
	float                                              DirectionalInscatteringStartDistance;                       // 0x02B0   (0x0004)  
	FLinearColor                                       DirectionalInscatteringColor;                               // 0x02B4   (0x0010)  
	float                                              FogMaxOpacity;                                              // 0x02C4   (0x0004)  
	float                                              StartDistance;                                              // 0x02C8   (0x0004)  
	float                                              FogCutoffDistance;                                          // 0x02CC   (0x0004)  
	bool                                               bEnableVolumetricFog;                                       // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x02D1   (0x0003)  MISSED
	float                                              VolumetricFogScatteringDistribution;                        // 0x02D4   (0x0004)  
	FColor                                             VolumetricFogAlbedo;                                        // 0x02D8   (0x0004)  
	FLinearColor                                       VolumetricFogEmissive;                                      // 0x02DC   (0x0010)  
	float                                              VolumetricFogExtinctionScale;                               // 0x02EC   (0x0004)  
	float                                              VolumetricFogDistance;                                      // 0x02F0   (0x0004)  
	float                                              VolumetricFogStaticLightingScatteringIntensity;             // 0x02F4   (0x0004)  
	bool                                               bOverrideLightColorsWithFogInscatteringColors;              // 0x02F8   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x02F9   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogScatteringDistribution
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetVolumetricFogScatteringDistribution = { 0x4788e00, 0 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogExtinctionScale
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetVolumetricFogExtinctionScale = { 0x4788d20, 1 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogEmissive
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const FLinearColor> SetVolumetricFogEmissive = { 0x4788b20, 2 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogDistance
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetVolumetricFogDistance = { 0x4788a40, 3 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFogAlbedo
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const FColor> SetVolumetricFogAlbedo = { 0x4788c40, 4 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetVolumetricFog
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const bool> SetVolumetricFog = { 0x4788ee0, 5 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetStartDistance
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetStartDistance = { 0x47890b0, 6 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetNonDirectionalInscatteringColorDistance
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetNonDirectionalInscatteringColorDistance = { 0x4789670, 7 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringTextureTint
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const FLinearColor> SetInscatteringTextureTint = { 0x4789550, 8 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemapAngle
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetInscatteringColorCubemapAngle = { 0x4789830, 9 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetInscatteringColorCubemap
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const UTextureCube*> SetInscatteringColorCubemap = { 0x4789910, 10 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFullyDirectionalInscatteringColorDistance
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetFullyDirectionalInscatteringColorDistance = { 0x4789750, 11 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogMaxOpacity
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetFogMaxOpacity = { 0x4789190, 12 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogInscatteringColor
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const FLinearColor> SetFogInscatteringColor = { 0x4789a00, 13 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogHeightFalloff
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetFogHeightFalloff = { 0x4724e60, 14 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogDensity
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetFogDensity = { 0x4724f40, 15 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetFogCutoffDistance
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetFogCutoffDistance = { 0x4788fd0, 16 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringStartDistance
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetDirectionalInscatteringStartDistance = { 0x4789390, 17 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringExponent
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const float> SetDirectionalInscatteringExponent = { 0x4789470, 18 }; 
	// Function /Script/Engine.ExponentialHeightFogComponent.SetDirectionalInscatteringColor
	constexpr static const FunctionPointer<UExponentialHeightFogComponent, void, const FLinearColor> SetDirectionalInscatteringColor = { 0x4789270, 19 }; 
};

/// Class /Script/Engine.Exporter
/// Size: 0x0078 (120 bytes) (0x000028 - 0x000078) align n/a MaxSize: 0x0078
class UExporter : public UObject
{ 
public:
	class UClass*                                      SupportedClass;                                             // 0x0028   (0x0008)  
	class UObject*                                     ExportRootScope;                                            // 0x0030   (0x0008)  
	TArray<FString>                                    FormatExtension;                                            // 0x0038   (0x0010)  
	TArray<FString>                                    FormatDescription;                                          // 0x0048   (0x0010)  
	int32_t                                            PreferredFormatIndex;                                       // 0x0058   (0x0004)  
	int32_t                                            TextIndent;                                                 // 0x005C   (0x0004)  
	bool                                               bText : 1;                                                  // 0x0060:0 (0x0001)  
	bool                                               bSelectedOnly : 1;                                          // 0x0060:1 (0x0001)  
	bool                                               bForceFileOperations : 1;                                   // 0x0060:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0061   (0x0007)  MISSED
	class UAssetExportTask*                            ExportTask;                                                 // 0x0068   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0070   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.Exporter.ScriptRunAssetExportTask
	constexpr static const FunctionPointer<UExporter, bool, const UAssetExportTask*> ScriptRunAssetExportTask = { 0x2bbb090, 0 }; 
	// Function /Script/Engine.Exporter.RunAssetExportTasks
	constexpr static const FunctionPointer<UExporter, bool, const TArray<UAssetExportTask*>&> RunAssetExportTasks = { 0x478a240, 1 }; 
	// Function /Script/Engine.Exporter.RunAssetExportTask
	constexpr static const FunctionPointer<UExporter, bool, const UAssetExportTask*> RunAssetExportTask = { 0x267e2e0, 2 }; 
};

/// Struct /Script/Engine.FontCharacter
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FFontCharacter
{ 
	int32_t                                            StartU;                                                     // 0x0000   (0x0004)  
	int32_t                                            StartV;                                                     // 0x0004   (0x0004)  
	int32_t                                            USize;                                                      // 0x0008   (0x0004)  
	int32_t                                            VSize;                                                      // 0x000C   (0x0004)  
	char                                               TextureIndex;                                               // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            VerticalOffset;                                             // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.FontImportOptionsData
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FFontImportOptionsData
{ 
	FString                                            FontName;                                                   // 0x0000   (0x0010)  
	float                                              Height;                                                     // 0x0010   (0x0004)  
	bool                                               bEnableAntialiasing : 1;                                    // 0x0014:0 (0x0001)  
	bool                                               bEnableBold : 1;                                            // 0x0014:1 (0x0001)  
	bool                                               bEnableItalic : 1;                                          // 0x0014:2 (0x0001)  
	bool                                               bEnableUnderline : 1;                                       // 0x0014:3 (0x0001)  
	bool                                               bAlphaOnly : 1;                                             // 0x0014:4 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0015   (0x0003)  MISSED
	TEnumAsByte<EFontImportCharacterSet>               CharacterSet;                                               // 0x0018   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x0019   (0x0007)  MISSED
	FString                                            Chars;                                                      // 0x0020   (0x0010)  
	FString                                            UnicodeRange;                                               // 0x0030   (0x0010)  
	FString                                            CharsFilePath;                                              // 0x0040   (0x0010)  
	FString                                            CharsFileWildcard;                                          // 0x0050   (0x0010)  
	bool                                               bCreatePrintableOnly : 1;                                   // 0x0060:0 (0x0001)  
	bool                                               bIncludeASCIIRange : 1;                                     // 0x0060:1 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	FLinearColor                                       ForegroundColor;                                            // 0x0064   (0x0010)  
	bool                                               bEnableDropShadow : 1;                                      // 0x0074:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0075   (0x0003)  MISSED
	int32_t                                            TexturePageWidth;                                           // 0x0078   (0x0004)  
	int32_t                                            TexturePageMaxHeight;                                       // 0x007C   (0x0004)  
	int32_t                                            XPadding;                                                   // 0x0080   (0x0004)  
	int32_t                                            YPadding;                                                   // 0x0084   (0x0004)  
	int32_t                                            ExtendBoxTop;                                               // 0x0088   (0x0004)  
	int32_t                                            ExtendBoxBottom;                                            // 0x008C   (0x0004)  
	int32_t                                            ExtendBoxRight;                                             // 0x0090   (0x0004)  
	int32_t                                            ExtendBoxLeft;                                              // 0x0094   (0x0004)  
	bool                                               bEnableLegacyMode : 1;                                      // 0x0098:0 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x0099   (0x0003)  MISSED
	int32_t                                            Kerning;                                                    // 0x009C   (0x0004)  
	bool                                               bUseDistanceFieldAlpha : 1;                                 // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	int32_t                                            DistanceFieldScaleFactor;                                   // 0x00A4   (0x0004)  
	float                                              DistanceFieldScanRadiusScale;                               // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData13_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Engine.Font
/// Size: 0x01D0 (464 bytes) (0x000028 - 0x0001D0) align n/a MaxSize: 0x01D0
class UFont : public UObject
{ 
public:
	unsigned char                                      UnknownData04_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	EFontCacheType                                     FontCacheType;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<FFontCharacter>                             Characters;                                                 // 0x0038   (0x0010)  
	TArray<class UTexture2D*>                          Textures;                                                   // 0x0048   (0x0010)  
	int32_t                                            IsRemapped;                                                 // 0x0058   (0x0004)  
	float                                              EmScale;                                                    // 0x005C   (0x0004)  
	float                                              Ascent;                                                     // 0x0060   (0x0004)  
	float                                              Descent;                                                    // 0x0064   (0x0004)  
	float                                              Leading;                                                    // 0x0068   (0x0004)  
	int32_t                                            Kerning;                                                    // 0x006C   (0x0004)  
	FFontImportOptionsData                             ImportOptions;                                              // 0x0070   (0x00B0)  
	int32_t                                            NumCharacters;                                              // 0x0120   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	TArray<int32_t>                                    MaxCharHeight;                                              // 0x0128   (0x0010)  
	float                                              ScalingFactor;                                              // 0x0138   (0x0004)  
	int32_t                                            LegacyFontSize;                                             // 0x013C   (0x0004)  
	FName                                              LegacyFontName;                                             // 0x0140   (0x0008)  
	FCompositeFont                                     CompositeFont;                                              // 0x0148   (0x0038)  
	unsigned char                                      UnknownData07_7[0x50];                                      // 0x0180   (0x0050)  MISSED
};

/// Class /Script/Engine.FontFace
/// Size: 0x0058 (88 bytes) (0x000028 - 0x000058) align n/a MaxSize: 0x0058
class UFontFace : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	FString                                            SourceFilename;                                             // 0x0030   (0x0010)  
	EFontHinting                                       Hinting;                                                    // 0x0040   (0x0001)  
	EFontLoadingPolicy                                 LoadingPolicy;                                              // 0x0041   (0x0001)  
	EFontLayoutMethod                                  LayoutMethod;                                               // 0x0042   (0x0001)  
	unsigned char                                      UnknownData03_7[0x15];                                      // 0x0043   (0x0015)  MISSED
};

/// Class /Script/Engine.FontImportOptions
/// Size: 0x00D8 (216 bytes) (0x000028 - 0x0000D8) align n/a MaxSize: 0x00D8
class UFontImportOptions : public UObject
{ 
public:
	FFontImportOptionsData                             Data;                                                       // 0x0028   (0x00B0)  
};

/// Struct /Script/Engine.ForceFeedbackAttenuationSettings
/// Size: 0x00B0 (176 bytes) (0x0000B0 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FForceFeedbackAttenuationSettings : FBaseAttenuationSettings
{ 
};

/// Class /Script/Engine.ForceFeedbackAttenuation
/// Size: 0x00D8 (216 bytes) (0x000028 - 0x0000D8) align n/a MaxSize: 0x00D8
class UForceFeedbackAttenuation : public UObject
{ 
public:
	FForceFeedbackAttenuationSettings                  Attenuation;                                                // 0x0028   (0x00B0)  
};

/// Class /Script/Engine.ForceFeedbackComponent
/// Size: 0x0360 (864 bytes) (0x000260 - 0x000360) align n/a MaxSize: 0x0360
class UForceFeedbackComponent : public USceneComponent
{ 
public:
	class UForceFeedbackEffect*                        ForceFeedbackEffect;                                        // 0x0260   (0x0008)  
	bool                                               bAutoDestroy : 1;                                           // 0x0268:0 (0x0001)  
	bool                                               bStopWhenOwnerDestroyed : 1;                                // 0x0268:1 (0x0001)  
	bool                                               bLooping : 1;                                               // 0x0268:2 (0x0001)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0268:3 (0x0001)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x0268:4 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0269   (0x0003)  MISSED
	float                                              IntensityMultiplier;                                        // 0x026C   (0x0004)  
	class UForceFeedbackAttenuation*                   AttenuationSettings;                                        // 0x0270   (0x0008)  
	FForceFeedbackAttenuationSettings                  AttenuationOverrides;                                       // 0x0278   (0x00B0)  
	FMulticastInlineDelegate                           OnForceFeedbackFinished;                                    // 0x0328   (0x0010)  
	unsigned char                                      UnknownData03_7[0x28];                                      // 0x0338   (0x0028)  MISSED

	/// Functions
	// Function /Script/Engine.ForceFeedbackComponent.Stop
	constexpr static const FunctionPointer<UForceFeedbackComponent, void> Stop = { 0x478c240, 0 }; 
	// Function /Script/Engine.ForceFeedbackComponent.SetIntensityMultiplier
	constexpr static const FunctionPointer<UForceFeedbackComponent, void, const float> SetIntensityMultiplier = { 0x47471e0, 1 }; 
	// Function /Script/Engine.ForceFeedbackComponent.SetForceFeedbackEffect
	constexpr static const FunctionPointer<UForceFeedbackComponent, void, const UForceFeedbackEffect*> SetForceFeedbackEffect = { 0x478c260, 2 }; 
	// Function /Script/Engine.ForceFeedbackComponent.Play
	constexpr static const FunctionPointer<UForceFeedbackComponent, void, const float> Play = { 0x3e44b50, 3 }; 
	// Function /Script/Engine.ForceFeedbackComponent.BP_GetAttenuationSettingsToApply
	constexpr static const FunctionPointer<UForceFeedbackComponent, bool, const FForceFeedbackAttenuationSettings&> BP_GetAttenuationSettingsToApply = { 0x478bdb0, 4 }; 
	// Function /Script/Engine.ForceFeedbackComponent.AdjustAttenuation
	constexpr static const FunctionPointer<UForceFeedbackComponent, void, const FForceFeedbackAttenuationSettings&> AdjustAttenuation = { 0x478c020, 5 }; 
};

/// Class /Script/Engine.GameEngine
/// Size: 0x0E48 (3656 bytes) (0x000DF8 - 0x000E48) align n/a MaxSize: 0x0E48
class UGameEngine : public UEngine
{ 
public:
	float                                              MaxDeltaTime;                                               // 0x0DF8   (0x0004)  
	float                                              ServerFlushLogInterval;                                     // 0x0DFC   (0x0004)  
	class UGameInstance*                               GameInstance;                                               // 0x0E00   (0x0008)  
	unsigned char                                      UnknownData01_7[0x40];                                      // 0x0E08   (0x0040)  MISSED
};

/// Class /Script/Engine.GameInstanceSubsystem
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UGameInstanceSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.GameNetworkManager
/// Size: 0x0378 (888 bytes) (0x0002C8 - 0x000378) align n/a MaxSize: 0x0378
class AGameNetworkManager : public AInfo
{ 
public:
	float                                              BadPacketLossThreshold;                                     // 0x02C8   (0x0004)  
	float                                              SeverePacketLossThreshold;                                  // 0x02CC   (0x0004)  
	int32_t                                            BadPingThreshold;                                           // 0x02D0   (0x0004)  
	int32_t                                            SeverePingThreshold;                                        // 0x02D4   (0x0004)  
	int32_t                                            AdjustedNetSpeed;                                           // 0x02D8   (0x0004)  
	float                                              LastNetSpeedUpdateTime;                                     // 0x02DC   (0x0004)  
	int32_t                                            TotalNetBandwidth;                                          // 0x02E0   (0x0004)  
	int32_t                                            MinDynamicBandwidth;                                        // 0x02E4   (0x0004)  
	int32_t                                            MaxDynamicBandwidth;                                        // 0x02E8   (0x0004)  
	bool                                               bIsStandbyCheckingEnabled : 1;                              // 0x02EC:0 (0x0001)  
	bool                                               bHasStandbyCheatTriggered : 1;                              // 0x02EC:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x02ED   (0x0003)  MISSED
	float                                              StandbyRxCheatTime;                                         // 0x02F0   (0x0004)  
	float                                              StandbyTxCheatTime;                                         // 0x02F4   (0x0004)  
	float                                              PercentMissingForRxStandby;                                 // 0x02F8   (0x0004)  
	float                                              PercentMissingForTxStandby;                                 // 0x02FC   (0x0004)  
	float                                              PercentForBadPing;                                          // 0x0300   (0x0004)  
	float                                              JoinInProgressStandbyWaitTime;                              // 0x0304   (0x0004)  
	float                                              MoveRepSize;                                                // 0x0308   (0x0004)  
	float                                              MAXPOSITIONERRORSQUARED;                                    // 0x030C   (0x0004)  
	float                                              MAXNEARZEROVELOCITYSQUARED;                                 // 0x0310   (0x0004)  
	float                                              CLIENTADJUSTUPDATECOST;                                     // 0x0314   (0x0004)  
	float                                              MAXCLIENTUPDATEINTERVAL;                                    // 0x0318   (0x0004)  
	float                                              MaxClientForcedUpdateDuration;                              // 0x031C   (0x0004)  
	float                                              ServerForcedUpdateHitchThreshold;                           // 0x0320   (0x0004)  
	float                                              ServerForcedUpdateHitchCooldown;                            // 0x0324   (0x0004)  
	float                                              MaxMoveDeltaTime;                                           // 0x0328   (0x0004)  
	float                                              MaxClientSmoothingDeltaTime;                                // 0x032C   (0x0004)  
	float                                              ClientNetSendMoveDeltaTime;                                 // 0x0330   (0x0004)  
	float                                              ClientNetSendMoveDeltaTimeThrottled;                        // 0x0334   (0x0004)  
	float                                              ClientNetSendMoveDeltaTimeStationary;                       // 0x0338   (0x0004)  
	int32_t                                            ClientNetSendMoveThrottleAtNetSpeed;                        // 0x033C   (0x0004)  
	int32_t                                            ClientNetSendMoveThrottleOverPlayerCount;                   // 0x0340   (0x0004)  
	bool                                               ClientAuthorativePosition;                                  // 0x0344   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0345   (0x0003)  MISSED
	float                                              ClientErrorUpdateRateLimit;                                 // 0x0348   (0x0004)  
	float                                              ClientNetCamUpdateDeltaTime;                                // 0x034C   (0x0004)  
	float                                              ClientNetCamUpdatePositionLimit;                            // 0x0350   (0x0004)  
	bool                                               bMovementTimeDiscrepancyDetection;                          // 0x0354   (0x0001)  
	bool                                               bMovementTimeDiscrepancyResolution;                         // 0x0355   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x0356   (0x0002)  MISSED
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                       // 0x0358   (0x0004)  
	float                                              MovementTimeDiscrepancyMinTimeMargin;                       // 0x035C   (0x0004)  
	float                                              MovementTimeDiscrepancyResolutionRate;                      // 0x0360   (0x0004)  
	float                                              MovementTimeDiscrepancyDriftAllowance;                      // 0x0364   (0x0004)  
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution;   // 0x0368   (0x0001)  
	bool                                               bUseDistanceBasedRelevancy;                                 // 0x0369   (0x0001)  
	unsigned char                                      UnknownData07_7[0xE];                                       // 0x036A   (0x000E)  MISSED
};

/// Class /Script/Engine.GameplayStatics
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UGameplayStatics : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.GameplayStatics.UnloadStreamLevelBySoftObjectPtr
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const TWeakObjectPtr<UWorld*>, const FLatentActionInfo, const bool> UnloadStreamLevelBySoftObjectPtr = { 0x47a9a90, 0 }; 
	// Function /Script/Engine.GameplayStatics.UnloadStreamLevel
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const FName, const FLatentActionInfo, const bool> UnloadStreamLevel = { 0x47a9ea0, 1 }; 
	// Function /Script/Engine.GameplayStatics.SuggestProjectileVelocity_CustomArc
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*, const FVector&, const FVector, const FVector, const float, const float> SuggestProjectileVelocity_CustomArc = { 0x4792e30, 2 }; 
	// Function /Script/Engine.GameplayStatics.SpawnSoundAttached
	constexpr static const FunctionPointer<UGameplayStatics, UAudioComponent*, const USoundBase*, const USceneComponent*, const FName, const FVector, const FRotator, const TEnumAsByte<EAttachLocation>, const bool, const float, const float, const float, const USoundAttenuation*, const USoundConcurrency*, const bool> SpawnSoundAttached = { 0x479e9e0, 3 }; 
	// Function /Script/Engine.GameplayStatics.SpawnSoundAtLocation
	constexpr static const FunctionPointer<UGameplayStatics, UAudioComponent*, const UObject*, const USoundBase*, const FVector, const FRotator, const float, const float, const float, const USoundAttenuation*, const USoundConcurrency*, const bool> SpawnSoundAtLocation = { 0x479f130, 4 }; 
	// Function /Script/Engine.GameplayStatics.SpawnSound2D
	constexpr static const FunctionPointer<UGameplayStatics, UAudioComponent*, const UObject*, const USoundBase*, const float, const float, const float, const USoundConcurrency*, const bool, const bool> SpawnSound2D = { 0x47a2a10, 5 }; 
	// Function /Script/Engine.GameplayStatics.SpawnObject
	constexpr static const FunctionPointer<UGameplayStatics, UObject*, const UClass*, const UObject*> SpawnObject = { 0x47ae4b0, 6 }; 
	// Function /Script/Engine.GameplayStatics.SpawnForceFeedbackAttached
	constexpr static const FunctionPointer<UGameplayStatics, UForceFeedbackComponent*, const UForceFeedbackEffect*, const USceneComponent*, const FName, const FVector, const FRotator, const TEnumAsByte<EAttachLocation>, const bool, const bool, const float, const float, const UForceFeedbackAttenuation*, const bool> SpawnForceFeedbackAttached = { 0x479bb50, 7 }; 
	// Function /Script/Engine.GameplayStatics.SpawnForceFeedbackAtLocation
	constexpr static const FunctionPointer<UGameplayStatics, UForceFeedbackComponent*, const UObject*, const UForceFeedbackEffect*, const FVector, const FRotator, const bool, const float, const float, const UForceFeedbackAttenuation*, const bool> SpawnForceFeedbackAtLocation = { 0x479c4e0, 8 }; 
	// Function /Script/Engine.GameplayStatics.SpawnEmitterAttached
	constexpr static const FunctionPointer<UGameplayStatics, UParticleSystemComponent*, const UParticleSystem*, const USceneComponent*, const FName, const FVector, const FRotator, const FVector, const TEnumAsByte<EAttachLocation>, const bool, const EPSCPoolMethod, const bool> SpawnEmitterAttached = { 0x47a4f90, 9 }; 
	// Function /Script/Engine.GameplayStatics.SpawnEmitterAtLocation
	constexpr static const FunctionPointer<UGameplayStatics, UParticleSystemComponent*, const UObject*, const UParticleSystem*, const FVector, const FRotator, const FVector, const bool, const EPSCPoolMethod, const bool> SpawnEmitterAtLocation = { 0x47a5a80, 10 }; 
	// Function /Script/Engine.GameplayStatics.SpawnDialogueAttached
	constexpr static const FunctionPointer<UGameplayStatics, UAudioComponent*, const UDialogueWave*, const FDialogueContext&, const USceneComponent*, const FName, const FVector, const FRotator, const TEnumAsByte<EAttachLocation>, const bool, const float, const float, const float, const USoundAttenuation*, const bool> SpawnDialogueAttached = { 0x479cca0, 11 }; 
	// Function /Script/Engine.GameplayStatics.SpawnDialogueAtLocation
	constexpr static const FunctionPointer<UGameplayStatics, UAudioComponent*, const UObject*, const UDialogueWave*, const FDialogueContext&, const FVector, const FRotator, const float, const float, const float, const USoundAttenuation*, const bool> SpawnDialogueAtLocation = { 0x479d490, 12 }; 
	// Function /Script/Engine.GameplayStatics.SpawnDialogue2D
	constexpr static const FunctionPointer<UGameplayStatics, UAudioComponent*, const UObject*, const UDialogueWave*, const FDialogueContext&, const float, const float, const float, const bool> SpawnDialogue2D = { 0x479e120, 13 }; 
	// Function /Script/Engine.GameplayStatics.SpawnDecalAttached
	constexpr static const FunctionPointer<UGameplayStatics, UDecalComponent*, const UMaterialInterface*, const FVector, const USceneComponent*, const FName, const FVector, const FRotator, const TEnumAsByte<EAttachLocation>, const float> SpawnDecalAttached = { 0x4797c00, 14 }; 
	// Function /Script/Engine.GameplayStatics.SpawnDecalAtLocation
	constexpr static const FunctionPointer<UGameplayStatics, UDecalComponent*, const UObject*, const UMaterialInterface*, const FVector, const FVector, const FRotator, const float> SpawnDecalAtLocation = { 0x4798680, 15 }; 
	// Function /Script/Engine.GameplayStatics.SetWorldOriginLocation
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const FIntVector> SetWorldOriginLocation = { 0x4792b90, 16 }; 
	// Function /Script/Engine.GameplayStatics.SetViewportMouseCaptureMode
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const EMouseCaptureMode> SetViewportMouseCaptureMode = { 0x47a7ae0, 17 }; 
	// Function /Script/Engine.GameplayStatics.SetSubtitlesEnabled
	constexpr static const FunctionPointer<UGameplayStatics, void, const bool> SetSubtitlesEnabled = { 0x479ba60, 18 }; 
	// Function /Script/Engine.GameplayStatics.SetSoundMixClassOverride
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const USoundMix*, const USoundClass*, const float, const float, const float, const bool> SetSoundMixClassOverride = { 0x479af40, 19 }; 
	// Function /Script/Engine.GameplayStatics.SetSoundClassDistanceScale
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const USoundClass*, const float, const float> SetSoundClassDistanceScale = { 0x47a4380, 20 }; 
	// Function /Script/Engine.GameplayStatics.SetPlayerControllerID
	constexpr static const FunctionPointer<UGameplayStatics, void, const APlayerController*, const int32_t> SetPlayerControllerID = { 0x47aa930, 21 }; 
	// Function /Script/Engine.GameplayStatics.SetMaxAudioChannelsScaled
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const float> SetMaxAudioChannelsScaled = { 0x4798e00, 22 }; 
	// Function /Script/Engine.GameplayStatics.SetGlobalTimeDilation
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const float> SetGlobalTimeDilation = { 0x47a86a0, 23 }; 
	// Function /Script/Engine.GameplayStatics.SetGlobalPitchModulation
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const float, const float> SetGlobalPitchModulation = { 0x47a4680, 24 }; 
	// Function /Script/Engine.GameplayStatics.SetGlobalListenerFocusParameters
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const float, const float, const float, const float, const float, const float, const float, const float> SetGlobalListenerFocusParameters = { 0x47a3c60, 25 }; 
	// Function /Script/Engine.GameplayStatics.SetGamePaused
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*, const bool> SetGamePaused = { 0x47a8530, 26 }; 
	// Function /Script/Engine.GameplayStatics.SetForceDisableSplitscreen
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const bool> SetForceDisableSplitscreen = { 0x47a8260, 27 }; 
	// Function /Script/Engine.GameplayStatics.SetEnableWorldRendering
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const bool> SetEnableWorldRendering = { 0x47a7f40, 28 }; 
	// Function /Script/Engine.GameplayStatics.SetBaseSoundMix
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const USoundMix*> SetBaseSoundMix = { 0x479b840, 29 }; 
	// Function /Script/Engine.GameplayStatics.SaveGameToSlot
	constexpr static const FunctionPointer<UGameplayStatics, bool, const USaveGame*, const FString, const int32_t> SaveGameToSlot = { 0x4795da0, 30 }; 
	// Function /Script/Engine.GameplayStatics.RemovePlayer
	constexpr static const FunctionPointer<UGameplayStatics, void, const APlayerController*, const bool> RemovePlayer = { 0x47aabf0, 31 }; 
	// Function /Script/Engine.GameplayStatics.RebaseZeroOriginOntoLocal
	constexpr static const FunctionPointer<UGameplayStatics, FVector, const UObject*, const FVector> RebaseZeroOriginOntoLocal = { 0x4792720, 32 }; 
	// Function /Script/Engine.GameplayStatics.RebaseLocalOriginOntoZero
	constexpr static const FunctionPointer<UGameplayStatics, FVector, const UObject*, const FVector> RebaseLocalOriginOntoZero = { 0x4792950, 33 }; 
	// Function /Script/Engine.GameplayStatics.PushSoundMixModifier
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const USoundMix*> PushSoundMixModifier = { 0x479a3c0, 34 }; 
	// Function /Script/Engine.GameplayStatics.ProjectWorldToScreen
	constexpr static const FunctionPointer<UGameplayStatics, bool, const APlayerController*, const FVector&, const FVector2D&, const bool> ProjectWorldToScreen = { 0x4791d70, 35 }; 
	// Function /Script/Engine.GameplayStatics.PrimeSound
	constexpr static const FunctionPointer<UGameplayStatics, void, const USoundBase*> PrimeSound = { 0x479b6a0, 36 }; 
	// Function /Script/Engine.GameplayStatics.PopSoundMixModifier
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const USoundMix*> PopSoundMixModifier = { 0x4799a20, 37 }; 
	// Function /Script/Engine.GameplayStatics.PlayWorldCameraShake
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const UClass*, const FVector, const float, const float, const float, const bool> PlayWorldCameraShake = { 0x47a6000, 38 }; 
	// Function /Script/Engine.GameplayStatics.PlaySoundatLocation
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const USoundBase*, const FVector, const FRotator, const float, const float, const float, const USoundAttenuation*, const USoundConcurrency*, const AActor*> PlaySoundatLocation = { 0x479ff00, 39 }; 
	// Function /Script/Engine.GameplayStatics.PlaySound2D
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const USoundBase*, const float, const float, const float, const USoundConcurrency*, const AActor*, const bool> PlaySound2D = { 0x47a35e0, 40 }; 
	// Function /Script/Engine.GameplayStatics.PlayDialogueAtLocation
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const UDialogueWave*, const FDialogueContext&, const FVector, const FRotator, const float, const float, const float, const USoundAttenuation*> PlayDialogueAtLocation = { 0x479dac0, 41 }; 
	// Function /Script/Engine.GameplayStatics.PlayDialogue2D
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const UDialogueWave*, const FDialogueContext&, const float, const float, const float> PlayDialogue2D = { 0x479e5b0, 42 }; 
	// Function /Script/Engine.GameplayStatics.ParseOption
	constexpr static const FunctionPointer<UGameplayStatics, FString, const FString, const FString> ParseOption = { 0x4791570, 43 }; 
	// Function /Script/Engine.GameplayStatics.OpenLevelBySoftObjectPtr
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const TWeakObjectPtr<UWorld*>, const bool, const FString> OpenLevelBySoftObjectPtr = { 0x47a8dd0, 44 }; 
	// Function /Script/Engine.GameplayStatics.OpenLevel
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const FName, const bool, const FString> OpenLevel = { 0x47a9240, 45 }; 
	// Function /Script/Engine.GameplayStatics.MakeHitResult
	constexpr static const FunctionPointer<UGameplayStatics, FHitResult, const bool, const bool, const float, const float, const FVector, const FVector, const FVector, const FVector, const UPhysicalMaterial*, const AActor*, const UPrimitiveComponent*, const FName, const int32_t, const int32_t, const FVector, const FVector> MakeHitResult = { 0x47964f0, 46 }; 
	// Function /Script/Engine.GameplayStatics.LoadStreamLevelBySoftObjectPtr
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const TWeakObjectPtr<UWorld*>, const bool, const bool, const FLatentActionInfo> LoadStreamLevelBySoftObjectPtr = { 0x47aa120, 47 }; 
	// Function /Script/Engine.GameplayStatics.LoadStreamLevel
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const FName, const bool, const bool, const FLatentActionInfo> LoadStreamLevel = { 0x47aa610, 48 }; 
	// Function /Script/Engine.GameplayStatics.LoadGameFromSlot
	constexpr static const FunctionPointer<UGameplayStatics, USaveGame*, const FString, const int32_t> LoadGameFromSlot = { 0x47959e0, 49 }; 
	// Function /Script/Engine.GameplayStatics.IsSplitscreenForceDisabled
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*> IsSplitscreenForceDisabled = { 0x47a8110, 50 }; 
	// Function /Script/Engine.GameplayStatics.IsGamePaused
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*> IsGamePaused = { 0x47a8430, 51 }; 
	// Function /Script/Engine.GameplayStatics.HasOption
	constexpr static const FunctionPointer<UGameplayStatics, bool, const FString, const FString> HasOption = { 0x4791390, 52 }; 
	// Function /Script/Engine.GameplayStatics.HasLaunchOption
	constexpr static const FunctionPointer<UGameplayStatics, bool, const FString> HasLaunchOption = { 0x4790fb0, 53 }; 
	// Function /Script/Engine.GameplayStatics.GrassOverlappingSphereCount
	constexpr static const FunctionPointer<UGameplayStatics, int32_t, const UObject*, const UStaticMesh*, const FVector, const float> GrassOverlappingSphereCount = { 0x4792490, 54 }; 
	// Function /Script/Engine.GameplayStatics.GetWorldOriginLocation
	constexpr static const FunctionPointer<UGameplayStatics, FIntVector, const UObject*> GetWorldOriginLocation = { 0x4792d20, 55 }; 
	// Function /Script/Engine.GameplayStatics.GetWorldDeltaSeconds
	constexpr static const FunctionPointer<UGameplayStatics, float, const UObject*> GetWorldDeltaSeconds = { 0x4795730, 56 }; 
	// Function /Script/Engine.GameplayStatics.GetViewProjectionMatrix
	constexpr static const FunctionPointer<UGameplayStatics, void, const FMinimalViewInfo, const FMatrix&, const FMatrix&, const FMatrix&> GetViewProjectionMatrix = { 0x47919d0, 57 }; 
	// Function /Script/Engine.GameplayStatics.GetViewportMouseCaptureMode
	constexpr static const FunctionPointer<UGameplayStatics, EMouseCaptureMode, const UObject*> GetViewportMouseCaptureMode = { 0x47a7ca0, 58 }; 
	// Function /Script/Engine.GameplayStatics.GetUnpausedTimeSeconds
	constexpr static const FunctionPointer<UGameplayStatics, float, const UObject*> GetUnpausedTimeSeconds = { 0x4795550, 59 }; 
	// Function /Script/Engine.GameplayStatics.GetTimeSeconds
	constexpr static const FunctionPointer<UGameplayStatics, float, const UObject*> GetTimeSeconds = { 0x4795640, 60 }; 
	// Function /Script/Engine.GameplayStatics.GetSurfaceType
	constexpr static const FunctionPointer<UGameplayStatics, TEnumAsByte<EPhysicalSurface>, const FHitResult&> GetSurfaceType = { 0x47963c0, 61 }; 
	// Function /Script/Engine.GameplayStatics.GetStreamingLevel
	constexpr static const FunctionPointer<UGameplayStatics, ULevelStreaming*, const UObject*, const FName> GetStreamingLevel = { 0x47a9600, 62 }; 
	// Function /Script/Engine.GameplayStatics.GetRealTimeSeconds
	constexpr static const FunctionPointer<UGameplayStatics, float, const UObject*> GetRealTimeSeconds = { 0x4795460, 63 }; 
	// Function /Script/Engine.GameplayStatics.GetPlayerPawn
	constexpr static const FunctionPointer<UGameplayStatics, APawn*, const UObject*, const int32_t> GetPlayerPawn = { 0x47ab340, 64 }; 
	// Function /Script/Engine.GameplayStatics.GetPlayerControllerID
	constexpr static const FunctionPointer<UGameplayStatics, int32_t, const APlayerController*> GetPlayerControllerID = { 0x47aaad0, 65 }; 
	// Function /Script/Engine.GameplayStatics.GetPlayerControllerFromID
	constexpr static const FunctionPointer<UGameplayStatics, APlayerController*, const UObject*, const int32_t> GetPlayerControllerFromID = { 0x47ab510, 66 }; 
	// Function /Script/Engine.GameplayStatics.GetPlayerController
	constexpr static const FunctionPointer<UGameplayStatics, APlayerController*, const UObject*, const int32_t> GetPlayerController = { 0x47ab710, 67 }; 
	// Function /Script/Engine.GameplayStatics.GetPlayerCharacter
	constexpr static const FunctionPointer<UGameplayStatics, ACharacter*, const UObject*, const int32_t> GetPlayerCharacter = { 0x47ab150, 68 }; 
	// Function /Script/Engine.GameplayStatics.GetPlayerCameraManager
	constexpr static const FunctionPointer<UGameplayStatics, APlayerCameraManager*, const UObject*, const int32_t> GetPlayerCameraManager = { 0x47aafe0, 69 }; 
	// Function /Script/Engine.GameplayStatics.GetPlatformName
	constexpr static const FunctionPointer<UGameplayStatics, FString> GetPlatformName = { 0x4794f20, 70 }; 
	// Function /Script/Engine.GameplayStatics.GetObjectClass
	constexpr static const FunctionPointer<UGameplayStatics, UClass*, const UObject*> GetObjectClass = { 0x47a8940, 71 }; 
	// Function /Script/Engine.GameplayStatics.GetMaxAudioChannelCount
	constexpr static const FunctionPointer<UGameplayStatics, int32_t, const UObject*> GetMaxAudioChannelCount = { 0x4798ca0, 72 }; 
	// Function /Script/Engine.GameplayStatics.GetKeyValue
	constexpr static const FunctionPointer<UGameplayStatics, void, const FString, const FString&, const FString&> GetKeyValue = { 0x4791790, 73 }; 
	// Function /Script/Engine.GameplayStatics.GetIntOption
	constexpr static const FunctionPointer<UGameplayStatics, int32_t, const FString, const FString, const int32_t> GetIntOption = { 0x4791100, 74 }; 
	// Function /Script/Engine.GameplayStatics.GetGlobalTimeDilation
	constexpr static const FunctionPointer<UGameplayStatics, float, const UObject*> GetGlobalTimeDilation = { 0x47a8830, 75 }; 
	// Function /Script/Engine.GameplayStatics.GetGameState
	constexpr static const FunctionPointer<UGameplayStatics, AGameStateBase*, const UObject*> GetGameState = { 0x47a8a20, 76 }; 
	// Function /Script/Engine.GameplayStatics.GetGameMode
	constexpr static const FunctionPointer<UGameplayStatics, AGameModeBase*, const UObject*> GetGameMode = { 0x47a8b10, 77 }; 
	// Function /Script/Engine.GameplayStatics.GetGameInstance
	constexpr static const FunctionPointer<UGameplayStatics, UGameInstance*, const UObject*> GetGameInstance = { 0x47ab8d0, 78 }; 
	// Function /Script/Engine.GameplayStatics.GetEnableWorldRendering
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*> GetEnableWorldRendering = { 0x47a7df0, 79 }; 
	// Function /Script/Engine.GameplayStatics.GetCurrentReverbEffect
	constexpr static const FunctionPointer<UGameplayStatics, UReverbEffect*, const UObject*> GetCurrentReverbEffect = { 0x47990d0, 80 }; 
	// Function /Script/Engine.GameplayStatics.GetCurrentLevelName
	constexpr static const FunctionPointer<UGameplayStatics, FString, const UObject*, const bool> GetCurrentLevelName = { 0x47a8c00, 81 }; 
	// Function /Script/Engine.GameplayStatics.GetClosestListenerLocation
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*, const FVector&, const float, const bool, const FVector&> GetClosestListenerLocation = { 0x47a4910, 82 }; 
	// Function /Script/Engine.GameplayStatics.GetAudioTimeSeconds
	constexpr static const FunctionPointer<UGameplayStatics, float, const UObject*> GetAudioTimeSeconds = { 0x4795370, 83 }; 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithTagWithinRange
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const FName, const AActor*, const float, const TArray<AActor*>&> GetAllActorsWithTagWithinRange = { 0x47ab9c0, 84 }; 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithTag
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const FName, const TArray<AActor*>&> GetAllActorsWithTag = { 0x47ac3e0, 85 }; 
	// Function /Script/Engine.GameplayStatics.GetAllActorsWithInterface
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const UClass*, const TArray<AActor*>&> GetAllActorsWithInterface = { 0x47ac700, 86 }; 
	// Function /Script/Engine.GameplayStatics.GetAllActorsOfClassWithTag
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const UClass*, const FName, const TArray<AActor*>&> GetAllActorsOfClassWithTag = { 0x47abfd0, 87 }; 
	// Function /Script/Engine.GameplayStatics.GetAllActorsOfClass
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const UClass*, const TArray<AActor*>&> GetAllActorsOfClass = { 0x47acad0, 88 }; 
	// Function /Script/Engine.GameplayStatics.GetActorOfClass
	constexpr static const FunctionPointer<UGameplayStatics, AActor*, const UObject*, const UClass*> GetActorOfClass = { 0x47acdc0, 89 }; 
	// Function /Script/Engine.GameplayStatics.GetActorArrayBounds
	constexpr static const FunctionPointer<UGameplayStatics, void, const TArray<AActor*>&, const bool, const FVector&, const FVector&> GetActorArrayBounds = { 0x47acfe0, 90 }; 
	// Function /Script/Engine.GameplayStatics.GetActorArrayAverageLocation
	constexpr static const FunctionPointer<UGameplayStatics, FVector, const TArray<AActor*>&> GetActorArrayAverageLocation = { 0x47ad4a0, 91 }; 
	// Function /Script/Engine.GameplayStatics.GetAccurateRealTime
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const int32_t&, const float&> GetAccurateRealTime = { 0x47950f0, 92 }; 
	// Function /Script/Engine.GameplayStatics.FlushLevelStreaming
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*> FlushLevelStreaming = { 0x47a9520, 93 }; 
	// Function /Script/Engine.GameplayStatics.FinishSpawningActor
	constexpr static const FunctionPointer<UGameplayStatics, AActor*, const AActor*, const FTransform&> FinishSpawningActor = { 0x47ad5a0, 94 }; 
	// Function /Script/Engine.GameplayStatics.FindCollisionUV
	constexpr static const FunctionPointer<UGameplayStatics, bool, const FHitResult&, const int32_t, const FVector2D&> FindCollisionUV = { 0x47961a0, 95 }; 
	// Function /Script/Engine.GameplayStatics.EnableLiveStreaming
	constexpr static const FunctionPointer<UGameplayStatics, void, const bool> EnableLiveStreaming = { 0x4795000, 96 }; 
	// Function /Script/Engine.GameplayStatics.DoesSaveGameExist
	constexpr static const FunctionPointer<UGameplayStatics, bool, const FString, const int32_t> DoesSaveGameExist = { 0x4795be0, 97 }; 
	// Function /Script/Engine.GameplayStatics.DeprojectScreenToWorld
	constexpr static const FunctionPointer<UGameplayStatics, bool, const APlayerController*, const FVector2D&, const FVector&, const FVector&> DeprojectScreenToWorld = { 0x4792120, 98 }; 
	// Function /Script/Engine.GameplayStatics.DeleteGameInSlot
	constexpr static const FunctionPointer<UGameplayStatics, bool, const FString, const int32_t> DeleteGameInSlot = { 0x4795820, 99 }; 
	// Function /Script/Engine.GameplayStatics.DeactivateReverbEffect
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const FName> DeactivateReverbEffect = { 0x4799230, 100 }; 
	// Function /Script/Engine.GameplayStatics.CreateSound2D
	constexpr static const FunctionPointer<UGameplayStatics, UAudioComponent*, const UObject*, const USoundBase*, const float, const float, const float, const USoundConcurrency*, const bool, const bool> CreateSound2D = { 0x47a1e80, 101 }; 
	// Function /Script/Engine.GameplayStatics.CreateSound
	constexpr static const FunctionPointer<UGameplayStatics, UAudioComponent*, const UObject*, const USoundBase*, const float, const float, const USoundConcurrency*, const bool, const bool, const AActor*, const bool> CreateSound = { 0x47a0af0, 102 }; 
	// Function /Script/Engine.GameplayStatics.CreateSaveGameObject
	constexpr static const FunctionPointer<UGameplayStatics, USaveGame*, const UClass*> CreateSaveGameObject = { 0x4796000, 103 }; 
	// Function /Script/Engine.GameplayStatics.CreatePlayer
	constexpr static const FunctionPointer<UGameplayStatics, APlayerController*, const UObject*, const int32_t, const bool> CreatePlayer = { 0x47aadc0, 104 }; 
	// Function /Script/Engine.GameplayStatics.ClearSoundMixModifiers
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*> ClearSoundMixModifiers = { 0x47998e0, 105 }; 
	// Function /Script/Engine.GameplayStatics.ClearSoundMixClassOverride
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const USoundMix*, const USoundClass*, const float> ClearSoundMixClassOverride = { 0x479aac0, 106 }; 
	// Function /Script/Engine.GameplayStatics.ChangeVisibilityStreamLevel
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const FName, const bool, const bool, const FLatentActionInfo> ChangeVisibilityStreamLevel = { 0x47a9770, 107 }; 
	// Function /Script/Engine.GameplayStatics.CancelAsyncLoading
	constexpr static const FunctionPointer<UGameplayStatics, void> CancelAsyncLoading = { 0x47a9500, 108 }; 
	// Function /Script/Engine.GameplayStatics.BreakHitResult
	constexpr static const FunctionPointer<UGameplayStatics, void, const FHitResult&, const bool&, const bool&, const float&, const float&, const FVector&, const FVector&, const FVector&, const FVector&, const UPhysicalMaterial*&, const AActor*&, const UPrimitiveComponent*&, const FName&, const int32_t&, const int32_t&, const FVector&, const FVector&> BreakHitResult = { 0x47970e0, 109 }; 
	// Function /Script/Engine.GameplayStatics.BlueprintSuggestProjectileVelocity
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*, const FVector&, const FVector, const FVector, const float, const float, const TEnumAsByte<ESuggestProjVelocityTraceOption>, const float, const bool, const bool> BlueprintSuggestProjectileVelocity = { 0x4794900, 110 }; 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByTraceChannel
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*, const FHitResult&, const TArray<FVector>&, const FVector&, const FVector, const FVector, const bool, const float, const TEnumAsByte<ECollisionChannel>, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const float, const float, const float, const float> Blueprint_PredictProjectilePath_ByTraceChannel = { 0x47934f0, 111 }; 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_ByObjectType
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*, const FHitResult&, const TArray<FVector>&, const FVector&, const FVector, const FVector, const bool, const float, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const float, const float, const float, const float> Blueprint_PredictProjectilePath_ByObjectType = { 0x4793ee0, 112 }; 
	// Function /Script/Engine.GameplayStatics.Blueprint_PredictProjectilePath_Advanced
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*, const FPredictProjectilePathParams&, const FPredictProjectilePathResult&> Blueprint_PredictProjectilePath_Advanced = { 0x47931c0, 113 }; 
	// Function /Script/Engine.GameplayStatics.BeginSpawningActorFromClass
	constexpr static const FunctionPointer<UGameplayStatics, AActor*, const UObject*, const UClass*, const FTransform&, const bool, const AActor*> BeginSpawningActorFromClass = { 0x47adbb0, 114 }; 
	// Function /Script/Engine.GameplayStatics.BeginSpawningActorFromBlueprint
	constexpr static const FunctionPointer<UGameplayStatics, AActor*, const UObject*, const UBlueprint*, const FTransform&, const bool> BeginSpawningActorFromBlueprint = { 0x47adff0, 115 }; 
	// Function /Script/Engine.GameplayStatics.BeginDeferredActorSpawnFromClass
	constexpr static const FunctionPointer<UGameplayStatics, AActor*, const UObject*, const UClass*, const FTransform&, const ESpawnActorCollisionHandlingMethod, const AActor*> BeginDeferredActorSpawnFromClass = { 0x47ad770, 116 }; 
	// Function /Script/Engine.GameplayStatics.AreSubtitlesEnabled
	constexpr static const FunctionPointer<UGameplayStatics, bool> AreSubtitlesEnabled = { 0x479ba20, 117 }; 
	// Function /Script/Engine.GameplayStatics.AreAnyListenersWithinRange
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*, const FVector&, const float> AreAnyListenersWithinRange = { 0x47a4cf0, 118 }; 
	// Function /Script/Engine.GameplayStatics.ApplyRadialDamageWithFalloff
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*, const float, const float, const FVector&, const float, const float, const float, const UClass*, const TArray<AActor*>&, const AActor*, const AController*, const TEnumAsByte<ECollisionChannel>> ApplyRadialDamageWithFalloff = { 0x47a6d90, 119 }; 
	// Function /Script/Engine.GameplayStatics.ApplyRadialDamage
	constexpr static const FunctionPointer<UGameplayStatics, bool, const UObject*, const float, const FVector&, const float, const UClass*, const TArray<AActor*>&, const AActor*, const AController*, const bool, const TEnumAsByte<ECollisionChannel>> ApplyRadialDamage = { 0x47a74a0, 120 }; 
	// Function /Script/Engine.GameplayStatics.ApplyPointDamage
	constexpr static const FunctionPointer<UGameplayStatics, float, const AActor*, const float, const FVector&, const FHitResult&, const AController*, const AActor*, const UClass*> ApplyPointDamage = { 0x47a6820, 121 }; 
	// Function /Script/Engine.GameplayStatics.ApplyDamage
	constexpr static const FunctionPointer<UGameplayStatics, float, const AActor*, const float, const AController*, const AActor*, const UClass*> ApplyDamage = { 0x47a6480, 122 }; 
	// Function /Script/Engine.GameplayStatics.AnnounceAccessibleString
	constexpr static const FunctionPointer<UGameplayStatics, void, const FString> AnnounceAccessibleString = { 0x4790e70, 123 }; 
	// Function /Script/Engine.GameplayStatics.ActivateReverbEffect
	constexpr static const FunctionPointer<UGameplayStatics, void, const UObject*, const UReverbEffect*, const FName, const float, const float, const float> ActivateReverbEffect = { 0x4799420, 124 }; 
};

/// Class /Script/Engine.GameSession
/// Size: 0x02E0 (736 bytes) (0x0002C8 - 0x0002E0) align n/a MaxSize: 0x02E0
class AGameSession : public AInfo
{ 
public:
	int32_t                                            MaxSpectators;                                              // 0x02C8   (0x0004)  
	int32_t                                            MaxPlayers;                                                 // 0x02CC   (0x0004)  
	int32_t                                            MaxPartySize;                                               // 0x02D0   (0x0004)  
	char                                               MaxSplitscreensPerConnection;                               // 0x02D4   (0x0001)  
	bool                                               bRequiresPushToTalk;                                        // 0x02D5   (0x0001)  
	unsigned char                                      UnknownData01_6[0x2];                                       // 0x02D6   (0x0002)  MISSED
	FName                                              SessionName;                                                // 0x02D8   (0x0008)  
};

/// Class /Script/Engine.SpotLight
/// Size: 0x02E0 (736 bytes) (0x0002D8 - 0x0002E0) align n/a MaxSize: 0x02E0
class ASpotLight : public ALight
{ 
public:
	class USpotLightComponent*                         SpotLightComponent;                                         // 0x02D8   (0x0008)  

	/// Functions
	// Function /Script/Engine.SpotLight.SetOuterConeAngle
	constexpr static const FunctionPointer<ASpotLight, void, const float> SetOuterConeAngle = { 0x49900a0, 0 }; 
	// Function /Script/Engine.SpotLight.SetInnerConeAngle
	constexpr static const FunctionPointer<ASpotLight, void, const float> SetInnerConeAngle = { 0x49901b0, 1 }; 
};

/// Class /Script/Engine.GeneratedMeshAreaLight
/// Size: 0x02E0 (736 bytes) (0x0002E0 - 0x0002E0) align n/a MaxSize: 0x02E0
class AGeneratedMeshAreaLight : public ASpotLight
{ 
public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Base
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UHapticFeedbackEffect_Base : public UObject
{ 
public:
};

/// Class /Script/Engine.HapticFeedbackEffect_Buffer
/// Size: 0x0068 (104 bytes) (0x000028 - 0x000068) align n/a MaxSize: 0x0068
class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
{ 
public:
	TArray<char>                                       Amplitudes;                                                 // 0x0028   (0x0010)  
	int32_t                                            SampleRate;                                                 // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_7[0x2C];                                      // 0x003C   (0x002C)  MISSED
};

/// Struct /Script/Engine.HapticFeedbackDetails_Curve
/// Size: 0x0110 (272 bytes) (0x000000 - 0x000110) align n/a MaxSize: 0x0110
struct FHapticFeedbackDetails_Curve
{ 
	FRuntimeFloatCurve                                 Frequency;                                                  // 0x0000   (0x0088)  
	FRuntimeFloatCurve                                 Amplitude;                                                  // 0x0088   (0x0088)  
};

/// Class /Script/Engine.HapticFeedbackEffect_Curve
/// Size: 0x0138 (312 bytes) (0x000028 - 0x000138) align n/a MaxSize: 0x0138
class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
{ 
public:
	FHapticFeedbackDetails_Curve                       HapticDetails;                                              // 0x0028   (0x0110)  
};

/// Class /Script/Engine.HapticFeedbackEffect_SoundWave
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000060) align n/a MaxSize: 0x0060
class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
{ 
public:
	class USoundWave*                                  SoundWave;                                                  // 0x0028   (0x0008)  
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x0030   (0x0030)  MISSED
};

/// Class /Script/Engine.HealthSnapshotBlueprintLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.StopPerformanceSnapshots
	constexpr static const FunctionPointer<UHealthSnapshotBlueprintLibrary, void> StopPerformanceSnapshots = { 0x47b6850, 0 }; 
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.StartPerformanceSnapshots
	constexpr static const FunctionPointer<UHealthSnapshotBlueprintLibrary, void> StartPerformanceSnapshots = { 0x47b6870, 1 }; 
	// Function /Script/Engine.HealthSnapshotBlueprintLibrary.LogPerformanceSnapshot
	constexpr static const FunctionPointer<UHealthSnapshotBlueprintLibrary, void, const FString, const bool> LogPerformanceSnapshot = { 0x47b6690, 2 }; 
};

/// Class /Script/Engine.HLODEngineSubsystem
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UHLODEngineSubsystem : public UEngineSubsystem
{ 
public:
};

/// Struct /Script/Engine.HLODProxyMesh
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FHLODProxyMesh
{ 
	TLazyObjectPtr<class ALODActor*>                   LODActor;                                                   // 0x0000   (0x001C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0020   (0x0008)  
	FName                                              Key;                                                        // 0x0028   (0x0008)  
};

/// Class /Script/Engine.HLODProxy
/// Size: 0x0088 (136 bytes) (0x000028 - 0x000088) align n/a MaxSize: 0x0088
class UHLODProxy : public UObject
{ 
public:
	TArray<FHLODProxyMesh>                             ProxyMeshes;                                                // 0x0028   (0x0010)  
	TMap<class UHLODProxyDesc*, FHLODProxyMesh>        HLODActors;                                                 // 0x0038   (0x0050)  
};

/// Class /Script/Engine.HLODProxyDesc
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UHLODProxyDesc : public UObject
{ 
public:
};

/// Class /Script/Engine.ImportanceSamplingLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolFloat
	constexpr static const FunctionPointer<UImportanceSamplingLibrary, float, const int32_t, const int32_t, const float> RandomSobolFloat = { 0x47bf720, 0 }; 
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolCell3D
	constexpr static const FunctionPointer<UImportanceSamplingLibrary, FVector, const int32_t, const int32_t, const FVector, const FVector> RandomSobolCell3D = { 0x47bebd0, 1 }; 
	// Function /Script/Engine.ImportanceSamplingLibrary.RandomSobolCell2D
	constexpr static const FunctionPointer<UImportanceSamplingLibrary, FVector2D, const int32_t, const int32_t, const FVector2D, const FVector2D> RandomSobolCell2D = { 0x47bf240, 2 }; 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolFloat
	constexpr static const FunctionPointer<UImportanceSamplingLibrary, float, const int32_t, const int32_t, const float> NextSobolFloat = { 0x47bf4c0, 3 }; 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolCell3D
	constexpr static const FunctionPointer<UImportanceSamplingLibrary, FVector, const int32_t, const int32_t, const FVector> NextSobolCell3D = { 0x47be8a0, 4 }; 
	// Function /Script/Engine.ImportanceSamplingLibrary.NextSobolCell2D
	constexpr static const FunctionPointer<UImportanceSamplingLibrary, FVector2D, const int32_t, const int32_t, const FVector2D> NextSobolCell2D = { 0x47bef30, 5 }; 
	// Function /Script/Engine.ImportanceSamplingLibrary.MakeImportanceTexture
	constexpr static const FunctionPointer<UImportanceSamplingLibrary, FImportanceTexture, const UTexture2D*, const TEnumAsByte<EImportanceWeight>> MakeImportanceTexture = { 0x47bdef0, 6 }; 
	// Function /Script/Engine.ImportanceSamplingLibrary.ImportanceSample
	constexpr static const FunctionPointer<UImportanceSamplingLibrary, void, const FImportanceTexture&, const FVector2D&, const int32_t, const float, const FVector2D&, const FLinearColor&, const float&, const float&> ImportanceSample = { 0x47bd780, 7 }; 
	// Function /Script/Engine.ImportanceSamplingLibrary.BreakImportanceTexture
	constexpr static const FunctionPointer<UImportanceSamplingLibrary, void, const FImportanceTexture&, const UTexture2D*&, const TEnumAsByte<EImportanceWeight>&> BreakImportanceTexture = { 0x47bdc60, 8 }; 
};

/// Class /Script/Engine.ImportantToggleSettingInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UImportantToggleSettingInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.InGameAdManager
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UInGameAdManager : public UPlatformInterfaceBase
{ 
public:
	bool                                               bShouldPauseWhileAdOpen : 1;                                // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	TArray<FDelegateProperty>                          ClickedBannerDelegates;                                     // 0x0040   (0x0010)  
	TArray<FDelegateProperty>                          ClosedAdDelegates;                                          // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.ComponentKey
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FComponentKey
{ 
	class UClass*                                      OwnerClass;                                                 // 0x0000   (0x0008)  
	FName                                              SCSVariableName;                                            // 0x0008   (0x0008)  
	FGuid                                              AssociatedGuid;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.ComponentOverrideRecord
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align n/a MaxSize: 0x0078
struct FComponentOverrideRecord
{ 
	class UClass*                                      ComponentClass;                                             // 0x0000   (0x0008)  
	class UActorComponent*                             ComponentTemplate;                                          // 0x0008   (0x0008)  
	FComponentKey                                      ComponentKey;                                               // 0x0010   (0x0020)  
	FBlueprintCookedComponentInstancingData            CookedComponentInstancingData;                              // 0x0030   (0x0048)  
};

/// Class /Script/Engine.InheritableComponentHandler
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class UInheritableComponentHandler : public UObject
{ 
public:
	TArray<FComponentOverrideRecord>                   Records;                                                    // 0x0028   (0x0010)  
	TArray<class UActorComponent*>                     UnnecessaryComponents;                                      // 0x0038   (0x0010)  
};

/// Class /Script/Engine.InputDelegateBinding
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UInputDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
};

/// Struct /Script/Engine.BlueprintInputDelegateBinding
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FBlueprintInputDelegateBinding
{ 
	bool                                               bConsumeInput : 1;                                          // 0x0000:0 (0x0001)  
	bool                                               bExecuteWhenPaused : 1;                                     // 0x0000:1 (0x0001)  
	bool                                               bOverrideParentBinding : 1;                                 // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/Engine.BlueprintInputActionDelegateBinding
/// Size: 0x0018 (24 bytes) (0x000004 - 0x000018) align n/a MaxSize: 0x0018
struct FBlueprintInputActionDelegateBinding : FBlueprintInputDelegateBinding
{ 
	FName                                              InputActionName;                                            // 0x0004   (0x0008)  
	TEnumAsByte<EInputEvent>                           InputKeyEvent;                                              // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x0010   (0x0008)  
};

/// Class /Script/Engine.InputActionDelegateBinding
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UInputActionDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputActionDelegateBinding>       InputActionDelegateBindings;                                // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.BlueprintInputAxisDelegateBinding
/// Size: 0x0014 (20 bytes) (0x000004 - 0x000014) align n/a MaxSize: 0x0014
struct FBlueprintInputAxisDelegateBinding : FBlueprintInputDelegateBinding
{ 
	FName                                              InputAxisName;                                              // 0x0004   (0x0008)  
	FName                                              FunctionNameToBind;                                         // 0x000C   (0x0008)  
};

/// Class /Script/Engine.InputAxisDelegateBinding
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UInputAxisDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputAxisDelegateBinding>         InputAxisDelegateBindings;                                  // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.BlueprintInputAxisKeyDelegateBinding
/// Size: 0x0028 (40 bytes) (0x000004 - 0x000028) align n/a MaxSize: 0x0028
struct FBlueprintInputAxisKeyDelegateBinding : FBlueprintInputDelegateBinding
{ 
	unsigned char                                      UnknownData01_8[0x4];                                       // 0x0004   (0x0004)  MISSED
	FKey                                               AxisKey;                                                    // 0x0008   (0x0018)  
	FName                                              FunctionNameToBind;                                         // 0x0020   (0x0008)  
};

/// Class /Script/Engine.InputAxisKeyDelegateBinding
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputAxisKeyDelegateBinding>      InputAxisKeyDelegateBindings;                               // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.CachedKeyToActionInfo
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FCachedKeyToActionInfo
{ 
	class UPlayerInput*                                PlayerInput;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x68];                                      // 0x0008   (0x0068)  MISSED
};

/// Class /Script/Engine.InputComponent
/// Size: 0x0148 (328 bytes) (0x0000C0 - 0x000148) align n/a MaxSize: 0x0148
class UInputComponent : public UActorComponent
{ 
public:
	unsigned char                                      UnknownData02_8[0x70];                                      // 0x00C0   (0x0070)  MISSED
	TArray<FCachedKeyToActionInfo>                     CachedKeyToActionInfo;                                      // 0x0130   (0x0010)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0140   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.InputComponent.WasControllerKeyJustReleased
	constexpr static const FunctionPointer<UInputComponent, bool, const FKey> WasControllerKeyJustReleased = { 0x47c2be0, 0 }; 
	// Function /Script/Engine.InputComponent.WasControllerKeyJustPressed
	constexpr static const FunctionPointer<UInputComponent, bool, const FKey> WasControllerKeyJustPressed = { 0x47c2be0, 1 }; 
	// Function /Script/Engine.InputComponent.IsControllerKeyDown
	constexpr static const FunctionPointer<UInputComponent, bool, const FKey> IsControllerKeyDown = { 0x47c2be0, 2 }; 
	// Function /Script/Engine.InputComponent.GetTouchState
	constexpr static const FunctionPointer<UInputComponent, void, const int32_t, const float&, const float&, const bool&> GetTouchState = { 0x47c2840, 3 }; 
	// Function /Script/Engine.InputComponent.GetControllerVectorKeyState
	constexpr static const FunctionPointer<UInputComponent, FVector, const FKey> GetControllerVectorKeyState = { 0x47c2a80, 4 }; 
	// Function /Script/Engine.InputComponent.GetControllerMouseDelta
	constexpr static const FunctionPointer<UInputComponent, void, const float&, const float&> GetControllerMouseDelta = { 0x47c25c0, 5 }; 
	// Function /Script/Engine.InputComponent.GetControllerKeyTimeDown
	constexpr static const FunctionPointer<UInputComponent, float, const FKey> GetControllerKeyTimeDown = { 0x47c26f0, 6 }; 
	// Function /Script/Engine.InputComponent.GetControllerAnalogStickState
	constexpr static const FunctionPointer<UInputComponent, void, const TEnumAsByte<EControllerAnalogStick>, const float&, const float&> GetControllerAnalogStickState = { 0x47c2400, 7 }; 
	// Function /Script/Engine.InputComponent.GetControllerAnalogKeyState
	constexpr static const FunctionPointer<UInputComponent, float, const FKey> GetControllerAnalogKeyState = { 0x47c26f0, 8 }; 
};

/// Struct /Script/Engine.BlueprintInputKeyDelegateBinding
/// Size: 0x0038 (56 bytes) (0x000004 - 0x000038) align n/a MaxSize: 0x0038
struct FBlueprintInputKeyDelegateBinding : FBlueprintInputDelegateBinding
{ 
	unsigned char                                      UnknownData03_8[0x4];                                       // 0x0004   (0x0004)  MISSED
	FInputChord                                        InputChord;                                                 // 0x0008   (0x0020)  
	TEnumAsByte<EInputEvent>                           InputKeyEvent;                                              // 0x0028   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x002C   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.InputKeyDelegateBinding
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UInputKeyDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputKeyDelegateBinding>          InputKeyDelegateBindings;                                   // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.InputAxisProperties
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FInputAxisProperties
{ 
	float                                              DeadZone;                                                   // 0x0000   (0x0004)  
	float                                              Sensitivity;                                                // 0x0004   (0x0004)  
	float                                              Exponent;                                                   // 0x0008   (0x0004)  
	bool                                               bInvert : 1;                                                // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.InputAxisConfigEntry
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FInputAxisConfigEntry
{ 
	FName                                              AxisKeyName;                                                // 0x0000   (0x0008)  
	FInputAxisProperties                               AxisProperties;                                             // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.InputActionKeyMapping
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FInputActionKeyMapping
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x0008)  
	bool                                               bShift : 1;                                                 // 0x0008:0 (0x0001)  
	bool                                               bCtrl : 1;                                                  // 0x0008:1 (0x0001)  
	bool                                               bAlt : 1;                                                   // 0x0008:2 (0x0001)  
	bool                                               bCmd : 1;                                                   // 0x0008:3 (0x0001)  
	bool                                               bCustomizeKey : 1;                                          // 0x0008:4 (0x0001)  
	bool                                               bMainKey : 1;                                               // 0x0008:5 (0x0001)  
	bool                                               bAZERTY : 1;                                                // 0x0008:6 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            Priority;                                                   // 0x000C   (0x0004)  
	int32_t                                            SortValue;                                                  // 0x0010   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FKey                                               Key;                                                        // 0x0018   (0x0018)  
};

/// Struct /Script/Engine.InputAxisKeyMapping
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FInputAxisKeyMapping
{ 
	FName                                              AxisName;                                                   // 0x0000   (0x0008)  
	float                                              Scale;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FKey                                               Key;                                                        // 0x0010   (0x0018)  
	bool                                               bCustomizeKey : 1;                                          // 0x0028:0 (0x0001)  
	bool                                               bMainKey : 1;                                               // 0x0028:1 (0x0001)  
	bool                                               bAZERTY : 1;                                                // 0x0028:2 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/Engine.InputActionSpeechMapping
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FInputActionSpeechMapping
{ 
	FName                                              ActionName;                                                 // 0x0000   (0x0008)  
	FName                                              SpeechKeyword;                                              // 0x0008   (0x0008)  
};

/// Class /Script/Engine.InputSettings
/// Size: 0x0160 (352 bytes) (0x000028 - 0x000160) align n/a MaxSize: 0x0160
class UInputSettings : public UObject
{ 
public:
	TArray<FInputAxisConfigEntry>                      AxisConfig;                                                 // 0x0028   (0x0010)  
	bool                                               bAltEnterTogglesFullscreen : 1;                             // 0x0038:0 (0x0001)  
	bool                                               bF11TogglesFullscreen : 1;                                  // 0x0038:1 (0x0001)  
	bool                                               bUseMouseForTouch : 1;                                      // 0x0038:2 (0x0001)  
	bool                                               bEnableMouseSmoothing : 1;                                  // 0x0038:3 (0x0001)  
	bool                                               bEnableFOVScaling : 1;                                      // 0x0038:4 (0x0001)  
	bool                                               bCaptureMouseOnLaunch : 1;                                  // 0x0038:5 (0x0001)  
	bool                                               bDefaultViewportMouseLock : 1;                              // 0x0038:6 (0x0001)  
	bool                                               bAlwaysShowTouchInterface : 1;                              // 0x0038:7 (0x0001)  
	bool                                               bShowConsoleOnFourFingerTap : 1;                            // 0x0039:0 (0x0001)  
	bool                                               bEnableGestureRecognizer : 1;                               // 0x0039:1 (0x0001)  
	bool                                               bUseAutocorrect;                                            // 0x003A   (0x0001)  
	unsigned char                                      UnknownData03_6[0x5];                                       // 0x003B   (0x0005)  MISSED
	TArray<FString>                                    ExcludedAutocorrectOS;                                      // 0x0040   (0x0010)  
	TArray<FString>                                    ExcludedAutocorrectCultures;                                // 0x0050   (0x0010)  
	TArray<FString>                                    ExcludedAutocorrectDeviceModels;                            // 0x0060   (0x0010)  
	EMouseCaptureMode                                  DefaultViewportMouseCaptureMode;                            // 0x0070   (0x0001)  
	EMouseLockMode                                     DefaultViewportMouseLockMode;                               // 0x0071   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0072   (0x0002)  MISSED
	float                                              FOVScale;                                                   // 0x0074   (0x0004)  
	float                                              DoubleClickTime;                                            // 0x0078   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x007C   (0x0004)  MISSED
	TArray<FInputActionKeyMapping>                     ActionMappings;                                             // 0x0080   (0x0010)  
	TArray<FInputAxisKeyMapping>                       AxisMappings;                                               // 0x0090   (0x0010)  
	TArray<FInputActionKeyMapping>                     DefaultActionMappings;                                      // 0x00A0   (0x0010)  
	TArray<FInputAxisKeyMapping>                       DefaultAxisMappings;                                        // 0x00B0   (0x0010)  
	TArray<FInputActionSpeechMapping>                  SpeechMappings;                                             // 0x00C0   (0x0010)  
	TSoftObjectPtr<class UClass*>                      DefaultPlayerInputClass;                                    // 0x00D0   (0x0028)  
	TSoftObjectPtr<class UClass*>                      DefaultInputComponentClass;                                 // 0x00F8   (0x0028)  
	FSoftObjectPath                                    DefaultTouchInterface;                                      // 0x0120   (0x0018)  
	FKey                                               ConsoleKey;                                                 // 0x0138   (0x0018)  
	TArray<FKey>                                       ConsoleKeys;                                                // 0x0150   (0x0010)  

	/// Functions
	// Function /Script/Engine.InputSettings.SaveKeyMappings
	constexpr static const FunctionPointer<UInputSettings, void> SaveKeyMappings = { 0x47c40d0, 0 }; 
	// Function /Script/Engine.InputSettings.RemoveAxisMapping
	constexpr static const FunctionPointer<UInputSettings, void, const FInputAxisKeyMapping&, const bool> RemoveAxisMapping = { 0x47c40f0, 1 }; 
	// Function /Script/Engine.InputSettings.RemoveActionMapping
	constexpr static const FunctionPointer<UInputSettings, void, const FInputActionKeyMapping&, const bool> RemoveActionMapping = { 0x47c48d0, 2 }; 
	// Function /Script/Engine.InputSettings.GetInputSettings
	constexpr static const FunctionPointer<UInputSettings, UInputSettings*> GetInputSettings = { 0x47c5070, 3 }; 
	// Function /Script/Engine.InputSettings.GetAxisNames
	constexpr static const FunctionPointer<UInputSettings, void, const TArray<FName>&> GetAxisNames = { 0x47c3ef0, 4 }; 
	// Function /Script/Engine.InputSettings.GetAxisMappingByName
	constexpr static const FunctionPointer<UInputSettings, void, const FName, const TArray<FInputAxisKeyMapping>&> GetAxisMappingByName = { 0x47c4380, 5 }; 
	// Function /Script/Engine.InputSettings.GetActionNames
	constexpr static const FunctionPointer<UInputSettings, void, const TArray<FName>&> GetActionNames = { 0x47c3fe0, 6 }; 
	// Function /Script/Engine.InputSettings.GetActionMappingByName
	constexpr static const FunctionPointer<UInputSettings, void, const FName, const TArray<FInputActionKeyMapping>&> GetActionMappingByName = { 0x47c4b40, 7 }; 
	// Function /Script/Engine.InputSettings.ForceRebuildKeymaps
	constexpr static const FunctionPointer<UInputSettings, void> ForceRebuildKeymaps = { 0x47c3ed0, 8 }; 
	// Function /Script/Engine.InputSettings.AddAxisMapping
	constexpr static const FunctionPointer<UInputSettings, void, const FInputAxisKeyMapping&, const bool> AddAxisMapping = { 0x47c4600, 9 }; 
	// Function /Script/Engine.InputSettings.AddActionMapping
	constexpr static const FunctionPointer<UInputSettings, void, const FInputActionKeyMapping&, const bool> AddActionMapping = { 0x47c4dc0, 10 }; 
};

/// Struct /Script/Engine.BlueprintInputTouchDelegateBinding
/// Size: 0x0010 (16 bytes) (0x000004 - 0x000010) align n/a MaxSize: 0x0010
struct FBlueprintInputTouchDelegateBinding : FBlueprintInputDelegateBinding
{ 
	TEnumAsByte<EInputEvent>                           InputKeyEvent;                                              // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FName                                              FunctionNameToBind;                                         // 0x0008   (0x0008)  
};

/// Class /Script/Engine.InputTouchDelegateBinding
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UInputTouchDelegateBinding : public UInputDelegateBinding
{ 
public:
	TArray<FBlueprintInputTouchDelegateBinding>        InputTouchDelegateBindings;                                 // 0x0028   (0x0010)  
};

/// Class /Script/Engine.InputVectorAxisDelegateBinding
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align n/a MaxSize: 0x0038
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{ 
public:
};

/// Class /Script/Engine.Interface_AssetUserData
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UInterface_AssetUserData : public UInterface
{ 
public:
};

/// Class /Script/Engine.BoneReferenceSkeletonProvider
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UBoneReferenceSkeletonProvider : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_CollisionDataProvider
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UInterface_CollisionDataProvider : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_PostProcessVolume
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UInterface_PostProcessVolume : public UInterface
{ 
public:
};

/// Class /Script/Engine.Interface_PreviewMeshProvider
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UInterface_PreviewMeshProvider : public UInterface
{ 
public:
};

/// Struct /Script/Engine.CurveEdEntry
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FCurveEdEntry
{ 
	class UObject*                                     CurveObject;                                                // 0x0000   (0x0008)  
	FColor                                             CurveColor;                                                 // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            CurveName;                                                  // 0x0010   (0x0010)  
	int32_t                                            bHideCurve;                                                 // 0x0020   (0x0004)  
	int32_t                                            bColorCurve;                                                // 0x0024   (0x0004)  
	int32_t                                            bFloatingPointColorCurve;                                   // 0x0028   (0x0004)  
	int32_t                                            bClamp;                                                     // 0x002C   (0x0004)  
	float                                              ClampLow;                                                   // 0x0030   (0x0004)  
	float                                              ClampHigh;                                                  // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.CurveEdTab
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FCurveEdTab
{ 
	FString                                            TabName;                                                    // 0x0000   (0x0010)  
	TArray<FCurveEdEntry>                              Curves;                                                     // 0x0010   (0x0010)  
	float                                              ViewStartInput;                                             // 0x0020   (0x0004)  
	float                                              ViewEndInput;                                               // 0x0024   (0x0004)  
	float                                              ViewStartOutput;                                            // 0x0028   (0x0004)  
	float                                              ViewEndOutput;                                              // 0x002C   (0x0004)  
};

/// Class /Script/Engine.InterpCurveEdSetup
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UInterpCurveEdSetup : public UObject
{ 
public:
	TArray<FCurveEdTab>                                Tabs;                                                       // 0x0028   (0x0010)  
	int32_t                                            ActiveTab;                                                  // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpData
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class UInterpData : public UObject
{ 
public:
	float                                              InterpLength;                                               // 0x0028   (0x0004)  
	float                                              PathBuildTime;                                              // 0x002C   (0x0004)  
	TArray<class UInterpGroup*>                        InterpGroups;                                               // 0x0030   (0x0010)  
	class UInterpCurveEdSetup*                         CurveEdSetup;                                               // 0x0040   (0x0008)  
	float                                              EdSectionStart;                                             // 0x0048   (0x0004)  
	float                                              EdSectionEnd;                                               // 0x004C   (0x0004)  
	bool                                               bShouldBakeAndPrune : 1;                                    // 0x0050:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0051   (0x0007)  MISSED
	class UInterpGroupDirector*                        CachedDirectorGroup;                                        // 0x0058   (0x0008)  
	TArray<FName>                                      AllEventNames;                                              // 0x0060   (0x0010)  
};

/// Class /Script/Engine.InterpFilter
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UInterpFilter : public UObject
{ 
public:
	FString                                            Caption;                                                    // 0x0028   (0x0010)  
};

/// Class /Script/Engine.InterpFilter_Classes
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align n/a MaxSize: 0x0038
class UInterpFilter_Classes : public UInterpFilter
{ 
public:
};

/// Class /Script/Engine.InterpFilter_Custom
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align n/a MaxSize: 0x0038
class UInterpFilter_Custom : public UInterpFilter
{ 
public:
};

/// Class /Script/Engine.InterpGroup
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UInterpGroup : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	TArray<class UInterpTrack*>                        InterpTracks;                                               // 0x0030   (0x0010)  
	FName                                              GroupName;                                                  // 0x0040   (0x0008)  
	FColor                                             GroupColor;                                                 // 0x0048   (0x0004)  
	bool                                               bCollapsed : 1;                                             // 0x004C:0 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x004C:1 (0x0001)  
	bool                                               bIsFolder : 1;                                              // 0x004C:2 (0x0001)  
	bool                                               bIsParented : 1;                                            // 0x004C:3 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x004C:4 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpGroupCamera
/// Size: 0x0060 (96 bytes) (0x000050 - 0x000060) align n/a MaxSize: 0x0060
class UInterpGroupCamera : public UInterpGroup
{ 
public:
	class UCameraAnim*                                 CameraAnimInst;                                             // 0x0050   (0x0008)  
	float                                              CompressTolerance;                                          // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpGroupDirector
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align n/a MaxSize: 0x0050
class UInterpGroupDirector : public UInterpGroup
{ 
public:
};

/// Class /Script/Engine.InterpGroupInst
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class UInterpGroupInst : public UObject
{ 
public:
	class UInterpGroup*                                Group;                                                      // 0x0028   (0x0008)  
	class AActor*                                      GroupActor;                                                 // 0x0030   (0x0008)  
	TArray<class UInterpTrackInst*>                    TrackInst;                                                  // 0x0038   (0x0010)  
};

/// Class /Script/Engine.InterpGroupInstCamera
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000048) align n/a MaxSize: 0x0048
class UInterpGroupInstCamera : public UInterpGroupInst
{ 
public:
};

/// Class /Script/Engine.InterpGroupInstDirector
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000048) align n/a MaxSize: 0x0048
class UInterpGroupInstDirector : public UInterpGroupInst
{ 
public:
};

/// Struct /Script/Engine.InterpControlPoint
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FInterpControlPoint
{ 
	FVector                                            PositionControlPoint;                                       // 0x0000   (0x000C)  
	bool                                               bPositionIsRelative;                                        // 0x000C   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x000D   (0x000F)  MISSED
};

/// Class /Script/Engine.InterpToMovementComponent
/// Size: 0x01A0 (416 bytes) (0x000100 - 0x0001A0) align n/a MaxSize: 0x01A0
class UInterpToMovementComponent : public UMovementComponent
{ 
public:
	float                                              Duration;                                                   // 0x0100   (0x0004)  
	bool                                               bPauseOnImpact : 1;                                         // 0x0104:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0105   (0x0003)  MISSED
	bool                                               bSweep;                                                     // 0x0108   (0x0001)  
	ETeleportType                                      TeleportType;                                               // 0x0109   (0x0001)  
	EInterpToBehaviourType                             BehaviourType;                                              // 0x010A   (0x0001)  
	bool                                               bCheckIfStillInWorld;                                       // 0x010B   (0x0001)  
	bool                                               bForceSubStepping : 1;                                      // 0x010C:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x010D   (0x0003)  MISSED
	FMulticastInlineDelegate                           OnInterpToReverse;                                          // 0x0110   (0x0010)  
	FMulticastInlineDelegate                           OnInterpToStop;                                             // 0x0120   (0x0010)  
	FMulticastInlineDelegate                           OnWaitBeginDelegate;                                        // 0x0130   (0x0010)  
	FMulticastInlineDelegate                           OnWaitEndDelegate;                                          // 0x0140   (0x0010)  
	FMulticastInlineDelegate                           OnResetDelegate;                                            // 0x0150   (0x0010)  
	float                                              MaxSimulationTimeStep;                                      // 0x0160   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x0164   (0x0004)  
	TArray<FInterpControlPoint>                        ControlPoints;                                              // 0x0168   (0x0010)  
	unsigned char                                      UnknownData05_7[0x28];                                      // 0x0178   (0x0028)  MISSED

	/// Functions
	// Function /Script/Engine.InterpToMovementComponent.StopSimulating
	constexpr static const FunctionPointer<UInterpToMovementComponent, void, const FHitResult&> StopSimulating = { 0x47ccb60, 0 }; 
	// Function /Script/Engine.InterpToMovementComponent.RestartMovement
	constexpr static const FunctionPointer<UInterpToMovementComponent, void, const float> RestartMovement = { 0x47cca80, 1 }; 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitEndDelegate__DelegateSignature
	constexpr static const FunctionPointer<UInterpToMovementComponent, void, const FHitResult&, const float> OnInterpToWaitEndDelegate__DelegateSignature = { 0x2bbb090, 2 }; 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToWaitBeginDelegate__DelegateSignature
	constexpr static const FunctionPointer<UInterpToMovementComponent, void, const FHitResult&, const float> OnInterpToWaitBeginDelegate__DelegateSignature = { 0x2bbb090, 3 }; 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToStopDelegate__DelegateSignature
	constexpr static const FunctionPointer<UInterpToMovementComponent, void, const FHitResult&, const float> OnInterpToStopDelegate__DelegateSignature = { 0x2bbb090, 4 }; 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToReverseDelegate__DelegateSignature
	constexpr static const FunctionPointer<UInterpToMovementComponent, void, const FHitResult&, const float> OnInterpToReverseDelegate__DelegateSignature = { 0x2bbb090, 5 }; 
	// Function /Script/Engine.InterpToMovementComponent.OnInterpToResetDelegate__DelegateSignature
	constexpr static const FunctionPointer<UInterpToMovementComponent, void, const FHitResult&, const float> OnInterpToResetDelegate__DelegateSignature = { 0x2bbb090, 6 }; 
	// Function /Script/Engine.InterpToMovementComponent.FinaliseControlPoints
	constexpr static const FunctionPointer<UInterpToMovementComponent, void> FinaliseControlPoints = { 0x47cca60, 7 }; 
};

/// Class /Script/Engine.InterpTrack
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class UInterpTrack : public UObject
{ 
public:
	unsigned char                                      UnknownData03_8[0x10];                                      // 0x0028   (0x0010)  MISSED
	TArray<class UInterpTrack*>                        SubTracks;                                                  // 0x0038   (0x0010)  
	class UClass*                                      TrackInstClass;                                             // 0x0048   (0x0008)  
	TEnumAsByte<ETrackActiveCondition>                 ActiveCondition;                                            // 0x0050   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0051   (0x0007)  MISSED
	FString                                            TrackTitle;                                                 // 0x0058   (0x0010)  
	bool                                               bOnePerGroup : 1;                                           // 0x0068:0 (0x0001)  
	bool                                               bDirGroupOnly : 1;                                          // 0x0068:1 (0x0001)  
	bool                                               bDisableTrack : 1;                                          // 0x0068:2 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x0068:3 (0x0001)  
	bool                                               bIsAnimControlTrack : 1;                                    // 0x0068:4 (0x0001)  
	bool                                               bSubTrackOnly : 1;                                          // 0x0068:5 (0x0001)  
	bool                                               bVisible : 1;                                               // 0x0068:6 (0x0001)  
	bool                                               bIsRecording : 1;                                           // 0x0068:7 (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatBase
/// Size: 0x0090 (144 bytes) (0x000070 - 0x000090) align n/a MaxSize: 0x0090
class UInterpTrackFloatBase : public UInterpTrack
{ 
public:
	FInterpCurveFloat                                  FloatTrack;                                                 // 0x0070   (0x0018)  
	float                                              CurveTension;                                               // 0x0088   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimControlTrackKey
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FAnimControlTrackKey
{ 
	float                                              StartTime;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UAnimSequence*                               AnimSeq;                                                    // 0x0008   (0x0008)  
	float                                              AnimStartOffset;                                            // 0x0010   (0x0004)  
	float                                              AnimEndOffset;                                              // 0x0014   (0x0004)  
	float                                              AnimPlayRate;                                               // 0x0018   (0x0004)  
	bool                                               bLooping : 1;                                               // 0x001C:0 (0x0001)  
	bool                                               bReverse : 1;                                               // 0x001C:1 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackAnimControl
/// Size: 0x00B0 (176 bytes) (0x000090 - 0x0000B0) align n/a MaxSize: 0x00B0
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{ 
public:
	FName                                              SlotName;                                                   // 0x0090   (0x0008)  
	TArray<FAnimControlTrackKey>                       AnimSeqs;                                                   // 0x0098   (0x0010)  
	bool                                               bSkipAnimNotifiers : 1;                                     // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackVectorBase
/// Size: 0x0090 (144 bytes) (0x000070 - 0x000090) align n/a MaxSize: 0x0090
class UInterpTrackVectorBase : public UInterpTrack
{ 
public:
	FInterpCurveVector                                 VectorTrack;                                                // 0x0070   (0x0018)  
	float                                              CurveTension;                                               // 0x0088   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackAudioMaster
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{ 
public:
};

/// Struct /Script/Engine.BoolTrackKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FBoolTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	bool                                               Value : 1;                                                  // 0x0004:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackBoolProp
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class UInterpTrackBoolProp : public UInterpTrack
{ 
public:
	TArray<FBoolTrackKey>                              BoolTrack;                                                  // 0x0070   (0x0010)  
	FName                                              PropertyName;                                               // 0x0080   (0x0008)  
};

/// Class /Script/Engine.InterpTrackColorProp
/// Size: 0x0098 (152 bytes) (0x000090 - 0x000098) align n/a MaxSize: 0x0098
class UInterpTrackColorProp : public UInterpTrackVectorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Class /Script/Engine.InterpTrackColorScale
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class UInterpTrackColorScale : public UInterpTrackVectorBase
{ 
public:
};

/// Struct /Script/Engine.DirectorTrackCut
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FDirectorTrackCut
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              TransitionTime;                                             // 0x0004   (0x0004)  
	FName                                              TargetCamGroup;                                             // 0x0008   (0x0008)  
	int32_t                                            ShotNumber;                                                 // 0x0010   (0x0004)  
};

/// Class /Script/Engine.InterpTrackDirector
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class UInterpTrackDirector : public UInterpTrack
{ 
public:
	TArray<FDirectorTrackCut>                          CutTrack;                                                   // 0x0070   (0x0010)  
	bool                                               bSimulateCameraCutsOnClients : 1;                           // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Struct /Script/Engine.EventTrackKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FEventTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	FName                                              EventName;                                                  // 0x0004   (0x0008)  
};

/// Class /Script/Engine.InterpTrackEvent
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class UInterpTrackEvent : public UInterpTrack
{ 
public:
	TArray<FEventTrackKey>                             EventTrack;                                                 // 0x0070   (0x0010)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:1 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0080:2 (0x0001)  
	bool                                               bUseCustomEventName : 1;                                    // 0x0080:3 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackFade
/// Size: 0x00A8 (168 bytes) (0x000090 - 0x0000A8) align n/a MaxSize: 0x00A8
class UInterpTrackFade : public UInterpTrackFloatBase
{ 
public:
	bool                                               bPersistFade : 1;                                           // 0x0090:0 (0x0001)  
	bool                                               bFadeAudio : 1;                                             // 0x0090:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0091   (0x0003)  MISSED
	FLinearColor                                       FadeColor;                                                  // 0x0094   (0x0010)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatAnimBPParam
/// Size: 0x00B0 (176 bytes) (0x000090 - 0x0000B0) align n/a MaxSize: 0x00B0
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{ 
public:
	class UAnimBlueprintGeneratedClass*                AnimBlueprintClass;                                         // 0x0090   (0x0008)  
	class UClass*                                      AnimClass;                                                  // 0x0098   (0x0008)  
	FName                                              ParamName;                                                  // 0x00A0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x00A8   (0x0008)  MISSED
};

/// Class /Script/Engine.InterpTrackFloatMaterialParam
/// Size: 0x00A8 (168 bytes) (0x000090 - 0x0000A8) align n/a MaxSize: 0x00A8
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{ 
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                            // 0x0090   (0x0010)  
	FName                                              ParamName;                                                  // 0x00A0   (0x0008)  
};

/// Class /Script/Engine.InterpTrackFloatParticleParam
/// Size: 0x0098 (152 bytes) (0x000090 - 0x000098) align n/a MaxSize: 0x0098
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{ 
public:
	FName                                              ParamName;                                                  // 0x0090   (0x0008)  
};

/// Class /Script/Engine.InterpTrackFloatProp
/// Size: 0x0098 (152 bytes) (0x000090 - 0x000098) align n/a MaxSize: 0x0098
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInst
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UInterpTrackInst : public UObject
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstAnimControl
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UInterpTrackInstAnimControl : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstAudioMaster
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstProperty
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UInterpTrackInstProperty : public UInterpTrackInst
{ 
public:
	unsigned char                                      UnknownData01_8[0x20];                                      // 0x0028   (0x0020)  MISSED
	class UObject*                                     PropertyOuterObjectInst;                                    // 0x0048   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstBoolProp
/// Size: 0x0068 (104 bytes) (0x000050 - 0x000068) align n/a MaxSize: 0x0068
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData02_8[0x10];                                      // 0x0050   (0x0010)  MISSED
	bool                                               ResetBool;                                                  // 0x0060   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackInstColorProp
/// Size: 0x0060 (96 bytes) (0x000050 - 0x000060) align n/a MaxSize: 0x0060
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0050   (0x0008)  MISSED
	FColor                                             ResetColor;                                                 // 0x0058   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstColorScale
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UInterpTrackInstColorScale : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstDirector
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UInterpTrackInstDirector : public UInterpTrackInst
{ 
public:
	class AActor*                                      OldViewTarget;                                              // 0x0028   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstEvent
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UInterpTrackInstEvent : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFade
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UInterpTrackInstFade : public UInterpTrackInst
{ 
public:
};

/// Class /Script/Engine.InterpTrackInstFloatAnimBPParam
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{ 
public:
	class UAnimInstance*                               AnimScriptInstance;                                         // 0x0028   (0x0008)  
	float                                              ResetFloat;                                                 // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0034   (0x000C)  MISSED
};

/// Struct /Script/Engine.PrimitiveMaterialRef
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FPrimitiveMaterialRef
{ 
	class UPrimitiveComponent*                         Primitive;                                                  // 0x0000   (0x0008)  
	class UDecalComponent*                             Decal;                                                      // 0x0008   (0x0008)  
	int32_t                                            ElementIndex;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFloatMaterialParam
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000060) align n/a MaxSize: 0x0060
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{ 
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                          // 0x0028   (0x0010)  
	TArray<float>                                      ResetFloats;                                                // 0x0038   (0x0010)  
	TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs;                                      // 0x0048   (0x0010)  
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                             // 0x0058   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstFloatParticleParam
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{ 
public:
	float                                              ResetFloat;                                                 // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstFloatProp
/// Size: 0x0060 (96 bytes) (0x000050 - 0x000060) align n/a MaxSize: 0x0060
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0050   (0x0008)  MISSED
	float                                              ResetFloat;                                                 // 0x0058   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstLinearColorProp
/// Size: 0x0068 (104 bytes) (0x000050 - 0x000068) align n/a MaxSize: 0x0068
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0050   (0x0008)  MISSED
	FLinearColor                                       ResetColor;                                                 // 0x0058   (0x0010)  
};

/// Class /Script/Engine.InterpTrackInstMove
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UInterpTrackInstMove : public UInterpTrackInst
{ 
public:
	FVector                                            ResetLocation;                                              // 0x0028   (0x000C)  
	FRotator                                           ResetRotation;                                              // 0x0034   (0x000C)  
};

/// Class /Script/Engine.InterpTrackInstParticleReplay
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstSlomo
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UInterpTrackInstSlomo : public UInterpTrackInst
{ 
public:
	float                                              OldTimeDilation;                                            // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstSound
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UInterpTrackInstSound : public UInterpTrackInst
{ 
public:
	float                                              LastUpdatePosition;                                         // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	class UAudioComponent*                             PlayAudioComp;                                              // 0x0030   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstToggle
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UInterpTrackInstToggle : public UInterpTrackInst
{ 
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                     // 0x0028   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              LastUpdatePosition;                                         // 0x002C   (0x0004)  
	bool                                               bSavedActiveState : 1;                                      // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackInstVectorMaterialParam
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000060) align n/a MaxSize: 0x0060
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{ 
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                          // 0x0028   (0x0010)  
	TArray<FVector>                                    ResetVectors;                                               // 0x0038   (0x0010)  
	TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs;                                      // 0x0048   (0x0010)  
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                             // 0x0058   (0x0008)  
};

/// Class /Script/Engine.InterpTrackInstVectorProp
/// Size: 0x0068 (104 bytes) (0x000050 - 0x000068) align n/a MaxSize: 0x0068
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0050   (0x0008)  MISSED
	FVector                                            ResetVector;                                                // 0x0058   (0x000C)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackInstVisibility
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UInterpTrackInstVisibility : public UInterpTrackInst
{ 
public:
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                     // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              LastUpdatePosition;                                         // 0x002C   (0x0004)  
};

/// Class /Script/Engine.InterpTrackLinearColorBase
/// Size: 0x0090 (144 bytes) (0x000070 - 0x000090) align n/a MaxSize: 0x0090
class UInterpTrackLinearColorBase : public UInterpTrack
{ 
public:
	FInterpCurveLinearColor                            LinearColorTrack;                                           // 0x0070   (0x0018)  
	float                                              CurveTension;                                               // 0x0088   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackLinearColorProp
/// Size: 0x0098 (152 bytes) (0x000090 - 0x000098) align n/a MaxSize: 0x0098
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Struct /Script/Engine.InterpLookupPoint
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FInterpLookupPoint
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.InterpLookupTrack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FInterpLookupTrack
{ 
	TArray<FInterpLookupPoint>                         Points;                                                     // 0x0000   (0x0010)  
};

/// Class /Script/Engine.InterpTrackMove
/// Size: 0x0140 (320 bytes) (0x000070 - 0x000140) align n/a MaxSize: 0x0140
class UInterpTrackMove : public UInterpTrack
{ 
public:
	FInterpCurveVector                                 PosTrack;                                                   // 0x0070   (0x0018)  
	FInterpCurveVector                                 EulerTrack;                                                 // 0x0088   (0x0018)  
	FInterpLookupTrack                                 LookupTrack;                                                // 0x00A0   (0x0010)  
	FName                                              LookAtGroupName;                                            // 0x00B0   (0x0008)  
	float                                              LinCurveTension;                                            // 0x00B8   (0x0004)  
	float                                              AngCurveTension;                                            // 0x00BC   (0x0004)  
	bool                                               bUseQuatInterpolation : 1;                                  // 0x00C0:0 (0x0001)  
	bool                                               bShowArrowAtKeys : 1;                                       // 0x00C0:1 (0x0001)  
	bool                                               bDisableMovement : 1;                                       // 0x00C0:2 (0x0001)  
	bool                                               bShowTranslationOnCurveEd : 1;                              // 0x00C0:3 (0x0001)  
	bool                                               bShowRotationOnCurveEd : 1;                                 // 0x00C0:4 (0x0001)  
	bool                                               bHide3DTrack : 1;                                           // 0x00C0:5 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x00C1   (0x0003)  MISSED
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                    // 0x00C4   (0x0001)  
	unsigned char                                      UnknownData06_6[0xB];                                       // 0x00C5   (0x000B)  MISSED
	FTransform                                         MovementBaseTM;                                             // 0x00D0   (0x0030)  
	float                                              MovementScale;                                              // 0x0100   (0x0004)  
	bool                                               bAttachCharacter;                                           // 0x0104   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0105   (0x0003)  MISSED
	class ACharacter*                                  AttachCharacter;                                            // 0x0108   (0x0008)  
	bool                                               bUseAttachCharacterFirstRotation;                           // 0x0110   (0x0001)  
	unsigned char                                      UnknownData08_6[0xF];                                       // 0x0111   (0x000F)  MISSED
	FQuat                                              AttachCharacterFirstRotation;                               // 0x0120   (0x0010)  
	FVector                                            AttachCharacterFirstLocation;                               // 0x0130   (0x000C)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x013C   (0x0004)  MISSED
};

/// Class /Script/Engine.InterpTrackMoveAxis
/// Size: 0x00A8 (168 bytes) (0x000090 - 0x0000A8) align n/a MaxSize: 0x00A8
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{ 
public:
	TEnumAsByte<EInterpMoveAxis>                       MoveAxis;                                                   // 0x0090   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	FInterpLookupTrack                                 LookupTrack;                                                // 0x0098   (0x0010)  
};

/// Struct /Script/Engine.ParticleReplayTrackKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FParticleReplayTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Duration;                                                   // 0x0004   (0x0004)  
	int32_t                                            ClipIDNumber;                                               // 0x0008   (0x0004)  
};

/// Class /Script/Engine.InterpTrackParticleReplay
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align n/a MaxSize: 0x0080
class UInterpTrackParticleReplay : public UInterpTrack
{ 
public:
	TArray<FParticleReplayTrackKey>                    TrackKeys;                                                  // 0x0070   (0x0010)  
};

/// Class /Script/Engine.InterpTrackSlomo
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class UInterpTrackSlomo : public UInterpTrackFloatBase
{ 
public:
};

/// Struct /Script/Engine.SoundTrackKey
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FSoundTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	float                                              Volume;                                                     // 0x0004   (0x0004)  
	float                                              Pitch;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	class USoundBase*                                  Sound;                                                      // 0x0010   (0x0008)  
};

/// Class /Script/Engine.InterpTrackSound
/// Size: 0x00A8 (168 bytes) (0x000090 - 0x0000A8) align n/a MaxSize: 0x00A8
class UInterpTrackSound : public UInterpTrackVectorBase
{ 
public:
	TArray<FSoundTrackKey>                             Sounds;                                                     // 0x0090   (0x0010)  
	bool                                               bPlayOnReverse : 1;                                         // 0x00A0:0 (0x0001)  
	bool                                               bContinueSoundOnMatineeEnd : 1;                             // 0x00A0:1 (0x0001)  
	bool                                               bSuppressSubtitles : 1;                                     // 0x00A0:2 (0x0001)  
	bool                                               bTreatAsDialogue : 1;                                       // 0x00A0:3 (0x0001)  
	bool                                               bAttach : 1;                                                // 0x00A0:4 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00A1   (0x0007)  MISSED
};

/// Struct /Script/Engine.ToggleTrackKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FToggleTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	TEnumAsByte<ETrackToggleAction>                    ToggleAction;                                               // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Class /Script/Engine.InterpTrackToggle
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class UInterpTrackToggle : public UInterpTrack
{ 
public:
	TArray<FToggleTrackKey>                            ToggleTrack;                                                // 0x0070   (0x0010)  
	bool                                               bActivateSystemEachUpdate : 1;                              // 0x0080:0 (0x0001)  
	bool                                               bActivateWithJustAttachedFlag : 1;                          // 0x0080:1 (0x0001)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:2 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:3 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0080:4 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.InterpTrackVectorMaterialParam
/// Size: 0x00A8 (168 bytes) (0x000090 - 0x0000A8) align n/a MaxSize: 0x00A8
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{ 
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                            // 0x0090   (0x0010)  
	FName                                              ParamName;                                                  // 0x00A0   (0x0008)  
};

/// Class /Script/Engine.InterpTrackVectorProp
/// Size: 0x0098 (152 bytes) (0x000090 - 0x000098) align n/a MaxSize: 0x0098
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{ 
public:
	FName                                              PropertyName;                                               // 0x0090   (0x0008)  
};

/// Struct /Script/Engine.VisibilityTrackKey
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FVisibilityTrackKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                     // 0x0004   (0x0001)  
	TEnumAsByte<EVisibilityTrackCondition>             ActiveCondition;                                            // 0x0005   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0006   (0x0002)  MISSED
};

/// Class /Script/Engine.InterpTrackVisibility
/// Size: 0x0088 (136 bytes) (0x000070 - 0x000088) align n/a MaxSize: 0x0088
class UInterpTrackVisibility : public UInterpTrack
{ 
public:
	TArray<FVisibilityTrackKey>                        VisibilityTrack;                                            // 0x0070   (0x0010)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:1 (0x0001)  
	bool                                               bFireEventsWhenJumpingForwards : 1;                         // 0x0080:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.IntSerialization
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UIntSerialization : public UObject
{ 
public:
	uint16_t                                           UnsignedInt16Variable;                                      // 0x0028   (0x0002)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x002A   (0x0002)  MISSED
	uint32_t                                           UnsignedInt32Variable;                                      // 0x002C   (0x0004)  
	uint64_t                                           UnsignedInt64Variable;                                      // 0x0030   (0x0008)  
	int8_t                                             SignedInt8Variable;                                         // 0x0038   (0x0001)  
	unsigned char                                      UnknownData05_6[0x1];                                       // 0x0039   (0x0001)  MISSED
	int16_t                                            SignedInt16Variable;                                        // 0x003A   (0x0002)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	int64_t                                            SignedInt64Variable;                                        // 0x0040   (0x0008)  
	char                                               UnsignedInt8Variable;                                       // 0x0048   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	int32_t                                            SignedInt32Variable;                                        // 0x004C   (0x0004)  
};

/// Class /Script/Engine.KillZVolume
/// Size: 0x0508 (1288 bytes) (0x000508 - 0x000508) align n/a MaxSize: 0x0508
class AKillZVolume : public APhysicsVolume
{ 
public:
};

/// Class /Script/Engine.KismetArrayLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetArrayLibrary.SetArrayPropertyByName
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const UObject*, const FName, const TArray<int32_t>&> SetArrayPropertyByName = { 0x47dbd50, 0 }; 
	// Function /Script/Engine.KismetArrayLibrary.FilterArray
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<AActor*>&, const UClass*, const TArray<AActor*>&> FilterArray = { 0x47dc680, 1 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Swap
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&, const int32_t, const int32_t> Array_Swap = { 0x47db600, 2 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Shuffle
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&> Array_Shuffle = { 0x47d9bd0, 3 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Set
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&, const int32_t, const int32_t&, const bool> Array_Set = { 0x47db2a0, 4 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Reverse
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&> Array_Reverse = { 0x47dac00, 5 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Resize
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&, const int32_t> Array_Resize = { 0x47daa70, 6 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_RemoveItem
	constexpr static const FunctionPointer<UKismetArrayLibrary, bool, const TArray<int32_t>&, const int32_t&> Array_RemoveItem = { 0x47da5f0, 7 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Remove
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&, const int32_t> Array_Remove = { 0x47da460, 8 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_RandomFromStream
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&, const FRandomStream&, const int32_t&, const int32_t&> Array_RandomFromStream = { 0x47dc3b0, 9 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Random
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&, const int32_t&, const int32_t&> Array_Random = { 0x47dc170, 10 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Length
	constexpr static const FunctionPointer<UKismetArrayLibrary, int32_t, const TArray<int32_t>&> Array_Length = { 0x47dada0, 11 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_LastIndex
	constexpr static const FunctionPointer<UKismetArrayLibrary, int32_t, const TArray<int32_t>&> Array_LastIndex = { 0x47daea0, 12 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_IsValidIndex
	constexpr static const FunctionPointer<UKismetArrayLibrary, bool, const TArray<int32_t>&, const int32_t> Array_IsValidIndex = { 0x47dbfd0, 13 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Insert
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&, const int32_t&, const int32_t> Array_Insert = { 0x47da190, 14 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Identical
	constexpr static const FunctionPointer<UKismetArrayLibrary, bool, const TArray<int32_t>&, const TArray<int32_t>&> Array_Identical = { 0x47d9e00, 15 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Get
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&, const int32_t, const int32_t&> Array_Get = { 0x47dafc0, 16 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Find
	constexpr static const FunctionPointer<UKismetArrayLibrary, int32_t, const TArray<int32_t>&, const int32_t&> Array_Find = { 0x47db840, 17 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Contains
	constexpr static const FunctionPointer<UKismetArrayLibrary, bool, const TArray<int32_t>&, const int32_t&> Array_Contains = { 0x47dbac0, 18 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Clear
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&> Array_Clear = { 0x47da8b0, 19 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Append
	constexpr static const FunctionPointer<UKismetArrayLibrary, void, const TArray<int32_t>&, const TArray<int32_t>&> Array_Append = { 0x47d9fd0, 20 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_AddUnique
	constexpr static const FunctionPointer<UKismetArrayLibrary, int32_t, const TArray<int32_t>&, const int32_t&> Array_AddUnique = { 0x47d9980, 21 }; 
	// Function /Script/Engine.KismetArrayLibrary.Array_Add
	constexpr static const FunctionPointer<UKismetArrayLibrary, int32_t, const TArray<int32_t>&, const int32_t&> Array_Add = { 0x47d9730, 22 }; 
};

/// Class /Script/Engine.KismetGuidLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetGuidLibrary.Parse_StringToGuid
	constexpr static const FunctionPointer<UKismetGuidLibrary, void, const FString, const FGuid&, const bool&> Parse_StringToGuid = { 0x47de320, 0 }; 
	// Function /Script/Engine.KismetGuidLibrary.NotEqual_GuidGuid
	constexpr static const FunctionPointer<UKismetGuidLibrary, bool, const FGuid&, const FGuid&> NotEqual_GuidGuid = { 0x47de890, 1 }; 
	// Function /Script/Engine.KismetGuidLibrary.NewGuid
	constexpr static const FunctionPointer<UKismetGuidLibrary, FGuid> NewGuid = { 0x47de670, 2 }; 
	// Function /Script/Engine.KismetGuidLibrary.IsValid_Guid
	constexpr static const FunctionPointer<UKismetGuidLibrary, bool, const FGuid&> IsValid_Guid = { 0x47de7a0, 3 }; 
	// Function /Script/Engine.KismetGuidLibrary.Invalidate_Guid
	constexpr static const FunctionPointer<UKismetGuidLibrary, void, const FGuid&> Invalidate_Guid = { 0x47de6c0, 4 }; 
	// Function /Script/Engine.KismetGuidLibrary.EqualEqual_GuidGuid
	constexpr static const FunctionPointer<UKismetGuidLibrary, bool, const FGuid&, const FGuid&> EqualEqual_GuidGuid = { 0x47dea30, 5 }; 
	// Function /Script/Engine.KismetGuidLibrary.Conv_GuidToString
	constexpr static const FunctionPointer<UKismetGuidLibrary, FString, const FGuid&> Conv_GuidToString = { 0x47de530, 6 }; 
};

/// Class /Script/Engine.KismetInputLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_IsTouchEvent
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FPointerEvent&> PointerEvent_IsTouchEvent = { 0x47df4c0, 0 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_IsMouseButtonDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FPointerEvent&, const FKey> PointerEvent_IsMouseButtonDown = { 0x47dfe30, 1 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetWheelDelta
	constexpr static const FunctionPointer<UKismetInputLibrary, float, const FPointerEvent&> PointerEvent_GetWheelDelta = { 0x47dfac0, 2 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetUserIndex
	constexpr static const FunctionPointer<UKismetInputLibrary, int32_t, const FPointerEvent&> PointerEvent_GetUserIndex = { 0x47df940, 3 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetTouchpadIndex
	constexpr static const FunctionPointer<UKismetInputLibrary, int32_t, const FPointerEvent&> PointerEvent_GetTouchpadIndex = { 0x47df640, 4 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetScreenSpacePosition
	constexpr static const FunctionPointer<UKismetInputLibrary, FVector2D, const FPointerEvent&> PointerEvent_GetScreenSpacePosition = { 0x47e0410, 5 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetPointerIndex
	constexpr static const FunctionPointer<UKismetInputLibrary, int32_t, const FPointerEvent&> PointerEvent_GetPointerIndex = { 0x47df7c0, 6 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetLastScreenSpacePosition
	constexpr static const FunctionPointer<UKismetInputLibrary, FVector2D, const FPointerEvent&> PointerEvent_GetLastScreenSpacePosition = { 0x47e0280, 7 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetGestureType
	constexpr static const FunctionPointer<UKismetInputLibrary, ESlateGesture, const FPointerEvent&> PointerEvent_GetGestureType = { 0x47df300, 8 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetGestureDelta
	constexpr static const FunctionPointer<UKismetInputLibrary, FVector2D, const FPointerEvent&> PointerEvent_GetGestureDelta = { 0x47df170, 9 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetEffectingButton
	constexpr static const FunctionPointer<UKismetInputLibrary, FKey, const FPointerEvent&> PointerEvent_GetEffectingButton = { 0x47dfc40, 10 }; 
	// Function /Script/Engine.KismetInputLibrary.PointerEvent_GetCursorDelta
	constexpr static const FunctionPointer<UKismetInputLibrary, FVector2D, const FPointerEvent&> PointerEvent_GetCursorDelta = { 0x47e00f0, 11 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsVectorAxis
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsVectorAxis = { 0x47e2890, 12 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsValid
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsValid = { 0x47e1fc0, 13 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsMouseButton
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsMouseButton = { 0x47e2b60, 14 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsModifierKey
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsModifierKey = { 0x47e2de0, 15 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsKeyboardKey
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsKeyboardKey = { 0x47e29f0, 16 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsGamepadKey
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsGamepadKey = { 0x47e2ca0, 17 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsDigital
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsDigital = { 0x47e2110, 18 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsButtonAxis
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsButtonAxis = { 0x47e2390, 19 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAxis3D
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsAxis3D = { 0x47e24d0, 20 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAxis2D
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsAxis2D = { 0x47e2610, 21 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAxis1D
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsAxis1D = { 0x47e2750, 22 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_IsAnalog
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey&> Key_IsAnalog = { 0x47e2250, 23 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationDirectionFromKey
	constexpr static const FunctionPointer<UKismetInputLibrary, EUINavigation, const FKeyEvent&> Key_GetNavigationDirectionFromKey = { 0x47e1bc0, 24 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationDirectionFromAnalog
	constexpr static const FunctionPointer<UKismetInputLibrary, EUINavigation, const FAnalogInputEvent&> Key_GetNavigationDirectionFromAnalog = { 0x47e1a40, 25 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationActionFromKey
	constexpr static const FunctionPointer<UKismetInputLibrary, EUINavigationAction, const FKeyEvent&> Key_GetNavigationActionFromKey = { 0x47e1d20, 26 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_GetNavigationAction
	constexpr static const FunctionPointer<UKismetInputLibrary, EUINavigationAction, const FKey&> Key_GetNavigationAction = { 0x47e1e80, 27 }; 
	// Function /Script/Engine.KismetInputLibrary.Key_GetDisplayName
	constexpr static const FunctionPointer<UKismetInputLibrary, FText, const FKey&> Key_GetDisplayName = { 0x47e18d0, 28 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsShiftDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsShiftDown = { 0x47e16d0, 29 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightShiftDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsRightShiftDown = { 0x47e14d0, 30 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightControlDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsRightControlDown = { 0x47e11d0, 31 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightCommandDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsRightCommandDown = { 0x47e0bd0, 32 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRightAltDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsRightAltDown = { 0x47e0ed0, 33 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsRepeat
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsRepeat = { 0x47e17d0, 34 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftShiftDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsLeftShiftDown = { 0x47e15d0, 35 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftControlDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsLeftControlDown = { 0x47e12d0, 36 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftCommandDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsLeftCommandDown = { 0x47e0cd0, 37 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsLeftAltDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsLeftAltDown = { 0x47e0fd0, 38 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsControlDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsControlDown = { 0x47e13d0, 39 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsCommandDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsCommandDown = { 0x47e0dd0, 40 }; 
	// Function /Script/Engine.KismetInputLibrary.InputEvent_IsAltDown
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputEvent&> InputEvent_IsAltDown = { 0x47e10d0, 41 }; 
	// Function /Script/Engine.KismetInputLibrary.InputChord_GetDisplayName
	constexpr static const FunctionPointer<UKismetInputLibrary, FText, const FInputChord&> InputChord_GetDisplayName = { 0x47e0a30, 42 }; 
	// Function /Script/Engine.KismetInputLibrary.GetUserIndex
	constexpr static const FunctionPointer<UKismetInputLibrary, int32_t, const FKeyEvent&> GetUserIndex = { 0x47e0710, 43 }; 
	// Function /Script/Engine.KismetInputLibrary.GetKey
	constexpr static const FunctionPointer<UKismetInputLibrary, FKey, const FKeyEvent&> GetKey = { 0x47e0860, 44 }; 
	// Function /Script/Engine.KismetInputLibrary.GetAnalogValue
	constexpr static const FunctionPointer<UKismetInputLibrary, float, const FAnalogInputEvent&> GetAnalogValue = { 0x47e05a0, 45 }; 
	// Function /Script/Engine.KismetInputLibrary.EqualEqual_KeyKey
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FKey, const FKey> EqualEqual_KeyKey = { 0x47e3220, 46 }; 
	// Function /Script/Engine.KismetInputLibrary.EqualEqual_InputChordInputChord
	constexpr static const FunctionPointer<UKismetInputLibrary, bool, const FInputChord, const FInputChord> EqualEqual_InputChordInputChord = { 0x47e2f20, 47 }; 
	// Function /Script/Engine.KismetInputLibrary.CalibrateTilt
	constexpr static const FunctionPointer<UKismetInputLibrary, void> CalibrateTilt = { 0x47e34a0, 48 }; 
};

/// Class /Script/Engine.KismetInternationalizationLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLocale
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, bool, const FString, const bool> SetCurrentLocale = { 0x47e5510, 0 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguageAndLocale
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, bool, const FString, const bool> SetCurrentLanguageAndLocale = { 0x47e51d0, 1 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentLanguage
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, bool, const FString, const bool> SetCurrentLanguage = { 0x47e5820, 2 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentCulture
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, bool, const FString, const bool> SetCurrentCulture = { 0x47e5a00, 3 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.SetCurrentAssetGroupCulture
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, bool, const FName, const FString, const bool> SetCurrentAssetGroupCulture = { 0x47e4fb0, 4 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetSuitableCulture
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, FString, const TArray<FString>&, const FString, const FString> GetSuitableCulture = { 0x47e4440, 5 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetNativeCulture
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, FString, const ELocalizedTextSourceCategory> GetNativeCulture = { 0x47e4b60, 6 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetLocalizedCultures
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, TArray<FString>, const bool, const bool, const bool, const bool> GetLocalizedCultures = { 0x47e4810, 7 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentLocale
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, FString> GetCurrentLocale = { 0x47e53e0, 8 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentLanguage
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, FString> GetCurrentLanguage = { 0x47e56f0, 9 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentCulture
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, FString> GetCurrentCulture = { 0x47e56f0, 10 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCurrentAssetGroupCulture
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, FString, const FName> GetCurrentAssetGroupCulture = { 0x47e4e90, 11 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.GetCultureDisplayName
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, FString, const FString, const bool> GetCultureDisplayName = { 0x47e4180, 12 }; 
	// Function /Script/Engine.KismetInternationalizationLibrary.ClearCurrentAssetGroupCulture
	constexpr static const FunctionPointer<UKismetInternationalizationLibrary, void, const FName, const bool> ClearCurrentAssetGroupCulture = { 0x47e4ce0, 13 }; 
};

/// Class /Script/Engine.KismetMaterialLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetMaterialLibrary.SetVectorParameterValue
	constexpr static const FunctionPointer<UKismetMaterialLibrary, void, const UObject*, const UMaterialParameterCollection*, const FName, const FLinearColor&> SetVectorParameterValue = { 0x47e6970, 0 }; 
	// Function /Script/Engine.KismetMaterialLibrary.SetScalarParameterValue
	constexpr static const FunctionPointer<UKismetMaterialLibrary, void, const UObject*, const UMaterialParameterCollection*, const FName, const float> SetScalarParameterValue = { 0x47e6bd0, 1 }; 
	// Function /Script/Engine.KismetMaterialLibrary.GetVectorParameterValue
	constexpr static const FunctionPointer<UKismetMaterialLibrary, FLinearColor, const UObject*, const UMaterialParameterCollection*, const FName> GetVectorParameterValue = { 0x47e65b0, 2 }; 
	// Function /Script/Engine.KismetMaterialLibrary.GetScalarParameterValue
	constexpr static const FunctionPointer<UKismetMaterialLibrary, float, const UObject*, const UMaterialParameterCollection*, const FName> GetScalarParameterValue = { 0x47e6790, 3 }; 
	// Function /Script/Engine.KismetMaterialLibrary.CreateDynamicMaterialInstance
	constexpr static const FunctionPointer<UKismetMaterialLibrary, UMaterialInstanceDynamic*, const UObject*, const UMaterialInterface*, const FName, const EMIDCreationFlags> CreateDynamicMaterialInstance = { 0x47e62e0, 4 }; 
};

/// Class /Script/Engine.KismetMathLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetMathLibrary.Xor_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> Xor_IntInt = { 0x4827840, 0 }; 
	// Function /Script/Engine.KismetMathLibrary.Xor_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t> Xor_Int64Int64 = { 0x4825630, 1 }; 
	// Function /Script/Engine.KismetMathLibrary.Wrap
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t, const int32_t> Wrap = { 0x4826b70, 2 }; 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_FVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const float> WeightedMovingAverage_FVector = { 0x47e8e50, 3 }; 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_FRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const FRotator, const float> WeightedMovingAverage_FRotator = { 0x47e8b90, 4 }; 
	// Function /Script/Engine.KismetMathLibrary.WeightedMovingAverage_Float
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float> WeightedMovingAverage_Float = { 0x47e90c0, 5 }; 
	// Function /Script/Engine.KismetMathLibrary.VSizeXYSquared
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector> VSizeXYSquared = { 0x4812540, 6 }; 
	// Function /Script/Engine.KismetMathLibrary.VSizeXY
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector> VSizeXY = { 0x4812620, 7 }; 
	// Function /Script/Engine.KismetMathLibrary.VSizeSquared
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector> VSizeSquared = { 0x4812700, 8 }; 
	// Function /Script/Engine.KismetMathLibrary.VSize2DSquared
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector2D> VSize2DSquared = { 0x4818d50, 9 }; 
	// Function /Script/Engine.KismetMathLibrary.VSize2D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector2D> VSize2D = { 0x4818e30, 10 }; 
	// Function /Script/Engine.KismetMathLibrary.VSize
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector> VSize = { 0x48127f0, 11 }; 
	// Function /Script/Engine.KismetMathLibrary.VLerp
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const float> VLerp = { 0x4811240, 12 }; 
	// Function /Script/Engine.KismetMathLibrary.VInterpTo_Constant
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const float, const float> VInterpTo_Constant = { 0x48107a0, 13 }; 
	// Function /Script/Engine.KismetMathLibrary.VInterpTo
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const float, const float> VInterpTo = { 0x4810b10, 14 }; 
	// Function /Script/Engine.KismetMathLibrary.VectorSpringInterp
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const FVectorSpringState&, const float, const float, const float, const float> VectorSpringInterp = { 0x48101a0, 15 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Zero
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector> Vector_Zero = { 0x4818d20, 16 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Up
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector> Vector_Up = { 0x4818c60, 17 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_UnwindEuler
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector&> Vector_UnwindEuler = { 0x48155b0, 18 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_UnitCartesianToSpherical
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector> Vector_UnitCartesianToSpherical = { 0x4813a90, 19 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_ToRadians
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector> Vector_ToRadians = { 0x4813cb0, 20 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_ToDegrees
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector> Vector_ToDegrees = { 0x4813bc0, 21 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_SnappedToGrid
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> Vector_SnappedToGrid = { 0x480fa70, 22 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Set
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector&, const float, const float, const float> Vector_Set = { 0x48183e0, 23 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Right
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector> Vector_Right = { 0x4818c00, 24 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Reciprocal
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector&> Vector_Reciprocal = { 0x4810070, 25 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_ProjectOnToNormal
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> Vector_ProjectOnToNormal = { 0x480f290, 26 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_One
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector> Vector_One = { 0x4818cf0, 27 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_NormalUnsafe
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector&> Vector_NormalUnsafe = { 0x48116b0, 28 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Normalize
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector&, const float> Vector_Normalize = { 0x4811470, 29 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Normal2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> Vector_Normal2D = { 0x4811840, 30 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_MirrorByPlane
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FPlane&> Vector_MirrorByPlane = { 0x480fcd0, 31 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Left
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector> Vector_Left = { 0x4818bd0, 32 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsZero
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector&> Vector_IsZero = { 0x4812290, 33 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsUnit
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector&, const float> Vector_IsUnit = { 0x4811e00, 34 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsUniform
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector&, const float> Vector_IsUniform = { 0x4811fb0, 35 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNormal
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector&> Vector_IsNormal = { 0x4811cf0, 36 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNearlyZero
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector&, const float> Vector_IsNearlyZero = { 0x4812390, 37 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_IsNAN
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector&> Vector_IsNAN = { 0x4812170, 38 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_HeadingAngle
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector> Vector_HeadingAngle = { 0x4814080, 39 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetSignVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector> Vector_GetSignVector = { 0x4814320, 40 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetProjection
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector> Vector_GetProjection = { 0x4814230, 41 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbsMin
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector> Vector_GetAbsMin = { 0x4814820, 42 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbsMax
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector> Vector_GetAbsMax = { 0x4814910, 43 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_GetAbs
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector> Vector_GetAbs = { 0x4814730, 44 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Forward
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector> Vector_Forward = { 0x4818cc0, 45 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Down
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector> Vector_Down = { 0x4818c30, 46 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_DistanceSquared
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector, const FVector> Vector_DistanceSquared = { 0x4812be0, 47 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance2DSquared
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector, const FVector> Vector_Distance2DSquared = { 0x48128e0, 48 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance2D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector, const FVector> Vector_Distance2D = { 0x4812a60, 49 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Distance
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector, const FVector> Vector_Distance = { 0x4812d70, 50 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_CosineAngle2D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector, const FVector> Vector_CosineAngle2D = { 0x4813da0, 51 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_ComponentMin
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> Vector_ComponentMin = { 0x48145b0, 52 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_ComponentMax
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> Vector_ComponentMax = { 0x4814430, 53 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSizeMax2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> Vector_ClampSizeMax2D = { 0x4814bc0, 54 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSizeMax
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> Vector_ClampSizeMax = { 0x4814e20, 55 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_ClampSize2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float, const float> Vector_ClampSize2D = { 0x48150b0, 56 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_BoundedToCube
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> Vector_BoundedToCube = { 0x480f8c0, 57 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_BoundedToBox
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const FVector> Vector_BoundedToBox = { 0x480f440, 58 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Backward
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector> Vector_Backward = { 0x4818c90, 59 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_Assign
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector&, const FVector&> Vector_Assign = { 0x4818660, 60 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector_AddBounded
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector&, const FVector, const float> Vector_AddBounded = { 0x480f670, 61 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Zero
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4> Vector4_Zero = { 0x480d340, 62 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_SizeSquared3
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector4&> Vector4_SizeSquared3 = { 0x480a900, 63 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_SizeSquared
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector4&> Vector4_SizeSquared = { 0x480ab20, 64 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Size3
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector4&> Vector4_Size3 = { 0x480aa10, 65 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Size
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector4&> Vector4_Size = { 0x480ac40, 66 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Set
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector4&, const float, const float, const float, const float> Vector4_Set = { 0x480b710, 67 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_NormalUnsafe3
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FVector4&> Vector4_NormalUnsafe3 = { 0x480a200, 68 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Normalize3
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector4&, const float> Vector4_Normalize3 = { 0x4809f90, 69 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Normal3
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FVector4&, const float> Vector4_Normal3 = { 0x480a3a0, 70 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Negated
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FVector4&> Vector4_Negated = { 0x480bbc0, 71 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_MirrorByVector3
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FVector4&, const FVector4&> Vector4_MirrorByVector3 = { 0x4809d60, 72 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsZero
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector4&> Vector4_IsZero = { 0x480ad60, 73 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsUnit3
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector4&, const float> Vector4_IsUnit3 = { 0x480a740, 74 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNormal3
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector4&> Vector4_IsNormal3 = { 0x480a620, 75 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNearlyZero3
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector4&, const float> Vector4_IsNearlyZero3 = { 0x480ae70, 76 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_IsNAN
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector4&> Vector4_IsNAN = { 0x480b030, 77 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_DotProduct3
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector4&, const FVector4&> Vector4_DotProduct3 = { 0x480b170, 78 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_DotProduct
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector4&, const FVector4&> Vector4_DotProduct = { 0x480b330, 79 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_CrossProduct3
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FVector4&, const FVector4&> Vector4_CrossProduct3 = { 0x480b500, 80 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector4_Assign
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector4&, const FVector4&> Vector4_Assign = { 0x480ba20, 81 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector2DInterpTo_Constant
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const FVector2D, const float, const float> Vector2DInterpTo_Constant = { 0x4819a80, 82 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector2DInterpTo
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const FVector2D, const float, const float> Vector2DInterpTo = { 0x4819db0, 83 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_Zero
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D> Vector2D_Zero = { 0x481cd20, 84 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_Unit45Deg
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D> Vector2D_Unit45Deg = { 0x481cd50, 85 }; 
	// Function /Script/Engine.KismetMathLibrary.Vector2D_One
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D> Vector2D_One = { 0x481cd80, 86 }; 
	// Function /Script/Engine.KismetMathLibrary.VEase
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const float, const TEnumAsByte<EEasingFunc>, const float, const int32_t> VEase = { 0x4810e90, 87 }; 
	// Function /Script/Engine.KismetMathLibrary.UtcNow
	constexpr static const FunctionPointer<UKismetMathLibrary, FDateTime> UtcNow = { 0x47f7220, 88 }; 
	// Function /Script/Engine.KismetMathLibrary.TransformVector4
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FMatrix&, const FVector4&> TransformVector4 = { 0x4809ba0, 89 }; 
	// Function /Script/Engine.KismetMathLibrary.TransformRotation
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FTransform&, const FRotator> TransformRotation = { 0x47ef510, 90 }; 
	// Function /Script/Engine.KismetMathLibrary.TransformLocation
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FTransform&, const FVector> TransformLocation = { 0x47efb50, 91 }; 
	// Function /Script/Engine.KismetMathLibrary.TransformDirection
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FTransform&, const FVector> TransformDirection = { 0x47ef920, 92 }; 
	// Function /Script/Engine.KismetMathLibrary.Transform_Determinant
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FTransform&> Transform_Determinant = { 0x47ed8a0, 93 }; 
	// Function /Script/Engine.KismetMathLibrary.ToSign2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D> ToSign2D = { 0x4818f10, 94 }; 
	// Function /Script/Engine.KismetMathLibrary.ToRounded2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D> ToRounded2D = { 0x4819010, 95 }; 
	// Function /Script/Engine.KismetMathLibrary.ToDirectionAndLength2D
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector2D, const FVector2D&, const float&> ToDirectionAndLength2D = { 0x4819170, 96 }; 
	// Function /Script/Engine.KismetMathLibrary.Today
	constexpr static const FunctionPointer<UKismetMathLibrary, FDateTime> Today = { 0x47f72c0, 97 }; 
	// Function /Script/Engine.KismetMathLibrary.TLerp
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FTransform&, const FTransform&, const float, const TEnumAsByte<ELerpInterpolationMode>> TLerp = { 0x47ee240, 98 }; 
	// Function /Script/Engine.KismetMathLibrary.TInterpTo
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FTransform&, const FTransform&, const float, const float> TInterpTo = { 0x47eda90, 99 }; 
	// Function /Script/Engine.KismetMathLibrary.TimespanZeroValue
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan> TimespanZeroValue = { 0x187a680, 100 }; 
	// Function /Script/Engine.KismetMathLibrary.TimespanRatio
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FTimespan, const FTimespan> TimespanRatio = { 0x47f40a0, 101 }; 
	// Function /Script/Engine.KismetMathLibrary.TimespanMinValue
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan> TimespanMinValue = { 0x47f6df0, 102 }; 
	// Function /Script/Engine.KismetMathLibrary.TimespanMaxValue
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan> TimespanMaxValue = { 0x47f6e20, 103 }; 
	// Function /Script/Engine.KismetMathLibrary.TimespanFromString
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FString, const FTimespan&> TimespanFromString = { 0x47f3ec0, 104 }; 
	// Function /Script/Engine.KismetMathLibrary.TEase
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FTransform&, const FTransform&, const float, const TEnumAsByte<EEasingFunc>, const float, const int32_t> TEase = { 0x47ede00, 105 }; 
	// Function /Script/Engine.KismetMathLibrary.Tan
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Tan = { 0x4822c30, 106 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> Subtract_VectorVector = { 0x48174b0, 107 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorInt
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const int32_t> Subtract_VectorInt = { 0x48171a0, 108 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_VectorFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> Subtract_VectorFloat = { 0x4817320, 109 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector4Vector4
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FVector4&, const FVector4&> Subtract_Vector4Vector4 = { 0x480c8f0, 110 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector2DVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const FVector2D> Subtract_Vector2DVector2D = { 0x481c330, 111 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Vector2DFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const float> Subtract_Vector2DFloat = { 0x481c1d0, 112 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_TimespanTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const FTimespan, const FTimespan> Subtract_TimespanTimespan = { 0x47f5b70, 113 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_QuatQuat
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FQuat&, const FQuat&> Subtract_QuatQuat = { 0x47ffb90, 114 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_LinearColorLinearColor
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const FLinearColor> Subtract_LinearColorLinearColor = { 0x47f95f0, 115 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntPointIntPoint
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint, const FIntPoint, const FIntPoint> Subtract_IntPointIntPoint = { 0x481d8b0, 116 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntPointInt
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint, const FIntPoint, const int32_t> Subtract_IntPointInt = { 0x481d730, 117 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> Subtract_IntInt = { 0x48286d0, 118 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t> Subtract_Int64Int64 = { 0x48264e0, 119 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> Subtract_FloatFloat = { 0x4824290, 120 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_DateTimeTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, FDateTime, const FDateTime, const FTimespan> Subtract_DateTimeTimespan = { 0x47f5b70, 121 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_DateTimeDateTime
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const FDateTime, const FDateTime> Subtract_DateTimeDateTime = { 0x47f5b70, 122 }; 
	// Function /Script/Engine.KismetMathLibrary.Subtract_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, char, const char, const char> Subtract_ByteByte = { 0x48298b0, 123 }; 
	// Function /Script/Engine.KismetMathLibrary.Square
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Square = { 0x48224c0, 124 }; 
	// Function /Script/Engine.KismetMathLibrary.Sqrt
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Sqrt = { 0x4822590, 125 }; 
	// Function /Script/Engine.KismetMathLibrary.Spherical2DToUnitCartesian
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector2D> Spherical2DToUnitCartesian = { 0x48193e0, 126 }; 
	// Function /Script/Engine.KismetMathLibrary.Sin
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Sin = { 0x4822fb0, 127 }; 
	// Function /Script/Engine.KismetMathLibrary.SignOfInteger64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t> SignOfInteger64 = { 0x4825300, 128 }; 
	// Function /Script/Engine.KismetMathLibrary.SignOfInteger
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t> SignOfInteger = { 0x4827520, 129 }; 
	// Function /Script/Engine.KismetMathLibrary.SignOfFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> SignOfFloat = { 0x481ef10, 130 }; 
	// Function /Script/Engine.KismetMathLibrary.SetRandomStreamSeed
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FRandomStream&, const int32_t> SetRandomStreamSeed = { 0x47eb700, 131 }; 
	// Function /Script/Engine.KismetMathLibrary.Set2D
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector2D&, const float, const float> Set2D = { 0x481b1a0, 132 }; 
	// Function /Script/Engine.KismetMathLibrary.SelectVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const bool> SelectVector = { 0x47f1c10, 133 }; 
	// Function /Script/Engine.KismetMathLibrary.SelectTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FTransform&, const FTransform&, const bool> SelectTransform = { 0x47f1770, 134 }; 
	// Function /Script/Engine.KismetMathLibrary.SelectString
	constexpr static const FunctionPointer<UKismetMathLibrary, FString, const FString, const FString, const bool> SelectString = { 0x47f21f0, 135 }; 
	// Function /Script/Engine.KismetMathLibrary.SelectRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const FRotator, const bool> SelectRotator = { 0x47f1c10, 136 }; 
	// Function /Script/Engine.KismetMathLibrary.SelectObject
	constexpr static const FunctionPointer<UKismetMathLibrary, UObject*, const UObject*, const UObject*, const bool> SelectObject = { 0x47f1590, 137 }; 
	// Function /Script/Engine.KismetMathLibrary.SelectInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t, const bool> SelectInt = { 0x47f2020, 138 }; 
	// Function /Script/Engine.KismetMathLibrary.SelectFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const bool> SelectFloat = { 0x47f1e20, 139 }; 
	// Function /Script/Engine.KismetMathLibrary.SelectColor
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const FLinearColor, const bool> SelectColor = { 0x47f1a10, 140 }; 
	// Function /Script/Engine.KismetMathLibrary.SelectClass
	constexpr static const FunctionPointer<UKismetMathLibrary, UClass*, const UClass*, const UClass*, const bool> SelectClass = { 0x47f1590, 141 }; 
	// Function /Script/Engine.KismetMathLibrary.SeedRandomStream
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FRandomStream&> SeedRandomStream = { 0x47eb870, 142 }; 
	// Function /Script/Engine.KismetMathLibrary.SafeDivide
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> SafeDivide = { 0x4820fc0, 143 }; 
	// Function /Script/Engine.KismetMathLibrary.Round64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const float> Round64 = { 0x481f570, 144 }; 
	// Function /Script/Engine.KismetMathLibrary.Round
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const float> Round = { 0x481f910, 145 }; 
	// Function /Script/Engine.KismetMathLibrary.RotatorFromAxisAndAngle
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector, const float> RotatorFromAxisAndAngle = { 0x4817bb0, 146 }; 
	// Function /Script/Engine.KismetMathLibrary.RotateAngleAxis
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float, const FVector> RotateAngleAxis = { 0x48159e0, 147 }; 
	// Function /Script/Engine.KismetMathLibrary.RLerp
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const FRotator, const float, const bool> RLerp = { 0x4806280, 148 }; 
	// Function /Script/Engine.KismetMathLibrary.RInterpTo_Constant
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const FRotator, const float, const float> RInterpTo_Constant = { 0x47ecbf0, 149 }; 
	// Function /Script/Engine.KismetMathLibrary.RInterpTo
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const FRotator, const float, const float> RInterpTo = { 0x47ece90, 150 }; 
	// Function /Script/Engine.KismetMathLibrary.RGBToHSV_Vector
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor, const FLinearColor&> RGBToHSV_Vector = { 0x47fb590, 151 }; 
	// Function /Script/Engine.KismetMathLibrary.RGBToHSV
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor, const float&, const float&, const float&, const float&> RGBToHSV = { 0x47fb710, 152 }; 
	// Function /Script/Engine.KismetMathLibrary.RGBLinearToHSV
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor> RGBLinearToHSV = { 0x47fb4b0, 153 }; 
	// Function /Script/Engine.KismetMathLibrary.ResetVectorSpringState
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVectorSpringState&> ResetVectorSpringState = { 0x47ec560, 154 }; 
	// Function /Script/Engine.KismetMathLibrary.ResetRandomStream
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FRandomStream&> ResetRandomStream = { 0x47eb950, 155 }; 
	// Function /Script/Engine.KismetMathLibrary.ResetFloatSpringState
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FFloatSpringState&> ResetFloatSpringState = { 0x47ec670, 156 }; 
	// Function /Script/Engine.KismetMathLibrary.REase
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const FRotator, const float, const bool, const TEnumAsByte<EEasingFunc>, const float, const int32_t> REase = { 0x4805950, 157 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadiansFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector&, const float, const float, const FRandomStream&> RandomUnitVectorInEllipticalConeInRadiansFromStream = { 0x47eb080, 158 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInRadians
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float, const float> RandomUnitVectorInEllipticalConeInRadians = { 0x480d590, 159 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegreesFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector&, const float, const float, const FRandomStream&> RandomUnitVectorInEllipticalConeInDegreesFromStream = { 0x47eade0, 160 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInEllipticalConeInDegrees
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float, const float> RandomUnitVectorInEllipticalConeInDegrees = { 0x480d360, 161 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadiansFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector&, const float, const FRandomStream&> RandomUnitVectorInConeInRadiansFromStream = { 0x47eb510, 162 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInRadians
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> RandomUnitVectorInConeInRadians = { 0x480d950, 163 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegreesFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector&, const float, const FRandomStream&> RandomUnitVectorInConeInDegreesFromStream = { 0x47eb310, 164 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorInConeInDegrees
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> RandomUnitVectorInConeInDegrees = { 0x480d7b0, 165 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVectorFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FRandomStream&> RandomUnitVectorFromStream = { 0x47ebc40, 166 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomUnitVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector> RandomUnitVector = { 0x480dcd0, 167 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomRotatorFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const bool, const FRandomStream&> RandomRotatorFromStream = { 0x47eba20, 168 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const bool> RandomRotator = { 0x4806a00, 169 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomPointInBoundingBox
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> RandomPointInBoundingBox = { 0x480dae0, 170 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerInRangeFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t, const FRandomStream&> RandomIntegerInRangeFromStream = { 0x47ec170, 171 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerInRange
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> RandomIntegerInRange = { 0x4827260, 172 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomIntegerFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const FRandomStream&> RandomIntegerFromStream = { 0x47ec3b0, 173 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger64InRange
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t> RandomInteger64InRange = { 0x4825030, 174 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t> RandomInteger64 = { 0x48251e0, 175 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomInteger
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t> RandomInteger = { 0x4827400, 176 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatInRangeFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const FRandomStream&> RandomFloatInRangeFromStream = { 0x47ebd30, 177 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatInRange
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> RandomFloatInRange = { 0x48222e0, 178 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomFloatFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FRandomStream&> RandomFloatFromStream = { 0x47ebf60, 179 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float> RandomFloat = { 0x4822480, 180 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolWithWeightFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const float, const FRandomStream&> RandomBoolWithWeightFromStream = { 0x482ab20, 181 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolWithWeight
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const float> RandomBoolWithWeight = { 0x482acf0, 182 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomBoolFromStream
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FRandomStream&> RandomBoolFromStream = { 0x47ec060, 183 }; 
	// Function /Script/Engine.KismetMathLibrary.RandomBool
	constexpr static const FunctionPointer<UKismetMathLibrary, bool> RandomBool = { 0x482ae00, 184 }; 
	// Function /Script/Engine.KismetMathLibrary.RadiansToDegrees
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> RadiansToDegrees = { 0x4822100, 185 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorUp
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FQuat&> Quat_VectorUp = { 0x47fe9d0, 186 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorRight
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FQuat&> Quat_VectorRight = { 0x47feb40, 187 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_VectorForward
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FQuat&> Quat_VectorForward = { 0x47fec90, 188 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_UnrotateVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FQuat&, const FVector&> Quat_UnrotateVector = { 0x47fd4c0, 189 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_SizeSquared
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FQuat&> Quat_SizeSquared = { 0x47fda30, 190 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_Size
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FQuat&> Quat_Size = { 0x47fdb40, 191 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_SetFromEuler
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FQuat&, const FVector&> Quat_SetFromEuler = { 0x47fde30, 192 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_SetComponents
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FQuat&, const float, const float, const float, const float> Quat_SetComponents = { 0x47fdfc0, 193 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_Rotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FQuat&> Quat_Rotator = { 0x47fdc50, 194 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_RotateVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FQuat&, const FVector&> Quat_RotateVector = { 0x47fd780, 195 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_Normalized
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FQuat&, const float> Quat_Normalized = { 0x47fe600, 196 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_Normalize
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FQuat&, const float> Quat_Normalize = { 0x47fe7f0, 197 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_MakeFromEuler
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FVector&> Quat_MakeFromEuler = { 0x47fdd40, 198 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_Log
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FQuat&> Quat_Log = { 0x47fe2c0, 199 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsNormalized
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FQuat&> Quat_IsNormalized = { 0x47ff6e0, 200 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsNonFinite
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FQuat&> Quat_IsNonFinite = { 0x47ff480, 201 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsIdentity
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FQuat&, const float> Quat_IsIdentity = { 0x47ff7f0, 202 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_IsFinite
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FQuat&> Quat_IsFinite = { 0x47ff5b0, 203 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_Inversed
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FQuat&> Quat_Inversed = { 0x47fe3b0, 204 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_Identity
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat> Quat_Identity = { 0x4800350, 205 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetRotationAxis
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FQuat&> Quat_GetRotationAxis = { 0x47fe490, 206 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisZ
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FQuat&> Quat_GetAxisZ = { 0x47fe9d0, 207 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisY
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FQuat&> Quat_GetAxisY = { 0x47feb40, 208 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAxisX
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FQuat&> Quat_GetAxisX = { 0x47fec90, 209 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_GetAngle
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FQuat&> Quat_GetAngle = { 0x47fedd0, 210 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_Exp
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FQuat&> Quat_Exp = { 0x47feed0, 211 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_Euler
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FQuat&> Quat_Euler = { 0x47fefc0, 212 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_EnforceShortestArcWith
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FQuat&, const FQuat&> Quat_EnforceShortestArcWith = { 0x47ff0c0, 213 }; 
	// Function /Script/Engine.KismetMathLibrary.Quat_AngularDistance
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FQuat&, const FQuat&> Quat_AngularDistance = { 0x47ff290, 214 }; 
	// Function /Script/Engine.KismetMathLibrary.ProjectVectorOnToVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> ProjectVectorOnToVector = { 0x480f090, 215 }; 
	// Function /Script/Engine.KismetMathLibrary.ProjectVectorOnToPlane
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> ProjectVectorOnToPlane = { 0x480ec40, 216 }; 
	// Function /Script/Engine.KismetMathLibrary.ProjectPointOnToPlane
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const FVector> ProjectPointOnToPlane = { 0x480ee20, 217 }; 
	// Function /Script/Engine.KismetMathLibrary.PointsAreCoplanar
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const TArray<FVector>&, const float> PointsAreCoplanar = { 0x47ea650, 218 }; 
	// Function /Script/Engine.KismetMathLibrary.PerlinNoise1D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> PerlinNoise1D = { 0x47ead10, 219 }; 
	// Function /Script/Engine.KismetMathLibrary.Percent_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> Percent_IntInt = { 0x4828990, 220 }; 
	// Function /Script/Engine.KismetMathLibrary.Percent_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> Percent_FloatFloat = { 0x47e7490, 221 }; 
	// Function /Script/Engine.KismetMathLibrary.Percent_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, char, const char, const char> Percent_ByteByte = { 0x4829b50, 222 }; 
	// Function /Script/Engine.KismetMathLibrary.Or_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> Or_IntInt = { 0x48276e0, 223 }; 
	// Function /Script/Engine.KismetMathLibrary.Or_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t> Or_Int64Int64 = { 0x48254d0, 224 }; 
	// Function /Script/Engine.KismetMathLibrary.Now
	constexpr static const FunctionPointer<UKismetMathLibrary, FDateTime> Now = { 0x47f7300, 225 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_VectorVector
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector, const FVector> NotEqualExactly_VectorVector = { 0x4816490, 226 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_Vector4Vector4
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector4&, const FVector4&> NotEqualExactly_Vector4Vector4 = { 0x480bf30, 227 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqualExactly_Vector2DVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector2D, const FVector2D> NotEqualExactly_Vector2DVector2D = { 0x481b690, 228 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_VectorVector
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector, const FVector, const float> NotEqual_VectorVector = { 0x4816260, 229 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Vector4Vector4
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector4&, const FVector4&, const float> NotEqual_Vector4Vector4 = { 0x480bcb0, 230 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Vector2DVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector2D, const FVector2D, const float> NotEqual_Vector2DVector2D = { 0x481b480, 231 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_TimespanTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FTimespan, const FTimespan> NotEqual_TimespanTimespan = { 0x47f5610, 232 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_RotatorRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FRotator, const FRotator, const float> NotEqual_RotatorRotator = { 0x4807de0, 233 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_QuatQuat
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FQuat&, const FQuat&, const float> NotEqual_QuatQuat = { 0x47ffe90, 234 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ObjectObject
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const UObject*, const UObject*> NotEqual_ObjectObject = { 0x47f12b0, 235 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_NameName
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FName, const FName> NotEqual_NameName = { 0x47f0d50, 236 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_MatrixMatrix
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FMatrix&, const FMatrix&, const float> NotEqual_MatrixMatrix = { 0x4804670, 237 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_LinearColorLinearColor
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FLinearColor, const FLinearColor> NotEqual_LinearColorLinearColor = { 0x47f9910, 238 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_IntPointIntPoint
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FIntPoint, const FIntPoint> NotEqual_IntPointIntPoint = { 0x481cdb0, 239 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int32_t, const int32_t> NotEqual_IntInt = { 0x4827e30, 240 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int64_t, const int64_t> NotEqual_Int64Int64 = { 0x4825c40, 241 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const float, const float> NotEqual_FloatFloat = { 0x4823840, 242 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_DateTimeDateTime
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FDateTime, const FDateTime> NotEqual_DateTimeDateTime = { 0x47f5610, 243 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ClassClass
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const UClass*, const UClass*> NotEqual_ClassClass = { 0x47f12b0, 244 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const char, const char> NotEqual_ByteByte = { 0x4828e10, 245 }; 
	// Function /Script/Engine.KismetMathLibrary.NotEqual_BoolBool
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const bool, const bool> NotEqual_BoolBool = { 0x482a770, 246 }; 
	// Function /Script/Engine.KismetMathLibrary.Not_PreBool
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const bool> Not_PreBool = { 0x482aa50, 247 }; 
	// Function /Script/Engine.KismetMathLibrary.Not_Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t> Not_Int64 = { 0x4825400, 248 }; 
	// Function /Script/Engine.KismetMathLibrary.Not_Int
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t> Not_Int = { 0x4827610, 249 }; 
	// Function /Script/Engine.KismetMathLibrary.NormalSafe2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const float> NormalSafe2D = { 0x4819870, 250 }; 
	// Function /Script/Engine.KismetMathLibrary.NormalizeToRange
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float> NormalizeToRange = { 0x481ecc0, 251 }; 
	// Function /Script/Engine.KismetMathLibrary.NormalizedDeltaRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const FRotator> NormalizedDeltaRotator = { 0x4805700, 252 }; 
	// Function /Script/Engine.KismetMathLibrary.NormalizeAxis
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> NormalizeAxis = { 0x48054f0, 253 }; 
	// Function /Script/Engine.KismetMathLibrary.Normalize2D
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector2D&, const float> Normalize2D = { 0x48194e0, 254 }; 
	// Function /Script/Engine.KismetMathLibrary.Normal2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D> Normal2D = { 0x4819710, 255 }; 
	// Function /Script/Engine.KismetMathLibrary.Normal
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> Normal = { 0x4811a90, 256 }; 
	// Function /Script/Engine.KismetMathLibrary.NegateVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector> NegateVector = { 0x48169c0, 257 }; 
	// Function /Script/Engine.KismetMathLibrary.NegateRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator> NegateRotator = { 0x4807230, 258 }; 
	// Function /Script/Engine.KismetMathLibrary.Negated2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D&> Negated2D = { 0x481b390, 259 }; 
	// Function /Script/Engine.KismetMathLibrary.NearlyEqual_TransformTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FTransform&, const FTransform&, const float, const float, const float> NearlyEqual_TransformTransform = { 0x47effa0, 260 }; 
	// Function /Script/Engine.KismetMathLibrary.NearlyEqual_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const float, const float, const float> NearlyEqual_FloatFloat = { 0x48239b0, 261 }; 
	// Function /Script/Engine.KismetMathLibrary.MultiplyMultiply_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> MultiplyMultiply_FloatFloat = { 0x4824900, 262 }; 
	// Function /Script/Engine.KismetMathLibrary.MultiplyByPi
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> MultiplyByPi = { 0x481e5b0, 263 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> Multiply_VectorVector = { 0x4817020, 264 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorInt
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const int32_t> Multiply_VectorInt = { 0x4807ad0, 265 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_VectorFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> Multiply_VectorFloat = { 0x4807c50, 266 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector4Vector4
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FVector4&, const FVector4&> Multiply_Vector4Vector4 = { 0x480c720, 267 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector2DVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const FVector2D> Multiply_Vector2DVector2D = { 0x481c070, 268 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Vector2DFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const float> Multiply_Vector2DFloat = { 0x481bf10, 269 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_TimespanFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const FTimespan, const float> Multiply_TimespanFloat = { 0x47f5a10, 270 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_RotatorInt
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const int32_t> Multiply_RotatorInt = { 0x4807ad0, 271 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_RotatorFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const float> Multiply_RotatorFloat = { 0x4807c50, 272 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_QuatQuat
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FQuat&, const FQuat&> Multiply_QuatQuat = { 0x47ff9c0, 273 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_MatrixMatrix
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&, const FMatrix&> Multiply_MatrixMatrix = { 0x4805010, 274 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_MatrixFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&, const float> Multiply_MatrixFloat = { 0x4804b50, 275 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_LinearColorLinearColor
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const FLinearColor> Multiply_LinearColorLinearColor = { 0x47f9460, 276 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_LinearColorFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const float> Multiply_LinearColorFloat = { 0x47f92f0, 277 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntPointIntPoint
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint, const FIntPoint, const FIntPoint> Multiply_IntPointIntPoint = { 0x481d5b0, 278 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntPointInt
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint, const FIntPoint, const int32_t> Multiply_IntPointInt = { 0x481d420, 279 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> Multiply_IntInt = { 0x4828cb0, 280 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_IntFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const int32_t, const float> Multiply_IntFloat = { 0x4824630, 281 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t> Multiply_Int64Int64 = { 0x4826930, 282 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> Multiply_FloatFloat = { 0x48247a0, 283 }; 
	// Function /Script/Engine.KismetMathLibrary.Multiply_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, char, const char, const char> Multiply_ByteByte = { 0x4829e70, 284 }; 
	// Function /Script/Engine.KismetMathLibrary.MirrorVectorByNormal
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> MirrorVectorByNormal = { 0x480fed0, 285 }; 
	// Function /Script/Engine.KismetMathLibrary.MinOfIntArray
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const TArray<int32_t>&, const int32_t&, const int32_t&> MinOfIntArray = { 0x4820ac0, 286 }; 
	// Function /Script/Engine.KismetMathLibrary.MinOfFloatArray
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const TArray<float>&, const int32_t&, const float&> MinOfFloatArray = { 0x4820440, 287 }; 
	// Function /Script/Engine.KismetMathLibrary.MinOfByteArray
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const TArray<char>&, const int32_t&, const char&> MinOfByteArray = { 0x481ff60, 288 }; 
	// Function /Script/Engine.KismetMathLibrary.MinInt64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t> MinInt64 = { 0x4824ec0, 289 }; 
	// Function /Script/Engine.KismetMathLibrary.MinimumAreaRectangle
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const UObject*, const TArray<FVector>&, const FVector&, const FVector&, const FRotator&, const float&, const float&, const bool> MinimumAreaRectangle = { 0x47ea800, 290 }; 
	// Function /Script/Engine.KismetMathLibrary.Min
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> Min = { 0x48270f0, 291 }; 
	// Function /Script/Engine.KismetMathLibrary.MaxOfIntArray
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const TArray<int32_t>&, const int32_t&, const int32_t&> MaxOfIntArray = { 0x4820d40, 292 }; 
	// Function /Script/Engine.KismetMathLibrary.MaxOfFloatArray
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const TArray<float>&, const int32_t&, const float&> MaxOfFloatArray = { 0x4820780, 293 }; 
	// Function /Script/Engine.KismetMathLibrary.MaxOfByteArray
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const TArray<char>&, const int32_t&, const char&> MaxOfByteArray = { 0x48201d0, 294 }; 
	// Function /Script/Engine.KismetMathLibrary.MaxInt64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t> MaxInt64 = { 0x4824d50, 295 }; 
	// Function /Script/Engine.KismetMathLibrary.Max
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> Max = { 0x4826f80, 296 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformVector4
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FMatrix&, const FVector4> Matrix_TransformVector4 = { 0x48044c0, 297 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FMatrix&, const FVector> Matrix_TransformVector = { 0x4803f00, 298 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_TransformPosition
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FMatrix&, const FVector> Matrix_TransformPosition = { 0x48042f0, 299 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ToQuat
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FMatrix&> Matrix_ToQuat = { 0x4801570, 300 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetOrigin
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FMatrix&, const FVector> Matrix_SetOrigin = { 0x4801af0, 301 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetColumn
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FMatrix&, const TEnumAsByte<EMatrixColumns>, const FVector> Matrix_SetColumn = { 0x4801750, 302 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_SetAxis
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FMatrix&, const TEnumAsByte<EAxis>, const FVector> Matrix_SetAxis = { 0x4801c80, 303 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ScaleTranslation
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&, const FVector> Matrix_ScaleTranslation = { 0x4802b70, 304 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_RemoveTranslation
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&> Matrix_RemoveTranslation = { 0x4803060, 305 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_RemoveScaling
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FMatrix&, const float> Matrix_RemoveScaling = { 0x48034e0, 306 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_Mirror
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&, const TEnumAsByte<EAxis>, const TEnumAsByte<EAxis>> Matrix_Mirror = { 0x4800370, 307 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_InverseTransformVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FMatrix&, const FVector> Matrix_InverseTransformVector = { 0x4803ce0, 308 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_InverseTransformPosition
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FMatrix&, const FVector> Matrix_InverseTransformPosition = { 0x48040d0, 309 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_Identity
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix> Matrix_Identity = { 0x48052b0, 310 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetUnitAxis
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FMatrix&, const TEnumAsByte<EAxis>> Matrix_GetUnitAxis = { 0x4802130, 311 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetUnitAxes
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FMatrix&, const FVector&, const FVector&, const FVector&> Matrix_GetUnitAxes = { 0x4801e90, 312 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetTransposed
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&> Matrix_GetTransposed = { 0x4803ab0, 313 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetTransposeAdjoint
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&> Matrix_GetTransposeAdjoint = { 0x4803650, 314 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaleVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FMatrix&, const float> Matrix_GetScaleVector = { 0x4803170, 315 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaledAxis
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FMatrix&, const TEnumAsByte<EAxis>> Matrix_GetScaledAxis = { 0x48025a0, 316 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetScaledAxes
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FMatrix&, const FVector&, const FVector&, const FVector&> Matrix_GetScaledAxes = { 0x48022d0, 317 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetRotDeterminant
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FMatrix&> Matrix_GetRotDeterminant = { 0x4803870, 318 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FMatrix&> Matrix_GetRotator = { 0x4801660, 319 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetOrigin
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FMatrix&> Matrix_GetOrigin = { 0x4805300, 320 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetMaximumAxisScale
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FMatrix&> Matrix_GetMaximumAxisScale = { 0x4802a90, 321 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetMatrixWithoutScale
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&, const float> Matrix_GetMatrixWithoutScale = { 0x4803310, 322 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetInverse
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&> Matrix_GetInverse = { 0x4803760, 323 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumTopPlane
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FMatrix&, const FPlane&> Matrix_GetFrustumTopPlane = { 0x4800870, 324 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumRightPlane
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FMatrix&, const FPlane&> Matrix_GetFrustumRightPlane = { 0x4800b10, 325 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumNearPlane
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FMatrix&, const FPlane&> Matrix_GetFrustumNearPlane = { 0x48012f0, 326 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumLeftPlane
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FMatrix&, const FPlane&> Matrix_GetFrustumLeftPlane = { 0x4800db0, 327 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumFarPlane
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FMatrix&, const FPlane&> Matrix_GetFrustumFarPlane = { 0x4801050, 328 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetFrustumBottomPlane
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FMatrix&, const FPlane&> Matrix_GetFrustumBottomPlane = { 0x48005d0, 329 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetDeterminant
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FMatrix&> Matrix_GetDeterminant = { 0x48039d0, 330 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_GetColumn
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FMatrix&, const TEnumAsByte<EMatrixColumns>> Matrix_GetColumn = { 0x4801950, 331 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ContainsNaN
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FMatrix&> Matrix_ContainsNaN = { 0x4802d50, 332 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ConcatenateTranslation
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&, const FVector> Matrix_ConcatenateTranslation = { 0x4802e30, 333 }; 
	// Function /Script/Engine.KismetMathLibrary.Matrix_ApplyScale
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&, const float> Matrix_ApplyScale = { 0x4802790, 334 }; 
	// Function /Script/Engine.KismetMathLibrary.MapRangeUnclamped
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float, const float, const float> MapRangeUnclamped = { 0x481e980, 335 }; 
	// Function /Script/Engine.KismetMathLibrary.MapRangeClamped
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float, const float, const float> MapRangeClamped = { 0x481e680, 336 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeVector4
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const float, const float, const float, const float> MakeVector4 = { 0x47fd140, 337 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const float, const float> MakeVector2D = { 0x481cbb0, 338 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const float, const float, const float> MakeVector = { 0x48189e0, 339 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FVector, const FRotator, const FVector> MakeTransform = { 0x47f0990, 340 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeTimespan2
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const int32_t, const int32_t, const int32_t, const int32_t, const int32_t> MakeTimespan2 = { 0x47f67b0, 341 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const int32_t, const int32_t, const int32_t, const int32_t, const int32_t> MakeTimespan = { 0x47f6ad0, 342 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZY
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector&, const FVector&> MakeRotFromZY = { 0x4808cf0, 343 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZX
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector&, const FVector&> MakeRotFromZX = { 0x4808e90, 344 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromZ
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector&> MakeRotFromZ = { 0x48096b0, 345 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromYZ
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector&, const FVector&> MakeRotFromYZ = { 0x4809030, 346 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromYX
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector&, const FVector&> MakeRotFromYX = { 0x48091d0, 347 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromY
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector&> MakeRotFromY = { 0x48097b0, 348 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromXZ
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector&, const FVector&> MakeRotFromXZ = { 0x4809370, 349 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromXY
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector&, const FVector&> MakeRotFromXY = { 0x4809510, 350 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotFromX
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector&> MakeRotFromX = { 0x48098b0, 351 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const float, const float, const float> MakeRotator = { 0x48099b0, 352 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRotationFromAxes
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector, const FVector, const FVector> MakeRotationFromAxes = { 0x4808ac0, 353 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRelativeTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FTransform&, const FTransform&> MakeRelativeTransform = { 0x47eea00, 354 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeRandomStream
	constexpr static const FunctionPointer<UKismetMathLibrary, FRandomStream, const int32_t> MakeRandomStream = { 0x47f2610, 355 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeQualifiedFrameTime
	constexpr static const FunctionPointer<UKismetMathLibrary, FQualifiedFrameTime, const FFrameNumber, const FFrameRate, const float> MakeQualifiedFrameTime = { 0x47f3c70, 356 }; 
	// Function /Script/Engine.KismetMathLibrary.MakePulsatingValue
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float> MakePulsatingValue = { 0x481e0c0, 357 }; 
	// Function /Script/Engine.KismetMathLibrary.MakePlaneFromPointAndNormal
	constexpr static const FunctionPointer<UKismetMathLibrary, FPlane, const FVector, const FVector> MakePlaneFromPointAndNormal = { 0x47f8ed0, 358 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeFrameRate
	constexpr static const FunctionPointer<UKismetMathLibrary, FFrameRate, const int32_t, const int32_t> MakeFrameRate = { 0x47f3820, 359 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeDateTime
	constexpr static const FunctionPointer<UKismetMathLibrary, FDateTime, const int32_t, const int32_t, const int32_t, const int32_t, const int32_t, const int32_t, const int32_t> MakeDateTime = { 0x47f87d0, 360 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeColor
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const float, const float, const float, const float> MakeColor = { 0x47fd140, 361 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeBox2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FBox2D, const FVector2D, const FVector2D> MakeBox2D = { 0x47f26f0, 362 }; 
	// Function /Script/Engine.KismetMathLibrary.MakeBox
	constexpr static const FunctionPointer<UKismetMathLibrary, FBox, const FVector, const FVector> MakeBox = { 0x47f2870, 363 }; 
	// Function /Script/Engine.KismetMathLibrary.Loge
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Loge = { 0x48226a0, 364 }; 
	// Function /Script/Engine.KismetMathLibrary.Log
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> Log = { 0x4822770, 365 }; 
	// Function /Script/Engine.KismetMathLibrary.LinePlaneIntersection_OriginNormal
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector&, const FVector&, const FVector, const FVector, const float&, const FVector&> LinePlaneIntersection_OriginNormal = { 0x47e92e0, 366 }; 
	// Function /Script/Engine.KismetMathLibrary.LinePlaneIntersection
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector&, const FVector&, const FPlane&, const float&, const FVector&> LinePlaneIntersection = { 0x47e9770, 367 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColorLerpUsingHSV
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const FLinearColor, const float> LinearColorLerpUsingHSV = { 0x47f9e70, 368 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColorLerp
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const FLinearColor, const float> LinearColorLerp = { 0x47fa090, 369 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Yellow
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor> LinearColor_Yellow = { 0x47fd3e0, 370 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_White
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor> LinearColor_White = { 0x47fd4a0, 371 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Transparent
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor> LinearColor_Transparent = { 0x47fd3c0, 372 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_ToRGBE
	constexpr static const FunctionPointer<UKismetMathLibrary, FColor, const FLinearColor> LinearColor_ToRGBE = { 0x47fb2f0, 373 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_ToNewOpacity
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const float> LinearColor_ToNewOpacity = { 0x47fa910, 374 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetTemperature
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor&, const float> LinearColor_SetTemperature = { 0x47fc1a0, 375 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetRGBA
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor&, const float, const float, const float, const float> LinearColor_SetRGBA = { 0x47fc980, 376 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetRandomHue
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor&> LinearColor_SetRandomHue = { 0x47fc060, 377 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromSRGB
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor&, const FColor&> LinearColor_SetFromSRGB = { 0x47fc4c0, 378 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromPow22
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor&, const FColor&> LinearColor_SetFromPow22 = { 0x47fc310, 379 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_SetFromHSV
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor&, const float, const float, const float, const float> LinearColor_SetFromHSV = { 0x47fc670, 380 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Set
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor&, const FLinearColor> LinearColor_Set = { 0x47fcc80, 381 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Red
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor> LinearColor_Red = { 0x47fd440, 382 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_QuantizeRound
	constexpr static const FunctionPointer<UKismetMathLibrary, FColor, const FLinearColor> LinearColor_QuantizeRound = { 0x47fae60, 383 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Quantize
	constexpr static const FunctionPointer<UKismetMathLibrary, FColor, const FLinearColor> LinearColor_Quantize = { 0x47fb000, 384 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_IsNearEqual
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FLinearColor, const FLinearColor, const float> LinearColor_IsNearEqual = { 0x47f9c30, 385 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Green
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor> LinearColor_Green = { 0x47fd420, 386 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Gray
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor> LinearColor_Gray = { 0x47fd480, 387 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetMin
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FLinearColor> LinearColor_GetMin = { 0x47fa650, 388 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetMax
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FLinearColor> LinearColor_GetMax = { 0x47fa730, 389 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_GetLuminance
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FLinearColor> LinearColor_GetLuminance = { 0x47fa810, 390 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Distance
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FLinearColor, const FLinearColor> LinearColor_Distance = { 0x47faaa0, 391 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Desaturated
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const float> LinearColor_Desaturated = { 0x47fac50, 392 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Blue
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor> LinearColor_Blue = { 0x47fd400, 393 }; 
	// Function /Script/Engine.KismetMathLibrary.LinearColor_Black
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor> LinearColor_Black = { 0x47fd460, 394 }; 
	// Function /Script/Engine.KismetMathLibrary.LessLess_VectorRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FRotator> LessLess_VectorRotator = { 0x4815680, 395 }; 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_TimespanTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FTimespan, const FTimespan> LessEqual_TimespanTimespan = { 0x47f50d0, 396 }; 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int32_t, const int32_t> LessEqual_IntInt = { 0x4828280, 397 }; 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int64_t, const int64_t> LessEqual_Int64Int64 = { 0x4826090, 398 }; 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const float, const float> LessEqual_FloatFloat = { 0x4823e70, 399 }; 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_DateTimeDateTime
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FDateTime, const FDateTime> LessEqual_DateTimeDateTime = { 0x47f50d0, 400 }; 
	// Function /Script/Engine.KismetMathLibrary.LessEqual_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const char, const char> LessEqual_ByteByte = { 0x4829200, 401 }; 
	// Function /Script/Engine.KismetMathLibrary.Less_TimespanTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FTimespan, const FTimespan> Less_TimespanTimespan = { 0x47f5220, 402 }; 
	// Function /Script/Engine.KismetMathLibrary.Less_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int32_t, const int32_t> Less_IntInt = { 0x4828560, 403 }; 
	// Function /Script/Engine.KismetMathLibrary.Less_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int64_t, const int64_t> Less_Int64Int64 = { 0x4826370, 404 }; 
	// Function /Script/Engine.KismetMathLibrary.Less_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const float, const float> Less_FloatFloat = { 0x4824130, 405 }; 
	// Function /Script/Engine.KismetMathLibrary.Less_DateTimeDateTime
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FDateTime, const FDateTime> Less_DateTimeDateTime = { 0x47f5220, 406 }; 
	// Function /Script/Engine.KismetMathLibrary.Less_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const char, const char> Less_ByteByte = { 0x48294a0, 407 }; 
	// Function /Script/Engine.KismetMathLibrary.Lerp
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float> Lerp = { 0x481fd70, 408 }; 
	// Function /Script/Engine.KismetMathLibrary.IsZero2D
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector2D&> IsZero2D = { 0x481a0f0, 409 }; 
	// Function /Script/Engine.KismetMathLibrary.IsPointInBoxWithTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector, const FTransform&, const FVector> IsPointInBoxWithTransform = { 0x47ea090, 410 }; 
	// Function /Script/Engine.KismetMathLibrary.IsPointInBox
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector, const FVector, const FVector> IsPointInBox = { 0x47ea400, 411 }; 
	// Function /Script/Engine.KismetMathLibrary.IsNearlyZero2D
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector2D&, const float> IsNearlyZero2D = { 0x481a1f0, 412 }; 
	// Function /Script/Engine.KismetMathLibrary.IsMorning
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FDateTime> IsMorning = { 0x47f7840, 413 }; 
	// Function /Script/Engine.KismetMathLibrary.IsLeapYear
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int32_t> IsLeapYear = { 0x47f73d0, 414 }; 
	// Function /Script/Engine.KismetMathLibrary.IsAfternoon
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FDateTime> IsAfternoon = { 0x47f7950, 415 }; 
	// Function /Script/Engine.KismetMathLibrary.InvertTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FTransform&> InvertTransform = { 0x47ee580, 416 }; 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformRotation
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FTransform&, const FRotator> InverseTransformRotation = { 0x47eec30, 417 }; 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformLocation
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FTransform&, const FVector> InverseTransformLocation = { 0x47ef270, 418 }; 
	// Function /Script/Engine.KismetMathLibrary.InverseTransformDirection
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FTransform&, const FVector> InverseTransformDirection = { 0x47ef040, 419 }; 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Zero
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint> IntPoint_Zero = { 0x47b1c10, 420 }; 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Up
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint> IntPoint_Up = { 0x481de70, 421 }; 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Right
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint> IntPoint_Right = { 0x481de20, 422 }; 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_One
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint> IntPoint_One = { 0x481dea0, 423 }; 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Left
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint> IntPoint_Left = { 0x481de40, 424 }; 
	// Function /Script/Engine.KismetMathLibrary.IntPoint_Down
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint> IntPoint_Down = { 0x481ddf0, 425 }; 
	// Function /Script/Engine.KismetMathLibrary.InRange_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int32_t, const int32_t, const int32_t, const bool, const bool> InRange_IntInt = { 0x4827b00, 426 }; 
	// Function /Script/Engine.KismetMathLibrary.InRange_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int64_t, const int64_t, const int64_t, const bool, const bool> InRange_Int64Int64 = { 0x48258f0, 427 }; 
	// Function /Script/Engine.KismetMathLibrary.InRange_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const float, const float, const float, const bool, const bool> InRange_FloatFloat = { 0x48234f0, 428 }; 
	// Function /Script/Engine.KismetMathLibrary.Hypotenuse
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> Hypotenuse = { 0x4823320, 429 }; 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGBLinear
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor> HSVToRGBLinear = { 0x47fba70, 430 }; 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGB_Vector
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor, const FLinearColor&> HSVToRGB_Vector = { 0x47fbb50, 431 }; 
	// Function /Script/Engine.KismetMathLibrary.HSVToRGB
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const float, const float, const float, const float> HSVToRGB = { 0x47fbcd0, 432 }; 
	// Function /Script/Engine.KismetMathLibrary.GridSnap_Float
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> GridSnap_Float = { 0x4823150, 433 }; 
	// Function /Script/Engine.KismetMathLibrary.GreaterGreater_VectorRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FRotator> GreaterGreater_VectorRotator = { 0x4815d00, 434 }; 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_TimespanTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FTimespan, const FTimespan> GreaterEqual_TimespanTimespan = { 0x47f5370, 435 }; 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int32_t, const int32_t> GreaterEqual_IntInt = { 0x4828110, 436 }; 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int64_t, const int64_t> GreaterEqual_Int64Int64 = { 0x4825f20, 437 }; 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const float, const float> GreaterEqual_FloatFloat = { 0x4823d10, 438 }; 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_DateTimeDateTime
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FDateTime, const FDateTime> GreaterEqual_DateTimeDateTime = { 0x47f5370, 439 }; 
	// Function /Script/Engine.KismetMathLibrary.GreaterEqual_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const char, const char> GreaterEqual_ByteByte = { 0x48290b0, 440 }; 
	// Function /Script/Engine.KismetMathLibrary.Greater_TimespanTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FTimespan, const FTimespan> Greater_TimespanTimespan = { 0x47f54c0, 441 }; 
	// Function /Script/Engine.KismetMathLibrary.Greater_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int32_t, const int32_t> Greater_IntInt = { 0x48283f0, 442 }; 
	// Function /Script/Engine.KismetMathLibrary.Greater_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int64_t, const int64_t> Greater_Int64Int64 = { 0x4826200, 443 }; 
	// Function /Script/Engine.KismetMathLibrary.Greater_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const float, const float> Greater_FloatFloat = { 0x4823fd0, 444 }; 
	// Function /Script/Engine.KismetMathLibrary.Greater_DateTimeDateTime
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FDateTime, const FDateTime> Greater_DateTimeDateTime = { 0x47f54c0, 445 }; 
	// Function /Script/Engine.KismetMathLibrary.Greater_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const char, const char> Greater_ByteByte = { 0x4829350, 446 }; 
	// Function /Script/Engine.KismetMathLibrary.GetYear
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FDateTime> GetYear = { 0x47f7a60, 447 }; 
	// Function /Script/Engine.KismetMathLibrary.GetYawPitchFromVector
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector, const float&, const float&> GetYawPitchFromVector = { 0x48134d0, 448 }; 
	// Function /Script/Engine.KismetMathLibrary.GetVectorArrayAverage
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const TArray<FVector>&> GetVectorArrayAverage = { 0x4812ff0, 449 }; 
	// Function /Script/Engine.KismetMathLibrary.GetUpVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FRotator> GetUpVector = { 0x4807030, 450 }; 
	// Function /Script/Engine.KismetMathLibrary.GetTotalSeconds
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FTimespan> GetTotalSeconds = { 0x47f4690, 451 }; 
	// Function /Script/Engine.KismetMathLibrary.GetTotalMinutes
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FTimespan> GetTotalMinutes = { 0x47f4770, 452 }; 
	// Function /Script/Engine.KismetMathLibrary.GetTotalMilliseconds
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FTimespan> GetTotalMilliseconds = { 0x47f4850, 453 }; 
	// Function /Script/Engine.KismetMathLibrary.GetTotalHours
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FTimespan> GetTotalHours = { 0x47f4930, 454 }; 
	// Function /Script/Engine.KismetMathLibrary.GetTotalDays
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FTimespan> GetTotalDays = { 0x47f4a10, 455 }; 
	// Function /Script/Engine.KismetMathLibrary.GetTimeOfDay
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const FDateTime> GetTimeOfDay = { 0x47f7b40, 456 }; 
	// Function /Script/Engine.KismetMathLibrary.GetTAU
	constexpr static const FunctionPointer<UKismetMathLibrary, float> GetTAU = { 0x48222a0, 457 }; 
	// Function /Script/Engine.KismetMathLibrary.GetSlopeDegreeAngles
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector&, const FVector&, const FVector&, const float&, const float&> GetSlopeDegreeAngles = { 0x47e9bd0, 458 }; 
	// Function /Script/Engine.KismetMathLibrary.GetSeconds
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FTimespan> GetSeconds = { 0x47f4af0, 459 }; 
	// Function /Script/Engine.KismetMathLibrary.GetSecond
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FDateTime> GetSecond = { 0x47f4af0, 460 }; 
	// Function /Script/Engine.KismetMathLibrary.GetRotated2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const float> GetRotated2D = { 0x481a3a0, 461 }; 
	// Function /Script/Engine.KismetMathLibrary.GetRightVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FRotator> GetRightVector = { 0x4807130, 462 }; 
	// Function /Script/Engine.KismetMathLibrary.GetReflectionVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> GetReflectionVector = { 0x480fed0, 463 }; 
	// Function /Script/Engine.KismetMathLibrary.GetPointDistanceToSegment
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector, const FVector, const FVector> GetPointDistanceToSegment = { 0x480df30, 464 }; 
	// Function /Script/Engine.KismetMathLibrary.GetPointDistanceToLine
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector, const FVector, const FVector> GetPointDistanceToLine = { 0x480dd10, 465 }; 
	// Function /Script/Engine.KismetMathLibrary.GetPI
	constexpr static const FunctionPointer<UKismetMathLibrary, float> GetPI = { 0x48222c0, 466 }; 
	// Function /Script/Engine.KismetMathLibrary.GetMonth
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FDateTime> GetMonth = { 0x47f7c20, 467 }; 
	// Function /Script/Engine.KismetMathLibrary.GetMinutes
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FTimespan> GetMinutes = { 0x47f4c00, 468 }; 
	// Function /Script/Engine.KismetMathLibrary.GetMinute
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FDateTime> GetMinute = { 0x47f4c00, 469 }; 
	// Function /Script/Engine.KismetMathLibrary.GetMinElement
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector> GetMinElement = { 0x4814ae0, 470 }; 
	// Function /Script/Engine.KismetMathLibrary.GetMin2D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector2D> GetMin2D = { 0x481a690, 471 }; 
	// Function /Script/Engine.KismetMathLibrary.GetMilliseconds
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FTimespan> GetMilliseconds = { 0x47f4d10, 472 }; 
	// Function /Script/Engine.KismetMathLibrary.GetMillisecond
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FDateTime> GetMillisecond = { 0x47f7d00, 473 }; 
	// Function /Script/Engine.KismetMathLibrary.GetMaxElement
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector> GetMaxElement = { 0x4814a00, 474 }; 
	// Function /Script/Engine.KismetMathLibrary.GetMax2D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector2D> GetMax2D = { 0x481a760, 475 }; 
	// Function /Script/Engine.KismetMathLibrary.GetHours
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FTimespan> GetHours = { 0x47f4e20, 476 }; 
	// Function /Script/Engine.KismetMathLibrary.GetHour12
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FDateTime> GetHour12 = { 0x47f7e10, 477 }; 
	// Function /Script/Engine.KismetMathLibrary.GetHour
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FDateTime> GetHour = { 0x47f4e20, 478 }; 
	// Function /Script/Engine.KismetMathLibrary.GetForwardVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FRotator> GetForwardVector = { 0x4806f40, 479 }; 
	// Function /Script/Engine.KismetMathLibrary.GetDuration
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const FTimespan> GetDuration = { 0x47f4f20, 480 }; 
	// Function /Script/Engine.KismetMathLibrary.GetDirectionUnitVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> GetDirectionUnitVector = { 0x4813830, 481 }; 
	// Function /Script/Engine.KismetMathLibrary.GetDays
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FTimespan> GetDays = { 0x47f4ff0, 482 }; 
	// Function /Script/Engine.KismetMathLibrary.GetDayOfYear
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FDateTime> GetDayOfYear = { 0x47f7f40, 483 }; 
	// Function /Script/Engine.KismetMathLibrary.GetDay
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const FDateTime> GetDay = { 0x47f8020, 484 }; 
	// Function /Script/Engine.KismetMathLibrary.GetDate
	constexpr static const FunctionPointer<UKismetMathLibrary, FDateTime, const FDateTime> GetDate = { 0x47f8100, 485 }; 
	// Function /Script/Engine.KismetMathLibrary.GetAzimuthAndElevation
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector, const FTransform&, const float&, const float&> GetAzimuthAndElevation = { 0x48131e0, 486 }; 
	// Function /Script/Engine.KismetMathLibrary.GetAxes
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FRotator, const FVector&, const FVector&, const FVector&> GetAxes = { 0x4806b50, 487 }; 
	// Function /Script/Engine.KismetMathLibrary.GetAbsMax2D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector2D> GetAbsMax2D = { 0x481a830, 488 }; 
	// Function /Script/Engine.KismetMathLibrary.GetAbs2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D> GetAbs2D = { 0x481a910, 489 }; 
	// Function /Script/Engine.KismetMathLibrary.FWrap
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float> FWrap = { 0x4821160, 490 }; 
	// Function /Script/Engine.KismetMathLibrary.FTruncVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntVector, const FVector&> FTruncVector = { 0x4812f00, 491 }; 
	// Function /Script/Engine.KismetMathLibrary.FTrunc64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const float> FTrunc64 = { 0x481f390, 492 }; 
	// Function /Script/Engine.KismetMathLibrary.FTrunc
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const float> FTrunc = { 0x481f760, 493 }; 
	// Function /Script/Engine.KismetMathLibrary.FromSeconds
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const float> FromSeconds = { 0x47f4230, 494 }; 
	// Function /Script/Engine.KismetMathLibrary.FromMinutes
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const float> FromMinutes = { 0x47f4310, 495 }; 
	// Function /Script/Engine.KismetMathLibrary.FromMilliseconds
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const float> FromMilliseconds = { 0x47f43f0, 496 }; 
	// Function /Script/Engine.KismetMathLibrary.FromHours
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const float> FromHours = { 0x47f44d0, 497 }; 
	// Function /Script/Engine.KismetMathLibrary.FromDays
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const float> FromDays = { 0x47f45b0, 498 }; 
	// Function /Script/Engine.KismetMathLibrary.Fraction
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Fraction = { 0x4824550, 499 }; 
	// Function /Script/Engine.KismetMathLibrary.FMod
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const float, const float, const float&> FMod = { 0x481f030, 500 }; 
	// Function /Script/Engine.KismetMathLibrary.FMin
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> FMin = { 0x48216e0, 501 }; 
	// Function /Script/Engine.KismetMathLibrary.FMax
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> FMax = { 0x4821580, 502 }; 
	// Function /Script/Engine.KismetMathLibrary.FloatSpringInterp
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const FFloatSpringState&, const float, const float, const float, const float> FloatSpringInterp = { 0x47ec740, 503 }; 
	// Function /Script/Engine.KismetMathLibrary.FixedTurn
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float> FixedTurn = { 0x481ded0, 504 }; 
	// Function /Script/Engine.KismetMathLibrary.FInterpTo_Constant
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float, const float> FInterpTo_Constant = { 0x47ed130, 505 }; 
	// Function /Script/Engine.KismetMathLibrary.FInterpTo
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float, const float> FInterpTo = { 0x47ed3e0, 506 }; 
	// Function /Script/Engine.KismetMathLibrary.FInterpEaseInOut
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float, const float> FInterpEaseInOut = { 0x481e2e0, 507 }; 
	// Function /Script/Engine.KismetMathLibrary.FindNearestPointsOnLineSegments
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector, const FVector, const FVector, const FVector, const FVector&, const FVector&> FindNearestPointsOnLineSegments = { 0x480e890, 508 }; 
	// Function /Script/Engine.KismetMathLibrary.FindLookAtRotation
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector&, const FVector&> FindLookAtRotation = { 0x48088f0, 509 }; 
	// Function /Script/Engine.KismetMathLibrary.FindClosestPointOnSegment
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const FVector> FindClosestPointOnSegment = { 0x480e5b0, 510 }; 
	// Function /Script/Engine.KismetMathLibrary.FindClosestPointOnLine
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const FVector> FindClosestPointOnLine = { 0x480e260, 511 }; 
	// Function /Script/Engine.KismetMathLibrary.FFloor64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const float> FFloor64 = { 0x481f460, 512 }; 
	// Function /Script/Engine.KismetMathLibrary.FFloor
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const float> FFloor = { 0x481f830, 513 }; 
	// Function /Script/Engine.KismetMathLibrary.FClamp
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float> FClamp = { 0x4821380, 514 }; 
	// Function /Script/Engine.KismetMathLibrary.FCeil64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const float> FCeil64 = { 0x481f280, 515 }; 
	// Function /Script/Engine.KismetMathLibrary.FCeil
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const float> FCeil = { 0x481f680, 516 }; 
	// Function /Script/Engine.KismetMathLibrary.Exp
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Exp = { 0x4822920, 517 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_VectorVector
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector, const FVector> EqualExactly_VectorVector = { 0x4816840, 518 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_Vector4Vector4
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector4&, const FVector4&> EqualExactly_Vector4Vector4 = { 0x480c380, 519 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualExactly_Vector2DVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector2D, const FVector2D> EqualExactly_Vector2DVector2D = { 0x481ba20, 520 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_VectorVector
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector, const FVector, const float> EqualEqual_VectorVector = { 0x4816610, 521 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Vector4Vector4
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector4&, const FVector4&, const float> EqualEqual_Vector4Vector4 = { 0x480c100, 522 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Vector2DVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FVector2D, const FVector2D, const float> EqualEqual_Vector2DVector2D = { 0x481b810, 523 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_TransformTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FTransform&, const FTransform&> EqualEqual_TransformTransform = { 0x47f03c0, 524 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_TimespanTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FTimespan, const FTimespan> EqualEqual_TimespanTimespan = { 0x47f5760, 525 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_RotatorRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FRotator, const FRotator, const float> EqualEqual_RotatorRotator = { 0x48080b0, 526 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_QuatQuat
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FQuat&, const FQuat&, const float> EqualEqual_QuatQuat = { 0x48000f0, 527 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ObjectObject
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const UObject*, const UObject*> EqualEqual_ObjectObject = { 0x47f1420, 528 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_NameName
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FName, const FName> EqualEqual_NameName = { 0x47f0ec0, 529 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_MatrixMatrix
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FMatrix&, const FMatrix&, const float> EqualEqual_MatrixMatrix = { 0x48048e0, 530 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_LinearColorLinearColor
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FLinearColor, const FLinearColor> EqualEqual_LinearColorLinearColor = { 0x47f9aa0, 531 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int32_t, const int32_t> EqualEqual_IntInt = { 0x4827fa0, 532 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int64_t, const int64_t> EqualEqual_Int64Int64 = { 0x4825db0, 533 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const float, const float> EqualEqual_FloatFloat = { 0x4823ba0, 534 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_DateTimeDateTime
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FDateTime, const FDateTime> EqualEqual_DateTimeDateTime = { 0x47f5760, 535 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ClassClass
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const UClass*, const UClass*> EqualEqual_ClassClass = { 0x47f1420, 536 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const char, const char> EqualEqual_ByteByte = { 0x4828f60, 537 }; 
	// Function /Script/Engine.KismetMathLibrary.EqualEqual_BoolBool
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const bool, const bool> EqualEqual_BoolBool = { 0x482a8e0, 538 }; 
	// Function /Script/Engine.KismetMathLibrary.Equal_IntPointIntPoint
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FIntPoint, const FIntPoint> Equal_IntPointIntPoint = { 0x481cf30, 539 }; 
	// Function /Script/Engine.KismetMathLibrary.Ease
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float, const TEnumAsByte<EEasingFunc>, const float, const int32_t> Ease = { 0x481f9f0, 540 }; 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector, const float, const float, const float> DynamicWeightedMovingAverage_FVector = { 0x47e84f0, 541 }; 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_FRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const FRotator, const float, const float, const float> DynamicWeightedMovingAverage_FRotator = { 0x47e8050, 542 }; 
	// Function /Script/Engine.KismetMathLibrary.DynamicWeightedMovingAverage_Float
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float, const float, const float> DynamicWeightedMovingAverage_Float = { 0x47e8890, 543 }; 
	// Function /Script/Engine.KismetMathLibrary.DotProduct2D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector2D, const FVector2D> DotProduct2D = { 0x481a9f0, 544 }; 
	// Function /Script/Engine.KismetMathLibrary.Dot_VectorVector
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector, const FVector> Dot_VectorVector = { 0x48160e0, 545 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> Divide_VectorVector = { 0x4816e40, 546 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorInt
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const int32_t> Divide_VectorInt = { 0x4816ab0, 547 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_VectorFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> Divide_VectorFloat = { 0x4816c80, 548 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector4Vector4
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FVector4&, const FVector4&> Divide_Vector4Vector4 = { 0x480c550, 549 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector2dVector2d
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const FVector2D> Divide_Vector2dVector2d = { 0x481bd60, 550 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_Vector2DFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const float> Divide_Vector2DFloat = { 0x481bba0, 551 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_TimespanFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const FTimespan, const float> Divide_TimespanFloat = { 0x47f58b0, 552 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_LinearColorLinearColor
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const FLinearColor> Divide_LinearColorLinearColor = { 0x47f9160, 553 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntPointIntPoint
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint, const FIntPoint, const FIntPoint> Divide_IntPointIntPoint = { 0x481d260, 554 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntPointInt
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint, const FIntPoint, const int32_t> Divide_IntPointInt = { 0x481d0b0, 555 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> Divide_IntInt = { 0x4828b20, 556 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t> Divide_Int64Int64 = { 0x48267a0, 557 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> Divide_FloatFloat = { 0x47e7280, 558 }; 
	// Function /Script/Engine.KismetMathLibrary.Divide_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, char, const char, const char> Divide_ByteByte = { 0x4829ce0, 559 }; 
	// Function /Script/Engine.KismetMathLibrary.DistanceSquared2D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector2D, const FVector2D> DistanceSquared2D = { 0x481ab50, 560 }; 
	// Function /Script/Engine.KismetMathLibrary.Distance2D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector2D, const FVector2D> Distance2D = { 0x481acc0, 561 }; 
	// Function /Script/Engine.KismetMathLibrary.DegTan
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> DegTan = { 0x4821c80, 562 }; 
	// Function /Script/Engine.KismetMathLibrary.DegSin
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> DegSin = { 0x4822020, 563 }; 
	// Function /Script/Engine.KismetMathLibrary.DegreesToRadians
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> DegreesToRadians = { 0x48221d0, 564 }; 
	// Function /Script/Engine.KismetMathLibrary.DegCos
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> DegCos = { 0x4821e50, 565 }; 
	// Function /Script/Engine.KismetMathLibrary.DegAtan2
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> DegAtan2 = { 0x4821a30, 566 }; 
	// Function /Script/Engine.KismetMathLibrary.DegAtan
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> DegAtan = { 0x4821ba0, 567 }; 
	// Function /Script/Engine.KismetMathLibrary.DegAsin
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> DegAsin = { 0x4821f30, 568 }; 
	// Function /Script/Engine.KismetMathLibrary.DegAcos
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> DegAcos = { 0x4821d60, 569 }; 
	// Function /Script/Engine.KismetMathLibrary.DaysInYear
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t> DaysInYear = { 0x47f7500, 570 }; 
	// Function /Script/Engine.KismetMathLibrary.DaysInMonth
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> DaysInMonth = { 0x47f7630, 571 }; 
	// Function /Script/Engine.KismetMathLibrary.DateTimeMinValue
	constexpr static const FunctionPointer<UKismetMathLibrary, FDateTime> DateTimeMinValue = { 0x187a680, 572 }; 
	// Function /Script/Engine.KismetMathLibrary.DateTimeMaxValue
	constexpr static const FunctionPointer<UKismetMathLibrary, FDateTime> DateTimeMaxValue = { 0x47f73a0, 573 }; 
	// Function /Script/Engine.KismetMathLibrary.DateTimeFromString
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FString, const FDateTime&> DateTimeFromString = { 0x47f6e50, 574 }; 
	// Function /Script/Engine.KismetMathLibrary.DateTimeFromIsoString
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const FString, const FDateTime&> DateTimeFromIsoString = { 0x47f7030, 575 }; 
	// Function /Script/Engine.KismetMathLibrary.CrossProduct2D
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const FVector2D, const FVector2D> CrossProduct2D = { 0x481ae30, 576 }; 
	// Function /Script/Engine.KismetMathLibrary.Cross_VectorVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> Cross_VectorVector = { 0x4815f20, 577 }; 
	// Function /Script/Engine.KismetMathLibrary.CreateVectorFromYawPitch
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const float, const float, const float> CreateVectorFromYawPitch = { 0x48187e0, 578 }; 
	// Function /Script/Engine.KismetMathLibrary.Cos
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Cos = { 0x4822df0, 579 }; 
	// Function /Script/Engine.KismetMathLibrary.ConvertTransformToRelative
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FTransform&, const FTransform&> ConvertTransformToRelative = { 0x47ee7d0, 580 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector> Conv_VectorToVector2D = { 0x4817e80, 581 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FVector> Conv_VectorToTransform = { 0x4817f50, 582 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector> Conv_VectorToRotator = { 0x4817d40, 583 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToQuaternion
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FVector> Conv_VectorToQuaternion = { 0x4817ac0, 584 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_VectorToLinearColor
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FVector> Conv_VectorToLinearColor = { 0x4818040, 585 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector4&> Conv_Vector4ToVector = { 0x480cee0, 586 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FVector4&> Conv_Vector4ToRotator = { 0x480cd90, 587 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector4ToQuaternion
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FVector4&> Conv_Vector4ToQuaternion = { 0x480cc90, 588 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector2DToVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector2D, const float> Conv_Vector2DToVector = { 0x481c850, 589 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_Vector2DToIntPoint
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint, const FVector2D> Conv_Vector2DToIntPoint = { 0x481c750, 590 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_TransformToMatrix
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FTransform&> Conv_TransformToMatrix = { 0x47ed6c0, 591 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_RotatorToVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FRotator> Conv_RotatorToVector = { 0x4806f40, 592 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_RotatorToTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FRotator&> Conv_RotatorToTransform = { 0x4806e40, 593 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_MatrixToTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FMatrix&> Conv_MatrixToTransform = { 0x48053f0, 594 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_MatrixToRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FMatrix&> Conv_MatrixToRotator = { 0x4801660, 595 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_LinearColorToVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FLinearColor> Conv_LinearColorToVector = { 0x47fb3d0, 596 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_LinearColorToColor
	constexpr static const FunctionPointer<UKismetMathLibrary, FColor, const FLinearColor, const bool> Conv_LinearColorToColor = { 0x47fb170, 597 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntVectorToVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FIntVector&> Conv_IntVectorToVector = { 0x47f2ae0, 598 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToIntVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntVector, const int32_t> Conv_IntToIntVector = { 0x47f3060, 599 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToInt64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int32_t> Conv_IntToInt64 = { 0x47f33a0, 600 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const int32_t> Conv_IntToFloat = { 0x47f3470, 601 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToByte
	constexpr static const FunctionPointer<UKismetMathLibrary, char, const int32_t> Conv_IntToByte = { 0x47f32d0, 602 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntToBool
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const int32_t> Conv_IntToBool = { 0x47f2f90, 603 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_IntPointToVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FIntPoint> Conv_IntPointToVector2D = { 0x481dd10, 604 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_Int64ToInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int64_t> Conv_Int64ToInt = { 0x47f3200, 605 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_Int64ToByte
	constexpr static const FunctionPointer<UKismetMathLibrary, char, const int64_t> Conv_Int64ToByte = { 0x47f3130, 606 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_FloatToVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const float> Conv_FloatToVector = { 0x47f2a10, 607 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_FloatToLinearColor
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const float> Conv_FloatToLinearColor = { 0x47fbf80, 608 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_ColorToLinearColor
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FColor> Conv_ColorToLinearColor = { 0x47f2bf0, 609 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_ByteToInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const char> Conv_ByteToInt = { 0x47f2d10, 610 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_ByteToFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const char> Conv_ByteToFloat = { 0x47f3540, 611 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const bool> Conv_BoolToInt = { 0x47f2ec0, 612 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const bool> Conv_BoolToFloat = { 0x47f2de0, 613 }; 
	// Function /Script/Engine.KismetMathLibrary.Conv_BoolToByte
	constexpr static const FunctionPointer<UKismetMathLibrary, char, const bool> Conv_BoolToByte = { 0x165e310, 614 }; 
	// Function /Script/Engine.KismetMathLibrary.ComposeTransforms
	constexpr static const FunctionPointer<UKismetMathLibrary, FTransform, const FTransform&, const FTransform&> ComposeTransforms = { 0x47efd80, 615 }; 
	// Function /Script/Engine.KismetMathLibrary.ComposeRotators
	constexpr static const FunctionPointer<UKismetMathLibrary, FRotator, const FRotator, const FRotator> ComposeRotators = { 0x48074f0, 616 }; 
	// Function /Script/Engine.KismetMathLibrary.ClassIsChildOf
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const UClass*, const UClass*> ClassIsChildOf = { 0x47f1030, 617 }; 
	// Function /Script/Engine.KismetMathLibrary.ClampVectorSize
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float, const float> ClampVectorSize = { 0x4815320, 618 }; 
	// Function /Script/Engine.KismetMathLibrary.ClampInt64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t, const int64_t> ClampInt64 = { 0x4824b50, 619 }; 
	// Function /Script/Engine.KismetMathLibrary.ClampAxis
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> ClampAxis = { 0x4805600, 620 }; 
	// Function /Script/Engine.KismetMathLibrary.ClampAxes2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const float, const float> ClampAxes2D = { 0x481af90, 621 }; 
	// Function /Script/Engine.KismetMathLibrary.ClampAngle
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float, const float> ClampAngle = { 0x4821840, 622 }; 
	// Function /Script/Engine.KismetMathLibrary.Clamp
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t, const int32_t> Clamp = { 0x4826d80, 623 }; 
	// Function /Script/Engine.KismetMathLibrary.CInterpTo
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const FLinearColor, const float, const float> CInterpTo = { 0x47fa2d0, 624 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakVector4
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector4&, const float&, const float&, const float&, const float&> BreakVector4 = { 0x480cfe0, 625 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector2D, const float&, const float&> BreakVector2D = { 0x481c9b0, 626 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakVector
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FVector, const float&, const float&, const float&> BreakVector = { 0x4818140, 627 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakTransform
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FTransform&, const FVector&, const FRotator&, const FVector&> BreakTransform = { 0x47f0650, 628 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakTimespan2
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FTimespan, const int32_t&, const int32_t&, const int32_t&, const int32_t&, const int32_t&> BreakTimespan2 = { 0x47f5e10, 629 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FTimespan, const int32_t&, const int32_t&, const int32_t&, const int32_t&, const int32_t&> BreakTimespan = { 0x47f62e0, 630 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakRotIntoAxes
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FRotator&, const FVector&, const FVector&, const FVector&> BreakRotIntoAxes = { 0x4808380, 631 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakRotator
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FRotator, const float&, const float&, const float&> BreakRotator = { 0x4808650, 632 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakRandomStream
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FRandomStream&, const int32_t&> BreakRandomStream = { 0x47f2490, 633 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakQualifiedFrameTime
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FQualifiedFrameTime&, const FFrameNumber&, const FFrameRate&, const float&> BreakQualifiedFrameTime = { 0x47f39a0, 634 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakFrameRate
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FFrameRate&, const int32_t&, const int32_t&> BreakFrameRate = { 0x47f3610, 635 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakDateTime
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FDateTime, const int32_t&, const int32_t&, const int32_t&, const int32_t&, const int32_t&, const int32_t&, const int32_t&> BreakDateTime = { 0x47f81e0, 636 }; 
	// Function /Script/Engine.KismetMathLibrary.BreakColor
	constexpr static const FunctionPointer<UKismetMathLibrary, void, const FLinearColor, const float&, const float&, const float&, const float&> BreakColor = { 0x47fcdf0, 637 }; 
	// Function /Script/Engine.KismetMathLibrary.BooleanXOR
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const bool, const bool> BooleanXOR = { 0x482a150, 638 }; 
	// Function /Script/Engine.KismetMathLibrary.BooleanOR
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const bool, const bool> BooleanOR = { 0x482a2c0, 639 }; 
	// Function /Script/Engine.KismetMathLibrary.BooleanNOR
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const bool, const bool> BooleanNOR = { 0x4829fc0, 640 }; 
	// Function /Script/Engine.KismetMathLibrary.BooleanNAND
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const bool, const bool> BooleanNAND = { 0x482a450, 641 }; 
	// Function /Script/Engine.KismetMathLibrary.BooleanAND
	constexpr static const FunctionPointer<UKismetMathLibrary, bool, const bool, const bool> BooleanAND = { 0x482a5e0, 642 }; 
	// Function /Script/Engine.KismetMathLibrary.BMin
	constexpr static const FunctionPointer<UKismetMathLibrary, char, const char, const char> BMin = { 0x4829750, 643 }; 
	// Function /Script/Engine.KismetMathLibrary.BMax
	constexpr static const FunctionPointer<UKismetMathLibrary, char, const char, const char> BMax = { 0x48295f0, 644 }; 
	// Function /Script/Engine.KismetMathLibrary.Atan2
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> Atan2 = { 0x48229f0, 645 }; 
	// Function /Script/Engine.KismetMathLibrary.Atan
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Atan = { 0x4822b60, 646 }; 
	// Function /Script/Engine.KismetMathLibrary.Asin
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Asin = { 0x4822ec0, 647 }; 
	// Function /Script/Engine.KismetMathLibrary.And_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> And_IntInt = { 0x48279a0, 648 }; 
	// Function /Script/Engine.KismetMathLibrary.And_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t> And_Int64Int64 = { 0x4825790, 649 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorVector
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const FVector> Add_VectorVector = { 0x4817940, 650 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorInt
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const int32_t> Add_VectorInt = { 0x4817630, 651 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_VectorFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector, const FVector, const float> Add_VectorFloat = { 0x48177b0, 652 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector4Vector4
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector4, const FVector4&, const FVector4&> Add_Vector4Vector4 = { 0x480cac0, 653 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector2DVector2D
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const FVector2D> Add_Vector2DVector2D = { 0x481c5f0, 654 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_Vector2DFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, FVector2D, const FVector2D, const float> Add_Vector2DFloat = { 0x481c490, 655 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_TimespanTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, FTimespan, const FTimespan, const FTimespan> Add_TimespanTimespan = { 0x47f5cc0, 656 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_QuatQuat
	constexpr static const FunctionPointer<UKismetMathLibrary, FQuat, const FQuat&, const FQuat&> Add_QuatQuat = { 0x47ffd10, 657 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_MatrixMatrix
	constexpr static const FunctionPointer<UKismetMathLibrary, FMatrix, const FMatrix&, const FMatrix&> Add_MatrixMatrix = { 0x4804e60, 658 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_LinearColorLinearColor
	constexpr static const FunctionPointer<UKismetMathLibrary, FLinearColor, const FLinearColor, const FLinearColor> Add_LinearColorLinearColor = { 0x47f9780, 659 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_IntPointIntPoint
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint, const FIntPoint, const FIntPoint> Add_IntPointIntPoint = { 0x481dba0, 660 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_IntPointInt
	constexpr static const FunctionPointer<UKismetMathLibrary, FIntPoint, const FIntPoint, const int32_t> Add_IntPointInt = { 0x481da20, 661 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_IntInt
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t, const int32_t> Add_IntInt = { 0x4828830, 662 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_Int64Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t, const int64_t> Add_Int64Int64 = { 0x4826640, 663 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_FloatFloat
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float, const float> Add_FloatFloat = { 0x48243f0, 664 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_DateTimeTimespan
	constexpr static const FunctionPointer<UKismetMathLibrary, FDateTime, const FDateTime, const FTimespan> Add_DateTimeTimespan = { 0x47f5cc0, 665 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_DateTimeDateTime
	constexpr static const FunctionPointer<UKismetMathLibrary, FDateTime, const FDateTime, const FDateTime> Add_DateTimeDateTime = { 0x47f5cc0, 666 }; 
	// Function /Script/Engine.KismetMathLibrary.Add_ByteByte
	constexpr static const FunctionPointer<UKismetMathLibrary, char, const char, const char> Add_ByteByte = { 0x4829a00, 667 }; 
	// Function /Script/Engine.KismetMathLibrary.Acos
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Acos = { 0x4822d00, 668 }; 
	// Function /Script/Engine.KismetMathLibrary.Abs_Int64
	constexpr static const FunctionPointer<UKismetMathLibrary, int64_t, const int64_t> Abs_Int64 = { 0x4824a70, 669 }; 
	// Function /Script/Engine.KismetMathLibrary.Abs_Int
	constexpr static const FunctionPointer<UKismetMathLibrary, int32_t, const int32_t> Abs_Int = { 0x4826aa0, 670 }; 
	// Function /Script/Engine.KismetMathLibrary.Abs
	constexpr static const FunctionPointer<UKismetMathLibrary, float, const float> Abs = { 0x4823080, 671 }; 
};

/// Class /Script/Engine.KismetNodeHelperLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetNodeHelperLibrary.MarkBit
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, void, const int32_t&, const int32_t> MarkBit = { 0x4834520, 0 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.HasUnmarkedBit
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, bool, const int32_t, const int32_t> HasUnmarkedBit = { 0x4834210, 1 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.HasMarkedBit
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, bool, const int32_t, const int32_t> HasMarkedBit = { 0x4834080, 2 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetValidValue
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, char, const UEnum*, const char> GetValidValue = { 0x4833170, 3 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetUnmarkedBit
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, int32_t, const int32_t, const int32_t, const int32_t, const bool> GetUnmarkedBit = { 0x4833cc0, 4 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetRandomUnmarkedBit
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, int32_t, const int32_t, const int32_t, const int32_t> GetRandomUnmarkedBit = { 0x4833a10, 5 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetFirstUnmarkedBit
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, int32_t, const int32_t, const int32_t, const int32_t> GetFirstUnmarkedBit = { 0x48337e0, 6 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorValueFromIndex
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, char, const UEnum*, const char> GetEnumeratorValueFromIndex = { 0x4832fe0, 7 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorUserFriendlyName
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, FString, const UEnum*, const char> GetEnumeratorUserFriendlyName = { 0x4833340, 8 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.GetEnumeratorName
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, FName, const UEnum*, const char> GetEnumeratorName = { 0x4833630, 9 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.ClearBit
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, void, const int32_t&, const int32_t> ClearBit = { 0x48343a0, 10 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.ClearAllBits
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, void, const int32_t&> ClearAllBits = { 0x1662900, 11 }; 
	// Function /Script/Engine.KismetNodeHelperLibrary.BitIsMarked
	constexpr static const FunctionPointer<UKismetNodeHelperLibrary, bool, const int32_t, const int32_t> BitIsMarked = { 0x48346a0, 12 }; 
};

/// Class /Script/Engine.KismetRenderingLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetRenderingLibrary.SetCastInsetShadowForAllAttachments
	constexpr static const FunctionPointer<UKismetRenderingLibrary, void, const UPrimitiveComponent*, const bool, const bool> SetCastInsetShadowForAllAttachments = { 0x4834e80, 0 }; 
	// Function /Script/Engine.KismetRenderingLibrary.RenderTargetCreateStaticTexture2DEditorOnly
	constexpr static const FunctionPointer<UKismetRenderingLibrary, UTexture2D*, const UTextureRenderTarget2D*, const FString, const TEnumAsByte<TextureCompressionSettings>, const TEnumAsByte<TextureMipGenSettings>> RenderTargetCreateStaticTexture2DEditorOnly = { 0x4837540, 1 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ReleaseRenderTarget2D
	constexpr static const FunctionPointer<UKismetRenderingLibrary, void, const UTextureRenderTarget2D*> ReleaseRenderTarget2D = { 0x48379d0, 2 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetUV
	constexpr static const FunctionPointer<UKismetRenderingLibrary, FColor, const UObject*, const UTextureRenderTarget2D*, const float, const float> ReadRenderTargetUV = { 0x4836b30, 3 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetRawUV
	constexpr static const FunctionPointer<UKismetRenderingLibrary, FLinearColor, const UObject*, const UTextureRenderTarget2D*, const float, const float> ReadRenderTargetRawUV = { 0x4836570, 4 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetRawPixel
	constexpr static const FunctionPointer<UKismetRenderingLibrary, FLinearColor, const UObject*, const UTextureRenderTarget2D*, const int32_t, const int32_t> ReadRenderTargetRawPixel = { 0x48368a0, 5 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ReadRenderTargetPixel
	constexpr static const FunctionPointer<UKismetRenderingLibrary, FColor, const UObject*, const UTextureRenderTarget2D*, const int32_t, const int32_t> ReadRenderTargetPixel = { 0x4836e50, 6 }; 
	// Function /Script/Engine.KismetRenderingLibrary.MakeSkinWeightInfo
	constexpr static const FunctionPointer<UKismetRenderingLibrary, FSkelMeshSkinWeightInfo, const int32_t, const char, const int32_t, const char, const int32_t, const char, const int32_t, const char> MakeSkinWeightInfo = { 0x4835650, 7 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ImportFileAsTexture2D
	constexpr static const FunctionPointer<UKismetRenderingLibrary, UTexture2D*, const UObject*, const FString> ImportFileAsTexture2D = { 0x4836150, 8 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ImportBufferAsTexture2D
	constexpr static const FunctionPointer<UKismetRenderingLibrary, UTexture2D*, const UObject*, const TArray<char>&> ImportBufferAsTexture2D = { 0x4835fb0, 9 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ExportTexture2D
	constexpr static const FunctionPointer<UKismetRenderingLibrary, void, const UObject*, const UTexture2D*, const FString, const FString> ExportTexture2D = { 0x48362e0, 10 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ExportRenderTarget
	constexpr static const FunctionPointer<UKismetRenderingLibrary, void, const UObject*, const UTextureRenderTarget2D*, const FString, const FString> ExportRenderTarget = { 0x48370d0, 11 }; 
	// Function /Script/Engine.KismetRenderingLibrary.EndDrawCanvasToRenderTarget
	constexpr static const FunctionPointer<UKismetRenderingLibrary, void, const UObject*, const FDrawToRenderTargetContext&> EndDrawCanvasToRenderTarget = { 0x4835b10, 12 }; 
	// Function /Script/Engine.KismetRenderingLibrary.DrawMaterialToRenderTarget
	constexpr static const FunctionPointer<UKismetRenderingLibrary, void, const UObject*, const UTextureRenderTarget2D*, const UMaterialInterface*> DrawMaterialToRenderTarget = { 0x48377f0, 13 }; 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTargetVolume
	constexpr static const FunctionPointer<UKismetRenderingLibrary, UTextureRenderTargetVolume*, const UObject*, const int32_t, const int32_t, const int32_t, const TEnumAsByte<ETextureRenderTargetFormat>, const FLinearColor, const bool> CreateRenderTargetVolume = { 0x4837aa0, 14 }; 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTarget2DArray
	constexpr static const FunctionPointer<UKismetRenderingLibrary, UTextureRenderTarget2DArray*, const UObject*, const int32_t, const int32_t, const int32_t, const TEnumAsByte<ETextureRenderTargetFormat>, const FLinearColor, const bool> CreateRenderTarget2DArray = { 0x4837fa0, 15 }; 
	// Function /Script/Engine.KismetRenderingLibrary.CreateRenderTarget2D
	constexpr static const FunctionPointer<UKismetRenderingLibrary, UTextureRenderTarget2D*, const UObject*, const int32_t, const int32_t, const TEnumAsByte<ETextureRenderTargetFormat>, const FLinearColor, const bool> CreateRenderTarget2D = { 0x48384a0, 16 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ConvertRenderTargetToTexture2DEditorOnly
	constexpr static const FunctionPointer<UKismetRenderingLibrary, void, const UObject*, const UTextureRenderTarget2D*, const UTexture2D*> ConvertRenderTargetToTexture2DEditorOnly = { 0x4837370, 17 }; 
	// Function /Script/Engine.KismetRenderingLibrary.ClearRenderTarget2D
	constexpr static const FunctionPointer<UKismetRenderingLibrary, void, const UObject*, const UTextureRenderTarget2D*, const FLinearColor> ClearRenderTarget2D = { 0x48388a0, 18 }; 
	// Function /Script/Engine.KismetRenderingLibrary.BreakSkinWeightInfo
	constexpr static const FunctionPointer<UKismetRenderingLibrary, void, const FSkelMeshSkinWeightInfo, const int32_t&, const char&, const int32_t&, const char&, const int32_t&, const char&, const int32_t&, const char&> BreakSkinWeightInfo = { 0x4835070, 19 }; 
	// Function /Script/Engine.KismetRenderingLibrary.BeginDrawCanvasToRenderTarget
	constexpr static const FunctionPointer<UKismetRenderingLibrary, void, const UObject*, const UTextureRenderTarget2D*, const UCanvas*&, const FVector2D&, const FDrawToRenderTargetContext&> BeginDrawCanvasToRenderTarget = { 0x4835c80, 20 }; 
};

/// Class /Script/Engine.KismetStringLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetStringLibrary.TrimTrailing
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString> TrimTrailing = { 0x483b540, 0 }; 
	// Function /Script/Engine.KismetStringLibrary.Trim
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString> Trim = { 0x483b6b0, 1 }; 
	// Function /Script/Engine.KismetStringLibrary.ToUpper
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString> ToUpper = { 0x483c5e0, 2 }; 
	// Function /Script/Engine.KismetStringLibrary.ToLower
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString> ToLower = { 0x483c470, 3 }; 
	// Function /Script/Engine.KismetStringLibrary.TimeSecondsToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const float> TimeSecondsToString = { 0x4839320, 4 }; 
	// Function /Script/Engine.KismetStringLibrary.StartsWith
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString, const FString, const TEnumAsByte<ESearchCase>> StartsWith = { 0x483bd40, 5 }; 
	// Function /Script/Engine.KismetStringLibrary.Split
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString, const FString, const FString&, const FString&, const TEnumAsByte<ESearchCase>, const TEnumAsByte<ESearchDir>> Split = { 0x483a210, 6 }; 
	// Function /Script/Engine.KismetStringLibrary.RightPad
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const int32_t> RightPad = { 0x483c0b0, 7 }; 
	// Function /Script/Engine.KismetStringLibrary.RightChop
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const int32_t> RightChop = { 0x4839860, 8 }; 
	// Function /Script/Engine.KismetStringLibrary.Right
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const int32_t> Right = { 0x4839af0, 9 }; 
	// Function /Script/Engine.KismetStringLibrary.Reverse
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString> Reverse = { 0x483b1b0, 10 }; 
	// Function /Script/Engine.KismetStringLibrary.ReplaceInline
	constexpr static const FunctionPointer<UKismetStringLibrary, int32_t, const FString&, const FString, const FString, const TEnumAsByte<ESearchCase>> ReplaceInline = { 0x483a630, 11 }; 
	// Function /Script/Engine.KismetStringLibrary.Replace
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const FString, const TEnumAsByte<ESearchCase>> Replace = { 0x483ab80, 12 }; 
	// Function /Script/Engine.KismetStringLibrary.ParseIntoArray
	constexpr static const FunctionPointer<UKismetStringLibrary, TArray<FString>, const FString, const FString, const bool> ParseIntoArray = { 0x483cc50, 13 }; 
	// Function /Script/Engine.KismetStringLibrary.NotEqual_StrStr
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString, const FString> NotEqual_StrStr = { 0x483daa0, 14 }; 
	// Function /Script/Engine.KismetStringLibrary.NotEqual_StriStri
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString, const FString> NotEqual_StriStri = { 0x483d8e0, 15 }; 
	// Function /Script/Engine.KismetStringLibrary.Mid
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const int32_t, const int32_t> Mid = { 0x48394e0, 16 }; 
	// Function /Script/Engine.KismetStringLibrary.MatchesWildcard
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString, const FString, const TEnumAsByte<ESearchCase>> MatchesWildcard = { 0x483b820, 17 }; 
	// Function /Script/Engine.KismetStringLibrary.Len
	constexpr static const FunctionPointer<UKismetStringLibrary, int32_t, const FString> Len = { 0x483d7f0, 18 }; 
	// Function /Script/Engine.KismetStringLibrary.LeftPad
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const int32_t> LeftPad = { 0x483c290, 19 }; 
	// Function /Script/Engine.KismetStringLibrary.LeftChop
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const int32_t> LeftChop = { 0x4839d70, 20 }; 
	// Function /Script/Engine.KismetStringLibrary.Left
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const int32_t> Left = { 0x4839fc0, 21 }; 
	// Function /Script/Engine.KismetStringLibrary.JoinStringArray
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const TArray<FString>&, const FString> JoinStringArray = { 0x483ca20, 22 }; 
	// Function /Script/Engine.KismetStringLibrary.IsNumeric
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString> IsNumeric = { 0x483bfb0, 23 }; 
	// Function /Script/Engine.KismetStringLibrary.IsEmpty
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString> IsEmpty = { 0x483d700, 24 }; 
	// Function /Script/Engine.KismetStringLibrary.GetSubstring
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const int32_t, const int32_t> GetSubstring = { 0x48394e0, 25 }; 
	// Function /Script/Engine.KismetStringLibrary.GetCharacterAsNumber
	constexpr static const FunctionPointer<UKismetStringLibrary, int32_t, const FString, const int32_t> GetCharacterAsNumber = { 0x483cf10, 26 }; 
	// Function /Script/Engine.KismetStringLibrary.GetCharacterArrayFromString
	constexpr static const FunctionPointer<UKismetStringLibrary, TArray<FString>, const FString> GetCharacterArrayFromString = { 0x483c750, 27 }; 
	// Function /Script/Engine.KismetStringLibrary.FindSubstring
	constexpr static const FunctionPointer<UKismetStringLibrary, int32_t, const FString, const FString, const bool, const bool, const int32_t> FindSubstring = { 0x483d3a0, 28 }; 
	// Function /Script/Engine.KismetStringLibrary.EqualEqual_StrStr
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString, const FString> EqualEqual_StrStr = { 0x483de40, 29 }; 
	// Function /Script/Engine.KismetStringLibrary.EqualEqual_StriStri
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString, const FString> EqualEqual_StriStri = { 0x483dc80, 30 }; 
	// Function /Script/Engine.KismetStringLibrary.EndsWith
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString, const FString, const TEnumAsByte<ESearchCase>> EndsWith = { 0x483ba80, 31 }; 
	// Function /Script/Engine.KismetStringLibrary.CullArray
	constexpr static const FunctionPointer<UKismetStringLibrary, int32_t, const FString, const TArray<FString>&> CullArray = { 0x483b350, 32 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_VectorToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FVector> Conv_VectorToString = { 0x4841af0, 33 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_Vector2dToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FVector2D> Conv_Vector2dToString = { 0x4841780, 34 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_TransformToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FTransform&> Conv_TransformToString = { 0x48413c0, 35 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToVector2D
	constexpr static const FunctionPointer<UKismetStringLibrary, void, const FString, const FVector2D&, const bool&> Conv_StringToVector2D = { 0x48405a0, 36 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToVector
	constexpr static const FunctionPointer<UKismetStringLibrary, void, const FString, const FVector&, const bool&> Conv_StringToVector = { 0x48407c0, 37 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToRotator
	constexpr static const FunctionPointer<UKismetStringLibrary, void, const FString, const FRotator&, const bool&> Conv_StringToRotator = { 0x4840380, 38 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToName
	constexpr static const FunctionPointer<UKismetStringLibrary, FName, const FString> Conv_StringToName = { 0x4840bf0, 39 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToInt
	constexpr static const FunctionPointer<UKismetStringLibrary, int32_t, const FString> Conv_StringToInt = { 0x4840af0, 40 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToFloat
	constexpr static const FunctionPointer<UKismetStringLibrary, float, const FString> Conv_StringToFloat = { 0x48409e0, 41 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_StringToColor
	constexpr static const FunctionPointer<UKismetStringLibrary, void, const FString, const FLinearColor&, const bool&> Conv_StringToColor = { 0x4840170, 42 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_RotatorToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FRotator> Conv_RotatorToString = { 0x4841650, 43 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_ObjectToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const UObject*> Conv_ObjectToString = { 0x4841190, 44 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_NameToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FName> Conv_NameToString = { 0x4840eb0, 45 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_MatrixToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FMatrix&> Conv_MatrixToString = { 0x4840d90, 46 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntVectorToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FIntVector> Conv_IntVectorToString = { 0x48419c0, 47 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const int32_t> Conv_IntToString = { 0x4841f00, 48 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_IntPointToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FIntPoint> Conv_IntPointToString = { 0x48418a0, 49 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_FloatToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const float> Conv_FloatToString = { 0x4842020, 50 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_ColorToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FLinearColor> Conv_ColorToString = { 0x4841040, 51 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_ByteToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const char> Conv_ByteToString = { 0x4841de0, 52 }; 
	// Function /Script/Engine.KismetStringLibrary.Conv_BoolToString
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const bool> Conv_BoolToString = { 0x4841c30, 53 }; 
	// Function /Script/Engine.KismetStringLibrary.Contains
	constexpr static const FunctionPointer<UKismetStringLibrary, bool, const FString, const FString, const bool, const bool> Contains = { 0x483d0b0, 54 }; 
	// Function /Script/Engine.KismetStringLibrary.Concat_StrStr
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString> Concat_StrStr = { 0x483e020, 55 }; 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Vector2d
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const FVector2D, const FString> BuildString_Vector2d = { 0x483ef40, 56 }; 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Vector
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const FVector, const FString> BuildString_Vector = { 0x483f550, 57 }; 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Rotator
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const FRotator, const FString> BuildString_Rotator = { 0x483ec30, 58 }; 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Object
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const UObject*, const FString> BuildString_Object = { 0x483e930, 59 }; 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Name
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const FName, const FString> BuildString_Name = { 0x483e330, 60 }; 
	// Function /Script/Engine.KismetStringLibrary.BuildString_IntVector
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const FIntVector, const FString> BuildString_IntVector = { 0x483f240, 61 }; 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Int
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const int32_t, const FString> BuildString_Int = { 0x483fb70, 62 }; 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Float
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const float, const FString> BuildString_Float = { 0x483fe70, 63 }; 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Color
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const FLinearColor, const FString> BuildString_Color = { 0x483e630, 64 }; 
	// Function /Script/Engine.KismetStringLibrary.BuildString_Bool
	constexpr static const FunctionPointer<UKismetStringLibrary, FString, const FString, const FString, const bool, const FString> BuildString_Bool = { 0x483f860, 65 }; 
};

/// Class /Script/Engine.KismetStringTableLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetStringTableLibrary.IsRegisteredTableId
	constexpr static const FunctionPointer<UKismetStringTableLibrary, bool, const FName> IsRegisteredTableId = { 0x48440d0, 0 }; 
	// Function /Script/Engine.KismetStringTableLibrary.IsRegisteredTableEntry
	constexpr static const FunctionPointer<UKismetStringTableLibrary, bool, const FName, const FString> IsRegisteredTableEntry = { 0x4843e90, 1 }; 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableNamespace
	constexpr static const FunctionPointer<UKismetStringTableLibrary, FString, const FName> GetTableNamespace = { 0x4843c60, 2 }; 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableEntrySourceString
	constexpr static const FunctionPointer<UKismetStringTableLibrary, FString, const FName, const FString> GetTableEntrySourceString = { 0x4843a90, 3 }; 
	// Function /Script/Engine.KismetStringTableLibrary.GetTableEntryMetaData
	constexpr static const FunctionPointer<UKismetStringTableLibrary, FString, const FName, const FString, const FName> GetTableEntryMetaData = { 0x4843620, 4 }; 
	// Function /Script/Engine.KismetStringTableLibrary.GetRegisteredStringTables
	constexpr static const FunctionPointer<UKismetStringTableLibrary, TArray<FName>> GetRegisteredStringTables = { 0x4843570, 5 }; 
	// Function /Script/Engine.KismetStringTableLibrary.GetMetaDataIdsFromStringTableEntry
	constexpr static const FunctionPointer<UKismetStringTableLibrary, TArray<FName>, const FName, const FString> GetMetaDataIdsFromStringTableEntry = { 0x4843110, 6 }; 
	// Function /Script/Engine.KismetStringTableLibrary.GetKeysFromStringTable
	constexpr static const FunctionPointer<UKismetStringTableLibrary, TArray<FString>, const FName> GetKeysFromStringTable = { 0x4843370, 7 }; 
};

/// Class /Script/Engine.KismetSystemLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetSystemLibrary.UnregisterForRemoteNotifications
	constexpr static const FunctionPointer<UKismetSystemLibrary, void> UnregisterForRemoteNotifications = { 0x11615e0, 0 }; 
	// Function /Script/Engine.KismetSystemLibrary.UnloadPrimaryAssetList
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const TArray<FPrimaryAssetId>&> UnloadPrimaryAssetList = { 0x48453b0, 1 }; 
	// Function /Script/Engine.KismetSystemLibrary.UnloadPrimaryAsset
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FPrimaryAssetId> UnloadPrimaryAsset = { 0x48454b0, 2 }; 
	// Function /Script/Engine.KismetSystemLibrary.TransactObject
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*> TransactObject = { 0x17a7aa0, 3 }; 
	// Function /Script/Engine.KismetSystemLibrary.StackTrace
	constexpr static const FunctionPointer<UKismetSystemLibrary, void> StackTrace = { 0x48446d0, 4 }; 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingleForObjects
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> SphereTraceSingleForObjects = { 0x4853d80, 5 }; 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingleByProfile
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const FName, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> SphereTraceSingleByProfile = { 0x484fcf0, 6 }; 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceSingle
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const TEnumAsByte<ETraceTypeQuery>, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> SphereTraceSingle = { 0x4857d90, 7 }; 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMultiForObjects
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> SphereTraceMultiForObjects = { 0x48535b0, 8 }; 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMultiByProfile
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const FName, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> SphereTraceMultiByProfile = { 0x484f540, 9 }; 
	// Function /Script/Engine.KismetSystemLibrary.SphereTraceMulti
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const TEnumAsByte<ETraceTypeQuery>, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> SphereTraceMulti = { 0x48575e0, 10 }; 
	// Function /Script/Engine.KismetSystemLibrary.SphereOverlapComponents
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const float, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const UClass*, const TArray<AActor*>&, const TArray<UPrimitiveComponent*>&> SphereOverlapComponents = { 0x485b090, 11 }; 
	// Function /Script/Engine.KismetSystemLibrary.SphereOverlapActors
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const float, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const UClass*, const TArray<AActor*>&, const TArray<AActor*>&> SphereOverlapActors = { 0x485b540, 12 }; 
	// Function /Script/Engine.KismetSystemLibrary.SnapshotObject
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*> SnapshotObject = { 0x17a7aa0, 13 }; 
	// Function /Script/Engine.KismetSystemLibrary.ShowPlatformSpecificLeaderboardScreen
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FString> ShowPlatformSpecificLeaderboardScreen = { 0x48481a0, 14 }; 
	// Function /Script/Engine.KismetSystemLibrary.ShowPlatformSpecificAchievementsScreen
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const APlayerController*> ShowPlatformSpecificAchievementsScreen = { 0x4848060, 15 }; 
	// Function /Script/Engine.KismetSystemLibrary.ShowInterstitialAd
	constexpr static const FunctionPointer<UKismetSystemLibrary, void> ShowInterstitialAd = { 0x4848290, 16 }; 
	// Function /Script/Engine.KismetSystemLibrary.ShowAdBanner
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const int32_t, const bool> ShowAdBanner = { 0x4848570, 17 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetWindowTitle
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FText&> SetWindowTitle = { 0x48640a0, 18 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetVolumeButtonsHandledBySystem
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const bool> SetVolumeButtonsHandledBySystem = { 0x26a9510, 19 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetVectorPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const FVector&> SetVectorPropertyByName = { 0x485c6f0, 20 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetUserActivity
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FUserActivity&> SetUserActivity = { 0x4847530, 21 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetTransformPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const FTransform&> SetTransformPropertyByName = { 0x485bca0, 22 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetTextPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const FText&> SetTextPropertyByName = { 0x485c970, 23 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetSuppressViewportTransitionMessage
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const bool> SetSuppressViewportTransitionMessage = { 0x4847910, 24 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetStructurePropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const FGenericStruct&> SetStructurePropertyByName = { 0x4844710, 25 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetStringPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const FString> SetStringPropertyByName = { 0x485cc40, 26 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetSoftObjectPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const TWeakObjectPtr<UObject*>&> SetSoftObjectPropertyByName = { 0x485d1c0, 27 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetSoftClassPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const TSoftObjectPtr<UClass*>&> SetSoftClassPropertyByName = { 0x485cf10, 28 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetRotatorPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const FRotator&> SetRotatorPropertyByName = { 0x485c470, 29 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetObjectPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const UObject*> SetObjectPropertyByName = { 0x485dd40, 30 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetNamePropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const FName&> SetNamePropertyByName = { 0x485d470, 31 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetLinearColorPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const FLinearColor&> SetLinearColorPropertyByName = { 0x485c1f0, 32 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetIntPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const int32_t> SetIntPropertyByName = { 0x485ea40, 33 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetInterfacePropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const TScriptInterface<Class>&> SetInterfacePropertyByName = { 0x485d6e0, 34 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetInt64PropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const int64_t> SetInt64PropertyByName = { 0x485e7e0, 35 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetGamepadsBlockDeviceFeedback
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const bool> SetGamepadsBlockDeviceFeedback = { 0x26a9510, 36 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetFloatPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const float> SetFloatPropertyByName = { 0x485e270, 37 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetFieldPathPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const Value&> SetFieldPathPropertyByName = { 0x485b9f0, 38 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetColorPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const FColor&> SetColorPropertyByName = { 0x485bf80, 39 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetCollisionProfileNameProperty
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const FCollisionProfileName&> SetCollisionProfileNameProperty = { 0x4844710, 40 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetClassPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const UClass*> SetClassPropertyByName = { 0x485d9f0, 41 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetBytePropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const char> SetBytePropertyByName = { 0x485e4f0, 42 }; 
	// Function /Script/Engine.KismetSystemLibrary.SetBoolPropertyByName
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FName, const bool> SetBoolPropertyByName = { 0x485dfe0, 43 }; 
	// Function /Script/Engine.KismetSystemLibrary.RetriggerableDelay
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const float, const FLatentActionInfo> RetriggerableDelay = { 0x48630f0, 44 }; 
	// Function /Script/Engine.KismetSystemLibrary.ResetGamepadAssignmentToController
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const int32_t> ResetGamepadAssignmentToController = { 0x198eb40, 45 }; 
	// Function /Script/Engine.KismetSystemLibrary.ResetGamepadAssignments
	constexpr static const FunctionPointer<UKismetSystemLibrary, void> ResetGamepadAssignments = { 0x11615e0, 46 }; 
	// Function /Script/Engine.KismetSystemLibrary.RegisterForRemoteNotifications
	constexpr static const FunctionPointer<UKismetSystemLibrary, void> RegisterForRemoteNotifications = { 0x11615e0, 47 }; 
	// Function /Script/Engine.KismetSystemLibrary.QuitGame
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const APlayerController*, const TEnumAsByte<EQuitPreference>, const bool> QuitGame = { 0x48636f0, 48 }; 
	// Function /Script/Engine.KismetSystemLibrary.PrintWarning
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FString> PrintWarning = { 0x1640450, 49 }; 
	// Function /Script/Engine.KismetSystemLibrary.PrintText
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FText, const bool, const bool, const FLinearColor, const float> PrintText = { 0x4864280, 50 }; 
	// Function /Script/Engine.KismetSystemLibrary.PrintString
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FString, const bool, const bool, const FLinearColor, const float> PrintString = { 0x4864660, 51 }; 
	// Function /Script/Engine.KismetSystemLibrary.ParseParamValue
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FString, const FString, const FString&> ParseParamValue = { 0x4846c10, 52 }; 
	// Function /Script/Engine.KismetSystemLibrary.ParseParam
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FString, const FString> ParseParam = { 0x4846e70, 53 }; 
	// Function /Script/Engine.KismetSystemLibrary.ParseCommandLine
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FString, const TArray<FString>&, const TArray<FString>&, const TMap<FString, FString>&> ParseCommandLine = { 0x4847030, 54 }; 
	// Function /Script/Engine.KismetSystemLibrary.OnAssetLoaded__DelegateSignature
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*> OnAssetLoaded__DelegateSignature = { 0x2bbb090, 55 }; 
	// Function /Script/Engine.KismetSystemLibrary.OnAssetClassLoaded__DelegateSignature
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UClass*> OnAssetClassLoaded__DelegateSignature = { 0x2bbb090, 56 }; 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_SoftObjectReference
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const TWeakObjectPtr<UObject*>&, const TWeakObjectPtr<UObject*>&> NotEqual_SoftObjectReference = { 0x4866150, 57 }; 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_SoftClassReference
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const TSoftObjectPtr<UClass*>&, const TSoftObjectPtr<UClass*>&> NotEqual_SoftClassReference = { 0x4866150, 58 }; 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetType
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FPrimaryAssetType, const FPrimaryAssetType> NotEqual_PrimaryAssetType = { 0x3eaa2e0, 59 }; 
	// Function /Script/Engine.KismetSystemLibrary.NotEqual_PrimaryAssetId
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FPrimaryAssetId, const FPrimaryAssetId> NotEqual_PrimaryAssetId = { 0x48456c0, 60 }; 
	// Function /Script/Engine.KismetSystemLibrary.NormalizeFilename
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const FString> NormalizeFilename = { 0x4867f40, 61 }; 
	// Function /Script/Engine.KismetSystemLibrary.MoveComponentTo
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const USceneComponent*, const FVector, const FRotator, const bool, const bool, const float, const bool, const TEnumAsByte<EMoveComponentAction>, const FLatentActionInfo> MoveComponentTo = { 0x4862ba0, 62 }; 
	// Function /Script/Engine.KismetSystemLibrary.MakeSoftObjectPath
	constexpr static const FunctionPointer<UKismetSystemLibrary, FSoftObjectPath, const FString> MakeSoftObjectPath = { 0x48673d0, 63 }; 
	// Function /Script/Engine.KismetSystemLibrary.MakeSoftClassPath
	constexpr static const FunctionPointer<UKismetSystemLibrary, FSoftClassPath, const FString> MakeSoftClassPath = { 0x4867150, 64 }; 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralText
	constexpr static const FunctionPointer<UKismetSystemLibrary, FText, const FText> MakeLiteralText = { 0x48649d0, 65 }; 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralString
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const FString> MakeLiteralString = { 0x4864b90, 66 }; 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralName
	constexpr static const FunctionPointer<UKismetSystemLibrary, FName, const FName> MakeLiteralName = { 0x4864de0, 67 }; 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralInt
	constexpr static const FunctionPointer<UKismetSystemLibrary, int32_t, const int32_t> MakeLiteralInt = { 0x1878560, 68 }; 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralFloat
	constexpr static const FunctionPointer<UKismetSystemLibrary, float, const float> MakeLiteralFloat = { 0x4864eb0, 69 }; 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralByte
	constexpr static const FunctionPointer<UKismetSystemLibrary, char, const char> MakeLiteralByte = { 0x4864d10, 70 }; 
	// Function /Script/Engine.KismetSystemLibrary.MakeLiteralBool
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const bool> MakeLiteralBool = { 0x165e310, 71 }; 
	// Function /Script/Engine.KismetSystemLibrary.LoadInterstitialAd
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const int32_t> LoadInterstitialAd = { 0x4848380, 72 }; 
	// Function /Script/Engine.KismetSystemLibrary.LoadClassAsset_Blocking
	constexpr static const FunctionPointer<UKismetSystemLibrary, UClass*, const TSoftObjectPtr<UClass*>> LoadClassAsset_Blocking = { 0x4865fe0, 73 }; 
	// Function /Script/Engine.KismetSystemLibrary.LoadAssetClass
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const TSoftObjectPtr<UClass*>, const FDelegateProperty, const FLatentActionInfo> LoadAssetClass = { 0x4864f80, 74 }; 
	// Function /Script/Engine.KismetSystemLibrary.LoadAsset_Blocking
	constexpr static const FunctionPointer<UKismetSystemLibrary, UObject*, const TWeakObjectPtr<UObject*>> LoadAsset_Blocking = { 0x4866800, 75 }; 
	// Function /Script/Engine.KismetSystemLibrary.LoadAsset
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const TWeakObjectPtr<UObject*>, const FDelegateProperty, const FLatentActionInfo> LoadAsset = { 0x4865340, 76 }; 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingleForObjects
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> LineTraceSingleForObjects = { 0x4854ce0, 77 }; 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingleByProfile
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const FName, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> LineTraceSingleByProfile = { 0x4850c10, 78 }; 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceSingle
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const TEnumAsByte<ETraceTypeQuery>, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> LineTraceSingle = { 0x4858ca0, 79 }; 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMultiForObjects
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> LineTraceMultiForObjects = { 0x4854590, 80 }; 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMultiByProfile
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const FName, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> LineTraceMultiByProfile = { 0x48504e0, 81 }; 
	// Function /Script/Engine.KismetSystemLibrary.LineTraceMulti
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const TEnumAsByte<ETraceTypeQuery>, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> LineTraceMulti = { 0x4858570, 82 }; 
	// Function /Script/Engine.KismetSystemLibrary.LaunchURL
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FString> LaunchURL = { 0x4848840, 83 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimerHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FTimerHandle> K2_UnPauseTimerHandle = { 0x4861640, 84 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimerDelegate
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FDelegateProperty> K2_UnPauseTimerDelegate = { 0x48625f0, 85 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_UnPauseTimer
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FString> K2_UnPauseTimer = { 0x485fc60, 86 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExistsHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FTimerHandle> K2_TimerExistsHandle = { 0x4861040, 87 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExistsDelegate
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FDelegateProperty> K2_TimerExistsDelegate = { 0x4862320, 88 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_TimerExists
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FString> K2_TimerExists = { 0x485f300, 89 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_SetTimerDelegate
	constexpr static const FunctionPointer<UKismetSystemLibrary, FTimerHandle, const FDelegateProperty, const float, const bool, const float, const float> K2_SetTimerDelegate = { 0x4862890, 90 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_SetTimer
	constexpr static const FunctionPointer<UKismetSystemLibrary, FTimerHandle, const UObject*, const FString, const float, const bool, const float, const float> K2_SetTimer = { 0x48605c0, 91 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimerHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FTimerHandle> K2_PauseTimerHandle = { 0x48618c0, 92 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimerDelegate
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FDelegateProperty> K2_PauseTimerDelegate = { 0x48626d0, 93 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_PauseTimer
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FString> K2_PauseTimer = { 0x485ff80, 94 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsValidTimerHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FTimerHandle> K2_IsValidTimerHandle = { 0x4862070, 95 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPausedHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FTimerHandle> K2_IsTimerPausedHandle = { 0x4861240, 96 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPausedDelegate
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FDelegateProperty> K2_IsTimerPausedDelegate = { 0x4862410, 97 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerPaused
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FString> K2_IsTimerPaused = { 0x485f620, 98 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActiveHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FTimerHandle> K2_IsTimerActiveHandle = { 0x4861440, 99 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActiveDelegate
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FDelegateProperty> K2_IsTimerActiveDelegate = { 0x4862500, 100 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_IsTimerActive
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FString> K2_IsTimerActive = { 0x485f940, 101 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_InvalidateTimerHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, FTimerHandle, const FTimerHandle&> K2_InvalidateTimerHandle = { 0x4861f90, 102 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, float, const UObject*, const FTimerHandle> K2_GetTimerRemainingTimeHandle = { 0x4860b70, 103 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTimeDelegate
	constexpr static const FunctionPointer<UKismetSystemLibrary, float, const FDelegateProperty> K2_GetTimerRemainingTimeDelegate = { 0x4862140, 104 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerRemainingTime
	constexpr static const FunctionPointer<UKismetSystemLibrary, float, const UObject*, const FString> K2_GetTimerRemainingTime = { 0x485eca0, 105 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, float, const UObject*, const FTimerHandle> K2_GetTimerElapsedTimeHandle = { 0x4860dc0, 106 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTimeDelegate
	constexpr static const FunctionPointer<UKismetSystemLibrary, float, const FDelegateProperty> K2_GetTimerElapsedTimeDelegate = { 0x4862230, 107 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_GetTimerElapsedTime
	constexpr static const FunctionPointer<UKismetSystemLibrary, float, const UObject*, const FString> K2_GetTimerElapsedTime = { 0x485efd0, 108 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimerHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FTimerHandle> K2_ClearTimerHandle = { 0x4861db0, 109 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimerDelegate
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FDelegateProperty> K2_ClearTimerDelegate = { 0x48627b0, 110 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearTimer
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FString> K2_ClearTimer = { 0x48602a0, 111 }; 
	// Function /Script/Engine.KismetSystemLibrary.K2_ClearAndInvalidateTimerHandle
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FTimerHandle&> K2_ClearAndInvalidateTimerHandle = { 0x4861bc0, 112 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsValidSoftObjectReference
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const TWeakObjectPtr<UObject*>&> IsValidSoftObjectReference = { 0x48666f0, 113 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsValidSoftClassReference
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const TSoftObjectPtr<UClass*>&> IsValidSoftClassReference = { 0x48666f0, 114 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetType
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FPrimaryAssetType> IsValidPrimaryAssetType = { 0x3eaa1f0, 115 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsValidPrimaryAssetId
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FPrimaryAssetId> IsValidPrimaryAssetId = { 0x4845b30, 116 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsValidClass
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UClass*> IsValidClass = { 0x4869890, 117 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsValid
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*> IsValid = { 0x4869890, 118 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsUnattended
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool> IsUnattended = { 0x4846be0, 119 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsStandalone
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*> IsStandalone = { 0x48676d0, 120 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsSplitScreen
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*> IsSplitScreen = { 0x48675c0, 121 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsServer
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*> IsServer = { 0x4867900, 122 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsScreensaverEnabled
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool> IsScreensaverEnabled = { 0x113b860, 123 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsPackagedForDistribution
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool> IsPackagedForDistribution = { 0x151b2d0, 124 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsLoggedIn
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const APlayerController*> IsLoggedIn = { 0x4847f10, 125 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsInterstitialAdRequested
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool> IsInterstitialAdRequested = { 0x48482e0, 126 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsInterstitialAdAvailable
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool> IsInterstitialAdAvailable = { 0x4848330, 127 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsDedicatedServer
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*> IsDedicatedServer = { 0x4867830, 128 }; 
	// Function /Script/Engine.KismetSystemLibrary.IsControllerAssignedToGamepad
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const int32_t> IsControllerAssignedToGamepad = { 0x4847e40, 129 }; 
	// Function /Script/Engine.KismetSystemLibrary.HideAdBanner
	constexpr static const FunctionPointer<UKismetSystemLibrary, void> HideAdBanner = { 0x48484c0, 130 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetVolumeButtonsHandledBySystem
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool> GetVolumeButtonsHandledBySystem = { 0x151b2d0, 131 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetUniqueDeviceId
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetUniqueDeviceId = { 0x16628b0, 132 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetSystemPath
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const UObject*> GetSystemPath = { 0x4868ea0, 133 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetSupportedFullscreenResolutions
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const TArray<FIntPoint>&> GetSupportedFullscreenResolutions = { 0x4848aa0, 134 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetSoftObjectReferenceFromPrimaryAssetId
	constexpr static const FunctionPointer<UKismetSystemLibrary, TWeakObjectPtr<UObject*>, const FPrimaryAssetId> GetSoftObjectReferenceFromPrimaryAssetId = { 0x4846530, 135 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetSoftClassReferenceFromPrimaryAssetId
	constexpr static const FunctionPointer<UKismetSystemLibrary, TSoftObjectPtr<UClass*>, const FPrimaryAssetId> GetSoftClassReferenceFromPrimaryAssetId = { 0x4846410, 136 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetRenderingMaterialQualityLevel
	constexpr static const FunctionPointer<UKismetSystemLibrary, int32_t> GetRenderingMaterialQualityLevel = { 0x4848b90, 137 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetRenderingDetailMode
	constexpr static const FunctionPointer<UKismetSystemLibrary, int32_t> GetRenderingDetailMode = { 0x4848c60, 138 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectSavedDirectory
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetProjectSavedDirectory = { 0x4868410, 139 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectDirectory
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetProjectDirectory = { 0x4868530, 140 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetProjectContentDirectory
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetProjectContentDirectory = { 0x4868490, 141 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetsWithBundleState
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const TArray<FName>&, const TArray<FName>&, const TArray<FPrimaryAssetType>&, const bool, const TArray<FPrimaryAssetId>&> GetPrimaryAssetsWithBundleState = { 0x4844d50, 142 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdList
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FPrimaryAssetType, const TArray<FPrimaryAssetId>&> GetPrimaryAssetIdList = { 0x4845c50, 143 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftObjectReference
	constexpr static const FunctionPointer<UKismetSystemLibrary, FPrimaryAssetId, const TWeakObjectPtr<UObject*>> GetPrimaryAssetIdFromSoftObjectReference = { 0x4845fb0, 144 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromSoftClassReference
	constexpr static const FunctionPointer<UKismetSystemLibrary, FPrimaryAssetId, const TSoftObjectPtr<UClass*>> GetPrimaryAssetIdFromSoftClassReference = { 0x4845e00, 145 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromObject
	constexpr static const FunctionPointer<UKismetSystemLibrary, FPrimaryAssetId, const UObject*> GetPrimaryAssetIdFromObject = { 0x48462f0, 146 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetPrimaryAssetIdFromClass
	constexpr static const FunctionPointer<UKismetSystemLibrary, FPrimaryAssetId, const UClass*> GetPrimaryAssetIdFromClass = { 0x4846160, 147 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetPreferredLanguages
	constexpr static const FunctionPointer<UKismetSystemLibrary, TArray<FString>> GetPreferredLanguages = { 0x48477e0, 148 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetPlatformUserName
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetPlatformUserName = { 0x4867e20, 149 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetPlatformUserDir
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetPlatformUserDir = { 0x4867d00, 150 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetPathName
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const UObject*> GetPathName = { 0x4869330, 151 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetOuterObject
	constexpr static const FunctionPointer<UKismetSystemLibrary, UObject*, const UObject*> GetOuterObject = { 0x48689b0, 152 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetObjectName
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const UObject*> GetObjectName = { 0x48696b0, 153 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetObjectFromPrimaryAssetId
	constexpr static const FunctionPointer<UKismetSystemLibrary, UObject*, const FPrimaryAssetId> GetObjectFromPrimaryAssetId = { 0x48467e0, 154 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetMinYResolutionForUI
	constexpr static const FunctionPointer<UKismetSystemLibrary, int32_t> GetMinYResolutionForUI = { 0x4848970, 155 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetMinYResolutionFor3DView
	constexpr static const FunctionPointer<UKismetSystemLibrary, int32_t> GetMinYResolutionFor3DView = { 0x4848930, 156 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetLocalCurrencySymbol
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetLocalCurrencySymbol = { 0x16628b0, 157 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetLocalCurrencyCode
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetLocalCurrencyCode = { 0x16628b0, 158 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetLevelViewportCameraInfo
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FVector&, const FRotator&> GetLevelViewportCameraInfo = { 0x4849320, 159 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetGameTimeInSeconds
	constexpr static const FunctionPointer<UKismetSystemLibrary, float, const UObject*> GetGameTimeInSeconds = { 0x4795640, 160 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetGamepadControllerName
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const int32_t> GetGamepadControllerName = { 0x4847cb0, 161 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetGamepadButtonGlyph
	constexpr static const FunctionPointer<UKismetSystemLibrary, UTexture2D*, const FString, const int32_t> GetGamepadButtonGlyph = { 0x4847aa0, 162 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetGameName
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetGameName = { 0x4868800, 163 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetGameBundleId
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetGameBundleId = { 0x16628b0, 164 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetFrameCount
	constexpr static const FunctionPointer<UKismetSystemLibrary, int64_t> GetFrameCount = { 0x4867a70, 165 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetEngineVersion
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetEngineVersion = { 0x4868920, 166 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetDisplayName
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const UObject*> GetDisplayName = { 0x4868c80, 167 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetDeviceId
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetDeviceId = { 0x16628b0, 168 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetDefaultLocale
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetDefaultLocale = { 0x48476e0, 169 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetDefaultLanguage
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetDefaultLanguage = { 0x4847760, 170 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetCurrentBundleState
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FPrimaryAssetId, const bool, const TArray<FName>&> GetCurrentBundleState = { 0x48450c0, 171 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetConvenientWindowedResolutions
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const TArray<FIntPoint>&> GetConvenientWindowedResolutions = { 0x48489b0, 172 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableIntValue
	constexpr static const FunctionPointer<UKismetSystemLibrary, int32_t, const FString> GetConsoleVariableIntValue = { 0x4863a80, 173 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableFloatValue
	constexpr static const FunctionPointer<UKismetSystemLibrary, float, const FString> GetConsoleVariableFloatValue = { 0x4863bb0, 174 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetConsoleVariableBoolValue
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FString> GetConsoleVariableBoolValue = { 0x4863950, 175 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetComponentBounds
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const USceneComponent*, const FVector&, const FVector&, const float&> GetComponentBounds = { 0x4848ff0, 176 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetCommandLine
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString> GetCommandLine = { 0x48473d0, 177 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetClassFromPrimaryAssetId
	constexpr static const FunctionPointer<UKismetSystemLibrary, UClass*, const FPrimaryAssetId> GetClassFromPrimaryAssetId = { 0x4846650, 178 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetClassDisplayName
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const UClass*> GetClassDisplayName = { 0x4868a90, 179 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetAdIDCount
	constexpr static const FunctionPointer<UKismetSystemLibrary, int32_t> GetAdIDCount = { 0x4848510, 180 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetActorListFromComponentList
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const TArray<UPrimitiveComponent*>&, const UClass*, const TArray<AActor*>&> GetActorListFromComponentList = { 0x484d170, 181 }; 
	// Function /Script/Engine.KismetSystemLibrary.GetActorBounds
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const AActor*, const FVector&, const FVector&> GetActorBounds = { 0x4848d30, 182 }; 
	// Function /Script/Engine.KismetSystemLibrary.ForceCloseAdBanner
	constexpr static const FunctionPointer<UKismetSystemLibrary, void> ForceCloseAdBanner = { 0x4848470, 183 }; 
	// Function /Script/Engine.KismetSystemLibrary.FlushPersistentDebugLines
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*> FlushPersistentDebugLines = { 0x17a7aa0, 184 }; 
	// Function /Script/Engine.KismetSystemLibrary.FlushDebugStrings
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*> FlushDebugStrings = { 0x17a7aa0, 185 }; 
	// Function /Script/Engine.KismetSystemLibrary.ExecutePlayerConsoleCommand
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FString> ExecutePlayerConsoleCommand = { 0x4863f80, 186 }; 
	// Function /Script/Engine.KismetSystemLibrary.ExecuteConsoleCommand
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FString, const APlayerController*> ExecuteConsoleCommand = { 0x4863cf0, 187 }; 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_SoftObjectReference
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const TWeakObjectPtr<UObject*>&, const TWeakObjectPtr<UObject*>&> EqualEqual_SoftObjectReference = { 0x4866370, 188 }; 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_SoftClassReference
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const TSoftObjectPtr<UClass*>&, const TSoftObjectPtr<UClass*>&> EqualEqual_SoftClassReference = { 0x4866370, 189 }; 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetType
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FPrimaryAssetType, const FPrimaryAssetType> EqualEqual_PrimaryAssetType = { 0x3eaa450, 190 }; 
	// Function /Script/Engine.KismetSystemLibrary.EqualEqual_PrimaryAssetId
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FPrimaryAssetId, const FPrimaryAssetId> EqualEqual_PrimaryAssetId = { 0x4845860, 191 }; 
	// Function /Script/Engine.KismetSystemLibrary.EndTransaction
	constexpr static const FunctionPointer<UKismetSystemLibrary, int32_t> EndTransaction = { 0x1662890, 192 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugString
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const FString, const AActor*, const FLinearColor, const float> DrawDebugString = { 0x484a6b0, 193 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugSphere
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const float, const int32_t, const FLinearColor, const float, const float> DrawDebugSphere = { 0x484b7d0, 194 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugPoint
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const float, const FLinearColor, const float> DrawDebugPoint = { 0x484c640, 195 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugPlane
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FPlane&, const FVector, const float, const FLinearColor, const float> DrawDebugPlane = { 0x484a360, 196 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugLine
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const FVector, const FLinearColor, const float, const float> DrawDebugLine = { 0x484ce30, 197 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFrustum
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FTransform&, const FLinearColor, const float, const float> DrawDebugFrustum = { 0x484a040, 198 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryTransform
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FDebugFloatHistory&, const FTransform&, const FVector2D, const FLinearColor, const float> DrawDebugFloatHistoryTransform = { 0x4849ac0, 199 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugFloatHistoryLocation
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FDebugFloatHistory&, const FVector, const FVector2D, const FLinearColor, const float> DrawDebugFloatHistoryLocation = { 0x4849730, 200 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCylinder
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const FVector, const float, const int32_t, const FLinearColor, const float, const float> DrawDebugCylinder = { 0x484b390, 201 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCoordinateSystem
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const FRotator, const float, const float, const float> DrawDebugCoordinateSystem = { 0x484bb90, 202 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugConeInDegrees
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const FVector, const float, const float, const float, const int32_t, const FLinearColor, const float, const float> DrawDebugConeInDegrees = { 0x484ae50, 203 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCone
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const FVector, const float, const float, const float, const int32_t, const FLinearColor, const float, const float> DrawDebugCone = { 0x484ae50, 204 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCircle
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const float, const int32_t, const FLinearColor, const float, const float, const FVector, const FVector, const bool> DrawDebugCircle = { 0x484c900, 205 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCapsule
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const float, const float, const FRotator, const FLinearColor, const float, const float> DrawDebugCapsule = { 0x484aa20, 206 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugCamera
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const ACameraActor*, const FLinearColor, const float> DrawDebugCamera = { 0x4849e80, 207 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugBox
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const FVector, const FLinearColor, const FRotator, const float, const float> DrawDebugBox = { 0x484bec0, 208 }; 
	// Function /Script/Engine.KismetSystemLibrary.DrawDebugArrow
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const FVector, const FVector, const float, const FLinearColor, const float, const float> DrawDebugArrow = { 0x484c280, 209 }; 
	// Function /Script/Engine.KismetSystemLibrary.DoesImplementInterface
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const UClass*> DoesImplementInterface = { 0x4867a90, 210 }; 
	// Function /Script/Engine.KismetSystemLibrary.Delay
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*, const float, const FLatentActionInfo> Delay = { 0x48633f0, 211 }; 
	// Function /Script/Engine.KismetSystemLibrary.CreateCopyForUndoBuffer
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const UObject*> CreateCopyForUndoBuffer = { 0x17a7aa0, 212 }; 
	// Function /Script/Engine.KismetSystemLibrary.ConvertToRelativePath
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const FString> ConvertToRelativePath = { 0x48682b0, 213 }; 
	// Function /Script/Engine.KismetSystemLibrary.ConvertToAbsolutePath
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const FString> ConvertToAbsolutePath = { 0x48680b0, 214 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjPathToSoftObjRef
	constexpr static const FunctionPointer<UKismetSystemLibrary, TWeakObjectPtr<UObject*>, const FSoftObjectPath&> Conv_SoftObjPathToSoftObjRef = { 0x4867260, 215 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToString
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const TWeakObjectPtr<UObject*>&> Conv_SoftObjectReferenceToString = { 0x4866590, 216 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftObjectReferenceToObject
	constexpr static const FunctionPointer<UKismetSystemLibrary, UObject*, const TWeakObjectPtr<UObject*>&> Conv_SoftObjectReferenceToObject = { 0x4865e40, 217 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToString
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const TSoftObjectPtr<UClass*>&> Conv_SoftClassReferenceToString = { 0x4866590, 218 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassReferenceToClass
	constexpr static const FunctionPointer<UKismetSystemLibrary, UClass*, const TSoftObjectPtr<UClass*>&> Conv_SoftClassReferenceToClass = { 0x4865c70, 219 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_SoftClassPathToSoftClassRef
	constexpr static const FunctionPointer<UKismetSystemLibrary, TSoftObjectPtr<UClass*>, const FSoftClassPath&> Conv_SoftClassPathToSoftClassRef = { 0x4866dd0, 220 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetTypeToString
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const FPrimaryAssetType> Conv_PrimaryAssetTypeToString = { 0x48455a0, 221 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_PrimaryAssetIdToString
	constexpr static const FunctionPointer<UKismetSystemLibrary, FString, const FPrimaryAssetId> Conv_PrimaryAssetIdToString = { 0x4845a00, 222 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_ObjectToSoftObjectReference
	constexpr static const FunctionPointer<UKismetSystemLibrary, TWeakObjectPtr<UObject*>, const UObject*> Conv_ObjectToSoftObjectReference = { 0x4865810, 223 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_InterfaceToObject
	constexpr static const FunctionPointer<UKismetSystemLibrary, UObject*, const TScriptInterface<Class>&> Conv_InterfaceToObject = { 0x48674e0, 224 }; 
	// Function /Script/Engine.KismetSystemLibrary.Conv_ClassToSoftClassReference
	constexpr static const FunctionPointer<UKismetSystemLibrary, TSoftObjectPtr<UClass*>, const UClass*&> Conv_ClassToSoftClassReference = { 0x4865700, 225 }; 
	// Function /Script/Engine.KismetSystemLibrary.ControlScreensaver
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const bool> ControlScreensaver = { 0x26a9510, 226 }; 
	// Function /Script/Engine.KismetSystemLibrary.ComponentOverlapComponents
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UPrimitiveComponent*, const FTransform&, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const UClass*, const TArray<AActor*>&, const TArray<UPrimitiveComponent*>&> ComponentOverlapComponents = { 0x4859410, 227 }; 
	// Function /Script/Engine.KismetSystemLibrary.ComponentOverlapActors
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UPrimitiveComponent*, const FTransform&, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const UClass*, const TArray<AActor*>&, const TArray<AActor*>&> ComponentOverlapActors = { 0x4859870, 228 }; 
	// Function /Script/Engine.KismetSystemLibrary.CollectGarbage
	constexpr static const FunctionPointer<UKismetSystemLibrary, void> CollectGarbage = { 0x48486f0, 229 }; 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingleForObjects
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const float, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> CapsuleTraceSingleForObjects = { 0x4851bd0, 230 }; 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingleByProfile
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const float, const FName, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> CapsuleTraceSingleByProfile = { 0x484dbb0, 231 }; 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceSingle
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const float, const TEnumAsByte<ETraceTypeQuery>, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> CapsuleTraceSingle = { 0x4855c90, 232 }; 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMultiForObjects
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const float, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> CapsuleTraceMultiForObjects = { 0x4851380, 233 }; 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMultiByProfile
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const float, const FName, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> CapsuleTraceMultiByProfile = { 0x484d370, 234 }; 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleTraceMulti
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const float, const float, const TEnumAsByte<ETraceTypeQuery>, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> CapsuleTraceMulti = { 0x4855460, 235 }; 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleOverlapComponents
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const float, const float, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const UClass*, const TArray<AActor*>&, const TArray<UPrimitiveComponent*>&> CapsuleOverlapComponents = { 0x4859cd0, 236 }; 
	// Function /Script/Engine.KismetSystemLibrary.CapsuleOverlapActors
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const float, const float, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const UClass*, const TArray<AActor*>&, const TArray<AActor*>&> CapsuleOverlapActors = { 0x485a200, 237 }; 
	// Function /Script/Engine.KismetSystemLibrary.CanLaunchURL
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const FString> CanLaunchURL = { 0x4848740, 238 }; 
	// Function /Script/Engine.KismetSystemLibrary.CancelTransaction
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const int32_t> CancelTransaction = { 0x198eb40, 239 }; 
	// Function /Script/Engine.KismetSystemLibrary.BreakSoftObjectPath
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FSoftObjectPath, const FString&> BreakSoftObjectPath = { 0x4866f20, 240 }; 
	// Function /Script/Engine.KismetSystemLibrary.BreakSoftClassPath
	constexpr static const FunctionPointer<UKismetSystemLibrary, void, const FSoftClassPath, const FString&> BreakSoftClassPath = { 0x4866f20, 241 }; 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingleForObjects
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const FVector, const FRotator, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> BoxTraceSingleForObjects = { 0x4852cf0, 242 }; 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingleByProfile
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const FVector, const FRotator, const FName, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> BoxTraceSingleByProfile = { 0x484eca0, 243 }; 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceSingle
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const FVector, const FRotator, const TEnumAsByte<ETraceTypeQuery>, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const FHitResult&, const bool, const FLinearColor, const FLinearColor, const float> BoxTraceSingle = { 0x4856d50, 244 }; 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMultiForObjects
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const FVector, const FRotator, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> BoxTraceMultiForObjects = { 0x4852470, 245 }; 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMultiByProfile
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const FVector, const FRotator, const FName, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> BoxTraceMultiByProfile = { 0x484e430, 246 }; 
	// Function /Script/Engine.KismetSystemLibrary.BoxTraceMulti
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const FVector, const FRotator, const TEnumAsByte<ETraceTypeQuery>, const bool, const TArray<AActor*>&, const TEnumAsByte<EDrawDebugTrace>, const TArray<FHitResult>&, const bool, const FLinearColor, const FLinearColor, const float> BoxTraceMulti = { 0x48564f0, 247 }; 
	// Function /Script/Engine.KismetSystemLibrary.BoxOverlapComponents
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const UClass*, const TArray<AActor*>&, const TArray<UPrimitiveComponent*>&> BoxOverlapComponents = { 0x485a730, 248 }; 
	// Function /Script/Engine.KismetSystemLibrary.BoxOverlapActors
	constexpr static const FunctionPointer<UKismetSystemLibrary, bool, const UObject*, const FVector, const FVector, const TArray<TEnumAsByte<EObjectTypeQuery>>&, const UClass*, const TArray<AActor*>&, const TArray<AActor*>&> BoxOverlapActors = { 0x485abe0, 249 }; 
	// Function /Script/Engine.KismetSystemLibrary.BeginTransaction
	constexpr static const FunctionPointer<UKismetSystemLibrary, int32_t, const FString, const FText, const UObject*> BeginTransaction = { 0x4846940, 250 }; 
	// Function /Script/Engine.KismetSystemLibrary.AddFloatHistorySample
	constexpr static const FunctionPointer<UKismetSystemLibrary, FDebugFloatHistory, const float, const FDebugFloatHistory&> AddFloatHistorySample = { 0x48494c0, 251 }; 
};

/// Class /Script/Engine.KismetTextLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.KismetTextLibrary.TextTrimTrailing
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FText&> TextTrimTrailing = { 0x4871b60, 0 }; 
	// Function /Script/Engine.KismetTextLibrary.TextTrimPrecedingAndTrailing
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FText&> TextTrimPrecedingAndTrailing = { 0x48719d0, 1 }; 
	// Function /Script/Engine.KismetTextLibrary.TextTrimPreceding
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FText&> TextTrimPreceding = { 0x4871cf0, 2 }; 
	// Function /Script/Engine.KismetTextLibrary.TextToUpper
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FText&> TextToUpper = { 0x4871e80, 3 }; 
	// Function /Script/Engine.KismetTextLibrary.TextToLower
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FText&> TextToLower = { 0x4872010, 4 }; 
	// Function /Script/Engine.KismetTextLibrary.TextIsTransient
	constexpr static const FunctionPointer<UKismetTextLibrary, bool, const FText&> TextIsTransient = { 0x48722e0, 5 }; 
	// Function /Script/Engine.KismetTextLibrary.TextIsFromStringTable
	constexpr static const FunctionPointer<UKismetTextLibrary, bool, const FText&> TextIsFromStringTable = { 0x486d9d0, 6 }; 
	// Function /Script/Engine.KismetTextLibrary.TextIsEmpty
	constexpr static const FunctionPointer<UKismetTextLibrary, bool, const FText&> TextIsEmpty = { 0x4872420, 7 }; 
	// Function /Script/Engine.KismetTextLibrary.TextIsCultureInvariant
	constexpr static const FunctionPointer<UKismetTextLibrary, bool, const FText&> TextIsCultureInvariant = { 0x48721a0, 8 }; 
	// Function /Script/Engine.KismetTextLibrary.TextFromStringTable
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FName, const FString> TextFromStringTable = { 0x486d7a0, 9 }; 
	// Function /Script/Engine.KismetTextLibrary.StringTableIdAndKeyFromText
	constexpr static const FunctionPointer<UKismetTextLibrary, bool, const FText, const FName&, const FString&> StringTableIdAndKeyFromText = { 0x486d4f0, 10 }; 
	// Function /Script/Engine.KismetTextLibrary.PolyglotDataToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FPolyglotTextData&> PolyglotDataToText = { 0x486cf20, 11 }; 
	// Function /Script/Engine.KismetTextLibrary.NotEqual_TextText
	constexpr static const FunctionPointer<UKismetTextLibrary, bool, const FText&, const FText&> NotEqual_TextText = { 0x4871030, 12 }; 
	// Function /Script/Engine.KismetTextLibrary.NotEqual_IgnoreCase_TextText
	constexpr static const FunctionPointer<UKismetTextLibrary, bool, const FText&, const FText&> NotEqual_IgnoreCase_TextText = { 0x4870df0, 13 }; 
	// Function /Script/Engine.KismetTextLibrary.IsPolyglotDataValid
	constexpr static const FunctionPointer<UKismetTextLibrary, void, const FPolyglotTextData&, const bool&, const FText&> IsPolyglotDataValid = { 0x486d230, 14 }; 
	// Function /Script/Engine.KismetTextLibrary.GetEmptyText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText> GetEmptyText = { 0x19947f0, 15 }; 
	// Function /Script/Engine.KismetTextLibrary.Format
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FText, const TArray<FFormatArgumentData>> Format = { 0x486db20, 16 }; 
	// Function /Script/Engine.KismetTextLibrary.FindTextInLocalizationTable
	constexpr static const FunctionPointer<UKismetTextLibrary, bool, const FString, const FString, const FText&> FindTextInLocalizationTable = { 0x48716f0, 17 }; 
	// Function /Script/Engine.KismetTextLibrary.EqualEqual_TextText
	constexpr static const FunctionPointer<UKismetTextLibrary, bool, const FText&, const FText&> EqualEqual_TextText = { 0x48714b0, 18 }; 
	// Function /Script/Engine.KismetTextLibrary.EqualEqual_IgnoreCase_TextText
	constexpr static const FunctionPointer<UKismetTextLibrary, bool, const FText&, const FText&> EqualEqual_IgnoreCase_TextText = { 0x4871270, 19 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_VectorToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FVector> Conv_VectorToText = { 0x4873100, 20 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_Vector2dToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FVector2D> Conv_Vector2dToText = { 0x4872fd0, 21 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_TransformToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FTransform&> Conv_TransformToText = { 0x4872d00, 22 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_TextToString
	constexpr static const FunctionPointer<UKismetTextLibrary, FString, const FText&> Conv_TextToString = { 0x4872830, 23 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_StringToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FString> Conv_StringToText = { 0x48726f0, 24 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_RotatorToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FRotator> Conv_RotatorToText = { 0x4872e90, 25 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_ObjectToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const UObject*> Conv_ObjectToText = { 0x4872b30, 26 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_NameToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FName> Conv_NameToText = { 0x4872560, 27 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_IntToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const int32_t, const bool, const bool, const int32_t, const int32_t> Conv_IntToText = { 0x4870790, 28 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_Int64ToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const int64_t, const bool, const bool, const int32_t, const int32_t> Conv_Int64ToText = { 0x48703e0, 29 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_FloatToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const float, const TEnumAsByte<ERoundingMode>, const bool, const bool, const int32_t, const int32_t, const int32_t, const int32_t> Conv_FloatToText = { 0x486feb0, 30 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_ColorToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FLinearColor> Conv_ColorToText = { 0x4872a00, 31 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_ByteToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const char> Conv_ByteToText = { 0x4870b40, 32 }; 
	// Function /Script/Engine.KismetTextLibrary.Conv_BoolToText
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const bool> Conv_BoolToText = { 0x4870cc0, 33 }; 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneTime_DateTime
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FDateTime&, const FString> AsTimeZoneTime_DateTime = { 0x486dfc0, 34 }; 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneDateTime_DateTime
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FDateTime&, const FString> AsTimeZoneDateTime_DateTime = { 0x486e3b0, 35 }; 
	// Function /Script/Engine.KismetTextLibrary.AsTimeZoneDate_DateTime
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FDateTime&, const FString> AsTimeZoneDate_DateTime = { 0x486e7b0, 36 }; 
	// Function /Script/Engine.KismetTextLibrary.AsTimespan_Timespan
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FTimespan&> AsTimespan_Timespan = { 0x486de70, 37 }; 
	// Function /Script/Engine.KismetTextLibrary.AsTime_DateTime
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FDateTime&> AsTime_DateTime = { 0x486e1f0, 38 }; 
	// Function /Script/Engine.KismetTextLibrary.AsPercent_Float
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const float, const TEnumAsByte<ERoundingMode>, const bool, const bool, const int32_t, const int32_t, const int32_t, const int32_t> AsPercent_Float = { 0x486eba0, 39 }; 
	// Function /Script/Engine.KismetTextLibrary.AsDateTime_DateTime
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FDateTime&> AsDateTime_DateTime = { 0x486e5e0, 40 }; 
	// Function /Script/Engine.KismetTextLibrary.AsDate_DateTime
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const FDateTime&> AsDate_DateTime = { 0x486e9e0, 41 }; 
	// Function /Script/Engine.KismetTextLibrary.AsCurrencyBase
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const int32_t, const FString> AsCurrencyBase = { 0x486fc80, 42 }; 
	// Function /Script/Engine.KismetTextLibrary.AsCurrency_Integer
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const int32_t, const TEnumAsByte<ERoundingMode>, const bool, const bool, const int32_t, const int32_t, const int32_t, const int32_t, const FString> AsCurrency_Integer = { 0x486f6b0, 43 }; 
	// Function /Script/Engine.KismetTextLibrary.AsCurrency_Float
	constexpr static const FunctionPointer<UKismetTextLibrary, FText, const float, const TEnumAsByte<ERoundingMode>, const bool, const bool, const int32_t, const int32_t, const int32_t, const int32_t, const FString> AsCurrency_Float = { 0x486f0d0, 44 }; 
};

/// Struct /Script/Engine.LayerActorStats
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FLayerActorStats
{ 
	class UClass*                                      Type;                                                       // 0x0000   (0x0008)  
	int32_t                                            total;                                                      // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Class /Script/Engine.Layer
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class ULayer : public UObject
{ 
public:
	FName                                              LayerName;                                                  // 0x0028   (0x0008)  
	bool                                               bIsVisible : 1;                                             // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<FLayerActorStats>                           ActorStats;                                                 // 0x0038   (0x0010)  
};

/// Class /Script/Engine.LevelPartitionInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class ULevelPartitionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.ReplicatedStaticActorDestructionInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FReplicatedStaticActorDestructionInfo
{ 
	unsigned char                                      UnknownData01_7[0x30];                                      // 0x0000   (0x0030)  MISSED
	class UClass*                                      ObjClass;                                                   // 0x0030   (0x0008)  
};

/// Class /Script/Engine.Level
/// Size: 0x02D0 (720 bytes) (0x000028 - 0x0002D0) align n/a MaxSize: 0x02D0
class ULevel : public UObject
{ 
public:
	unsigned char                                      UnknownData09_8[0x90];                                      // 0x0028   (0x0090)  MISSED
	class UWorld*                                      OwningWorld;                                                // 0x00B8   (0x0008)  
	class UModel*                                      Model;                                                      // 0x00C0   (0x0008)  
	TArray<class UModelComponent*>                     ModelComponents;                                            // 0x00C8   (0x0010)  
	class ULevelActorContainer*                        ActorCluster;                                               // 0x00D8   (0x0008)  
	int32_t                                            NumTextureStreamingUnbuiltComponents;                       // 0x00E0   (0x0004)  
	int32_t                                            NumTextureStreamingDirtyResources;                          // 0x00E4   (0x0004)  
	class ALevelScriptActor*                           LevelScriptActor;                                           // 0x00E8   (0x0008)  
	class ANavigationObjectBase*                       NavListStart;                                               // 0x00F0   (0x0008)  
	class ANavigationObjectBase*                       NavListEnd;                                                 // 0x00F8   (0x0008)  
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                              // 0x0100   (0x0010)  
	float                                              LightmapTotalSize;                                          // 0x0110   (0x0004)  
	float                                              ShadowmapTotalSize;                                         // 0x0114   (0x0004)  
	TArray<FVector>                                    StaticNavigableGeometry;                                    // 0x0118   (0x0010)  
	TArray<FGuid>                                      StreamingTextureGuids;                                      // 0x0128   (0x0010)  
	unsigned char                                      UnknownData10_6[0x98];                                      // 0x0138   (0x0098)  MISSED
	FGuid                                              LevelBuildDataId;                                           // 0x01D0   (0x0010)  
	class UMapBuildDataRegistry*                       MapBuildData;                                               // 0x01E0   (0x0008)  
	FIntVector                                         LightBuildLevelOffset;                                      // 0x01E8   (0x000C)  
	bool                                               bIsLightingScenario : 1;                                    // 0x01F4:0 (0x0001)  
	unsigned char                                      UnknownBit11 : 1;                                           // 0x01F4:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit12 : 1;                                           // 0x01F4:2 (0x0001)  MISSED
	bool                                               bTextureStreamingRotationChanged : 1;                       // 0x01F4:3 (0x0001)  
	bool                                               bStaticComponentsRegisteredInStreamingManager : 1;          // 0x01F4:4 (0x0001)  
	bool                                               bIsVisible : 1;                                             // 0x01F4:5 (0x0001)  
	unsigned char                                      UnknownData13_5[0x73];                                      // 0x01F5   (0x0073)  MISSED
	class AWorldSettings*                              WorldSettings;                                              // 0x0268   (0x0008)  
	unsigned char                                      UnknownData14_6[0x8];                                       // 0x0270   (0x0008)  MISSED
	FBox                                               CookedCachedActorsBounds;                                   // 0x0278   (0x001C)  
	unsigned char                                      UnknownData15_6[0x4];                                       // 0x0294   (0x0004)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0298   (0x0010)  
	unsigned char                                      UnknownData16_6[0x10];                                      // 0x02A8   (0x0010)  MISSED
	TArray<FReplicatedStaticActorDestructionInfo>      DestroyedReplicatedStaticActors;                            // 0x02B8   (0x0010)  
	unsigned char                                      UnknownData17_7[0x8];                                       // 0x02C8   (0x0008)  MISSED
};

/// Class /Script/Engine.LevelActorContainer
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class ULevelActorContainer : public UObject
{ 
public:
	TArray<class AActor*>                              Actors;                                                     // 0x0028   (0x0010)  
};

/// Class /Script/Engine.LevelBounds
/// Size: 0x02D8 (728 bytes) (0x0002C8 - 0x0002D8) align n/a MaxSize: 0x02D8
class ALevelBounds : public AActor
{ 
public:
	class UBoxComponent*                               BoxComponent;                                               // 0x02C8   (0x0008)  
	bool                                               bAutoUpdateBounds;                                          // 0x02D0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02D1   (0x0007)  MISSED
};

/// Class /Script/Engine.LevelScriptActor
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ALevelScriptActor : public AActor
{ 
public:
	bool                                               bInputEnabled : 1;                                          // 0x02C8:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02C9   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.LevelScriptActor.WorldOriginLocationChanged
	constexpr static const FunctionPointer<ALevelScriptActor, void, const FIntVector, const FIntVector> WorldOriginLocationChanged = { 0x2bbb090, 0 }; 
	// Function /Script/Engine.LevelScriptActor.SetCinematicMode
	constexpr static const FunctionPointer<ALevelScriptActor, void, const bool, const bool, const bool, const bool, const bool> SetCinematicMode = { 0x4875b70, 1 }; 
	// Function /Script/Engine.LevelScriptActor.RemoteEvent
	constexpr static const FunctionPointer<ALevelScriptActor, bool, const FName> RemoteEvent = { 0x4875ec0, 2 }; 
	// Function /Script/Engine.LevelScriptActor.LevelReset
	constexpr static const FunctionPointer<ALevelScriptActor, void> LevelReset = { 0x2bbb090, 3 }; 
};

/// Class /Script/Engine.LevelScriptBlueprint
/// Size: 0x00A0 (160 bytes) (0x0000A0 - 0x0000A0) align n/a MaxSize: 0x00A0
class ULevelScriptBlueprint : public UBlueprint
{ 
public:
};

/// Struct /Script/Engine.StreamingLevelsToConsider
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align n/a MaxSize: 0x0078
struct FStreamingLevelsToConsider
{ 
	TArray<class ULevelStreaming*>                     StreamingLevels;                                            // 0x0000   (0x0010)  
	unsigned char                                      UnknownData01_7[0x68];                                      // 0x0010   (0x0068)  MISSED
};

/// Struct /Script/Engine.LevelCollection
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align n/a MaxSize: 0x0078
struct FLevelCollection
{ 
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class AGameStateBase*                              GameState;                                                  // 0x0008   (0x0008)  
	class UNetDriver*                                  NetDriver;                                                  // 0x0010   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x0018   (0x0008)  
	class ULevel*                                      PersistentLevel;                                            // 0x0020   (0x0008)  
	TSet<ULevel*>                                      Levels;                                                     // 0x0028   (0x0050)  
};

/// Struct /Script/Engine.TaggedActorsContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FTaggedActorsContainer
{ 
	TArray<class AActor*>                              TaggedActors;                                               // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PSCPoolElem
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FPSCPoolElem
{ 
	class UParticleSystemComponent*                    PSC;                                                        // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.PSCPool
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FPSCPool
{ 
	TArray<FPSCPoolElem>                               FreeElements;                                               // 0x0000   (0x0010)  
	TArray<class UParticleSystemComponent*>            InUseComponents_Auto;                                       // 0x0010   (0x0010)  
	TArray<class UParticleSystemComponent*>            InUseComponents_Manual;                                     // 0x0020   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Struct /Script/Engine.WorldPSCPool
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FWorldPSCPool
{ 
	TMap<class UParticleSystem*, FPSCPool>             WorldParticleSystemPools;                                   // 0x0000   (0x0050)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.World
/// Size: 0x0A00 (2560 bytes) (0x000028 - 0x000A00) align n/a MaxSize: 0x0A00
class UWorld : public UObject
{ 
public:
	unsigned char                                      UnknownData15_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	class ULevel*                                      PersistentLevel;                                            // 0x0030   (0x0008)  
	class UNetDriver*                                  NetDriver;                                                  // 0x0038   (0x0008)  
	class ULineBatchComponent*                         LineBatcher;                                                // 0x0040   (0x0008)  
	class ULineBatchComponent*                         PersistentLineBatcher;                                      // 0x0048   (0x0008)  
	class ULineBatchComponent*                         ForegroundLineBatcher;                                      // 0x0050   (0x0008)  
	class AGameNetworkManager*                         NetworkManager;                                             // 0x0058   (0x0008)  
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                    // 0x0060   (0x0008)  
	TArray<class UObject*>                             ExtraReferencedObjects;                                     // 0x0068   (0x0010)  
	TArray<class UObject*>                             PerModuleDataObjects;                                       // 0x0078   (0x0010)  
	TArray<class ULevelStreaming*>                     StreamingLevels;                                            // 0x0088   (0x0010)  
	FStreamingLevelsToConsider                         StreamingLevelsToConsider;                                  // 0x0098   (0x0078)  
	unsigned char                                      UnknownData16_6[0x50];                                      // 0x0110   (0x0050)  MISSED
	FString                                            StreamingLevelsPrefix;                                      // 0x0160   (0x0010)  
	class ULevel*                                      CurrentLevelPendingVisibility;                              // 0x0170   (0x0008)  
	class ULevel*                                      CurrentLevelPendingInvisibility;                            // 0x0178   (0x0008)  
	class UDemoNetDriver*                              DemoNetDriver;                                              // 0x0180   (0x0008)  
	class AParticleEventManager*                       MyParticleEventManager;                                     // 0x0188   (0x0008)  
	class APhysicsVolume*                              DefaultPhysicsVolume;                                       // 0x0190   (0x0008)  
	unsigned char                                      UnknownData17_6[0x17];                                      // 0x0198   (0x0017)  MISSED
	unsigned char                                      UnknownBit18 : 1;                                           // 0x01AF:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit19 : 1;                                           // 0x01AF:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit20 : 1;                                           // 0x01AF:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit21 : 1;                                           // 0x01AF:3 (0x0001)  MISSED
	bool                                               bAreConstraintsDirty : 1;                                   // 0x01AF:4 (0x0001)  
	unsigned char                                      UnknownData22_5[0x8];                                       // 0x01B0   (0x0008)  MISSED
	class UNavigationSystemBase*                       NavigationSystem;                                           // 0x01B8   (0x0008)  
	class AGameModeBase*                               AuthorityGameMode;                                          // 0x01C0   (0x0008)  
	class AGameStateBase*                              GameState;                                                  // 0x01C8   (0x0008)  
	class UAISystemBase*                               AISystem;                                                   // 0x01D0   (0x0008)  
	class UAvoidanceManager*                           AvoidanceManager;                                           // 0x01D8   (0x0008)  
	TArray<class ULevel*>                              Levels;                                                     // 0x01E0   (0x0010)  
	TArray<FLevelCollection>                           LevelCollections;                                           // 0x01F0   (0x0010)  
	unsigned char                                      UnknownData23_6[0x28];                                      // 0x0200   (0x0028)  MISSED
	class UGameInstance*                               OwningGameInstance;                                         // 0x0228   (0x0008)  
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                              // 0x0230   (0x0010)  
	class UCanvas*                                     CanvasForRenderingToTarget;                                 // 0x0240   (0x0008)  
	class UCanvas*                                     CanvasForDrawMaterialToRenderTarget;                        // 0x0248   (0x0008)  
	unsigned char                                      UnknownData24_6[0x70];                                      // 0x0250   (0x0070)  MISSED
	TSet<UActorComponent*>                             ComponentsThatNeedPreEndOfFrameSync;                        // 0x02C0   (0x0050)  
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate;                         // 0x0310   (0x0010)  
	TArray<class UActorComponent*>                     ComponentsThatNeedEndOfFrameUpdate_OnGameThread;            // 0x0320   (0x0010)  
	unsigned char                                      UnknownData25_6[0x388];                                     // 0x0330   (0x0388)  MISSED
	TMap<FName, FTaggedActorsContainer>                TaggedActorMap;                                             // 0x06B8   (0x0050)  
	unsigned char                                      UnknownData26_6[0x80];                                      // 0x0708   (0x0080)  MISSED
	class UWorldComposition*                           WorldComposition;                                           // 0x0788   (0x0008)  
	unsigned char                                      UnknownData27_6[0x3];                                       // 0x0790   (0x0003)  MISSED
	bool                                               bEnableFixedStreamingLocation;                              // 0x0793   (0x0001)  
	FVector                                            FixedStreamingLocation;                                     // 0x0794   (0x000C)  
	unsigned char                                      UnknownData28_6[0x140];                                     // 0x07A0   (0x0140)  MISSED
	FWorldPSCPool                                      PSCPool;                                                    // 0x08E0   (0x0058)  
	unsigned char                                      UnknownData29_7[0xC8];                                      // 0x0938   (0x00C8)  MISSED

	/// Functions
	// Function /Script/Engine.World.K2_GetWorldSettings
	constexpr static const FunctionPointer<UWorld, AWorldSettings*> K2_GetWorldSettings = { 0x49b3f70, 0 }; 
	// Function /Script/Engine.World.HandleTimelineScrubbed
	constexpr static const FunctionPointer<UWorld, void> HandleTimelineScrubbed = { 0x49b3fa0, 1 }; 
};

/// Class /Script/Engine.LevelStreaming
/// Size: 0x0160 (352 bytes) (0x000028 - 0x000160) align n/a MaxSize: 0x0158
class ULevelStreaming : public UObject
{ 
public:
	TWeakObjectPtr<class UWorld*>                      WorldAsset;                                                 // 0x0028   (0x0008)  
	unsigned char                                      UnknownData10_6[0x20];                                      // 0x0030   (0x0020)  MISSED
	FName                                              PackageNameToLoad;                                          // 0x0050   (0x0008)  
	TArray<FName>                                      LODPackageNames;                                            // 0x0058   (0x0010)  
	unsigned char                                      UnknownData11_6[0x18];                                      // 0x0068   (0x0018)  MISSED
	FTransform                                         LevelTransform;                                             // 0x0080   (0x0030)  
	int32_t                                            LevelLODIndex;                                              // 0x00B0   (0x0004)  
	int32_t                                            StreamingPriority;                                          // 0x00B4   (0x0004)  
	unsigned char                                      UnknownData12_6[0x2];                                       // 0x00B8   (0x0002)  MISSED
	unsigned char                                      UnknownBit13 : 1;                                           // 0x00BA:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit14 : 1;                                           // 0x00BA:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit15 : 1;                                           // 0x00BA:2 (0x0001)  MISSED
	bool                                               bShouldBeVisible : 1;                                       // 0x00BA:3 (0x0001)  
	bool                                               bShouldBeLoaded : 1;                                        // 0x00BA:4 (0x0001)  
	bool                                               bLocked : 1;                                                // 0x00BA:5 (0x0001)  
	bool                                               bIsStatic : 1;                                              // 0x00BA:6 (0x0001)  
	bool                                               bShouldBlockOnLoad : 1;                                     // 0x00BA:7 (0x0001)  
	bool                                               bShouldBlockOnUnload : 1;                                   // 0x00BB:0 (0x0001)  
	bool                                               bDisableDistanceStreaming : 1;                              // 0x00BB:1 (0x0001)  
	bool                                               bDrawOnLevelStatusMap : 1;                                  // 0x00BB:2 (0x0001)  
	FLinearColor                                       LevelColor;                                                 // 0x00BC   (0x0010)  
	unsigned char                                      UnknownData16_6[0x4];                                       // 0x00CC   (0x0004)  MISSED
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                     // 0x00D0   (0x0010)  
	float                                              MinTimeBetweenVolumeUnloadRequests;                         // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData17_6[0x12];                                      // 0x00E4   (0x0012)  MISSED
	bool                                               bIgnoreStreamingBlock;                                      // 0x00F6   (0x0001)  
	unsigned char                                      UnknownData18_6[0x1];                                       // 0x00F7   (0x0001)  MISSED
	FMulticastInlineDelegate                           OnLevelLoaded;                                              // 0x00F8   (0x0010)  
	FMulticastInlineDelegate                           OnLevelUnloaded;                                            // 0x0108   (0x0010)  
	FMulticastInlineDelegate                           OnLevelShown;                                               // 0x0118   (0x0010)  
	FMulticastInlineDelegate                           OnLevelHidden;                                              // 0x0128   (0x0010)  
	class ULevel*                                      LoadedLevel;                                                // 0x0138   (0x0008)  
	class ULevel*                                      PendingUnloadLevel;                                         // 0x0140   (0x0008)  
	unsigned char                                      UnknownData19_7[0x10];                                      // 0x0148   (0x0010)  MISSED

	/// Functions
	// Function /Script/Engine.LevelStreaming.ShouldBeLoaded
	constexpr static const FunctionPointer<ULevelStreaming, bool> ShouldBeLoaded = { 0x3f30a90, 0 }; 
	// Function /Script/Engine.LevelStreaming.SetShouldBeVisible
	constexpr static const FunctionPointer<ULevelStreaming, void, const bool> SetShouldBeVisible = { 0x4876af0, 1 }; 
	// Function /Script/Engine.LevelStreaming.SetShouldBeLoaded
	constexpr static const FunctionPointer<ULevelStreaming, void, const bool> SetShouldBeLoaded = { 0x47b39d0, 2 }; 
	// Function /Script/Engine.LevelStreaming.SetPriority
	constexpr static const FunctionPointer<ULevelStreaming, void, const int32_t> SetPriority = { 0x4876910, 3 }; 
	// Function /Script/Engine.LevelStreaming.SetLevelLODIndex
	constexpr static const FunctionPointer<ULevelStreaming, void, const int32_t> SetLevelLODIndex = { 0x4876a20, 4 }; 
	// Function /Script/Engine.LevelStreaming.SetIsRequestingUnloadAndRemoval
	constexpr static const FunctionPointer<ULevelStreaming, void, const bool> SetIsRequestingUnloadAndRemoval = { 0x4876800, 5 }; 
	// Function /Script/Engine.LevelStreaming.IsStreamingStatePending
	constexpr static const FunctionPointer<ULevelStreaming, bool> IsStreamingStatePending = { 0x48765d0, 6 }; 
	// Function /Script/Engine.LevelStreaming.IsLevelVisible
	constexpr static const FunctionPointer<ULevelStreaming, bool> IsLevelVisible = { 0x4876760, 7 }; 
	// Function /Script/Engine.LevelStreaming.IsLevelLoaded
	constexpr static const FunctionPointer<ULevelStreaming, bool> IsLevelLoaded = { 0x4876730, 8 }; 
	// Function /Script/Engine.LevelStreaming.GetWorldAssetPackageFName
	constexpr static const FunctionPointer<ULevelStreaming, FName> GetWorldAssetPackageFName = { 0x48767c0, 9 }; 
	// Function /Script/Engine.LevelStreaming.GetLoadedLevel
	constexpr static const FunctionPointer<ULevelStreaming, ULevel*> GetLoadedLevel = { 0x48767a0, 10 }; 
	// Function /Script/Engine.LevelStreaming.GetLevelScriptActor
	constexpr static const FunctionPointer<ULevelStreaming, ALevelScriptActor*> GetLevelScriptActor = { 0x4876490, 11 }; 
	// Function /Script/Engine.LevelStreaming.GetIsRequestingUnloadAndRemoval
	constexpr static const FunctionPointer<ULevelStreaming, bool> GetIsRequestingUnloadAndRemoval = { 0x48768e0, 12 }; 
	// Function /Script/Engine.LevelStreaming.CreateInstance
	constexpr static const FunctionPointer<ULevelStreaming, ULevelStreaming*, const FString> CreateInstance = { 0x48764d0, 13 }; 
};

/// Class /Script/Engine.LevelStreamingAlwaysLoaded
/// Size: 0x0160 (352 bytes) (0x000158 - 0x000160) align n/a MaxSize: 0x0160
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0158   (0x0008)  MISSED
};

/// Class /Script/Engine.LevelStreamingDynamic
/// Size: 0x0160 (352 bytes) (0x000158 - 0x000160) align n/a MaxSize: 0x0160
class ULevelStreamingDynamic : public ULevelStreaming
{ 
public:
	bool                                               bInitiallyLoaded : 1;                                       // 0x0158:0 (0x0001)  
	bool                                               bInitiallyVisible : 1;                                      // 0x0158:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0159   (0x0003)  MISSED
	FPerPlatformBool                                   KeepLoadOnHDDMode;                                          // 0x015C   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x015D   (0x0003)  MISSED

	/// Functions
	// Function /Script/Engine.LevelStreamingDynamic.LoadLevelInstanceBySoftObjectPtr
	constexpr static const FunctionPointer<ULevelStreamingDynamic, ULevelStreamingDynamic*, const UObject*, const TWeakObjectPtr<UWorld*>, const FVector, const FRotator, const bool&, const FString> LoadLevelInstanceBySoftObjectPtr = { 0x4877600, 0 }; 
	// Function /Script/Engine.LevelStreamingDynamic.LoadLevelInstance
	constexpr static const FunctionPointer<ULevelStreamingDynamic, ULevelStreamingDynamic*, const UObject*, const FString, const FVector, const FRotator, const bool&, const FString> LoadLevelInstance = { 0x4877ad0, 1 }; 
};

/// Class /Script/Engine.LevelStreamingPersistent
/// Size: 0x0160 (352 bytes) (0x000158 - 0x000160) align n/a MaxSize: 0x0160
class ULevelStreamingPersistent : public ULevelStreaming
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0158   (0x0008)  MISSED
};

/// Class /Script/Engine.LevelStreamingVolume
/// Size: 0x0348 (840 bytes) (0x000318 - 0x000348) align n/a MaxSize: 0x0348
class ALevelStreamingVolume : public AVolume
{ 
public:
	TArray<FName>                                      StreamingLevelNames;                                        // 0x0318   (0x0010)  
	bool                                               bEditorPreVisOnly : 1;                                      // 0x0328:0 (0x0001)  
	bool                                               bDisabled : 1;                                              // 0x0328:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0329   (0x0003)  MISSED
	TEnumAsByte<EStreamingVolumeUsage>                 StreamingUsage;                                             // 0x032C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x032D   (0x0003)  MISSED
	FVector                                            AdditiveUnloadVolumeExtent;                                 // 0x0330   (0x000C)  
	unsigned char                                      UnknownData05_7[0xC];                                       // 0x033C   (0x000C)  MISSED
};

/// Class /Script/Engine.LightmappedSurfaceCollection
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class ULightmappedSurfaceCollection : public UObject
{ 
public:
	class UModel*                                      SourceModel;                                                // 0x0028   (0x0008)  
	TArray<int32_t>                                    Surfaces;                                                   // 0x0030   (0x0010)  
};

/// Class /Script/Engine.LightMapTexture2D
/// Size: 0x0110 (272 bytes) (0x000108 - 0x000110) align n/a MaxSize: 0x0110
class ULightMapTexture2D : public UTexture2D
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0108   (0x0008)  MISSED
};

/// Class /Script/Engine.LightMapVirtualTexture2D
/// Size: 0x0120 (288 bytes) (0x000108 - 0x000120) align n/a MaxSize: 0x0120
class ULightMapVirtualTexture2D : public UTexture2D
{ 
public:
	TArray<int8_t>                                     TypeToLayer;                                                // 0x0108   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0118   (0x0008)  MISSED
};

/// Class /Script/Engine.LightmassCharacterIndirectDetailVolume
/// Size: 0x0318 (792 bytes) (0x000318 - 0x000318) align n/a MaxSize: 0x0318
class ALightmassCharacterIndirectDetailVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.LightmassImportanceVolume
/// Size: 0x0318 (792 bytes) (0x000318 - 0x000318) align n/a MaxSize: 0x0318
class ALightmassImportanceVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.LightmassPortal
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ALightmassPortal : public AActor
{ 
public:
	class ULightmassPortalComponent*                   PortalComponent;                                            // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.LightmassPortalComponent
/// Size: 0x0270 (624 bytes) (0x000260 - 0x000270) align n/a MaxSize: 0x0270
class ULightmassPortalComponent : public USceneComponent
{ 
public:
	class UBoxComponent*                               PreviewBox;                                                 // 0x0260   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0268   (0x0008)  MISSED
};

/// Class /Script/Engine.LightmassPrimitiveSettingsObject
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class ULightmassPrimitiveSettingsObject : public UObject
{ 
public:
	FLightmassPrimitiveSettings                        LightmassSettings;                                          // 0x0028   (0x0018)  
};

/// Class /Script/Engine.LineBatchComponent
/// Size: 0x0580 (1408 bytes) (0x000538 - 0x000580) align n/a MaxSize: 0x0580
class ULineBatchComponent : public UPrimitiveComponent
{ 
public:
	unsigned char                                      UnknownData01_1[0x48];                                      // 0x0538   (0x0048)  MISSED
};

/// Struct /Script/Engine.LightmassPointLightSettings
/// Size: 0x000C (12 bytes) (0x00000C - 0x00000C) align n/a MaxSize: 0x000C
struct FLightmassPointLightSettings : FLightmassLightSettings
{ 
};

/// Class /Script/Engine.LocalLightComponent
/// Size: 0x03F0 (1008 bytes) (0x0003D8 - 0x0003F0) align n/a MaxSize: 0x03F0
class ULocalLightComponent : public ULightComponent
{ 
public:
	ELightUnits                                        IntensityUnits;                                             // 0x03D8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x03D9   (0x0003)  MISSED
	float                                              Radius;                                                     // 0x03DC   (0x0004)  
	float                                              AttenuationRadius;                                          // 0x03E0   (0x0004)  
	FLightmassPointLightSettings                       LightmassSettings;                                          // 0x03E4   (0x000C)  

	/// Functions
	// Function /Script/Engine.LocalLightComponent.SetIntensityUnits
	constexpr static const FunctionPointer<ULocalLightComponent, void, const ELightUnits> SetIntensityUnits = { 0x487fb20, 0 }; 
	// Function /Script/Engine.LocalLightComponent.SetAttenuationRadius
	constexpr static const FunctionPointer<ULocalLightComponent, void, const float> SetAttenuationRadius = { 0x487fc20, 1 }; 
	// Function /Script/Engine.LocalLightComponent.GetUnitsConversionFactor
	constexpr static const FunctionPointer<ULocalLightComponent, float, const ELightUnits, const ELightUnits, const float> GetUnitsConversionFactor = { 0x487f880, 2 }; 
};

/// Class /Script/Engine.LocalPlayer
/// Size: 0x0258 (600 bytes) (0x000048 - 0x000258) align n/a MaxSize: 0x0258
class ULocalPlayer : public UPlayer
{ 
public:
	unsigned char                                      UnknownData05_8[0x28];                                      // 0x0048   (0x0028)  MISSED
	class UGameViewportClient*                         ViewportClient;                                             // 0x0070   (0x0008)  
	unsigned char                                      UnknownData06_6[0x1C];                                      // 0x0078   (0x001C)  MISSED
	TEnumAsByte<EAspectRatioAxisConstraint>            AspectRatioAxisConstraint;                                  // 0x0094   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0095   (0x0003)  MISSED
	class UClass*                                      PendingLevelPlayerControllerClass;                          // 0x0098   (0x0008)  
	bool                                               bSentSplitJoin : 1;                                         // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x17];                                      // 0x00A1   (0x0017)  MISSED
	int32_t                                            ControllerId;                                               // 0x00B8   (0x0004)  
	unsigned char                                      UnknownData09_7[0x19C];                                     // 0x00BC   (0x019C)  MISSED
};

/// Class /Script/Engine.LocalPlayerSubsystem
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class ULocalPlayerSubsystem : public USubsystem
{ 
public:
};

/// Class /Script/Engine.LODActor
/// Size: 0x0350 (848 bytes) (0x0002C8 - 0x000350) align n/a MaxSize: 0x0350
class ALODActor : public AActor
{ 
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                        // 0x02C8   (0x0008)  
	TMap<class UMaterialInterface*, class UInstancedStaticMeshComponent*> ImpostersStaticMeshComponents;           // 0x02D0   (0x0050)  
	class UHLODProxy*                                  Proxy;                                                      // 0x0320   (0x0008)  
	FName                                              Key;                                                        // 0x0328   (0x0008)  
	float                                              LODDrawDistance;                                            // 0x0330   (0x0004)  
	int32_t                                            LODLevel;                                                   // 0x0334   (0x0004)  
	TArray<class AActor*>                              SubActors;                                                  // 0x0338   (0x0010)  
	bool                                               bUseOnlyShadow;                                             // 0x0348   (0x0001)  
	char                                               CachedNumHLODLevels;                                        // 0x0349   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x034A   (0x0006)  MISSED
};

/// Struct /Script/Engine.ComponentSync
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FComponentSync
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	ESyncOption                                        SyncOption;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.LODMappingData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FLODMappingData
{ 
	TArray<int32_t>                                    Mapping;                                                    // 0x0000   (0x0010)  
	TArray<int32_t>                                    InverseMapping;                                             // 0x0010   (0x0010)  
};

/// Class /Script/Engine.LODSyncComponent
/// Size: 0x0150 (336 bytes) (0x0000C0 - 0x000150) align n/a MaxSize: 0x0150
class ULODSyncComponent : public UActorComponent
{ 
public:
	int32_t                                            NumLODs;                                                    // 0x00C0   (0x0004)  
	int32_t                                            ForcedLOD;                                                  // 0x00C4   (0x0004)  
	TArray<FComponentSync>                             ComponentsToSync;                                           // 0x00C8   (0x0010)  
	TMap<FName, FLODMappingData>                       CustomLODMapping;                                           // 0x00D8   (0x0050)  
	int32_t                                            CurrentLOD;                                                 // 0x0128   (0x0004)  
	int32_t                                            CurrentNumLODs;                                             // 0x012C   (0x0004)  
	TArray<class UPrimitiveComponent*>                 DriveComponents;                                            // 0x0130   (0x0010)  
	TArray<class UPrimitiveComponent*>                 SubComponents;                                              // 0x0140   (0x0010)  

	/// Functions
	// Function /Script/Engine.LODSyncComponent.GetLODSyncDebugText
	constexpr static const FunctionPointer<ULODSyncComponent, FString> GetLODSyncDebugText = { 0x48811a0, 0 }; 
};

/// Class /Script/Engine.LODSyncInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class ULODSyncInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MapBuildDataRegistry
/// Size: 0x0238 (568 bytes) (0x000028 - 0x000238) align n/a MaxSize: 0x0238
class UMapBuildDataRegistry : public UObject
{ 
public:
	TEnumAsByte<ELightingBuildQuality>                 LevelLightingQuality;                                       // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_7[0x20F];                                     // 0x0029   (0x020F)  MISSED
};

/// Struct /Script/Engine.MaterialInput
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FMaterialInput
{ 
	int32_t                                            OutputIndex;                                                // 0x0000   (0x0004)  
	FName                                              ExpressionName;                                             // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.ScalarMaterialInput
/// Size: 0x000C (12 bytes) (0x00000C - 0x00000C) align n/a MaxSize: 0x000C
struct FScalarMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.VectorMaterialInput
/// Size: 0x000C (12 bytes) (0x00000C - 0x00000C) align n/a MaxSize: 0x000C
struct FVectorMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.ColorMaterialInput
/// Size: 0x000C (12 bytes) (0x00000C - 0x00000C) align n/a MaxSize: 0x000C
struct FColorMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.MaterialShadingModelField
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FMaterialShadingModelField
{ 
	uint16_t                                           ShadingModelField;                                          // 0x0000   (0x0002)  
};

/// Struct /Script/Engine.MaterialAttributesInput
/// Size: 0x0010 (16 bytes) (0x00000C - 0x000010) align n/a MaxSize: 0x0010
struct FMaterialAttributesInput : FExpressionInput
{ 
	int32_t                                            PropertyConnectedBitmask;                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.ShadingModelMaterialInput
/// Size: 0x000C (12 bytes) (0x00000C - 0x00000C) align n/a MaxSize: 0x000C
struct FShadingModelMaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.MaterialFunctionInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMaterialFunctionInfo
{ 
	FGuid                                              StateId;                                                    // 0x0000   (0x0010)  
	class UMaterialFunctionInterface*                  Function;                                                   // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MaterialParameterCollectionInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMaterialParameterCollectionInfo
{ 
	FGuid                                              StateId;                                                    // 0x0000   (0x0010)  
	class UMaterialParameterCollection*                ParameterCollection;                                        // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MaterialCachedExpressionData
/// Size: 0x0228 (552 bytes) (0x000000 - 0x000228) align n/a MaxSize: 0x0228
struct FMaterialCachedExpressionData
{ 
	FMaterialCachedParameters                          Parameters;                                                 // 0x0000   (0x01A0)  
	TArray<class UObject*>                             ReferencedTextures;                                         // 0x01A0   (0x0010)  
	TArray<FMaterialFunctionInfo>                      FunctionInfos;                                              // 0x01B0   (0x0010)  
	TArray<FMaterialParameterCollectionInfo>           ParameterCollectionInfos;                                   // 0x01C0   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          DefaultLayers;                                              // 0x01D0   (0x0010)  
	TArray<class UMaterialFunctionInterface*>          DefaultLayerBlends;                                         // 0x01E0   (0x0010)  
	TArray<class ULandscapeGrassType*>                 GrassTypes;                                                 // 0x01F0   (0x0010)  
	TArray<FName>                                      DynamicParameterNames;                                      // 0x0200   (0x0010)  
	TArray<bool>                                       QualityLevelsUsed;                                          // 0x0210   (0x0010)  
	bool                                               bHasRuntimeVirtualTextureOutput : 1;                        // 0x0220:0 (0x0001)  
	bool                                               bHasSceneColor : 1;                                         // 0x0220:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0221   (0x0007)  MISSED
};

/// Class /Script/Engine.Material
/// Size: 0x04C0 (1216 bytes) (0x000088 - 0x0004C0) align n/a MaxSize: 0x04C0
class UMaterial : public UMaterialInterface
{ 
public:
	class UPhysicalMaterial*                           PhysMaterial;                                               // 0x0088   (0x0008)  
	class UPhysicalMaterialMask*                       PhysMaterialMask;                                           // 0x0090   (0x0008)  
	class UPhysicalMaterial*                           PhysicalMaterialMap[8];                                     // 0x0098   (0x0040)  
	FScalarMaterialInput                               Metallic;                                                   // 0x00D8   (0x000C)  
	unsigned char                                      UnknownData23_6[0x8];                                       // 0x00E4   (0x0008)  MISSED
	FScalarMaterialInput                               Specular;                                                   // 0x00EC   (0x000C)  
	unsigned char                                      UnknownData24_6[0x8];                                       // 0x00F8   (0x0008)  MISSED
	FScalarMaterialInput                               Anisotropy;                                                 // 0x0100   (0x000C)  
	unsigned char                                      UnknownData25_6[0x8];                                       // 0x010C   (0x0008)  MISSED
	FVectorMaterialInput                               Normal;                                                     // 0x0114   (0x000C)  
	unsigned char                                      UnknownData26_6[0x8];                                       // 0x0120   (0x0008)  MISSED
	FVectorMaterialInput                               Tangent;                                                    // 0x0128   (0x000C)  
	unsigned char                                      UnknownData27_6[0x8];                                       // 0x0134   (0x0008)  MISSED
	FColorMaterialInput                                EmissiveColor;                                              // 0x013C   (0x000C)  
	unsigned char                                      UnknownData28_6[0x8];                                       // 0x0148   (0x0008)  MISSED
	TEnumAsByte<EMaterialDomain>                       MaterialDomain;                                             // 0x0150   (0x0001)  
	TEnumAsByte<EBlendMode>                            BlendMode;                                                  // 0x0151   (0x0001)  
	TEnumAsByte<EDecalBlendMode>                       DecalBlendMode;                                             // 0x0152   (0x0001)  
	TEnumAsByte<EMaterialDecalResponse>                MaterialDecalResponse;                                      // 0x0153   (0x0001)  
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                               // 0x0154   (0x0001)  
	bool                                               bCastDynamicShadowAsMasked : 1;                             // 0x0155:0 (0x0001)  
	FMaterialShadingModelField                         ShadingModels;                                              // 0x0156   (0x0002)  
	float                                              OpacityMaskClipValue;                                       // 0x0158   (0x0004)  
	FVectorMaterialInput                               WorldPositionOffset;                                        // 0x015C   (0x000C)  
	unsigned char                                      UnknownData29_6[0x8];                                       // 0x0168   (0x0008)  MISSED
	FScalarMaterialInput                               Refraction;                                                 // 0x0170   (0x000C)  
	unsigned char                                      UnknownData30_6[0x8];                                       // 0x017C   (0x0008)  MISSED
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0184   (0x0010)  
	unsigned char                                      UnknownData31_6[0x8];                                       // 0x0194   (0x0008)  MISSED
	FScalarMaterialInput                               PixelDepthOffset;                                           // 0x019C   (0x000C)  
	unsigned char                                      UnknownData32_6[0x8];                                       // 0x01A8   (0x0008)  MISSED
	FShadingModelMaterialInput                         ShadingModelFromMaterialExpression;                         // 0x01B0   (0x000C)  
	unsigned char                                      UnknownData33_6[0x8];                                       // 0x01BC   (0x0008)  MISSED
	bool                                               bEnableSeparateTranslucency : 1;                            // 0x01C4:0 (0x0001)  
	bool                                               bEnableResponsiveAA : 1;                                    // 0x01C4:1 (0x0001)  
	bool                                               bScreenSpaceReflections : 1;                                // 0x01C4:2 (0x0001)  
	bool                                               bContactShadows : 1;                                        // 0x01C4:3 (0x0001)  
	bool                                               TwoSided : 1;                                               // 0x01C4:4 (0x0001)  
	bool                                               DitheredLODTransition : 1;                                  // 0x01C4:5 (0x0001)  
	bool                                               DitherOpacityMask : 1;                                      // 0x01C4:6 (0x0001)  
	bool                                               bAllowNegativeEmissiveColor : 1;                            // 0x01C4:7 (0x0001)  
	TEnumAsByte<ETranslucencyLightingMode>             TranslucencyLightingMode;                                   // 0x01C5   (0x0001)  
	bool                                               bEnableMobileSeparateTranslucency : 1;                      // 0x01C6:0 (0x0001)  
	unsigned char                                      UnknownData34_5[0x1];                                       // 0x01C7   (0x0001)  MISSED
	int32_t                                            NumCustomizedUVs;                                           // 0x01C8   (0x0004)  
	float                                              CustomSkyLightNormalWeight;                                 // 0x01CC   (0x0004)  
	FLinearColor                                       CustomSkyLightNormal;                                       // 0x01D0   (0x0010)  
	float                                              TranslucencyDirectionalLightingIntensity;                   // 0x01E0   (0x0004)  
	float                                              TranslucentShadowDensityScale;                              // 0x01E4   (0x0004)  
	float                                              TranslucentSelfShadowDensityScale;                          // 0x01E8   (0x0004)  
	float                                              TranslucentSelfShadowSecondDensityScale;                    // 0x01EC   (0x0004)  
	float                                              TranslucentSelfShadowSecondOpacity;                         // 0x01F0   (0x0004)  
	float                                              TranslucentBackscatteringExponent;                          // 0x01F4   (0x0004)  
	FLinearColor                                       TranslucentMultipleScatteringExtinction;                    // 0x01F8   (0x0010)  
	float                                              TranslucentShadowStartOffset;                               // 0x0208   (0x0004)  
	bool                                               bDisableDepthTest : 1;                                      // 0x020C:0 (0x0001)  
	bool                                               bWriteOnlyAlpha : 1;                                        // 0x020C:1 (0x0001)  
	bool                                               bGenerateSphericalParticleNormals : 1;                      // 0x020C:2 (0x0001)  
	bool                                               bTangentSpaceNormal : 1;                                    // 0x020C:3 (0x0001)  
	bool                                               bUseEmissiveForDynamicAreaLighting : 1;                     // 0x020C:4 (0x0001)  
	bool                                               bBlockGI : 1;                                               // 0x020C:5 (0x0001)  
	bool                                               bUsedAsSpecialEngineMaterial : 1;                           // 0x020C:6 (0x0001)  
	bool                                               bUsedWithSkeletalMesh : 1;                                  // 0x020C:7 (0x0001)  
	bool                                               bUsedWithEditorCompositing : 1;                             // 0x020D:0 (0x0001)  
	bool                                               bUsedWithParticleSprites : 1;                               // 0x020D:1 (0x0001)  
	bool                                               bUsedWithBeamTrails : 1;                                    // 0x020D:2 (0x0001)  
	bool                                               bUsedWithMeshParticles : 1;                                 // 0x020D:3 (0x0001)  
	bool                                               bUsedWithNiagaraSprites : 1;                                // 0x020D:4 (0x0001)  
	bool                                               bUsedWithNiagaraRibbons : 1;                                // 0x020D:5 (0x0001)  
	bool                                               bUsedWithNiagaraMeshParticles : 1;                          // 0x020D:6 (0x0001)  
	bool                                               bUsedWithGeometryCache : 1;                                 // 0x020D:7 (0x0001)  
	bool                                               bUsedWithStaticLighting : 1;                                // 0x020E:0 (0x0001)  
	bool                                               bUsedWithMorphTargets : 1;                                  // 0x020E:1 (0x0001)  
	bool                                               bUsedWithSplineMeshes : 1;                                  // 0x020E:2 (0x0001)  
	bool                                               bUsedWithInstancedStaticMeshes : 1;                         // 0x020E:3 (0x0001)  
	bool                                               bUsedWithGeometryCollections : 1;                           // 0x020E:4 (0x0001)  
	bool                                               bUsesDistortion : 1;                                        // 0x020E:5 (0x0001)  
	bool                                               bUsedDistortionAfterTranslucency : 1;                       // 0x020E:6 (0x0001)  
	bool                                               bUseSceneColorCopy : 1;                                     // 0x020E:7 (0x0001)  
	bool                                               bDisableBasePixelFog : 1;                                   // 0x020F:0 (0x0001)  
	bool                                               bUsedRenderTargetDefaultFormat32ABGR : 1;                   // 0x020F:1 (0x0001)  
	bool                                               bUsedRenderTarget1Format32ABGR : 1;                         // 0x020F:2 (0x0001)  
	bool                                               bUsedRenderTarget2Format32ABGR : 1;                         // 0x020F:3 (0x0001)  
	bool                                               bUsedWithClothing : 1;                                      // 0x020F:4 (0x0001)  
	unsigned char                                      UnknownBit35 : 1;                                           // 0x020F:5 (0x0001)  MISSED
	unsigned char                                      UnknownBit36 : 1;                                           // 0x020F:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit37 : 1;                                           // 0x020F:7 (0x0001)  MISSED
	bool                                               bUsedWithWater : 1;                                         // 0x0210:0 (0x0001)  
	bool                                               bUsedWithHairStrands : 1;                                   // 0x0210:1 (0x0001)  
	bool                                               bUsedWithLidarPointCloud : 1;                               // 0x0210:2 (0x0001)  
	bool                                               bUsedWithVirtualHeightfieldMesh : 1;                        // 0x0210:3 (0x0001)  
	unsigned char                                      UnknownData38_3[0x3];                                       // 0x0211   (0x0003)  MISSED
	bool                                               bUsedWithUI : 1;                                            // 0x0214:0 (0x0001)  
	bool                                               bAutomaticallySetUsageInEditor : 1;                         // 0x0214:1 (0x0001)  
	bool                                               bFullyRough : 1;                                            // 0x0214:2 (0x0001)  
	bool                                               bUseFullPrecision : 1;                                      // 0x0214:3 (0x0001)  
	bool                                               bUseLightmapDirectionality : 1;                             // 0x0214:4 (0x0001)  
	bool                                               bUseAlphaToCoverage : 1;                                    // 0x0214:5 (0x0001)  
	unsigned char                                      UnknownData39_3[0x3];                                       // 0x0215   (0x0003)  MISSED
	bool                                               bForwardRenderUsePreintegratedGFForSimpleIBL : 1;           // 0x0218:0 (0x0001)  
	unsigned char                                      UnknownData40_3[0x3];                                       // 0x0219   (0x0003)  MISSED
	bool                                               bUseHQForwardReflections : 1;                               // 0x021C:0 (0x0001)  
	bool                                               bUsePlanarForwardReflections : 1;                           // 0x021C:1 (0x0001)  
	bool                                               bNormalCurvatureToRoughness : 1;                            // 0x021C:2 (0x0001)  
	TEnumAsByte<EMaterialTessellationMode>             D3D11TessellationMode;                                      // 0x021D   (0x0001)  
	bool                                               bEnableCrackFreeDisplacement : 1;                           // 0x021E:0 (0x0001)  
	bool                                               bEnableAdaptiveTessellation : 1;                            // 0x021E:1 (0x0001)  
	bool                                               AllowTranslucentCustomDepthWrites : 1;                      // 0x021E:2 (0x0001)  
	bool                                               Wireframe : 1;                                              // 0x021E:3 (0x0001)  
	TEnumAsByte<EMaterialShadingRate>                  ShadingRate;                                                // 0x021F   (0x0001)  
	FVectorMaterialInput                               HeightFogScale;                                             // 0x0220   (0x000C)  
	unsigned char                                      UnknownData41_6[0x8];                                       // 0x022C   (0x0008)  MISSED
	bool                                               bCanMaskedBeAssumedOpaque : 1;                              // 0x0234:0 (0x0001)  
	bool                                               bIsMasked : 1;                                              // 0x0234:1 (0x0001)  
	bool                                               bIsPreviewMaterial : 1;                                     // 0x0234:2 (0x0001)  
	bool                                               bIsFunctionPreviewMaterial : 1;                             // 0x0234:3 (0x0001)  
	bool                                               bUseMaterialAttributes : 1;                                 // 0x0234:4 (0x0001)  
	bool                                               bCastRayTracedShadows : 1;                                  // 0x0234:5 (0x0001)  
	bool                                               bUseTranslucencyVertexFog : 1;                              // 0x0234:6 (0x0001)  
	bool                                               bApplyCloudFogging : 1;                                     // 0x0234:7 (0x0001)  
	bool                                               bIsSky : 1;                                                 // 0x0235:0 (0x0001)  
	bool                                               bComputeFogPerPixel : 1;                                    // 0x0235:1 (0x0001)  
	bool                                               bOutputTranslucentVelocity : 1;                             // 0x0235:2 (0x0001)  
	bool                                               bAllowDevelopmentShaderCompile : 1;                         // 0x0235:3 (0x0001)  
	bool                                               bIsMaterialEditorStatsMaterial : 1;                         // 0x0235:4 (0x0001)  
	TEnumAsByte<EBlendableLocation>                    BlendableLocation;                                          // 0x0236   (0x0001)  
	bool                                               BlendableOutputAlpha : 1;                                   // 0x0237:0 (0x0001)  
	bool                                               bEnableStencilTest : 1;                                     // 0x0237:1 (0x0001)  
	TEnumAsByte<EMaterialStencilCompare>               StencilCompare;                                             // 0x0238   (0x0001)  
	char                                               StencilRefValue;                                            // 0x0239   (0x0001)  
	TEnumAsByte<ERefractionMode>                       RefractionMode;                                             // 0x023A   (0x0001)  
	unsigned char                                      UnknownData42_6[0x1];                                       // 0x023B   (0x0001)  MISSED
	int32_t                                            BlendablePriority;                                          // 0x023C   (0x0004)  
	bool                                               bIsBlendable : 1;                                           // 0x0240:0 (0x0001)  
	unsigned char                                      UnknownData43_5[0x3];                                       // 0x0241   (0x0003)  MISSED
	uint32_t                                           UsageFlagWarnings;                                          // 0x0244   (0x0004)  
	float                                              RefractionDepthBias;                                        // 0x0248   (0x0004)  
	bool                                               bUseAlphaDiscard;                                           // 0x024C   (0x0001)  
	unsigned char                                      UnknownData44_6[0x3];                                       // 0x024D   (0x0003)  MISSED
	FGuid                                              StateId;                                                    // 0x0250   (0x0010)  
	float                                              MaxDisplacement;                                            // 0x0260   (0x0004)  
	unsigned char                                      UnknownData45_6[0x34];                                      // 0x0264   (0x0034)  MISSED
	FMaterialCachedExpressionData                      CachedExpressionData;                                       // 0x0298   (0x0228)  
};

/// Struct /Script/Engine.MaterialSpriteElement
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FMaterialSpriteElement
{ 
	class UMaterialInterface*                          Material;                                                   // 0x0000   (0x0008)  
	class UCurveFloat*                                 DistanceToOpacityCurve;                                     // 0x0008   (0x0008)  
	bool                                               bSizeIsInScreenSpace : 1;                                   // 0x0010:0 (0x0001)  
	bool                                               bLookAtCamera : 1;                                          // 0x0010:1 (0x0001)  
	bool                                               bLookAtCameraZeroPitch : 1;                                 // 0x0010:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              BaseSizeX;                                                  // 0x0014   (0x0004)  
	float                                              BaseSizeY;                                                  // 0x0018   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UCurveFloat*                                 DistanceToSizeCurve;                                        // 0x0020   (0x0008)  
};

/// Class /Script/Engine.MaterialBillboardComponent
/// Size: 0x0550 (1360 bytes) (0x000538 - 0x000550) align n/a MaxSize: 0x0550
class UMaterialBillboardComponent : public UPrimitiveComponent
{ 
public:
	TArray<FMaterialSpriteElement>                     Elements;                                                   // 0x0538   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0548   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.MaterialBillboardComponent.SetElements
	constexpr static const FunctionPointer<UMaterialBillboardComponent, void, const TArray<FMaterialSpriteElement>&> SetElements = { 0x4883660, 0 }; 
	// Function /Script/Engine.MaterialBillboardComponent.AddElement
	constexpr static const FunctionPointer<UMaterialBillboardComponent, void, const UMaterialInterface*, const UCurveFloat*, const bool, const float, const float, const UCurveFloat*> AddElement = { 0x48832d0, 1 }; 
};

/// Class /Script/Engine.MaterialExpressionAbs
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionAbs : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionActorPositionWS
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionAdd
/// Size: 0x0070 (112 bytes) (0x000040 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionAdd : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionAntialiasedTextureMask
/// Size: 0x0088 (136 bytes) (0x000080 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{ 
public:
	float                                              Threshold;                                                  // 0x0080   (0x0004)  
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                    // 0x0084   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0085   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAppendVector
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionAppendVector : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArccosine
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionArccosine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArccosineFast
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionArccosineFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArcsine
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionArcsine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArcsineFast
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionArcsineFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionArctangent : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent2
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionArctangent2 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   X;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangent2Fast
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionArctangent2Fast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   X;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionArctangentFast
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionArctangentFast : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAtmosphericFogColor
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightColor
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionAtmosphericLightVector
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionBentNormalCustomOutput
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBlackBody
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionBlackBody : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Temp;                                                       // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBlendMaterialAttributes
/// Size: 0x0088 (136 bytes) (0x000040 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           A;                                                          // 0x0040   (0x0010)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0050   (0x0008)  MISSED
	FMaterialAttributesInput                           B;                                                          // 0x0058   (0x0010)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0068   (0x0008)  MISSED
	FExpressionInput                                   Alpha;                                                      // 0x0070   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x007C   (0x0008)  MISSED
	TEnumAsByte<EMaterialAttributeBlend>               PixelAttributeBlendType;                                    // 0x0084   (0x0001)  
	TEnumAsByte<EMaterialAttributeBlend>               VertexAttributeBlendType;                                   // 0x0085   (0x0001)  
	unsigned char                                      UnknownData07_7[0x2];                                       // 0x0086   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBreakMaterialAttributes
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0040   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionBumpOffset
/// Size: 0x0088 (136 bytes) (0x000040 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionBumpOffset : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0040   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Height;                                                     // 0x0054   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   HeightRatioInput;                                           // 0x0068   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	float                                              HeightRatio;                                                // 0x007C   (0x0004)  
	float                                              ReferencePlane;                                             // 0x0080   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionCameraPositionWS
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCameraVectorWS
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCeil
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionCeil : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParameter
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionParameter : public UMaterialExpression
{ 
public:
	FName                                              ParameterName;                                              // 0x0040   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0048   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionVectorParameter
/// Size: 0x0070 (112 bytes) (0x000058 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{ 
public:
	FLinearColor                                       DefaultValue;                                               // 0x0058   (0x0010)  
	bool                                               bUseCustomPrimitiveData;                                    // 0x0068   (0x0001)  
	char                                               PrimitiveDataIndex;                                         // 0x0069   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x006A   (0x0006)  MISSED
};

/// Class /Script/Engine.MaterialExpressionChannelMaskParameter
/// Size: 0x0078 (120 bytes) (0x000070 - 0x000078) align n/a MaxSize: 0x0078
class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
{ 
public:
	TEnumAsByte<EChannelMaskParameterColor>            MaskChannel;                                                // 0x0070   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionClamp
/// Size: 0x0088 (136 bytes) (0x000040 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionClamp : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Min;                                                        // 0x0054   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Max;                                                        // 0x0068   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	TEnumAsByte<EClampMode>                            ClampMode;                                                  // 0x007C   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	float                                              MinDefault;                                                 // 0x0080   (0x0004)  
	float                                              MaxDefault;                                                 // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionClearCoatNormalCustomOutput
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCloudSampleAttribute
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionCloudSampleAttribute : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionCollectionParameter
/// Size: 0x0060 (96 bytes) (0x000040 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{ 
public:
	class UMaterialParameterCollection*                Collection;                                                 // 0x0040   (0x0008)  
	FName                                              ParameterName;                                              // 0x0048   (0x0008)  
	FGuid                                              ParameterId;                                                // 0x0050   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionComment
/// Size: 0x0070 (112 bytes) (0x000040 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionComment : public UMaterialExpression
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0040   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x0044   (0x0004)  
	FString                                            text;                                                       // 0x0048   (0x0010)  
	FLinearColor                                       CommentColor;                                               // 0x0058   (0x0010)  
	int32_t                                            FontSize;                                                   // 0x0068   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionComponentMask
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionComponentMask : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	bool                                               R : 1;                                                      // 0x0054:0 (0x0001)  
	bool                                               G : 1;                                                      // 0x0054:1 (0x0001)  
	bool                                               B : 1;                                                      // 0x0054:2 (0x0001)  
	bool                                               A : 1;                                                      // 0x0054:3 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionConstant
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionConstant : public UMaterialExpression
{ 
public:
	float                                              R;                                                          // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionConstant2Vector
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{ 
public:
	float                                              R;                                                          // 0x0040   (0x0004)  
	float                                              G;                                                          // 0x0044   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionConstant3Vector
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align n/a MaxSize: 0x0050
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{ 
public:
	FLinearColor                                       Constant;                                                   // 0x0040   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionConstant4Vector
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align n/a MaxSize: 0x0050
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{ 
public:
	FLinearColor                                       Constant;                                                   // 0x0040   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionConstantBiasScale
/// Size: 0x0060 (96 bytes) (0x000040 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              Bias;                                                       // 0x0054   (0x0004)  
	float                                              Scale;                                                      // 0x0058   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCosine
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionCosine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              Period;                                                     // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionCrossProduct
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionCrossProduct : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionScalarParameter
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{ 
public:
	float                                              DefaultValue;                                               // 0x0058   (0x0004)  
	bool                                               bUseCustomPrimitiveData;                                    // 0x005C   (0x0001)  
	char                                               PrimitiveDataIndex;                                         // 0x005D   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x005E   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionCurveAtlasRowParameter
/// Size: 0x0088 (136 bytes) (0x000060 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
{ 
public:
	class UCurveLinearColor*                           Curve;                                                      // 0x0060   (0x0008)  
	class UCurveLinearColorAtlas*                      Atlas;                                                      // 0x0068   (0x0008)  
	FExpressionInput                                   InputTime;                                                  // 0x0070   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x007C   (0x000C)  MISSED
};

/// Struct /Script/Engine.CustomInput
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FCustomInput
{ 
	FName                                              InputName;                                                  // 0x0000   (0x0008)  
	FExpressionInput                                   Input;                                                      // 0x0008   (0x000C)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0014   (0x0008)  MISSED
};

/// Struct /Script/Engine.CustomOutput
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FCustomOutput
{ 
	FName                                              OutputName;                                                 // 0x0000   (0x0008)  
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                                 // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.CustomDefine
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FCustomDefine
{ 
	FString                                            DefineName;                                                 // 0x0000   (0x0010)  
	FString                                            DefineValue;                                                // 0x0010   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionCustom
/// Size: 0x00A8 (168 bytes) (0x000040 - 0x0000A8) align n/a MaxSize: 0x00A8
class UMaterialExpressionCustom : public UMaterialExpression
{ 
public:
	FString                                            Code;                                                       // 0x0040   (0x0010)  
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                                 // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0051   (0x0007)  MISSED
	FString                                            Description;                                                // 0x0058   (0x0010)  
	TArray<FCustomInput>                               Inputs;                                                     // 0x0068   (0x0010)  
	TArray<FCustomOutput>                              AdditionalOutputs;                                          // 0x0078   (0x0010)  
	TArray<FCustomDefine>                              AdditionalDefines;                                          // 0x0088   (0x0010)  
	TArray<FString>                                    IncludeFilePaths;                                           // 0x0098   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionDDX
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionDDX : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Value;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDDY
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionDDY : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Value;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDecalDerivative
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionDecalDerivative : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDecalLifetimeOpacity
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDecalMipmapLevel
/// Size: 0x0060 (96 bytes) (0x000040 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{ 
public:
	FExpressionInput                                   TextureSize;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              ConstWidth;                                                 // 0x0054   (0x0004)  
	float                                              ConstHeight;                                                // 0x0058   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDecalSize
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionDecalSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDeltaTime
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionDeltaTime : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDepthFade
/// Size: 0x0070 (112 bytes) (0x000040 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionDepthFade : public UMaterialExpression
{ 
public:
	FExpressionInput                                   InOpacity;                                                  // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   FadeDistance;                                               // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              OpacityDefault;                                             // 0x0068   (0x0004)  
	float                                              FadeDistanceDefault;                                        // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionDepthOfFieldFunction
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{ 
public:
	TEnumAsByte<EDepthOfFieldFunctionValue>            FunctionValue;                                              // 0x0040   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Depth;                                                      // 0x0044   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDeriveNormalZ
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{ 
public:
	FExpressionInput                                   InXY;                                                       // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDesaturation
/// Size: 0x0078 (120 bytes) (0x000040 - 0x000078) align n/a MaxSize: 0x0078
class UMaterialExpressionDesaturation : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Fraction;                                                   // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FLinearColor                                       LuminanceFactors;                                           // 0x0068   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionDistance
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionDistance : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDistanceCullFade
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionDistanceFieldGradient
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{ 
public:
	FExpressionInput                                   position;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDistanceToNearestSurface
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{ 
public:
	FExpressionInput                                   position;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDivide
/// Size: 0x0070 (112 bytes) (0x000040 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionDivide : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionDotProduct
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionDotProduct : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionDynamicParameter
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{ 
public:
	TArray<FString>                                    ParamNames;                                                 // 0x0040   (0x0010)  
	FLinearColor                                       DefaultValue;                                               // 0x0050   (0x0010)  
	uint32_t                                           ParameterIndex;                                             // 0x0060   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionEyeAdaptation
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionFeatureLevelSwitch
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFloor
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionFloor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFmod
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionFmod : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFontSample
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align n/a MaxSize: 0x0050
class UMaterialExpressionFontSample : public UMaterialExpression
{ 
public:
	class UFont*                                       Font;                                                       // 0x0040   (0x0008)  
	int32_t                                            FontTexturePage;                                            // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFontSampleParameter
/// Size: 0x0070 (112 bytes) (0x000050 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{ 
public:
	FName                                              ParameterName;                                              // 0x0050   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0058   (0x0010)  
	FName                                              Group;                                                      // 0x0068   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionFrac
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionFrac : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFresnel
/// Size: 0x0088 (136 bytes) (0x000040 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionFresnel : public UMaterialExpression
{ 
public:
	FExpressionInput                                   ExponentIn;                                                 // 0x0040   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              Exponent;                                                   // 0x0054   (0x0004)  
	FExpressionInput                                   BaseReflectFractionIn;                                      // 0x0058   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0064   (0x0008)  MISSED
	float                                              BaseReflectFraction;                                        // 0x006C   (0x0004)  
	FExpressionInput                                   Normal;                                                     // 0x0070   (0x000C)  
	unsigned char                                      UnknownData05_7[0xC];                                       // 0x007C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFunctionInput
/// Size: 0x00C0 (192 bytes) (0x000040 - 0x0000C0) align n/a MaxSize: 0x00C0
class UMaterialExpressionFunctionInput : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Preview;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FName                                              InputName;                                                  // 0x0054   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            Description;                                                // 0x0060   (0x0010)  
	FGuid                                              ID;                                                         // 0x0070   (0x0010)  
	TEnumAsByte<EFunctionInputType>                    InputType;                                                  // 0x0080   (0x0001)  
	unsigned char                                      UnknownData07_6[0xF];                                       // 0x0081   (0x000F)  MISSED
	FVector4                                           PreviewValue;                                               // 0x0090   (0x0010)  
	bool                                               bUsePreviewValueAsDefault : 1;                              // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	int32_t                                            SortPriority;                                               // 0x00A4   (0x0004)  
	bool                                               bCompilingFunctionPreview : 1;                              // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData09_7[0x17];                                      // 0x00A9   (0x0017)  MISSED
};

/// Class /Script/Engine.MaterialExpressionFunctionOutput
/// Size: 0x0088 (136 bytes) (0x000040 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{ 
public:
	FName                                              OutputName;                                                 // 0x0040   (0x0008)  
	FString                                            Description;                                                // 0x0048   (0x0010)  
	int32_t                                            SortPriority;                                               // 0x0058   (0x0004)  
	FExpressionInput                                   A;                                                          // 0x005C   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0068   (0x0008)  MISSED
	bool                                               bLastPreviewed : 1;                                         // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0071   (0x0003)  MISSED
	FGuid                                              ID;                                                         // 0x0074   (0x0010)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionGetMaterialAttributes
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
{ 
public:
	FMaterialAttributesInput                           MaterialAttributes;                                         // 0x0040   (0x0010)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0050   (0x0008)  MISSED
	TArray<FGuid>                                      AttributeGetTypes;                                          // 0x0058   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionGIReplace
/// Size: 0x0080 (128 bytes) (0x000040 - 0x000080) align n/a MaxSize: 0x0080
class UMaterialExpressionGIReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   StaticIndirect;                                             // 0x0054   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   DynamicIndirect;                                            // 0x0068   (0x000C)  
	unsigned char                                      UnknownData05_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionHairAttributes
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionHairAttributes : public UMaterialExpression
{ 
public:
	bool                                               bUseTangentSpace : 1;                                       // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionHairColor
/// Size: 0x0080 (128 bytes) (0x000040 - 0x000080) align n/a MaxSize: 0x0080
class UMaterialExpressionHairColor : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Melanin;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Redness;                                                    // 0x0054   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   DyeColor;                                                   // 0x0068   (0x000C)  
	unsigned char                                      UnknownData05_7[0xC];                                       // 0x0074   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionIf
/// Size: 0x00B0 (176 bytes) (0x000040 - 0x0000B0) align n/a MaxSize: 0x00B0
class UMaterialExpressionIf : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   AGreaterThanB;                                              // 0x0068   (0x000C)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   AEqualsB;                                                   // 0x007C   (0x000C)  
	unsigned char                                      UnknownData08_6[0x8];                                       // 0x0088   (0x0008)  MISSED
	FExpressionInput                                   ALessThanB;                                                 // 0x0090   (0x000C)  
	unsigned char                                      UnknownData09_6[0x8];                                       // 0x009C   (0x0008)  MISSED
	float                                              EqualsThreshold;                                            // 0x00A4   (0x0004)  
	float                                              ConstB;                                                     // 0x00A8   (0x0004)  
	float                                              ConstAEqualsB;                                              // 0x00AC   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionInverseLinearInterpolate
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align n/a MaxSize: 0x0090
class UMaterialExpressionInverseLinearInterpolate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Value;                                                      // 0x0068   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x007C   (0x0004)  
	float                                              ConstB;                                                     // 0x0080   (0x0004)  
	float                                              ConstValue;                                                 // 0x0084   (0x0004)  
	bool                                               bClampResult;                                               // 0x0088   (0x0001)  
	unsigned char                                      UnknownData07_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLightmapUVs
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionLightmassReplace
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Realtime;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Lightmass;                                                  // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLightVector
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionLightVector : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionLinearInterpolate
/// Size: 0x0088 (136 bytes) (0x000040 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Alpha;                                                      // 0x0068   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x007C   (0x0004)  
	float                                              ConstB;                                                     // 0x0080   (0x0004)  
	float                                              ConstAlpha;                                                 // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionLogarithm10
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionLogarithm10 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   X;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionLogarithm2
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{ 
public:
	FExpressionInput                                   X;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMakeMaterialAttributes
/// Size: 0x0288 (648 bytes) (0x000040 - 0x000288) align n/a MaxSize: 0x0288
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{ 
public:
	FExpressionInput                                   BaseColor;                                                  // 0x0040   (0x000C)  
	unsigned char                                      UnknownData22_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Metallic;                                                   // 0x0054   (0x000C)  
	unsigned char                                      UnknownData23_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Specular;                                                   // 0x0068   (0x000C)  
	unsigned char                                      UnknownData24_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   Roughness;                                                  // 0x007C   (0x000C)  
	unsigned char                                      UnknownData25_6[0x8];                                       // 0x0088   (0x0008)  MISSED
	FExpressionInput                                   Anisotropy;                                                 // 0x0090   (0x000C)  
	unsigned char                                      UnknownData26_6[0x8];                                       // 0x009C   (0x0008)  MISSED
	FExpressionInput                                   EmissiveColor;                                              // 0x00A4   (0x000C)  
	unsigned char                                      UnknownData27_6[0x8];                                       // 0x00B0   (0x0008)  MISSED
	FExpressionInput                                   Opacity;                                                    // 0x00B8   (0x000C)  
	unsigned char                                      UnknownData28_6[0x8];                                       // 0x00C4   (0x0008)  MISSED
	FExpressionInput                                   OpacityMask;                                                // 0x00CC   (0x000C)  
	unsigned char                                      UnknownData29_6[0x8];                                       // 0x00D8   (0x0008)  MISSED
	FExpressionInput                                   Normal;                                                     // 0x00E0   (0x000C)  
	unsigned char                                      UnknownData30_6[0x8];                                       // 0x00EC   (0x0008)  MISSED
	FExpressionInput                                   Tangent;                                                    // 0x00F4   (0x000C)  
	unsigned char                                      UnknownData31_6[0x8];                                       // 0x0100   (0x0008)  MISSED
	FExpressionInput                                   WorldPositionOffset;                                        // 0x0108   (0x000C)  
	unsigned char                                      UnknownData32_6[0x8];                                       // 0x0114   (0x0008)  MISSED
	FExpressionInput                                   WorldDisplacement;                                          // 0x011C   (0x000C)  
	unsigned char                                      UnknownData33_6[0x8];                                       // 0x0128   (0x0008)  MISSED
	FExpressionInput                                   TessellationMultiplier;                                     // 0x0130   (0x000C)  
	unsigned char                                      UnknownData34_6[0x8];                                       // 0x013C   (0x0008)  MISSED
	FExpressionInput                                   SubsurfaceColor;                                            // 0x0144   (0x000C)  
	unsigned char                                      UnknownData35_6[0x8];                                       // 0x0150   (0x0008)  MISSED
	FExpressionInput                                   ClearCoat;                                                  // 0x0158   (0x000C)  
	unsigned char                                      UnknownData36_6[0x8];                                       // 0x0164   (0x0008)  MISSED
	FExpressionInput                                   ClearCoatRoughness;                                         // 0x016C   (0x000C)  
	unsigned char                                      UnknownData37_6[0x8];                                       // 0x0178   (0x0008)  MISSED
	FExpressionInput                                   AmbientOcclusion;                                           // 0x0180   (0x000C)  
	unsigned char                                      UnknownData38_6[0x8];                                       // 0x018C   (0x0008)  MISSED
	FExpressionInput                                   Refraction;                                                 // 0x0194   (0x000C)  
	unsigned char                                      UnknownData39_6[0x8];                                       // 0x01A0   (0x0008)  MISSED
	FExpressionInput                                   CustomizedUVs[8];                                           // 0x01A8   (0x0060)  
	unsigned char                                      UnknownData40_6[0x40];                                      // 0x0208   (0x0040)  MISSED
	FExpressionInput                                   PixelDepthOffset;                                           // 0x0248   (0x000C)  
	unsigned char                                      UnknownData41_6[0x8];                                       // 0x0254   (0x0008)  MISSED
	FExpressionInput                                   ShadingModel;                                               // 0x025C   (0x000C)  
	unsigned char                                      UnknownData42_6[0x8];                                       // 0x0268   (0x0008)  MISSED
	FExpressionInput                                   HeightFogScale;                                             // 0x0270   (0x000C)  
	unsigned char                                      UnknownData43_7[0xC];                                       // 0x027C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMapARPassthroughCameraUV
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMaterialAttributeLayers
/// Size: 0x00E8 (232 bytes) (0x000040 - 0x0000E8) align n/a MaxSize: 0x00E8
class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
{ 
public:
	FName                                              ParameterName;                                              // 0x0040   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0048   (0x0010)  
	FMaterialAttributesInput                           Input;                                                      // 0x0058   (0x0010)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0068   (0x0008)  MISSED
	FMaterialLayersFunctions                           DefaultLayers;                                              // 0x0070   (0x0040)  
	TArray<class UMaterialExpressionMaterialFunctionCall*> LayerCallers;                                           // 0x00B0   (0x0010)  
	int32_t                                            NumActiveLayerCallers;                                      // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	TArray<class UMaterialExpressionMaterialFunctionCall*> BlendCallers;                                           // 0x00C8   (0x0010)  
	int32_t                                            NumActiveBlendCallers;                                      // 0x00D8   (0x0004)  
	bool                                               bIsLayerGraphBuilt;                                         // 0x00DC   (0x0001)  
	unsigned char                                      UnknownData05_7[0xB];                                       // 0x00DD   (0x000B)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMaterialFunctionCall
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{ 
public:
	class UMaterialFunctionInterface*                  MaterialFunction;                                           // 0x0040   (0x0008)  
	FMaterialParameterInfo                             FunctionParameterInfo;                                      // 0x0048   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionMaterialLayerOutput
/// Size: 0x0088 (136 bytes) (0x000088 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionMaterialProxyReplace
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Realtime;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   MaterialProxy;                                              // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionMax
/// Size: 0x0070 (112 bytes) (0x000040 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionMax : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionMin
/// Size: 0x0070 (112 bytes) (0x000040 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionMin : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionMultiply
/// Size: 0x0070 (112 bytes) (0x000040 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionMultiply : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionNoise
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align n/a MaxSize: 0x0090
class UMaterialExpressionNoise : public UMaterialExpression
{ 
public:
	FExpressionInput                                   position;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   FilterWidth;                                                // 0x0054   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              Scale;                                                      // 0x0068   (0x0004)  
	int32_t                                            Quality;                                                    // 0x006C   (0x0004)  
	TEnumAsByte<ENoiseFunction>                        NoiseFunction;                                              // 0x0070   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0071   (0x0003)  MISSED
	bool                                               bTurbulence : 1;                                            // 0x0074:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x0075   (0x0003)  MISSED
	int32_t                                            Levels;                                                     // 0x0078   (0x0004)  
	float                                              OutputMin;                                                  // 0x007C   (0x0004)  
	float                                              OutputMax;                                                  // 0x0080   (0x0004)  
	float                                              LevelScale;                                                 // 0x0084   (0x0004)  
	bool                                               bTiling : 1;                                                // 0x0088:0 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	uint32_t                                           RepeatSize;                                                 // 0x008C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionNormalize
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionNormalize : public UMaterialExpression
{ 
public:
	FExpressionInput                                   VectorInput;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionObjectBounds
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionObjectBounds : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectOrientation
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectPositionWS
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionObjectRadius
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionObjectRadius : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionOneMinus
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionOneMinus : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPanner
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align n/a MaxSize: 0x0090
class UMaterialExpressionPanner : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0040   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Time;                                                       // 0x0054   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Speed;                                                      // 0x0068   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	float                                              SpeedX;                                                     // 0x007C   (0x0004)  
	float                                              SpeedY;                                                     // 0x0080   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x0084   (0x0004)  
	bool                                               bFractionalPart;                                            // 0x0088   (0x0001)  
	unsigned char                                      UnknownData07_7[0x7];                                       // 0x0089   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParticleColor
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticleColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleDirection
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticleDirection : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleMacroUV
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleMotionBlurFade
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticlePositionWS
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRadius
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticleRadius : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRandom
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticleRandom : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleRelativeTime
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSize
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticleSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSpeed
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionParticleSubUV
/// Size: 0x0068 (104 bytes) (0x000060 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{ 
public:
	bool                                               bBlend : 1;                                                 // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionParticleSubUVProperties
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceCustomData
/// Size: 0x0060 (96 bytes) (0x000040 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
{ 
public:
	FExpressionInput                                   DefaultValue;                                               // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              ConstDefaultValue;                                          // 0x0054   (0x0004)  
	uint32_t                                           DataIndex;                                                  // 0x0058   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x005C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPerInstanceFadeAmount
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPerInstanceRandom
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPixelDepth
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionPixelDepth : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPixelNormalWS
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPower
/// Size: 0x0070 (112 bytes) (0x000040 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionPower : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Base;                                                       // 0x0040   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Exponent;                                                   // 0x0054   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstExponent;                                              // 0x0068   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionPrecomputedAOMask
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedLocalBounds
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedNormal
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreSkinnedPosition
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionPreviousFrameSwitch
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   CurrentFrame;                                               // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   PreviousFrame;                                              // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionQualitySwitch
/// Size: 0x00A8 (168 bytes) (0x000040 - 0x0000A8) align n/a MaxSize: 0x00A8
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Inputs[4];                                                  // 0x0054   (0x0030)  
	unsigned char                                      UnknownData03_7[0x24];                                      // 0x0084   (0x0024)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRayTracingQualitySwitch
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Normal;                                                     // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   RayTraced;                                                  // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionReflectionCapturePassSwitch
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionReflectionCapturePassSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Reflection;                                                 // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionReflectionVectorWS
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{ 
public:
	FExpressionInput                                   CustomWorldNormal;                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	bool                                               bNormalizeCustomWorldNormal : 1;                            // 0x0054:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionReroute
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionReroute : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRotateAboutAxis
/// Size: 0x0098 (152 bytes) (0x000040 - 0x000098) align n/a MaxSize: 0x0098
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{ 
public:
	FExpressionInput                                   NormalizedRotationAxis;                                     // 0x0040   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   RotationAngle;                                              // 0x0054   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   PivotPoint;                                                 // 0x0068   (0x000C)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   position;                                                   // 0x007C   (0x000C)  
	unsigned char                                      UnknownData08_6[0x8];                                       // 0x0088   (0x0008)  MISSED
	float                                              Period;                                                     // 0x0090   (0x0004)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRotator
/// Size: 0x0078 (120 bytes) (0x000040 - 0x000078) align n/a MaxSize: 0x0078
class UMaterialExpressionRotator : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinate;                                                 // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Time;                                                       // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              CenterX;                                                    // 0x0068   (0x0004)  
	float                                              CenterY;                                                    // 0x006C   (0x0004)  
	float                                              Speed;                                                      // 0x0070   (0x0004)  
	uint32_t                                           ConstCoordinate;                                            // 0x0074   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionRound
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionRound : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureOutput
/// Size: 0x00E0 (224 bytes) (0x000040 - 0x0000E0) align n/a MaxSize: 0x00E0
class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   BaseColor;                                                  // 0x0040   (0x000C)  
	unsigned char                                      UnknownData08_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Specular;                                                   // 0x0054   (0x000C)  
	unsigned char                                      UnknownData09_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Roughness;                                                  // 0x0068   (0x000C)  
	unsigned char                                      UnknownData10_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   Normal;                                                     // 0x007C   (0x000C)  
	unsigned char                                      UnknownData11_6[0x8];                                       // 0x0088   (0x0008)  MISSED
	FExpressionInput                                   WorldHeight;                                                // 0x0090   (0x000C)  
	unsigned char                                      UnknownData12_6[0x8];                                       // 0x009C   (0x0008)  MISSED
	FExpressionInput                                   Opacity;                                                    // 0x00A4   (0x000C)  
	unsigned char                                      UnknownData13_6[0x8];                                       // 0x00B0   (0x0008)  MISSED
	FExpressionInput                                   Mask;                                                       // 0x00B8   (0x000C)  
	unsigned char                                      UnknownData14_6[0x8];                                       // 0x00C4   (0x0008)  MISSED
	FExpressionInput                                   WorldHeightSubtract;                                        // 0x00CC   (0x000C)  
	unsigned char                                      UnknownData15_7[0x8];                                       // 0x00D8   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureReplace
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   VirtualTextureOutput;                                       // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSample
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align n/a MaxSize: 0x0090
class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   WorldPosition;                                              // 0x0054   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   MipValue;                                                   // 0x0068   (0x000C)  
	unsigned char                                      UnknownData06_6[0xC];                                       // 0x0074   (0x000C)  MISSED
	class URuntimeVirtualTexture*                      VirtualTexture;                                             // 0x0080   (0x0008)  
	ERuntimeVirtualTextureMaterialType                 MaterialType;                                               // 0x0088   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x0089   (0x0001)  
	bool                                               bAdaptive;                                                  // 0x008A   (0x0001)  
	TEnumAsByte<ERuntimeVirtualTextureMipValueMode>    MipValueMode;                                               // 0x008B   (0x0001)  
	TEnumAsByte<ERuntimeVirtualTextureTextureAddressMode> TextureAddressMode;                                      // 0x008C   (0x0001)  
	unsigned char                                      UnknownData07_7[0x3];                                       // 0x008D   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
/// Size: 0x00B0 (176 bytes) (0x000090 - 0x0000B0) align n/a MaxSize: 0x00B0
class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
{ 
public:
	FName                                              ParameterName;                                              // 0x0090   (0x0008)  
	FGuid                                              ExpressionGUID;                                             // 0x0098   (0x0010)  
	FName                                              Group;                                                      // 0x00A8   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionSaturate
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionSaturate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneColor
/// Size: 0x0078 (120 bytes) (0x000040 - 0x000078) align n/a MaxSize: 0x0078
class UMaterialExpressionSceneColor : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x0044   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0050   (0x0008)  MISSED
	FExpressionInput                                   OffsetFraction;                                             // 0x0058   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0064   (0x0008)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x006C   (0x0008)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneDepth
/// Size: 0x0078 (120 bytes) (0x000040 - 0x000078) align n/a MaxSize: 0x0078
class UMaterialExpressionSceneDepth : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x0044   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0050   (0x0008)  MISSED
	FExpressionInput                                   Coordinates;                                                // 0x0058   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0064   (0x0008)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x006C   (0x0008)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneDepthWithoutWater
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionSceneDepthWithoutWater : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   Input;                                                      // 0x0044   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0050   (0x0008)  MISSED
	FVector2D                                          ConstInput;                                                 // 0x0058   (0x0008)  
	float                                              FallbackDepth;                                              // 0x0060   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSceneTexelSize
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSceneTexture
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionSceneTexture : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Coordinates;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	TEnumAsByte<ESceneTextureId>                       SceneTextureId;                                             // 0x0054   (0x0001)  
	bool                                               bFiltered;                                                  // 0x0055   (0x0001)  
	unsigned char                                      UnknownData03_7[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionScreenPosition
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionScreenPosition : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSetMaterialAttributes
/// Size: 0x0060 (96 bytes) (0x000040 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
{ 
public:
	TArray<FExpressionInput>                           Inputs;                                                     // 0x0040   (0x0010)  
	TArray<FGuid>                                      AttributeSetTypes;                                          // 0x0050   (0x0010)  
};

/// Class /Script/Engine.MaterialExpressionShaderStageSwitch
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   PixelShader;                                                // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   VertexShader;                                               // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionShadingModel
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionShadingModel : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                               // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionShadingPathSwitch
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align n/a MaxSize: 0x0090
class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Inputs[3];                                                  // 0x0054   (0x0024)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x0078   (0x0018)  MISSED
};

/// Class /Script/Engine.MaterialExpressionShadowReplace
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionShadowReplace : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Default;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   shadow;                                                     // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSign
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionSign : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSine
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionSine : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              Period;                                                     // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSingleLayerWaterMaterialOutput
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align n/a MaxSize: 0x0090
class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   ScatteringCoefficients;                                     // 0x0040   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   AbsorptionCoefficients;                                     // 0x0054   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   PhaseG;                                                     // 0x0068   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   ColorScaleBehindWater;                                      // 0x007C   (0x000C)  
	unsigned char                                      UnknownData07_7[0x8];                                       // 0x0088   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkinningVertexOffsets
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionSkinningVertexOffsets : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDirection
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightIlluminance
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0040   (0x0004)  
	FExpressionInput                                   WorldPosition;                                              // 0x0044   (0x000C)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
{ 
public:
	int32_t                                            LightIndex;                                                 // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereAerialPerspective
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
{ 
public:
	FExpressionInput                                   WorldPosition;                                              // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSkyAtmosphereViewLuminance
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionSmoothStep
/// Size: 0x0088 (136 bytes) (0x000040 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionSmoothStep : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Min;                                                        // 0x0040   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Max;                                                        // 0x0054   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Value;                                                      // 0x0068   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	float                                              ConstMin;                                                   // 0x007C   (0x0004)  
	float                                              ConstMax;                                                   // 0x0080   (0x0004)  
	float                                              ConstValue;                                                 // 0x0084   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSobol
/// Size: 0x0088 (136 bytes) (0x000040 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionSobol : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Cell;                                                       // 0x0040   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Index;                                                      // 0x0054   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Seed;                                                       // 0x0068   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	uint32_t                                           ConstIndex;                                                 // 0x007C   (0x0004)  
	FVector2D                                          ConstSeed;                                                  // 0x0080   (0x0008)  
};

/// Class /Script/Engine.MaterialExpressionSpeedTree
/// Size: 0x00A0 (160 bytes) (0x000040 - 0x0000A0) align n/a MaxSize: 0x00A0
class UMaterialExpressionSpeedTree : public UMaterialExpression
{ 
public:
	FExpressionInput                                   GeometryInput;                                              // 0x0040   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   WindInput;                                                  // 0x0054   (0x000C)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   LODInput;                                                   // 0x0068   (0x000C)  
	unsigned char                                      UnknownData08_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   ExtraBendWS;                                                // 0x007C   (0x000C)  
	unsigned char                                      UnknownData09_6[0x8];                                       // 0x0088   (0x0008)  MISSED
	TEnumAsByte<ESpeedTreeGeometryType>                GeometryType;                                               // 0x0090   (0x0001)  
	TEnumAsByte<ESpeedTreeWindType>                    WindType;                                                   // 0x0091   (0x0001)  
	TEnumAsByte<ESpeedTreeLODType>                     LODType;                                                    // 0x0092   (0x0001)  
	unsigned char                                      UnknownData10_6[0x1];                                       // 0x0093   (0x0001)  MISSED
	float                                              BillboardThreshold;                                         // 0x0094   (0x0004)  
	bool                                               bAccurateWindVelocities;                                    // 0x0098   (0x0001)  
	unsigned char                                      UnknownData11_7[0x7];                                       // 0x0099   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionSphereMask
/// Size: 0x0098 (152 bytes) (0x000040 - 0x000098) align n/a MaxSize: 0x0098
class UMaterialExpressionSphereMask : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   Radius;                                                     // 0x0068   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   Hardness;                                                   // 0x007C   (0x000C)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x0088   (0x0008)  MISSED
	float                                              AttenuationRadius;                                          // 0x0090   (0x0004)  
	float                                              HardnessPercent;                                            // 0x0094   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSphericalParticleOpacity
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Density;                                                    // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              ConstantDensity;                                            // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSquareRoot
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionSquareRoot : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticBool
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionStaticBool : public UMaterialExpression
{ 
public:
	bool                                               Value : 1;                                                  // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticBoolParameter
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{ 
public:
	bool                                               DefaultValue : 1;                                           // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticComponentMaskParameter
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{ 
public:
	bool                                               DefaultR : 1;                                               // 0x0058:0 (0x0001)  
	bool                                               DefaultG : 1;                                               // 0x0058:1 (0x0001)  
	bool                                               DefaultB : 1;                                               // 0x0058:2 (0x0001)  
	bool                                               DefaultA : 1;                                               // 0x0058:3 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticSwitch
/// Size: 0x0080 (128 bytes) (0x000040 - 0x000080) align n/a MaxSize: 0x0080
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{ 
public:
	bool                                               DefaultValue : 1;                                           // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	FExpressionInput                                   A;                                                          // 0x0044   (0x000C)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x0050   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0058   (0x000C)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0064   (0x0008)  MISSED
	FExpressionInput                                   Value;                                                      // 0x006C   (0x000C)  
	unsigned char                                      UnknownData07_7[0x8];                                       // 0x0078   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionStaticSwitchParameter
/// Size: 0x0060 (96 bytes) (0x000060 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionStep
/// Size: 0x0070 (112 bytes) (0x000040 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionStep : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Y;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   X;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstY;                                                     // 0x0068   (0x0004)  
	float                                              ConstX;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionSubtract
/// Size: 0x0070 (112 bytes) (0x000040 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialExpressionSubtract : public UMaterialExpression
{ 
public:
	FExpressionInput                                   A;                                                          // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   B;                                                          // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	float                                              ConstA;                                                     // 0x0068   (0x0004)  
	float                                              ConstB;                                                     // 0x006C   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTangent
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionTangent : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	float                                              Period;                                                     // 0x0054   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTangentOutput
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTemporalSobol
/// Size: 0x0078 (120 bytes) (0x000040 - 0x000078) align n/a MaxSize: 0x0078
class UMaterialExpressionTemporalSobol : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Index;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Seed;                                                       // 0x0054   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	uint32_t                                           ConstIndex;                                                 // 0x0068   (0x0004)  
	FVector2D                                          ConstSeed;                                                  // 0x006C   (0x0008)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x0074   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureCoordinate
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align n/a MaxSize: 0x0050
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{ 
public:
	int32_t                                            CoordinateIndex;                                            // 0x0040   (0x0004)  
	float                                              UTiling;                                                    // 0x0044   (0x0004)  
	float                                              VTiling;                                                    // 0x0048   (0x0004)  
	bool                                               UnMirrorU : 1;                                              // 0x004C:0 (0x0001)  
	bool                                               UnMirrorV : 1;                                              // 0x004C:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureObject
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureObjectParameter
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureProperty
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionTextureProperty : public UMaterialExpression
{ 
public:
	FExpressionInput                                   TextureObject;                                              // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	TEnumAsByte<EMaterialExposedTextureProperty>       Property;                                                   // 0x0054   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0055   (0x0003)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameter2DArray
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterCube
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterSubUV
/// Size: 0x0088 (136 bytes) (0x000080 - 0x000088) align n/a MaxSize: 0x0088
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{ 
public:
	bool                                               bBlend : 1;                                                 // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTextureSampleParameterVolume
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionThinTranslucentMaterialOutput
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   TransmittanceColor;                                         // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTime
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionTime : public UMaterialExpression
{ 
public:
	bool                                               bIgnorePause : 1;                                           // 0x0040:0 (0x0001)  
	bool                                               bOverride_Period : 1;                                       // 0x0040:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              Period;                                                     // 0x0044   (0x0004)  
};

/// Class /Script/Engine.MaterialExpressionTransform
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionTransform : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType;                                        // 0x0054   (0x0001)  
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                              // 0x0055   (0x0001)  
	unsigned char                                      UnknownData03_7[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTransformPosition
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionTransformPosition : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	TEnumAsByte<EMaterialPositionTransformSource>      TransformSourceType;                                        // 0x0054   (0x0001)  
	TEnumAsByte<EMaterialPositionTransformSource>      TransformType;                                              // 0x0055   (0x0001)  
	unsigned char                                      UnknownData03_7[0x2];                                       // 0x0056   (0x0002)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTruncate
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialExpressionTruncate : public UMaterialExpression
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x004C   (0x000C)  MISSED
};

/// Class /Script/Engine.MaterialExpressionTwoSidedSign
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVectorNoise
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionVectorNoise : public UMaterialExpression
{ 
public:
	FExpressionInput                                   position;                                                   // 0x0040   (0x000C)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	TEnumAsByte<EVectorNoiseFunction>                  NoiseFunction;                                              // 0x0054   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0055   (0x0003)  MISSED
	int32_t                                            Quality;                                                    // 0x0058   (0x0004)  
	bool                                               bTiling : 1;                                                // 0x005C:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x005D   (0x0003)  MISSED
	uint32_t                                           TileSize;                                                   // 0x0060   (0x0004)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x0064   (0x0004)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVertexColor
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionVertexColor : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVertexInterpolator
/// Size: 0x0060 (96 bytes) (0x000040 - 0x000060) align n/a MaxSize: 0x0060
class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   Input;                                                      // 0x0040   (0x000C)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x004C   (0x0014)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVertexNormalWS
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVertexTangentWS
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionVertexTangentWS : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionViewProperty
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionViewProperty : public UMaterialExpression
{ 
public:
	TEnumAsByte<EMaterialExposedViewProperty>          Property;                                                   // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialExpressionViewSize
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionViewSize : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVirtualTextureFeatureSwitch
/// Size: 0x0068 (104 bytes) (0x000040 - 0x000068) align n/a MaxSize: 0x0068
class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
{ 
public:
	FExpressionInput                                   No;                                                         // 0x0040   (0x000C)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   Yes;                                                        // 0x0054   (0x000C)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0060   (0x0008)  MISSED
};

/// Class /Script/Engine.MaterialExpressionVolumetricAdvancedMaterialInput
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialExpressionVolumetricAdvancedMaterialInput : public UMaterialExpression
{ 
public:
};

/// Class /Script/Engine.MaterialExpressionVolumetricAdvancedMaterialOutput
/// Size: 0x00F0 (240 bytes) (0x000040 - 0x0000F0) align n/a MaxSize: 0x00F0
class UMaterialExpressionVolumetricAdvancedMaterialOutput : public UMaterialExpressionCustomOutput
{ 
public:
	FExpressionInput                                   PhaseG;                                                     // 0x0040   (0x000C)  
	unsigned char                                      UnknownData09_6[0x8];                                       // 0x004C   (0x0008)  MISSED
	FExpressionInput                                   PhaseG2;                                                    // 0x0054   (0x000C)  
	unsigned char                                      UnknownData10_6[0x8];                                       // 0x0060   (0x0008)  MISSED
	FExpressionInput                                   PhaseBlend;                                                 // 0x0068   (0x000C)  
	unsigned char                                      UnknownData11_6[0x8];                                       // 0x0074   (0x0008)  MISSED
	FExpressionInput                                   MultiScatteringContribution;                                // 0x007C   (0x000C)  
	unsigned char                                      UnknownData12_6[0x8];                                       // 0x0088   (0x0008)  MISSED
	FExpressionInput                                   MultiScatteringOcclusion;                                   // 0x0090   (0x000C)  
	unsigned char                                      UnknownData13_6[0x8];                                       // 0x009C   (0x0008)  MISSED
	FExpressionInput                                   MultiScatteringEccentricity;                                // 0x00A4   (0x000C)  
	unsigned char                                      UnknownData14_6[0x8];                                       // 0x00B0   (0x0008)  MISSED
	FExpressionInput                                   ConservativeDensity;                                        // 0x00B8   (0x000C)  
	unsigned char                                      UnknownData15_6[0x8];                                       // 0x00C4   (0x0008)  MISSED
	float                                              ConstPhaseG;                                                // 0x00CC   (0x0004)  
	float                                              ConstPhaseG2;                                               // 0x00D0   (0x0004)  
	float                                              ConstPhaseBlend;                                            // 0x00D4   (0x0004)  
	bool                                               PerSamplePhaseEvaluation;                                   // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x00D9   (0x0003)  MISSED
	uint32_t                                           MultiScatteringApproximationOctaveCount;                    // 0x00DC   (0x0004)  
	float                                              ConstMultiScatteringContribution;                           // 0x00E0   (0x0004)  
	float                                              ConstMultiScatteringOcclusion;                              // 0x00E4   (0x0004)  
	float                                              ConstMultiScatteringEccentricity;                           // 0x00E8   (0x0004)  
	bool                                               bGroundContribution;                                        // 0x00EC   (0x0001)  
	bool                                               bGrayScaleMaterial;                                         // 0x00ED   (0x0001)  
	bool                                               bRayMarchVolumeShadow;                                      // 0x00EE   (0x0001)  
	unsigned char                                      UnknownData17_7[0x1];                                       // 0x00EF   (0x0001)  MISSED
};

/// Class /Script/Engine.MaterialExpressionWorldPosition
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMaterialExpressionWorldPosition : public UMaterialExpression
{ 
public:
	TEnumAsByte<EWorldPositionIncludedOffsets>         WorldPositionShaderOffset;                                  // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunctionInterface
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UMaterialFunctionInterface : public UObject
{ 
public:
	FGuid                                              StateId;                                                    // 0x0028   (0x0010)  
	EMaterialFunctionUsage                             MaterialFunctionUsage;                                      // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunction
/// Size: 0x0058 (88 bytes) (0x000040 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialFunction : public UMaterialFunctionInterface
{ 
public:
	FString                                            Description;                                                // 0x0040   (0x0010)  
	bool                                               bExposeToLibrary : 1;                                       // 0x0050:0 (0x0001)  
	bool                                               bPrefixParameterNames : 1;                                  // 0x0050:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Class /Script/Engine.MaterialFunctionInstance
/// Size: 0x00C0 (192 bytes) (0x000040 - 0x0000C0) align n/a MaxSize: 0x00C0
class UMaterialFunctionInstance : public UMaterialFunctionInterface
{ 
public:
	class UMaterialFunctionInterface*                  Parent;                                                     // 0x0040   (0x0008)  
	class UMaterialFunctionInterface*                  Base;                                                       // 0x0048   (0x0008)  
	TArray<FScalarParameterValue>                      ScalarParameterValues;                                      // 0x0050   (0x0010)  
	TArray<FVectorParameterValue>                      VectorParameterValues;                                      // 0x0060   (0x0010)  
	TArray<FTextureParameterValue>                     TextureParameterValues;                                     // 0x0070   (0x0010)  
	TArray<FFontParameterValue>                        FontParameterValues;                                        // 0x0080   (0x0010)  
	TArray<FStaticSwitchParameter>                     StaticSwitchParameterValues;                                // 0x0090   (0x0010)  
	TArray<FStaticComponentMaskParameter>              StaticComponentMaskParameterValues;                         // 0x00A0   (0x0010)  
	TArray<FRuntimeVirtualTextureParameterValue>       RuntimeVirtualTextureParameterValues;                       // 0x00B0   (0x0010)  
};

/// Class /Script/Engine.MaterialFunctionMaterialLayer
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialFunctionMaterialLayer : public UMaterialFunction
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerInstance
/// Size: 0x00C0 (192 bytes) (0x0000C0 - 0x0000C0) align n/a MaxSize: 0x00C0
class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlend
/// Size: 0x0058 (88 bytes) (0x000058 - 0x000058) align n/a MaxSize: 0x0058
class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
{ 
public:
};

/// Class /Script/Engine.MaterialFunctionMaterialLayerBlendInstance
/// Size: 0x00C0 (192 bytes) (0x0000C0 - 0x0000C0) align n/a MaxSize: 0x00C0
class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
{ 
public:
};

/// Class /Script/Engine.MaterialInstanceActor
/// Size: 0x02D8 (728 bytes) (0x0002C8 - 0x0002D8) align n/a MaxSize: 0x02D8
class AMaterialInstanceActor : public AActor
{ 
public:
	TArray<class AActor*>                              TargetActors;                                               // 0x02C8   (0x0010)  
};

/// Class /Script/Engine.MaterialInstanceDynamic
/// Size: 0x03B0 (944 bytes) (0x000360 - 0x0003B0) align n/a MaxSize: 0x03B0
class UMaterialInstanceDynamic : public UMaterialInstance
{ 
public:
	unsigned char                                      UnknownData01_1[0x50];                                      // 0x0360   (0x0050)  MISSED

	/// Functions
	// Function /Script/Engine.MaterialInstanceDynamic.SetVectorParameterValueByInfo
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, void, const FMaterialParameterInfo&, const FLinearColor> SetVectorParameterValueByInfo = { 0x48bcef0, 0 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.SetVectorParameterValue
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, void, const FName, const FLinearColor> SetVectorParameterValue = { 0x48bd080, 1 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.SetTextureParameterValueByInfo
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, void, const FMaterialParameterInfo&, const UTexture*> SetTextureParameterValueByInfo = { 0x48bd560, 2 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.SetTextureParameterValue
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, void, const FName, const UTexture*> SetTextureParameterValue = { 0x48bd6f0, 3 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.SetScalarParameterValueByInfo
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, void, const FMaterialParameterInfo&, const float> SetScalarParameterValueByInfo = { 0x48bdbb0, 4 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.SetScalarParameterValue
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, void, const FName, const float> SetScalarParameterValue = { 0x48bdd40, 5 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_InterpolateMaterialInstanceParams
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, void, const UMaterialInstance*, const UMaterialInstance*, const float> K2_InterpolateMaterialInstanceParams = { 0x48bc1e0, 6 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetVectorParameterValueByInfo
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, FLinearColor, const FMaterialParameterInfo&> K2_GetVectorParameterValueByInfo = { 0x48bcba0, 7 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetVectorParameterValue
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, FLinearColor, const FName> K2_GetVectorParameterValue = { 0x48bcd70, 8 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetTextureParameterValueByInfo
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, UTexture*, const FMaterialParameterInfo&> K2_GetTextureParameterValueByInfo = { 0x48bd200, 9 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetTextureParameterValue
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, UTexture*, const FName> K2_GetTextureParameterValue = { 0x48bd3d0, 10 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetScalarParameterValueByInfo
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, float, const FMaterialParameterInfo&> K2_GetScalarParameterValueByInfo = { 0x48bd860, 11 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_GetScalarParameterValue
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, float, const FName> K2_GetScalarParameterValue = { 0x48bda30, 12 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.K2_CopyMaterialInstanceParameters
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, void, const UMaterialInterface*, const bool> K2_CopyMaterialInstanceParameters = { 0x48bc060, 13 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.CopyParameterOverrides
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, void, const UMaterialInstance*> CopyParameterOverrides = { 0x48bbbd0, 14 }; 
	// Function /Script/Engine.MaterialInstanceDynamic.CopyInterpParameters
	constexpr static const FunctionPointer<UMaterialInstanceDynamic, void, const UMaterialInstance*> CopyInterpParameters = { 0x48bbe20, 15 }; 
};

/// Struct /Script/Engine.CollectionParameterBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FCollectionParameterBase
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FGuid                                              ID;                                                         // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.CollectionScalarParameter
/// Size: 0x001C (28 bytes) (0x000018 - 0x00001C) align n/a MaxSize: 0x001C
struct FCollectionScalarParameter : FCollectionParameterBase
{ 
	float                                              DefaultValue;                                               // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.CollectionVectorParameter
/// Size: 0x0028 (40 bytes) (0x000018 - 0x000028) align n/a MaxSize: 0x0028
struct FCollectionVectorParameter : FCollectionParameterBase
{ 
	FLinearColor                                       DefaultValue;                                               // 0x0018   (0x0010)  
};

/// Class /Script/Engine.MaterialParameterCollection
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class UMaterialParameterCollection : public UObject
{ 
public:
	FGuid                                              StateId;                                                    // 0x0028   (0x0010)  
	TArray<FCollectionScalarParameter>                 ScalarParameters;                                           // 0x0038   (0x0010)  
	TArray<FCollectionVectorParameter>                 VectorParameters;                                           // 0x0048   (0x0010)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0058   (0x0018)  MISSED
};

/// Class /Script/Engine.MaterialParameterCollectionInstance
/// Size: 0x0108 (264 bytes) (0x000028 - 0x000108) align n/a MaxSize: 0x0108
class UMaterialParameterCollectionInstance : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	class UMaterialParameterCollection*                Collection;                                                 // 0x0030   (0x0008)  
	unsigned char                                      UnknownData03_7[0xD0];                                      // 0x0038   (0x00D0)  MISSED
};

/// Struct /Script/Engine.InterpGroupActorInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FInterpGroupActorInfo
{ 
	FName                                              ObjectName;                                                 // 0x0000   (0x0008)  
	TArray<class AActor*>                              Actors;                                                     // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.CameraCutInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FCameraCutInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	float                                              Timestamp;                                                  // 0x000C   (0x0004)  
};

/// Class /Script/Engine.MatineeActor
/// Size: 0x0370 (880 bytes) (0x0002C8 - 0x000370) align n/a MaxSize: 0x0370
class AMatineeActor : public AActor
{ 
public:
	class UInterpData*                                 MatineeData;                                                // 0x02C8   (0x0008)  
	FName                                              MatineeControllerName;                                      // 0x02D0   (0x0008)  
	float                                              PlayRate;                                                   // 0x02D8   (0x0004)  
	bool                                               bPlayOnLevelLoad : 1;                                       // 0x02DC:0 (0x0001)  
	bool                                               bForceStartPos : 1;                                         // 0x02DC:1 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x02DD   (0x0003)  MISSED
	float                                              ForceStartPosition;                                         // 0x02E0   (0x0004)  
	bool                                               bLooping : 1;                                               // 0x02E4:0 (0x0001)  
	bool                                               bRewindOnPlay : 1;                                          // 0x02E4:1 (0x0001)  
	bool                                               bNoResetOnRewind : 1;                                       // 0x02E4:2 (0x0001)  
	bool                                               bRewindIfAlreadyPlaying : 1;                                // 0x02E4:3 (0x0001)  
	bool                                               bDisableRadioFilter : 1;                                    // 0x02E4:4 (0x0001)  
	bool                                               bClientSideOnly : 1;                                        // 0x02E4:5 (0x0001)  
	bool                                               bSkipUpdateIfNotVisible : 1;                                // 0x02E4:6 (0x0001)  
	bool                                               bIsSkippable : 1;                                           // 0x02E4:7 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x02E5   (0x0003)  MISSED
	int32_t                                            PreferredSplitScreenNum;                                    // 0x02E8   (0x0004)  
	bool                                               bDisableMovementInput : 1;                                  // 0x02EC:0 (0x0001)  
	bool                                               bDisableLookAtInput : 1;                                    // 0x02EC:1 (0x0001)  
	bool                                               bHidePlayer : 1;                                            // 0x02EC:2 (0x0001)  
	bool                                               bHideHud : 1;                                               // 0x02EC:3 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x02ED   (0x0003)  MISSED
	TArray<FInterpGroupActorInfo>                      GroupActorInfos;                                            // 0x02F0   (0x0010)  
	bool                                               bShouldShowGore : 1;                                        // 0x0300:0 (0x0001)  
	unsigned char                                      UnknownData11_5[0x7];                                       // 0x0301   (0x0007)  MISSED
	TArray<class UInterpGroupInst*>                    GroupInst;                                                  // 0x0308   (0x0010)  
	TArray<FCameraCutInfo>                             CameraCuts;                                                 // 0x0318   (0x0010)  
	bool                                               bIsPlaying : 1;                                             // 0x0328:0 (0x0001)  
	bool                                               bReversePlayback : 1;                                       // 0x0328:1 (0x0001)  
	bool                                               bPaused : 1;                                                // 0x0328:2 (0x0001)  
	bool                                               bPendingStop : 1;                                           // 0x0328:3 (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x0329   (0x0003)  MISSED
	float                                              InterpPosition;                                             // 0x032C   (0x0004)  
	unsigned char                                      UnknownData13_6[0x4];                                       // 0x0330   (0x0004)  MISSED
	char                                               ReplicationForceIsPlaying;                                  // 0x0334   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0335   (0x0003)  MISSED
	FMulticastInlineDelegate                           OnPlay;                                                     // 0x0338   (0x0010)  
	FMulticastInlineDelegate                           OnStop;                                                     // 0x0348   (0x0010)  
	FMulticastInlineDelegate                           OnPause;                                                    // 0x0358   (0x0010)  
	unsigned char                                      UnknownData15_7[0x8];                                       // 0x0368   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.MatineeActor.Stop
	constexpr static const FunctionPointer<AMatineeActor, void> Stop = { 0x48c08b0, 0 }; 
	// Function /Script/Engine.MatineeActor.SetPosition
	constexpr static const FunctionPointer<AMatineeActor, void, const float, const bool> SetPosition = { 0x48c0720, 1 }; 
	// Function /Script/Engine.MatineeActor.SetLoopingState
	constexpr static const FunctionPointer<AMatineeActor, void, const bool> SetLoopingState = { 0x122e590, 2 }; 
	// Function /Script/Engine.MatineeActor.Reverse
	constexpr static const FunctionPointer<AMatineeActor, void> Reverse = { 0x48c0890, 3 }; 
	// Function /Script/Engine.MatineeActor.Play
	constexpr static const FunctionPointer<AMatineeActor, void> Play = { 0x477be50, 4 }; 
	// Function /Script/Engine.MatineeActor.Pause
	constexpr static const FunctionPointer<AMatineeActor, void> Pause = { 0x14b0940, 5 }; 
	// Function /Script/Engine.MatineeActor.EnableGroupByName
	constexpr static const FunctionPointer<AMatineeActor, void, const FString, const bool> EnableGroupByName = { 0x48c04a0, 6 }; 
	// Function /Script/Engine.MatineeActor.ChangePlaybackDirection
	constexpr static const FunctionPointer<AMatineeActor, void> ChangePlaybackDirection = { 0x48c0700, 7 }; 
};

/// Class /Script/Engine.MatineeActorCameraAnim
/// Size: 0x0378 (888 bytes) (0x000370 - 0x000378) align n/a MaxSize: 0x0378
class AMatineeActorCameraAnim : public AMatineeActor
{ 
public:
	class UCameraAnim*                                 CameraAnim;                                                 // 0x0370   (0x0008)  
};

/// Class /Script/Engine.MatineeAnimInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMatineeAnimInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MatineeInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMatineeInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.MeshMergeCullingVolume
/// Size: 0x0318 (792 bytes) (0x000318 - 0x000318) align n/a MaxSize: 0x0318
class AMeshMergeCullingVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.MeshSimplificationSettings
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align n/a MaxSize: 0x0040
class UMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              MeshReductionModuleName;                                    // 0x0038   (0x0008)  
};

/// Class /Script/Engine.MeshVertexPainterKismetLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.RemovePaintedVertices
	constexpr static const FunctionPointer<UMeshVertexPainterKismetLibrary, void, const UStaticMeshComponent*> RemovePaintedVertices = { 0x48c4940, 0 }; 
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesSingleColor
	constexpr static const FunctionPointer<UMeshVertexPainterKismetLibrary, void, const UStaticMeshComponent*, const FLinearColor&, const bool> PaintVerticesSingleColor = { 0x48c5160, 1 }; 
	// Function /Script/Engine.MeshVertexPainterKismetLibrary.PaintVerticesLerpAlongAxis
	constexpr static const FunctionPointer<UMeshVertexPainterKismetLibrary, void, const UStaticMeshComponent*, const FLinearColor&, const FLinearColor&, const EVertexPaintAxis, const bool> PaintVerticesLerpAlongAxis = { 0x48c4ae0, 2 }; 
};

/// Struct /Script/Engine.PurchaseInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FPurchaseInfo
{ 
	FString                                            Identifier;                                                 // 0x0000   (0x0010)  
	FString                                            DisplayName;                                                // 0x0010   (0x0010)  
	FString                                            DisplayDescription;                                         // 0x0020   (0x0010)  
	FString                                            DisplayPrice;                                               // 0x0030   (0x0010)  
};

/// Class /Script/Engine.MicroTransactionBase
/// Size: 0x0068 (104 bytes) (0x000038 - 0x000068) align n/a MaxSize: 0x0068
class UMicroTransactionBase : public UPlatformInterfaceBase
{ 
public:
	TArray<FPurchaseInfo>                              AvailableProducts;                                          // 0x0038   (0x0010)  
	FString                                            LastError;                                                  // 0x0048   (0x0010)  
	FString                                            LastErrorSolution;                                          // 0x0058   (0x0010)  
};

/// Class /Script/Engine.ModelComponent
/// Size: 0x0580 (1408 bytes) (0x000538 - 0x000580) align n/a MaxSize: 0x0580
class UModelComponent : public UPrimitiveComponent
{ 
public:
	unsigned char                                      UnknownData02_8[0x18];                                      // 0x0538   (0x0018)  MISSED
	class UBodySetup*                                  ModelBodySetup;                                             // 0x0550   (0x0008)  
	unsigned char                                      UnknownData03_7[0x28];                                      // 0x0558   (0x0028)  MISSED
};

/// Struct /Script/Engine.MorphTargetMaterialParam
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FMorphTargetMaterialParam
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	float                                              TargetValue;                                                // 0x0008   (0x0004)  
};

/// Class /Script/Engine.MorphTarget
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UMorphTarget : public UObject
{ 
public:
	class USkeletalMesh*                               BaseSkelMesh;                                               // 0x0028   (0x0008)  
	unsigned char                                      UnknownData01_6[0x10];                                      // 0x0030   (0x0010)  MISSED
	TArray<FMorphTargetMaterialParam>                  TargetMaterialParams;                                       // 0x0040   (0x0010)  
};

/// Class /Script/Engine.NavAgentInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNavAgentInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavAreaBase
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UNavAreaBase : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.NavCollisionBase
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class UNavCollisionBase : public UObject
{ 
public:
	bool                                               bIsDynamicObstacle : 1;                                     // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x47];                                      // 0x0029   (0x0047)  MISSED
};

/// Class /Script/Engine.NavEdgeProviderInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNavEdgeProviderInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavigationDataChunk
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UNavigationDataChunk : public UObject
{ 
public:
	FName                                              NavigationDataName;                                         // 0x0028   (0x0008)  
};

/// Class /Script/Engine.NavigationDataInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNavigationDataInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavigationSystemBase
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNavigationSystemBase : public UObject
{ 
public:
};

/// Struct /Script/Engine.NavAgentSelector
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FNavAgentSelector
{ 
	bool                                               bSupportsAgent0 : 1;                                        // 0x0000:0 (0x0001)  
	bool                                               bSupportsAgent1 : 1;                                        // 0x0000:1 (0x0001)  
	bool                                               bSupportsAgent2 : 1;                                        // 0x0000:2 (0x0001)  
	bool                                               bSupportsAgent3 : 1;                                        // 0x0000:3 (0x0001)  
	bool                                               bSupportsAgent4 : 1;                                        // 0x0000:4 (0x0001)  
	bool                                               bSupportsAgent5 : 1;                                        // 0x0000:5 (0x0001)  
	bool                                               bSupportsAgent6 : 1;                                        // 0x0000:6 (0x0001)  
	bool                                               bSupportsAgent7 : 1;                                        // 0x0000:7 (0x0001)  
	bool                                               bSupportsAgent8 : 1;                                        // 0x0001:0 (0x0001)  
	bool                                               bSupportsAgent9 : 1;                                        // 0x0001:1 (0x0001)  
	bool                                               bSupportsAgent10 : 1;                                       // 0x0001:2 (0x0001)  
	bool                                               bSupportsAgent11 : 1;                                       // 0x0001:3 (0x0001)  
	bool                                               bSupportsAgent12 : 1;                                       // 0x0001:4 (0x0001)  
	bool                                               bSupportsAgent13 : 1;                                       // 0x0001:5 (0x0001)  
	bool                                               bSupportsAgent14 : 1;                                       // 0x0001:6 (0x0001)  
	bool                                               bSupportsAgent15 : 1;                                       // 0x0001:7 (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0002   (0x0002)  MISSED
};

/// Class /Script/Engine.NavigationSystemConfig
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UNavigationSystemConfig : public UObject
{ 
public:
	FSoftClassPath                                     NavigationSystemClass;                                      // 0x0028   (0x0018)  
	FNavAgentSelector                                  SupportedAgentsMask;                                        // 0x0040   (0x0004)  
	FName                                              DefaultAgentName;                                           // 0x0044   (0x0008)  
	bool                                               bIsOverriden : 1;                                           // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.NullNavSysConfig
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align n/a MaxSize: 0x0050
class UNullNavSysConfig : public UNavigationSystemConfig
{ 
public:
};

/// Struct /Script/Engine.NavigationLinkBase
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FNavigationLinkBase
{ 
	float                                              LeftProjectHeight;                                          // 0x0000   (0x0004)  
	float                                              MaxFallDownLength;                                          // 0x0004   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0008   (0x0004)  MISSED
	float                                              SnapRadius;                                                 // 0x000C   (0x0004)  
	float                                              SnapHeight;                                                 // 0x0010   (0x0004)  
	FNavAgentSelector                                  SupportedAgents;                                            // 0x0014   (0x0004)  
	bool                                               bSupportsAgent0 : 1;                                        // 0x0018:0 (0x0001)  
	bool                                               bSupportsAgent1 : 1;                                        // 0x0018:1 (0x0001)  
	bool                                               bSupportsAgent2 : 1;                                        // 0x0018:2 (0x0001)  
	bool                                               bSupportsAgent3 : 1;                                        // 0x0018:3 (0x0001)  
	bool                                               bSupportsAgent4 : 1;                                        // 0x0018:4 (0x0001)  
	bool                                               bSupportsAgent5 : 1;                                        // 0x0018:5 (0x0001)  
	bool                                               bSupportsAgent6 : 1;                                        // 0x0018:6 (0x0001)  
	bool                                               bSupportsAgent7 : 1;                                        // 0x0018:7 (0x0001)  
	bool                                               bSupportsAgent8 : 1;                                        // 0x0019:0 (0x0001)  
	bool                                               bSupportsAgent9 : 1;                                        // 0x0019:1 (0x0001)  
	bool                                               bSupportsAgent10 : 1;                                       // 0x0019:2 (0x0001)  
	bool                                               bSupportsAgent11 : 1;                                       // 0x0019:3 (0x0001)  
	bool                                               bSupportsAgent12 : 1;                                       // 0x0019:4 (0x0001)  
	bool                                               bSupportsAgent13 : 1;                                       // 0x0019:5 (0x0001)  
	bool                                               bSupportsAgent14 : 1;                                       // 0x0019:6 (0x0001)  
	bool                                               bSupportsAgent15 : 1;                                       // 0x0019:7 (0x0001)  
	unsigned char                                      UnknownData05_5[0x2];                                       // 0x001A   (0x0002)  MISSED
	TEnumAsByte<ENavLinkDirection>                     Direction;                                                  // 0x001C   (0x0001)  
	bool                                               bUseSnapHeight : 1;                                         // 0x001D:0 (0x0001)  
	bool                                               bSnapToCheapestArea : 1;                                    // 0x001D:1 (0x0001)  
	bool                                               bCustomFlag0 : 1;                                           // 0x001D:2 (0x0001)  
	bool                                               bCustomFlag1 : 1;                                           // 0x001D:3 (0x0001)  
	bool                                               bCustomFlag2 : 1;                                           // 0x001D:4 (0x0001)  
	bool                                               bCustomFlag3 : 1;                                           // 0x001D:5 (0x0001)  
	bool                                               bCustomFlag4 : 1;                                           // 0x001D:6 (0x0001)  
	bool                                               bCustomFlag5 : 1;                                           // 0x001D:7 (0x0001)  
	bool                                               bCustomFlag6 : 1;                                           // 0x001E:0 (0x0001)  
	bool                                               bCustomFlag7 : 1;                                           // 0x001E:1 (0x0001)  
	unsigned char                                      UnknownData06_5[0x1];                                       // 0x001F   (0x0001)  MISSED
	class UClass*                                      AreaClass;                                                  // 0x0020   (0x0008)  
	unsigned char                                      UnknownData07_7[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.NavigationLink
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
struct FNavigationLink : FNavigationLinkBase
{ 
	FVector                                            Left;                                                       // 0x0030   (0x000C)  
	FVector                                            Right;                                                      // 0x003C   (0x000C)  
};

/// Struct /Script/Engine.NavigationSegmentLink
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align n/a MaxSize: 0x0060
struct FNavigationSegmentLink : FNavigationLinkBase
{ 
	FVector                                            LeftStart;                                                  // 0x0030   (0x000C)  
	FVector                                            LeftEnd;                                                    // 0x003C   (0x000C)  
	FVector                                            RightStart;                                                 // 0x0048   (0x000C)  
	FVector                                            RightEnd;                                                   // 0x0054   (0x000C)  
};

/// Class /Script/Engine.NavLinkDefinition
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UNavLinkDefinition : public UObject
{ 
public:
	TArray<FNavigationLink>                            Links;                                                      // 0x0028   (0x0010)  
	TArray<FNavigationSegmentLink>                     SegmentLinks;                                               // 0x0038   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0048   (0x0008)  MISSED
};

/// Class /Script/Engine.NavPathObserverInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNavPathObserverInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.NavRelevantInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNavRelevantInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.SimulatedClientNetConnection
/// Size: 0x1AF0 (6896 bytes) (0x001AF0 - 0x001AF0) align n/a MaxSize: 0x1AF0
class USimulatedClientNetConnection : public UNetConnection
{ 
public:
};

/// Class /Script/Engine.NetPushModelHelpers
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNetPushModelHelpers : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.NetPushModelHelpers.MarkPropertyDirtyFromRepIndex
	constexpr static const FunctionPointer<UNetPushModelHelpers, void, const UObject*, const int32_t, const FName> MarkPropertyDirtyFromRepIndex = { 0x48ce520, 0 }; 
	// Function /Script/Engine.NetPushModelHelpers.MarkPropertyDirty
	constexpr static const FunctionPointer<UNetPushModelHelpers, void, const UObject*, const FName> MarkPropertyDirty = { 0x48ce6e0, 1 }; 
};

/// Class /Script/Engine.NetworkPredictionInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNetworkPredictionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.NetworkEmulationProfileDescription
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FNetworkEmulationProfileDescription
{ 
	FString                                            ProfileName;                                                // 0x0000   (0x0010)  
	FString                                            ToolTip;                                                    // 0x0010   (0x0010)  
};

/// Class /Script/Engine.NetworkSettings
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align n/a MaxSize: 0x0058
class UNetworkSettings : public UDeveloperSettings
{ 
public:
	bool                                               bVerifyPeer : 1;                                            // 0x0038:0 (0x0001)  
	bool                                               bEnableMultiplayerWorldOriginRebasing : 1;                  // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            MaxRepArraySize;                                            // 0x003C   (0x0004)  
	int32_t                                            MaxRepArrayMemory;                                          // 0x0040   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0044   (0x0004)  MISSED
	TArray<FNetworkEmulationProfileDescription>        NetworkEmulationProfiles;                                   // 0x0048   (0x0010)  
};

/// Struct /Script/Engine.NodeItem
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FNodeItem
{ 
	FName                                              ParentName;                                                 // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
};

/// Class /Script/Engine.NodeMappingContainer
/// Size: 0x0168 (360 bytes) (0x000028 - 0x000168) align n/a MaxSize: 0x0168
class UNodeMappingContainer : public UObject
{ 
public:
	TMap<FName, FNodeItem>                             SourceItems;                                                // 0x0028   (0x0050)  
	TMap<FName, FNodeItem>                             TargetItems;                                                // 0x0078   (0x0050)  
	TMap<FName, FName>                                 SourceToTarget;                                             // 0x00C8   (0x0050)  
	TWeakObjectPtr<class UObject*>                     SourceAsset;                                                // 0x0118   (0x0008)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0120   (0x0020)  MISSED
	TWeakObjectPtr<class UObject*>                     TargetAsset;                                                // 0x0140   (0x0008)  
	unsigned char                                      UnknownData03_7[0x20];                                      // 0x0148   (0x0020)  MISSED
};

/// Class /Script/Engine.NodeMappingProviderInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNodeMappingProviderInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.Note
/// Size: 0x02C8 (712 bytes) (0x0002C8 - 0x0002C8) align n/a MaxSize: 0x02C8
class ANote : public AActor
{ 
public:
};

/// Class /Script/Engine.ObjectLibrary
/// Size: 0x00A8 (168 bytes) (0x000028 - 0x0000A8) align n/a MaxSize: 0x00A8
class UObjectLibrary : public UObject
{ 
public:
	class UClass*                                      ObjectBaseClass;                                            // 0x0028   (0x0008)  
	bool                                               bHasBlueprintClasses;                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0031   (0x0007)  MISSED
	TArray<class UObject*>                             Objects;                                                    // 0x0038   (0x0010)  
	TArray<TWeakObjectPtr<UObject*>>                   WeakObjects;                                                // 0x0048   (0x0010)  
	bool                                               bUseWeakReferences;                                         // 0x0058   (0x0001)  
	bool                                               bIsFullyLoaded;                                             // 0x0059   (0x0001)  
	unsigned char                                      UnknownData03_7[0x4E];                                      // 0x005A   (0x004E)  MISSED
};

/// Class /Script/Engine.ObjectReferencer
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UObjectReferencer : public UObject
{ 
public:
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0028   (0x0010)  
};

/// Class /Script/Engine.ObjectTraceWorldSubsystem
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UObjectTraceWorldSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Engine.PackageMapClient
/// Size: 0x03F8 (1016 bytes) (0x0000E0 - 0x0003F8) align n/a MaxSize: 0x03F8
class UPackageMapClient : public UPackageMap
{ 
public:
	unsigned char                                      UnknownData01_1[0x318];                                     // 0x00E0   (0x0318)  MISSED
};

/// Class /Script/Engine.PainCausingVolume
/// Size: 0x0530 (1328 bytes) (0x000508 - 0x000530) align n/a MaxSize: 0x0530
class APainCausingVolume : public APhysicsVolume
{ 
public:
	bool                                               bPainCausing : 1;                                           // 0x0508:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0509   (0x0003)  MISSED
	float                                              DamagePerSec;                                               // 0x050C   (0x0004)  
	class UClass*                                      DamageType;                                                 // 0x0510   (0x0008)  
	float                                              PainInterval;                                               // 0x0518   (0x0004)  
	bool                                               bEntryPain : 1;                                             // 0x051C:0 (0x0001)  
	bool                                               BACKUP_bPainCausing : 1;                                    // 0x051C:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x051D   (0x0003)  MISSED
	class AController*                                 DamageInstigator;                                           // 0x0520   (0x0008)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x0528   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleEmitter
/// Size: 0x01B8 (440 bytes) (0x000028 - 0x0001B8) align n/a MaxSize: 0x01B8
class UParticleEmitter : public UObject
{ 
public:
	FName                                              EmitterName;                                                // 0x0028   (0x0008)  
	int32_t                                            SubUVDataOffset;                                            // 0x0030   (0x0004)  
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                          // 0x0034   (0x0001)  
	EParticleSignificanceLevel                         SignificanceLevel;                                          // 0x0035   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x0036   (0x0001)  MISSED
	bool                                               bUseLegacySpawningBehavior : 1;                             // 0x0037:0 (0x0001)  
	unsigned char                                      UnknownBit07 : 1;                                           // 0x0037:1 (0x0001)  MISSED
	unsigned char                                      UnknownBit08 : 1;                                           // 0x0037:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit09 : 1;                                           // 0x0037:3 (0x0001)  MISSED
	bool                                               ConvertedModules : 1;                                       // 0x0037:4 (0x0001)  
	bool                                               bIsSoloing : 1;                                             // 0x0037:5 (0x0001)  
	bool                                               bCookedOut : 1;                                             // 0x0037:6 (0x0001)  
	bool                                               bDisabledLODsKeepEmitterAlive : 1;                          // 0x0037:7 (0x0001)  
	bool                                               bDisableWhenInsignficant : 1;                               // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	TArray<class UParticleLODLevel*>                   LODLevels;                                                  // 0x0040   (0x0010)  
	int32_t                                            PeakActiveParticles;                                        // 0x0050   (0x0004)  
	int32_t                                            InitialAllocationCount;                                     // 0x0054   (0x0004)  
	float                                              QualityLevelSpawnRateScale;                                 // 0x0058   (0x0004)  
	uint32_t                                           DetailModeBitmask;                                          // 0x005C   (0x0004)  
	unsigned char                                      UnknownData11_7[0x158];                                     // 0x0060   (0x0158)  MISSED
};

/// Class /Script/Engine.ParticleEventManager
/// Size: 0x02C8 (712 bytes) (0x0002C8 - 0x0002C8) align n/a MaxSize: 0x02C8
class AParticleEventManager : public AActor
{ 
public:
};

/// Class /Script/Engine.ParticleLODLevel
/// Size: 0x00B8 (184 bytes) (0x000028 - 0x0000B8) align n/a MaxSize: 0x00B8
class UParticleLODLevel : public UObject
{ 
public:
	int32_t                                            Level;                                                      // 0x0028   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	class UParticleModuleRequired*                     RequiredModule;                                             // 0x0030   (0x0008)  
	TArray<class UParticleModule*>                     Modules;                                                    // 0x0038   (0x0010)  
	class UParticleModuleTypeDataBase*                 TypeDataModule;                                             // 0x0048   (0x0008)  
	class UParticleModuleSpawn*                        SpawnModule;                                                // 0x0050   (0x0008)  
	class UParticleModuleEventGenerator*               EventGenerator;                                             // 0x0058   (0x0008)  
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                            // 0x0060   (0x0010)  
	TArray<class UParticleModule*>                     SpawnModules;                                               // 0x0070   (0x0010)  
	TArray<class UParticleModule*>                     UpdateModules;                                              // 0x0080   (0x0010)  
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                               // 0x0090   (0x0010)  
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                       // 0x00A0   (0x0010)  
	bool                                               ConvertedModules : 1;                                       // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	int32_t                                            PeakActiveParticles;                                        // 0x00B4   (0x0004)  
};

/// Class /Script/Engine.ParticleModule
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModule : public UObject
{ 
public:
	bool                                               bSpawnModule : 1;                                           // 0x0028:0 (0x0001)  
	bool                                               bUpdateModule : 1;                                          // 0x0028:1 (0x0001)  
	bool                                               bFinalUpdateModule : 1;                                     // 0x0028:2 (0x0001)  
	bool                                               bUpdateForGPUEmitter : 1;                                   // 0x0028:3 (0x0001)  
	bool                                               bCurvesAsColor : 1;                                         // 0x0028:4 (0x0001)  
	bool                                               b3DDrawMode : 1;                                            // 0x0028:5 (0x0001)  
	bool                                               bSupported3DDrawMode : 1;                                   // 0x0028:6 (0x0001)  
	bool                                               bEnabled : 1;                                               // 0x0028:7 (0x0001)  
	bool                                               bEditable : 1;                                              // 0x0029:0 (0x0001)  
	bool                                               LODDuplicate : 1;                                           // 0x0029:1 (0x0001)  
	bool                                               bSupportsRandomSeed : 1;                                    // 0x0029:2 (0x0001)  
	bool                                               bRequiresLoopingNotification : 1;                           // 0x0029:3 (0x0001)  
	char                                               LODValidity;                                                // 0x002A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x5];                                       // 0x002B   (0x0005)  MISSED
};

/// Class /Script/Engine.ParticleModuleAccelerationBase
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UParticleModuleAccelerationBase : public UParticleModule
{ 
public:
	bool                                               bAlwaysInWorldSpace : 1;                                    // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/Engine.DistributionLookupTable
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FDistributionLookupTable
{ 
	float                                              TimeScale;                                                  // 0x0000   (0x0004)  
	float                                              TimeBias;                                                   // 0x0004   (0x0004)  
	TArray<float>                                      Values;                                                     // 0x0008   (0x0010)  
	char                                               Op;                                                         // 0x0018   (0x0001)  
	char                                               EntryCount;                                                 // 0x0019   (0x0001)  
	char                                               EntryStride;                                                // 0x001A   (0x0001)  
	char                                               SubEntryStride;                                             // 0x001B   (0x0001)  
	char                                               LockFlag;                                                   // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.RawDistribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FRawDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.RawDistributionVector
/// Size: 0x0048 (72 bytes) (0x000020 - 0x000048) align n/a MaxSize: 0x0048
struct FRawDistributionVector : FRawDistribution
{ 
	float                                              MinValue;                                                   // 0x0020   (0x0004)  
	float                                              MaxValue;                                                   // 0x0024   (0x0004)  
	FVector                                            MinValueVec;                                                // 0x0028   (0x000C)  
	FVector                                            MaxValueVec;                                                // 0x0034   (0x000C)  
	class UDistributionVector*                         Distribution;                                               // 0x0040   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleAcceleration
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align n/a MaxSize: 0x0088
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{ 
public:
	FRawDistributionVector                             Acceleration;                                               // 0x0038   (0x0048)  
	bool                                               bApplyOwnerScale : 1;                                       // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleAccelerationConstant
/// Size: 0x0048 (72 bytes) (0x000038 - 0x000048) align n/a MaxSize: 0x0048
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{ 
public:
	FVector                                            Acceleration;                                               // 0x0038   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/Engine.RawDistributionFloat
/// Size: 0x0030 (48 bytes) (0x000020 - 0x000030) align n/a MaxSize: 0x0030
struct FRawDistributionFloat : FRawDistribution
{ 
	float                                              MinValue;                                                   // 0x0020   (0x0004)  
	float                                              MaxValue;                                                   // 0x0024   (0x0004)  
	class UDistributionFloat*                          Distribution;                                               // 0x0028   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleAccelerationDrag
/// Size: 0x0070 (112 bytes) (0x000038 - 0x000070) align n/a MaxSize: 0x0070
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{ 
public:
	class UDistributionFloat*                          DragCoefficient;                                            // 0x0038   (0x0008)  
	FRawDistributionFloat                              DragCoefficientRaw;                                         // 0x0040   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAccelerationDragScaleOverLife
/// Size: 0x0070 (112 bytes) (0x000038 - 0x000070) align n/a MaxSize: 0x0070
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{ 
public:
	class UDistributionFloat*                          DragScale;                                                  // 0x0038   (0x0008)  
	FRawDistributionFloat                              DragScaleRaw;                                               // 0x0040   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAccelerationOverLifetime
/// Size: 0x0080 (128 bytes) (0x000038 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{ 
public:
	FRawDistributionVector                             AccelOverLife;                                              // 0x0038   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleAttractorBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleAttractorBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleAttractorLine
/// Size: 0x00A8 (168 bytes) (0x000030 - 0x0000A8) align n/a MaxSize: 0x00A8
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{ 
public:
	FVector                                            EndPoint0;                                                  // 0x0030   (0x000C)  
	FVector                                            EndPoint1;                                                  // 0x003C   (0x000C)  
	FRawDistributionFloat                              Range;                                                      // 0x0048   (0x0030)  
	FRawDistributionFloat                              Strength;                                                   // 0x0078   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleAttractorParticle
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000B0) align n/a MaxSize: 0x00B0
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0030   (0x0008)  
	FRawDistributionFloat                              Range;                                                      // 0x0038   (0x0030)  
	bool                                               bStrengthByDistance : 1;                                    // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x0069   (0x0007)  MISSED
	FRawDistributionFloat                              Strength;                                                   // 0x0070   (0x0030)  
	bool                                               bAffectBaseVelocity : 1;                                    // 0x00A0:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                            // 0x00A4   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x00A5   (0x0003)  MISSED
	bool                                               bRenewSource : 1;                                           // 0x00A8:0 (0x0001)  
	bool                                               bInheritSourceVel : 1;                                      // 0x00A8:1 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x00A9   (0x0003)  MISSED
	int32_t                                            LastSelIndex;                                               // 0x00AC   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleAttractorPoint
/// Size: 0x00E0 (224 bytes) (0x000030 - 0x0000E0) align n/a MaxSize: 0x00E0
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{ 
public:
	FRawDistributionVector                             position;                                                   // 0x0030   (0x0048)  
	FRawDistributionFloat                              Range;                                                      // 0x0078   (0x0030)  
	FRawDistributionFloat                              Strength;                                                   // 0x00A8   (0x0030)  
	bool                                               StrengthByDistance : 1;                                     // 0x00D8:0 (0x0001)  
	bool                                               bAffectBaseVelocity : 1;                                    // 0x00D8:1 (0x0001)  
	bool                                               bOverrideVelocity : 1;                                      // 0x00D8:2 (0x0001)  
	bool                                               bUseWorldSpacePosition : 1;                                 // 0x00D8:3 (0x0001)  
	bool                                               Positive_X : 1;                                             // 0x00D8:4 (0x0001)  
	bool                                               Positive_Y : 1;                                             // 0x00D8:5 (0x0001)  
	bool                                               Positive_Z : 1;                                             // 0x00D8:6 (0x0001)  
	bool                                               Negative_X : 1;                                             // 0x00D8:7 (0x0001)  
	bool                                               Negative_Y : 1;                                             // 0x00D9:0 (0x0001)  
	bool                                               Negative_Z : 1;                                             // 0x00D9:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x00DA   (0x0006)  MISSED
};

/// Class /Script/Engine.ParticleModuleAttractorPointGravity
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align n/a MaxSize: 0x0078
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{ 
public:
	FVector                                            position;                                                   // 0x0030   (0x000C)  
	float                                              Radius;                                                     // 0x003C   (0x0004)  
	class UDistributionFloat*                          Strength;                                                   // 0x0040   (0x0008)  
	FRawDistributionFloat                              StrengthRaw;                                                // 0x0048   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleBeamBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.BeamModifierOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FBeamModifierOptions
{ 
	bool                                               bModify : 1;                                                // 0x0000:0 (0x0001)  
	bool                                               bScale : 1;                                                 // 0x0000:1 (0x0001)  
	bool                                               bLock : 1;                                                  // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleBeamModifier
/// Size: 0x0108 (264 bytes) (0x000030 - 0x000108) align n/a MaxSize: 0x0108
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{ 
public:
	TEnumAsByte<BeamModifierType>                      ModifierType;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FBeamModifierOptions                               PositionOptions;                                            // 0x0034   (0x0004)  
	FRawDistributionVector                             position;                                                   // 0x0038   (0x0048)  
	FBeamModifierOptions                               TangentOptions;                                             // 0x0080   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	FRawDistributionVector                             Tangent;                                                    // 0x0088   (0x0048)  
	bool                                               bAbsoluteTangent : 1;                                       // 0x00D0:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x00D1   (0x0003)  MISSED
	FBeamModifierOptions                               StrengthOptions;                                            // 0x00D4   (0x0004)  
	FRawDistributionFloat                              Strength;                                                   // 0x00D8   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamNoise
/// Size: 0x0190 (400 bytes) (0x000030 - 0x000190) align n/a MaxSize: 0x0190
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{ 
public:
	bool                                               bLowFreq_Enabled : 1;                                       // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            Frequency;                                                  // 0x0034   (0x0004)  
	int32_t                                            Frequency_LowRange;                                         // 0x0038   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FRawDistributionVector                             NoiseRange;                                                 // 0x0040   (0x0048)  
	FRawDistributionFloat                              NoiseRangeScale;                                            // 0x0088   (0x0030)  
	bool                                               bNRScaleEmitterTime : 1;                                    // 0x00B8:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x7];                                       // 0x00B9   (0x0007)  MISSED
	FRawDistributionVector                             NoiseSpeed;                                                 // 0x00C0   (0x0048)  
	bool                                               bSmooth : 1;                                                // 0x0108:0 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x0109   (0x0003)  MISSED
	float                                              NoiseLockRadius;                                            // 0x010C   (0x0004)  
	bool                                               bNoiseLock : 1;                                             // 0x0110:0 (0x0001)  
	bool                                               bOscillate : 1;                                             // 0x0110:1 (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              NoiseLockTime;                                              // 0x0114   (0x0004)  
	float                                              NoiseTension;                                               // 0x0118   (0x0004)  
	bool                                               bUseNoiseTangents : 1;                                      // 0x011C:0 (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x011D   (0x0003)  MISSED
	FRawDistributionFloat                              NoiseTangentStrength;                                       // 0x0120   (0x0030)  
	int32_t                                            NoiseTessellation;                                          // 0x0150   (0x0004)  
	bool                                               bTargetNoise : 1;                                           // 0x0154:0 (0x0001)  
	unsigned char                                      UnknownData14_5[0x3];                                       // 0x0155   (0x0003)  MISSED
	float                                              FrequencyDistance;                                          // 0x0158   (0x0004)  
	bool                                               bApplyNoiseScale : 1;                                       // 0x015C:0 (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x015D   (0x0003)  MISSED
	FRawDistributionFloat                              NoiseScale;                                                 // 0x0160   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleBeamSource
/// Size: 0x0118 (280 bytes) (0x000030 - 0x000118) align n/a MaxSize: 0x0118
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{ 
public:
	TEnumAsByte<Beam2SourceTargetMethod>               SourceMethod;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              SourceName;                                                 // 0x0034   (0x0008)  
	bool                                               bSourceAbsolute : 1;                                        // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	FRawDistributionVector                             Source;                                                     // 0x0040   (0x0048)  
	bool                                               bLockSource : 1;                                            // 0x0088:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	TEnumAsByte<Beam2SourceTargetTangentMethod>        SourceTangentMethod;                                        // 0x008C   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	FRawDistributionVector                             SourceTangent;                                              // 0x0090   (0x0048)  
	bool                                               bLockSourceTangent : 1;                                     // 0x00D8:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x7];                                       // 0x00D9   (0x0007)  MISSED
	FRawDistributionFloat                              SourceStrength;                                             // 0x00E0   (0x0030)  
	bool                                               bLockSourceStength : 1;                                     // 0x0110:0 (0x0001)  
	unsigned char                                      UnknownData11_7[0x7];                                       // 0x0111   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleBeamTarget
/// Size: 0x0120 (288 bytes) (0x000030 - 0x000120) align n/a MaxSize: 0x0120
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{ 
public:
	TEnumAsByte<Beam2SourceTargetMethod>               TargetMethod;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              TargetName;                                                 // 0x0034   (0x0008)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FRawDistributionVector                             Target;                                                     // 0x0040   (0x0048)  
	bool                                               bTargetAbsolute : 1;                                        // 0x0088:0 (0x0001)  
	bool                                               bLockTarget : 1;                                            // 0x0088:1 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	TEnumAsByte<Beam2SourceTargetTangentMethod>        TargetTangentMethod;                                        // 0x008C   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x008D   (0x0003)  MISSED
	FRawDistributionVector                             TargetTangent;                                              // 0x0090   (0x0048)  
	bool                                               bLockTargetTangent : 1;                                     // 0x00D8:0 (0x0001)  
	unsigned char                                      UnknownData11_5[0x7];                                       // 0x00D9   (0x0007)  MISSED
	FRawDistributionFloat                              TargetStrength;                                             // 0x00E0   (0x0030)  
	bool                                               bLockTargetStength : 1;                                     // 0x0110:0 (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              LockRadius;                                                 // 0x0114   (0x0004)  
	unsigned char                                      UnknownData13_7[0x8];                                       // 0x0118   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleModuleCameraBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleCameraBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleCameraOffset
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align n/a MaxSize: 0x0068
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{ 
public:
	FRawDistributionFloat                              CameraOffset;                                               // 0x0030   (0x0030)  
	bool                                               bSpawnTimeOnly : 1;                                         // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	TEnumAsByte<EParticleCameraOffsetUpdateMethod>     UpdateMethod;                                               // 0x0064   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleCollisionBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleCollisionBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleCollision
/// Size: 0x0190 (400 bytes) (0x000030 - 0x000190) align n/a MaxSize: 0x0190
class UParticleModuleCollision : public UParticleModuleCollisionBase
{ 
public:
	FRawDistributionVector                             DampingFactor;                                              // 0x0030   (0x0048)  
	FRawDistributionVector                             DampingFactorRotation;                                      // 0x0078   (0x0048)  
	FRawDistributionFloat                              MaxCollisions;                                              // 0x00C0   (0x0030)  
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                  // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData06_6[0x7];                                       // 0x00F1   (0x0007)  MISSED
	TArray<TEnumAsByte<EObjectTypeQuery>>              CollisionTypes;                                             // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData07_6[0x8];                                       // 0x0108   (0x0008)  MISSED
	bool                                               bApplyPhysics : 1;                                          // 0x0110:0 (0x0001)  
	bool                                               bIgnoreTriggerVolumes : 1;                                  // 0x0110:1 (0x0001)  
	unsigned char                                      UnknownData08_5[0x7];                                       // 0x0111   (0x0007)  MISSED
	FRawDistributionFloat                              ParticleMass;                                               // 0x0118   (0x0030)  
	float                                              DirScalar;                                                  // 0x0148   (0x0004)  
	bool                                               bPawnsDoNotDecrementCount : 1;                              // 0x014C:0 (0x0001)  
	bool                                               bOnlyVerticalNormalsDecrementCount : 1;                     // 0x014C:1 (0x0001)  
	unsigned char                                      UnknownData09_5[0x3];                                       // 0x014D   (0x0003)  MISSED
	float                                              VerticalFudgeFactor;                                        // 0x0150   (0x0004)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	FRawDistributionFloat                              DelayAmount;                                                // 0x0158   (0x0030)  
	bool                                               bDropDetail : 1;                                            // 0x0188:0 (0x0001)  
	bool                                               bCollideOnlyIfVisible : 1;                                  // 0x0188:1 (0x0001)  
	bool                                               bIgnoreSourceActor : 1;                                     // 0x0188:2 (0x0001)  
	unsigned char                                      UnknownData11_5[0x3];                                       // 0x0189   (0x0003)  MISSED
	float                                              MaxCollisionDistance;                                       // 0x018C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleCollisionGPU
/// Size: 0x00A8 (168 bytes) (0x000030 - 0x0000A8) align n/a MaxSize: 0x00A8
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{ 
public:
	FRawDistributionFloat                              Resilience;                                                 // 0x0030   (0x0030)  
	FRawDistributionFloat                              ResilienceScaleOverLife;                                    // 0x0060   (0x0030)  
	float                                              Friction;                                                   // 0x0090   (0x0004)  
	float                                              RandomSpread;                                               // 0x0094   (0x0004)  
	float                                              RandomDistribution;                                         // 0x0098   (0x0004)  
	float                                              RadiusScale;                                                // 0x009C   (0x0004)  
	float                                              RadiusBias;                                                 // 0x00A0   (0x0004)  
	TEnumAsByte<EParticleCollisionResponse>            Response;                                                   // 0x00A4   (0x0001)  
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                              // 0x00A5   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x00A6   (0x0002)  MISSED
};

/// Class /Script/Engine.ParticleModuleColorBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleColorBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleColor
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000B0) align n/a MaxSize: 0x00B0
class UParticleModuleColor : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             StartColor;                                                 // 0x0030   (0x0048)  
	FRawDistributionFloat                              StartAlpha;                                                 // 0x0078   (0x0030)  
	bool                                               bClampAlpha : 1;                                            // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Struct /Script/Engine.ParticleRandomSeedInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FParticleRandomSeedInfo
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	bool                                               bGetSeedFromInstance : 1;                                   // 0x0008:0 (0x0001)  
	bool                                               bInstanceSeedIsIndex : 1;                                   // 0x0008:1 (0x0001)  
	bool                                               bResetSeedOnEmitterLooping : 1;                             // 0x0008:2 (0x0001)  
	bool                                               bRandomlySelectSeedArray : 1;                               // 0x0008:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<int32_t>                                    RandomSeeds;                                                // 0x0010   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleColor_Seeded
/// Size: 0x00D0 (208 bytes) (0x0000B0 - 0x0000D0) align n/a MaxSize: 0x00D0
class UParticleModuleColor_Seeded : public UParticleModuleColor
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00B0   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleColorOverLife
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000B0) align n/a MaxSize: 0x00B0
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             ColorOverLife;                                              // 0x0030   (0x0048)  
	FRawDistributionFloat                              AlphaOverLife;                                              // 0x0078   (0x0030)  
	bool                                               bClampAlpha : 1;                                            // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleColorScaleOverLife
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000B0) align n/a MaxSize: 0x00B0
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{ 
public:
	FRawDistributionVector                             ColorScaleOverLife;                                         // 0x0030   (0x0048)  
	FRawDistributionFloat                              AlphaScaleOverLife;                                         // 0x0078   (0x0030)  
	bool                                               bEmitterTime : 1;                                           // 0x00A8:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleEventBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.ParticleEvent_GenerateInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FParticleEvent_GenerateInfo
{ 
	TEnumAsByte<EParticleEventType>                    Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	int32_t                                            Frequency;                                                  // 0x0004   (0x0004)  
	int32_t                                            ParticleFrequency;                                          // 0x0008   (0x0004)  
	bool                                               FirstTimeOnly : 1;                                          // 0x000C:0 (0x0001)  
	bool                                               LastTimeOnly : 1;                                           // 0x000C:1 (0x0001)  
	bool                                               UseReflectedImpactVector : 1;                               // 0x000C:2 (0x0001)  
	bool                                               bUseOrbitOffset : 1;                                        // 0x000C:3 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x000D   (0x0003)  MISSED
	FName                                              CustomName;                                                 // 0x0010   (0x0008)  
	TArray<class UParticleModuleEventSendToGame*>      ParticleModuleEventsToSendToGame;                           // 0x0018   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleEventGenerator
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{ 
public:
	TArray<FParticleEvent_GenerateInfo>                Events;                                                     // 0x0030   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleEventReceiverBase
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{ 
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                         // 0x0030   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              EventName;                                                  // 0x0034   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventReceiverKillParticles
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{ 
public:
	bool                                               bStopSpawning : 1;                                          // 0x0040:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0041   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventReceiverSpawn
/// Size: 0x00D8 (216 bytes) (0x000040 - 0x0000D8) align n/a MaxSize: 0x00D8
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{ 
public:
	FRawDistributionFloat                              SpawnCount;                                                 // 0x0040   (0x0030)  
	bool                                               bUseParticleTime : 1;                                       // 0x0070:0 (0x0001)  
	bool                                               bUsePSysLocation : 1;                                       // 0x0070:1 (0x0001)  
	bool                                               bInheritVelocity : 1;                                       // 0x0070:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0071   (0x0007)  MISSED
	FRawDistributionVector                             InheritVelocityScale;                                       // 0x0078   (0x0048)  
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                          // 0x00C0   (0x0010)  
	bool                                               bBanPhysicalMaterials : 1;                                  // 0x00D0:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleEventSendToGame
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UParticleModuleEventSendToGame : public UObject
{ 
public:
};

/// Class /Script/Engine.ParticleModuleKillBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleKillBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleKillBox
/// Size: 0x00C8 (200 bytes) (0x000030 - 0x0000C8) align n/a MaxSize: 0x00C8
class UParticleModuleKillBox : public UParticleModuleKillBase
{ 
public:
	FRawDistributionVector                             LowerLeftCorner;                                            // 0x0030   (0x0048)  
	FRawDistributionVector                             UpperRightCorner;                                           // 0x0078   (0x0048)  
	bool                                               bAbsolute : 1;                                              // 0x00C0:0 (0x0001)  
	bool                                               bKillInside : 1;                                            // 0x00C0:1 (0x0001)  
	bool                                               bAxisAlignedAndFixedSize : 1;                               // 0x00C0:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00C1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleKillHeight
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align n/a MaxSize: 0x0068
class UParticleModuleKillHeight : public UParticleModuleKillBase
{ 
public:
	FRawDistributionFloat                              Height;                                                     // 0x0030   (0x0030)  
	bool                                               bAbsolute : 1;                                              // 0x0060:0 (0x0001)  
	bool                                               bFloor : 1;                                                 // 0x0060:1 (0x0001)  
	bool                                               bApplyPSysScale : 1;                                        // 0x0060:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleLifetimeBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleLifetimeBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLifetime
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align n/a MaxSize: 0x0060
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{ 
public:
	FRawDistributionFloat                              LifeTime;                                                   // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLifetime_Seeded
/// Size: 0x0080 (128 bytes) (0x000060 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0060   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLightBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleLightBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLight
/// Size: 0x0120 (288 bytes) (0x000030 - 0x000120) align n/a MaxSize: 0x0120
class UParticleModuleLight : public UParticleModuleLightBase
{ 
public:
	bool                                               bUseInverseSquaredFalloff;                                  // 0x0030   (0x0001)  
	bool                                               bAffectsTranslucency;                                       // 0x0031   (0x0001)  
	bool                                               bPreviewLightRadius;                                        // 0x0032   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x0033   (0x0001)  MISSED
	float                                              SpawnFraction;                                              // 0x0034   (0x0004)  
	FRawDistributionVector                             ColorScaleOverLife;                                         // 0x0038   (0x0048)  
	FRawDistributionFloat                              BrightnessOverLife;                                         // 0x0080   (0x0030)  
	FRawDistributionFloat                              RadiusScale;                                                // 0x00B0   (0x0030)  
	FRawDistributionFloat                              LightExponent;                                              // 0x00E0   (0x0030)  
	FLightingChannels                                  LightingChannels;                                           // 0x0110   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              VolumetricScatteringIntensity;                              // 0x0114   (0x0004)  
	bool                                               bHighQualityLights;                                         // 0x0118   (0x0001)  
	bool                                               bShadowCastingLights;                                       // 0x0119   (0x0001)  
	unsigned char                                      UnknownData05_7[0x6];                                       // 0x011A   (0x0006)  MISSED
};

/// Class /Script/Engine.ParticleModuleLight_Seeded
/// Size: 0x0140 (320 bytes) (0x000120 - 0x000140) align n/a MaxSize: 0x0140
class UParticleModuleLight_Seeded : public UParticleModuleLight
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0120   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleLocationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLocation
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleLocation : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             StartLocation;                                              // 0x0030   (0x0048)  
	float                                              DistributeOverNPoints;                                      // 0x0078   (0x0004)  
	float                                              DistributeThreshold;                                        // 0x007C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleLocation_Seeded
/// Size: 0x00A0 (160 bytes) (0x000080 - 0x0000A0) align n/a MaxSize: 0x00A0
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Struct /Script/Engine.LocationBoneSocketInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FLocationBoneSocketInfo
{ 
	FName                                              BoneSocketName;                                             // 0x0000   (0x0008)  
	FVector                                            Offset;                                                     // 0x0008   (0x000C)  
};

/// Class /Script/Engine.ParticleModuleLocationBoneSocket
/// Size: 0x0070 (112 bytes) (0x000030 - 0x000070) align n/a MaxSize: 0x0070
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{ 
public:
	TEnumAsByte<ELocationBoneSocketSource>             SourceType;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FVector                                            UniversalOffset;                                            // 0x0034   (0x000C)  
	TArray<FLocationBoneSocketInfo>                    SourceLocations;                                            // 0x0040   (0x0010)  
	TEnumAsByte<ELocationBoneSocketSelectionMethod>    SelectionMethod;                                            // 0x0050   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	bool                                               bUpdatePositionEachFrame : 1;                               // 0x0054:0 (0x0001)  
	bool                                               bOrientMeshEmitters : 1;                                    // 0x0054:1 (0x0001)  
	bool                                               bInheritBoneVelocity : 1;                                   // 0x0054:2 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	float                                              InheritVelocityScale;                                       // 0x0058   (0x0004)  
	FName                                              SkelMeshActorParamName;                                     // 0x005C   (0x0008)  
	int32_t                                            NumPreSelectedIndices;                                      // 0x0064   (0x0004)  
	unsigned char                                      UnknownData07_7[0x8];                                       // 0x0068   (0x0008)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationDirect
/// Size: 0x0150 (336 bytes) (0x000030 - 0x000150) align n/a MaxSize: 0x0150
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             Location;                                                   // 0x0030   (0x0048)  
	FRawDistributionVector                             LocationOffset;                                             // 0x0078   (0x0048)  
	FRawDistributionVector                             ScaleFactor;                                                // 0x00C0   (0x0048)  
	FRawDistributionVector                             Direction;                                                  // 0x0108   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleLocationEmitter
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align n/a MaxSize: 0x0050
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0030   (0x0008)  
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                            // 0x0038   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	bool                                               InheritSourceVelocity : 1;                                  // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	float                                              InheritSourceVelocityScale;                                 // 0x0040   (0x0004)  
	bool                                               bInheritSourceRotation : 1;                                 // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              InheritSourceRotationScale;                                 // 0x0048   (0x0004)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationEmitterDirect
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{ 
public:
	FName                                              EmitterName;                                                // 0x0030   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveBase
/// Size: 0x00B0 (176 bytes) (0x000030 - 0x0000B0) align n/a MaxSize: 0x00B0
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{ 
public:
	bool                                               Positive_X : 1;                                             // 0x0030:0 (0x0001)  
	bool                                               Positive_Y : 1;                                             // 0x0030:1 (0x0001)  
	bool                                               Positive_Z : 1;                                             // 0x0030:2 (0x0001)  
	bool                                               Negative_X : 1;                                             // 0x0030:3 (0x0001)  
	bool                                               Negative_Y : 1;                                             // 0x0030:4 (0x0001)  
	bool                                               Negative_Z : 1;                                             // 0x0030:5 (0x0001)  
	bool                                               SurfaceOnly : 1;                                            // 0x0030:6 (0x0001)  
	bool                                               Velocity : 1;                                               // 0x0030:7 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0031   (0x0007)  MISSED
	FRawDistributionFloat                              VelocityScale;                                              // 0x0038   (0x0030)  
	FRawDistributionVector                             StartLocation;                                              // 0x0068   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder
/// Size: 0x0120 (288 bytes) (0x0000B0 - 0x000120) align n/a MaxSize: 0x0120
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{ 
public:
	bool                                               RadialVelocity : 1;                                         // 0x00B0:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x00B1   (0x0007)  MISSED
	FRawDistributionFloat                              StartRadius;                                                // 0x00B8   (0x0030)  
	FRawDistributionFloat                              StartHeight;                                                // 0x00E8   (0x0030)  
	TEnumAsByte<CylinderHeightAxis>                    HeightAxis;                                                 // 0x0118   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0119   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
/// Size: 0x0140 (320 bytes) (0x000120 - 0x000140) align n/a MaxSize: 0x0140
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0120   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere
/// Size: 0x00E0 (224 bytes) (0x0000B0 - 0x0000E0) align n/a MaxSize: 0x00E0
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{ 
public:
	FRawDistributionFloat                              StartRadius;                                                // 0x00B0   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveSphere_Seeded
/// Size: 0x0100 (256 bytes) (0x0000E0 - 0x000100) align n/a MaxSize: 0x0100
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00E0   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleLocationPrimitiveTriangle
/// Size: 0x0108 (264 bytes) (0x000030 - 0x000108) align n/a MaxSize: 0x0108
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             StartOffset;                                                // 0x0030   (0x0048)  
	FRawDistributionFloat                              Height;                                                     // 0x0078   (0x0030)  
	FRawDistributionFloat                              angle;                                                      // 0x00A8   (0x0030)  
	FRawDistributionFloat                              Thickness;                                                  // 0x00D8   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleLocationSkelVertSurface
/// Size: 0x0090 (144 bytes) (0x000030 - 0x000090) align n/a MaxSize: 0x0090
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{ 
public:
	TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FVector                                            UniversalOffset;                                            // 0x0034   (0x000C)  
	bool                                               bUpdatePositionEachFrame : 1;                               // 0x0040:0 (0x0001)  
	bool                                               bOrientMeshEmitters : 1;                                    // 0x0040:1 (0x0001)  
	bool                                               bInheritBoneVelocity : 1;                                   // 0x0040:2 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              InheritVelocityScale;                                       // 0x0044   (0x0004)  
	FName                                              SkelMeshActorParamName;                                     // 0x0048   (0x0008)  
	TArray<FName>                                      ValidAssociatedBones;                                       // 0x0050   (0x0010)  
	bool                                               bEnforceNormalCheck : 1;                                    // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0061   (0x0003)  MISSED
	FVector                                            NormalToCompare;                                            // 0x0064   (0x000C)  
	float                                              NormalCheckToleranceDegrees;                                // 0x0070   (0x0004)  
	float                                              NormalCheckTolerance;                                       // 0x0074   (0x0004)  
	TArray<int32_t>                                    ValidMaterialIndices;                                       // 0x0078   (0x0010)  
	bool                                               bInheritVertexColor : 1;                                    // 0x0088:0 (0x0001)  
	bool                                               bInheritUV : 1;                                             // 0x0088:1 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0089   (0x0003)  MISSED
	uint32_t                                           InheritUVChannel;                                           // 0x008C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{ 
public:
};

/// Class /Script/Engine.ParticleModuleLocationWorldOffset_Seeded
/// Size: 0x00A0 (160 bytes) (0x000080 - 0x0000A0) align n/a MaxSize: 0x00A0
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleMaterialBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleMaterialBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshMaterial
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{ 
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                              // 0x0030   (0x0010)  
};

/// Class /Script/Engine.ParticleModuleRotationBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleRotationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshRotation
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionVector                             StartRotation;                                              // 0x0030   (0x0048)  
	bool                                               bInheritParent : 1;                                         // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleMeshRotation_Seeded
/// Size: 0x00A0 (160 bytes) (0x000080 - 0x0000A0) align n/a MaxSize: 0x00A0
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0080   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationRateBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleRotationRateBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align n/a MaxSize: 0x0078
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             StartRotationRate;                                          // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRate_Seeded
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0078   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateMultiplyLife
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align n/a MaxSize: 0x0078
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             LifeMultiplier;                                             // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleMeshRotationRateOverLife
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionVector                             RotRate;                                                    // 0x0030   (0x0048)  
	bool                                               bScaleRotRate : 1;                                          // 0x0078:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrbitBase
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UParticleModuleOrbitBase : public UParticleModule
{ 
public:
	bool                                               bUseEmitterTime : 1;                                        // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Struct /Script/Engine.OrbitOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FOrbitOptions
{ 
	bool                                               bProcessDuringSpawn : 1;                                    // 0x0000:0 (0x0001)  
	bool                                               bProcessDuringUpdate : 1;                                   // 0x0000:1 (0x0001)  
	bool                                               bUseEmitterTime : 1;                                        // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrbit
/// Size: 0x0130 (304 bytes) (0x000038 - 0x000130) align n/a MaxSize: 0x0130
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{ 
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                  // 0x0038   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	FRawDistributionVector                             OffsetAmount;                                               // 0x0040   (0x0048)  
	FOrbitOptions                                      OffsetOptions;                                              // 0x0088   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x008C   (0x0004)  MISSED
	FRawDistributionVector                             RotationAmount;                                             // 0x0090   (0x0048)  
	FOrbitOptions                                      RotationOptions;                                            // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x00DC   (0x0004)  MISSED
	FRawDistributionVector                             RotationRateAmount;                                         // 0x00E0   (0x0048)  
	FOrbitOptions                                      RotationRateOptions;                                        // 0x0128   (0x0004)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x012C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleOrientationBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleOrientationBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleOrientationAxisLock
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{ 
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleParameterBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleParameterBase : public UParticleModule
{ 
public:
};

/// Struct /Script/Engine.EmitterDynamicParameter
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FEmitterDynamicParameter
{ 
	FName                                              ParamName;                                                  // 0x0000   (0x0008)  
	bool                                               bUseEmitterTime : 1;                                        // 0x0008:0 (0x0001)  
	bool                                               bSpawnTimeOnly : 1;                                         // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	TEnumAsByte<EEmitterDynamicParameterValue>         ValueMethod;                                                // 0x000C   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	bool                                               bScaleVelocityByParamValue : 1;                             // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x7];                                       // 0x0011   (0x0007)  MISSED
	FRawDistributionFloat                              ParamValue;                                                 // 0x0018   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleParameterDynamic
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{ 
public:
	TArray<FEmitterDynamicParameter>                   DynamicParams;                                              // 0x0030   (0x0010)  
	int32_t                                            UpdateFlags;                                                // 0x0040   (0x0004)  
	bool                                               bUsesVelocity : 1;                                          // 0x0044:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0045   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleParameterDynamic_Seeded
/// Size: 0x0068 (104 bytes) (0x000048 - 0x000068) align n/a MaxSize: 0x0068
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0048   (0x0020)  
};

/// Class /Script/Engine.ParticleModulePivotOffset
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{ 
public:
	FVector2D                                          PivotOffset;                                                // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.ParticleBurst
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FParticleBurst
{ 
	int32_t                                            Count;                                                      // 0x0000   (0x0004)  
	int32_t                                            CountLow;                                                   // 0x0004   (0x0004)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleRequired
/// Size: 0x0140 (320 bytes) (0x000030 - 0x000140) align n/a MaxSize: 0x0140
class UParticleModuleRequired : public UParticleModule
{ 
public:
	class UMaterialInterface*                          Material;                                                   // 0x0030   (0x0008)  
	float                                              MinFacingCameraBlendDistance;                               // 0x0038   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x003C   (0x0004)  
	FVector                                            EmitterOrigin;                                              // 0x0040   (0x000C)  
	FRotator                                           EmitterRotation;                                            // 0x004C   (0x000C)  
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                            // 0x0058   (0x0001)  
	bool                                               bUseLocalSpace : 1;                                         // 0x0059:0 (0x0001)  
	bool                                               bKillOnDeactivate : 1;                                      // 0x0059:1 (0x0001)  
	bool                                               bKillOnCompleted : 1;                                       // 0x0059:2 (0x0001)  
	TEnumAsByte<EParticleSortMode>                     SortMode;                                                   // 0x005A   (0x0001)  
	bool                                               bUseLegacyEmitterTime : 1;                                  // 0x005B:0 (0x0001)  
	bool                                               bRemoveHMDRoll : 1;                                         // 0x005B:1 (0x0001)  
	bool                                               bEmitterDurationUseRange : 1;                               // 0x005B:2 (0x0001)  
	float                                              EmitterDuration;                                            // 0x005C   (0x0004)  
	FRawDistributionFloat                              SpawnRate;                                                  // 0x0060   (0x0030)  
	TArray<FParticleBurst>                             BurstList;                                                  // 0x0090   (0x0010)  
	float                                              EmitterDelay;                                               // 0x00A0   (0x0004)  
	float                                              EmitterDelayLow;                                            // 0x00A4   (0x0004)  
	bool                                               bDelayFirstLoopOnly : 1;                                    // 0x00A8:0 (0x0001)  
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                        // 0x00A9   (0x0001)  
	bool                                               bScaleUV : 1;                                               // 0x00AA:0 (0x0001)  
	bool                                               bEmitterDelayUseRange : 1;                                  // 0x00AA:1 (0x0001)  
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                        // 0x00AB   (0x0001)  
	bool                                               bOverrideSystemMacroUV : 1;                                 // 0x00AC:0 (0x0001)  
	bool                                               bUseMaxDrawCount : 1;                                       // 0x00AC:1 (0x0001)  
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                          // 0x00AD   (0x0001)  
	TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode;                                         // 0x00AE   (0x0001)  
	bool                                               bOrbitModuleAffectsVelocityAlignment : 1;                   // 0x00AF:0 (0x0001)  
	int32_t                                            SubImages_Horizontal;                                       // 0x00B0   (0x0004)  
	int32_t                                            SubImages_Vertical;                                         // 0x00B4   (0x0004)  
	float                                              RandomImageTime;                                            // 0x00B8   (0x0004)  
	int32_t                                            RandomImageChanges;                                         // 0x00BC   (0x0004)  
	FVector                                            MacroUVPosition;                                            // 0x00C0   (0x000C)  
	float                                              MacroUVRadius;                                              // 0x00CC   (0x0004)  
	EParticleUVFlipMode                                UVFlippingMode;                                             // 0x00D0   (0x0001)  
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                               // 0x00D1   (0x0001)  
	bool                                               bDurationRecalcEachLoop : 1;                                // 0x00D2:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x1];                                       // 0x00D3   (0x0001)  MISSED
	FVector                                            NormalsSphereCenter;                                        // 0x00D4   (0x000C)  
	float                                              AlphaThreshold;                                             // 0x00E0   (0x0004)  
	int32_t                                            EmitterLoops;                                               // 0x00E4   (0x0004)  
	class UTexture2D*                                  CutoutTexture;                                              // 0x00E8   (0x0008)  
	int32_t                                            MaxDrawCount;                                               // 0x00F0   (0x0004)  
	float                                              EmitterDurationLow;                                         // 0x00F4   (0x0004)  
	FVector                                            NormalsCylinderDirection;                                   // 0x00F8   (0x000C)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0104   (0x0004)  MISSED
	TArray<FName>                                      NamedMaterialOverrides;                                     // 0x0108   (0x0010)  
	unsigned char                                      UnknownData05_7[0x28];                                      // 0x0118   (0x0028)  MISSED
};

/// Class /Script/Engine.ParticleModuleRotation
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align n/a MaxSize: 0x0060
class UParticleModuleRotation : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionFloat                              StartRotation;                                              // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleRotation_Seeded
/// Size: 0x0080 (128 bytes) (0x000060 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0060   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationOverLifetime
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align n/a MaxSize: 0x0068
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{ 
public:
	FRawDistributionFloat                              RotationOverLife;                                           // 0x0030   (0x0030)  
	bool                                               Scale : 1;                                                  // 0x0060:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0061   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleRotationRate
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align n/a MaxSize: 0x0060
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionFloat                              StartRotationRate;                                          // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleRotationRate_Seeded
/// Size: 0x0080 (128 bytes) (0x000060 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0060   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleRotationRateMultiplyLife
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align n/a MaxSize: 0x0060
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{ 
public:
	FRawDistributionFloat                              LifeMultiplier;                                             // 0x0030   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleSizeBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleSizeBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleSize
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align n/a MaxSize: 0x0078
class UParticleModuleSize : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             StartSize;                                                  // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleSize_Seeded
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class UParticleModuleSize_Seeded : public UParticleModuleSize
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x0078   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleSizeMultiplyLife
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             LifeMultiplier;                                             // 0x0030   (0x0048)  
	bool                                               MultiplyX : 1;                                              // 0x0078:0 (0x0001)  
	bool                                               MultiplyY : 1;                                              // 0x0078:1 (0x0001)  
	bool                                               MultiplyZ : 1;                                              // 0x0078:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSizeScale
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{ 
public:
	FRawDistributionVector                             SizeScale;                                                  // 0x0030   (0x0048)  
	bool                                               EnableX : 1;                                                // 0x0078:0 (0x0001)  
	bool                                               EnableY : 1;                                                // 0x0078:1 (0x0001)  
	bool                                               EnableZ : 1;                                                // 0x0078:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0079   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSizeScaleBySpeed
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{ 
public:
	FVector2D                                          SpeedScale;                                                 // 0x0030   (0x0008)  
	FVector2D                                          MaxScale;                                                   // 0x0038   (0x0008)  
};

/// Class /Script/Engine.ParticleModuleSourceMovement
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align n/a MaxSize: 0x0078
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{ 
public:
	FRawDistributionVector                             SourceMovementScale;                                        // 0x0030   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleSpawnBase
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UParticleModuleSpawnBase : public UParticleModule
{ 
public:
	bool                                               bProcessSpawnRate : 1;                                      // 0x0030:0 (0x0001)  
	bool                                               bProcessBurstList : 1;                                      // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSpawn
/// Size: 0x00E8 (232 bytes) (0x000038 - 0x0000E8) align n/a MaxSize: 0x00E8
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{ 
public:
	FRawDistributionFloat                              Rate;                                                       // 0x0038   (0x0030)  
	FRawDistributionFloat                              RateScale;                                                  // 0x0068   (0x0030)  
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                        // 0x0098   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	TArray<FParticleBurst>                             BurstList;                                                  // 0x00A0   (0x0010)  
	FRawDistributionFloat                              BurstScale;                                                 // 0x00B0   (0x0030)  
	bool                                               bApplyGlobalSpawnRateScale : 1;                             // 0x00E0:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00E1   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSpawnPerUnit
/// Size: 0x0078 (120 bytes) (0x000038 - 0x000078) align n/a MaxSize: 0x0078
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{ 
public:
	float                                              UnitScalar;                                                 // 0x0038   (0x0004)  
	float                                              MovementTolerance;                                          // 0x003C   (0x0004)  
	FRawDistributionFloat                              SpawnPerUnit;                                               // 0x0040   (0x0030)  
	float                                              MaxFrameDistance;                                           // 0x0070   (0x0004)  
	bool                                               bIgnoreSpawnRateWhenMoving : 1;                             // 0x0074:0 (0x0001)  
	bool                                               bIgnoreMovementAlongX : 1;                                  // 0x0074:1 (0x0001)  
	bool                                               bIgnoreMovementAlongY : 1;                                  // 0x0074:2 (0x0001)  
	bool                                               bIgnoreMovementAlongZ : 1;                                  // 0x0074:3 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0075   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleSubUVBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleSubUVBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleSubUV
/// Size: 0x0070 (112 bytes) (0x000030 - 0x000070) align n/a MaxSize: 0x0070
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{ 
public:
	class USubUVAnimation*                             Animation;                                                  // 0x0030   (0x0008)  
	FRawDistributionFloat                              SubImageIndex;                                              // 0x0038   (0x0030)  
	bool                                               bUseRealTime : 1;                                           // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleSubUVMovie
/// Size: 0x00B0 (176 bytes) (0x000070 - 0x0000B0) align n/a MaxSize: 0x00B0
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{ 
public:
	bool                                               bUseEmitterTime : 1;                                        // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0071   (0x0007)  MISSED
	FRawDistributionFloat                              FrameRate;                                                  // 0x0078   (0x0030)  
	int32_t                                            StartingFrame;                                              // 0x00A8   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTrailBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleTrailBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleTrailSource
/// Size: 0x0090 (144 bytes) (0x000030 - 0x000090) align n/a MaxSize: 0x0090
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{ 
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                               // 0x0030   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	FName                                              SourceName;                                                 // 0x0034   (0x0008)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x003C   (0x0004)  MISSED
	FRawDistributionFloat                              SourceStrength;                                             // 0x0040   (0x0030)  
	bool                                               bLockSourceStength : 1;                                     // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0071   (0x0003)  MISSED
	int32_t                                            SourceOffsetCount;                                          // 0x0074   (0x0004)  
	TArray<FVector>                                    SourceOffsetDefaults;                                       // 0x0078   (0x0010)  
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                            // 0x0088   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	bool                                               bInheritRotation : 1;                                       // 0x008C:0 (0x0001)  
	unsigned char                                      UnknownData09_7[0x3];                                       // 0x008D   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleTypeDataBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleTypeDataAnimTrail
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{ 
public:
	bool                                               bDeadTrailsOnDeactivate : 1;                                // 0x0030:0 (0x0001)  
	bool                                               bEnablePreviousTangentRecalculation : 1;                    // 0x0030:1 (0x0001)  
	bool                                               bTangentRecalculationEveryFrame : 1;                        // 0x0030:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              TilingDistance;                                             // 0x0034   (0x0004)  
	float                                              DistanceTessellationStepSize;                               // 0x0038   (0x0004)  
	float                                              TangentTessellationStepSize;                                // 0x003C   (0x0004)  
	float                                              WidthTessellationStepSize;                                  // 0x0040   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataBeam2
/// Size: 0x0150 (336 bytes) (0x000030 - 0x000150) align n/a MaxSize: 0x0150
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{ 
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                                 // 0x0030   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            TextureTile;                                                // 0x0034   (0x0004)  
	float                                              TextureTileDistance;                                        // 0x0038   (0x0004)  
	int32_t                                            Sheets;                                                     // 0x003C   (0x0004)  
	int32_t                                            MaxBeamCount;                                               // 0x0040   (0x0004)  
	float                                              Speed;                                                      // 0x0044   (0x0004)  
	int32_t                                            InterpolationPoints;                                        // 0x0048   (0x0004)  
	bool                                               bAlwaysOn : 1;                                              // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x004D   (0x0003)  MISSED
	int32_t                                            UpVectorStepSize;                                           // 0x0050   (0x0004)  
	FName                                              BranchParentName;                                           // 0x0054   (0x0008)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FRawDistributionFloat                              Distance;                                                   // 0x0060   (0x0030)  
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	FRawDistributionFloat                              TaperFactor;                                                // 0x0098   (0x0030)  
	FRawDistributionFloat                              TaperScale;                                                 // 0x00C8   (0x0030)  
	bool                                               RenderGeometry : 1;                                         // 0x00F8:0 (0x0001)  
	bool                                               RenderDirectLine : 1;                                       // 0x00F8:1 (0x0001)  
	bool                                               RenderLines : 1;                                            // 0x00F8:2 (0x0001)  
	bool                                               RenderTessellation : 1;                                     // 0x00F8:3 (0x0001)  
	unsigned char                                      UnknownData09_7[0x57];                                      // 0x00F9   (0x0057)  MISSED
};

/// Struct /Script/Engine.GPUSpriteLocalVectorFieldInfo
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FGPUSpriteLocalVectorFieldInfo
{ 
	class UVectorField*                                Field;                                                      // 0x0000   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
	FRotator                                           MinInitialRotation;                                         // 0x0040   (0x000C)  
	FRotator                                           MaxInitialRotation;                                         // 0x004C   (0x000C)  
	FRotator                                           RotationRate;                                               // 0x0058   (0x000C)  
	float                                              Intensity;                                                  // 0x0064   (0x0004)  
	float                                              Tightness;                                                  // 0x0068   (0x0004)  
	bool                                               bIgnoreComponentTransform : 1;                              // 0x006C:0 (0x0001)  
	bool                                               bTileX : 1;                                                 // 0x006C:1 (0x0001)  
	bool                                               bTileY : 1;                                                 // 0x006C:2 (0x0001)  
	bool                                               bTileZ : 1;                                                 // 0x006C:3 (0x0001)  
	bool                                               bUseFixDT : 1;                                              // 0x006C:4 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x006D   (0x0003)  MISSED
};

/// Struct /Script/Engine.FloatDistribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FFloatDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.GPUSpriteEmitterInfo
/// Size: 0x0280 (640 bytes) (0x000000 - 0x000280) align n/a MaxSize: 0x0280
struct FGPUSpriteEmitterInfo
{ 
	class UParticleModuleRequired*                     RequiredModule;                                             // 0x0000   (0x0008)  
	class UParticleModuleSpawn*                        SpawnModule;                                                // 0x0008   (0x0008)  
	class UParticleModuleSpawnPerUnit*                 SpawnPerUnitModule;                                         // 0x0010   (0x0008)  
	TArray<class UParticleModule*>                     SpawnModules;                                               // 0x0018   (0x0010)  
	unsigned char                                      UnknownData06_6[0x8];                                       // 0x0028   (0x0008)  MISSED
	FGPUSpriteLocalVectorFieldInfo                     LocalVectorField;                                           // 0x0030   (0x0070)  
	FFloatDistribution                                 VectorFieldScale;                                           // 0x00A0   (0x0020)  
	FFloatDistribution                                 DragCoefficient;                                            // 0x00C0   (0x0020)  
	FFloatDistribution                                 PointAttractorStrength;                                     // 0x00E0   (0x0020)  
	FFloatDistribution                                 Resilience;                                                 // 0x0100   (0x0020)  
	FVector                                            ConstantAcceleration;                                       // 0x0120   (0x000C)  
	FVector                                            PointAttractorPosition;                                     // 0x012C   (0x000C)  
	float                                              PointAttractorRadiusSq;                                     // 0x0138   (0x0004)  
	FVector                                            OrbitOffsetBase;                                            // 0x013C   (0x000C)  
	FVector                                            OrbitOffsetRange;                                           // 0x0148   (0x000C)  
	FVector2D                                          InvMaxSize;                                                 // 0x0154   (0x0008)  
	float                                              InvRotationRateScale;                                       // 0x015C   (0x0004)  
	float                                              MaxLifetime;                                                // 0x0160   (0x0004)  
	int32_t                                            MaxParticleCount;                                           // 0x0164   (0x0004)  
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                            // 0x0168   (0x0001)  
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlag;                                               // 0x0169   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x016A   (0x0002)  MISSED
	bool                                               bEnableCollision : 1;                                       // 0x016C:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x016D   (0x0003)  MISSED
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                              // 0x0170   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0171   (0x0003)  MISSED
	bool                                               bRemoveHMDRoll : 1;                                         // 0x0174:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0175   (0x0003)  MISSED
	float                                              MinFacingCameraBlendDistance;                               // 0x0178   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x017C   (0x0004)  
	FRawDistributionVector                             DynamicColor;                                               // 0x0180   (0x0048)  
	FRawDistributionFloat                              DynamicAlpha;                                               // 0x01C8   (0x0030)  
	FRawDistributionVector                             DynamicColorScale;                                          // 0x01F8   (0x0048)  
	FRawDistributionFloat                              DynamicAlphaScale;                                          // 0x0240   (0x0030)  
	unsigned char                                      UnknownData11_7[0x10];                                      // 0x0270   (0x0010)  MISSED
};

/// Struct /Script/Engine.GPUSpriteResourceData
/// Size: 0x0160 (352 bytes) (0x000000 - 0x000160) align n/a MaxSize: 0x0160
struct FGPUSpriteResourceData
{ 
	TArray<FColor>                                     QuantizedColorSamples;                                      // 0x0000   (0x0010)  
	TArray<FColor>                                     QuantizedMiscSamples;                                       // 0x0010   (0x0010)  
	TArray<FColor>                                     QuantizedSimulationAttrSamples;                             // 0x0020   (0x0010)  
	FVector4                                           ColorScale;                                                 // 0x0030   (0x0010)  
	FVector4                                           ColorBias;                                                  // 0x0040   (0x0010)  
	FVector4                                           MiscScale;                                                  // 0x0050   (0x0010)  
	FVector4                                           MiscBias;                                                   // 0x0060   (0x0010)  
	FVector4                                           SimulationAttrCurveScale;                                   // 0x0070   (0x0010)  
	FVector4                                           SimulationAttrCurveBias;                                    // 0x0080   (0x0010)  
	FVector4                                           SubImageSize;                                               // 0x0090   (0x0010)  
	FVector4                                           SizeBySpeed;                                                // 0x00A0   (0x0010)  
	FVector                                            ConstantAcceleration;                                       // 0x00B0   (0x000C)  
	FVector                                            OrbitOffsetBase;                                            // 0x00BC   (0x000C)  
	FVector                                            OrbitOffsetRange;                                           // 0x00C8   (0x000C)  
	FVector                                            OrbitFrequencyBase;                                         // 0x00D4   (0x000C)  
	FVector                                            OrbitFrequencyRange;                                        // 0x00E0   (0x000C)  
	FVector                                            OrbitPhaseBase;                                             // 0x00EC   (0x000C)  
	FVector                                            OrbitPhaseRange;                                            // 0x00F8   (0x000C)  
	float                                              GlobalVectorFieldScale;                                     // 0x0104   (0x0004)  
	float                                              GlobalVectorFieldTightness;                                 // 0x0108   (0x0004)  
	float                                              PerParticleVectorFieldScale;                                // 0x010C   (0x0004)  
	float                                              PerParticleVectorFieldBias;                                 // 0x0110   (0x0004)  
	float                                              DragCoefficientScale;                                       // 0x0114   (0x0004)  
	float                                              DragCoefficientBias;                                        // 0x0118   (0x0004)  
	float                                              ResilienceScale;                                            // 0x011C   (0x0004)  
	float                                              ResilienceBias;                                             // 0x0120   (0x0004)  
	float                                              CollisionRadiusScale;                                       // 0x0124   (0x0004)  
	float                                              CollisionRadiusBias;                                        // 0x0128   (0x0004)  
	float                                              CollisionTimeBias;                                          // 0x012C   (0x0004)  
	float                                              CollisionRandomSpread;                                      // 0x0130   (0x0004)  
	float                                              CollisionRandomDistribution;                                // 0x0134   (0x0004)  
	float                                              OneMinusFriction;                                           // 0x0138   (0x0004)  
	float                                              RotationRateScale;                                          // 0x013C   (0x0004)  
	float                                              CameraMotionBlurAmount;                                     // 0x0140   (0x0004)  
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                            // 0x0144   (0x0001)  
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlag;                                               // 0x0145   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0146   (0x0002)  MISSED
	FVector2D                                          PivotOffset;                                                // 0x0148   (0x0008)  
	bool                                               bRemoveHMDRoll : 1;                                         // 0x0150:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0151   (0x0003)  MISSED
	float                                              MinFacingCameraBlendDistance;                               // 0x0154   (0x0004)  
	float                                              MaxFacingCameraBlendDistance;                               // 0x0158   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x015C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataGpu
/// Size: 0x0420 (1056 bytes) (0x000030 - 0x000420) align n/a MaxSize: 0x0420
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{ 
public:
	FGPUSpriteEmitterInfo                              EmitterInfo;                                                // 0x0030   (0x0280)  
	FGPUSpriteResourceData                             ResourceData;                                               // 0x02B0   (0x0160)  
	float                                              CameraMotionBlurAmount;                                     // 0x0410   (0x0004)  
	bool                                               bClearExistingParticlesOnInit : 1;                          // 0x0414:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x0415   (0x000B)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataMesh
/// Size: 0x0098 (152 bytes) (0x000030 - 0x000098) align n/a MaxSize: 0x0098
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{ 
public:
	class UStaticMesh*                                 Mesh;                                                       // 0x0030   (0x0008)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0038   (0x0008)  MISSED
	float                                              LODSizeScale;                                               // 0x0040   (0x0004)  
	bool                                               bUseStaticMeshLODs : 1;                                     // 0x0044:0 (0x0001)  
	bool                                               CastShadows : 1;                                            // 0x0044:1 (0x0001)  
	bool                                               DoCollisions : 1;                                           // 0x0044:2 (0x0001)  
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                              // 0x0045   (0x0001)  
	bool                                               bOverrideMaterial : 1;                                      // 0x0046:0 (0x0001)  
	bool                                               bOverrideDefaultMotionBlurSettings : 1;                     // 0x0046:1 (0x0001)  
	bool                                               bEnableMotionBlur : 1;                                      // 0x0046:2 (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x0047   (0x0001)  MISSED
	FRawDistributionVector                             RollPitchYawRange;                                          // 0x0048   (0x0048)  
	TEnumAsByte<EParticleAxisLock>                     AxisLockOption;                                             // 0x0090   (0x0001)  
	bool                                               bCameraFacing : 1;                                          // 0x0091:0 (0x0001)  
	TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption;                                   // 0x0092   (0x0001)  
	TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption;                                         // 0x0093   (0x0001)  
	bool                                               bApplyParticleRotationAsSpin : 1;                           // 0x0094:0 (0x0001)  
	bool                                               bFaceCameraDirectionRatherThanPosition : 1;                 // 0x0094:1 (0x0001)  
	bool                                               bCollisionsConsiderPartilceSize : 1;                        // 0x0094:2 (0x0001)  
	unsigned char                                      UnknownData05_7[0x3];                                       // 0x0095   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleTypeDataRibbon
/// Size: 0x0060 (96 bytes) (0x000030 - 0x000060) align n/a MaxSize: 0x0060
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{ 
public:
	int32_t                                            MaxTessellationBetweenParticles;                            // 0x0030   (0x0004)  
	int32_t                                            SheetsPerTrail;                                             // 0x0034   (0x0004)  
	int32_t                                            MaxTrailCount;                                              // 0x0038   (0x0004)  
	int32_t                                            MaxParticleInTrailCount;                                    // 0x003C   (0x0004)  
	bool                                               bDeadTrailsOnDeactivate : 1;                                // 0x0040:0 (0x0001)  
	bool                                               bDeadTrailsOnSourceLoss : 1;                                // 0x0040:1 (0x0001)  
	bool                                               bClipSourceSegement : 1;                                    // 0x0040:2 (0x0001)  
	bool                                               bEnablePreviousTangentRecalculation : 1;                    // 0x0040:3 (0x0001)  
	bool                                               bTangentRecalculationEveryFrame : 1;                        // 0x0040:4 (0x0001)  
	bool                                               bSpawnInitialParticle : 1;                                  // 0x0040:5 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis;                                                 // 0x0044   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              TangentSpawningScalar;                                      // 0x0048   (0x0004)  
	bool                                               bRenderGeometry : 1;                                        // 0x004C:0 (0x0001)  
	bool                                               bRenderSpawnPoints : 1;                                     // 0x004C:1 (0x0001)  
	bool                                               bRenderTangents : 1;                                        // 0x004C:2 (0x0001)  
	bool                                               bRenderTessellation : 1;                                    // 0x004C:3 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              TilingDistance;                                             // 0x0050   (0x0004)  
	float                                              DistanceTessellationStepSize;                               // 0x0054   (0x0004)  
	bool                                               bEnableTangentDiffInterpScale : 1;                          // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              TangentTessellationScalar;                                  // 0x005C   (0x0004)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldBase
/// Size: 0x0030 (48 bytes) (0x000030 - 0x000030) align n/a MaxSize: 0x0030
class UParticleModuleVectorFieldBase : public UParticleModule
{ 
public:
};

/// Class /Script/Engine.ParticleModuleVectorFieldGlobal
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{ 
public:
	bool                                               bOverrideGlobalVectorFieldTightness : 1;                    // 0x0030:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              GlobalVectorFieldScale;                                     // 0x0034   (0x0004)  
	float                                              GlobalVectorFieldTightness;                                 // 0x0038   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldLocal
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align n/a MaxSize: 0x0068
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{ 
public:
	class UVectorField*                                VectorField;                                                // 0x0030   (0x0008)  
	FVector                                            RelativeTranslation;                                        // 0x0038   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0044   (0x000C)  
	FVector                                            RelativeScale3D;                                            // 0x0050   (0x000C)  
	float                                              Intensity;                                                  // 0x005C   (0x0004)  
	float                                              Tightness;                                                  // 0x0060   (0x0004)  
	bool                                               bIgnoreComponentTransform : 1;                              // 0x0064:0 (0x0001)  
	bool                                               bTileX : 1;                                                 // 0x0064:1 (0x0001)  
	bool                                               bTileY : 1;                                                 // 0x0064:2 (0x0001)  
	bool                                               bTileZ : 1;                                                 // 0x0064:3 (0x0001)  
	bool                                               bUseFixDT : 1;                                              // 0x0064:4 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0065   (0x0003)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotation
/// Size: 0x0048 (72 bytes) (0x000030 - 0x000048) align n/a MaxSize: 0x0048
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{ 
public:
	FVector                                            MinInitialRotation;                                         // 0x0030   (0x000C)  
	FVector                                            MaxInitialRotation;                                         // 0x003C   (0x000C)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldRotationRate
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{ 
public:
	FVector                                            RotationRate;                                               // 0x0030   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVectorFieldScale
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align n/a MaxSize: 0x0068
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{ 
public:
	class UDistributionFloat*                          VectorFieldScale;                                           // 0x0030   (0x0008)  
	FRawDistributionFloat                              VectorFieldScaleRaw;                                        // 0x0038   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVectorFieldScaleOverLife
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align n/a MaxSize: 0x0068
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{ 
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                   // 0x0030   (0x0008)  
	FRawDistributionFloat                              VectorFieldScaleOverLifeRaw;                                // 0x0038   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVelocityBase
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UParticleModuleVelocityBase : public UParticleModule
{ 
public:
	bool                                               bInWorldSpace : 1;                                          // 0x0030:0 (0x0001)  
	bool                                               bApplyOwnerScale : 1;                                       // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleModuleVelocity
/// Size: 0x00B0 (176 bytes) (0x000038 - 0x0000B0) align n/a MaxSize: 0x00B0
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             StartVelocity;                                              // 0x0038   (0x0048)  
	FRawDistributionFloat                              StartVelocityRadial;                                        // 0x0080   (0x0030)  
};

/// Class /Script/Engine.ParticleModuleVelocity_Seeded
/// Size: 0x00D0 (208 bytes) (0x0000B0 - 0x0000D0) align n/a MaxSize: 0x00D0
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{ 
public:
	FParticleRandomSeedInfo                            RandomSeedInfo;                                             // 0x00B0   (0x0020)  
};

/// Class /Script/Engine.ParticleModuleVelocityCone
/// Size: 0x00A8 (168 bytes) (0x000038 - 0x0000A8) align n/a MaxSize: 0x00A8
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionFloat                              angle;                                                      // 0x0038   (0x0030)  
	FRawDistributionFloat                              Velocity;                                                   // 0x0068   (0x0030)  
	FVector                                            Direction;                                                  // 0x0098   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00A4   (0x0004)  MISSED
};

/// Class /Script/Engine.ParticleModuleVelocityInheritParent
/// Size: 0x0080 (128 bytes) (0x000038 - 0x000080) align n/a MaxSize: 0x0080
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             Scale;                                                      // 0x0038   (0x0048)  
};

/// Class /Script/Engine.ParticleModuleVelocityOverLifetime
/// Size: 0x0088 (136 bytes) (0x000038 - 0x000088) align n/a MaxSize: 0x0088
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{ 
public:
	FRawDistributionVector                             VelOverLife;                                                // 0x0038   (0x0048)  
	bool                                               Absolute : 1;                                               // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.ParticleSpriteEmitter
/// Size: 0x01B8 (440 bytes) (0x0001B8 - 0x0001B8) align n/a MaxSize: 0x01B8
class UParticleSpriteEmitter : public UParticleEmitter
{ 
public:
};

/// Struct /Script/Engine.ParticleSystemLOD
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FParticleSystemLOD
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.LODSoloTrack
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FLODSoloTrack
{ 
	TArray<char>                                       SoloEnableSetting;                                          // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.NamedEmitterMaterial
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FNamedEmitterMaterial
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0008   (0x0008)  
};

/// Class /Script/Engine.ParticleSystem
/// Size: 0x0110 (272 bytes) (0x000030 - 0x000110) align n/a MaxSize: 0x0110
class UParticleSystem : public UFXSystemAsset
{ 
public:
	float                                              UpdateTime_FPS;                                             // 0x0030   (0x0004)  
	float                                              UpdateTime_Delta;                                           // 0x0034   (0x0004)  
	float                                              WarmupTime;                                                 // 0x0038   (0x0004)  
	float                                              WarmupTickRate;                                             // 0x003C   (0x0004)  
	TArray<class UParticleEmitter*>                    Emitters;                                                   // 0x0040   (0x0010)  
	class UParticleSystemComponent*                    PreviewComponent;                                           // 0x0050   (0x0008)  
	class UInterpCurveEdSetup*                         CurveEdSetup;                                               // 0x0058   (0x0008)  
	float                                              LODDistanceCheckTime;                                       // 0x0060   (0x0004)  
	float                                              MacroUVRadius;                                              // 0x0064   (0x0004)  
	TArray<float>                                      LODDistances;                                               // 0x0068   (0x0010)  
	TArray<FParticleSystemLOD>                         LODSettings;                                                // 0x0078   (0x0010)  
	FBox                                               FixedRelativeBoundingBox;                                   // 0x0088   (0x001C)  
	float                                              SecondsBeforeInactive;                                      // 0x00A4   (0x0004)  
	float                                              Delay;                                                      // 0x00A8   (0x0004)  
	float                                              DelayLow;                                                   // 0x00AC   (0x0004)  
	bool                                               bOrientZAxisTowardCamera : 1;                               // 0x00B0:0 (0x0001)  
	bool                                               bUseFixedRelativeBoundingBox : 1;                           // 0x00B0:1 (0x0001)  
	bool                                               bShouldResetPeakCounts : 1;                                 // 0x00B0:2 (0x0001)  
	bool                                               bHasPhysics : 1;                                            // 0x00B0:3 (0x0001)  
	bool                                               bUseRealtimeThumbnail : 1;                                  // 0x00B0:4 (0x0001)  
	bool                                               ThumbnailImageOutOfDate : 1;                                // 0x00B0:5 (0x0001)  
	unsigned char                                      UnknownBit04 : 1;                                           // 0x00B0:6 (0x0001)  MISSED
	unsigned char                                      UnknownBit05 : 1;                                           // 0x00B0:7 (0x0001)  MISSED
	bool                                               bUseDelayRange : 1;                                         // 0x00B1:0 (0x0001)  
	bool                                               bAllowManagedTicking : 1;                                   // 0x00B1:1 (0x0001)  
	bool                                               bAutoDeactivate : 1;                                        // 0x00B1:2 (0x0001)  
	bool                                               bRegenerateLODDuplicate : 1;                                // 0x00B1:3 (0x0001)  
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                           // 0x00B2   (0x0001)  
	TEnumAsByte<ParticleSystemLODMethod>               LODMethod;                                                  // 0x00B3   (0x0001)  
	EParticleSystemInsignificanceReaction              InsignificantReaction;                                      // 0x00B4   (0x0001)  
	TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod;                                      // 0x00B5   (0x0001)  
	unsigned char                                      UnknownData06_6[0x1];                                       // 0x00B6   (0x0001)  MISSED
	EParticleSignificanceLevel                         MaxSignificanceLevel;                                       // 0x00B7   (0x0001)  
	uint32_t                                           MinTimeBetweenTicks;                                        // 0x00B8   (0x0004)  
	float                                              InsignificanceDelay;                                        // 0x00BC   (0x0004)  
	FVector                                            MacroUVPosition;                                            // 0x00C0   (0x000C)  
	FBox                                               CustomOcclusionBounds;                                      // 0x00CC   (0x001C)  
	TArray<FLODSoloTrack>                              SoloTracking;                                               // 0x00E8   (0x0010)  
	TArray<FNamedEmitterMaterial>                      NamedMaterialSlots;                                         // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData07_7[0x8];                                       // 0x0108   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.ParticleSystem.ContainsEmitterType
	constexpr static const FunctionPointer<UParticleSystem, bool, const UClass*> ContainsEmitterType = { 0x48f28a0, 0 }; 
};

/// Class /Script/Engine.ParticleSystemReplay
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UParticleSystemReplay : public UObject
{ 
public:
	int32_t                                            ClipIDNumber;                                               // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x002C   (0x0014)  MISSED
};

/// Class /Script/Engine.PathFollowingAgentInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UPathFollowingAgentInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.PawnNoiseEmitterComponent
/// Size: 0x00E8 (232 bytes) (0x0000C0 - 0x0000E8) align n/a MaxSize: 0x00E8
class UPawnNoiseEmitterComponent : public UActorComponent
{ 
public:
	bool                                               bAIPerceptionSystemCompatibilityMode : 1;                   // 0x00C0:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00C1   (0x0003)  MISSED
	FVector                                            LastRemoteNoisePosition;                                    // 0x00C4   (0x000C)  
	float                                              NoiseLifetime;                                              // 0x00D0   (0x0004)  
	float                                              LastRemoteNoiseVolume;                                      // 0x00D4   (0x0004)  
	float                                              LastRemoteNoiseTime;                                        // 0x00D8   (0x0004)  
	float                                              LastLocalNoiseVolume;                                       // 0x00DC   (0x0004)  
	float                                              LastLocalNoiseTime;                                         // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00E4   (0x0004)  MISSED

	/// Functions
	// Function /Script/Engine.PawnNoiseEmitterComponent.MakeNoise
	constexpr static const FunctionPointer<UPawnNoiseEmitterComponent, void, const AActor*, const float, const FVector&> MakeNoise = { 0x48fb240, 0 }; 
};

/// Class /Script/Engine.PhysicalAnimationComponent
/// Size: 0x0100 (256 bytes) (0x0000C0 - 0x000100) align n/a MaxSize: 0x0100
class UPhysicalAnimationComponent : public UActorComponent
{ 
public:
	float                                              StrengthMultiplyer;                                         // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x00C4   (0x0004)  MISSED
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x00C8   (0x0008)  
	unsigned char                                      UnknownData03_7[0x30];                                      // 0x00D0   (0x0030)  MISSED

	/// Functions
	// Function /Script/Engine.PhysicalAnimationComponent.SetStrengthMultiplyer
	constexpr static const FunctionPointer<UPhysicalAnimationComponent, void, const float> SetStrengthMultiplyer = { 0x48fc390, 0 }; 
	// Function /Script/Engine.PhysicalAnimationComponent.SetSkeletalMeshComponent
	constexpr static const FunctionPointer<UPhysicalAnimationComponent, void, const USkeletalMeshComponent*> SetSkeletalMeshComponent = { 0x48fc920, 1 }; 
	// Function /Script/Engine.PhysicalAnimationComponent.GetBodyTargetTransform
	constexpr static const FunctionPointer<UPhysicalAnimationComponent, FTransform, const FName> GetBodyTargetTransform = { 0x48fbf70, 2 }; 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettingsBelow
	constexpr static const FunctionPointer<UPhysicalAnimationComponent, void, const FName, const FPhysicalAnimationData&, const bool> ApplyPhysicalAnimationSettingsBelow = { 0x48fc4a0, 3 }; 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationSettings
	constexpr static const FunctionPointer<UPhysicalAnimationComponent, void, const FName, const FPhysicalAnimationData&> ApplyPhysicalAnimationSettings = { 0x48fc750, 4 }; 
	// Function /Script/Engine.PhysicalAnimationComponent.ApplyPhysicalAnimationProfileBelow
	constexpr static const FunctionPointer<UPhysicalAnimationComponent, void, const FName, const FName, const bool, const bool> ApplyPhysicalAnimationProfileBelow = { 0x48fc080, 5 }; 
};

/// Class /Script/Engine.PhysicalMaterialMask
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UPhysicalMaterialMask : public UObject
{ 
public:
	int32_t                                            UVChannelIndex;                                             // 0x0028   (0x0004)  
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x002C   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x002D   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x002E   (0x0002)  MISSED
};

/// Struct /Script/Engine.SolverIterations
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FSolverIterations
{ 
	float                                              FixedTimeStep;                                              // 0x0000   (0x0004)  
	int32_t                                            SolverIterations;                                           // 0x0004   (0x0004)  
	int32_t                                            JointIterations;                                            // 0x0008   (0x0004)  
	int32_t                                            CollisionIterations;                                        // 0x000C   (0x0004)  
	int32_t                                            SolverPushOutIterations;                                    // 0x0010   (0x0004)  
	int32_t                                            JointPushOutIterations;                                     // 0x0014   (0x0004)  
	int32_t                                            CollisionPushOutIterations;                                 // 0x0018   (0x0004)  
};

/// Class /Script/Engine.PhysicsAsset
/// Size: 0x0138 (312 bytes) (0x000028 - 0x000138) align n/a MaxSize: 0x0138
class UPhysicsAsset : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	TArray<int32_t>                                    BoundsBodies;                                               // 0x0030   (0x0010)  
	TArray<class USkeletalBodySetup*>                  SkeletalBodySetups;                                         // 0x0040   (0x0010)  
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                            // 0x0050   (0x0010)  
	FSolverIterations                                  SolverIterations;                                           // 0x0060   (0x001C)  
	bool                                               bNotForDedicatedServer : 1;                                 // 0x007C:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0xA3];                                      // 0x007D   (0x00A3)  MISSED
	class UThumbnailInfo*                              ThumbnailInfo;                                              // 0x0120   (0x0008)  
	TArray<class UBodySetup*>                          BodySetup;                                                  // 0x0128   (0x0010)  
};

/// Struct /Script/Engine.PhysicalAnimationData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FPhysicalAnimationData
{ 
	FName                                              BodyName;                                                   // 0x0000   (0x0008)  
	bool                                               bIsLocalSimulation : 1;                                     // 0x0008:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	float                                              OrientationStrength;                                        // 0x000C   (0x0004)  
	float                                              AngularVelocityStrength;                                    // 0x0010   (0x0004)  
	float                                              PositionStrength;                                           // 0x0014   (0x0004)  
	float                                              VelocityStrength;                                           // 0x0018   (0x0004)  
	float                                              MaxLinearForce;                                             // 0x001C   (0x0004)  
	float                                              MaxAngularForce;                                            // 0x0020   (0x0004)  
};

/// Struct /Script/Engine.PhysicalAnimationProfile
/// Size: 0x002C (44 bytes) (0x000000 - 0x00002C) align n/a MaxSize: 0x002C
struct FPhysicalAnimationProfile
{ 
	FName                                              ProfileName;                                                // 0x0000   (0x0008)  
	FPhysicalAnimationData                             PhysicalAnimationData;                                      // 0x0008   (0x0024)  
};

/// Class /Script/Engine.SkeletalBodySetup
/// Size: 0x0328 (808 bytes) (0x000310 - 0x000328) align n/a MaxSize: 0x0328
class USkeletalBodySetup : public UBodySetup
{ 
public:
	bool                                               bSkipScaleFromAnimation;                                    // 0x0310   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0311   (0x0007)  MISSED
	TArray<FPhysicalAnimationProfile>                  PhysicalAnimationData;                                      // 0x0318   (0x0010)  
};

/// Class /Script/Engine.PhysicsCollisionHandler
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UPhysicsCollisionHandler : public UObject
{ 
public:
	float                                              ImpactThreshold;                                            // 0x0028   (0x0004)  
	float                                              ImpactReFireDelay;                                          // 0x002C   (0x0004)  
	class USoundBase*                                  DefaultImpactSound;                                         // 0x0030   (0x0008)  
	float                                              LastImpactSoundTime;                                        // 0x0038   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x003C   (0x0004)  MISSED
};

/// Class /Script/Engine.RigidBodyBase
/// Size: 0x02C8 (712 bytes) (0x0002C8 - 0x0002C8) align n/a MaxSize: 0x02C8
class ARigidBodyBase : public AActor
{ 
public:
};

/// Class /Script/Engine.PhysicsConstraintActor
/// Size: 0x02E8 (744 bytes) (0x0002C8 - 0x0002E8) align n/a MaxSize: 0x02E8
class APhysicsConstraintActor : public ARigidBodyBase
{ 
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                             // 0x02C8   (0x0008)  
	class AActor*                                      ConstraintActor1;                                           // 0x02D0   (0x0008)  
	class AActor*                                      ConstraintActor2;                                           // 0x02D8   (0x0008)  
	bool                                               bDisableCollision : 1;                                      // 0x02E0:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02E1   (0x0007)  MISSED
};

/// Struct /Script/Engine.ConstrainComponentPropName
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FConstrainComponentPropName
{ 
	FName                                              ComponentName;                                              // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.ConstraintInstanceBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FConstraintInstanceBase
{ 
	unsigned char                                      UnknownData01_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.ConstraintBaseParams
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FConstraintBaseParams
{ 
	float                                              Stiffness;                                                  // 0x0000   (0x0004)  
	float                                              Damping;                                                    // 0x0004   (0x0004)  
	float                                              Restitution;                                                // 0x0008   (0x0004)  
	float                                              ContactDistance;                                            // 0x000C   (0x0004)  
	bool                                               bSoftConstraint : 1;                                        // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.LinearConstraint
/// Size: 0x001C (28 bytes) (0x000014 - 0x00001C) align n/a MaxSize: 0x001C
struct FLinearConstraint : FConstraintBaseParams
{ 
	float                                              Limit;                                                      // 0x0014   (0x0004)  
	TEnumAsByte<ELinearConstraintMotion>               XMotion;                                                    // 0x0018   (0x0001)  
	TEnumAsByte<ELinearConstraintMotion>               YMotion;                                                    // 0x0019   (0x0001)  
	TEnumAsByte<ELinearConstraintMotion>               ZMotion;                                                    // 0x001A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/Engine.ConeConstraint
/// Size: 0x0020 (32 bytes) (0x000014 - 0x000020) align n/a MaxSize: 0x0020
struct FConeConstraint : FConstraintBaseParams
{ 
	float                                              Swing1LimitDegrees;                                         // 0x0014   (0x0004)  
	float                                              Swing2LimitDegrees;                                         // 0x0018   (0x0004)  
	TEnumAsByte<EAngularConstraintMotion>              Swing1Motion;                                               // 0x001C   (0x0001)  
	TEnumAsByte<EAngularConstraintMotion>              Swing2Motion;                                               // 0x001D   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x001E   (0x0002)  MISSED
};

/// Struct /Script/Engine.TwistConstraint
/// Size: 0x001C (28 bytes) (0x000014 - 0x00001C) align n/a MaxSize: 0x001C
struct FTwistConstraint : FConstraintBaseParams
{ 
	float                                              TwistLimitDegrees;                                          // 0x0014   (0x0004)  
	TEnumAsByte<EAngularConstraintMotion>              TwistMotion;                                                // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintDrive
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FConstraintDrive
{ 
	float                                              Stiffness;                                                  // 0x0000   (0x0004)  
	float                                              Damping;                                                    // 0x0004   (0x0004)  
	float                                              MaxForce;                                                   // 0x0008   (0x0004)  
	bool                                               bEnablePositionDrive : 1;                                   // 0x000C:0 (0x0001)  
	bool                                               bEnableVelocityDrive : 1;                                   // 0x000C:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.LinearDriveConstraint
/// Size: 0x004C (76 bytes) (0x000000 - 0x00004C) align n/a MaxSize: 0x004C
struct FLinearDriveConstraint
{ 
	FVector                                            PositionTarget;                                             // 0x0000   (0x000C)  
	FVector                                            VelocityTarget;                                             // 0x000C   (0x000C)  
	FConstraintDrive                                   XDrive;                                                     // 0x0018   (0x0010)  
	FConstraintDrive                                   YDrive;                                                     // 0x0028   (0x0010)  
	FConstraintDrive                                   ZDrive;                                                     // 0x0038   (0x0010)  
	bool                                               bEnablePositionDrive : 1;                                   // 0x0048:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0049   (0x0003)  MISSED
};

/// Struct /Script/Engine.AngularDriveConstraint
/// Size: 0x004C (76 bytes) (0x000000 - 0x00004C) align n/a MaxSize: 0x004C
struct FAngularDriveConstraint
{ 
	FConstraintDrive                                   TwistDrive;                                                 // 0x0000   (0x0010)  
	FConstraintDrive                                   SwingDrive;                                                 // 0x0010   (0x0010)  
	FConstraintDrive                                   SlerpDrive;                                                 // 0x0020   (0x0010)  
	FRotator                                           OrientationTarget;                                          // 0x0030   (0x000C)  
	FVector                                            AngularVelocityTarget;                                      // 0x003C   (0x000C)  
	TEnumAsByte<EAngularDriveMode>                     AngularDriveMode;                                           // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0049   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintProfileProperties
/// Size: 0x010C (268 bytes) (0x000000 - 0x00010C) align n/a MaxSize: 0x010C
struct FConstraintProfileProperties
{ 
	float                                              ProjectionLinearTolerance;                                  // 0x0000   (0x0004)  
	float                                              ProjectionAngularTolerance;                                 // 0x0004   (0x0004)  
	float                                              ProjectionLinearAlpha;                                      // 0x0008   (0x0004)  
	float                                              ProjectionAngularAlpha;                                     // 0x000C   (0x0004)  
	float                                              LinearBreakThreshold;                                       // 0x0010   (0x0004)  
	float                                              AngularBreakThreshold;                                      // 0x0014   (0x0004)  
	FLinearConstraint                                  LinearLimit;                                                // 0x0018   (0x001C)  
	FConeConstraint                                    ConeLimit;                                                  // 0x0034   (0x0020)  
	FTwistConstraint                                   TwistLimit;                                                 // 0x0054   (0x001C)  
	FLinearDriveConstraint                             LinearDrive;                                                // 0x0070   (0x004C)  
	FAngularDriveConstraint                            AngularDrive;                                               // 0x00BC   (0x004C)  
	bool                                               bDisableCollision : 1;                                      // 0x0108:0 (0x0001)  
	bool                                               bParentDominates : 1;                                       // 0x0108:1 (0x0001)  
	bool                                               bEnableProjection : 1;                                      // 0x0108:2 (0x0001)  
	bool                                               bEnableSoftProjection : 1;                                  // 0x0108:3 (0x0001)  
	bool                                               bAngularBreakable : 1;                                      // 0x0108:4 (0x0001)  
	bool                                               bLinearBreakable : 1;                                       // 0x0108:5 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0109   (0x0003)  MISSED
};

/// Struct /Script/Engine.ConstraintInstance
/// Size: 0x01C0 (448 bytes) (0x000018 - 0x0001C0) align n/a MaxSize: 0x01C0
struct FConstraintInstance : FConstraintInstanceBase
{ 
	FName                                              JointName;                                                  // 0x0018   (0x0008)  
	FName                                              ConstraintBone1;                                            // 0x0020   (0x0008)  
	FName                                              ConstraintBone2;                                            // 0x0028   (0x0008)  
	FVector                                            Pos1;                                                       // 0x0030   (0x000C)  
	FVector                                            PriAxis1;                                                   // 0x003C   (0x000C)  
	FVector                                            SecAxis1;                                                   // 0x0048   (0x000C)  
	FVector                                            Pos2;                                                       // 0x0054   (0x000C)  
	FVector                                            PriAxis2;                                                   // 0x0060   (0x000C)  
	FVector                                            SecAxis2;                                                   // 0x006C   (0x000C)  
	FRotator                                           AngularRotationOffset;                                      // 0x0078   (0x000C)  
	bool                                               bScaleLinearLimits : 1;                                     // 0x0084:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x7];                                       // 0x0085   (0x0007)  MISSED
	FConstraintProfileProperties                       ProfileInstance;                                            // 0x008C   (0x010C)  
	unsigned char                                      UnknownData03_7[0x28];                                      // 0x0198   (0x0028)  MISSED
};

/// Class /Script/Engine.PhysicsConstraintComponent
/// Size: 0x0470 (1136 bytes) (0x000260 - 0x000470) align n/a MaxSize: 0x0470
class UPhysicsConstraintComponent : public USceneComponent
{ 
public:
	class AActor*                                      ConstraintActor1;                                           // 0x0260   (0x0008)  
	FConstrainComponentPropName                        ComponentName1;                                             // 0x0268   (0x0008)  
	class AActor*                                      ConstraintActor2;                                           // 0x0270   (0x0008)  
	FConstrainComponentPropName                        ComponentName2;                                             // 0x0278   (0x0008)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x0280   (0x0010)  MISSED
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                            // 0x0290   (0x0008)  
	FMulticastInlineDelegate                           OnConstraintBroken;                                         // 0x0298   (0x0010)  
	FConstraintInstance                                ConstraintInstance;                                         // 0x02A8   (0x01C0)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0468   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveTwistAndSwing
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool, const bool> SetOrientationDriveTwistAndSwing = { 0x4900ac0, 0 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetOrientationDriveSLERP
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool> SetOrientationDriveSLERP = { 0x49009b0, 1 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearZLimit
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const TEnumAsByte<ELinearConstraintMotion>, const float> SetLinearZLimit = { 0x48ff6f0, 2 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearYLimit
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const TEnumAsByte<ELinearConstraintMotion>, const float> SetLinearYLimit = { 0x48ff890, 3 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearXLimit
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const TEnumAsByte<ELinearConstraintMotion>, const float> SetLinearXLimit = { 0x48ffa30, 4 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityTarget
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const FVector&> SetLinearVelocityTarget = { 0x4900240, 5 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearVelocityDrive
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool, const bool, const bool> SetLinearVelocityDrive = { 0x4900e20, 6 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionTarget
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const FVector&> SetLinearPositionTarget = { 0x4900380, 7 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearPositionDrive
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool, const bool, const bool> SetLinearPositionDrive = { 0x4901020, 8 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearDriveParams
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const float, const float, const float> SetLinearDriveParams = { 0x4900050, 9 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetLinearBreakable
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool, const float> SetLinearBreakable = { 0x48ff060, 10 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetDisableCollision
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool> SetDisableCollision = { 0x48fe5d0, 11 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferencePosition
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const TEnumAsByte<EConstraintFrame>, const FVector&> SetConstraintReferencePosition = { 0x48fe9c0, 12 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceOrientation
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const TEnumAsByte<EConstraintFrame>, const FVector&, const FVector&> SetConstraintReferenceOrientation = { 0x48fe6e0, 13 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstraintReferenceFrame
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const TEnumAsByte<EConstraintFrame>, const FTransform&> SetConstraintReferenceFrame = { 0x48feba0, 14 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetConstrainedComponents
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const UPrimitiveComponent*, const FName, const UPrimitiveComponent*, const FName> SetConstrainedComponents = { 0x4901250, 15 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityTarget
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const FVector&> SetAngularVelocityTarget = { 0x48ffdc0, 16 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveTwistAndSwing
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool, const bool> SetAngularVelocityDriveTwistAndSwing = { 0x49006d0, 17 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDriveSLERP
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool> SetAngularVelocityDriveSLERP = { 0x49005c0, 18 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularVelocityDrive
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool, const bool> SetAngularVelocityDrive = { 0x4900840, 19 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularTwistLimit
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const TEnumAsByte<EAngularConstraintMotion>, const float> SetAngularTwistLimit = { 0x48ff210, 20 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing2Limit
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const TEnumAsByte<EAngularConstraintMotion>, const float> SetAngularSwing2Limit = { 0x48ff3b0, 21 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularSwing1Limit
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const TEnumAsByte<EAngularConstraintMotion>, const float> SetAngularSwing1Limit = { 0x48ff550, 22 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationTarget
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const FRotator&> SetAngularOrientationTarget = { 0x48fff60, 23 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularOrientationDrive
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool, const bool> SetAngularOrientationDrive = { 0x4900c70, 24 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveParams
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const float, const float, const float> SetAngularDriveParams = { 0x48ffbd0, 25 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularDriveMode
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const TEnumAsByte<EAngularDriveMode>> SetAngularDriveMode = { 0x49004c0, 26 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.SetAngularBreakable
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const bool, const float> SetAngularBreakable = { 0x48feeb0, 27 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.IsBroken
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, bool> IsBroken = { 0x48fe2e0, 28 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.InitComponentConstraint
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void> InitComponentConstraint = { 0x4901650, 29 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentTwist
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, float> GetCurrentTwist = { 0x48fee40, 30 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing2
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, float> GetCurrentSwing2 = { 0x48fed60, 31 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.GetCurrentSwing1
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, float> GetCurrentSwing1 = { 0x48fedd0, 32 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.GetConstraintForce
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void, const FVector&, const FVector&> GetConstraintForce = { 0x48fe3c0, 33 }; 
	// Function /Script/Engine.PhysicsConstraintComponent.BreakConstraint
	constexpr static const FunctionPointer<UPhysicsConstraintComponent, void> BreakConstraint = { 0x4901220, 34 }; 
};

/// Struct /Script/Engine.PhysicsConstraintProfileHandle
/// Size: 0x0114 (276 bytes) (0x000000 - 0x000114) align n/a MaxSize: 0x0114
struct FPhysicsConstraintProfileHandle
{ 
	FConstraintProfileProperties                       ProfileProperties;                                          // 0x0000   (0x010C)  
	FName                                              ProfileName;                                                // 0x010C   (0x0008)  
};

/// Class /Script/Engine.PhysicsConstraintTemplate
/// Size: 0x0308 (776 bytes) (0x000028 - 0x000308) align n/a MaxSize: 0x0308
class UPhysicsConstraintTemplate : public UObject
{ 
public:
	FConstraintInstance                                DefaultInstance;                                            // 0x0028   (0x01C0)  
	TArray<FPhysicsConstraintProfileHandle>            ProfileHandles;                                             // 0x01E8   (0x0010)  
	FConstraintProfileProperties                       DefaultProfile;                                             // 0x01F8   (0x010C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0304   (0x0004)  MISSED
};

/// Class /Script/Engine.PhysicsHandleComponent
/// Size: 0x0170 (368 bytes) (0x0000C0 - 0x000170) align n/a MaxSize: 0x0170
class UPhysicsHandleComponent : public UActorComponent
{ 
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                           // 0x00C0   (0x0008)  
	unsigned char                                      UnknownData05_6[0x8];                                       // 0x00C8   (0x0008)  MISSED
	unsigned char                                      UnknownBit06 : 1;                                           // 0x00D0:0 (0x0001)  MISSED
	bool                                               bSoftAngularConstraint : 1;                                 // 0x00D0:1 (0x0001)  
	bool                                               bSoftLinearConstraint : 1;                                  // 0x00D0:2 (0x0001)  
	bool                                               bInterpolateTarget : 1;                                     // 0x00D0:3 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x00D1   (0x0003)  MISSED
	float                                              LinearDamping;                                              // 0x00D4   (0x0004)  
	float                                              LinearStiffness;                                            // 0x00D8   (0x0004)  
	float                                              AngularDamping;                                             // 0x00DC   (0x0004)  
	float                                              AngularStiffness;                                           // 0x00E0   (0x0004)  
	unsigned char                                      UnknownData08_6[0x6C];                                      // 0x00E4   (0x006C)  MISSED
	float                                              InterpolationSpeed;                                         // 0x0150   (0x0004)  
	unsigned char                                      UnknownData09_7[0x1C];                                      // 0x0154   (0x001C)  MISSED

	/// Functions
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetRotation
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const FRotator> SetTargetRotation = { 0x49038b0, 0 }; 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocationAndRotation
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const FVector, const FRotator> SetTargetLocationAndRotation = { 0x4903550, 1 }; 
	// Function /Script/Engine.PhysicsHandleComponent.SetTargetLocation
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const FVector> SetTargetLocation = { 0x4903b50, 2 }; 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearStiffness
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const float> SetLinearStiffness = { 0x49031d0, 3 }; 
	// Function /Script/Engine.PhysicsHandleComponent.SetLinearDamping
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const float> SetLinearDamping = { 0x49032b0, 4 }; 
	// Function /Script/Engine.PhysicsHandleComponent.SetInterpolationSpeed
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const float> SetInterpolationSpeed = { 0x4902f40, 5 }; 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularStiffness
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const float> SetAngularStiffness = { 0x4903010, 6 }; 
	// Function /Script/Engine.PhysicsHandleComponent.SetAngularDamping
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const float> SetAngularDamping = { 0x49030f0, 7 }; 
	// Function /Script/Engine.PhysicsHandleComponent.ReleaseComponent
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void> ReleaseComponent = { 0x475b390, 8 }; 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocationWithRotation
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const UPrimitiveComponent*, const FName, const FVector, const FRotator> GrabComponentAtLocationWithRotation = { 0x4903c30, 9 }; 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponentAtLocation
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const UPrimitiveComponent*, const FName, const FVector> GrabComponentAtLocation = { 0x4903ef0, 10 }; 
	// Function /Script/Engine.PhysicsHandleComponent.GrabComponent
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const UPrimitiveComponent*, const FName, const FVector, const bool> GrabComponent = { 0x4904100, 11 }; 
	// Function /Script/Engine.PhysicsHandleComponent.GetTargetLocationAndRotation
	constexpr static const FunctionPointer<UPhysicsHandleComponent, void, const FVector&, const FRotator&> GetTargetLocationAndRotation = { 0x4903390, 12 }; 
	// Function /Script/Engine.PhysicsHandleComponent.GetGrabbedComponent
	constexpr static const FunctionPointer<UPhysicsHandleComponent, UPrimitiveComponent*> GetGrabbedComponent = { 0x3f26440, 13 }; 
};

/// Struct /Script/Engine.RigidBodyErrorCorrection
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align n/a MaxSize: 0x0034
struct FRigidBodyErrorCorrection
{ 
	float                                              PingExtrapolation;                                          // 0x0000   (0x0004)  
	float                                              PingLimit;                                                  // 0x0004   (0x0004)  
	float                                              ErrorPerLinearDifference;                                   // 0x0008   (0x0004)  
	float                                              ErrorPerAngularDifference;                                  // 0x000C   (0x0004)  
	float                                              MaxRestoredStateError;                                      // 0x0010   (0x0004)  
	float                                              MaxLinearHardSnapDistance;                                  // 0x0014   (0x0004)  
	float                                              PositionLerp;                                               // 0x0018   (0x0004)  
	float                                              AngleLerp;                                                  // 0x001C   (0x0004)  
	float                                              LinearVelocityCoefficient;                                  // 0x0020   (0x0004)  
	float                                              AngularVelocityCoefficient;                                 // 0x0024   (0x0004)  
	float                                              ErrorAccumulationSeconds;                                   // 0x0028   (0x0004)  
	float                                              ErrorAccumulationDistanceSq;                                // 0x002C   (0x0004)  
	float                                              ErrorAccumulationSimilarity;                                // 0x0030   (0x0004)  
};

/// Struct /Script/Engine.PhysicalSurfaceName
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FPhysicalSurfaceName
{ 
	TEnumAsByte<EPhysicalSurface>                      Type;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.BroadphaseSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FBroadphaseSettings
{ 
	bool                                               bUseMBPOnClient;                                            // 0x0000   (0x0001)  
	bool                                               bUseMBPOnServer;                                            // 0x0001   (0x0001)  
	bool                                               bUseMBPOuterBounds;                                         // 0x0002   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FBox                                               MBPBounds;                                                  // 0x0004   (0x001C)  
	FBox                                               MBPOuterBounds;                                             // 0x0020   (0x001C)  
	uint32_t                                           MBPNumSubdivs;                                              // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.ChaosPhysicsSettings
/// Size: 0x0003 (3 bytes) (0x000000 - 0x000003) align n/a MaxSize: 0x0003
struct FChaosPhysicsSettings
{ 
	EChaosThreadingMode                                DefaultThreadingModel;                                      // 0x0000   (0x0001)  
	EChaosSolverTickMode                               DedicatedThreadTickMode;                                    // 0x0001   (0x0001)  
	EChaosBufferMode                                   DedicatedThreadBufferMode;                                  // 0x0002   (0x0001)  
};

/// Class /Script/Engine.PhysicsSettings
/// Size: 0x01A0 (416 bytes) (0x0000E0 - 0x0001A0) align n/a MaxSize: 0x01A0
class UPhysicsSettings : public UPhysicsSettingsCore
{ 
public:
	FRigidBodyErrorCorrection                          PhysicErrorCorrection;                                      // 0x00E0   (0x0034)  
	TEnumAsByte<ESettingsLockedAxis>                   LockedAxis;                                                 // 0x0114   (0x0001)  
	TEnumAsByte<ESettingsDOF>                          DefaultDegreesOfFreedom;                                    // 0x0115   (0x0001)  
	bool                                               bSuppressFaceRemapTable;                                    // 0x0116   (0x0001)  
	bool                                               bSupportUVFromHitResults;                                   // 0x0117   (0x0001)  
	bool                                               bDisableActiveActors;                                       // 0x0118   (0x0001)  
	bool                                               bDisableKinematicStaticPairs;                               // 0x0119   (0x0001)  
	bool                                               bDisableKinematicKinematicPairs;                            // 0x011A   (0x0001)  
	bool                                               bDisableCCD;                                                // 0x011B   (0x0001)  
	bool                                               bEnableEnhancedDeterminism;                                 // 0x011C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x011D   (0x0003)  MISSED
	float                                              AnimPhysicsMinDeltaTime;                                    // 0x0120   (0x0004)  
	bool                                               bSimulateAnimPhysicsAfterReset;                             // 0x0124   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0125   (0x0003)  MISSED
	float                                              MaxPhysicsDeltaTime;                                        // 0x0128   (0x0004)  
	bool                                               bSubstepping;                                               // 0x012C   (0x0001)  
	bool                                               bSubsteppingAsync;                                          // 0x012D   (0x0001)  
	unsigned char                                      UnknownData07_6[0x2];                                       // 0x012E   (0x0002)  MISSED
	float                                              MaxSubstepDeltaTime;                                        // 0x0130   (0x0004)  
	int32_t                                            MaxSubsteps;                                                // 0x0134   (0x0004)  
	float                                              SyncSceneSmoothingFactor;                                   // 0x0138   (0x0004)  
	float                                              InitialAverageFrameRate;                                    // 0x013C   (0x0004)  
	int32_t                                            PhysXTreeRebuildRate;                                       // 0x0140   (0x0004)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x0144   (0x0004)  MISSED
	TArray<FPhysicalSurfaceName>                       PhysicalSurfaces;                                           // 0x0148   (0x0010)  
	FBroadphaseSettings                                DefaultBroadphaseSettings;                                  // 0x0158   (0x0040)  
	float                                              MinDeltaVelocityForHitEvents;                               // 0x0198   (0x0004)  
	FChaosPhysicsSettings                              ChaosSettings;                                              // 0x019C   (0x0003)  
	unsigned char                                      UnknownData09_7[0x1];                                       // 0x019F   (0x0001)  MISSED
};

/// Class /Script/Engine.PhysicsSpringComponent
/// Size: 0x0290 (656 bytes) (0x000260 - 0x000290) align n/a MaxSize: 0x0290
class UPhysicsSpringComponent : public USceneComponent
{ 
public:
	float                                              SpringStiffness;                                            // 0x0260   (0x0004)  
	float                                              SpringDamping;                                              // 0x0264   (0x0004)  
	float                                              SpringLengthAtRest;                                         // 0x0268   (0x0004)  
	float                                              SpringRadius;                                               // 0x026C   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     SpringChannel;                                              // 0x0270   (0x0001)  
	bool                                               bIgnoreSelf;                                                // 0x0271   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0272   (0x0002)  MISSED
	float                                              SpringCompression;                                          // 0x0274   (0x0004)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x0278   (0x0018)  MISSED

	/// Functions
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringRestingPoint
	constexpr static const FunctionPointer<UPhysicsSpringComponent, FVector> GetSpringRestingPoint = { 0x49052d0, 0 }; 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringDirection
	constexpr static const FunctionPointer<UPhysicsSpringComponent, FVector> GetSpringDirection = { 0x4905110, 1 }; 
	// Function /Script/Engine.PhysicsSpringComponent.GetSpringCurrentEndPoint
	constexpr static const FunctionPointer<UPhysicsSpringComponent, FVector> GetSpringCurrentEndPoint = { 0x49051b0, 2 }; 
	// Function /Script/Engine.PhysicsSpringComponent.GetNormalizedCompressionScalar
	constexpr static const FunctionPointer<UPhysicsSpringComponent, float> GetNormalizedCompressionScalar = { 0x49053b0, 3 }; 
};

/// Class /Script/Engine.PhysicsThruster
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class APhysicsThruster : public ARigidBodyBase
{ 
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                          // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.PhysicsThrusterComponent
/// Size: 0x0270 (624 bytes) (0x000260 - 0x000270) align n/a MaxSize: 0x0270
class UPhysicsThrusterComponent : public USceneComponent
{ 
public:
	float                                              ThrustStrength;                                             // 0x0260   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0264   (0x000C)  MISSED
};

/// Class /Script/Engine.SceneCapture
/// Size: 0x02D8 (728 bytes) (0x0002C8 - 0x0002D8) align n/a MaxSize: 0x02D8
class ASceneCapture : public AActor
{ 
public:
	class UStaticMeshComponent*                        MeshComp;                                                   // 0x02C8   (0x0008)  
	class USceneComponent*                             SceneComponent;                                             // 0x02D0   (0x0008)  
};

/// Class /Script/Engine.PlanarReflection
/// Size: 0x02E8 (744 bytes) (0x0002D8 - 0x0002E8) align n/a MaxSize: 0x02E8
class APlanarReflection : public ASceneCapture
{ 
public:
	class UPlanarReflectionComponent*                  PlanarReflectionComponent;                                  // 0x02D8   (0x0008)  
	bool                                               bShowPreviewPlane;                                          // 0x02E0   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02E1   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.PlanarReflection.OnInterpToggle
	constexpr static const FunctionPointer<APlanarReflection, void, const bool> OnInterpToggle = { 0x49062b0, 0 }; 
};

/// Class /Script/Engine.PlanarReflectionComponent
/// Size: 0x0410 (1040 bytes) (0x000320 - 0x000410) align n/a MaxSize: 0x0410
class UPlanarReflectionComponent : public USceneCaptureComponent
{ 
public:
	class UBoxComponent*                               PreviewBox;                                                 // 0x0320   (0x0008)  
	float                                              NormalDistortionStrength;                                   // 0x0328   (0x0004)  
	float                                              PrefilterRoughness;                                         // 0x032C   (0x0004)  
	float                                              PrefilterRoughnessDistance;                                 // 0x0330   (0x0004)  
	int32_t                                            ScreenPercentage;                                           // 0x0334   (0x0004)  
	float                                              ExtraFOV;                                                   // 0x0338   (0x0004)  
	float                                              DistanceFromPlaneFadeStart;                                 // 0x033C   (0x0004)  
	float                                              DistanceFromPlaneFadeEnd;                                   // 0x0340   (0x0004)  
	float                                              DistanceFromPlaneFadeoutStart;                              // 0x0344   (0x0004)  
	float                                              DistanceFromPlaneFadeoutEnd;                                // 0x0348   (0x0004)  
	float                                              AngleFromPlaneFadeStart;                                    // 0x034C   (0x0004)  
	float                                              AngleFromPlaneFadeEnd;                                      // 0x0350   (0x0004)  
	bool                                               bShowPreviewPlane;                                          // 0x0354   (0x0001)  
	bool                                               bRenderSceneTwoSided;                                       // 0x0355   (0x0001)  
	unsigned char                                      UnknownData01_7[0xBA];                                      // 0x0356   (0x00BA)  MISSED
};

/// Class /Script/Engine.PlaneReflectionCapture
/// Size: 0x02D0 (720 bytes) (0x0002D0 - 0x0002D0) align n/a MaxSize: 0x02D0
class APlaneReflectionCapture : public AReflectionCapture
{ 
public:
};

/// Class /Script/Engine.PlaneReflectionCaptureComponent
/// Size: 0x02F0 (752 bytes) (0x0002D8 - 0x0002F0) align n/a MaxSize: 0x02F0
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              InfluenceRadiusScale;                                       // 0x02D8   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x02DC   (0x0004)  MISSED
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                     // 0x02E0   (0x0008)  
	class UBoxComponent*                               PreviewCaptureBox;                                          // 0x02E8   (0x0008)  
};

/// Class /Script/Engine.PlatformEventsComponent
/// Size: 0x00E0 (224 bytes) (0x0000C0 - 0x0000E0) align n/a MaxSize: 0x00E0
class UPlatformEventsComponent : public UActorComponent
{ 
public:
	FMulticastInlineDelegate                           PlatformChangedToLaptopModeDelegate;                        // 0x00C0   (0x0010)  
	FMulticastInlineDelegate                           PlatformChangedToTabletModeDelegate;                        // 0x00D0   (0x0010)  

	/// Functions
	// Function /Script/Engine.PlatformEventsComponent.SupportsConvertibleLaptops
	constexpr static const FunctionPointer<UPlatformEventsComponent, bool> SupportsConvertibleLaptops = { 0x4906e90, 0 }; 
	// Function /Script/Engine.PlatformEventsComponent.PlatformEventDelegate__DelegateSignature
	constexpr static const FunctionPointer<UPlatformEventsComponent, void> PlatformEventDelegate__DelegateSignature = { 0x2bbb090, 1 }; 
	// Function /Script/Engine.PlatformEventsComponent.IsInTabletMode
	constexpr static const FunctionPointer<UPlatformEventsComponent, bool> IsInTabletMode = { 0x4906ef0, 2 }; 
	// Function /Script/Engine.PlatformEventsComponent.IsInLaptopMode
	constexpr static const FunctionPointer<UPlatformEventsComponent, bool> IsInLaptopMode = { 0x4906f50, 3 }; 
};

/// Class /Script/Engine.PlatformInterfaceWebResponse
/// Size: 0x00B0 (176 bytes) (0x000028 - 0x0000B0) align n/a MaxSize: 0x00B0
class UPlatformInterfaceWebResponse : public UObject
{ 
public:
	FString                                            OriginalURL;                                                // 0x0028   (0x0010)  
	int32_t                                            ResponseCode;                                               // 0x0038   (0x0004)  
	int32_t                                            Tag;                                                        // 0x003C   (0x0004)  
	FString                                            StringResponse;                                             // 0x0040   (0x0010)  
	TArray<char>                                       BinaryResponse;                                             // 0x0050   (0x0010)  
	unsigned char                                      UnknownData01_7[0x50];                                      // 0x0060   (0x0050)  MISSED

	/// Functions
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetNumHeaders
	constexpr static const FunctionPointer<UPlatformInterfaceWebResponse, int32_t> GetNumHeaders = { 0x115e0f0, 0 }; 
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeaderValue
	constexpr static const FunctionPointer<UPlatformInterfaceWebResponse, FString, const FString> GetHeaderValue = { 0x4907a60, 1 }; 
	// Function /Script/Engine.PlatformInterfaceWebResponse.GetHeader
	constexpr static const FunctionPointer<UPlatformInterfaceWebResponse, void, const int32_t, const FString&, const FString&> GetHeader = { 0x4907ba0, 2 }; 
};

/// Struct /Script/Engine.MinimalViewInfo
/// Size: 0x0640 (1600 bytes) (0x000000 - 0x000640) align n/a MaxSize: 0x0640
struct FMinimalViewInfo
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	float                                              FOV;                                                        // 0x0018   (0x0004)  
	float                                              DesiredFOV;                                                 // 0x001C   (0x0004)  
	float                                              OrthoWidth;                                                 // 0x0020   (0x0004)  
	float                                              OrthoNearClipPlane;                                         // 0x0024   (0x0004)  
	float                                              OrthoFarClipPlane;                                          // 0x0028   (0x0004)  
	float                                              AspectRatio;                                                // 0x002C   (0x0004)  
	bool                                               bConstrainAspectRatio : 1;                                  // 0x0030:0 (0x0001)  
	bool                                               bCropAspectRatio : 1;                                       // 0x0030:1 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              CropAspectRatioViewportLess;                                // 0x0034   (0x0004)  
	bool                                               bUseBlendViewDOF;                                           // 0x0038   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	bool                                               bUseFieldOfViewForLOD : 1;                                  // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                             // 0x0040   (0x0001)  
	unsigned char                                      UnknownData09_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	float                                              PostProcessBlendWeight;                                     // 0x0044   (0x0004)  
	unsigned char                                      UnknownData10_6[0x8];                                       // 0x0048   (0x0008)  MISSED
	FPostProcessSettings                               PostProcessSettings;                                        // 0x0050   (0x05A0)  
	FVector2D                                          OffCenterProjectionOffset;                                  // 0x05F0   (0x0008)  
	unsigned char                                      UnknownData11_7[0x48];                                      // 0x05F8   (0x0048)  MISSED
};

/// Struct /Script/Engine.CameraCacheEntry
/// Size: 0x0650 (1616 bytes) (0x000000 - 0x000650) align n/a MaxSize: 0x0650
struct FCameraCacheEntry
{ 
	float                                              Timestamp;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0xC];                                       // 0x0004   (0x000C)  MISSED
	FMinimalViewInfo                                   POV;                                                        // 0x0010   (0x0640)  
};

/// Struct /Script/Engine.TViewTarget
/// Size: 0x0660 (1632 bytes) (0x000000 - 0x000660) align n/a MaxSize: 0x0660
struct FTViewTarget
{ 
	class AActor*                                      Target;                                                     // 0x0000   (0x0008)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0008   (0x0008)  MISSED
	FMinimalViewInfo                                   POV;                                                        // 0x0010   (0x0640)  
	class APlayerState*                                PlayerState;                                                // 0x0650   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0658   (0x0008)  MISSED
};

/// Class /Script/Engine.PlayerCameraManager
/// Size: 0x2AD0 (10960 bytes) (0x0002C8 - 0x002AD0) align n/a MaxSize: 0x2AD0
class APlayerCameraManager : public AActor
{ 
public:
	class APlayerController*                           PCOwner;                                                    // 0x02C8   (0x0008)  
	class USceneComponent*                             TransformComponent;                                         // 0x02D0   (0x0008)  
	unsigned char                                      UnknownData19_6[0x8];                                       // 0x02D8   (0x0008)  MISSED
	float                                              DefaultFOV;                                                 // 0x02E0   (0x0004)  
	unsigned char                                      UnknownData20_6[0x4];                                       // 0x02E4   (0x0004)  MISSED
	float                                              DefaultOrthoWidth;                                          // 0x02E8   (0x0004)  
	unsigned char                                      UnknownData21_6[0x4];                                       // 0x02EC   (0x0004)  MISSED
	float                                              DefaultAspectRatio;                                         // 0x02F0   (0x0004)  
	unsigned char                                      UnknownData22_6[0x4C];                                      // 0x02F4   (0x004C)  MISSED
	FCameraCacheEntry                                  CameraCache;                                                // 0x0340   (0x0650)  
	FCameraCacheEntry                                  LastFrameCameraCache;                                       // 0x0990   (0x0650)  
	FTViewTarget                                       ViewTarget;                                                 // 0x0FE0   (0x0660)  
	FTViewTarget                                       PendingViewTarget;                                          // 0x1640   (0x0660)  
	unsigned char                                      UnknownData23_6[0x14];                                      // 0x1CA0   (0x0014)  MISSED
	bool                                               bBeforeConstraintAspectRatioState;                          // 0x1CB4   (0x0001)  
	unsigned char                                      UnknownData24_6[0x1B];                                      // 0x1CB5   (0x001B)  MISSED
	FCameraCacheEntry                                  CameraCachePrivate;                                         // 0x1CD0   (0x0650)  
	FCameraCacheEntry                                  LastFrameCameraCachePrivate;                                // 0x2320   (0x0650)  
	TArray<class UCameraModifier*>                     ModifierList;                                               // 0x2970   (0x0010)  
	TArray<class UClass*>                              DefaultModifiers;                                           // 0x2980   (0x0010)  
	float                                              FreeCamDistance;                                            // 0x2990   (0x0004)  
	FVector                                            FreeCamOffset;                                              // 0x2994   (0x000C)  
	FVector                                            ViewTargetOffset;                                           // 0x29A0   (0x000C)  
	unsigned char                                      UnknownData25_6[0x4];                                       // 0x29AC   (0x0004)  MISSED
	FMulticastInlineDelegate                           OnAudioFadeChangeEvent;                                     // 0x29B0   (0x0010)  
	unsigned char                                      UnknownData26_6[0x10];                                      // 0x29C0   (0x0010)  MISSED
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                          // 0x29D0   (0x0010)  
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                       // 0x29E0   (0x0008)  
	class UCameraAnimInst*                             AnimInstPool[8];                                            // 0x29E8   (0x0040)  
	TArray<FPostProcessSettings>                       PostProcessBlendCache;                                      // 0x2A28   (0x0010)  
	unsigned char                                      UnknownData27_6[0x28];                                      // 0x2A38   (0x0028)  MISSED
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                                // 0x2A60   (0x0010)  
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                  // 0x2A70   (0x0010)  
	class ACameraActor*                                AnimCameraActor;                                            // 0x2A80   (0x0008)  
	bool                                               bIsOrthographic : 1;                                        // 0x2A88:0 (0x0001)  
	bool                                               bDefaultConstrainAspectRatio : 1;                           // 0x2A88:1 (0x0001)  
	unsigned char                                      UnknownBit28 : 1;                                           // 0x2A88:2 (0x0001)  MISSED
	unsigned char                                      UnknownBit29 : 1;                                           // 0x2A88:3 (0x0001)  MISSED
	unsigned char                                      UnknownBit30 : 1;                                           // 0x2A88:4 (0x0001)  MISSED
	unsigned char                                      UnknownBit31 : 1;                                           // 0x2A88:5 (0x0001)  MISSED
	bool                                               bClientSimulatingViewTarget : 1;                            // 0x2A88:6 (0x0001)  
	bool                                               bUseClientSideCameraUpdates : 1;                            // 0x2A88:7 (0x0001)  
	unsigned char                                      UnknownBit32 : 1;                                           // 0x2A89:0 (0x0001)  MISSED
	unsigned char                                      UnknownBit33 : 1;                                           // 0x2A89:1 (0x0001)  MISSED
	bool                                               bGameCameraCutThisFrame : 1;                                // 0x2A89:2 (0x0001)  
	unsigned char                                      UnknownData34_5[0x2];                                       // 0x2A8A   (0x0002)  MISSED
	float                                              ViewPitchMin;                                               // 0x2A8C   (0x0004)  
	float                                              ViewPitchMax;                                               // 0x2A90   (0x0004)  
	float                                              ViewYawMin;                                                 // 0x2A94   (0x0004)  
	float                                              ViewYawMax;                                                 // 0x2A98   (0x0004)  
	float                                              ViewRollMin;                                                // 0x2A9C   (0x0004)  
	float                                              ViewRollMax;                                                // 0x2AA0   (0x0004)  
	unsigned char                                      UnknownData35_6[0x4];                                       // 0x2AA4   (0x0004)  MISSED
	float                                              ServerUpdateCameraTimeout;                                  // 0x2AA8   (0x0004)  
	float                                              CropAspectRatioBlendDuration;                               // 0x2AAC   (0x0004)  
	unsigned char                                      UnknownData36_6[0x18];                                      // 0x2AB0   (0x0018)  MISSED
	bool                                               bPauseCameraAnim;                                           // 0x2AC8   (0x0001)  
	unsigned char                                      UnknownData37_7[0x7];                                       // 0x2AC9   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.PlayerCameraManager.SwapPendingViewTargetWhenUsingClientSideCameraUpdates
	constexpr static const FunctionPointer<APlayerCameraManager, void> SwapPendingViewTargetWhenUsingClientSideCameraUpdates = { 0x4909410, 0 }; 
	// Function /Script/Engine.PlayerCameraManager.StopCameraShakeByGuid
	constexpr static const FunctionPointer<APlayerCameraManager, void, const FGuid, const bool> StopCameraShakeByGuid = { 0x490b290, 1 }; 
	// Function /Script/Engine.PlayerCameraManager.StopCameraShake
	constexpr static const FunctionPointer<APlayerCameraManager, void, const UCameraShakeBase*, const bool> StopCameraShake = { 0x490ba00, 2 }; 
	// Function /Script/Engine.PlayerCameraManager.StopCameraFadePriority
	constexpr static const FunctionPointer<APlayerCameraManager, void, const FGuid> StopCameraFadePriority = { 0x490a770, 3 }; 
	// Function /Script/Engine.PlayerCameraManager.StopCameraFade
	constexpr static const FunctionPointer<APlayerCameraManager, void> StopCameraFade = { 0x490aef0, 4 }; 
	// Function /Script/Engine.PlayerCameraManager.StopCameraAnimInst
	constexpr static const FunctionPointer<APlayerCameraManager, void, const UCameraAnimInst*, const bool> StopCameraAnimInst = { 0x4909450, 5 }; 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShakeFromSource
	constexpr static const FunctionPointer<APlayerCameraManager, void, const UClass*, const UCameraShakeSourceComponent*, const bool> StopAllInstancesOfCameraShakeFromSource = { 0x490b5c0, 6 }; 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraShake
	constexpr static const FunctionPointer<APlayerCameraManager, void, const UClass*, const bool> StopAllInstancesOfCameraShake = { 0x490b890, 7 }; 
	// Function /Script/Engine.PlayerCameraManager.StopAllInstancesOfCameraAnim
	constexpr static const FunctionPointer<APlayerCameraManager, void, const UCameraAnim*, const bool> StopAllInstancesOfCameraAnim = { 0x49095c0, 8 }; 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraShakesFromSource
	constexpr static const FunctionPointer<APlayerCameraManager, void, const UCameraShakeSourceComponent*, const bool> StopAllCameraShakesFromSource = { 0x490b450, 9 }; 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraShakes
	constexpr static const FunctionPointer<APlayerCameraManager, void, const bool> StopAllCameraShakes = { 0x490b7b0, 10 }; 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraFadePriority
	constexpr static const FunctionPointer<APlayerCameraManager, void> StopAllCameraFadePriority = { 0x490a730, 11 }; 
	// Function /Script/Engine.PlayerCameraManager.StopAllCameraAnims
	constexpr static const FunctionPointer<APlayerCameraManager, void, const bool> StopAllCameraAnims = { 0x4751f80, 12 }; 
	// Function /Script/Engine.PlayerCameraManager.StartMatineeCameraShakeFromSource
	constexpr static const FunctionPointer<APlayerCameraManager, UMatineeCameraShake*, const UClass*, const UCameraShakeSourceComponent*, const float, const ECameraShakePlaySpace, const FRotator> StartMatineeCameraShakeFromSource = { 0x490bb70, 13 }; 
	// Function /Script/Engine.PlayerCameraManager.StartMatineeCameraShake
	constexpr static const FunctionPointer<APlayerCameraManager, UMatineeCameraShake*, const UClass*, const float, const ECameraShakePlaySpace, const FRotator> StartMatineeCameraShake = { 0x490c5d0, 14 }; 
	// Function /Script/Engine.PlayerCameraManager.StartCameraShakeFromSource
	constexpr static const FunctionPointer<APlayerCameraManager, UCameraShakeBase*, const UClass*, const UCameraShakeSourceComponent*, const float, const ECameraShakePlaySpace, const FRotator> StartCameraShakeFromSource = { 0x490bf40, 15 }; 
	// Function /Script/Engine.PlayerCameraManager.StartCameraShake
	constexpr static const FunctionPointer<APlayerCameraManager, UCameraShakeBase*, const UClass*, const float, const ECameraShakePlaySpace, const FRotator, const FString> StartCameraShake = { 0x490c920, 16 }; 
	// Function /Script/Engine.PlayerCameraManager.StartCameraFadePriority
	constexpr static const FunctionPointer<APlayerCameraManager, FGuid, const float, const float, const float, const FLinearColor, const float, const bool, const bool, const float> StartCameraFadePriority = { 0x490a860, 17 }; 
	// Function /Script/Engine.PlayerCameraManager.StartCameraFade
	constexpr static const FunctionPointer<APlayerCameraManager, void, const float, const float, const float, const FLinearColor, const bool, const bool> StartCameraFade = { 0x490af10, 18 }; 
	// Function /Script/Engine.PlayerCameraManager.SetManualCameraFadePriority
	constexpr static const FunctionPointer<APlayerCameraManager, FGuid, const float, const FLinearColor, const bool, const float> SetManualCameraFadePriority = { 0x490a490, 19 }; 
	// Function /Script/Engine.PlayerCameraManager.SetManualCameraFade
	constexpr static const FunctionPointer<APlayerCameraManager, void, const float, const FLinearColor, const bool> SetManualCameraFade = { 0x490acf0, 20 }; 
	// Function /Script/Engine.PlayerCameraManager.SetGameCameraCutThisFrame
	constexpr static const FunctionPointer<APlayerCameraManager, void> SetGameCameraCutThisFrame = { 0x4909430, 21 }; 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraModifier
	constexpr static const FunctionPointer<APlayerCameraManager, bool, const UCameraModifier*> RemoveCameraModifier = { 0x490cf10, 22 }; 
	// Function /Script/Engine.PlayerCameraManager.RemoveCameraLensEffect
	constexpr static const FunctionPointer<APlayerCameraManager, void, const AEmitterCameraLensEffectBase*> RemoveCameraLensEffect = { 0x490cc80, 23 }; 
	// Function /Script/Engine.PlayerCameraManager.PlayCameraShake_Raw
	constexpr static const FunctionPointer<APlayerCameraManager, UCameraShakeBase*, const UCameraShakeBase*, const float, const ECameraShakePlaySpace, const FRotator, const FString> PlayCameraShake_Raw = { 0x490c290, 24 }; 
	// Function /Script/Engine.PlayerCameraManager.PlayCameraAnimToUserPlaySpace
	constexpr static const FunctionPointer<APlayerCameraManager, UCameraAnimInst*, const UCameraAnim*, const FVector, const FRotator, const float, const float, const float, const float, const bool, const bool, const float, const bool, const float, const int32_t> PlayCameraAnimToUserPlaySpace = { 0x4909730, 25 }; 
	// Function /Script/Engine.PlayerCameraManager.PlayCameraAnim
	constexpr static const FunctionPointer<APlayerCameraManager, UCameraAnimInst*, const UCameraAnim*, const float, const float, const float, const float, const bool, const bool, const float, const ECameraShakePlaySpace, const FRotator> PlayCameraAnim = { 0x4909eb0, 26 }; 
	// Function /Script/Engine.PlayerCameraManager.PhotographyCameraModify
	constexpr static const FunctionPointer<APlayerCameraManager, void, const FVector, const FVector, const FVector, const FVector&> PhotographyCameraModify = { 0x490d210, 27 }; 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionStart
	constexpr static const FunctionPointer<APlayerCameraManager, void> OnPhotographySessionStart = { 0x48c0890, 28 }; 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographySessionEnd
	constexpr static const FunctionPointer<APlayerCameraManager, void> OnPhotographySessionEnd = { 0x48c08b0, 29 }; 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureStart
	constexpr static const FunctionPointer<APlayerCameraManager, void> OnPhotographyMultiPartCaptureStart = { 0x477be50, 30 }; 
	// Function /Script/Engine.PlayerCameraManager.OnPhotographyMultiPartCaptureEnd
	constexpr static const FunctionPointer<APlayerCameraManager, void> OnPhotographyMultiPartCaptureEnd = { 0x47887a0, 31 }; 
	// Function /Script/Engine.PlayerCameraManager.GetOwningPlayerController
	constexpr static const FunctionPointer<APlayerCameraManager, APlayerController*> GetOwningPlayerController = { 0x490d1e0, 32 }; 
	// Function /Script/Engine.PlayerCameraManager.GetFOVAngle
	constexpr static const FunctionPointer<APlayerCameraManager, float> GetFOVAngle = { 0x490ced0, 33 }; 
	// Function /Script/Engine.PlayerCameraManager.GetCameraRotation
	constexpr static const FunctionPointer<APlayerCameraManager, FRotator> GetCameraRotation = { 0x490ce90, 34 }; 
	// Function /Script/Engine.PlayerCameraManager.GetCameraLocation
	constexpr static const FunctionPointer<APlayerCameraManager, FVector> GetCameraLocation = { 0x490ce50, 35 }; 
	// Function /Script/Engine.PlayerCameraManager.FindCameraModifierByClass
	constexpr static const FunctionPointer<APlayerCameraManager, UCameraModifier*, const UClass*> FindCameraModifierByClass = { 0x490d000, 36 }; 
	// Function /Script/Engine.PlayerCameraManager.ClearCameraLensEffects
	constexpr static const FunctionPointer<APlayerCameraManager, void> ClearCameraLensEffects = { 0x490cc60, 37 }; 
	// Function /Script/Engine.PlayerCameraManager.BlueprintUpdateCamera
	constexpr static const FunctionPointer<APlayerCameraManager, bool, const AActor*, const FVector&, const FRotator&, const float&> BlueprintUpdateCamera = { 0x2bbb090, 38 }; 
	// Function /Script/Engine.PlayerCameraManager.AddNewCameraModifier
	constexpr static const FunctionPointer<APlayerCameraManager, UCameraModifier*, const UClass*> AddNewCameraModifier = { 0x490d0f0, 39 }; 
	// Function /Script/Engine.PlayerCameraManager.AddCameraLensEffect
	constexpr static const FunctionPointer<APlayerCameraManager, AEmitterCameraLensEffectBase*, const UClass*> AddCameraLensEffect = { 0x490cd60, 40 }; 
};

/// Class /Script/Engine.PlayerStart
/// Size: 0x02F8 (760 bytes) (0x0002F0 - 0x0002F8) align n/a MaxSize: 0x02F8
class APlayerStart : public ANavigationObjectBase
{ 
public:
	FName                                              PlayerStartTag;                                             // 0x02F0   (0x0008)  
};

/// Class /Script/Engine.PlayerStartPIE
/// Size: 0x02F8 (760 bytes) (0x0002F8 - 0x0002F8) align n/a MaxSize: 0x02F8
class APlayerStartPIE : public APlayerStart
{ 
public:
};

/// Class /Script/Engine.PluginCommandlet
/// Size: 0x00A0 (160 bytes) (0x000080 - 0x0000A0) align n/a MaxSize: 0x00A0
class UPluginCommandlet : public UCommandlet
{ 
public:
	unsigned char                                      UnknownData01_1[0x20];                                      // 0x0080   (0x0020)  MISSED
};

/// Class /Script/Engine.PointLight
/// Size: 0x02E0 (736 bytes) (0x0002D8 - 0x0002E0) align n/a MaxSize: 0x02E0
class APointLight : public ALight
{ 
public:
	class UPointLightComponent*                        PointLightComponent;                                        // 0x02D8   (0x0008)  

	/// Functions
	// Function /Script/Engine.PointLight.SetRadius
	constexpr static const FunctionPointer<APointLight, void, const float> SetRadius = { 0x491f640, 0 }; 
	// Function /Script/Engine.PointLight.SetLightFalloffExponent
	constexpr static const FunctionPointer<APointLight, void, const float> SetLightFalloffExponent = { 0x491f530, 1 }; 
};

/// Class /Script/Engine.PointLightComponent
/// Size: 0x0410 (1040 bytes) (0x0003F0 - 0x000410) align n/a MaxSize: 0x0408
class UPointLightComponent : public ULocalLightComponent
{ 
public:
	bool                                               bUseInverseSquaredFalloff : 1;                              // 0x03F0:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x03F1   (0x0003)  MISSED
	float                                              LightFalloffExponent;                                       // 0x03F4   (0x0004)  
	float                                              SourceRadius;                                               // 0x03F8   (0x0004)  
	float                                              SoftSourceRadius;                                           // 0x03FC   (0x0004)  
	float                                              SourceLength;                                               // 0x0400   (0x0004)  
	bool                                               bSBSteamDeckOptimizeLight;                                  // 0x0404   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0405   (0x0003)  MISSED

	/// Functions
	// Function /Script/Engine.PointLightComponent.SetSourceRadius
	constexpr static const FunctionPointer<UPointLightComponent, void, const float> SetSourceRadius = { 0x491f9d0, 0 }; 
	// Function /Script/Engine.PointLightComponent.SetSourceLength
	constexpr static const FunctionPointer<UPointLightComponent, void, const float> SetSourceLength = { 0x491f7d0, 1 }; 
	// Function /Script/Engine.PointLightComponent.SetSoftSourceRadius
	constexpr static const FunctionPointer<UPointLightComponent, void, const float> SetSoftSourceRadius = { 0x491f8d0, 2 }; 
	// Function /Script/Engine.PointLightComponent.SetLightFalloffExponent
	constexpr static const FunctionPointer<UPointLightComponent, void, const float> SetLightFalloffExponent = { 0x491fad0, 3 }; 
};

/// Class /Script/Engine.Polys
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UPolys : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Class /Script/Engine.PoseableMeshComponent
/// Size: 0x09E0 (2528 bytes) (0x000880 - 0x0009E0) align n/a MaxSize: 0x09E0
class UPoseableMeshComponent : public USkinnedMeshComponent
{ 
public:
	unsigned char                                      UnknownData01_1[0x160];                                     // 0x0880   (0x0160)  MISSED

	/// Functions
	// Function /Script/Engine.PoseableMeshComponent.SetBoneTransformByName
	constexpr static const FunctionPointer<UPoseableMeshComponent, void, const FName, const FTransform&, const TEnumAsByte<EBoneSpaces>> SetBoneTransformByName = { 0x49218d0, 0 }; 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneScaleByName
	constexpr static const FunctionPointer<UPoseableMeshComponent, void, const FName, const FVector, const TEnumAsByte<EBoneSpaces>> SetBoneScaleByName = { 0x4921000, 1 }; 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneRotationByName
	constexpr static const FunctionPointer<UPoseableMeshComponent, void, const FName, const FRotator, const TEnumAsByte<EBoneSpaces>> SetBoneRotationByName = { 0x4921260, 2 }; 
	// Function /Script/Engine.PoseableMeshComponent.SetBoneLocationByName
	constexpr static const FunctionPointer<UPoseableMeshComponent, void, const FName, const FVector, const TEnumAsByte<EBoneSpaces>> SetBoneLocationByName = { 0x4921670, 3 }; 
	// Function /Script/Engine.PoseableMeshComponent.ResetBoneTransformByName
	constexpr static const FunctionPointer<UPoseableMeshComponent, void, const FName> ResetBoneTransformByName = { 0x49206f0, 4 }; 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneTransformByName
	constexpr static const FunctionPointer<UPoseableMeshComponent, FTransform, const FName, const TEnumAsByte<EBoneSpaces>> GetBoneTransformByName = { 0x4920e60, 5 }; 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneScaleByName
	constexpr static const FunctionPointer<UPoseableMeshComponent, FVector, const FName, const TEnumAsByte<EBoneSpaces>> GetBoneScaleByName = { 0x4920940, 6 }; 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneRotationByName
	constexpr static const FunctionPointer<UPoseableMeshComponent, FRotator, const FName, const TEnumAsByte<EBoneSpaces>> GetBoneRotationByName = { 0x4920af0, 7 }; 
	// Function /Script/Engine.PoseableMeshComponent.GetBoneLocationByName
	constexpr static const FunctionPointer<UPoseableMeshComponent, FVector, const FName, const TEnumAsByte<EBoneSpaces>> GetBoneLocationByName = { 0x4920cb0, 8 }; 
	// Function /Script/Engine.PoseableMeshComponent.CopyPoseFromSkeletalComponent
	constexpr static const FunctionPointer<UPoseableMeshComponent, void, const USkeletalMeshComponent*> CopyPoseFromSkeletalComponent = { 0x4920490, 9 }; 
};

/// Struct /Script/Engine.PoseData
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FPoseData
{ 
	TArray<FTransform>                                 LocalSpacePose;                                             // 0x0000   (0x0010)  
	TMap<int32_t, int32_t>                             TrackToBufferIndex;                                         // 0x0010   (0x0050)  
	TArray<float>                                      CurveData;                                                  // 0x0060   (0x0010)  
};

/// Struct /Script/Engine.PoseDataContainer
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FPoseDataContainer
{ 
	TArray<FSmartName>                                 PoseNames;                                                  // 0x0000   (0x0010)  
	TArray<FName>                                      Tracks;                                                     // 0x0010   (0x0010)  
	TMap<FName, int32_t>                               TrackMap;                                                   // 0x0020   (0x0050)  
	TArray<FPoseData>                                  Poses;                                                      // 0x0070   (0x0010)  
	TArray<FAnimCurveBase>                             Curves;                                                     // 0x0080   (0x0010)  
};

/// Class /Script/Engine.PoseAsset
/// Size: 0x0120 (288 bytes) (0x000080 - 0x000120) align n/a MaxSize: 0x0120
class UPoseAsset : public UAnimationAsset
{ 
public:
	FPoseDataContainer                                 PoseContainer;                                              // 0x0080   (0x0090)  
	bool                                               bAdditivePose;                                              // 0x0110   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0111   (0x0003)  MISSED
	int32_t                                            BasePoseIndex;                                              // 0x0114   (0x0004)  
	FName                                              RetargetSource;                                             // 0x0118   (0x0008)  
};

/// Class /Script/Engine.PoseWatch
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UPoseWatch : public UObject
{ 
public:
	class UEdGraphNode*                                Node;                                                       // 0x0028   (0x0008)  
	FColor                                             PoseWatchColour;                                            // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Class /Script/Engine.PostProcessComponent
/// Size: 0x0820 (2080 bytes) (0x000260 - 0x000820) align n/a MaxSize: 0x0820
class UPostProcessComponent : public USceneComponent
{ 
public:
	unsigned char                                      UnknownData02_8[0x10];                                      // 0x0260   (0x0010)  MISSED
	FPostProcessSettings                               Settings;                                                   // 0x0270   (0x05A0)  
	float                                              Priority;                                                   // 0x0810   (0x0004)  
	float                                              BlendRadius;                                                // 0x0814   (0x0004)  
	float                                              BlendWeight;                                                // 0x0818   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x081C:0 (0x0001)  
	bool                                               bUnbound : 1;                                               // 0x081C:1 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x081D   (0x0003)  MISSED

	/// Functions
	// Function /Script/Engine.PostProcessComponent.AddOrUpdateBlendable
	constexpr static const FunctionPointer<UPostProcessComponent, void, const TScriptInterface<Class>, const float> AddOrUpdateBlendable = { 0x4922a00, 0 }; 
};

/// Class /Script/Engine.PostProcessVolume
/// Size: 0x08D0 (2256 bytes) (0x000318 - 0x0008D0) align n/a MaxSize: 0x08D0
class APostProcessVolume : public AVolume
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0318   (0x0008)  MISSED
	FPostProcessSettings                               Settings;                                                   // 0x0320   (0x05A0)  
	float                                              Priority;                                                   // 0x08C0   (0x0004)  
	float                                              BlendRadius;                                                // 0x08C4   (0x0004)  
	float                                              BlendWeight;                                                // 0x08C8   (0x0004)  
	bool                                               bEnabled : 1;                                               // 0x08CC:0 (0x0001)  
	bool                                               bUnbound : 1;                                               // 0x08CC:1 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x08CD   (0x0003)  MISSED

	/// Functions
	// Function /Script/Engine.PostProcessVolume.AddOrUpdateBlendable
	constexpr static const FunctionPointer<APostProcessVolume, void, const TScriptInterface<Class>, const float> AddOrUpdateBlendable = { 0x4746890, 0 }; 
};

/// Class /Script/Engine.PrecomputedVisibilityOverrideVolume
/// Size: 0x0348 (840 bytes) (0x000318 - 0x000348) align n/a MaxSize: 0x0348
class APrecomputedVisibilityOverrideVolume : public AVolume
{ 
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                      // 0x0318   (0x0010)  
	TArray<class AActor*>                              OverrideInvisibleActors;                                    // 0x0328   (0x0010)  
	TArray<FName>                                      OverrideInvisibleLevels;                                    // 0x0338   (0x0010)  
};

/// Class /Script/Engine.PrecomputedVisibilityVolume
/// Size: 0x0318 (792 bytes) (0x000318 - 0x000318) align n/a MaxSize: 0x0318
class APrecomputedVisibilityVolume : public AVolume
{ 
public:
};

/// Class /Script/Engine.PreviewCollectionInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UPreviewCollectionInterface : public UInterface
{ 
public:
};

/// Struct /Script/Engine.PreviewMeshCollectionEntry
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FPreviewMeshCollectionEntry
{ 
	TWeakObjectPtr<class USkeletalMesh*>               SkeletalMesh;                                               // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0008   (0x0020)  MISSED
	FName                                              AttachSocketName;                                           // 0x0028   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0030   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x003C   (0x000C)  
};

/// Class /Script/Engine.PreviewMeshCollection
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align n/a MaxSize: 0x0050
class UPreviewMeshCollection : public UDataAsset
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0030   (0x0008)  MISSED
	class USkeleton*                                   Skeleton;                                                   // 0x0038   (0x0008)  
	TArray<FPreviewMeshCollectionEntry>                SkeletalMeshes;                                             // 0x0040   (0x0010)  
};

/// Struct /Script/Engine.CollectionReference
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FCollectionReference
{ 
	FName                                              CollectionName;                                             // 0x0000   (0x0008)  
};

/// Class /Script/Engine.PrimaryAssetLabel
/// Size: 0x0068 (104 bytes) (0x000030 - 0x000068) align n/a MaxSize: 0x0068
class UPrimaryAssetLabel : public UPrimaryDataAsset
{ 
public:
	FPrimaryAssetRules                                 Rules;                                                      // 0x0030   (0x000C)  
	bool                                               bLabelAssetsInMyDirectory : 1;                              // 0x003C:0 (0x0001)  
	bool                                               bIsRuntimeLabel : 1;                                        // 0x003C:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x003D   (0x0003)  MISSED
	TArray<TWeakObjectPtr<UObject*>>                   ExplicitAssets;                                             // 0x0040   (0x0010)  
	TArray<TSoftObjectPtr<UClass*>>                    ExplicitBlueprints;                                         // 0x0050   (0x0010)  
	FCollectionReference                               AssetCollection;                                            // 0x0060   (0x0008)  
};

/// Class /Script/Engine.ProjectileMovementComponent
/// Size: 0x01E0 (480 bytes) (0x000100 - 0x0001E0) align n/a MaxSize: 0x01E0
class UProjectileMovementComponent : public UMovementComponent
{ 
public:
	float                                              InitialSpeed;                                               // 0x0100   (0x0004)  
	float                                              MaxSpeed;                                                   // 0x0104   (0x0004)  
	bool                                               bRotationFollowsVelocity : 1;                               // 0x0108:0 (0x0001)  
	bool                                               bRotationRemainsVertical : 1;                               // 0x0108:1 (0x0001)  
	bool                                               bShouldBounce : 1;                                          // 0x0108:2 (0x0001)  
	bool                                               bInitialVelocityInLocalSpace : 1;                           // 0x0108:3 (0x0001)  
	bool                                               bForceSubStepping : 1;                                      // 0x0108:4 (0x0001)  
	bool                                               bSimulationEnabled : 1;                                     // 0x0108:5 (0x0001)  
	bool                                               bSweepCollision : 1;                                        // 0x0108:6 (0x0001)  
	bool                                               bIsHomingProjectile : 1;                                    // 0x0108:7 (0x0001)  
	bool                                               bBounceAngleAffectsFriction : 1;                            // 0x0109:0 (0x0001)  
	bool                                               bIsSliding : 1;                                             // 0x0109:1 (0x0001)  
	bool                                               bInterpMovement : 1;                                        // 0x0109:2 (0x0001)  
	bool                                               bInterpRotation : 1;                                        // 0x0109:3 (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x010A   (0x0002)  MISSED
	float                                              PreviousHitTime;                                            // 0x010C   (0x0004)  
	FVector                                            PreviousHitNormal;                                          // 0x0110   (0x000C)  
	float                                              ProjectileGravityScale;                                     // 0x011C   (0x0004)  
	float                                              Buoyancy;                                                   // 0x0120   (0x0004)  
	float                                              Bounciness;                                                 // 0x0124   (0x0004)  
	float                                              Friction;                                                   // 0x0128   (0x0004)  
	float                                              BounceVelocityStopSimulatingThreshold;                      // 0x012C   (0x0004)  
	float                                              MinFrictionFraction;                                        // 0x0130   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	FMulticastInlineDelegate                           OnProjectileBounce;                                         // 0x0138   (0x0010)  
	FMulticastInlineDelegate                           OnProjectileStop;                                           // 0x0148   (0x0010)  
	float                                              HomingAccelerationMagnitude;                                // 0x0158   (0x0004)  
	TWeakObjectPtr<class USceneComponent*>             HomingTargetComponent;                                      // 0x015C   (0x0008)  
	float                                              MaxSimulationTimeStep;                                      // 0x0164   (0x0004)  
	int32_t                                            MaxSimulationIterations;                                    // 0x0168   (0x0004)  
	int32_t                                            BounceAdditionalIterations;                                 // 0x016C   (0x0004)  
	float                                              InterpLocationTime;                                         // 0x0170   (0x0004)  
	float                                              InterpRotationTime;                                         // 0x0174   (0x0004)  
	float                                              InterpLocationMaxLagDistance;                               // 0x0178   (0x0004)  
	float                                              InterpLocationSnapToTargetDistance;                         // 0x017C   (0x0004)  
	unsigned char                                      UnknownData05_7[0x60];                                      // 0x0180   (0x0060)  MISSED

	/// Functions
	// Function /Script/Engine.ProjectileMovementComponent.StopSimulating
	constexpr static const FunctionPointer<UProjectileMovementComponent, void, const FHitResult&> StopSimulating = { 0x49333d0, 0 }; 
	// Function /Script/Engine.ProjectileMovementComponent.SetVelocityInLocalSpace
	constexpr static const FunctionPointer<UProjectileMovementComponent, void, const FVector> SetVelocityInLocalSpace = { 0x49334f0, 1 }; 
	// Function /Script/Engine.ProjectileMovementComponent.SetInterpolatedComponent
	constexpr static const FunctionPointer<UProjectileMovementComponent, void, const USceneComponent*> SetInterpolatedComponent = { 0x49332f0, 2 }; 
	// Function /Script/Engine.ProjectileMovementComponent.ResetInterpolation
	constexpr static const FunctionPointer<UProjectileMovementComponent, void> ResetInterpolation = { 0x3837ba0, 3 }; 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileStopDelegate__DelegateSignature
	constexpr static const FunctionPointer<UProjectileMovementComponent, void, const FHitResult&> OnProjectileStopDelegate__DelegateSignature = { 0x2bbb090, 4 }; 
	// Function /Script/Engine.ProjectileMovementComponent.OnProjectileBounceDelegate__DelegateSignature
	constexpr static const FunctionPointer<UProjectileMovementComponent, void, const FHitResult&, const FVector&> OnProjectileBounceDelegate__DelegateSignature = { 0x2bbb090, 5 }; 
	// Function /Script/Engine.ProjectileMovementComponent.MoveInterpolationTarget
	constexpr static const FunctionPointer<UProjectileMovementComponent, void, const FVector&, const FRotator&> MoveInterpolationTarget = { 0x4933170, 6 }; 
	// Function /Script/Engine.ProjectileMovementComponent.LimitVelocity
	constexpr static const FunctionPointer<UProjectileMovementComponent, FVector, const FVector> LimitVelocity = { 0x4933040, 7 }; 
	// Function /Script/Engine.ProjectileMovementComponent.IsVelocityUnderSimulationThreshold
	constexpr static const FunctionPointer<UProjectileMovementComponent, bool> IsVelocityUnderSimulationThreshold = { 0x49335d0, 8 }; 
	// Function /Script/Engine.ProjectileMovementComponent.IsInterpolationComplete
	constexpr static const FunctionPointer<UProjectileMovementComponent, bool> IsInterpolationComplete = { 0x4933140, 9 }; 
};

/// Class /Script/Engine.ProxyLODMeshSimplificationSettings
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align n/a MaxSize: 0x0040
class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              ProxyLODMeshReductionModuleName;                            // 0x0038   (0x0008)  
};

/// Class /Script/Engine.RadialForceActor
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ARadialForceActor : public ARigidBodyBase
{ 
public:
	class URadialForceComponent*                       ForceComponent;                                             // 0x02C8   (0x0008)  

	/// Functions
	// Function /Script/Engine.RadialForceActor.ToggleForce
	constexpr static const FunctionPointer<ARadialForceActor, void> ToggleForce = { 0x48c0890, 0 }; 
	// Function /Script/Engine.RadialForceActor.FireImpulse
	constexpr static const FunctionPointer<ARadialForceActor, void> FireImpulse = { 0x47887a0, 1 }; 
	// Function /Script/Engine.RadialForceActor.EnableForce
	constexpr static const FunctionPointer<ARadialForceActor, void> EnableForce = { 0x477be50, 2 }; 
	// Function /Script/Engine.RadialForceActor.DisableForce
	constexpr static const FunctionPointer<ARadialForceActor, void> DisableForce = { 0x48c08b0, 3 }; 
};

/// Class /Script/Engine.RectLight
/// Size: 0x02E0 (736 bytes) (0x0002D8 - 0x0002E0) align n/a MaxSize: 0x02E0
class ARectLight : public ALight
{ 
public:
	class URectLightComponent*                         RectLightComponent;                                         // 0x02D8   (0x0008)  
};

/// Class /Script/Engine.RectLightComponent
/// Size: 0x0420 (1056 bytes) (0x0003F0 - 0x000420) align n/a MaxSize: 0x0420
class URectLightComponent : public ULocalLightComponent
{ 
public:
	float                                              SourceWidth;                                                // 0x03F0   (0x0004)  
	float                                              SourceHeight;                                               // 0x03F4   (0x0004)  
	float                                              BarnDoorAngle;                                              // 0x03F8   (0x0004)  
	float                                              BarnDoorLength;                                             // 0x03FC   (0x0004)  
	class UTexture*                                    SourceTexture;                                              // 0x0400   (0x0008)  
	bool                                               bSBSteamDeckOptimizeLight;                                  // 0x0408   (0x0001)  
	unsigned char                                      UnknownData01_7[0x17];                                      // 0x0409   (0x0017)  MISSED

	/// Functions
	// Function /Script/Engine.RectLightComponent.SetSourceWidth
	constexpr static const FunctionPointer<URectLightComponent, void, const float> SetSourceWidth = { 0x4935850, 0 }; 
	// Function /Script/Engine.RectLightComponent.SetSourceTexture
	constexpr static const FunctionPointer<URectLightComponent, void, const UTexture*> SetSourceTexture = { 0x4935950, 1 }; 
	// Function /Script/Engine.RectLightComponent.SetSourceHeight
	constexpr static const FunctionPointer<URectLightComponent, void, const float> SetSourceHeight = { 0x491fad0, 2 }; 
	// Function /Script/Engine.RectLightComponent.SetBarnDoorLength
	constexpr static const FunctionPointer<URectLightComponent, void, const float> SetBarnDoorLength = { 0x4935610, 3 }; 
	// Function /Script/Engine.RectLightComponent.SetBarnDoorAngle
	constexpr static const FunctionPointer<URectLightComponent, void, const float> SetBarnDoorAngle = { 0x4935720, 4 }; 
};

/// Class /Script/Engine.RendererSettings
/// Size: 0x0140 (320 bytes) (0x000038 - 0x000140) align n/a MaxSize: 0x0140
class URendererSettings : public UDeveloperSettings
{ 
public:
	bool                                               bMobileDisableVertexFog : 1;                                // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData28_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	int32_t                                            MaxMobileCascades;                                          // 0x003C   (0x0004)  
	TEnumAsByte<EMobileMSAASampleCount>                MobileMSAASampleCount;                                      // 0x0040   (0x0001)  
	unsigned char                                      UnknownData29_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	bool                                               bMobileAllowDitheredLODTransition : 1;                      // 0x0044:0 (0x0001)  
	bool                                               bMobileAllowSoftwareOcclusionCulling : 1;                   // 0x0044:1 (0x0001)  
	bool                                               bMobileVirtualTextures : 1;                                 // 0x0044:2 (0x0001)  
	bool                                               bDiscardUnusedQualityLevels : 1;                            // 0x0044:3 (0x0001)  
	bool                                               bOcclusionCulling : 1;                                      // 0x0044:4 (0x0001)  
	unsigned char                                      UnknownData30_5[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              MinScreenRadiusForLights;                                   // 0x0048   (0x0004)  
	float                                              MinScreenRadiusForEarlyZPass;                               // 0x004C   (0x0004)  
	float                                              MinScreenRadiusForCSMdepth;                                 // 0x0050   (0x0004)  
	bool                                               bPrecomputedVisibilityWarning : 1;                          // 0x0054:0 (0x0001)  
	bool                                               bTextureStreaming : 1;                                      // 0x0054:1 (0x0001)  
	bool                                               bUseDXT5NormalMaps : 1;                                     // 0x0054:2 (0x0001)  
	bool                                               bVirtualTextures : 1;                                       // 0x0054:3 (0x0001)  
	bool                                               bVirtualTexturedLightmaps : 1;                              // 0x0054:4 (0x0001)  
	unsigned char                                      UnknownData31_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	uint32_t                                           VirtualTextureTileSize;                                     // 0x0058   (0x0004)  
	uint32_t                                           VirtualTextureTileBorderSize;                               // 0x005C   (0x0004)  
	uint32_t                                           VirtualTextureFeedbackFactor;                               // 0x0060   (0x0004)  
	bool                                               bVirtualTextureEnableCompressZlib : 1;                      // 0x0064:0 (0x0001)  
	bool                                               bVirtualTextureEnableCompressCrunch : 1;                    // 0x0064:1 (0x0001)  
	bool                                               bClearCoatEnableSecondNormal : 1;                           // 0x0064:2 (0x0001)  
	unsigned char                                      UnknownData32_5[0x3];                                       // 0x0065   (0x0003)  MISSED
	int32_t                                            ReflectionCaptureResolution;                                // 0x0068   (0x0004)  
	bool                                               bReflectionCaptureCompression : 1;                          // 0x006C:0 (0x0001)  
	bool                                               ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;       // 0x006C:1 (0x0001)  
	bool                                               bForwardShading : 1;                                        // 0x006C:2 (0x0001)  
	bool                                               bVertexFoggingForOpaque : 1;                                // 0x006C:3 (0x0001)  
	bool                                               bAllowStaticLighting : 1;                                   // 0x006C:4 (0x0001)  
	bool                                               bUseNormalMapsForStaticLighting : 1;                        // 0x006C:5 (0x0001)  
	bool                                               bGenerateMeshDistanceFields : 1;                            // 0x006C:6 (0x0001)  
	bool                                               bEightBitMeshDistanceFields : 1;                            // 0x006C:7 (0x0001)  
	bool                                               bGenerateLandscapeGIData : 1;                               // 0x006D:0 (0x0001)  
	bool                                               bCompressMeshDistanceFields : 1;                            // 0x006D:1 (0x0001)  
	unsigned char                                      UnknownData33_5[0x2];                                       // 0x006E   (0x0002)  MISSED
	float                                              TessellationAdaptivePixelsPerTriangle;                      // 0x0070   (0x0004)  
	bool                                               bSeparateTranslucency : 1;                                  // 0x0074:0 (0x0001)  
	unsigned char                                      UnknownData34_5[0x3];                                       // 0x0075   (0x0003)  MISSED
	TEnumAsByte<ETranslucentSortPolicy>                TranslucentSortPolicy;                                      // 0x0078   (0x0001)  
	unsigned char                                      UnknownData35_6[0x3];                                       // 0x0079   (0x0003)  MISSED
	FVector                                            TranslucentSortAxis;                                        // 0x007C   (0x000C)  
	TEnumAsByte<ECustomDepthStencil>                   CustomDepthStencil;                                         // 0x0088   (0x0001)  
	unsigned char                                      UnknownData36_6[0x3];                                       // 0x0089   (0x0003)  MISSED
	bool                                               bCustomDepthTaaJitter : 1;                                  // 0x008C:0 (0x0001)  
	unsigned char                                      UnknownData37_5[0x3];                                       // 0x008D   (0x0003)  MISSED
	TEnumAsByte<EAlphaChannelMode>                     bEnableAlphaChannelInPostProcessing;                        // 0x0090   (0x0001)  
	unsigned char                                      UnknownData38_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	bool                                               bDefaultFeatureBloom : 1;                                   // 0x0094:0 (0x0001)  
	bool                                               bDefaultFeatureAmbientOcclusion : 1;                        // 0x0094:1 (0x0001)  
	bool                                               bDefaultFeatureAmbientOcclusionStaticFraction : 1;          // 0x0094:2 (0x0001)  
	bool                                               bDefaultFeatureAutoExposure : 1;                            // 0x0094:3 (0x0001)  
	unsigned char                                      UnknownData39_5[0x3];                                       // 0x0095   (0x0003)  MISSED
	TEnumAsByte<EAutoExposureMethodUI>                 DefaultFeatureAutoExposure;                                 // 0x0098   (0x0001)  
	unsigned char                                      UnknownData40_6[0x3];                                       // 0x0099   (0x0003)  MISSED
	float                                              DefaultFeatureAutoExposureBias;                             // 0x009C   (0x0004)  
	bool                                               bExtendDefaultLuminanceRangeInAutoExposureSettings : 1;     // 0x00A0:0 (0x0001)  
	bool                                               bUsePreExposure : 1;                                        // 0x00A0:1 (0x0001)  
	bool                                               bEnablePreExposureOnlyInTheEditor : 1;                      // 0x00A0:2 (0x0001)  
	bool                                               bDefaultFeatureMotionBlur : 1;                              // 0x00A0:3 (0x0001)  
	bool                                               bDefaultFeatureLensFlare : 1;                               // 0x00A0:4 (0x0001)  
	bool                                               bTemporalUpsampling : 1;                                    // 0x00A0:5 (0x0001)  
	bool                                               bSSGI : 1;                                                  // 0x00A0:6 (0x0001)  
	unsigned char                                      UnknownData41_5[0x3];                                       // 0x00A1   (0x0003)  MISSED
	TEnumAsByte<EAntiAliasingMethod>                   DefaultFeatureAntiAliasing;                                 // 0x00A4   (0x0001)  
	ELightUnits                                        DefaultLightUnits;                                          // 0x00A5   (0x0001)  
	TEnumAsByte<EDefaultBackBufferPixelFormat>         DefaultBackBufferPixelFormat;                               // 0x00A6   (0x0001)  
	unsigned char                                      UnknownData42_6[0x1];                                       // 0x00A7   (0x0001)  MISSED
	bool                                               bRenderUnbuiltPreviewShadowsInGame : 1;                     // 0x00A8:0 (0x0001)  
	bool                                               bStencilForLODDither : 1;                                   // 0x00A8:1 (0x0001)  
	unsigned char                                      UnknownData43_5[0x3];                                       // 0x00A9   (0x0003)  MISSED
	TEnumAsByte<EEarlyZPass>                           EarlyZPass;                                                 // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData44_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	bool                                               bEarlyZPassOnlyMaterialMasking : 1;                         // 0x00B0:0 (0x0001)  
	bool                                               bDBuffer : 1;                                               // 0x00B0:1 (0x0001)  
	unsigned char                                      UnknownData45_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	TEnumAsByte<EClearSceneOptions>                    ClearSceneMethod;                                           // 0x00B4   (0x0001)  
	unsigned char                                      UnknownData46_6[0x3];                                       // 0x00B5   (0x0003)  MISSED
	bool                                               bBasePassOutputsVelocity : 1;                               // 0x00B8:0 (0x0001)  
	bool                                               bVertexDeformationOutputsVelocity : 1;                      // 0x00B8:1 (0x0001)  
	bool                                               bSelectiveBasePassOutputs : 1;                              // 0x00B8:2 (0x0001)  
	bool                                               bDefaultParticleCutouts : 1;                                // 0x00B8:3 (0x0001)  
	unsigned char                                      UnknownData47_5[0x3];                                       // 0x00B9   (0x0003)  MISSED
	int32_t                                            GPUSimulationTextureSizeX;                                  // 0x00BC   (0x0004)  
	int32_t                                            GPUSimulationTextureSizeY;                                  // 0x00C0   (0x0004)  
	bool                                               bGlobalClipPlane : 1;                                       // 0x00C4:0 (0x0001)  
	unsigned char                                      UnknownData48_5[0x3];                                       // 0x00C5   (0x0003)  MISSED
	TEnumAsByte<EGBufferFormat>                        GBufferFormat;                                              // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData49_6[0x3];                                       // 0x00C9   (0x0003)  MISSED
	bool                                               bUseGPUMorphTargets : 1;                                    // 0x00CC:0 (0x0001)  
	bool                                               bNvidiaAftermathEnabled : 1;                                // 0x00CC:1 (0x0001)  
	bool                                               bMultiView : 1;                                             // 0x00CC:2 (0x0001)  
	bool                                               bMobilePostProcessing : 1;                                  // 0x00CC:3 (0x0001)  
	bool                                               bMobileMultiView : 1;                                       // 0x00CC:4 (0x0001)  
	bool                                               bMobileUseHWsRGBEncoding : 1;                               // 0x00CC:5 (0x0001)  
	bool                                               bRoundRobinOcclusion : 1;                                   // 0x00CC:6 (0x0001)  
	bool                                               bODSCapture : 1;                                            // 0x00CC:7 (0x0001)  
	bool                                               bMeshStreaming : 1;                                         // 0x00CD:0 (0x0001)  
	unsigned char                                      UnknownData50_5[0x2];                                       // 0x00CE   (0x0002)  MISSED
	float                                              WireframeCullThreshold;                                     // 0x00D0   (0x0004)  
	bool                                               bEnableRayTracing : 1;                                      // 0x00D4:0 (0x0001)  
	bool                                               bEnableRayTracingTextureLOD : 1;                            // 0x00D4:1 (0x0001)  
	bool                                               bSupportStationarySkylight : 1;                             // 0x00D4:2 (0x0001)  
	bool                                               bSupportLowQualityLightmaps : 1;                            // 0x00D4:3 (0x0001)  
	bool                                               bSupportPointLightWholeSceneShadows : 1;                    // 0x00D4:4 (0x0001)  
	bool                                               bSupportAtmosphericFog : 1;                                 // 0x00D4:5 (0x0001)  
	bool                                               bSupportSkyAtmosphere : 1;                                  // 0x00D4:6 (0x0001)  
	bool                                               bSupportSkyAtmosphereAffectsHeightFog : 1;                  // 0x00D4:7 (0x0001)  
	bool                                               bSupportSkinCacheShaders : 1;                               // 0x00D5:0 (0x0001)  
	unsigned char                                      UnknownData51_5[0x2];                                       // 0x00D6   (0x0002)  MISSED
	ESkinCacheDefaultBehavior                          DefaultSkinCacheBehavior;                                   // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData52_6[0x3];                                       // 0x00D9   (0x0003)  MISSED
	float                                              SkinCacheSceneMemoryLimitInMB;                              // 0x00DC   (0x0004)  
	bool                                               bMobileEnableStaticAndCSMShadowReceivers : 1;               // 0x00E0:0 (0x0001)  
	bool                                               bMobileEnableMovableLightCSMShaderCulling : 1;              // 0x00E0:1 (0x0001)  
	bool                                               bMobileAllowDistanceFieldShadows : 1;                       // 0x00E0:2 (0x0001)  
	bool                                               bMobileAllowMovableDirectionalLights : 1;                   // 0x00E0:3 (0x0001)  
	unsigned char                                      UnknownData53_5[0x3];                                       // 0x00E1   (0x0003)  MISSED
	uint32_t                                           MobileNumDynamicPointLights;                                // 0x00E4   (0x0004)  
	bool                                               bMobileDynamicPointLightsUseStaticBranch : 1;               // 0x00E8:0 (0x0001)  
	bool                                               bMobileAllowMovableSpotlights : 1;                          // 0x00E8:1 (0x0001)  
	bool                                               bMobileAllowMovableSpotlightShadows : 1;                    // 0x00E8:2 (0x0001)  
	bool                                               bSupport16BitBoneIndex : 1;                                 // 0x00E8:3 (0x0001)  
	bool                                               bGPUSkinLimit2BoneInfluences : 1;                           // 0x00E8:4 (0x0001)  
	bool                                               bSupportDepthOnlyIndexBuffers : 1;                          // 0x00E8:5 (0x0001)  
	bool                                               bSupportReversedIndexBuffers : 1;                           // 0x00E8:6 (0x0001)  
	bool                                               bLPV : 1;                                                   // 0x00E8:7 (0x0001)  
	bool                                               bMobileAmbientOcclusion : 1;                                // 0x00E9:0 (0x0001)  
	bool                                               bUseUnlimitedBoneInfluences : 1;                            // 0x00E9:1 (0x0001)  
	unsigned char                                      UnknownData54_5[0x2];                                       // 0x00EA   (0x0002)  MISSED
	int32_t                                            UnlimitedBonInfluencesThreshold;                            // 0x00EC   (0x0004)  
	TEnumAsByte<EMobilePlanarReflectionMode>           MobilePlanarReflectionMode;                                 // 0x00F0   (0x0001)  
	FPerPlatformBool                                   bStreamSkeletalMeshLODs;                                    // 0x00F1   (0x0001)  
	FPerPlatformBool                                   bDiscardSkeletalMeshOptionalLODs;                           // 0x00F2   (0x0001)  
	unsigned char                                      UnknownData55_6[0x5];                                       // 0x00F3   (0x0005)  MISSED
	FSoftObjectPath                                    VisualizeCalibrationColorMaterialPath;                      // 0x00F8   (0x0018)  
	FSoftObjectPath                                    VisualizeCalibrationCustomMaterialPath;                     // 0x0110   (0x0018)  
	FSoftObjectPath                                    VisualizeCalibrationGrayscaleMaterialPath;                  // 0x0128   (0x0018)  
};

/// Class /Script/Engine.RendererOverrideSettings
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align n/a MaxSize: 0x0040
class URendererOverrideSettings : public UDeveloperSettings
{ 
public:
	bool                                               bSupportAllShaderPermutations : 1;                          // 0x0038:0 (0x0001)  
	bool                                               bForceRecomputeTangents : 1;                                // 0x0038:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Class /Script/Engine.ReplayNetConnection
/// Size: 0x22F0 (8944 bytes) (0x001AF0 - 0x0022F0) align n/a MaxSize: 0x22F0
class UReplayNetConnection : public UNetConnection
{ 
public:
	unsigned char                                      UnknownData01_1[0x800];                                     // 0x1AF0   (0x0800)  MISSED
};

/// Class /Script/Engine.ReplaySubsystem
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UReplaySubsystem : public UGameInstanceSubsystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0030   (0x0008)  MISSED
};

/// Class /Script/Engine.ReplicationDriver
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UReplicationDriver : public UObject
{ 
public:
};

/// Class /Script/Engine.ReplicationConnectionDriver
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UReplicationConnectionDriver : public UObject
{ 
public:
};

/// Class /Script/Engine.ReporterBase
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UReporterBase : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Class /Script/Engine.ReporterGraph
/// Size: 0x00A8 (168 bytes) (0x000030 - 0x0000A8) align n/a MaxSize: 0x00A8
class UReporterGraph : public UReporterBase
{ 
public:
	unsigned char                                      UnknownData01_1[0x78];                                      // 0x0030   (0x0078)  MISSED
};

/// Class /Script/Engine.ReverbEffect
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000060) align n/a MaxSize: 0x0060
class UReverbEffect : public UObject
{ 
public:
	bool                                               bBypassEarlyReflections;                                    // 0x0028   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              ReflectionsDelay;                                           // 0x002C   (0x0004)  
	float                                              GainHF;                                                     // 0x0030   (0x0004)  
	float                                              ReflectionsGain;                                            // 0x0034   (0x0004)  
	bool                                               bBypassLateReflections;                                     // 0x0038   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              LateDelay;                                                  // 0x003C   (0x0004)  
	float                                              DecayTime;                                                  // 0x0040   (0x0004)  
	float                                              Density;                                                    // 0x0044   (0x0004)  
	float                                              Diffusion;                                                  // 0x0048   (0x0004)  
	float                                              AirAbsorptionGainHF;                                        // 0x004C   (0x0004)  
	float                                              DecayHFRatio;                                               // 0x0050   (0x0004)  
	float                                              LateGain;                                                   // 0x0054   (0x0004)  
	float                                              Gain;                                                       // 0x0058   (0x0004)  
	float                                              RoomRolloffFactor;                                          // 0x005C   (0x0004)  
};

/// Struct /Script/Engine.RigTransformConstraint
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FRigTransformConstraint
{ 
	TEnumAsByte<EConstraintTransform>                  TranformType;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              ParentSpace;                                                // 0x0004   (0x0008)  
	float                                              Weight;                                                     // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.TransformBaseConstraint
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FTransformBaseConstraint
{ 
	TArray<FRigTransformConstraint>                    TransformConstraints;                                       // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.TransformBase
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FTransformBase
{ 
	FName                                              Node;                                                       // 0x0000   (0x0008)  
	FTransformBaseConstraint                           Constraints[2];                                             // 0x0008   (0x0020)  
};

/// Struct /Script/Engine.Node
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FNode
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	FName                                              ParentName;                                                 // 0x0008   (0x0008)  
	FTransform                                         Transform;                                                  // 0x0010   (0x0030)  
	FString                                            DisplayName;                                                // 0x0040   (0x0010)  
	bool                                               bAdvanced;                                                  // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_7[0xF];                                       // 0x0051   (0x000F)  MISSED
};

/// Class /Script/Engine.Rig
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class URig : public UObject
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	TArray<FTransformBase>                             TransformBases;                                             // 0x0030   (0x0010)  
	TArray<FNode>                                      Nodes;                                                      // 0x0040   (0x0010)  
};

/// Class /Script/Engine.RotatingMovementComponent
/// Size: 0x0120 (288 bytes) (0x000100 - 0x000120) align n/a MaxSize: 0x0120
class URotatingMovementComponent : public UMovementComponent
{ 
public:
	FRotator                                           RotationRate;                                               // 0x0100   (0x000C)  
	FVector                                            PivotTranslation;                                           // 0x010C   (0x000C)  
	bool                                               bRotationInLocalSpace : 1;                                  // 0x0118:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0119   (0x0007)  MISSED
};

/// Class /Script/Engine.RuntimeOptionsBase
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class URuntimeOptionsBase : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0028   (0x0010)  MISSED
};

/// Class /Script/Engine.RuntimeVirtualTexture
/// Size: 0x00A0 (160 bytes) (0x000028 - 0x0000A0) align n/a MaxSize: 0x00A0
class URuntimeVirtualTexture : public UObject
{ 
public:
	int32_t                                            TileCount;                                                  // 0x0028   (0x0004)  
	int32_t                                            TileSize;                                                   // 0x002C   (0x0004)  
	int32_t                                            TileBorderSize;                                             // 0x0030   (0x0004)  
	ERuntimeVirtualTextureMaterialType                 MaterialType;                                               // 0x0034   (0x0001)  
	bool                                               bCompressTextures;                                          // 0x0035   (0x0001)  
	bool                                               bClearTextures;                                             // 0x0036   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x0037   (0x0001)  
	bool                                               bPrivateSpace;                                              // 0x0038   (0x0001)  
	bool                                               bAdaptive;                                                  // 0x0039   (0x0001)  
	bool                                               bContinuousUpdate;                                          // 0x003A   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x003B   (0x0001)  MISSED
	int32_t                                            RemoveLowMips;                                              // 0x003C   (0x0004)  
	TEnumAsByte<TextureGroup>                          LODGroup;                                                   // 0x0040   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0041   (0x0003)  MISSED
	int32_t                                            Size;                                                       // 0x0044   (0x0004)  
	class URuntimeVirtualTextureStreamingProxy*        StreamingTexture;                                           // 0x0048   (0x0008)  
	unsigned char                                      UnknownData05_7[0x50];                                      // 0x0050   (0x0050)  MISSED

	/// Functions
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileSize
	constexpr static const FunctionPointer<URuntimeVirtualTexture, int32_t> GetTileSize = { 0x493c450, 0 }; 
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileCount
	constexpr static const FunctionPointer<URuntimeVirtualTexture, int32_t> GetTileCount = { 0x493c4a0, 1 }; 
	// Function /Script/Engine.RuntimeVirtualTexture.GetTileBorderSize
	constexpr static const FunctionPointer<URuntimeVirtualTexture, int32_t> GetTileBorderSize = { 0x493c410, 2 }; 
	// Function /Script/Engine.RuntimeVirtualTexture.GetSize
	constexpr static const FunctionPointer<URuntimeVirtualTexture, int32_t> GetSize = { 0x493c390, 3 }; 
	// Function /Script/Engine.RuntimeVirtualTexture.GetPageTableSize
	constexpr static const FunctionPointer<URuntimeVirtualTexture, int32_t> GetPageTableSize = { 0x493c310, 4 }; 
};

/// Class /Script/Engine.RuntimeVirtualTextureComponent
/// Size: 0x02E0 (736 bytes) (0x000260 - 0x0002E0) align n/a MaxSize: 0x02E0
class URuntimeVirtualTextureComponent : public USceneComponent
{ 
public:
	TWeakObjectPtr<class AActor*>                      BoundsAlignActor;                                           // 0x0260   (0x0008)  
	unsigned char                                      UnknownData05_6[0x20];                                      // 0x0268   (0x0020)  MISSED
	bool                                               bSetBoundsButton;                                           // 0x0288   (0x0001)  
	bool                                               bSnapBoundsToLandscape;                                     // 0x0289   (0x0001)  
	unsigned char                                      UnknownData06_6[0x6];                                       // 0x028A   (0x0006)  MISSED
	class URuntimeVirtualTexture*                      VirtualTexture;                                             // 0x0290   (0x0008)  
	bool                                               bEnableScalability;                                         // 0x0298   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0299   (0x0003)  MISSED
	uint32_t                                           ScalabilityGroup;                                           // 0x029C   (0x0004)  
	bool                                               bHidePrimitives;                                            // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData08_6[0x7];                                       // 0x02A1   (0x0007)  MISSED
	class UVirtualTextureBuilder*                      StreamingTexture;                                           // 0x02A8   (0x0008)  
	int32_t                                            StreamLowMips;                                              // 0x02B0   (0x0004)  
	bool                                               bBuildStreamingMipsButton;                                  // 0x02B4   (0x0001)  
	bool                                               bEnableCompressCrunch;                                      // 0x02B5   (0x0001)  
	bool                                               bUseStreamingLowMipsInEditor;                               // 0x02B6   (0x0001)  
	bool                                               bBuildDebugStreamingMips;                                   // 0x02B7   (0x0001)  
	unsigned char                                      UnknownData09_7[0x28];                                      // 0x02B8   (0x0028)  MISSED

	/// Functions
	// Function /Script/Engine.RuntimeVirtualTextureComponent.Invalidate
	constexpr static const FunctionPointer<URuntimeVirtualTextureComponent, void, const FBoxSphereBounds&> Invalidate = { 0x493c930, 0 }; 
};

/// Class /Script/Engine.RuntimeVirtualTextureVolume
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ARuntimeVirtualTextureVolume : public AActor
{ 
public:
	class URuntimeVirtualTextureComponent*             VirtualTextureComponent;                                    // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.RVOAvoidanceInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class URVOAvoidanceInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.Scene
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UScene : public UObject
{ 
public:
};

/// Class /Script/Engine.SceneCapture2D
/// Size: 0x02E0 (736 bytes) (0x0002D8 - 0x0002E0) align n/a MaxSize: 0x02E0
class ASceneCapture2D : public ASceneCapture
{ 
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                         // 0x02D8   (0x0008)  

	/// Functions
	// Function /Script/Engine.SceneCapture2D.OnInterpToggle
	constexpr static const FunctionPointer<ASceneCapture2D, void, const bool> OnInterpToggle = { 0x49062b0, 0 }; 
};

/// Class /Script/Engine.SceneCaptureComponentCube
/// Size: 0x0350 (848 bytes) (0x000320 - 0x000350) align n/a MaxSize: 0x0350
class USceneCaptureComponentCube : public USceneCaptureComponent
{ 
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                              // 0x0320   (0x0008)  
	bool                                               bCaptureRotation;                                           // 0x0328   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0329   (0x0007)  MISSED
	class UTextureRenderTargetCube*                    TextureTargetLeft;                                          // 0x0330   (0x0008)  
	class UTextureRenderTargetCube*                    TextureTargetRight;                                         // 0x0338   (0x0008)  
	class UTextureRenderTarget2D*                      TextureTargetODS;                                           // 0x0340   (0x0008)  
	float                                              IPD;                                                        // 0x0348   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x034C   (0x0004)  MISSED

	/// Functions
	// Function /Script/Engine.SceneCaptureComponentCube.CaptureScene
	constexpr static const FunctionPointer<USceneCaptureComponentCube, void> CaptureScene = { 0x4943850, 0 }; 
};

/// Class /Script/Engine.SceneCaptureCube
/// Size: 0x02E0 (736 bytes) (0x0002D8 - 0x0002E0) align n/a MaxSize: 0x02E0
class ASceneCaptureCube : public ASceneCapture
{ 
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                       // 0x02D8   (0x0008)  

	/// Functions
	// Function /Script/Engine.SceneCaptureCube.OnInterpToggle
	constexpr static const FunctionPointer<ASceneCaptureCube, void, const bool> OnInterpToggle = { 0x49062b0, 0 }; 
};

/// Struct /Script/Engine.BPVariableMetaDataEntry
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FBPVariableMetaDataEntry
{ 
	FName                                              DataKey;                                                    // 0x0000   (0x0008)  
	FString                                            DataValue;                                                  // 0x0008   (0x0010)  
};

/// Class /Script/Engine.SCS_Node
/// Size: 0x00D8 (216 bytes) (0x000028 - 0x0000D8) align n/a MaxSize: 0x00D8
class USCS_Node : public UObject
{ 
public:
	class UClass*                                      ComponentClass;                                             // 0x0028   (0x0008)  
	class UActorComponent*                             ComponentTemplate;                                          // 0x0030   (0x0008)  
	FBlueprintCookedComponentInstancingData            CookedComponentInstancingData;                              // 0x0038   (0x0048)  
	FName                                              AttachToName;                                               // 0x0080   (0x0008)  
	FName                                              ParentComponentOrVariableName;                              // 0x0088   (0x0008)  
	FName                                              ParentComponentOwnerClassName;                              // 0x0090   (0x0008)  
	bool                                               bIsParentComponentNative;                                   // 0x0098   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0099   (0x0007)  MISSED
	TArray<class USCS_Node*>                           ChildNodes;                                                 // 0x00A0   (0x0010)  
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x00B0   (0x0010)  
	FGuid                                              VariableGuid;                                               // 0x00C0   (0x0010)  
	FName                                              InternalVariableName;                                       // 0x00D0   (0x0008)  
};

/// Class /Script/Engine.Selection
/// Size: 0x00A0 (160 bytes) (0x000028 - 0x0000A0) align n/a MaxSize: 0x00A0
class USelection : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x78];                                      // 0x0028   (0x0078)  MISSED
};

/// Class /Script/Engine.ServerStatReplicator
/// Size: 0x0390 (912 bytes) (0x0002C8 - 0x000390) align n/a MaxSize: 0x0390
class AServerStatReplicator : public AInfo
{ 
public:
	bool                                               bUpdateStatNet;                                             // 0x02C8   (0x0001)  
	bool                                               bOverwriteClientStats;                                      // 0x02C9   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x02CA   (0x0002)  MISSED
	uint32_t                                           Channels;                                                   // 0x02CC   (0x0004)  
	uint32_t                                           InRate;                                                     // 0x02D0   (0x0004)  
	uint32_t                                           OutRate;                                                    // 0x02D4   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x02D8   (0x0004)  MISSED
	uint32_t                                           MaxPacketOverhead;                                          // 0x02DC   (0x0004)  
	uint32_t                                           InRateClientMax;                                            // 0x02E0   (0x0004)  
	uint32_t                                           InRateClientMin;                                            // 0x02E4   (0x0004)  
	uint32_t                                           InRateClientAvg;                                            // 0x02E8   (0x0004)  
	uint32_t                                           InPacketsClientMax;                                         // 0x02EC   (0x0004)  
	uint32_t                                           InPacketsClientMin;                                         // 0x02F0   (0x0004)  
	uint32_t                                           InPacketsClientAvg;                                         // 0x02F4   (0x0004)  
	uint32_t                                           OutRateClientMax;                                           // 0x02F8   (0x0004)  
	uint32_t                                           OutRateClientMin;                                           // 0x02FC   (0x0004)  
	uint32_t                                           OutRateClientAvg;                                           // 0x0300   (0x0004)  
	uint32_t                                           OutPacketsClientMax;                                        // 0x0304   (0x0004)  
	uint32_t                                           OutPacketsClientMin;                                        // 0x0308   (0x0004)  
	uint32_t                                           OutPacketsClientAvg;                                        // 0x030C   (0x0004)  
	uint32_t                                           NetNumClients;                                              // 0x0310   (0x0004)  
	uint32_t                                           InPackets;                                                  // 0x0314   (0x0004)  
	uint32_t                                           OutPackets;                                                 // 0x0318   (0x0004)  
	uint32_t                                           InBunches;                                                  // 0x031C   (0x0004)  
	uint32_t                                           OutBunches;                                                 // 0x0320   (0x0004)  
	uint32_t                                           OutLoss;                                                    // 0x0324   (0x0004)  
	uint32_t                                           InLoss;                                                     // 0x0328   (0x0004)  
	uint32_t                                           VoiceBytesSent;                                             // 0x032C   (0x0004)  
	uint32_t                                           VoiceBytesRecv;                                             // 0x0330   (0x0004)  
	uint32_t                                           VoicePacketsSent;                                           // 0x0334   (0x0004)  
	uint32_t                                           VoicePacketsRecv;                                           // 0x0338   (0x0004)  
	uint32_t                                           PercentInVoice;                                             // 0x033C   (0x0004)  
	uint32_t                                           PercentOutVoice;                                            // 0x0340   (0x0004)  
	uint32_t                                           NumActorChannels;                                           // 0x0344   (0x0004)  
	uint32_t                                           NumConsideredActors;                                        // 0x0348   (0x0004)  
	uint32_t                                           PrioritizedActors;                                          // 0x034C   (0x0004)  
	uint32_t                                           NumRelevantActors;                                          // 0x0350   (0x0004)  
	uint32_t                                           NumRelevantDeletedActors;                                   // 0x0354   (0x0004)  
	uint32_t                                           NumReplicatedActorAttempts;                                 // 0x0358   (0x0004)  
	uint32_t                                           NumReplicatedActors;                                        // 0x035C   (0x0004)  
	uint32_t                                           NumActors;                                                  // 0x0360   (0x0004)  
	uint32_t                                           NumNetActors;                                               // 0x0364   (0x0004)  
	uint32_t                                           NumDormantActors;                                           // 0x0368   (0x0004)  
	uint32_t                                           NumInitiallyDormantActors;                                  // 0x036C   (0x0004)  
	uint32_t                                           NumNetGUIDsAckd;                                            // 0x0370   (0x0004)  
	uint32_t                                           NumNetGUIDsPending;                                         // 0x0374   (0x0004)  
	uint32_t                                           NumNetGUIDsUnAckd;                                          // 0x0378   (0x0004)  
	uint32_t                                           ObjPathBytes;                                               // 0x037C   (0x0004)  
	uint32_t                                           NetGUIDOutRate;                                             // 0x0380   (0x0004)  
	uint32_t                                           NetGUIDInRate;                                              // 0x0384   (0x0004)  
	uint32_t                                           NetSaturated;                                               // 0x0388   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x038C   (0x0004)  MISSED
};

/// Class /Script/Engine.ShadowMapTexture2D
/// Size: 0x0110 (272 bytes) (0x000108 - 0x000110) align n/a MaxSize: 0x0110
class UShadowMapTexture2D : public UTexture2D
{ 
public:
	TEnumAsByte<EShadowMapFlags>                       ShadowmapFlags;                                             // 0x0108   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0109   (0x0007)  MISSED
};

/// Class /Script/Engine.SimpleConstructionScript
/// Size: 0x00A0 (160 bytes) (0x000028 - 0x0000A0) align n/a MaxSize: 0x00A0
class USimpleConstructionScript : public UObject
{ 
public:
	TArray<class USCS_Node*>                           RootNodes;                                                  // 0x0028   (0x0010)  
	TArray<class USCS_Node*>                           AllNodes;                                                   // 0x0038   (0x0010)  
	class USCS_Node*                                   DefaultSceneRootNode;                                       // 0x0048   (0x0008)  
	unsigned char                                      UnknownData01_7[0x50];                                      // 0x0050   (0x0050)  MISSED
};

/// Class /Script/Engine.SkeletalMeshActor
/// Size: 0x0350 (848 bytes) (0x0002C8 - 0x000350) align n/a MaxSize: 0x0350
class ASkeletalMeshActor : public AActor
{ 
public:
	unsigned char                                      UnknownData03_8[0x8];                                       // 0x02C8   (0x0008)  MISSED
	bool                                               bShouldDoAnimNotifies : 1;                                  // 0x02D0:0 (0x0001)  
	bool                                               bWakeOnLevelStart : 1;                                      // 0x02D0:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x02D1   (0x0007)  MISSED
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                      // 0x02D8   (0x0008)  
	class USkeletalMesh*                               ReplicatedMesh;                                             // 0x02E0   (0x0008)  
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                        // 0x02E8   (0x0008)  
	class UMaterialInterface*                          ReplicatedMaterial0;                                        // 0x02F0   (0x0008)  
	class UMaterialInterface*                          ReplicatedMaterial1;                                        // 0x02F8   (0x0008)  
	unsigned char                                      UnknownData05_7[0x50];                                      // 0x0300   (0x0050)  MISSED

	/// Functions
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedPhysAsset
	constexpr static const FunctionPointer<ASkeletalMeshActor, void> OnRep_ReplicatedPhysAsset = { 0x477be50, 0 }; 
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMesh
	constexpr static const FunctionPointer<ASkeletalMeshActor, void> OnRep_ReplicatedMesh = { 0x47887a0, 1 }; 
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial1
	constexpr static const FunctionPointer<ASkeletalMeshActor, void> OnRep_ReplicatedMaterial1 = { 0x48c0890, 2 }; 
	// Function /Script/Engine.SkeletalMeshActor.OnRep_ReplicatedMaterial0
	constexpr static const FunctionPointer<ASkeletalMeshActor, void> OnRep_ReplicatedMaterial0 = { 0x48c08b0, 3 }; 
};

/// Class /Script/Engine.SkeletalMeshEditorData
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USkeletalMeshEditorData : public UObject
{ 
public:
};

/// Struct /Script/Engine.BoneFilter
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FBoneFilter
{ 
	bool                                               bExcludeSelf;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              BoneName;                                                   // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.SkeletalMeshLODGroupSettings
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align n/a MaxSize: 0x0080
struct FSkeletalMeshLODGroupSettings
{ 
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              LODHysteresis;                                              // 0x0004   (0x0004)  
	EBoneFilterActionOption                            BoneFilterActionOption;                                     // 0x0008   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0009   (0x0007)  MISSED
	TArray<FBoneFilter>                                BoneList;                                                   // 0x0010   (0x0010)  
	TArray<FName>                                      BonesToPrioritize;                                          // 0x0020   (0x0010)  
	float                                              WeightOfPrioritization;                                     // 0x0030   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0034   (0x0004)  MISSED
	class UAnimSequence*                               BakePose;                                                   // 0x0038   (0x0008)  
	FSkeletalMeshOptimizationSettings                  ReductionSettings;                                          // 0x0040   (0x003C)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x007C   (0x0004)  MISSED
};

/// Class /Script/Engine.SkeletalMeshLODSettings
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align n/a MaxSize: 0x0050
class USkeletalMeshLODSettings : public UDataAsset
{ 
public:
	FPerPlatformInt                                    MinLOD;                                                     // 0x0030   (0x0004)  
	FPerPlatformBool                                   DisableBelowMinLodStripping;                                // 0x0034   (0x0001)  
	bool                                               bOverrideLODStreamingSettings;                              // 0x0035   (0x0001)  
	FPerPlatformBool                                   bSupportLODStreaming;                                       // 0x0036   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0037   (0x0001)  MISSED
	FPerPlatformInt                                    MaxNumStreamedLODs;                                         // 0x0038   (0x0004)  
	FPerPlatformInt                                    MaxNumOptionalLODs;                                         // 0x003C   (0x0004)  
	TArray<FSkeletalMeshLODGroupSettings>              LODGroups;                                                  // 0x0040   (0x0010)  
};

/// Class /Script/Engine.SkeletalMeshSimplificationSettings
/// Size: 0x0040 (64 bytes) (0x000038 - 0x000040) align n/a MaxSize: 0x0040
class USkeletalMeshSimplificationSettings : public UDeveloperSettings
{ 
public:
	FName                                              SkeletalMeshReductionModuleName;                            // 0x0038   (0x0008)  
};

/// Class /Script/Engine.SkeletalMeshSocket
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000060) align n/a MaxSize: 0x0060
class USkeletalMeshSocket : public UObject
{ 
public:
	FName                                              SocketName;                                                 // 0x0028   (0x0008)  
	FName                                              BoneName;                                                   // 0x0030   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0038   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x0044   (0x000C)  
	FVector                                            RelativeScale;                                              // 0x0050   (0x000C)  
	bool                                               bForceAlwaysAnimated;                                       // 0x005C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x005D   (0x0003)  MISSED

	/// Functions
	// Function /Script/Engine.SkeletalMeshSocket.InitializeSocketFromLocation
	constexpr static const FunctionPointer<USkeletalMeshSocket, void, const USkeletalMeshComponent*, const FVector, const FVector> InitializeSocketFromLocation = { 0x495f320, 0 }; 
	// Function /Script/Engine.SkeletalMeshSocket.GetSocketLocation
	constexpr static const FunctionPointer<USkeletalMeshSocket, FVector, const USkeletalMeshComponent*> GetSocketLocation = { 0x495f600, 1 }; 
};

/// Struct /Script/Engine.TentDistribution
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FTentDistribution
{ 
	float                                              TipAltitude;                                                // 0x0000   (0x0004)  
	float                                              TipValue;                                                   // 0x0004   (0x0004)  
	float                                              Width;                                                      // 0x0008   (0x0004)  
};

/// Class /Script/Engine.SkyAtmosphereComponent
/// Size: 0x0340 (832 bytes) (0x000260 - 0x000340) align n/a MaxSize: 0x0340
class USkyAtmosphereComponent : public USceneComponent
{ 
public:
	ESkyAtmosphereTransformMode                        TransformMode;                                              // 0x0260   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0261   (0x0003)  MISSED
	float                                              BottomRadius;                                               // 0x0264   (0x0004)  
	FColor                                             GroundAlbedo;                                               // 0x0268   (0x0004)  
	float                                              AtmosphereHeight;                                           // 0x026C   (0x0004)  
	float                                              MultiScatteringFactor;                                      // 0x0270   (0x0004)  
	float                                              TraceSampleCountScale;                                      // 0x0274   (0x0004)  
	float                                              RayleighScatteringScale;                                    // 0x0278   (0x0004)  
	FLinearColor                                       RayleighScattering;                                         // 0x027C   (0x0010)  
	float                                              RayleighExponentialDistribution;                            // 0x028C   (0x0004)  
	float                                              MieScatteringScale;                                         // 0x0290   (0x0004)  
	FLinearColor                                       MieScattering;                                              // 0x0294   (0x0010)  
	float                                              MieAbsorptionScale;                                         // 0x02A4   (0x0004)  
	FLinearColor                                       MieAbsorption;                                              // 0x02A8   (0x0010)  
	float                                              MieAnisotropy;                                              // 0x02B8   (0x0004)  
	float                                              MieExponentialDistribution;                                 // 0x02BC   (0x0004)  
	float                                              OtherAbsorptionScale;                                       // 0x02C0   (0x0004)  
	FLinearColor                                       OtherAbsorption;                                            // 0x02C4   (0x0010)  
	FTentDistribution                                  OtherTentDistribution;                                      // 0x02D4   (0x000C)  
	FLinearColor                                       SkyLuminanceFactor;                                         // 0x02E0   (0x0010)  
	float                                              AerialPespectiveViewDistanceScale;                          // 0x02F0   (0x0004)  
	float                                              HeightFogContribution;                                      // 0x02F4   (0x0004)  
	float                                              TransmittanceMinLightElevationAngle;                        // 0x02F8   (0x0004)  
	float                                              AerialPerspectiveStartDepth;                                // 0x02FC   (0x0004)  
	unsigned char                                      UnknownData04_6[0x24];                                      // 0x0300   (0x0024)  MISSED
	FGuid                                              bStaticLightingBuiltGUID;                                   // 0x0324   (0x0010)  
	unsigned char                                      UnknownData05_7[0xC];                                       // 0x0334   (0x000C)  MISSED

	/// Functions
	// Function /Script/Engine.SkyAtmosphereComponent.SetSkyLuminanceFactor
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const FLinearColor> SetSkyLuminanceFactor = { 0x4966d10, 0 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighScatteringScale
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const float> SetRayleighScatteringScale = { 0x4967770, 1 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighScattering
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const FLinearColor> SetRayleighScattering = { 0x4967690, 2 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetRayleighExponentialDistribution
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const float> SetRayleighExponentialDistribution = { 0x4967590, 3 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetOtherAbsorptionScale
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const float> SetOtherAbsorptionScale = { 0x4966ed0, 4 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetOtherAbsorption
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const FLinearColor> SetOtherAbsorption = { 0x4966df0, 5 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieScatteringScale
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const float> SetMieScatteringScale = { 0x4967490, 6 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieScattering
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const FLinearColor> SetMieScattering = { 0x49673b0, 7 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieExponentialDistribution
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const float> SetMieExponentialDistribution = { 0x4966fd0, 8 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAnisotropy
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const float> SetMieAnisotropy = { 0x49670d0, 9 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAbsorptionScale
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const float> SetMieAbsorptionScale = { 0x49672b0, 10 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetMieAbsorption
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const FLinearColor> SetMieAbsorption = { 0x49671d0, 11 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetHeightFogContribution
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const float> SetHeightFogContribution = { 0x4966c10, 12 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.SetAerialPespectiveViewDistanceScale
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const float> SetAerialPespectiveViewDistanceScale = { 0x487a180, 13 }; 
	// Function /Script/Engine.SkyAtmosphereComponent.OverrideAtmosphereLightDirection
	constexpr static const FunctionPointer<USkyAtmosphereComponent, void, const int32_t, const FVector&> OverrideAtmosphereLightDirection = { 0x4967870, 14 }; 
};

/// Class /Script/Engine.SkyAtmosphere
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ASkyAtmosphere : public AInfo
{ 
public:
	class USkyAtmosphereComponent*                     SkyAtmosphereComponent;                                     // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.SkyLightComponent
/// Size: 0x04B0 (1200 bytes) (0x0002C0 - 0x0004B0) align n/a MaxSize: 0x04B0
class USkyLightComponent : public ULightComponentBase
{ 
public:
	bool                                               bRealTimeCapture;                                           // 0x02C0   (0x0001)  
	TEnumAsByte<ESkyLightSourceType>                   SourceType;                                                 // 0x02C1   (0x0001)  
	unsigned char                                      UnknownData05_6[0x6];                                       // 0x02C2   (0x0006)  MISSED
	class UTextureCube*                                Cubemap;                                                    // 0x02C8   (0x0008)  
	class UTextureCube*                                DynamicCubemap;                                             // 0x02D0   (0x0008)  
	float                                              SourceCubemapAngle;                                         // 0x02D8   (0x0004)  
	int32_t                                            CubemapResolution;                                          // 0x02DC   (0x0004)  
	float                                              SkyDistanceThreshold;                                       // 0x02E0   (0x0004)  
	bool                                               bCaptureEmissiveOnly;                                       // 0x02E4   (0x0001)  
	bool                                               bLowerHemisphereIsBlack;                                    // 0x02E5   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x02E6   (0x0002)  MISSED
	FLinearColor                                       LowerHemisphereColor;                                       // 0x02E8   (0x0010)  
	float                                              OcclusionMaxDistance;                                       // 0x02F8   (0x0004)  
	float                                              Contrast;                                                   // 0x02FC   (0x0004)  
	float                                              OcclusionExponent;                                          // 0x0300   (0x0004)  
	float                                              MinOcclusion;                                               // 0x0304   (0x0004)  
	FColor                                             OcclusionTint;                                              // 0x0308   (0x0004)  
	bool                                               bCloudAmbientOcclusion : 1;                                 // 0x030C:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x030D   (0x0003)  MISSED
	float                                              CloudAmbientOcclusionStrength;                              // 0x0310   (0x0004)  
	float                                              CloudAmbientOcclusionExtent;                                // 0x0314   (0x0004)  
	float                                              CloudAmbientOcclusionMapResolutionScale;                    // 0x0318   (0x0004)  
	float                                              CloudAmbientOcclusionApertureScale;                         // 0x031C   (0x0004)  
	TEnumAsByte<EOcclusionCombineMode>                 OcclusionCombineMode;                                       // 0x0320   (0x0001)  
	unsigned char                                      UnknownData08_6[0xB7];                                      // 0x0321   (0x00B7)  MISSED
	class UTextureCube*                                BlendDestinationCubemap;                                    // 0x03D8   (0x0008)  
	unsigned char                                      UnknownData09_7[0xD0];                                      // 0x03E0   (0x00D0)  MISSED

	/// Functions
	// Function /Script/Engine.SkyLightComponent.SetVolumetricScatteringIntensity
	constexpr static const FunctionPointer<USkyLightComponent, void, const float> SetVolumetricScatteringIntensity = { 0x4969240, 0 }; 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionTint
	constexpr static const FunctionPointer<USkyLightComponent, void, const FColor&> SetOcclusionTint = { 0x4968ad0, 1 }; 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionExponent
	constexpr static const FunctionPointer<USkyLightComponent, void, const float> SetOcclusionExponent = { 0x49688d0, 2 }; 
	// Function /Script/Engine.SkyLightComponent.SetOcclusionContrast
	constexpr static const FunctionPointer<USkyLightComponent, void, const float> SetOcclusionContrast = { 0x49689d0, 3 }; 
	// Function /Script/Engine.SkyLightComponent.SetMinOcclusion
	constexpr static const FunctionPointer<USkyLightComponent, void, const float> SetMinOcclusion = { 0x49687d0, 4 }; 
	// Function /Script/Engine.SkyLightComponent.SetLowerHemisphereColor
	constexpr static const FunctionPointer<USkyLightComponent, void, const FLinearColor&> SetLowerHemisphereColor = { 0x4968be0, 5 }; 
	// Function /Script/Engine.SkyLightComponent.SetLightColor
	constexpr static const FunctionPointer<USkyLightComponent, void, const FLinearColor> SetLightColor = { 0x4969120, 6 }; 
	// Function /Script/Engine.SkyLightComponent.SetIntensity
	constexpr static const FunctionPointer<USkyLightComponent, void, const float> SetIntensity = { 0x4969440, 7 }; 
	// Function /Script/Engine.SkyLightComponent.SetIndirectLightingIntensity
	constexpr static const FunctionPointer<USkyLightComponent, void, const float> SetIndirectLightingIntensity = { 0x4969340, 8 }; 
	// Function /Script/Engine.SkyLightComponent.SetDynamicCubemap
	constexpr static const FunctionPointer<USkyLightComponent, void, const UTextureCube*> SetDynamicCubemap = { 0x4968f00, 9 }; 
	// Function /Script/Engine.SkyLightComponent.SetCubemapBlend
	constexpr static const FunctionPointer<USkyLightComponent, void, const UTextureCube*, const UTextureCube*, const float> SetCubemapBlend = { 0x4968cc0, 10 }; 
	// Function /Script/Engine.SkyLightComponent.SetCubemap
	constexpr static const FunctionPointer<USkyLightComponent, void, const UTextureCube*> SetCubemap = { 0x4969010, 11 }; 
	// Function /Script/Engine.SkyLightComponent.RecaptureSky
	constexpr static const FunctionPointer<USkyLightComponent, void> RecaptureSky = { 0x49687b0, 12 }; 
	// Function /Script/Engine.SkyLightComponent.GetActiveCubemap
	constexpr static const FunctionPointer<USkyLightComponent, UTextureCube*> GetActiveCubemap = { 0x4968eb0, 13 }; 
};

/// Class /Script/Engine.SlateBrushAsset
/// Size: 0x00B8 (184 bytes) (0x000028 - 0x0000B8) align n/a MaxSize: 0x00B8
class USlateBrushAsset : public UObject
{ 
public:
	FSlateBrush                                        Brush;                                                      // 0x0028   (0x0090)  
};

/// Struct /Script/Engine.SlateBrushResourceInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSlateBrushResourceInfo
{ 
	class UObject*                                     Default;                                                    // 0x0000   (0x0008)  
	class UObject*                                     StanardKeyboard;                                            // 0x0008   (0x0008)  
	class UObject*                                     AZERTYKeyboard;                                             // 0x0010   (0x0008)  
	class UObject*                                     StanardGamepad;                                             // 0x0018   (0x0008)  
	class UObject*                                     PS4;                                                        // 0x0020   (0x0008)  
	class UObject*                                     PS5;                                                        // 0x0028   (0x0008)  
	class UObject*                                     XBox;                                                       // 0x0030   (0x0008)  
};

/// Class /Script/Engine.SlateBrushResourceAsset
/// Size: 0x0080 (128 bytes) (0x000030 - 0x000080) align n/a MaxSize: 0x0080
class USlateBrushResourceAsset : public UDataAsset
{ 
public:
	TMap<FName, FSlateBrushResourceInfo>               actions;                                                    // 0x0030   (0x0050)  
};

/// Class /Script/Engine.SlateTextureAtlasInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USlateTextureAtlasInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.SmokeTestCommandlet
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
class USmokeTestCommandlet : public UCommandlet
{ 
public:
};

/// Class /Script/Engine.SoundAttenuation
/// Size: 0x03C8 (968 bytes) (0x000028 - 0x0003C8) align n/a MaxSize: 0x03C8
class USoundAttenuation : public UObject
{ 
public:
	FSoundAttenuationSettings                          Attenuation;                                                // 0x0028   (0x03A0)  
};

/// Struct /Script/Engine.SoundClassProperties
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FSoundClassProperties
{ 
	float                                              Volume;                                                     // 0x0000   (0x0004)  
	float                                              Pitch;                                                      // 0x0004   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x0008   (0x0004)  
	float                                              AttenuationDistanceScale;                                   // 0x000C   (0x0004)  
	float                                              StereoBleed;                                                // 0x0010   (0x0004)  
	float                                              LFEBleed;                                                   // 0x0014   (0x0004)  
	float                                              VoiceCenterChannelVolume;                                   // 0x0018   (0x0004)  
	float                                              RadioFilterVolume;                                          // 0x001C   (0x0004)  
	float                                              RadioFilterVolumeThreshold;                                 // 0x0020   (0x0004)  
	bool                                               bApplyEffects : 1;                                          // 0x0024:0 (0x0001)  
	bool                                               bAlwaysPlay : 1;                                            // 0x0024:1 (0x0001)  
	bool                                               bIsUISound : 1;                                             // 0x0024:2 (0x0001)  
	bool                                               bPlayInPhotoMode : 1;                                       // 0x0024:3 (0x0001)  
	bool                                               bIsMusic : 1;                                               // 0x0024:4 (0x0001)  
	bool                                               bCenterChannelOnly : 1;                                     // 0x0024:5 (0x0001)  
	bool                                               bApplyAmbientVolumes : 1;                                   // 0x0024:6 (0x0001)  
	bool                                               bReverb : 1;                                                // 0x0024:7 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0025   (0x0003)  MISSED
	float                                              Default2DReverbSendAmount;                                  // 0x0028   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	FSoundModulationDefaultSettings                    ModulationSettings;                                         // 0x0030   (0x0040)  
	TEnumAsByte<EAudioOutputTarget>                    OutputTarget;                                               // 0x0070   (0x0001)  
	ESoundWaveLoadingBehavior                          LoadingBehavior;                                            // 0x0071   (0x0001)  
	unsigned char                                      UnknownData05_6[0x6];                                       // 0x0072   (0x0006)  MISSED
	class USoundSubmix*                                DefaultSubmix;                                              // 0x0078   (0x0008)  
	class USoundSubmixBase*                            DefaultSubmixBase;                                          // 0x0080   (0x0008)  
	class USoundAttenuation*                           AttenuationOverride;                                        // 0x0088   (0x0008)  
};

/// Struct /Script/Engine.PassiveSoundMixModifier
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FPassiveSoundMixModifier
{ 
	class USoundMix*                                   SoundMix;                                                   // 0x0000   (0x0008)  
	float                                              MinVolumeThreshold;                                         // 0x0008   (0x0004)  
	float                                              MaxVolumeThreshold;                                         // 0x000C   (0x0004)  
};

/// Class /Script/Engine.SoundClass
/// Size: 0x00E0 (224 bytes) (0x000028 - 0x0000E0) align n/a MaxSize: 0x00E0
class USoundClass : public UObject
{ 
public:
	FSoundClassProperties                              Properties;                                                 // 0x0028   (0x0090)  
	TArray<class USoundClass*>                         ChildClasses;                                               // 0x00B8   (0x0010)  
	TArray<FPassiveSoundMixModifier>                   PassiveSoundMixModifiers;                                   // 0x00C8   (0x0010)  
	class USoundClass*                                 ParentClass;                                                // 0x00D8   (0x0008)  
};

/// Class /Script/Engine.SoundConcurrency
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class USoundConcurrency : public UObject
{ 
public:
	FSoundConcurrencySettings                          Concurrency;                                                // 0x0028   (0x0028)  
};

/// Class /Script/Engine.SoundCue
/// Size: 0x0590 (1424 bytes) (0x0001B8 - 0x000590) align n/a MaxSize: 0x0590
class USoundCue : public USoundBase
{ 
public:
	bool                                               bPrimeOnLoad : 1;                                           // 0x01B8:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x01B9   (0x0007)  MISSED
	class USoundNode*                                  FirstNode;                                                  // 0x01C0   (0x0008)  
	float                                              VolumeMultiplier;                                           // 0x01C8   (0x0004)  
	float                                              PitchMultiplier;                                            // 0x01CC   (0x0004)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x01D0   (0x03A0)  
	float                                              SubtitlePriority;                                           // 0x0570   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0574   (0x0004)  MISSED
	bool                                               bOverrideAttenuation : 1;                                   // 0x0578:0 (0x0001)  
	bool                                               bExcludeFromRandomNodeBranchCulling : 1;                    // 0x0578:1 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x0579   (0x0003)  MISSED
	int32_t                                            CookedQualityIndex;                                         // 0x057C   (0x0004)  
	bool                                               bHasPlayWhenSilent : 1;                                     // 0x0580:0 (0x0001)  
	unsigned char                                      UnknownData07_7[0xF];                                       // 0x0581   (0x000F)  MISSED
};

/// Struct /Script/Engine.SourceEffectChainEntry
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSourceEffectChainEntry
{ 
	class USoundEffectSourcePreset*                    Preset;                                                     // 0x0000   (0x0008)  
	bool                                               bBypass : 1;                                                // 0x0008:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0009   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundEffectSourcePresetChain
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class USoundEffectSourcePresetChain : public UObject
{ 
public:
	TArray<FSourceEffectChainEntry>                    Chain;                                                      // 0x0028   (0x0010)  
	bool                                               bPlayEffectChainTails : 1;                                  // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.SoundGroup
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSoundGroup
{ 
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                                 // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            DisplayName;                                                // 0x0008   (0x0010)  
	bool                                               bAlwaysDecompressOnLoad : 1;                                // 0x0018:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              DecompressedDuration;                                       // 0x001C   (0x0004)  
};

/// Class /Script/Engine.SoundGroups
/// Size: 0x0088 (136 bytes) (0x000028 - 0x000088) align n/a MaxSize: 0x0088
class USoundGroups : public UObject
{ 
public:
	TArray<FSoundGroup>                                SoundGroupProfiles;                                         // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_7[0x50];                                      // 0x0038   (0x0050)  MISSED
};

/// Struct /Script/Engine.AudioEffectParameters
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FAudioEffectParameters
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.AudioEQEffect
/// Size: 0x0040 (64 bytes) (0x000008 - 0x000040) align n/a MaxSize: 0x0040
struct FAudioEQEffect : FAudioEffectParameters
{ 
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0008   (0x0008)  MISSED
	float                                              FrequencyCenter0;                                           // 0x0010   (0x0004)  
	float                                              Gain0;                                                      // 0x0014   (0x0004)  
	float                                              Bandwidth0;                                                 // 0x0018   (0x0004)  
	float                                              FrequencyCenter1;                                           // 0x001C   (0x0004)  
	float                                              Gain1;                                                      // 0x0020   (0x0004)  
	float                                              Bandwidth1;                                                 // 0x0024   (0x0004)  
	float                                              FrequencyCenter2;                                           // 0x0028   (0x0004)  
	float                                              Gain2;                                                      // 0x002C   (0x0004)  
	float                                              Bandwidth2;                                                 // 0x0030   (0x0004)  
	float                                              FrequencyCenter3;                                           // 0x0034   (0x0004)  
	float                                              Gain3;                                                      // 0x0038   (0x0004)  
	float                                              Bandwidth3;                                                 // 0x003C   (0x0004)  
};

/// Struct /Script/Engine.SoundClassAdjuster
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSoundClassAdjuster
{ 
	class USoundClass*                                 SoundClassObject;                                           // 0x0000   (0x0008)  
	float                                              VolumeAdjuster;                                             // 0x0008   (0x0004)  
	float                                              PitchAdjuster;                                              // 0x000C   (0x0004)  
	float                                              LowPassFilterFrequency;                                     // 0x0010   (0x0004)  
	bool                                               bApplyToChildren : 1;                                       // 0x0014:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0015   (0x0003)  MISSED
	float                                              VoiceCenterChannelVolumeAdjuster;                           // 0x0018   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundMix
/// Size: 0x0090 (144 bytes) (0x000028 - 0x000090) align n/a MaxSize: 0x0090
class USoundMix : public UObject
{ 
public:
	bool                                               bApplyEQ : 1;                                               // 0x0028:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              EQPriority;                                                 // 0x002C   (0x0004)  
	FAudioEQEffect                                     EQSettings;                                                 // 0x0030   (0x0040)  
	TArray<FSoundClassAdjuster>                        SoundClassEffects;                                          // 0x0070   (0x0010)  
	float                                              InitialDelay;                                               // 0x0080   (0x0004)  
	float                                              FadeInTime;                                                 // 0x0084   (0x0004)  
	float                                              Duration;                                                   // 0x0088   (0x0004)  
	float                                              FadeOutTime;                                                // 0x008C   (0x0004)  
};

/// Class /Script/Engine.SoundNodeAssetReferencer
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000048) align n/a MaxSize: 0x0048
class USoundNodeAssetReferencer : public USoundNode
{ 
public:
};

/// Class /Script/Engine.SoundNodeAttenuation
/// Size: 0x03F8 (1016 bytes) (0x000048 - 0x0003F8) align n/a MaxSize: 0x03F8
class USoundNodeAttenuation : public USoundNode
{ 
public:
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0048   (0x0008)  
	FSoundAttenuationSettings                          AttenuationOverrides;                                       // 0x0050   (0x03A0)  
	bool                                               bOverrideAttenuation : 1;                                   // 0x03F0:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x03F1   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundNodeBranch
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000050) align n/a MaxSize: 0x0050
class USoundNodeBranch : public USoundNode
{ 
public:
	FName                                              BoolParameterName;                                          // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundNodeConcatenator
/// Size: 0x0058 (88 bytes) (0x000048 - 0x000058) align n/a MaxSize: 0x0058
class USoundNodeConcatenator : public USoundNode
{ 
public:
	TArray<float>                                      InputVolume;                                                // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeDelay
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000050) align n/a MaxSize: 0x0050
class USoundNodeDelay : public USoundNode
{ 
public:
	float                                              DelayMin;                                                   // 0x0048   (0x0004)  
	float                                              DelayMax;                                                   // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.DialogueWaveParameter
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FDialogueWaveParameter
{ 
	class UDialogueWave*                               DialogueWave;                                               // 0x0000   (0x0008)  
	FDialogueContext                                   Context;                                                    // 0x0008   (0x0018)  
};

/// Class /Script/Engine.SoundNodeDialoguePlayer
/// Size: 0x0070 (112 bytes) (0x000048 - 0x000070) align n/a MaxSize: 0x0070
class USoundNodeDialoguePlayer : public USoundNode
{ 
public:
	FDialogueWaveParameter                             DialogueWaveParameter;                                      // 0x0048   (0x0020)  
	bool                                               bLooping : 1;                                               // 0x0068:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0069   (0x0007)  MISSED
};

/// Struct /Script/Engine.DistanceDatum
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FDistanceDatum
{ 
	float                                              FadeInDistanceStart;                                        // 0x0000   (0x0004)  
	float                                              FadeInDistanceEnd;                                          // 0x0004   (0x0004)  
	float                                              FadeOutDistanceStart;                                       // 0x0008   (0x0004)  
	float                                              FadeOutDistanceEnd;                                         // 0x000C   (0x0004)  
	float                                              Volume;                                                     // 0x0010   (0x0004)  
};

/// Class /Script/Engine.SoundNodeDistanceCrossFade
/// Size: 0x0058 (88 bytes) (0x000048 - 0x000058) align n/a MaxSize: 0x0058
class USoundNodeDistanceCrossFade : public USoundNode
{ 
public:
	TArray<FDistanceDatum>                             CrossFadeInput;                                             // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeDoppler
/// Size: 0x0058 (88 bytes) (0x000048 - 0x000058) align n/a MaxSize: 0x0058
class USoundNodeDoppler : public USoundNode
{ 
public:
	float                                              DopplerIntensity;                                           // 0x0048   (0x0004)  
	bool                                               bUseSmoothing;                                              // 0x004C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              SmoothingInterpSpeed;                                       // 0x0050   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeEnveloper
/// Size: 0x0190 (400 bytes) (0x000048 - 0x000190) align n/a MaxSize: 0x0190
class USoundNodeEnveloper : public USoundNode
{ 
public:
	float                                              LoopStart;                                                  // 0x0048   (0x0004)  
	float                                              LoopEnd;                                                    // 0x004C   (0x0004)  
	float                                              DurationAfterLoop;                                          // 0x0050   (0x0004)  
	int32_t                                            LoopCount;                                                  // 0x0054   (0x0004)  
	bool                                               bLoopIndefinitely : 1;                                      // 0x0058:0 (0x0001)  
	bool                                               bLoop : 1;                                                  // 0x0058:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0059   (0x0007)  MISSED
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                          // 0x0060   (0x0008)  
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                           // 0x0068   (0x0008)  
	FRuntimeFloatCurve                                 VolumeCurve;                                                // 0x0070   (0x0088)  
	FRuntimeFloatCurve                                 PitchCurve;                                                 // 0x00F8   (0x0088)  
	float                                              PitchMin;                                                   // 0x0180   (0x0004)  
	float                                              PitchMax;                                                   // 0x0184   (0x0004)  
	float                                              VolumeMin;                                                  // 0x0188   (0x0004)  
	float                                              VolumeMax;                                                  // 0x018C   (0x0004)  
};

/// Class /Script/Engine.SoundNodeGroupControl
/// Size: 0x0058 (88 bytes) (0x000048 - 0x000058) align n/a MaxSize: 0x0058
class USoundNodeGroupControl : public USoundNode
{ 
public:
	TArray<int32_t>                                    GroupSizes;                                                 // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeLooping
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000050) align n/a MaxSize: 0x0050
class USoundNodeLooping : public USoundNode
{ 
public:
	int32_t                                            LoopCount;                                                  // 0x0048   (0x0004)  
	bool                                               bLoopIndefinitely : 1;                                      // 0x004C:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x004D   (0x0003)  MISSED
};

/// Class /Script/Engine.SoundNodeMature
/// Size: 0x0048 (72 bytes) (0x000048 - 0x000048) align n/a MaxSize: 0x0048
class USoundNodeMature : public USoundNode
{ 
public:
};

/// Class /Script/Engine.SoundNodeMixer
/// Size: 0x0058 (88 bytes) (0x000048 - 0x000058) align n/a MaxSize: 0x0058
class USoundNodeMixer : public USoundNode
{ 
public:
	TArray<float>                                      InputVolume;                                                // 0x0048   (0x0010)  
};

/// Class /Script/Engine.SoundNodeModulator
/// Size: 0x0058 (88 bytes) (0x000048 - 0x000058) align n/a MaxSize: 0x0058
class USoundNodeModulator : public USoundNode
{ 
public:
	float                                              PitchMin;                                                   // 0x0048   (0x0004)  
	float                                              PitchMax;                                                   // 0x004C   (0x0004)  
	float                                              VolumeMin;                                                  // 0x0050   (0x0004)  
	float                                              VolumeMax;                                                  // 0x0054   (0x0004)  
};

/// Struct /Script/Engine.ModulatorContinuousParams
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FModulatorContinuousParams
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	float                                              Default;                                                    // 0x0008   (0x0004)  
	float                                              MinInput;                                                   // 0x000C   (0x0004)  
	float                                              MaxInput;                                                   // 0x0010   (0x0004)  
	float                                              MinOutput;                                                  // 0x0014   (0x0004)  
	float                                              MaxOutput;                                                  // 0x0018   (0x0004)  
	TEnumAsByte<ModulationParamMode>                   ParamMode;                                                  // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Class /Script/Engine.SoundNodeModulatorContinuous
/// Size: 0x0088 (136 bytes) (0x000048 - 0x000088) align n/a MaxSize: 0x0088
class USoundNodeModulatorContinuous : public USoundNode
{ 
public:
	FModulatorContinuousParams                         PitchModulationParams;                                      // 0x0048   (0x0020)  
	FModulatorContinuousParams                         VolumeModulationParams;                                     // 0x0068   (0x0020)  
};

/// Class /Script/Engine.SoundNodeOscillator
/// Size: 0x0070 (112 bytes) (0x000048 - 0x000070) align n/a MaxSize: 0x0070
class USoundNodeOscillator : public USoundNode
{ 
public:
	bool                                               bModulateVolume : 1;                                        // 0x0048:0 (0x0001)  
	bool                                               bModulatePitch : 1;                                         // 0x0048:1 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              AmplitudeMin;                                               // 0x004C   (0x0004)  
	float                                              AmplitudeMax;                                               // 0x0050   (0x0004)  
	float                                              FrequencyMin;                                               // 0x0054   (0x0004)  
	float                                              FrequencyMax;                                               // 0x0058   (0x0004)  
	float                                              OffsetMin;                                                  // 0x005C   (0x0004)  
	float                                              OffsetMax;                                                  // 0x0060   (0x0004)  
	float                                              CenterMin;                                                  // 0x0064   (0x0004)  
	float                                              CenterMax;                                                  // 0x0068   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x006C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeParamCrossFade
/// Size: 0x0060 (96 bytes) (0x000058 - 0x000060) align n/a MaxSize: 0x0060
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{ 
public:
	FName                                              ParamName;                                                  // 0x0058   (0x0008)  
};

/// Class /Script/Engine.SoundNodeQualityLevel
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000050) align n/a MaxSize: 0x0050
class USoundNodeQualityLevel : public USoundNode
{ 
public:
	int32_t                                            CookedQualityLevelIndex;                                    // 0x0048   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x004C   (0x0004)  MISSED
};

/// Class /Script/Engine.SoundNodeRandom
/// Size: 0x0078 (120 bytes) (0x000048 - 0x000078) align n/a MaxSize: 0x0078
class USoundNodeRandom : public USoundNode
{ 
public:
	TArray<float>                                      Weights;                                                    // 0x0048   (0x0010)  
	TArray<bool>                                       HasBeenUsed;                                                // 0x0058   (0x0010)  
	int32_t                                            NumRandomUsed;                                              // 0x0068   (0x0004)  
	int32_t                                            PreselectAtLevelLoad;                                       // 0x006C   (0x0004)  
	bool                                               bShouldExcludeFromBranchCulling : 1;                        // 0x0070:0 (0x0001)  
	bool                                               bSoundCueExcludedFromBranchCulling : 1;                     // 0x0070:1 (0x0001)  
	bool                                               bRandomizeWithoutReplacement : 1;                           // 0x0070:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundNodeSoundClass
/// Size: 0x0058 (88 bytes) (0x000048 - 0x000058) align n/a MaxSize: 0x0058
class USoundNodeSoundClass : public USoundNode
{ 
public:
	class USoundClass*                                 SoundClassOverride;                                         // 0x0048   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0050   (0x0008)  MISSED
};

/// Class /Script/Engine.SoundNodeSwitch
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000050) align n/a MaxSize: 0x0050
class USoundNodeSwitch : public USoundNode
{ 
public:
	FName                                              IntParameterName;                                           // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundNodeWaveParam
/// Size: 0x0050 (80 bytes) (0x000048 - 0x000050) align n/a MaxSize: 0x0050
class USoundNodeWaveParam : public USoundNode
{ 
public:
	FName                                              WaveParameterName;                                          // 0x0048   (0x0008)  
};

/// Class /Script/Engine.SoundNodeWavePlayer
/// Size: 0x0088 (136 bytes) (0x000048 - 0x000088) align n/a MaxSize: 0x0088
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{ 
public:
	TWeakObjectPtr<class USoundWave*>                  SoundWaveAssetPtr;                                          // 0x0048   (0x0008)  
	unsigned char                                      UnknownData03_6[0x20];                                      // 0x0050   (0x0020)  MISSED
	class USoundWave*                                  SoundWave;                                                  // 0x0070   (0x0008)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0078   (0x0008)  MISSED
	bool                                               bLooping : 1;                                               // 0x0080:0 (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0081   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundSourceBus
/// Size: 0x0390 (912 bytes) (0x000378 - 0x000390) align n/a MaxSize: 0x0390
class USoundSourceBus : public USoundWave
{ 
public:
	ESourceBusChannels                                 SourceBusChannels;                                          // 0x0378   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0379   (0x0003)  MISSED
	float                                              SourceBusDuration;                                          // 0x037C   (0x0004)  
	class UAudioBus*                                   AudioBus;                                                   // 0x0380   (0x0008)  
	bool                                               bAutoDeactivateWhenSilent : 1;                              // 0x0388:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0389   (0x0007)  MISSED
};

/// Class /Script/Engine.SoundSubmixBase
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class USoundSubmixBase : public UObject
{ 
public:
	bool                                               bAutoDisable;                                               // 0x0028   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              AutoDisableTime;                                            // 0x002C   (0x0004)  
	TArray<class USoundSubmixBase*>                    ChildSubmixes;                                              // 0x0030   (0x0010)  
	class USoundSubmixBase*                            FallbackSubmix;                                             // 0x0040   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0048   (0x0008)  MISSED
};

/// Class /Script/Engine.SoundSubmixWithParentBase
/// Size: 0x0058 (88 bytes) (0x000050 - 0x000058) align n/a MaxSize: 0x0058
class USoundSubmixWithParentBase : public USoundSubmixBase
{ 
public:
	class USoundSubmixBase*                            ParentSubmix;                                               // 0x0050   (0x0008)  
};

/// Class /Script/Engine.SoundSubmix
/// Size: 0x00A8 (168 bytes) (0x000058 - 0x0000A8) align n/a MaxSize: 0x00A8
class USoundSubmix : public USoundSubmixWithParentBase
{ 
public:
	bool                                               bMuteWhenBackgrounded : 1;                                  // 0x0058:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0059   (0x0007)  MISSED
	TArray<class USoundEffectSubmixPreset*>            SubmixEffectChain;                                          // 0x0060   (0x0010)  
	class USoundfieldEncodingSettingsBase*             AmbisonicsPluginSettings;                                   // 0x0070   (0x0008)  
	int32_t                                            EnvelopeFollowerAttackTime;                                 // 0x0078   (0x0004)  
	int32_t                                            EnvelopeFollowerReleaseTime;                                // 0x007C   (0x0004)  
	EGainParamMode                                     GainMode;                                                   // 0x0080   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	float                                              OutputVolume;                                               // 0x0084   (0x0004)  
	float                                              WetLevel;                                                   // 0x0088   (0x0004)  
	float                                              DryLevel;                                                   // 0x008C   (0x0004)  
	FMulticastInlineDelegate                           OnSubmixRecordedFileDone;                                   // 0x0090   (0x0010)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x00A0   (0x0008)  MISSED

	/// Functions
	// Function /Script/Engine.SoundSubmix.StopSpectralAnalysis
	constexpr static const FunctionPointer<USoundSubmix, void, const UObject*> StopSpectralAnalysis = { 0x4976fa0, 0 }; 
	// Function /Script/Engine.SoundSubmix.StopRecordingOutput
	constexpr static const FunctionPointer<USoundSubmix, void, const UObject*, const EAudioRecordingExportType, const FString, const FString, const USoundWave*> StopRecordingOutput = { 0x4978110, 1 }; 
	// Function /Script/Engine.SoundSubmix.StopEnvelopeFollowing
	constexpr static const FunctionPointer<USoundSubmix, void, const UObject*> StopEnvelopeFollowing = { 0x4977ed0, 2 }; 
	// Function /Script/Engine.SoundSubmix.StartSpectralAnalysis
	constexpr static const FunctionPointer<USoundSubmix, void, const UObject*, const EFFTSize, const EFFTPeakInterpolationMethod, const EFFTWindowType, const float, const EAudioSpectrumType> StartSpectralAnalysis = { 0x49770c0, 3 }; 
	// Function /Script/Engine.SoundSubmix.StartRecordingOutput
	constexpr static const FunctionPointer<USoundSubmix, void, const UObject*, const float> StartRecordingOutput = { 0x49784f0, 4 }; 
	// Function /Script/Engine.SoundSubmix.StartEnvelopeFollowing
	constexpr static const FunctionPointer<USoundSubmix, void, const UObject*> StartEnvelopeFollowing = { 0x4977ff0, 5 }; 
	// Function /Script/Engine.SoundSubmix.SetSubmixOutputVolume
	constexpr static const FunctionPointer<USoundSubmix, void, const UObject*, const float> SetSubmixOutputVolume = { 0x4976de0, 6 }; 
	// Function /Script/Engine.SoundSubmix.RemoveSpectralAnalysisDelegate
	constexpr static const FunctionPointer<USoundSubmix, void, const UObject*, const FDelegateProperty&> RemoveSpectralAnalysisDelegate = { 0x49774a0, 7 }; 
	// Function /Script/Engine.SoundSubmix.AddSpectralAnalysisDelegate
	constexpr static const FunctionPointer<USoundSubmix, void, const UObject*, const TArray<FSoundSubmixSpectralAnalysisBandSettings>&, const FDelegateProperty&, const float, const float, const bool, const bool, const float, const float> AddSpectralAnalysisDelegate = { 0x4977680, 8 }; 
	// Function /Script/Engine.SoundSubmix.AddEnvelopeFollowerDelegate
	constexpr static const FunctionPointer<USoundSubmix, void, const UObject*, const FDelegateProperty&> AddEnvelopeFollowerDelegate = { 0x4977cf0, 9 }; 
};

/// Class /Script/Engine.SoundfieldSubmix
/// Size: 0x0080 (128 bytes) (0x000058 - 0x000080) align n/a MaxSize: 0x0080
class USoundfieldSubmix : public USoundSubmixWithParentBase
{ 
public:
	FName                                              SoundfieldEncodingFormat;                                   // 0x0058   (0x0008)  
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                           // 0x0060   (0x0008)  
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                      // 0x0068   (0x0010)  
	class UClass*                                      EncodingSettingsClass;                                      // 0x0078   (0x0008)  
};

/// Class /Script/Engine.EndpointSubmix
/// Size: 0x0068 (104 bytes) (0x000050 - 0x000068) align n/a MaxSize: 0x0068
class UEndpointSubmix : public USoundSubmixBase
{ 
public:
	FName                                              EndpointType;                                               // 0x0050   (0x0008)  
	class UClass*                                      EndpointSettingsClass;                                      // 0x0058   (0x0008)  
	class UAudioEndpointSettingsBase*                  EndpointSettings;                                           // 0x0060   (0x0008)  
};

/// Class /Script/Engine.SoundfieldEndpointSubmix
/// Size: 0x0088 (136 bytes) (0x000050 - 0x000088) align n/a MaxSize: 0x0088
class USoundfieldEndpointSubmix : public USoundSubmixBase
{ 
public:
	FName                                              SoundfieldEndpointType;                                     // 0x0050   (0x0008)  
	class UClass*                                      EndpointSettingsClass;                                      // 0x0058   (0x0008)  
	class USoundfieldEndpointSettingsBase*             EndpointSettings;                                           // 0x0060   (0x0008)  
	class UClass*                                      EncodingSettingsClass;                                      // 0x0068   (0x0008)  
	class USoundfieldEncodingSettingsBase*             EncodingSettings;                                           // 0x0070   (0x0008)  
	TArray<class USoundfieldEffectBase*>               SoundfieldEffectChain;                                      // 0x0078   (0x0010)  
};

/// Class /Script/Engine.SpectatorPawn
/// Size: 0x0350 (848 bytes) (0x000350 - 0x000350) align n/a MaxSize: 0x0350
class ASpectatorPawn : public ADefaultPawn
{ 
public:
};

/// Class /Script/Engine.SphereReflectionCapture
/// Size: 0x02D8 (728 bytes) (0x0002D0 - 0x0002D8) align n/a MaxSize: 0x02D8
class ASphereReflectionCapture : public AReflectionCapture
{ 
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                          // 0x02D0   (0x0008)  
};

/// Class /Script/Engine.SphereReflectionCaptureComponent
/// Size: 0x02F0 (752 bytes) (0x0002D8 - 0x0002F0) align n/a MaxSize: 0x02F0
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{ 
public:
	float                                              InfluenceRadius;                                            // 0x02D8   (0x0004)  
	float                                              CaptureDistanceScale;                                       // 0x02DC   (0x0004)  
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                     // 0x02E0   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x02E8   (0x0008)  MISSED
};

/// Class /Script/Engine.SplineMeshActor
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ASplineMeshActor : public AActor
{ 
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                        // 0x02C8   (0x0008)  
};

/// Struct /Script/Engine.SplineMeshParams
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSplineMeshParams
{ 
	FVector                                            StartPos;                                                   // 0x0000   (0x000C)  
	FVector                                            StartTangent;                                               // 0x000C   (0x000C)  
	FVector2D                                          StartScale;                                                 // 0x0018   (0x0008)  
	float                                              StartRoll;                                                  // 0x0020   (0x0004)  
	FVector2D                                          StartOffset;                                                // 0x0024   (0x0008)  
	FVector                                            EndPos;                                                     // 0x002C   (0x000C)  
	FVector2D                                          EndScale;                                                   // 0x0038   (0x0008)  
	FVector                                            EndTangent;                                                 // 0x0040   (0x000C)  
	float                                              EndRoll;                                                    // 0x004C   (0x0004)  
	FVector2D                                          EndOffset;                                                  // 0x0050   (0x0008)  
};

/// Class /Script/Engine.SplineMeshComponent
/// Size: 0x0680 (1664 bytes) (0x0005E0 - 0x000680) align n/a MaxSize: 0x0680
class USplineMeshComponent : public UStaticMeshComponent
{ 
public:
	unsigned char                                      UnknownData03_8[0x8];                                       // 0x05E0   (0x0008)  MISSED
	FSplineMeshParams                                  SplineParams;                                               // 0x05E8   (0x0058)  
	FVector                                            SplineUpDir;                                                // 0x0640   (0x000C)  
	float                                              SplineBoundaryMin;                                          // 0x064C   (0x0004)  
	FGuid                                              CachedMeshBodySetupGuid;                                    // 0x0650   (0x0010)  
	class UBodySetup*                                  BodySetup;                                                  // 0x0660   (0x0008)  
	float                                              SplineBoundaryMax;                                          // 0x0668   (0x0004)  
	bool                                               bAllowSplineEditingPerInstance : 1;                         // 0x066C:0 (0x0001)  
	bool                                               bSmoothInterpRollScale : 1;                                 // 0x066C:1 (0x0001)  
	bool                                               bMeshDirty : 1;                                             // 0x066C:2 (0x0001)  
	TEnumAsByte<ESplineMeshAxis>                       ForwardAxis;                                                // 0x066D   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x066E   (0x0002)  MISSED
	float                                              VirtualTextureMainPassMaxDrawDistance;                      // 0x0670   (0x0004)  
	unsigned char                                      UnknownData05_7[0xC];                                       // 0x0674   (0x000C)  MISSED

	/// Functions
	// Function /Script/Engine.SplineMeshComponent.UpdateMesh
	constexpr static const FunctionPointer<USplineMeshComponent, void> UpdateMesh = { 0x498f970, 0 }; 
	// Function /Script/Engine.SplineMeshComponent.SetStartTangent
	constexpr static const FunctionPointer<USplineMeshComponent, void, const FVector, const bool> SetStartTangent = { 0x498f5f0, 1 }; 
	// Function /Script/Engine.SplineMeshComponent.SetStartScale
	constexpr static const FunctionPointer<USplineMeshComponent, void, const FVector2D, const bool> SetStartScale = { 0x498ed70, 2 }; 
	// Function /Script/Engine.SplineMeshComponent.SetStartRoll
	constexpr static const FunctionPointer<USplineMeshComponent, void, const float, const bool> SetStartRoll = { 0x498ebc0, 3 }; 
	// Function /Script/Engine.SplineMeshComponent.SetStartPosition
	constexpr static const FunctionPointer<USplineMeshComponent, void, const FVector, const bool> SetStartPosition = { 0x498f7b0, 4 }; 
	// Function /Script/Engine.SplineMeshComponent.SetStartOffset
	constexpr static const FunctionPointer<USplineMeshComponent, void, const FVector2D, const bool> SetStartOffset = { 0x498ea10, 5 }; 
	// Function /Script/Engine.SplineMeshComponent.SetStartAndEnd
	constexpr static const FunctionPointer<USplineMeshComponent, void, const FVector, const FVector, const FVector, const FVector, const bool> SetStartAndEnd = { 0x498ef20, 6 }; 
	// Function /Script/Engine.SplineMeshComponent.SetSplineUpDir
	constexpr static const FunctionPointer<USplineMeshComponent, void, const FVector&, const bool> SetSplineUpDir = { 0x498e090, 7 }; 
	// Function /Script/Engine.SplineMeshComponent.SetForwardAxis
	constexpr static const FunctionPointer<USplineMeshComponent, void, const TEnumAsByte<ESplineMeshAxis>, const bool> SetForwardAxis = { 0x498e360, 8 }; 
	// Function /Script/Engine.SplineMeshComponent.SetEndTangent
	constexpr static const FunctionPointer<USplineMeshComponent, void, const FVector, const bool> SetEndTangent = { 0x498f270, 9 }; 
	// Function /Script/Engine.SplineMeshComponent.SetEndScale
	constexpr static const FunctionPointer<USplineMeshComponent, void, const FVector2D, const bool> SetEndScale = { 0x498e860, 10 }; 
	// Function /Script/Engine.SplineMeshComponent.SetEndRoll
	constexpr static const FunctionPointer<USplineMeshComponent, void, const float, const bool> SetEndRoll = { 0x498e6b0, 11 }; 
	// Function /Script/Engine.SplineMeshComponent.SetEndPosition
	constexpr static const FunctionPointer<USplineMeshComponent, void, const FVector, const bool> SetEndPosition = { 0x498f430, 12 }; 
	// Function /Script/Engine.SplineMeshComponent.SetEndOffset
	constexpr static const FunctionPointer<USplineMeshComponent, void, const FVector2D, const bool> SetEndOffset = { 0x498e500, 13 }; 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMin
	constexpr static const FunctionPointer<USplineMeshComponent, void, const float, const bool> SetBoundaryMin = { 0x498dee0, 14 }; 
	// Function /Script/Engine.SplineMeshComponent.SetBoundaryMax
	constexpr static const FunctionPointer<USplineMeshComponent, void, const float, const bool> SetBoundaryMax = { 0x498dd30, 15 }; 
	// Function /Script/Engine.SplineMeshComponent.GetStartTangent
	constexpr static const FunctionPointer<USplineMeshComponent, FVector> GetStartTangent = { 0x498f780, 16 }; 
	// Function /Script/Engine.SplineMeshComponent.GetStartScale
	constexpr static const FunctionPointer<USplineMeshComponent, FVector2D> GetStartScale = { 0x498eef0, 17 }; 
	// Function /Script/Engine.SplineMeshComponent.GetStartRoll
	constexpr static const FunctionPointer<USplineMeshComponent, float> GetStartRoll = { 0x498ed50, 18 }; 
	// Function /Script/Engine.SplineMeshComponent.GetStartPosition
	constexpr static const FunctionPointer<USplineMeshComponent, FVector> GetStartPosition = { 0x498f940, 19 }; 
	// Function /Script/Engine.SplineMeshComponent.GetStartOffset
	constexpr static const FunctionPointer<USplineMeshComponent, FVector2D> GetStartOffset = { 0x498eb90, 20 }; 
	// Function /Script/Engine.SplineMeshComponent.GetSplineUpDir
	constexpr static const FunctionPointer<USplineMeshComponent, FVector> GetSplineUpDir = { 0x498e330, 21 }; 
	// Function /Script/Engine.SplineMeshComponent.GetForwardAxis
	constexpr static const FunctionPointer<USplineMeshComponent, TEnumAsByte<ESplineMeshAxis>> GetForwardAxis = { 0x498e4e0, 22 }; 
	// Function /Script/Engine.SplineMeshComponent.GetEndTangent
	constexpr static const FunctionPointer<USplineMeshComponent, FVector> GetEndTangent = { 0x498f400, 23 }; 
	// Function /Script/Engine.SplineMeshComponent.GetEndScale
	constexpr static const FunctionPointer<USplineMeshComponent, FVector2D> GetEndScale = { 0x498e9e0, 24 }; 
	// Function /Script/Engine.SplineMeshComponent.GetEndRoll
	constexpr static const FunctionPointer<USplineMeshComponent, float> GetEndRoll = { 0x498e840, 25 }; 
	// Function /Script/Engine.SplineMeshComponent.GetEndPosition
	constexpr static const FunctionPointer<USplineMeshComponent, FVector> GetEndPosition = { 0x498f5c0, 26 }; 
	// Function /Script/Engine.SplineMeshComponent.GetEndOffset
	constexpr static const FunctionPointer<USplineMeshComponent, FVector2D> GetEndOffset = { 0x498e680, 27 }; 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMin
	constexpr static const FunctionPointer<USplineMeshComponent, float> GetBoundaryMin = { 0x498e070, 28 }; 
	// Function /Script/Engine.SplineMeshComponent.GetBoundaryMax
	constexpr static const FunctionPointer<USplineMeshComponent, float> GetBoundaryMax = { 0x498dec0, 29 }; 
};

/// Class /Script/Engine.SpotLightComponent
/// Size: 0x0410 (1040 bytes) (0x000408 - 0x000410) align n/a MaxSize: 0x0410
class USpotLightComponent : public UPointLightComponent
{ 
public:
	float                                              InnerConeAngle;                                             // 0x0408   (0x0004)  
	float                                              OuterConeAngle;                                             // 0x040C   (0x0004)  

	/// Functions
	// Function /Script/Engine.SpotLightComponent.SetOuterConeAngle
	constexpr static const FunctionPointer<USpotLightComponent, void, const float> SetOuterConeAngle = { 0x4990380, 0 }; 
	// Function /Script/Engine.SpotLightComponent.SetInnerConeAngle
	constexpr static const FunctionPointer<USpotLightComponent, void, const float> SetInnerConeAngle = { 0x4990480, 1 }; 
};

/// Struct /Script/Engine.StaticMaterial
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FStaticMaterial
{ 
	class UMaterialInterface*                          MaterialInterface;                                          // 0x0000   (0x0008)  
	FName                                              MaterialSlotName;                                           // 0x0008   (0x0008)  
	FName                                              ImportedMaterialSlotName;                                   // 0x0010   (0x0008)  
	FMeshUVChannelInfo                                 UVChannelData;                                              // 0x0018   (0x0014)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Class /Script/Engine.StaticMesh
/// Size: 0x0180 (384 bytes) (0x000068 - 0x000180) align n/a MaxSize: 0x0180
class UStaticMesh : public UStreamableRenderAsset
{ 
public:
	unsigned char                                      UnknownData06_8[0x20];                                      // 0x0068   (0x0020)  MISSED
	FPerPlatformInt                                    MinLOD;                                                     // 0x0088   (0x0004)  
	FName                                              QualityGroup;                                               // 0x008C   (0x0008)  
	float                                              LpvBiasMultiplier;                                          // 0x0094   (0x0004)  
	TArray<FStaticMaterial>                            StaticMaterials;                                            // 0x0098   (0x0010)  
	float                                              LightmapUVDensity;                                          // 0x00A8   (0x0004)  
	int32_t                                            LightMapResolution;                                         // 0x00AC   (0x0004)  
	int32_t                                            LightMapCoordinateIndex;                                    // 0x00B0   (0x0004)  
	float                                              DistanceFieldSelfShadowBias;                                // 0x00B4   (0x0004)  
	class UBodySetup*                                  BodySetup;                                                  // 0x00B8   (0x0008)  
	int32_t                                            LODForCollision;                                            // 0x00C0   (0x0004)  
	bool                                               bGenerateMeshDistanceField : 1;                             // 0x00C4:0 (0x0001)  
	bool                                               bStripComplexCollisionForConsole : 1;                       // 0x00C4:1 (0x0001)  
	bool                                               bHasNavigationData : 1;                                     // 0x00C4:2 (0x0001)  
	bool                                               bSupportUniformlyDistributedSampling : 1;                   // 0x00C4:3 (0x0001)  
	bool                                               bSupportPhysicalMaterialMasks : 1;                          // 0x00C4:4 (0x0001)  
	bool                                               bIsBuiltAtRuntime : 1;                                      // 0x00C4:5 (0x0001)  
	unsigned char                                      UnknownBit07 : 1;                                           // 0x00C4:6 (0x0001)  MISSED
	bool                                               bAllowCPUAccess : 1;                                        // 0x00C4:7 (0x0001)  
	bool                                               bSupportGpuUniformlyDistributedSampling : 1;                // 0x00C5:0 (0x0001)  
	unsigned char                                      UnknownData08_5[0x22];                                      // 0x00C6   (0x0022)  MISSED
	TArray<class UStaticMeshSocket*>                   Sockets;                                                    // 0x00E8   (0x0010)  
	unsigned char                                      UnknownData09_6[0x10];                                      // 0x00F8   (0x0010)  MISSED
	FVector                                            PositiveBoundsExtension;                                    // 0x0108   (0x000C)  
	FVector                                            NegativeBoundsExtension;                                    // 0x0114   (0x000C)  
	FBoxSphereBounds                                   ExtendedBounds;                                             // 0x0120   (0x001C)  
	float                                              LODBoundsScale;                                             // 0x013C   (0x0004)  
	bool                                               bUnsupportedManualVolumeTexture;                            // 0x0140   (0x0001)  
	unsigned char                                      UnknownData10_6[0x17];                                      // 0x0141   (0x0017)  MISSED
	int32_t                                            ElementToIgnoreForTexFactor;                                // 0x0158   (0x0004)  
	unsigned char                                      UnknownData11_6[0x4];                                       // 0x015C   (0x0004)  MISSED
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x0160   (0x0010)  
	class UObject*                                     EditableMesh;                                               // 0x0170   (0x0008)  
	class UNavCollisionBase*                           NavCollision;                                               // 0x0178   (0x0008)  

	/// Functions
	// Function /Script/Engine.StaticMesh.RemoveSocket
	constexpr static const FunctionPointer<UStaticMesh, void, const UStaticMeshSocket*> RemoveSocket = { 0x49917c0, 0 }; 
	// Function /Script/Engine.StaticMesh.GetNumSections
	constexpr static const FunctionPointer<UStaticMesh, int32_t, const int32_t> GetNumSections = { 0x4991fe0, 1 }; 
	// Function /Script/Engine.StaticMesh.GetNumLODs
	constexpr static const FunctionPointer<UStaticMesh, int32_t> GetNumLODs = { 0x49921f0, 2 }; 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForPlatforms
	constexpr static const FunctionPointer<UStaticMesh, void, const TMap<FName, int32_t>&> GetMinimumLODForPlatforms = { 0x4992690, 3 }; 
	// Function /Script/Engine.StaticMesh.GetMinimumLODForPlatform
	constexpr static const FunctionPointer<UStaticMesh, int32_t, const FName&> GetMinimumLODForPlatform = { 0x49925c0, 4 }; 
	// Function /Script/Engine.StaticMesh.GetMaterialIndex
	constexpr static const FunctionPointer<UStaticMesh, int32_t, const FName> GetMaterialIndex = { 0x4991bc0, 5 }; 
	// Function /Script/Engine.StaticMesh.GetMaterial
	constexpr static const FunctionPointer<UStaticMesh, UMaterialInterface*, const int32_t> GetMaterial = { 0x4991ed0, 6 }; 
	// Function /Script/Engine.StaticMesh.GetBounds
	constexpr static const FunctionPointer<UStaticMesh, FBoxSphereBounds> GetBounds = { 0x49921b0, 7 }; 
	// Function /Script/Engine.StaticMesh.GetBoundingBox
	constexpr static const FunctionPointer<UStaticMesh, FBox> GetBoundingBox = { 0x49920e0, 8 }; 
	// Function /Script/Engine.StaticMesh.FindSocket
	constexpr static const FunctionPointer<UStaticMesh, UStaticMeshSocket*, const FName> FindSocket = { 0x4991960, 9 }; 
	// Function /Script/Engine.StaticMesh.CreateStaticMeshDescription
	constexpr static const FunctionPointer<UStaticMesh, UStaticMeshDescription*, const UObject*> CreateStaticMeshDescription = { 0x4992450, 10 }; 
	// Function /Script/Engine.StaticMesh.BuildFromStaticMeshDescriptions
	constexpr static const FunctionPointer<UStaticMesh, void, const TArray<UStaticMeshDescription*>&, const bool> BuildFromStaticMeshDescriptions = { 0x4992220, 11 }; 
	// Function /Script/Engine.StaticMesh.AddSocket
	constexpr static const FunctionPointer<UStaticMesh, void, const UStaticMeshSocket*> AddSocket = { 0x4991a90, 12 }; 
	// Function /Script/Engine.StaticMesh.AddMaterial
	constexpr static const FunctionPointer<UStaticMesh, FName, const UMaterialInterface*> AddMaterial = { 0x4991ce0, 13 }; 
};

/// Class /Script/Engine.StaticMeshSocket
/// Size: 0x0068 (104 bytes) (0x000028 - 0x000068) align n/a MaxSize: 0x0068
class UStaticMeshSocket : public UObject
{ 
public:
	FName                                              SocketName;                                                 // 0x0028   (0x0008)  
	FVector                                            RelativeLocation;                                           // 0x0030   (0x000C)  
	FRotator                                           RelativeRotation;                                           // 0x003C   (0x000C)  
	FVector                                            RelativeScale;                                              // 0x0048   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            Tag;                                                        // 0x0058   (0x0010)  
};

/// Class /Script/Engine.StereoLayerShape
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UStereoLayerShape : public UObject
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeQuad
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UStereoLayerShapeQuad : public UStereoLayerShape
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeCylinder
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UStereoLayerShapeCylinder : public UStereoLayerShape
{ 
public:
	float                                              Radius;                                                     // 0x0028   (0x0004)  
	float                                              OverlayArc;                                                 // 0x002C   (0x0004)  
	int32_t                                            Height;                                                     // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0034   (0x0004)  MISSED

	/// Functions
	// Function /Script/Engine.StereoLayerShapeCylinder.SetRadius
	constexpr static const FunctionPointer<UStereoLayerShapeCylinder, void, const float> SetRadius = { 0x4995e40, 0 }; 
	// Function /Script/Engine.StereoLayerShapeCylinder.SetOverlayArc
	constexpr static const FunctionPointer<UStereoLayerShapeCylinder, void, const float> SetOverlayArc = { 0x4995d30, 1 }; 
	// Function /Script/Engine.StereoLayerShapeCylinder.SetHeight
	constexpr static const FunctionPointer<UStereoLayerShapeCylinder, void, const int32_t> SetHeight = { 0x4995c30, 2 }; 
};

/// Class /Script/Engine.StereoLayerShapeCubemap
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UStereoLayerShapeCubemap : public UStereoLayerShape
{ 
public:
};

/// Class /Script/Engine.StereoLayerShapeEquirect
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class UStereoLayerShapeEquirect : public UStereoLayerShape
{ 
public:
	FBox2D                                             LeftUVRect;                                                 // 0x0028   (0x0014)  
	FBox2D                                             RightUVRect;                                                // 0x003C   (0x0014)  
	FVector2D                                          LeftScale;                                                  // 0x0050   (0x0008)  
	FVector2D                                          RightScale;                                                 // 0x0058   (0x0008)  
	FVector2D                                          LeftBias;                                                   // 0x0060   (0x0008)  
	FVector2D                                          RightBias;                                                  // 0x0068   (0x0008)  

	/// Functions
	// Function /Script/Engine.StereoLayerShapeEquirect.SetEquirectProps
	constexpr static const FunctionPointer<UStereoLayerShapeEquirect, void, const FEquirectProps> SetEquirectProps = { 0x4996660, 0 }; 
};

/// Struct /Script/Engine.EquirectProps
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FEquirectProps
{ 
	FBox2D                                             LeftUVRect;                                                 // 0x0000   (0x0014)  
	FBox2D                                             RightUVRect;                                                // 0x0014   (0x0014)  
	FVector2D                                          LeftScale;                                                  // 0x0028   (0x0008)  
	FVector2D                                          RightScale;                                                 // 0x0030   (0x0008)  
	FVector2D                                          LeftBias;                                                   // 0x0038   (0x0008)  
	FVector2D                                          RightBias;                                                  // 0x0040   (0x0008)  
};

/// Class /Script/Engine.StereoLayerComponent
/// Size: 0x0350 (848 bytes) (0x000260 - 0x000350) align n/a MaxSize: 0x0350
class UStereoLayerComponent : public USceneComponent
{ 
public:
	bool                                               bLiveTexture : 1;                                           // 0x0260:0 (0x0001)  
	bool                                               bSupportsDepth : 1;                                         // 0x0260:1 (0x0001)  
	bool                                               bNoAlphaChannel : 1;                                        // 0x0260:2 (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x0261   (0x0007)  MISSED
	class UTexture*                                    Texture;                                                    // 0x0268   (0x0008)  
	class UTexture*                                    LeftTexture;                                                // 0x0270   (0x0008)  
	bool                                               bQuadPreserveTextureRatio : 1;                              // 0x0278:0 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x0279   (0x0003)  MISSED
	FVector2D                                          QuadSize;                                                   // 0x027C   (0x0008)  
	FBox2D                                             UVRect;                                                     // 0x0284   (0x0014)  
	float                                              CylinderRadius;                                             // 0x0298   (0x0004)  
	float                                              CylinderOverlayArc;                                         // 0x029C   (0x0004)  
	int32_t                                            CylinderHeight;                                             // 0x02A0   (0x0004)  
	FEquirectProps                                     EquirectProps;                                              // 0x02A4   (0x0048)  
	TEnumAsByte<EStereoLayerType>                      StereoLayerType;                                            // 0x02EC   (0x0001)  
	TEnumAsByte<EStereoLayerShape>                     StereoLayerShape;                                           // 0x02ED   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x02EE   (0x0002)  MISSED
	class UStereoLayerShape*                           Shape;                                                      // 0x02F0   (0x0008)  
	int32_t                                            Priority;                                                   // 0x02F8   (0x0004)  
	unsigned char                                      UnknownData07_7[0x54];                                      // 0x02FC   (0x0054)  MISSED

	/// Functions
	// Function /Script/Engine.StereoLayerComponent.SetUVRect
	constexpr static const FunctionPointer<UStereoLayerComponent, void, const FBox2D> SetUVRect = { 0x4996ea0, 0 }; 
	// Function /Script/Engine.StereoLayerComponent.SetTexture
	constexpr static const FunctionPointer<UStereoLayerComponent, void, const UTexture*> SetTexture = { 0x4997210, 1 }; 
	// Function /Script/Engine.StereoLayerComponent.SetQuadSize
	constexpr static const FunctionPointer<UStereoLayerComponent, void, const FVector2D> SetQuadSize = { 0x4996ff0, 2 }; 
	// Function /Script/Engine.StereoLayerComponent.SetPriority
	constexpr static const FunctionPointer<UStereoLayerComponent, void, const int32_t> SetPriority = { 0x4996b70, 3 }; 
	// Function /Script/Engine.StereoLayerComponent.SetLeftTexture
	constexpr static const FunctionPointer<UStereoLayerComponent, void, const UTexture*> SetLeftTexture = { 0x4997120, 4 }; 
	// Function /Script/Engine.StereoLayerComponent.SetEquirectProps
	constexpr static const FunctionPointer<UStereoLayerComponent, void, const FEquirectProps> SetEquirectProps = { 0x4996c50, 5 }; 
	// Function /Script/Engine.StereoLayerComponent.MarkTextureForUpdate
	constexpr static const FunctionPointer<UStereoLayerComponent, void> MarkTextureForUpdate = { 0x4996b30, 6 }; 
	// Function /Script/Engine.StereoLayerComponent.GetUVRect
	constexpr static const FunctionPointer<UStereoLayerComponent, FBox2D> GetUVRect = { 0x4996e70, 7 }; 
	// Function /Script/Engine.StereoLayerComponent.GetTexture
	constexpr static const FunctionPointer<UStereoLayerComponent, UTexture*> GetTexture = { 0x4997100, 8 }; 
	// Function /Script/Engine.StereoLayerComponent.GetQuadSize
	constexpr static const FunctionPointer<UStereoLayerComponent, FVector2D> GetQuadSize = { 0x4996fc0, 9 }; 
	// Function /Script/Engine.StereoLayerComponent.GetPriority
	constexpr static const FunctionPointer<UStereoLayerComponent, int32_t> GetPriority = { 0x4996b50, 10 }; 
	// Function /Script/Engine.StereoLayerComponent.GetLeftTexture
	constexpr static const FunctionPointer<UStereoLayerComponent, UTexture*> GetLeftTexture = { 0x49970e0, 11 }; 
};

/// Class /Script/Engine.StereoLayerFunctionLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.StereoLayerFunctionLibrary.ShowSplashScreen
	constexpr static const FunctionPointer<UStereoLayerFunctionLibrary, void> ShowSplashScreen = { 0x3864fc0, 0 }; 
	// Function /Script/Engine.StereoLayerFunctionLibrary.SetSplashScreen
	constexpr static const FunctionPointer<UStereoLayerFunctionLibrary, void, const UTexture*, const FVector2D, const FVector, const bool, const bool> SetSplashScreen = { 0x4997a80, 1 }; 
	// Function /Script/Engine.StereoLayerFunctionLibrary.HideSplashScreen
	constexpr static const FunctionPointer<UStereoLayerFunctionLibrary, void> HideSplashScreen = { 0x3864f60, 2 }; 
	// Function /Script/Engine.StereoLayerFunctionLibrary.EnableAutoLoadingSplashScreen
	constexpr static const FunctionPointer<UStereoLayerFunctionLibrary, void, const bool> EnableAutoLoadingSplashScreen = { 0x49979b0, 3 }; 
};

/// Class /Script/Engine.StringTable
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UStringTable : public UObject
{ 
public:
	unsigned char                                      UnknownData01_1[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.SubsurfaceProfileStruct
/// Size: 0x008C (140 bytes) (0x000000 - 0x00008C) align n/a MaxSize: 0x008C
struct FSubsurfaceProfileStruct
{ 
	FLinearColor                                       SurfaceAlbedo;                                              // 0x0000   (0x0010)  
	FLinearColor                                       MeanFreePathColor;                                          // 0x0010   (0x0010)  
	float                                              MeanFreePathDistance;                                       // 0x0020   (0x0004)  
	float                                              WorldUnitScale;                                             // 0x0024   (0x0004)  
	bool                                               bEnableBurley;                                              // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              ScatterRadius;                                              // 0x002C   (0x0004)  
	FLinearColor                                       SubsurfaceColor;                                            // 0x0030   (0x0010)  
	FLinearColor                                       FalloffColor;                                               // 0x0040   (0x0010)  
	FLinearColor                                       BoundaryColorBleed;                                         // 0x0050   (0x0010)  
	float                                              ExtinctionScale;                                            // 0x0060   (0x0004)  
	float                                              NormalScale;                                                // 0x0064   (0x0004)  
	float                                              ScatteringDistribution;                                     // 0x0068   (0x0004)  
	float                                              IOR;                                                        // 0x006C   (0x0004)  
	float                                              Roughness0;                                                 // 0x0070   (0x0004)  
	float                                              Roughness1;                                                 // 0x0074   (0x0004)  
	float                                              LobeMix;                                                    // 0x0078   (0x0004)  
	FLinearColor                                       TransmissionTintColor;                                      // 0x007C   (0x0010)  
};

/// Class /Script/Engine.SubsurfaceProfile
/// Size: 0x00B8 (184 bytes) (0x000028 - 0x0000B8) align n/a MaxSize: 0x00B8
class USubsurfaceProfile : public UObject
{ 
public:
	FSubsurfaceProfileStruct                           Settings;                                                   // 0x0028   (0x008C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/Engine.SubsystemBlueprintLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetWorldSubsystem
	constexpr static const FunctionPointer<USubsystemBlueprintLibrary, UWorldSubsystem*, const UObject*, const UClass*> GetWorldSubsystem = { 0x499a640, 0 }; 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubSystemFromPlayerController
	constexpr static const FunctionPointer<USubsystemBlueprintLibrary, ULocalPlayerSubsystem*, const APlayerController*, const UClass*> GetLocalPlayerSubSystemFromPlayerController = { 0x499a420, 1 }; 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetLocalPlayerSubsystem
	constexpr static const FunctionPointer<USubsystemBlueprintLibrary, ULocalPlayerSubsystem*, const UObject*, const UClass*> GetLocalPlayerSubsystem = { 0x499a840, 2 }; 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetGameInstanceSubsystem
	constexpr static const FunctionPointer<USubsystemBlueprintLibrary, UGameInstanceSubsystem*, const UObject*, const UClass*> GetGameInstanceSubsystem = { 0x499aac0, 3 }; 
	// Function /Script/Engine.SubsystemBlueprintLibrary.GetEngineSubsystem
	constexpr static const FunctionPointer<USubsystemBlueprintLibrary, UEngineSubsystem*, const UClass*> GetEngineSubsystem = { 0x499acc0, 4 }; 
};

/// Class /Script/Engine.SubUVAnimation
/// Size: 0x0068 (104 bytes) (0x000028 - 0x000068) align n/a MaxSize: 0x0068
class USubUVAnimation : public UObject
{ 
public:
	class UTexture2D*                                  SubUVTexture;                                               // 0x0028   (0x0008)  
	int32_t                                            SubImages_Horizontal;                                       // 0x0030   (0x0004)  
	int32_t                                            SubImages_Vertical;                                         // 0x0034   (0x0004)  
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                               // 0x0038   (0x0001)  
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                          // 0x0039   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x003A   (0x0002)  MISSED
	float                                              AlphaThreshold;                                             // 0x003C   (0x0004)  
	unsigned char                                      UnknownData03_7[0x28];                                      // 0x0040   (0x0028)  MISSED
};

/// Class /Script/Engine.SystemTimeTimecodeProvider
/// Size: 0x0040 (64 bytes) (0x000030 - 0x000040) align n/a MaxSize: 0x0040
class USystemTimeTimecodeProvider : public UTimecodeProvider
{ 
public:
	FFrameRate                                         FrameRate;                                                  // 0x0030   (0x0008)  
	bool                                               bGenerateFullFrame;                                         // 0x0038   (0x0001)  
	bool                                               bUseHighPerformanceClock;                                   // 0x0039   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x003A   (0x0006)  MISSED
};

/// Class /Script/Engine.TargetPoint
/// Size: 0x02C8 (712 bytes) (0x0002C8 - 0x0002C8) align n/a MaxSize: 0x02C8
class ATargetPoint : public AActor
{ 
public:
};

/// Class /Script/Engine.TextPropertyTestObject
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class UTextPropertyTestObject : public UObject
{ 
public:
	FText                                              DefaultedText;                                              // 0x0028   (0x0018)  
	FText                                              UndefaultedText;                                            // 0x0040   (0x0018)  
	FText                                              TransientText;                                              // 0x0058   (0x0018)  
};

/// Class /Script/Engine.TextRenderActor
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ATextRenderActor : public AActor
{ 
public:
	class UTextRenderComponent*                        TextRender;                                                 // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.TextRenderComponent
/// Size: 0x0590 (1424 bytes) (0x000538 - 0x000590) align n/a MaxSize: 0x0590
class UTextRenderComponent : public UPrimitiveComponent
{ 
public:
	FText                                              text;                                                       // 0x0538   (0x0018)  
	class UMaterialInterface*                          TextMaterial;                                               // 0x0550   (0x0008)  
	class UFont*                                       Font;                                                       // 0x0558   (0x0008)  
	TEnumAsByte<EHorizTextAligment>                    HorizontalAlignment;                                        // 0x0560   (0x0001)  
	TEnumAsByte<EVerticalTextAligment>                 VerticalAlignment;                                          // 0x0561   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0562   (0x0002)  MISSED
	FColor                                             TextRenderColor;                                            // 0x0564   (0x0004)  
	float                                              XScale;                                                     // 0x0568   (0x0004)  
	float                                              YScale;                                                     // 0x056C   (0x0004)  
	float                                              WorldSize;                                                  // 0x0570   (0x0004)  
	float                                              InvDefaultSize;                                             // 0x0574   (0x0004)  
	float                                              HorizSpacingAdjust;                                         // 0x0578   (0x0004)  
	float                                              VertSpacingAdjust;                                          // 0x057C   (0x0004)  
	bool                                               bAlwaysRenderAsText : 1;                                    // 0x0580:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0xF];                                       // 0x0581   (0x000F)  MISSED

	/// Functions
	// Function /Script/Engine.TextRenderComponent.SetYScale
	constexpr static const FunctionPointer<UTextRenderComponent, void, const float> SetYScale = { 0x499ccc0, 0 }; 
	// Function /Script/Engine.TextRenderComponent.SetXScale
	constexpr static const FunctionPointer<UTextRenderComponent, void, const float> SetXScale = { 0x499cda0, 1 }; 
	// Function /Script/Engine.TextRenderComponent.SetWorldSize
	constexpr static const FunctionPointer<UTextRenderComponent, void, const float> SetWorldSize = { 0x499ca20, 2 }; 
	// Function /Script/Engine.TextRenderComponent.SetVertSpacingAdjust
	constexpr static const FunctionPointer<UTextRenderComponent, void, const float> SetVertSpacingAdjust = { 0x499cb00, 3 }; 
	// Function /Script/Engine.TextRenderComponent.SetVerticalAlignment
	constexpr static const FunctionPointer<UTextRenderComponent, void, const TEnumAsByte<EVerticalTextAligment>> SetVerticalAlignment = { 0x499cf50, 4 }; 
	// Function /Script/Engine.TextRenderComponent.SetTextRenderColor
	constexpr static const FunctionPointer<UTextRenderComponent, void, const FColor> SetTextRenderColor = { 0x499ce80, 5 }; 
	// Function /Script/Engine.TextRenderComponent.SetTextMaterial
	constexpr static const FunctionPointer<UTextRenderComponent, void, const UMaterialInterface*> SetTextMaterial = { 0x499d200, 6 }; 
	// Function /Script/Engine.TextRenderComponent.SetText
	constexpr static const FunctionPointer<UTextRenderComponent, void, const FString> SetText = { 0x499d420, 7 }; 
	// Function /Script/Engine.TextRenderComponent.SetHorizSpacingAdjust
	constexpr static const FunctionPointer<UTextRenderComponent, void, const float> SetHorizSpacingAdjust = { 0x499cbe0, 8 }; 
	// Function /Script/Engine.TextRenderComponent.SetHorizontalAlignment
	constexpr static const FunctionPointer<UTextRenderComponent, void, const TEnumAsByte<EHorizTextAligment>> SetHorizontalAlignment = { 0x499d020, 9 }; 
	// Function /Script/Engine.TextRenderComponent.SetFont
	constexpr static const FunctionPointer<UTextRenderComponent, void, const UFont*> SetFont = { 0x499d0f0, 10 }; 
	// Function /Script/Engine.TextRenderComponent.K2_SetText
	constexpr static const FunctionPointer<UTextRenderComponent, void, const FText&> K2_SetText = { 0x499d2e0, 11 }; 
	// Function /Script/Engine.TextRenderComponent.GetTextWorldSize
	constexpr static const FunctionPointer<UTextRenderComponent, FVector> GetTextWorldSize = { 0x499c8e0, 12 }; 
	// Function /Script/Engine.TextRenderComponent.GetTextLocalSize
	constexpr static const FunctionPointer<UTextRenderComponent, FVector> GetTextLocalSize = { 0x499c980, 13 }; 
};

/// Class /Script/Engine.Texture2DArray
/// Size: 0x0140 (320 bytes) (0x0000E0 - 0x000140) align n/a MaxSize: 0x0140
class UTexture2DArray : public UTexture
{ 
public:
	unsigned char                                      UnknownData02_8[0x58];                                      // 0x00E0   (0x0058)  MISSED
	TEnumAsByte<TextureAddress>                        AddressX;                                                   // 0x0138   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressY;                                                   // 0x0139   (0x0001)  
	TEnumAsByte<TextureAddress>                        AddressZ;                                                   // 0x013A   (0x0001)  
	unsigned char                                      UnknownData03_7[0x5];                                       // 0x013B   (0x0005)  MISSED
};

/// Class /Script/Engine.TextureLightProfile
/// Size: 0x0110 (272 bytes) (0x000108 - 0x000110) align n/a MaxSize: 0x0110
class UTextureLightProfile : public UTexture2D
{ 
public:
	float                                              Brightness;                                                 // 0x0108   (0x0004)  
	float                                              TextureMultiplier;                                          // 0x010C   (0x0004)  
};

/// Class /Script/Engine.TextureMipDataProviderFactory
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UTextureMipDataProviderFactory : public UAssetUserData
{ 
public:
};

/// Class /Script/Engine.TextureRenderTarget2DArray
/// Size: 0x0108 (264 bytes) (0x0000E8 - 0x000108) align n/a MaxSize: 0x0108
class UTextureRenderTarget2DArray : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x00E8   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x00EC   (0x0004)  
	int32_t                                            Slices;                                                     // 0x00F0   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x00F4   (0x0010)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x0104   (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x0105:0 (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x0105:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0106   (0x0002)  MISSED
};

/// Class /Script/Engine.TextureRenderTargetCube
/// Size: 0x0100 (256 bytes) (0x0000E8 - 0x000100) align n/a MaxSize: 0x0100
class UTextureRenderTargetCube : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x00E8   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x00EC   (0x0010)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x00FC   (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x00FD:0 (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x00FD:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x00FE   (0x0002)  MISSED
};

/// Class /Script/Engine.TextureRenderTargetVolume
/// Size: 0x0108 (264 bytes) (0x0000E8 - 0x000108) align n/a MaxSize: 0x0108
class UTextureRenderTargetVolume : public UTextureRenderTarget
{ 
public:
	int32_t                                            SizeX;                                                      // 0x00E8   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x00EC   (0x0004)  
	int32_t                                            SizeZ;                                                      // 0x00F0   (0x0004)  
	FLinearColor                                       ClearColor;                                                 // 0x00F4   (0x0010)  
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                             // 0x0104   (0x0001)  
	bool                                               bHDR : 1;                                                   // 0x0105:0 (0x0001)  
	bool                                               bForceLinearGamma : 1;                                      // 0x0105:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0106   (0x0002)  MISSED
};

/// Class /Script/Engine.ThumbnailInfo
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UThumbnailInfo : public UObject
{ 
public:
};

/// Struct /Script/Engine.TimelineEventEntry
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FTimelineEventEntry
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	FDelegateProperty                                  EventFunc;                                                  // 0x0004   (0x0010)  
};

/// Struct /Script/Engine.TimelineVectorTrack
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FTimelineVectorTrack
{ 
	class UCurveVector*                                VectorCurve;                                                // 0x0000   (0x0008)  
	FDelegateProperty                                  InterpFunc;                                                 // 0x0008   (0x0010)  
	FName                                              TrackName;                                                  // 0x0018   (0x0008)  
	FName                                              VectorPropertyName;                                         // 0x0020   (0x0008)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.TimelineFloatTrack
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FTimelineFloatTrack
{ 
	class UCurveFloat*                                 FloatCurve;                                                 // 0x0000   (0x0008)  
	FDelegateProperty                                  InterpFunc;                                                 // 0x0008   (0x0010)  
	FName                                              TrackName;                                                  // 0x0018   (0x0008)  
	FName                                              FloatPropertyName;                                          // 0x0020   (0x0008)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.TimelineLinearColorTrack
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FTimelineLinearColorTrack
{ 
	class UCurveLinearColor*                           LinearColorCurve;                                           // 0x0000   (0x0008)  
	FDelegateProperty                                  InterpFunc;                                                 // 0x0008   (0x0010)  
	FName                                              TrackName;                                                  // 0x0018   (0x0008)  
	FName                                              LinearColorPropertyName;                                    // 0x0020   (0x0008)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0028   (0x0018)  MISSED
};

/// Struct /Script/Engine.Timeline
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align n/a MaxSize: 0x0098
struct FTimeline
{ 
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                                 // 0x0000   (0x0001)  
	bool                                               bLooping : 1;                                               // 0x0001:0 (0x0001)  
	bool                                               bReversePlayback : 1;                                       // 0x0001:1 (0x0001)  
	bool                                               bPlaying : 1;                                               // 0x0001:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	float                                              Length;                                                     // 0x0004   (0x0004)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              position;                                                   // 0x000C   (0x0004)  
	TArray<FTimelineEventEntry>                        Events;                                                     // 0x0010   (0x0010)  
	TArray<FTimelineVectorTrack>                       InterpVectors;                                              // 0x0020   (0x0010)  
	TArray<FTimelineFloatTrack>                        InterpFloats;                                               // 0x0030   (0x0010)  
	TArray<FTimelineLinearColorTrack>                  InterpLinearColors;                                         // 0x0040   (0x0010)  
	FDelegateProperty                                  TimelinePostUpdateFunc;                                     // 0x0050   (0x0010)  
	FDelegateProperty                                  TimelineFinishedFunc;                                       // 0x0060   (0x0010)  
	TWeakObjectPtr<class UObject*>                     PropertySetObject;                                          // 0x0070   (0x0008)  
	FName                                              DirectionPropertyName;                                      // 0x0078   (0x0008)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x0080   (0x0018)  MISSED
};

/// Class /Script/Engine.TimelineComponent
/// Size: 0x0160 (352 bytes) (0x0000C0 - 0x000160) align n/a MaxSize: 0x0160
class UTimelineComponent : public UActorComponent
{ 
public:
	FTimeline                                          TheTimeline;                                                // 0x00C0   (0x0098)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x0158:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0159   (0x0007)  MISSED

	/// Functions
	// Function /Script/Engine.TimelineComponent.Stop
	constexpr static const FunctionPointer<UTimelineComponent, void> Stop = { 0x49a4860, 0 }; 
	// Function /Script/Engine.TimelineComponent.SetVectorCurve
	constexpr static const FunctionPointer<UTimelineComponent, void, const UCurveVector*, const FName> SetVectorCurve = { 0x49a3c00, 1 }; 
	// Function /Script/Engine.TimelineComponent.SetTimelineLengthMode
	constexpr static const FunctionPointer<UTimelineComponent, void, const TEnumAsByte<ETimelineLengthMode>> SetTimelineLengthMode = { 0x49a4090, 2 }; 
	// Function /Script/Engine.TimelineComponent.SetTimelineLength
	constexpr static const FunctionPointer<UTimelineComponent, void, const float> SetTimelineLength = { 0x49a4160, 3 }; 
	// Function /Script/Engine.TimelineComponent.SetPlayRate
	constexpr static const FunctionPointer<UTimelineComponent, void, const float> SetPlayRate = { 0x49a4400, 4 }; 
	// Function /Script/Engine.TimelineComponent.SetPlaybackPosition
	constexpr static const FunctionPointer<UTimelineComponent, void, const float, const bool, const bool> SetPlaybackPosition = { 0x49a4600, 5 }; 
	// Function /Script/Engine.TimelineComponent.SetNewTime
	constexpr static const FunctionPointer<UTimelineComponent, void, const float> SetNewTime = { 0x49a42e0, 6 }; 
	// Function /Script/Engine.TimelineComponent.SetLooping
	constexpr static const FunctionPointer<UTimelineComponent, void, const bool> SetLooping = { 0x49a4500, 7 }; 
	// Function /Script/Engine.TimelineComponent.SetLinearColorCurve
	constexpr static const FunctionPointer<UTimelineComponent, void, const UCurveLinearColor*, const FName> SetLinearColorCurve = { 0x49a3a40, 8 }; 
	// Function /Script/Engine.TimelineComponent.SetIgnoreTimeDilation
	constexpr static const FunctionPointer<UTimelineComponent, void, const bool> SetIgnoreTimeDilation = { 0x49a3fb0, 9 }; 
	// Function /Script/Engine.TimelineComponent.SetFloatCurve
	constexpr static const FunctionPointer<UTimelineComponent, void, const UCurveFloat*, const FName> SetFloatCurve = { 0x49a3dc0, 10 }; 
	// Function /Script/Engine.TimelineComponent.ReverseFromEnd
	constexpr static const FunctionPointer<UTimelineComponent, void> ReverseFromEnd = { 0x49a4880, 11 }; 
	// Function /Script/Engine.TimelineComponent.Reverse
	constexpr static const FunctionPointer<UTimelineComponent, void> Reverse = { 0x49a48f0, 12 }; 
	// Function /Script/Engine.TimelineComponent.PlayFromStart
	constexpr static const FunctionPointer<UTimelineComponent, void> PlayFromStart = { 0x49a4930, 13 }; 
	// Function /Script/Engine.TimelineComponent.Play
	constexpr static const FunctionPointer<UTimelineComponent, void> Play = { 0x49a4990, 14 }; 
	// Function /Script/Engine.TimelineComponent.OnRep_Timeline
	constexpr static const FunctionPointer<UTimelineComponent, void> OnRep_Timeline = { 0x49a3a00, 15 }; 
	// Function /Script/Engine.TimelineComponent.IsReversing
	constexpr static const FunctionPointer<UTimelineComponent, bool> IsReversing = { 0x49a4800, 16 }; 
	// Function /Script/Engine.TimelineComponent.IsPlaying
	constexpr static const FunctionPointer<UTimelineComponent, bool> IsPlaying = { 0x49a4830, 17 }; 
	// Function /Script/Engine.TimelineComponent.IsLooping
	constexpr static const FunctionPointer<UTimelineComponent, bool> IsLooping = { 0x49a44d0, 18 }; 
	// Function /Script/Engine.TimelineComponent.GetTimelineLength
	constexpr static const FunctionPointer<UTimelineComponent, float> GetTimelineLength = { 0x49a4270, 19 }; 
	// Function /Script/Engine.TimelineComponent.GetPlayRate
	constexpr static const FunctionPointer<UTimelineComponent, float> GetPlayRate = { 0x49a43e0, 20 }; 
	// Function /Script/Engine.TimelineComponent.GetPlaybackPosition
	constexpr static const FunctionPointer<UTimelineComponent, float> GetPlaybackPosition = { 0x49a45e0, 21 }; 
	// Function /Script/Engine.TimelineComponent.GetIgnoreTimeDilation
	constexpr static const FunctionPointer<UTimelineComponent, bool> GetIgnoreTimeDilation = { 0x49a3f80, 22 }; 
};

/// Struct /Script/Engine.TTTrackBase
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FTTTrackBase
{ 
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FName                                              TrackName;                                                  // 0x0008   (0x0008)  
	bool                                               bIsExternalCurve;                                           // 0x0010   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0011   (0x0007)  MISSED
};

/// Struct /Script/Engine.TTEventTrack
/// Size: 0x0028 (40 bytes) (0x000018 - 0x000028) align n/a MaxSize: 0x0028
struct FTTEventTrack : FTTTrackBase
{ 
	FName                                              FunctionName;                                               // 0x0018   (0x0008)  
	class UCurveFloat*                                 CurveKeys;                                                  // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.TTPropertyTrack
/// Size: 0x0020 (32 bytes) (0x000018 - 0x000020) align n/a MaxSize: 0x0020
struct FTTPropertyTrack : FTTTrackBase
{ 
	FName                                              PropertyName;                                               // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.TTFloatTrack
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000028) align n/a MaxSize: 0x0028
struct FTTFloatTrack : FTTPropertyTrack
{ 
	class UCurveFloat*                                 CurveFloat;                                                 // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.TTVectorTrack
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000028) align n/a MaxSize: 0x0028
struct FTTVectorTrack : FTTPropertyTrack
{ 
	class UCurveVector*                                CurveVector;                                                // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.TTLinearColorTrack
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000028) align n/a MaxSize: 0x0028
struct FTTLinearColorTrack : FTTPropertyTrack
{ 
	class UCurveLinearColor*                           CurveLinearColor;                                           // 0x0020   (0x0008)  
};

/// Class /Script/Engine.TimelineTemplate
/// Size: 0x00B0 (176 bytes) (0x000028 - 0x0000B0) align n/a MaxSize: 0x00B0
class UTimelineTemplate : public UObject
{ 
public:
	float                                              TimelineLength;                                             // 0x0028   (0x0004)  
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                                 // 0x002C   (0x0001)  
	bool                                               bAutoPlay : 1;                                              // 0x002D:0 (0x0001)  
	bool                                               bLoop : 1;                                                  // 0x002D:1 (0x0001)  
	bool                                               bReplicated : 1;                                            // 0x002D:2 (0x0001)  
	bool                                               bIgnoreTimeDilation : 1;                                    // 0x002D:3 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x002E   (0x0002)  MISSED
	TArray<FTTEventTrack>                              EventTracks;                                                // 0x0030   (0x0010)  
	TArray<FTTFloatTrack>                              FloatTracks;                                                // 0x0040   (0x0010)  
	TArray<FTTVectorTrack>                             VectorTracks;                                               // 0x0050   (0x0010)  
	TArray<FTTLinearColorTrack>                        LinearColorTracks;                                          // 0x0060   (0x0010)  
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x0070   (0x0010)  
	FGuid                                              TimelineGuid;                                               // 0x0080   (0x0010)  
	FName                                              VariableName;                                               // 0x0090   (0x0008)  
	FName                                              DirectionPropertyName;                                      // 0x0098   (0x0008)  
	FName                                              UpdateFunctionName;                                         // 0x00A0   (0x0008)  
	FName                                              FinishedFunctionName;                                       // 0x00A8   (0x0008)  
};

/// Class /Script/Engine.TireType
/// Size: 0x0038 (56 bytes) (0x000030 - 0x000038) align n/a MaxSize: 0x0038
class UTireType : public UDataAsset
{ 
public:
	float                                              FrictionScale;                                              // 0x0030   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/Engine.TouchInputControl
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FTouchInputControl
{ 
	class UTexture2D*                                  image1;                                                     // 0x0000   (0x0008)  
	class UTexture2D*                                  Image2;                                                     // 0x0008   (0x0008)  
	FVector2D                                          Center;                                                     // 0x0010   (0x0008)  
	FVector2D                                          VisualSize;                                                 // 0x0018   (0x0008)  
	FVector2D                                          ThumbSize;                                                  // 0x0020   (0x0008)  
	FVector2D                                          InteractionSize;                                            // 0x0028   (0x0008)  
	FVector2D                                          InputScale;                                                 // 0x0030   (0x0008)  
	FKey                                               MainInputKey;                                               // 0x0038   (0x0018)  
	FKey                                               AltInputKey;                                                // 0x0050   (0x0018)  
};

/// Class /Script/Engine.TouchInterface
/// Size: 0x0058 (88 bytes) (0x000028 - 0x000058) align n/a MaxSize: 0x0058
class UTouchInterface : public UObject
{ 
public:
	TArray<FTouchInputControl>                         Controls;                                                   // 0x0028   (0x0010)  
	float                                              ActiveOpacity;                                              // 0x0038   (0x0004)  
	float                                              InactiveOpacity;                                            // 0x003C   (0x0004)  
	float                                              TimeUntilDeactive;                                          // 0x0040   (0x0004)  
	float                                              TimeUntilReset;                                             // 0x0044   (0x0004)  
	float                                              ActivationDelay;                                            // 0x0048   (0x0004)  
	bool                                               bPreventRecenter;                                           // 0x004C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              StartupDelay;                                               // 0x0050   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0054   (0x0004)  MISSED
};

/// Class /Script/Engine.TriggerBase
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class ATriggerBase : public AActor
{ 
public:
	class UShapeComponent*                             CollisionComponent;                                         // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.TriggerBox
/// Size: 0x02D0 (720 bytes) (0x0002D0 - 0x0002D0) align n/a MaxSize: 0x02D0
class ATriggerBox : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.TriggerCapsule
/// Size: 0x02D0 (720 bytes) (0x0002D0 - 0x0002D0) align n/a MaxSize: 0x02D0
class ATriggerCapsule : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.TriggerSphere
/// Size: 0x02D0 (720 bytes) (0x0002D0 - 0x0002D0) align n/a MaxSize: 0x02D0
class ATriggerSphere : public ATriggerBase
{ 
public:
};

/// Class /Script/Engine.TwitterIntegrationBase
/// Size: 0x0038 (56 bytes) (0x000038 - 0x000038) align n/a MaxSize: 0x0038
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{ 
public:

	/// Functions
	// Function /Script/Engine.TwitterIntegrationBase.TwitterRequest
	constexpr static const FunctionPointer<UTwitterIntegrationBase, bool, const FString, const TArray<FString>&, const TEnumAsByte<ETwitterRequestMethod>, const int32_t> TwitterRequest = { 0x49a81d0, 0 }; 
	// Function /Script/Engine.TwitterIntegrationBase.ShowTweetUI
	constexpr static const FunctionPointer<UTwitterIntegrationBase, bool, const FString, const FString, const FString> ShowTweetUI = { 0x49a8610, 1 }; 
	// Function /Script/Engine.TwitterIntegrationBase.Init
	constexpr static const FunctionPointer<UTwitterIntegrationBase, void> Init = { 0x38170d0, 2 }; 
	// Function /Script/Engine.TwitterIntegrationBase.GetNumAccounts
	constexpr static const FunctionPointer<UTwitterIntegrationBase, int32_t> GetNumAccounts = { 0x49a85e0, 3 }; 
	// Function /Script/Engine.TwitterIntegrationBase.GetAccountName
	constexpr static const FunctionPointer<UTwitterIntegrationBase, FString, const int32_t> GetAccountName = { 0x49a84b0, 4 }; 
	// Function /Script/Engine.TwitterIntegrationBase.CanShowTweetUI
	constexpr static const FunctionPointer<UTwitterIntegrationBase, bool> CanShowTweetUI = { 0x38170a0, 5 }; 
	// Function /Script/Engine.TwitterIntegrationBase.AuthorizeAccounts
	constexpr static const FunctionPointer<UTwitterIntegrationBase, bool> AuthorizeAccounts = { 0x383ebc0, 6 }; 
};

/// Class /Script/Engine.UserDefinedEnum
/// Size: 0x00B0 (176 bytes) (0x000060 - 0x0000B0) align n/a MaxSize: 0x00B0
class UUserDefinedEnum : public UEnum
{ 
public:
	TMap<FName, FText>                                 DisplayNameMap;                                             // 0x0060   (0x0050)  
};

/// Class /Script/Engine.UserDefinedStruct
/// Size: 0x0108 (264 bytes) (0x0000C0 - 0x000108) align n/a MaxSize: 0x0108
class UUserDefinedStruct : public UScriptStruct
{ 
public:
	TEnumAsByte<EUserDefinedStructureStatus>           Status;                                                     // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00C1   (0x0003)  MISSED
	FGuid                                              Guid;                                                       // 0x00C4   (0x0010)  
	unsigned char                                      UnknownData03_7[0x34];                                      // 0x00D4   (0x0034)  MISSED
};

/// Struct /Script/Engine.HardwareCursorReference
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FHardwareCursorReference
{ 
	FName                                              CursorPath;                                                 // 0x0000   (0x0008)  
	FVector2D                                          HotSpot;                                                    // 0x0008   (0x0008)  
};

/// Class /Script/Engine.UserInterfaceSettings
/// Size: 0x0270 (624 bytes) (0x000038 - 0x000270) align n/a MaxSize: 0x0270
class UUserInterfaceSettings : public UDeveloperSettings
{ 
public:
	ERenderFocusRule                                   RenderFocusRule;                                            // 0x0038   (0x0001)  
	unsigned char                                      UnknownData05_6[0x7];                                       // 0x0039   (0x0007)  MISSED
	TMap<TEnumAsByte<EMouseCursor>, FHardwareCursorReference> HardwareCursors;                                     // 0x0040   (0x0050)  
	TMap<TEnumAsByte<EMouseCursor>, FSoftClassPath>    SoftwareCursors;                                            // 0x0090   (0x0050)  
	FSoftClassPath                                     DefaultCursor;                                              // 0x00E0   (0x0018)  
	FSoftClassPath                                     TextEditBeamCursor;                                         // 0x00F8   (0x0018)  
	FSoftClassPath                                     CrosshairsCursor;                                           // 0x0110   (0x0018)  
	FSoftClassPath                                     HandCursor;                                                 // 0x0128   (0x0018)  
	FSoftClassPath                                     GrabHandCursor;                                             // 0x0140   (0x0018)  
	FSoftClassPath                                     GrabHandClosedCursor;                                       // 0x0158   (0x0018)  
	FSoftClassPath                                     SlashedCircleCursor;                                        // 0x0170   (0x0018)  
	float                                              ApplicationScale;                                           // 0x0188   (0x0004)  
	EUIScalingRule                                     UIScaleRule;                                                // 0x018C   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x018D   (0x0003)  MISSED
	FSoftClassPath                                     CustomScalingRuleClass;                                     // 0x0190   (0x0018)  
	FRuntimeFloatCurve                                 UIScaleCurve;                                               // 0x01A8   (0x0088)  
	bool                                               bAllowHighDPIInGameMode;                                    // 0x0230   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0231   (0x0003)  MISSED
	FIntPoint                                          DesignScreenSize;                                           // 0x0234   (0x0008)  
	bool                                               bLoadWidgetsOnDedicatedServer;                              // 0x023C   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x023D   (0x0003)  MISSED
	TArray<class UObject*>                             CursorClasses;                                              // 0x0240   (0x0010)  
	class UClass*                                      CustomScalingRuleClassInstance;                             // 0x0250   (0x0008)  
	class UDPICustomScalingRule*                       CustomScalingRule;                                          // 0x0258   (0x0008)  
	unsigned char                                      UnknownData09_7[0x10];                                      // 0x0260   (0x0010)  MISSED
};

/// Class /Script/Engine.VectorField
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class UVectorField : public UObject
{ 
public:
	FBox                                               Bounds;                                                     // 0x0028   (0x001C)  
	float                                              Intensity;                                                  // 0x0044   (0x0004)  
};

/// Class /Script/Engine.VectorFieldAnimated
/// Size: 0x0088 (136 bytes) (0x000048 - 0x000088) align n/a MaxSize: 0x0088
class UVectorFieldAnimated : public UVectorField
{ 
public:
	class UTexture2D*                                  Texture;                                                    // 0x0048   (0x0008)  
	TEnumAsByte<EVectorFieldConstructionOp>            ConstructionOp;                                             // 0x0050   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	int32_t                                            VolumeSizeX;                                                // 0x0054   (0x0004)  
	int32_t                                            VolumeSizeY;                                                // 0x0058   (0x0004)  
	int32_t                                            VolumeSizeZ;                                                // 0x005C   (0x0004)  
	int32_t                                            SubImagesX;                                                 // 0x0060   (0x0004)  
	int32_t                                            SubImagesY;                                                 // 0x0064   (0x0004)  
	int32_t                                            FrameCount;                                                 // 0x0068   (0x0004)  
	float                                              FramesPerSecond;                                            // 0x006C   (0x0004)  
	bool                                               bLoop : 1;                                                  // 0x0070:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x7];                                       // 0x0071   (0x0007)  MISSED
	class UVectorFieldStatic*                          NoiseField;                                                 // 0x0078   (0x0008)  
	float                                              NoiseScale;                                                 // 0x0080   (0x0004)  
	float                                              NoiseMax;                                                   // 0x0084   (0x0004)  
};

/// Class /Script/Engine.VectorFieldComponent
/// Size: 0x0560 (1376 bytes) (0x000538 - 0x000560) align n/a MaxSize: 0x0560
class UVectorFieldComponent : public UPrimitiveComponent
{ 
public:
	class UVectorField*                                VectorField;                                                // 0x0538   (0x0008)  
	float                                              Intensity;                                                  // 0x0540   (0x0004)  
	float                                              Tightness;                                                  // 0x0544   (0x0004)  
	bool                                               bPreviewVectorField : 1;                                    // 0x0548:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x17];                                      // 0x0549   (0x0017)  MISSED

	/// Functions
	// Function /Script/Engine.VectorFieldComponent.SetIntensity
	constexpr static const FunctionPointer<UVectorFieldComponent, void, const float> SetIntensity = { 0x49aa2e0, 0 }; 
};

/// Class /Script/Engine.VectorFieldStatic
/// Size: 0x0098 (152 bytes) (0x000048 - 0x000098) align n/a MaxSize: 0x0098
class UVectorFieldStatic : public UVectorField
{ 
public:
	int32_t                                            SizeX;                                                      // 0x0048   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x004C   (0x0004)  
	int32_t                                            SizeZ;                                                      // 0x0050   (0x0004)  
	bool                                               bAllowCPUAccess;                                            // 0x0054   (0x0001)  
	unsigned char                                      UnknownData01_7[0x43];                                      // 0x0055   (0x0043)  MISSED
};

/// Class /Script/Engine.VectorFieldVolume
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class AVectorFieldVolume : public AActor
{ 
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                       // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.ViewportStatsSubsystem
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align n/a MaxSize: 0x0050
class UViewportStatsSubsystem : public UWorldSubsystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x20];                                      // 0x0030   (0x0020)  MISSED

	/// Functions
	// Function /Script/Engine.ViewportStatsSubsystem.RemoveDisplayDelegate
	constexpr static const FunctionPointer<UViewportStatsSubsystem, void, const int32_t> RemoveDisplayDelegate = { 0x49aaea0, 0 }; 
	// Function /Script/Engine.ViewportStatsSubsystem.AddTimedDisplay
	constexpr static const FunctionPointer<UViewportStatsSubsystem, void, const FText, const FLinearColor, const float> AddTimedDisplay = { 0x49ab1e0, 1 }; 
	// Function /Script/Engine.ViewportStatsSubsystem.AddDisplayDelegate
	constexpr static const FunctionPointer<UViewportStatsSubsystem, int32_t, const FDelegateProperty&> AddDisplayDelegate = { 0x49ab050, 2 }; 
};

/// Class /Script/Engine.VirtualTexture
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UVirtualTexture : public UObject
{ 
public:
};

/// Class /Script/Engine.LightMapVirtualTexture
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class ULightMapVirtualTexture : public UVirtualTexture
{ 
public:
};

/// Class /Script/Engine.RuntimeVirtualTextureStreamingProxy
/// Size: 0x0108 (264 bytes) (0x000108 - 0x000108) align n/a MaxSize: 0x0108
class URuntimeVirtualTextureStreamingProxy : public UTexture2D
{ 
public:
};

/// Struct /Script/Engine.VirtualTextureBuildSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FVirtualTextureBuildSettings
{ 
	int32_t                                            TileSize;                                                   // 0x0000   (0x0004)  
	int32_t                                            TileBorderSize;                                             // 0x0004   (0x0004)  
	bool                                               bEnableCompressCrunch;                                      // 0x0008   (0x0001)  
	bool                                               bEnableCompressZlib;                                        // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Class /Script/Engine.VirtualTexture2D
/// Size: 0x0118 (280 bytes) (0x000108 - 0x000118) align n/a MaxSize: 0x0118
class UVirtualTexture2D : public UTexture2D
{ 
public:
	FVirtualTextureBuildSettings                       Settings;                                                   // 0x0108   (0x000C)  
	bool                                               bContinuousUpdate;                                          // 0x0114   (0x0001)  
	bool                                               bSinglePhysicalSpace;                                       // 0x0115   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x0116   (0x0002)  MISSED
};

/// Class /Script/Engine.VirtualTextureBuilder
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UVirtualTextureBuilder : public UObject
{ 
public:
	class UVirtualTexture2D*                           Texture;                                                    // 0x0028   (0x0008)  
	uint64_t                                           BuildHash;                                                  // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.VirtualTextureSpacePoolConfig
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FVirtualTextureSpacePoolConfig
{ 
	int32_t                                            MinTileSize;                                                // 0x0000   (0x0004)  
	int32_t                                            MaxTileSize;                                                // 0x0004   (0x0004)  
	TArray<TEnumAsByte<EPixelFormat>>                  Formats;                                                    // 0x0008   (0x0010)  
	int32_t                                            SizeInMegabyte;                                             // 0x0018   (0x0004)  
	bool                                               bAllowSizeScale;                                            // 0x001C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	uint32_t                                           ScalabilityGroup;                                           // 0x0020   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/Engine.VirtualTexturePoolConfig
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UVirtualTexturePoolConfig : public UObject
{ 
public:
	int32_t                                            DefaultSizeInMegabyte;                                      // 0x0028   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x002C   (0x0004)  MISSED
	TArray<FVirtualTextureSpacePoolConfig>             Pools;                                                      // 0x0030   (0x0010)  
};

/// Class /Script/Engine.VisualLoggerAutomationTests
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UVisualLoggerAutomationTests : public UObject
{ 
public:
};

/// Class /Script/Engine.VisualLoggerDebugSnapshotInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UVisualLoggerDebugSnapshotInterface : public UInterface
{ 
public:
};

/// Class /Script/Engine.VisualLoggerKismetLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.VisualLoggerKismetLibrary.RedirectVislog
	constexpr static const FunctionPointer<UVisualLoggerKismetLibrary, void, const UObject*, const UObject*> RedirectVislog = { 0x267feb0, 0 }; 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogText
	constexpr static const FunctionPointer<UVisualLoggerKismetLibrary, void, const UObject*, const FString, const FName, const bool> LogText = { 0x49af020, 1 }; 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogSegment
	constexpr static const FunctionPointer<UVisualLoggerKismetLibrary, void, const UObject*, const FVector, const FVector, const FString, const FLinearColor, const float, const FName, const bool> LogSegment = { 0x49ae340, 2 }; 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogLocation
	constexpr static const FunctionPointer<UVisualLoggerKismetLibrary, void, const UObject*, const FVector, const FString, const FLinearColor, const float, const FName, const bool> LogLocation = { 0x49aebd0, 3 }; 
	// Function /Script/Engine.VisualLoggerKismetLibrary.LogBox
	constexpr static const FunctionPointer<UVisualLoggerKismetLibrary, void, const UObject*, const FBox, const FString, const FLinearColor, const FName, const bool> LogBox = { 0x49ae800, 4 }; 
	// Function /Script/Engine.VisualLoggerKismetLibrary.EnableRecording
	constexpr static const FunctionPointer<UVisualLoggerKismetLibrary, void, const bool> EnableRecording = { 0x26a9510, 5 }; 
};

/// Class /Script/Engine.VoiceChannel
/// Size: 0x0080 (128 bytes) (0x000070 - 0x000080) align n/a MaxSize: 0x0080
class UVoiceChannel : public UChannel
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0070   (0x0010)  MISSED
};

/// Struct /Script/Engine.VoiceSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FVoiceSettings
{ 
	class USceneComponent*                             ComponentToAttachTo;                                        // 0x0000   (0x0008)  
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0008   (0x0008)  
	class USoundEffectSourcePresetChain*               SourceEffectChain;                                          // 0x0010   (0x0008)  
};

/// Class /Script/Engine.VOIPTalker
/// Size: 0x00F8 (248 bytes) (0x0000C0 - 0x0000F8) align n/a MaxSize: 0x00F8
class UVOIPTalker : public UActorComponent
{ 
public:
	FVoiceSettings                                     Settings;                                                   // 0x00C0   (0x0018)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x00D8   (0x0020)  MISSED

	/// Functions
	// Function /Script/Engine.VOIPTalker.RegisterWithPlayerState
	constexpr static const FunctionPointer<UVOIPTalker, void, const APlayerState*> RegisterWithPlayerState = { 0x49afe60, 0 }; 
	// Function /Script/Engine.VOIPTalker.GetVoiceLevel
	constexpr static const FunctionPointer<UVOIPTalker, float> GetVoiceLevel = { 0x3c79890, 1 }; 
	// Function /Script/Engine.VOIPTalker.CreateTalkerForPlayer
	constexpr static const FunctionPointer<UVOIPTalker, UVOIPTalker*, const APlayerState*> CreateTalkerForPlayer = { 0x49aff40, 2 }; 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingEnd
	constexpr static const FunctionPointer<UVOIPTalker, void> BPOnTalkingEnd = { 0x49afd60, 3 }; 
	// Function /Script/Engine.VOIPTalker.BPOnTalkingBegin
	constexpr static const FunctionPointer<UVOIPTalker, void, const UAudioComponent*> BPOnTalkingBegin = { 0x49afd80, 4 }; 
};

/// Class /Script/Engine.VOIPStatics
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UVOIPStatics : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/Engine.VOIPStatics.SetMicThreshold
	constexpr static const FunctionPointer<UVOIPStatics, void, const float> SetMicThreshold = { 0x49b04c0, 0 }; 
};

/// Class /Script/Engine.VolumeComponent
/// Size: 0x0270 (624 bytes) (0x000260 - 0x000270) align n/a MaxSize: 0x0270
class UVolumeComponent : public USceneComponent
{ 
public:
	float                                              VolumeRadius;                                               // 0x0260   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0264   (0x000C)  MISSED
};

/// Class /Script/Engine.VolumeTexture
/// Size: 0x0138 (312 bytes) (0x0000E0 - 0x000138) align n/a MaxSize: 0x0138
class UVolumeTexture : public UTexture
{ 
public:
	unsigned char                                      UnknownData01_1[0x58];                                      // 0x00E0   (0x0058)  MISSED
};

/// Class /Script/Engine.VolumetricCloudComponent
/// Size: 0x02B0 (688 bytes) (0x000260 - 0x0002B0) align n/a MaxSize: 0x02B0
class UVolumetricCloudComponent : public USceneComponent
{ 
public:
	float                                              LayerBottomAltitude;                                        // 0x0260   (0x0004)  
	float                                              LayerHeight;                                                // 0x0264   (0x0004)  
	float                                              TracingStartMaxDistance;                                    // 0x0268   (0x0004)  
	float                                              TracingMaxDistance;                                         // 0x026C   (0x0004)  
	float                                              PlanetRadius;                                               // 0x0270   (0x0004)  
	FColor                                             GroundAlbedo;                                               // 0x0274   (0x0004)  
	class UMaterialInterface*                          Material;                                                   // 0x0278   (0x0008)  
	bool                                               bUsePerSampleAtmosphericLightTransmittance : 1;             // 0x0280:0 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0281   (0x0003)  MISSED
	float                                              SkyLightCloudBottomOcclusion;                               // 0x0284   (0x0004)  
	float                                              ViewSampleCountScale;                                       // 0x0288   (0x0004)  
	float                                              ReflectionSampleCountScale;                                 // 0x028C   (0x0004)  
	float                                              ShadowViewSampleCountScale;                                 // 0x0290   (0x0004)  
	float                                              ShadowReflectionSampleCountScale;                           // 0x0294   (0x0004)  
	float                                              ShadowTracingDistance;                                      // 0x0298   (0x0004)  
	unsigned char                                      UnknownData03_7[0x14];                                      // 0x029C   (0x0014)  MISSED

	/// Functions
	// Function /Script/Engine.VolumetricCloudComponent.SetViewSampleCountScale
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetViewSampleCountScale = { 0x49b1640, 0 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetTracingStartMaxDistance
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetTracingStartMaxDistance = { 0x49b1c60, 1 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetTracingMaxDistance
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetTracingMaxDistance = { 0x49b1b60, 2 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetSkyLightCloudBottomOcclusion
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetSkyLightCloudBottomOcclusion = { 0x49b1740, 3 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowViewSampleCountScale
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetShadowViewSampleCountScale = { 0x4967490, 4 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowTracingDistance
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetShadowTracingDistance = { 0x49b1440, 5 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetShadowReflectionSampleCountScale
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetShadowReflectionSampleCountScale = { 0x49b1540, 6 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetReflectionSampleCountScale
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetReflectionSampleCountScale = { 0x4967590, 7 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetPlanetRadius
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetPlanetRadius = { 0x49b1a60, 8 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetMaterial
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const UMaterialInterface*> SetMaterial = { 0x49b1330, 9 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetLayerHeight
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetLayerHeight = { 0x49b1d60, 10 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetLayerBottomAltitude
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const float> SetLayerBottomAltitude = { 0x49b1e60, 11 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetGroundAlbedo
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const FColor> SetGroundAlbedo = { 0x49b1960, 12 }; 
	// Function /Script/Engine.VolumetricCloudComponent.SetbUsePerSampleAtmosphericLightTransmittance
	constexpr static const FunctionPointer<UVolumetricCloudComponent, void, const bool> SetbUsePerSampleAtmosphericLightTransmittance = { 0x49b1840, 13 }; 
};

/// Class /Script/Engine.VolumetricCloud
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class AVolumetricCloud : public AInfo
{ 
public:
	class UVolumetricCloudComponent*                   VolumetricCloudComponent;                                   // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.VolumetricLightmapDensityVolume
/// Size: 0x0320 (800 bytes) (0x000318 - 0x000320) align n/a MaxSize: 0x0320
class AVolumetricLightmapDensityVolume : public AVolume
{ 
public:
	FInt32Interval                                     AllowedMipLevelRange;                                       // 0x0318   (0x0008)  
};

/// Class /Script/Engine.WindDirectionalSource
/// Size: 0x02D0 (720 bytes) (0x0002C8 - 0x0002D0) align n/a MaxSize: 0x02D0
class AWindDirectionalSource : public AInfo
{ 
public:
	class UWindDirectionalSourceComponent*             Component;                                                  // 0x02C8   (0x0008)  
};

/// Class /Script/Engine.WindDirectionalSourceComponent
/// Size: 0x0280 (640 bytes) (0x000260 - 0x000280) align n/a MaxSize: 0x0280
class UWindDirectionalSourceComponent : public USceneComponent
{ 
public:
	float                                              Strength;                                                   // 0x0260   (0x0004)  
	float                                              Speed;                                                      // 0x0264   (0x0004)  
	float                                              MinGustAmount;                                              // 0x0268   (0x0004)  
	float                                              MaxGustAmount;                                              // 0x026C   (0x0004)  
	float                                              Radius;                                                     // 0x0270   (0x0004)  
	bool                                               bPointWind : 1;                                             // 0x0274:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0xB];                                       // 0x0275   (0x000B)  MISSED

	/// Functions
	// Function /Script/Engine.WindDirectionalSourceComponent.SetWindType
	constexpr static const FunctionPointer<UWindDirectionalSourceComponent, void, const EWindSourceType> SetWindType = { 0x49b3000, 0 }; 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetStrength
	constexpr static const FunctionPointer<UWindDirectionalSourceComponent, void, const float> SetStrength = { 0x49b34c0, 1 }; 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetSpeed
	constexpr static const FunctionPointer<UWindDirectionalSourceComponent, void, const float> SetSpeed = { 0x49b33d0, 2 }; 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetRadius
	constexpr static const FunctionPointer<UWindDirectionalSourceComponent, void, const float> SetRadius = { 0x49b3100, 3 }; 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMinimumGustAmount
	constexpr static const FunctionPointer<UWindDirectionalSourceComponent, void, const float> SetMinimumGustAmount = { 0x49b32e0, 4 }; 
	// Function /Script/Engine.WindDirectionalSourceComponent.SetMaximumGustAmount
	constexpr static const FunctionPointer<UWindDirectionalSourceComponent, void, const float> SetMaximumGustAmount = { 0x49b31f0, 5 }; 
};

/// Class /Script/Engine.WorldComposition
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class UWorldComposition : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x28];                                      // 0x0028   (0x0028)  MISSED
	TArray<class ULevelStreaming*>                     TilesStreaming;                                             // 0x0050   (0x0010)  
	double                                             TilesStreamingTimeThreshold;                                // 0x0060   (0x0008)  
	bool                                               bLoadAllTilesDuringCinematic;                               // 0x0068   (0x0001)  
	bool                                               bRebaseOriginIn3DSpace;                                     // 0x0069   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x006A   (0x0002)  MISSED
	float                                              RebaseOriginDistance;                                       // 0x006C   (0x0004)  
};

/// Struct /Script/Engine.MaterialProxySettings
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align n/a MaxSize: 0x0088
struct FMaterialProxySettings
{ 
	FIntPoint                                          TextureSize;                                                // 0x0000   (0x0008)  
	float                                              GutterSpace;                                                // 0x0008   (0x0004)  
	float                                              MetallicConstant;                                           // 0x000C   (0x0004)  
	float                                              RoughnessConstant;                                          // 0x0010   (0x0004)  
	float                                              AnisotropyConstant;                                         // 0x0014   (0x0004)  
	float                                              SpecularConstant;                                           // 0x0018   (0x0004)  
	float                                              OpacityConstant;                                            // 0x001C   (0x0004)  
	float                                              OpacityMaskConstant;                                        // 0x0020   (0x0004)  
	float                                              AmbientOcclusionConstant;                                   // 0x0024   (0x0004)  
	TEnumAsByte<ETextureSizingType>                    TextureSizingType;                                          // 0x0028   (0x0001)  
	TEnumAsByte<EMaterialMergeType>                    MaterialMergeType;                                          // 0x0029   (0x0001)  
	TEnumAsByte<EBlendMode>                            BlendMode;                                                  // 0x002A   (0x0001)  
	bool                                               bAllowTwoSidedMaterial : 1;                                 // 0x002B:0 (0x0001)  
	bool                                               bNormalMap : 1;                                             // 0x002B:1 (0x0001)  
	bool                                               bTangentMap : 1;                                            // 0x002B:2 (0x0001)  
	bool                                               bMetallicMap : 1;                                           // 0x002B:3 (0x0001)  
	bool                                               bRoughnessMap : 1;                                          // 0x002B:4 (0x0001)  
	bool                                               bAnisotropyMap : 1;                                         // 0x002B:5 (0x0001)  
	bool                                               bSpecularMap : 1;                                           // 0x002B:6 (0x0001)  
	bool                                               bEmissiveMap : 1;                                           // 0x002B:7 (0x0001)  
	bool                                               bOpacityMap : 1;                                            // 0x002C:0 (0x0001)  
	bool                                               bOpacityMaskMap : 1;                                        // 0x002C:1 (0x0001)  
	bool                                               bAmbientOcclusionMap : 1;                                   // 0x002C:2 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x002D   (0x0003)  MISSED
	FIntPoint                                          DiffuseTextureSize;                                         // 0x0030   (0x0008)  
	FIntPoint                                          NormalTextureSize;                                          // 0x0038   (0x0008)  
	FIntPoint                                          TangentTextureSize;                                         // 0x0040   (0x0008)  
	FIntPoint                                          MetallicTextureSize;                                        // 0x0048   (0x0008)  
	FIntPoint                                          RoughnessTextureSize;                                       // 0x0050   (0x0008)  
	FIntPoint                                          AnisotropyTextureSize;                                      // 0x0058   (0x0008)  
	FIntPoint                                          SpecularTextureSize;                                        // 0x0060   (0x0008)  
	FIntPoint                                          EmissiveTextureSize;                                        // 0x0068   (0x0008)  
	FIntPoint                                          OpacityTextureSize;                                         // 0x0070   (0x0008)  
	FIntPoint                                          OpacityMaskTextureSize;                                     // 0x0078   (0x0008)  
	FIntPoint                                          AmbientOcclusionTextureSize;                                // 0x0080   (0x0008)  
};

/// Struct /Script/Engine.MeshProxySettings
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align n/a MaxSize: 0x00A8
struct FMeshProxySettings
{ 
	int32_t                                            ScreenSize;                                                 // 0x0000   (0x0004)  
	float                                              VoxelSize;                                                  // 0x0004   (0x0004)  
	FMaterialProxySettings                             MaterialSettings;                                           // 0x0008   (0x0088)  
	float                                              MergeDistance;                                              // 0x0090   (0x0004)  
	FColor                                             UnresolvedGeometryColor;                                    // 0x0094   (0x0004)  
	float                                              MaxRayCastDist;                                             // 0x0098   (0x0004)  
	float                                              HardAngleThreshold;                                         // 0x009C   (0x0004)  
	int32_t                                            LightMapResolution;                                         // 0x00A0   (0x0004)  
	TEnumAsByte<EProxyNormalComputationMethod>         NormalCalculationMethod;                                    // 0x00A4   (0x0001)  
	TEnumAsByte<ELandscapeCullingPrecision>            LandscapeCullingPrecision;                                  // 0x00A5   (0x0001)  
	bool                                               bCalculateCorrectLODModel : 1;                              // 0x00A6:0 (0x0001)  
	bool                                               bOverrideVoxelSize : 1;                                     // 0x00A6:1 (0x0001)  
	bool                                               bOverrideTransferDistance : 1;                              // 0x00A6:2 (0x0001)  
	bool                                               bUseHardAngleThreshold : 1;                                 // 0x00A6:3 (0x0001)  
	bool                                               bComputeLightMapResolution : 1;                             // 0x00A6:4 (0x0001)  
	bool                                               bRecalculateNormals : 1;                                    // 0x00A6:5 (0x0001)  
	bool                                               bUseLandscapeCulling : 1;                                   // 0x00A6:6 (0x0001)  
	bool                                               bAllowAdjacency : 1;                                        // 0x00A6:7 (0x0001)  
	bool                                               bAllowDistanceField : 1;                                    // 0x00A7:0 (0x0001)  
	bool                                               bReuseMeshLightmapUVs : 1;                                  // 0x00A7:1 (0x0001)  
	bool                                               bCreateCollision : 1;                                       // 0x00A7:2 (0x0001)  
	bool                                               bAllowVertexColors : 1;                                     // 0x00A7:3 (0x0001)  
	bool                                               bGenerateLightmapUVs : 1;                                   // 0x00A7:4 (0x0001)  
};

/// Struct /Script/Engine.MeshMergingSettings
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FMeshMergingSettings
{ 
	int32_t                                            TargetLightMapResolution;                                   // 0x0000   (0x0004)  
	EUVOutput                                          OutputUVs[8];                                               // 0x0004   (0x0008)  
	FMaterialProxySettings                             MaterialSettings;                                           // 0x000C   (0x0088)  
	int32_t                                            GutterSize;                                                 // 0x0094   (0x0004)  
	int32_t                                            SpecificLOD;                                                // 0x0098   (0x0004)  
	EMeshLODSelectionType                              LODSelectionType;                                           // 0x009C   (0x0001)  
	bool                                               bGenerateLightMapUV : 1;                                    // 0x009D:0 (0x0001)  
	bool                                               bComputedLightMapResolution : 1;                            // 0x009D:1 (0x0001)  
	bool                                               bPivotPointAtZero : 1;                                      // 0x009D:2 (0x0001)  
	bool                                               bMergePhysicsData : 1;                                      // 0x009D:3 (0x0001)  
	bool                                               bMergeMaterials : 1;                                        // 0x009D:4 (0x0001)  
	bool                                               bCreateMergedMaterial : 1;                                  // 0x009D:5 (0x0001)  
	bool                                               bBakeVertexDataToMesh : 1;                                  // 0x009D:6 (0x0001)  
	bool                                               bUseVertexDataForBakingMaterial : 1;                        // 0x009D:7 (0x0001)  
	bool                                               bUseTextureBinning : 1;                                     // 0x009E:0 (0x0001)  
	bool                                               bReuseMeshLightmapUVs : 1;                                  // 0x009E:1 (0x0001)  
	bool                                               bMergeEquivalentMaterials : 1;                              // 0x009E:2 (0x0001)  
	bool                                               bUseLandscapeCulling : 1;                                   // 0x009E:3 (0x0001)  
	bool                                               bIncludeImposters : 1;                                      // 0x009E:4 (0x0001)  
	bool                                               bAllowDistanceField : 1;                                    // 0x009E:5 (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x009F   (0x0001)  MISSED
};

/// Struct /Script/Engine.HierarchicalSimplification
/// Size: 0x0160 (352 bytes) (0x000000 - 0x000160) align n/a MaxSize: 0x0160
struct FHierarchicalSimplification
{ 
	float                                              TransitionScreenSize;                                       // 0x0000   (0x0004)  
	float                                              OverrideDrawDistance;                                       // 0x0004   (0x0004)  
	bool                                               bUseOverrideDrawDistance : 1;                               // 0x0008:0 (0x0001)  
	bool                                               bAllowSpecificExclusion : 1;                                // 0x0008:1 (0x0001)  
	bool                                               bSimplifyMesh : 1;                                          // 0x0008:2 (0x0001)  
	bool                                               bOnlyGenerateClustersForVolumes : 1;                        // 0x0008:3 (0x0001)  
	bool                                               bReusePreviousLevelClusters : 1;                            // 0x0008:4 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	FMeshProxySettings                                 ProxySetting;                                               // 0x000C   (0x00A8)  
	FMeshMergingSettings                               MergeSetting;                                               // 0x00B4   (0x00A0)  
	float                                              DesiredBoundRadius;                                         // 0x0154   (0x0004)  
	float                                              DesiredFillingPercentage;                                   // 0x0158   (0x0004)  
	int32_t                                            MinNumberOfActorsToBuild;                                   // 0x015C   (0x0004)  
};

/// Class /Script/Engine.HierarchicalLODSetup
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000060) align n/a MaxSize: 0x0060
class UHierarchicalLODSetup : public UObject
{ 
public:
	TArray<FHierarchicalSimplification>                HierarchicalLODSetup;                                       // 0x0028   (0x0010)  
	TWeakObjectPtr<class UMaterialInterface*>          OverrideBaseMaterial;                                       // 0x0038   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0040   (0x0020)  MISSED
};

/// Struct /Script/Engine.SBTentDistribution
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSBTentDistribution
{ 
	float                                              TipAltitude;                                                // 0x0000   (0x0004)  
	float                                              TipValue;                                                   // 0x0004   (0x0004)  
	float                                              Width;                                                      // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.SBEnvControlSettings
/// Size: 0x0B30 (2864 bytes) (0x000000 - 0x000B30) align n/a MaxSize: 0x0B30
struct FSBEnvControlSettings
{ 
	float                                              Priority;                                                   // 0x0000   (0x0004)  
	FVector                                            Origin;                                                     // 0x0004   (0x000C)  
	float                                              InnerRadius;                                                // 0x0010   (0x0004)  
	float                                              OuterRadius;                                                // 0x0014   (0x0004)  
	class AVolume*                                     VolumeActor;                                                // 0x0018   (0x0008)  
	class UObject*                                     DataPtr;                                                    // 0x0020   (0x0008)  
	TArray<FPostProcessSettings>                       BlendPPSettings;                                            // 0x0028   (0x0010)  
	TArray<float>                                      BlendPPSettingsWeight;                                      // 0x0038   (0x0010)  
	bool                                               bUseDirection_Sun;                                          // 0x0048   (0x0001)  
	unsigned char                                      UnknownData94_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FVector                                            Direction_Sun;                                              // 0x004C   (0x000C)  
	bool                                               bUseColor_Sun;                                              // 0x0058   (0x0001)  
	unsigned char                                      UnknownData95_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	FLinearColor                                       Color_Sun;                                                  // 0x005C   (0x0010)  
	bool                                               bUseIntensity_Sun;                                          // 0x006C   (0x0001)  
	unsigned char                                      UnknownData96_6[0x3];                                       // 0x006D   (0x0003)  MISSED
	float                                              Intensity_Sun;                                              // 0x0070   (0x0004)  
	bool                                               bUseMultipleBaseByViewDirLight;                             // 0x0074   (0x0001)  
	unsigned char                                      UnknownData97_6[0x3];                                       // 0x0075   (0x0003)  MISSED
	float                                              MultipleBaseByViewDirLight;                                 // 0x0078   (0x0004)  
	bool                                               bUseVolumetricScatteringIntensity_Sun;                      // 0x007C   (0x0001)  
	unsigned char                                      UnknownData98_6[0x3];                                       // 0x007D   (0x0003)  MISSED
	float                                              VolumetricScatteringIntensity_Sun;                          // 0x0080   (0x0004)  
	bool                                               bUseSourceAngle_Sun;                                        // 0x0084   (0x0001)  
	unsigned char                                      UnknownData99_6[0x3];                                       // 0x0085   (0x0003)  MISSED
	float                                              SourceAngle_Sun;                                            // 0x0088   (0x0004)  
	bool                                               bUseSourceSoftAngle_Sun;                                    // 0x008C   (0x0001)  
	unsigned char                                      UnknownData100_6[0x3];                                      // 0x008D   (0x0003)  MISSED
	float                                              SourceSoftAngle_Sun;                                        // 0x0090   (0x0004)  
	bool                                               bUseTemperature_Sun;                                        // 0x0094   (0x0001)  
	unsigned char                                      UnknownData101_6[0x3];                                      // 0x0095   (0x0003)  MISSED
	float                                              Temperature_Sun;                                            // 0x0098   (0x0004)  
	bool                                               bEnableLightShaftOcclusion : 1;                             // 0x009C:0 (0x0001)  
	unsigned char                                      UnknownData102_5[0x3];                                      // 0x009D   (0x0003)  MISSED
	bool                                               bEnableAffectsTranslucentLighting;                          // 0x00A0   (0x0001)  
	bool                                               bUseLightShaftOverrideDirection;                            // 0x00A1   (0x0001)  
	unsigned char                                      UnknownData103_6[0x2];                                      // 0x00A2   (0x0002)  MISSED
	FVector                                            LightShaftOverrideDirection;                                // 0x00A4   (0x000C)  
	bool                                               bUseShadowAmount;                                           // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData104_6[0x3];                                      // 0x00B1   (0x0003)  MISSED
	float                                              ShadowAmount;                                               // 0x00B4   (0x0004)  
	bool                                               bUseSpecularScale;                                          // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData105_6[0x3];                                      // 0x00B9   (0x0003)  MISSED
	float                                              SpecularScale;                                              // 0x00BC   (0x0004)  
	bool                                               bUseShadowResolutionScale;                                  // 0x00C0   (0x0001)  
	unsigned char                                      UnknownData106_6[0x3];                                      // 0x00C1   (0x0003)  MISSED
	float                                              ShadowResolutionScale;                                      // 0x00C4   (0x0004)  
	bool                                               bUseShadowBias;                                             // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData107_6[0x3];                                      // 0x00C9   (0x0003)  MISSED
	float                                              ShadowBias;                                                 // 0x00CC   (0x0004)  
	bool                                               bUseShadowSlopeBias;                                        // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData108_6[0x3];                                      // 0x00D1   (0x0003)  MISSED
	float                                              ShadowSlopeBias;                                            // 0x00D4   (0x0004)  
	bool                                               bUseShadowTransitionScale;                                  // 0x00D8   (0x0001)  
	unsigned char                                      UnknownData109_6[0x3];                                      // 0x00D9   (0x0003)  MISSED
	float                                              ShadowTransitionScale;                                      // 0x00DC   (0x0004)  
	bool                                               bUseShadowSharpen;                                          // 0x00E0   (0x0001)  
	unsigned char                                      UnknownData110_6[0x3];                                      // 0x00E1   (0x0003)  MISSED
	float                                              ShadowSharpen;                                              // 0x00E4   (0x0004)  
	bool                                               bUseContactShadowLength;                                    // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData111_6[0x3];                                      // 0x00E9   (0x0003)  MISSED
	float                                              ContactShadowLength;                                        // 0x00EC   (0x0004)  
	bool                                               bUseOcclusionMaskDarkness;                                  // 0x00F0   (0x0001)  
	unsigned char                                      UnknownData112_6[0x3];                                      // 0x00F1   (0x0003)  MISSED
	float                                              OcclusionMaskDarkness;                                      // 0x00F4   (0x0004)  
	bool                                               bUseOcclusionDepthRange;                                    // 0x00F8   (0x0001)  
	unsigned char                                      UnknownData113_6[0x3];                                      // 0x00F9   (0x0003)  MISSED
	float                                              OcclusionDepthRange;                                        // 0x00FC   (0x0004)  
	bool                                               bEnableLightShaftBloom : 1;                                 // 0x0100:0 (0x0001)  
	unsigned char                                      UnknownData114_5[0x3];                                      // 0x0101   (0x0003)  MISSED
	bool                                               bUseBloomScale;                                             // 0x0104   (0x0001)  
	unsigned char                                      UnknownData115_6[0x3];                                      // 0x0105   (0x0003)  MISSED
	float                                              BloomScale;                                                 // 0x0108   (0x0004)  
	bool                                               bUseBloomThreshold;                                         // 0x010C   (0x0001)  
	unsigned char                                      UnknownData116_6[0x3];                                      // 0x010D   (0x0003)  MISSED
	float                                              BloomThreshold;                                             // 0x0110   (0x0004)  
	bool                                               bUseBloomTint;                                              // 0x0114   (0x0001)  
	unsigned char                                      UnknownData117_6[0x3];                                      // 0x0115   (0x0003)  MISSED
	FColor                                             BloomTint;                                                  // 0x0118   (0x0004)  
	bool                                               bUseDynamicShadowDistanceMovableLight;                      // 0x011C   (0x0001)  
	unsigned char                                      UnknownData118_6[0x3];                                      // 0x011D   (0x0003)  MISSED
	float                                              DynamicShadowDistanceMovableLight;                          // 0x0120   (0x0004)  
	bool                                               bUseDynamicShadowCascades;                                  // 0x0124   (0x0001)  
	unsigned char                                      UnknownData119_6[0x3];                                      // 0x0125   (0x0003)  MISSED
	int32_t                                            DynamicShadowCascades;                                      // 0x0128   (0x0004)  
	bool                                               bUseCascadeDistributionExponent;                            // 0x012C   (0x0001)  
	unsigned char                                      UnknownData120_6[0x3];                                      // 0x012D   (0x0003)  MISSED
	float                                              CascadeDistributionExponent;                                // 0x0130   (0x0004)  
	bool                                               bUseLightFunctionMaterial;                                  // 0x0134   (0x0001)  
	unsigned char                                      UnknownData121_6[0x3];                                      // 0x0135   (0x0003)  MISSED
	class UMaterialInterface*                          LightFunctionMaterial;                                      // 0x0138   (0x0008)  
	FVector                                            LightFunctionScale;                                         // 0x0140   (0x000C)  
	float                                              LightFunctionFadeDistance;                                  // 0x014C   (0x0004)  
	float                                              DisabledBrightness;                                         // 0x0150   (0x0004)  
	bool                                               bUseColor_SkyLight;                                         // 0x0154   (0x0001)  
	unsigned char                                      UnknownData122_6[0x3];                                      // 0x0155   (0x0003)  MISSED
	FLinearColor                                       Color_SkyLight;                                             // 0x0158   (0x0010)  
	bool                                               bUseLowerHemisphereColor_SkyLight;                          // 0x0168   (0x0001)  
	unsigned char                                      UnknownData123_6[0x3];                                      // 0x0169   (0x0003)  MISSED
	FLinearColor                                       LowerHemisphereColor_SkyLight;                              // 0x016C   (0x0010)  
	bool                                               bUseIntensity_SkyLight;                                     // 0x017C   (0x0001)  
	unsigned char                                      UnknownData124_6[0x3];                                      // 0x017D   (0x0003)  MISSED
	float                                              Intensity_SkyLight;                                         // 0x0180   (0x0004)  
	bool                                               bUseOcclusionMaxDistance;                                   // 0x0184   (0x0001)  
	unsigned char                                      UnknownData125_6[0x3];                                      // 0x0185   (0x0003)  MISSED
	float                                              OcclusionMaxDistance;                                       // 0x0188   (0x0004)  
	float                                              Contrast;                                                   // 0x018C   (0x0004)  
	bool                                               bUseOcclusionExponent;                                      // 0x0190   (0x0001)  
	unsigned char                                      UnknownData126_6[0x3];                                      // 0x0191   (0x0003)  MISSED
	float                                              OcclusionExponent;                                          // 0x0194   (0x0004)  
	bool                                               bUseMinOcclusion;                                           // 0x0198   (0x0001)  
	unsigned char                                      UnknownData127_6[0x3];                                      // 0x0199   (0x0003)  MISSED
	float                                              MinOcclusion;                                               // 0x019C   (0x0004)  
	bool                                               bUseOcclusionTint;                                          // 0x01A0   (0x0001)  
	unsigned char                                      UnknownData128_6[0x3];                                      // 0x01A1   (0x0003)  MISSED
	FColor                                             OcclusionTint;                                              // 0x01A4   (0x0004)  
	bool                                               bUseVolumetricScatteringIntensity_SkyLight;                 // 0x01A8   (0x0001)  
	unsigned char                                      UnknownData129_6[0x3];                                      // 0x01A9   (0x0003)  MISSED
	float                                              VolumetricScatteringIntensity_SkyLight;                     // 0x01AC   (0x0004)  
	bool                                               bUseOverrideSkyLightCubeMap;                                // 0x01B0   (0x0001)  
	unsigned char                                      UnknownData130_6[0x7];                                      // 0x01B1   (0x0007)  MISSED
	class UTextureCube*                                OverrideSkyLightCubeMap;                                    // 0x01B8   (0x0008)  
	bool                                               bUseColor_Character;                                        // 0x01C0   (0x0001)  
	unsigned char                                      UnknownData131_6[0x3];                                      // 0x01C1   (0x0003)  MISSED
	FLinearColor                                       Color_Character;                                            // 0x01C4   (0x0010)  
	bool                                               bUseIntensity_Character;                                    // 0x01D4   (0x0001)  
	unsigned char                                      UnknownData132_6[0x3];                                      // 0x01D5   (0x0003)  MISSED
	float                                              Intensity_Character;                                        // 0x01D8   (0x0004)  
	bool                                               bUseSourceAngle_Character;                                  // 0x01DC   (0x0001)  
	unsigned char                                      UnknownData133_6[0x3];                                      // 0x01DD   (0x0003)  MISSED
	float                                              SourceAngle_Character;                                      // 0x01E0   (0x0004)  
	bool                                               bUseSourceSoftAngle_Character;                              // 0x01E4   (0x0001)  
	unsigned char                                      UnknownData134_6[0x3];                                      // 0x01E5   (0x0003)  MISSED
	float                                              SourceSoftAngle_Character;                                  // 0x01E8   (0x0004)  
	bool                                               bUseTemperature_Character;                                  // 0x01EC   (0x0001)  
	unsigned char                                      UnknownData135_6[0x3];                                      // 0x01ED   (0x0003)  MISSED
	float                                              Temperature_Character;                                      // 0x01F0   (0x0004)  
	bool                                               bUseColor_CharacterSub;                                     // 0x01F4   (0x0001)  
	unsigned char                                      UnknownData136_6[0x3];                                      // 0x01F5   (0x0003)  MISSED
	FLinearColor                                       Color_CharacterSub;                                         // 0x01F8   (0x0010)  
	bool                                               bUseIntensity_CharacterSub;                                 // 0x0208   (0x0001)  
	unsigned char                                      UnknownData137_6[0x3];                                      // 0x0209   (0x0003)  MISSED
	float                                              Intensity_CharacterSub;                                     // 0x020C   (0x0004)  
	bool                                               bUseSourceAngle_CharacterSub;                               // 0x0210   (0x0001)  
	unsigned char                                      UnknownData138_6[0x3];                                      // 0x0211   (0x0003)  MISSED
	float                                              SourceAngle_CharacterSub;                                   // 0x0214   (0x0004)  
	bool                                               bUseSourceSoftAngle_CharacterSub;                           // 0x0218   (0x0001)  
	unsigned char                                      UnknownData139_6[0x3];                                      // 0x0219   (0x0003)  MISSED
	float                                              SourceSoftAngle_CharacterSub;                               // 0x021C   (0x0004)  
	bool                                               bUseTemperature_CharacterSub;                               // 0x0220   (0x0001)  
	unsigned char                                      UnknownData140_6[0x3];                                      // 0x0221   (0x0003)  MISSED
	float                                              Temperature_CharacterSub;                                   // 0x0224   (0x0004)  
	bool                                               bUseFogCenterLocationZ;                                     // 0x0228   (0x0001)  
	unsigned char                                      UnknownData141_6[0x3];                                      // 0x0229   (0x0003)  MISSED
	float                                              FogCenterLocationZ;                                         // 0x022C   (0x0004)  
	bool                                               bUseFogDensity;                                             // 0x0230   (0x0001)  
	unsigned char                                      UnknownData142_6[0x3];                                      // 0x0231   (0x0003)  MISSED
	float                                              FogDensity;                                                 // 0x0234   (0x0004)  
	bool                                               bUseFogHeightFalloff;                                       // 0x0238   (0x0001)  
	unsigned char                                      UnknownData143_6[0x3];                                      // 0x0239   (0x0003)  MISSED
	float                                              FogHeightFalloff;                                           // 0x023C   (0x0004)  
	bool                                               bUseSecondFogData;                                          // 0x0240   (0x0001)  
	unsigned char                                      UnknownData144_6[0x3];                                      // 0x0241   (0x0003)  MISSED
	FExponentialHeightFogData                          SecondFogData;                                              // 0x0244   (0x000C)  
	bool                                               bUseFogInscatteringColor;                                   // 0x0250   (0x0001)  
	unsigned char                                      UnknownData145_6[0x3];                                      // 0x0251   (0x0003)  MISSED
	FLinearColor                                       FogInscatteringColor;                                       // 0x0254   (0x0010)  
	bool                                               bOverrideFogColorCubemapInfo;                               // 0x0264   (0x0001)  
	unsigned char                                      UnknownData146_6[0x3];                                      // 0x0265   (0x0003)  MISSED
	class UTextureCube*                                OverrideFogInscatteringColorCubemap;                        // 0x0268   (0x0008)  
	FLinearColor                                       OverrideFogInscatteringCubeTextureTint;                     // 0x0270   (0x0010)  
	bool                                               bUseFogMaxOpacity;                                          // 0x0280   (0x0001)  
	unsigned char                                      UnknownData147_6[0x3];                                      // 0x0281   (0x0003)  MISSED
	float                                              FogMaxOpacity;                                              // 0x0284   (0x0004)  
	bool                                               bUseStartDistance;                                          // 0x0288   (0x0001)  
	unsigned char                                      UnknownData148_6[0x3];                                      // 0x0289   (0x0003)  MISSED
	float                                              StartDistance;                                              // 0x028C   (0x0004)  
	bool                                               bUseFogCutoffDistance;                                      // 0x0290   (0x0001)  
	unsigned char                                      UnknownData149_6[0x3];                                      // 0x0291   (0x0003)  MISSED
	float                                              FogCutoffDistance;                                          // 0x0294   (0x0004)  
	bool                                               bUseDirectionalInscatteringExponent;                        // 0x0298   (0x0001)  
	unsigned char                                      UnknownData150_6[0x3];                                      // 0x0299   (0x0003)  MISSED
	float                                              DirectionalInscatteringExponent;                            // 0x029C   (0x0004)  
	bool                                               bUseDirectionalInscatteringStartDistance;                   // 0x02A0   (0x0001)  
	unsigned char                                      UnknownData151_6[0x3];                                      // 0x02A1   (0x0003)  MISSED
	float                                              DirectionalInscatteringStartDistance;                       // 0x02A4   (0x0004)  
	bool                                               bUseDirectionalInscatteringColor;                           // 0x02A8   (0x0001)  
	unsigned char                                      UnknownData152_6[0x3];                                      // 0x02A9   (0x0003)  MISSED
	FLinearColor                                       DirectionalInscatteringColor;                               // 0x02AC   (0x0010)  
	bool                                               bEnableVolumetricFog;                                       // 0x02BC   (0x0001)  
	bool                                               bUseVolumetricFogScatteringDistribution;                    // 0x02BD   (0x0001)  
	unsigned char                                      UnknownData153_6[0x2];                                      // 0x02BE   (0x0002)  MISSED
	float                                              VolumetricFogScatteringDistribution;                        // 0x02C0   (0x0004)  
	bool                                               bUseVolumetricFogAlbedo;                                    // 0x02C4   (0x0001)  
	unsigned char                                      UnknownData154_6[0x3];                                      // 0x02C5   (0x0003)  MISSED
	FColor                                             VolumetricFogAlbedo;                                        // 0x02C8   (0x0004)  
	bool                                               bUseVolumetricFogEmissive;                                  // 0x02CC   (0x0001)  
	unsigned char                                      UnknownData155_6[0x3];                                      // 0x02CD   (0x0003)  MISSED
	FLinearColor                                       VolumetricFogEmissive;                                      // 0x02D0   (0x0010)  
	bool                                               bUseVolumetricFogExtinctionScale;                           // 0x02E0   (0x0001)  
	unsigned char                                      UnknownData156_6[0x3];                                      // 0x02E1   (0x0003)  MISSED
	float                                              VolumetricFogExtinctionScale;                               // 0x02E4   (0x0004)  
	bool                                               bUseVolumetricFogDistance;                                  // 0x02E8   (0x0001)  
	unsigned char                                      UnknownData157_6[0x3];                                      // 0x02E9   (0x0003)  MISSED
	float                                              VolumetricFogDistance;                                      // 0x02EC   (0x0004)  
	bool                                               bUseVolumetricFogStaticLightingScatteringIntensity;         // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData158_6[0x3];                                      // 0x02F1   (0x0003)  MISSED
	float                                              VolumetricFogStaticLightingScatteringIntensity;             // 0x02F4   (0x0004)  
	bool                                               bUseTransformMode;                                          // 0x02F8   (0x0001)  
	ESBSkyAtmosphereTransformMode                      TransformMode;                                              // 0x02F9   (0x0001)  
	bool                                               bUseSkyAtmosphereCenter;                                    // 0x02FA   (0x0001)  
	unsigned char                                      UnknownData159_6[0x1];                                      // 0x02FB   (0x0001)  MISSED
	FVector                                            SkyAtmosphereCenter;                                        // 0x02FC   (0x000C)  
	bool                                               bUseBottomRadius;                                           // 0x0308   (0x0001)  
	unsigned char                                      UnknownData160_6[0x3];                                      // 0x0309   (0x0003)  MISSED
	float                                              BottomRadius;                                               // 0x030C   (0x0004)  
	bool                                               bUseGroundAlbedo;                                           // 0x0310   (0x0001)  
	unsigned char                                      UnknownData161_6[0x3];                                      // 0x0311   (0x0003)  MISSED
	FColor                                             GroundAlbedo;                                               // 0x0314   (0x0004)  
	bool                                               bUseAtmosphereHeight;                                       // 0x0318   (0x0001)  
	unsigned char                                      UnknownData162_6[0x3];                                      // 0x0319   (0x0003)  MISSED
	float                                              AtmosphereHeight;                                           // 0x031C   (0x0004)  
	bool                                               bUseMultiScatteringFactor;                                  // 0x0320   (0x0001)  
	unsigned char                                      UnknownData163_6[0x3];                                      // 0x0321   (0x0003)  MISSED
	float                                              MultiScatteringFactor;                                      // 0x0324   (0x0004)  
	bool                                               bUseRayleighScatteringScale;                                // 0x0328   (0x0001)  
	unsigned char                                      UnknownData164_6[0x3];                                      // 0x0329   (0x0003)  MISSED
	float                                              RayleighScatteringScale;                                    // 0x032C   (0x0004)  
	bool                                               bUseRayleighScattering;                                     // 0x0330   (0x0001)  
	unsigned char                                      UnknownData165_6[0x3];                                      // 0x0331   (0x0003)  MISSED
	FLinearColor                                       RayleighScattering;                                         // 0x0334   (0x0010)  
	bool                                               bUseRayleighExponentialDistribution;                        // 0x0344   (0x0001)  
	unsigned char                                      UnknownData166_6[0x3];                                      // 0x0345   (0x0003)  MISSED
	float                                              RayleighExponentialDistribution;                            // 0x0348   (0x0004)  
	bool                                               bUseMieScatteringScale;                                     // 0x034C   (0x0001)  
	unsigned char                                      UnknownData167_6[0x3];                                      // 0x034D   (0x0003)  MISSED
	float                                              MieScatteringScale;                                         // 0x0350   (0x0004)  
	bool                                               bUseMieScattering;                                          // 0x0354   (0x0001)  
	unsigned char                                      UnknownData168_6[0x3];                                      // 0x0355   (0x0003)  MISSED
	FLinearColor                                       MieScattering;                                              // 0x0358   (0x0010)  
	bool                                               bUseMieAbsorptionScale;                                     // 0x0368   (0x0001)  
	unsigned char                                      UnknownData169_6[0x3];                                      // 0x0369   (0x0003)  MISSED
	float                                              MieAbsorptionScale;                                         // 0x036C   (0x0004)  
	bool                                               bUseMieAbsorption;                                          // 0x0370   (0x0001)  
	unsigned char                                      UnknownData170_6[0x3];                                      // 0x0371   (0x0003)  MISSED
	FLinearColor                                       MieAbsorption;                                              // 0x0374   (0x0010)  
	bool                                               bUseMieAnisotropy;                                          // 0x0384   (0x0001)  
	unsigned char                                      UnknownData171_6[0x3];                                      // 0x0385   (0x0003)  MISSED
	float                                              MieAnisotropy;                                              // 0x0388   (0x0004)  
	bool                                               bUseMieExponentialDistribution;                             // 0x038C   (0x0001)  
	unsigned char                                      UnknownData172_6[0x3];                                      // 0x038D   (0x0003)  MISSED
	float                                              MieExponentialDistribution;                                 // 0x0390   (0x0004)  
	bool                                               bUseOtherAbsorptionScale;                                   // 0x0394   (0x0001)  
	unsigned char                                      UnknownData173_6[0x3];                                      // 0x0395   (0x0003)  MISSED
	float                                              OtherAbsorptionScale;                                       // 0x0398   (0x0004)  
	bool                                               bUseOtherAbsorption;                                        // 0x039C   (0x0001)  
	unsigned char                                      UnknownData174_6[0x3];                                      // 0x039D   (0x0003)  MISSED
	FLinearColor                                       OtherAbsorption;                                            // 0x03A0   (0x0010)  
	bool                                               bUseOtherTentDistribution;                                  // 0x03B0   (0x0001)  
	unsigned char                                      UnknownData175_6[0x3];                                      // 0x03B1   (0x0003)  MISSED
	FSBTentDistribution                                OtherTentDistribution;                                      // 0x03B4   (0x000C)  
	bool                                               bUseSkyLuminanceFactor;                                     // 0x03C0   (0x0001)  
	unsigned char                                      UnknownData176_6[0x3];                                      // 0x03C1   (0x0003)  MISSED
	FLinearColor                                       SkyLuminanceFactor;                                         // 0x03C4   (0x0010)  
	bool                                               bUseAerialPespectiveViewDistanceScale;                      // 0x03D4   (0x0001)  
	unsigned char                                      UnknownData177_6[0x3];                                      // 0x03D5   (0x0003)  MISSED
	float                                              AerialPespectiveViewDistanceScale;                          // 0x03D8   (0x0004)  
	bool                                               bUseHeightFogContribution;                                  // 0x03DC   (0x0001)  
	unsigned char                                      UnknownData178_6[0x3];                                      // 0x03DD   (0x0003)  MISSED
	float                                              HeightFogContribution;                                      // 0x03E0   (0x0004)  
	bool                                               bUseTransmittanceMinLightElevationAngle;                    // 0x03E4   (0x0001)  
	unsigned char                                      UnknownData179_6[0x3];                                      // 0x03E5   (0x0003)  MISSED
	float                                              TransmittanceMinLightElevationAngle;                        // 0x03E8   (0x0004)  
	bool                                               bUseColor_Cloud;                                            // 0x03EC   (0x0001)  
	unsigned char                                      UnknownData180_6[0x3];                                      // 0x03ED   (0x0003)  MISSED
	FLinearColor                                       Color_Cloud;                                                // 0x03F0   (0x0010)  
	bool                                               bUseColor_VolumeCloudTop;                                   // 0x0400   (0x0001)  
	unsigned char                                      UnknownData181_6[0x3];                                      // 0x0401   (0x0003)  MISSED
	FLinearColor                                       Color_VolumeCloudTop;                                       // 0x0404   (0x0010)  
	bool                                               bUseColor_VolumeCloudBottom;                                // 0x0414   (0x0001)  
	unsigned char                                      UnknownData182_6[0x3];                                      // 0x0415   (0x0003)  MISSED
	FLinearColor                                       Color_VolumeCloudBottom;                                    // 0x0418   (0x0010)  
	bool                                               bUsePostProcessData;                                        // 0x0428   (0x0001)  
	unsigned char                                      UnknownData183_6[0x7];                                      // 0x0429   (0x0007)  MISSED
	FPostProcessSettings                               PostProcessData;                                            // 0x0430   (0x05A0)  
	bool                                               bUseGlobalMaterialScalarParameterMap;                       // 0x09D0   (0x0001)  
	unsigned char                                      UnknownData184_6[0x7];                                      // 0x09D1   (0x0007)  MISSED
	TMap<FName, float>                                 GlobalMaterialScalarParameterMap;                           // 0x09D8   (0x0050)  
	bool                                               bUseGlobalMaterialVectorParameterMap;                       // 0x0A28   (0x0001)  
	unsigned char                                      UnknownData185_6[0x7];                                      // 0x0A29   (0x0007)  MISSED
	TMap<FName, FVector>                               GlobalMaterialVectorParameterMap;                           // 0x0A30   (0x0050)  
	bool                                               bUseGlobalNiagaraParameterScalarMap;                        // 0x0A80   (0x0001)  
	unsigned char                                      UnknownData186_6[0x7];                                      // 0x0A81   (0x0007)  MISSED
	TMap<FName, float>                                 GlobalNiagaraParameterScalarMap;                            // 0x0A88   (0x0050)  
	bool                                               bUseGlobalNiagaraParameterVectorMap;                        // 0x0AD8   (0x0001)  
	unsigned char                                      UnknownData187_6[0x7];                                      // 0x0AD9   (0x0007)  MISSED
	TMap<FName, FVector>                               GlobalNiagaraParameterVectorMap;                            // 0x0AE0   (0x0050)  
};

/// Struct /Script/Engine.NetViewer
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FNetViewer
{ 
	class UNetConnection*                              Connection;                                                 // 0x0000   (0x0008)  
	class AActor*                                      InViewer;                                                   // 0x0008   (0x0008)  
	class AActor*                                      ViewTarget;                                                 // 0x0010   (0x0008)  
	FVector                                            ViewLocation;                                               // 0x0018   (0x000C)  
	FVector                                            ViewDir;                                                    // 0x0024   (0x000C)  
};

/// Class /Script/Engine.WorldSettings
/// Size: 0x2100 (8448 bytes) (0x0002C8 - 0x002100) align n/a MaxSize: 0x2100
class AWorldSettings : public AInfo
{ 
public:
	unsigned char                                      UnknownData16_8[0x8];                                       // 0x02C8   (0x0008)  MISSED
	int32_t                                            VisibilityCellSize;                                         // 0x02D0   (0x0004)  
	TEnumAsByte<EVisibilityAggressiveness>             VisibilityAggressiveness;                                   // 0x02D4   (0x0001)  
	bool                                               bPrecomputeVisibility : 1;                                  // 0x02D5:0 (0x0001)  
	bool                                               bPlaceCellsOnlyAlongCameraTracks : 1;                       // 0x02D5:1 (0x0001)  
	bool                                               bEnableWorldBoundsChecks : 1;                               // 0x02D5:2 (0x0001)  
	bool                                               bUsePhysicsStateInSector : 1;                               // 0x02D5:3 (0x0001)  
	bool                                               bEnableNavigationSystem : 1;                                // 0x02D5:4 (0x0001)  
	bool                                               bEnableAISystem : 1;                                        // 0x02D5:5 (0x0001)  
	bool                                               bEnableWorldComposition : 1;                                // 0x02D5:6 (0x0001)  
	bool                                               bUseClientSideLevelStreamingVolumes : 1;                    // 0x02D5:7 (0x0001)  
	bool                                               bEnableWorldOriginRebasing : 1;                             // 0x02D6:0 (0x0001)  
	bool                                               bWorldGravitySet : 1;                                       // 0x02D6:1 (0x0001)  
	bool                                               bGlobalGravitySet : 1;                                      // 0x02D6:2 (0x0001)  
	bool                                               bMinimizeBSPSections : 1;                                   // 0x02D6:3 (0x0001)  
	bool                                               bForceNoPrecomputedLighting : 1;                            // 0x02D6:4 (0x0001)  
	bool                                               bHighPriorityLoading : 1;                                   // 0x02D6:5 (0x0001)  
	bool                                               bHighPriorityLoadingLocal : 1;                              // 0x02D6:6 (0x0001)  
	bool                                               bOverrideDefaultBroadphaseSettings : 1;                     // 0x02D6:7 (0x0001)  
	unsigned char                                      UnknownData17_5[0x1];                                       // 0x02D7   (0x0001)  MISSED
	int32_t                                            OverrideGrahpicsModeTexturePoolSize;                        // 0x02D8   (0x0004)  
	bool                                               bForceCreatePhySceneWhenInitWorld : 1;                      // 0x02DC:0 (0x0001)  
	unsigned char                                      UnknownData18_5[0x3];                                       // 0x02DD   (0x0003)  MISSED
	TArray<FSBEnvControlSettings>                      WorldEnvControlSettings;                                    // 0x02E0   (0x0010)  
	bool                                               bSetForceActiveEnvControl;                                  // 0x02F0   (0x0001)  
	unsigned char                                      UnknownData19_6[0x1F];                                      // 0x02F1   (0x001F)  MISSED
	bool                                               bActiveWaterPostProcess;                                    // 0x0310   (0x0001)  
	unsigned char                                      UnknownData20_6[0xF];                                       // 0x0311   (0x000F)  MISSED
	FPostProcessSettings                               WaterPostProcessSetting;                                    // 0x0320   (0x05A0)  
	bool                                               bUseBaseEnvPostProcess;                                     // 0x08C0   (0x0001)  
	unsigned char                                      UnknownData21_6[0xF];                                       // 0x08C1   (0x000F)  MISSED
	FPostProcessSettings                               BaseEnvPostProcess;                                         // 0x08D0   (0x05A0)  
	bool                                               bActiveHighContrastPostProcess;                             // 0x0E70   (0x0001)  
	unsigned char                                      UnknownData22_6[0xF];                                       // 0x0E71   (0x000F)  MISSED
	FPostProcessSettings                               HighContrastPostProcessSetting;                             // 0x0E80   (0x05A0)  
	unsigned char                                      UnknownData23_6[0xB40];                                     // 0x1420   (0x0B40)  MISSED
	class UNavigationSystemConfig*                     NavigationSystemConfig;                                     // 0x1F60   (0x0008)  
	class UNavigationSystemConfig*                     NavigationSystemConfigOverride;                             // 0x1F68   (0x0008)  
	float                                              WorldToMeters;                                              // 0x1F70   (0x0004)  
	float                                              KillZ;                                                      // 0x1F74   (0x0004)  
	class UClass*                                      KillZDamageType;                                            // 0x1F78   (0x0008)  
	float                                              WorldGravityZ;                                              // 0x1F80   (0x0004)  
	float                                              GlobalGravityZ;                                             // 0x1F84   (0x0004)  
	class UClass*                                      DefaultPhysicsVolumeClass;                                  // 0x1F88   (0x0008)  
	class UClass*                                      PhysicsCollisionHandlerClass;                               // 0x1F90   (0x0008)  
	class UClass*                                      DefaultGameMode;                                            // 0x1F98   (0x0008)  
	class UClass*                                      GameNetworkManagerClass;                                    // 0x1FA0   (0x0008)  
	int32_t                                            PackedLightAndShadowMapTextureSize;                         // 0x1FA8   (0x0004)  
	FVector                                            DefaultColorScale;                                          // 0x1FAC   (0x000C)  
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                   // 0x1FB8   (0x0004)  
	float                                              GlobalDistanceFieldViewDistance;                            // 0x1FBC   (0x0004)  
	float                                              DynamicIndirectShadowsSelfShadowingIntensity;               // 0x1FC0   (0x0004)  
	unsigned char                                      UnknownData24_6[0x4];                                       // 0x1FC4   (0x0004)  MISSED
	FReverbSettings                                    DefaultReverbSettings;                                      // 0x1FC8   (0x0020)  
	FInteriorSettings                                  DefaultAmbientZoneSettings;                                 // 0x1FE8   (0x0024)  
	float                                              MonoCullingDistance;                                        // 0x200C   (0x0004)  
	class USoundMix*                                   DefaultBaseSoundMix;                                        // 0x2010   (0x0008)  
	bool                                               bUseEnvControlBlendFuncCheck;                               // 0x2018   (0x0001)  
	unsigned char                                      UnknownData25_6[0x3];                                       // 0x2019   (0x0003)  MISSED
	float                                              TimeDilation;                                               // 0x201C   (0x0004)  
	unsigned char                                      UnknownData26_6[0x4];                                       // 0x2020   (0x0004)  MISSED
	float                                              MatineeTimeDilation;                                        // 0x2024   (0x0004)  
	bool                                               UseMatineeTimeDilationPriority;                             // 0x2028   (0x0001)  
	unsigned char                                      UnknownData27_6[0x3];                                       // 0x2029   (0x0003)  MISSED
	float                                              MatineeTimeDilationPriority;                                // 0x202C   (0x0004)  
	float                                              DemoPlayTimeDilation;                                       // 0x2030   (0x0004)  
	float                                              MinGlobalTimeDilation;                                      // 0x2034   (0x0004)  
	float                                              MaxGlobalTimeDilation;                                      // 0x2038   (0x0004)  
	float                                              MinUndilatedFrameTime;                                      // 0x203C   (0x0004)  
	float                                              MaxUndilatedFrameTime;                                      // 0x2040   (0x0004)  
	FBroadphaseSettings                                BroadphaseSettings;                                         // 0x2044   (0x0040)  
	unsigned char                                      UnknownData28_6[0x4];                                       // 0x2084   (0x0004)  MISSED
	class APlayerState*                                Pauser;                                                     // 0x2088   (0x0008)  
	TArray<FNetViewer>                                 ReplicationViewers;                                         // 0x2090   (0x0010)  
	TArray<class UAssetUserData*>                      AssetUserData;                                              // 0x20A0   (0x0010)  
	class APlayerState*                                PauserPlayerState;                                          // 0x20B0   (0x0008)  
	unsigned char                                      UnknownData29_6[0x10];                                      // 0x20B8   (0x0010)  MISSED
	int32_t                                            MaxNumberOfBookmarks;                                       // 0x20C8   (0x0004)  
	unsigned char                                      UnknownData30_6[0x4];                                       // 0x20CC   (0x0004)  MISSED
	class UClass*                                      DefaultBookmarkClass;                                       // 0x20D0   (0x0008)  
	TArray<class UBookmarkBase*>                       BookmarkArray;                                              // 0x20D8   (0x0010)  
	class UClass*                                      LastBookmarkClass;                                          // 0x20E8   (0x0008)  
	float                                              OverrideMaxUndilatedFrameTime;                              // 0x20F0   (0x0004)  
	bool                                               bEnableSignificanceManager;                                 // 0x20F4   (0x0001)  
	unsigned char                                      UnknownData31_7[0xB];                                       // 0x20F5   (0x000B)  MISSED

	/// Functions
	// Function /Script/Engine.WorldSettings.SetActiveWaterPostProcessFlag
	constexpr static const FunctionPointer<AWorldSettings, void, const bool> SetActiveWaterPostProcessFlag = { 0x49b5b30, 0 }; 
	// Function /Script/Engine.WorldSettings.SetActiveHighContrastPostProcessFlag
	constexpr static const FunctionPointer<AWorldSettings, void, const bool> SetActiveHighContrastPostProcessFlag = { 0x49b5a30, 1 }; 
	// Function /Script/Engine.WorldSettings.OnRep_WorldGravityZ
	constexpr static const FunctionPointer<AWorldSettings, void> OnRep_WorldGravityZ = { 0x47887a0, 2 }; 
	// Function /Script/Engine.WorldSettings.IsActiveWaterPostProcessFlag
	constexpr static const FunctionPointer<AWorldSettings, bool> IsActiveWaterPostProcessFlag = { 0x49b5b10, 3 }; 
	// Function /Script/Engine.WorldSettings.IsActiveHighContrastPostProcessFlag
	constexpr static const FunctionPointer<AWorldSettings, bool> IsActiveHighContrastPostProcessFlag = { 0x49b5a10, 4 }; 
	// Function /Script/Engine.WorldSettings.IsActiveEnvControl
	constexpr static const FunctionPointer<AWorldSettings, bool, const FVector> IsActiveEnvControl = { 0x49b5fc0, 5 }; 
	// Function /Script/Engine.WorldSettings.GetCurrentSunRotation
	constexpr static const FunctionPointer<AWorldSettings, FRotator, const FVector> GetCurrentSunRotation = { 0x49b5dc0, 6 }; 
	// Function /Script/Engine.WorldSettings.GetCurrentSunColor
	constexpr static const FunctionPointer<AWorldSettings, FLinearColor, const FVector> GetCurrentSunColor = { 0x49b5c10, 7 }; 
};

/// Struct /Script/Engine.VectorDistribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FVectorDistribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.Vector4Distribution
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FVector4Distribution
{ 
	FDistributionLookupTable                           Table;                                                      // 0x0000   (0x0020)  
};

/// Struct /Script/Engine.FloatRK4SpringInterpolator
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FFloatRK4SpringInterpolator
{ 
	float                                              StiffnessConstant;                                          // 0x0000   (0x0004)  
	float                                              DampeningRatio;                                             // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.VectorRK4SpringInterpolator
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FVectorRK4SpringInterpolator
{ 
	float                                              StiffnessConstant;                                          // 0x0000   (0x0004)  
	float                                              DampeningRatio;                                             // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.FormatArgumentData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FFormatArgumentData
{ 
	FString                                            ArgumentName;                                               // 0x0000   (0x0010)  
	TEnumAsByte<EFormatArgumentType>                   ArgumentValueType;                                          // 0x0010   (0x0001)  
	unsigned char                                      UnknownData02_6[0x7];                                       // 0x0011   (0x0007)  MISSED
	FText                                              ArgumentValue;                                              // 0x0018   (0x0018)  
	int32_t                                            ArgumentValueInt;                                           // 0x0030   (0x0004)  
	float                                              ArgumentValueFloat;                                         // 0x0034   (0x0004)  
	ETextGender                                        ArgumentValueGender;                                        // 0x0038   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.ExpressionOutput
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FExpressionOutput
{ 
	FName                                              OutputName;                                                 // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.Vector2MaterialInput
/// Size: 0x000C (12 bytes) (0x00000C - 0x00000C) align n/a MaxSize: 0x000C
struct FVector2MaterialInput : FMaterialInput
{ 
};

/// Struct /Script/Engine.BranchingPointNotifyPayload
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FBranchingPointNotifyPayload
{ 
	unsigned char                                      UnknownData01_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.PlatformInterfaceData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FPlatformInterfaceData
{ 
	FName                                              DataName;                                                   // 0x0000   (0x0008)  
	TEnumAsByte<EPlatformInterfaceDataType>            Type;                                                       // 0x0008   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            IntValue;                                                   // 0x000C   (0x0004)  
	float                                              FloatValue;                                                 // 0x0010   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            StringValue;                                                // 0x0018   (0x0010)  
	class UObject*                                     ObjectValue;                                                // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.PlatformInterfaceDelegateResult
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FPlatformInterfaceDelegateResult
{ 
	bool                                               bSuccessful;                                                // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FPlatformInterfaceData                             Data;                                                       // 0x0008   (0x0030)  
};

/// Struct /Script/Engine.DebugFloatHistory
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FDebugFloatHistory
{ 
	TArray<float>                                      Samples;                                                    // 0x0000   (0x0010)  
	float                                              MaxSamples;                                                 // 0x0010   (0x0004)  
	float                                              MinValue;                                                   // 0x0014   (0x0004)  
	float                                              MaxValue;                                                   // 0x0018   (0x0004)  
	bool                                               bAutoAdjustMinMax;                                          // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.LatentActionInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FLatentActionInfo
{ 
	int32_t                                            Linkage;                                                    // 0x0000   (0x0004)  
	int32_t                                            UUID;                                                       // 0x0004   (0x0004)  
	FName                                              ExecutionFunction;                                          // 0x0008   (0x0008)  
	class UObject*                                     CallbackTarget;                                             // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.TimerHandle
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FTimerHandle
{ 
	uint64_t                                           Handle;                                                     // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.CollisionProfileName
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FCollisionProfileName
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
};

/// Struct /Script/Engine.GenericStruct
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FGenericStruct
{ 
	int32_t                                            Data;                                                       // 0x0000   (0x0004)  
};

/// Struct /Script/Engine.UserActivity
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FUserActivity
{ 
	FString                                            ActionName;                                                 // 0x0000   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimNode_Base
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FAnimNode_Base
{ 
	unsigned char                                      UnknownData01_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.InputRange
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FInputRange
{ 
	float                                              Min;                                                        // 0x0000   (0x0004)  
	float                                              Max;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.InputScaleBiasClamp
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FInputScaleBiasClamp
{ 
	bool                                               bMapRange;                                                  // 0x0000   (0x0001)  
	bool                                               bClampResult;                                               // 0x0001   (0x0001)  
	bool                                               bInterpResult;                                              // 0x0002   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FInputRange                                        InRange;                                                    // 0x0004   (0x0008)  
	FInputRange                                        OutRange;                                                   // 0x000C   (0x0008)  
	float                                              Scale;                                                      // 0x0014   (0x0004)  
	float                                              Bias;                                                       // 0x0018   (0x0004)  
	float                                              ClampMin;                                                   // 0x001C   (0x0004)  
	float                                              ClampMax;                                                   // 0x0020   (0x0004)  
	float                                              InterpSpeedIncreasing;                                      // 0x0024   (0x0004)  
	float                                              InterpSpeedDecreasing;                                      // 0x0028   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.InputAlphaBoolBlend
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FInputAlphaBoolBlend
{ 
	float                                              BlendInTime;                                                // 0x0000   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0004   (0x0004)  
	EAlphaBlendOption                                  BlendOption;                                                // 0x0008   (0x0001)  
	bool                                               bInitialized;                                               // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_6[0x6];                                       // 0x000A   (0x0006)  MISSED
	class UCurveFloat*                                 CustomCurve;                                                // 0x0010   (0x0008)  
	FAlphaBlend                                        AlphaBlend;                                                 // 0x0018   (0x0030)  
};

/// Struct /Script/Engine.InputScaleBias
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FInputScaleBias
{ 
	float                                              Scale;                                                      // 0x0000   (0x0004)  
	float                                              Bias;                                                       // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.PoseLinkBase
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FPoseLinkBase
{ 
	int32_t                                            LinkID;                                                     // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0004   (0x000C)  MISSED
};

/// Struct /Script/Engine.ComponentSpacePoseLink
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000010) align n/a MaxSize: 0x0010
struct FComponentSpacePoseLink : FPoseLinkBase
{ 
};

/// Struct /Script/Engine.AnimNode_AssetPlayerBase
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FAnimNode_AssetPlayerBase : FAnimNode_Base
{ 
	FName                                              GroupName;                                                  // 0x0010   (0x0008)  
	TEnumAsByte<EAnimGroupRole>                        GroupRole;                                                  // 0x0018   (0x0001)  
	EAnimSyncGroupScope                                GroupScope;                                                 // 0x0019   (0x0001)  
	bool                                               bIgnoreForRelevancyTest;                                    // 0x001A   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x001B   (0x0001)  MISSED
	int32_t                                            SBNodeID;                                                   // 0x001C   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0020   (0x0004)  MISSED
	float                                              BlendWeight;                                                // 0x0024   (0x0004)  
	float                                              InternalTimeAccumulator;                                    // 0x0028   (0x0004)  
	unsigned char                                      UnknownData05_7[0x14];                                      // 0x002C   (0x0014)  MISSED
};

/// Struct /Script/Engine.BlendSampleData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FBlendSampleData
{ 
	int32_t                                            SampleDataIndex;                                            // 0x0000   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	class UAnimSequence*                               Animation;                                                  // 0x0008   (0x0008)  
	float                                              TotalWeight;                                                // 0x0010   (0x0004)  
	float                                              Time;                                                       // 0x0014   (0x0004)  
	float                                              PreviousTime;                                               // 0x0018   (0x0004)  
	float                                              SamplePlayRate;                                             // 0x001C   (0x0004)  
	unsigned char                                      UnknownData03_7[0x20];                                      // 0x0020   (0x0020)  MISSED
};

/// Struct /Script/Engine.AnimNode_SequencePlayer
/// Size: 0x0088 (136 bytes) (0x000040 - 0x000088) align n/a MaxSize: 0x0088
struct FAnimNode_SequencePlayer : FAnimNode_AssetPlayerBase
{ 
	class UAnimSequenceBase*                           Sequence;                                                   // 0x0040   (0x0008)  
	float                                              PlayRateBasis;                                              // 0x0048   (0x0004)  
	float                                              PlayRate;                                                   // 0x004C   (0x0004)  
	FInputScaleBiasClamp                               PlayRateScaleBiasClamp;                                     // 0x0050   (0x0030)  
	float                                              StartPosition;                                              // 0x0080   (0x0004)  
	bool                                               bLoopAnimation;                                             // 0x0084   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0085   (0x0003)  MISSED
};

/// Struct /Script/Engine.TableRowBase
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FTableRowBase
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.DataTableRowHandle
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FDataTableRowHandle
{ 
	class UDataTable*                                  DataTable;                                                  // 0x0000   (0x0008)  
	FName                                              RowName;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.PoseLink
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000010) align n/a MaxSize: 0x0010
struct FPoseLink : FPoseLinkBase
{ 
};

/// Struct /Script/Engine.AnimInstanceProxy
/// Size: 0x0770 (1904 bytes) (0x000000 - 0x000770) align n/a MaxSize: 0x0770
struct FAnimInstanceProxy
{ 
	unsigned char                                      UnknownData01_2[0x770];                                     // 0x0000   (0x0770)  MISSED
};

/// Struct /Script/Engine.KeyHandleLookupTable
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FKeyHandleLookupTable
{ 
	unsigned char                                      UnknownData01_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/Engine.AnimNode_CustomProperty
/// Size: 0x0058 (88 bytes) (0x000010 - 0x000058) align n/a MaxSize: 0x0058
struct FAnimNode_CustomProperty : FAnimNode_Base
{ 
	TArray<FName>                                      SourcePropertyNames;                                        // 0x0010   (0x0010)  
	TArray<FName>                                      DestPropertyNames;                                          // 0x0020   (0x0010)  
	class UObject*                                     TargetInstance;                                             // 0x0030   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0038   (0x0020)  MISSED
};

/// Struct /Script/Engine.ComponentReference
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FComponentReference
{ 
	class AActor*                                      OtherActor;                                                 // 0x0000   (0x0008)  
	FName                                              ComponentProperty;                                          // 0x0008   (0x0008)  
	FString                                            PathToComponent;                                            // 0x0010   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0020   (0x0008)  MISSED
};

/// Struct /Script/Engine.QuartzPulseOverrideStep
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FQuartzPulseOverrideStep
{ 
	int32_t                                            NumberOfPulses;                                             // 0x0000   (0x0004)  
	EQuartzCommandQuantization                         PulseDuration;                                              // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.QuartzTimeSignature
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FQuartzTimeSignature
{ 
	int32_t                                            NumBeats;                                                   // 0x0000   (0x0004)  
	EQuartzTimeSignatureQuantization                   BeatType;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	TArray<FQuartzPulseOverrideStep>                   OptionalPulseOverride;                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.QuartzClockSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FQuartzClockSettings
{ 
	FQuartzTimeSignature                               TimeSignature;                                              // 0x0000   (0x0018)  
	bool                                               bIgnoreLevelChange;                                         // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Struct /Script/Engine.ActiveMorphTarget
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FActiveMorphTarget
{ 
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	int32_t                                            WeightIndex;                                                // 0x0008   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/Engine.PoseSnapshot
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FPoseSnapshot
{ 
	TArray<FTransform>                                 LocalTransforms;                                            // 0x0000   (0x0010)  
	TArray<FName>                                      BoneNames;                                                  // 0x0010   (0x0010)  
	TArray<FActiveMorphTarget>                         ActiveMorphTargets;                                         // 0x0020   (0x0010)  
	TArray<float>                                      MorphTargetWeights;                                         // 0x0030   (0x0010)  
	FName                                              SkeletalMeshName;                                           // 0x0040   (0x0008)  
	FName                                              SnapshotName;                                               // 0x0048   (0x0008)  
	bool                                               bIsValid;                                                   // 0x0050   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0051   (0x0007)  MISSED
};

/// Struct /Script/Engine.ActorComponentDuplicatedObjectData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FActorComponentDuplicatedObjectData
{ 
	unsigned char                                      UnknownData01_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.ActorComponentInstanceData
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FActorComponentInstanceData
{ 
	unsigned char                                      UnknownData02_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UObject*                                     SourceComponentTemplate;                                    // 0x0008   (0x0008)  
	EComponentCreationMethod                           SourceComponentCreationMethod;                              // 0x0010   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	int32_t                                            SourceComponentTypeSerializedIndex;                         // 0x0014   (0x0004)  
	TArray<char>                                       SavedProperties;                                            // 0x0018   (0x0010)  
	FActorComponentDuplicatedObjectData                UniqueTransientPackage;                                     // 0x0028   (0x0010)  
	TArray<FActorComponentDuplicatedObjectData>        DuplicatedObjects;                                          // 0x0038   (0x0010)  
	TArray<class UObject*>                             ReferencedObjects;                                          // 0x0048   (0x0010)  
	TArray<FName>                                      ReferencedNames;                                            // 0x0058   (0x0010)  
};

/// Struct /Script/Engine.SceneComponentInstanceData
/// Size: 0x00B8 (184 bytes) (0x000068 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FSceneComponentInstanceData : FActorComponentInstanceData
{ 
	TMap<class USceneComponent*, FTransform>           AttachedInstanceComponents;                                 // 0x0068   (0x0050)  
};

/// Struct /Script/Engine.PerBoneBlendWeight
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FPerBoneBlendWeight
{ 
	int32_t                                            SourceIndex;                                                // 0x0000   (0x0004)  
	float                                              BlendWeight;                                                // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.AnimNode_Root
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FAnimNode_Root : FAnimNode_Base
{ 
	FPoseLink                                          Result;                                                     // 0x0010   (0x0010)  
	FName                                              Name;                                                       // 0x0020   (0x0008)  
	FName                                              Group;                                                      // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.AnimCurveParam
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FAnimCurveParam
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0008   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimationGroupReference
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FAnimationGroupReference
{ 
	FName                                              GroupName;                                                  // 0x0000   (0x0008)  
	TEnumAsByte<EAnimGroupRole>                        GroupRole;                                                  // 0x0008   (0x0001)  
	EAnimSyncGroupScope                                GroupScope;                                                 // 0x0009   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/Engine.AnimGroupInstance
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FAnimGroupInstance
{ 
	unsigned char                                      UnknownData01_2[0x70];                                      // 0x0000   (0x0070)  MISSED
};

/// Struct /Script/Engine.AnimTickRecord
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FAnimTickRecord
{ 
	class UAnimationAsset*                             SourceAsset;                                                // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x40];                                      // 0x0008   (0x0040)  MISSED
};

/// Struct /Script/Engine.MarkerSyncAnimPosition
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FMarkerSyncAnimPosition
{ 
	FName                                              PreviousMarkerName;                                         // 0x0000   (0x0008)  
	FName                                              NextMarkerName;                                             // 0x0008   (0x0008)  
	float                                              PositionBetweenMarkers;                                     // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.BlendFilter
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align n/a MaxSize: 0x0078
struct FBlendFilter
{ 
	unsigned char                                      UnknownData01_2[0x78];                                      // 0x0000   (0x0078)  MISSED
};

/// Struct /Script/Engine.AnimationRecordingSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FAnimationRecordingSettings
{ 
	bool                                               bRecordInWorldSpace;                                        // 0x0000   (0x0001)  
	bool                                               bRemoveRootAnimation;                                       // 0x0001   (0x0001)  
	bool                                               bAutoSaveAsset;                                             // 0x0002   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	float                                              SampleRate;                                                 // 0x0004   (0x0004)  
	float                                              Length;                                                     // 0x0008   (0x0004)  
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x000C   (0x0001)  
	TEnumAsByte<ERichCurveTangentMode>                 TangentMode;                                                // 0x000D   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x000E   (0x0001)  MISSED
	bool                                               bRecordTransforms;                                          // 0x000F   (0x0001)  
	bool                                               bRecordCurves;                                              // 0x0010   (0x0001)  
	unsigned char                                      UnknownData05_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.ComponentSpacePose
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FComponentSpacePose
{ 
	TArray<FTransform>                                 Transforms;                                                 // 0x0000   (0x0010)  
	TArray<FName>                                      Names;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.LocalSpacePose
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FLocalSpacePose
{ 
	TArray<FTransform>                                 Transforms;                                                 // 0x0000   (0x0010)  
	TArray<FName>                                      Names;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.NamedTransform
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FNamedTransform
{ 
	FTransform                                         Value;                                                      // 0x0000   (0x0030)  
	FName                                              Name;                                                       // 0x0030   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0038   (0x0008)  MISSED
};

/// Struct /Script/Engine.NamedColor
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FNamedColor
{ 
	FColor                                             Value;                                                      // 0x0000   (0x0004)  
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.NamedVector
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FNamedVector
{ 
	FVector                                            Value;                                                      // 0x0000   (0x000C)  
	FName                                              Name;                                                       // 0x000C   (0x0008)  
};

/// Struct /Script/Engine.NamedFloat
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FNamedFloat
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	FName                                              Name;                                                       // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.AnimParentNodeAssetOverride
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FAnimParentNodeAssetOverride
{ 
	class UAnimationAsset*                             NewAsset;                                                   // 0x0000   (0x0008)  
	FGuid                                              ParentNodeGuid;                                             // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AnimBlueprintDebugData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FAnimBlueprintDebugData
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AnimationFrameSnapshot
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FAnimationFrameSnapshot
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.StateMachineDebugData
/// Size: 0x00B0 (176 bytes) (0x000000 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FStateMachineDebugData
{ 
	unsigned char                                      UnknownData01_2[0xB0];                                      // 0x0000   (0x00B0)  MISSED
};

/// Struct /Script/Engine.StateMachineStateDebugData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FStateMachineStateDebugData
{ 
	unsigned char                                      UnknownData01_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.RootMotionExtractionStep
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FRootMotionExtractionStep
{ 
	class UAnimSequence*                               AnimSequence;                                               // 0x0000   (0x0008)  
	float                                              StartPosition;                                              // 0x0008   (0x0004)  
	float                                              EndPosition;                                                // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.AnimationErrorStats
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FAnimationErrorStats
{ 
	unsigned char                                      UnknownData01_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.VectorCurve
/// Size: 0x0198 (408 bytes) (0x000018 - 0x000198) align n/a MaxSize: 0x0198
struct FVectorCurve : FAnimCurveBase
{ 
	FRichCurve                                         FloatCurves[3];                                             // 0x0018   (0x0180)  
};

/// Struct /Script/Engine.TransformCurve
/// Size: 0x04E0 (1248 bytes) (0x000018 - 0x0004E0) align n/a MaxSize: 0x04E0
struct FTransformCurve : FAnimCurveBase
{ 
	FVectorCurve                                       TranslationCurve;                                           // 0x0018   (0x0198)  
	FVectorCurve                                       RotationCurve;                                              // 0x01B0   (0x0198)  
	FVectorCurve                                       ScaleCurve;                                                 // 0x0348   (0x0198)  
};

/// Struct /Script/Engine.SlotEvaluationPose
/// Size: 0x00E0 (224 bytes) (0x000000 - 0x0000E0) align n/a MaxSize: 0x00E0
struct FSlotEvaluationPose
{ 
	TEnumAsByte<EAdditiveAnimationType>                AdditiveType;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Weight;                                                     // 0x0004   (0x0004)  
	unsigned char                                      UnknownData03_7[0xD8];                                      // 0x0008   (0x00D8)  MISSED
};

/// Struct /Script/Engine.A2Pose
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FA2Pose
{ 
	TArray<FTransform>                                 Bones;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.A2CSPose
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000028) align n/a MaxSize: 0x0028
struct FA2CSPose : FA2Pose
{ 
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0010   (0x0008)  MISSED
	TArray<char>                                       ComponentSpaceFlags;                                        // 0x0018   (0x0010)  
};

/// Struct /Script/Engine.QueuedDrawDebugItem
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FQueuedDrawDebugItem
{ 
	TEnumAsByte<EDrawDebugItemType>                    ItemType;                                                   // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            StartLoc;                                                   // 0x0004   (0x000C)  
	FVector                                            EndLoc;                                                     // 0x0010   (0x000C)  
	FVector                                            Center;                                                     // 0x001C   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0028   (0x000C)  
	float                                              Radius;                                                     // 0x0034   (0x0004)  
	float                                              Size;                                                       // 0x0038   (0x0004)  
	int32_t                                            Segments;                                                   // 0x003C   (0x0004)  
	FColor                                             Color;                                                      // 0x0040   (0x0004)  
	bool                                               bPersistentLines;                                           // 0x0044   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	float                                              LifeTime;                                                   // 0x0048   (0x0004)  
	float                                              Thickness;                                                  // 0x004C   (0x0004)  
	FString                                            Message;                                                    // 0x0050   (0x0010)  
	FVector2D                                          TextScale;                                                  // 0x0060   (0x0008)  
};

/// Struct /Script/Engine.AnimInstanceSubsystemData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FAnimInstanceSubsystemData
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AnimMontageInstance
/// Size: 0x01B0 (432 bytes) (0x000000 - 0x0001B0) align n/a MaxSize: 0x01B0
struct FAnimMontageInstance
{ 
	class UAnimMontage*                                Montage;                                                    // 0x0000   (0x0008)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x0008   (0x0020)  MISSED
	bool                                               bPlaying;                                                   // 0x0028   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0029   (0x0003)  MISSED
	float                                              DefaultBlendTimeMultiplier;                                 // 0x002C   (0x0004)  
	unsigned char                                      UnknownData08_6[0xB8];                                      // 0x0030   (0x00B8)  MISSED
	TArray<int32_t>                                    NextSections;                                               // 0x00E8   (0x0010)  
	TArray<int32_t>                                    PrevSections;                                               // 0x00F8   (0x0010)  
	unsigned char                                      UnknownData09_6[0x10];                                      // 0x0108   (0x0010)  MISSED
	TArray<FAnimNotifyEvent>                           ActiveStateBranchingPoints;                                 // 0x0118   (0x0010)  
	float                                              position;                                                   // 0x0128   (0x0004)  
	float                                              PlayRate;                                                   // 0x012C   (0x0004)  
	FAlphaBlend                                        Blend;                                                      // 0x0130   (0x0030)  
	unsigned char                                      UnknownData10_6[0x2C];                                      // 0x0160   (0x002C)  MISSED
	int32_t                                            DisableRootMotionCount;                                     // 0x018C   (0x0004)  
	unsigned char                                      UnknownData11_7[0x20];                                      // 0x0190   (0x0020)  MISSED
};

/// Struct /Script/Engine.AnimNode_ApplyMeshSpaceAdditive
/// Size: 0x00D0 (208 bytes) (0x000010 - 0x0000D0) align n/a MaxSize: 0x00D0
struct FAnimNode_ApplyMeshSpaceAdditive : FAnimNode_Base
{ 
	FPoseLink                                          Base;                                                       // 0x0010   (0x0010)  
	FPoseLink                                          Additive;                                                   // 0x0020   (0x0010)  
	EAnimAlphaInputType                                AlphaInputType;                                             // 0x0030   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              Alpha;                                                      // 0x0034   (0x0004)  
	bool                                               bAlphaBoolEnabled : 1;                                      // 0x0038:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x7];                                       // 0x0039   (0x0007)  MISSED
	FInputAlphaBoolBlend                               AlphaBoolBlend;                                             // 0x0040   (0x0048)  
	FName                                              AlphaCurveName;                                             // 0x0088   (0x0008)  
	FInputScaleBias                                    AlphaScaleBias;                                             // 0x0090   (0x0008)  
	FInputScaleBiasClamp                               AlphaScaleBiasClamp;                                        // 0x0098   (0x0030)  
	int32_t                                            LODThreshold;                                               // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData05_7[0x4];                                       // 0x00CC   (0x0004)  MISSED
};

/// Struct /Script/Engine.AnimNode_Inertialization
/// Size: 0x0070 (112 bytes) (0x000010 - 0x000070) align n/a MaxSize: 0x0070
struct FAnimNode_Inertialization : FAnimNode_Base
{ 
	FPoseLink                                          Source;                                                     // 0x0010   (0x0010)  
	unsigned char                                      UnknownData01_7[0x50];                                      // 0x0020   (0x0050)  MISSED
};

/// Struct /Script/Engine.InertializationPoseDiff
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FInertializationPoseDiff
{ 
	unsigned char                                      UnknownData01_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/Engine.InertializationCurveDiff
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FInertializationCurveDiff
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.InertializationBoneDiff
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align n/a MaxSize: 0x003C
struct FInertializationBoneDiff
{ 
	unsigned char                                      UnknownData01_2[0x3C];                                      // 0x0000   (0x003C)  MISSED
};

/// Struct /Script/Engine.InertializationPose
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FInertializationPose
{ 
	unsigned char                                      UnknownData01_2[0xA0];                                      // 0x0000   (0x00A0)  MISSED
};

/// Struct /Script/Engine.AnimNode_LinkedAnimGraph
/// Size: 0x00A0 (160 bytes) (0x000058 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FAnimNode_LinkedAnimGraph : FAnimNode_CustomProperty
{ 
	TArray<FPoseLink>                                  InputPoses;                                                 // 0x0058   (0x0010)  
	TArray<FName>                                      InputPoseNames;                                             // 0x0068   (0x0010)  
	class UClass*                                      InstanceClass;                                              // 0x0078   (0x0008)  
	FName                                              Tag;                                                        // 0x0080   (0x0008)  
	unsigned char                                      UnknownData02_6[0x14];                                      // 0x0088   (0x0014)  MISSED
	bool                                               bReceiveNotifiesFromLinkedInstances : 1;                    // 0x009C:0 (0x0001)  
	bool                                               bPropagateNotifiesToLinkedInstances : 1;                    // 0x009C:1 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x009D   (0x0003)  MISSED
};

/// Struct /Script/Engine.AnimNode_LinkedAnimLayer
/// Size: 0x00B0 (176 bytes) (0x0000A0 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FAnimNode_LinkedAnimLayer : FAnimNode_LinkedAnimGraph
{ 
	class UClass*                                      Interface;                                                  // 0x00A0   (0x0008)  
	FName                                              Layer;                                                      // 0x00A8   (0x0008)  
};

/// Struct /Script/Engine.AnimNode_LinkedInputPose
/// Size: 0x0118 (280 bytes) (0x000010 - 0x000118) align n/a MaxSize: 0x0118
struct FAnimNode_LinkedInputPose : FAnimNode_Base
{ 
	FName                                              Name;                                                       // 0x0010   (0x0008)  
	FName                                              graph;                                                      // 0x0018   (0x0008)  
	FPoseLink                                          InputPose;                                                  // 0x0020   (0x0010)  
	unsigned char                                      UnknownData01_7[0xE8];                                      // 0x0030   (0x00E8)  MISSED
};

/// Struct /Script/Engine.AnimNode_SaveCachedPose
/// Size: 0x0158 (344 bytes) (0x000010 - 0x000158) align n/a MaxSize: 0x0158
struct FAnimNode_SaveCachedPose : FAnimNode_Base
{ 
	FPoseLink                                          Pose;                                                       // 0x0010   (0x0010)  
	FName                                              CachePoseName;                                              // 0x0020   (0x0008)  
	unsigned char                                      UnknownData01_7[0x130];                                     // 0x0028   (0x0130)  MISSED
};

/// Struct /Script/Engine.AnimNode_StateMachine
/// Size: 0x00B0 (176 bytes) (0x000010 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FAnimNode_StateMachine : FAnimNode_Base
{ 
	int32_t                                            StateMachineIndexInClass;                                   // 0x0010   (0x0004)  
	int32_t                                            MaxTransitionsPerFrame;                                     // 0x0014   (0x0004)  
	bool                                               bSkipFirstUpdateTransition;                                 // 0x0018   (0x0001)  
	bool                                               bReinitializeOnBecomingRelevant;                            // 0x0019   (0x0001)  
	unsigned char                                      UnknownData01_7[0x96];                                      // 0x001A   (0x0096)  MISSED
};

/// Struct /Script/Engine.AnimationPotentialTransition
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FAnimationPotentialTransition
{ 
	unsigned char                                      UnknownData01_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Engine.AnimationActiveTransitionEntry
/// Size: 0x00C8 (200 bytes) (0x000000 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FAnimationActiveTransitionEntry
{ 
	unsigned char                                      UnknownData02_7[0xB8];                                      // 0x0000   (0x00B8)  MISSED
	class UBlendProfile*                               BlendProfile;                                               // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x00C0   (0x0008)  MISSED
};

/// Struct /Script/Engine.AnimNode_TransitionPoseEvaluator
/// Size: 0x00F8 (248 bytes) (0x000010 - 0x0000F8) align n/a MaxSize: 0x00F8
struct FAnimNode_TransitionPoseEvaluator : FAnimNode_Base
{ 
	unsigned char                                      UnknownData03_8[0xD8];                                      // 0x0010   (0x00D8)  MISSED
	int32_t                                            FramesToCachePose;                                          // 0x00E8   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x00EC   (0x0004)  MISSED
	TEnumAsByte<EEvaluatorDataSource>                  DataSource;                                                 // 0x00F0   (0x0001)  
	TEnumAsByte<EEvaluatorMode>                        EvaluatorMode;                                              // 0x00F1   (0x0001)  
	unsigned char                                      UnknownData05_7[0x6];                                       // 0x00F2   (0x0006)  MISSED
};

/// Struct /Script/Engine.AnimNode_TransitionResult
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000028) align n/a MaxSize: 0x0028
struct FAnimNode_TransitionResult : FAnimNode_Base
{ 
	bool                                               bCanEnterTransition;                                        // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x17];                                      // 0x0011   (0x0017)  MISSED
};

/// Struct /Script/Engine.AnimNode_UseCachedPose
/// Size: 0x0028 (40 bytes) (0x000010 - 0x000028) align n/a MaxSize: 0x0028
struct FAnimNode_UseCachedPose : FAnimNode_Base
{ 
	FPoseLink                                          LinkToCachingNode;                                          // 0x0010   (0x0010)  
	FName                                              CachePoseName;                                              // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.AnimNode_ConvertLocalToComponentSpace
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000020) align n/a MaxSize: 0x0020
struct FAnimNode_ConvertLocalToComponentSpace : FAnimNode_Base
{ 
	FPoseLink                                          LocalPose;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimNode_ConvertComponentToLocalSpace
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000020) align n/a MaxSize: 0x0020
struct FAnimNode_ConvertComponentToLocalSpace : FAnimNode_Base
{ 
	FComponentSpacePoseLink                            ComponentPose;                                              // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.CompressedTrack
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FCompressedTrack
{ 
	TArray<char>                                       ByteStream;                                                 // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
	float                                              Mins[3];                                                    // 0x0020   (0x000C)  
	float                                              Ranges[3];                                                  // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.CurveTrack
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FCurveTrack
{ 
	FName                                              CurveName;                                                  // 0x0000   (0x0008)  
	TArray<float>                                      CurveWeights;                                               // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.ScaleTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FScaleTrack
{ 
	TArray<FVector>                                    ScaleKeys;                                                  // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.RotationTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FRotationTrack
{ 
	TArray<FQuat>                                      RotKeys;                                                    // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.TranslationTrack
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FTranslationTrack
{ 
	TArray<FVector>                                    PosKeys;                                                    // 0x0000   (0x0010)  
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.RawAnimSequenceTrack
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FRawAnimSequenceTrack
{ 
	TArray<FVector>                                    PosKeys;                                                    // 0x0000   (0x0010)  
	TArray<FQuat>                                      RotKeys;                                                    // 0x0010   (0x0010)  
	TArray<FVector>                                    ScaleKeys;                                                  // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.AnimSequenceTrackContainer
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FAnimSequenceTrackContainer
{ 
	TArray<FRawAnimSequenceTrack>                      AnimationTracks;                                            // 0x0000   (0x0010)  
	TArray<FName>                                      TrackNames;                                                 // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.AnimSingleNodeInstanceProxy
/// Size: 0x08C0 (2240 bytes) (0x000770 - 0x0008C0) align n/a MaxSize: 0x08C0
struct FAnimSingleNodeInstanceProxy : FAnimInstanceProxy
{ 
	unsigned char                                      UnknownData01_1[0x150];                                     // 0x0770   (0x0150)  MISSED
};

/// Struct /Script/Engine.AnimNode_SingleNode
/// Size: 0x0030 (48 bytes) (0x000010 - 0x000030) align n/a MaxSize: 0x0030
struct FAnimNode_SingleNode : FAnimNode_Base
{ 
	FPoseLink                                          SourcePose;                                                 // 0x0010   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0020   (0x0010)  MISSED
};

/// Struct /Script/Engine.AnimationTransitionRule
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FAnimationTransitionRule
{ 
	FName                                              RuleToExecute;                                              // 0x0000   (0x0008)  
	bool                                               TransitionReturnVal;                                        // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            TransitionIndex;                                            // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.AnimationState
/// Size: 0x0028 (40 bytes) (0x000008 - 0x000028) align n/a MaxSize: 0x0028
struct FAnimationState : FAnimationStateBase
{ 
	TArray<FAnimationTransitionRule>                   Transitions;                                                // 0x0008   (0x0010)  
	int32_t                                            StateRootNodeIndex;                                         // 0x0018   (0x0004)  
	int32_t                                            StartNotify;                                                // 0x001C   (0x0004)  
	int32_t                                            EndNotify;                                                  // 0x0020   (0x0004)  
	int32_t                                            FullyBlendedNotify;                                         // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.AnimNotifyTrack
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FAnimNotifyTrack
{ 
	FName                                              TrackName;                                                  // 0x0000   (0x0008)  
	FLinearColor                                       TrackColor;                                                 // 0x0008   (0x0010)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0018   (0x0020)  MISSED
};

/// Struct /Script/Engine.PerBoneBlendWeights
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FPerBoneBlendWeights
{ 
	TArray<FPerBoneBlendWeight>                        BoneBlendWeights;                                           // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.AssetImportInfo
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FAssetImportInfo
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.AtmospherePrecomputeInstanceData
/// Size: 0x0160 (352 bytes) (0x0000B8 - 0x000160) align n/a MaxSize: 0x0160
struct FAtmospherePrecomputeInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData01_1[0xA8];                                      // 0x00B8   (0x00A8)  MISSED
};

/// Struct /Script/Engine.AudioReverbEffect
/// Size: 0x0048 (72 bytes) (0x000008 - 0x000048) align n/a MaxSize: 0x0048
struct FAudioReverbEffect : FAudioEffectParameters
{ 
	unsigned char                                      UnknownData01_1[0x40];                                      // 0x0008   (0x0040)  MISSED
};

/// Struct /Script/Engine.NavAvoidanceData
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align n/a MaxSize: 0x003C
struct FNavAvoidanceData
{ 
	unsigned char                                      UnknownData01_2[0x3C];                                      // 0x0000   (0x003C)  MISSED
};

/// Struct /Script/Engine.GridBlendSample
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FGridBlendSample
{ 
	FEditorElement                                     GridElement;                                                // 0x0000   (0x0018)  
	float                                              BlendWeight;                                                // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.BPEditorBookmarkNode
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FBPEditorBookmarkNode
{ 
	FGuid                                              NodeGuid;                                                   // 0x0000   (0x0010)  
	FGuid                                              ParentGuid;                                                 // 0x0010   (0x0010)  
	FText                                              DisplayName;                                                // 0x0020   (0x0018)  
};

/// Struct /Script/Engine.EditedDocumentInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FEditedDocumentInfo
{ 
	FSoftObjectPath                                    EditedObjectPath;                                           // 0x0000   (0x0018)  
	FVector2D                                          SavedViewOffset;                                            // 0x0018   (0x0008)  
	float                                              SavedZoomAmount;                                            // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	class UObject*                                     EditedObject;                                               // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.BPInterfaceDescription
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FBPInterfaceDescription
{ 
	class UClass*                                      Interface;                                                  // 0x0000   (0x0008)  
	TArray<class UEdGraph*>                            Graphs;                                                     // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BPVariableDescription
/// Size: 0x00D0 (208 bytes) (0x000000 - 0x0000D0) align n/a MaxSize: 0x00D0
struct FBPVariableDescription
{ 
	FName                                              VarName;                                                    // 0x0000   (0x0008)  
	FGuid                                              VarGuid;                                                    // 0x0008   (0x0010)  
	FEdGraphPinType                                    VarType;                                                    // 0x0018   (0x0058)  
	FString                                            FriendlyName;                                               // 0x0070   (0x0010)  
	FText                                              Category;                                                   // 0x0080   (0x0018)  
	uint64_t                                           PropertyFlags;                                              // 0x0098   (0x0008)  
	FName                                              RepNotifyFunc;                                              // 0x00A0   (0x0008)  
	TEnumAsByte<ELifetimeCondition>                    ReplicationCondition;                                       // 0x00A8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00A9   (0x0007)  MISSED
	TArray<FBPVariableMetaDataEntry>                   MetaDataArray;                                              // 0x00B0   (0x0010)  
	FString                                            DefaultValue;                                               // 0x00C0   (0x0010)  
};

/// Struct /Script/Engine.BlueprintMacroCosmeticInfo
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FBlueprintMacroCosmeticInfo
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CompilerNativizationOptions
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align n/a MaxSize: 0x0080
struct FCompilerNativizationOptions
{ 
	FName                                              PlatformName;                                               // 0x0000   (0x0008)  
	bool                                               ServerOnlyPlatform;                                         // 0x0008   (0x0001)  
	bool                                               ClientOnlyPlatform;                                         // 0x0009   (0x0001)  
	bool                                               bExcludeMonolithicHeaders;                                  // 0x000A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x000B   (0x0005)  MISSED
	TArray<FName>                                      ExcludedModules;                                            // 0x0010   (0x0010)  
	TSet<FSoftObjectPath>                              ExcludedAssets;                                             // 0x0020   (0x0050)  
	TArray<FString>                                    ExcludedFolderPaths;                                        // 0x0070   (0x0010)  
};

/// Struct /Script/Engine.EventGraphFastCallPair
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FEventGraphFastCallPair
{ 
	class UFunction*                                   FunctionToPatch;                                            // 0x0000   (0x0008)  
	int32_t                                            EventGraphCallOffset;                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/Engine.BlueprintDebugData
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FBlueprintDebugData
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.PointerToUberGraphFrame
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FPointerToUberGraphFrame
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.DebuggingInfoForSingleFunction
/// Size: 0x0190 (400 bytes) (0x000000 - 0x000190) align n/a MaxSize: 0x0190
struct FDebuggingInfoForSingleFunction
{ 
	unsigned char                                      UnknownData01_2[0x190];                                     // 0x0000   (0x0190)  MISSED
};

/// Struct /Script/Engine.NodeToCodeAssociation
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FNodeToCodeAssociation
{ 
	unsigned char                                      UnknownData01_2[0x14];                                      // 0x0000   (0x0014)  MISSED
};

/// Struct /Script/Engine.AnimCurveType
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FAnimCurveType
{ 
	unsigned char                                      UnknownData01_2[0x2];                                       // 0x0000   (0x0002)  MISSED
};

/// Struct /Script/Engine.BookmarkBaseJumpToSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FBookmarkBaseJumpToSettings
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.BookmarkJumpToSettings
/// Size: 0x0001 (1 bytes) (0x000001 - 0x000001) align n/a MaxSize: 0x0001
struct FBookmarkJumpToSettings : FBookmarkBaseJumpToSettings
{ 
};

/// Struct /Script/Engine.Bookmark2DJumpToSettings
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FBookmark2DJumpToSettings
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CachedAnimTransitionData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FCachedAnimTransitionData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              FromStateName;                                              // 0x0008   (0x0008)  
	FName                                              ToStateName;                                                // 0x0010   (0x0008)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0018   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimRelevancyData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FCachedAnimRelevancyData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              StateName;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0010   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimAssetPlayerData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FCachedAnimAssetPlayerData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              StateName;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.CachedAnimStateData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FCachedAnimStateData
{ 
	FName                                              StateMachineName;                                           // 0x0000   (0x0008)  
	FName                                              StateName;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0010   (0x000C)  MISSED
};

/// Struct /Script/Engine.CachedAnimStateArray
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FCachedAnimStateArray
{ 
	TArray<FCachedAnimStateData>                       States;                                                     // 0x0000   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0010   (0x0008)  MISSED
};

/// Struct /Script/Engine.CameraShakeDuration
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FCameraShakeDuration
{ 
	float                                              Duration;                                                   // 0x0000   (0x0004)  
	ECameraShakeDurationType                           Type;                                                       // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.CameraShakeInfo
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FCameraShakeInfo
{ 
	FCameraShakeDuration                               Duration;                                                   // 0x0000   (0x0008)  
	float                                              BlendIn;                                                    // 0x0008   (0x0004)  
	float                                              BlendOut;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.CameraShakeUpdateResult
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FCameraShakeUpdateResult
{ 
	unsigned char                                      UnknownData01_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.CameraShakeUpdateParams
/// Size: 0x0650 (1616 bytes) (0x000000 - 0x000650) align n/a MaxSize: 0x0650
struct FCameraShakeUpdateParams
{ 
	unsigned char                                      UnknownData01_2[0x650];                                     // 0x0000   (0x0650)  MISSED
};

/// Struct /Script/Engine.DummySpacerCameraTypes
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FDummySpacerCameraTypes
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/Engine.CanvasIcon
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FCanvasIcon
{ 
	class UTexture*                                    Texture;                                                    // 0x0000   (0x0008)  
	float                                              U;                                                          // 0x0008   (0x0004)  
	float                                              V;                                                          // 0x000C   (0x0004)  
	float                                              UL;                                                         // 0x0010   (0x0004)  
	float                                              VL;                                                         // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.WrappedStringElement
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FWrappedStringElement
{ 
	FString                                            Value;                                                      // 0x0000   (0x0010)  
	FVector2D                                          LineExtent;                                                 // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.TextSizingParameters
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FTextSizingParameters
{ 
	float                                              DrawX;                                                      // 0x0000   (0x0004)  
	float                                              DrawY;                                                      // 0x0004   (0x0004)  
	float                                              DrawXL;                                                     // 0x0008   (0x0004)  
	float                                              DrawYL;                                                     // 0x000C   (0x0004)  
	FVector2D                                          Scaling;                                                    // 0x0010   (0x0008)  
	class UFont*                                       DrawFont;                                                   // 0x0018   (0x0008)  
	FVector2D                                          SpacingAdjust;                                              // 0x0020   (0x0008)  
};

/// Struct /Script/Engine.CharacterNetworkSerializationPackedBits
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align n/a MaxSize: 0x0098
struct FCharacterNetworkSerializationPackedBits
{ 
	unsigned char                                      UnknownData01_2[0x98];                                      // 0x0000   (0x0098)  MISSED
};

/// Struct /Script/Engine.CharacterMoveResponsePackedBits
/// Size: 0x0098 (152 bytes) (0x000098 - 0x000098) align n/a MaxSize: 0x0098
struct FCharacterMoveResponsePackedBits : FCharacterNetworkSerializationPackedBits
{ 
};

/// Struct /Script/Engine.CharacterServerMovePackedBits
/// Size: 0x0098 (152 bytes) (0x000098 - 0x000098) align n/a MaxSize: 0x0098
struct FCharacterServerMovePackedBits : FCharacterNetworkSerializationPackedBits
{ 
};

/// Struct /Script/Engine.ChildActorAttachedActorInfo
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FChildActorAttachedActorInfo
{ 
	TWeakObjectPtr<class AActor*>                      Actor;                                                      // 0x0000   (0x0008)  
	FName                                              SocketName;                                                 // 0x0008   (0x0008)  
	FTransform                                         RelativeTransform;                                          // 0x0010   (0x0030)  
};

/// Struct /Script/Engine.ChildActorComponentInstanceData
/// Size: 0x00E8 (232 bytes) (0x0000B8 - 0x0000E8) align n/a MaxSize: 0x00E8
struct FChildActorComponentInstanceData : FSceneComponentInstanceData
{ 
	class UClass*                                      ChildActorClass;                                            // 0x00B8   (0x0008)  
	FName                                              ChildActorName;                                             // 0x00C0   (0x0008)  
	TArray<FChildActorAttachedActorInfo>               AttachedActors;                                             // 0x00C8   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x00D8   (0x0010)  MISSED
};

/// Struct /Script/Engine.AutoCompleteNode
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FAutoCompleteNode
{ 
	int32_t                                            IndexChar;                                                  // 0x0000   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<int32_t>                                    AutoCompleteListIndices;                                    // 0x0008   (0x0010)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0018   (0x0010)  MISSED
};

/// Struct /Script/Engine.RuntimeCurveLinearColor
/// Size: 0x0208 (520 bytes) (0x000000 - 0x000208) align n/a MaxSize: 0x0208
struct FRuntimeCurveLinearColor
{ 
	FRichCurve                                         ColorCurves[4];                                             // 0x0000   (0x0200)  
	class UCurveLinearColor*                           ExternalCurve;                                              // 0x0200   (0x0008)  
};

/// Struct /Script/Engine.NamedCurveValue
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FNamedCurveValue
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	float                                              Value;                                                      // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.CurveTableRowHandle
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FCurveTableRowHandle
{ 
	class UCurveTable*                                 CurveTable;                                                 // 0x0000   (0x0008)  
	FName                                              RowName;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.CustomAttribute
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FCustomAttribute
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	int32_t                                            VariantType;                                                // 0x0008   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<float>                                      Times;                                                      // 0x0010   (0x0010)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0020   (0x0010)  MISSED
};

/// Struct /Script/Engine.CustomAttributePerBoneData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FCustomAttributePerBoneData
{ 
	int32_t                                            BoneTreeIndex;                                              // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FCustomAttribute>                           Attributes;                                                 // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.DataTableCategoryHandle
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FDataTableCategoryHandle
{ 
	class UDataTable*                                  DataTable;                                                  // 0x0000   (0x0008)  
	FName                                              ColumnName;                                                 // 0x0008   (0x0008)  
	FName                                              RowContents;                                                // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.GraphReference
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FGraphReference
{ 
	class UEdGraph*                                    MacroGraph;                                                 // 0x0000   (0x0008)  
	class UBlueprint*                                  GraphBlueprint;                                             // 0x0008   (0x0008)  
	FGuid                                              GraphGuid;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.EdGraphPinReference
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FEdGraphPinReference
{ 
	TWeakObjectPtr<class UEdGraphNode*>                OwningNode;                                                 // 0x0000   (0x0008)  
	FGuid                                              PinId;                                                      // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.EdGraphSchemaAction
/// Size: 0x0100 (256 bytes) (0x000000 - 0x000100) align n/a MaxSize: 0x0100
struct FEdGraphSchemaAction
{ 
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	FText                                              MenuDescription;                                            // 0x0008   (0x0018)  
	FText                                              TooltipDescription;                                         // 0x0020   (0x0018)  
	FText                                              Category;                                                   // 0x0038   (0x0018)  
	FText                                              Keywords;                                                   // 0x0050   (0x0018)  
	int32_t                                            Grouping;                                                   // 0x0068   (0x0004)  
	int32_t                                            SectionID;                                                  // 0x006C   (0x0004)  
	TArray<FString>                                    MenuDescriptionArray;                                       // 0x0070   (0x0010)  
	TArray<FString>                                    FullSearchTitlesArray;                                      // 0x0080   (0x0010)  
	TArray<FString>                                    FullSearchKeywordsArray;                                    // 0x0090   (0x0010)  
	TArray<FString>                                    FullSearchCategoryArray;                                    // 0x00A0   (0x0010)  
	TArray<FString>                                    LocalizedMenuDescriptionArray;                              // 0x00B0   (0x0010)  
	TArray<FString>                                    LocalizedFullSearchTitlesArray;                             // 0x00C0   (0x0010)  
	TArray<FString>                                    LocalizedFullSearchKeywordsArray;                           // 0x00D0   (0x0010)  
	TArray<FString>                                    LocalizedFullSearchCategoryArray;                           // 0x00E0   (0x0010)  
	FString                                            SearchText;                                                 // 0x00F0   (0x0010)  
};

/// Struct /Script/Engine.EdGraphSchemaAction_NewNode
/// Size: 0x0108 (264 bytes) (0x000100 - 0x000108) align n/a MaxSize: 0x0108
struct FEdGraphSchemaAction_NewNode : FEdGraphSchemaAction
{ 
	class UEdGraphNode*                                NodeTemplate;                                               // 0x0100   (0x0008)  
};

/// Struct /Script/Engine.ScreenMessageString
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FScreenMessageString
{ 
	uint64_t                                           Key;                                                        // 0x0000   (0x0008)  
	FString                                            ScreenMessage;                                              // 0x0008   (0x0010)  
	FColor                                             DisplayColor;                                               // 0x0018   (0x0004)  
	float                                              TimeToDisplay;                                              // 0x001C   (0x0004)  
	float                                              CurrentTimeDisplayed;                                       // 0x0020   (0x0004)  
	FVector2D                                          TextScale;                                                  // 0x0024   (0x0008)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x002C   (0x0004)  MISSED
};

/// Struct /Script/Engine.URL
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FURL
{ 
	FString                                            Protocol;                                                   // 0x0000   (0x0010)  
	FString                                            Host;                                                       // 0x0010   (0x0010)  
	int32_t                                            Port;                                                       // 0x0020   (0x0004)  
	int32_t                                            Valid;                                                      // 0x0024   (0x0004)  
	FString                                            Map;                                                        // 0x0028   (0x0010)  
	FString                                            RedirectURL;                                                // 0x0038   (0x0010)  
	TArray<FString>                                    Op;                                                         // 0x0048   (0x0010)  
	FString                                            Portal;                                                     // 0x0058   (0x0010)  
};

/// Struct /Script/Engine.FullyLoadedPackagesInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FFullyLoadedPackagesInfo
{ 
	TEnumAsByte<EFullyLoadPackageType>                 FullyLoadType;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	FString                                            Tag;                                                        // 0x0008   (0x0010)  
	TArray<FName>                                      PackagesToLoad;                                             // 0x0018   (0x0010)  
	TArray<class UObject*>                             LoadedObjects;                                              // 0x0028   (0x0010)  
};

/// Struct /Script/Engine.LevelStreamingStatus
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FLevelStreamingStatus
{ 
	FName                                              PackageName;                                                // 0x0000   (0x0008)  
	bool                                               bShouldBeLoaded : 1;                                        // 0x0008:0 (0x0001)  
	bool                                               bShouldBeVisible : 1;                                       // 0x0008:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0009   (0x0003)  MISSED
	uint32_t                                           LODIndex;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.NamedNetDriver
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FNamedNetDriver
{ 
	class UNetDriver*                                  NetDriver;                                                  // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.WorldContext
/// Size: 0x0288 (648 bytes) (0x000000 - 0x000288) align n/a MaxSize: 0x0288
struct FWorldContext
{ 
	unsigned char                                      UnknownData04_7[0xD0];                                      // 0x0000   (0x00D0)  MISSED
	FURL                                               LastURL;                                                    // 0x00D0   (0x0068)  
	FURL                                               LastRemoteURL;                                              // 0x0138   (0x0068)  
	class UPendingNetGame*                             PendingNetGame;                                             // 0x01A0   (0x0008)  
	TArray<FFullyLoadedPackagesInfo>                   PackagesToFullyLoad;                                        // 0x01A8   (0x0010)  
	unsigned char                                      UnknownData05_6[0x10];                                      // 0x01B8   (0x0010)  MISSED
	TArray<class ULevel*>                              LoadedLevelsForPendingMapChange;                            // 0x01C8   (0x0010)  
	unsigned char                                      UnknownData06_6[0x18];                                      // 0x01D8   (0x0018)  MISSED
	TArray<class UObjectReferencer*>                   ObjectReferencers;                                          // 0x01F0   (0x0010)  
	TArray<FLevelStreamingStatus>                      PendingLevelStreamingStatusUpdates;                         // 0x0200   (0x0010)  
	class UGameViewportClient*                         GameViewport;                                               // 0x0210   (0x0008)  
	class UGameInstance*                               OwningGameInstance;                                         // 0x0218   (0x0008)  
	TArray<FNamedNetDriver>                            ActiveNetDrivers;                                           // 0x0220   (0x0010)  
	unsigned char                                      UnknownData07_7[0x58];                                      // 0x0230   (0x0058)  MISSED
};

/// Struct /Script/Engine.ExposureSettings
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FExposureSettings
{ 
	float                                              FixedEV100;                                                 // 0x0000   (0x0004)  
	bool                                               bFixed;                                                     // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/Engine.TickPrerequisite
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FTickPrerequisite
{ 
	unsigned char                                      UnknownData01_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.CanvasUVTri
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FCanvasUVTri
{ 
	FVector2D                                          V0_Pos;                                                     // 0x0000   (0x0008)  
	FVector2D                                          V0_UV;                                                      // 0x0008   (0x0008)  
	FLinearColor                                       V0_Color;                                                   // 0x0010   (0x0010)  
	FVector2D                                          V1_Pos;                                                     // 0x0020   (0x0008)  
	FVector2D                                          V1_UV;                                                      // 0x0028   (0x0008)  
	FLinearColor                                       V1_Color;                                                   // 0x0030   (0x0010)  
	FVector2D                                          V2_Pos;                                                     // 0x0040   (0x0008)  
	FVector2D                                          V2_UV;                                                      // 0x0048   (0x0008)  
	FLinearColor                                       V2_Color;                                                   // 0x0050   (0x0010)  
};

/// Struct /Script/Engine.DepthFieldGlowInfo
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FDepthFieldGlowInfo
{ 
	bool                                               bEnableGlow : 1;                                            // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FLinearColor                                       GlowColor;                                                  // 0x0004   (0x0010)  
	FVector2D                                          GlowOuterRadius;                                            // 0x0014   (0x0008)  
	FVector2D                                          GlowInnerRadius;                                            // 0x001C   (0x0008)  
};

/// Struct /Script/Engine.FontRenderInfo
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FFontRenderInfo
{ 
	bool                                               bClipText : 1;                                              // 0x0000:0 (0x0001)  
	bool                                               bEnableShadow : 1;                                          // 0x0000:1 (0x0001)  
	unsigned char                                      UnknownData01_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FDepthFieldGlowInfo                                GlowInfo;                                                   // 0x0004   (0x0024)  
};

/// Struct /Script/Engine.DamageEvent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FDamageEvent
{ 
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0000   (0x0008)  MISSED
	class UClass*                                      DamageTypeClass;                                            // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RadialDamageParams
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FRadialDamageParams
{ 
	float                                              BaseDamage;                                                 // 0x0000   (0x0004)  
	float                                              MinimumDamage;                                              // 0x0004   (0x0004)  
	float                                              InnerRadius;                                                // 0x0008   (0x0004)  
	float                                              OuterRadius;                                                // 0x000C   (0x0004)  
	float                                              DamageFalloff;                                              // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.RadialDamageEvent
/// Size: 0x0040 (64 bytes) (0x000010 - 0x000040) align n/a MaxSize: 0x0040
struct FRadialDamageEvent : FDamageEvent
{ 
	FRadialDamageParams                                Params;                                                     // 0x0010   (0x0014)  
	FVector                                            Origin;                                                     // 0x0024   (0x000C)  
	TArray<FHitResult>                                 ComponentHits;                                              // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.PointDamageEvent
/// Size: 0x00B0 (176 bytes) (0x000010 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FPointDamageEvent : FDamageEvent
{ 
	float                                              Damage;                                                     // 0x0010   (0x0004)  
	FVector_NetQuantizeNormal                          ShotDirection;                                              // 0x0014   (0x000C)  
	FHitResult                                         HitInfo;                                                    // 0x0020   (0x008C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00AC   (0x0004)  MISSED
};

/// Struct /Script/Engine.MeshBuildSettings
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FMeshBuildSettings
{ 
	bool                                               bUseMikkTSpace : 1;                                         // 0x0000:0 (0x0001)  
	bool                                               bRecomputeNormals : 1;                                      // 0x0000:1 (0x0001)  
	bool                                               bRecomputeTangents : 1;                                     // 0x0000:2 (0x0001)  
	bool                                               bComputeWeightedNormals : 1;                                // 0x0000:3 (0x0001)  
	bool                                               bRemoveDegenerates : 1;                                     // 0x0000:4 (0x0001)  
	bool                                               bBuildAdjacencyBuffer : 1;                                  // 0x0000:5 (0x0001)  
	bool                                               bBuildReversedIndexBuffer : 1;                              // 0x0000:6 (0x0001)  
	bool                                               bUseHighPrecisionTangentBasis : 1;                          // 0x0000:7 (0x0001)  
	bool                                               bUseFullPrecisionUVs : 1;                                   // 0x0001:0 (0x0001)  
	bool                                               bGenerateLightmapUVs : 1;                                   // 0x0001:1 (0x0001)  
	bool                                               bGenerateDistanceFieldAsIfTwoSided : 1;                     // 0x0001:2 (0x0001)  
	bool                                               bSupportFaceRemap : 1;                                      // 0x0001:3 (0x0001)  
	unsigned char                                      UnknownData02_5[0x2];                                       // 0x0002   (0x0002)  MISSED
	int32_t                                            MinLightmapResolution;                                      // 0x0004   (0x0004)  
	int32_t                                            SrcLightmapIndex;                                           // 0x0008   (0x0004)  
	int32_t                                            DstLightmapIndex;                                           // 0x000C   (0x0004)  
	float                                              BuildScale;                                                 // 0x0010   (0x0004)  
	FVector                                            BuildScale3D;                                               // 0x0014   (0x000C)  
	float                                              DistanceFieldResolutionScale;                               // 0x0020   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	class UStaticMesh*                                 DistanceFieldReplacementMesh;                               // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.POV
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FPOV
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x000C   (0x000C)  
	float                                              FOV;                                                        // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.AnimUpdateRateParameters
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align n/a MaxSize: 0x0088
struct FAnimUpdateRateParameters
{ 
	unsigned char                                      UnknownData03_7[0x1];                                       // 0x0000   (0x0001)  MISSED
	EUpdateRateShiftBucket                             ShiftBucket;                                                // 0x0001   (0x0001)  
	bool                                               bInterpolateSkippedFrames : 1;                              // 0x0002:0 (0x0001)  
	bool                                               bShouldUseLodMap : 1;                                       // 0x0002:1 (0x0001)  
	bool                                               bShouldUseMinLod : 1;                                       // 0x0002:2 (0x0001)  
	bool                                               bSkipUpdate : 1;                                            // 0x0002:3 (0x0001)  
	bool                                               bSkipEvaluation : 1;                                        // 0x0002:4 (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x0003   (0x0001)  MISSED
	int32_t                                            UpdateRate;                                                 // 0x0004   (0x0004)  
	int32_t                                            EvaluationRate;                                             // 0x0008   (0x0004)  
	float                                              TickedPoseOffestTime;                                       // 0x000C   (0x0004)  
	float                                              AdditionalTime;                                             // 0x0010   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	int32_t                                            BaseNonRenderedUpdateRate;                                  // 0x0018   (0x0004)  
	int32_t                                            MaxEvalRateForInterpolation;                                // 0x001C   (0x0004)  
	TArray<float>                                      BaseVisibleDistanceFactorThesholds;                         // 0x0020   (0x0010)  
	TMap<int32_t, int32_t>                             LODToFrameSkipMap;                                          // 0x0030   (0x0050)  
	int32_t                                            SkippedUpdateFrames;                                        // 0x0080   (0x0004)  
	int32_t                                            SkippedEvalFrames;                                          // 0x0084   (0x0004)  
};

/// Struct /Script/Engine.AnimSlotDesc
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FAnimSlotDesc
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x0008)  
	int32_t                                            NumChannels;                                                // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.AnimSlotInfo
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FAnimSlotInfo
{ 
	FName                                              SlotName;                                                   // 0x0000   (0x0008)  
	TArray<float>                                      ChannelWeights;                                             // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.MTDResult
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMTDResult
{ 
	FVector                                            Direction;                                                  // 0x0000   (0x000C)  
	float                                              Distance;                                                   // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.OverlapResult
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FOverlapResult
{ 
	TWeakObjectPtr<class AActor*>                      Actor;                                                      // 0x0000   (0x0008)  
	TWeakObjectPtr<class UPrimitiveComponent*>         Component;                                                  // 0x0008   (0x0008)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0010   (0x0004)  MISSED
	bool                                               bBlockingHit : 1;                                           // 0x0014:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0015   (0x0003)  MISSED
};

/// Struct /Script/Engine.SwarmDebugOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FSwarmDebugOptions
{ 
	bool                                               bDistributionEnabled : 1;                                   // 0x0000:0 (0x0001)  
	bool                                               bForceContentExport : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bInitialized : 1;                                           // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/Engine.LightmassDebugOptions
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FLightmassDebugOptions
{ 
	bool                                               bDebugMode : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bStatsEnabled : 1;                                          // 0x0000:1 (0x0001)  
	bool                                               bGatherBSPSurfacesAcrossComponents : 1;                     // 0x0000:2 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              CoplanarTolerance;                                          // 0x0004   (0x0004)  
	bool                                               bUseImmediateImport : 1;                                    // 0x0008:0 (0x0001)  
	bool                                               bImmediateProcessMappings : 1;                              // 0x0008:1 (0x0001)  
	bool                                               bSortMappings : 1;                                          // 0x0008:2 (0x0001)  
	bool                                               bDumpBinaryFiles : 1;                                       // 0x0008:3 (0x0001)  
	bool                                               bDebugMaterials : 1;                                        // 0x0008:4 (0x0001)  
	bool                                               bPadMappings : 1;                                           // 0x0008:5 (0x0001)  
	bool                                               bDebugPaddings : 1;                                         // 0x0008:6 (0x0001)  
	bool                                               bOnlyCalcDebugTexelMappings : 1;                            // 0x0008:7 (0x0001)  
	bool                                               bUseRandomColors : 1;                                       // 0x0009:0 (0x0001)  
	bool                                               bColorBordersGreen : 1;                                     // 0x0009:1 (0x0001)  
	bool                                               bColorByExecutionTime : 1;                                  // 0x0009:2 (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x000A   (0x0002)  MISSED
	float                                              ExecutionTimeDivisor;                                       // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.BasedPosition
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FBasedPosition
{ 
	class AActor*                                      Base;                                                       // 0x0000   (0x0008)  
	FVector                                            position;                                                   // 0x0008   (0x000C)  
	FVector                                            CachedBaseLocation;                                         // 0x0014   (0x000C)  
	FRotator                                           CachedBaseRotation;                                         // 0x0020   (0x000C)  
	FVector                                            CachedTransPosition;                                        // 0x002C   (0x000C)  
};

/// Struct /Script/Engine.FractureEffect
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FFractureEffect
{ 
	class UParticleSystem*                             ParticleSystem;                                             // 0x0000   (0x0008)  
	class USoundBase*                                  Sound;                                                      // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RigidBodyContactInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FRigidBodyContactInfo
{ 
	FVector                                            ContactPosition;                                            // 0x0000   (0x000C)  
	FVector                                            ContactNormal;                                              // 0x000C   (0x000C)  
	float                                              ContactPenetration;                                         // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	class UPhysicalMaterial*                           PhysMaterial[2];                                            // 0x0020   (0x0010)  
};

/// Struct /Script/Engine.CollisionImpactData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FCollisionImpactData
{ 
	TArray<FRigidBodyContactInfo>                      ContactInfos;                                               // 0x0000   (0x0010)  
	FVector                                            TotalNormalImpulse;                                         // 0x0010   (0x000C)  
	FVector                                            TotalFrictionImpulse;                                       // 0x001C   (0x000C)  
	bool                                               bIsVelocityDeltaUnderThreshold;                             // 0x0028   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0029   (0x0007)  MISSED
};

/// Struct /Script/Engine.RigidBodyState
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FRigidBodyState
{ 
	FVector_NetQuantize100                             position;                                                   // 0x0000   (0x000C)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FQuat                                              Quaternion;                                                 // 0x0010   (0x0010)  
	FVector_NetQuantize100                             LinVel;                                                     // 0x0020   (0x000C)  
	FVector_NetQuantize100                             AngVel;                                                     // 0x002C   (0x000C)  
	char                                               Flags;                                                      // 0x0038   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0039   (0x0007)  MISSED
};

/// Struct /Script/Engine.ForceFeedbackParameters
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FForceFeedbackParameters
{ 
	FName                                              Tag;                                                        // 0x0000   (0x0008)  
	bool                                               bLooping;                                                   // 0x0008   (0x0001)  
	bool                                               bIgnoreTimeDilation;                                        // 0x0009   (0x0001)  
	bool                                               bPlayWhilePaused;                                           // 0x000A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x000B   (0x0001)  MISSED
};

/// Struct /Script/Engine.PredictProjectilePathPointData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FPredictProjectilePathPointData
{ 
	FVector                                            Location;                                                   // 0x0000   (0x000C)  
	FVector                                            Velocity;                                                   // 0x000C   (0x000C)  
	float                                              Time;                                                       // 0x0018   (0x0004)  
};

/// Struct /Script/Engine.PredictProjectilePathResult
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FPredictProjectilePathResult
{ 
	TArray<FPredictProjectilePathPointData>            PathData;                                                   // 0x0000   (0x0010)  
	FPredictProjectilePathPointData                    LastTraceDestination;                                       // 0x0010   (0x001C)  
	FHitResult                                         HitResult;                                                  // 0x002C   (0x008C)  
};

/// Struct /Script/Engine.PredictProjectilePathParams
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FPredictProjectilePathParams
{ 
	FVector                                            StartLocation;                                              // 0x0000   (0x000C)  
	FVector                                            LaunchVelocity;                                             // 0x000C   (0x000C)  
	bool                                               bTraceWithCollision;                                        // 0x0018   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	float                                              ProjectileRadius;                                           // 0x001C   (0x0004)  
	float                                              MaxSimTime;                                                 // 0x0020   (0x0004)  
	bool                                               bTraceWithChannel;                                          // 0x0024   (0x0001)  
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                               // 0x0025   (0x0001)  
	unsigned char                                      UnknownData05_6[0x2];                                       // 0x0026   (0x0002)  MISSED
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypes;                                                // 0x0028   (0x0010)  
	TArray<class AActor*>                              ActorsToIgnore;                                             // 0x0038   (0x0010)  
	float                                              SimFrequency;                                               // 0x0048   (0x0004)  
	float                                              OverrideGravityZ;                                           // 0x004C   (0x0004)  
	TEnumAsByte<EDrawDebugTrace>                       DrawDebugType;                                              // 0x0050   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0051   (0x0003)  MISSED
	float                                              DrawDebugTime;                                              // 0x0054   (0x0004)  
	bool                                               bTraceComplex;                                              // 0x0058   (0x0001)  
	unsigned char                                      UnknownData07_7[0x7];                                       // 0x0059   (0x0007)  MISSED
};

/// Struct /Script/Engine.ActiveHapticFeedbackEffect
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FActiveHapticFeedbackEffect
{ 
	class UHapticFeedbackEffect_Base*                  HapticEffect;                                               // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0008   (0x0010)  MISSED
};

/// Struct /Script/Engine.ClusterNode
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FClusterNode
{ 
	FVector                                            BoundMin;                                                   // 0x0000   (0x000C)  
	int32_t                                            FirstChild;                                                 // 0x000C   (0x0004)  
	FVector                                            BoundMax;                                                   // 0x0010   (0x000C)  
	int32_t                                            LastChild;                                                  // 0x001C   (0x0004)  
	int32_t                                            FirstInstance;                                              // 0x0020   (0x0004)  
	int32_t                                            LastInstance;                                               // 0x0024   (0x0004)  
	FVector                                            MinInstanceScale;                                           // 0x0028   (0x000C)  
	FVector                                            MaxInstanceScale;                                           // 0x0034   (0x000C)  
};

/// Struct /Script/Engine.ClusterNode_DEPRECATED
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FClusterNode_DEPRECATED
{ 
	FVector                                            BoundMin;                                                   // 0x0000   (0x000C)  
	int32_t                                            FirstChild;                                                 // 0x000C   (0x0004)  
	FVector                                            BoundMax;                                                   // 0x0010   (0x000C)  
	int32_t                                            LastChild;                                                  // 0x001C   (0x0004)  
	int32_t                                            FirstInstance;                                              // 0x0020   (0x0004)  
	int32_t                                            LastInstance;                                               // 0x0024   (0x0004)  
};

/// Struct /Script/Engine.HLODISMComponentDesc
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FHLODISMComponentDesc
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0000   (0x0008)  
	class UMaterialInterface*                          Material;                                                   // 0x0008   (0x0008)  
	TArray<FTransform>                                 Instances;                                                  // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.ImportanceTexture
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FImportanceTexture
{ 
	FIntPoint                                          Size;                                                       // 0x0000   (0x0008)  
	int32_t                                            NumMips;                                                    // 0x0008   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<float>                                      MarginalCDF;                                                // 0x0010   (0x0010)  
	TArray<float>                                      ConditionalCDF;                                             // 0x0020   (0x0010)  
	TArray<FColor>                                     TextureData;                                                // 0x0030   (0x0010)  
	TWeakObjectPtr<class UTexture2D*>                  Texture;                                                    // 0x0040   (0x0008)  
	TEnumAsByte<EImportanceWeight>                     Weighting;                                                  // 0x0048   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Struct /Script/Engine.InstancedStaticMeshLightMapInstanceData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FInstancedStaticMeshLightMapInstanceData
{ 
	FTransform                                         Transform;                                                  // 0x0000   (0x0030)  
	TArray<FGuid>                                      MapBuildDataIds;                                            // 0x0030   (0x0010)  
};

/// Struct /Script/Engine.InstancedStaticMeshComponentInstanceData
/// Size: 0x0150 (336 bytes) (0x0000B8 - 0x000150) align n/a MaxSize: 0x0150
struct FInstancedStaticMeshComponentInstanceData : FSceneComponentInstanceData
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x00B8   (0x0008)  
	FInstancedStaticMeshLightMapInstanceData           CachedStaticLighting;                                       // 0x00C0   (0x0040)  
	TArray<FInstancedStaticMeshInstanceData>           PerInstanceSMData;                                          // 0x0100   (0x0010)  
	TArray<float>                                      PerInstanceSMCustomData;                                    // 0x0110   (0x0010)  
	unsigned char                                      UnknownData02_6[0x20];                                      // 0x0120   (0x0020)  MISSED
	int32_t                                            InstancingRandomSeed;                                       // 0x0140   (0x0004)  
	unsigned char                                      UnknownData03_7[0xC];                                       // 0x0144   (0x000C)  MISSED
};

/// Struct /Script/Engine.InterpEdSelKey
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FInterpEdSelKey
{ 
	class UInterpGroup*                                Group;                                                      // 0x0000   (0x0008)  
	class UInterpTrack*                                Track;                                                      // 0x0008   (0x0008)  
	int32_t                                            KeyIndex;                                                   // 0x0010   (0x0004)  
	float                                              UnsnappedPosition;                                          // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.CameraPreviewInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FCameraPreviewInfo
{ 
	class UClass*                                      PawnClass;                                                  // 0x0000   (0x0008)  
	class UAnimSequence*                               AnimSeq;                                                    // 0x0008   (0x0008)  
	FVector                                            Location;                                                   // 0x0010   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x001C   (0x000C)  
	class APawn*                                       PawnInst;                                                   // 0x0028   (0x0008)  
};

/// Struct /Script/Engine.SubTrackGroup
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FSubTrackGroup
{ 
	FString                                            GroupName;                                                  // 0x0000   (0x0010)  
	TArray<int32_t>                                    TrackIndices;                                               // 0x0010   (0x0010)  
	bool                                               bIsCollapsed : 1;                                           // 0x0020:0 (0x0001)  
	bool                                               bIsSelected : 1;                                            // 0x0020:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0021   (0x0007)  MISSED
};

/// Struct /Script/Engine.SupportedSubTrackInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSupportedSubTrackInfo
{ 
	class UClass*                                      SupportedClass;                                             // 0x0000   (0x0008)  
	FString                                            SubTrackName;                                               // 0x0008   (0x0010)  
	int32_t                                            GroupIndex;                                                 // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.VectorSpringState
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FVectorSpringState
{ 
	unsigned char                                      UnknownData01_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.FloatSpringState
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FFloatSpringState
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.DrawToRenderTargetContext
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FDrawToRenderTargetContext
{ 
	class UTextureRenderTarget2D*                      RenderTarget;                                               // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Struct /Script/Engine.LatentActionManager
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FLatentActionManager
{ 
	unsigned char                                      UnknownData01_2[0x68];                                      // 0x0000   (0x0068)  MISSED
};

/// Struct /Script/Engine.LevelSimplificationDetails
/// Size: 0x012C (300 bytes) (0x000000 - 0x00012C) align n/a MaxSize: 0x012C
struct FLevelSimplificationDetails
{ 
	bool                                               bCreatePackagePerAsset;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              DetailsPercentage;                                          // 0x0004   (0x0004)  
	FMaterialProxySettings                             StaticMeshMaterialSettings;                                 // 0x0008   (0x0088)  
	bool                                               bOverrideLandscapeExportLOD;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0091   (0x0003)  MISSED
	int32_t                                            LandscapeExportLOD;                                         // 0x0094   (0x0004)  
	FMaterialProxySettings                             LandscapeMaterialSettings;                                  // 0x0098   (0x0088)  
	bool                                               bBakeFoliageToLandscape;                                    // 0x0120   (0x0001)  
	bool                                               bBakeGrassToLandscape;                                      // 0x0121   (0x0001)  
	bool                                               bGenerateMeshNormalMap;                                     // 0x0122   (0x0001)  
	bool                                               bGenerateMeshMetallicMap;                                   // 0x0123   (0x0001)  
	bool                                               bGenerateMeshRoughnessMap;                                  // 0x0124   (0x0001)  
	bool                                               bGenerateMeshSpecularMap;                                   // 0x0125   (0x0001)  
	bool                                               bGenerateLandscapeNormalMap;                                // 0x0126   (0x0001)  
	bool                                               bGenerateLandscapeMetallicMap;                              // 0x0127   (0x0001)  
	bool                                               bGenerateLandscapeRoughnessMap;                             // 0x0128   (0x0001)  
	bool                                               bGenerateLandscapeSpecularMap;                              // 0x0129   (0x0001)  
	unsigned char                                      UnknownData05_7[0x2];                                       // 0x012A   (0x0002)  MISSED
};

/// Struct /Script/Engine.StreamableTextureInstance
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FStreamableTextureInstance
{ 
	unsigned char                                      UnknownData01_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/Engine.DynamicTextureInstance
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
struct FDynamicTextureInstance : FStreamableTextureInstance
{ 
	class UTexture2D*                                  Texture;                                                    // 0x0028   (0x0008)  
	bool                                               bAttached;                                                  // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	float                                              OriginalRadius;                                             // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.PrecomputedLightInstanceData
/// Size: 0x0110 (272 bytes) (0x0000B8 - 0x000110) align n/a MaxSize: 0x0110
struct FPrecomputedLightInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x00B8   (0x0008)  MISSED
	FTransform                                         Transform;                                                  // 0x00C0   (0x0030)  
	FGuid                                              LightGuid;                                                  // 0x00F0   (0x0010)  
	int32_t                                            PreviewShadowMapChannel;                                    // 0x0100   (0x0004)  
	unsigned char                                      UnknownData03_7[0xC];                                       // 0x0104   (0x000C)  MISSED
};

/// Struct /Script/Engine.BatchedPoint
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FBatchedPoint
{ 
	FVector                                            position;                                                   // 0x0000   (0x000C)  
	FLinearColor                                       Color;                                                      // 0x000C   (0x0010)  
	float                                              PointSize;                                                  // 0x001C   (0x0004)  
	float                                              RemainingLifeTime;                                          // 0x0020   (0x0004)  
	char                                               DepthPriority;                                              // 0x0024   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0025   (0x0003)  MISSED
};

/// Struct /Script/Engine.BatchedLine
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align n/a MaxSize: 0x0034
struct FBatchedLine
{ 
	FVector                                            Start;                                                      // 0x0000   (0x000C)  
	FVector                                            End;                                                        // 0x000C   (0x000C)  
	FLinearColor                                       Color;                                                      // 0x0018   (0x0010)  
	float                                              Thickness;                                                  // 0x0028   (0x0004)  
	float                                              RemainingLifeTime;                                          // 0x002C   (0x0004)  
	char                                               DepthPriority;                                              // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0031   (0x0003)  MISSED
};

/// Struct /Script/Engine.ClientReceiveData
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FClientReceiveData
{ 
	class APlayerController*                           LocalPC;                                                    // 0x0000   (0x0008)  
	FName                                              MessageType;                                                // 0x0008   (0x0008)  
	int32_t                                            MessageIndex;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	FString                                            MessageString;                                              // 0x0018   (0x0010)  
	class APlayerState*                                RelatedPlayerState;                                         // 0x0028   (0x0008)  
	class APlayerState*                                RelatedPlayerState0;                                        // 0x0030   (0x0008)  
	class UObject*                                     OptionalObject;                                             // 0x0038   (0x0008)  
};

/// Struct /Script/Engine.ParameterGroupData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FParameterGroupData
{ 
	FString                                            GroupName;                                                  // 0x0000   (0x0010)  
	int32_t                                            GroupSortPriority;                                          // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.StaticComponentMaskValue
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FStaticComponentMaskValue
{ 
	bool                                               R;                                                          // 0x0000   (0x0001)  
	bool                                               G;                                                          // 0x0001   (0x0001)  
	bool                                               B;                                                          // 0x0002   (0x0001)  
	bool                                               A;                                                          // 0x0003   (0x0001)  
};

/// Struct /Script/Engine.ParameterChannelNames
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FParameterChannelNames
{ 
	FText                                              R;                                                          // 0x0000   (0x0018)  
	FText                                              G;                                                          // 0x0018   (0x0018)  
	FText                                              B;                                                          // 0x0030   (0x0018)  
	FText                                              A;                                                          // 0x0048   (0x0018)  
};

/// Struct /Script/Engine.FunctionExpressionOutput
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FFunctionExpressionOutput
{ 
	class UMaterialExpressionFunctionOutput*           ExpressionOutput;                                           // 0x0000   (0x0008)  
	FGuid                                              ExpressionOutputId;                                         // 0x0008   (0x0010)  
	FExpressionOutput                                  Output;                                                     // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.FunctionExpressionInput
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FFunctionExpressionInput
{ 
	class UMaterialExpressionFunctionInput*            ExpressionInput;                                            // 0x0000   (0x0008)  
	FGuid                                              ExpressionInputId;                                          // 0x0008   (0x0010)  
	FExpressionInput                                   Input;                                                      // 0x0018   (0x000C)  
	unsigned char                                      UnknownData01_7[0xC];                                       // 0x0024   (0x000C)  MISSED
};

/// Struct /Script/Engine.ScalarParameterAtlasInstanceData
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FScalarParameterAtlasInstanceData
{ 
	bool                                               bIsUsedAsAtlasPosition;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0001   (0x0007)  MISSED
	TWeakObjectPtr<class UCurveLinearColor*>           Curve;                                                      // 0x0008   (0x0008)  
	unsigned char                                      UnknownData04_6[0x20];                                      // 0x0010   (0x0020)  MISSED
	TWeakObjectPtr<class UCurveLinearColorAtlas*>      Atlas;                                                      // 0x0030   (0x0008)  
	unsigned char                                      UnknownData05_7[0x20];                                      // 0x0038   (0x0020)  MISSED
};

/// Struct /Script/Engine.MemberReference
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FMemberReference
{ 
	class UObject*                                     MemberParent;                                               // 0x0000   (0x0008)  
	FString                                            MemberScope;                                                // 0x0008   (0x0010)  
	FName                                              MemberName;                                                 // 0x0018   (0x0008)  
	FGuid                                              MemberGuid;                                                 // 0x0020   (0x0010)  
	bool                                               bSelfContext;                                               // 0x0030   (0x0001)  
	bool                                               bWasDeprecated;                                             // 0x0031   (0x0001)  
	unsigned char                                      UnknownData01_7[0x6];                                       // 0x0032   (0x0006)  MISSED
};

/// Struct /Script/Engine.MeshInstancingSettings
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMeshInstancingSettings
{ 
	class UClass*                                      ActorClassToUse;                                            // 0x0000   (0x0008)  
	int32_t                                            InstanceReplacementThreshold;                               // 0x0008   (0x0004)  
	EMeshInstancingReplacementMethod                   MeshReplacementMethod;                                      // 0x000C   (0x0001)  
	bool                                               bSkipMeshesWithVertexColors;                                // 0x000D   (0x0001)  
	bool                                               bUseHLODVolumes;                                            // 0x000E   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x000F   (0x0001)  MISSED
	class UClass*                                      ISMComponentToUse;                                          // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.MeshReductionSettings
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FMeshReductionSettings
{ 
	float                                              PercentTriangles;                                           // 0x0000   (0x0004)  
	float                                              PercentVertices;                                            // 0x0004   (0x0004)  
	float                                              MaxDeviation;                                               // 0x0008   (0x0004)  
	float                                              PixelError;                                                 // 0x000C   (0x0004)  
	float                                              WeldingThreshold;                                           // 0x0010   (0x0004)  
	float                                              HardAngleThreshold;                                         // 0x0014   (0x0004)  
	int32_t                                            BaseLODModel;                                               // 0x0018   (0x0004)  
	TEnumAsByte<EMeshFeatureImportance>                SilhouetteImportance;                                       // 0x001C   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                TextureImportance;                                          // 0x001D   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                ShadingImportance;                                          // 0x001E   (0x0001)  
	bool                                               bRecalculateNormals : 1;                                    // 0x001F:0 (0x0001)  
	bool                                               bGenerateUniqueLightmapUVs : 1;                             // 0x001F:1 (0x0001)  
	bool                                               bKeepSymmetry : 1;                                          // 0x001F:2 (0x0001)  
	bool                                               bVisibilityAided : 1;                                       // 0x001F:3 (0x0001)  
	bool                                               bCullOccluded : 1;                                          // 0x001F:4 (0x0001)  
	EStaticMeshReductionTerimationCriterion            TerminationCriterion;                                       // 0x0020   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                VisibilityAggressiveness;                                   // 0x0021   (0x0001)  
	TEnumAsByte<EMeshFeatureImportance>                VertexColorImportance;                                      // 0x0022   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x0023   (0x0001)  MISSED
};

/// Struct /Script/Engine.NameCurveKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FNameCurveKey
{ 
	float                                              Time;                                                       // 0x0000   (0x0004)  
	FName                                              Value;                                                      // 0x0004   (0x0008)  
};

/// Struct /Script/Engine.NameCurve
/// Size: 0x0078 (120 bytes) (0x000068 - 0x000078) align n/a MaxSize: 0x0078
struct FNameCurve : FIndexedCurve
{ 
	TArray<FNameCurveKey>                              Keys;                                                       // 0x0068   (0x0010)  
};

/// Struct /Script/Engine.NavDataConfig
/// Size: 0x0078 (120 bytes) (0x000030 - 0x000078) align n/a MaxSize: 0x0078
struct FNavDataConfig : FNavAgentProperties
{ 
	FName                                              Name;                                                       // 0x0030   (0x0008)  
	FColor                                             Color;                                                      // 0x0038   (0x0004)  
	FVector                                            DefaultQueryExtent;                                         // 0x003C   (0x000C)  
	class UClass*                                      NavigationDataClass;                                        // 0x0048   (0x0008)  
	TSoftObjectPtr<class UClass*>                      NavDataClass;                                               // 0x0050   (0x0028)  
};

/// Struct /Script/Engine.PacketSimulationSettings
/// Size: 0x0034 (52 bytes) (0x000000 - 0x000034) align n/a MaxSize: 0x0034
struct FPacketSimulationSettings
{ 
	int32_t                                            PktLoss;                                                    // 0x0000   (0x0004)  
	int32_t                                            PktLossMaxSize;                                             // 0x0004   (0x0004)  
	int32_t                                            PktLossMinSize;                                             // 0x0008   (0x0004)  
	int32_t                                            PktOrder;                                                   // 0x000C   (0x0004)  
	int32_t                                            PktDup;                                                     // 0x0010   (0x0004)  
	int32_t                                            PktLag;                                                     // 0x0014   (0x0004)  
	int32_t                                            PktLagVariance;                                             // 0x0018   (0x0004)  
	int32_t                                            PktLagMin;                                                  // 0x001C   (0x0004)  
	int32_t                                            PktLagMax;                                                  // 0x0020   (0x0004)  
	int32_t                                            PktIncomingLagMin;                                          // 0x0024   (0x0004)  
	int32_t                                            PktIncomingLagMax;                                          // 0x0028   (0x0004)  
	int32_t                                            PktIncomingLoss;                                            // 0x002C   (0x0004)  
	int32_t                                            PktJitter;                                                  // 0x0030   (0x0004)  
};

/// Struct /Script/Engine.FastArraySerializer
/// Size: 0x0108 (264 bytes) (0x000000 - 0x000108) align n/a MaxSize: 0x0108
struct FFastArraySerializer
{ 
	unsigned char                                      UnknownData03_7[0x54];                                      // 0x0000   (0x0054)  MISSED
	int32_t                                            ArrayReplicationKey;                                        // 0x0054   (0x0004)  
	unsigned char                                      UnknownData04_6[0xA8];                                      // 0x0058   (0x00A8)  MISSED
	EFastArraySerializerDeltaFlags                     DeltaFlags;                                                 // 0x0100   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0101   (0x0007)  MISSED
};

/// Struct /Script/Engine.FastArraySerializerItem
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FFastArraySerializerItem
{ 
	int32_t                                            ReplicationID;                                              // 0x0000   (0x0004)  
	int32_t                                            ReplicationKey;                                             // 0x0004   (0x0004)  
	int32_t                                            MostRecentArrayReplicationKey;                              // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.ParticleCurvePair
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FParticleCurvePair
{ 
	FString                                            CurveName;                                                  // 0x0000   (0x0010)  
	class UObject*                                     CurveObject;                                                // 0x0010   (0x0008)  
};

/// Struct /Script/Engine.BeamTargetData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FBeamTargetData
{ 
	FName                                              TargetName;                                                 // 0x0000   (0x0008)  
	float                                              TargetPercentage;                                           // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.ParticleSystemWorldManagerTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FParticleSystemWorldManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.ParticleSystemReplayFrame
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FParticleSystemReplayFrame
{ 
	unsigned char                                      UnknownData01_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.ParticleEmitterReplayFrame
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FParticleEmitterReplayFrame
{ 
	unsigned char                                      UnknownData01_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/Engine.FreezablePerPlatformInt
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FFreezablePerPlatformInt
{ 
	unsigned char                                      UnknownData01_2[0x4];                                       // 0x0000   (0x0004)  MISSED
};

/// Struct /Script/Engine.CameraFadeEntry
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FCameraFadeEntry
{ 
	FGuid                                              Guid;                                                       // 0x0000   (0x0010)  
	float                                              Priority;                                                   // 0x0010   (0x0004)  
	FLinearColor                                       FadeColor;                                                  // 0x0014   (0x0010)  
	float                                              FadeAmount;                                                 // 0x0024   (0x0004)  
	FVector2D                                          FadeAlpha;                                                  // 0x0028   (0x0008)  
	float                                              FadeTime;                                                   // 0x0030   (0x0004)  
	float                                              FadeDelay;                                                  // 0x0034   (0x0004)  
	float                                              FadeTimeRemaining;                                          // 0x0038   (0x0004)  
	bool                                               bHoldFadeWhenFinished : 1;                                  // 0x003C:0 (0x0001)  
	bool                                               bAutoAnimateFade : 1;                                       // 0x003C:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Struct /Script/Engine.ViewTargetTransitionParams
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FViewTargetTransitionParams
{ 
	float                                              BlendTime;                                                  // 0x0000   (0x0004)  
	TEnumAsByte<EViewTargetBlendFunction>              BlendFunction;                                              // 0x0004   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	float                                              BlendExp;                                                   // 0x0008   (0x0004)  
	bool                                               bLockOutgoing : 1;                                          // 0x000C:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.UpdateLevelStreamingLevelStatus
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FUpdateLevelStreamingLevelStatus
{ 
	FName                                              PackageName;                                                // 0x0000   (0x0008)  
	int32_t                                            LODIndex;                                                   // 0x0008   (0x0004)  
	bool                                               bNewShouldBeLoaded : 1;                                     // 0x000C:0 (0x0001)  
	bool                                               bNewShouldBeVisible : 1;                                    // 0x000C:1 (0x0001)  
	bool                                               bNewShouldBlockOnLoad : 1;                                  // 0x000C:2 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x000D   (0x0003)  MISSED
};

/// Struct /Script/Engine.PlayerMuteList
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FPlayerMuteList
{ 
	unsigned char                                      UnknownData02_7[0x30];                                      // 0x0000   (0x0030)  MISSED
	bool                                               bHasVoiceHandshakeCompleted;                                // 0x0030   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            VoiceChannelIdx;                                            // 0x0034   (0x0004)  
};

/// Struct /Script/Engine.PreviewAttachedObjectPair
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FPreviewAttachedObjectPair
{ 
	TWeakObjectPtr<class UObject*>                     AttachedObject;                                             // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0008   (0x0020)  MISSED
	class UObject*                                     Object;                                                     // 0x0028   (0x0008)  
	FName                                              AttachedTo;                                                 // 0x0030   (0x0008)  
};

/// Struct /Script/Engine.PreviewAssetAttachContainer
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FPreviewAssetAttachContainer
{ 
	TArray<FPreviewAttachedObjectPair>                 AttachedObjects;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.PrimitiveComponentInstanceData
/// Size: 0x0100 (256 bytes) (0x0000B8 - 0x000100) align n/a MaxSize: 0x0100
struct FPrimitiveComponentInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x00B8   (0x0008)  MISSED
	FTransform                                         ComponentTransform;                                         // 0x00C0   (0x0030)  
	int32_t                                            VisibilityId;                                               // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	class UPrimitiveComponent*                         LODParent;                                                  // 0x00F8   (0x0008)  
};

/// Struct /Script/Engine.SpriteCategoryInfo
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FSpriteCategoryInfo
{ 
	FName                                              Category;                                                   // 0x0000   (0x0008)  
	FText                                              DisplayName;                                                // 0x0008   (0x0018)  
	FText                                              Description;                                                // 0x0020   (0x0018)  
};

/// Struct /Script/Engine.QuartzQuantizationBoundary
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FQuartzQuantizationBoundary
{ 
	EQuartzCommandQuantization                         Quantization;                                               // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              Multiplier;                                                 // 0x0004   (0x0004)  
	EQuarztQuantizationReference                       CountingReferencePoint;                                     // 0x0008   (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/Engine.QuartzTransportTimeStamp
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FQuartzTransportTimeStamp
{ 
	unsigned char                                      UnknownData01_2[0xC];                                       // 0x0000   (0x000C)  MISSED
};

/// Struct /Script/Engine.LevelNameAndTime
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FLevelNameAndTime
{ 
	FString                                            LevelName;                                                  // 0x0000   (0x0010)  
	uint32_t                                           LevelChangeTimeInMS;                                        // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0014   (0x0004)  MISSED
};

/// Struct /Script/Engine.CompressedRichCurve
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FCompressedRichCurve
{ 
	unsigned char                                      UnknownData01_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.RootMotionSourceStatus
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FRootMotionSourceStatus
{ 
	char                                               Flags;                                                      // 0x0000   (0x0001)  
};

/// Struct /Script/Engine.RootMotionFinishVelocitySettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FRootMotionFinishVelocitySettings
{ 
	ERootMotionFinishVelocityMode                      Mode;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            SetVelocity;                                                // 0x0004   (0x000C)  
	float                                              ClampVelocity;                                              // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.RootMotionSource
/// Size: 0x00A0 (160 bytes) (0x000000 - 0x0000A0) align n/a MaxSize: 0x0098
struct FRootMotionSource
{ 
	unsigned char                                      UnknownData04_7[0x10];                                      // 0x0000   (0x0010)  MISSED
	uint16_t                                           Priority;                                                   // 0x0010   (0x0002)  
	uint16_t                                           LocalID;                                                    // 0x0012   (0x0002)  
	ERootMotionAccumulateMode                          AccumulateMode;                                             // 0x0014   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0015   (0x0003)  MISSED
	FName                                              InstanceName;                                               // 0x0018   (0x0008)  
	float                                              StartTime;                                                  // 0x0020   (0x0004)  
	float                                              CurrentTime;                                                // 0x0024   (0x0004)  
	float                                              PreviousTime;                                               // 0x0028   (0x0004)  
	float                                              Duration;                                                   // 0x002C   (0x0004)  
	FRootMotionSourceStatus                            Status;                                                     // 0x0030   (0x0001)  
	FRootMotionSourceSettings                          Settings;                                                   // 0x0031   (0x0001)  
	bool                                               bInLocalSpace;                                              // 0x0032   (0x0001)  
	unsigned char                                      UnknownData06_6[0xD];                                       // 0x0033   (0x000D)  MISSED
	FRootMotionMovementParams                          RootMotionParams;                                           // 0x0040   (0x0040)  
	FRootMotionFinishVelocitySettings                  FinishVelocityParams;                                       // 0x0080   (0x0014)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Struct /Script/Engine.RootMotionSource_JumpForce
/// Size: 0x00D0 (208 bytes) (0x000098 - 0x0000D0) align n/a MaxSize: 0x00D0
struct FRootMotionSource_JumpForce : FRootMotionSource
{ 
	FRotator                                           Rotation;                                                   // 0x0098   (0x000C)  
	float                                              Distance;                                                   // 0x00A4   (0x0004)  
	float                                              Height;                                                     // 0x00A8   (0x0004)  
	bool                                               bDisableTimeout;                                            // 0x00AC   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x00AD   (0x0003)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00B0   (0x0008)  
	class UCurveFloat*                                 TimeMappingCurve;                                           // 0x00B8   (0x0008)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x00C0   (0x0010)  MISSED
};

/// Struct /Script/Engine.RootMotionSource_MoveToDynamicForce
/// Size: 0x00D0 (208 bytes) (0x000098 - 0x0000D0) align n/a MaxSize: 0x00D0
struct FRootMotionSource_MoveToDynamicForce : FRootMotionSource
{ 
	FVector                                            StartLocation;                                              // 0x0098   (0x000C)  
	FVector                                            InitialTargetLocation;                                      // 0x00A4   (0x000C)  
	FVector                                            TargetLocation;                                             // 0x00B0   (0x000C)  
	bool                                               bRestrictSpeedToExpected;                                   // 0x00BC   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x00BD   (0x0003)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00C0   (0x0008)  
	class UCurveFloat*                                 TimeMappingCurve;                                           // 0x00C8   (0x0008)  
};

/// Struct /Script/Engine.RootMotionSource_MoveToForce
/// Size: 0x00C0 (192 bytes) (0x000098 - 0x0000C0) align n/a MaxSize: 0x00C0
struct FRootMotionSource_MoveToForce : FRootMotionSource
{ 
	FVector                                            StartLocation;                                              // 0x0098   (0x000C)  
	FVector                                            TargetLocation;                                             // 0x00A4   (0x000C)  
	bool                                               bRestrictSpeedToExpected;                                   // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00B1   (0x0007)  MISSED
	class UCurveVector*                                PathOffsetCurve;                                            // 0x00B8   (0x0008)  
};

/// Struct /Script/Engine.RootMotionSource_RadialForce
/// Size: 0x00E0 (224 bytes) (0x000098 - 0x0000E0) align n/a MaxSize: 0x00E0
struct FRootMotionSource_RadialForce : FRootMotionSource
{ 
	FVector                                            Location;                                                   // 0x0098   (0x000C)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	class AActor*                                      LocationActor;                                              // 0x00A8   (0x0008)  
	float                                              Radius;                                                     // 0x00B0   (0x0004)  
	float                                              Strength;                                                   // 0x00B4   (0x0004)  
	bool                                               bIsPush;                                                    // 0x00B8   (0x0001)  
	bool                                               bNoZForce;                                                  // 0x00B9   (0x0001)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x00BA   (0x0006)  MISSED
	class UCurveFloat*                                 StrengthDistanceFalloff;                                    // 0x00C0   (0x0008)  
	class UCurveFloat*                                 StrengthOverTime;                                           // 0x00C8   (0x0008)  
	bool                                               bUseFixedWorldDirection;                                    // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x00D1   (0x0003)  MISSED
	FRotator                                           FixedWorldDirection;                                        // 0x00D4   (0x000C)  
};

/// Struct /Script/Engine.RootMotionSource_ConstantForce
/// Size: 0x00B0 (176 bytes) (0x000098 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FRootMotionSource_ConstantForce : FRootMotionSource
{ 
	FVector                                            Force;                                                      // 0x0098   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x00A4   (0x0004)  MISSED
	class UCurveFloat*                                 StrengthOverTime;                                           // 0x00A8   (0x0008)  
};

/// Struct /Script/Engine.SBEnvControlSettingsExtraValue
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FSBEnvControlSettingsExtraValue
{ 
	float                                              CharacterLightIntensity;                                    // 0x0000   (0x0004)  
	FLinearColor                                       CharacterLightColor;                                        // 0x0004   (0x0010)  
};

/// Struct /Script/Engine.CameraExposureSettings
/// Size: 0x0040 (64 bytes) (0x000000 - 0x000040) align n/a MaxSize: 0x0040
struct FCameraExposureSettings
{ 
	TEnumAsByte<EAutoExposureMethod>                   Method;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              LowPercent;                                                 // 0x0004   (0x0004)  
	float                                              HighPercent;                                                // 0x0008   (0x0004)  
	float                                              MinBrightness;                                              // 0x000C   (0x0004)  
	float                                              MaxBrightness;                                              // 0x0010   (0x0004)  
	float                                              SpeedUp;                                                    // 0x0014   (0x0004)  
	float                                              SpeedDown;                                                  // 0x0018   (0x0004)  
	float                                              Bias;                                                       // 0x001C   (0x0004)  
	class UCurveFloat*                                 BiasCurve;                                                  // 0x0020   (0x0008)  
	class UTexture*                                    MeterMask;                                                  // 0x0028   (0x0008)  
	float                                              HistogramLogMin;                                            // 0x0030   (0x0004)  
	float                                              HistogramLogMax;                                            // 0x0034   (0x0004)  
	float                                              CalibrationConstant;                                        // 0x0038   (0x0004)  
	bool                                               ApplyPhysicalCameraExposure : 1;                            // 0x003C:0 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x003D   (0x0003)  MISSED
};

/// Struct /Script/Engine.GaussianSumBloomSettings
/// Size: 0x0084 (132 bytes) (0x000000 - 0x000084) align n/a MaxSize: 0x0084
struct FGaussianSumBloomSettings
{ 
	float                                              Intensity;                                                  // 0x0000   (0x0004)  
	float                                              Threshold;                                                  // 0x0004   (0x0004)  
	float                                              SizeScale;                                                  // 0x0008   (0x0004)  
	float                                              Filter1Size;                                                // 0x000C   (0x0004)  
	float                                              Filter2Size;                                                // 0x0010   (0x0004)  
	float                                              Filter3Size;                                                // 0x0014   (0x0004)  
	float                                              Filter4Size;                                                // 0x0018   (0x0004)  
	float                                              Filter5Size;                                                // 0x001C   (0x0004)  
	float                                              Filter6Size;                                                // 0x0020   (0x0004)  
	FLinearColor                                       Filter1Tint;                                                // 0x0024   (0x0010)  
	FLinearColor                                       Filter2Tint;                                                // 0x0034   (0x0010)  
	FLinearColor                                       Filter3Tint;                                                // 0x0044   (0x0010)  
	FLinearColor                                       Filter4Tint;                                                // 0x0054   (0x0010)  
	FLinearColor                                       Filter5Tint;                                                // 0x0064   (0x0010)  
	FLinearColor                                       Filter6Tint;                                                // 0x0074   (0x0010)  
};

/// Struct /Script/Engine.ConvolutionBloomSettings
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FConvolutionBloomSettings
{ 
	class UTexture2D*                                  Texture;                                                    // 0x0000   (0x0008)  
	float                                              Size;                                                       // 0x0008   (0x0004)  
	FVector2D                                          CenterUV;                                                   // 0x000C   (0x0008)  
	float                                              PreFilterMin;                                               // 0x0014   (0x0004)  
	float                                              PreFilterMax;                                               // 0x0018   (0x0004)  
	float                                              PreFilterMult;                                              // 0x001C   (0x0004)  
	float                                              BufferScale;                                                // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.LensBloomSettings
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FLensBloomSettings
{ 
	FGaussianSumBloomSettings                          GaussianSum;                                                // 0x0000   (0x0084)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0084   (0x0004)  MISSED
	FConvolutionBloomSettings                          Convolution;                                                // 0x0088   (0x0028)  
	TEnumAsByte<EBloomMethod>                          Method;                                                     // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Struct /Script/Engine.LensImperfectionSettings
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FLensImperfectionSettings
{ 
	class UTexture*                                    DirtMask;                                                   // 0x0000   (0x0008)  
	float                                              DirtMaskIntensity;                                          // 0x0008   (0x0004)  
	FLinearColor                                       DirtMaskTint;                                               // 0x000C   (0x0010)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/Engine.LensSettings
/// Size: 0x00E0 (224 bytes) (0x000000 - 0x0000E0) align n/a MaxSize: 0x00E0
struct FLensSettings
{ 
	FLensBloomSettings                                 Bloom;                                                      // 0x0000   (0x00B8)  
	FLensImperfectionSettings                          Imperfections;                                              // 0x00B8   (0x0020)  
	float                                              ChromaticAberration;                                        // 0x00D8   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00DC   (0x0004)  MISSED
};

/// Struct /Script/Engine.FilmStockSettings
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FFilmStockSettings
{ 
	float                                              Slope;                                                      // 0x0000   (0x0004)  
	float                                              Toe;                                                        // 0x0004   (0x0004)  
	float                                              Shoulder;                                                   // 0x0008   (0x0004)  
	float                                              BlackClip;                                                  // 0x000C   (0x0004)  
	float                                              WhiteClip;                                                  // 0x0010   (0x0004)  
};

/// Struct /Script/Engine.ColorGradePerRangeSettings
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FColorGradePerRangeSettings
{ 
	FVector4                                           Saturation;                                                 // 0x0000   (0x0010)  
	FVector4                                           Contrast;                                                   // 0x0010   (0x0010)  
	FVector4                                           Gamma;                                                      // 0x0020   (0x0010)  
	FVector4                                           Gain;                                                       // 0x0030   (0x0010)  
	FVector4                                           Offset;                                                     // 0x0040   (0x0010)  
};

/// Struct /Script/Engine.ColorGradingSettings
/// Size: 0x0150 (336 bytes) (0x000000 - 0x000150) align n/a MaxSize: 0x0150
struct FColorGradingSettings
{ 
	FColorGradePerRangeSettings                        Global;                                                     // 0x0000   (0x0050)  
	FColorGradePerRangeSettings                        Shadows;                                                    // 0x0050   (0x0050)  
	FColorGradePerRangeSettings                        Midtones;                                                   // 0x00A0   (0x0050)  
	FColorGradePerRangeSettings                        Highlights;                                                 // 0x00F0   (0x0050)  
	float                                              ShadowsMax;                                                 // 0x0140   (0x0004)  
	float                                              HighlightsMin;                                              // 0x0144   (0x0004)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0148   (0x0008)  MISSED
};

/// Struct /Script/Engine.SceneViewExtensionIsActiveFunctor
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FSceneViewExtensionIsActiveFunctor
{ 
	unsigned char                                      UnknownData01_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/Engine.ClothPhysicsProperties_Legacy
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FClothPhysicsProperties_Legacy
{ 
	float                                              VerticalResistance;                                         // 0x0000   (0x0004)  
	float                                              HorizontalResistance;                                       // 0x0004   (0x0004)  
	float                                              BendResistance;                                             // 0x0008   (0x0004)  
	float                                              ShearResistance;                                            // 0x000C   (0x0004)  
	float                                              Friction;                                                   // 0x0010   (0x0004)  
	float                                              Damping;                                                    // 0x0014   (0x0004)  
	float                                              TetherStiffness;                                            // 0x0018   (0x0004)  
	float                                              TetherLimit;                                                // 0x001C   (0x0004)  
	float                                              Drag;                                                       // 0x0020   (0x0004)  
	float                                              StiffnessFrequency;                                         // 0x0024   (0x0004)  
	float                                              GravityScale;                                               // 0x0028   (0x0004)  
	float                                              MassScale;                                                  // 0x002C   (0x0004)  
	float                                              InertiaBlend;                                               // 0x0030   (0x0004)  
	float                                              SelfCollisionThickness;                                     // 0x0034   (0x0004)  
	float                                              SelfCollisionSquashScale;                                   // 0x0038   (0x0004)  
	float                                              SelfCollisionStiffness;                                     // 0x003C   (0x0004)  
	float                                              SolverFrequency;                                            // 0x0040   (0x0004)  
	float                                              FiberCompression;                                           // 0x0044   (0x0004)  
	float                                              FiberExpansion;                                             // 0x0048   (0x0004)  
	float                                              FiberResistance;                                            // 0x004C   (0x0004)  
};

/// Struct /Script/Engine.ClothingAssetData_Legacy
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align n/a MaxSize: 0x0078
struct FClothingAssetData_Legacy
{ 
	FName                                              AssetName;                                                  // 0x0000   (0x0008)  
	FString                                            ApexFileName;                                               // 0x0008   (0x0010)  
	bool                                               bClothPropertiesChanged;                                    // 0x0018   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	FClothPhysicsProperties_Legacy                     PhysicsProperties;                                          // 0x001C   (0x0050)  
	unsigned char                                      UnknownData03_7[0xC];                                       // 0x006C   (0x000C)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshClothBuildParams
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FSkeletalMeshClothBuildParams
{ 
	TWeakObjectPtr<class UClothingAssetBase*>          TargetAsset;                                                // 0x0000   (0x0008)  
	int32_t                                            TargetLod;                                                  // 0x0008   (0x0004)  
	bool                                               bRemapParameters;                                           // 0x000C   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FString                                            AssetName;                                                  // 0x0010   (0x0010)  
	int32_t                                            LODIndex;                                                   // 0x0020   (0x0004)  
	int32_t                                            SourceSection;                                              // 0x0024   (0x0004)  
	bool                                               bRemoveFromMesh;                                            // 0x0028   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0029   (0x0007)  MISSED
	TWeakObjectPtr<class UPhysicsAsset*>               PhysicsAsset;                                               // 0x0030   (0x0008)  
	unsigned char                                      UnknownData05_7[0x20];                                      // 0x0038   (0x0020)  MISSED
};

/// Struct /Script/Engine.BoneMirrorExport
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FBoneMirrorExport
{ 
	FName                                              BoneName;                                                   // 0x0000   (0x0008)  
	FName                                              SourceBoneName;                                             // 0x0008   (0x0008)  
	TEnumAsByte<EAxis>                                 BoneFlipAxis;                                               // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshComponentClothTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSkeletalMeshComponentClothTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.SkeletalMeshComponentEndPhysicsTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSkeletalMeshComponentEndPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.NameMapping
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FNameMapping
{ 
	FName                                              NodeName;                                                   // 0x0000   (0x0008)  
	FName                                              BoneName;                                                   // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.RigConfiguration
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FRigConfiguration
{ 
	class URig*                                        Rig;                                                        // 0x0000   (0x0008)  
	TArray<FNameMapping>                               BoneMappingTable;                                           // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.BoneReductionSetting
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FBoneReductionSetting
{ 
	TArray<FName>                                      BonesToRemove;                                              // 0x0000   (0x0010)  
};

/// Struct /Script/Engine.ReferencePose
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FReferencePose
{ 
	FName                                              PoseName;                                                   // 0x0000   (0x0008)  
	TArray<FTransform>                                 ReferencePose;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.SkeletonToMeshLinkup
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSkeletonToMeshLinkup
{ 
	TArray<int32_t>                                    SkeletonToMeshTable;                                        // 0x0000   (0x0010)  
	TArray<int32_t>                                    MeshToSkeletonTable;                                        // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.SkelMeshSkinWeightInfo
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align n/a MaxSize: 0x003C
struct FSkelMeshSkinWeightInfo
{ 
	int32_t                                            Bones[12];                                                  // 0x0000   (0x0030)  
	char                                               Weights[12];                                                // 0x0030   (0x000C)  
};

/// Struct /Script/Engine.SkinWeightProfileManagerTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FSkinWeightProfileManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.PrecomputedSkyLightInstanceData
/// Size: 0x0170 (368 bytes) (0x0000B8 - 0x000170) align n/a MaxSize: 0x0170
struct FPrecomputedSkyLightInstanceData : FSceneComponentInstanceData
{ 
	FGuid                                              LightGuid;                                                  // 0x00B8   (0x0010)  
	float                                              AverageBrightness;                                          // 0x00C8   (0x0004)  
	unsigned char                                      UnknownData01_7[0xA4];                                      // 0x00CC   (0x00A4)  MISSED
};

/// Struct /Script/Engine.SmartNameMapping
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FSmartNameMapping
{ 
	unsigned char                                      UnknownData01_2[0x70];                                      // 0x0000   (0x0070)  MISSED
};

/// Struct /Script/Engine.CurveMetaData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FCurveMetaData
{ 
	unsigned char                                      UnknownData01_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/Engine.SoundClassEditorData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSoundClassEditorData
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.SoundNodeEditorData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSoundNodeEditorData
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/Engine.SoundSubmixSpectralAnalysisBandSettings
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSoundSubmixSpectralAnalysisBandSettings
{ 
	float                                              BandFrequency;                                              // 0x0000   (0x0004)  
	int32_t                                            AttackTimeMsec;                                             // 0x0004   (0x0004)  
	int32_t                                            ReleaseTimeMsec;                                            // 0x0008   (0x0004)  
	float                                              QFactor;                                                    // 0x000C   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveEnvelopeDataPerSound
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FSoundWaveEnvelopeDataPerSound
{ 
	float                                              Envelope;                                                   // 0x0000   (0x0004)  
	float                                              PlaybackTime;                                               // 0x0004   (0x0004)  
	class USoundWave*                                  SoundWave;                                                  // 0x0008   (0x0008)  
};

/// Struct /Script/Engine.SoundWaveSpectralData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSoundWaveSpectralData
{ 
	float                                              FrequencyHz;                                                // 0x0000   (0x0004)  
	float                                              Magnitude;                                                  // 0x0004   (0x0004)  
	float                                              NormalizedMagnitude;                                        // 0x0008   (0x0004)  
};

/// Struct /Script/Engine.SoundWaveSpectralDataPerSound
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FSoundWaveSpectralDataPerSound
{ 
	TArray<FSoundWaveSpectralData>                     SpectralData;                                               // 0x0000   (0x0010)  
	float                                              PlaybackTime;                                               // 0x0010   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0014   (0x0004)  MISSED
	class USoundWave*                                  SoundWave;                                                  // 0x0018   (0x0008)  
};

/// Struct /Script/Engine.StreamedAudioPlatformData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FStreamedAudioPlatformData
{ 
	unsigned char                                      UnknownData01_2[0x20];                                      // 0x0000   (0x0020)  MISSED
};

/// Struct /Script/Engine.SplineInstanceData
/// Size: 0x01A0 (416 bytes) (0x0000B8 - 0x0001A0) align n/a MaxSize: 0x01A0
struct FSplineInstanceData : FSceneComponentInstanceData
{ 
	bool                                               bSplineHasBeenEdited;                                       // 0x00B8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00B9   (0x0007)  MISSED
	FSplineCurves                                      SplineCurves;                                               // 0x00C0   (0x0070)  
	FSplineCurves                                      SplineCurvesPreUCS;                                         // 0x0130   (0x0070)  
};

/// Struct /Script/Engine.SplinePoint
/// Size: 0x0044 (68 bytes) (0x000000 - 0x000044) align n/a MaxSize: 0x0044
struct FSplinePoint
{ 
	float                                              InputKey;                                                   // 0x0000   (0x0004)  
	FVector                                            position;                                                   // 0x0004   (0x000C)  
	FVector                                            ArriveTangent;                                              // 0x0010   (0x000C)  
	FVector                                            LeaveTangent;                                               // 0x001C   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0028   (0x000C)  
	FVector                                            Scale;                                                      // 0x0034   (0x000C)  
	TEnumAsByte<ESplinePointType>                      Type;                                                       // 0x0040   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0041   (0x0003)  MISSED
};

/// Struct /Script/Engine.SplineMeshInstanceData
/// Size: 0x00E8 (232 bytes) (0x0000B8 - 0x0000E8) align n/a MaxSize: 0x00E8
struct FSplineMeshInstanceData : FSceneComponentInstanceData
{ 
	FVector                                            StartPos;                                                   // 0x00B8   (0x000C)  
	FVector                                            EndPos;                                                     // 0x00C4   (0x000C)  
	FVector                                            StartTangent;                                               // 0x00D0   (0x000C)  
	FVector                                            EndTangent;                                                 // 0x00DC   (0x000C)  
};

/// Struct /Script/Engine.MaterialRemapIndex
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMaterialRemapIndex
{ 
	uint32_t                                           ImportVersionKey;                                           // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<int32_t>                                    MaterialRemap;                                              // 0x0008   (0x0010)  
};

/// Struct /Script/Engine.AssetEditorOrbitCameraPosition
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FAssetEditorOrbitCameraPosition
{ 
	bool                                               bIsSet;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FVector                                            CamOrbitPoint;                                              // 0x0004   (0x000C)  
	FVector                                            CamOrbitZoom;                                               // 0x0010   (0x000C)  
	FRotator                                           CamOrbitRotation;                                           // 0x001C   (0x000C)  
};

/// Struct /Script/Engine.MeshSectionInfo
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FMeshSectionInfo
{ 
	int32_t                                            MaterialIndex;                                              // 0x0000   (0x0004)  
	bool                                               bEnableCollision;                                           // 0x0004   (0x0001)  
	bool                                               bCastShadow;                                                // 0x0005   (0x0001)  
	bool                                               bVisibleInRayTracing;                                       // 0x0006   (0x0001)  
	bool                                               bForceOpaque;                                               // 0x0007   (0x0001)  
};

/// Struct /Script/Engine.MeshSectionInfoMap
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FMeshSectionInfoMap
{ 
	TMap<uint32_t, FMeshSectionInfo>                   Map;                                                        // 0x0000   (0x0050)  
};

/// Struct /Script/Engine.StaticMeshSourceModel
/// Size: 0x0070 (112 bytes) (0x000000 - 0x000070) align n/a MaxSize: 0x0070
struct FStaticMeshSourceModel
{ 
	FMeshBuildSettings                                 BuildSettings;                                              // 0x0000   (0x0030)  
	FMeshReductionSettings                             ReductionSettings;                                          // 0x0030   (0x0024)  
	float                                              LODDistance;                                                // 0x0054   (0x0004)  
	FPerPlatformFloat                                  ScreenSize;                                                 // 0x0058   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x005C   (0x0004)  MISSED
	FString                                            SourceImportFilename;                                       // 0x0060   (0x0010)  
};

/// Struct /Script/Engine.StaticMeshOptimizationSettings
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FStaticMeshOptimizationSettings
{ 
	TEnumAsByte<EOptimizationType>                     ReductionMethod;                                            // 0x0000   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              NumOfTrianglesPercentage;                                   // 0x0004   (0x0004)  
	float                                              MaxDeviationPercentage;                                     // 0x0008   (0x0004)  
	float                                              WeldingThreshold;                                           // 0x000C   (0x0004)  
	bool                                               bRecalcNormals;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	float                                              NormalsThreshold;                                           // 0x0014   (0x0004)  
	char                                               SilhouetteImportance;                                       // 0x0018   (0x0001)  
	char                                               TextureImportance;                                          // 0x0019   (0x0001)  
	char                                               ShadingImportance;                                          // 0x001A   (0x0001)  
	unsigned char                                      UnknownData05_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/Engine.PaintedVertex
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FPaintedVertex
{ 
	FVector                                            position;                                                   // 0x0000   (0x000C)  
	FColor                                             Color;                                                      // 0x000C   (0x0004)  
	FVector4                                           Normal;                                                     // 0x0010   (0x0010)  
};

/// Struct /Script/Engine.StaticMeshVertexColorLODData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FStaticMeshVertexColorLODData
{ 
	TArray<FPaintedVertex>                             PaintedVertices;                                            // 0x0000   (0x0010)  
	TArray<FColor>                                     VertexBufferColors;                                         // 0x0010   (0x0010)  
	uint32_t                                           LODIndex;                                                   // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Struct /Script/Engine.StaticMeshComponentInstanceData
/// Size: 0x0140 (320 bytes) (0x000100 - 0x000140) align n/a MaxSize: 0x0140
struct FStaticMeshComponentInstanceData : FPrimitiveComponentInstanceData
{ 
	class UStaticMesh*                                 StaticMesh;                                                 // 0x0100   (0x0008)  
	TArray<FStaticMeshVertexColorLODData>              VertexColorLODs;                                            // 0x0108   (0x0010)  
	TArray<FGuid>                                      CachedStaticLighting;                                       // 0x0118   (0x0010)  
	TArray<FStreamingTextureBuildInfo>                 StreamingTextureData;                                       // 0x0128   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0138   (0x0008)  MISSED
};

/// Struct /Script/Engine.TextureFormatSettings
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FTextureFormatSettings
{ 
	TEnumAsByte<TextureCompressionSettings>            CompressionSettings;                                        // 0x0000   (0x0001)  
	bool                                               CompressionNoAlpha : 1;                                     // 0x0001:0 (0x0001)  
	bool                                               CompressionNone : 1;                                        // 0x0001:1 (0x0001)  
	bool                                               CompressionYCoCg : 1;                                       // 0x0001:2 (0x0001)  
	bool                                               SRGB : 1;                                                   // 0x0001:3 (0x0001)  
};

/// Struct /Script/Engine.TexturePlatformData
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FTexturePlatformData
{ 
	unsigned char                                      UnknownData01_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/Engine.TextureSource
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FTextureSource
{ 
	unsigned char                                      UnknownData01_2[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/Engine.TextureSourceBlock
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FTextureSourceBlock
{ 
	int32_t                                            BlockX;                                                     // 0x0000   (0x0004)  
	int32_t                                            BlockY;                                                     // 0x0004   (0x0004)  
	int32_t                                            SizeX;                                                      // 0x0008   (0x0004)  
	int32_t                                            SizeY;                                                      // 0x000C   (0x0004)  
	int32_t                                            NumSlices;                                                  // 0x0010   (0x0004)  
	int32_t                                            NumMips;                                                    // 0x0014   (0x0004)  
};

/// Struct /Script/Engine.StreamingRenderAssetPrimitiveInfo
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FStreamingRenderAssetPrimitiveInfo
{ 
	class UStreamableRenderAsset*                      RenderAsset;                                                // 0x0000   (0x0008)  
	FBoxSphereBounds                                   Bounds;                                                     // 0x0008   (0x001C)  
	float                                              TexelFactor;                                                // 0x0024   (0x0004)  
	uint32_t                                           PackedRelativeBox;                                          // 0x0028   (0x0004)  
	bool                                               bAllowInvalidTexelFactorWhenUnregistered : 1;               // 0x002C:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x002D   (0x0003)  MISSED
};

/// Struct /Script/Engine.TTTrackId
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FTTTrackId
{ 
	int32_t                                            TrackType;                                                  // 0x0000   (0x0004)  
	int32_t                                            TrackIndex;                                                 // 0x0004   (0x0004)  
};

/// Struct /Script/Engine.TimeStretchCurveInstance
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FTimeStretchCurveInstance
{ 
	bool                                               bHasValidData;                                              // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_7[0x2F];                                      // 0x0001   (0x002F)  MISSED
};

/// Struct /Script/Engine.UpdateLevelVisibilityLevelInfo
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FUpdateLevelVisibilityLevelInfo
{ 
	FName                                              PackageName;                                                // 0x0000   (0x0008)  
	FName                                              Filename;                                                   // 0x0008   (0x0008)  
	bool                                               bIsVisible : 1;                                             // 0x0010:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/Engine.EndPhysicsTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FEndPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.StartPhysicsTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FStartPhysicsTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.LevelViewportInfo
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FLevelViewportInfo
{ 
	FVector                                            CamPosition;                                                // 0x0000   (0x000C)  
	FRotator                                           CamRotation;                                                // 0x000C   (0x000C)  
	float                                              CamOrthoZoom;                                               // 0x0018   (0x0004)  
	bool                                               CamUpdated;                                                 // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x001D   (0x0003)  MISSED
};

/// Struct /Script/Engine.WorldSectorManagerTickFunction
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FWorldSectorManagerTickFunction : FTickFunction
{ 
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0028   (0x0008)  MISSED
};

/// Struct /Script/Engine.LightmassWorldInfoSettings
/// Size: 0x004C (76 bytes) (0x000000 - 0x00004C) align n/a MaxSize: 0x004C
struct FLightmassWorldInfoSettings
{ 
	float                                              StaticLightingLevelScale;                                   // 0x0000   (0x0004)  
	int32_t                                            NumIndirectLightingBounces;                                 // 0x0004   (0x0004)  
	int32_t                                            NumSkyLightingBounces;                                      // 0x0008   (0x0004)  
	float                                              IndirectLightingQuality;                                    // 0x000C   (0x0004)  
	float                                              IndirectLightingSmoothness;                                 // 0x0010   (0x0004)  
	FColor                                             EnvironmentColor;                                           // 0x0014   (0x0004)  
	float                                              EnvironmentIntensity;                                       // 0x0018   (0x0004)  
	float                                              EmissiveBoost;                                              // 0x001C   (0x0004)  
	float                                              DiffuseBoost;                                               // 0x0020   (0x0004)  
	TEnumAsByte<EVolumeLightingMethod>                 VolumeLightingMethod;                                       // 0x0024   (0x0001)  
	bool                                               bUseAmbientOcclusion : 1;                                   // 0x0025:0 (0x0001)  
	bool                                               bGenerateAmbientOcclusionMaterialMask : 1;                  // 0x0025:1 (0x0001)  
	bool                                               bVisualizeMaterialDiffuse : 1;                              // 0x0025:2 (0x0001)  
	bool                                               bVisualizeAmbientOcclusion : 1;                             // 0x0025:3 (0x0001)  
	bool                                               bCompressLightmaps : 1;                                     // 0x0025:4 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x0026   (0x0002)  MISSED
	float                                              VolumetricLightmapDetailCellSize;                           // 0x0028   (0x0004)  
	float                                              VolumetricLightmapMaximumBrickMemoryMb;                     // 0x002C   (0x0004)  
	float                                              VolumetricLightmapSphericalHarmonicSmoothing;               // 0x0030   (0x0004)  
	float                                              VolumeLightSamplePlacementScale;                            // 0x0034   (0x0004)  
	float                                              DirectIlluminationOcclusionFraction;                        // 0x0038   (0x0004)  
	float                                              IndirectIlluminationOcclusionFraction;                      // 0x003C   (0x0004)  
	float                                              OcclusionExponent;                                          // 0x0040   (0x0004)  
	float                                              FullyOccludedSamplesFraction;                               // 0x0044   (0x0004)  
	float                                              MaxOcclusionDistance;                                       // 0x0048   (0x0004)  
};

/// Class /Script/UMG.Visual
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UVisual : public UObject
{ 
public:
};

/// Struct /Script/UMG.WidgetTransform
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FWidgetTransform
{ 
	FVector2D                                          Translation;                                                // 0x0000   (0x0008)  
	FVector2D                                          Scale;                                                      // 0x0008   (0x0008)  
	FVector2D                                          Shear;                                                      // 0x0010   (0x0008)  
	float                                              angle;                                                      // 0x0018   (0x0004)  
};

/// Class /Script/UMG.Widget
/// Size: 0x0108 (264 bytes) (0x000028 - 0x000108) align n/a MaxSize: 0x0108
class UWidget : public UVisual
{ 
public:
	class UPanelSlot*                                  Slot;                                                       // 0x0028   (0x0008)  
	FDelegateProperty                                  bIsEnabledDelegate;                                         // 0x0030   (0x0010)  
	FText                                              ToolTipText;                                                // 0x0040   (0x0018)  
	FDelegateProperty                                  ToolTipTextDelegate;                                        // 0x0058   (0x0010)  
	class UWidget*                                     ToolTipWidget;                                              // 0x0068   (0x0008)  
	FDelegateProperty                                  ToolTipWidgetDelegate;                                      // 0x0070   (0x0010)  
	FDelegateProperty                                  VisibilityDelegate;                                         // 0x0080   (0x0010)  
	FWidgetTransform                                   RenderTransform;                                            // 0x0090   (0x001C)  
	FVector2D                                          RenderTransformPivot;                                       // 0x00AC   (0x0008)  
	bool                                               bIsVariable : 1;                                            // 0x00B4:0 (0x0001)  
	bool                                               bCreatedByConstructionScript : 1;                           // 0x00B4:1 (0x0001)  
	bool                                               bIsEnabled : 1;                                             // 0x00B4:2 (0x0001)  
	bool                                               bOverride_Cursor : 1;                                       // 0x00B4:3 (0x0001)  
	unsigned char                                      UnknownData02_5[0x3];                                       // 0x00B5   (0x0003)  MISSED
	class USlateAccessibleWidgetData*                  AccessibleWidgetData;                                       // 0x00B8   (0x0008)  
	bool                                               bIsVolatile : 1;                                            // 0x00C0:0 (0x0001)  
	bool                                               bIgnorePrepassHidden : 1;                                   // 0x00C0:1 (0x0001)  
	TEnumAsByte<EMouseCursor>                          Cursor;                                                     // 0x00C1   (0x0001)  
	EWidgetClipping                                    Clipping;                                                   // 0x00C2   (0x0001)  
	ESlateVisibility                                   Visibility;                                                 // 0x00C3   (0x0001)  
	float                                              RenderOpacity;                                              // 0x00C4   (0x0004)  
	class UWidgetNavigation*                           Navigation;                                                 // 0x00C8   (0x0008)  
	EFlowDirectionPreference                           FlowDirectionPreference;                                    // 0x00D0   (0x0001)  
	unsigned char                                      UnknownData03_6[0x27];                                      // 0x00D1   (0x0027)  MISSED
	TArray<class UPropertyBinding*>                    NativeBindings;                                             // 0x00F8   (0x0010)  

	/// Functions
	// Function /Script/UMG.Widget.SetVisibility
	constexpr static const FunctionPointer<UWidget, void, const ESlateVisibility> SetVisibility = { 0x3daefa0, 0 }; 
	// Function /Script/UMG.Widget.SetUserFocus
	constexpr static const FunctionPointer<UWidget, void, const APlayerController*> SetUserFocus = { 0x3dadee0, 1 }; 
	// Function /Script/UMG.Widget.SetToolTipText
	constexpr static const FunctionPointer<UWidget, void, const FText&> SetToolTipText = { 0x3daf450, 2 }; 
	// Function /Script/UMG.Widget.SetToolTip
	constexpr static const FunctionPointer<UWidget, void, const UWidget*> SetToolTip = { 0x3daf370, 3 }; 
	// Function /Script/UMG.Widget.SetRenderTranslation
	constexpr static const FunctionPointer<UWidget, void, const FVector2D> SetRenderTranslation = { 0x3daf7d0, 4 }; 
	// Function /Script/UMG.Widget.SetRenderTransformPivot
	constexpr static const FunctionPointer<UWidget, void, const FVector2D> SetRenderTransformPivot = { 0x3daf700, 5 }; 
	// Function /Script/UMG.Widget.SetRenderTransformAngle
	constexpr static const FunctionPointer<UWidget, void, const float> SetRenderTransformAngle = { 0x3daf8b0, 6 }; 
	// Function /Script/UMG.Widget.SetRenderTransform
	constexpr static const FunctionPointer<UWidget, void, const FWidgetTransform> SetRenderTransform = { 0x3dafb50, 7 }; 
	// Function /Script/UMG.Widget.SetRenderShear
	constexpr static const FunctionPointer<UWidget, void, const FVector2D> SetRenderShear = { 0x3daf990, 8 }; 
	// Function /Script/UMG.Widget.SetRenderScale
	constexpr static const FunctionPointer<UWidget, void, const FVector2D> SetRenderScale = { 0x3dafa70, 9 }; 
	// Function /Script/UMG.Widget.SetRenderOpacity
	constexpr static const FunctionPointer<UWidget, void, const float> SetRenderOpacity = { 0x3daeea0, 10 }; 
	// Function /Script/UMG.Widget.SetNavigationRuleExplicit
	constexpr static const FunctionPointer<UWidget, void, const EUINavigation, const UWidget*> SetNavigationRuleExplicit = { 0x3dad510, 11 }; 
	// Function /Script/UMG.Widget.SetNavigationRuleCustomBoundary
	constexpr static const FunctionPointer<UWidget, void, const EUINavigation, const FDelegateProperty> SetNavigationRuleCustomBoundary = { 0x3dad1b0, 12 }; 
	// Function /Script/UMG.Widget.SetNavigationRuleCustom
	constexpr static const FunctionPointer<UWidget, void, const EUINavigation, const FDelegateProperty> SetNavigationRuleCustom = { 0x3dad360, 13 }; 
	// Function /Script/UMG.Widget.SetNavigationRuleBase
	constexpr static const FunctionPointer<UWidget, void, const EUINavigation, const EUINavigationRule> SetNavigationRuleBase = { 0x3dad6d0, 14 }; 
	// Function /Script/UMG.Widget.SetNavigationRule
	constexpr static const FunctionPointer<UWidget, void, const EUINavigation, const EUINavigationRule, const FName> SetNavigationRule = { 0x3dad890, 15 }; 
	// Function /Script/UMG.Widget.SetKeyboardFocus
	constexpr static const FunctionPointer<UWidget, void> SetKeyboardFocus = { 0x3dae810, 16 }; 
	// Function /Script/UMG.Widget.SetIsEnabled
	constexpr static const FunctionPointer<UWidget, void, const bool> SetIsEnabled = { 0x3daf5f0, 17 }; 
	// Function /Script/UMG.Widget.SetFocus
	constexpr static const FunctionPointer<UWidget, void> SetFocus = { 0x3dae0b0, 18 }; 
	// Function /Script/UMG.Widget.SetCursor
	constexpr static const FunctionPointer<UWidget, void, const TEnumAsByte<EMouseCursor>> SetCursor = { 0x3daf1d0, 19 }; 
	// Function /Script/UMG.Widget.SetClipping
	constexpr static const FunctionPointer<UWidget, void, const EWidgetClipping> SetClipping = { 0x3daecc0, 20 }; 
	// Function /Script/UMG.Widget.SetAllNavigationRules
	constexpr static const FunctionPointer<UWidget, void, const EUINavigationRule, const FName> SetAllNavigationRules = { 0x3dadac0, 21 }; 
	// Function /Script/UMG.Widget.ResetCursor
	constexpr static const FunctionPointer<UWidget, void> ResetCursor = { 0x3daf0d0, 22 }; 
	// Function /Script/UMG.Widget.RemoveFromParent
	constexpr static const FunctionPointer<UWidget, void> RemoveFromParent = { 0x3da6ff0, 23 }; 
	// Function /Script/UMG.Widget.OnReply__DelegateSignature
	constexpr static const FunctionPointer<UWidget, FEventReply> OnReply__DelegateSignature = { 0x2bbb090, 24 }; 
	// Function /Script/UMG.Widget.OnPointerEvent__DelegateSignature
	constexpr static const FunctionPointer<UWidget, FEventReply, const FGeometry, const FPointerEvent&> OnPointerEvent__DelegateSignature = { 0x2bbb090, 25 }; 
	// Function /Script/UMG.Widget.IsVisible
	constexpr static const FunctionPointer<UWidget, bool> IsVisible = { 0x3daf0a0, 26 }; 
	// Function /Script/UMG.Widget.IsHovered
	constexpr static const FunctionPointer<UWidget, bool> IsHovered = { 0x38170a0, 27 }; 
	// Function /Script/UMG.Widget.InvalidateRoot
	constexpr static const FunctionPointer<UWidget, void> InvalidateRoot = { 0x3dade80, 28 }; 
	// Function /Script/UMG.Widget.InvalidateLayoutAndVolatility
	constexpr static const FunctionPointer<UWidget, void> InvalidateLayoutAndVolatility = { 0x3dadea0, 29 }; 
	// Function /Script/UMG.Widget.HasUserFocusedDescendants
	constexpr static const FunctionPointer<UWidget, bool, const APlayerController*> HasUserFocusedDescendants = { 0x3dae0f0, 30 }; 
	// Function /Script/UMG.Widget.HasUserFocus
	constexpr static const FunctionPointer<UWidget, bool, const APlayerController*> HasUserFocus = { 0x3dae560, 31 }; 
	// Function /Script/UMG.Widget.HasMouseCaptureByUser
	constexpr static const FunctionPointer<UWidget, bool, const int32_t, const int32_t> HasMouseCaptureByUser = { 0x3dae830, 32 }; 
	// Function /Script/UMG.Widget.HasMouseCapture
	constexpr static const FunctionPointer<UWidget, bool> HasMouseCapture = { 0x3daea50, 33 }; 
	// Function /Script/UMG.Widget.HasKeyboardFocus
	constexpr static const FunctionPointer<UWidget, bool> HasKeyboardFocus = { 0x3daeb40, 34 }; 
	// Function /Script/UMG.Widget.HasFocusedDescendants
	constexpr static const FunctionPointer<UWidget, bool> HasFocusedDescendants = { 0x3dae380, 35 }; 
	// Function /Script/UMG.Widget.HasAnyUserFocus
	constexpr static const FunctionPointer<UWidget, bool> HasAnyUserFocus = { 0x3dae470, 36 }; 
	// Function /Script/UMG.Widget.GetWidget__DelegateSignature
	constexpr static const FunctionPointer<UWidget, UWidget*> GetWidget__DelegateSignature = { 0x2bbb090, 37 }; 
	// Function /Script/UMG.Widget.GetVisibility
	constexpr static const FunctionPointer<UWidget, ESlateVisibility> GetVisibility = { 0x3daf070, 38 }; 
	// Function /Script/UMG.Widget.GetTickSpaceGeometry
	constexpr static const FunctionPointer<UWidget, FGeometry> GetTickSpaceGeometry = { 0x3dad130, 39 }; 
	// Function /Script/UMG.Widget.GetText__DelegateSignature
	constexpr static const FunctionPointer<UWidget, FText> GetText__DelegateSignature = { 0x2bbb090, 40 }; 
	// Function /Script/UMG.Widget.GetSlateVisibility__DelegateSignature
	constexpr static const FunctionPointer<UWidget, ESlateVisibility> GetSlateVisibility__DelegateSignature = { 0x2bbb090, 41 }; 
	// Function /Script/UMG.Widget.GetSlateColor__DelegateSignature
	constexpr static const FunctionPointer<UWidget, FSlateColor> GetSlateColor__DelegateSignature = { 0x2bbb090, 42 }; 
	// Function /Script/UMG.Widget.GetSlateBrush__DelegateSignature
	constexpr static const FunctionPointer<UWidget, FSlateBrush> GetSlateBrush__DelegateSignature = { 0x2bbb090, 43 }; 
	// Function /Script/UMG.Widget.GetRenderTransformAngle
	constexpr static const FunctionPointer<UWidget, float> GetRenderTransformAngle = { 0x19e8b20, 44 }; 
	// Function /Script/UMG.Widget.GetRenderOpacity
	constexpr static const FunctionPointer<UWidget, float> GetRenderOpacity = { 0x3daef70, 45 }; 
	// Function /Script/UMG.Widget.GetParent
	constexpr static const FunctionPointer<UWidget, UPanelWidget*> GetParent = { 0x3dad180, 46 }; 
	// Function /Script/UMG.Widget.GetPaintSpaceGeometry
	constexpr static const FunctionPointer<UWidget, FGeometry> GetPaintSpaceGeometry = { 0x3dad060, 47 }; 
	// Function /Script/UMG.Widget.GetOwningPlayer
	constexpr static const FunctionPointer<UWidget, APlayerController*> GetOwningPlayer = { 0x3dacfe0, 48 }; 
	// Function /Script/UMG.Widget.GetOwningLocalPlayer
	constexpr static const FunctionPointer<UWidget, ULocalPlayer*> GetOwningLocalPlayer = { 0x3dacfb0, 49 }; 
	// Function /Script/UMG.Widget.GetMouseCursor__DelegateSignature
	constexpr static const FunctionPointer<UWidget, TEnumAsByte<EMouseCursor>> GetMouseCursor__DelegateSignature = { 0x2bbb090, 50 }; 
	// Function /Script/UMG.Widget.GetLinearColor__DelegateSignature
	constexpr static const FunctionPointer<UWidget, FLinearColor> GetLinearColor__DelegateSignature = { 0x2bbb090, 51 }; 
	// Function /Script/UMG.Widget.GetIsEnabled
	constexpr static const FunctionPointer<UWidget, bool> GetIsEnabled = { 0x3daf6d0, 52 }; 
	// Function /Script/UMG.Widget.GetInt32__DelegateSignature
	constexpr static const FunctionPointer<UWidget, int32_t> GetInt32__DelegateSignature = { 0x2bbb090, 53 }; 
	// Function /Script/UMG.Widget.GetGameInstance
	constexpr static const FunctionPointer<UWidget, UGameInstance*> GetGameInstance = { 0x3dad010, 54 }; 
	// Function /Script/UMG.Widget.GetFloat__DelegateSignature
	constexpr static const FunctionPointer<UWidget, float> GetFloat__DelegateSignature = { 0x2bbb090, 55 }; 
	// Function /Script/UMG.Widget.GetDesiredSize
	constexpr static const FunctionPointer<UWidget, FVector2D> GetDesiredSize = { 0x3dadd70, 56 }; 
	// Function /Script/UMG.Widget.GetClipping
	constexpr static const FunctionPointer<UWidget, EWidgetClipping> GetClipping = { 0x3daee00, 57 }; 
	// Function /Script/UMG.Widget.GetCheckBoxState__DelegateSignature
	constexpr static const FunctionPointer<UWidget, ECheckBoxState> GetCheckBoxState__DelegateSignature = { 0x2bbb090, 58 }; 
	// Function /Script/UMG.Widget.GetCachedGeometry
	constexpr static const FunctionPointer<UWidget, FGeometry> GetCachedGeometry = { 0x3dad130, 59 }; 
	// Function /Script/UMG.Widget.GetBool__DelegateSignature
	constexpr static const FunctionPointer<UWidget, bool> GetBool__DelegateSignature = { 0x2bbb090, 60 }; 
	// Function /Script/UMG.Widget.GetAccessibleText
	constexpr static const FunctionPointer<UWidget, FText> GetAccessibleText = { 0x3dace90, 61 }; 
	// Function /Script/UMG.Widget.GetAccessibleSummaryText
	constexpr static const FunctionPointer<UWidget, FText> GetAccessibleSummaryText = { 0x3dacd70, 62 }; 
	// Function /Script/UMG.Widget.GenerateWidgetForString__DelegateSignature
	constexpr static const FunctionPointer<UWidget, UWidget*, const FString> GenerateWidgetForString__DelegateSignature = { 0x2bbb090, 63 }; 
	// Function /Script/UMG.Widget.GenerateWidgetForObject__DelegateSignature
	constexpr static const FunctionPointer<UWidget, UWidget*, const UObject*> GenerateWidgetForObject__DelegateSignature = { 0x2bbb090, 64 }; 
	// Function /Script/UMG.Widget.ForceVolatile
	constexpr static const FunctionPointer<UWidget, void, const bool> ForceVolatile = { 0x3daeb70, 65 }; 
	// Function /Script/UMG.Widget.ForceLayoutPrepass
	constexpr static const FunctionPointer<UWidget, void> ForceLayoutPrepass = { 0x3dadec0, 66 }; 
};

/// Class /Script/UMG.PanelWidget
/// Size: 0x0120 (288 bytes) (0x000108 - 0x000120) align n/a MaxSize: 0x0120
class UPanelWidget : public UWidget
{ 
public:
	TArray<class UPanelSlot*>                          Slots;                                                      // 0x0108   (0x0010)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0118   (0x0008)  MISSED

	/// Functions
	// Function /Script/UMG.PanelWidget.RemoveChildAt
	constexpr static const FunctionPointer<UPanelWidget, bool, const int32_t> RemoveChildAt = { 0x3d8d0e0, 0 }; 
	// Function /Script/UMG.PanelWidget.RemoveChild
	constexpr static const FunctionPointer<UPanelWidget, bool, const UWidget*> RemoveChild = { 0x3d8cd90, 1 }; 
	// Function /Script/UMG.PanelWidget.HasChild
	constexpr static const FunctionPointer<UPanelWidget, bool, const UWidget*> HasChild = { 0x3d8d1d0, 2 }; 
	// Function /Script/UMG.PanelWidget.HasAnyChildren
	constexpr static const FunctionPointer<UPanelWidget, bool> HasAnyChildren = { 0x3d8cd60, 3 }; 
	// Function /Script/UMG.PanelWidget.GetChildrenCount
	constexpr static const FunctionPointer<UPanelWidget, int32_t> GetChildrenCount = { 0x3d8d620, 4 }; 
	// Function /Script/UMG.PanelWidget.GetChildIndex
	constexpr static const FunctionPointer<UPanelWidget, int32_t, const UWidget*> GetChildIndex = { 0x3d8d2d0, 5 }; 
	// Function /Script/UMG.PanelWidget.GetChildAt
	constexpr static const FunctionPointer<UPanelWidget, UWidget*, const int32_t> GetChildAt = { 0x3d8d500, 6 }; 
	// Function /Script/UMG.PanelWidget.GetAllChildren
	constexpr static const FunctionPointer<UPanelWidget, TArray<UWidget*>> GetAllChildren = { 0x3d8d410, 7 }; 
	// Function /Script/UMG.PanelWidget.ClearChildren
	constexpr static const FunctionPointer<UPanelWidget, void> ClearChildren = { 0x3d8cd40, 8 }; 
	// Function /Script/UMG.PanelWidget.AddChild
	constexpr static const FunctionPointer<UPanelWidget, UPanelSlot*, const UWidget*> AddChild = { 0x3d8ced0, 9 }; 
};

/// Class /Script/UMG.ContentWidget
/// Size: 0x0120 (288 bytes) (0x000120 - 0x000120) align n/a MaxSize: 0x0120
class UContentWidget : public UPanelWidget
{ 
public:

	/// Functions
	// Function /Script/UMG.ContentWidget.SetContent
	constexpr static const FunctionPointer<UContentWidget, UPanelSlot*, const UWidget*> SetContent = { 0x3d78880, 0 }; 
	// Function /Script/UMG.ContentWidget.GetContentSlot
	constexpr static const FunctionPointer<UContentWidget, UPanelSlot*> GetContentSlot = { 0x3d78a90, 1 }; 
	// Function /Script/UMG.ContentWidget.GetContent
	constexpr static const FunctionPointer<UContentWidget, UWidget*> GetContent = { 0x3d78840, 2 }; 
};

/// Class /Script/UMG.PanelSlot
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UPanelSlot : public UVisual
{ 
public:
	class UPanelWidget*                                Parent;                                                     // 0x0028   (0x0008)  
	class UWidget*                                     Content;                                                    // 0x0030   (0x0008)  
};

/// Struct /Script/UMG.NamedSlotBinding
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FNamedSlotBinding
{ 
	FName                                              Name;                                                       // 0x0000   (0x0008)  
	class UWidget*                                     Content;                                                    // 0x0008   (0x0008)  
};

/// Struct /Script/UMG.AnimationEventBinding
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FAnimationEventBinding
{ 
	class UWidgetAnimation*                            Animation;                                                  // 0x0000   (0x0008)  
	FDelegateProperty                                  Delegate;                                                   // 0x0008   (0x0010)  
	EWidgetAnimationEvent                              AnimationEvent;                                             // 0x0018   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	FName                                              UserTag;                                                    // 0x001C   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0024   (0x0004)  MISSED
};

/// Class /Script/UMG.UserWidget
/// Size: 0x0280 (640 bytes) (0x000108 - 0x000280) align n/a MaxSize: 0x0280
class UUserWidget : public UWidget
{ 
public:
	unsigned char                                      UnknownData06_8[0x8];                                       // 0x0108   (0x0008)  MISSED
	bool                                               bUseUpdateViewportChanged : 1;                              // 0x0110:0 (0x0001)  
	bool                                               bUseGlobalViewportAspectRatio : 1;                          // 0x0110:1 (0x0001)  
	bool                                               bUseManualViewportAspectRatio : 1;                          // 0x0110:2 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0111   (0x0003)  MISSED
	float                                              ViewportMaxAspectRatio;                                     // 0x0114   (0x0004)  
	float                                              ViewportMinAspectRatio;                                     // 0x0118   (0x0004)  
	float                                              ViewportManualAspectRatio;                                  // 0x011C   (0x0004)  
	FVector2D                                          ViewportStandardSize;                                       // 0x0120   (0x0008)  
	float                                              GlobalViewportMaxAspectRatio;                               // 0x0128   (0x0004)  
	float                                              GlobalViewportMinAspectRatio;                               // 0x012C   (0x0004)  
	FLinearColor                                       ColorAndOpacity;                                            // 0x0130   (0x0010)  
	FDelegateProperty                                  ColorAndOpacityDelegate;                                    // 0x0140   (0x0010)  
	FSlateColor                                        ForegroundColor;                                            // 0x0150   (0x0028)  
	FDelegateProperty                                  ForegroundColorDelegate;                                    // 0x0178   (0x0010)  
	FMulticastInlineDelegate                           OnVisibilityChanged;                                        // 0x0188   (0x0010)  
	unsigned char                                      UnknownData08_6[0x18];                                      // 0x0198   (0x0018)  MISSED
	FMargin                                            Padding;                                                    // 0x01B0   (0x0010)  
	TArray<class UUMGSequencePlayer*>                  ActiveSequencePlayers;                                      // 0x01C0   (0x0010)  
	class UUMGSequenceTickManager*                     AnimationTickManager;                                       // 0x01D0   (0x0008)  
	TArray<class UUMGSequencePlayer*>                  StoppedSequencePlayers;                                     // 0x01D8   (0x0010)  
	TArray<FNamedSlotBinding>                          NamedSlotBindings;                                          // 0x01E8   (0x0010)  
	class UWidgetTree*                                 WidgetTree;                                                 // 0x01F8   (0x0008)  
	int32_t                                            Priority;                                                   // 0x0200   (0x0004)  
	bool                                               bSupportsKeyboardFocus : 1;                                 // 0x0204:0 (0x0001)  
	bool                                               bIsFocusable : 1;                                           // 0x0204:1 (0x0001)  
	bool                                               bStopAction : 1;                                            // 0x0204:2 (0x0001)  
	bool                                               bHasScriptImplementedTick : 1;                              // 0x0204:3 (0x0001)  
	bool                                               bHasScriptImplementedPaint : 1;                             // 0x0204:4 (0x0001)  
	bool                                               bUseEventResourceAssetChanged : 1;                          // 0x0204:5 (0x0001)  
	bool                                               bCheckEventResourceAssetChanged : 1;                        // 0x0204:6 (0x0001)  
	bool                                               bBindEventResourceAssetChanged : 1;                         // 0x0204:7 (0x0001)  
	bool                                               bCheckEventKeymappingChanged : 1;                           // 0x0205:0 (0x0001)  
	bool                                               bBindEventKeymappingChanged : 1;                            // 0x0205:1 (0x0001)  
	bool                                               bCheckEventUMPCModeChanged : 1;                             // 0x0205:2 (0x0001)  
	bool                                               bBindEventUMPCModeChanged : 1;                              // 0x0205:3 (0x0001)  
	unsigned char                                      UnknownData09_5[0xA];                                       // 0x0206   (0x000A)  MISSED
	EWidgetTickFrequency                               TickFrequency;                                              // 0x0210   (0x0001)  
	unsigned char                                      UnknownData10_6[0x7];                                       // 0x0211   (0x0007)  MISSED
	class UInputComponent*                             InputComponent;                                             // 0x0218   (0x0008)  
	TArray<FAnimationEventBinding>                     AnimationCallbacks;                                         // 0x0220   (0x0010)  
	unsigned char                                      UnknownData11_7[0x50];                                      // 0x0230   (0x0050)  MISSED

	/// Functions
	// Function /Script/UMG.UserWidget.UpdateViewportChange
	constexpr static const FunctionPointer<UUserWidget, void> UpdateViewportChange = { 0x3da6760, 0 }; 
	// Function /Script/UMG.UserWidget.UnregisterInputComponent
	constexpr static const FunctionPointer<UUserWidget, void> UnregisterInputComponent = { 0x3da3360, 1 }; 
	// Function /Script/UMG.UserWidget.UnbindFromAnimationStarted
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*, const FDelegateProperty> UnbindFromAnimationStarted = { 0x3da63c0, 2 }; 
	// Function /Script/UMG.UserWidget.UnbindFromAnimationFinished
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*, const FDelegateProperty> UnbindFromAnimationFinished = { 0x3da5f60, 3 }; 
	// Function /Script/UMG.UserWidget.UnbindAllFromAnimationStarted
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*> UnbindAllFromAnimationStarted = { 0x3da62e0, 4 }; 
	// Function /Script/UMG.UserWidget.UnbindAllFromAnimationFinished
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*> UnbindAllFromAnimationFinished = { 0x3da5e80, 5 }; 
	// Function /Script/UMG.UserWidget.Tick
	constexpr static const FunctionPointer<UUserWidget, void, const FGeometry, const float> Tick = { 0x2bbb090, 6 }; 
	// Function /Script/UMG.UserWidget.StopListeningForInputAction
	constexpr static const FunctionPointer<UUserWidget, void, const FName, const TEnumAsByte<EInputEvent>> StopListeningForInputAction = { 0x3da3440, 7 }; 
	// Function /Script/UMG.UserWidget.StopListeningForAllInputActions
	constexpr static const FunctionPointer<UUserWidget, void> StopListeningForAllInputActions = { 0x3da3420, 8 }; 
	// Function /Script/UMG.UserWidget.StopAnimationsAndLatentActions
	constexpr static const FunctionPointer<UUserWidget, void> StopAnimationsAndLatentActions = { 0x3da68d0, 9 }; 
	// Function /Script/UMG.UserWidget.StopAnimation
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*> StopAnimation = { 0x3da4650, 10 }; 
	// Function /Script/UMG.UserWidget.StopAllAnimations
	constexpr static const FunctionPointer<UUserWidget, void> StopAllAnimations = { 0x3da4630, 11 }; 
	// Function /Script/UMG.UserWidget.SetPositionInViewport
	constexpr static const FunctionPointer<UUserWidget, void, const FVector2D, const bool> SetPositionInViewport = { 0x3da6e80, 12 }; 
	// Function /Script/UMG.UserWidget.SetPlaybackSpeed
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*, const float> SetPlaybackSpeed = { 0x3da3c90, 13 }; 
	// Function /Script/UMG.UserWidget.SetPadding
	constexpr static const FunctionPointer<UUserWidget, void, const FMargin> SetPadding = { 0x3da56e0, 14 }; 
	// Function /Script/UMG.UserWidget.SetOwningPlayer
	constexpr static const FunctionPointer<UUserWidget, void, const APlayerController*> SetOwningPlayer = { 0x3da69c0, 15 }; 
	// Function /Script/UMG.UserWidget.SetNumLoopsToPlay
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*, const int32_t> SetNumLoopsToPlay = { 0x3da3e40, 16 }; 
	// Function /Script/UMG.UserWidget.SetInputActionPriority
	constexpr static const FunctionPointer<UUserWidget, void, const int32_t> SetInputActionPriority = { 0x3da3160, 17 }; 
	// Function /Script/UMG.UserWidget.SetInputActionBlocking
	constexpr static const FunctionPointer<UUserWidget, void, const bool> SetInputActionBlocking = { 0x3da3050, 18 }; 
	// Function /Script/UMG.UserWidget.SetForegroundColor
	constexpr static const FunctionPointer<UUserWidget, void, const FSlateColor> SetForegroundColor = { 0x3da57c0, 19 }; 
	// Function /Script/UMG.UserWidget.SetDesiredSizeInViewport
	constexpr static const FunctionPointer<UUserWidget, void, const FVector2D> SetDesiredSizeInViewport = { 0x3da6db0, 20 }; 
	// Function /Script/UMG.UserWidget.SetColorAndOpacity
	constexpr static const FunctionPointer<UUserWidget, void, const FLinearColor> SetColorAndOpacity = { 0x3da5910, 21 }; 
	// Function /Script/UMG.UserWidget.SetAnimationCurrentTime
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*, const float> SetAnimationCurrentTime = { 0x3da4130, 22 }; 
	// Function /Script/UMG.UserWidget.SetAnchorsInViewport
	constexpr static const FunctionPointer<UUserWidget, void, const FAnchors> SetAnchorsInViewport = { 0x3da6ca0, 23 }; 
	// Function /Script/UMG.UserWidget.SetAlignmentInViewport
	constexpr static const FunctionPointer<UUserWidget, void, const FVector2D> SetAlignmentInViewport = { 0x3da6ba0, 24 }; 
	// Function /Script/UMG.UserWidget.ReverseAnimation
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*> ReverseAnimation = { 0x3da3b60, 25 }; 
	// Function /Script/UMG.UserWidget.RemoveFromViewport
	constexpr static const FunctionPointer<UUserWidget, void> RemoveFromViewport = { 0x3da6ff0, 26 }; 
	// Function /Script/UMG.UserWidget.RegisterInputComponent
	constexpr static const FunctionPointer<UUserWidget, void> RegisterInputComponent = { 0x3da33c0, 27 }; 
	// Function /Script/UMG.UserWidget.PreConstruct
	constexpr static const FunctionPointer<UUserWidget, void, const bool> PreConstruct = { 0x2bbb090, 28 }; 
	// Function /Script/UMG.UserWidget.PlaySound
	constexpr static const FunctionPointer<UUserWidget, void, const USoundBase*> PlaySound = { 0x3da38e0, 29 }; 
	// Function /Script/UMG.UserWidget.PlayAnimationTimeRange
	constexpr static const FunctionPointer<UUserWidget, UUMGSequencePlayer*, const UWidgetAnimation*, const float, const float, const int32_t, const TEnumAsByte<EUMGSequencePlayMode>, const float, const bool, const bool> PlayAnimationTimeRange = { 0x3da4e20, 30 }; 
	// Function /Script/UMG.UserWidget.PlayAnimationReverse
	constexpr static const FunctionPointer<UUserWidget, UUMGSequencePlayer*, const UWidgetAnimation*, const float, const bool, const bool> PlayAnimationReverse = { 0x3da47a0, 31 }; 
	// Function /Script/UMG.UserWidget.PlayAnimationForward
	constexpr static const FunctionPointer<UUserWidget, UUMGSequencePlayer*, const UWidgetAnimation*, const float, const bool, const bool> PlayAnimationForward = { 0x3da4ae0, 32 }; 
	// Function /Script/UMG.UserWidget.PlayAnimation
	constexpr static const FunctionPointer<UUserWidget, UUMGSequencePlayer*, const UWidgetAnimation*, const float, const int32_t, const TEnumAsByte<EUMGSequencePlayMode>, const float, const bool, const bool> PlayAnimation = { 0x3da52c0, 33 }; 
	// Function /Script/UMG.UserWidget.PauseAnimation
	constexpr static const FunctionPointer<UUserWidget, float, const UWidgetAnimation*> PauseAnimation = { 0x3da44e0, 34 }; 
	// Function /Script/UMG.UserWidget.OnUMPCModeChanged
	constexpr static const FunctionPointer<UUserWidget, void, const TEnumAsByte<ESlateBrushResourceType>> OnUMPCModeChanged = { 0x2bbb090, 35 }; 
	// Function /Script/UMG.UserWidget.OnTouchStarted
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnTouchStarted = { 0x2bbb090, 36 }; 
	// Function /Script/UMG.UserWidget.OnTouchMoved
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnTouchMoved = { 0x2bbb090, 37 }; 
	// Function /Script/UMG.UserWidget.OnTouchGesture
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnTouchGesture = { 0x2bbb090, 38 }; 
	// Function /Script/UMG.UserWidget.OnTouchForceChanged
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnTouchForceChanged = { 0x2bbb090, 39 }; 
	// Function /Script/UMG.UserWidget.OnTouchEnded
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnTouchEnded = { 0x2bbb090, 40 }; 
	// Function /Script/UMG.UserWidget.OnResourceAssetChanged
	constexpr static const FunctionPointer<UUserWidget, void, const TEnumAsByte<ESlateBrushResourceType>> OnResourceAssetChanged = { 0x2bbb090, 41 }; 
	// Function /Script/UMG.UserWidget.OnRemovedFromFocusPath
	constexpr static const FunctionPointer<UUserWidget, void, const FFocusEvent> OnRemovedFromFocusPath = { 0x2bbb090, 42 }; 
	// Function /Script/UMG.UserWidget.OnPreviewMouseButtonDown
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnPreviewMouseButtonDown = { 0x2bbb090, 43 }; 
	// Function /Script/UMG.UserWidget.OnPreviewKeyDown
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FKeyEvent> OnPreviewKeyDown = { 0x2bbb090, 44 }; 
	// Function /Script/UMG.UserWidget.OnPaint
	constexpr static const FunctionPointer<UUserWidget, void, const FPaintContext&> OnPaint = { 0x2bbb090, 45 }; 
	// Function /Script/UMG.UserWidget.OnMouseWheel
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnMouseWheel = { 0x2bbb090, 46 }; 
	// Function /Script/UMG.UserWidget.OnMouseMove
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnMouseMove = { 0x2bbb090, 47 }; 
	// Function /Script/UMG.UserWidget.OnMouseLeave
	constexpr static const FunctionPointer<UUserWidget, void, const FPointerEvent&> OnMouseLeave = { 0x2bbb090, 48 }; 
	// Function /Script/UMG.UserWidget.OnMouseEnter
	constexpr static const FunctionPointer<UUserWidget, void, const FGeometry, const FPointerEvent&> OnMouseEnter = { 0x2bbb090, 49 }; 
	// Function /Script/UMG.UserWidget.OnMouseCaptureLost
	constexpr static const FunctionPointer<UUserWidget, void> OnMouseCaptureLost = { 0x2bbb090, 50 }; 
	// Function /Script/UMG.UserWidget.OnMouseButtonUp
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnMouseButtonUp = { 0x2bbb090, 51 }; 
	// Function /Script/UMG.UserWidget.OnMouseButtonDown
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnMouseButtonDown = { 0x2bbb090, 52 }; 
	// Function /Script/UMG.UserWidget.OnMouseButtonDoubleClick
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FPointerEvent&> OnMouseButtonDoubleClick = { 0x2bbb090, 53 }; 
	// Function /Script/UMG.UserWidget.OnMotionDetected
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FMotionEvent> OnMotionDetected = { 0x2bbb090, 54 }; 
	// Function /Script/UMG.UserWidget.OnKeyUp
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FKeyEvent> OnKeyUp = { 0x2bbb090, 55 }; 
	// Function /Script/UMG.UserWidget.OnKeymappingChanged
	constexpr static const FunctionPointer<UUserWidget, void, const TEnumAsByte<ESlateBrushResourceType>> OnKeymappingChanged = { 0x2bbb090, 56 }; 
	// Function /Script/UMG.UserWidget.OnKeyDown
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FKeyEvent> OnKeyDown = { 0x2bbb090, 57 }; 
	// Function /Script/UMG.UserWidget.OnKeyChar
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FCharacterEvent> OnKeyChar = { 0x2bbb090, 58 }; 
	// Function /Script/UMG.UserWidget.OnInitialized
	constexpr static const FunctionPointer<UUserWidget, void> OnInitialized = { 0x2bbb090, 59 }; 
	// Function /Script/UMG.UserWidget.OnFocusReceived
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FFocusEvent> OnFocusReceived = { 0x2bbb090, 60 }; 
	// Function /Script/UMG.UserWidget.OnFocusLost
	constexpr static const FunctionPointer<UUserWidget, void, const FFocusEvent> OnFocusLost = { 0x2bbb090, 61 }; 
	// Function /Script/UMG.UserWidget.OnDrop
	constexpr static const FunctionPointer<UUserWidget, bool, const FGeometry, const FPointerEvent, const UDragDropOperation*> OnDrop = { 0x2bbb090, 62 }; 
	// Function /Script/UMG.UserWidget.OnDragOver
	constexpr static const FunctionPointer<UUserWidget, bool, const FGeometry, const FPointerEvent, const UDragDropOperation*> OnDragOver = { 0x2bbb090, 63 }; 
	// Function /Script/UMG.UserWidget.OnDragLeave
	constexpr static const FunctionPointer<UUserWidget, void, const FPointerEvent, const UDragDropOperation*> OnDragLeave = { 0x2bbb090, 64 }; 
	// Function /Script/UMG.UserWidget.OnDragEnter
	constexpr static const FunctionPointer<UUserWidget, void, const FGeometry, const FPointerEvent, const UDragDropOperation*> OnDragEnter = { 0x2bbb090, 65 }; 
	// Function /Script/UMG.UserWidget.OnDragDetected
	constexpr static const FunctionPointer<UUserWidget, void, const FGeometry, const FPointerEvent&, const UDragDropOperation*&> OnDragDetected = { 0x2bbb090, 66 }; 
	// Function /Script/UMG.UserWidget.OnDragCancelled
	constexpr static const FunctionPointer<UUserWidget, void, const FPointerEvent&, const UDragDropOperation*> OnDragCancelled = { 0x2bbb090, 67 }; 
	// Function /Script/UMG.UserWidget.OnAnimationStarted
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*> OnAnimationStarted = { 0x3da5ad0, 68 }; 
	// Function /Script/UMG.UserWidget.OnAnimationFinished
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*> OnAnimationFinished = { 0x3da59f0, 69 }; 
	// Function /Script/UMG.UserWidget.OnAnalogValueChanged
	constexpr static const FunctionPointer<UUserWidget, FEventReply, const FGeometry, const FAnalogInputEvent> OnAnalogValueChanged = { 0x2bbb090, 70 }; 
	// Function /Script/UMG.UserWidget.OnAddedToFocusPath
	constexpr static const FunctionPointer<UUserWidget, void, const FFocusEvent> OnAddedToFocusPath = { 0x2bbb090, 71 }; 
	// Function /Script/UMG.UserWidget.NotifyUMPCModeChanged
	constexpr static const FunctionPointer<UUserWidget, void> NotifyUMPCModeChanged = { 0x3da6780, 72 }; 
	// Function /Script/UMG.UserWidget.NotifyResourceAssetChanged
	constexpr static const FunctionPointer<UUserWidget, void> NotifyResourceAssetChanged = { 0x3da6860, 73 }; 
	// Function /Script/UMG.UserWidget.NotifyKeymappingChanged
	constexpr static const FunctionPointer<UUserWidget, void> NotifyKeymappingChanged = { 0x3da67f0, 74 }; 
	// Function /Script/UMG.UserWidget.ListenForInputAction
	constexpr static const FunctionPointer<UUserWidget, void, const FName, const TEnumAsByte<EInputEvent>, const bool, const FDelegateProperty> ListenForInputAction = { 0x3da3600, 75 }; 
	// Function /Script/UMG.UserWidget.IsPlayingAnimation
	constexpr static const FunctionPointer<UUserWidget, bool> IsPlayingAnimation = { 0x3da38b0, 76 }; 
	// Function /Script/UMG.UserWidget.IsListeningForInputAction
	constexpr static const FunctionPointer<UUserWidget, bool, const FName> IsListeningForInputAction = { 0x3da3240, 77 }; 
	// Function /Script/UMG.UserWidget.IsInViewport
	constexpr static const FunctionPointer<UUserWidget, bool> IsInViewport = { 0x3da6af0, 78 }; 
	// Function /Script/UMG.UserWidget.IsInteractable
	constexpr static const FunctionPointer<UUserWidget, bool> IsInteractable = { 0x2bbb090, 79 }; 
	// Function /Script/UMG.UserWidget.IsAnyAnimationPlaying
	constexpr static const FunctionPointer<UUserWidget, bool> IsAnyAnimationPlaying = { 0x3da38b0, 80 }; 
	// Function /Script/UMG.UserWidget.IsAnimationPlayingForward
	constexpr static const FunctionPointer<UUserWidget, bool, const UWidgetAnimation*> IsAnimationPlayingForward = { 0x3da3a40, 81 }; 
	// Function /Script/UMG.UserWidget.IsAnimationPlaying
	constexpr static const FunctionPointer<UUserWidget, bool, const UWidgetAnimation*> IsAnimationPlaying = { 0x3da3ff0, 82 }; 
	// Function /Script/UMG.UserWidget.GetOwningPlayerPawn
	constexpr static const FunctionPointer<UUserWidget, APawn*> GetOwningPlayerPawn = { 0x3da6970, 83 }; 
	// Function /Script/UMG.UserWidget.GetOwningPlayerCameraManager
	constexpr static const FunctionPointer<UUserWidget, APlayerCameraManager*> GetOwningPlayerCameraManager = { 0x3da6920, 84 }; 
	// Function /Script/UMG.UserWidget.GetIsVisible
	constexpr static const FunctionPointer<UUserWidget, bool> GetIsVisible = { 0x3da6af0, 85 }; 
	// Function /Script/UMG.UserWidget.GetAnimationCurrentTime
	constexpr static const FunctionPointer<UUserWidget, float, const UWidgetAnimation*> GetAnimationCurrentTime = { 0x3da43a0, 86 }; 
	// Function /Script/UMG.UserWidget.GetAnchorsInViewport
	constexpr static const FunctionPointer<UUserWidget, FAnchors> GetAnchorsInViewport = { 0x3da6b70, 87 }; 
	// Function /Script/UMG.UserWidget.GetAlignmentInViewport
	constexpr static const FunctionPointer<UUserWidget, FVector2D> GetAlignmentInViewport = { 0x3da6b40, 88 }; 
	// Function /Script/UMG.UserWidget.FlushAnimations
	constexpr static const FunctionPointer<UUserWidget, void> FlushAnimations = { 0x3da39e0, 89 }; 
	// Function /Script/UMG.UserWidget.Destruct
	constexpr static const FunctionPointer<UUserWidget, void> Destruct = { 0x2bbb090, 90 }; 
	// Function /Script/UMG.UserWidget.Construct
	constexpr static const FunctionPointer<UUserWidget, void> Construct = { 0x2bbb090, 91 }; 
	// Function /Script/UMG.UserWidget.ClearViewportChange
	constexpr static const FunctionPointer<UUserWidget, void> ClearViewportChange = { 0x3da6740, 92 }; 
	// Function /Script/UMG.UserWidget.CancelLatentActions
	constexpr static const FunctionPointer<UUserWidget, void> CancelLatentActions = { 0x3da6900, 93 }; 
	// Function /Script/UMG.UserWidget.BindToAnimationStarted
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*, const FDelegateProperty> BindToAnimationStarted = { 0x3da6560, 94 }; 
	// Function /Script/UMG.UserWidget.BindToAnimationFinished
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*, const FDelegateProperty> BindToAnimationFinished = { 0x3da6100, 95 }; 
	// Function /Script/UMG.UserWidget.BindToAnimationEvent
	constexpr static const FunctionPointer<UUserWidget, void, const UWidgetAnimation*, const FDelegateProperty, const EWidgetAnimationEvent, const FName> BindToAnimationEvent = { 0x3da5bb0, 96 }; 
	// Function /Script/UMG.UserWidget.AddToViewport
	constexpr static const FunctionPointer<UUserWidget, void, const int32_t> AddToViewport = { 0x3da7100, 97 }; 
	// Function /Script/UMG.UserWidget.AddToPlayerScreen
	constexpr static const FunctionPointer<UUserWidget, bool, const int32_t> AddToPlayerScreen = { 0x3da7010, 98 }; 
};

/// Class /Script/UMG.ComboBoxString
/// Size: 0x0EC8 (3784 bytes) (0x000108 - 0x000EC8) align n/a MaxSize: 0x0EC8
class UComboBoxString : public UWidget
{ 
public:
	TArray<FString>                                    DefaultOptions;                                             // 0x0108   (0x0010)  
	FString                                            SelectedOption;                                             // 0x0118   (0x0010)  
	FComboBoxStyle                                     WidgetStyle;                                                // 0x0128   (0x0420)  
	FTableRowStyle                                     ItemStyle;                                                  // 0x0548   (0x0838)  
	FMargin                                            ContentPadding;                                             // 0x0D80   (0x0010)  
	float                                              MaxListHeight;                                              // 0x0D90   (0x0004)  
	bool                                               HasDownArrow;                                               // 0x0D94   (0x0001)  
	bool                                               EnableGamepadNavigationMode;                                // 0x0D95   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0D96   (0x0002)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x0D98   (0x0060)  
	FSlateColor                                        ForegroundColor;                                            // 0x0DF8   (0x0028)  
	bool                                               bIsFocusable;                                               // 0x0E20   (0x0001)  
	bool                                               IsIgnoreCloseWhenReselect;                                  // 0x0E21   (0x0001)  
	bool                                               OpenPopupUpperHeaderItem;                                   // 0x0E22   (0x0001)  
	unsigned char                                      UnknownData05_6[0x1];                                       // 0x0E23   (0x0001)  MISSED
	FDelegateProperty                                  OnGenerateWidgetEvent;                                      // 0x0E24   (0x0010)  
	unsigned char                                      UnknownData06_6[0x4];                                       // 0x0E34   (0x0004)  MISSED
	FMulticastInlineDelegate                           OnSelectionChanged;                                         // 0x0E38   (0x0010)  
	FMulticastInlineDelegate                           OnFocusSelectionChanged;                                    // 0x0E48   (0x0010)  
	FMulticastInlineDelegate                           OnClosing;                                                  // 0x0E58   (0x0010)  
	FMulticastInlineDelegate                           OnOpening;                                                  // 0x0E68   (0x0010)  
	unsigned char                                      UnknownData07_7[0x50];                                      // 0x0E78   (0x0050)  MISSED

	/// Functions
	// Function /Script/UMG.ComboBoxString.SetSelectedOption
	constexpr static const FunctionPointer<UComboBoxString, void, const FString> SetSelectedOption = { 0x3d77b20, 0 }; 
	// Function /Script/UMG.ComboBoxString.SetSelectedIndex
	constexpr static const FunctionPointer<UComboBoxString, void, const int32_t> SetSelectedIndex = { 0x3d77a50, 1 }; 
	// Function /Script/UMG.ComboBoxString.RemoveOption
	constexpr static const FunctionPointer<UComboBoxString, bool, const FString> RemoveOption = { 0x3d77fe0, 2 }; 
	// Function /Script/UMG.ComboBoxString.RefreshOptions
	constexpr static const FunctionPointer<UComboBoxString, void> RefreshOptions = { 0x3d77c90, 3 }; 
	// Function /Script/UMG.ComboBoxString.OnSelectionChangedEvent__DelegateSignature
	constexpr static const FunctionPointer<UComboBoxString, void, const FString, const TEnumAsByte<ESelectInfo>> OnSelectionChangedEvent__DelegateSignature = { 0x2bbb090, 4 }; 
	// Function /Script/UMG.ComboBoxString.OnOpeningEvent__DelegateSignature
	constexpr static const FunctionPointer<UComboBoxString, void> OnOpeningEvent__DelegateSignature = { 0x2bbb090, 5 }; 
	// Function /Script/UMG.ComboBoxString.IsOpen
	constexpr static const FunctionPointer<UComboBoxString, bool> IsOpen = { 0x3d77890, 6 }; 
	// Function /Script/UMG.ComboBoxString.GetSelectedOption
	constexpr static const FunctionPointer<UComboBoxString, FString> GetSelectedOption = { 0x3d77970, 7 }; 
	// Function /Script/UMG.ComboBoxString.GetSelectedIndex
	constexpr static const FunctionPointer<UComboBoxString, int32_t> GetSelectedIndex = { 0x3d77910, 8 }; 
	// Function /Script/UMG.ComboBoxString.GetOptionCount
	constexpr static const FunctionPointer<UComboBoxString, int32_t> GetOptionCount = { 0x3d778f0, 9 }; 
	// Function /Script/UMG.ComboBoxString.GetOptionAtIndex
	constexpr static const FunctionPointer<UComboBoxString, FString, const int32_t> GetOptionAtIndex = { 0x3d77d50, 10 }; 
	// Function /Script/UMG.ComboBoxString.FindOptionIndex
	constexpr static const FunctionPointer<UComboBoxString, int32_t, const FString> FindOptionIndex = { 0x3d77ee0, 11 }; 
	// Function /Script/UMG.ComboBoxString.ClearSelection
	constexpr static const FunctionPointer<UComboBoxString, void> ClearSelection = { 0x3d77cd0, 12 }; 
	// Function /Script/UMG.ComboBoxString.ClearOptions
	constexpr static const FunctionPointer<UComboBoxString, void> ClearOptions = { 0x3d77cf0, 13 }; 
	// Function /Script/UMG.ComboBoxString.AddOption
	constexpr static const FunctionPointer<UComboBoxString, void, const FString> AddOption = { 0x3d78140, 14 }; 
};

/// Struct /Script/UMG.UserWidgetPool
/// Size: 0x0080 (128 bytes) (0x000000 - 0x000080) align n/a MaxSize: 0x0080
struct FUserWidgetPool
{ 
	TArray<class UUserWidget*>                         ActiveWidgets;                                              // 0x0000   (0x0010)  
	TArray<class UUserWidget*>                         InactiveWidgets;                                            // 0x0010   (0x0010)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0020   (0x0060)  MISSED
};

/// Class /Script/UMG.ListViewBase
/// Size: 0x0218 (536 bytes) (0x000108 - 0x000218) align n/a MaxSize: 0x0218
class UListViewBase : public UWidget
{ 
public:
	class UClass*                                      EntryWidgetClass;                                           // 0x0108   (0x0008)  
	float                                              WheelScrollMultiplier;                                      // 0x0110   (0x0004)  
	bool                                               bEnableScrollAnimation;                                     // 0x0114   (0x0001)  
	bool                                               bEnableFixedLineOffset;                                     // 0x0115   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0116   (0x0002)  MISSED
	float                                              FixedLineScrollOffset;                                      // 0x0118   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x011C   (0x0004)  MISSED
	FMulticastInlineDelegate                           BP_OnEntryGenerated;                                        // 0x0120   (0x0010)  
	FMulticastInlineDelegate                           BP_OnEntryReleased;                                         // 0x0130   (0x0010)  
	FUserWidgetPool                                    EntryWidgetPool;                                            // 0x0140   (0x0080)  
	unsigned char                                      UnknownData05_7[0x58];                                      // 0x01C0   (0x0058)  MISSED

	/// Functions
	// Function /Script/UMG.ListViewBase.SetWheelScrollMultiplier
	constexpr static const FunctionPointer<UListViewBase, void, const float> SetWheelScrollMultiplier = { 0x3d86740, 0 }; 
	// Function /Script/UMG.ListViewBase.SetScrollOffset
	constexpr static const FunctionPointer<UListViewBase, void, const float> SetScrollOffset = { 0x3d86870, 1 }; 
	// Function /Script/UMG.ListViewBase.SetScrollbarVisibility
	constexpr static const FunctionPointer<UListViewBase, void, const ESlateVisibility> SetScrollbarVisibility = { 0x3d86670, 2 }; 
	// Function /Script/UMG.ListViewBase.SetScrollAnimationEnabled
	constexpr static const FunctionPointer<UListViewBase, void, const bool> SetScrollAnimationEnabled = { 0x3d86590, 3 }; 
	// Function /Script/UMG.ListViewBase.ScrollToTop
	constexpr static const FunctionPointer<UListViewBase, void> ScrollToTop = { 0x3d869c0, 4 }; 
	// Function /Script/UMG.ListViewBase.ScrollToBottom
	constexpr static const FunctionPointer<UListViewBase, void> ScrollToBottom = { 0x3d86990, 5 }; 
	// Function /Script/UMG.ListViewBase.RequestRefresh
	constexpr static const FunctionPointer<UListViewBase, void> RequestRefresh = { 0x3d86270, 6 }; 
	// Function /Script/UMG.ListViewBase.RegenerateAllEntries
	constexpr static const FunctionPointer<UListViewBase, void> RegenerateAllEntries = { 0x3d869e0, 7 }; 
	// Function /Script/UMG.ListViewBase.IsEndOfList
	constexpr static const FunctionPointer<UListViewBase, bool, const float> IsEndOfList = { 0x3d862a0, 8 }; 
	// Function /Script/UMG.ListViewBase.GetDisplayedEntryWidgets
	constexpr static const FunctionPointer<UListViewBase, TArray<UUserWidget*>> GetDisplayedEntryWidgets = { 0x3d86a00, 9 }; 
	// Function /Script/UMG.ListViewBase.AddScrollOffset
	constexpr static const FunctionPointer<UListViewBase, void, const float, const bool> AddScrollOffset = { 0x3d863f0, 10 }; 
};

/// Class /Script/UMG.ListView
/// Size: 0x0890 (2192 bytes) (0x000218 - 0x000890) align n/a MaxSize: 0x0890
class UListView : public UListViewBase
{ 
public:
	unsigned char                                      UnknownData05_8[0xC0];                                      // 0x0218   (0x00C0)  MISSED
	FScrollBarStyle                                    ScrollBarStyle;                                             // 0x02D8   (0x0518)  
	bool                                               bOverrideScrollbarThickness;                                // 0x07F0   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x07F1   (0x0003)  MISSED
	FVector2D                                          ScrollbarThickness;                                         // 0x07F4   (0x0008)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x07FC   (0x0001)  
	TEnumAsByte<ESelectionMode>                        SelectionMode;                                              // 0x07FD   (0x0001)  
	EConsumeMouseWheel                                 ConsumeMouseWheel;                                          // 0x07FE   (0x0001)  
	bool                                               bClearSelectionOnClick;                                     // 0x07FF   (0x0001)  
	bool                                               bIsFocusable;                                               // 0x0800   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0801   (0x0003)  MISSED
	float                                              EntrySpacing;                                               // 0x0804   (0x0004)  
	bool                                               bReturnFocusToSelection;                                    // 0x0808   (0x0001)  
	bool                                               bForceEdgeScroll;                                           // 0x0809   (0x0001)  
	bool                                               bSelectionChangedEventWhenClick;                            // 0x080A   (0x0001)  
	bool                                               bUseNavigationKeyBlock;                                     // 0x080B   (0x0001)  
	bool                                               bWrapVerticallNavigation;                                   // 0x080C   (0x0001)  
	bool                                               bMakeTableRowDisableFocus;                                  // 0x080D   (0x0001)  
	unsigned char                                      UnknownData08_6[0x2];                                       // 0x080E   (0x0002)  MISSED
	TArray<class UObject*>                             ListItems;                                                  // 0x0810   (0x0010)  
	unsigned char                                      UnknownData09_6[0x10];                                      // 0x0820   (0x0010)  MISSED
	FMulticastInlineDelegate                           BP_OnEntryInitialized;                                      // 0x0830   (0x0010)  
	FMulticastInlineDelegate                           BP_OnItemClicked;                                           // 0x0840   (0x0010)  
	FMulticastInlineDelegate                           BP_OnItemDoubleClicked;                                     // 0x0850   (0x0010)  
	FMulticastInlineDelegate                           BP_OnItemIsHoveredChanged;                                  // 0x0860   (0x0010)  
	FMulticastInlineDelegate                           BP_OnItemSelectionChanged;                                  // 0x0870   (0x0010)  
	FMulticastInlineDelegate                           BP_OnItemScrolledIntoView;                                  // 0x0880   (0x0010)  

	/// Functions
	// Function /Script/UMG.ListView.SetSelectionMode
	constexpr static const FunctionPointer<UListView, void, const TEnumAsByte<ESelectionMode>> SetSelectionMode = { 0x3d85190, 0 }; 
	// Function /Script/UMG.ListView.SetSelectedIndex
	constexpr static const FunctionPointer<UListView, void, const int32_t> SetSelectedIndex = { 0x3d84ef0, 1 }; 
	// Function /Script/UMG.ListView.ScrollIndexIntoView
	constexpr static const FunctionPointer<UListView, void, const int32_t> ScrollIndexIntoView = { 0x3d85000, 2 }; 
	// Function /Script/UMG.ListView.RemoveItem
	constexpr static const FunctionPointer<UListView, void, const UObject*> RemoveItem = { 0x3d85560, 3 }; 
	// Function /Script/UMG.ListView.NavigateToIndex
	constexpr static const FunctionPointer<UListView, void, const int32_t> NavigateToIndex = { 0x3d84e20, 4 }; 
	// Function /Script/UMG.ListView.IsRefreshPending
	constexpr static const FunctionPointer<UListView, bool> IsRefreshPending = { 0x3d85140, 5 }; 
	// Function /Script/UMG.ListView.GetNumItems
	constexpr static const FunctionPointer<UListView, int32_t> GetNumItems = { 0x3d85430, 6 }; 
	// Function /Script/UMG.ListView.GetListItems
	constexpr static const FunctionPointer<UListView, TArray<UObject*>> GetListItems = { 0x3d85720, 7 }; 
	// Function /Script/UMG.ListView.GetItemAt
	constexpr static const FunctionPointer<UListView, UObject*, const int32_t> GetItemAt = { 0x3d85450, 8 }; 
	// Function /Script/UMG.ListView.GetIndexForItem
	constexpr static const FunctionPointer<UListView, int32_t, const UObject*> GetIndexForItem = { 0x3d85310, 9 }; 
	// Function /Script/UMG.ListView.ClearListItems
	constexpr static const FunctionPointer<UListView, void> ClearListItems = { 0x3d852f0, 10 }; 
	// Function /Script/UMG.ListView.BP_SetSelectedItem
	constexpr static const FunctionPointer<UListView, void, const UObject*> BP_SetSelectedItem = { 0x3d84d30, 11 }; 
	// Function /Script/UMG.ListView.BP_SetListItems
	constexpr static const FunctionPointer<UListView, void, const TArray<UObject*>&> BP_SetListItems = { 0x3d84490, 12 }; 
	// Function /Script/UMG.ListView.BP_SetItemSelection
	constexpr static const FunctionPointer<UListView, void, const UObject*, const bool> BP_SetItemSelection = { 0x3d84b40, 13 }; 
	// Function /Script/UMG.ListView.BP_ScrollItemIntoView
	constexpr static const FunctionPointer<UListView, void, const UObject*> BP_ScrollItemIntoView = { 0x3d84660, 14 }; 
	// Function /Script/UMG.ListView.BP_NavigateToItem
	constexpr static const FunctionPointer<UListView, void, const UObject*> BP_NavigateToItem = { 0x3d84780, 15 }; 
	// Function /Script/UMG.ListView.BP_IsItemVisible
	constexpr static const FunctionPointer<UListView, bool, const UObject*> BP_IsItemVisible = { 0x3d84870, 16 }; 
	// Function /Script/UMG.ListView.BP_GetSelectedItems
	constexpr static const FunctionPointer<UListView, bool, const TArray<UObject*>&> BP_GetSelectedItems = { 0x3d84970, 17 }; 
	// Function /Script/UMG.ListView.BP_GetSelectedItem
	constexpr static const FunctionPointer<UListView, UObject*> BP_GetSelectedItem = { 0x3d84460, 18 }; 
	// Function /Script/UMG.ListView.BP_GetNumItemsSelected
	constexpr static const FunctionPointer<UListView, int32_t> BP_GetNumItemsSelected = { 0x3d84aa0, 19 }; 
	// Function /Script/UMG.ListView.BP_ClearSelection
	constexpr static const FunctionPointer<UListView, void> BP_ClearSelection = { 0x3d84b00, 20 }; 
	// Function /Script/UMG.ListView.BP_CancelScrollIntoView
	constexpr static const FunctionPointer<UListView, void> BP_CancelScrollIntoView = { 0x3d84620, 21 }; 
	// Function /Script/UMG.ListView.AddItem
	constexpr static const FunctionPointer<UListView, void, const UObject*> AddItem = { 0x3d85640, 22 }; 
};

/// Struct /Script/UMG.ShapedTextOptions
/// Size: 0x0003 (3 bytes) (0x000000 - 0x000003) align n/a MaxSize: 0x0003
struct FShapedTextOptions
{ 
	bool                                               bOverride_TextShapingMethod : 1;                            // 0x0000:0 (0x0001)  
	bool                                               bOverride_TextFlowDirection : 1;                            // 0x0000:1 (0x0001)  
	ETextShapingMethod                                 TextShapingMethod;                                          // 0x0001   (0x0001)  
	ETextFlowDirection                                 TextFlowDirection;                                          // 0x0002   (0x0001)  
};

/// Class /Script/UMG.TextLayoutWidget
/// Size: 0x0128 (296 bytes) (0x000108 - 0x000128) align n/a MaxSize: 0x0128
class UTextLayoutWidget : public UWidget
{ 
public:
	FShapedTextOptions                                 ShapedTextOptions;                                          // 0x0108   (0x0003)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x010B   (0x0001)  
	ETextWrappingPolicy                                WrappingPolicy;                                             // 0x010C   (0x0001)  
	bool                                               AutoWrapText : 1;                                           // 0x010D:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x2];                                       // 0x010E   (0x0002)  MISSED
	float                                              WrapTextAt;                                                 // 0x0110   (0x0004)  
	FMargin                                            Margin;                                                     // 0x0114   (0x0010)  
	float                                              LineHeightPercentage;                                       // 0x0124   (0x0004)  

	/// Functions
	// Function /Script/UMG.TextLayoutWidget.SetJustification
	constexpr static const FunctionPointer<UTextLayoutWidget, void, const TEnumAsByte<ETextJustify>> SetJustification = { 0x3d9f560, 0 }; 
};

/// Class /Script/UMG.RichTextBlock
/// Size: 0x06F0 (1776 bytes) (0x000128 - 0x0006F0) align n/a MaxSize: 0x06F0
class URichTextBlock : public UTextLayoutWidget
{ 
public:
	FText                                              text;                                                       // 0x0128   (0x0018)  
	FText                                              ActionText;                                                 // 0x0140   (0x0018)  
	class UDataTable*                                  TextStyleSet;                                               // 0x0158   (0x0008)  
	TArray<class UClass*>                              DecoratorClasses;                                           // 0x0160   (0x0010)  
	bool                                               bOverrideDefaultStyle;                                      // 0x0170   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0171   (0x0007)  MISSED
	FTextBlockStyle                                    DefaultTextStyleOverride;                                   // 0x0178   (0x0290)  
	float                                              MinDesiredWidth;                                            // 0x0408   (0x0004)  
	ETextTransformPolicy                               TextTransformPolicy;                                        // 0x040C   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x040D   (0x0003)  MISSED
	FTextBlockStyle                                    DefaultTextStyle;                                           // 0x0410   (0x0290)  
	TArray<class URichTextBlockDecorator*>             InstanceDecorators;                                         // 0x06A0   (0x0010)  
	unsigned char                                      UnknownData06_6[0x20];                                      // 0x06B0   (0x0020)  MISSED
	ETextVerticalJustify                               VerticalJustification;                                      // 0x06D0   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x06D1   (0x0007)  MISSED
	FText                                              NotifyCheckText;                                            // 0x06D8   (0x0018)  

	/// Functions
	// Function /Script/UMG.RichTextBlock.SetWrapTextAt
	constexpr static const FunctionPointer<URichTextBlock, void, const float> SetWrapTextAt = { 0x3d903a0, 0 }; 
	// Function /Script/UMG.RichTextBlock.SetTextTransformPolicy
	constexpr static const FunctionPointer<URichTextBlock, void, const ETextTransformPolicy> SetTextTransformPolicy = { 0x3d902d0, 1 }; 
	// Function /Script/UMG.RichTextBlock.SetTextStyleSet
	constexpr static const FunctionPointer<URichTextBlock, void, const UDataTable*> SetTextStyleSet = { 0x3d8fc50, 2 }; 
	// Function /Script/UMG.RichTextBlock.SetText
	constexpr static const FunctionPointer<URichTextBlock, void, const FText&> SetText = { 0x3d8ff50, 3 }; 
	// Function /Script/UMG.RichTextBlock.SetMinDesiredWidth
	constexpr static const FunctionPointer<URichTextBlock, void, const float> SetMinDesiredWidth = { 0x3d90550, 4 }; 
	// Function /Script/UMG.RichTextBlock.SetDefaultTextStyle
	constexpr static const FunctionPointer<URichTextBlock, void, const FTextBlockStyle&> SetDefaultTextStyle = { 0x3d90190, 5 }; 
	// Function /Script/UMG.RichTextBlock.SetDefaultStrikeBrush
	constexpr static const FunctionPointer<URichTextBlock, void, const FSlateBrush&> SetDefaultStrikeBrush = { 0x3d90620, 6 }; 
	// Function /Script/UMG.RichTextBlock.SetDefaultShadowOffset
	constexpr static const FunctionPointer<URichTextBlock, void, const FVector2D> SetDefaultShadowOffset = { 0x3d90a60, 7 }; 
	// Function /Script/UMG.RichTextBlock.SetDefaultShadowColorAndOpacity
	constexpr static const FunctionPointer<URichTextBlock, void, const FLinearColor> SetDefaultShadowColorAndOpacity = { 0x3d90b80, 8 }; 
	// Function /Script/UMG.RichTextBlock.SetDefaultFont
	constexpr static const FunctionPointer<URichTextBlock, void, const FSlateFontInfo> SetDefaultFont = { 0x3d90840, 9 }; 
	// Function /Script/UMG.RichTextBlock.SetDefaultColorAndOpacity
	constexpr static const FunctionPointer<URichTextBlock, void, const FSlateColor> SetDefaultColorAndOpacity = { 0x3d90c80, 10 }; 
	// Function /Script/UMG.RichTextBlock.SetAutoWrapText
	constexpr static const FunctionPointer<URichTextBlock, void, const bool> SetAutoWrapText = { 0x3d90470, 11 }; 
	// Function /Script/UMG.RichTextBlock.SetActionText
	constexpr static const FunctionPointer<URichTextBlock, void, const FText&> SetActionText = { 0x3d8fd80, 12 }; 
	// Function /Script/UMG.RichTextBlock.RefreshText
	constexpr static const FunctionPointer<URichTextBlock, void> RefreshText = { 0x3d8fa80, 13 }; 
	// Function /Script/UMG.RichTextBlock.GetText
	constexpr static const FunctionPointer<URichTextBlock, FText> GetText = { 0x3d90090, 14 }; 
	// Function /Script/UMG.RichTextBlock.GetDecoratorByClass
	constexpr static const FunctionPointer<URichTextBlock, URichTextBlockDecorator*, const UClass*> GetDecoratorByClass = { 0x3d8fae0, 15 }; 
	// Function /Script/UMG.RichTextBlock.GetActionText
	constexpr static const FunctionPointer<URichTextBlock, FText> GetActionText = { 0x3d8fec0, 16 }; 
	// Function /Script/UMG.RichTextBlock.ClearAllDefaultStyleOverrides
	constexpr static const FunctionPointer<URichTextBlock, void> ClearAllDefaultStyleOverrides = { 0x3d90160, 17 }; 
};

/// Class /Script/UMG.AsyncTaskDownloadImage
/// Size: 0x0050 (80 bytes) (0x000030 - 0x000050) align n/a MaxSize: 0x0050
class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
{ 
public:
	FMulticastInlineDelegate                           OnSuccess;                                                  // 0x0030   (0x0010)  
	FMulticastInlineDelegate                           OnFail;                                                     // 0x0040   (0x0010)  

	/// Functions
	// Function /Script/UMG.AsyncTaskDownloadImage.DownloadImage
	constexpr static const FunctionPointer<UAsyncTaskDownloadImage, UAsyncTaskDownloadImage*, const FString> DownloadImage = { 0x3d6f360, 0 }; 
};

/// Class /Script/UMG.BackgroundBlur
/// Size: 0x01E0 (480 bytes) (0x000120 - 0x0001E0) align n/a MaxSize: 0x01E0
class UBackgroundBlur : public UContentWidget
{ 
public:
	FMargin                                            Padding;                                                    // 0x0120   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0130   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0131   (0x0001)  
	bool                                               bApplyAlphaToBlur;                                          // 0x0132   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x0133   (0x0001)  MISSED
	float                                              BlurStrength;                                               // 0x0134   (0x0004)  
	bool                                               bOverrideAutoRadiusCalculation;                             // 0x0138   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0139   (0x0003)  MISSED
	int32_t                                            BlurRadius;                                                 // 0x013C   (0x0004)  
	FSlateBrush                                        LowQualityFallbackBrush;                                    // 0x0140   (0x0090)  
	unsigned char                                      UnknownData05_7[0x10];                                      // 0x01D0   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.BackgroundBlur.SetVerticalAlignment
	constexpr static const FunctionPointer<UBackgroundBlur, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d6fc00, 0 }; 
	// Function /Script/UMG.BackgroundBlur.SetPadding
	constexpr static const FunctionPointer<UBackgroundBlur, void, const FMargin> SetPadding = { 0x3d6fde0, 1 }; 
	// Function /Script/UMG.BackgroundBlur.SetLowQualityFallbackBrush
	constexpr static const FunctionPointer<UBackgroundBlur, void, const FSlateBrush&> SetLowQualityFallbackBrush = { 0x3d6f830, 2 }; 
	// Function /Script/UMG.BackgroundBlur.SetHorizontalAlignment
	constexpr static const FunctionPointer<UBackgroundBlur, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d6fcf0, 3 }; 
	// Function /Script/UMG.BackgroundBlur.SetBlurStrength
	constexpr static const FunctionPointer<UBackgroundBlur, void, const float> SetBlurStrength = { 0x1548420, 4 }; 
	// Function /Script/UMG.BackgroundBlur.SetBlurRadius
	constexpr static const FunctionPointer<UBackgroundBlur, void, const int32_t> SetBlurRadius = { 0x3d6fa30, 5 }; 
	// Function /Script/UMG.BackgroundBlur.SetApplyAlphaToBlur
	constexpr static const FunctionPointer<UBackgroundBlur, void, const bool> SetApplyAlphaToBlur = { 0x3d6fb00, 6 }; 
};

/// Class /Script/UMG.BackgroundBlurSlot
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UBackgroundBlurSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData01_7[0x16];                                      // 0x004A   (0x0016)  MISSED

	/// Functions
	// Function /Script/UMG.BackgroundBlurSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UBackgroundBlurSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d70360, 0 }; 
	// Function /Script/UMG.BackgroundBlurSlot.SetPadding
	constexpr static const FunctionPointer<UBackgroundBlurSlot, void, const FMargin> SetPadding = { 0x3d70540, 1 }; 
	// Function /Script/UMG.BackgroundBlurSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UBackgroundBlurSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d70450, 2 }; 
};

/// Struct /Script/UMG.DynamicPropertyPath
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
struct FDynamicPropertyPath : FCachedPropertyPath
{ 
};

/// Class /Script/UMG.PropertyBinding
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000060) align n/a MaxSize: 0x0060
class UPropertyBinding : public UObject
{ 
public:
	TWeakObjectPtr<class UObject*>                     SourceObject;                                               // 0x0028   (0x0008)  
	FDynamicPropertyPath                               SourcePath;                                                 // 0x0030   (0x0028)  
	FName                                              DestinationProperty;                                        // 0x0058   (0x0008)  
};

/// Class /Script/UMG.BoolBinding
/// Size: 0x0060 (96 bytes) (0x000060 - 0x000060) align n/a MaxSize: 0x0060
class UBoolBinding : public UPropertyBinding
{ 
public:

	/// Functions
	// Function /Script/UMG.BoolBinding.GetValue
	constexpr static const FunctionPointer<UBoolBinding, bool> GetValue = { 0x3d70a10, 0 }; 
};

/// Class /Script/UMG.Border
/// Size: 0x0278 (632 bytes) (0x000120 - 0x000278) align n/a MaxSize: 0x0278
class UBorder : public UContentWidget
{ 
public:
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0120   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0121   (0x0001)  
	bool                                               bShowEffectWhenDisabled : 1;                                // 0x0122:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x1];                                       // 0x0123   (0x0001)  MISSED
	FLinearColor                                       ContentColorAndOpacity;                                     // 0x0124   (0x0010)  
	FDelegateProperty                                  ContentColorAndOpacityDelegate;                             // 0x0134   (0x0010)  
	FMargin                                            Padding;                                                    // 0x0144   (0x0010)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0154   (0x0004)  MISSED
	FSlateBrush                                        Background;                                                 // 0x0158   (0x0090)  
	FDelegateProperty                                  BackgroundDelegate;                                         // 0x01E8   (0x0010)  
	FLinearColor                                       BrushColor;                                                 // 0x01F8   (0x0010)  
	FDelegateProperty                                  BrushColorDelegate;                                         // 0x0208   (0x0010)  
	FVector2D                                          DesiredSizeScale;                                           // 0x0218   (0x0008)  
	bool                                               bFlipForRightToLeftFlowDirection;                           // 0x0220   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0221   (0x0003)  MISSED
	FDelegateProperty                                  OnMouseButtonDownEvent;                                     // 0x0224   (0x0010)  
	FDelegateProperty                                  OnMouseButtonUpEvent;                                       // 0x0234   (0x0010)  
	FDelegateProperty                                  OnMouseMoveEvent;                                           // 0x0244   (0x0010)  
	FDelegateProperty                                  OnMouseDoubleClickEvent;                                    // 0x0254   (0x0010)  
	unsigned char                                      UnknownData07_7[0x14];                                      // 0x0264   (0x0014)  MISSED

	/// Functions
	// Function /Script/UMG.Border.SetVerticalAlignment
	constexpr static const FunctionPointer<UBorder, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d714a0, 0 }; 
	// Function /Script/UMG.Border.SetPadding
	constexpr static const FunctionPointer<UBorder, void, const FMargin> SetPadding = { 0x3d71680, 1 }; 
	// Function /Script/UMG.Border.SetHorizontalAlignment
	constexpr static const FunctionPointer<UBorder, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d71590, 2 }; 
	// Function /Script/UMG.Border.SetDesiredSizeScale
	constexpr static const FunctionPointer<UBorder, void, const FVector2D> SetDesiredSizeScale = { 0x3d70e00, 3 }; 
	// Function /Script/UMG.Border.SetContentColorAndOpacity
	constexpr static const FunctionPointer<UBorder, void, const FLinearColor> SetContentColorAndOpacity = { 0x3d71760, 4 }; 
	// Function /Script/UMG.Border.SetBrushFromTexture
	constexpr static const FunctionPointer<UBorder, void, const UTexture2D*> SetBrushFromTexture = { 0x3d70f00, 5 }; 
	// Function /Script/UMG.Border.SetBrushFromMaterial
	constexpr static const FunctionPointer<UBorder, void, const UMaterialInterface*> SetBrushFromMaterial = { 0x3d70f00, 6 }; 
	// Function /Script/UMG.Border.SetBrushFromAsset
	constexpr static const FunctionPointer<UBorder, void, const USlateBrushAsset*> SetBrushFromAsset = { 0x3d71070, 7 }; 
	// Function /Script/UMG.Border.SetBrushColor
	constexpr static const FunctionPointer<UBorder, void, const FLinearColor> SetBrushColor = { 0x3d713c0, 8 }; 
	// Function /Script/UMG.Border.SetBrush
	constexpr static const FunctionPointer<UBorder, void, const FSlateBrush&> SetBrush = { 0x3d71150, 9 }; 
	// Function /Script/UMG.Border.GetDynamicMaterial
	constexpr static const FunctionPointer<UBorder, UMaterialInstanceDynamic*> GetDynamicMaterial = { 0x3d70ed0, 10 }; 
};

/// Class /Script/UMG.BorderSlot
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UBorderSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData01_7[0x16];                                      // 0x004A   (0x0016)  MISSED

	/// Functions
	// Function /Script/UMG.BorderSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UBorderSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d71dc0, 0 }; 
	// Function /Script/UMG.BorderSlot.SetPadding
	constexpr static const FunctionPointer<UBorderSlot, void, const FMargin> SetPadding = { 0x3d71fa0, 1 }; 
	// Function /Script/UMG.BorderSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UBorderSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d71eb0, 2 }; 
};

/// Class /Script/UMG.BrushBinding
/// Size: 0x0068 (104 bytes) (0x000060 - 0x000068) align n/a MaxSize: 0x0068
class UBrushBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0060   (0x0008)  MISSED

	/// Functions
	// Function /Script/UMG.BrushBinding.GetValue
	constexpr static const FunctionPointer<UBrushBinding, FSlateBrush> GetValue = { 0x3d72470, 0 }; 
};

/// Class /Script/UMG.Button
/// Size: 0x0460 (1120 bytes) (0x000120 - 0x000460) align n/a MaxSize: 0x0460
class UButton : public UContentWidget
{ 
public:
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0120   (0x0008)  
	FButtonStyle                                       WidgetStyle;                                                // 0x0128   (0x0298)  
	FLinearColor                                       ColorAndOpacity;                                            // 0x03C0   (0x0010)  
	FLinearColor                                       BackgroundColor;                                            // 0x03D0   (0x0010)  
	TEnumAsByte<EButtonClickMethod>                    ClickMethod;                                                // 0x03E0   (0x0001)  
	TEnumAsByte<EButtonTouchMethod>                    TouchMethod;                                                // 0x03E1   (0x0001)  
	TEnumAsByte<EButtonPressMethod>                    PressMethod;                                                // 0x03E2   (0x0001)  
	bool                                               IsFocusable;                                                // 0x03E3   (0x0001)  
	bool                                               IsIgnoreKeyNavigationAction;                                // 0x03E4   (0x0001)  
	bool                                               IsAlwaysHandleWhenMouseButtonDown : 1;                      // 0x03E5:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x2];                                       // 0x03E6   (0x0002)  MISSED
	FMulticastInlineDelegate                           OnClicked;                                                  // 0x03E8   (0x0010)  
	FMulticastInlineDelegate                           OnPressed;                                                  // 0x03F8   (0x0010)  
	FMulticastInlineDelegate                           OnReleased;                                                 // 0x0408   (0x0010)  
	FMulticastInlineDelegate                           OnHovered;                                                  // 0x0418   (0x0010)  
	FMulticastInlineDelegate                           OnUnhovered;                                                // 0x0428   (0x0010)  
	FMulticastInlineDelegate                           OnDoubleClicked;                                            // 0x0438   (0x0010)  
	unsigned char                                      UnknownData04_6[0x10];                                      // 0x0448   (0x0010)  MISSED
	bool                                               bCheckEventHovered : 1;                                     // 0x0458:0 (0x0001)  
	bool                                               bBindEventHovered : 1;                                      // 0x0458:1 (0x0001)  
	bool                                               bCheckEventUnhovered : 1;                                   // 0x0458:2 (0x0001)  
	bool                                               bBindEventUnhovered : 1;                                    // 0x0458:3 (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0459   (0x0007)  MISSED

	/// Functions
	// Function /Script/UMG.Button.SetTouchMethod
	constexpr static const FunctionPointer<UButton, void, const TEnumAsByte<EButtonTouchMethod>> SetTouchMethod = { 0x3d729e0, 0 }; 
	// Function /Script/UMG.Button.SetStyle
	constexpr static const FunctionPointer<UButton, void, const FButtonStyle&> SetStyle = { 0x3d72db0, 1 }; 
	// Function /Script/UMG.Button.SetPressMethod
	constexpr static const FunctionPointer<UButton, void, const TEnumAsByte<EButtonPressMethod>> SetPressMethod = { 0x3d72900, 2 }; 
	// Function /Script/UMG.Button.SetColorAndOpacity
	constexpr static const FunctionPointer<UButton, void, const FLinearColor> SetColorAndOpacity = { 0x3d72cd0, 3 }; 
	// Function /Script/UMG.Button.SetClickMethod
	constexpr static const FunctionPointer<UButton, void, const TEnumAsByte<EButtonClickMethod>> SetClickMethod = { 0x3d72ac0, 4 }; 
	// Function /Script/UMG.Button.SetBackgroundColor
	constexpr static const FunctionPointer<UButton, void, const FLinearColor> SetBackgroundColor = { 0x3d72bf0, 5 }; 
	// Function /Script/UMG.Button.IsPressed
	constexpr static const FunctionPointer<UButton, bool> IsPressed = { 0x3d72ba0, 6 }; 
};

/// Class /Script/UMG.ButtonSlot
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UButtonSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData01_7[0x16];                                      // 0x004A   (0x0016)  MISSED

	/// Functions
	// Function /Script/UMG.ButtonSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UButtonSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d73400, 0 }; 
	// Function /Script/UMG.ButtonSlot.SetPadding
	constexpr static const FunctionPointer<UButtonSlot, void, const FMargin> SetPadding = { 0x3d735a0, 1 }; 
	// Function /Script/UMG.ButtonSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UButtonSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d734d0, 2 }; 
};

/// Class /Script/UMG.CanvasPanel
/// Size: 0x0130 (304 bytes) (0x000120 - 0x000130) align n/a MaxSize: 0x0130
class UCanvasPanel : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0120   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.CanvasPanel.AddChildToCanvas
	constexpr static const FunctionPointer<UCanvasPanel, UCanvasPanelSlot*, const UWidget*> AddChildToCanvas = { 0x3d73a60, 0 }; 
};

/// Struct /Script/UMG.AnchorData
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FAnchorData
{ 
	FMargin                                            Offsets;                                                    // 0x0000   (0x0010)  
	FAnchors                                           Anchors;                                                    // 0x0010   (0x0010)  
	FVector2D                                          Alignment;                                                  // 0x0020   (0x0008)  
};

/// Class /Script/UMG.CanvasPanelSlot
/// Size: 0x0070 (112 bytes) (0x000038 - 0x000070) align n/a MaxSize: 0x0070
class UCanvasPanelSlot : public UPanelSlot
{ 
public:
	FAnchorData                                        LayoutData;                                                 // 0x0038   (0x0028)  
	bool                                               bAutoSize;                                                  // 0x0060   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0061   (0x0003)  MISSED
	int32_t                                            ZOrder;                                                     // 0x0064   (0x0004)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0068   (0x0008)  MISSED

	/// Functions
	// Function /Script/UMG.CanvasPanelSlot.SetZOrder
	constexpr static const FunctionPointer<UCanvasPanelSlot, void, const int32_t> SetZOrder = { 0x3d74400, 0 }; 
	// Function /Script/UMG.CanvasPanelSlot.SetSize
	constexpr static const FunctionPointer<UCanvasPanelSlot, void, const FVector2D> SetSize = { 0x3d74b40, 1 }; 
	// Function /Script/UMG.CanvasPanelSlot.SetPosition
	constexpr static const FunctionPointer<UCanvasPanelSlot, void, const FVector2D> SetPosition = { 0x3d74cc0, 2 }; 
	// Function /Script/UMG.CanvasPanelSlot.SetOffsets
	constexpr static const FunctionPointer<UCanvasPanelSlot, void, const FMargin> SetOffsets = { 0x3d749b0, 3 }; 
	// Function /Script/UMG.CanvasPanelSlot.SetMinimum
	constexpr static const FunctionPointer<UCanvasPanelSlot, void, const FVector2D> SetMinimum = { 0x3d74250, 4 }; 
	// Function /Script/UMG.CanvasPanelSlot.SetMaximum
	constexpr static const FunctionPointer<UCanvasPanelSlot, void, const FVector2D> SetMaximum = { 0x3d740f0, 5 }; 
	// Function /Script/UMG.CanvasPanelSlot.SetLayout
	constexpr static const FunctionPointer<UCanvasPanelSlot, void, const FAnchorData&> SetLayout = { 0x3d74dd0, 6 }; 
	// Function /Script/UMG.CanvasPanelSlot.SetAutoSize
	constexpr static const FunctionPointer<UCanvasPanelSlot, void, const bool> SetAutoSize = { 0x3d74520, 7 }; 
	// Function /Script/UMG.CanvasPanelSlot.SetAnchors
	constexpr static const FunctionPointer<UCanvasPanelSlot, void, const FAnchors> SetAnchors = { 0x3d74830, 8 }; 
	// Function /Script/UMG.CanvasPanelSlot.SetAlignment
	constexpr static const FunctionPointer<UCanvasPanelSlot, void, const FVector2D> SetAlignment = { 0x3d746c0, 9 }; 
	// Function /Script/UMG.CanvasPanelSlot.GetZOrder
	constexpr static const FunctionPointer<UCanvasPanelSlot, int32_t> GetZOrder = { 0x3d743b0, 10 }; 
	// Function /Script/UMG.CanvasPanelSlot.GetSize
	constexpr static const FunctionPointer<UCanvasPanelSlot, FVector2D> GetSize = { 0x3d74a90, 11 }; 
	// Function /Script/UMG.CanvasPanelSlot.GetPosition
	constexpr static const FunctionPointer<UCanvasPanelSlot, FVector2D> GetPosition = { 0x3d74c10, 12 }; 
	// Function /Script/UMG.CanvasPanelSlot.GetOffsets
	constexpr static const FunctionPointer<UCanvasPanelSlot, FMargin> GetOffsets = { 0x3d74910, 13 }; 
	// Function /Script/UMG.CanvasPanelSlot.GetLayout
	constexpr static const FunctionPointer<UCanvasPanelSlot, FAnchorData> GetLayout = { 0x3d74d90, 14 }; 
	// Function /Script/UMG.CanvasPanelSlot.GetAutoSize
	constexpr static const FunctionPointer<UCanvasPanelSlot, bool> GetAutoSize = { 0x3d744d0, 15 }; 
	// Function /Script/UMG.CanvasPanelSlot.GetAnchors
	constexpr static const FunctionPointer<UCanvasPanelSlot, FAnchors> GetAnchors = { 0x3d74790, 16 }; 
	// Function /Script/UMG.CanvasPanelSlot.GetAlignment
	constexpr static const FunctionPointer<UCanvasPanelSlot, FVector2D> GetAlignment = { 0x3d74600, 17 }; 
};

/// Class /Script/UMG.CheckBox
/// Size: 0x07B8 (1976 bytes) (0x000120 - 0x0007B8) align n/a MaxSize: 0x07B8
class UCheckBox : public UContentWidget
{ 
public:
	ECheckBoxState                                     CheckedState;                                               // 0x0120   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0121   (0x0003)  MISSED
	FDelegateProperty                                  CheckedStateDelegate;                                       // 0x0124   (0x0010)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x0134   (0x0004)  MISSED
	FCheckBoxStyle                                     WidgetStyle;                                                // 0x0138   (0x05C8)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0700   (0x0008)  
	class USlateBrushAsset*                            UncheckedImage;                                             // 0x0708   (0x0008)  
	class USlateBrushAsset*                            UncheckedHoveredImage;                                      // 0x0710   (0x0008)  
	class USlateBrushAsset*                            UncheckedPressedImage;                                      // 0x0718   (0x0008)  
	class USlateBrushAsset*                            CheckedImage;                                               // 0x0720   (0x0008)  
	class USlateBrushAsset*                            CheckedHoveredImage;                                        // 0x0728   (0x0008)  
	class USlateBrushAsset*                            CheckedPressedImage;                                        // 0x0730   (0x0008)  
	class USlateBrushAsset*                            UndeterminedImage;                                          // 0x0738   (0x0008)  
	class USlateBrushAsset*                            UndeterminedHoveredImage;                                   // 0x0740   (0x0008)  
	class USlateBrushAsset*                            UndeterminedPressedImage;                                   // 0x0748   (0x0008)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0750   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0751   (0x0003)  MISSED
	FMargin                                            Padding;                                                    // 0x0754   (0x0010)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x0764   (0x0004)  MISSED
	FSlateColor                                        BorderBackgroundColor;                                      // 0x0768   (0x0028)  
	TEnumAsByte<EButtonClickMethod>                    ClickMethod;                                                // 0x0790   (0x0001)  
	TEnumAsByte<EButtonTouchMethod>                    TouchMethod;                                                // 0x0791   (0x0001)  
	TEnumAsByte<EButtonPressMethod>                    PressMethod;                                                // 0x0792   (0x0001)  
	bool                                               IsFocusable;                                                // 0x0793   (0x0001)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x0794   (0x0004)  MISSED
	FMulticastInlineDelegate                           OnCheckStateChanged;                                        // 0x0798   (0x0010)  
	unsigned char                                      UnknownData11_7[0x10];                                      // 0x07A8   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.CheckBox.SetTouchMethod
	constexpr static const FunctionPointer<UCheckBox, void, const TEnumAsByte<EButtonTouchMethod>> SetTouchMethod = { 0x3d75690, 0 }; 
	// Function /Script/UMG.CheckBox.SetPressMethod
	constexpr static const FunctionPointer<UCheckBox, void, const TEnumAsByte<EButtonPressMethod>> SetPressMethod = { 0x3d755b0, 1 }; 
	// Function /Script/UMG.CheckBox.SetIsChecked
	constexpr static const FunctionPointer<UCheckBox, void, const bool> SetIsChecked = { 0x3d75920, 2 }; 
	// Function /Script/UMG.CheckBox.SetClickMethod
	constexpr static const FunctionPointer<UCheckBox, void, const TEnumAsByte<EButtonClickMethod>> SetClickMethod = { 0x3d75770, 3 }; 
	// Function /Script/UMG.CheckBox.SetCheckedState
	constexpr static const FunctionPointer<UCheckBox, void, const ECheckBoxState> SetCheckedState = { 0x3d75850, 4 }; 
	// Function /Script/UMG.CheckBox.IsPressed
	constexpr static const FunctionPointer<UCheckBox, bool> IsPressed = { 0x3d75b00, 5 }; 
	// Function /Script/UMG.CheckBox.IsChecked
	constexpr static const FunctionPointer<UCheckBox, bool> IsChecked = { 0x3d75ab0, 6 }; 
	// Function /Script/UMG.CheckBox.GetCheckedState
	constexpr static const FunctionPointer<UCheckBox, ECheckBoxState> GetCheckedState = { 0x3d75a00, 7 }; 
};

/// Class /Script/UMG.CheckedStateBinding
/// Size: 0x0068 (104 bytes) (0x000060 - 0x000068) align n/a MaxSize: 0x0068
class UCheckedStateBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0060   (0x0008)  MISSED

	/// Functions
	// Function /Script/UMG.CheckedStateBinding.GetValue
	constexpr static const FunctionPointer<UCheckedStateBinding, ECheckBoxState> GetValue = { 0x3d76030, 0 }; 
};

/// Class /Script/UMG.CircularThrobber
/// Size: 0x01C8 (456 bytes) (0x000108 - 0x0001C8) align n/a MaxSize: 0x01C8
class UCircularThrobber : public UWidget
{ 
public:
	int32_t                                            NumberOfPieces;                                             // 0x0108   (0x0004)  
	float                                              Period;                                                     // 0x010C   (0x0004)  
	float                                              Radius;                                                     // 0x0110   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0114   (0x0004)  MISSED
	class USlateBrushAsset*                            PieceImage;                                                 // 0x0118   (0x0008)  
	FSlateBrush                                        Image;                                                      // 0x0120   (0x0090)  
	bool                                               bEnableRadius;                                              // 0x01B0   (0x0001)  
	unsigned char                                      UnknownData03_7[0x17];                                      // 0x01B1   (0x0017)  MISSED

	/// Functions
	// Function /Script/UMG.CircularThrobber.SetRadius
	constexpr static const FunctionPointer<UCircularThrobber, void, const float> SetRadius = { 0x3d764b0, 0 }; 
	// Function /Script/UMG.CircularThrobber.SetPeriod
	constexpr static const FunctionPointer<UCircularThrobber, void, const float> SetPeriod = { 0x3d76590, 1 }; 
	// Function /Script/UMG.CircularThrobber.SetNumberOfPieces
	constexpr static const FunctionPointer<UCircularThrobber, void, const int32_t> SetNumberOfPieces = { 0x3d76680, 2 }; 
};

/// Class /Script/UMG.ColorBinding
/// Size: 0x0068 (104 bytes) (0x000060 - 0x000068) align n/a MaxSize: 0x0068
class UColorBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0060   (0x0008)  MISSED

	/// Functions
	// Function /Script/UMG.ColorBinding.GetSlateValue
	constexpr static const FunctionPointer<UColorBinding, FSlateColor> GetSlateValue = { 0x3d770c0, 0 }; 
	// Function /Script/UMG.ColorBinding.GetLinearValue
	constexpr static const FunctionPointer<UColorBinding, FLinearColor> GetLinearValue = { 0x3d77080, 1 }; 
};

/// Class /Script/UMG.ComboBox
/// Size: 0x0140 (320 bytes) (0x000108 - 0x000140) align n/a MaxSize: 0x0140
class UComboBox : public UWidget
{ 
public:
	TArray<class UObject*>                             Items;                                                      // 0x0108   (0x0010)  
	FDelegateProperty                                  OnGenerateWidgetEvent;                                      // 0x0118   (0x0010)  
	bool                                               bIsFocusable;                                               // 0x0128   (0x0001)  
	unsigned char                                      UnknownData01_7[0x17];                                      // 0x0129   (0x0017)  MISSED
};

/// Class /Script/UMG.DragDropOperation
/// Size: 0x0088 (136 bytes) (0x000028 - 0x000088) align n/a MaxSize: 0x0088
class UDragDropOperation : public UObject
{ 
public:
	FString                                            Tag;                                                        // 0x0028   (0x0010)  
	class UObject*                                     Payload;                                                    // 0x0038   (0x0008)  
	class UWidget*                                     DefaultDragVisual;                                          // 0x0040   (0x0008)  
	EDragPivot                                         Pivot;                                                      // 0x0048   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	FVector2D                                          Offset;                                                     // 0x004C   (0x0008)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FMulticastInlineDelegate                           OnDrop;                                                     // 0x0058   (0x0010)  
	FMulticastInlineDelegate                           OnDragCancelled;                                            // 0x0068   (0x0010)  
	FMulticastInlineDelegate                           OnDragged;                                                  // 0x0078   (0x0010)  

	/// Functions
	// Function /Script/UMG.DragDropOperation.Drop
	constexpr static const FunctionPointer<UDragDropOperation, void, const FPointerEvent&> Drop = { 0x3d792d0, 0 }; 
	// Function /Script/UMG.DragDropOperation.Dragged
	constexpr static const FunctionPointer<UDragDropOperation, void, const FPointerEvent&> Dragged = { 0x3d78fd0, 1 }; 
	// Function /Script/UMG.DragDropOperation.DragCancelled
	constexpr static const FunctionPointer<UDragDropOperation, void, const FPointerEvent&> DragCancelled = { 0x3d79150, 2 }; 
};

/// Struct /Script/UMG.SlateChildSize
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FSlateChildSize
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	TEnumAsByte<ESlateSizeRule>                        SizeRule;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0005   (0x0003)  MISSED
};

/// Struct /Script/UMG.RadialBoxSettings
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FRadialBoxSettings
{ 
	bool                                               bDistributeItemsEvenly;                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	float                                              AngleBetweenItems;                                          // 0x0004   (0x0004)  
	float                                              StartingAngle;                                              // 0x0008   (0x0004)  
};

/// Class /Script/UMG.DynamicEntryBoxBase
/// Size: 0x01D8 (472 bytes) (0x000108 - 0x0001D8) align n/a MaxSize: 0x01D8
class UDynamicEntryBoxBase : public UWidget
{ 
public:
	EDynamicBoxType                                    EntryBoxType;                                               // 0x0108   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0109   (0x0003)  MISSED
	FVector2D                                          EntrySpacing;                                               // 0x010C   (0x0008)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0114   (0x0004)  MISSED
	TArray<FVector2D>                                  SpacingPattern;                                             // 0x0118   (0x0010)  
	FSlateChildSize                                    EntrySizeRule;                                              // 0x0128   (0x0008)  
	TEnumAsByte<EHorizontalAlignment>                  EntryHorizontalAlignment;                                   // 0x0130   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    EntryVerticalAlignment;                                     // 0x0131   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x0132   (0x0002)  MISSED
	int32_t                                            MaxElementSize;                                             // 0x0134   (0x0004)  
	FRadialBoxSettings                                 RadialBoxSettings;                                          // 0x0138   (0x000C)  
	unsigned char                                      UnknownData07_6[0x14];                                      // 0x0144   (0x0014)  MISSED
	FUserWidgetPool                                    EntryWidgetPool;                                            // 0x0158   (0x0080)  

	/// Functions
	// Function /Script/UMG.DynamicEntryBoxBase.SetRadialSettings
	constexpr static const FunctionPointer<UDynamicEntryBoxBase, void, const FRadialBoxSettings&> SetRadialSettings = { 0x3d7a520, 0 }; 
	// Function /Script/UMG.DynamicEntryBoxBase.SetEntrySpacing
	constexpr static const FunctionPointer<UDynamicEntryBoxBase, void, const FVector2D&> SetEntrySpacing = { 0x3d7a610, 1 }; 
	// Function /Script/UMG.DynamicEntryBoxBase.GetNumEntries
	constexpr static const FunctionPointer<UDynamicEntryBoxBase, int32_t> GetNumEntries = { 0x3d7a6f0, 2 }; 
	// Function /Script/UMG.DynamicEntryBoxBase.GetAllEntries
	constexpr static const FunctionPointer<UDynamicEntryBoxBase, TArray<UUserWidget*>> GetAllEntries = { 0x3d7a710, 3 }; 
};

/// Class /Script/UMG.DynamicEntryBox
/// Size: 0x01E0 (480 bytes) (0x0001D8 - 0x0001E0) align n/a MaxSize: 0x01E0
class UDynamicEntryBox : public UDynamicEntryBoxBase
{ 
public:
	class UClass*                                      EntryWidgetClass;                                           // 0x01D8   (0x0008)  

	/// Functions
	// Function /Script/UMG.DynamicEntryBox.Reset
	constexpr static const FunctionPointer<UDynamicEntryBox, void, const bool> Reset = { 0x3d79f40, 0 }; 
	// Function /Script/UMG.DynamicEntryBox.RemoveEntry
	constexpr static const FunctionPointer<UDynamicEntryBox, void, const UUserWidget*> RemoveEntry = { 0x3d79ad0, 1 }; 
	// Function /Script/UMG.DynamicEntryBox.BP_CreateEntryOfClass
	constexpr static const FunctionPointer<UDynamicEntryBox, UUserWidget*, const UClass*> BP_CreateEntryOfClass = { 0x3d79850, 2 }; 
	// Function /Script/UMG.DynamicEntryBox.BP_CreateEntry
	constexpr static const FunctionPointer<UDynamicEntryBox, UUserWidget*> BP_CreateEntry = { 0x3d79a90, 3 }; 
};

/// Class /Script/UMG.EditableText
/// Size: 0x0488 (1160 bytes) (0x000108 - 0x000488) align n/a MaxSize: 0x0488
class UEditableText : public UWidget
{ 
public:
	FText                                              text;                                                       // 0x0108   (0x0018)  
	FDelegateProperty                                  TextDelegate;                                               // 0x0120   (0x0010)  
	FText                                              HintText;                                                   // 0x0130   (0x0018)  
	FDelegateProperty                                  HintTextDelegate;                                           // 0x0148   (0x0010)  
	FEditableTextStyle                                 WidgetStyle;                                                // 0x0158   (0x0240)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0398   (0x0008)  
	class USlateBrushAsset*                            BackgroundImageSelected;                                    // 0x03A0   (0x0008)  
	class USlateBrushAsset*                            BackgroundImageComposing;                                   // 0x03A8   (0x0008)  
	class USlateBrushAsset*                            CaretImage;                                                 // 0x03B0   (0x0008)  
	FSlateFontInfo                                     Font;                                                       // 0x03B8   (0x0060)  
	FSlateColor                                        ColorAndOpacity;                                            // 0x0418   (0x0028)  
	bool                                               IsReadOnly;                                                 // 0x0440   (0x0001)  
	bool                                               IsPassword;                                                 // 0x0441   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0442   (0x0002)  MISSED
	float                                              MinimumDesiredWidth;                                        // 0x0444   (0x0004)  
	bool                                               IsCaretMovedWhenGainFocus;                                  // 0x0448   (0x0001)  
	bool                                               SelectAllTextWhenFocused;                                   // 0x0449   (0x0001)  
	bool                                               RevertTextOnEscape;                                         // 0x044A   (0x0001)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x044B   (0x0001)  
	bool                                               SelectAllTextOnCommit;                                      // 0x044C   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x044D   (0x0001)  
	TEnumAsByte<EVirtualKeyboardType>                  KeyboardType;                                               // 0x044E   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x044F   (0x0001)  
	EVirtualKeyboardTrigger                            VirtualKeyboardTrigger;                                     // 0x0450   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x0451   (0x0001)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x0452   (0x0001)  
	FShapedTextOptions                                 ShapedTextOptions;                                          // 0x0453   (0x0003)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0456   (0x0002)  MISSED
	FMulticastInlineDelegate                           OnTextChanged;                                              // 0x0458   (0x0010)  
	FMulticastInlineDelegate                           OnTextCommitted;                                            // 0x0468   (0x0010)  
	unsigned char                                      UnknownData05_7[0x10];                                      // 0x0478   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.EditableText.SetText
	constexpr static const FunctionPointer<UEditableText, void, const FText> SetText = { 0x3d7b110, 0 }; 
	// Function /Script/UMG.EditableText.SetJustification
	constexpr static const FunctionPointer<UEditableText, void, const TEnumAsByte<ETextJustify>> SetJustification = { 0x3d7aca0, 1 }; 
	// Function /Script/UMG.EditableText.SetIsReadOnly
	constexpr static const FunctionPointer<UEditableText, void, const bool> SetIsReadOnly = { 0x3d7ad70, 2 }; 
	// Function /Script/UMG.EditableText.SetIsPassword
	constexpr static const FunctionPointer<UEditableText, void, const bool> SetIsPassword = { 0x3d7b010, 3 }; 
	// Function /Script/UMG.EditableText.SetHintText
	constexpr static const FunctionPointer<UEditableText, void, const FText> SetHintText = { 0x3d7aec0, 4 }; 
	// Function /Script/UMG.EditableText.OnEditableTextCommittedEvent__DelegateSignature
	constexpr static const FunctionPointer<UEditableText, void, const FText&, const TEnumAsByte<ETextCommit>> OnEditableTextCommittedEvent__DelegateSignature = { 0x2bbb090, 5 }; 
	// Function /Script/UMG.EditableText.OnEditableTextChangedEvent__DelegateSignature
	constexpr static const FunctionPointer<UEditableText, void, const FText&> OnEditableTextChangedEvent__DelegateSignature = { 0x2bbb090, 6 }; 
	// Function /Script/UMG.EditableText.GetText
	constexpr static const FunctionPointer<UEditableText, FText> GetText = { 0x3d7b260, 7 }; 
};

/// Class /Script/UMG.EditableTextBox
/// Size: 0x0AB0 (2736 bytes) (0x000108 - 0x000AB0) align n/a MaxSize: 0x0AB0
class UEditableTextBox : public UWidget
{ 
public:
	FText                                              text;                                                       // 0x0108   (0x0018)  
	FDelegateProperty                                  TextDelegate;                                               // 0x0120   (0x0010)  
	FEditableTextBoxStyle                              WidgetStyle;                                                // 0x0130   (0x0868)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0998   (0x0008)  
	FText                                              HintText;                                                   // 0x09A0   (0x0018)  
	FDelegateProperty                                  HintTextDelegate;                                           // 0x09B8   (0x0010)  
	FSlateFontInfo                                     Font;                                                       // 0x09C8   (0x0060)  
	FLinearColor                                       ForegroundColor;                                            // 0x0A28   (0x0010)  
	FLinearColor                                       BackgroundColor;                                            // 0x0A38   (0x0010)  
	FLinearColor                                       ReadOnlyForegroundColor;                                    // 0x0A48   (0x0010)  
	bool                                               IsReadOnly;                                                 // 0x0A58   (0x0001)  
	bool                                               IsPassword;                                                 // 0x0A59   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0A5A   (0x0002)  MISSED
	float                                              MinimumDesiredWidth;                                        // 0x0A5C   (0x0004)  
	FMargin                                            Padding;                                                    // 0x0A60   (0x0010)  
	bool                                               IsCaretMovedWhenGainFocus;                                  // 0x0A70   (0x0001)  
	bool                                               SelectAllTextWhenFocused;                                   // 0x0A71   (0x0001)  
	bool                                               RevertTextOnEscape;                                         // 0x0A72   (0x0001)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x0A73   (0x0001)  
	bool                                               SelectAllTextOnCommit;                                      // 0x0A74   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x0A75   (0x0001)  
	TEnumAsByte<EVirtualKeyboardType>                  KeyboardType;                                               // 0x0A76   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x0A77   (0x0001)  
	EVirtualKeyboardTrigger                            VirtualKeyboardTrigger;                                     // 0x0A78   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x0A79   (0x0001)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x0A7A   (0x0001)  
	FShapedTextOptions                                 ShapedTextOptions;                                          // 0x0A7B   (0x0003)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0A7E   (0x0002)  MISSED
	FMulticastInlineDelegate                           OnTextChanged;                                              // 0x0A80   (0x0010)  
	FMulticastInlineDelegate                           OnTextCommitted;                                            // 0x0A90   (0x0010)  
	unsigned char                                      UnknownData05_7[0x10];                                      // 0x0AA0   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.EditableTextBox.SetText
	constexpr static const FunctionPointer<UEditableTextBox, void, const FText> SetText = { 0x3d7bf10, 0 }; 
	// Function /Script/UMG.EditableTextBox.SetJustification
	constexpr static const FunctionPointer<UEditableTextBox, void, const TEnumAsByte<ETextJustify>> SetJustification = { 0x3d7b880, 1 }; 
	// Function /Script/UMG.EditableTextBox.SetIsReadOnly
	constexpr static const FunctionPointer<UEditableTextBox, void, const bool> SetIsReadOnly = { 0x3d7bb10, 2 }; 
	// Function /Script/UMG.EditableTextBox.SetIsPassword
	constexpr static const FunctionPointer<UEditableTextBox, void, const bool> SetIsPassword = { 0x3d7ba10, 3 }; 
	// Function /Script/UMG.EditableTextBox.SetHintText
	constexpr static const FunctionPointer<UEditableTextBox, void, const FText> SetHintText = { 0x3d7bdc0, 4 }; 
	// Function /Script/UMG.EditableTextBox.SetError
	constexpr static const FunctionPointer<UEditableTextBox, void, const FText> SetError = { 0x3d7bc10, 5 }; 
	// Function /Script/UMG.EditableTextBox.OnEditableTextBoxCommittedEvent__DelegateSignature
	constexpr static const FunctionPointer<UEditableTextBox, void, const FText&, const TEnumAsByte<ETextCommit>> OnEditableTextBoxCommittedEvent__DelegateSignature = { 0x2bbb090, 6 }; 
	// Function /Script/UMG.EditableTextBox.OnEditableTextBoxChangedEvent__DelegateSignature
	constexpr static const FunctionPointer<UEditableTextBox, void, const FText&> OnEditableTextBoxChangedEvent__DelegateSignature = { 0x2bbb090, 7 }; 
	// Function /Script/UMG.EditableTextBox.HasError
	constexpr static const FunctionPointer<UEditableTextBox, bool> HasError = { 0x3d7b950, 8 }; 
	// Function /Script/UMG.EditableTextBox.GetText
	constexpr static const FunctionPointer<UEditableTextBox, FText> GetText = { 0x3d7c060, 9 }; 
	// Function /Script/UMG.EditableTextBox.ClearError
	constexpr static const FunctionPointer<UEditableTextBox, void> ClearError = { 0x3d7b9b0, 10 }; 
};

/// Class /Script/UMG.ExpandableArea
/// Size: 0x0350 (848 bytes) (0x000108 - 0x000350) align n/a MaxSize: 0x0350
class UExpandableArea : public UWidget
{ 
public:
	unsigned char                                      UnknownData03_8[0x8];                                       // 0x0108   (0x0008)  MISSED
	FExpandableAreaStyle                               Style;                                                      // 0x0110   (0x0130)  
	FSlateBrush                                        BorderBrush;                                                // 0x0240   (0x0090)  
	FSlateColor                                        BorderColor;                                                // 0x02D0   (0x0028)  
	bool                                               bIsExpanded;                                                // 0x02F8   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x02F9   (0x0003)  MISSED
	float                                              MaxHeight;                                                  // 0x02FC   (0x0004)  
	FMargin                                            HeaderPadding;                                              // 0x0300   (0x0010)  
	FMargin                                            AreaPadding;                                                // 0x0310   (0x0010)  
	FMulticastInlineDelegate                           OnExpansionChanged;                                         // 0x0320   (0x0010)  
	class UWidget*                                     HeaderContent;                                              // 0x0330   (0x0008)  
	class UWidget*                                     BodyContent;                                                // 0x0338   (0x0008)  
	unsigned char                                      UnknownData05_7[0x10];                                      // 0x0340   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.ExpandableArea.SetIsExpanded_Animated
	constexpr static const FunctionPointer<UExpandableArea, void, const bool> SetIsExpanded_Animated = { 0x3d7c700, 0 }; 
	// Function /Script/UMG.ExpandableArea.SetIsExpanded
	constexpr static const FunctionPointer<UExpandableArea, void, const bool> SetIsExpanded = { 0x3d7c7f0, 1 }; 
	// Function /Script/UMG.ExpandableArea.GetIsExpanded
	constexpr static const FunctionPointer<UExpandableArea, bool> GetIsExpanded = { 0x3d7c8e0, 2 }; 
};

/// Class /Script/UMG.FloatBinding
/// Size: 0x0060 (96 bytes) (0x000060 - 0x000060) align n/a MaxSize: 0x0060
class UFloatBinding : public UPropertyBinding
{ 
public:

	/// Functions
	// Function /Script/UMG.FloatBinding.GetValue
	constexpr static const FunctionPointer<UFloatBinding, float> GetValue = { 0x3d7cd20, 0 }; 
};

/// Class /Script/UMG.GridPanel
/// Size: 0x0150 (336 bytes) (0x000120 - 0x000150) align n/a MaxSize: 0x0150
class UGridPanel : public UPanelWidget
{ 
public:
	TArray<float>                                      ColumnFill;                                                 // 0x0120   (0x0010)  
	TArray<float>                                      RowFill;                                                    // 0x0130   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0140   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.GridPanel.SetRowFill
	constexpr static const FunctionPointer<UGridPanel, void, const int32_t, const float> SetRowFill = { 0x3d7d410, 0 }; 
	// Function /Script/UMG.GridPanel.SetColumnFill
	constexpr static const FunctionPointer<UGridPanel, void, const int32_t, const float> SetColumnFill = { 0x3d7d5f0, 1 }; 
	// Function /Script/UMG.GridPanel.AddChildToGrid
	constexpr static const FunctionPointer<UGridPanel, UGridSlot*, const UWidget*, const int32_t, const int32_t> AddChildToGrid = { 0x3d7d7d0, 2 }; 
};

/// Class /Script/UMG.GridSlot
/// Size: 0x0070 (112 bytes) (0x000038 - 0x000070) align n/a MaxSize: 0x0070
class UGridSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x004A   (0x0002)  MISSED
	int32_t                                            Row;                                                        // 0x004C   (0x0004)  
	int32_t                                            RowSpan;                                                    // 0x0050   (0x0004)  
	int32_t                                            Column;                                                     // 0x0054   (0x0004)  
	int32_t                                            ColumnSpan;                                                 // 0x0058   (0x0004)  
	int32_t                                            Layer;                                                      // 0x005C   (0x0004)  
	FVector2D                                          Nudge;                                                      // 0x0060   (0x0008)  
	unsigned char                                      UnknownData03_7[0x8];                                       // 0x0068   (0x0008)  MISSED

	/// Functions
	// Function /Script/UMG.GridSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UGridSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d7df20, 0 }; 
	// Function /Script/UMG.GridSlot.SetRowSpan
	constexpr static const FunctionPointer<UGridSlot, void, const int32_t> SetRowSpan = { 0x3d7e440, 1 }; 
	// Function /Script/UMG.GridSlot.SetRow
	constexpr static const FunctionPointer<UGridSlot, void, const int32_t> SetRow = { 0x3d7e520, 2 }; 
	// Function /Script/UMG.GridSlot.SetPadding
	constexpr static const FunctionPointer<UGridSlot, void, const FMargin> SetPadding = { 0x3d7e5f0, 3 }; 
	// Function /Script/UMG.GridSlot.SetNudge
	constexpr static const FunctionPointer<UGridSlot, void, const FVector2D> SetNudge = { 0x3d7e0c0, 4 }; 
	// Function /Script/UMG.GridSlot.SetLayer
	constexpr static const FunctionPointer<UGridSlot, void, const int32_t> SetLayer = { 0x3d7e1c0, 5 }; 
	// Function /Script/UMG.GridSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UGridSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d7dff0, 6 }; 
	// Function /Script/UMG.GridSlot.SetColumnSpan
	constexpr static const FunctionPointer<UGridSlot, void, const int32_t> SetColumnSpan = { 0x3d7e290, 7 }; 
	// Function /Script/UMG.GridSlot.SetColumn
	constexpr static const FunctionPointer<UGridSlot, void, const int32_t> SetColumn = { 0x3d7e370, 8 }; 
};

/// Class /Script/UMG.HorizontalBox
/// Size: 0x0130 (304 bytes) (0x000120 - 0x000130) align n/a MaxSize: 0x0130
class UHorizontalBox : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0120   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.HorizontalBox.AddChildToHorizontalBox
	constexpr static const FunctionPointer<UHorizontalBox, UHorizontalBoxSlot*, const UWidget*> AddChildToHorizontalBox = { 0x3d7ec30, 0 }; 
};

/// Class /Script/UMG.HorizontalBoxSlot
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UHorizontalBoxSlot : public UPanelSlot
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0038   (0x0008)  MISSED
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	FSlateChildSize                                    Size;                                                       // 0x0050   (0x0008)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0058   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0059   (0x0001)  
	unsigned char                                      UnknownData03_7[0x6];                                       // 0x005A   (0x0006)  MISSED

	/// Functions
	// Function /Script/UMG.HorizontalBoxSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UHorizontalBoxSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d7f1d0, 0 }; 
	// Function /Script/UMG.HorizontalBoxSlot.SetSize
	constexpr static const FunctionPointer<UHorizontalBoxSlot, void, const FSlateChildSize> SetSize = { 0x3d7f370, 1 }; 
	// Function /Script/UMG.HorizontalBoxSlot.SetPadding
	constexpr static const FunctionPointer<UHorizontalBoxSlot, void, const FMargin> SetPadding = { 0x3d7f440, 2 }; 
	// Function /Script/UMG.HorizontalBoxSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UHorizontalBoxSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d7f2a0, 3 }; 
};

/// Class /Script/UMG.Image
/// Size: 0x0240 (576 bytes) (0x000108 - 0x000240) align n/a MaxSize: 0x0240
class UImage : public UWidget
{ 
public:
	FSlateBrush                                        Brush;                                                      // 0x0108   (0x0090)  
	FSoftObjectPath                                    AsyncResourcePath;                                          // 0x0198   (0x0018)  
	class USlateBrushResourceAsset*                    ResourceAsset;                                              // 0x01B0   (0x0008)  
	FName                                              ResourceAction;                                             // 0x01B8   (0x0008)  
	FDelegateProperty                                  BrushDelegate;                                              // 0x01C0   (0x0010)  
	FLinearColor                                       ColorAndOpacity;                                            // 0x01D0   (0x0010)  
	FDelegateProperty                                  ColorAndOpacityDelegate;                                    // 0x01E0   (0x0010)  
	bool                                               bFlipForRightToLeftFlowDirection;                           // 0x01F0   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x01F1   (0x0003)  MISSED
	FDelegateProperty                                  OnMouseButtonDownEvent;                                     // 0x01F4   (0x0010)  
	unsigned char                                      UnknownData03_7[0x3C];                                      // 0x0204   (0x003C)  MISSED

	/// Functions
	// Function /Script/UMG.Image.SetOpacity
	constexpr static const FunctionPointer<UImage, void, const float> SetOpacity = { 0x3d80bf0, 0 }; 
	// Function /Script/UMG.Image.SetColorAndOpacity
	constexpr static const FunctionPointer<UImage, void, const FLinearColor> SetColorAndOpacity = { 0x3d80ce0, 1 }; 
	// Function /Script/UMG.Image.SetBrushTintColor
	constexpr static const FunctionPointer<UImage, void, const FSlateColor> SetBrushTintColor = { 0x3d80910, 2 }; 
	// Function /Script/UMG.Image.SetBrushSize
	constexpr static const FunctionPointer<UImage, void, const FVector2D> SetBrushSize = { 0x3d80a60, 3 }; 
	// Function /Script/UMG.Image.SetBrushResourceObject
	constexpr static const FunctionPointer<UImage, void, const UObject*> SetBrushResourceObject = { 0x3d80830, 4 }; 
	// Function /Script/UMG.Image.SetBrushFromTextureDynamic
	constexpr static const FunctionPointer<UImage, void, const UTexture2DDynamic*, const bool> SetBrushFromTextureDynamic = { 0x3d7ff50, 5 }; 
	// Function /Script/UMG.Image.SetBrushFromTexture
	constexpr static const FunctionPointer<UImage, void, const UTexture2D*, const bool> SetBrushFromTexture = { 0x3d80250, 6 }; 
	// Function /Script/UMG.Image.SetBrushFromSoftTexture
	constexpr static const FunctionPointer<UImage, void, const TWeakObjectPtr<UTexture2D*>, const bool> SetBrushFromSoftTexture = { 0x3d7fb20, 7 }; 
	// Function /Script/UMG.Image.SetBrushFromSoftMaterial
	constexpr static const FunctionPointer<UImage, void, const TWeakObjectPtr<UMaterialInterface*>> SetBrushFromSoftMaterial = { 0x3d7f9c0, 8 }; 
	// Function /Script/UMG.Image.SetBrushFromResourceAsset
	constexpr static const FunctionPointer<UImage, void, const FName, const TEnumAsByte<ESlateBrushResourceType>> SetBrushFromResourceAsset = { 0x3d80680, 9 }; 
	// Function /Script/UMG.Image.SetBrushFromMaterial
	constexpr static const FunctionPointer<UImage, void, const UMaterialInterface*> SetBrushFromMaterial = { 0x3d7fe70, 10 }; 
	// Function /Script/UMG.Image.SetBrushFromAtlasInterface
	constexpr static const FunctionPointer<UImage, void, const TScriptInterface<Class>, const bool> SetBrushFromAtlasInterface = { 0x3d800c0, 11 }; 
	// Function /Script/UMG.Image.SetBrushFromAsset
	constexpr static const FunctionPointer<UImage, void, const USlateBrushAsset*> SetBrushFromAsset = { 0x3d803c0, 12 }; 
	// Function /Script/UMG.Image.SetBrush
	constexpr static const FunctionPointer<UImage, void, const FSlateBrush&> SetBrush = { 0x3d804a0, 13 }; 
	// Function /Script/UMG.Image.LoadBrushAsyncResourceImmidate
	constexpr static const FunctionPointer<UImage, void> LoadBrushAsyncResourceImmidate = { 0x3d7fd40, 14 }; 
	// Function /Script/UMG.Image.LoadBrushAsyncResource
	constexpr static const FunctionPointer<UImage, void> LoadBrushAsyncResource = { 0x3d7fe50, 15 }; 
	// Function /Script/UMG.Image.GetDynamicMaterial
	constexpr static const FunctionPointer<UImage, UMaterialInstanceDynamic*> GetDynamicMaterial = { 0x3d7f990, 16 }; 
	// Function /Script/UMG.Image.ClearBrushAsyncResource
	constexpr static const FunctionPointer<UImage, void> ClearBrushAsyncResource = { 0x3d7fd10, 17 }; 
};

/// Class /Script/UMG.InputKeySelector
/// Size: 0x0748 (1864 bytes) (0x000108 - 0x000748) align n/a MaxSize: 0x0748
class UInputKeySelector : public UWidget
{ 
public:
	FButtonStyle                                       WidgetStyle;                                                // 0x0108   (0x0298)  
	FTextBlockStyle                                    TextStyle;                                                  // 0x03A0   (0x0290)  
	FInputChord                                        SelectedKey;                                                // 0x0630   (0x0020)  
	FSlateFontInfo                                     Font;                                                       // 0x0650   (0x0060)  
	FMargin                                            Margin;                                                     // 0x06B0   (0x0010)  
	FLinearColor                                       ColorAndOpacity;                                            // 0x06C0   (0x0010)  
	FText                                              KeySelectionText;                                           // 0x06D0   (0x0018)  
	FText                                              NoKeySpecifiedText;                                         // 0x06E8   (0x0018)  
	bool                                               bAllowModifierKeys;                                         // 0x0700   (0x0001)  
	bool                                               bAllowGamepadKeys;                                          // 0x0701   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x0702   (0x0006)  MISSED
	TArray<FKey>                                       EscapeKeys;                                                 // 0x0708   (0x0010)  
	FMulticastInlineDelegate                           OnKeySelected;                                              // 0x0718   (0x0010)  
	FMulticastInlineDelegate                           OnIsSelectingKeyChanged;                                    // 0x0728   (0x0010)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0738   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.InputKeySelector.SetTextBlockVisibility
	constexpr static const FunctionPointer<UInputKeySelector, void, const ESlateVisibility> SetTextBlockVisibility = { 0x3d816d0, 0 }; 
	// Function /Script/UMG.InputKeySelector.SetSelectedKey
	constexpr static const FunctionPointer<UInputKeySelector, void, const FInputChord&> SetSelectedKey = { 0x3d81dd0, 1 }; 
	// Function /Script/UMG.InputKeySelector.SetNoKeySpecifiedText
	constexpr static const FunctionPointer<UInputKeySelector, void, const FText> SetNoKeySpecifiedText = { 0x3d81a30, 2 }; 
	// Function /Script/UMG.InputKeySelector.SetKeySelectionText
	constexpr static const FunctionPointer<UInputKeySelector, void, const FText> SetKeySelectionText = { 0x3d81c00, 3 }; 
	// Function /Script/UMG.InputKeySelector.SetEscapeKeys
	constexpr static const FunctionPointer<UInputKeySelector, void, const TArray<FKey>&> SetEscapeKeys = { 0x3d814f0, 4 }; 
	// Function /Script/UMG.InputKeySelector.SetAllowModifierKeys
	constexpr static const FunctionPointer<UInputKeySelector, void, const bool> SetAllowModifierKeys = { 0x3d81940, 5 }; 
	// Function /Script/UMG.InputKeySelector.SetAllowGamepadKeys
	constexpr static const FunctionPointer<UInputKeySelector, void, const bool> SetAllowGamepadKeys = { 0x3d81850, 6 }; 
	// Function /Script/UMG.InputKeySelector.OnKeySelected__DelegateSignature
	constexpr static const FunctionPointer<UInputKeySelector, void, const FInputChord> OnKeySelected__DelegateSignature = { 0x2bbb090, 7 }; 
	// Function /Script/UMG.InputKeySelector.OnIsSelectingKeyChanged__DelegateSignature
	constexpr static const FunctionPointer<UInputKeySelector, void> OnIsSelectingKeyChanged__DelegateSignature = { 0x2bbb090, 8 }; 
	// Function /Script/UMG.InputKeySelector.GetIsSelectingKey
	constexpr static const FunctionPointer<UInputKeySelector, bool> GetIsSelectingKey = { 0x3d81810, 9 }; 
};

/// Class /Script/UMG.Int32Binding
/// Size: 0x0060 (96 bytes) (0x000060 - 0x000060) align n/a MaxSize: 0x0060
class UInt32Binding : public UPropertyBinding
{ 
public:

	/// Functions
	// Function /Script/UMG.Int32Binding.GetValue
	constexpr static const FunctionPointer<UInt32Binding, int32_t> GetValue = { 0x3d82470, 0 }; 
};

/// Class /Script/UMG.InvalidationBox
/// Size: 0x0138 (312 bytes) (0x000120 - 0x000138) align n/a MaxSize: 0x0138
class UInvalidationBox : public UContentWidget
{ 
public:
	bool                                               bCanCache;                                                  // 0x0120   (0x0001)  
	bool                                               CacheRelativeTransforms;                                    // 0x0121   (0x0001)  
	unsigned char                                      UnknownData01_7[0x16];                                      // 0x0122   (0x0016)  MISSED

	/// Functions
	// Function /Script/UMG.InvalidationBox.SetCanCache
	constexpr static const FunctionPointer<UInvalidationBox, void, const bool> SetCanCache = { 0x3d82870, 0 }; 
	// Function /Script/UMG.InvalidationBox.InvalidateCache
	constexpr static const FunctionPointer<UInvalidationBox, void> InvalidateCache = { 0x11615e0, 1 }; 
	// Function /Script/UMG.InvalidationBox.GetCanCache
	constexpr static const FunctionPointer<UInvalidationBox, bool> GetCanCache = { 0x3d82960, 2 }; 
};

/// Class /Script/UMG.UserListEntry
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UUserListEntry : public UInterface
{ 
public:

	/// Functions
	// Function /Script/UMG.UserListEntry.BP_OnListItemSelectable
	constexpr static const FunctionPointer<UUserListEntry, void, const bool&> BP_OnListItemSelectable = { 0x2bbb090, 0 }; 
	// Function /Script/UMG.UserListEntry.BP_OnItemSelectionChanged
	constexpr static const FunctionPointer<UUserListEntry, void, const bool> BP_OnItemSelectionChanged = { 0x2bbb090, 1 }; 
	// Function /Script/UMG.UserListEntry.BP_OnItemPressChanged
	constexpr static const FunctionPointer<UUserListEntry, void, const bool> BP_OnItemPressChanged = { 0x2bbb090, 2 }; 
	// Function /Script/UMG.UserListEntry.BP_OnItemHoverChanged
	constexpr static const FunctionPointer<UUserListEntry, void, const bool> BP_OnItemHoverChanged = { 0x2bbb090, 3 }; 
	// Function /Script/UMG.UserListEntry.BP_OnItemExpansionChanged
	constexpr static const FunctionPointer<UUserListEntry, void, const bool> BP_OnItemExpansionChanged = { 0x2bbb090, 4 }; 
	// Function /Script/UMG.UserListEntry.BP_OnEntryReleased
	constexpr static const FunctionPointer<UUserListEntry, void> BP_OnEntryReleased = { 0x2bbb090, 5 }; 
};

/// Class /Script/UMG.UserListEntryLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UUserListEntryLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/UMG.UserListEntryLibrary.IsListItemSelected
	constexpr static const FunctionPointer<UUserListEntryLibrary, bool, const TScriptInterface<Class>> IsListItemSelected = { 0x3d835d0, 0 }; 
	// Function /Script/UMG.UserListEntryLibrary.IsListItemExpanded
	constexpr static const FunctionPointer<UUserListEntryLibrary, bool, const TScriptInterface<Class>> IsListItemExpanded = { 0x3d834e0, 1 }; 
	// Function /Script/UMG.UserListEntryLibrary.GetOwningListView
	constexpr static const FunctionPointer<UUserListEntryLibrary, UListViewBase*, const TScriptInterface<Class>> GetOwningListView = { 0x3d83330, 2 }; 
};

/// Class /Script/UMG.UserObjectListEntry
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UUserObjectListEntry : public UUserListEntry
{ 
public:

	/// Functions
	// Function /Script/UMG.UserObjectListEntry.OnListItemObjectSet
	constexpr static const FunctionPointer<UUserObjectListEntry, void, const UObject*> OnListItemObjectSet = { 0x2bbb090, 0 }; 
};

/// Class /Script/UMG.UserObjectListEntryLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/UMG.UserObjectListEntryLibrary.GetListItemObject
	constexpr static const FunctionPointer<UUserObjectListEntryLibrary, UObject*, const TScriptInterface<Class>> GetListItemObject = { 0x3d83e60, 0 }; 
};

/// Class /Script/UMG.ListViewDesignerPreviewItem
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UListViewDesignerPreviewItem : public UObject
{ 
public:
};

/// Class /Script/UMG.MenuAnchor
/// Size: 0x0170 (368 bytes) (0x000120 - 0x000170) align n/a MaxSize: 0x0170
class UMenuAnchor : public UContentWidget
{ 
public:
	class UClass*                                      MenuClass;                                                  // 0x0120   (0x0008)  
	FDelegateProperty                                  OnGetMenuContentEvent;                                      // 0x0128   (0x0010)  
	FDelegateProperty                                  OnGetUserMenuContentEvent;                                  // 0x0138   (0x0010)  
	TEnumAsByte<EMenuPlacement>                        Placement;                                                  // 0x0148   (0x0001)  
	bool                                               bFitInWindow;                                               // 0x0149   (0x0001)  
	bool                                               ShouldDeferPaintingAfterWindowContent;                      // 0x014A   (0x0001)  
	bool                                               UseApplicationMenuStack;                                    // 0x014B   (0x0001)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x014C   (0x0004)  MISSED
	FMulticastInlineDelegate                           OnMenuOpenChanged;                                          // 0x0150   (0x0010)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0160   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.MenuAnchor.ToggleOpen
	constexpr static const FunctionPointer<UMenuAnchor, void, const bool> ToggleOpen = { 0x3d87630, 0 }; 
	// Function /Script/UMG.MenuAnchor.ShouldOpenDueToClick
	constexpr static const FunctionPointer<UMenuAnchor, bool> ShouldOpenDueToClick = { 0x3d87400, 1 }; 
	// Function /Script/UMG.MenuAnchor.SetPlacement
	constexpr static const FunctionPointer<UMenuAnchor, void, const TEnumAsByte<EMenuPlacement>> SetPlacement = { 0x3d87850, 2 }; 
	// Function /Script/UMG.MenuAnchor.Open
	constexpr static const FunctionPointer<UMenuAnchor, void, const bool> Open = { 0x3d87510, 3 }; 
	// Function /Script/UMG.MenuAnchor.IsOpen
	constexpr static const FunctionPointer<UMenuAnchor, bool> IsOpen = { 0x3d87470, 4 }; 
	// Function /Script/UMG.MenuAnchor.HasOpenSubMenus
	constexpr static const FunctionPointer<UMenuAnchor, bool> HasOpenSubMenus = { 0x3d87350, 5 }; 
	// Function /Script/UMG.MenuAnchor.GetUserWidget__DelegateSignature
	constexpr static const FunctionPointer<UMenuAnchor, UUserWidget*> GetUserWidget__DelegateSignature = { 0x2bbb090, 6 }; 
	// Function /Script/UMG.MenuAnchor.GetMenuPosition
	constexpr static const FunctionPointer<UMenuAnchor, FVector2D> GetMenuPosition = { 0x3d873a0, 7 }; 
	// Function /Script/UMG.MenuAnchor.FitInWindow
	constexpr static const FunctionPointer<UMenuAnchor, void, const bool> FitInWindow = { 0x3d87750, 8 }; 
	// Function /Script/UMG.MenuAnchor.Close
	constexpr static const FunctionPointer<UMenuAnchor, void> Close = { 0x3d874d0, 9 }; 
};

/// Class /Script/UMG.MouseCursorBinding
/// Size: 0x0060 (96 bytes) (0x000060 - 0x000060) align n/a MaxSize: 0x0060
class UMouseCursorBinding : public UPropertyBinding
{ 
public:

	/// Functions
	// Function /Script/UMG.MouseCursorBinding.GetValue
	constexpr static const FunctionPointer<UMouseCursorBinding, TEnumAsByte<EMouseCursor>> GetValue = { 0x3d87e60, 0 }; 
};

/// Class /Script/MovieScene.MovieSceneEntitySystem
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneEntitySystem : public UObject
{ 
public:
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0028   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0030   (0x0010)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePropertySystem
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align n/a MaxSize: 0x0050
class UMovieScenePropertySystem : public UMovieSceneEntitySystem
{ 
public:
	class UMovieScenePropertyInstantiatorSystem*       InstantiatorSystem;                                         // 0x0040   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0048   (0x0008)  MISSED
};

/// Class /Script/UMG.MovieScene2DTransformPropertySystem
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align n/a MaxSize: 0x0050
class UMovieScene2DTransformPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSignedObject
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UMovieSceneSignedObject : public UObject
{ 
public:
	FGuid                                              Signature;                                                  // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0038   (0x0018)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSectionEvalOptions
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FMovieSceneSectionEvalOptions
{ 
	bool                                               bCanEditCompletionMode;                                     // 0x0000   (0x0001)  
	EMovieSceneCompletionMode                          CompletionMode;                                             // 0x0001   (0x0001)  
};

/// Struct /Script/MovieScene.MovieSceneEasingSettings
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FMovieSceneEasingSettings
{ 
	int32_t                                            AutoEaseInDuration;                                         // 0x0000   (0x0004)  
	int32_t                                            AutoEaseOutDuration;                                        // 0x0004   (0x0004)  
	TScriptInterface<Class>                            EaseIn;                                                     // 0x0008   (0x0010)  
	bool                                               bManualEaseIn;                                              // 0x0018   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0019   (0x0003)  MISSED
	int32_t                                            ManualEaseInDuration;                                       // 0x001C   (0x0004)  
	TScriptInterface<Class>                            EaseOut;                                                    // 0x0020   (0x0010)  
	bool                                               bManualEaseOut;                                             // 0x0030   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0031   (0x0003)  MISSED
	int32_t                                            ManualEaseOutDuration;                                      // 0x0034   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneFrameRange
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneFrameRange
{ 
	unsigned char                                      UnknownData01_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/MovieScene.OptionalMovieSceneBlendType
/// Size: 0x0002 (2 bytes) (0x000000 - 0x000002) align n/a MaxSize: 0x0002
struct FOptionalMovieSceneBlendType
{ 
	EMovieSceneBlendType                               BlendType;                                                  // 0x0000   (0x0001)  
	bool                                               bIsValid;                                                   // 0x0001   (0x0001)  
};

/// Class /Script/MovieScene.MovieSceneSection
/// Size: 0x00E8 (232 bytes) (0x000050 - 0x0000E8) align n/a MaxSize: 0x00E8
class UMovieSceneSection : public UMovieSceneSignedObject
{ 
public:
	FMovieSceneSectionEvalOptions                      EvalOptions;                                                // 0x0050   (0x0002)  
	unsigned char                                      UnknownData04_6[0x6];                                       // 0x0052   (0x0006)  MISSED
	FMovieSceneEasingSettings                          Easing;                                                     // 0x0058   (0x0038)  
	FMovieSceneFrameRange                              SectionRange;                                               // 0x0090   (0x0010)  
	FFrameNumber                                       PreRollFrames;                                              // 0x00A0   (0x0004)  
	FFrameNumber                                       PostRollFrames;                                             // 0x00A4   (0x0004)  
	int32_t                                            RowIndex;                                                   // 0x00A8   (0x0004)  
	int32_t                                            OverlapPriority;                                            // 0x00AC   (0x0004)  
	bool                                               bIsActive : 1;                                              // 0x00B0:0 (0x0001)  
	bool                                               bIsLocked : 1;                                              // 0x00B0:1 (0x0001)  
	unsigned char                                      UnknownData05_5[0x3];                                       // 0x00B1   (0x0003)  MISSED
	float                                              StartTime;                                                  // 0x00B4   (0x0004)  
	float                                              EndTime;                                                    // 0x00B8   (0x0004)  
	float                                              PrerollTime;                                                // 0x00BC   (0x0004)  
	float                                              PostrollTime;                                               // 0x00C0   (0x0004)  
	bool                                               bIsInfinite : 1;                                            // 0x00C4:0 (0x0001)  
	unsigned char                                      UnknownData06_5[0x3];                                       // 0x00C5   (0x0003)  MISSED
	bool                                               bSupportsInfiniteRange;                                     // 0x00C8   (0x0001)  
	FOptionalMovieSceneBlendType                       BlendType;                                                  // 0x00C9   (0x0002)  
	unsigned char                                      UnknownData07_7[0x1D];                                      // 0x00CB   (0x001D)  MISSED

	/// Functions
	// Function /Script/MovieScene.MovieSceneSection.SetRowIndex
	constexpr static const FunctionPointer<UMovieSceneSection, void, const int32_t> SetRowIndex = { 0x3b626c0, 0 }; 
	// Function /Script/MovieScene.MovieSceneSection.SetPreRollFrames
	constexpr static const FunctionPointer<UMovieSceneSection, void, const int32_t> SetPreRollFrames = { 0x3b622d0, 1 }; 
	// Function /Script/MovieScene.MovieSceneSection.SetPostRollFrames
	constexpr static const FunctionPointer<UMovieSceneSection, void, const int32_t> SetPostRollFrames = { 0x3b621d0, 2 }; 
	// Function /Script/MovieScene.MovieSceneSection.SetOverlapPriority
	constexpr static const FunctionPointer<UMovieSceneSection, void, const int32_t> SetOverlapPriority = { 0x3b625f0, 3 }; 
	// Function /Script/MovieScene.MovieSceneSection.SetIsLocked
	constexpr static const FunctionPointer<UMovieSceneSection, void, const bool> SetIsLocked = { 0x3b623e0, 4 }; 
	// Function /Script/MovieScene.MovieSceneSection.SetIsActive
	constexpr static const FunctionPointer<UMovieSceneSection, void, const bool> SetIsActive = { 0x3b624f0, 5 }; 
	// Function /Script/MovieScene.MovieSceneSection.SetCompletionMode
	constexpr static const FunctionPointer<UMovieSceneSection, void, const EMovieSceneCompletionMode> SetCompletionMode = { 0x3b62890, 6 }; 
	// Function /Script/MovieScene.MovieSceneSection.SetBlendType
	constexpr static const FunctionPointer<UMovieSceneSection, void, const EMovieSceneBlendType> SetBlendType = { 0x3b62790, 7 }; 
	// Function /Script/MovieScene.MovieSceneSection.IsLocked
	constexpr static const FunctionPointer<UMovieSceneSection, bool> IsLocked = { 0x3b623b0, 8 }; 
	// Function /Script/MovieScene.MovieSceneSection.IsActive
	constexpr static const FunctionPointer<UMovieSceneSection, bool> IsActive = { 0x3b624c0, 9 }; 
	// Function /Script/MovieScene.MovieSceneSection.GetRowIndex
	constexpr static const FunctionPointer<UMovieSceneSection, int32_t> GetRowIndex = { 0x19e8b20, 10 }; 
	// Function /Script/MovieScene.MovieSceneSection.GetPreRollFrames
	constexpr static const FunctionPointer<UMovieSceneSection, int32_t> GetPreRollFrames = { 0x3b622b0, 11 }; 
	// Function /Script/MovieScene.MovieSceneSection.GetPostRollFrames
	constexpr static const FunctionPointer<UMovieSceneSection, int32_t> GetPostRollFrames = { 0x3b621b0, 12 }; 
	// Function /Script/MovieScene.MovieSceneSection.GetOverlapPriority
	constexpr static const FunctionPointer<UMovieSceneSection, int32_t> GetOverlapPriority = { 0x3b625d0, 13 }; 
	// Function /Script/MovieScene.MovieSceneSection.GetCompletionMode
	constexpr static const FunctionPointer<UMovieSceneSection, EMovieSceneCompletionMode> GetCompletionMode = { 0x3b62960, 14 }; 
	// Function /Script/MovieScene.MovieSceneSection.GetBlendType
	constexpr static const FunctionPointer<UMovieSceneSection, FOptionalMovieSceneBlendType> GetBlendType = { 0x3b62860, 15 }; 
};

/// Struct /Script/UMG.MovieScene2DTransformMask
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FMovieScene2DTransformMask
{ 
	uint32_t                                           Mask;                                                       // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneChannel
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FMovieSceneChannel
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTangentData
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FMovieSceneTangentData
{ 
	float                                              ArriveTangent;                                              // 0x0000   (0x0004)  
	float                                              LeaveTangent;                                               // 0x0004   (0x0004)  
	float                                              ArriveTangentWeight;                                        // 0x0008   (0x0004)  
	float                                              LeaveTangentWeight;                                         // 0x000C   (0x0004)  
	TEnumAsByte<ERichCurveTangentWeightMode>           TangentWeightMode;                                          // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneFloatValue
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FMovieSceneFloatValue
{ 
	float                                              Value;                                                      // 0x0000   (0x0004)  
	FMovieSceneTangentData                             Tangent;                                                    // 0x0004   (0x0014)  
	TEnumAsByte<ERichCurveInterpMode>                  InterpMode;                                                 // 0x0018   (0x0001)  
	TEnumAsByte<ERichCurveTangentMode>                 TangentMode;                                                // 0x0019   (0x0001)  
	char                                               PaddingByte;                                                // 0x001A   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1];                                       // 0x001B   (0x0001)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneKeyHandleMap
/// Size: 0x0060 (96 bytes) (0x000060 - 0x000060) align n/a MaxSize: 0x0060
struct FMovieSceneKeyHandleMap : FKeyHandleLookupTable
{ 
};

/// Struct /Script/MovieScene.MovieSceneFloatChannel
/// Size: 0x00A0 (160 bytes) (0x000008 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FMovieSceneFloatChannel : FMovieSceneChannel
{ 
	TEnumAsByte<ERichCurveExtrapolation>               PreInfinityExtrap;                                          // 0x0008   (0x0001)  
	TEnumAsByte<ERichCurveExtrapolation>               PostInfinityExtrap;                                         // 0x0009   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x000A   (0x0006)  MISSED
	TArray<FFrameNumber>                               Times;                                                      // 0x0010   (0x0010)  
	TArray<FMovieSceneFloatValue>                      Values;                                                     // 0x0020   (0x0010)  
	float                                              DefaultValue;                                               // 0x0030   (0x0004)  
	bool                                               bHasDefaultValue;                                           // 0x0034   (0x0001)  
	unsigned char                                      UnknownData03_6[0x3];                                       // 0x0035   (0x0003)  MISSED
	FMovieSceneKeyHandleMap                            KeyHandles;                                                 // 0x0038   (0x0060)  
	FFrameRate                                         TickResolution;                                             // 0x0098   (0x0008)  
};

/// Class /Script/UMG.MovieScene2DTransformSection
/// Size: 0x0558 (1368 bytes) (0x0000E8 - 0x000558) align n/a MaxSize: 0x0558
class UMovieScene2DTransformSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieScene2DTransformMask                         TransformMask;                                              // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	FMovieSceneFloatChannel                            Translation[2];                                             // 0x00F8   (0x0140)  
	FMovieSceneFloatChannel                            Rotation;                                                   // 0x0238   (0x00A0)  
	FMovieSceneFloatChannel                            Scale[2];                                                   // 0x02D8   (0x0140)  
	FMovieSceneFloatChannel                            Shear[2];                                                   // 0x0418   (0x0140)  
};

/// Struct /Script/MovieScene.MovieSceneTrackEvalOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FMovieSceneTrackEvalOptions
{ 
	bool                                               bCanEvaluateNearestSection : 1;                             // 0x0000:0 (0x0001)  
	bool                                               bEvalNearestSection : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bEvaluateInPreroll : 1;                                     // 0x0000:2 (0x0001)  
	bool                                               bEvaluateInPostroll : 1;                                    // 0x0000:3 (0x0001)  
	bool                                               bEvaluateNearestSection : 1;                                // 0x0000:4 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackEvaluationFieldEntry
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FMovieSceneTrackEvaluationFieldEntry
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
	FFrameNumberRange                                  Range;                                                      // 0x0008   (0x0010)  
	FFrameNumber                                       ForcedTime;                                                 // 0x0018   (0x0004)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x001C   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x001D   (0x0001)  MISSED
	int16_t                                            LegacySortOrder;                                            // 0x001E   (0x0002)  
};

/// Struct /Script/MovieScene.MovieSceneTrackEvaluationField
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneTrackEvaluationField
{ 
	TArray<FMovieSceneTrackEvaluationFieldEntry>       Entries;                                                    // 0x0000   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneTrack
/// Size: 0x0078 (120 bytes) (0x000050 - 0x000078) align n/a MaxSize: 0x0078
class UMovieSceneTrack : public UMovieSceneSignedObject
{ 
public:
	FMovieSceneTrackEvalOptions                        EvalOptions;                                                // 0x0050   (0x0004)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0054   (0x0001)  MISSED
	bool                                               bIsEvalDisabled;                                            // 0x0055   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0056   (0x0002)  MISSED
	FGuid                                              EvaluationFieldGuid;                                        // 0x0058   (0x0010)  
	FMovieSceneTrackEvaluationField                    EvaluationField;                                            // 0x0068   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneNameableTrack
/// Size: 0x0078 (120 bytes) (0x000078 - 0x000078) align n/a MaxSize: 0x0078
class UMovieSceneNameableTrack : public UMovieSceneTrack
{ 
public:
};

/// Struct /Script/MovieScene.MovieScenePropertyBinding
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FMovieScenePropertyBinding
{ 
	FName                                              PropertyName;                                               // 0x0000   (0x0008)  
	FName                                              PropertyPath;                                               // 0x0008   (0x0008)  
	bool                                               bCanUseClassLookup;                                         // 0x0010   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0011   (0x0003)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePropertyTrack
/// Size: 0x00A8 (168 bytes) (0x000078 - 0x0000A8) align n/a MaxSize: 0x00A8
class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
{ 
public:
	class UMovieSceneSection*                          SectionToKey;                                               // 0x0078   (0x0008)  
	FMovieScenePropertyBinding                         PropertyBinding;                                            // 0x0080   (0x0014)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0094   (0x0004)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0098   (0x0010)  
};

/// Class /Script/UMG.MovieScene2DTransformTrack
/// Size: 0x00A8 (168 bytes) (0x0000A8 - 0x0000A8) align n/a MaxSize: 0x00A8
class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/UMG.MovieSceneMarginSection
/// Size: 0x0368 (872 bytes) (0x0000E8 - 0x000368) align n/a MaxSize: 0x0368
class UMovieSceneMarginSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            TopCurve;                                                   // 0x00E8   (0x00A0)  
	FMovieSceneFloatChannel                            LeftCurve;                                                  // 0x0188   (0x00A0)  
	FMovieSceneFloatChannel                            RightCurve;                                                 // 0x0228   (0x00A0)  
	FMovieSceneFloatChannel                            BottomCurve;                                                // 0x02C8   (0x00A0)  
};

/// Class /Script/UMG.MovieSceneMarginTrack
/// Size: 0x00B0 (176 bytes) (0x0000A8 - 0x0000B0) align n/a MaxSize: 0x00B0
class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x00A8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneMaterialTrack
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align n/a MaxSize: 0x0088
class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0078   (0x0010)  
};

/// Class /Script/UMG.MovieSceneWidgetMaterialTrack
/// Size: 0x00A8 (168 bytes) (0x000088 - 0x0000A8) align n/a MaxSize: 0x00A8
class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0088   (0x0008)  MISSED
	TArray<FName>                                      BrushPropertyNamePath;                                      // 0x0090   (0x0010)  
	FName                                              TrackName;                                                  // 0x00A0   (0x0008)  
};

/// Class /Script/UMG.MultiLineEditableText
/// Size: 0x0498 (1176 bytes) (0x000128 - 0x000498) align n/a MaxSize: 0x0498
class UMultiLineEditableText : public UTextLayoutWidget
{ 
public:
	FText                                              text;                                                       // 0x0128   (0x0018)  
	FText                                              HintText;                                                   // 0x0140   (0x0018)  
	FDelegateProperty                                  HintTextDelegate;                                           // 0x0158   (0x0010)  
	FTextBlockStyle                                    WidgetStyle;                                                // 0x0168   (0x0290)  
	bool                                               bIsReadOnly;                                                // 0x03F8   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x03F9   (0x0007)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x0400   (0x0060)  
	bool                                               SelectAllTextWhenFocused;                                   // 0x0460   (0x0001)  
	bool                                               ClearTextSelectionOnFocusLoss;                              // 0x0461   (0x0001)  
	bool                                               RevertTextOnEscape;                                         // 0x0462   (0x0001)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x0463   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x0464   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x0465   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x0466   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0467   (0x0001)  MISSED
	FMulticastInlineDelegate                           OnTextChanged;                                              // 0x0468   (0x0010)  
	FMulticastInlineDelegate                           OnTextCommitted;                                            // 0x0478   (0x0010)  
	unsigned char                                      UnknownData05_7[0x10];                                      // 0x0488   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.MultiLineEditableText.SetWidgetStyle
	constexpr static const FunctionPointer<UMultiLineEditableText, void, const FTextBlockStyle&> SetWidgetStyle = { 0x3d89a50, 0 }; 
	// Function /Script/UMG.MultiLineEditableText.SetText
	constexpr static const FunctionPointer<UMultiLineEditableText, void, const FText> SetText = { 0x3d89f30, 1 }; 
	// Function /Script/UMG.MultiLineEditableText.SetIsReadOnly
	constexpr static const FunctionPointer<UMultiLineEditableText, void, const bool> SetIsReadOnly = { 0x3d89bc0, 2 }; 
	// Function /Script/UMG.MultiLineEditableText.SetHintText
	constexpr static const FunctionPointer<UMultiLineEditableText, void, const FText> SetHintText = { 0x3d89d10, 3 }; 
	// Function /Script/UMG.MultiLineEditableText.OnMultiLineEditableTextCommittedEvent__DelegateSignature
	constexpr static const FunctionPointer<UMultiLineEditableText, void, const FText&, const TEnumAsByte<ETextCommit>> OnMultiLineEditableTextCommittedEvent__DelegateSignature = { 0x2bbb090, 4 }; 
	// Function /Script/UMG.MultiLineEditableText.OnMultiLineEditableTextChangedEvent__DelegateSignature
	constexpr static const FunctionPointer<UMultiLineEditableText, void, const FText&> OnMultiLineEditableTextChangedEvent__DelegateSignature = { 0x2bbb090, 5 }; 
	// Function /Script/UMG.MultiLineEditableText.GetText
	constexpr static const FunctionPointer<UMultiLineEditableText, FText> GetText = { 0x3d8a080, 6 }; 
	// Function /Script/UMG.MultiLineEditableText.GetHintText
	constexpr static const FunctionPointer<UMultiLineEditableText, FText> GetHintText = { 0x3d89e60, 7 }; 
};

/// Class /Script/UMG.MultiLineEditableTextBox
/// Size: 0x0D30 (3376 bytes) (0x000128 - 0x000D30) align n/a MaxSize: 0x0D30
class UMultiLineEditableTextBox : public UTextLayoutWidget
{ 
public:
	FText                                              text;                                                       // 0x0128   (0x0018)  
	FText                                              HintText;                                                   // 0x0140   (0x0018)  
	FDelegateProperty                                  HintTextDelegate;                                           // 0x0158   (0x0010)  
	FEditableTextBoxStyle                              WidgetStyle;                                                // 0x0168   (0x0868)  
	FTextBlockStyle                                    TextStyle;                                                  // 0x09D0   (0x0290)  
	bool                                               bIsReadOnly;                                                // 0x0C60   (0x0001)  
	bool                                               AllowContextMenu;                                           // 0x0C61   (0x0001)  
	FVirtualKeyboardOptions                            VirtualKeyboardOptions;                                     // 0x0C62   (0x0001)  
	EVirtualKeyboardDismissAction                      VirtualKeyboardDismissAction;                               // 0x0C63   (0x0001)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0C64   (0x0004)  MISSED
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0C68   (0x0008)  
	FSlateFontInfo                                     Font;                                                       // 0x0C70   (0x0060)  
	FLinearColor                                       ForegroundColor;                                            // 0x0CD0   (0x0010)  
	FLinearColor                                       BackgroundColor;                                            // 0x0CE0   (0x0010)  
	FLinearColor                                       ReadOnlyForegroundColor;                                    // 0x0CF0   (0x0010)  
	FMulticastInlineDelegate                           OnTextChanged;                                              // 0x0D00   (0x0010)  
	FMulticastInlineDelegate                           OnTextCommitted;                                            // 0x0D10   (0x0010)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0D20   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.MultiLineEditableTextBox.SetTextStyle
	constexpr static const FunctionPointer<UMultiLineEditableTextBox, void, const FTextBlockStyle&> SetTextStyle = { 0x3d8a680, 0 }; 
	// Function /Script/UMG.MultiLineEditableTextBox.SetText
	constexpr static const FunctionPointer<UMultiLineEditableTextBox, void, const FText> SetText = { 0x3d8ad30, 1 }; 
	// Function /Script/UMG.MultiLineEditableTextBox.SetIsReadOnly
	constexpr static const FunctionPointer<UMultiLineEditableTextBox, void, const bool> SetIsReadOnly = { 0x3d8a800, 2 }; 
	// Function /Script/UMG.MultiLineEditableTextBox.SetHintText
	constexpr static const FunctionPointer<UMultiLineEditableTextBox, void, const FText> SetHintText = { 0x3d8ab00, 3 }; 
	// Function /Script/UMG.MultiLineEditableTextBox.SetError
	constexpr static const FunctionPointer<UMultiLineEditableTextBox, void, const FText> SetError = { 0x3d8a950, 4 }; 
	// Function /Script/UMG.MultiLineEditableTextBox.OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature
	constexpr static const FunctionPointer<UMultiLineEditableTextBox, void, const FText&, const TEnumAsByte<ETextCommit>> OnMultiLineEditableTextBoxCommittedEvent__DelegateSignature = { 0x2bbb090, 5 }; 
	// Function /Script/UMG.MultiLineEditableTextBox.OnMultiLineEditableTextBoxChangedEvent__DelegateSignature
	constexpr static const FunctionPointer<UMultiLineEditableTextBox, void, const FText&> OnMultiLineEditableTextBoxChangedEvent__DelegateSignature = { 0x2bbb090, 6 }; 
	// Function /Script/UMG.MultiLineEditableTextBox.GetText
	constexpr static const FunctionPointer<UMultiLineEditableTextBox, FText> GetText = { 0x3d8ae80, 7 }; 
	// Function /Script/UMG.MultiLineEditableTextBox.GetHintText
	constexpr static const FunctionPointer<UMultiLineEditableTextBox, FText> GetHintText = { 0x3d8ac50, 8 }; 
};

/// Class /Script/UMG.NamedSlot
/// Size: 0x0130 (304 bytes) (0x000120 - 0x000130) align n/a MaxSize: 0x0130
class UNamedSlot : public UContentWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0120   (0x0010)  MISSED
};

/// Class /Script/UMG.NamedSlotInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNamedSlotInterface : public UInterface
{ 
public:
};

/// Class /Script/UMG.NativeWidgetHost
/// Size: 0x0118 (280 bytes) (0x000108 - 0x000118) align n/a MaxSize: 0x0118
class UNativeWidgetHost : public UWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0108   (0x0010)  MISSED
};

/// Class /Script/UMG.Overlay
/// Size: 0x0130 (304 bytes) (0x000120 - 0x000130) align n/a MaxSize: 0x0130
class UOverlay : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0120   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.Overlay.AddChildToOverlay
	constexpr static const FunctionPointer<UOverlay, UOverlaySlot*, const UWidget*> AddChildToOverlay = { 0x3d8bdb0, 0 }; 
};

/// Class /Script/UMG.OverlaySlot
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align n/a MaxSize: 0x0058
class UOverlaySlot : public UPanelSlot
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0038   (0x0008)  MISSED
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData03_7[0x6];                                       // 0x0052   (0x0006)  MISSED

	/// Functions
	// Function /Script/UMG.OverlaySlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UOverlaySlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d8c350, 0 }; 
	// Function /Script/UMG.OverlaySlot.SetPadding
	constexpr static const FunctionPointer<UOverlaySlot, void, const FMargin> SetPadding = { 0x3d8c4f0, 1 }; 
	// Function /Script/UMG.OverlaySlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UOverlaySlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d8c420, 2 }; 
};

/// Class /Script/UMG.ProgressBar
/// Size: 0x0348 (840 bytes) (0x000108 - 0x000348) align n/a MaxSize: 0x0348
class UProgressBar : public UWidget
{ 
public:
	FProgressBarStyle                                  WidgetStyle;                                                // 0x0108   (0x01B8)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x02C0   (0x0008)  
	class USlateBrushAsset*                            BackgroundImage;                                            // 0x02C8   (0x0008)  
	class USlateBrushAsset*                            FillImage;                                                  // 0x02D0   (0x0008)  
	class USlateBrushAsset*                            MarqueeImage;                                               // 0x02D8   (0x0008)  
	float                                              Percent;                                                    // 0x02E0   (0x0004)  
	TEnumAsByte<EProgressBarFillType>                  BarFillType;                                                // 0x02E4   (0x0001)  
	bool                                               bIsMarquee;                                                 // 0x02E5   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x02E6   (0x0002)  MISSED
	FVector2D                                          BorderPadding;                                              // 0x02E8   (0x0008)  
	FDelegateProperty                                  PercentDelegate;                                            // 0x02F0   (0x0010)  
	FLinearColor                                       FillColorAndOpacity;                                        // 0x0300   (0x0010)  
	FDelegateProperty                                  FillColorAndOpacityDelegate;                                // 0x0310   (0x0010)  
	bool                                               IsUseMouseWheelEvent;                                       // 0x0320   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0321   (0x0007)  MISSED
	FMulticastInlineDelegate                           OnMouseWheelChanged;                                        // 0x0328   (0x0010)  
	unsigned char                                      UnknownData05_7[0x10];                                      // 0x0338   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.ProgressBar.SetPercent
	constexpr static const FunctionPointer<UProgressBar, void, const float> SetPercent = { 0x3d8ddd0, 0 }; 
	// Function /Script/UMG.ProgressBar.SetIsMarquee
	constexpr static const FunctionPointer<UProgressBar, void, const bool> SetIsMarquee = { 0x3d8dba0, 1 }; 
	// Function /Script/UMG.ProgressBar.SetFillColorAndOpacity
	constexpr static const FunctionPointer<UProgressBar, void, const FLinearColor> SetFillColorAndOpacity = { 0x3d8dcc0, 2 }; 
};

/// Class /Script/UMG.RetainerBox
/// Size: 0x0158 (344 bytes) (0x000120 - 0x000158) align n/a MaxSize: 0x0158
class URetainerBox : public UContentWidget
{ 
public:
	bool                                               bRetainRender;                                              // 0x0120   (0x0001)  
	bool                                               RenderOnInvalidation;                                       // 0x0121   (0x0001)  
	bool                                               RenderOnPhase;                                              // 0x0122   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0123   (0x0001)  MISSED
	int32_t                                            Phase;                                                      // 0x0124   (0x0004)  
	int32_t                                            PhaseCount;                                                 // 0x0128   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x012C   (0x0004)  MISSED
	class UMaterialInterface*                          EffectMaterial;                                             // 0x0130   (0x0008)  
	bool                                               bActiveEffectMaterial;                                      // 0x0138   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0139   (0x0003)  MISSED
	FName                                              TextureParameter;                                           // 0x013C   (0x0008)  
	unsigned char                                      UnknownData07_7[0x14];                                      // 0x0144   (0x0014)  MISSED

	/// Functions
	// Function /Script/UMG.RetainerBox.SetTextureParameter
	constexpr static const FunctionPointer<URetainerBox, void, const FName> SetTextureParameter = { 0x3d8ee40, 0 }; 
	// Function /Script/UMG.RetainerBox.SetRetainRendering
	constexpr static const FunctionPointer<URetainerBox, void, const bool> SetRetainRendering = { 0x3d8ed50, 1 }; 
	// Function /Script/UMG.RetainerBox.SetRenderingPhase
	constexpr static const FunctionPointer<URetainerBox, void, const int32_t, const int32_t> SetRenderingPhase = { 0x3d8f340, 2 }; 
	// Function /Script/UMG.RetainerBox.SetEffectMaterial
	constexpr static const FunctionPointer<URetainerBox, void, const UMaterialInterface*> SetEffectMaterial = { 0x3d8f030, 3 }; 
	// Function /Script/UMG.RetainerBox.SetActiveEffectMaterial
	constexpr static const FunctionPointer<URetainerBox, void, const bool> SetActiveEffectMaterial = { 0x3d8ef30, 4 }; 
	// Function /Script/UMG.RetainerBox.RequestRender
	constexpr static const FunctionPointer<URetainerBox, void> RequestRender = { 0x3d8f2f0, 5 }; 
	// Function /Script/UMG.RetainerBox.GetEffectMaterial
	constexpr static const FunctionPointer<URetainerBox, UMaterialInstanceDynamic*> GetEffectMaterial = { 0x3d8f2b0, 6 }; 
};

/// Class /Script/UMG.RichTextBlockDecorator
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class URichTextBlockDecorator : public UObject
{ 
public:
};

/// Class /Script/UMG.RichTextBlockImageDecorator
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class URichTextBlockImageDecorator : public URichTextBlockDecorator
{ 
public:
	class UDataTable*                                  ImageSet;                                                   // 0x0028   (0x0008)  
};

/// Class /Script/UMG.SafeZone
/// Size: 0x0138 (312 bytes) (0x000120 - 0x000138) align n/a MaxSize: 0x0138
class USafeZone : public UContentWidget
{ 
public:
	bool                                               PadLeft;                                                    // 0x0120   (0x0001)  
	bool                                               PadRight;                                                   // 0x0121   (0x0001)  
	bool                                               PadTop;                                                     // 0x0122   (0x0001)  
	bool                                               PadBottom;                                                  // 0x0123   (0x0001)  
	unsigned char                                      UnknownData01_7[0x14];                                      // 0x0124   (0x0014)  MISSED

	/// Functions
	// Function /Script/UMG.SafeZone.SetSidesToPad
	constexpr static const FunctionPointer<USafeZone, void, const bool, const bool, const bool, const bool> SetSidesToPad = { 0x3d91c60, 0 }; 
};

/// Class /Script/UMG.SafeZoneSlot
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class USafeZoneSlot : public UPanelSlot
{ 
public:
	bool                                               bIsTitleSafe;                                               // 0x0038   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0039   (0x0003)  MISSED
	FMargin                                            SafeAreaScale;                                              // 0x003C   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  hAlign;                                                     // 0x004C   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    vAlign;                                                     // 0x004D   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x004E   (0x0002)  MISSED
	FMargin                                            Padding;                                                    // 0x0050   (0x0010)  
};

/// Class /Script/UMG.ScaleBox
/// Size: 0x0140 (320 bytes) (0x000120 - 0x000140) align n/a MaxSize: 0x0140
class UScaleBox : public UContentWidget
{ 
public:
	TEnumAsByte<EStretch>                              Stretch;                                                    // 0x0120   (0x0001)  
	TEnumAsByte<EStretchDirection>                     StretchDirection;                                           // 0x0121   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x0122   (0x0002)  MISSED
	float                                              UserSpecifiedScale;                                         // 0x0124   (0x0004)  
	bool                                               IgnoreInheritedScale;                                       // 0x0128   (0x0001)  
	unsigned char                                      UnknownData03_7[0x17];                                      // 0x0129   (0x0017)  MISSED

	/// Functions
	// Function /Script/UMG.ScaleBox.SetUserSpecifiedScale
	constexpr static const FunctionPointer<UScaleBox, void, const float> SetUserSpecifiedScale = { 0x3d926f0, 0 }; 
	// Function /Script/UMG.ScaleBox.SetStretchDirection
	constexpr static const FunctionPointer<UScaleBox, void, const TEnumAsByte<EStretchDirection>> SetStretchDirection = { 0x3d927d0, 1 }; 
	// Function /Script/UMG.ScaleBox.SetStretch
	constexpr static const FunctionPointer<UScaleBox, void, const TEnumAsByte<EStretch>> SetStretch = { 0x3d928b0, 2 }; 
	// Function /Script/UMG.ScaleBox.SetIgnoreInheritedScale
	constexpr static const FunctionPointer<UScaleBox, void, const bool> SetIgnoreInheritedScale = { 0x3d92600, 3 }; 
};

/// Class /Script/UMG.ScaleBoxSlot
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UScaleBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData01_7[0x16];                                      // 0x004A   (0x0016)  MISSED

	/// Functions
	// Function /Script/UMG.ScaleBoxSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UScaleBoxSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d73400, 0 }; 
	// Function /Script/UMG.ScaleBoxSlot.SetPadding
	constexpr static const FunctionPointer<UScaleBoxSlot, void, const FMargin> SetPadding = { 0x3d92da0, 1 }; 
	// Function /Script/UMG.ScaleBoxSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UScaleBoxSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d734d0, 2 }; 
};

/// Class /Script/UMG.ScrollBar
/// Size: 0x0658 (1624 bytes) (0x000108 - 0x000658) align n/a MaxSize: 0x0658
class UScrollBar : public UWidget
{ 
public:
	FScrollBarStyle                                    WidgetStyle;                                                // 0x0108   (0x0518)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0620   (0x0008)  
	bool                                               bAlwaysShowScrollbar;                                       // 0x0628   (0x0001)  
	bool                                               bAlwaysShowScrollbarTrack;                                  // 0x0629   (0x0001)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x062A   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x062B   (0x0001)  MISSED
	FVector2D                                          Thickness;                                                  // 0x062C   (0x0008)  
	FMargin                                            Padding;                                                    // 0x0634   (0x0010)  
	unsigned char                                      UnknownData03_7[0x14];                                      // 0x0644   (0x0014)  MISSED

	/// Functions
	// Function /Script/UMG.ScrollBar.SetState
	constexpr static const FunctionPointer<UScrollBar, void, const float, const float> SetState = { 0x3d93280, 0 }; 
};

/// Class /Script/UMG.ScrollBox
/// Size: 0x08E8 (2280 bytes) (0x000120 - 0x0008E8) align n/a MaxSize: 0x08E8
class UScrollBox : public UPanelWidget
{ 
public:
	FScrollBoxStyle                                    WidgetStyle;                                                // 0x0120   (0x0248)  
	FScrollBarStyle                                    WidgetBarStyle;                                             // 0x0368   (0x0518)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0880   (0x0008)  
	class USlateWidgetStyleAsset*                      BarStyle;                                                   // 0x0888   (0x0008)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x0890   (0x0001)  
	ESlateVisibility                                   ScrollBarVisibility;                                        // 0x0891   (0x0001)  
	EConsumeMouseWheel                                 ConsumeMouseWheel;                                          // 0x0892   (0x0001)  
	unsigned char                                      UnknownData04_6[0x1];                                       // 0x0893   (0x0001)  MISSED
	FVector2D                                          ScrollbarThickness;                                         // 0x0894   (0x0008)  
	FMargin                                            ScrollbarPadding;                                           // 0x089C   (0x0010)  
	bool                                               AlwaysShowScrollbar;                                        // 0x08AC   (0x0001)  
	bool                                               AlwaysShowScrollbarTrack;                                   // 0x08AD   (0x0001)  
	bool                                               AllowOverscroll;                                            // 0x08AE   (0x0001)  
	bool                                               bAnimateWheelScrolling;                                     // 0x08AF   (0x0001)  
	EDescendantScrollDestination                       NavigationDestination;                                      // 0x08B0   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x08B1   (0x0003)  MISSED
	float                                              NavigationScrollPadding;                                    // 0x08B4   (0x0004)  
	EScrollWhenFocusChanges                            ScrollWhenFocusChanges;                                     // 0x08B8   (0x0001)  
	bool                                               bAllowRightClickDragScrolling;                              // 0x08B9   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x08BA   (0x0002)  MISSED
	float                                              WheelScrollMultiplier;                                      // 0x08BC   (0x0004)  
	FMulticastInlineDelegate                           OnUserScrolled;                                             // 0x08C0   (0x0010)  
	unsigned char                                      UnknownData07_7[0x18];                                      // 0x08D0   (0x0018)  MISSED

	/// Functions
	// Function /Script/UMG.ScrollBox.SetWheelScrollMultiplier
	constexpr static const FunctionPointer<UScrollBox, void, const float> SetWheelScrollMultiplier = { 0x3d93e50, 0 }; 
	// Function /Script/UMG.ScrollBox.SetScrollOffset
	constexpr static const FunctionPointer<UScrollBox, void, const float> SetScrollOffset = { 0x3d93d30, 1 }; 
	// Function /Script/UMG.ScrollBox.SetScrollbarVisibility
	constexpr static const FunctionPointer<UScrollBox, void, const ESlateVisibility> SetScrollbarVisibility = { 0x3d94530, 2 }; 
	// Function /Script/UMG.ScrollBox.SetScrollbarThickness
	constexpr static const FunctionPointer<UScrollBox, void, const FVector2D&> SetScrollbarThickness = { 0x3d94400, 3 }; 
	// Function /Script/UMG.ScrollBox.SetScrollbarPadding
	constexpr static const FunctionPointer<UScrollBox, void, const FMargin&> SetScrollbarPadding = { 0x3d94300, 4 }; 
	// Function /Script/UMG.ScrollBox.SetOrientation
	constexpr static const FunctionPointer<UScrollBox, void, const TEnumAsByte<EOrientation>> SetOrientation = { 0x3d94690, 5 }; 
	// Function /Script/UMG.ScrollBox.SetConsumeMouseWheel
	constexpr static const FunctionPointer<UScrollBox, void, const EConsumeMouseWheel> SetConsumeMouseWheel = { 0x3d94770, 6 }; 
	// Function /Script/UMG.ScrollBox.SetAnimateWheelScrolling
	constexpr static const FunctionPointer<UScrollBox, void, const bool> SetAnimateWheelScrolling = { 0x3d93f30, 7 }; 
	// Function /Script/UMG.ScrollBox.SetAlwaysShowScrollbar
	constexpr static const FunctionPointer<UScrollBox, void, const bool> SetAlwaysShowScrollbar = { 0x3d94210, 8 }; 
	// Function /Script/UMG.ScrollBox.SetAllowsRightClickDragScrolling
	constexpr static const FunctionPointer<UScrollBox, void, const bool> SetAllowsRightClickDragScrolling = { 0x3d94020, 9 }; 
	// Function /Script/UMG.ScrollBox.SetAllowOverscroll
	constexpr static const FunctionPointer<UScrollBox, void, const bool> SetAllowOverscroll = { 0x3d94120, 10 }; 
	// Function /Script/UMG.ScrollBox.ScrollWidgetIntoView
	constexpr static const FunctionPointer<UScrollBox, void, const UWidget*, const bool, const EDescendantScrollDestination, const float> ScrollWidgetIntoView = { 0x3d937d0, 11 }; 
	// Function /Script/UMG.ScrollBox.ScrollToStart
	constexpr static const FunctionPointer<UScrollBox, void> ScrollToStart = { 0x3d93b30, 12 }; 
	// Function /Script/UMG.ScrollBox.ScrollToEnd
	constexpr static const FunctionPointer<UScrollBox, void> ScrollToEnd = { 0x3d93b00, 13 }; 
	// Function /Script/UMG.ScrollBox.GetViewOffsetFraction
	constexpr static const FunctionPointer<UScrollBox, float> GetViewOffsetFraction = { 0x3d93b70, 14 }; 
	// Function /Script/UMG.ScrollBox.GetScrollOffsetOfEnd
	constexpr static const FunctionPointer<UScrollBox, float> GetScrollOffsetOfEnd = { 0x3d93bc0, 15 }; 
	// Function /Script/UMG.ScrollBox.GetScrollOffset
	constexpr static const FunctionPointer<UScrollBox, float> GetScrollOffset = { 0x3d93cf0, 16 }; 
	// Function /Script/UMG.ScrollBox.EndInertialScrolling
	constexpr static const FunctionPointer<UScrollBox, void> EndInertialScrolling = { 0x3d93e20, 17 }; 
};

/// Class /Script/UMG.ScrollBoxSlot
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align n/a MaxSize: 0x0058
class UScrollBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData01_7[0xE];                                       // 0x004A   (0x000E)  MISSED

	/// Functions
	// Function /Script/UMG.ScrollBoxSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UScrollBoxSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d94f50, 0 }; 
	// Function /Script/UMG.ScrollBoxSlot.SetPadding
	constexpr static const FunctionPointer<UScrollBoxSlot, void, const FMargin> SetPadding = { 0x3d950f0, 1 }; 
	// Function /Script/UMG.ScrollBoxSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UScrollBoxSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d95020, 2 }; 
};

/// Class /Script/UMG.SizeBox
/// Size: 0x0158 (344 bytes) (0x000120 - 0x000158) align n/a MaxSize: 0x0158
class USizeBox : public UContentWidget
{ 
public:
	unsigned char                                      UnknownData02_8[0x10];                                      // 0x0120   (0x0010)  MISSED
	float                                              WidthOverride;                                              // 0x0130   (0x0004)  
	float                                              HeightOverride;                                             // 0x0134   (0x0004)  
	float                                              MinDesiredWidth;                                            // 0x0138   (0x0004)  
	float                                              MinDesiredHeight;                                           // 0x013C   (0x0004)  
	float                                              MaxDesiredWidth;                                            // 0x0140   (0x0004)  
	float                                              MaxDesiredHeight;                                           // 0x0144   (0x0004)  
	float                                              MinAspectRatio;                                             // 0x0148   (0x0004)  
	float                                              MaxAspectRatio;                                             // 0x014C   (0x0004)  
	bool                                               bOverride_WidthOverride : 1;                                // 0x0150:0 (0x0001)  
	bool                                               bOverride_HeightOverride : 1;                               // 0x0150:1 (0x0001)  
	bool                                               bOverride_MinDesiredWidth : 1;                              // 0x0150:2 (0x0001)  
	bool                                               bOverride_MinDesiredHeight : 1;                             // 0x0150:3 (0x0001)  
	bool                                               bOverride_MaxDesiredWidth : 1;                              // 0x0150:4 (0x0001)  
	bool                                               bOverride_MaxDesiredHeight : 1;                             // 0x0150:5 (0x0001)  
	bool                                               bOverride_MinAspectRatio : 1;                               // 0x0150:6 (0x0001)  
	bool                                               bOverride_MaxAspectRatio : 1;                               // 0x0150:7 (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0151   (0x0007)  MISSED

	/// Functions
	// Function /Script/UMG.SizeBox.SetWidthOverride
	constexpr static const FunctionPointer<USizeBox, void, const float> SetWidthOverride = { 0x3d95d30, 0 }; 
	// Function /Script/UMG.SizeBox.SetMinDesiredWidth
	constexpr static const FunctionPointer<USizeBox, void, const float> SetMinDesiredWidth = { 0x3d95b50, 1 }; 
	// Function /Script/UMG.SizeBox.SetMinDesiredHeight
	constexpr static const FunctionPointer<USizeBox, void, const float> SetMinDesiredHeight = { 0x3d95a60, 2 }; 
	// Function /Script/UMG.SizeBox.SetMinAspectRatio
	constexpr static const FunctionPointer<USizeBox, void, const float> SetMinAspectRatio = { 0x3d95760, 3 }; 
	// Function /Script/UMG.SizeBox.SetMaxDesiredWidth
	constexpr static const FunctionPointer<USizeBox, void, const float> SetMaxDesiredWidth = { 0x3d95970, 4 }; 
	// Function /Script/UMG.SizeBox.SetMaxDesiredHeight
	constexpr static const FunctionPointer<USizeBox, void, const float> SetMaxDesiredHeight = { 0x3d95880, 5 }; 
	// Function /Script/UMG.SizeBox.SetMaxAspectRatio
	constexpr static const FunctionPointer<USizeBox, void, const float> SetMaxAspectRatio = { 0x3d95690, 6 }; 
	// Function /Script/UMG.SizeBox.SetHeightOverride
	constexpr static const FunctionPointer<USizeBox, void, const float> SetHeightOverride = { 0x3d95c40, 7 }; 
	// Function /Script/UMG.SizeBox.ClearWidthOverride
	constexpr static const FunctionPointer<USizeBox, void> ClearWidthOverride = { 0x3d95d10, 8 }; 
	// Function /Script/UMG.SizeBox.ClearMinDesiredWidth
	constexpr static const FunctionPointer<USizeBox, void> ClearMinDesiredWidth = { 0x3d95b30, 9 }; 
	// Function /Script/UMG.SizeBox.ClearMinDesiredHeight
	constexpr static const FunctionPointer<USizeBox, void> ClearMinDesiredHeight = { 0x3d95a40, 10 }; 
	// Function /Script/UMG.SizeBox.ClearMinAspectRatio
	constexpr static const FunctionPointer<USizeBox, void> ClearMinAspectRatio = { 0x3d95630, 11 }; 
	// Function /Script/UMG.SizeBox.ClearMaxDesiredWidth
	constexpr static const FunctionPointer<USizeBox, void> ClearMaxDesiredWidth = { 0x3d95950, 12 }; 
	// Function /Script/UMG.SizeBox.ClearMaxDesiredHeight
	constexpr static const FunctionPointer<USizeBox, void> ClearMaxDesiredHeight = { 0x3d95860, 13 }; 
	// Function /Script/UMG.SizeBox.ClearMaxAspectRatio
	constexpr static const FunctionPointer<USizeBox, void> ClearMaxAspectRatio = { 0x3d95610, 14 }; 
	// Function /Script/UMG.SizeBox.ClearHeightOverride
	constexpr static const FunctionPointer<USizeBox, void> ClearHeightOverride = { 0x3d95c20, 15 }; 
};

/// Class /Script/UMG.SizeBoxSlot
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class USizeBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	unsigned char                                      UnknownData02_6[0x10];                                      // 0x0048   (0x0010)  MISSED
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0058   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0059   (0x0001)  
	unsigned char                                      UnknownData03_7[0x6];                                       // 0x005A   (0x0006)  MISSED

	/// Functions
	// Function /Script/UMG.SizeBoxSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<USizeBoxSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3d96c90, 0 }; 
	// Function /Script/UMG.SizeBoxSlot.SetPadding
	constexpr static const FunctionPointer<USizeBoxSlot, void, const FMargin> SetPadding = { 0x3d96e30, 1 }; 
	// Function /Script/UMG.SizeBoxSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<USizeBoxSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3d96d60, 2 }; 
};

/// Class /Script/UMG.SlateBlueprintLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/UMG.SlateBlueprintLibrary.TransformVectorLocalToAbsolute
	constexpr static const FunctionPointer<USlateBlueprintLibrary, FVector2D, const FGeometry&, const FVector2D> TransformVectorLocalToAbsolute = { 0x3d98550, 0 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.TransformVectorAbsoluteToLocal
	constexpr static const FunctionPointer<USlateBlueprintLibrary, FVector2D, const FGeometry&, const FVector2D> TransformVectorAbsoluteToLocal = { 0x3d98790, 1 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.TransformScalarLocalToAbsolute
	constexpr static const FunctionPointer<USlateBlueprintLibrary, float, const FGeometry&, const float> TransformScalarLocalToAbsolute = { 0x3d98970, 2 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.TransformScalarAbsoluteToLocal
	constexpr static const FunctionPointer<USlateBlueprintLibrary, float, const FGeometry&, const float> TransformScalarAbsoluteToLocal = { 0x3d98b70, 3 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.ScreenToWidgetLocal
	constexpr static const FunctionPointer<USlateBlueprintLibrary, void, const UObject*, const FGeometry&, const FVector2D, const FVector2D&, const bool> ScreenToWidgetLocal = { 0x3d97770, 4 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.ScreenToWidgetAbsolute
	constexpr static const FunctionPointer<USlateBlueprintLibrary, void, const UObject*, const FVector2D, const FVector2D&, const bool> ScreenToWidgetAbsolute = { 0x3d97500, 5 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.ScreenToViewport
	constexpr static const FunctionPointer<USlateBlueprintLibrary, void, const UObject*, const FVector2D, const FVector2D&> ScreenToViewport = { 0x3d97300, 6 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.LocalToViewport
	constexpr static const FunctionPointer<USlateBlueprintLibrary, void, const UObject*, const FGeometry&, const FVector2D, const FVector2D&, const FVector2D&> LocalToViewport = { 0x3d97e30, 7 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.LocalToAbsolute
	constexpr static const FunctionPointer<USlateBlueprintLibrary, FVector2D, const FGeometry&, const FVector2D> LocalToAbsolute = { 0x3d99120, 8 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.IsUnderLocation
	constexpr static const FunctionPointer<USlateBlueprintLibrary, bool, const FGeometry&, const FVector2D&> IsUnderLocation = { 0x3d995b0, 9 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.GetLocalTopLeft
	constexpr static const FunctionPointer<USlateBlueprintLibrary, FVector2D, const FGeometry&> GetLocalTopLeft = { 0x3d98fe0, 10 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.GetLocalSize
	constexpr static const FunctionPointer<USlateBlueprintLibrary, FVector2D, const FGeometry&> GetLocalSize = { 0x3d98ea0, 11 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.GetAbsoluteSize
	constexpr static const FunctionPointer<USlateBlueprintLibrary, FVector2D, const FGeometry&> GetAbsoluteSize = { 0x3d98d40, 12 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.EqualEqual_SlateBrush
	constexpr static const FunctionPointer<USlateBlueprintLibrary, bool, const FSlateBrush&, const FSlateBrush&> EqualEqual_SlateBrush = { 0x3d981b0, 13 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.AbsoluteToViewport
	constexpr static const FunctionPointer<USlateBlueprintLibrary, void, const UObject*, const FVector2D, const FVector2D&, const FVector2D&> AbsoluteToViewport = { 0x3d97bc0, 14 }; 
	// Function /Script/UMG.SlateBlueprintLibrary.AbsoluteToLocal
	constexpr static const FunctionPointer<USlateBlueprintLibrary, FVector2D, const FGeometry&, const FVector2D> AbsoluteToLocal = { 0x3d99310, 15 }; 
};

/// Struct /Script/UMG.SlateMeshVertex
/// Size: 0x003C (60 bytes) (0x000000 - 0x00003C) align n/a MaxSize: 0x003C
struct FSlateMeshVertex
{ 
	FVector2D                                          position;                                                   // 0x0000   (0x0008)  
	FColor                                             Color;                                                      // 0x0008   (0x0004)  
	FVector2D                                          UV0;                                                        // 0x000C   (0x0008)  
	FVector2D                                          UV1;                                                        // 0x0014   (0x0008)  
	FVector2D                                          UV2;                                                        // 0x001C   (0x0008)  
	FVector2D                                          UV3;                                                        // 0x0024   (0x0008)  
	FVector2D                                          UV4;                                                        // 0x002C   (0x0008)  
	FVector2D                                          UV5;                                                        // 0x0034   (0x0008)  
};

/// Class /Script/UMG.SlateVectorArtData
/// Size: 0x0060 (96 bytes) (0x000028 - 0x000060) align n/a MaxSize: 0x0060
class USlateVectorArtData : public UObject
{ 
public:
	TArray<FSlateMeshVertex>                           VertexData;                                                 // 0x0028   (0x0010)  
	TArray<uint32_t>                                   IndexData;                                                  // 0x0038   (0x0010)  
	class UMaterialInterface*                          Material;                                                   // 0x0048   (0x0008)  
	FVector2D                                          ExtentMin;                                                  // 0x0050   (0x0008)  
	FVector2D                                          ExtentMax;                                                  // 0x0058   (0x0008)  
};

/// Class /Script/UMG.SlateAccessibleWidgetData
/// Size: 0x0080 (128 bytes) (0x000028 - 0x000080) align n/a MaxSize: 0x0080
class USlateAccessibleWidgetData : public UObject
{ 
public:
	bool                                               bCanChildrenBeAccessible;                                   // 0x0028   (0x0001)  
	ESlateAccessibleBehavior                           AccessibleBehavior;                                         // 0x0029   (0x0001)  
	ESlateAccessibleBehavior                           AccessibleSummaryBehavior;                                  // 0x002A   (0x0001)  
	unsigned char                                      UnknownData01_6[0x5];                                       // 0x002B   (0x0005)  MISSED
	FText                                              AccessibleText;                                             // 0x0030   (0x0018)  
	FDelegateProperty                                  AccessibleTextDelegate;                                     // 0x0048   (0x0010)  
	FText                                              AccessibleSummaryText;                                      // 0x0058   (0x0018)  
	FDelegateProperty                                  AccessibleSummaryTextDelegate;                              // 0x0070   (0x0010)  
};

/// Class /Script/UMG.Slider
/// Size: 0x0548 (1352 bytes) (0x000108 - 0x000548) align n/a MaxSize: 0x0548
class USlider : public UWidget
{ 
public:
	float                                              Value;                                                      // 0x0108   (0x0004)  
	FDelegateProperty                                  ValueDelegate;                                              // 0x010C   (0x0010)  
	float                                              MinValue;                                                   // 0x011C   (0x0004)  
	float                                              MaxValue;                                                   // 0x0120   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x0124   (0x0004)  MISSED
	FSliderStyle                                       WidgetStyle;                                                // 0x0128   (0x0370)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x0498   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0499   (0x0003)  MISSED
	FLinearColor                                       SliderBarColor;                                             // 0x049C   (0x0010)  
	FLinearColor                                       SliderHandleColor;                                          // 0x04AC   (0x0010)  
	bool                                               IndentHandle;                                               // 0x04BC   (0x0001)  
	bool                                               Locked;                                                     // 0x04BD   (0x0001)  
	bool                                               MouseUsesStep;                                              // 0x04BE   (0x0001)  
	bool                                               RequiresControllerLock;                                     // 0x04BF   (0x0001)  
	float                                              StepSize;                                                   // 0x04C0   (0x0004)  
	bool                                               IsFocusable;                                                // 0x04C4   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x04C5   (0x0003)  MISSED
	FMulticastInlineDelegate                           OnMouseCaptureBegin;                                        // 0x04C8   (0x0010)  
	FMulticastInlineDelegate                           OnMouseCaptureEnd;                                          // 0x04D8   (0x0010)  
	FMulticastInlineDelegate                           OnControllerCaptureBegin;                                   // 0x04E8   (0x0010)  
	FMulticastInlineDelegate                           OnControllerCaptureEnd;                                     // 0x04F8   (0x0010)  
	FMulticastInlineDelegate                           OnValueChanged;                                             // 0x0508   (0x0010)  
	FMulticastInlineDelegate                           OnHovered;                                                  // 0x0518   (0x0010)  
	FMulticastInlineDelegate                           OnUnhovered;                                                // 0x0528   (0x0010)  
	unsigned char                                      UnknownData07_7[0x10];                                      // 0x0538   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.Slider.SetValue
	constexpr static const FunctionPointer<USlider, void, const float> SetValue = { 0x3d9b440, 0 }; 
	// Function /Script/UMG.Slider.SetStepSize
	constexpr static const FunctionPointer<USlider, void, const float> SetStepSize = { 0x3d9af30, 1 }; 
	// Function /Script/UMG.Slider.SetSliderHandleColor
	constexpr static const FunctionPointer<USlider, void, const FLinearColor> SetSliderHandleColor = { 0x3d9ad50, 2 }; 
	// Function /Script/UMG.Slider.SetSliderBarColor
	constexpr static const FunctionPointer<USlider, void, const FLinearColor> SetSliderBarColor = { 0x3d9ae40, 3 }; 
	// Function /Script/UMG.Slider.SetMinValue
	constexpr static const FunctionPointer<USlider, void, const float> SetMinValue = { 0x3d9b340, 4 }; 
	// Function /Script/UMG.Slider.SetMaxValue
	constexpr static const FunctionPointer<USlider, void, const float> SetMaxValue = { 0x3d9b240, 5 }; 
	// Function /Script/UMG.Slider.SetLocked
	constexpr static const FunctionPointer<USlider, void, const bool> SetLocked = { 0x3d9b080, 6 }; 
	// Function /Script/UMG.Slider.SetIndentHandle
	constexpr static const FunctionPointer<USlider, void, const bool> SetIndentHandle = { 0x3d9b160, 7 }; 
	// Function /Script/UMG.Slider.GetValue
	constexpr static const FunctionPointer<USlider, float> GetValue = { 0x3d9b5a0, 8 }; 
	// Function /Script/UMG.Slider.GetNormalizedValue
	constexpr static const FunctionPointer<USlider, float> GetNormalizedValue = { 0x3d9b510, 9 }; 
};

/// Class /Script/UMG.Spacer
/// Size: 0x0120 (288 bytes) (0x000108 - 0x000120) align n/a MaxSize: 0x0120
class USpacer : public UWidget
{ 
public:
	FVector2D                                          Size;                                                       // 0x0108   (0x0008)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0110   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.Spacer.SetSize
	constexpr static const FunctionPointer<USpacer, void, const FVector2D> SetSize = { 0x3d9bb70, 0 }; 
};

/// Class /Script/UMG.SpinBox
/// Size: 0x0550 (1360 bytes) (0x000108 - 0x000550) align n/a MaxSize: 0x0550
class USpinBox : public UWidget
{ 
public:
	float                                              Value;                                                      // 0x0108   (0x0004)  
	FDelegateProperty                                  ValueDelegate;                                              // 0x010C   (0x0010)  
	unsigned char                                      UnknownData07_6[0x4];                                       // 0x011C   (0x0004)  MISSED
	FSpinBoxStyle                                      WidgetStyle;                                                // 0x0120   (0x0310)  
	class USlateWidgetStyleAsset*                      Style;                                                      // 0x0430   (0x0008)  
	int32_t                                            MinFractionalDigits;                                        // 0x0438   (0x0004)  
	int32_t                                            MaxFractionalDigits;                                        // 0x043C   (0x0004)  
	bool                                               bAlwaysUsesDeltaSnap;                                       // 0x0440   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0441   (0x0003)  MISSED
	float                                              Delta;                                                      // 0x0444   (0x0004)  
	float                                              SliderExponent;                                             // 0x0448   (0x0004)  
	unsigned char                                      UnknownData09_6[0x4];                                       // 0x044C   (0x0004)  MISSED
	FSlateFontInfo                                     Font;                                                       // 0x0450   (0x0060)  
	TEnumAsByte<ETextJustify>                          Justification;                                              // 0x04B0   (0x0001)  
	unsigned char                                      UnknownData10_6[0x3];                                       // 0x04B1   (0x0003)  MISSED
	float                                              MinDesiredWidth;                                            // 0x04B4   (0x0004)  
	bool                                               ClearKeyboardFocusOnCommit;                                 // 0x04B8   (0x0001)  
	bool                                               SelectAllTextOnCommit;                                      // 0x04B9   (0x0001)  
	unsigned char                                      UnknownData11_6[0x6];                                       // 0x04BA   (0x0006)  MISSED
	FSlateColor                                        ForegroundColor;                                            // 0x04C0   (0x0028)  
	FMulticastInlineDelegate                           OnValueChanged;                                             // 0x04E8   (0x0010)  
	FMulticastInlineDelegate                           OnValueCommitted;                                           // 0x04F8   (0x0010)  
	FMulticastInlineDelegate                           OnBeginSliderMovement;                                      // 0x0508   (0x0010)  
	FMulticastInlineDelegate                           OnEndSliderMovement;                                        // 0x0518   (0x0010)  
	bool                                               bOverride_MinValue : 1;                                     // 0x0528:0 (0x0001)  
	bool                                               bOverride_MaxValue : 1;                                     // 0x0528:1 (0x0001)  
	bool                                               bOverride_MinSliderValue : 1;                               // 0x0528:2 (0x0001)  
	bool                                               bOverride_MaxSliderValue : 1;                               // 0x0528:3 (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x0529   (0x0003)  MISSED
	float                                              MinValue;                                                   // 0x052C   (0x0004)  
	float                                              MaxValue;                                                   // 0x0530   (0x0004)  
	float                                              MinSliderValue;                                             // 0x0534   (0x0004)  
	float                                              MaxSliderValue;                                             // 0x0538   (0x0004)  
	unsigned char                                      UnknownData13_7[0x14];                                      // 0x053C   (0x0014)  MISSED

	/// Functions
	// Function /Script/UMG.SpinBox.SetValue
	constexpr static const FunctionPointer<USpinBox, void, const float> SetValue = { 0x3d9ce40, 0 }; 
	// Function /Script/UMG.SpinBox.SetMinValue
	constexpr static const FunctionPointer<USpinBox, void, const float> SetMinValue = { 0x3d9c640, 1 }; 
	// Function /Script/UMG.SpinBox.SetMinSliderValue
	constexpr static const FunctionPointer<USpinBox, void, const float> SetMinSliderValue = { 0x3d9c350, 2 }; 
	// Function /Script/UMG.SpinBox.SetMinFractionalDigits
	constexpr static const FunctionPointer<USpinBox, void, const int32_t> SetMinFractionalDigits = { 0x3d9cc60, 3 }; 
	// Function /Script/UMG.SpinBox.SetMaxValue
	constexpr static const FunctionPointer<USpinBox, void, const float> SetMaxValue = { 0x3d9c4c0, 4 }; 
	// Function /Script/UMG.SpinBox.SetMaxSliderValue
	constexpr static const FunctionPointer<USpinBox, void, const float> SetMaxSliderValue = { 0x3d9c1d0, 5 }; 
	// Function /Script/UMG.SpinBox.SetMaxFractionalDigits
	constexpr static const FunctionPointer<USpinBox, void, const int32_t> SetMaxFractionalDigits = { 0x3d9ca80, 6 }; 
	// Function /Script/UMG.SpinBox.SetForegroundColor
	constexpr static const FunctionPointer<USpinBox, void, const FSlateColor> SetForegroundColor = { 0x3d9c060, 7 }; 
	// Function /Script/UMG.SpinBox.SetDelta
	constexpr static const FunctionPointer<USpinBox, void, const float> SetDelta = { 0x3d9c7a0, 8 }; 
	// Function /Script/UMG.SpinBox.SetAlwaysUsesDeltaSnap
	constexpr static const FunctionPointer<USpinBox, void, const bool> SetAlwaysUsesDeltaSnap = { 0x3d9c940, 9 }; 
	// Function /Script/UMG.SpinBox.OnSpinBoxValueCommittedEvent__DelegateSignature
	constexpr static const FunctionPointer<USpinBox, void, const float, const TEnumAsByte<ETextCommit>> OnSpinBoxValueCommittedEvent__DelegateSignature = { 0x2bbb090, 10 }; 
	// Function /Script/UMG.SpinBox.OnSpinBoxValueChangedEvent__DelegateSignature
	constexpr static const FunctionPointer<USpinBox, void, const float> OnSpinBoxValueChangedEvent__DelegateSignature = { 0x2bbb090, 11 }; 
	// Function /Script/UMG.SpinBox.OnSpinBoxBeginSliderMovement__DelegateSignature
	constexpr static const FunctionPointer<USpinBox, void> OnSpinBoxBeginSliderMovement__DelegateSignature = { 0x2bbb090, 12 }; 
	// Function /Script/UMG.SpinBox.GetValue
	constexpr static const FunctionPointer<USpinBox, float> GetValue = { 0x3d9cf40, 13 }; 
	// Function /Script/UMG.SpinBox.GetMinValue
	constexpr static const FunctionPointer<USpinBox, float> GetMinValue = { 0x3d9c710, 14 }; 
	// Function /Script/UMG.SpinBox.GetMinSliderValue
	constexpr static const FunctionPointer<USpinBox, float> GetMinSliderValue = { 0x3d9c420, 15 }; 
	// Function /Script/UMG.SpinBox.GetMinFractionalDigits
	constexpr static const FunctionPointer<USpinBox, int32_t> GetMinFractionalDigits = { 0x3d9cdf0, 16 }; 
	// Function /Script/UMG.SpinBox.GetMaxValue
	constexpr static const FunctionPointer<USpinBox, float> GetMaxValue = { 0x3d9c590, 17 }; 
	// Function /Script/UMG.SpinBox.GetMaxSliderValue
	constexpr static const FunctionPointer<USpinBox, float> GetMaxSliderValue = { 0x3d9c2a0, 18 }; 
	// Function /Script/UMG.SpinBox.GetMaxFractionalDigits
	constexpr static const FunctionPointer<USpinBox, int32_t> GetMaxFractionalDigits = { 0x3d9cc10, 19 }; 
	// Function /Script/UMG.SpinBox.GetDelta
	constexpr static const FunctionPointer<USpinBox, float> GetDelta = { 0x3d9c890, 20 }; 
	// Function /Script/UMG.SpinBox.GetAlwaysUsesDeltaSnap
	constexpr static const FunctionPointer<USpinBox, bool> GetAlwaysUsesDeltaSnap = { 0x3d9ca30, 21 }; 
	// Function /Script/UMG.SpinBox.ClearMinValue
	constexpr static const FunctionPointer<USpinBox, void> ClearMinValue = { 0x3d9c620, 22 }; 
	// Function /Script/UMG.SpinBox.ClearMinSliderValue
	constexpr static const FunctionPointer<USpinBox, void> ClearMinSliderValue = { 0x3d9c330, 23 }; 
	// Function /Script/UMG.SpinBox.ClearMaxValue
	constexpr static const FunctionPointer<USpinBox, void> ClearMaxValue = { 0x3d9c4a0, 24 }; 
	// Function /Script/UMG.SpinBox.ClearMaxSliderValue
	constexpr static const FunctionPointer<USpinBox, void> ClearMaxSliderValue = { 0x3d9c1b0, 25 }; 
};

/// Class /Script/UMG.TextBinding
/// Size: 0x0068 (104 bytes) (0x000060 - 0x000068) align n/a MaxSize: 0x0068
class UTextBinding : public UPropertyBinding
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0060   (0x0008)  MISSED

	/// Functions
	// Function /Script/UMG.TextBinding.GetTextValue
	constexpr static const FunctionPointer<UTextBinding, FText> GetTextValue = { 0x3d9d880, 0 }; 
	// Function /Script/UMG.TextBinding.GetStringValue
	constexpr static const FunctionPointer<UTextBinding, FString> GetStringValue = { 0x3d9d800, 1 }; 
};

/// Class /Script/UMG.TextBlock
/// Size: 0x02D8 (728 bytes) (0x000128 - 0x0002D8) align n/a MaxSize: 0x02D8
class UTextBlock : public UTextLayoutWidget
{ 
public:
	FText                                              text;                                                       // 0x0128   (0x0018)  
	FDelegateProperty                                  TextDelegate;                                               // 0x0140   (0x0010)  
	FSlateColor                                        ColorAndOpacity;                                            // 0x0150   (0x0028)  
	FDelegateProperty                                  ColorAndOpacityDelegate;                                    // 0x0178   (0x0010)  
	FSlateFontInfo                                     Font;                                                       // 0x0188   (0x0060)  
	FSlateBrush                                        StrikeBrush;                                                // 0x01E8   (0x0090)  
	FVector2D                                          ShadowOffset;                                               // 0x0278   (0x0008)  
	FLinearColor                                       ShadowColorAndOpacity;                                      // 0x0280   (0x0010)  
	FDelegateProperty                                  ShadowColorAndOpacityDelegate;                              // 0x0290   (0x0010)  
	float                                              MinDesiredWidth;                                            // 0x02A0   (0x0004)  
	bool                                               bWrapWithInvalidationPanel;                                 // 0x02A4   (0x0001)  
	bool                                               bAutoWrapText;                                              // 0x02A5   (0x0001)  
	ETextTransformPolicy                               TextTransformPolicy;                                        // 0x02A6   (0x0001)  
	ETextFlowDirection                                 TextFlowDirection;                                          // 0x02A7   (0x0001)  
	bool                                               bSimpleTextMode;                                            // 0x02A8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x17];                                      // 0x02A9   (0x0017)  MISSED
	FText                                              NotifyCheckText;                                            // 0x02C0   (0x0018)  

	/// Functions
	// Function /Script/UMG.TextBlock.SetTextTransformPolicy
	constexpr static const FunctionPointer<UTextBlock, void, const ETextTransformPolicy> SetTextTransformPolicy = { 0x3d9e0e0, 0 }; 
	// Function /Script/UMG.TextBlock.SetText
	constexpr static const FunctionPointer<UTextBlock, void, const FText> SetText = { 0x3d9dcd0, 1 }; 
	// Function /Script/UMG.TextBlock.SetStrikeBrush
	constexpr static const FunctionPointer<UTextBlock, void, const FSlateBrush> SetStrikeBrush = { 0x3d9e360, 2 }; 
	// Function /Script/UMG.TextBlock.SetShadowOffset
	constexpr static const FunctionPointer<UTextBlock, void, const FVector2D> SetShadowOffset = { 0x3d9e700, 3 }; 
	// Function /Script/UMG.TextBlock.SetShadowColorAndOpacity
	constexpr static const FunctionPointer<UTextBlock, void, const FLinearColor> SetShadowColorAndOpacity = { 0x3d9e7d0, 4 }; 
	// Function /Script/UMG.TextBlock.SetOpacity
	constexpr static const FunctionPointer<UTextBlock, void, const float> SetOpacity = { 0x3d9e8b0, 5 }; 
	// Function /Script/UMG.TextBlock.SetMinDesiredWidth
	constexpr static const FunctionPointer<UTextBlock, void, const float> SetMinDesiredWidth = { 0x3d9e290, 6 }; 
	// Function /Script/UMG.TextBlock.SetFont
	constexpr static const FunctionPointer<UTextBlock, void, const FSlateFontInfo> SetFont = { 0x3d9e550, 7 }; 
	// Function /Script/UMG.TextBlock.SetColorAndOpacity
	constexpr static const FunctionPointer<UTextBlock, void, const FSlateColor> SetColorAndOpacity = { 0x3d9e9d0, 8 }; 
	// Function /Script/UMG.TextBlock.SetAutoWrapText
	constexpr static const FunctionPointer<UTextBlock, void, const bool> SetAutoWrapText = { 0x3d9e1b0, 9 }; 
	// Function /Script/UMG.TextBlock.GetText
	constexpr static const FunctionPointer<UTextBlock, FText> GetText = { 0x3d9de20, 10 }; 
	// Function /Script/UMG.TextBlock.GetDynamicOutlineMaterial
	constexpr static const FunctionPointer<UTextBlock, UMaterialInstanceDynamic*> GetDynamicOutlineMaterial = { 0x3d9dee0, 11 }; 
	// Function /Script/UMG.TextBlock.GetDynamicFontMaterial
	constexpr static const FunctionPointer<UTextBlock, UMaterialInstanceDynamic*> GetDynamicFontMaterial = { 0x3d9dfe0, 12 }; 
};

/// Class /Script/UMG.Throbber
/// Size: 0x01B8 (440 bytes) (0x000108 - 0x0001B8) align n/a MaxSize: 0x01B8
class UThrobber : public UWidget
{ 
public:
	int32_t                                            NumberOfPieces;                                             // 0x0108   (0x0004)  
	bool                                               bAnimateHorizontally;                                       // 0x010C   (0x0001)  
	bool                                               bAnimateVertically;                                         // 0x010D   (0x0001)  
	bool                                               bAnimateOpacity;                                            // 0x010E   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x010F   (0x0001)  MISSED
	class USlateBrushAsset*                            PieceImage;                                                 // 0x0110   (0x0008)  
	FSlateBrush                                        Image;                                                      // 0x0118   (0x0090)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x01A8   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.Throbber.SetNumberOfPieces
	constexpr static const FunctionPointer<UThrobber, void, const int32_t> SetNumberOfPieces = { 0x3d9fd00, 0 }; 
	// Function /Script/UMG.Throbber.SetAnimateVertically
	constexpr static const FunctionPointer<UThrobber, void, const bool> SetAnimateVertically = { 0x3d9fae0, 1 }; 
	// Function /Script/UMG.Throbber.SetAnimateOpacity
	constexpr static const FunctionPointer<UThrobber, void, const bool> SetAnimateOpacity = { 0x3d9f9d0, 2 }; 
	// Function /Script/UMG.Throbber.SetAnimateHorizontally
	constexpr static const FunctionPointer<UThrobber, void, const bool> SetAnimateHorizontally = { 0x3d9fbf0, 3 }; 
};

/// Class /Script/UMG.TileView
/// Size: 0x08B8 (2232 bytes) (0x000890 - 0x0008B8) align n/a MaxSize: 0x08B8
class UTileView : public UListView
{ 
public:
	float                                              EntryHeight;                                                // 0x0890   (0x0004)  
	float                                              EntryWidth;                                                 // 0x0894   (0x0004)  
	EListItemAlignment                                 TileAlignment;                                              // 0x0898   (0x0001)  
	bool                                               bWrapHorizontalNavigation;                                  // 0x0899   (0x0001)  
	bool                                               bAllowSelectionJumping;                                     // 0x089A   (0x0001)  
	bool                                               bJumpIndexByRowWhenFindNavigableItem;                       // 0x089B   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1C];                                      // 0x089C   (0x001C)  MISSED

	/// Functions
	// Function /Script/UMG.TileView.SetEntryWidth
	constexpr static const FunctionPointer<UTileView, void, const float> SetEntryWidth = { 0x3da0250, 0 }; 
	// Function /Script/UMG.TileView.SetEntryHeight
	constexpr static const FunctionPointer<UTileView, void, const float> SetEntryHeight = { 0x3da0360, 1 }; 
	// Function /Script/UMG.TileView.GetEntryWidth
	constexpr static const FunctionPointer<UTileView, float> GetEntryWidth = { 0x3da0210, 2 }; 
	// Function /Script/UMG.TileView.GetEntryHeight
	constexpr static const FunctionPointer<UTileView, float> GetEntryHeight = { 0x3da0230, 3 }; 
};

/// Class /Script/UMG.TreeView
/// Size: 0x08E8 (2280 bytes) (0x000890 - 0x0008E8) align n/a MaxSize: 0x08E8
class UTreeView : public UListView
{ 
public:
	unsigned char                                      UnknownData02_8[0x10];                                      // 0x0890   (0x0010)  MISSED
	FDelegateProperty                                  BP_OnGetItemChildren;                                       // 0x08A0   (0x0010)  
	FMulticastInlineDelegate                           BP_OnItemExpansionChanged;                                  // 0x08B0   (0x0010)  
	unsigned char                                      UnknownData03_7[0x28];                                      // 0x08C0   (0x0028)  MISSED

	/// Functions
	// Function /Script/UMG.TreeView.SetItemExpansion
	constexpr static const FunctionPointer<UTreeView, void, const UObject*, const bool> SetItemExpansion = { 0x3da0a10, 0 }; 
	// Function /Script/UMG.TreeView.ExpandAll
	constexpr static const FunctionPointer<UTreeView, void> ExpandAll = { 0x3da0980, 1 }; 
	// Function /Script/UMG.TreeView.CollapseAll
	constexpr static const FunctionPointer<UTreeView, void> CollapseAll = { 0x3da0920, 2 }; 
};

/// Struct /Script/MovieScene.MovieSceneSequenceID
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FMovieSceneSequenceID
{ 
	uint32_t                                           Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneRootEvaluationTemplateInstance
/// Size: 0x00E8 (232 bytes) (0x000000 - 0x0000E8) align n/a MaxSize: 0x00E8
struct FMovieSceneRootEvaluationTemplateInstance
{ 
	TWeakObjectPtr<class UMovieSceneSequence*>         WeakRootSequence;                                           // 0x0000   (0x0008)  
	class UMovieSceneCompiledDataManager*              CompiledDataManager;                                        // 0x0008   (0x0008)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x0010   (0x0008)  MISSED
	class UMovieSceneEntitySystemLinker*               EntitySystemLinker;                                         // 0x0018   (0x0008)  
	unsigned char                                      UnknownData04_6[0x70];                                      // 0x0020   (0x0070)  MISSED
	TMap<FMovieSceneSequenceID, class UObject*>        DirectorInstances;                                          // 0x0090   (0x0050)  
	unsigned char                                      UnknownData05_7[0x8];                                       // 0x00E0   (0x0008)  MISSED
};

/// Class /Script/UMG.UMGSequencePlayer
/// Size: 0x0580 (1408 bytes) (0x000028 - 0x000580) align n/a MaxSize: 0x0580
class UUMGSequencePlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData03_8[0x3E8];                                     // 0x0028   (0x03E8)  MISSED
	class UWidgetAnimation*                            Animation;                                                  // 0x0410   (0x0008)  
	unsigned char                                      UnknownData04_6[0x8];                                       // 0x0418   (0x0008)  MISSED
	FMovieSceneRootEvaluationTemplateInstance          RootTemplateInstance;                                       // 0x0420   (0x00E8)  
	unsigned char                                      UnknownData05_7[0x78];                                      // 0x0508   (0x0078)  MISSED

	/// Functions
	// Function /Script/UMG.UMGSequencePlayer.SetUserTag
	constexpr static const FunctionPointer<UUMGSequencePlayer, void, const FName> SetUserTag = { 0x3da0fc0, 0 }; 
	// Function /Script/UMG.UMGSequencePlayer.GetUserTag
	constexpr static const FunctionPointer<UUMGSequencePlayer, FName> GetUserTag = { 0x3da10a0, 1 }; 
};

/// Class /Script/UMG.UMGSequenceTickManager
/// Size: 0x0120 (288 bytes) (0x000028 - 0x000120) align n/a MaxSize: 0x0120
class UUMGSequenceTickManager : public UObject
{ 
public:
	TSet<TWeakObjectPtr<UUserWidget*>>                 WeakUserWidgets;                                            // 0x0028   (0x0050)  
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0078   (0x0008)  
	unsigned char                                      UnknownData01_7[0xA0];                                      // 0x0080   (0x00A0)  MISSED
};

/// Class /Script/UMG.UniformGridPanel
/// Size: 0x0148 (328 bytes) (0x000120 - 0x000148) align n/a MaxSize: 0x0148
class UUniformGridPanel : public UPanelWidget
{ 
public:
	FMargin                                            SlotPadding;                                                // 0x0120   (0x0010)  
	float                                              MinDesiredSlotWidth;                                        // 0x0130   (0x0004)  
	float                                              MinDesiredSlotHeight;                                       // 0x0134   (0x0004)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0138   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.UniformGridPanel.SetSlotPadding
	constexpr static const FunctionPointer<UUniformGridPanel, void, const FMargin> SetSlotPadding = { 0x3da1db0, 0 }; 
	// Function /Script/UMG.UniformGridPanel.SetMinDesiredSlotWidth
	constexpr static const FunctionPointer<UUniformGridPanel, void, const float> SetMinDesiredSlotWidth = { 0x3da1c60, 1 }; 
	// Function /Script/UMG.UniformGridPanel.SetMinDesiredSlotHeight
	constexpr static const FunctionPointer<UUniformGridPanel, void, const float> SetMinDesiredSlotHeight = { 0x3da1b10, 2 }; 
	// Function /Script/UMG.UniformGridPanel.AddChildToUniformGrid
	constexpr static const FunctionPointer<UUniformGridPanel, UUniformGridSlot*, const UWidget*, const int32_t, const int32_t> AddChildToUniformGrid = { 0x3da17b0, 3 }; 
};

/// Class /Script/UMG.UniformGridSlot
/// Size: 0x0050 (80 bytes) (0x000038 - 0x000050) align n/a MaxSize: 0x0050
class UUniformGridSlot : public UPanelSlot
{ 
public:
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0038   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0039   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x003A   (0x0002)  MISSED
	int32_t                                            Row;                                                        // 0x003C   (0x0004)  
	int32_t                                            Column;                                                     // 0x0040   (0x0004)  
	unsigned char                                      UnknownData03_7[0xC];                                       // 0x0044   (0x000C)  MISSED

	/// Functions
	// Function /Script/UMG.UniformGridSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UUniformGridSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3da2310, 0 }; 
	// Function /Script/UMG.UniformGridSlot.SetRow
	constexpr static const FunctionPointer<UUniformGridSlot, void, const int32_t> SetRow = { 0x3da2590, 1 }; 
	// Function /Script/UMG.UniformGridSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UUniformGridSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3da23e0, 2 }; 
	// Function /Script/UMG.UniformGridSlot.SetColumn
	constexpr static const FunctionPointer<UUniformGridSlot, void, const int32_t> SetColumn = { 0x3da24b0, 3 }; 
};

/// Class /Script/UMG.VerticalBox
/// Size: 0x0130 (304 bytes) (0x000120 - 0x000130) align n/a MaxSize: 0x0130
class UVerticalBox : public UPanelWidget
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0120   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.VerticalBox.AddChildToVerticalBox
	constexpr static const FunctionPointer<UVerticalBox, UVerticalBoxSlot*, const UWidget*> AddChildToVerticalBox = { 0x3daabc0, 0 }; 
};

/// Class /Script/UMG.VerticalBoxSlot
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UVerticalBoxSlot : public UPanelSlot
{ 
public:
	FSlateChildSize                                    Size;                                                       // 0x0038   (0x0008)  
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	unsigned char                                      UnknownData02_6[0x8];                                       // 0x0050   (0x0008)  MISSED
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0058   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0059   (0x0001)  
	unsigned char                                      UnknownData03_7[0x6];                                       // 0x005A   (0x0006)  MISSED

	/// Functions
	// Function /Script/UMG.VerticalBoxSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UVerticalBoxSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3dab160, 0 }; 
	// Function /Script/UMG.VerticalBoxSlot.SetSize
	constexpr static const FunctionPointer<UVerticalBoxSlot, void, const FSlateChildSize> SetSize = { 0x3dab300, 1 }; 
	// Function /Script/UMG.VerticalBoxSlot.SetPadding
	constexpr static const FunctionPointer<UVerticalBoxSlot, void, const FMargin> SetPadding = { 0x3dab3d0, 2 }; 
	// Function /Script/UMG.VerticalBoxSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UVerticalBoxSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3dab230, 3 }; 
};

/// Class /Script/UMG.Viewport
/// Size: 0x0168 (360 bytes) (0x000120 - 0x000168) align n/a MaxSize: 0x0168
class UViewport : public UContentWidget
{ 
public:
	FLinearColor                                       BackgroundColor;                                            // 0x0120   (0x0010)  
	unsigned char                                      UnknownData01_7[0x38];                                      // 0x0130   (0x0038)  MISSED

	/// Functions
	// Function /Script/UMG.Viewport.Spawn
	constexpr static const FunctionPointer<UViewport, AActor*, const UClass*> Spawn = { 0x3dab930, 0 }; 
	// Function /Script/UMG.Viewport.SetViewRotation
	constexpr static const FunctionPointer<UViewport, void, const FRotator> SetViewRotation = { 0x3dabb20, 1 }; 
	// Function /Script/UMG.Viewport.SetViewLocation
	constexpr static const FunctionPointer<UViewport, void, const FVector> SetViewLocation = { 0x3dabc70, 2 }; 
	// Function /Script/UMG.Viewport.GetViewRotation
	constexpr static const FunctionPointer<UViewport, FRotator> GetViewRotation = { 0x3dabc10, 3 }; 
	// Function /Script/UMG.Viewport.GetViewportWorld
	constexpr static const FunctionPointer<UViewport, UWorld*> GetViewportWorld = { 0x3dabdd0, 4 }; 
	// Function /Script/UMG.Viewport.GetViewLocation
	constexpr static const FunctionPointer<UViewport, FVector> GetViewLocation = { 0x3dabd70, 5 }; 
};

/// Class /Script/UMG.VisibilityBinding
/// Size: 0x0060 (96 bytes) (0x000060 - 0x000060) align n/a MaxSize: 0x0060
class UVisibilityBinding : public UPropertyBinding
{ 
public:

	/// Functions
	// Function /Script/UMG.VisibilityBinding.GetValue
	constexpr static const FunctionPointer<UVisibilityBinding, ESlateVisibility> GetValue = { 0x3dac290, 0 }; 
};

/// Class /Script/MovieScene.MovieSceneSequence
/// Size: 0x0060 (96 bytes) (0x000050 - 0x000060) align n/a MaxSize: 0x0060
class UMovieSceneSequence : public UMovieSceneSignedObject
{ 
public:
	class UMovieSceneCompiledData*                     CompiledData;                                               // 0x0050   (0x0008)  
	EMovieSceneCompletionMode                          DefaultCompletionMode;                                      // 0x0058   (0x0001)  
	bool                                               bParentContextsAreSignificant;                              // 0x0059   (0x0001)  
	bool                                               bPlayableDirectly;                                          // 0x005A   (0x0001)  
	EMovieSceneSequenceFlags                           SequenceFlags;                                              // 0x005B   (0x0001)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x005C   (0x0004)  MISSED

	/// Functions
	// Function /Script/MovieScene.MovieSceneSequence.FindBindingsByTag
	constexpr static const FunctionPointer<UMovieSceneSequence, TArray<FMovieSceneObjectBindingID>, const FName> FindBindingsByTag = { 0x3b634b0, 0 }; 
	// Function /Script/MovieScene.MovieSceneSequence.FindBindingByTag
	constexpr static const FunctionPointer<UMovieSceneSequence, FMovieSceneObjectBindingID, const FName> FindBindingByTag = { 0x3b635a0, 1 }; 
};

/// Struct /Script/UMG.WidgetAnimationBinding
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FWidgetAnimationBinding
{ 
	FName                                              WidgetName;                                                 // 0x0000   (0x0008)  
	FName                                              SlotWidgetName;                                             // 0x0008   (0x0008)  
	FGuid                                              AnimationGuid;                                              // 0x0010   (0x0010)  
	bool                                               bIsRootWidget;                                              // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0021   (0x0003)  MISSED
};

/// Class /Script/UMG.WidgetAnimation
/// Size: 0x0090 (144 bytes) (0x000060 - 0x000090) align n/a MaxSize: 0x0090
class UWidgetAnimation : public UMovieSceneSequence
{ 
public:
	class UMovieScene*                                 MovieScene;                                                 // 0x0060   (0x0008)  
	TArray<FWidgetAnimationBinding>                    AnimationBindings;                                          // 0x0068   (0x0010)  
	bool                                               bLegacyFinishOnStop;                                        // 0x0078   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0079   (0x0007)  MISSED
	FString                                            DisplayLabel;                                               // 0x0080   (0x0010)  

	/// Functions
	// Function /Script/UMG.WidgetAnimation.UnbindFromAnimationStarted
	constexpr static const FunctionPointer<UWidgetAnimation, void, const UUserWidget*, const FDelegateProperty> UnbindFromAnimationStarted = { 0x3db0fe0, 0 }; 
	// Function /Script/UMG.WidgetAnimation.UnbindFromAnimationFinished
	constexpr static const FunctionPointer<UWidgetAnimation, void, const UUserWidget*, const FDelegateProperty> UnbindFromAnimationFinished = { 0x3db0b60, 1 }; 
	// Function /Script/UMG.WidgetAnimation.UnbindAllFromAnimationStarted
	constexpr static const FunctionPointer<UWidgetAnimation, void, const UUserWidget*> UnbindAllFromAnimationStarted = { 0x3db0f00, 2 }; 
	// Function /Script/UMG.WidgetAnimation.UnbindAllFromAnimationFinished
	constexpr static const FunctionPointer<UWidgetAnimation, void, const UUserWidget*> UnbindAllFromAnimationFinished = { 0x3db0a80, 3 }; 
	// Function /Script/UMG.WidgetAnimation.GetStartTime
	constexpr static const FunctionPointer<UWidgetAnimation, float> GetStartTime = { 0x3db13d0, 4 }; 
	// Function /Script/UMG.WidgetAnimation.GetEndTime
	constexpr static const FunctionPointer<UWidgetAnimation, float> GetEndTime = { 0x3db1380, 5 }; 
	// Function /Script/UMG.WidgetAnimation.BindToAnimationStarted
	constexpr static const FunctionPointer<UWidgetAnimation, void, const UUserWidget*, const FDelegateProperty> BindToAnimationStarted = { 0x3db1190, 6 }; 
	// Function /Script/UMG.WidgetAnimation.BindToAnimationFinished
	constexpr static const FunctionPointer<UWidgetAnimation, void, const UUserWidget*, const FDelegateProperty> BindToAnimationFinished = { 0x3db0d10, 7 }; 
};

/// Struct /Script/UMG.BlueprintWidgetAnimationDelegateBinding
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FBlueprintWidgetAnimationDelegateBinding
{ 
	EWidgetAnimationEvent                              Action;                                                     // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              AnimationToBind;                                            // 0x0004   (0x0008)  
	FName                                              FunctionNameToBind;                                         // 0x000C   (0x0008)  
	FName                                              UserTag;                                                    // 0x0014   (0x0008)  
};

/// Class /Script/UMG.WidgetAnimationDelegateBinding
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
{ 
public:
	TArray<FBlueprintWidgetAnimationDelegateBinding>   WidgetAnimationDelegateBindings;                            // 0x0028   (0x0010)  
};

/// Class /Script/UMG.WidgetAnimationPlayCallbackProxy
/// Size: 0x0048 (72 bytes) (0x000028 - 0x000048) align n/a MaxSize: 0x0048
class UWidgetAnimationPlayCallbackProxy : public UObject
{ 
public:
	FMulticastInlineDelegate                           Finished;                                                   // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0038   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.WidgetAnimationPlayCallbackProxy.CreatePlayAnimationTimeRangeProxyObject
	constexpr static const FunctionPointer<UWidgetAnimationPlayCallbackProxy, UWidgetAnimationPlayCallbackProxy*, const UUMGSequencePlayer*&, const UUserWidget*, const UWidgetAnimation*, const float, const float, const int32_t, const TEnumAsByte<EUMGSequencePlayMode>, const float> CreatePlayAnimationTimeRangeProxyObject = { 0x3db2180, 0 }; 
	// Function /Script/UMG.WidgetAnimationPlayCallbackProxy.CreatePlayAnimationProxyObject
	constexpr static const FunctionPointer<UWidgetAnimationPlayCallbackProxy, UWidgetAnimationPlayCallbackProxy*, const UUMGSequencePlayer*&, const UUserWidget*, const UWidgetAnimation*, const float, const int32_t, const TEnumAsByte<EUMGSequencePlayMode>, const float> CreatePlayAnimationProxyObject = { 0x3db26f0, 1 }; 
};

/// Class /Script/UMG.WidgetBinding
/// Size: 0x0060 (96 bytes) (0x000060 - 0x000060) align n/a MaxSize: 0x0060
class UWidgetBinding : public UPropertyBinding
{ 
public:

	/// Functions
	// Function /Script/UMG.WidgetBinding.GetValue
	constexpr static const FunctionPointer<UWidgetBinding, UWidget*> GetValue = { 0x3db2f90, 0 }; 
};

/// Struct /Script/UMG.DelegateRuntimeBinding
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FDelegateRuntimeBinding
{ 
	FString                                            ObjectName;                                                 // 0x0000   (0x0010)  
	FName                                              PropertyName;                                               // 0x0010   (0x0008)  
	FName                                              FunctionName;                                               // 0x0018   (0x0008)  
	FDynamicPropertyPath                               SourcePath;                                                 // 0x0020   (0x0028)  
	EBindingKind                                       Kind;                                                       // 0x0048   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0049   (0x0007)  MISSED
};

/// Class /Script/UMG.WidgetBlueprintGeneratedClass
/// Size: 0x0368 (872 bytes) (0x000328 - 0x000368) align n/a MaxSize: 0x0368
class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
{ 
public:
	class UWidgetTree*                                 WidgetTree;                                                 // 0x0328   (0x0008)  
	bool                                               bClassRequiresNativeTick : 1;                               // 0x0330:0 (0x0001)  
	unsigned char                                      UnknownData01_5[0x7];                                       // 0x0331   (0x0007)  MISSED
	TArray<FDelegateRuntimeBinding>                    Bindings;                                                   // 0x0338   (0x0010)  
	TArray<class UWidgetAnimation*>                    Animations;                                                 // 0x0348   (0x0010)  
	TArray<FName>                                      NamedSlots;                                                 // 0x0358   (0x0010)  
};

/// Class /Script/UMG.WidgetBlueprintLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/UMG.WidgetBlueprintLibrary.UnlockMouse
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&> UnlockMouse = { 0x3db7df0, 0 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.Unhandled
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply> Unhandled = { 0x3db85a0, 1 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetWindowTitleBarState
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const UWidget*, const EWindowTitleBarMode, const bool, const bool, const bool> SetWindowTitleBarState = { 0x3db3c10, 2 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetWindowTitleBarOnCloseClickedDelegate
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const FDelegateProperty> SetWindowTitleBarOnCloseClickedDelegate = { 0x3db3a10, 3 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetWindowTitleBarCloseButtonActive
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const bool> SetWindowTitleBarCloseButtonActive = { 0x3db3940, 4 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetUserFocus
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&, const UWidget*, const bool> SetUserFocus = { 0x3db7b20, 5 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetMousePosition
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&, const FVector2D> SetMousePosition = { 0x3db7740, 6 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_UIOnlyEx
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const APlayerController*, const UWidget*, const EMouseLockMode> SetInputMode_UIOnlyEx = { 0x3dba5f0, 7 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_UIOnly
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const APlayerController*, const UWidget*, const bool> SetInputMode_UIOnly = { 0x3dba7d0, 8 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_GameOnly
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const APlayerController*> SetInputMode_GameOnly = { 0x3db9e40, 9 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_GameAndUIEx
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const APlayerController*, const UWidget*, const EMouseLockMode, const bool> SetInputMode_GameAndUIEx = { 0x3db9f30, 10 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetInputMode_GameAndUI
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const APlayerController*, const UWidget*, const bool, const bool> SetInputMode_GameAndUI = { 0x3dba290, 11 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetHardwareCursor
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, bool, const UObject*, const TEnumAsByte<EMouseCursor>, const FName, const FVector2D> SetHardwareCursor = { 0x3db3f20, 12 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetFocusToGameViewport
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void> SetFocusToGameViewport = { 0x3db9e20, 13 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetColorVisionDeficiencyType
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const EColorVisionDeficiency, const float, const bool, const bool> SetColorVisionDeficiencyType = { 0x3db41f0, 14 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetBrushResourceToTexture
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const FSlateBrush&, const UTexture2D*> SetBrushResourceToTexture = { 0x3db5b80, 15 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.SetBrushResourceToMaterial
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const FSlateBrush&, const UMaterialInterface*> SetBrushResourceToMaterial = { 0x3db5b80, 16 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.RestorePreviousWindowTitleBarState
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void> RestorePreviousWindowTitleBarState = { 0x3db3b20, 17 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.ReleaseMouseCapture
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&> ReleaseMouseCapture = { 0x3db81f0, 18 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.ReleaseJoystickCapture
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&, const bool> ReleaseJoystickCapture = { 0x3db7940, 19 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.OnGameWindowCloseButtonClickedDelegate__DelegateSignature
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void> OnGameWindowCloseButtonClickedDelegate__DelegateSignature = { 0x2bbb090, 20 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.NoResourceBrush
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FSlateBrush> NoResourceBrush = { 0x3db5b10, 21 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.MakeBrushFromTexture
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FSlateBrush, const UTexture2D*, const int32_t, const int32_t> MakeBrushFromTexture = { 0x3db6750, 22 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.MakeBrushFromMaterial
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FSlateBrush, const UMaterialInterface*, const int32_t, const int32_t> MakeBrushFromMaterial = { 0x3db6400, 23 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.MakeBrushFromAsset
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FSlateBrush, const USlateBrushAsset*> MakeBrushFromAsset = { 0x3db6ae0, 24 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.LockMouse
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&, const UWidget*> LockMouse = { 0x3db7f90, 25 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.IsDragDropping
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, bool> IsDragDropping = { 0x3db6d90, 26 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.Handled
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply> Handled = { 0x3db8610, 27 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetSafeZonePadding
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const UObject*, const FVector4&, const FVector2D&, const FVector4&> GetSafeZonePadding = { 0x3db44b0, 28 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetKeyEventFromAnalogInputEvent
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FKeyEvent, const FAnalogInputEvent&> GetKeyEventFromAnalogInputEvent = { 0x3db4b90, 29 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromPointerEvent
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FInputEvent, const FPointerEvent&> GetInputEventFromPointerEvent = { 0x3db48d0, 30 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromNavigationEvent
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FInputEvent, const FNavigationEvent&> GetInputEventFromNavigationEvent = { 0x3db47b0, 31 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromKeyEvent
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FInputEvent, const FKeyEvent&> GetInputEventFromKeyEvent = { 0x3db4dc0, 32 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetInputEventFromCharacterEvent
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FInputEvent, const FCharacterEvent&> GetInputEventFromCharacterEvent = { 0x3db4a70, 33 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetDynamicMaterial
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, UMaterialInstanceDynamic*, const FSlateBrush&> GetDynamicMaterial = { 0x3db5850, 34 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetDragDroppingContent
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, UDragDropOperation*> GetDragDroppingContent = { 0x3db6c40, 35 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetBrushResourceAsTexture2D
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, UTexture2D*, const FSlateBrush&> GetBrushResourceAsTexture2D = { 0x3db6000, 36 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetBrushResourceAsMaterial
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, UMaterialInterface*, const FSlateBrush&> GetBrushResourceAsMaterial = { 0x3db5df0, 37 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetBrushResource
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, UObject*, const FSlateBrush&> GetBrushResource = { 0x3db6210, 38 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetAllWidgetsWithInterface
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const UObject*, const TArray<UUserWidget*>&, const UClass*, const bool> GetAllWidgetsWithInterface = { 0x3db4f30, 39 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.GetAllWidgetsOfClass
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const UObject*, const TArray<UUserWidget*>&, const UClass*, const bool> GetAllWidgetsOfClass = { 0x3db53d0, 40 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.EndDragDrop
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&> EndDragDrop = { 0x3db6e90, 41 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawTextFormatted
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const FPaintContext&, const FText&, const FVector2D, const UFont*, const int32_t, const FName, const FLinearColor> DrawTextFormatted = { 0x3db8680, 42 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawText
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const FPaintContext&, const FString, const FVector2D, const FLinearColor> DrawText = { 0x3db8dd0, 43 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawLines
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const FPaintContext&, const TArray<FVector2D>&, const FLinearColor, const bool, const float> DrawLines = { 0x3db90a0, 44 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawLine
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const FPaintContext&, const FVector2D, const FVector2D, const FLinearColor, const bool, const float> DrawLine = { 0x3db9530, 45 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.DrawBox
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void, const FPaintContext&, const FVector2D, const FVector2D, const USlateBrushAsset*, const FLinearColor> DrawBox = { 0x3db98d0, 46 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.DismissAllMenus
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void> DismissAllMenus = { 0x3db5820, 47 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.DetectDragIfPressed
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FPointerEvent&, const UWidget*, const FKey> DetectDragIfPressed = { 0x3db6ff0, 48 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.DetectDrag
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&, const UWidget*, const FKey> DetectDrag = { 0x3db7330, 49 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.CreateDragDropOperation
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, UDragDropOperation*, const UClass*> CreateDragDropOperation = { 0x3dba9b0, 50 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.Create
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, UUserWidget*, const UObject*, const UClass*, const APlayerController*> Create = { 0x3dbaba0, 51 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.ClearUserFocus
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&, const bool> ClearUserFocus = { 0x3db7940, 52 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.CaptureMouse
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&, const UWidget*> CaptureMouse = { 0x3db8340, 53 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.CaptureJoystick
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, FEventReply, const FEventReply&, const UWidget*, const bool> CaptureJoystick = { 0x3db7b20, 54 }; 
	// Function /Script/UMG.WidgetBlueprintLibrary.CancelDragDrop
	constexpr static const FunctionPointer<UWidgetBlueprintLibrary, void> CancelDragDrop = { 0x3db6c20, 55 }; 
};

/// Class /Script/UMG.WidgetComponent
/// Size: 0x0690 (1680 bytes) (0x000560 - 0x000690) align n/a MaxSize: 0x0690
class UWidgetComponent : public UMeshComponent
{ 
public:
	EWidgetSpace                                       Space;                                                      // 0x0560   (0x0001)  
	EWidgetTimingPolicy                                TimingPolicy;                                               // 0x0561   (0x0001)  
	unsigned char                                      UnknownData09_6[0x6];                                       // 0x0562   (0x0006)  MISSED
	class UClass*                                      WidgetClass;                                                // 0x0568   (0x0008)  
	FIntPoint                                          DrawSize;                                                   // 0x0570   (0x0008)  
	bool                                               bManuallyRedraw;                                            // 0x0578   (0x0001)  
	bool                                               bRedrawRequested;                                           // 0x0579   (0x0001)  
	unsigned char                                      UnknownData10_6[0x2];                                       // 0x057A   (0x0002)  MISSED
	float                                              RedrawTime;                                                 // 0x057C   (0x0004)  
	unsigned char                                      UnknownData11_6[0x8];                                       // 0x0580   (0x0008)  MISSED
	FIntPoint                                          CurrentDrawSize;                                            // 0x0588   (0x0008)  
	bool                                               bDrawAtDesiredSize;                                         // 0x0590   (0x0001)  
	unsigned char                                      UnknownData12_6[0x3];                                       // 0x0591   (0x0003)  MISSED
	FVector2D                                          Pivot;                                                      // 0x0594   (0x0008)  
	bool                                               bReceiveHardwareInput;                                      // 0x059C   (0x0001)  
	bool                                               bWindowFocusable;                                           // 0x059D   (0x0001)  
	EWindowVisibility                                  WindowVisibility;                                           // 0x059E   (0x0001)  
	bool                                               bApplyGammaCorrection;                                      // 0x059F   (0x0001)  
	class ULocalPlayer*                                OwnerPlayer;                                                // 0x05A0   (0x0008)  
	FLinearColor                                       BackgroundColor;                                            // 0x05A8   (0x0010)  
	FLinearColor                                       TintColorAndOpacity;                                        // 0x05B8   (0x0010)  
	float                                              OpacityFromTexture;                                         // 0x05C8   (0x0004)  
	EWidgetBlendMode                                   BlendMode;                                                  // 0x05CC   (0x0001)  
	bool                                               bIsTwoSided;                                                // 0x05CD   (0x0001)  
	bool                                               TickWhenOffscreen;                                          // 0x05CE   (0x0001)  
	unsigned char                                      UnknownData13_6[0x1];                                       // 0x05CF   (0x0001)  MISSED
	class UBodySetup*                                  BodySetup;                                                  // 0x05D0   (0x0008)  
	class UMaterialInterface*                          TranslucentMaterial;                                        // 0x05D8   (0x0008)  
	class UMaterialInterface*                          TranslucentMaterial_OneSided;                               // 0x05E0   (0x0008)  
	class UMaterialInterface*                          OpaqueMaterial;                                             // 0x05E8   (0x0008)  
	class UMaterialInterface*                          OpaqueMaterial_OneSided;                                    // 0x05F0   (0x0008)  
	class UMaterialInterface*                          MaskedMaterial;                                             // 0x05F8   (0x0008)  
	class UMaterialInterface*                          MaskedMaterial_OneSided;                                    // 0x0600   (0x0008)  
	class UTextureRenderTarget2D*                      RenderTarget;                                               // 0x0608   (0x0008)  
	class UMaterialInstanceDynamic*                    MaterialInstance;                                           // 0x0610   (0x0008)  
	bool                                               bAddedToScreen;                                             // 0x0618   (0x0001)  
	bool                                               bEditTimeUsable;                                            // 0x0619   (0x0001)  
	unsigned char                                      UnknownData14_6[0x2];                                       // 0x061A   (0x0002)  MISSED
	FName                                              SharedLayerName;                                            // 0x061C   (0x0008)  
	int32_t                                            LayerZOrder;                                                // 0x0624   (0x0004)  
	EWidgetGeometryMode                                GeometryMode;                                               // 0x0628   (0x0001)  
	unsigned char                                      UnknownData15_6[0x3];                                       // 0x0629   (0x0003)  MISSED
	float                                              CylinderArcAngle;                                           // 0x062C   (0x0004)  
	ETickMode                                          TickMode;                                                   // 0x0630   (0x0001)  
	unsigned char                                      UnknownData16_6[0x27];                                      // 0x0631   (0x0027)  MISSED
	class UUserWidget*                                 Widget;                                                     // 0x0658   (0x0008)  
	unsigned char                                      UnknownData17_7[0x30];                                      // 0x0660   (0x0030)  MISSED

	/// Functions
	// Function /Script/UMG.WidgetComponent.SetWindowVisibility
	constexpr static const FunctionPointer<UWidgetComponent, void, const EWindowVisibility> SetWindowVisibility = { 0x3dbc3f0, 0 }; 
	// Function /Script/UMG.WidgetComponent.SetWindowFocusable
	constexpr static const FunctionPointer<UWidgetComponent, void, const bool> SetWindowFocusable = { 0x3dbc570, 1 }; 
	// Function /Script/UMG.WidgetComponent.SetWidgetSpace
	constexpr static const FunctionPointer<UWidgetComponent, void, const EWidgetSpace> SetWidgetSpace = { 0x2831730, 2 }; 
	// Function /Script/UMG.WidgetComponent.SetWidget
	constexpr static const FunctionPointer<UWidgetComponent, void, const UUserWidget*> SetWidget = { 0x3dbcae0, 3 }; 
	// Function /Script/UMG.WidgetComponent.SetTwoSided
	constexpr static const FunctionPointer<UWidgetComponent, void, const bool> SetTwoSided = { 0x2831e60, 4 }; 
	// Function /Script/UMG.WidgetComponent.SetTintColorAndOpacity
	constexpr static const FunctionPointer<UWidgetComponent, void, const FLinearColor> SetTintColorAndOpacity = { 0x3dbc840, 5 }; 
	// Function /Script/UMG.WidgetComponent.SetTickWhenOffscreen
	constexpr static const FunctionPointer<UWidgetComponent, void, const bool> SetTickWhenOffscreen = { 0x2831d60, 6 }; 
	// Function /Script/UMG.WidgetComponent.SetTickMode
	constexpr static const FunctionPointer<UWidgetComponent, void, const ETickMode> SetTickMode = { 0x3dbc310, 7 }; 
	// Function /Script/UMG.WidgetComponent.SetRedrawTime
	constexpr static const FunctionPointer<UWidgetComponent, void, const float> SetRedrawTime = { 0x2831820, 8 }; 
	// Function /Script/UMG.WidgetComponent.SetPivot
	constexpr static const FunctionPointer<UWidgetComponent, void, const FVector2D&> SetPivot = { 0x2831a10, 9 }; 
	// Function /Script/UMG.WidgetComponent.SetOwnerPlayer
	constexpr static const FunctionPointer<UWidgetComponent, void, const ULocalPlayer*> SetOwnerPlayer = { 0x3dbc9f0, 10 }; 
	// Function /Script/UMG.WidgetComponent.SetManuallyRedraw
	constexpr static const FunctionPointer<UWidgetComponent, void, const bool> SetManuallyRedraw = { 0x2832170, 11 }; 
	// Function /Script/UMG.WidgetComponent.SetGeometryMode
	constexpr static const FunctionPointer<UWidgetComponent, void, const EWidgetGeometryMode> SetGeometryMode = { 0x3dbc750, 12 }; 
	// Function /Script/UMG.WidgetComponent.SetDrawSize
	constexpr static const FunctionPointer<UWidgetComponent, void, const FVector2D> SetDrawSize = { 0x2831f90, 13 }; 
	// Function /Script/UMG.WidgetComponent.SetDrawAtDesiredSize
	constexpr static const FunctionPointer<UWidgetComponent, void, const bool> SetDrawAtDesiredSize = { 0x2831910, 14 }; 
	// Function /Script/UMG.WidgetComponent.SetCylinderArcAngle
	constexpr static const FunctionPointer<UWidgetComponent, void, const float> SetCylinderArcAngle = { 0x3dbc660, 15 }; 
	// Function /Script/UMG.WidgetComponent.SetBackgroundColor
	constexpr static const FunctionPointer<UWidgetComponent, void, const FLinearColor> SetBackgroundColor = { 0x2831c40, 16 }; 
	// Function /Script/UMG.WidgetComponent.RequestRedraw
	constexpr static const FunctionPointer<UWidgetComponent, void> RequestRedraw = { 0x3dbc960, 17 }; 
	// Function /Script/UMG.WidgetComponent.IsWidgetVisible
	constexpr static const FunctionPointer<UWidgetComponent, bool> IsWidgetVisible = { 0x3dbc2e0, 18 }; 
	// Function /Script/UMG.WidgetComponent.GetWindowVisiblility
	constexpr static const FunctionPointer<UWidgetComponent, EWindowVisibility> GetWindowVisiblility = { 0x3dbc550, 19 }; 
	// Function /Script/UMG.WidgetComponent.GetWindowFocusable
	constexpr static const FunctionPointer<UWidgetComponent, bool> GetWindowFocusable = { 0x2831440, 20 }; 
	// Function /Script/UMG.WidgetComponent.GetWidgetSpace
	constexpr static const FunctionPointer<UWidgetComponent, EWidgetSpace> GetWidgetSpace = { 0x2831800, 21 }; 
	// Function /Script/UMG.WidgetComponent.GetWidget
	constexpr static const FunctionPointer<UWidgetComponent, UUserWidget*> GetWidget = { 0x3dbcbc0, 22 }; 
	// Function /Script/UMG.WidgetComponent.GetUserWidgetObject
	constexpr static const FunctionPointer<UWidgetComponent, UUserWidget*> GetUserWidgetObject = { 0x3dbcc30, 23 }; 
	// Function /Script/UMG.WidgetComponent.GetTwoSided
	constexpr static const FunctionPointer<UWidgetComponent, bool> GetTwoSided = { 0x2831f50, 24 }; 
	// Function /Script/UMG.WidgetComponent.GetTickWhenOffscreen
	constexpr static const FunctionPointer<UWidgetComponent, bool> GetTickWhenOffscreen = { 0x2831e40, 25 }; 
	// Function /Script/UMG.WidgetComponent.GetRenderTarget
	constexpr static const FunctionPointer<UWidgetComponent, UTextureRenderTarget2D*> GetRenderTarget = { 0x3dbcc10, 26 }; 
	// Function /Script/UMG.WidgetComponent.GetRedrawTime
	constexpr static const FunctionPointer<UWidgetComponent, float> GetRedrawTime = { 0x28318f0, 27 }; 
	// Function /Script/UMG.WidgetComponent.GetPivot
	constexpr static const FunctionPointer<UWidgetComponent, FVector2D> GetPivot = { 0x2831af0, 28 }; 
	// Function /Script/UMG.WidgetComponent.GetOwnerPlayer
	constexpr static const FunctionPointer<UWidgetComponent, ULocalPlayer*> GetOwnerPlayer = { 0x3dbc980, 29 }; 
	// Function /Script/UMG.WidgetComponent.GetMaterialInstance
	constexpr static const FunctionPointer<UWidgetComponent, UMaterialInstanceDynamic*> GetMaterialInstance = { 0x3dbcbf0, 30 }; 
	// Function /Script/UMG.WidgetComponent.GetManuallyRedraw
	constexpr static const FunctionPointer<UWidgetComponent, bool> GetManuallyRedraw = { 0x2832250, 31 }; 
	// Function /Script/UMG.WidgetComponent.GetGeometryMode
	constexpr static const FunctionPointer<UWidgetComponent, EWidgetGeometryMode> GetGeometryMode = { 0x3dbc820, 32 }; 
	// Function /Script/UMG.WidgetComponent.GetDrawSize
	constexpr static const FunctionPointer<UWidgetComponent, FVector2D> GetDrawSize = { 0x28320c0, 33 }; 
	// Function /Script/UMG.WidgetComponent.GetDrawAtDesiredSize
	constexpr static const FunctionPointer<UWidgetComponent, bool> GetDrawAtDesiredSize = { 0x28319f0, 34 }; 
	// Function /Script/UMG.WidgetComponent.GetCylinderArcAngle
	constexpr static const FunctionPointer<UWidgetComponent, float> GetCylinderArcAngle = { 0x3dbc730, 35 }; 
	// Function /Script/UMG.WidgetComponent.GetCurrentDrawSize
	constexpr static const FunctionPointer<UWidgetComponent, FVector2D> GetCurrentDrawSize = { 0x2832080, 36 }; 
};

/// Class /Script/UMG.WidgetInteractionComponent
/// Size: 0x0460 (1120 bytes) (0x000260 - 0x000460) align n/a MaxSize: 0x0460
class UWidgetInteractionComponent : public USceneComponent
{ 
public:
	FMulticastInlineDelegate                           OnHoveredWidgetChanged;                                     // 0x0260   (0x0010)  
	unsigned char                                      UnknownData06_6[0x10];                                      // 0x0270   (0x0010)  MISSED
	int32_t                                            VirtualUserIndex;                                           // 0x0280   (0x0004)  
	int32_t                                            PointerIndex;                                               // 0x0284   (0x0004)  
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                               // 0x0288   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0289   (0x0003)  MISSED
	float                                              InteractionDistance;                                        // 0x028C   (0x0004)  
	EWidgetInteractionSource                           InteractionSource;                                          // 0x0290   (0x0001)  
	bool                                               bEnableHitTesting;                                          // 0x0291   (0x0001)  
	bool                                               bShowDebug;                                                 // 0x0292   (0x0001)  
	unsigned char                                      UnknownData08_6[0x1];                                       // 0x0293   (0x0001)  MISSED
	float                                              DebugSphereLineThickness;                                   // 0x0294   (0x0004)  
	float                                              DebugLineThickness;                                         // 0x0298   (0x0004)  
	FLinearColor                                       DebugColor;                                                 // 0x029C   (0x0010)  
	unsigned char                                      UnknownData09_6[0x7C];                                      // 0x02AC   (0x007C)  MISSED
	FHitResult                                         CustomHitResult;                                            // 0x0328   (0x008C)  
	FVector2D                                          LocalHitLocation;                                           // 0x03B4   (0x0008)  
	FVector2D                                          LastLocalHitLocation;                                       // 0x03BC   (0x0008)  
	unsigned char                                      UnknownData10_6[0x4];                                       // 0x03C4   (0x0004)  MISSED
	class UWidgetComponent*                            HoveredWidgetComponent;                                     // 0x03C8   (0x0008)  
	FHitResult                                         LastHitResult;                                              // 0x03D0   (0x008C)  
	bool                                               bIsHoveredWidgetInteractable;                               // 0x045C   (0x0001)  
	bool                                               bIsHoveredWidgetFocusable;                                  // 0x045D   (0x0001)  
	bool                                               bIsHoveredWidgetHitTestVisible;                             // 0x045E   (0x0001)  
	unsigned char                                      UnknownData11_7[0x1];                                       // 0x045F   (0x0001)  MISSED

	/// Functions
	// Function /Script/UMG.WidgetInteractionComponent.SetFocus
	constexpr static const FunctionPointer<UWidgetInteractionComponent, void, const UWidget*> SetFocus = { 0x3dbdb60, 0 }; 
	// Function /Script/UMG.WidgetInteractionComponent.SetCustomHitResult
	constexpr static const FunctionPointer<UWidgetInteractionComponent, void, const FHitResult&> SetCustomHitResult = { 0x3dbdca0, 1 }; 
	// Function /Script/UMG.WidgetInteractionComponent.SendKeyChar
	constexpr static const FunctionPointer<UWidgetInteractionComponent, bool, const FString, const bool> SendKeyChar = { 0x3dbe050, 2 }; 
	// Function /Script/UMG.WidgetInteractionComponent.ScrollWheel
	constexpr static const FunctionPointer<UWidgetInteractionComponent, void, const float> ScrollWheel = { 0x3dbdf80, 3 }; 
	// Function /Script/UMG.WidgetInteractionComponent.ReleasePointerKey
	constexpr static const FunctionPointer<UWidgetInteractionComponent, void, const FKey> ReleasePointerKey = { 0x3dbe6c0, 4 }; 
	// Function /Script/UMG.WidgetInteractionComponent.ReleaseKey
	constexpr static const FunctionPointer<UWidgetInteractionComponent, bool, const FKey> ReleaseKey = { 0x3dbe380, 5 }; 
	// Function /Script/UMG.WidgetInteractionComponent.PressPointerKey
	constexpr static const FunctionPointer<UWidgetInteractionComponent, void, const FKey> PressPointerKey = { 0x3dbe800, 6 }; 
	// Function /Script/UMG.WidgetInteractionComponent.PressKey
	constexpr static const FunctionPointer<UWidgetInteractionComponent, bool, const FKey, const bool> PressKey = { 0x3dbe4d0, 7 }; 
	// Function /Script/UMG.WidgetInteractionComponent.PressAndReleaseKey
	constexpr static const FunctionPointer<UWidgetInteractionComponent, bool, const FKey> PressAndReleaseKey = { 0x3dbe230, 8 }; 
	// Function /Script/UMG.WidgetInteractionComponent.IsOverInteractableWidget
	constexpr static const FunctionPointer<UWidgetInteractionComponent, bool> IsOverInteractableWidget = { 0x3dbdf40, 9 }; 
	// Function /Script/UMG.WidgetInteractionComponent.IsOverHitTestVisibleWidget
	constexpr static const FunctionPointer<UWidgetInteractionComponent, bool> IsOverHitTestVisibleWidget = { 0x3dbdf00, 10 }; 
	// Function /Script/UMG.WidgetInteractionComponent.IsOverFocusableWidget
	constexpr static const FunctionPointer<UWidgetInteractionComponent, bool> IsOverFocusableWidget = { 0x3dbdf20, 11 }; 
	// Function /Script/UMG.WidgetInteractionComponent.GetLastHitResult
	constexpr static const FunctionPointer<UWidgetInteractionComponent, FHitResult> GetLastHitResult = { 0x3dbde60, 12 }; 
	// Function /Script/UMG.WidgetInteractionComponent.GetHoveredWidgetComponent
	constexpr static const FunctionPointer<UWidgetInteractionComponent, UWidgetComponent*> GetHoveredWidgetComponent = { 0x3dbdf60, 13 }; 
	// Function /Script/UMG.WidgetInteractionComponent.Get2DHitLocation
	constexpr static const FunctionPointer<UWidgetInteractionComponent, FVector2D> Get2DHitLocation = { 0x3dbde30, 14 }; 
};

/// Class /Script/UMG.WidgetLayoutLibrary
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
{ 
public:

	/// Functions
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsWrapBoxSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UWrapBoxSlot*, const UWidget*> SlotAsWrapBoxSlot = { 0x3dbf1b0, 0 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsWidgetSwitcherSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UWidgetSwitcherSlot*, const UWidget*> SlotAsWidgetSwitcherSlot = { 0x3dbf0a0, 1 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsVerticalBoxSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UVerticalBoxSlot*, const UWidget*> SlotAsVerticalBoxSlot = { 0x3dbf700, 2 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsUniformGridSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UUniformGridSlot*, const UWidget*> SlotAsUniformGridSlot = { 0x3dbf810, 3 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsSizeBoxSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, USizeBoxSlot*, const UWidget*> SlotAsSizeBoxSlot = { 0x3dbf2c0, 4 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsScrollBoxSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UScrollBoxSlot*, const UWidget*> SlotAsScrollBoxSlot = { 0x3dbf5f0, 5 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsScaleBoxSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UScaleBoxSlot*, const UWidget*> SlotAsScaleBoxSlot = { 0x3dbf3d0, 6 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsSafeBoxSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, USafeZoneSlot*, const UWidget*> SlotAsSafeBoxSlot = { 0x3dbf4e0, 7 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsOverlaySlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UOverlaySlot*, const UWidget*> SlotAsOverlaySlot = { 0x3dbf920, 8 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsHorizontalBoxSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UHorizontalBoxSlot*, const UWidget*> SlotAsHorizontalBoxSlot = { 0x3dbfa30, 9 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsGridSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UGridSlot*, const UWidget*> SlotAsGridSlot = { 0x3dbfb40, 10 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsCanvasSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UCanvasPanelSlot*, const UWidget*> SlotAsCanvasSlot = { 0x3dbfc50, 11 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.SlotAsBorderSlot
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, UBorderSlot*, const UWidget*> SlotAsBorderSlot = { 0x3dbfd60, 12 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.RemoveAllWidgets
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, void, const UObject*> RemoveAllWidgets = { 0x3dbefa0, 13 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.ProjectWorldLocationToWidgetPosition
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, bool, const APlayerController*, const FVector, const FVector2D&, const bool> ProjectWorldLocationToWidgetPosition = { 0x3dc0740, 14 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.GetViewportWidgetGeometry
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, FGeometry, const UObject*> GetViewportWidgetGeometry = { 0x3dc0460, 15 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.GetViewportSize
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, FVector2D, const UObject*> GetViewportSize = { 0x3dc0580, 16 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.GetViewportScale
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, float, const UObject*> GetViewportScale = { 0x3dc0660, 17 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.GetPlayerScreenWidgetGeometry
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, FGeometry, const APlayerController*> GetPlayerScreenWidgetGeometry = { 0x3dc0340, 18 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.GetMousePositionScaledByDPI
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, bool, const APlayerController*, const float&, const float&> GetMousePositionScaledByDPI = { 0x3dbfe70, 19 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.GetMousePositionOnViewport
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, FVector2D, const UObject*> GetMousePositionOnViewport = { 0x3dc00c0, 20 }; 
	// Function /Script/UMG.WidgetLayoutLibrary.GetMousePositionOnPlatform
	constexpr static const FunctionPointer<UWidgetLayoutLibrary, FVector2D> GetMousePositionOnPlatform = { 0x3dc02e0, 21 }; 
};

/// Struct /Script/UMG.WidgetNavigationData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FWidgetNavigationData
{ 
	EUINavigationRule                                  Rule;                                                       // 0x0000   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0001   (0x0003)  MISSED
	FName                                              WidgetToFocus;                                              // 0x0004   (0x0008)  
	TWeakObjectPtr<class UWidget*>                     Widget;                                                     // 0x000C   (0x0008)  
	FDelegateProperty                                  CustomDelegate;                                             // 0x0014   (0x0010)  
};

/// Class /Script/UMG.WidgetNavigation
/// Size: 0x0100 (256 bytes) (0x000028 - 0x000100) align n/a MaxSize: 0x0100
class UWidgetNavigation : public UObject
{ 
public:
	FWidgetNavigationData                              Up;                                                         // 0x0028   (0x0024)  
	FWidgetNavigationData                              Down;                                                       // 0x004C   (0x0024)  
	FWidgetNavigationData                              Left;                                                       // 0x0070   (0x0024)  
	FWidgetNavigationData                              Right;                                                      // 0x0094   (0x0024)  
	FWidgetNavigationData                              Next;                                                       // 0x00B8   (0x0024)  
	FWidgetNavigationData                              Previous;                                                   // 0x00DC   (0x0024)  
};

/// Class /Script/UMG.WidgetSwitcher
/// Size: 0x0158 (344 bytes) (0x000120 - 0x000158) align n/a MaxSize: 0x0158
class UWidgetSwitcher : public UPanelWidget
{ 
public:
	int32_t                                            ActiveWidgetIndex;                                          // 0x0120   (0x0004)  
	bool                                               bModeL10n;                                                  // 0x0124   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0125   (0x0003)  MISSED
	TArray<FName>                                      L10NCodes;                                                  // 0x0128   (0x0010)  
	FMulticastInlineDelegate                           OnChangedL10NEvent;                                         // 0x0138   (0x0010)  
	unsigned char                                      UnknownData03_7[0x10];                                      // 0x0148   (0x0010)  MISSED

	/// Functions
	// Function /Script/UMG.WidgetSwitcher.SetActiveWidgetIndex
	constexpr static const FunctionPointer<UWidgetSwitcher, void, const int32_t> SetActiveWidgetIndex = { 0x3dc19b0, 0 }; 
	// Function /Script/UMG.WidgetSwitcher.SetActiveWidget
	constexpr static const FunctionPointer<UWidgetSwitcher, void, const UWidget*> SetActiveWidget = { 0x3d7fe70, 1 }; 
	// Function /Script/UMG.WidgetSwitcher.GetWidgetAtIndex
	constexpr static const FunctionPointer<UWidgetSwitcher, UWidget*, const int32_t> GetWidgetAtIndex = { 0x3dc18a0, 2 }; 
	// Function /Script/UMG.WidgetSwitcher.GetNumWidgets
	constexpr static const FunctionPointer<UWidgetSwitcher, int32_t> GetNumWidgets = { 0x3dc1ae0, 3 }; 
	// Function /Script/UMG.WidgetSwitcher.GetActiveWidgetIndex
	constexpr static const FunctionPointer<UWidgetSwitcher, int32_t> GetActiveWidgetIndex = { 0x3dc1a90, 4 }; 
	// Function /Script/UMG.WidgetSwitcher.GetActiveWidget
	constexpr static const FunctionPointer<UWidgetSwitcher, UWidget*> GetActiveWidget = { 0x3dc1820, 5 }; 
};

/// Class /Script/UMG.WidgetSwitcherSlot
/// Size: 0x0058 (88 bytes) (0x000038 - 0x000058) align n/a MaxSize: 0x0058
class UWidgetSwitcherSlot : public UPanelSlot
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0038   (0x0008)  MISSED
	FMargin                                            Padding;                                                    // 0x0040   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData03_7[0x6];                                       // 0x0052   (0x0006)  MISSED

	/// Functions
	// Function /Script/UMG.WidgetSwitcherSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UWidgetSwitcherSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3dc1fa0, 0 }; 
	// Function /Script/UMG.WidgetSwitcherSlot.SetPadding
	constexpr static const FunctionPointer<UWidgetSwitcherSlot, void, const FMargin> SetPadding = { 0x3d8c4f0, 1 }; 
	// Function /Script/UMG.WidgetSwitcherSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UWidgetSwitcherSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3dc2070, 2 }; 
};

/// Class /Script/UMG.WidgetTree
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
class UWidgetTree : public UObject
{ 
public:
	class UWidget*                                     RootWidget;                                                 // 0x0028   (0x0008)  
};

/// Class /Script/UMG.WindowTitleBarArea
/// Size: 0x0140 (320 bytes) (0x000120 - 0x000140) align n/a MaxSize: 0x0140
class UWindowTitleBarArea : public UContentWidget
{ 
public:
	bool                                               bWindowButtonsEnabled;                                      // 0x0120   (0x0001)  
	bool                                               bDoubleClickTogglesFullscreen;                              // 0x0121   (0x0001)  
	unsigned char                                      UnknownData01_7[0x1E];                                      // 0x0122   (0x001E)  MISSED

	/// Functions
	// Function /Script/UMG.WindowTitleBarArea.SetVerticalAlignment
	constexpr static const FunctionPointer<UWindowTitleBarArea, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3dc2950, 0 }; 
	// Function /Script/UMG.WindowTitleBarArea.SetPadding
	constexpr static const FunctionPointer<UWindowTitleBarArea, void, const FMargin> SetPadding = { 0x3dc2b10, 1 }; 
	// Function /Script/UMG.WindowTitleBarArea.SetHorizontalAlignment
	constexpr static const FunctionPointer<UWindowTitleBarArea, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3dc2a30, 2 }; 
};

/// Class /Script/UMG.WindowTitleBarAreaSlot
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UWindowTitleBarAreaSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0048   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0049   (0x0001)  
	unsigned char                                      UnknownData01_7[0x16];                                      // 0x004A   (0x0016)  MISSED

	/// Functions
	// Function /Script/UMG.WindowTitleBarAreaSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UWindowTitleBarAreaSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3dc3040, 0 }; 
	// Function /Script/UMG.WindowTitleBarAreaSlot.SetPadding
	constexpr static const FunctionPointer<UWindowTitleBarAreaSlot, void, const FMargin> SetPadding = { 0x3dc3200, 1 }; 
	// Function /Script/UMG.WindowTitleBarAreaSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UWindowTitleBarAreaSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3dc3120, 2 }; 
};

/// Class /Script/UMG.WrapBox
/// Size: 0x0148 (328 bytes) (0x000120 - 0x000148) align n/a MaxSize: 0x0148
class UWrapBox : public UPanelWidget
{ 
public:
	FVector2D                                          InnerSlotPadding;                                           // 0x0120   (0x0008)  
	float                                              WrapWidth;                                                  // 0x0128   (0x0004)  
	float                                              WrapSize;                                                   // 0x012C   (0x0004)  
	bool                                               bExplicitWrapWidth;                                         // 0x0130   (0x0001)  
	bool                                               bExplicitWrapSize;                                          // 0x0131   (0x0001)  
	TEnumAsByte<EOrientation>                          Orientation;                                                // 0x0132   (0x0001)  
	unsigned char                                      UnknownData01_7[0x15];                                      // 0x0133   (0x0015)  MISSED

	/// Functions
	// Function /Script/UMG.WrapBox.SetInnerSlotPadding
	constexpr static const FunctionPointer<UWrapBox, void, const FVector2D> SetInnerSlotPadding = { 0x3dc3960, 0 }; 
	// Function /Script/UMG.WrapBox.AddChildToWrapBox
	constexpr static const FunctionPointer<UWrapBox, UWrapBoxSlot*, const UWidget*> AddChildToWrapBox = { 0x3dc3740, 1 }; 
};

/// Class /Script/UMG.WrapBoxSlot
/// Size: 0x0060 (96 bytes) (0x000038 - 0x000060) align n/a MaxSize: 0x0060
class UWrapBoxSlot : public UPanelSlot
{ 
public:
	FMargin                                            Padding;                                                    // 0x0038   (0x0010)  
	bool                                               bFillEmptySpace;                                            // 0x0048   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0049   (0x0003)  MISSED
	float                                              FillSpanWhenLessThan;                                       // 0x004C   (0x0004)  
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                        // 0x0050   (0x0001)  
	TEnumAsByte<EVerticalAlignment>                    VerticalAlignment;                                          // 0x0051   (0x0001)  
	unsigned char                                      UnknownData03_7[0xE];                                       // 0x0052   (0x000E)  MISSED

	/// Functions
	// Function /Script/UMG.WrapBoxSlot.SetVerticalAlignment
	constexpr static const FunctionPointer<UWrapBoxSlot, void, const TEnumAsByte<EVerticalAlignment>> SetVerticalAlignment = { 0x3dc3e20, 0 }; 
	// Function /Script/UMG.WrapBoxSlot.SetPadding
	constexpr static const FunctionPointer<UWrapBoxSlot, void, const FMargin> SetPadding = { 0x3dc41c0, 1 }; 
	// Function /Script/UMG.WrapBoxSlot.SetHorizontalAlignment
	constexpr static const FunctionPointer<UWrapBoxSlot, void, const TEnumAsByte<EHorizontalAlignment>> SetHorizontalAlignment = { 0x3dc3ef0, 2 }; 
	// Function /Script/UMG.WrapBoxSlot.SetFillSpanWhenLessThan
	constexpr static const FunctionPointer<UWrapBoxSlot, void, const float> SetFillSpanWhenLessThan = { 0x3dc3fc0, 3 }; 
	// Function /Script/UMG.WrapBoxSlot.SetFillEmptySpace
	constexpr static const FunctionPointer<UWrapBoxSlot, void, const bool> SetFillEmptySpace = { 0x3dc40e0, 4 }; 
};

/// Struct /Script/UMG.EventReply
/// Size: 0x00B8 (184 bytes) (0x000000 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FEventReply
{ 
	unsigned char                                      UnknownData01_2[0xB8];                                      // 0x0000   (0x00B8)  MISSED
};

/// Struct /Script/UMG.PaintContext
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FPaintContext
{ 
	unsigned char                                      UnknownData01_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplateBase
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneEvalTemplateBase
{ 
	unsigned char                                      UnknownData01_2[0x10];                                      // 0x0000   (0x0010)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplate
/// Size: 0x0020 (32 bytes) (0x000010 - 0x000020) align n/a MaxSize: 0x0020
struct FMovieSceneEvalTemplate : FMovieSceneEvalTemplateBase
{ 
	EMovieSceneCompletionMode                          CompletionMode;                                             // 0x0010   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0011   (0x0003)  MISSED
	TWeakObjectPtr<class UMovieSceneSection*>          SourceSectionPtr;                                           // 0x0014   (0x0008)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/MovieScene.MovieScenePropertySectionData
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMovieScenePropertySectionData
{ 
	FName                                              PropertyName;                                               // 0x0000   (0x0008)  
	FString                                            PropertyPath;                                               // 0x0008   (0x0010)  
};

/// Struct /Script/MovieScene.MovieScenePropertySectionTemplate
/// Size: 0x0038 (56 bytes) (0x000020 - 0x000038) align n/a MaxSize: 0x0038
struct FMovieScenePropertySectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieScenePropertySectionData                     PropertyData;                                               // 0x0020   (0x0018)  
};

/// Struct /Script/UMG.MovieSceneMarginSectionTemplate
/// Size: 0x02C0 (704 bytes) (0x000038 - 0x0002C0) align n/a MaxSize: 0x02C0
struct FMovieSceneMarginSectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneFloatChannel                            TopCurve;                                                   // 0x0038   (0x00A0)  
	FMovieSceneFloatChannel                            LeftCurve;                                                  // 0x00D8   (0x00A0)  
	FMovieSceneFloatChannel                            RightCurve;                                                 // 0x0178   (0x00A0)  
	FMovieSceneFloatChannel                            BottomCurve;                                                // 0x0218   (0x00A0)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x02B8   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02B9   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.ScalarParameterNameAndCurve
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align n/a MaxSize: 0x00A8
struct FScalarParameterNameAndCurve
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneFloatChannel                            ParameterCurve;                                             // 0x0008   (0x00A0)  
};

/// Struct /Script/MovieScene.MovieSceneBoolChannel
/// Size: 0x0090 (144 bytes) (0x000008 - 0x000090) align n/a MaxSize: 0x0090
struct FMovieSceneBoolChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	bool                                               DefaultValue;                                               // 0x0018   (0x0001)  
	bool                                               bHasDefaultValue;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x001A   (0x0006)  MISSED
	TArray<bool>                                       Values;                                                     // 0x0020   (0x0010)  
	unsigned char                                      UnknownData03_7[0x60];                                      // 0x0030   (0x0060)  MISSED
};

/// Struct /Script/MovieSceneTracks.BoolParameterNameAndCurve
/// Size: 0x0098 (152 bytes) (0x000000 - 0x000098) align n/a MaxSize: 0x0098
struct FBoolParameterNameAndCurve
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneBoolChannel                             ParameterCurve;                                             // 0x0008   (0x0090)  
};

/// Struct /Script/MovieSceneTracks.Vector2DParameterNameAndCurves
/// Size: 0x0148 (328 bytes) (0x000000 - 0x000148) align n/a MaxSize: 0x0148
struct FVector2DParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneFloatChannel                            XCurve;                                                     // 0x0008   (0x00A0)  
	FMovieSceneFloatChannel                            YCurve;                                                     // 0x00A8   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.VectorParameterNameAndCurves
/// Size: 0x01E8 (488 bytes) (0x000000 - 0x0001E8) align n/a MaxSize: 0x01E8
struct FVectorParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneFloatChannel                            XCurve;                                                     // 0x0008   (0x00A0)  
	FMovieSceneFloatChannel                            YCurve;                                                     // 0x00A8   (0x00A0)  
	FMovieSceneFloatChannel                            ZCurve;                                                     // 0x0148   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.ColorParameterNameAndCurves
/// Size: 0x0288 (648 bytes) (0x000000 - 0x000288) align n/a MaxSize: 0x0288
struct FColorParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneFloatChannel                            RedCurve;                                                   // 0x0008   (0x00A0)  
	FMovieSceneFloatChannel                            GreenCurve;                                                 // 0x00A8   (0x00A0)  
	FMovieSceneFloatChannel                            BlueCurve;                                                  // 0x0148   (0x00A0)  
	FMovieSceneFloatChannel                            AlphaCurve;                                                 // 0x01E8   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.TransformParameterNameAndCurves
/// Size: 0x05A8 (1448 bytes) (0x000000 - 0x0005A8) align n/a MaxSize: 0x05A8
struct FTransformParameterNameAndCurves
{ 
	FName                                              ParameterName;                                              // 0x0000   (0x0008)  
	FMovieSceneFloatChannel                            Translation[3];                                             // 0x0008   (0x01E0)  
	FMovieSceneFloatChannel                            Rotation[3];                                                // 0x01E8   (0x01E0)  
	FMovieSceneFloatChannel                            Scale[3];                                                   // 0x03C8   (0x01E0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneParameterSectionTemplate
/// Size: 0x0080 (128 bytes) (0x000020 - 0x000080) align n/a MaxSize: 0x0080
struct FMovieSceneParameterSectionTemplate : FMovieSceneEvalTemplate
{ 
	TArray<FScalarParameterNameAndCurve>               Scalars;                                                    // 0x0020   (0x0010)  
	TArray<FBoolParameterNameAndCurve>                 Bools;                                                      // 0x0030   (0x0010)  
	TArray<FVector2DParameterNameAndCurves>            Vector2Ds;                                                  // 0x0040   (0x0010)  
	TArray<FVectorParameterNameAndCurves>              Vectors;                                                    // 0x0050   (0x0010)  
	TArray<FColorParameterNameAndCurves>               Colors;                                                     // 0x0060   (0x0010)  
	TArray<FTransformParameterNameAndCurves>           Transforms;                                                 // 0x0070   (0x0010)  
};

/// Struct /Script/UMG.MovieSceneWidgetMaterialSectionTemplate
/// Size: 0x0090 (144 bytes) (0x000080 - 0x000090) align n/a MaxSize: 0x0090
struct FMovieSceneWidgetMaterialSectionTemplate : FMovieSceneParameterSectionTemplate
{ 
	TArray<FName>                                      BrushPropertyNamePath;                                      // 0x0080   (0x0010)  
};

/// Struct /Script/UMG.RichTextStyleRow
/// Size: 0x0298 (664 bytes) (0x000008 - 0x000298) align n/a MaxSize: 0x0298
struct FRichTextStyleRow : FTableRowBase
{ 
	FTextBlockStyle                                    TextStyle;                                                  // 0x0008   (0x0290)  
};

/// Struct /Script/UMG.RichImageRow
/// Size: 0x00A0 (160 bytes) (0x000008 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FRichImageRow : FTableRowBase
{ 
	FSlateBrush                                        Brush;                                                      // 0x0008   (0x0090)  
	bool                                               bChooseMaxSize;                                             // 0x0098   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0099   (0x0007)  MISSED
};

/// Struct /Script/UMG.WidgetComponentInstanceData
/// Size: 0x00C8 (200 bytes) (0x0000B8 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FWidgetComponentInstanceData : FSceneComponentInstanceData
{ 
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x00B8   (0x0010)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequenceLoopCount
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FMovieSceneSequenceLoopCount
{ 
	int32_t                                            Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneSequencePlaybackSettings
/// Size: 0x0068 (104 bytes) (0x000000 - 0x000068) align n/a MaxSize: 0x0068
struct FMovieSceneSequencePlaybackSettings
{ 
	bool                                               bAutoPlay : 1;                                              // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData10_5[0x3];                                       // 0x0001   (0x0003)  MISSED
	FMovieSceneSequenceLoopCount                       LoopCount;                                                  // 0x0004   (0x0004)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              PlayRateMinimum;                                            // 0x000C   (0x0004)  
	float                                              StartTime;                                                  // 0x0010   (0x0004)  
	bool                                               bRandomStartTime : 1;                                       // 0x0014:0 (0x0001)  
	bool                                               bRestoreState : 1;                                          // 0x0014:1 (0x0001)  
	bool                                               bDisableMovementInput : 1;                                  // 0x0014:2 (0x0001)  
	bool                                               bDisableLookAtInput : 1;                                    // 0x0014:3 (0x0001)  
	bool                                               bHidePlayer : 1;                                            // 0x0014:4 (0x0001)  
	bool                                               bHideHud : 1;                                               // 0x0014:5 (0x0001)  
	bool                                               bDisableCameraCuts : 1;                                     // 0x0014:6 (0x0001)  
	bool                                               bPauseAtEnd : 1;                                            // 0x0014:7 (0x0001)  
	bool                                               bDisableActorAI : 1;                                        // 0x0015:0 (0x0001)  
	bool                                               bDisableActorAIAttachOnly : 1;                              // 0x0015:1 (0x0001)  
	bool                                               bHideNpc : 1;                                               // 0x0015:2 (0x0001)  
	bool                                               bActiveAttachSBActor : 1;                                   // 0x0015:3 (0x0001)  
	bool                                               bClearEventHandler : 1;                                     // 0x0015:4 (0x0001)  
	bool                                               bUsePCControl : 1;                                          // 0x0015:5 (0x0001)  
	bool                                               bUseActorControl : 1;                                       // 0x0015:6 (0x0001)  
	bool                                               bUseZoneEventControl : 1;                                   // 0x0015:7 (0x0001)  
	bool                                               bHUDInputLock : 1;                                          // 0x0016:0 (0x0001)  
	bool                                               bGameMenuInputLock : 1;                                     // 0x0016:1 (0x0001)  
	bool                                               bDeadFinish : 1;                                            // 0x0016:2 (0x0001)  
	unsigned char                                      UnknownData11_5[0x1];                                       // 0x0017   (0x0001)  MISSED
	TArray<FName>                                      PlayActorEffectArray;                                       // 0x0018   (0x0010)  
	TArray<FName>                                      FinishActorEffectArray;                                     // 0x0028   (0x0010)  
	bool                                               bDitherDisable : 1;                                         // 0x0038:0 (0x0001)  
	bool                                               bInteractionBlock : 1;                                      // 0x0038:1 (0x0001)  
	bool                                               bVolumetricRTDisable : 1;                                   // 0x0038:2 (0x0001)  
	bool                                               bUseMaxUndilatedFrameTime : 1;                              // 0x0038:3 (0x0001)  
	bool                                               bSkipAllow : 1;                                             // 0x0038:4 (0x0001)  
	bool                                               bSubtitleJumpAllow : 1;                                     // 0x0038:5 (0x0001)  
	unsigned char                                      UnknownData12_5[0x3];                                       // 0x0039   (0x0003)  MISSED
	float                                              OverrideSubtitleCoolTime;                                   // 0x003C   (0x0004)  
	bool                                               bDisableDroneScanEffect : 1;                                // 0x0040:0 (0x0001)  
	bool                                               bDisableLookAtEye : 1;                                      // 0x0040:1 (0x0001)  
	unsigned char                                      UnknownData13_5[0x3];                                       // 0x0041   (0x0003)  MISSED
	TEnumAsByte<ESBMovieSceneSequencecContentType>     ContentType;                                                // 0x0044   (0x0001)  
	unsigned char                                      UnknownData14_6[0x3];                                       // 0x0045   (0x0003)  MISSED
	bool                                               bStopAllCameraShakes : 1;                                   // 0x0048:0 (0x0001)  
	bool                                               bPlayerWalking : 1;                                         // 0x0048:1 (0x0001)  
	bool                                               bPlayerDisableSkill : 1;                                    // 0x0048:2 (0x0001)  
	bool                                               bPlayerDisableJump : 1;                                     // 0x0048:3 (0x0001)  
	bool                                               bNPCDisableSkill : 1;                                       // 0x0048:4 (0x0001)  
	bool                                               bForceFoldPlayerWeapon : 1;                                 // 0x0048:5 (0x0001)  
	bool                                               bLookAtToOwner : 1;                                         // 0x0048:6 (0x0001)  
	bool                                               bLookAtToPC : 1;                                            // 0x0048:7 (0x0001)  
	unsigned char                                      UnknownData15_5[0x3];                                       // 0x0049   (0x0003)  MISSED
	TEnumAsByte<ESBOverrideStartMovementType>          OverrideStartMovementNone;                                  // 0x004C   (0x0001)  
	unsigned char                                      UnknownData16_6[0x3];                                       // 0x004D   (0x0003)  MISSED
	float                                              StopSoundFadeOutDuration;                                   // 0x0050   (0x0004)  
	bool                                               bLockOnAtChat : 1;                                          // 0x0054:0 (0x0001)  
	bool                                               bLockOnAtChatUnlockInOutRange : 1;                          // 0x0054:1 (0x0001)  
	bool                                               bLockOnAtChatDisableLockOnCam : 1;                          // 0x0054:2 (0x0001)  
	bool                                               bUseDisableIdleAdditiveAnim : 1;                            // 0x0054:3 (0x0001)  
	bool                                               bDisableKawaiiPhysicsReset : 1;                             // 0x0054:4 (0x0001)  
	bool                                               bIgnoreMatineeSlomoRestore : 1;                             // 0x0054:5 (0x0001)  
	bool                                               bAllowPhotoMode : 1;                                        // 0x0054:6 (0x0001)  
	bool                                               bAllowCropAspectRatio : 1;                                  // 0x0054:7 (0x0001)  
	unsigned char                                      UnknownData17_5[0x3];                                       // 0x0055   (0x0003)  MISSED
	bool                                               bCropAspectRatioViewport;                                   // 0x0058   (0x0001)  
	unsigned char                                      UnknownData18_6[0x3];                                       // 0x0059   (0x0003)  MISSED
	float                                              CropAspectRatioViewportLess;                                // 0x005C   (0x0004)  
	bool                                               FilmbackSensorHeightVerticalScaling;                        // 0x0060   (0x0001)  
	bool                                               bUseMoveInputBlock;                                         // 0x0061   (0x0001)  
	unsigned char                                      UnknownData19_7[0x6];                                       // 0x0062   (0x0006)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequenceReplProperties
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneSequenceReplProperties
{ 
	FFrameTime                                         LastKnownPosition;                                          // 0x0000   (0x0008)  
	TEnumAsByte<EMovieScenePlayerStatus>               LastKnownStatus;                                            // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0009   (0x0003)  MISSED
	int32_t                                            LastKnownNumLoops;                                          // 0x000C   (0x0004)  
};

/// Class /Script/MovieScene.MovieSceneSequencePlayer
/// Size: 0x06D8 (1752 bytes) (0x000028 - 0x0006D8) align n/a MaxSize: 0x06D8
class UMovieSceneSequencePlayer : public UObject
{ 
public:
	unsigned char                                      UnknownData05_8[0x3E8];                                     // 0x0028   (0x03E8)  MISSED
	FMulticastInlineDelegate                           OnPlay;                                                     // 0x0410   (0x0010)  
	FMulticastInlineDelegate                           OnPlayReverse;                                              // 0x0420   (0x0010)  
	FMulticastInlineDelegate                           OnStop;                                                     // 0x0430   (0x0010)  
	FMulticastInlineDelegate                           OnPause;                                                    // 0x0440   (0x0010)  
	FMulticastInlineDelegate                           OnFinished;                                                 // 0x0450   (0x0010)  
	TEnumAsByte<EMovieScenePlayerStatus>               Status;                                                     // 0x0460   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0461   (0x0003)  MISSED
	bool                                               bReversePlayback : 1;                                       // 0x0464:0 (0x0001)  
	unsigned char                                      UnknownData07_5[0x3];                                       // 0x0465   (0x0003)  MISSED
	class UMovieSceneSequence*                         Sequence;                                                   // 0x0468   (0x0008)  
	FFrameNumber                                       StartTime;                                                  // 0x0470   (0x0004)  
	int32_t                                            DurationFrames;                                             // 0x0474   (0x0004)  
	float                                              DurationSubFrames;                                          // 0x0478   (0x0004)  
	int32_t                                            CurrentNumLoops;                                            // 0x047C   (0x0004)  
	FMovieSceneSequencePlaybackSettings                PlaybackSettings;                                           // 0x0480   (0x0068)  
	FMovieSceneRootEvaluationTemplateInstance          RootTemplateInstance;                                       // 0x04E8   (0x00E8)  
	unsigned char                                      UnknownData08_6[0x68];                                      // 0x05D0   (0x0068)  MISSED
	FMovieSceneSequenceReplProperties                  NetSyncProps;                                               // 0x0638   (0x0010)  
	TScriptInterface<Class>                            PlaybackClient;                                             // 0x0648   (0x0010)  
	class UMovieSceneSequenceTickManager*              TickManager;                                                // 0x0658   (0x0008)  
	unsigned char                                      UnknownData09_7[0x78];                                      // 0x0660   (0x0078)  MISSED

	/// Functions
	// Function /Script/MovieScene.MovieSceneSequencePlayer.StopAtCurrentTime
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void> StopAtCurrentTime = { 0x3b66aa0, 0 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Stop
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void> Stop = { 0x3b66ad0, 1 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetTimeRange
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const float, const float> SetTimeRange = { 0x3b66260, 2 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetPlayRate
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const float> SetPlayRate = { 0x3b65190, 3 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetPlaybackPosition
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const FMovieSceneSequencePlaybackParams> SetPlaybackPosition = { 0x3b65d60, 4 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetFrameRate
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const FFrameRate> SetFrameRate = { 0x3b66780, 5 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetFrameRange
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const int32_t, const int32_t, const float> SetFrameRange = { 0x3b66500, 6 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.SetDisableCameraCuts
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const bool> SetDisableCameraCuts = { 0x3b650b0, 7 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ScrubToSeconds
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const float> ScrubToSeconds = { 0x3b65860, 8 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ScrubToMarkedFrame
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, bool, const FString> ScrubToMarkedFrame = { 0x3b65480, 9 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ScrubToFrame
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const FFrameTime> ScrubToFrame = { 0x3b65b60, 10 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Scrub
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void> Scrub = { 0x3b66af0, 11 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.RPC_OnStopEvent
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const FFrameTime> RPC_OnStopEvent = { 0x3b64ba0, 12 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.RPC_ExplicitServerUpdateEvent
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const EUpdatePositionMethod, const FFrameTime> RPC_ExplicitServerUpdateEvent = { 0x3b64c80, 13 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayToSeconds
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const float> PlayToSeconds = { 0x3b65960, 14 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayToMarkedFrame
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, bool, const FString> PlayToMarkedFrame = { 0x3b655f0, 15 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayToFrame
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const FFrameTime> PlayToFrame = { 0x3b65c60, 16 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayTo
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const FMovieSceneSequencePlaybackParams> PlayTo = { 0x3b65ed0, 17 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayReverse
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void> PlayReverse = { 0x3b66c20, 18 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.PlayLooping
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const int32_t> PlayLooping = { 0x3b66b30, 19 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Play
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void> Play = { 0x3b66c40, 20 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.Pause
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void> Pause = { 0x3b66b10, 21 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.JumpToSeconds
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const float> JumpToSeconds = { 0x3b65760, 22 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.JumpToMarkedFrame
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, bool, const FString> JumpToMarkedFrame = { 0x3b65310, 23 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.JumpToFrame
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void, const FFrameTime> JumpToFrame = { 0x3b65a60, 24 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.IsReversed
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, bool> IsReversed = { 0x3b65280, 25 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.IsPlaying
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, bool> IsPlaying = { 0x3b652e0, 26 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.IsPaused
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, bool> IsPaused = { 0x3b652b0, 27 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GoToEndAndStop
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void> GoToEndAndStop = { 0x3b669b0, 28 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetStartTime
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, FQualifiedFrameTime> GetStartTime = { 0x3b66740, 29 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetPlayRate
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, float> GetPlayRate = { 0x3b65260, 30 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetObjectBindings
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, TArray<FMovieSceneObjectBindingID>, const UObject*> GetObjectBindings = { 0x3b64df0, 31 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetFrameRate
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, FFrameRate> GetFrameRate = { 0x2832480, 32 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetFrameDuration
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, int32_t> GetFrameDuration = { 0x3b66900, 33 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetEndTime
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, FQualifiedFrameTime> GetEndTime = { 0x3b666f0, 34 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetDuration
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, FQualifiedFrameTime> GetDuration = { 0x3b66920, 35 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetDisableCameraCuts
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, bool> GetDisableCameraCuts = { 0x3b65080, 36 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetCurrentTime
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, FQualifiedFrameTime> GetCurrentTime = { 0x3b66980, 37 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.GetBoundObjects
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, TArray<UObject*>, const FMovieSceneObjectBindingID> GetBoundObjects = { 0x3b64f30, 38 }; 
	// Function /Script/MovieScene.MovieSceneSequencePlayer.ChangePlaybackDirection
	constexpr static const FunctionPointer<UMovieSceneSequencePlayer, void> ChangePlaybackDirection = { 0x3b66c00, 39 }; 
};

/// Struct /Script/MovieScene.MovieSceneSectionParameters
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FMovieSceneSectionParameters
{ 
	FFrameNumber                                       StartFrameOffset;                                           // 0x0000   (0x0004)  
	bool                                               bCanLoop;                                                   // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FFrameNumber                                       EndFrameOffset;                                             // 0x0008   (0x0004)  
	FFrameNumber                                       FirstLoopStartFrameOffset;                                  // 0x000C   (0x0004)  
	float                                              TimeScale;                                                  // 0x0010   (0x0004)  
	int32_t                                            HierarchicalBias;                                           // 0x0014   (0x0004)  
	float                                              StartOffset;                                                // 0x0018   (0x0004)  
	float                                              PrerollTime;                                                // 0x001C   (0x0004)  
	float                                              PostrollTime;                                               // 0x0020   (0x0004)  
};

/// Class /Script/MovieScene.MovieSceneSubSection
/// Size: 0x0160 (352 bytes) (0x0000E8 - 0x000160) align n/a MaxSize: 0x0160
class UMovieSceneSubSection : public UMovieSceneSection
{ 
public:
	FMovieSceneSectionParameters                       Parameters;                                                 // 0x00E8   (0x0024)  
	float                                              StartOffset;                                                // 0x010C   (0x0004)  
	float                                              TimeScale;                                                  // 0x0110   (0x0004)  
	float                                              PrerollTime;                                                // 0x0114   (0x0004)  
	class UMovieSceneSequence*                         SubSequence;                                                // 0x0118   (0x0008)  
	TLazyObjectPtr<class AActor*>                      ActorToRecord;                                              // 0x0120   (0x001C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x013C   (0x0004)  MISSED
	FString                                            TargetSequenceName;                                         // 0x0140   (0x0010)  
	FDirectoryPath                                     TargetPathToRecordTo;                                       // 0x0150   (0x0010)  

	/// Functions
	// Function /Script/MovieScene.MovieSceneSubSection.SetSequence
	constexpr static const FunctionPointer<UMovieSceneSubSection, void, const UMovieSceneSequence*> SetSequence = { 0x3b6a580, 0 }; 
	// Function /Script/MovieScene.MovieSceneSubSection.GetSequence
	constexpr static const FunctionPointer<UMovieSceneSubSection, UMovieSceneSequence*> GetSequence = { 0x3b6a660, 1 }; 
};

/// Class /Script/MovieScene.MovieSceneSubTrack
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align n/a MaxSize: 0x0088
class UMovieSceneSubTrack : public UMovieSceneNameableTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0078   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneCustomClockSource
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneCustomClockSource : public UInterface
{ 
public:

	/// Functions
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnTick
	constexpr static const FunctionPointer<UMovieSceneCustomClockSource, void, const float, const float> OnTick = { 0x3b53410, 0 }; 
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnStopPlaying
	constexpr static const FunctionPointer<UMovieSceneCustomClockSource, void, const FQualifiedFrameTime&> OnStopPlaying = { 0x3b53230, 1 }; 
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnStartPlaying
	constexpr static const FunctionPointer<UMovieSceneCustomClockSource, void, const FQualifiedFrameTime&> OnStartPlaying = { 0x3b53320, 2 }; 
	// Function /Script/MovieScene.MovieSceneCustomClockSource.OnRequestCurrentTime
	constexpr static const FunctionPointer<UMovieSceneCustomClockSource, FFrameTime, const FQualifiedFrameTime&, const float> OnRequestCurrentTime = { 0x3b53090, 3 }; 
};

/// Class /Script/MovieScene.MovieSceneEntityProvider
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneEntityProvider : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieScenePlaybackClient
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieScenePlaybackClient : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneTrackTemplateProducer
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneTrackTemplateProducer : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.NodeAndChannelMappings
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UNodeAndChannelMappings : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneNodeGroup
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneNodeGroup : public UObject
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneNodeGroupCollection
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneNodeGroupCollection : public UObject
{ 
public:
};

/// Struct /Script/MovieScene.MovieSceneSpawnable
/// Size: 0x0090 (144 bytes) (0x000000 - 0x000090) align n/a MaxSize: 0x0090
struct FMovieSceneSpawnable
{ 
	FTransform                                         SpawnTransform;                                             // 0x0000   (0x0030)  
	TArray<FName>                                      Tags;                                                       // 0x0030   (0x0010)  
	bool                                               bContinuouslyRespawn;                                       // 0x0040   (0x0001)  
	bool                                               bEvaluateTracksWhenNotSpawned;                              // 0x0041   (0x0001)  
	unsigned char                                      UnknownData04_6[0x2];                                       // 0x0042   (0x0002)  MISSED
	FGuid                                              Guid;                                                       // 0x0044   (0x0010)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0054   (0x0004)  MISSED
	FString                                            Name;                                                       // 0x0058   (0x0010)  
	class UObject*                                     ObjectTemplate;                                             // 0x0068   (0x0008)  
	TArray<FGuid>                                      ChildPossessables;                                          // 0x0070   (0x0010)  
	ESpawnOwnership                                    Ownership;                                                  // 0x0080   (0x0001)  
	unsigned char                                      UnknownData06_6[0x3];                                       // 0x0081   (0x0003)  MISSED
	FName                                              LevelName;                                                  // 0x0084   (0x0008)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x008C   (0x0004)  MISSED
};

/// Struct /Script/MovieScene.MovieScenePossessable
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FMovieScenePossessable
{ 
	TArray<FName>                                      Tags;                                                       // 0x0000   (0x0010)  
	FGuid                                              Guid;                                                       // 0x0010   (0x0010)  
	FString                                            Name;                                                       // 0x0020   (0x0010)  
	class UClass*                                      PossessedObjectClass;                                       // 0x0030   (0x0008)  
	FGuid                                              ParentGuid;                                                 // 0x0038   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneBinding
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FMovieSceneBinding
{ 
	FGuid                                              ObjectGuid;                                                 // 0x0000   (0x0010)  
	FString                                            BindingName;                                                // 0x0010   (0x0010)  
	TArray<class UMovieSceneTrack*>                    Tracks;                                                     // 0x0020   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneObjectBindingID
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMovieSceneObjectBindingID
{ 
	int32_t                                            SequenceID;                                                 // 0x0000   (0x0004)  
	EMovieSceneObjectBindingSpace                      Space;                                                      // 0x0004   (0x0001)  
	unsigned char                                      UnknownData01_6[0x3];                                       // 0x0005   (0x0003)  MISSED
	FGuid                                              Guid;                                                       // 0x0008   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneObjectBindingIDs
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneObjectBindingIDs
{ 
	TArray<FMovieSceneObjectBindingID>                 IDs;                                                        // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneMarkedFrame
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMovieSceneMarkedFrame
{ 
	FFrameNumber                                       FrameNumber;                                                // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	FString                                            Label;                                                      // 0x0008   (0x0010)  
};

/// Class /Script/MovieScene.MovieScene
/// Size: 0x0150 (336 bytes) (0x000050 - 0x000150) align n/a MaxSize: 0x0150
class UMovieScene : public UMovieSceneSignedObject
{ 
public:
	TArray<FMovieSceneSpawnable>                       Spawnables;                                                 // 0x0050   (0x0010)  
	TArray<FMovieScenePossessable>                     Possessables;                                               // 0x0060   (0x0010)  
	TArray<FMovieSceneBinding>                         ObjectBindings;                                             // 0x0070   (0x0010)  
	TMap<FName, FMovieSceneObjectBindingIDs>           BindingGroups;                                              // 0x0080   (0x0050)  
	TArray<class UMovieSceneTrack*>                    MasterTracks;                                               // 0x00D0   (0x0010)  
	class UMovieSceneTrack*                            CameraCutTrack;                                             // 0x00E0   (0x0008)  
	FMovieSceneFrameRange                              SelectionRange;                                             // 0x00E8   (0x0010)  
	FMovieSceneFrameRange                              PlaybackRange;                                              // 0x00F8   (0x0010)  
	FFrameRate                                         TickResolution;                                             // 0x0108   (0x0008)  
	FFrameRate                                         DisplayRate;                                                // 0x0110   (0x0008)  
	EMovieSceneEvaluationType                          EvaluationType;                                             // 0x0118   (0x0001)  
	EUpdateClockSource                                 ClockSource;                                                // 0x0119   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x011A   (0x0006)  MISSED
	FSoftObjectPath                                    CustomClockSourcePath;                                      // 0x0120   (0x0018)  
	TArray<FMovieSceneMarkedFrame>                     MarkedFrames;                                               // 0x0138   (0x0010)  
	bool                                               bRecordMode;                                                // 0x0148   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0149   (0x0007)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneBindingOverrideData
/// Size: 0x0024 (36 bytes) (0x000000 - 0x000024) align n/a MaxSize: 0x0024
struct FMovieSceneBindingOverrideData
{ 
	FMovieSceneObjectBindingID                         ObjectBindingID;                                            // 0x0000   (0x0018)  
	TWeakObjectPtr<class UObject*>                     Object;                                                     // 0x0018   (0x0008)  
	bool                                               bOverridesDefault;                                          // 0x0020   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0021   (0x0003)  MISSED
};

/// Class /Script/MovieScene.MovieSceneBindingOverrides
/// Size: 0x0090 (144 bytes) (0x000028 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneBindingOverrides : public UObject
{ 
public:
	TArray<FMovieSceneBindingOverrideData>             BindingData;                                                // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_7[0x58];                                      // 0x0038   (0x0058)  MISSED
};

/// Class /Script/MovieScene.MovieSceneBindingOwnerInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneBindingOwnerInterface : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneBlenderSystem
/// Size: 0x0060 (96 bytes) (0x000040 - 0x000060) align n/a MaxSize: 0x0060
class UMovieSceneBlenderSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x20];                                      // 0x0040   (0x0020)  MISSED
};

/// Class /Script/MovieScene.MovieSceneBoolSection
/// Size: 0x0180 (384 bytes) (0x0000E8 - 0x000180) align n/a MaxSize: 0x0180
class UMovieSceneBoolSection : public UMovieSceneSection
{ 
public:
	bool                                               DefaultValue;                                               // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x00E9   (0x0007)  MISSED
	FMovieSceneBoolChannel                             BoolCurve;                                                  // 0x00F0   (0x0090)  
};

/// Class /Script/MovieScene.MovieSceneEntityInstantiatorSystem
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneEntityInstantiatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneGenericBoundObjectInstantiator
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneGenericBoundObjectInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneBoundSceneComponentInstantiator
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneBoundSceneComponentInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSceneComponentImpersonator
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneSceneComponentImpersonator : public UInterface
{ 
public:
};

/// Struct /Script/MovieScene.MovieSceneTrackIdentifier
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FMovieSceneTrackIdentifier
{ 
	uint32_t                                           Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvalTemplatePtr
/// Size: 0x0088 (136 bytes) (0x000000 - 0x000088) align n/a MaxSize: 0x0088
struct FMovieSceneEvalTemplatePtr
{ 
	unsigned char                                      UnknownData01_2[0x88];                                      // 0x0000   (0x0088)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackImplementationPtr
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FMovieSceneTrackImplementationPtr
{ 
	unsigned char                                      UnknownData01_2[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTrack
/// Size: 0x0078 (120 bytes) (0x000000 - 0x000078) align n/a MaxSize: 0x0078
struct FMovieSceneEvaluationTrack
{ 
	FGuid                                              ObjectBindingID;                                            // 0x0000   (0x0010)  
	uint16_t                                           EvaluationPriority;                                         // 0x0010   (0x0002)  
	EEvaluationMethod                                  EvaluationMethod;                                           // 0x0012   (0x0001)  
	unsigned char                                      UnknownData03_6[0x1];                                       // 0x0013   (0x0001)  MISSED
	TWeakObjectPtr<class UMovieSceneTrack*>            SourceTrack;                                                // 0x0014   (0x0008)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x001C   (0x0004)  MISSED
	TArray<FMovieSceneEvalTemplatePtr>                 ChildTemplates;                                             // 0x0020   (0x0010)  
	FMovieSceneTrackImplementationPtr                  TrackTemplate;                                              // 0x0030   (0x0038)  
	FName                                              EvaluationGroup;                                            // 0x0068   (0x0008)  
	bool                                               bEvaluateInPreroll : 1;                                     // 0x0070:0 (0x0001)  
	bool                                               bEvaluateInPostroll : 1;                                    // 0x0070:1 (0x0001)  
	bool                                               bTearDownPriority : 1;                                      // 0x0070:2 (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0071   (0x0007)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTemplateSerialNumber
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FMovieSceneEvaluationTemplateSerialNumber
{ 
	uint32_t                                           Value;                                                      // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneTemplateGenerationLedger
/// Size: 0x00A8 (168 bytes) (0x000000 - 0x0000A8) align n/a MaxSize: 0x00A8
struct FMovieSceneTemplateGenerationLedger
{ 
	FMovieSceneTrackIdentifier                         LastTrackIdentifier;                                        // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TMap<FGuid, FMovieSceneTrackIdentifier>            TrackSignatureToTrackIdentifier;                            // 0x0008   (0x0050)  
	TMap<FGuid, FMovieSceneFrameRange>                 SubSectionRanges;                                           // 0x0058   (0x0050)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationTemplate
/// Size: 0x0160 (352 bytes) (0x000000 - 0x000160) align n/a MaxSize: 0x0160
struct FMovieSceneEvaluationTemplate
{ 
	TMap<FMovieSceneTrackIdentifier, FMovieSceneEvaluationTrack> Tracks;                                           // 0x0000   (0x0050)  
	unsigned char                                      UnknownData02_6[0x50];                                      // 0x0050   (0x0050)  MISSED
	FGuid                                              SequenceSignature;                                          // 0x00A0   (0x0010)  
	FMovieSceneEvaluationTemplateSerialNumber          TemplateSerialNumber;                                       // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData03_6[0x4];                                       // 0x00B4   (0x0004)  MISSED
	FMovieSceneTemplateGenerationLedger                TemplateLedger;                                             // 0x00B8   (0x00A8)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceHierarchyNode
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMovieSceneSequenceHierarchyNode
{ 
	FMovieSceneSequenceID                              ParentID;                                                   // 0x0000   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	TArray<FMovieSceneSequenceID>                      Children;                                                   // 0x0008   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceTree
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FMovieSceneSubSequenceTree
{ 
	unsigned char                                      UnknownData01_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTimeTransform
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FMovieSceneTimeTransform
{ 
	float                                              TimeScale;                                                  // 0x0000   (0x0004)  
	FFrameTime                                         Offset;                                                     // 0x0004   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneTimeWarping
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FMovieSceneTimeWarping
{ 
	FFrameNumber                                       Start;                                                      // 0x0000   (0x0004)  
	FFrameNumber                                       End;                                                        // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneNestedSequenceTransform
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FMovieSceneNestedSequenceTransform
{ 
	FMovieSceneTimeTransform                           LinearTransform;                                            // 0x0000   (0x000C)  
	FMovieSceneTimeWarping                             Warping;                                                    // 0x000C   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceTransform
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FMovieSceneSequenceTransform
{ 
	FMovieSceneTimeTransform                           LinearTransform;                                            // 0x0000   (0x000C)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	TArray<FMovieSceneNestedSequenceTransform>         NestedTransforms;                                           // 0x0010   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceInstanceDataPtr
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMovieSceneSequenceInstanceDataPtr
{ 
	unsigned char                                      UnknownData01_2[0x18];                                      // 0x0000   (0x0018)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceData
/// Size: 0x00E8 (232 bytes) (0x000000 - 0x0000E8) align n/a MaxSize: 0x00E8
struct FMovieSceneSubSequenceData
{ 
	FSoftObjectPath                                    Sequence;                                                   // 0x0000   (0x0018)  
	FMovieSceneSequenceTransform                       RootToSequenceTransform;                                    // 0x0018   (0x0020)  
	FFrameRate                                         TickResolution;                                             // 0x0038   (0x0008)  
	FMovieSceneSequenceID                              DeterministicSequenceID;                                    // 0x0040   (0x0004)  
	FMovieSceneFrameRange                              PlayRange;                                                  // 0x0044   (0x0010)  
	FMovieSceneFrameRange                              FullPlayRange;                                              // 0x0054   (0x0010)  
	FMovieSceneFrameRange                              UnwarpedPlayRange;                                          // 0x0064   (0x0010)  
	FMovieSceneFrameRange                              PreRollRange;                                               // 0x0074   (0x0010)  
	FMovieSceneFrameRange                              PostRollRange;                                              // 0x0084   (0x0010)  
	int16_t                                            HierarchicalBias;                                           // 0x0094   (0x0002)  
	bool                                               bHasHierarchicalEasing;                                     // 0x0096   (0x0001)  
	unsigned char                                      UnknownData02_6[0x1];                                       // 0x0097   (0x0001)  MISSED
	FMovieSceneSequenceInstanceDataPtr                 InstanceData;                                               // 0x0098   (0x0018)  
	unsigned char                                      UnknownData03_6[0x8];                                       // 0x00B0   (0x0008)  MISSED
	FGuid                                              SubSectionSignature;                                        // 0x00B8   (0x0010)  
	FMovieSceneSequenceTransform                       OuterToInnerTransform;                                      // 0x00C8   (0x0020)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceHierarchy
/// Size: 0x0118 (280 bytes) (0x000000 - 0x000118) align n/a MaxSize: 0x0118
struct FMovieSceneSequenceHierarchy
{ 
	FMovieSceneSequenceHierarchyNode                   RootNode;                                                   // 0x0000   (0x0018)  
	FMovieSceneSubSequenceTree                         Tree;                                                       // 0x0018   (0x0060)  
	TMap<FMovieSceneSequenceID, FMovieSceneSubSequenceData> SubSequences;                                          // 0x0078   (0x0050)  
	TMap<FMovieSceneSequenceID, FMovieSceneSequenceHierarchyNode> Hierarchy;                                       // 0x00C8   (0x0050)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityTree
/// Size: 0x0060 (96 bytes) (0x000000 - 0x000060) align n/a MaxSize: 0x0060
struct FMovieSceneEvaluationFieldEntityTree
{ 
	unsigned char                                      UnknownData01_2[0x60];                                      // 0x0000   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FMovieSceneEvaluationFieldEntityKey
{ 
	TWeakObjectPtr<class UObject*>                     EntityOwner;                                                // 0x0000   (0x0008)  
	uint32_t                                           EntityID;                                                   // 0x0008   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntity
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneEvaluationFieldEntity
{ 
	FMovieSceneEvaluationFieldEntityKey                Key;                                                        // 0x0000   (0x000C)  
	int32_t                                            SharedMetaDataIndex;                                        // 0x000C   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldEntityMetaData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FMovieSceneEvaluationFieldEntityMetaData
{ 
	FFrameNumber                                       ForcedTime;                                                 // 0x0000   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x0004   (0x0004)  MISSED
	ESectionEvaluationFlags                            Flags;                                                      // 0x0008   (0x0001)  
	bool                                               bEvaluateInSequencePreRoll : 1;                             // 0x0009:0 (0x0001)  
	bool                                               bEvaluateInSequencePostRoll : 1;                            // 0x0009:1 (0x0001)  
	unsigned char                                      UnknownData03_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldSharedEntityMetaData
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneEvaluationFieldSharedEntityMetaData
{ 
	FGuid                                              ObjectBindingID;                                            // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEntityComponentField
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align n/a MaxSize: 0x00F0
struct FMovieSceneEntityComponentField
{ 
	FMovieSceneEvaluationFieldEntityTree               PersistentEntityTree;                                       // 0x0000   (0x0060)  
	FMovieSceneEvaluationFieldEntityTree               OneShotEntityTree;                                          // 0x0060   (0x0060)  
	TArray<FMovieSceneEvaluationFieldEntity>           Entities;                                                   // 0x00C0   (0x0010)  
	TArray<FMovieSceneEvaluationFieldEntityMetaData>   EntityMetaData;                                             // 0x00D0   (0x0010)  
	TArray<FMovieSceneEvaluationFieldSharedEntityMetaData> SharedMetaData;                                         // 0x00E0   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationGroupLUTIndex
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FMovieSceneEvaluationGroupLUTIndex
{ 
	int32_t                                            NumInitPtrs;                                                // 0x0000   (0x0004)  
	int32_t                                            NumEvalPtrs;                                                // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldTrackPtr
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FMovieSceneEvaluationFieldTrackPtr
{ 
	FMovieSceneSequenceID                              SequenceID;                                                 // 0x0000   (0x0004)  
	FMovieSceneTrackIdentifier                         TrackIdentifier;                                            // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneFieldEntry_EvaluationTrack
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FMovieSceneFieldEntry_EvaluationTrack
{ 
	FMovieSceneEvaluationFieldTrackPtr                 TrackPtr;                                                   // 0x0000   (0x0008)  
	uint16_t                                           NumChildren;                                                // 0x0008   (0x0002)  
	unsigned char                                      UnknownData01_7[0x2];                                       // 0x000A   (0x0002)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneFieldEntry_ChildTemplate
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FMovieSceneFieldEntry_ChildTemplate
{ 
	uint16_t                                           ChildIndex;                                                 // 0x0000   (0x0002)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x0002   (0x0001)  
	unsigned char                                      UnknownData01_6[0x1];                                       // 0x0003   (0x0001)  MISSED
	FFrameNumber                                       ForcedTime;                                                 // 0x0004   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationGroup
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FMovieSceneEvaluationGroup
{ 
	TArray<FMovieSceneEvaluationGroupLUTIndex>         LUTIndices;                                                 // 0x0000   (0x0010)  
	TArray<FMovieSceneFieldEntry_EvaluationTrack>      TrackLUT;                                                   // 0x0010   (0x0010)  
	TArray<FMovieSceneFieldEntry_ChildTemplate>        SectionLUT;                                                 // 0x0020   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationKey
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FMovieSceneEvaluationKey
{ 
	FMovieSceneSequenceID                              SequenceID;                                                 // 0x0000   (0x0004)  
	FMovieSceneTrackIdentifier                         TrackIdentifier;                                            // 0x0004   (0x0004)  
	uint32_t                                           SectionIndex;                                               // 0x0008   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneOrderedEvaluationKey
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneOrderedEvaluationKey
{ 
	FMovieSceneEvaluationKey                           Key;                                                        // 0x0000   (0x000C)  
	uint16_t                                           SetupIndex;                                                 // 0x000C   (0x0002)  
	uint16_t                                           TearDownIndex;                                              // 0x000E   (0x0002)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationMetaData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FMovieSceneEvaluationMetaData
{ 
	TArray<FMovieSceneSequenceID>                      ActiveSequences;                                            // 0x0000   (0x0010)  
	TArray<FMovieSceneOrderedEvaluationKey>            ActiveEntities;                                             // 0x0010   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationField
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FMovieSceneEvaluationField
{ 
	TArray<FMovieSceneFrameRange>                      Ranges;                                                     // 0x0000   (0x0010)  
	TArray<FMovieSceneEvaluationGroup>                 Groups;                                                     // 0x0010   (0x0010)  
	TArray<FMovieSceneEvaluationMetaData>              MetaData;                                                   // 0x0020   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneSequenceCompilerMaskStruct
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FMovieSceneSequenceCompilerMaskStruct
{ 
	bool                                               bHierarchy : 1;                                             // 0x0000:0 (0x0001)  
	bool                                               bEvaluationTemplate : 1;                                    // 0x0000:1 (0x0001)  
	bool                                               bEvaluationTemplateField : 1;                               // 0x0000:2 (0x0001)  
	bool                                               bEntityComponentField : 1;                                  // 0x0000:3 (0x0001)  
};

/// Class /Script/MovieScene.MovieSceneCompiledData
/// Size: 0x03F8 (1016 bytes) (0x000028 - 0x0003F8) align n/a MaxSize: 0x03F8
class UMovieSceneCompiledData : public UObject
{ 
public:
	FMovieSceneEvaluationTemplate                      EvaluationTemplate;                                         // 0x0028   (0x0160)  
	FMovieSceneSequenceHierarchy                       Hierarchy;                                                  // 0x0188   (0x0118)  
	FMovieSceneEntityComponentField                    EntityComponentField;                                       // 0x02A0   (0x00F0)  
	FMovieSceneEvaluationField                         TrackTemplateField;                                         // 0x0390   (0x0030)  
	TArray<FFrameTime>                                 DeterminismFences;                                          // 0x03C0   (0x0010)  
	FGuid                                              CompiledSignature;                                          // 0x03D0   (0x0010)  
	FGuid                                              CompilerVersion;                                            // 0x03E0   (0x0010)  
	FMovieSceneSequenceCompilerMaskStruct              AccumulatedMask;                                            // 0x03F0   (0x0001)  
	FMovieSceneSequenceCompilerMaskStruct              AllocatedMask;                                              // 0x03F1   (0x0001)  
	EMovieSceneSequenceFlags                           AccumulatedFlags;                                           // 0x03F2   (0x0001)  
	unsigned char                                      UnknownData01_7[0x5];                                       // 0x03F3   (0x0005)  MISSED
};

/// Class /Script/MovieScene.MovieSceneCompiledDataManager
/// Size: 0x0230 (560 bytes) (0x000028 - 0x000230) align n/a MaxSize: 0x0230
class UMovieSceneCompiledDataManager : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0xB0];                                      // 0x0028   (0x00B0)  MISSED
	TMap<int32_t, FMovieSceneSequenceHierarchy>        Hierarchies;                                                // 0x00D8   (0x0050)  
	TMap<int32_t, FMovieSceneEvaluationTemplate>       TrackTemplates;                                             // 0x0128   (0x0050)  
	TMap<int32_t, FMovieSceneEvaluationField>          TrackTemplateFields;                                        // 0x0178   (0x0050)  
	TMap<int32_t, FMovieSceneEntityComponentField>     EntityComponentFields;                                      // 0x01C8   (0x0050)  
	unsigned char                                      UnknownData03_7[0x18];                                      // 0x0218   (0x0018)  MISSED
};

/// Class /Script/MovieScene.MovieSceneFloatDecomposer
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneFloatDecomposer : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneBuiltInEasingFunction
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UMovieSceneBuiltInEasingFunction : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	EMovieSceneBuiltInEasing                           Type;                                                       // 0x0030   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0031   (0x0007)  MISSED
};

/// Class /Script/MovieScene.MovieSceneEasingExternalCurve
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
class UMovieSceneEasingExternalCurve : public UObject
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	class UCurveFloat*                                 Curve;                                                      // 0x0030   (0x0008)  
};

/// Class /Script/MovieScene.MovieSceneEasingFunction
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneEasingFunction : public UInterface
{ 
public:

	/// Functions
	// Function /Script/MovieScene.MovieSceneEasingFunction.OnEvaluate
	constexpr static const FunctionPointer<UMovieSceneEasingFunction, float, const float> OnEvaluate = { 0x2bbb090, 0 }; 
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraphNodes
/// Size: 0x0038 (56 bytes) (0x000000 - 0x000038) align n/a MaxSize: 0x0038
struct FMovieSceneEntitySystemGraphNodes
{ 
	unsigned char                                      UnknownData01_2[0x38];                                      // 0x0000   (0x0038)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraph
/// Size: 0x0138 (312 bytes) (0x000000 - 0x000138) align n/a MaxSize: 0x0138
struct FMovieSceneEntitySystemGraph
{ 
	unsigned char                                      UnknownData02_7[0x80];                                      // 0x0000   (0x0080)  MISSED
	FMovieSceneEntitySystemGraphNodes                  Nodes;                                                      // 0x0080   (0x0038)  
	unsigned char                                      UnknownData03_7[0x80];                                      // 0x00B8   (0x0080)  MISSED
};

/// Class /Script/MovieScene.MovieSceneEntitySystemLinker
/// Size: 0x0458 (1112 bytes) (0x000028 - 0x000458) align n/a MaxSize: 0x0458
class UMovieSceneEntitySystemLinker : public UObject
{ 
public:
	unsigned char                                      UnknownData02_8[0x210];                                     // 0x0028   (0x0210)  MISSED
	FMovieSceneEntitySystemGraph                       SystemGraph;                                                // 0x0238   (0x0138)  
	unsigned char                                      UnknownData03_7[0xE8];                                      // 0x0370   (0x00E8)  MISSED
};

/// Class /Script/MovieScene.MovieSceneEvalTimeSystem
/// Size: 0x0050 (80 bytes) (0x000040 - 0x000050) align n/a MaxSize: 0x0050
class UMovieSceneEvalTimeSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x10];                                      // 0x0040   (0x0010)  MISSED
};

/// Class /Script/MovieScene.MovieSceneFolder
/// Size: 0x0070 (112 bytes) (0x000028 - 0x000070) align n/a MaxSize: 0x0070
class UMovieSceneFolder : public UObject
{ 
public:
	FName                                              FolderName;                                                 // 0x0028   (0x0008)  
	TArray<class UMovieSceneFolder*>                   ChildFolders;                                               // 0x0030   (0x0010)  
	TArray<class UMovieSceneTrack*>                    ChildMasterTracks;                                          // 0x0040   (0x0010)  
	TArray<FString>                                    ChildObjectBindingStrings;                                  // 0x0050   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0060   (0x0010)  MISSED
};

/// Class /Script/MovieScene.MovieSceneKeyProxy
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneKeyProxy : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneMasterInstantiatorSystem
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneMasterInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieScenePreAnimatedStateSystemInterface
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieScenePreAnimatedStateSystemInterface : public UInterface
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneCachePreAnimatedStateSystem
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneCachePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneRestorePreAnimatedStateSystem
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneRestorePreAnimatedStateSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSequenceTickManager
/// Size: 0x0120 (288 bytes) (0x000028 - 0x000120) align n/a MaxSize: 0x0120
class UMovieSceneSequenceTickManager : public UObject
{ 
public:
	TArray<class AActor*>                              SequenceActors;                                             // 0x0028   (0x0010)  
	TMap<class UObject*, class AActor*>                SequencePlayerActorMap;                                     // 0x0038   (0x0050)  
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0088   (0x0008)  
	unsigned char                                      UnknownData01_7[0x90];                                      // 0x0090   (0x0090)  MISSED
};

/// Class /Script/MovieScene.MovieSceneSpawnablesSystem
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneSpawnablesSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieScene.MovieSceneSpawnSection
/// Size: 0x0188 (392 bytes) (0x000180 - 0x000188) align n/a MaxSize: 0x0188
class UMovieSceneSpawnSection : public UMovieSceneBoolSection
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0180   (0x0008)  MISSED
};

/// Class /Script/MovieScene.MovieSceneSpawnTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class UMovieSceneSpawnTrack : public UMovieSceneTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0078   (0x0010)  
	FGuid                                              ObjectGuid;                                                 // 0x0088   (0x0010)  
};

/// Class /Script/MovieScene.TestMovieSceneTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class UTestMovieSceneTrack : public UMovieSceneTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	bool                                               bHighPassFilter;                                            // 0x0080   (0x0001)  
	unsigned char                                      UnknownData03_6[0x7];                                       // 0x0081   (0x0007)  MISSED
	TArray<class UMovieSceneSection*>                  SectionArray;                                               // 0x0088   (0x0010)  
};

/// Class /Script/MovieScene.TestMovieSceneSection
/// Size: 0x00E8 (232 bytes) (0x0000E8 - 0x0000E8) align n/a MaxSize: 0x00E8
class UTestMovieSceneSection : public UMovieSceneSection
{ 
public:
};

/// Class /Script/MovieScene.TestMovieSceneSequence
/// Size: 0x0068 (104 bytes) (0x000060 - 0x000068) align n/a MaxSize: 0x0068
class UTestMovieSceneSequence : public UMovieSceneSequence
{ 
public:
	class UMovieScene*                                 MovieScene;                                                 // 0x0060   (0x0008)  
};

/// Class /Script/MovieScene.TestMovieSceneSubTrack
/// Size: 0x0098 (152 bytes) (0x000088 - 0x000098) align n/a MaxSize: 0x0098
class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  SectionArray;                                               // 0x0088   (0x0010)  
};

/// Class /Script/MovieScene.TestMovieSceneSubSection
/// Size: 0x0160 (352 bytes) (0x000160 - 0x000160) align n/a MaxSize: 0x0160
class UTestMovieSceneSubSection : public UMovieSceneSubSection
{ 
public:
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceInput
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneTrackInstanceInput
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x8];                                       // 0x0008   (0x0008)  MISSED
};

/// Class /Script/MovieScene.MovieSceneTrackInstance
/// Size: 0x0050 (80 bytes) (0x000028 - 0x000050) align n/a MaxSize: 0x0050
class UMovieSceneTrackInstance : public UObject
{ 
public:
	class UObject*                                     AnimatedObject;                                             // 0x0028   (0x0008)  
	bool                                               bIsMasterTrackInstance;                                     // 0x0030   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0031   (0x0007)  MISSED
	class UMovieSceneEntitySystemLinker*               Linker;                                                     // 0x0038   (0x0008)  
	TArray<FMovieSceneTrackInstanceInput>              Inputs;                                                     // 0x0040   (0x0010)  
};

/// Class /Script/MovieScene.MovieSceneTrackInstanceInstantiator
/// Size: 0x00F0 (240 bytes) (0x000040 - 0x0000F0) align n/a MaxSize: 0x00F0
class UMovieSceneTrackInstanceInstantiator : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData01_1[0xB0];                                      // 0x0040   (0x00B0)  MISSED
};

/// Class /Script/MovieScene.MovieSceneTrackInstanceSystem
/// Size: 0x0048 (72 bytes) (0x000040 - 0x000048) align n/a MaxSize: 0x0048
class UMovieSceneTrackInstanceSystem : public UMovieSceneEntitySystem
{ 
public:
	class UMovieSceneTrackInstanceInstantiator*        Instantiator;                                               // 0x0040   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneByteChannel
/// Size: 0x0098 (152 bytes) (0x000008 - 0x000098) align n/a MaxSize: 0x0098
struct FMovieSceneByteChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	char                                               DefaultValue;                                               // 0x0018   (0x0001)  
	bool                                               bHasDefaultValue;                                           // 0x0019   (0x0001)  
	unsigned char                                      UnknownData02_6[0x6];                                       // 0x001A   (0x0006)  MISSED
	TArray<char>                                       Values;                                                     // 0x0020   (0x0010)  
	class UEnum*                                       Enum;                                                       // 0x0030   (0x0008)  
	unsigned char                                      UnknownData03_7[0x60];                                      // 0x0038   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneIntegerChannel
/// Size: 0x0090 (144 bytes) (0x000008 - 0x000090) align n/a MaxSize: 0x0090
struct FMovieSceneIntegerChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	int32_t                                            DefaultValue;                                               // 0x0018   (0x0004)  
	bool                                               bHasDefaultValue;                                           // 0x001C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x001D   (0x0003)  MISSED
	TArray<int32_t>                                    Values;                                                     // 0x0020   (0x0010)  
	unsigned char                                      UnknownData03_7[0x60];                                      // 0x0030   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackImplementation
/// Size: 0x0010 (16 bytes) (0x000010 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneTrackImplementation : FMovieSceneEvalTemplateBase
{ 
};

/// Struct /Script/MovieScene.MovieSceneSequenceInstanceData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FMovieSceneSequenceInstanceData
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneEvaluationOperand
/// Size: 0x0014 (20 bytes) (0x000000 - 0x000014) align n/a MaxSize: 0x0014
struct FMovieSceneEvaluationOperand
{ 
	FGuid                                              ObjectBindingID;                                            // 0x0000   (0x0010)  
	FMovieSceneSequenceID                              SequenceID;                                                 // 0x0010   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneKeyStruct
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FMovieSceneKeyStruct
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.TrackInstanceInputComponent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FTrackInstanceInputComponent
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
	int32_t                                            OutputIndex;                                                // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x000C   (0x0004)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceComponent
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneTrackInstanceComponent
{ 
	class UMovieSceneSection*                          Owner;                                                      // 0x0000   (0x0008)  
	class UClass*                                      TrackInstanceClass;                                         // 0x0008   (0x0008)  
};

/// Struct /Script/MovieScene.EasingComponentData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FEasingComponentData
{ 
	class UMovieSceneSection*                          Section;                                                    // 0x0000   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneSectionGroup
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneSectionGroup
{ 
	TArray<TWeakObjectPtr<UMovieSceneSection*>>        Sections;                                                   // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneTrackLabels
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneTrackLabels
{ 
	TArray<FString>                                    Strings;                                                    // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneExpansionState
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FMovieSceneExpansionState
{ 
	bool                                               bExpanded;                                                  // 0x0000   (0x0001)  
};

/// Struct /Script/MovieScene.MovieSceneEditorData
/// Size: 0x00F0 (240 bytes) (0x000000 - 0x0000F0) align n/a MaxSize: 0x00F0
struct FMovieSceneEditorData
{ 
	TMap<FString, FMovieSceneExpansionState>           ExpansionStates;                                            // 0x0000   (0x0050)  
	TArray<FString>                                    PinnedNodes;                                                // 0x0050   (0x0010)  
	double                                             ViewStart;                                                  // 0x0060   (0x0008)  
	double                                             ViewEnd;                                                    // 0x0068   (0x0008)  
	double                                             WorkStart;                                                  // 0x0070   (0x0008)  
	double                                             WorkEnd;                                                    // 0x0078   (0x0008)  
	TSet<FFrameNumber>                                 MarkedFrames;                                               // 0x0080   (0x0050)  
	FFloatRange                                        WorkingRange;                                               // 0x00D0   (0x0010)  
	FFloatRange                                        ViewRange;                                                  // 0x00E0   (0x0010)  
};

/// Struct /Script/MovieScene.MovieSceneTimecodeSource
/// Size: 0x0018 (24 bytes) (0x000000 - 0x000018) align n/a MaxSize: 0x0018
struct FMovieSceneTimecodeSource
{ 
	FTimecode                                          Timecode;                                                   // 0x0000   (0x0014)  
	FFrameNumber                                       DeltaFrame;                                                 // 0x0014   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEntitySystemGraphNode
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FMovieSceneEntitySystemGraphNode
{ 
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0000   (0x0020)  MISSED
	class UMovieSceneEntitySystem*                     System;                                                     // 0x0020   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneEmptyStruct
/// Size: 0x0001 (1 bytes) (0x000000 - 0x000001) align n/a MaxSize: 0x0001
struct FMovieSceneEmptyStruct
{ 
	unsigned char                                      UnknownData01_2[0x1];                                       // 0x0000   (0x0001)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSegmentIdentifier
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FMovieSceneSegmentIdentifier
{ 
	int32_t                                            IdentifierIndex;                                            // 0x0000   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneEvaluationFieldSegmentPtr
/// Size: 0x000C (12 bytes) (0x000008 - 0x00000C) align n/a MaxSize: 0x000C
struct FMovieSceneEvaluationFieldSegmentPtr : FMovieSceneEvaluationFieldTrackPtr
{ 
	FMovieSceneSegmentIdentifier                       SegmentID;                                                  // 0x0008   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneSubSectionData
/// Size: 0x001C (28 bytes) (0x000000 - 0x00001C) align n/a MaxSize: 0x001C
struct FMovieSceneSubSectionData
{ 
	TWeakObjectPtr<class UMovieSceneSubSection*>       Section;                                                    // 0x0000   (0x0008)  
	FGuid                                              ObjectBindingID;                                            // 0x0008   (0x0010)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0019   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneKeyTimeStruct
/// Size: 0x0028 (40 bytes) (0x000008 - 0x000028) align n/a MaxSize: 0x0028
struct FMovieSceneKeyTimeStruct : FMovieSceneKeyStruct
{ 
	FFrameNumber                                       Time;                                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_7[0x1C];                                      // 0x000C   (0x001C)  MISSED
};

/// Struct /Script/MovieScene.GeneratedMovieSceneKeyStruct
/// Size: 0x0050 (80 bytes) (0x000000 - 0x000050) align n/a MaxSize: 0x0050
struct FGeneratedMovieSceneKeyStruct
{ 
	unsigned char                                      UnknownData01_2[0x50];                                      // 0x0000   (0x0050)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneObjectPathChannelKeyValue
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FMovieSceneObjectPathChannelKeyValue
{ 
	TWeakObjectPtr<class UObject*>                     SoftPtr;                                                    // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_6[0x20];                                      // 0x0008   (0x0020)  MISSED
	class UObject*                                     HardPtr;                                                    // 0x0028   (0x0008)  
};

/// Struct /Script/MovieScene.MovieSceneObjectPathChannel
/// Size: 0x00C0 (192 bytes) (0x000008 - 0x0000C0) align n/a MaxSize: 0x00C0
struct FMovieSceneObjectPathChannel : FMovieSceneChannel
{ 
	class UClass*                                      PropertyClass;                                              // 0x0008   (0x0008)  
	TArray<FFrameNumber>                               Times;                                                      // 0x0010   (0x0010)  
	TArray<FMovieSceneObjectPathChannelKeyValue>       Values;                                                     // 0x0020   (0x0010)  
	FMovieSceneObjectPathChannelKeyValue               DefaultValue;                                               // 0x0030   (0x0030)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0060   (0x0060)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSegment
/// Size: 0x0058 (88 bytes) (0x000000 - 0x000058) align n/a MaxSize: 0x0058
struct FMovieSceneSegment
{ 
	unsigned char                                      UnknownData01_2[0x58];                                      // 0x0000   (0x0058)  MISSED
};

/// Struct /Script/MovieScene.SectionEvaluationData
/// Size: 0x000C (12 bytes) (0x000000 - 0x00000C) align n/a MaxSize: 0x000C
struct FSectionEvaluationData
{ 
	int32_t                                            ImplIndex;                                                  // 0x0000   (0x0004)  
	FFrameNumber                                       ForcedTime;                                                 // 0x0004   (0x0004)  
	ESectionEvaluationFlags                            Flags;                                                      // 0x0008   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0009   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSubSequenceTreeEntry
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FMovieSceneSubSequenceTreeEntry
{ 
	unsigned char                                      UnknownData01_2[0x8];                                       // 0x0000   (0x0008)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneSequencePlaybackParams
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FMovieSceneSequencePlaybackParams
{ 
	FFrameTime                                         Frame;                                                      // 0x0000   (0x0008)  
	float                                              Time;                                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData02_6[0x4];                                       // 0x000C   (0x0004)  MISSED
	FString                                            MarkedFrame;                                                // 0x0010   (0x0010)  
	EMovieScenePositionType                            PositionType;                                               // 0x0020   (0x0001)  
	EUpdatePositionMethod                              UpdateMethod;                                               // 0x0021   (0x0001)  
	unsigned char                                      UnknownData03_6[0x2];                                       // 0x0022   (0x0002)  MISSED
	int32_t                                            SkipUpdateCameraCut;                                        // 0x0024   (0x0004)  
};

/// Struct /Script/MovieScene.MovieSceneWarpCounter
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneWarpCounter
{ 
	TArray<uint32_t>                                   WarpCounts;                                                 // 0x0000   (0x0010)  
};

/// Struct /Script/MovieScene.TestMovieSceneEvalTemplate
/// Size: 0x0020 (32 bytes) (0x000020 - 0x000020) align n/a MaxSize: 0x0020
struct FTestMovieSceneEvalTemplate : FMovieSceneEvalTemplate
{ 
};

/// Struct /Script/MovieScene.MovieSceneTrackDisplayOptions
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FMovieSceneTrackDisplayOptions
{ 
	bool                                               bShowVerticalFrames : 1;                                    // 0x0000:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x0001   (0x0003)  MISSED
};

/// Struct /Script/MovieScene.MovieSceneTrackInstanceEntry
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneTrackInstanceEntry
{ 
	class UObject*                                     BoundObject;                                                // 0x0000   (0x0008)  
	class UMovieSceneTrackInstance*                    TrackInstance;                                              // 0x0008   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneParameterSection
/// Size: 0x0148 (328 bytes) (0x0000E8 - 0x000148) align n/a MaxSize: 0x0148
class UMovieSceneParameterSection : public UMovieSceneSection
{ 
public:
	TArray<FBoolParameterNameAndCurve>                 BoolParameterNamesAndCurves;                                // 0x00E8   (0x0010)  
	TArray<FScalarParameterNameAndCurve>               ScalarParameterNamesAndCurves;                              // 0x00F8   (0x0010)  
	TArray<FVector2DParameterNameAndCurves>            Vector2DParameterNamesAndCurves;                            // 0x0108   (0x0010)  
	TArray<FVectorParameterNameAndCurves>              VectorParameterNamesAndCurves;                              // 0x0118   (0x0010)  
	TArray<FColorParameterNameAndCurves>               ColorParameterNamesAndCurves;                               // 0x0128   (0x0010)  
	TArray<FTransformParameterNameAndCurves>           TransformParameterNamesAndCurves;                           // 0x0138   (0x0010)  

	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveVectorParameter
	constexpr static const FunctionPointer<UMovieSceneParameterSection, bool, const FName> RemoveVectorParameter = { 0x3c8b4f0, 0 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveVector2DParameter
	constexpr static const FunctionPointer<UMovieSceneParameterSection, bool, const FName> RemoveVector2DParameter = { 0x3c8b630, 1 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveTransformParameter
	constexpr static const FunctionPointer<UMovieSceneParameterSection, bool, const FName> RemoveTransformParameter = { 0x3c8b270, 2 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveScalarParameter
	constexpr static const FunctionPointer<UMovieSceneParameterSection, bool, const FName> RemoveScalarParameter = { 0x3c8b8b0, 3 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveColorParameter
	constexpr static const FunctionPointer<UMovieSceneParameterSection, bool, const FName> RemoveColorParameter = { 0x3c8b3b0, 4 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.RemoveBoolParameter
	constexpr static const FunctionPointer<UMovieSceneParameterSection, bool, const FName> RemoveBoolParameter = { 0x3c8b770, 5 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.GetParameterNames
	constexpr static const FunctionPointer<UMovieSceneParameterSection, void, const TSet<FName>&> GetParameterNames = { 0x3c8b0e0, 6 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddVectorParameterKey
	constexpr static const FunctionPointer<UMovieSceneParameterSection, void, const FName, const FFrameNumber, const FVector> AddVectorParameterKey = { 0x3c8be20, 7 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddVector2DParameterKey
	constexpr static const FunctionPointer<UMovieSceneParameterSection, void, const FName, const FFrameNumber, const FVector2D> AddVector2DParameterKey = { 0x3c8c020, 8 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddTransformParameterKey
	constexpr static const FunctionPointer<UMovieSceneParameterSection, void, const FName, const FFrameNumber, const FTransform&> AddTransformParameterKey = { 0x3c8b9f0, 9 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddScalarParameterKey
	constexpr static const FunctionPointer<UMovieSceneParameterSection, void, const FName, const FFrameNumber, const float> AddScalarParameterKey = { 0x3c8c3f0, 10 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddColorParameterKey
	constexpr static const FunctionPointer<UMovieSceneParameterSection, void, const FName, const FFrameNumber, const FLinearColor> AddColorParameterKey = { 0x3c8bc30, 11 }; 
	// Function /Script/MovieSceneTracks.MovieSceneParameterSection.AddBoolParameterKey
	constexpr static const FunctionPointer<UMovieSceneParameterSection, void, const FName, const FFrameNumber, const bool> AddBoolParameterKey = { 0x3c8c200, 12 }; 
};

/// Class /Script/MovieSceneTracks.MovieSceneBoolTrack
/// Size: 0x00B0 (176 bytes) (0x0000A8 - 0x0000B0) align n/a MaxSize: 0x00B0
class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x00A8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSectionBase
/// Size: 0x00F0 (240 bytes) (0x0000E8 - 0x0000F0) align n/a MaxSize: 0x00F0
class UMovieSceneEventSectionBase : public UMovieSceneSection
{ 
public:
	bool                                               bCheckObjectClassType;                                      // 0x00E8   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00E9   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.FloatChannelEvaluatorSystem
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UFloatChannelEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformOrigin
/// Size: 0x0028 (40 bytes) (0x000028 - 0x000028) align n/a MaxSize: 0x0028
class UMovieSceneTransformOrigin : public UInterface
{ 
public:

	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneTransformOrigin.BP_GetTransformOrigin
	constexpr static const FunctionPointer<UMovieSceneTransformOrigin, FTransform> BP_GetTransformOrigin = { 0x2bbb090, 0 }; 
};

/// Class /Script/MovieSceneTracks.MovieScene3DConstraintSection
/// Size: 0x0110 (272 bytes) (0x0000E8 - 0x000110) align n/a MaxSize: 0x0110
class UMovieScene3DConstraintSection : public UMovieSceneSection
{ 
public:
	FGuid                                              ConstraintId;                                               // 0x00E8   (0x0010)  
	FMovieSceneObjectBindingID                         ConstraintBindingID;                                        // 0x00F8   (0x0018)  

	/// Functions
	// Function /Script/MovieSceneTracks.MovieScene3DConstraintSection.SetConstraintBindingID
	constexpr static const FunctionPointer<UMovieScene3DConstraintSection, void, const FMovieSceneObjectBindingID&> SetConstraintBindingID = { 0x3c76900, 0 }; 
	// Function /Script/MovieSceneTracks.MovieScene3DConstraintSection.GetConstraintBindingID
	constexpr static const FunctionPointer<UMovieScene3DConstraintSection, FMovieSceneObjectBindingID> GetConstraintBindingID = { 0x3c76a10, 1 }; 
};

/// Class /Script/MovieSceneTracks.MovieScene3DAttachSection
/// Size: 0x0130 (304 bytes) (0x000110 - 0x000130) align n/a MaxSize: 0x0130
class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0110   (0x0008)  MISSED
	FName                                              AttachSocketName;                                           // 0x0118   (0x0008)  
	FName                                              AttachComponentName;                                        // 0x0120   (0x0008)  
	EAttachmentRule                                    AttachmentLocationRule;                                     // 0x0128   (0x0001)  
	EAttachmentRule                                    AttachmentRotationRule;                                     // 0x0129   (0x0001)  
	EAttachmentRule                                    AttachmentScaleRule;                                        // 0x012A   (0x0001)  
	EDetachmentRule                                    DetachmentLocationRule;                                     // 0x012B   (0x0001)  
	EDetachmentRule                                    DetachmentRotationRule;                                     // 0x012C   (0x0001)  
	EDetachmentRule                                    DetachmentScaleRule;                                        // 0x012D   (0x0001)  
	unsigned char                                      UnknownData03_7[0x2];                                       // 0x012E   (0x0002)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DConstraintTrack
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align n/a MaxSize: 0x0088
class UMovieScene3DConstraintTrack : public UMovieSceneTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  ConstraintSections;                                         // 0x0078   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieScene3DAttachTrack
/// Size: 0x0088 (136 bytes) (0x000088 - 0x000088) align n/a MaxSize: 0x0088
class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieScene3DPathSection
/// Size: 0x01B8 (440 bytes) (0x000110 - 0x0001B8) align n/a MaxSize: 0x01B8
class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
{ 
public:
	FMovieSceneFloatChannel                            TimingCurve;                                                // 0x0110   (0x00A0)  
	MovieScene3DPathSection_Axis                       FrontAxisEnum;                                              // 0x01B0   (0x0001)  
	MovieScene3DPathSection_Axis                       UpAxisEnum;                                                 // 0x01B1   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x01B2   (0x0002)  MISSED
	bool                                               bFollow : 1;                                                // 0x01B4:0 (0x0001)  
	bool                                               bReverse : 1;                                               // 0x01B4:1 (0x0001)  
	bool                                               bForceUpright : 1;                                          // 0x01B4:2 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x01B5   (0x0003)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DPathTrack
/// Size: 0x0090 (144 bytes) (0x000088 - 0x000090) align n/a MaxSize: 0x0090
class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x0088   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformPropertySystem
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align n/a MaxSize: 0x0050
class UMovieScene3DTransformPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneTransformMask
/// Size: 0x0004 (4 bytes) (0x000000 - 0x000004) align n/a MaxSize: 0x0004
struct FMovieSceneTransformMask
{ 
	uint32_t                                           Mask;                                                       // 0x0000   (0x0004)  
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformSection
/// Size: 0x0740 (1856 bytes) (0x0000E8 - 0x000740) align n/a MaxSize: 0x0740
class UMovieScene3DTransformSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData03_8[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneTransformMask                           TransformMask;                                              // 0x00F0   (0x0004)  
	unsigned char                                      UnknownData04_6[0x4];                                       // 0x00F4   (0x0004)  MISSED
	FMovieSceneFloatChannel                            Translation[3];                                             // 0x00F8   (0x01E0)  
	FMovieSceneFloatChannel                            Rotation[3];                                                // 0x02D8   (0x01E0)  
	FMovieSceneFloatChannel                            Scale[3];                                                   // 0x04B8   (0x01E0)  
	FMovieSceneFloatChannel                            ManualWeight;                                               // 0x0698   (0x00A0)  
	bool                                               bUseQuaternionInterpolation;                                // 0x0738   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x0739   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScene3DTransformTrack
/// Size: 0x00A8 (168 bytes) (0x0000A8 - 0x0000A8) align n/a MaxSize: 0x00A8
class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceKey
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FMovieSceneActorReferenceKey
{ 
	FMovieSceneObjectBindingID                         Object;                                                     // 0x0000   (0x0018)  
	FName                                              ComponentName;                                              // 0x0018   (0x0008)  
	FName                                              SocketName;                                                 // 0x0020   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceData
/// Size: 0x00B0 (176 bytes) (0x000008 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FMovieSceneActorReferenceData : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0008   (0x0010)  
	unsigned char                                      UnknownData02_6[0x28];                                      // 0x0018   (0x0028)  MISSED
	TArray<FMovieSceneActorReferenceKey>               KeyValues;                                                  // 0x0040   (0x0010)  
	unsigned char                                      UnknownData03_7[0x60];                                      // 0x0050   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneActorReferenceSection
/// Size: 0x0228 (552 bytes) (0x0000E8 - 0x000228) align n/a MaxSize: 0x0228
class UMovieSceneActorReferenceSection : public UMovieSceneSection
{ 
public:
	FMovieSceneActorReferenceData                      ActorReferenceData;                                         // 0x00E8   (0x00B0)  
	FIntegralCurve                                     ActorGuidIndexCurve;                                        // 0x0198   (0x0080)  
	TArray<FString>                                    ActorGuidStrings;                                           // 0x0218   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneActorReferenceTrack
/// Size: 0x00B0 (176 bytes) (0x0000A8 - 0x0000B0) align n/a MaxSize: 0x00B0
class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x00A8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneAudioSection
/// Size: 0x0350 (848 bytes) (0x0000E8 - 0x000350) align n/a MaxSize: 0x0350
class UMovieSceneAudioSection : public UMovieSceneSection
{ 
public:
	class USoundBase*                                  Sound;                                                      // 0x00E8   (0x0008)  
	FFrameNumber                                       StartFrameOffset;                                           // 0x00F0   (0x0004)  
	float                                              StartOffset;                                                // 0x00F4   (0x0004)  
	float                                              AudioStartTime;                                             // 0x00F8   (0x0004)  
	float                                              AudioDilationFactor;                                        // 0x00FC   (0x0004)  
	float                                              AudioVolume;                                                // 0x0100   (0x0004)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0104   (0x0004)  MISSED
	FMovieSceneFloatChannel                            SoundVolume;                                                // 0x0108   (0x00A0)  
	FMovieSceneFloatChannel                            PitchMultiplier;                                            // 0x01A8   (0x00A0)  
	FMovieSceneActorReferenceData                      AttachActorData;                                            // 0x0248   (0x00B0)  
	bool                                               bLooping;                                                   // 0x02F8   (0x0001)  
	bool                                               bSuppressSubtitles;                                         // 0x02F9   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x02FA   (0x0002)  MISSED
	float                                              StopFadeOutDuration;                                        // 0x02FC   (0x0004)  
	bool                                               bOverrideAttenuation;                                       // 0x0300   (0x0001)  
	unsigned char                                      UnknownData07_6[0x7];                                       // 0x0301   (0x0007)  MISSED
	class USoundAttenuation*                           AttenuationSettings;                                        // 0x0308   (0x0008)  
	FDelegateProperty                                  OnQueueSubtitles;                                           // 0x0310   (0x0010)  
	FMulticastInlineDelegate                           OnAudioFinished;                                            // 0x0320   (0x0010)  
	FMulticastInlineDelegate                           OnAudioPlaybackPercent;                                     // 0x0330   (0x0010)  
	bool                                               bPlayContinuous;                                            // 0x0340   (0x0001)  
	bool                                               bUsePreAnimatedDestroy;                                     // 0x0341   (0x0001)  
	bool                                               bUsePreAnimatedStop;                                        // 0x0342   (0x0001)  
	ESBMovieSceneAudioSectionAttachType                DefaultAttachType;                                          // 0x0343   (0x0001)  
	ESBTargetAspectRatioType                           AspectRatioType;                                            // 0x0344   (0x0001)  
	unsigned char                                      UnknownData08_6[0x3];                                       // 0x0345   (0x0003)  MISSED
	float                                              AspectRatioValue;                                           // 0x0348   (0x0004)  
	unsigned char                                      UnknownData09_7[0x4];                                       // 0x034C   (0x0004)  MISSED

	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.SetStartOffset
	constexpr static const FunctionPointer<UMovieSceneAudioSection, void, const FFrameNumber> SetStartOffset = { 0x3c798b0, 0 }; 
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.SetSound
	constexpr static const FunctionPointer<UMovieSceneAudioSection, void, const USoundBase*> SetSound = { 0x3c799a0, 1 }; 
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.GetStartOffset
	constexpr static const FunctionPointer<UMovieSceneAudioSection, FFrameNumber> GetStartOffset = { 0x3c79890, 2 }; 
	// Function /Script/MovieSceneTracks.MovieSceneAudioSection.GetSound
	constexpr static const FunctionPointer<UMovieSceneAudioSection, USoundBase*> GetSound = { 0x3c79980, 3 }; 
};

/// Class /Script/MovieSceneTracks.MovieSceneAudioTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AudioSections;                                              // 0x0080   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneBaseValueEvaluatorSystem
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneBaseValueEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneByteSection
/// Size: 0x0180 (384 bytes) (0x0000E8 - 0x000180) align n/a MaxSize: 0x0180
class UMovieSceneByteSection : public UMovieSceneSection
{ 
public:
	FMovieSceneByteChannel                             ByteCurve;                                                  // 0x00E8   (0x0098)  
};

/// Class /Script/MovieSceneTracks.MovieSceneByteTrack
/// Size: 0x00B8 (184 bytes) (0x0000A8 - 0x0000B8) align n/a MaxSize: 0x00B8
class UMovieSceneByteTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x00A8   (0x0008)  MISSED
	class UEnum*                                       Enum;                                                       // 0x00B0   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraAnimSectionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FMovieSceneCameraAnimSectionData
{ 
	class UCameraAnim*                                 CameraAnim;                                                 // 0x0000   (0x0008)  
	float                                              PlayRate;                                                   // 0x0008   (0x0004)  
	float                                              PlayScale;                                                  // 0x000C   (0x0004)  
	float                                              BlendInTime;                                                // 0x0010   (0x0004)  
	float                                              BlendOutTime;                                               // 0x0014   (0x0004)  
	bool                                               bLooping;                                                   // 0x0018   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0019   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraAnimSection
/// Size: 0x0128 (296 bytes) (0x0000E8 - 0x000128) align n/a MaxSize: 0x0128
class UMovieSceneCameraAnimSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraAnimSectionData                   AnimData;                                                   // 0x00E8   (0x0020)  
	class UCameraAnim*                                 CameraAnim;                                                 // 0x0108   (0x0008)  
	float                                              PlayRate;                                                   // 0x0110   (0x0004)  
	float                                              PlayScale;                                                  // 0x0114   (0x0004)  
	float                                              BlendInTime;                                                // 0x0118   (0x0004)  
	float                                              BlendOutTime;                                               // 0x011C   (0x0004)  
	bool                                               bLooping;                                                   // 0x0120   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0121   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraAnimTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  CameraAnimSections;                                         // 0x0080   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutSection
/// Size: 0x02A0 (672 bytes) (0x0000E8 - 0x0002A0) align n/a MaxSize: 0x02A0
class UMovieSceneCameraCutSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData05_8[0x8];                                       // 0x00E8   (0x0008)  MISSED
	float                                              BlendInTime;                                                // 0x00F0   (0x0004)  
	float                                              BlendOutTime;                                               // 0x00F4   (0x0004)  
	bool                                               bInitControllerRotationWhenFinished;                        // 0x00F8   (0x0001)  
	bool                                               bSetLastViewportPCPawn;                                     // 0x00F9   (0x0001)  
	bool                                               bDontBlendInPcCamera;                                       // 0x00FA   (0x0001)  
	unsigned char                                      UnknownData06_6[0x5];                                       // 0x00FB   (0x0005)  MISSED
	FMovieSceneFloatChannel                            Weight;                                                     // 0x0100   (0x00A0)  
	FMovieSceneBoolChannel                             UseCinemaDirection;                                         // 0x01A0   (0x0090)  
	bool                                               bLockPreviousCamera;                                        // 0x0230   (0x0001)  
	unsigned char                                      UnknownData07_6[0x3];                                       // 0x0231   (0x0003)  MISSED
	FGuid                                              CameraGuid;                                                 // 0x0234   (0x0010)  
	FMovieSceneObjectBindingID                         CameraBindingID;                                            // 0x0244   (0x0018)  
	unsigned char                                      UnknownData08_6[0x4];                                       // 0x025C   (0x0004)  MISSED
	FTransform                                         InitialCameraCutTransform;                                  // 0x0260   (0x0030)  
	bool                                               bHasInitialCameraCutTransform;                              // 0x0290   (0x0001)  
	unsigned char                                      UnknownData09_7[0xF];                                       // 0x0291   (0x000F)  MISSED

	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneCameraCutSection.SetCameraBindingID
	constexpr static const FunctionPointer<UMovieSceneCameraCutSection, void, const FMovieSceneObjectBindingID&> SetCameraBindingID = { 0x3c7b850, 0 }; 
	// Function /Script/MovieSceneTracks.MovieSceneCameraCutSection.GetCameraBindingID
	constexpr static const FunctionPointer<UMovieSceneCameraCutSection, FMovieSceneObjectBindingID> GetCameraBindingID = { 0x3c7b960, 1 }; 
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
{ 
public:
	bool                                               bCanBlend;                                                  // 0x0078   (0x0001)  
	unsigned char                                      UnknownData01_6[0x7];                                       // 0x0079   (0x0007)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraCutTrackInstance
/// Size: 0x00B8 (184 bytes) (0x000050 - 0x0000B8) align n/a MaxSize: 0x00B8
class UMovieSceneCameraCutTrackInstance : public UMovieSceneTrackInstance
{ 
public:
	unsigned char                                      UnknownData01_1[0x68];                                      // 0x0050   (0x0068)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSectionData
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FMovieSceneCameraShakeSectionData
{ 
	class UClass*                                      ShakeClass;                                                 // 0x0000   (0x0008)  
	float                                              PlayScale;                                                  // 0x0008   (0x0004)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FRotator                                           UserDefinedPlaySpace;                                       // 0x0010   (0x000C)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSection
/// Size: 0x0128 (296 bytes) (0x0000E8 - 0x000128) align n/a MaxSize: 0x0128
class UMovieSceneCameraShakeSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraShakeSectionData                  ShakeData;                                                  // 0x00E8   (0x0020)  
	class UClass*                                      ShakeClass;                                                 // 0x0108   (0x0008)  
	float                                              PlayScale;                                                  // 0x0110   (0x0004)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x0114   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0115   (0x0003)  MISSED
	FRotator                                           UserDefinedPlaySpace;                                       // 0x0118   (0x000C)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0124   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeSection
/// Size: 0x0108 (264 bytes) (0x0000E8 - 0x000108) align n/a MaxSize: 0x0108
class UMovieSceneCameraShakeSourceShakeSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraShakeSectionData                  ShakeData;                                                  // 0x00E8   (0x0020)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneCameraShakeSourceShakeTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  CameraShakeSections;                                        // 0x0080   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTrigger
/// Size: 0x0020 (32 bytes) (0x000000 - 0x000020) align n/a MaxSize: 0x0020
struct FMovieSceneCameraShakeSourceTrigger
{ 
	class UClass*                                      ShakeClass;                                                 // 0x0000   (0x0008)  
	float                                              PlayScale;                                                  // 0x0008   (0x0004)  
	ECameraShakePlaySpace                              PlaySpace;                                                  // 0x000C   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x000D   (0x0003)  MISSED
	FRotator                                           UserDefinedPlaySpace;                                       // 0x0010   (0x000C)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x001C   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000088) align n/a MaxSize: 0x0088
struct FMovieSceneCameraShakeSourceTriggerChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0008   (0x0010)  
	TArray<FMovieSceneCameraShakeSourceTrigger>        KeyValues;                                                  // 0x0018   (0x0010)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0028   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSection
/// Size: 0x0170 (368 bytes) (0x0000E8 - 0x000170) align n/a MaxSize: 0x0170
class UMovieSceneCameraShakeSourceTriggerSection : public UMovieSceneSection
{ 
public:
	FMovieSceneCameraShakeSourceTriggerChannel         Channel;                                                    // 0x00E8   (0x0088)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneCameraShakeSourceTriggerTrack : public UMovieSceneTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCameraShakeTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  CameraShakeSections;                                        // 0x0080   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneCinematicShotSection
/// Size: 0x0188 (392 bytes) (0x000160 - 0x000188) align n/a MaxSize: 0x0188
class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
{ 
public:
	FString                                            ShotDisplayName;                                            // 0x0160   (0x0010)  
	FText                                              DisplayName;                                                // 0x0170   (0x0018)  

	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneCinematicShotSection.SetShotDisplayName
	constexpr static const FunctionPointer<UMovieSceneCinematicShotSection, void, const FString> SetShotDisplayName = { 0x3c7f3b0, 0 }; 
	// Function /Script/MovieSceneTracks.MovieSceneCinematicShotSection.GetShotDisplayName
	constexpr static const FunctionPointer<UMovieSceneCinematicShotSection, FString> GetShotDisplayName = { 0x3c7f500, 1 }; 
};

/// Class /Script/MovieSceneTracks.MovieSceneCinematicShotTrack
/// Size: 0x0088 (136 bytes) (0x000088 - 0x000088) align n/a MaxSize: 0x0088
class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneColorSection
/// Size: 0x0368 (872 bytes) (0x0000E8 - 0x000368) align n/a MaxSize: 0x0368
class UMovieSceneColorSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            RedCurve;                                                   // 0x00E8   (0x00A0)  
	FMovieSceneFloatChannel                            GreenCurve;                                                 // 0x0188   (0x00A0)  
	FMovieSceneFloatChannel                            BlueCurve;                                                  // 0x0228   (0x00A0)  
	FMovieSceneFloatChannel                            AlphaCurve;                                                 // 0x02C8   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneColorTrack
/// Size: 0x00B8 (184 bytes) (0x0000A8 - 0x0000B8) align n/a MaxSize: 0x00B8
class UMovieSceneColorTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x00A8   (0x0008)  MISSED
	bool                                               bIsSlateColor;                                              // 0x00B0   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x00B1   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentAttachmentInvalidatorSystem
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneComponentAttachmentInvalidatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentAttachmentSystem
/// Size: 0x01C0 (448 bytes) (0x000040 - 0x0001C0) align n/a MaxSize: 0x01C0
class UMovieSceneComponentAttachmentSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x180];                                     // 0x0040   (0x0180)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentMobilitySystem
/// Size: 0x0220 (544 bytes) (0x000040 - 0x000220) align n/a MaxSize: 0x0220
class UMovieSceneComponentMobilitySystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x1E0];                                     // 0x0040   (0x01E0)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePreAnimatedComponentTransformSystem
/// Size: 0x01C0 (448 bytes) (0x000040 - 0x0001C0) align n/a MaxSize: 0x01C0
class UMovieScenePreAnimatedComponentTransformSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x180];                                     // 0x0040   (0x0180)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentTransformSystem
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align n/a MaxSize: 0x0050
class UMovieSceneComponentTransformSystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEnumSection
/// Size: 0x0180 (384 bytes) (0x0000E8 - 0x000180) align n/a MaxSize: 0x0180
class UMovieSceneEnumSection : public UMovieSceneSection
{ 
public:
	FMovieSceneByteChannel                             EnumCurve;                                                  // 0x00E8   (0x0098)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEnumTrack
/// Size: 0x00B8 (184 bytes) (0x0000A8 - 0x0000B8) align n/a MaxSize: 0x00B8
class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x00A8   (0x0008)  MISSED
	class UEnum*                                       Enum;                                                       // 0x00B0   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEulerTransformPropertySystem
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align n/a MaxSize: 0x0050
class UMovieSceneEulerTransformPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEulerTransformTrack
/// Size: 0x00A8 (168 bytes) (0x0000A8 - 0x0000A8) align n/a MaxSize: 0x00A8
class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventPtrs
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FMovieSceneEventPtrs
{ 
	class UFunction*                                   Function;                                                   // 0x0000   (0x0008)  
	unsigned char                                      UnknownData01_7[0x20];                                      // 0x0008   (0x0020)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEvent
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FMovieSceneEvent
{ 
	FMovieSceneEventPtrs                               Ptrs;                                                       // 0x0000   (0x0028)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEventRepeaterSection
/// Size: 0x0120 (288 bytes) (0x0000F0 - 0x000120) align n/a MaxSize: 0x0120
class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x00F0   (0x0008)  MISSED
	FMovieSceneEvent                                   Event;                                                      // 0x00F8   (0x0028)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventParameters
/// Size: 0x0028 (40 bytes) (0x000000 - 0x000028) align n/a MaxSize: 0x0028
struct FMovieSceneEventParameters
{ 
	unsigned char                                      UnknownData01_2[0x28];                                      // 0x0000   (0x0028)  MISSED
};

/// Struct /Script/MovieSceneTracks.EventPayload
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FEventPayload
{ 
	FName                                              EventName;                                                  // 0x0000   (0x0008)  
	FMovieSceneEventParameters                         Parameters;                                                 // 0x0008   (0x0028)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventSectionData
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000088) align n/a MaxSize: 0x0088
struct FMovieSceneEventSectionData : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	TArray<FEventPayload>                              KeyValues;                                                  // 0x0018   (0x0010)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0028   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSection
/// Size: 0x01E8 (488 bytes) (0x0000E8 - 0x0001E8) align n/a MaxSize: 0x01E8
class UMovieSceneEventSection : public UMovieSceneSection
{ 
public:
	FNameCurve                                         Events;                                                     // 0x00E8   (0x0078)  
	FMovieSceneEventSectionData                        EventData;                                                  // 0x0160   (0x0088)  
};

/// Class /Script/MovieSceneTracks.MovieSceneEventSystem
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneEventSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x50];                                      // 0x0040   (0x0050)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePreSpawnEventSystem
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class UMovieScenePreSpawnEventSystem : public UMovieSceneEventSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieScenePostSpawnEventSystem
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class UMovieScenePostSpawnEventSystem : public UMovieSceneEventSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieScenePostEvalEventSystem
/// Size: 0x0090 (144 bytes) (0x000090 - 0x000090) align n/a MaxSize: 0x0090
class UMovieScenePostEvalEventSystem : public UMovieSceneEventSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneEventTrack
/// Size: 0x0098 (152 bytes) (0x000078 - 0x000098) align n/a MaxSize: 0x0098
class UMovieSceneEventTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData03_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	bool                                               bFireEventsWhenForwards : 1;                                // 0x0080:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x0080:1 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0081   (0x0003)  MISSED
	EFireEventsAtPosition                              EventPosition;                                              // 0x0084   (0x0001)  
	unsigned char                                      UnknownData05_6[0x3];                                       // 0x0085   (0x0003)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0088   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventChannel
/// Size: 0x0088 (136 bytes) (0x000008 - 0x000088) align n/a MaxSize: 0x0088
struct FMovieSceneEventChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               KeyTimes;                                                   // 0x0008   (0x0010)  
	TArray<FMovieSceneEvent>                           KeyValues;                                                  // 0x0018   (0x0010)  
	unsigned char                                      UnknownData01_7[0x60];                                      // 0x0028   (0x0060)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneEventTriggerSection
/// Size: 0x0180 (384 bytes) (0x0000F0 - 0x000180) align n/a MaxSize: 0x0180
class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x00F0   (0x0008)  MISSED
	FMovieSceneEventChannel                            EventChannel;                                               // 0x00F8   (0x0088)  
};

/// Class /Script/MovieSceneTracks.MovieSceneFadeSection
/// Size: 0x01A0 (416 bytes) (0x0000E8 - 0x0001A0) align n/a MaxSize: 0x01A0
class UMovieSceneFadeSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            FloatCurve;                                                 // 0x00E8   (0x00A0)  
	FLinearColor                                       FadeColor;                                                  // 0x0188   (0x0010)  
	bool                                               bFadeAudio : 1;                                             // 0x0198:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x0199   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatTrack
/// Size: 0x00A8 (168 bytes) (0x0000A8 - 0x0000A8) align n/a MaxSize: 0x00A8
class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneFadeTrack
/// Size: 0x00B0 (176 bytes) (0x0000A8 - 0x0000B0) align n/a MaxSize: 0x00B0
class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x00A8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatPropertySystem
/// Size: 0x0050 (80 bytes) (0x000050 - 0x000050) align n/a MaxSize: 0x0050
class UMovieSceneFloatPropertySystem : public UMovieScenePropertySystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneFloatSection
/// Size: 0x0190 (400 bytes) (0x0000E8 - 0x000190) align n/a MaxSize: 0x0190
class UMovieSceneFloatSection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x00E8   (0x0008)  MISSED
	FMovieSceneFloatChannel                            FloatCurve;                                                 // 0x00F0   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneHierarchicalBiasSystem
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneHierarchicalBiasSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneIntegerSection
/// Size: 0x0178 (376 bytes) (0x0000E8 - 0x000178) align n/a MaxSize: 0x0178
class UMovieSceneIntegerSection : public UMovieSceneSection
{ 
public:
	FMovieSceneIntegerChannel                          IntegerCurve;                                               // 0x00E8   (0x0090)  
};

/// Class /Script/MovieSceneTracks.MovieSceneIntegerTrack
/// Size: 0x00B0 (176 bytes) (0x0000A8 - 0x0000B0) align n/a MaxSize: 0x00B0
class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x00A8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneInterrogatedPropertyInstantiatorSystem
/// Size: 0x01E8 (488 bytes) (0x000040 - 0x0001E8) align n/a MaxSize: 0x01E8
class UMovieSceneInterrogatedPropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x1A8];                                     // 0x0040   (0x01A8)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection
/// Size: 0x0108 (264 bytes) (0x0000E8 - 0x000108) align n/a MaxSize: 0x0108
class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x00E8   (0x0008)  MISSED
	bool                                               bHoldWhileSequence;                                         // 0x00F0   (0x0001)  
	ELevelVisibility                                   Visibility;                                                 // 0x00F1   (0x0001)  
	unsigned char                                      UnknownData03_6[0x6];                                       // 0x00F2   (0x0006)  MISSED
	TArray<FName>                                      LevelNames;                                                 // 0x00F8   (0x0010)  

	/// Functions
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.SetVisibility
	constexpr static const FunctionPointer<UMovieSceneLevelVisibilitySection, void, const ELevelVisibility> SetVisibility = { 0x3c86a00, 0 }; 
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.SetLevelNames
	constexpr static const FunctionPointer<UMovieSceneLevelVisibilitySection, void, const TArray<FName>&> SetLevelNames = { 0x3c868e0, 1 }; 
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.GetVisibility
	constexpr static const FunctionPointer<UMovieSceneLevelVisibilitySection, ELevelVisibility> GetVisibility = { 0x3c86ad0, 2 }; 
	// Function /Script/MovieSceneTracks.MovieSceneLevelVisibilitySection.GetLevelNames
	constexpr static const FunctionPointer<UMovieSceneLevelVisibilitySection, TArray<FName>> GetLevelNames = { 0x3c869d0, 3 }; 
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilitySystem
/// Size: 0x01F8 (504 bytes) (0x000040 - 0x0001F8) align n/a MaxSize: 0x01F8
class UMovieSceneLevelVisibilitySystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x1B8];                                     // 0x0040   (0x01B8)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneLevelVisibilityTrack
/// Size: 0x0088 (136 bytes) (0x000078 - 0x000088) align n/a MaxSize: 0x0088
class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
{ 
public:
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0078   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieSceneMaterialParameterCollectionTrack
/// Size: 0x0098 (152 bytes) (0x000088 - 0x000098) align n/a MaxSize: 0x0098
class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0088   (0x0008)  MISSED
	class UMaterialParameterCollection*                MPC;                                                        // 0x0090   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneComponentMaterialTrack
/// Size: 0x0098 (152 bytes) (0x000088 - 0x000098) align n/a MaxSize: 0x0098
class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x0088   (0x0008)  MISSED
	int32_t                                            MaterialIndex;                                              // 0x0090   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x0094   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneObjectPropertySection
/// Size: 0x01A8 (424 bytes) (0x0000E8 - 0x0001A8) align n/a MaxSize: 0x01A8
class UMovieSceneObjectPropertySection : public UMovieSceneSection
{ 
public:
	FMovieSceneObjectPathChannel                       ObjectChannel;                                              // 0x00E8   (0x00C0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneObjectPropertyTrack
/// Size: 0x00B8 (184 bytes) (0x0000A8 - 0x0000B8) align n/a MaxSize: 0x00B8
class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x00A8   (0x0008)  MISSED
	class UClass*                                      PropertyClass;                                              // 0x00B0   (0x0008)  
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleParameterTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  Sections;                                                   // 0x0080   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleChannel
/// Size: 0x0098 (152 bytes) (0x000098 - 0x000098) align n/a MaxSize: 0x0098
struct FMovieSceneParticleChannel : FMovieSceneByteChannel
{ 
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleSection
/// Size: 0x0180 (384 bytes) (0x0000E8 - 0x000180) align n/a MaxSize: 0x0180
class UMovieSceneParticleSection : public UMovieSceneSection
{ 
public:
	FMovieSceneParticleChannel                         ParticleKeys;                                               // 0x00E8   (0x0098)  
};

/// Class /Script/MovieSceneTracks.MovieSceneParticleTrack
/// Size: 0x0090 (144 bytes) (0x000078 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  ParticleSections;                                           // 0x0080   (0x0010)  
};

/// Class /Script/MovieSceneTracks.MovieScenePiecewiseFloatBlenderSystem
/// Size: 0x0120 (288 bytes) (0x000060 - 0x000120) align n/a MaxSize: 0x0120
class UMovieScenePiecewiseFloatBlenderSystem : public UMovieSceneBlenderSystem
{ 
public:
	unsigned char                                      UnknownData01_1[0xC0];                                      // 0x0060   (0x00C0)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePrimitiveMaterialSection
/// Size: 0x01A8 (424 bytes) (0x0000E8 - 0x0001A8) align n/a MaxSize: 0x01A8
class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
{ 
public:
	FMovieSceneObjectPathChannel                       MaterialChannel;                                            // 0x00E8   (0x00C0)  
};

/// Class /Script/MovieSceneTracks.MovieScenePrimitiveMaterialTrack
/// Size: 0x00B8 (184 bytes) (0x0000A8 - 0x0000B8) align n/a MaxSize: 0x00B8
class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x00A8   (0x0008)  MISSED
	int32_t                                            MaterialIndex;                                              // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieScenePropertyInstantiatorSystem
/// Size: 0x0290 (656 bytes) (0x000040 - 0x000290) align n/a MaxSize: 0x0290
class UMovieScenePropertyInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x250];                                     // 0x0040   (0x0250)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneQuaternionInterpolationRotationSystem
/// Size: 0x0040 (64 bytes) (0x000040 - 0x000040) align n/a MaxSize: 0x0040
class UMovieSceneQuaternionInterpolationRotationSystem : public UMovieSceneEntitySystem
{ 
public:
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationParams
/// Size: 0x00D8 (216 bytes) (0x000000 - 0x0000D8) align n/a MaxSize: 0x00D8
struct FMovieSceneSkeletalAnimationParams
{ 
	class UAnimSequenceBase*                           Animation;                                                  // 0x0000   (0x0008)  
	FFrameNumber                                       FirstLoopStartFrameOffset;                                  // 0x0008   (0x0004)  
	FFrameNumber                                       StartFrameOffset;                                           // 0x000C   (0x0004)  
	FFrameNumber                                       EndFrameOffset;                                             // 0x0010   (0x0004)  
	float                                              PlayRate;                                                   // 0x0014   (0x0004)  
	bool                                               bReverse : 1;                                               // 0x0018:0 (0x0001)  
	unsigned char                                      UnknownData04_5[0x3];                                       // 0x0019   (0x0003)  MISSED
	FName                                              SlotName;                                                   // 0x001C   (0x0008)  
	unsigned char                                      UnknownData05_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FMovieSceneFloatChannel                            Weight;                                                     // 0x0028   (0x00A0)  
	bool                                               bSkipAnimNotifiers;                                         // 0x00C8   (0x0001)  
	bool                                               bForceCustomMode;                                           // 0x00C9   (0x0001)  
	unsigned char                                      UnknownData06_6[0x2];                                       // 0x00CA   (0x0002)  MISSED
	float                                              StartOffset;                                                // 0x00CC   (0x0004)  
	float                                              EndOffset;                                                  // 0x00D0   (0x0004)  
	unsigned char                                      UnknownData07_7[0x4];                                       // 0x00D4   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSection
/// Size: 0x0270 (624 bytes) (0x0000E8 - 0x000270) align n/a MaxSize: 0x0270
class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
{ 
public:
	FMovieSceneSkeletalAnimationParams                 Params;                                                     // 0x00E8   (0x00D8)  
	class UAnimSequence*                               AnimSequence;                                               // 0x01C0   (0x0008)  
	class UAnimSequenceBase*                           Animation;                                                  // 0x01C8   (0x0008)  
	float                                              StartOffset;                                                // 0x01D0   (0x0004)  
	float                                              EndOffset;                                                  // 0x01D4   (0x0004)  
	float                                              PlayRate;                                                   // 0x01D8   (0x0004)  
	bool                                               bReverse : 1;                                               // 0x01DC:0 (0x0001)  
	unsigned char                                      UnknownData03_5[0x3];                                       // 0x01DD   (0x0003)  MISSED
	FName                                              SlotName;                                                   // 0x01E0   (0x0008)  
	FVector                                            StartLocationOffset;                                        // 0x01E8   (0x000C)  
	FRotator                                           StartRotationOffset;                                        // 0x01F4   (0x000C)  
	bool                                               bMatchWithPrevious;                                         // 0x0200   (0x0001)  
	unsigned char                                      UnknownData04_6[0x3];                                       // 0x0201   (0x0003)  MISSED
	FName                                              MatchedBoneName;                                            // 0x0204   (0x0008)  
	FVector                                            MatchedLocationOffset;                                      // 0x020C   (0x000C)  
	FRotator                                           MatchedRotationOffset;                                      // 0x0218   (0x000C)  
	bool                                               bMatchTranslation;                                          // 0x0224   (0x0001)  
	bool                                               bMatchIncludeZHeight;                                       // 0x0225   (0x0001)  
	bool                                               bMatchRotationYaw;                                          // 0x0226   (0x0001)  
	bool                                               bMatchRotationPitch;                                        // 0x0227   (0x0001)  
	bool                                               bMatchRotationRoll;                                         // 0x0228   (0x0001)  
	unsigned char                                      UnknownData05_7[0x47];                                      // 0x0229   (0x0047)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimRootMotionTrackParams
/// Size: 0x0030 (48 bytes) (0x000000 - 0x000030) align n/a MaxSize: 0x0030
struct FMovieSceneSkeletalAnimRootMotionTrackParams
{ 
	unsigned char                                      UnknownData01_2[0x30];                                      // 0x0000   (0x0030)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneSkeletalAnimationTrack
/// Size: 0x00D0 (208 bytes) (0x000078 - 0x0000D0) align n/a MaxSize: 0x00D0
class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
{ 
public:
	unsigned char                                      UnknownData03_8[0x8];                                       // 0x0078   (0x0008)  MISSED
	TArray<class UMovieSceneSection*>                  AnimationSections;                                          // 0x0080   (0x0010)  
	bool                                               bUseLegacySectionIndexBlend;                                // 0x0090   (0x0001)  
	unsigned char                                      UnknownData04_6[0x7];                                       // 0x0091   (0x0007)  MISSED
	FMovieSceneSkeletalAnimRootMotionTrackParams       RootMotionParams;                                           // 0x0098   (0x0030)  
	bool                                               bBlendFirstChildOfRoot;                                     // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData05_7[0x7];                                       // 0x00C9   (0x0007)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneSlomoSection
/// Size: 0x0190 (400 bytes) (0x0000E8 - 0x000190) align n/a MaxSize: 0x0190
class UMovieSceneSlomoSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            FloatCurve;                                                 // 0x00E8   (0x00A0)  
	float                                              MinimumValue;                                               // 0x0188   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x018C   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneSlomoTrack
/// Size: 0x00B0 (176 bytes) (0x0000A8 - 0x0000B0) align n/a MaxSize: 0x00B0
class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x00A8   (0x0008)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneStringChannel
/// Size: 0x00A0 (160 bytes) (0x000008 - 0x0000A0) align n/a MaxSize: 0x00A0
struct FMovieSceneStringChannel : FMovieSceneChannel
{ 
	TArray<FFrameNumber>                               Times;                                                      // 0x0008   (0x0010)  
	TArray<FString>                                    Values;                                                     // 0x0018   (0x0010)  
	FString                                            DefaultValue;                                               // 0x0028   (0x0010)  
	bool                                               bHasDefaultValue;                                           // 0x0038   (0x0001)  
	unsigned char                                      UnknownData01_7[0x67];                                      // 0x0039   (0x0067)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneStringSection
/// Size: 0x0188 (392 bytes) (0x0000E8 - 0x000188) align n/a MaxSize: 0x0188
class UMovieSceneStringSection : public UMovieSceneSection
{ 
public:
	FMovieSceneStringChannel                           StringCurve;                                                // 0x00E8   (0x00A0)  
};

/// Class /Script/MovieSceneTracks.MovieSceneStringTrack
/// Size: 0x00B0 (176 bytes) (0x0000A8 - 0x0000B0) align n/a MaxSize: 0x00B0
class UMovieSceneStringTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData01_1[0x8];                                       // 0x00A8   (0x0008)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformOriginSystem
/// Size: 0x0078 (120 bytes) (0x000040 - 0x000078) align n/a MaxSize: 0x0078
class UMovieSceneTransformOriginSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x38];                                      // 0x0040   (0x0038)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneTransformTrack
/// Size: 0x00A8 (168 bytes) (0x0000A8 - 0x0000A8) align n/a MaxSize: 0x00A8
class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneVectorSection
/// Size: 0x0370 (880 bytes) (0x0000E8 - 0x000370) align n/a MaxSize: 0x0370
class UMovieSceneVectorSection : public UMovieSceneSection
{ 
public:
	FMovieSceneFloatChannel                            Curves[4];                                                  // 0x00E8   (0x0280)  
	int32_t                                            ChannelsUsed;                                               // 0x0368   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x036C   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneVectorTrack
/// Size: 0x00B8 (184 bytes) (0x0000A8 - 0x0000B8) align n/a MaxSize: 0x00B8
class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
{ 
public:
	unsigned char                                      UnknownData02_8[0x8];                                       // 0x00A8   (0x0008)  MISSED
	int32_t                                            NumChannelsUsed;                                            // 0x00B0   (0x0004)  
	unsigned char                                      UnknownData03_7[0x4];                                       // 0x00B4   (0x0004)  MISSED
};

/// Class /Script/MovieSceneTracks.MovieSceneVisibilityTrack
/// Size: 0x00B0 (176 bytes) (0x0000B0 - 0x0000B0) align n/a MaxSize: 0x00B0
class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
{ 
public:
};

/// Class /Script/MovieSceneTracks.MovieSceneHierarchicalEasingInstantiatorSystem
/// Size: 0x0090 (144 bytes) (0x000040 - 0x000090) align n/a MaxSize: 0x0090
class UMovieSceneHierarchicalEasingInstantiatorSystem : public UMovieSceneEntityInstantiatorSystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x50];                                      // 0x0040   (0x0050)  MISSED
};

/// Class /Script/MovieSceneTracks.WeightAndEasingEvaluatorSystem
/// Size: 0x0078 (120 bytes) (0x000040 - 0x000078) align n/a MaxSize: 0x0078
class UWeightAndEasingEvaluatorSystem : public UMovieSceneEntitySystem
{ 
public:
	unsigned char                                      UnknownData01_1[0x38];                                      // 0x0040   (0x0038)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DPathSectionTemplate
/// Size: 0x00E0 (224 bytes) (0x000020 - 0x0000E0) align n/a MaxSize: 0x00E0
struct FMovieScene3DPathSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneObjectBindingID                         PathBindingID;                                              // 0x0020   (0x0018)  
	FMovieSceneFloatChannel                            TimingCurve;                                                // 0x0038   (0x00A0)  
	MovieScene3DPathSection_Axis                       FrontAxisEnum;                                              // 0x00D8   (0x0001)  
	MovieScene3DPathSection_Axis                       UpAxisEnum;                                                 // 0x00D9   (0x0001)  
	unsigned char                                      UnknownData02_6[0x2];                                       // 0x00DA   (0x0002)  MISSED
	bool                                               bFollow : 1;                                                // 0x00DC:0 (0x0001)  
	bool                                               bReverse : 1;                                               // 0x00DC:1 (0x0001)  
	bool                                               bForceUpright : 1;                                          // 0x00DC:2 (0x0001)  
	unsigned char                                      UnknownData03_7[0x3];                                       // 0x00DD   (0x0003)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DTransformKeyStruct
/// Size: 0x0048 (72 bytes) (0x000008 - 0x000048) align n/a MaxSize: 0x0048
struct FMovieScene3DTransformKeyStruct : FMovieSceneKeyStruct
{ 
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	FRotator                                           Rotation;                                                   // 0x0014   (0x000C)  
	FVector                                            Scale;                                                      // 0x0020   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x002C   (0x0004)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0030   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DScaleKeyStruct
/// Size: 0x0030 (48 bytes) (0x000008 - 0x000030) align n/a MaxSize: 0x0030
struct FMovieScene3DScaleKeyStruct : FMovieSceneKeyStruct
{ 
	FVector                                            Scale;                                                      // 0x0008   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x0014   (0x0004)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0018   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DRotationKeyStruct
/// Size: 0x0030 (48 bytes) (0x000008 - 0x000030) align n/a MaxSize: 0x0030
struct FMovieScene3DRotationKeyStruct : FMovieSceneKeyStruct
{ 
	FRotator                                           Rotation;                                                   // 0x0008   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x0014   (0x0004)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0018   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DLocationKeyStruct
/// Size: 0x0030 (48 bytes) (0x000008 - 0x000030) align n/a MaxSize: 0x0030
struct FMovieScene3DLocationKeyStruct : FMovieSceneKeyStruct
{ 
	FVector                                            Location;                                                   // 0x0008   (0x000C)  
	FFrameNumber                                       Time;                                                       // 0x0014   (0x0004)  
	unsigned char                                      UnknownData01_7[0x18];                                      // 0x0018   (0x0018)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieScene3DTransformTemplateData
/// Size: 0x0650 (1616 bytes) (0x000000 - 0x000650) align n/a MaxSize: 0x0650
struct FMovieScene3DTransformTemplateData
{ 
	FMovieSceneFloatChannel                            TranslationCurve[3];                                        // 0x0000   (0x01E0)  
	FMovieSceneFloatChannel                            RotationCurve[3];                                           // 0x01E0   (0x01E0)  
	FMovieSceneFloatChannel                            ScaleCurve[3];                                              // 0x03C0   (0x01E0)  
	FMovieSceneFloatChannel                            ManualWeight;                                               // 0x05A0   (0x00A0)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x0640   (0x0001)  
	unsigned char                                      UnknownData02_6[0x3];                                       // 0x0641   (0x0003)  MISSED
	FMovieSceneTransformMask                           Mask;                                                       // 0x0644   (0x0004)  
	bool                                               bUseQuaternionInterpolation;                                // 0x0648   (0x0001)  
	unsigned char                                      UnknownData03_7[0x7];                                       // 0x0649   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneActorReferenceSectionTemplate
/// Size: 0x00E8 (232 bytes) (0x000020 - 0x0000E8) align n/a MaxSize: 0x00E8
struct FMovieSceneActorReferenceSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieScenePropertySectionData                     PropertyData;                                               // 0x0020   (0x0018)  
	FMovieSceneActorReferenceData                      ActorReferenceData;                                         // 0x0038   (0x00B0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneAudioSectionTemplate
/// Size: 0x0028 (40 bytes) (0x000020 - 0x000028) align n/a MaxSize: 0x0028
struct FMovieSceneAudioSectionTemplate : FMovieSceneEvalTemplate
{ 
	class UMovieSceneAudioSection*                     AudioSection;                                               // 0x0020   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneAdditiveCameraAnimationTemplate
/// Size: 0x0020 (32 bytes) (0x000020 - 0x000020) align n/a MaxSize: 0x0020
struct FMovieSceneAdditiveCameraAnimationTemplate : FMovieSceneEvalTemplate
{ 
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSectionTemplate
/// Size: 0x0048 (72 bytes) (0x000020 - 0x000048) align n/a MaxSize: 0x0048
struct FMovieSceneCameraShakeSectionTemplate : FMovieSceneAdditiveCameraAnimationTemplate
{ 
	FMovieSceneCameraShakeSectionData                  SourceData;                                                 // 0x0020   (0x0020)  
	FFrameNumber                                       SectionStartTime;                                           // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraAnimSectionTemplate
/// Size: 0x0048 (72 bytes) (0x000020 - 0x000048) align n/a MaxSize: 0x0048
struct FMovieSceneCameraAnimSectionTemplate : FMovieSceneAdditiveCameraAnimationTemplate
{ 
	FMovieSceneCameraAnimSectionData                   SourceData;                                                 // 0x0020   (0x0020)  
	FFrameNumber                                       SectionStartTime;                                           // 0x0040   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0044   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceShakeSectionTemplate
/// Size: 0x0048 (72 bytes) (0x000020 - 0x000048) align n/a MaxSize: 0x0048
struct FMovieSceneCameraShakeSourceShakeSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneCameraShakeSectionData                  SourceData;                                                 // 0x0020   (0x0020)  
	FFrameNumber                                       SectionStartTime;                                           // 0x0040   (0x0004)  
	FFrameNumber                                       SectionEndTime;                                             // 0x0044   (0x0004)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneCameraShakeSourceTriggerSectionTemplate
/// Size: 0x0040 (64 bytes) (0x000020 - 0x000040) align n/a MaxSize: 0x0040
struct FMovieSceneCameraShakeSourceTriggerSectionTemplate : FMovieSceneEvalTemplate
{ 
	TArray<FFrameNumber>                               TriggerTimes;                                               // 0x0020   (0x0010)  
	TArray<FMovieSceneCameraShakeSourceTrigger>        TriggerValues;                                              // 0x0030   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneColorKeyStruct
/// Size: 0x0038 (56 bytes) (0x000008 - 0x000038) align n/a MaxSize: 0x0038
struct FMovieSceneColorKeyStruct : FMovieSceneKeyStruct
{ 
	FLinearColor                                       Color;                                                      // 0x0008   (0x0010)  
	FFrameNumber                                       Time;                                                       // 0x0018   (0x0004)  
	unsigned char                                      UnknownData01_7[0x1C];                                      // 0x001C   (0x001C)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneColorSectionTemplate
/// Size: 0x02C0 (704 bytes) (0x000038 - 0x0002C0) align n/a MaxSize: 0x02C0
struct FMovieSceneColorSectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneFloatChannel                            Curves[4];                                                  // 0x0038   (0x0280)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x02B8   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x02B9   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventPayloadVariable
/// Size: 0x0010 (16 bytes) (0x000000 - 0x000010) align n/a MaxSize: 0x0010
struct FMovieSceneEventPayloadVariable
{ 
	FString                                            Value;                                                      // 0x0000   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventTriggerData
/// Size: 0x0048 (72 bytes) (0x000000 - 0x000048) align n/a MaxSize: 0x0048
struct FMovieSceneEventTriggerData
{ 
	FMovieSceneEventPtrs                               Ptrs;                                                       // 0x0000   (0x0028)  
	FGuid                                              ObjectBindingID;                                            // 0x0028   (0x0010)  
	unsigned char                                      UnknownData01_7[0x10];                                      // 0x0038   (0x0010)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEventSectionTemplate
/// Size: 0x00B0 (176 bytes) (0x000020 - 0x0000B0) align n/a MaxSize: 0x00B0
struct FMovieSceneEventSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneEventSectionData                        EventData;                                                  // 0x0020   (0x0088)  
	bool                                               bFireEventsWhenForwards : 1;                                // 0x00A8:0 (0x0001)  
	bool                                               bFireEventsWhenBackwards : 1;                               // 0x00A8:1 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00A9   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneFadeSectionTemplate
/// Size: 0x00D8 (216 bytes) (0x000020 - 0x0000D8) align n/a MaxSize: 0x00D8
struct FMovieSceneFadeSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneFloatChannel                            FadeCurve;                                                  // 0x0020   (0x00A0)  
	FLinearColor                                       FadeColor;                                                  // 0x00C0   (0x0010)  
	bool                                               bFadeAudio : 1;                                             // 0x00D0:0 (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00D1   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneMaterialParameterCollectionTemplate
/// Size: 0x0088 (136 bytes) (0x000080 - 0x000088) align n/a MaxSize: 0x0088
struct FMovieSceneMaterialParameterCollectionTemplate : FMovieSceneParameterSectionTemplate
{ 
	class UMaterialParameterCollection*                MPC;                                                        // 0x0080   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneObjectPropertyTemplate
/// Size: 0x00F8 (248 bytes) (0x000038 - 0x0000F8) align n/a MaxSize: 0x00F8
struct FMovieSceneObjectPropertyTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneObjectPathChannel                       ObjectChannel;                                              // 0x0038   (0x00C0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneComponentMaterialSectionTemplate
/// Size: 0x0088 (136 bytes) (0x000080 - 0x000088) align n/a MaxSize: 0x0088
struct FMovieSceneComponentMaterialSectionTemplate : FMovieSceneParameterSectionTemplate
{ 
	int32_t                                            MaterialIndex;                                              // 0x0080   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0084   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleParameterSectionTemplate
/// Size: 0x0080 (128 bytes) (0x000080 - 0x000080) align n/a MaxSize: 0x0080
struct FMovieSceneParticleParameterSectionTemplate : FMovieSceneParameterSectionTemplate
{ 
};

/// Struct /Script/MovieSceneTracks.MovieSceneParticleSectionTemplate
/// Size: 0x00B8 (184 bytes) (0x000020 - 0x0000B8) align n/a MaxSize: 0x00B8
struct FMovieSceneParticleSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneParticleChannel                         ParticleKeys;                                               // 0x0020   (0x0098)  
};

/// Struct /Script/MovieSceneTracks.MovieScenePrimitiveMaterialTemplate
/// Size: 0x00E8 (232 bytes) (0x000020 - 0x0000E8) align n/a MaxSize: 0x00E8
struct FMovieScenePrimitiveMaterialTemplate : FMovieSceneEvalTemplate
{ 
	int32_t                                            MaterialIndex;                                              // 0x0020   (0x0004)  
	unsigned char                                      UnknownData01_6[0x4];                                       // 0x0024   (0x0004)  MISSED
	FMovieSceneObjectPathChannel                       MaterialChannel;                                            // 0x0028   (0x00C0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorPropertySectionTemplate
/// Size: 0x02C0 (704 bytes) (0x000038 - 0x0002C0) align n/a MaxSize: 0x02C0
struct FMovieSceneVectorPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneFloatChannel                            ComponentCurves[4];                                         // 0x0038   (0x0280)  
	int32_t                                            NumChannelsUsed;                                            // 0x02B8   (0x0004)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x02BC   (0x0001)  
	unsigned char                                      UnknownData01_7[0x3];                                       // 0x02BD   (0x0003)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneStringPropertySectionTemplate
/// Size: 0x00D8 (216 bytes) (0x000038 - 0x0000D8) align n/a MaxSize: 0x00D8
struct FMovieSceneStringPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneStringChannel                           StringCurve;                                                // 0x0038   (0x00A0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneIntegerPropertySectionTemplate
/// Size: 0x00D0 (208 bytes) (0x000038 - 0x0000D0) align n/a MaxSize: 0x00D0
struct FMovieSceneIntegerPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneIntegerChannel                          IntegerCurve;                                               // 0x0038   (0x0090)  
	EMovieSceneBlendType                               BlendType;                                                  // 0x00C8   (0x0001)  
	unsigned char                                      UnknownData01_7[0x7];                                       // 0x00C9   (0x0007)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneEnumPropertySectionTemplate
/// Size: 0x00D0 (208 bytes) (0x000038 - 0x0000D0) align n/a MaxSize: 0x00D0
struct FMovieSceneEnumPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneByteChannel                             EnumCurve;                                                  // 0x0038   (0x0098)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneBytePropertySectionTemplate
/// Size: 0x00D0 (208 bytes) (0x000038 - 0x0000D0) align n/a MaxSize: 0x00D0
struct FMovieSceneBytePropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneByteChannel                             ByteCurve;                                                  // 0x0038   (0x0098)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneBoolPropertySectionTemplate
/// Size: 0x00C8 (200 bytes) (0x000038 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FMovieSceneBoolPropertySectionTemplate : FMovieScenePropertySectionTemplate
{ 
	FMovieSceneBoolChannel                             BoolCurve;                                                  // 0x0038   (0x0090)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplateParameters
/// Size: 0x00E0 (224 bytes) (0x0000D8 - 0x0000E0) align n/a MaxSize: 0x00E0
struct FMovieSceneSkeletalAnimationSectionTemplateParameters : FMovieSceneSkeletalAnimationParams
{ 
	FFrameNumber                                       SectionStartTime;                                           // 0x00D8   (0x0004)  
	FFrameNumber                                       SectionEndTime;                                             // 0x00DC   (0x0004)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneSkeletalAnimationSectionTemplate
/// Size: 0x0100 (256 bytes) (0x000020 - 0x000100) align n/a MaxSize: 0x0100
struct FMovieSceneSkeletalAnimationSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneSkeletalAnimationSectionTemplateParameters Params;                                                  // 0x0020   (0x00E0)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneSlomoSectionTemplate
/// Size: 0x00C8 (200 bytes) (0x000020 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FMovieSceneSlomoSectionTemplate : FMovieSceneEvalTemplate
{ 
	FMovieSceneFloatChannel                            SlomoCurve;                                                 // 0x0020   (0x00A0)  
	float                                              MinimumValue;                                               // 0x00C0   (0x0004)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x00C4   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.LevelVisibilityComponentData
/// Size: 0x0008 (8 bytes) (0x000000 - 0x000008) align n/a MaxSize: 0x0008
struct FLevelVisibilityComponentData
{ 
	class UMovieSceneLevelVisibilitySection*           Section;                                                    // 0x0000   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorKeyStructBase
/// Size: 0x0028 (40 bytes) (0x000008 - 0x000028) align n/a MaxSize: 0x0028
struct FMovieSceneVectorKeyStructBase : FMovieSceneKeyStruct
{ 
	FFrameNumber                                       Time;                                                       // 0x0008   (0x0004)  
	unsigned char                                      UnknownData01_7[0x1C];                                      // 0x000C   (0x001C)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneVector4KeyStruct
/// Size: 0x0040 (64 bytes) (0x000028 - 0x000040) align n/a MaxSize: 0x0040
struct FMovieSceneVector4KeyStruct : FMovieSceneVectorKeyStructBase
{ 
	unsigned char                                      UnknownData01_8[0x8];                                       // 0x0028   (0x0008)  MISSED
	FVector4                                           Vector;                                                     // 0x0030   (0x0010)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVectorKeyStruct
/// Size: 0x0038 (56 bytes) (0x000028 - 0x000038) align n/a MaxSize: 0x0038
struct FMovieSceneVectorKeyStruct : FMovieSceneVectorKeyStructBase
{ 
	FVector                                            Vector;                                                     // 0x0028   (0x000C)  
	unsigned char                                      UnknownData01_7[0x4];                                       // 0x0034   (0x0004)  MISSED
};

/// Struct /Script/MovieSceneTracks.MovieSceneVector2DKeyStruct
/// Size: 0x0030 (48 bytes) (0x000028 - 0x000030) align n/a MaxSize: 0x0030
struct FMovieSceneVector2DKeyStruct : FMovieSceneVectorKeyStructBase
{ 
	FVector2D                                          Vector;                                                     // 0x0028   (0x0008)  
};

/// Struct /Script/MovieSceneTracks.MovieSceneVisibilitySectionTemplate
/// Size: 0x00C8 (200 bytes) (0x0000C8 - 0x0000C8) align n/a MaxSize: 0x00C8
struct FMovieSceneVisibilitySectionTemplate : FMovieSceneBoolPropertySectionTemplate
{ 
};

#pragma pack(pop)


static_assert(sizeof(FTickFunction) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FActorComponentTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSimpleMemberReference) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UActorComponent) == 0x00C0); // 192 bytes (0x000028 - 0x0000C0)
static_assert(sizeof(USceneComponent) == 0x0260); // 608 bytes (0x0000C0 - 0x000260)
static_assert(sizeof(FKeyHandleMap) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FIndexedCurve) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FRealCurve) == 0x0070); // 112 bytes (0x000068 - 0x000070)
static_assert(sizeof(FRichCurveKey) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FRichCurve) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(FRuntimeFloatCurve) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FBaseAttenuationSettings) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(FAttenuationSubmixSendSettings) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FSoundAttenuationPluginSettings) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSoundAttenuationSettings) == 0x03A0); // 928 bytes (0x0000B0 - 0x0003A0)
static_assert(sizeof(FSoundSubmixSendInfo) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(FSoundSourceBusSendInfo) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(USynthComponent) == 0x0730); // 1840 bytes (0x000260 - 0x000730)
static_assert(sizeof(UAudioGenerator) == 0x00A8); // 168 bytes (0x000028 - 0x0000A8)
static_assert(sizeof(UBlueprintFunctionLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAudioMixerBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UQuartzClockHandle) == 0x0190); // 400 bytes (0x000028 - 0x000190)
static_assert(sizeof(USoundEffectPreset) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(USoundEffectSubmixPreset) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(FSubmixEffectDynamicProcessorFilterSettings) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSubmixEffectDynamicsProcessorSettings) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(USubmixEffectDynamicsProcessorPreset) == 0x0130); // 304 bytes (0x000068 - 0x000130)
static_assert(sizeof(FSubmixEffectEQBand) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSubmixEffectSubmixEQSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USubmixEffectSubmixEQPreset) == 0x00B0); // 176 bytes (0x000068 - 0x0000B0)
static_assert(sizeof(FSubmixEffectReverbSettings) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(USubmixEffectReverbPreset) == 0x0110); // 272 bytes (0x000068 - 0x000110)
static_assert(sizeof(USubsystem) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UWorldSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UQuartzSubsystem) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(FSoundConcurrencySettings) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSoundModulationDestinationSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSoundModulationDefaultSettings) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSoundModulationDefaultRoutingSettings) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(USoundBase) == 0x01B8); // 440 bytes (0x000028 - 0x0001B8)
static_assert(sizeof(FSoundWaveSpectralDataEntry) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSoundWaveSpectralTimeData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSoundWaveEnvelopeTimeData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSubtitleCue) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USoundWave) == 0x0378); // 888 bytes (0x0001B8 - 0x000378)
static_assert(sizeof(USoundWaveProcedural) == 0x03D0); // 976 bytes (0x000378 - 0x0003D0)
static_assert(sizeof(USynthSound) == 0x03F0); // 1008 bytes (0x0003D0 - 0x0003F0)
static_assert(sizeof(UDataAsset) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UGameInstance) == 0x01A8); // 424 bytes (0x000028 - 0x0001A8)
static_assert(sizeof(FLightingChannels) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCustomPrimitiveData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCollisionResponseContainer) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FResponseChannel) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FCollisionResponse) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FWalkableSlopeOverride) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBodyInstance) == 0x01A8); // 424 bytes (0x000018 - 0x0001A8)
static_assert(sizeof(UPrimitiveComponent) == 0x0538); // 1336 bytes (0x000260 - 0x000538)
static_assert(sizeof(UMeshComponent) == 0x0560); // 1376 bytes (0x000538 - 0x000560)
static_assert(sizeof(FVertexOffsetUsage) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FSkelMeshComponentLODInfo) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(USkinnedMeshComponent) == 0x0880); // 2176 bytes (0x000560 - 0x000880)
static_assert(sizeof(FSingleAnimationPlayData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USkeletalMeshComponent) == 0x12F0); // 4848 bytes (0x000880 - 0x0012F0)
static_assert(sizeof(FAnimNotifyEventReference) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimNotifyArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimNotifyQueue) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FAnimLinkableElement) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FAnimNotifyEvent) == 0x00B8); // 184 bytes (0x000030 - 0x0000B8)
static_assert(sizeof(UAnimInstance) == 0x02C8); // 712 bytes (0x000028 - 0x0002C8)
static_assert(sizeof(UTimecodeProvider) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FActorTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FRepMovement) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(FVector_NetQuantize100) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FRepAttachment) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(AActor) == 0x02C8); // 712 bytes (0x000028 - 0x0002C8)
static_assert(sizeof(UFXSystemComponent) == 0x0578); // 1400 bytes (0x000538 - 0x000578)
static_assert(sizeof(UFXSystemAsset) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UAnimNotify) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UAnimNotifyState) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FBPComponentClassOverride) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBlueprintComponentChangedPropertyInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBlueprintCookedComponentInstancingData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UBlueprintGeneratedClass) == 0x0328); // 808 bytes (0x000230 - 0x000328)
static_assert(sizeof(UStreamableRenderAsset) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(FMeshUVChannelInfo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSkeletalMaterial) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FBoneMirrorInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPerPlatformFloat) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FSkeletalMeshBuildSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSkeletalMeshOptimizationSettings) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FBoneReference) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSkeletalMeshLODInfo) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FPerPlatformInt) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FPerPlatformBool) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FStablePhysicsBoneInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FSkeletalMeshSamplingRegionMaterialFilter) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSkeletalMeshSamplingRegionBoneFilter) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSkeletalMeshSamplingRegion) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSkeletalMeshSamplingLODBuiltData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FSkeletalMeshSamplingRegionBuiltData) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FSkeletalMeshSamplingBuiltData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSkeletalMeshSamplingInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSkinWeightProfileInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USkeletalMesh) == 0x03C0); // 960 bytes (0x000068 - 0x0003C0)
static_assert(sizeof(UTexture) == 0x00E0); // 224 bytes (0x000068 - 0x0000E0)
static_assert(sizeof(UTexture2DDynamic) == 0x00F8); // 248 bytes (0x0000E0 - 0x0000F8)
static_assert(sizeof(UAssetImportData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FParticleSysParam) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(UParticleSystemComponent) == 0x07E0); // 2016 bytes (0x000578 - 0x0007E0)
static_assert(sizeof(UBlueprintAsyncActionBase) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UOnlineBlueprintCallProxyBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UPlayer) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(FUniqueNetIdRepl) == 0x0028); // 40 bytes (0x000001 - 0x000028)
static_assert(sizeof(UNetConnection) == 0x1AF0); // 6896 bytes (0x000048 - 0x001AF0)
static_assert(sizeof(FChannelDefinition) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UNetDriver) == 0x0748); // 1864 bytes (0x000028 - 0x000748)
static_assert(sizeof(UOnlineEngineInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UOnlineSession) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMaterialExpression) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UAnimBoneCompressionCodec) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UAnimCurveCompressionCodec) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(APawn) == 0x0328); // 808 bytes (0x0002C8 - 0x000328)
static_assert(sizeof(FBasedMovementInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FRootMotionSourceSettings) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FVector_NetQuantize10) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FRootMotionSourceGroup) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FRootMotionMovementParams) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FRepRootMotionMontage) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FSimulatedRootMotionReplicatedMove) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(ACharacter) == 0x0558); // 1368 bytes (0x000328 - 0x000558)
static_assert(sizeof(AController) == 0x0340); // 832 bytes (0x0002C8 - 0x000340)
static_assert(sizeof(FActiveForceFeedbackEffect) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(APlayerController) == 0x0668); // 1640 bytes (0x000340 - 0x000668)
static_assert(sizeof(AInfo) == 0x02C8); // 712 bytes (0x0002C8 - 0x0002C8)
static_assert(sizeof(AGameModeBase) == 0x0368); // 872 bytes (0x0002C8 - 0x000368)
static_assert(sizeof(FDebugTextInfo) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(AHUD) == 0x03B8); // 952 bytes (0x0002C8 - 0x0003B8)
static_assert(sizeof(UMaterialExpressionTextureBase) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(FExpressionInput) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UMaterialExpressionTextureSample) == 0x0060); // 96 bytes (0x000048 - 0x000060)
static_assert(sizeof(UMaterialExpressionTextureSampleParameter) == 0x0080); // 128 bytes (0x000060 - 0x000080)
static_assert(sizeof(UMaterialExpressionTextureSampleParameter2D) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(FSplineCurves) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(USplineComponent) == 0x0630); // 1584 bytes (0x000538 - 0x000630)
static_assert(sizeof(FAudioComponentParam) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UAudioComponent) == 0x08E8); // 2280 bytes (0x000260 - 0x0008E8)
static_assert(sizeof(UAssetUserData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USaveGame) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AGameMode) == 0x03B0); // 944 bytes (0x000368 - 0x0003B0)
static_assert(sizeof(AGameStateBase) == 0x0318); // 792 bytes (0x0002C8 - 0x000318)
static_assert(sizeof(AGameState) == 0x0338); // 824 bytes (0x000318 - 0x000338)
static_assert(sizeof(UApplicationLifecycleComponent) == 0x0150); // 336 bytes (0x0000C0 - 0x000150)
static_assert(sizeof(UCameraShakeBase) == 0x00A8); // 168 bytes (0x000028 - 0x0000A8)
static_assert(sizeof(UMovementComponent) == 0x0100); // 256 bytes (0x0000C0 - 0x000100)
static_assert(sizeof(FMovementProperties) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FNavAgentProperties) == 0x0030); // 48 bytes (0x000001 - 0x000030)
static_assert(sizeof(UNavMovementComponent) == 0x0150); // 336 bytes (0x000100 - 0x000150)
static_assert(sizeof(UPawnMovementComponent) == 0x0158); // 344 bytes (0x000150 - 0x000158)
static_assert(sizeof(FVector_NetQuantize) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FVector_NetQuantizeNormal) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FHitResult) == 0x008C); // 140 bytes (0x000000 - 0x00008C)
static_assert(sizeof(FFindFloorResult) == 0x00A4); // 164 bytes (0x000000 - 0x0000A4)
static_assert(sizeof(FNavAvoidanceMask) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FCharacterMovementComponentPostPhysicsTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UCharacterMovementComponent) == 0x0B50); // 2896 bytes (0x000158 - 0x000B50)
static_assert(sizeof(UDynamicSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UEngineSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(USoundEffectSourcePreset) == 0x0068); // 104 bytes (0x000068 - 0x000068)
static_assert(sizeof(FGeomSelection) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(ABrush) == 0x0300); // 768 bytes (0x0002C8 - 0x000300)
static_assert(sizeof(AVolume) == 0x0318); // 792 bytes (0x000300 - 0x000318)
static_assert(sizeof(UShapeComponent) == 0x0550); // 1360 bytes (0x000538 - 0x000550)
static_assert(sizeof(UBoxComponent) == 0x0568); // 1384 bytes (0x000550 - 0x000568)
static_assert(sizeof(FWeightedBlendable) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FWeightedBlendables) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPostProcessSettings) == 0x05A0); // 1440 bytes (0x000000 - 0x0005A0)
static_assert(sizeof(UCameraComponent) == 0x08C0); // 2240 bytes (0x000260 - 0x0008C0)
static_assert(sizeof(ACameraActor) == 0x08A0); // 2208 bytes (0x0002C8 - 0x0008A0)
static_assert(sizeof(UCheatManager) == 0x0078); // 120 bytes (0x000028 - 0x000078)
static_assert(sizeof(UCommandlet) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(USplineMetadata) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UDPICustomScalingRule) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UEdGraphNode) == 0x0098); // 152 bytes (0x000028 - 0x000098)
static_assert(sizeof(ANavigationObjectBase) == 0x02F0); // 752 bytes (0x0002C8 - 0x0002F0)
static_assert(sizeof(FForceFeedbackChannelDetails) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(UForceFeedbackEffect) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UGameUserSettings) == 0x0128); // 296 bytes (0x000028 - 0x000128)
static_assert(sizeof(UEdGraph) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(ATriggerVolume) == 0x0318); // 792 bytes (0x000318 - 0x000318)
static_assert(sizeof(APlayerState) == 0x03C8); // 968 bytes (0x0002C8 - 0x0003C8)
static_assert(sizeof(ADefaultPawn) == 0x0350); // 848 bytes (0x000328 - 0x000350)
static_assert(sizeof(UFloatingPawnMovement) == 0x0170); // 368 bytes (0x000158 - 0x000170)
static_assert(sizeof(USpectatorPawnMovement) == 0x0178); // 376 bytes (0x000170 - 0x000178)
static_assert(sizeof(FKeyBind) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UPlayerInput) == 0x03A8); // 936 bytes (0x000028 - 0x0003A8)
static_assert(sizeof(URadialForceComponent) == 0x0290); // 656 bytes (0x000260 - 0x000290)
static_assert(sizeof(UCapsuleComponent) == 0x0560); // 1376 bytes (0x000550 - 0x000560)
static_assert(sizeof(FEngineShowFlagsSetting) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USceneCaptureComponent) == 0x0320); // 800 bytes (0x000260 - 0x000320)
static_assert(sizeof(USceneCaptureComponent2D) == 0x0970); // 2416 bytes (0x000320 - 0x000970)
static_assert(sizeof(AStaticMeshActor) == 0x02D8); // 728 bytes (0x0002C8 - 0x0002D8)
static_assert(sizeof(AAmbientSound) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(USoundNode) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(USpringArmComponent) == 0x02F0); // 752 bytes (0x000260 - 0x0002F0)
static_assert(sizeof(FStaticMeshComponentLODInfo) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FStreamingTextureBuildInfo) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FLightmassPrimitiveSettings) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UStaticMeshComponent) == 0x05E0); // 1504 bytes (0x000560 - 0x0005E0)
static_assert(sizeof(APhysicsVolume) == 0x0508); // 1288 bytes (0x000318 - 0x000508)
static_assert(sizeof(ASkyLight) == 0x02D8); // 728 bytes (0x0002C8 - 0x0002D8)
static_assert(sizeof(UTextureCube) == 0x0138); // 312 bytes (0x0000E0 - 0x000138)
static_assert(sizeof(FInstancedStaticMeshInstanceData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FInstancedStaticMeshMappingInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UInstancedStaticMeshComponent) == 0x0690); // 1680 bytes (0x0005E0 - 0x000690)
static_assert(sizeof(UHierarchicalInstancedStaticMeshComponent) == 0x0778); // 1912 bytes (0x000690 - 0x000778)
static_assert(sizeof(FLightmassMaterialInterfaceSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMaterialTextureInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMaterialInterface) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(FMaterialParameterInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FScalarParameterValue) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FVectorParameterValue) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FTextureParameterValue) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FRuntimeVirtualTextureParameterValue) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FFontParameterValue) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMaterialInstanceBasePropertyOverrides) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FStaticParameterBase) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FStaticSwitchParameter) == 0x0028); // 40 bytes (0x000024 - 0x000028)
static_assert(sizeof(FStaticComponentMaskParameter) == 0x0028); // 40 bytes (0x000024 - 0x000028)
static_assert(sizeof(FStaticTerrainLayerWeightParameter) == 0x002C); // 44 bytes (0x000024 - 0x00002C)
static_assert(sizeof(FMaterialLayersFunctions) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FStaticMaterialLayersParameter) == 0x0068); // 104 bytes (0x000024 - 0x000068)
static_assert(sizeof(FStaticParameterSet) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FMaterialCachedParameterEntry) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FMaterialCachedParameters) == 0x01A0); // 416 bytes (0x000000 - 0x0001A0)
static_assert(sizeof(UMaterialInstance) == 0x0360); // 864 bytes (0x000088 - 0x000360)
static_assert(sizeof(UMaterialInstanceConstant) == 0x0368); // 872 bytes (0x000360 - 0x000368)
static_assert(sizeof(UMaterialExpressionCustomOutput) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UEngineCustomTimeStep) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UDynamicBlueprintBinding) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBlueprintCore) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UBlueprint) == 0x00A0); // 160 bytes (0x000050 - 0x0000A0)
static_assert(sizeof(UModel) == 0x0258); // 600 bytes (0x000028 - 0x000258)
static_assert(sizeof(UChannel) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UActorChannel) == 0x0298); // 664 bytes (0x000070 - 0x000298)
static_assert(sizeof(UAnimationAsset) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(FInterpolationParameter) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPerBoneInterpolation) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FBlendSample) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FEditorElement) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBlendParameter) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UBlendSpaceBase) == 0x0148); // 328 bytes (0x000080 - 0x000148)
static_assert(sizeof(UBlendSpace) == 0x0150); // 336 bytes (0x000148 - 0x000150)
static_assert(sizeof(UAimOffsetBlendSpace) == 0x0150); // 336 bytes (0x000150 - 0x000150)
static_assert(sizeof(UBlendSpace1D) == 0x0150); // 336 bytes (0x000148 - 0x000150)
static_assert(sizeof(UAimOffsetBlendSpace1D) == 0x0150); // 336 bytes (0x000150 - 0x000150)
static_assert(sizeof(UAISystemBase) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(FCustomAttributeSetting) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UAnimationSettings) == 0x00D0); // 208 bytes (0x000038 - 0x0000D0)
static_assert(sizeof(FAnimGroupInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UAnimBlueprint) == 0x00C8); // 200 bytes (0x0000A0 - 0x0000C8)
static_assert(sizeof(FBakedStateExitTransition) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FBakedAnimationState) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FAnimationStateBase) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FAnimationTransitionBetweenStates) == 0x0040); // 64 bytes (0x000008 - 0x000040)
static_assert(sizeof(FBakedAnimationStateMachine) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FCachedPoseIndices) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FExposedValueCopyRecord) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FExposedValueHandler) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FGraphAssetPlayerInformation) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimGraphBlendOptions) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UAnimBlueprintGeneratedClass) == 0x05B0); // 1456 bytes (0x000328 - 0x0005B0)
static_assert(sizeof(UAnimBoneCompressionSettings) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FAnimBlueprintFunction) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FAnimBlueprintFunctionData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UAnimClassData) == 0x0330); // 816 bytes (0x000028 - 0x000330)
static_assert(sizeof(UAnimClassInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FSmartName) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAnimCurveBase) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FFloatCurve) == 0x0098); // 152 bytes (0x000018 - 0x000098)
static_assert(sizeof(FRawCurveTracks) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAnimSequenceBase) == 0x00A8); // 168 bytes (0x000080 - 0x0000A8)
static_assert(sizeof(UAnimCompositeBase) == 0x00A8); // 168 bytes (0x0000A8 - 0x0000A8)
static_assert(sizeof(FAnimSegment) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FAnimTrack) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAnimComposite) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(UAnimCompress) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UAnimCompress_BitwiseCompressOnly) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimCompress_LeastDestructive) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UAnimCompress_RemoveLinearKeys) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UAnimCompress_PerTrackCompression) == 0x00D8); // 216 bytes (0x000060 - 0x0000D8)
static_assert(sizeof(UAnimCompress_RemoveEverySecondKey) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UAnimCompress_RemoveTrivialKeys) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UAnimCurveCompressionCodec_CompressedRichCurve) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimCurveCompressionCodec_UniformIndexable) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimCurveCompressionCodec_UniformlySampled) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimCurveCompressionSettings) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UAnimLayerInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimMetaData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FAlphaBlend) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FAnimSyncMarker) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMarkerSyncData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FCompositeSection) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(FSlotAnimationTrack) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBranchingPoint) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FBranchingPointMarker) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FTimeStretchCurveMarker) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTimeStretchCurve) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UAnimMontage) == 0x01D0); // 464 bytes (0x0000A8 - 0x0001D0)
static_assert(sizeof(UAnimNotify_PauseClothingSimulation) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_PlayParticleEffect) == 0x0090); // 144 bytes (0x000038 - 0x000090)
static_assert(sizeof(UAnimNotify_PlaySound) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UAnimNotify_ResetClothingSimulation) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_ResetDynamics) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotify_ResumeClothingSimulation) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UAnimNotifyState_DisableRootMotion) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UAnimNotifyState_TimedParticleEffect) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UAnimNotifyState_Trail) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(USBAnimMaskData) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(FSBCurveRemapElements) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSBCurveRemapInfos) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USBCurveRemapData) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(FTrackToSkeletonMap) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FStringCurveKey) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FStringCurve) == 0x0088); // 136 bytes (0x000068 - 0x000088)
static_assert(sizeof(FBakedStringCustomAttribute) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FIntegralKey) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FIntegralCurve) == 0x0080); // 128 bytes (0x000068 - 0x000080)
static_assert(sizeof(FBakedIntegerCustomAttribute) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FSimpleCurveKey) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSimpleCurve) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(FBakedFloatCustomAttribute) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FBakedCustomAttributePerBoneData) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FAnimSequenceTrackCacheData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FAnimSequenceTrackCacheDataArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAnimSequence) == 0x0230); // 560 bytes (0x0000A8 - 0x000230)
static_assert(sizeof(FAnimSetMeshLinkup) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAnimSet) == 0x00F0); // 240 bytes (0x000028 - 0x0000F0)
static_assert(sizeof(UAnimSingleNodeInstance) == 0x02E0); // 736 bytes (0x0002C8 - 0x0002E0)
static_assert(sizeof(UAnimStateMachineTypes) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UAnimStreamable) == 0x00E0); // 224 bytes (0x0000A8 - 0x0000E0)
static_assert(sizeof(UArrowComponent) == 0x0550); // 1360 bytes (0x000538 - 0x000550)
static_assert(sizeof(UAssetExportTask) == 0x0078); // 120 bytes (0x000028 - 0x000078)
static_assert(sizeof(UAssetManager) == 0x0458); // 1112 bytes (0x000028 - 0x000458)
static_assert(sizeof(FDirectoryPath) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPrimaryAssetRules) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FPrimaryAssetTypeInfo) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FPrimaryAssetRulesOverride) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FPrimaryAssetRulesCustomOverride) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FAssetManagerRedirect) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UAssetManagerSettings) == 0x0100); // 256 bytes (0x000038 - 0x000100)
static_assert(sizeof(FAssetMapping) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UAssetMappingTable) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UAsyncActionHandleSaveGame) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UAsyncActionLoadPrimaryAssetBase) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UAsyncActionLoadPrimaryAsset) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UAsyncActionLoadPrimaryAssetClass) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UAsyncActionLoadPrimaryAssetList) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UAsyncActionLoadPrimaryAssetClassList) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UAsyncActionChangePrimaryAssetBundles) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(AAtmosphericFog) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(FAtmospherePrecomputeParameters) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(UAtmosphericFogComponent) == 0x0370); // 880 bytes (0x000260 - 0x000370)
static_assert(sizeof(UAudioBus) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FAudioQualitySettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UAudioSettings) == 0x0148); // 328 bytes (0x000038 - 0x000148)
static_assert(sizeof(FReverbSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FInteriorSettings) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FAudioVolumeSubmixSendSettings) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAudioVolumeSubmixOverrideSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(AAudioVolume) == 0x0388); // 904 bytes (0x000318 - 0x000388)
static_assert(sizeof(UAutoDestroySubsystem) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(FEditorMapPerformanceTestDefinition) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FFilePath) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FImportFactorySettingValues) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FEditorImportWorkflowDefinition) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FBuildPromotionImportWorkflowSettings) == 0x0150); // 336 bytes (0x000000 - 0x000150)
static_assert(sizeof(FBuildPromotionOpenAssetSettings) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FBuildPromotionNewProjectSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FBuildPromotionTestSettings) == 0x01F0); // 496 bytes (0x000000 - 0x0001F0)
static_assert(sizeof(FMaterialEditorPromotionSettings) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FParticleEditorPromotionSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBlueprintEditorPromotionSettings) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FExternalToolDefinition) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FEditorImportExportTestDefinition) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FLaunchOnTestSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UAutomationTestSettings) == 0x0340); // 832 bytes (0x000028 - 0x000340)
static_assert(sizeof(UAvoidanceManager) == 0x00E0); // 224 bytes (0x000028 - 0x0000E0)
static_assert(sizeof(FBandwidthTestItem) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBandwidthTestGenerator) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(ABandwidthTestActor) == 0x02E8); // 744 bytes (0x0002C8 - 0x0002E8)
static_assert(sizeof(UBillboardComponent) == 0x0560); // 1376 bytes (0x000538 - 0x000560)
static_assert(sizeof(UBlendableInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FBoneNode) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FVirtualBone) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSmartNameContainer) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FAnimSlotGroup) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USkeleton) == 0x0390); // 912 bytes (0x000028 - 0x000390)
static_assert(sizeof(FBlendProfileBoneEntry) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UBlendProfile) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(ABlockingVolume) == 0x0318); // 792 bytes (0x000318 - 0x000318)
static_assert(sizeof(UBlueprintExtension) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBlueprintMapLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBlueprintPathsLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPlatformGameInstance) == 0x0278); // 632 bytes (0x0001A8 - 0x000278)
static_assert(sizeof(UBlueprintPlatformLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBlueprintSetLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FKShapeElem) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FKSphereElem) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(FKBoxElem) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(FKSphylElem) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(FKConvexElem) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(FKTaperedCapsuleElem) == 0x0058); // 88 bytes (0x000030 - 0x000058)
static_assert(sizeof(FKAggregateGeom) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(UBodySetup) == 0x0310); // 784 bytes (0x000048 - 0x000310)
static_assert(sizeof(FBranchFilter) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FInputBlendPose) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UBoneMaskFilter) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UBookmarkBase) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBookMark) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UBookMark2D) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UBoundsCopyComponent) == 0x0130); // 304 bytes (0x0000C0 - 0x000130)
static_assert(sizeof(AReflectionCapture) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(ABoxReflectionCapture) == 0x02D0); // 720 bytes (0x0002D0 - 0x0002D0)
static_assert(sizeof(UReflectionCaptureComponent) == 0x02D8); // 728 bytes (0x000260 - 0x0002D8)
static_assert(sizeof(UBoxReflectionCaptureComponent) == 0x02F0); // 752 bytes (0x0002D8 - 0x0002F0)
static_assert(sizeof(UBreakpoint) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FBuilderPoly) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UBrushBuilder) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(UBrushComponent) == 0x0550); // 1360 bytes (0x000538 - 0x000550)
static_assert(sizeof(ABrushShape) == 0x0300); // 768 bytes (0x000300 - 0x000300)
static_assert(sizeof(UButtonStyleAsset) == 0x02C0); // 704 bytes (0x000028 - 0x0002C0)
static_assert(sizeof(UCameraAnim) == 0x0620); // 1568 bytes (0x000028 - 0x000620)
static_assert(sizeof(UCameraAnimInst) == 0x0170); // 368 bytes (0x000028 - 0x000170)
static_assert(sizeof(ACameraBlockingVolume) == 0x0318); // 792 bytes (0x000318 - 0x000318)
static_assert(sizeof(UCameraModifier) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(FActiveCameraShakeInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FPooledCameraShakes) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UCameraModifier_CameraShake) == 0x00B8); // 184 bytes (0x000048 - 0x0000B8)
static_assert(sizeof(FFOscillator) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FROscillator) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FVOscillator) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(UMatineeCameraShake) == 0x0190); // 400 bytes (0x0000A8 - 0x000190)
static_assert(sizeof(ACameraShakeSourceActor) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(UCameraShakeSourceComponent) == 0x0280); // 640 bytes (0x000260 - 0x000280)
static_assert(sizeof(UCanvas) == 0x02D0); // 720 bytes (0x000028 - 0x0002D0)
static_assert(sizeof(UTextureRenderTarget) == 0x00E8); // 232 bytes (0x0000E0 - 0x0000E8)
static_assert(sizeof(UTextureRenderTarget2D) == 0x0110); // 272 bytes (0x0000E8 - 0x000110)
static_assert(sizeof(UCanvasRenderTarget2D) == 0x0130); // 304 bytes (0x000110 - 0x000130)
static_assert(sizeof(UCheckBoxStyleAsset) == 0x05F0); // 1520 bytes (0x000028 - 0x0005F0)
static_assert(sizeof(UChildActorComponent) == 0x02A0); // 672 bytes (0x000260 - 0x0002A0)
static_assert(sizeof(UChildConnection) == 0x1AF8); // 6904 bytes (0x001AF0 - 0x001AF8)
static_assert(sizeof(FDelegateArray) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UPlatformInterfaceBase) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UCloudStorageBase) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(FCollisionResponseTemplate) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FCustomChannelSetup) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FCustomProfile) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FRedirector) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UCollisionProfile) == 0x0170); // 368 bytes (0x000038 - 0x000170)
static_assert(sizeof(FBlueprintComponentDelegateBinding) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UComponentDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UActorComponentInstanceDataTransientOuter) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCurveTable) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(UCompositeCurveTable) == 0x00C8); // 200 bytes (0x0000A0 - 0x0000C8)
static_assert(sizeof(UDataTable) == 0x02E0); // 736 bytes (0x000028 - 0x0002E0)
static_assert(sizeof(UCompositeDataTable) == 0x0308); // 776 bytes (0x0002E0 - 0x000308)
static_assert(sizeof(FStatColorMapEntry) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FStatColorMapping) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FGameNameRedirect) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FClassRedirect) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FPluginRedirect) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FStructRedirect) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FDropNoteInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FNetDriverDefinition) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UEngine) == 0x0DF8); // 3576 bytes (0x000028 - 0x000DF8)
static_assert(sizeof(UScriptViewportClient) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FDebugDisplayProperty) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UGameViewportClient) == 0x0370); // 880 bytes (0x000038 - 0x000370)
static_assert(sizeof(UConsole) == 0x0130); // 304 bytes (0x000028 - 0x000130)
static_assert(sizeof(UControlChannel) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(UStreamingSettings) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UGarbageCollectionSettings) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(FCullDistanceSizePair) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(ACullDistanceVolume) == 0x0330); // 816 bytes (0x000318 - 0x000330)
static_assert(sizeof(UCurveBase) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UCurveEdPresetCurve) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCurveFloat) == 0x00B8); // 184 bytes (0x000030 - 0x0000B8)
static_assert(sizeof(UCurveLinearColor) == 0x0250); // 592 bytes (0x000030 - 0x000250)
static_assert(sizeof(UTexture2D) == 0x0108); // 264 bytes (0x0000E0 - 0x000108)
static_assert(sizeof(UCurveLinearColorAtlas) == 0x0120); // 288 bytes (0x000108 - 0x000120)
static_assert(sizeof(UCurveSourceInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UCurveVector) == 0x01B0); // 432 bytes (0x000030 - 0x0001B0)
static_assert(sizeof(UDamageType) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UPrimaryDataAsset) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UDataTableFunctionLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ADebugCameraController) == 0x0770); // 1904 bytes (0x000668 - 0x000770)
static_assert(sizeof(FDebugCameraControllerSettingsViewModeIndex) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UDebugCameraControllerSettings) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(ADebugCameraHUD) == 0x03B8); // 952 bytes (0x0003B8 - 0x0003B8)
static_assert(sizeof(UDebugDrawService) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UDebugLogService) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ADecalActor) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(UDecalComponent) == 0x02C0); // 704 bytes (0x000260 - 0x0002C0)
static_assert(sizeof(ADefaultPhysicsVolume) == 0x0508); // 1288 bytes (0x000508 - 0x000508)
static_assert(sizeof(UDemoNetConnection) == 0x1B60); // 7008 bytes (0x001AF0 - 0x001B60)
static_assert(sizeof(FRollbackNetStartupActorInfo) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(FMulticastRecordOptions) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UDemoNetDriver) == 0x12C0); // 4800 bytes (0x000748 - 0x0012C0)
static_assert(sizeof(UPendingNetGame) == 0x00C0); // 192 bytes (0x000028 - 0x0000C0)
static_assert(sizeof(UDemoPendingNetGame) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UDestructibleInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FTextureLODGroup) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(UTextureLODSettings) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UDeviceProfile) == 0x00A8); // 168 bytes (0x000038 - 0x0000A8)
static_assert(sizeof(UDeviceProfileFragment) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UDeviceProfileManager) == 0x00B0); // 176 bytes (0x000028 - 0x0000B0)
static_assert(sizeof(UDialogueSoundWaveProxy) == 0x01D0); // 464 bytes (0x0001B8 - 0x0001D0)
static_assert(sizeof(UDialogueVoice) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FDialogueContext) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FDialogueContextMapping) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(UDialogueWave) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(ALight) == 0x02D8); // 728 bytes (0x0002C8 - 0x0002D8)
static_assert(sizeof(ADirectionalLight) == 0x02D8); // 728 bytes (0x0002D8 - 0x0002D8)
static_assert(sizeof(ULightComponentBase) == 0x02C0); // 704 bytes (0x000260 - 0x0002C0)
static_assert(sizeof(ULightComponent) == 0x03D8); // 984 bytes (0x0002C0 - 0x0003D8)
static_assert(sizeof(FLightmassLightSettings) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FLightmassDirectionalLightSettings) == 0x0010); // 16 bytes (0x00000C - 0x000010)
static_assert(sizeof(UDirectionalLightComponent) == 0x04A0); // 1184 bytes (0x0003D8 - 0x0004A0)
static_assert(sizeof(UDistribution) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UDistributionFloat) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UDistributionFloatConstant) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UDistributionFloatConstantCurve) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UDistributionFloatParameterBase) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UDistributionFloatParticleParameter) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UDistributionFloatUniform) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UDistributionFloatUniformCurve) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UDistributionVector) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UDistributionVectorConstant) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UDistributionVectorConstantCurve) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UDistributionVectorParameterBase) == 0x0090); // 144 bytes (0x000050 - 0x000090)
static_assert(sizeof(UDistributionVectorParticleParameter) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UDistributionVectorUniform) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UDistributionVectorUniformCurve) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(ADocumentationActor) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(UDrawFrustumComponent) == 0x0560); // 1376 bytes (0x000538 - 0x000560)
static_assert(sizeof(USphereComponent) == 0x0560); // 1376 bytes (0x000550 - 0x000560)
static_assert(sizeof(UDrawSphereComponent) == 0x0560); // 1376 bytes (0x000560 - 0x000560)
static_assert(sizeof(UGraphNodeContextMenuContext) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UEdGraphNode_Documentation) == 0x00B8); // 184 bytes (0x000098 - 0x0000B8)
static_assert(sizeof(FEdGraphTerminalType) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FEdGraphPinType) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(UEdGraphPin_Deprecated) == 0x0118); // 280 bytes (0x000028 - 0x000118)
static_assert(sizeof(UEdGraphSchema) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AEmitter) == 0x0318); // 792 bytes (0x0002C8 - 0x000318)
static_assert(sizeof(AEmitterCameraLensEffectBase) == 0x0380); // 896 bytes (0x000318 - 0x000380)
static_assert(sizeof(UViewModeUtils) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UEngineBaseTypes) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UEngineHandlerComponentFactory) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ULocalMessage) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UEngineMessage) == 0x00A8); // 168 bytes (0x000028 - 0x0000A8)
static_assert(sizeof(UEngineTypes) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AExponentialHeightFog) == 0x02D8); // 728 bytes (0x0002C8 - 0x0002D8)
static_assert(sizeof(FExponentialHeightFogData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UExponentialHeightFogComponent) == 0x0300); // 768 bytes (0x000260 - 0x000300)
static_assert(sizeof(UExporter) == 0x0078); // 120 bytes (0x000028 - 0x000078)
static_assert(sizeof(FFontCharacter) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FFontImportOptionsData) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(UFont) == 0x01D0); // 464 bytes (0x000028 - 0x0001D0)
static_assert(sizeof(UFontFace) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(UFontImportOptions) == 0x00D8); // 216 bytes (0x000028 - 0x0000D8)
static_assert(sizeof(FForceFeedbackAttenuationSettings) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UForceFeedbackAttenuation) == 0x00D8); // 216 bytes (0x000028 - 0x0000D8)
static_assert(sizeof(UForceFeedbackComponent) == 0x0360); // 864 bytes (0x000260 - 0x000360)
static_assert(sizeof(UGameEngine) == 0x0E48); // 3656 bytes (0x000DF8 - 0x000E48)
static_assert(sizeof(UGameInstanceSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(AGameNetworkManager) == 0x0378); // 888 bytes (0x0002C8 - 0x000378)
static_assert(sizeof(UGameplayStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AGameSession) == 0x02E0); // 736 bytes (0x0002C8 - 0x0002E0)
static_assert(sizeof(ASpotLight) == 0x02E0); // 736 bytes (0x0002D8 - 0x0002E0)
static_assert(sizeof(AGeneratedMeshAreaLight) == 0x02E0); // 736 bytes (0x0002E0 - 0x0002E0)
static_assert(sizeof(UHapticFeedbackEffect_Base) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UHapticFeedbackEffect_Buffer) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(FHapticFeedbackDetails_Curve) == 0x0110); // 272 bytes (0x000000 - 0x000110)
static_assert(sizeof(UHapticFeedbackEffect_Curve) == 0x0138); // 312 bytes (0x000028 - 0x000138)
static_assert(sizeof(UHapticFeedbackEffect_SoundWave) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UHealthSnapshotBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UHLODEngineSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FHLODProxyMesh) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UHLODProxy) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(UHLODProxyDesc) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UImportanceSamplingLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UImportantToggleSettingInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInGameAdManager) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(FComponentKey) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FComponentOverrideRecord) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(UInheritableComponentHandler) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UInputDelegateBinding) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FBlueprintInputDelegateBinding) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FBlueprintInputActionDelegateBinding) == 0x0018); // 24 bytes (0x000004 - 0x000018)
static_assert(sizeof(UInputActionDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FBlueprintInputAxisDelegateBinding) == 0x0014); // 20 bytes (0x000004 - 0x000014)
static_assert(sizeof(UInputAxisDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FBlueprintInputAxisKeyDelegateBinding) == 0x0028); // 40 bytes (0x000004 - 0x000028)
static_assert(sizeof(UInputAxisKeyDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FCachedKeyToActionInfo) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(UInputComponent) == 0x0148); // 328 bytes (0x0000C0 - 0x000148)
static_assert(sizeof(FBlueprintInputKeyDelegateBinding) == 0x0038); // 56 bytes (0x000004 - 0x000038)
static_assert(sizeof(UInputKeyDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FInputAxisProperties) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FInputAxisConfigEntry) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FInputActionKeyMapping) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FInputAxisKeyMapping) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FInputActionSpeechMapping) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UInputSettings) == 0x0160); // 352 bytes (0x000028 - 0x000160)
static_assert(sizeof(FBlueprintInputTouchDelegateBinding) == 0x0010); // 16 bytes (0x000004 - 0x000010)
static_assert(sizeof(UInputTouchDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UInputVectorAxisDelegateBinding) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UInterface_AssetUserData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UBoneReferenceSkeletonProvider) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterface_CollisionDataProvider) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterface_PostProcessVolume) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterface_PreviewMeshProvider) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FCurveEdEntry) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FCurveEdTab) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UInterpCurveEdSetup) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UInterpData) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UInterpFilter) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UInterpFilter_Classes) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UInterpFilter_Custom) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UInterpGroup) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UInterpGroupCamera) == 0x0060); // 96 bytes (0x000050 - 0x000060)
static_assert(sizeof(UInterpGroupDirector) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UInterpGroupInst) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UInterpGroupInstCamera) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UInterpGroupInstDirector) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(FInterpControlPoint) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UInterpToMovementComponent) == 0x01A0); // 416 bytes (0x000100 - 0x0001A0)
static_assert(sizeof(UInterpTrack) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UInterpTrackFloatBase) == 0x0090); // 144 bytes (0x000070 - 0x000090)
static_assert(sizeof(FAnimControlTrackKey) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UInterpTrackAnimControl) == 0x00B0); // 176 bytes (0x000090 - 0x0000B0)
static_assert(sizeof(UInterpTrackVectorBase) == 0x0090); // 144 bytes (0x000070 - 0x000090)
static_assert(sizeof(UInterpTrackAudioMaster) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(FBoolTrackKey) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UInterpTrackBoolProp) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(UInterpTrackColorProp) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(UInterpTrackColorScale) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(FDirectorTrackCut) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UInterpTrackDirector) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(FEventTrackKey) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UInterpTrackEvent) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(UInterpTrackFade) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UInterpTrackFloatAnimBPParam) == 0x00B0); // 176 bytes (0x000090 - 0x0000B0)
static_assert(sizeof(UInterpTrackFloatMaterialParam) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UInterpTrackFloatParticleParam) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(UInterpTrackFloatProp) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(UInterpTrackInst) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterpTrackInstAnimControl) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstAudioMaster) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterpTrackInstProperty) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UInterpTrackInstBoolProp) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(UInterpTrackInstColorProp) == 0x0060); // 96 bytes (0x000050 - 0x000060)
static_assert(sizeof(UInterpTrackInstColorScale) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterpTrackInstDirector) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstEvent) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstFade) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UInterpTrackInstFloatAnimBPParam) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FPrimitiveMaterialRef) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UInterpTrackInstFloatMaterialParam) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UInterpTrackInstFloatParticleParam) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstFloatProp) == 0x0060); // 96 bytes (0x000050 - 0x000060)
static_assert(sizeof(UInterpTrackInstLinearColorProp) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(UInterpTrackInstMove) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UInterpTrackInstParticleReplay) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstSlomo) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackInstSound) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UInterpTrackInstToggle) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UInterpTrackInstVectorMaterialParam) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UInterpTrackInstVectorProp) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(UInterpTrackInstVisibility) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UInterpTrackLinearColorBase) == 0x0090); // 144 bytes (0x000070 - 0x000090)
static_assert(sizeof(UInterpTrackLinearColorProp) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(FInterpLookupPoint) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FInterpLookupTrack) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UInterpTrackMove) == 0x0140); // 320 bytes (0x000070 - 0x000140)
static_assert(sizeof(UInterpTrackMoveAxis) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(FParticleReplayTrackKey) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UInterpTrackParticleReplay) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(UInterpTrackSlomo) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(FSoundTrackKey) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UInterpTrackSound) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(FToggleTrackKey) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UInterpTrackToggle) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(UInterpTrackVectorMaterialParam) == 0x00A8); // 168 bytes (0x000090 - 0x0000A8)
static_assert(sizeof(UInterpTrackVectorProp) == 0x0098); // 152 bytes (0x000090 - 0x000098)
static_assert(sizeof(FVisibilityTrackKey) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UInterpTrackVisibility) == 0x0088); // 136 bytes (0x000070 - 0x000088)
static_assert(sizeof(UIntSerialization) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(AKillZVolume) == 0x0508); // 1288 bytes (0x000508 - 0x000508)
static_assert(sizeof(UKismetArrayLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetGuidLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetInputLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetInternationalizationLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetMaterialLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetMathLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetNodeHelperLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetRenderingLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetStringLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetStringTableLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetSystemLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UKismetTextLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FLayerActorStats) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(ULayer) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(ULevelPartitionInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FReplicatedStaticActorDestructionInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(ULevel) == 0x02D0); // 720 bytes (0x000028 - 0x0002D0)
static_assert(sizeof(ULevelActorContainer) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(ALevelBounds) == 0x02D8); // 728 bytes (0x0002C8 - 0x0002D8)
static_assert(sizeof(ALevelScriptActor) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(ULevelScriptBlueprint) == 0x00A0); // 160 bytes (0x0000A0 - 0x0000A0)
static_assert(sizeof(FStreamingLevelsToConsider) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FLevelCollection) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FTaggedActorsContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPSCPoolElem) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPSCPool) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FWorldPSCPool) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(UWorld) == 0x0A00); // 2560 bytes (0x000028 - 0x000A00)
static_assert(sizeof(ULevelStreaming) == 0x0158); // 344 bytes (0x000028 - 0x000158)
static_assert(sizeof(ULevelStreamingAlwaysLoaded) == 0x0160); // 352 bytes (0x000158 - 0x000160)
static_assert(sizeof(ULevelStreamingDynamic) == 0x0160); // 352 bytes (0x000158 - 0x000160)
static_assert(sizeof(ULevelStreamingPersistent) == 0x0160); // 352 bytes (0x000158 - 0x000160)
static_assert(sizeof(ALevelStreamingVolume) == 0x0348); // 840 bytes (0x000318 - 0x000348)
static_assert(sizeof(ULightmappedSurfaceCollection) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(ULightMapTexture2D) == 0x0110); // 272 bytes (0x000108 - 0x000110)
static_assert(sizeof(ULightMapVirtualTexture2D) == 0x0120); // 288 bytes (0x000108 - 0x000120)
static_assert(sizeof(ALightmassCharacterIndirectDetailVolume) == 0x0318); // 792 bytes (0x000318 - 0x000318)
static_assert(sizeof(ALightmassImportanceVolume) == 0x0318); // 792 bytes (0x000318 - 0x000318)
static_assert(sizeof(ALightmassPortal) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(ULightmassPortalComponent) == 0x0270); // 624 bytes (0x000260 - 0x000270)
static_assert(sizeof(ULightmassPrimitiveSettingsObject) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(ULineBatchComponent) == 0x0580); // 1408 bytes (0x000538 - 0x000580)
static_assert(sizeof(FLightmassPointLightSettings) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(ULocalLightComponent) == 0x03F0); // 1008 bytes (0x0003D8 - 0x0003F0)
static_assert(sizeof(ULocalPlayer) == 0x0258); // 600 bytes (0x000048 - 0x000258)
static_assert(sizeof(ULocalPlayerSubsystem) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(ALODActor) == 0x0350); // 848 bytes (0x0002C8 - 0x000350)
static_assert(sizeof(FComponentSync) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FLODMappingData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(ULODSyncComponent) == 0x0150); // 336 bytes (0x0000C0 - 0x000150)
static_assert(sizeof(ULODSyncInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMapBuildDataRegistry) == 0x0238); // 568 bytes (0x000028 - 0x000238)
static_assert(sizeof(FMaterialInput) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FScalarMaterialInput) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FVectorMaterialInput) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FColorMaterialInput) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FMaterialShadingModelField) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FMaterialAttributesInput) == 0x0010); // 16 bytes (0x00000C - 0x000010)
static_assert(sizeof(FShadingModelMaterialInput) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FMaterialFunctionInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMaterialParameterCollectionInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMaterialCachedExpressionData) == 0x0228); // 552 bytes (0x000000 - 0x000228)
static_assert(sizeof(UMaterial) == 0x04C0); // 1216 bytes (0x000088 - 0x0004C0)
static_assert(sizeof(FMaterialSpriteElement) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UMaterialBillboardComponent) == 0x0550); // 1360 bytes (0x000538 - 0x000550)
static_assert(sizeof(UMaterialExpressionAbs) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionActorPositionWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionAdd) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionAntialiasedTextureMask) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(UMaterialExpressionAppendVector) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionArccosine) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionArccosineFast) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionArcsine) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionArcsineFast) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionArctangent) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionArctangent2) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionArctangent2Fast) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionArctangentFast) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionAtmosphericFogColor) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionAtmosphericLightColor) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionAtmosphericLightVector) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionBentNormalCustomOutput) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionBlackBody) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionBlendMaterialAttributes) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionBreakMaterialAttributes) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionBumpOffset) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionCameraPositionWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionCameraVectorWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionCeil) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionParameter) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionVectorParameter) == 0x0070); // 112 bytes (0x000058 - 0x000070)
static_assert(sizeof(UMaterialExpressionChannelMaskParameter) == 0x0078); // 120 bytes (0x000070 - 0x000078)
static_assert(sizeof(UMaterialExpressionClamp) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionClearCoatNormalCustomOutput) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionCloudSampleAttribute) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionCollectionParameter) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionComment) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionComponentMask) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionConstant) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionConstant2Vector) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionConstant3Vector) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMaterialExpressionConstant4Vector) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMaterialExpressionConstantBiasScale) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionCosine) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionCrossProduct) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionScalarParameter) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UMaterialExpressionCurveAtlasRowParameter) == 0x0088); // 136 bytes (0x000060 - 0x000088)
static_assert(sizeof(FCustomInput) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FCustomOutput) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FCustomDefine) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UMaterialExpressionCustom) == 0x00A8); // 168 bytes (0x000040 - 0x0000A8)
static_assert(sizeof(UMaterialExpressionDDX) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDDY) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDecalDerivative) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionDecalLifetimeOpacity) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionDecalMipmapLevel) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionDecalSize) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionDeltaTime) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionDepthFade) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionDepthOfFieldFunction) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDeriveNormalZ) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDesaturation) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMaterialExpressionDistance) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionDistanceCullFade) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionDistanceFieldGradient) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDistanceToNearestSurface) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionDivide) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionDotProduct) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionDynamicParameter) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionEyeAdaptation) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionFeatureLevelSwitch) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionFloor) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionFmod) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionFontSample) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMaterialExpressionFontSampleParameter) == 0x0070); // 112 bytes (0x000050 - 0x000070)
static_assert(sizeof(UMaterialExpressionFrac) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionFresnel) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionFunctionInput) == 0x00C0); // 192 bytes (0x000040 - 0x0000C0)
static_assert(sizeof(UMaterialExpressionFunctionOutput) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionGetMaterialAttributes) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionGIReplace) == 0x0080); // 128 bytes (0x000040 - 0x000080)
static_assert(sizeof(UMaterialExpressionHairAttributes) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionHairColor) == 0x0080); // 128 bytes (0x000040 - 0x000080)
static_assert(sizeof(UMaterialExpressionIf) == 0x00B0); // 176 bytes (0x000040 - 0x0000B0)
static_assert(sizeof(UMaterialExpressionInverseLinearInterpolate) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionLightmapUVs) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionLightmassReplace) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionLightVector) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionLinearInterpolate) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionLogarithm10) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionLogarithm2) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionMakeMaterialAttributes) == 0x0288); // 648 bytes (0x000040 - 0x000288)
static_assert(sizeof(UMaterialExpressionMapARPassthroughCameraUV) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionMaterialAttributeLayers) == 0x00E8); // 232 bytes (0x000040 - 0x0000E8)
static_assert(sizeof(UMaterialExpressionMaterialFunctionCall) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionMaterialLayerOutput) == 0x0088); // 136 bytes (0x000088 - 0x000088)
static_assert(sizeof(UMaterialExpressionMaterialProxyReplace) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionMax) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionMin) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionMultiply) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionNoise) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionNormalize) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionObjectBounds) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionObjectOrientation) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionObjectPositionWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionObjectRadius) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionOneMinus) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionPanner) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionParticleColor) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleDirection) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleMacroUV) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleMotionBlurFade) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticlePositionWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleRadius) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleRandom) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleRelativeTime) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleSize) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleSpeed) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionParticleSubUV) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UMaterialExpressionParticleSubUVProperties) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPerInstanceCustomData) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionPerInstanceFadeAmount) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPerInstanceRandom) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPixelDepth) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPixelNormalWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPower) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionPrecomputedAOMask) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPreSkinnedLocalBounds) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPreSkinnedNormal) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPreSkinnedPosition) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionPreviousFrameSwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionQualitySwitch) == 0x00A8); // 168 bytes (0x000040 - 0x0000A8)
static_assert(sizeof(UMaterialExpressionRayTracingQualitySwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionReflectionCapturePassSwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionReflectionVectorWS) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionReroute) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionRotateAboutAxis) == 0x0098); // 152 bytes (0x000040 - 0x000098)
static_assert(sizeof(UMaterialExpressionRotator) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMaterialExpressionRound) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionRuntimeVirtualTextureOutput) == 0x00E0); // 224 bytes (0x000040 - 0x0000E0)
static_assert(sizeof(UMaterialExpressionRuntimeVirtualTextureReplace) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionRuntimeVirtualTextureSample) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionRuntimeVirtualTextureSampleParameter) == 0x00B0); // 176 bytes (0x000090 - 0x0000B0)
static_assert(sizeof(UMaterialExpressionSaturate) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSceneColor) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMaterialExpressionSceneDepth) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMaterialExpressionSceneDepthWithoutWater) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionSceneTexelSize) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionSceneTexture) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionScreenPosition) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionSetMaterialAttributes) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionShaderStageSwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionShadingModel) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionShadingPathSwitch) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionShadowReplace) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionSign) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSine) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSingleLayerWaterMaterialOutput) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMaterialExpressionSkinningVertexOffsets) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereLightDirection) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereLightIlluminance) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereLightDiskLuminance) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereAerialPerspective) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionSkyAtmosphereViewLuminance) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionSmoothStep) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionSobol) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(UMaterialExpressionSpeedTree) == 0x00A0); // 160 bytes (0x000040 - 0x0000A0)
static_assert(sizeof(UMaterialExpressionSphereMask) == 0x0098); // 152 bytes (0x000040 - 0x000098)
static_assert(sizeof(UMaterialExpressionSphericalParticleOpacity) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionSquareRoot) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionStaticBool) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionStaticBoolParameter) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UMaterialExpressionStaticComponentMaskParameter) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(UMaterialExpressionStaticSwitch) == 0x0080); // 128 bytes (0x000040 - 0x000080)
static_assert(sizeof(UMaterialExpressionStaticSwitchParameter) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UMaterialExpressionStep) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionSubtract) == 0x0070); // 112 bytes (0x000040 - 0x000070)
static_assert(sizeof(UMaterialExpressionTangent) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTangentOutput) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTemporalSobol) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMaterialExpressionTextureCoordinate) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMaterialExpressionTextureObject) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(UMaterialExpressionTextureObjectParameter) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UMaterialExpressionTextureProperty) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTextureSampleParameter2DArray) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UMaterialExpressionTextureSampleParameterCube) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UMaterialExpressionTextureSampleParameterSubUV) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(UMaterialExpressionTextureSampleParameterVolume) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UMaterialExpressionThinTranslucentMaterialOutput) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTime) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionTransform) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTransformPosition) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTruncate) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialExpressionTwoSidedSign) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionVectorNoise) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionVertexColor) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionVertexInterpolator) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMaterialExpressionVertexNormalWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionVertexTangentWS) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionViewProperty) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialExpressionViewSize) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionVirtualTextureFeatureSwitch) == 0x0068); // 104 bytes (0x000040 - 0x000068)
static_assert(sizeof(UMaterialExpressionVolumetricAdvancedMaterialInput) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMaterialExpressionVolumetricAdvancedMaterialOutput) == 0x00F0); // 240 bytes (0x000040 - 0x0000F0)
static_assert(sizeof(UMaterialExpressionWorldPosition) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UMaterialFunctionInterface) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UMaterialFunction) == 0x0058); // 88 bytes (0x000040 - 0x000058)
static_assert(sizeof(UMaterialFunctionInstance) == 0x00C0); // 192 bytes (0x000040 - 0x0000C0)
static_assert(sizeof(UMaterialFunctionMaterialLayer) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMaterialFunctionMaterialLayerInstance) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(UMaterialFunctionMaterialLayerBlend) == 0x0058); // 88 bytes (0x000058 - 0x000058)
static_assert(sizeof(UMaterialFunctionMaterialLayerBlendInstance) == 0x00C0); // 192 bytes (0x0000C0 - 0x0000C0)
static_assert(sizeof(AMaterialInstanceActor) == 0x02D8); // 728 bytes (0x0002C8 - 0x0002D8)
static_assert(sizeof(UMaterialInstanceDynamic) == 0x03B0); // 944 bytes (0x000360 - 0x0003B0)
static_assert(sizeof(FCollectionParameterBase) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCollectionScalarParameter) == 0x001C); // 28 bytes (0x000018 - 0x00001C)
static_assert(sizeof(FCollectionVectorParameter) == 0x0028); // 40 bytes (0x000018 - 0x000028)
static_assert(sizeof(UMaterialParameterCollection) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UMaterialParameterCollectionInstance) == 0x0108); // 264 bytes (0x000028 - 0x000108)
static_assert(sizeof(FInterpGroupActorInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCameraCutInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(AMatineeActor) == 0x0370); // 880 bytes (0x0002C8 - 0x000370)
static_assert(sizeof(AMatineeActorCameraAnim) == 0x0378); // 888 bytes (0x000370 - 0x000378)
static_assert(sizeof(UMatineeAnimInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMatineeInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(AMeshMergeCullingVolume) == 0x0318); // 792 bytes (0x000318 - 0x000318)
static_assert(sizeof(UMeshSimplificationSettings) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UMeshVertexPainterKismetLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FPurchaseInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UMicroTransactionBase) == 0x0068); // 104 bytes (0x000038 - 0x000068)
static_assert(sizeof(UModelComponent) == 0x0580); // 1408 bytes (0x000538 - 0x000580)
static_assert(sizeof(FMorphTargetMaterialParam) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UMorphTarget) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UNavAgentInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNavAreaBase) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UNavCollisionBase) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UNavEdgeProviderInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNavigationDataChunk) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UNavigationDataInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNavigationSystemBase) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FNavAgentSelector) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UNavigationSystemConfig) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UNullNavSysConfig) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(FNavigationLinkBase) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FNavigationLink) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(FNavigationSegmentLink) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UNavLinkDefinition) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UNavPathObserverInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNavRelevantInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USimulatedClientNetConnection) == 0x1AF0); // 6896 bytes (0x001AF0 - 0x001AF0)
static_assert(sizeof(UNetPushModelHelpers) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNetworkPredictionInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FNetworkEmulationProfileDescription) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UNetworkSettings) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(FNodeItem) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(UNodeMappingContainer) == 0x0168); // 360 bytes (0x000028 - 0x000168)
static_assert(sizeof(UNodeMappingProviderInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ANote) == 0x02C8); // 712 bytes (0x0002C8 - 0x0002C8)
static_assert(sizeof(UObjectLibrary) == 0x00A8); // 168 bytes (0x000028 - 0x0000A8)
static_assert(sizeof(UObjectReferencer) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UObjectTraceWorldSubsystem) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UPackageMapClient) == 0x03F8); // 1016 bytes (0x0000E0 - 0x0003F8)
static_assert(sizeof(APainCausingVolume) == 0x0530); // 1328 bytes (0x000508 - 0x000530)
static_assert(sizeof(UParticleEmitter) == 0x01B8); // 440 bytes (0x000028 - 0x0001B8)
static_assert(sizeof(AParticleEventManager) == 0x02C8); // 712 bytes (0x0002C8 - 0x0002C8)
static_assert(sizeof(UParticleLODLevel) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(UParticleModule) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UParticleModuleAccelerationBase) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FDistributionLookupTable) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FRawDistribution) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FRawDistributionVector) == 0x0048); // 72 bytes (0x000020 - 0x000048)
static_assert(sizeof(UParticleModuleAcceleration) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UParticleModuleAccelerationConstant) == 0x0048); // 72 bytes (0x000038 - 0x000048)
static_assert(sizeof(FRawDistributionFloat) == 0x0030); // 48 bytes (0x000020 - 0x000030)
static_assert(sizeof(UParticleModuleAccelerationDrag) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UParticleModuleAccelerationDragScaleOverLife) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UParticleModuleAccelerationOverLifetime) == 0x0080); // 128 bytes (0x000038 - 0x000080)
static_assert(sizeof(UParticleModuleAttractorBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleAttractorLine) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(UParticleModuleAttractorParticle) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UParticleModuleAttractorPoint) == 0x00E0); // 224 bytes (0x000030 - 0x0000E0)
static_assert(sizeof(UParticleModuleAttractorPointGravity) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UParticleModuleBeamBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FBeamModifierOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UParticleModuleBeamModifier) == 0x0108); // 264 bytes (0x000030 - 0x000108)
static_assert(sizeof(UParticleModuleBeamNoise) == 0x0190); // 400 bytes (0x000030 - 0x000190)
static_assert(sizeof(UParticleModuleBeamSource) == 0x0118); // 280 bytes (0x000030 - 0x000118)
static_assert(sizeof(UParticleModuleBeamTarget) == 0x0120); // 288 bytes (0x000030 - 0x000120)
static_assert(sizeof(UParticleModuleCameraBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleCameraOffset) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleCollisionBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleCollision) == 0x0190); // 400 bytes (0x000030 - 0x000190)
static_assert(sizeof(UParticleModuleCollisionGPU) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(UParticleModuleColorBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleColor) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(FParticleRandomSeedInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UParticleModuleColor_Seeded) == 0x00D0); // 208 bytes (0x0000B0 - 0x0000D0)
static_assert(sizeof(UParticleModuleColorOverLife) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UParticleModuleColorScaleOverLife) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UParticleModuleEventBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FParticleEvent_GenerateInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UParticleModuleEventGenerator) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleEventReceiverBase) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleEventReceiverKillParticles) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(UParticleModuleEventReceiverSpawn) == 0x00D8); // 216 bytes (0x000040 - 0x0000D8)
static_assert(sizeof(UParticleModuleEventSendToGame) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UParticleModuleKillBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleKillBox) == 0x00C8); // 200 bytes (0x000030 - 0x0000C8)
static_assert(sizeof(UParticleModuleKillHeight) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleLifetimeBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleLifetime) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UParticleModuleLifetime_Seeded) == 0x0080); // 128 bytes (0x000060 - 0x000080)
static_assert(sizeof(UParticleModuleLightBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleLight) == 0x0120); // 288 bytes (0x000030 - 0x000120)
static_assert(sizeof(UParticleModuleLight_Seeded) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UParticleModuleLocationBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleLocation) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UParticleModuleLocation_Seeded) == 0x00A0); // 160 bytes (0x000080 - 0x0000A0)
static_assert(sizeof(FLocationBoneSocketInfo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UParticleModuleLocationBoneSocket) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(UParticleModuleLocationDirect) == 0x0150); // 336 bytes (0x000030 - 0x000150)
static_assert(sizeof(UParticleModuleLocationEmitter) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UParticleModuleLocationEmitterDirect) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UParticleModuleLocationPrimitiveBase) == 0x00B0); // 176 bytes (0x000030 - 0x0000B0)
static_assert(sizeof(UParticleModuleLocationPrimitiveCylinder) == 0x0120); // 288 bytes (0x0000B0 - 0x000120)
static_assert(sizeof(UParticleModuleLocationPrimitiveCylinder_Seeded) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UParticleModuleLocationPrimitiveSphere) == 0x00E0); // 224 bytes (0x0000B0 - 0x0000E0)
static_assert(sizeof(UParticleModuleLocationPrimitiveSphere_Seeded) == 0x0100); // 256 bytes (0x0000E0 - 0x000100)
static_assert(sizeof(UParticleModuleLocationPrimitiveTriangle) == 0x0108); // 264 bytes (0x000030 - 0x000108)
static_assert(sizeof(UParticleModuleLocationSkelVertSurface) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(UParticleModuleLocationWorldOffset) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(UParticleModuleLocationWorldOffset_Seeded) == 0x00A0); // 160 bytes (0x000080 - 0x0000A0)
static_assert(sizeof(UParticleModuleMaterialBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleMeshMaterial) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleRotationBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleMeshRotation) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UParticleModuleMeshRotation_Seeded) == 0x00A0); // 160 bytes (0x000080 - 0x0000A0)
static_assert(sizeof(UParticleModuleRotationRateBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleMeshRotationRate) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UParticleModuleMeshRotationRate_Seeded) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(UParticleModuleMeshRotationRateMultiplyLife) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UParticleModuleMeshRotationRateOverLife) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UParticleModuleOrbitBase) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FOrbitOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UParticleModuleOrbit) == 0x0130); // 304 bytes (0x000038 - 0x000130)
static_assert(sizeof(UParticleModuleOrientationBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleOrientationAxisLock) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UParticleModuleParameterBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(FEmitterDynamicParameter) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UParticleModuleParameterDynamic) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UParticleModuleParameterDynamic_Seeded) == 0x0068); // 104 bytes (0x000048 - 0x000068)
static_assert(sizeof(UParticleModulePivotOffset) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FParticleBurst) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UParticleModuleRequired) == 0x0140); // 320 bytes (0x000030 - 0x000140)
static_assert(sizeof(UParticleModuleRotation) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UParticleModuleRotation_Seeded) == 0x0080); // 128 bytes (0x000060 - 0x000080)
static_assert(sizeof(UParticleModuleRotationOverLifetime) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleRotationRate) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UParticleModuleRotationRate_Seeded) == 0x0080); // 128 bytes (0x000060 - 0x000080)
static_assert(sizeof(UParticleModuleRotationRateMultiplyLife) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UParticleModuleSizeBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleSize) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UParticleModuleSize_Seeded) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(UParticleModuleSizeMultiplyLife) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UParticleModuleSizeScale) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(UParticleModuleSizeScaleBySpeed) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleSourceMovement) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(UParticleModuleSpawnBase) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UParticleModuleSpawn) == 0x00E8); // 232 bytes (0x000038 - 0x0000E8)
static_assert(sizeof(UParticleModuleSpawnPerUnit) == 0x0078); // 120 bytes (0x000038 - 0x000078)
static_assert(sizeof(UParticleModuleSubUVBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleSubUV) == 0x0070); // 112 bytes (0x000030 - 0x000070)
static_assert(sizeof(UParticleModuleSubUVMovie) == 0x00B0); // 176 bytes (0x000070 - 0x0000B0)
static_assert(sizeof(UParticleModuleTrailBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleTrailSource) == 0x0090); // 144 bytes (0x000030 - 0x000090)
static_assert(sizeof(UParticleModuleTypeDataBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleTypeDataAnimTrail) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UParticleModuleTypeDataBeam2) == 0x0150); // 336 bytes (0x000030 - 0x000150)
static_assert(sizeof(FGPUSpriteLocalVectorFieldInfo) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FFloatDistribution) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FGPUSpriteEmitterInfo) == 0x0280); // 640 bytes (0x000000 - 0x000280)
static_assert(sizeof(FGPUSpriteResourceData) == 0x0160); // 352 bytes (0x000000 - 0x000160)
static_assert(sizeof(UParticleModuleTypeDataGpu) == 0x0420); // 1056 bytes (0x000030 - 0x000420)
static_assert(sizeof(UParticleModuleTypeDataMesh) == 0x0098); // 152 bytes (0x000030 - 0x000098)
static_assert(sizeof(UParticleModuleTypeDataRibbon) == 0x0060); // 96 bytes (0x000030 - 0x000060)
static_assert(sizeof(UParticleModuleVectorFieldBase) == 0x0030); // 48 bytes (0x000030 - 0x000030)
static_assert(sizeof(UParticleModuleVectorFieldGlobal) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleVectorFieldLocal) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleVectorFieldRotation) == 0x0048); // 72 bytes (0x000030 - 0x000048)
static_assert(sizeof(UParticleModuleVectorFieldRotationRate) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(UParticleModuleVectorFieldScale) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleVectorFieldScaleOverLife) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UParticleModuleVelocityBase) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UParticleModuleVelocity) == 0x00B0); // 176 bytes (0x000038 - 0x0000B0)
static_assert(sizeof(UParticleModuleVelocity_Seeded) == 0x00D0); // 208 bytes (0x0000B0 - 0x0000D0)
static_assert(sizeof(UParticleModuleVelocityCone) == 0x00A8); // 168 bytes (0x000038 - 0x0000A8)
static_assert(sizeof(UParticleModuleVelocityInheritParent) == 0x0080); // 128 bytes (0x000038 - 0x000080)
static_assert(sizeof(UParticleModuleVelocityOverLifetime) == 0x0088); // 136 bytes (0x000038 - 0x000088)
static_assert(sizeof(UParticleSpriteEmitter) == 0x01B8); // 440 bytes (0x0001B8 - 0x0001B8)
static_assert(sizeof(FParticleSystemLOD) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FLODSoloTrack) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FNamedEmitterMaterial) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UParticleSystem) == 0x0110); // 272 bytes (0x000030 - 0x000110)
static_assert(sizeof(UParticleSystemReplay) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UPathFollowingAgentInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPawnNoiseEmitterComponent) == 0x00E8); // 232 bytes (0x0000C0 - 0x0000E8)
static_assert(sizeof(UPhysicalAnimationComponent) == 0x0100); // 256 bytes (0x0000C0 - 0x000100)
static_assert(sizeof(UPhysicalMaterialMask) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSolverIterations) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UPhysicsAsset) == 0x0138); // 312 bytes (0x000028 - 0x000138)
static_assert(sizeof(FPhysicalAnimationData) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FPhysicalAnimationProfile) == 0x002C); // 44 bytes (0x000000 - 0x00002C)
static_assert(sizeof(USkeletalBodySetup) == 0x0328); // 808 bytes (0x000310 - 0x000328)
static_assert(sizeof(UPhysicsCollisionHandler) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(ARigidBodyBase) == 0x02C8); // 712 bytes (0x0002C8 - 0x0002C8)
static_assert(sizeof(APhysicsConstraintActor) == 0x02E8); // 744 bytes (0x0002C8 - 0x0002E8)
static_assert(sizeof(FConstrainComponentPropName) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FConstraintInstanceBase) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FConstraintBaseParams) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FLinearConstraint) == 0x001C); // 28 bytes (0x000014 - 0x00001C)
static_assert(sizeof(FConeConstraint) == 0x0020); // 32 bytes (0x000014 - 0x000020)
static_assert(sizeof(FTwistConstraint) == 0x001C); // 28 bytes (0x000014 - 0x00001C)
static_assert(sizeof(FConstraintDrive) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FLinearDriveConstraint) == 0x004C); // 76 bytes (0x000000 - 0x00004C)
static_assert(sizeof(FAngularDriveConstraint) == 0x004C); // 76 bytes (0x000000 - 0x00004C)
static_assert(sizeof(FConstraintProfileProperties) == 0x010C); // 268 bytes (0x000000 - 0x00010C)
static_assert(sizeof(FConstraintInstance) == 0x01C0); // 448 bytes (0x000018 - 0x0001C0)
static_assert(sizeof(UPhysicsConstraintComponent) == 0x0470); // 1136 bytes (0x000260 - 0x000470)
static_assert(sizeof(FPhysicsConstraintProfileHandle) == 0x0114); // 276 bytes (0x000000 - 0x000114)
static_assert(sizeof(UPhysicsConstraintTemplate) == 0x0308); // 776 bytes (0x000028 - 0x000308)
static_assert(sizeof(UPhysicsHandleComponent) == 0x0170); // 368 bytes (0x0000C0 - 0x000170)
static_assert(sizeof(FRigidBodyErrorCorrection) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(FPhysicalSurfaceName) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FBroadphaseSettings) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FChaosPhysicsSettings) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(UPhysicsSettings) == 0x01A0); // 416 bytes (0x0000E0 - 0x0001A0)
static_assert(sizeof(UPhysicsSpringComponent) == 0x0290); // 656 bytes (0x000260 - 0x000290)
static_assert(sizeof(APhysicsThruster) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(UPhysicsThrusterComponent) == 0x0270); // 624 bytes (0x000260 - 0x000270)
static_assert(sizeof(ASceneCapture) == 0x02D8); // 728 bytes (0x0002C8 - 0x0002D8)
static_assert(sizeof(APlanarReflection) == 0x02E8); // 744 bytes (0x0002D8 - 0x0002E8)
static_assert(sizeof(UPlanarReflectionComponent) == 0x0410); // 1040 bytes (0x000320 - 0x000410)
static_assert(sizeof(APlaneReflectionCapture) == 0x02D0); // 720 bytes (0x0002D0 - 0x0002D0)
static_assert(sizeof(UPlaneReflectionCaptureComponent) == 0x02F0); // 752 bytes (0x0002D8 - 0x0002F0)
static_assert(sizeof(UPlatformEventsComponent) == 0x00E0); // 224 bytes (0x0000C0 - 0x0000E0)
static_assert(sizeof(UPlatformInterfaceWebResponse) == 0x00B0); // 176 bytes (0x000028 - 0x0000B0)
static_assert(sizeof(FMinimalViewInfo) == 0x0640); // 1600 bytes (0x000000 - 0x000640)
static_assert(sizeof(FCameraCacheEntry) == 0x0650); // 1616 bytes (0x000000 - 0x000650)
static_assert(sizeof(FTViewTarget) == 0x0660); // 1632 bytes (0x000000 - 0x000660)
static_assert(sizeof(APlayerCameraManager) == 0x2AD0); // 10960 bytes (0x0002C8 - 0x002AD0)
static_assert(sizeof(APlayerStart) == 0x02F8); // 760 bytes (0x0002F0 - 0x0002F8)
static_assert(sizeof(APlayerStartPIE) == 0x02F8); // 760 bytes (0x0002F8 - 0x0002F8)
static_assert(sizeof(UPluginCommandlet) == 0x00A0); // 160 bytes (0x000080 - 0x0000A0)
static_assert(sizeof(APointLight) == 0x02E0); // 736 bytes (0x0002D8 - 0x0002E0)
static_assert(sizeof(UPointLightComponent) == 0x0408); // 1032 bytes (0x0003F0 - 0x000408)
static_assert(sizeof(UPolys) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UPoseableMeshComponent) == 0x09E0); // 2528 bytes (0x000880 - 0x0009E0)
static_assert(sizeof(FPoseData) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FPoseDataContainer) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(UPoseAsset) == 0x0120); // 288 bytes (0x000080 - 0x000120)
static_assert(sizeof(UPoseWatch) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UPostProcessComponent) == 0x0820); // 2080 bytes (0x000260 - 0x000820)
static_assert(sizeof(APostProcessVolume) == 0x08D0); // 2256 bytes (0x000318 - 0x0008D0)
static_assert(sizeof(APrecomputedVisibilityOverrideVolume) == 0x0348); // 840 bytes (0x000318 - 0x000348)
static_assert(sizeof(APrecomputedVisibilityVolume) == 0x0318); // 792 bytes (0x000318 - 0x000318)
static_assert(sizeof(UPreviewCollectionInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FPreviewMeshCollectionEntry) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UPreviewMeshCollection) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(FCollectionReference) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(UPrimaryAssetLabel) == 0x0068); // 104 bytes (0x000030 - 0x000068)
static_assert(sizeof(UProjectileMovementComponent) == 0x01E0); // 480 bytes (0x000100 - 0x0001E0)
static_assert(sizeof(UProxyLODMeshSimplificationSettings) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(ARadialForceActor) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(ARectLight) == 0x02E0); // 736 bytes (0x0002D8 - 0x0002E0)
static_assert(sizeof(URectLightComponent) == 0x0420); // 1056 bytes (0x0003F0 - 0x000420)
static_assert(sizeof(URendererSettings) == 0x0140); // 320 bytes (0x000038 - 0x000140)
static_assert(sizeof(URendererOverrideSettings) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(UReplayNetConnection) == 0x22F0); // 8944 bytes (0x001AF0 - 0x0022F0)
static_assert(sizeof(UReplaySubsystem) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(UReplicationDriver) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UReplicationConnectionDriver) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UReporterBase) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UReporterGraph) == 0x00A8); // 168 bytes (0x000030 - 0x0000A8)
static_assert(sizeof(UReverbEffect) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(FRigTransformConstraint) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTransformBaseConstraint) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTransformBase) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FNode) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(URig) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(URotatingMovementComponent) == 0x0120); // 288 bytes (0x000100 - 0x000120)
static_assert(sizeof(URuntimeOptionsBase) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(URuntimeVirtualTexture) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(URuntimeVirtualTextureComponent) == 0x02E0); // 736 bytes (0x000260 - 0x0002E0)
static_assert(sizeof(ARuntimeVirtualTextureVolume) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(URVOAvoidanceInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UScene) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ASceneCapture2D) == 0x02E0); // 736 bytes (0x0002D8 - 0x0002E0)
static_assert(sizeof(USceneCaptureComponentCube) == 0x0350); // 848 bytes (0x000320 - 0x000350)
static_assert(sizeof(ASceneCaptureCube) == 0x02E0); // 736 bytes (0x0002D8 - 0x0002E0)
static_assert(sizeof(FBPVariableMetaDataEntry) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(USCS_Node) == 0x00D8); // 216 bytes (0x000028 - 0x0000D8)
static_assert(sizeof(USelection) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(AServerStatReplicator) == 0x0390); // 912 bytes (0x0002C8 - 0x000390)
static_assert(sizeof(UShadowMapTexture2D) == 0x0110); // 272 bytes (0x000108 - 0x000110)
static_assert(sizeof(USimpleConstructionScript) == 0x00A0); // 160 bytes (0x000028 - 0x0000A0)
static_assert(sizeof(ASkeletalMeshActor) == 0x0350); // 848 bytes (0x0002C8 - 0x000350)
static_assert(sizeof(USkeletalMeshEditorData) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FBoneFilter) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSkeletalMeshLODGroupSettings) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(USkeletalMeshLODSettings) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(USkeletalMeshSimplificationSettings) == 0x0040); // 64 bytes (0x000038 - 0x000040)
static_assert(sizeof(USkeletalMeshSocket) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(FTentDistribution) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(USkyAtmosphereComponent) == 0x0340); // 832 bytes (0x000260 - 0x000340)
static_assert(sizeof(ASkyAtmosphere) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(USkyLightComponent) == 0x04B0); // 1200 bytes (0x0002C0 - 0x0004B0)
static_assert(sizeof(USlateBrushAsset) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(FSlateBrushResourceInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(USlateBrushResourceAsset) == 0x0080); // 128 bytes (0x000030 - 0x000080)
static_assert(sizeof(USlateTextureAtlasInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USmokeTestCommandlet) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(USoundAttenuation) == 0x03C8); // 968 bytes (0x000028 - 0x0003C8)
static_assert(sizeof(FSoundClassProperties) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FPassiveSoundMixModifier) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USoundClass) == 0x00E0); // 224 bytes (0x000028 - 0x0000E0)
static_assert(sizeof(USoundConcurrency) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(USoundCue) == 0x0590); // 1424 bytes (0x0001B8 - 0x000590)
static_assert(sizeof(FSourceEffectChainEntry) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(USoundEffectSourcePresetChain) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FSoundGroup) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USoundGroups) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(FAudioEffectParameters) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FAudioEQEffect) == 0x0040); // 64 bytes (0x000008 - 0x000040)
static_assert(sizeof(FSoundClassAdjuster) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USoundMix) == 0x0090); // 144 bytes (0x000028 - 0x000090)
static_assert(sizeof(USoundNodeAssetReferencer) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(USoundNodeAttenuation) == 0x03F8); // 1016 bytes (0x000048 - 0x0003F8)
static_assert(sizeof(USoundNodeBranch) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USoundNodeConcatenator) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeDelay) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(FDialogueWaveParameter) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USoundNodeDialoguePlayer) == 0x0070); // 112 bytes (0x000048 - 0x000070)
static_assert(sizeof(FDistanceDatum) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(USoundNodeDistanceCrossFade) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeDoppler) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeEnveloper) == 0x0190); // 400 bytes (0x000048 - 0x000190)
static_assert(sizeof(USoundNodeGroupControl) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeLooping) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USoundNodeMature) == 0x0048); // 72 bytes (0x000048 - 0x000048)
static_assert(sizeof(USoundNodeMixer) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeModulator) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(FModulatorContinuousParams) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(USoundNodeModulatorContinuous) == 0x0088); // 136 bytes (0x000048 - 0x000088)
static_assert(sizeof(USoundNodeOscillator) == 0x0070); // 112 bytes (0x000048 - 0x000070)
static_assert(sizeof(USoundNodeParamCrossFade) == 0x0060); // 96 bytes (0x000058 - 0x000060)
static_assert(sizeof(USoundNodeQualityLevel) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USoundNodeRandom) == 0x0078); // 120 bytes (0x000048 - 0x000078)
static_assert(sizeof(USoundNodeSoundClass) == 0x0058); // 88 bytes (0x000048 - 0x000058)
static_assert(sizeof(USoundNodeSwitch) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USoundNodeWaveParam) == 0x0050); // 80 bytes (0x000048 - 0x000050)
static_assert(sizeof(USoundNodeWavePlayer) == 0x0088); // 136 bytes (0x000048 - 0x000088)
static_assert(sizeof(USoundSourceBus) == 0x0390); // 912 bytes (0x000378 - 0x000390)
static_assert(sizeof(USoundSubmixBase) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(USoundSubmixWithParentBase) == 0x0058); // 88 bytes (0x000050 - 0x000058)
static_assert(sizeof(USoundSubmix) == 0x00A8); // 168 bytes (0x000058 - 0x0000A8)
static_assert(sizeof(USoundfieldSubmix) == 0x0080); // 128 bytes (0x000058 - 0x000080)
static_assert(sizeof(UEndpointSubmix) == 0x0068); // 104 bytes (0x000050 - 0x000068)
static_assert(sizeof(USoundfieldEndpointSubmix) == 0x0088); // 136 bytes (0x000050 - 0x000088)
static_assert(sizeof(ASpectatorPawn) == 0x0350); // 848 bytes (0x000350 - 0x000350)
static_assert(sizeof(ASphereReflectionCapture) == 0x02D8); // 728 bytes (0x0002D0 - 0x0002D8)
static_assert(sizeof(USphereReflectionCaptureComponent) == 0x02F0); // 752 bytes (0x0002D8 - 0x0002F0)
static_assert(sizeof(ASplineMeshActor) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(FSplineMeshParams) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(USplineMeshComponent) == 0x0680); // 1664 bytes (0x0005E0 - 0x000680)
static_assert(sizeof(USpotLightComponent) == 0x0410); // 1040 bytes (0x000408 - 0x000410)
static_assert(sizeof(FStaticMaterial) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UStaticMesh) == 0x0180); // 384 bytes (0x000068 - 0x000180)
static_assert(sizeof(UStaticMeshSocket) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(UStereoLayerShape) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UStereoLayerShapeQuad) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UStereoLayerShapeCylinder) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UStereoLayerShapeCubemap) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UStereoLayerShapeEquirect) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(FEquirectProps) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(UStereoLayerComponent) == 0x0350); // 848 bytes (0x000260 - 0x000350)
static_assert(sizeof(UStereoLayerFunctionLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UStringTable) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FSubsurfaceProfileStruct) == 0x008C); // 140 bytes (0x000000 - 0x00008C)
static_assert(sizeof(USubsurfaceProfile) == 0x00B8); // 184 bytes (0x000028 - 0x0000B8)
static_assert(sizeof(USubsystemBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(USubUVAnimation) == 0x0068); // 104 bytes (0x000028 - 0x000068)
static_assert(sizeof(USystemTimeTimecodeProvider) == 0x0040); // 64 bytes (0x000030 - 0x000040)
static_assert(sizeof(ATargetPoint) == 0x02C8); // 712 bytes (0x0002C8 - 0x0002C8)
static_assert(sizeof(UTextPropertyTestObject) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(ATextRenderActor) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(UTextRenderComponent) == 0x0590); // 1424 bytes (0x000538 - 0x000590)
static_assert(sizeof(UTexture2DArray) == 0x0140); // 320 bytes (0x0000E0 - 0x000140)
static_assert(sizeof(UTextureLightProfile) == 0x0110); // 272 bytes (0x000108 - 0x000110)
static_assert(sizeof(UTextureMipDataProviderFactory) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UTextureRenderTarget2DArray) == 0x0108); // 264 bytes (0x0000E8 - 0x000108)
static_assert(sizeof(UTextureRenderTargetCube) == 0x0100); // 256 bytes (0x0000E8 - 0x000100)
static_assert(sizeof(UTextureRenderTargetVolume) == 0x0108); // 264 bytes (0x0000E8 - 0x000108)
static_assert(sizeof(UThumbnailInfo) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FTimelineEventEntry) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FTimelineVectorTrack) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FTimelineFloatTrack) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FTimelineLinearColorTrack) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FTimeline) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(UTimelineComponent) == 0x0160); // 352 bytes (0x0000C0 - 0x000160)
static_assert(sizeof(FTTTrackBase) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FTTEventTrack) == 0x0028); // 40 bytes (0x000018 - 0x000028)
static_assert(sizeof(FTTPropertyTrack) == 0x0020); // 32 bytes (0x000018 - 0x000020)
static_assert(sizeof(FTTFloatTrack) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FTTVectorTrack) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FTTLinearColorTrack) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(UTimelineTemplate) == 0x00B0); // 176 bytes (0x000028 - 0x0000B0)
static_assert(sizeof(UTireType) == 0x0038); // 56 bytes (0x000030 - 0x000038)
static_assert(sizeof(FTouchInputControl) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(UTouchInterface) == 0x0058); // 88 bytes (0x000028 - 0x000058)
static_assert(sizeof(ATriggerBase) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(ATriggerBox) == 0x02D0); // 720 bytes (0x0002D0 - 0x0002D0)
static_assert(sizeof(ATriggerCapsule) == 0x02D0); // 720 bytes (0x0002D0 - 0x0002D0)
static_assert(sizeof(ATriggerSphere) == 0x02D0); // 720 bytes (0x0002D0 - 0x0002D0)
static_assert(sizeof(UTwitterIntegrationBase) == 0x0038); // 56 bytes (0x000038 - 0x000038)
static_assert(sizeof(UUserDefinedEnum) == 0x00B0); // 176 bytes (0x000060 - 0x0000B0)
static_assert(sizeof(UUserDefinedStruct) == 0x0108); // 264 bytes (0x0000C0 - 0x000108)
static_assert(sizeof(FHardwareCursorReference) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UUserInterfaceSettings) == 0x0270); // 624 bytes (0x000038 - 0x000270)
static_assert(sizeof(UVectorField) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UVectorFieldAnimated) == 0x0088); // 136 bytes (0x000048 - 0x000088)
static_assert(sizeof(UVectorFieldComponent) == 0x0560); // 1376 bytes (0x000538 - 0x000560)
static_assert(sizeof(UVectorFieldStatic) == 0x0098); // 152 bytes (0x000048 - 0x000098)
static_assert(sizeof(AVectorFieldVolume) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(UViewportStatsSubsystem) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UVirtualTexture) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(ULightMapVirtualTexture) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(URuntimeVirtualTextureStreamingProxy) == 0x0108); // 264 bytes (0x000108 - 0x000108)
static_assert(sizeof(FVirtualTextureBuildSettings) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UVirtualTexture2D) == 0x0118); // 280 bytes (0x000108 - 0x000118)
static_assert(sizeof(UVirtualTextureBuilder) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FVirtualTextureSpacePoolConfig) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UVirtualTexturePoolConfig) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UVisualLoggerAutomationTests) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVisualLoggerDebugSnapshotInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVisualLoggerKismetLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVoiceChannel) == 0x0080); // 128 bytes (0x000070 - 0x000080)
static_assert(sizeof(FVoiceSettings) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UVOIPTalker) == 0x00F8); // 248 bytes (0x0000C0 - 0x0000F8)
static_assert(sizeof(UVOIPStatics) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UVolumeComponent) == 0x0270); // 624 bytes (0x000260 - 0x000270)
static_assert(sizeof(UVolumeTexture) == 0x0138); // 312 bytes (0x0000E0 - 0x000138)
static_assert(sizeof(UVolumetricCloudComponent) == 0x02B0); // 688 bytes (0x000260 - 0x0002B0)
static_assert(sizeof(AVolumetricCloud) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(AVolumetricLightmapDensityVolume) == 0x0320); // 800 bytes (0x000318 - 0x000320)
static_assert(sizeof(AWindDirectionalSource) == 0x02D0); // 720 bytes (0x0002C8 - 0x0002D0)
static_assert(sizeof(UWindDirectionalSourceComponent) == 0x0280); // 640 bytes (0x000260 - 0x000280)
static_assert(sizeof(UWorldComposition) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(FMaterialProxySettings) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FMeshProxySettings) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FMeshMergingSettings) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FHierarchicalSimplification) == 0x0160); // 352 bytes (0x000000 - 0x000160)
static_assert(sizeof(UHierarchicalLODSetup) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(FSBTentDistribution) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSBEnvControlSettings) == 0x0B30); // 2864 bytes (0x000000 - 0x000B30)
static_assert(sizeof(FNetViewer) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(AWorldSettings) == 0x2100); // 8448 bytes (0x0002C8 - 0x002100)
static_assert(sizeof(FVectorDistribution) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FVector4Distribution) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FFloatRK4SpringInterpolator) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FVectorRK4SpringInterpolator) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FFormatArgumentData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FExpressionOutput) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FVector2MaterialInput) == 0x000C); // 12 bytes (0x00000C - 0x00000C)
static_assert(sizeof(FBranchingPointNotifyPayload) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FPlatformInterfaceData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FPlatformInterfaceDelegateResult) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FDebugFloatHistory) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FLatentActionInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FTimerHandle) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FCollisionProfileName) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FGenericStruct) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FUserActivity) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAnimNode_Base) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FInputRange) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FInputScaleBiasClamp) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FInputAlphaBoolBlend) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FInputScaleBias) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FPoseLinkBase) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FComponentSpacePoseLink) == 0x0010); // 16 bytes (0x000010 - 0x000010)
static_assert(sizeof(FAnimNode_AssetPlayerBase) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FBlendSampleData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FAnimNode_SequencePlayer) == 0x0088); // 136 bytes (0x000040 - 0x000088)
static_assert(sizeof(FTableRowBase) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FDataTableRowHandle) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPoseLink) == 0x0010); // 16 bytes (0x000010 - 0x000010)
static_assert(sizeof(FAnimInstanceProxy) == 0x0770); // 1904 bytes (0x000000 - 0x000770)
static_assert(sizeof(FKeyHandleLookupTable) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FAnimNode_CustomProperty) == 0x0058); // 88 bytes (0x000010 - 0x000058)
static_assert(sizeof(FComponentReference) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FQuartzPulseOverrideStep) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FQuartzTimeSignature) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FQuartzClockSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FActiveMorphTarget) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPoseSnapshot) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FActorComponentDuplicatedObjectData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FActorComponentInstanceData) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FSceneComponentInstanceData) == 0x00B8); // 184 bytes (0x000068 - 0x0000B8)
static_assert(sizeof(FPerBoneBlendWeight) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FAnimNode_Root) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FAnimCurveParam) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAnimationGroupReference) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAnimGroupInstance) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FAnimTickRecord) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FMarkerSyncAnimPosition) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FBlendFilter) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FAnimationRecordingSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FComponentSpacePose) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FLocalSpacePose) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FNamedTransform) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FNamedColor) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FNamedVector) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FNamedFloat) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAnimParentNodeAssetOverride) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAnimBlueprintDebugData) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FAnimationFrameSnapshot) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FStateMachineDebugData) == 0x00B0); // 176 bytes (0x000000 - 0x0000B0)
static_assert(sizeof(FStateMachineStateDebugData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRootMotionExtractionStep) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimationErrorStats) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FVectorCurve) == 0x0198); // 408 bytes (0x000018 - 0x000198)
static_assert(sizeof(FTransformCurve) == 0x04E0); // 1248 bytes (0x000018 - 0x0004E0)
static_assert(sizeof(FSlotEvaluationPose) == 0x00E0); // 224 bytes (0x000000 - 0x0000E0)
static_assert(sizeof(FA2Pose) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FA2CSPose) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FQueuedDrawDebugItem) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FAnimInstanceSubsystemData) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FAnimMontageInstance) == 0x01B0); // 432 bytes (0x000000 - 0x0001B0)
static_assert(sizeof(FAnimNode_ApplyMeshSpaceAdditive) == 0x00D0); // 208 bytes (0x000010 - 0x0000D0)
static_assert(sizeof(FAnimNode_Inertialization) == 0x0070); // 112 bytes (0x000010 - 0x000070)
static_assert(sizeof(FInertializationPoseDiff) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FInertializationCurveDiff) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FInertializationBoneDiff) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FInertializationPose) == 0x00A0); // 160 bytes (0x000000 - 0x0000A0)
static_assert(sizeof(FAnimNode_LinkedAnimGraph) == 0x00A0); // 160 bytes (0x000058 - 0x0000A0)
static_assert(sizeof(FAnimNode_LinkedAnimLayer) == 0x00B0); // 176 bytes (0x0000A0 - 0x0000B0)
static_assert(sizeof(FAnimNode_LinkedInputPose) == 0x0118); // 280 bytes (0x000010 - 0x000118)
static_assert(sizeof(FAnimNode_SaveCachedPose) == 0x0158); // 344 bytes (0x000010 - 0x000158)
static_assert(sizeof(FAnimNode_StateMachine) == 0x00B0); // 176 bytes (0x000010 - 0x0000B0)
static_assert(sizeof(FAnimationPotentialTransition) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FAnimationActiveTransitionEntry) == 0x00C8); // 200 bytes (0x000000 - 0x0000C8)
static_assert(sizeof(FAnimNode_TransitionPoseEvaluator) == 0x00F8); // 248 bytes (0x000010 - 0x0000F8)
static_assert(sizeof(FAnimNode_TransitionResult) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FAnimNode_UseCachedPose) == 0x0028); // 40 bytes (0x000010 - 0x000028)
static_assert(sizeof(FAnimNode_ConvertLocalToComponentSpace) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FAnimNode_ConvertComponentToLocalSpace) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FCompressedTrack) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FCurveTrack) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FScaleTrack) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FRotationTrack) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FTranslationTrack) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FRawAnimSequenceTrack) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FAnimSequenceTrackContainer) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FAnimSingleNodeInstanceProxy) == 0x08C0); // 2240 bytes (0x000770 - 0x0008C0)
static_assert(sizeof(FAnimNode_SingleNode) == 0x0030); // 48 bytes (0x000010 - 0x000030)
static_assert(sizeof(FAnimationTransitionRule) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimationState) == 0x0028); // 40 bytes (0x000008 - 0x000028)
static_assert(sizeof(FAnimNotifyTrack) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FPerBoneBlendWeights) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAssetImportInfo) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FAtmospherePrecomputeInstanceData) == 0x0160); // 352 bytes (0x0000B8 - 0x000160)
static_assert(sizeof(FAudioReverbEffect) == 0x0048); // 72 bytes (0x000008 - 0x000048)
static_assert(sizeof(FNavAvoidanceData) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FGridBlendSample) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FBPEditorBookmarkNode) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FEditedDocumentInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FBPInterfaceDescription) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBPVariableDescription) == 0x00D0); // 208 bytes (0x000000 - 0x0000D0)
static_assert(sizeof(FBlueprintMacroCosmeticInfo) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCompilerNativizationOptions) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(FEventGraphFastCallPair) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBlueprintDebugData) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FPointerToUberGraphFrame) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FDebuggingInfoForSingleFunction) == 0x0190); // 400 bytes (0x000000 - 0x000190)
static_assert(sizeof(FNodeToCodeAssociation) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FAnimCurveType) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FBookmarkBaseJumpToSettings) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FBookmarkJumpToSettings) == 0x0001); // 1 bytes (0x000001 - 0x000001)
static_assert(sizeof(FBookmark2DJumpToSettings) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCachedAnimTransitionData) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FCachedAnimRelevancyData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FCachedAnimAssetPlayerData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCachedAnimStateData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FCachedAnimStateArray) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCameraShakeDuration) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FCameraShakeInfo) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCameraShakeUpdateResult) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FCameraShakeUpdateParams) == 0x0650); // 1616 bytes (0x000000 - 0x000650)
static_assert(sizeof(FDummySpacerCameraTypes) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FCanvasIcon) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FWrappedStringElement) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FTextSizingParameters) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FCharacterNetworkSerializationPackedBits) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FCharacterMoveResponsePackedBits) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(FCharacterServerMovePackedBits) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(FChildActorAttachedActorInfo) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FChildActorComponentInstanceData) == 0x00E8); // 232 bytes (0x0000B8 - 0x0000E8)
static_assert(sizeof(FAutoCompleteNode) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FRuntimeCurveLinearColor) == 0x0208); // 520 bytes (0x000000 - 0x000208)
static_assert(sizeof(FNamedCurveValue) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FCurveTableRowHandle) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCustomAttribute) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FCustomAttributePerBoneData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FDataTableCategoryHandle) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FGraphReference) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FEdGraphPinReference) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FEdGraphSchemaAction) == 0x0100); // 256 bytes (0x000000 - 0x000100)
static_assert(sizeof(FEdGraphSchemaAction_NewNode) == 0x0108); // 264 bytes (0x000100 - 0x000108)
static_assert(sizeof(FScreenMessageString) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FURL) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FFullyLoadedPackagesInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FLevelStreamingStatus) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FNamedNetDriver) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FWorldContext) == 0x0288); // 648 bytes (0x000000 - 0x000288)
static_assert(sizeof(FExposureSettings) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FTickPrerequisite) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FCanvasUVTri) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FDepthFieldGlowInfo) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FFontRenderInfo) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FDamageEvent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRadialDamageParams) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FRadialDamageEvent) == 0x0040); // 64 bytes (0x000010 - 0x000040)
static_assert(sizeof(FPointDamageEvent) == 0x00B0); // 176 bytes (0x000010 - 0x0000B0)
static_assert(sizeof(FMeshBuildSettings) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FPOV) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FAnimUpdateRateParameters) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FAnimSlotDesc) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FAnimSlotInfo) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMTDResult) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FOverlapResult) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSwarmDebugOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FLightmassDebugOptions) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FBasedPosition) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FFractureEffect) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRigidBodyContactInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FCollisionImpactData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FRigidBodyState) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FForceFeedbackParameters) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FPredictProjectilePathPointData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FPredictProjectilePathResult) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FPredictProjectilePathParams) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FActiveHapticFeedbackEffect) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FClusterNode) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FClusterNode_DEPRECATED) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FHLODISMComponentDesc) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FImportanceTexture) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FInstancedStaticMeshLightMapInstanceData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FInstancedStaticMeshComponentInstanceData) == 0x0150); // 336 bytes (0x0000B8 - 0x000150)
static_assert(sizeof(FInterpEdSelKey) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCameraPreviewInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FSubTrackGroup) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FSupportedSubTrackInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FVectorSpringState) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FFloatSpringState) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FDrawToRenderTargetContext) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FLatentActionManager) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FLevelSimplificationDetails) == 0x012C); // 300 bytes (0x000000 - 0x00012C)
static_assert(sizeof(FStreamableTextureInstance) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FDynamicTextureInstance) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FPrecomputedLightInstanceData) == 0x0110); // 272 bytes (0x0000B8 - 0x000110)
static_assert(sizeof(FBatchedPoint) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FBatchedLine) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(FClientReceiveData) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FParameterGroupData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FStaticComponentMaskValue) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FParameterChannelNames) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FFunctionExpressionOutput) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FFunctionExpressionInput) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FScalarParameterAtlasInstanceData) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FMemberReference) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FMeshInstancingSettings) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMeshReductionSettings) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(FNameCurveKey) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FNameCurve) == 0x0078); // 120 bytes (0x000068 - 0x000078)
static_assert(sizeof(FNavDataConfig) == 0x0078); // 120 bytes (0x000030 - 0x000078)
static_assert(sizeof(FPacketSimulationSettings) == 0x0034); // 52 bytes (0x000000 - 0x000034)
static_assert(sizeof(FFastArraySerializer) == 0x0108); // 264 bytes (0x000000 - 0x000108)
static_assert(sizeof(FFastArraySerializerItem) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FParticleCurvePair) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBeamTargetData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FParticleSystemWorldManagerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FParticleSystemReplayFrame) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FParticleEmitterReplayFrame) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FFreezablePerPlatformInt) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FCameraFadeEntry) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FViewTargetTransitionParams) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FUpdateLevelStreamingLevelStatus) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPlayerMuteList) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FPreviewAttachedObjectPair) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FPreviewAssetAttachContainer) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FPrimitiveComponentInstanceData) == 0x0100); // 256 bytes (0x0000B8 - 0x000100)
static_assert(sizeof(FSpriteCategoryInfo) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FQuartzQuantizationBoundary) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FQuartzTransportTimeStamp) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FLevelNameAndTime) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FCompressedRichCurve) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FRootMotionSourceStatus) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FRootMotionFinishVelocitySettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FRootMotionSource) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FRootMotionSource_JumpForce) == 0x00D0); // 208 bytes (0x000098 - 0x0000D0)
static_assert(sizeof(FRootMotionSource_MoveToDynamicForce) == 0x00D0); // 208 bytes (0x000098 - 0x0000D0)
static_assert(sizeof(FRootMotionSource_MoveToForce) == 0x00C0); // 192 bytes (0x000098 - 0x0000C0)
static_assert(sizeof(FRootMotionSource_RadialForce) == 0x00E0); // 224 bytes (0x000098 - 0x0000E0)
static_assert(sizeof(FRootMotionSource_ConstantForce) == 0x00B0); // 176 bytes (0x000098 - 0x0000B0)
static_assert(sizeof(FSBEnvControlSettingsExtraValue) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FCameraExposureSettings) == 0x0040); // 64 bytes (0x000000 - 0x000040)
static_assert(sizeof(FGaussianSumBloomSettings) == 0x0084); // 132 bytes (0x000000 - 0x000084)
static_assert(sizeof(FConvolutionBloomSettings) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FLensBloomSettings) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FLensImperfectionSettings) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FLensSettings) == 0x00E0); // 224 bytes (0x000000 - 0x0000E0)
static_assert(sizeof(FFilmStockSettings) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FColorGradePerRangeSettings) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FColorGradingSettings) == 0x0150); // 336 bytes (0x000000 - 0x000150)
static_assert(sizeof(FSceneViewExtensionIsActiveFunctor) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FClothPhysicsProperties_Legacy) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FClothingAssetData_Legacy) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FSkeletalMeshClothBuildParams) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FBoneMirrorExport) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FSkeletalMeshComponentClothTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FSkeletalMeshComponentEndPhysicsTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FNameMapping) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FRigConfiguration) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FBoneReductionSetting) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FReferencePose) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSkeletonToMeshLinkup) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSkelMeshSkinWeightInfo) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(FSkinWeightProfileManagerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FPrecomputedSkyLightInstanceData) == 0x0170); // 368 bytes (0x0000B8 - 0x000170)
static_assert(sizeof(FSmartNameMapping) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FCurveMetaData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FSoundClassEditorData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSoundNodeEditorData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FSoundSubmixSpectralAnalysisBandSettings) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSoundWaveEnvelopeDataPerSound) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FSoundWaveSpectralData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FSoundWaveSpectralDataPerSound) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FStreamedAudioPlatformData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FSplineInstanceData) == 0x01A0); // 416 bytes (0x0000B8 - 0x0001A0)
static_assert(sizeof(FSplinePoint) == 0x0044); // 68 bytes (0x000000 - 0x000044)
static_assert(sizeof(FSplineMeshInstanceData) == 0x00E8); // 232 bytes (0x0000B8 - 0x0000E8)
static_assert(sizeof(FMaterialRemapIndex) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FAssetEditorOrbitCameraPosition) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMeshSectionInfo) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMeshSectionInfoMap) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FStaticMeshSourceModel) == 0x0070); // 112 bytes (0x000000 - 0x000070)
static_assert(sizeof(FStaticMeshOptimizationSettings) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FPaintedVertex) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FStaticMeshVertexColorLODData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FStaticMeshComponentInstanceData) == 0x0140); // 320 bytes (0x000100 - 0x000140)
static_assert(sizeof(FTextureFormatSettings) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FTexturePlatformData) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FTextureSource) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FTextureSourceBlock) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FStreamingRenderAssetPrimitiveInfo) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FTTTrackId) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FTimeStretchCurveInstance) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FUpdateLevelVisibilityLevelInfo) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FEndPhysicsTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FStartPhysicsTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FLevelViewportInfo) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FWorldSectorManagerTickFunction) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FLightmassWorldInfoSettings) == 0x004C); // 76 bytes (0x000000 - 0x00004C)
static_assert(sizeof(UVisual) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FWidgetTransform) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UWidget) == 0x0108); // 264 bytes (0x000028 - 0x000108)
static_assert(sizeof(UPanelWidget) == 0x0120); // 288 bytes (0x000108 - 0x000120)
static_assert(sizeof(UContentWidget) == 0x0120); // 288 bytes (0x000120 - 0x000120)
static_assert(sizeof(UPanelSlot) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FNamedSlotBinding) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FAnimationEventBinding) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UUserWidget) == 0x0280); // 640 bytes (0x000108 - 0x000280)
static_assert(sizeof(UComboBoxString) == 0x0EC8); // 3784 bytes (0x000108 - 0x000EC8)
static_assert(sizeof(FUserWidgetPool) == 0x0080); // 128 bytes (0x000000 - 0x000080)
static_assert(sizeof(UListViewBase) == 0x0218); // 536 bytes (0x000108 - 0x000218)
static_assert(sizeof(UListView) == 0x0890); // 2192 bytes (0x000218 - 0x000890)
static_assert(sizeof(FShapedTextOptions) == 0x0003); // 3 bytes (0x000000 - 0x000003)
static_assert(sizeof(UTextLayoutWidget) == 0x0128); // 296 bytes (0x000108 - 0x000128)
static_assert(sizeof(URichTextBlock) == 0x06F0); // 1776 bytes (0x000128 - 0x0006F0)
static_assert(sizeof(UAsyncTaskDownloadImage) == 0x0050); // 80 bytes (0x000030 - 0x000050)
static_assert(sizeof(UBackgroundBlur) == 0x01E0); // 480 bytes (0x000120 - 0x0001E0)
static_assert(sizeof(UBackgroundBlurSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(FDynamicPropertyPath) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UPropertyBinding) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(UBoolBinding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UBorder) == 0x0278); // 632 bytes (0x000120 - 0x000278)
static_assert(sizeof(UBorderSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UBrushBinding) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UButton) == 0x0460); // 1120 bytes (0x000120 - 0x000460)
static_assert(sizeof(UButtonSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UCanvasPanel) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(FAnchorData) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UCanvasPanelSlot) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UCheckBox) == 0x07B8); // 1976 bytes (0x000120 - 0x0007B8)
static_assert(sizeof(UCheckedStateBinding) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UCircularThrobber) == 0x01C8); // 456 bytes (0x000108 - 0x0001C8)
static_assert(sizeof(UColorBinding) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UComboBox) == 0x0140); // 320 bytes (0x000108 - 0x000140)
static_assert(sizeof(UDragDropOperation) == 0x0088); // 136 bytes (0x000028 - 0x000088)
static_assert(sizeof(FSlateChildSize) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FRadialBoxSettings) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(UDynamicEntryBoxBase) == 0x01D8); // 472 bytes (0x000108 - 0x0001D8)
static_assert(sizeof(UDynamicEntryBox) == 0x01E0); // 480 bytes (0x0001D8 - 0x0001E0)
static_assert(sizeof(UEditableText) == 0x0488); // 1160 bytes (0x000108 - 0x000488)
static_assert(sizeof(UEditableTextBox) == 0x0AB0); // 2736 bytes (0x000108 - 0x000AB0)
static_assert(sizeof(UExpandableArea) == 0x0350); // 848 bytes (0x000108 - 0x000350)
static_assert(sizeof(UFloatBinding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UGridPanel) == 0x0150); // 336 bytes (0x000120 - 0x000150)
static_assert(sizeof(UGridSlot) == 0x0070); // 112 bytes (0x000038 - 0x000070)
static_assert(sizeof(UHorizontalBox) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UHorizontalBoxSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UImage) == 0x0240); // 576 bytes (0x000108 - 0x000240)
static_assert(sizeof(UInputKeySelector) == 0x0748); // 1864 bytes (0x000108 - 0x000748)
static_assert(sizeof(UInt32Binding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UInvalidationBox) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(UUserListEntry) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UUserListEntryLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UUserObjectListEntry) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UUserObjectListEntryLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UListViewDesignerPreviewItem) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMenuAnchor) == 0x0170); // 368 bytes (0x000120 - 0x000170)
static_assert(sizeof(UMouseCursorBinding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UMovieSceneEntitySystem) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(UMovieScenePropertySystem) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMovieScene2DTransformPropertySystem) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UMovieSceneSignedObject) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(FMovieSceneSectionEvalOptions) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(FMovieSceneEasingSettings) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FMovieSceneFrameRange) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FOptionalMovieSceneBlendType) == 0x0002); // 2 bytes (0x000000 - 0x000002)
static_assert(sizeof(UMovieSceneSection) == 0x00E8); // 232 bytes (0x000050 - 0x0000E8)
static_assert(sizeof(FMovieScene2DTransformMask) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneChannel) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneTangentData) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FMovieSceneFloatValue) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FMovieSceneKeyHandleMap) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(FMovieSceneFloatChannel) == 0x00A0); // 160 bytes (0x000008 - 0x0000A0)
static_assert(sizeof(UMovieScene2DTransformSection) == 0x0558); // 1368 bytes (0x0000E8 - 0x000558)
static_assert(sizeof(FMovieSceneTrackEvalOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneTrackEvaluationFieldEntry) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMovieSceneTrackEvaluationField) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMovieSceneTrack) == 0x0078); // 120 bytes (0x000050 - 0x000078)
static_assert(sizeof(UMovieSceneNameableTrack) == 0x0078); // 120 bytes (0x000078 - 0x000078)
static_assert(sizeof(FMovieScenePropertyBinding) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(UMovieScenePropertyTrack) == 0x00A8); // 168 bytes (0x000078 - 0x0000A8)
static_assert(sizeof(UMovieScene2DTransformTrack) == 0x00A8); // 168 bytes (0x0000A8 - 0x0000A8)
static_assert(sizeof(UMovieSceneMarginSection) == 0x0368); // 872 bytes (0x0000E8 - 0x000368)
static_assert(sizeof(UMovieSceneMarginTrack) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(UMovieSceneMaterialTrack) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UMovieSceneWidgetMaterialTrack) == 0x00A8); // 168 bytes (0x000088 - 0x0000A8)
static_assert(sizeof(UMultiLineEditableText) == 0x0498); // 1176 bytes (0x000128 - 0x000498)
static_assert(sizeof(UMultiLineEditableTextBox) == 0x0D30); // 3376 bytes (0x000128 - 0x000D30)
static_assert(sizeof(UNamedSlot) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UNamedSlotInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNativeWidgetHost) == 0x0118); // 280 bytes (0x000108 - 0x000118)
static_assert(sizeof(UOverlay) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UOverlaySlot) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UProgressBar) == 0x0348); // 840 bytes (0x000108 - 0x000348)
static_assert(sizeof(URetainerBox) == 0x0158); // 344 bytes (0x000120 - 0x000158)
static_assert(sizeof(URichTextBlockDecorator) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(URichTextBlockImageDecorator) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(USafeZone) == 0x0138); // 312 bytes (0x000120 - 0x000138)
static_assert(sizeof(USafeZoneSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UScaleBox) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UScaleBoxSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UScrollBar) == 0x0658); // 1624 bytes (0x000108 - 0x000658)
static_assert(sizeof(UScrollBox) == 0x08E8); // 2280 bytes (0x000120 - 0x0008E8)
static_assert(sizeof(UScrollBoxSlot) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(USizeBox) == 0x0158); // 344 bytes (0x000120 - 0x000158)
static_assert(sizeof(USizeBoxSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(USlateBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FSlateMeshVertex) == 0x003C); // 60 bytes (0x000000 - 0x00003C)
static_assert(sizeof(USlateVectorArtData) == 0x0060); // 96 bytes (0x000028 - 0x000060)
static_assert(sizeof(USlateAccessibleWidgetData) == 0x0080); // 128 bytes (0x000028 - 0x000080)
static_assert(sizeof(USlider) == 0x0548); // 1352 bytes (0x000108 - 0x000548)
static_assert(sizeof(USpacer) == 0x0120); // 288 bytes (0x000108 - 0x000120)
static_assert(sizeof(USpinBox) == 0x0550); // 1360 bytes (0x000108 - 0x000550)
static_assert(sizeof(UTextBinding) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UTextBlock) == 0x02D8); // 728 bytes (0x000128 - 0x0002D8)
static_assert(sizeof(UThrobber) == 0x01B8); // 440 bytes (0x000108 - 0x0001B8)
static_assert(sizeof(UTileView) == 0x08B8); // 2232 bytes (0x000890 - 0x0008B8)
static_assert(sizeof(UTreeView) == 0x08E8); // 2280 bytes (0x000890 - 0x0008E8)
static_assert(sizeof(FMovieSceneSequenceID) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneRootEvaluationTemplateInstance) == 0x00E8); // 232 bytes (0x000000 - 0x0000E8)
static_assert(sizeof(UUMGSequencePlayer) == 0x0580); // 1408 bytes (0x000028 - 0x000580)
static_assert(sizeof(UUMGSequenceTickManager) == 0x0120); // 288 bytes (0x000028 - 0x000120)
static_assert(sizeof(UUniformGridPanel) == 0x0148); // 328 bytes (0x000120 - 0x000148)
static_assert(sizeof(UUniformGridSlot) == 0x0050); // 80 bytes (0x000038 - 0x000050)
static_assert(sizeof(UVerticalBox) == 0x0130); // 304 bytes (0x000120 - 0x000130)
static_assert(sizeof(UVerticalBoxSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UViewport) == 0x0168); // 360 bytes (0x000120 - 0x000168)
static_assert(sizeof(UVisibilityBinding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(UMovieSceneSequence) == 0x0060); // 96 bytes (0x000050 - 0x000060)
static_assert(sizeof(FWidgetAnimationBinding) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(UWidgetAnimation) == 0x0090); // 144 bytes (0x000060 - 0x000090)
static_assert(sizeof(FBlueprintWidgetAnimationDelegateBinding) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(UWidgetAnimationDelegateBinding) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UWidgetAnimationPlayCallbackProxy) == 0x0048); // 72 bytes (0x000028 - 0x000048)
static_assert(sizeof(UWidgetBinding) == 0x0060); // 96 bytes (0x000060 - 0x000060)
static_assert(sizeof(FDelegateRuntimeBinding) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(UWidgetBlueprintGeneratedClass) == 0x0368); // 872 bytes (0x000328 - 0x000368)
static_assert(sizeof(UWidgetBlueprintLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UWidgetComponent) == 0x0690); // 1680 bytes (0x000560 - 0x000690)
static_assert(sizeof(UWidgetInteractionComponent) == 0x0460); // 1120 bytes (0x000260 - 0x000460)
static_assert(sizeof(UWidgetLayoutLibrary) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FWidgetNavigationData) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(UWidgetNavigation) == 0x0100); // 256 bytes (0x000028 - 0x000100)
static_assert(sizeof(UWidgetSwitcher) == 0x0158); // 344 bytes (0x000120 - 0x000158)
static_assert(sizeof(UWidgetSwitcherSlot) == 0x0058); // 88 bytes (0x000038 - 0x000058)
static_assert(sizeof(UWidgetTree) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(UWindowTitleBarArea) == 0x0140); // 320 bytes (0x000120 - 0x000140)
static_assert(sizeof(UWindowTitleBarAreaSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(UWrapBox) == 0x0148); // 328 bytes (0x000120 - 0x000148)
static_assert(sizeof(UWrapBoxSlot) == 0x0060); // 96 bytes (0x000038 - 0x000060)
static_assert(sizeof(FEventReply) == 0x00B8); // 184 bytes (0x000000 - 0x0000B8)
static_assert(sizeof(FPaintContext) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneEvalTemplateBase) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEvalTemplate) == 0x0020); // 32 bytes (0x000010 - 0x000020)
static_assert(sizeof(FMovieScenePropertySectionData) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieScenePropertySectionTemplate) == 0x0038); // 56 bytes (0x000020 - 0x000038)
static_assert(sizeof(FMovieSceneMarginSectionTemplate) == 0x02C0); // 704 bytes (0x000038 - 0x0002C0)
static_assert(sizeof(FScalarParameterNameAndCurve) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FMovieSceneBoolChannel) == 0x0090); // 144 bytes (0x000008 - 0x000090)
static_assert(sizeof(FBoolParameterNameAndCurve) == 0x0098); // 152 bytes (0x000000 - 0x000098)
static_assert(sizeof(FVector2DParameterNameAndCurves) == 0x0148); // 328 bytes (0x000000 - 0x000148)
static_assert(sizeof(FVectorParameterNameAndCurves) == 0x01E8); // 488 bytes (0x000000 - 0x0001E8)
static_assert(sizeof(FColorParameterNameAndCurves) == 0x0288); // 648 bytes (0x000000 - 0x000288)
static_assert(sizeof(FTransformParameterNameAndCurves) == 0x05A8); // 1448 bytes (0x000000 - 0x0005A8)
static_assert(sizeof(FMovieSceneParameterSectionTemplate) == 0x0080); // 128 bytes (0x000020 - 0x000080)
static_assert(sizeof(FMovieSceneWidgetMaterialSectionTemplate) == 0x0090); // 144 bytes (0x000080 - 0x000090)
static_assert(sizeof(FRichTextStyleRow) == 0x0298); // 664 bytes (0x000008 - 0x000298)
static_assert(sizeof(FRichImageRow) == 0x00A0); // 160 bytes (0x000008 - 0x0000A0)
static_assert(sizeof(FWidgetComponentInstanceData) == 0x00C8); // 200 bytes (0x0000B8 - 0x0000C8)
static_assert(sizeof(FMovieSceneSequenceLoopCount) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneSequencePlaybackSettings) == 0x0068); // 104 bytes (0x000000 - 0x000068)
static_assert(sizeof(FMovieSceneSequenceReplProperties) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMovieSceneSequencePlayer) == 0x06D8); // 1752 bytes (0x000028 - 0x0006D8)
static_assert(sizeof(FMovieSceneSectionParameters) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(UMovieSceneSubSection) == 0x0160); // 352 bytes (0x0000E8 - 0x000160)
static_assert(sizeof(UMovieSceneSubTrack) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UMovieSceneCustomClockSource) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneEntityProvider) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieScenePlaybackClient) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneTrackTemplateProducer) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UNodeAndChannelMappings) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneNodeGroup) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneNodeGroupCollection) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FMovieSceneSpawnable) == 0x0090); // 144 bytes (0x000000 - 0x000090)
static_assert(sizeof(FMovieScenePossessable) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FMovieSceneBinding) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneObjectBindingID) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieSceneObjectBindingIDs) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneMarkedFrame) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(UMovieScene) == 0x0150); // 336 bytes (0x000050 - 0x000150)
static_assert(sizeof(FMovieSceneBindingOverrideData) == 0x0024); // 36 bytes (0x000000 - 0x000024)
static_assert(sizeof(UMovieSceneBindingOverrides) == 0x0090); // 144 bytes (0x000028 - 0x000090)
static_assert(sizeof(UMovieSceneBindingOwnerInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneBlenderSystem) == 0x0060); // 96 bytes (0x000040 - 0x000060)
static_assert(sizeof(UMovieSceneBoolSection) == 0x0180); // 384 bytes (0x0000E8 - 0x000180)
static_assert(sizeof(UMovieSceneEntityInstantiatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneGenericBoundObjectInstantiator) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneBoundSceneComponentInstantiator) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneSceneComponentImpersonator) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FMovieSceneTrackIdentifier) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneEvalTemplatePtr) == 0x0088); // 136 bytes (0x000000 - 0x000088)
static_assert(sizeof(FMovieSceneTrackImplementationPtr) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FMovieSceneEvaluationTrack) == 0x0078); // 120 bytes (0x000000 - 0x000078)
static_assert(sizeof(FMovieSceneEvaluationTemplateSerialNumber) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneTemplateGenerationLedger) == 0x00A8); // 168 bytes (0x000000 - 0x0000A8)
static_assert(sizeof(FMovieSceneEvaluationTemplate) == 0x0160); // 352 bytes (0x000000 - 0x000160)
static_assert(sizeof(FMovieSceneSequenceHierarchyNode) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieSceneSubSequenceTree) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FMovieSceneTimeTransform) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneTimeWarping) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneNestedSequenceTransform) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FMovieSceneSequenceTransform) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMovieSceneSequenceInstanceDataPtr) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieSceneSubSequenceData) == 0x00E8); // 232 bytes (0x000000 - 0x0000E8)
static_assert(sizeof(FMovieSceneSequenceHierarchy) == 0x0118); // 280 bytes (0x000000 - 0x000118)
static_assert(sizeof(FMovieSceneEvaluationFieldEntityTree) == 0x0060); // 96 bytes (0x000000 - 0x000060)
static_assert(sizeof(FMovieSceneEvaluationFieldEntityKey) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneEvaluationFieldEntity) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEvaluationFieldEntityMetaData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneEvaluationFieldSharedEntityMetaData) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEntityComponentField) == 0x00F0); // 240 bytes (0x000000 - 0x0000F0)
static_assert(sizeof(FMovieSceneEvaluationGroupLUTIndex) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneEvaluationFieldTrackPtr) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneFieldEntry_EvaluationTrack) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneFieldEntry_ChildTemplate) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneEvaluationGroup) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneEvaluationKey) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneOrderedEvaluationKey) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEvaluationMetaData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMovieSceneEvaluationField) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneSequenceCompilerMaskStruct) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(UMovieSceneCompiledData) == 0x03F8); // 1016 bytes (0x000028 - 0x0003F8)
static_assert(sizeof(UMovieSceneCompiledDataManager) == 0x0230); // 560 bytes (0x000028 - 0x000230)
static_assert(sizeof(UMovieSceneFloatDecomposer) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneBuiltInEasingFunction) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UMovieSceneEasingExternalCurve) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(UMovieSceneEasingFunction) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(FMovieSceneEntitySystemGraphNodes) == 0x0038); // 56 bytes (0x000000 - 0x000038)
static_assert(sizeof(FMovieSceneEntitySystemGraph) == 0x0138); // 312 bytes (0x000000 - 0x000138)
static_assert(sizeof(UMovieSceneEntitySystemLinker) == 0x0458); // 1112 bytes (0x000028 - 0x000458)
static_assert(sizeof(UMovieSceneEvalTimeSystem) == 0x0050); // 80 bytes (0x000040 - 0x000050)
static_assert(sizeof(UMovieSceneFolder) == 0x0070); // 112 bytes (0x000028 - 0x000070)
static_assert(sizeof(UMovieSceneKeyProxy) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneMasterInstantiatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieScenePreAnimatedStateSystemInterface) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieSceneCachePreAnimatedStateSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneRestorePreAnimatedStateSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneSequenceTickManager) == 0x0120); // 288 bytes (0x000028 - 0x000120)
static_assert(sizeof(UMovieSceneSpawnablesSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneSpawnSection) == 0x0188); // 392 bytes (0x000180 - 0x000188)
static_assert(sizeof(UMovieSceneSpawnTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(UTestMovieSceneTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(UTestMovieSceneSection) == 0x00E8); // 232 bytes (0x0000E8 - 0x0000E8)
static_assert(sizeof(UTestMovieSceneSequence) == 0x0068); // 104 bytes (0x000060 - 0x000068)
static_assert(sizeof(UTestMovieSceneSubTrack) == 0x0098); // 152 bytes (0x000088 - 0x000098)
static_assert(sizeof(UTestMovieSceneSubSection) == 0x0160); // 352 bytes (0x000160 - 0x000160)
static_assert(sizeof(FMovieSceneTrackInstanceInput) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMovieSceneTrackInstance) == 0x0050); // 80 bytes (0x000028 - 0x000050)
static_assert(sizeof(UMovieSceneTrackInstanceInstantiator) == 0x00F0); // 240 bytes (0x000040 - 0x0000F0)
static_assert(sizeof(UMovieSceneTrackInstanceSystem) == 0x0048); // 72 bytes (0x000040 - 0x000048)
static_assert(sizeof(FMovieSceneByteChannel) == 0x0098); // 152 bytes (0x000008 - 0x000098)
static_assert(sizeof(FMovieSceneIntegerChannel) == 0x0090); // 144 bytes (0x000008 - 0x000090)
static_assert(sizeof(FMovieSceneTrackImplementation) == 0x0010); // 16 bytes (0x000010 - 0x000010)
static_assert(sizeof(FMovieSceneSequenceInstanceData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneEvaluationOperand) == 0x0014); // 20 bytes (0x000000 - 0x000014)
static_assert(sizeof(FMovieSceneKeyStruct) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FTrackInstanceInputComponent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneTrackInstanceComponent) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FEasingComponentData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneSectionGroup) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneTrackLabels) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneExpansionState) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FMovieSceneEditorData) == 0x00F0); // 240 bytes (0x000000 - 0x0000F0)
static_assert(sizeof(FMovieSceneTimecodeSource) == 0x0018); // 24 bytes (0x000000 - 0x000018)
static_assert(sizeof(FMovieSceneEntitySystemGraphNode) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMovieSceneEmptyStruct) == 0x0001); // 1 bytes (0x000000 - 0x000001)
static_assert(sizeof(FMovieSceneSegmentIdentifier) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneEvaluationFieldSegmentPtr) == 0x000C); // 12 bytes (0x000008 - 0x00000C)
static_assert(sizeof(FMovieSceneSubSectionData) == 0x001C); // 28 bytes (0x000000 - 0x00001C)
static_assert(sizeof(FMovieSceneKeyTimeStruct) == 0x0028); // 40 bytes (0x000008 - 0x000028)
static_assert(sizeof(FGeneratedMovieSceneKeyStruct) == 0x0050); // 80 bytes (0x000000 - 0x000050)
static_assert(sizeof(FMovieSceneObjectPathChannelKeyValue) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneObjectPathChannel) == 0x00C0); // 192 bytes (0x000008 - 0x0000C0)
static_assert(sizeof(FMovieSceneSegment) == 0x0058); // 88 bytes (0x000000 - 0x000058)
static_assert(sizeof(FSectionEvaluationData) == 0x000C); // 12 bytes (0x000000 - 0x00000C)
static_assert(sizeof(FMovieSceneSubSequenceTreeEntry) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneSequencePlaybackParams) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMovieSceneWarpCounter) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FTestMovieSceneEvalTemplate) == 0x0020); // 32 bytes (0x000020 - 0x000020)
static_assert(sizeof(FMovieSceneTrackDisplayOptions) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(FMovieSceneTrackInstanceEntry) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(UMovieSceneParameterSection) == 0x0148); // 328 bytes (0x0000E8 - 0x000148)
static_assert(sizeof(UMovieSceneBoolTrack) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(UMovieSceneEventSectionBase) == 0x00F0); // 240 bytes (0x0000E8 - 0x0000F0)
static_assert(sizeof(UFloatChannelEvaluatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneTransformOrigin) == 0x0028); // 40 bytes (0x000028 - 0x000028)
static_assert(sizeof(UMovieScene3DConstraintSection) == 0x0110); // 272 bytes (0x0000E8 - 0x000110)
static_assert(sizeof(UMovieScene3DAttachSection) == 0x0130); // 304 bytes (0x000110 - 0x000130)
static_assert(sizeof(UMovieScene3DConstraintTrack) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UMovieScene3DAttachTrack) == 0x0088); // 136 bytes (0x000088 - 0x000088)
static_assert(sizeof(UMovieScene3DPathSection) == 0x01B8); // 440 bytes (0x000110 - 0x0001B8)
static_assert(sizeof(UMovieScene3DPathTrack) == 0x0090); // 144 bytes (0x000088 - 0x000090)
static_assert(sizeof(UMovieScene3DTransformPropertySystem) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(FMovieSceneTransformMask) == 0x0004); // 4 bytes (0x000000 - 0x000004)
static_assert(sizeof(UMovieScene3DTransformSection) == 0x0740); // 1856 bytes (0x0000E8 - 0x000740)
static_assert(sizeof(UMovieScene3DTransformTrack) == 0x00A8); // 168 bytes (0x0000A8 - 0x0000A8)
static_assert(sizeof(FMovieSceneActorReferenceKey) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMovieSceneActorReferenceData) == 0x00B0); // 176 bytes (0x000008 - 0x0000B0)
static_assert(sizeof(UMovieSceneActorReferenceSection) == 0x0228); // 552 bytes (0x0000E8 - 0x000228)
static_assert(sizeof(UMovieSceneActorReferenceTrack) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(UMovieSceneAudioSection) == 0x0350); // 848 bytes (0x0000E8 - 0x000350)
static_assert(sizeof(UMovieSceneAudioTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UMovieSceneBaseValueEvaluatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneByteSection) == 0x0180); // 384 bytes (0x0000E8 - 0x000180)
static_assert(sizeof(UMovieSceneByteTrack) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(FMovieSceneCameraAnimSectionData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UMovieSceneCameraAnimSection) == 0x0128); // 296 bytes (0x0000E8 - 0x000128)
static_assert(sizeof(UMovieSceneCameraAnimTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UMovieSceneCameraCutSection) == 0x02A0); // 672 bytes (0x0000E8 - 0x0002A0)
static_assert(sizeof(UMovieSceneCameraCutTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UMovieSceneCameraCutTrackInstance) == 0x00B8); // 184 bytes (0x000050 - 0x0000B8)
static_assert(sizeof(FMovieSceneCameraShakeSectionData) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(UMovieSceneCameraShakeSection) == 0x0128); // 296 bytes (0x0000E8 - 0x000128)
static_assert(sizeof(UMovieSceneCameraShakeSourceShakeSection) == 0x0108); // 264 bytes (0x0000E8 - 0x000108)
static_assert(sizeof(UMovieSceneCameraShakeSourceShakeTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(FMovieSceneCameraShakeSourceTrigger) == 0x0020); // 32 bytes (0x000000 - 0x000020)
static_assert(sizeof(FMovieSceneCameraShakeSourceTriggerChannel) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(UMovieSceneCameraShakeSourceTriggerSection) == 0x0170); // 368 bytes (0x0000E8 - 0x000170)
static_assert(sizeof(UMovieSceneCameraShakeSourceTriggerTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UMovieSceneCameraShakeTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UMovieSceneCinematicShotSection) == 0x0188); // 392 bytes (0x000160 - 0x000188)
static_assert(sizeof(UMovieSceneCinematicShotTrack) == 0x0088); // 136 bytes (0x000088 - 0x000088)
static_assert(sizeof(UMovieSceneColorSection) == 0x0368); // 872 bytes (0x0000E8 - 0x000368)
static_assert(sizeof(UMovieSceneColorTrack) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(UMovieSceneComponentAttachmentInvalidatorSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneComponentAttachmentSystem) == 0x01C0); // 448 bytes (0x000040 - 0x0001C0)
static_assert(sizeof(UMovieSceneComponentMobilitySystem) == 0x0220); // 544 bytes (0x000040 - 0x000220)
static_assert(sizeof(UMovieScenePreAnimatedComponentTransformSystem) == 0x01C0); // 448 bytes (0x000040 - 0x0001C0)
static_assert(sizeof(UMovieSceneComponentTransformSystem) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UMovieSceneEnumSection) == 0x0180); // 384 bytes (0x0000E8 - 0x000180)
static_assert(sizeof(UMovieSceneEnumTrack) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(UMovieSceneEulerTransformPropertySystem) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UMovieSceneEulerTransformTrack) == 0x00A8); // 168 bytes (0x0000A8 - 0x0000A8)
static_assert(sizeof(FMovieSceneEventPtrs) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FMovieSceneEvent) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(UMovieSceneEventRepeaterSection) == 0x0120); // 288 bytes (0x0000F0 - 0x000120)
static_assert(sizeof(FMovieSceneEventParameters) == 0x0028); // 40 bytes (0x000000 - 0x000028)
static_assert(sizeof(FEventPayload) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(FMovieSceneEventSectionData) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(UMovieSceneEventSection) == 0x01E8); // 488 bytes (0x0000E8 - 0x0001E8)
static_assert(sizeof(UMovieSceneEventSystem) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UMovieScenePreSpawnEventSystem) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UMovieScenePostSpawnEventSystem) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UMovieScenePostEvalEventSystem) == 0x0090); // 144 bytes (0x000090 - 0x000090)
static_assert(sizeof(UMovieSceneEventTrack) == 0x0098); // 152 bytes (0x000078 - 0x000098)
static_assert(sizeof(FMovieSceneEventChannel) == 0x0088); // 136 bytes (0x000008 - 0x000088)
static_assert(sizeof(UMovieSceneEventTriggerSection) == 0x0180); // 384 bytes (0x0000F0 - 0x000180)
static_assert(sizeof(UMovieSceneFadeSection) == 0x01A0); // 416 bytes (0x0000E8 - 0x0001A0)
static_assert(sizeof(UMovieSceneFloatTrack) == 0x00A8); // 168 bytes (0x0000A8 - 0x0000A8)
static_assert(sizeof(UMovieSceneFadeTrack) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(UMovieSceneFloatPropertySystem) == 0x0050); // 80 bytes (0x000050 - 0x000050)
static_assert(sizeof(UMovieSceneFloatSection) == 0x0190); // 400 bytes (0x0000E8 - 0x000190)
static_assert(sizeof(UMovieSceneHierarchicalBiasSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(UMovieSceneIntegerSection) == 0x0178); // 376 bytes (0x0000E8 - 0x000178)
static_assert(sizeof(UMovieSceneIntegerTrack) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(UMovieSceneInterrogatedPropertyInstantiatorSystem) == 0x01E8); // 488 bytes (0x000040 - 0x0001E8)
static_assert(sizeof(UMovieSceneLevelVisibilitySection) == 0x0108); // 264 bytes (0x0000E8 - 0x000108)
static_assert(sizeof(UMovieSceneLevelVisibilitySystem) == 0x01F8); // 504 bytes (0x000040 - 0x0001F8)
static_assert(sizeof(UMovieSceneLevelVisibilityTrack) == 0x0088); // 136 bytes (0x000078 - 0x000088)
static_assert(sizeof(UMovieSceneMaterialParameterCollectionTrack) == 0x0098); // 152 bytes (0x000088 - 0x000098)
static_assert(sizeof(UMovieSceneComponentMaterialTrack) == 0x0098); // 152 bytes (0x000088 - 0x000098)
static_assert(sizeof(UMovieSceneObjectPropertySection) == 0x01A8); // 424 bytes (0x0000E8 - 0x0001A8)
static_assert(sizeof(UMovieSceneObjectPropertyTrack) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(UMovieSceneParticleParameterTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(FMovieSceneParticleChannel) == 0x0098); // 152 bytes (0x000098 - 0x000098)
static_assert(sizeof(UMovieSceneParticleSection) == 0x0180); // 384 bytes (0x0000E8 - 0x000180)
static_assert(sizeof(UMovieSceneParticleTrack) == 0x0090); // 144 bytes (0x000078 - 0x000090)
static_assert(sizeof(UMovieScenePiecewiseFloatBlenderSystem) == 0x0120); // 288 bytes (0x000060 - 0x000120)
static_assert(sizeof(UMovieScenePrimitiveMaterialSection) == 0x01A8); // 424 bytes (0x0000E8 - 0x0001A8)
static_assert(sizeof(UMovieScenePrimitiveMaterialTrack) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(UMovieScenePropertyInstantiatorSystem) == 0x0290); // 656 bytes (0x000040 - 0x000290)
static_assert(sizeof(UMovieSceneQuaternionInterpolationRotationSystem) == 0x0040); // 64 bytes (0x000040 - 0x000040)
static_assert(sizeof(FMovieSceneSkeletalAnimationParams) == 0x00D8); // 216 bytes (0x000000 - 0x0000D8)
static_assert(sizeof(UMovieSceneSkeletalAnimationSection) == 0x0270); // 624 bytes (0x0000E8 - 0x000270)
static_assert(sizeof(FMovieSceneSkeletalAnimRootMotionTrackParams) == 0x0030); // 48 bytes (0x000000 - 0x000030)
static_assert(sizeof(UMovieSceneSkeletalAnimationTrack) == 0x00D0); // 208 bytes (0x000078 - 0x0000D0)
static_assert(sizeof(UMovieSceneSlomoSection) == 0x0190); // 400 bytes (0x0000E8 - 0x000190)
static_assert(sizeof(UMovieSceneSlomoTrack) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(FMovieSceneStringChannel) == 0x00A0); // 160 bytes (0x000008 - 0x0000A0)
static_assert(sizeof(UMovieSceneStringSection) == 0x0188); // 392 bytes (0x0000E8 - 0x000188)
static_assert(sizeof(UMovieSceneStringTrack) == 0x00B0); // 176 bytes (0x0000A8 - 0x0000B0)
static_assert(sizeof(UMovieSceneTransformOriginSystem) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(UMovieSceneTransformTrack) == 0x00A8); // 168 bytes (0x0000A8 - 0x0000A8)
static_assert(sizeof(UMovieSceneVectorSection) == 0x0370); // 880 bytes (0x0000E8 - 0x000370)
static_assert(sizeof(UMovieSceneVectorTrack) == 0x00B8); // 184 bytes (0x0000A8 - 0x0000B8)
static_assert(sizeof(UMovieSceneVisibilityTrack) == 0x00B0); // 176 bytes (0x0000B0 - 0x0000B0)
static_assert(sizeof(UMovieSceneHierarchicalEasingInstantiatorSystem) == 0x0090); // 144 bytes (0x000040 - 0x000090)
static_assert(sizeof(UWeightAndEasingEvaluatorSystem) == 0x0078); // 120 bytes (0x000040 - 0x000078)
static_assert(sizeof(FMovieScene3DPathSectionTemplate) == 0x00E0); // 224 bytes (0x000020 - 0x0000E0)
static_assert(sizeof(FMovieScene3DTransformKeyStruct) == 0x0048); // 72 bytes (0x000008 - 0x000048)
static_assert(sizeof(FMovieScene3DScaleKeyStruct) == 0x0030); // 48 bytes (0x000008 - 0x000030)
static_assert(sizeof(FMovieScene3DRotationKeyStruct) == 0x0030); // 48 bytes (0x000008 - 0x000030)
static_assert(sizeof(FMovieScene3DLocationKeyStruct) == 0x0030); // 48 bytes (0x000008 - 0x000030)
static_assert(sizeof(FMovieScene3DTransformTemplateData) == 0x0650); // 1616 bytes (0x000000 - 0x000650)
static_assert(sizeof(FMovieSceneActorReferenceSectionTemplate) == 0x00E8); // 232 bytes (0x000020 - 0x0000E8)
static_assert(sizeof(FMovieSceneAudioSectionTemplate) == 0x0028); // 40 bytes (0x000020 - 0x000028)
static_assert(sizeof(FMovieSceneAdditiveCameraAnimationTemplate) == 0x0020); // 32 bytes (0x000020 - 0x000020)
static_assert(sizeof(FMovieSceneCameraShakeSectionTemplate) == 0x0048); // 72 bytes (0x000020 - 0x000048)
static_assert(sizeof(FMovieSceneCameraAnimSectionTemplate) == 0x0048); // 72 bytes (0x000020 - 0x000048)
static_assert(sizeof(FMovieSceneCameraShakeSourceShakeSectionTemplate) == 0x0048); // 72 bytes (0x000020 - 0x000048)
static_assert(sizeof(FMovieSceneCameraShakeSourceTriggerSectionTemplate) == 0x0040); // 64 bytes (0x000020 - 0x000040)
static_assert(sizeof(FMovieSceneColorKeyStruct) == 0x0038); // 56 bytes (0x000008 - 0x000038)
static_assert(sizeof(FMovieSceneColorSectionTemplate) == 0x02C0); // 704 bytes (0x000038 - 0x0002C0)
static_assert(sizeof(FMovieSceneEventPayloadVariable) == 0x0010); // 16 bytes (0x000000 - 0x000010)
static_assert(sizeof(FMovieSceneEventTriggerData) == 0x0048); // 72 bytes (0x000000 - 0x000048)
static_assert(sizeof(FMovieSceneEventSectionTemplate) == 0x00B0); // 176 bytes (0x000020 - 0x0000B0)
static_assert(sizeof(FMovieSceneFadeSectionTemplate) == 0x00D8); // 216 bytes (0x000020 - 0x0000D8)
static_assert(sizeof(FMovieSceneMaterialParameterCollectionTemplate) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(FMovieSceneObjectPropertyTemplate) == 0x00F8); // 248 bytes (0x000038 - 0x0000F8)
static_assert(sizeof(FMovieSceneComponentMaterialSectionTemplate) == 0x0088); // 136 bytes (0x000080 - 0x000088)
static_assert(sizeof(FMovieSceneParticleParameterSectionTemplate) == 0x0080); // 128 bytes (0x000080 - 0x000080)
static_assert(sizeof(FMovieSceneParticleSectionTemplate) == 0x00B8); // 184 bytes (0x000020 - 0x0000B8)
static_assert(sizeof(FMovieScenePrimitiveMaterialTemplate) == 0x00E8); // 232 bytes (0x000020 - 0x0000E8)
static_assert(sizeof(FMovieSceneVectorPropertySectionTemplate) == 0x02C0); // 704 bytes (0x000038 - 0x0002C0)
static_assert(sizeof(FMovieSceneStringPropertySectionTemplate) == 0x00D8); // 216 bytes (0x000038 - 0x0000D8)
static_assert(sizeof(FMovieSceneIntegerPropertySectionTemplate) == 0x00D0); // 208 bytes (0x000038 - 0x0000D0)
static_assert(sizeof(FMovieSceneEnumPropertySectionTemplate) == 0x00D0); // 208 bytes (0x000038 - 0x0000D0)
static_assert(sizeof(FMovieSceneBytePropertySectionTemplate) == 0x00D0); // 208 bytes (0x000038 - 0x0000D0)
static_assert(sizeof(FMovieSceneBoolPropertySectionTemplate) == 0x00C8); // 200 bytes (0x000038 - 0x0000C8)
static_assert(sizeof(FMovieSceneSkeletalAnimationSectionTemplateParameters) == 0x00E0); // 224 bytes (0x0000D8 - 0x0000E0)
static_assert(sizeof(FMovieSceneSkeletalAnimationSectionTemplate) == 0x0100); // 256 bytes (0x000020 - 0x000100)
static_assert(sizeof(FMovieSceneSlomoSectionTemplate) == 0x00C8); // 200 bytes (0x000020 - 0x0000C8)
static_assert(sizeof(FLevelVisibilityComponentData) == 0x0008); // 8 bytes (0x000000 - 0x000008)
static_assert(sizeof(FMovieSceneVectorKeyStructBase) == 0x0028); // 40 bytes (0x000008 - 0x000028)
static_assert(sizeof(FMovieSceneVector4KeyStruct) == 0x0040); // 64 bytes (0x000028 - 0x000040)
static_assert(sizeof(FMovieSceneVectorKeyStruct) == 0x0038); // 56 bytes (0x000028 - 0x000038)
static_assert(sizeof(FMovieSceneVector2DKeyStruct) == 0x0030); // 48 bytes (0x000028 - 0x000030)
static_assert(sizeof(FMovieSceneVisibilitySectionTemplate) == 0x00C8); // 200 bytes (0x0000C8 - 0x0000C8)
static_assert(offsetof(FTickFunction, TickGroup) == 0x0008);
static_assert(offsetof(FTickFunction, EndTickGroup) == 0x0009);
static_assert(offsetof(FSimpleMemberReference, MemberParent) == 0x0000);
static_assert(offsetof(FSimpleMemberReference, MemberName) == 0x0008);
static_assert(offsetof(FSimpleMemberReference, MemberGuid) == 0x0010);
static_assert(offsetof(UActorComponent, PrimaryComponentTick) == 0x0030);
static_assert(offsetof(UActorComponent, ComponentTags) == 0x0060);
static_assert(offsetof(UActorComponent, VisibilityTags) == 0x0070);
static_assert(offsetof(UActorComponent, AssetUserData) == 0x0080);
static_assert(offsetof(UActorComponent, CreationMethod) == 0x009D);
static_assert(offsetof(UActorComponent, UCSModifiedProperties) == 0x00A0);
static_assert(offsetof(USceneComponent, PhysicsVolume) == 0x00D0);
static_assert(offsetof(USceneComponent, AttachParent) == 0x00D8);
static_assert(offsetof(USceneComponent, AttachSocketName) == 0x00E0);
static_assert(offsetof(USceneComponent, AttachChildren) == 0x00E8);
static_assert(offsetof(USceneComponent, ClientAttachedChildren) == 0x00F8);
static_assert(offsetof(USceneComponent, RelativeLocation) == 0x013C);
static_assert(offsetof(USceneComponent, RelativeRotation) == 0x0148);
static_assert(offsetof(USceneComponent, RelativeScale3D) == 0x0154);
static_assert(offsetof(USceneComponent, ComponentVelocity) == 0x0164);
static_assert(offsetof(USceneComponent, Mobility) == 0x0173);
static_assert(offsetof(USceneComponent, DetailMode) == 0x0174);
static_assert(offsetof(USceneComponent, CustomName) == 0x024C);
static_assert(offsetof(USceneComponent, SBPhotoModeTag) == 0x0254);
static_assert(offsetof(FIndexedCurve, KeyHandlesToIndices) == 0x0008);
static_assert(offsetof(FRealCurve, PreInfinityExtrap) == 0x006C);
static_assert(offsetof(FRealCurve, PostInfinityExtrap) == 0x006D);
static_assert(offsetof(FRichCurveKey, InterpMode) == 0x0000);
static_assert(offsetof(FRichCurveKey, TangentMode) == 0x0001);
static_assert(offsetof(FRichCurveKey, TangentWeightMode) == 0x0002);
static_assert(offsetof(FRichCurve, Keys) == 0x0070);
static_assert(offsetof(FRuntimeFloatCurve, EditorCurveData) == 0x0000);
static_assert(offsetof(FRuntimeFloatCurve, ExternalCurve) == 0x0080);
static_assert(offsetof(FBaseAttenuationSettings, DistanceAlgorithm) == 0x0008);
static_assert(offsetof(FBaseAttenuationSettings, AttenuationShape) == 0x0009);
static_assert(offsetof(FBaseAttenuationSettings, FalloffMode) == 0x0010);
static_assert(offsetof(FBaseAttenuationSettings, AttenuationShapeExtents) == 0x0014);
static_assert(offsetof(FBaseAttenuationSettings, CustomAttenuationCurve) == 0x0028);
static_assert(offsetof(FAttenuationSubmixSendSettings, Submix) == 0x0000);
static_assert(offsetof(FAttenuationSubmixSendSettings, SubmixSendMethod) == 0x0008);
static_assert(offsetof(FAttenuationSubmixSendSettings, CustomSubmixSendCurve) == 0x0020);
static_assert(offsetof(FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray) == 0x0000);
static_assert(offsetof(FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray) == 0x0010);
static_assert(offsetof(FSoundAttenuationPluginSettings, ReverbPluginSettingsArray) == 0x0020);
static_assert(offsetof(FSoundAttenuationSettings, SpatializationAlgorithm) == 0x00B2);
static_assert(offsetof(FSoundAttenuationSettings, AbsorptionMethod) == 0x00B8);
static_assert(offsetof(FSoundAttenuationSettings, OcclusionTraceChannel) == 0x00B9);
static_assert(offsetof(FSoundAttenuationSettings, ReverbSendMethod) == 0x00BA);
static_assert(offsetof(FSoundAttenuationSettings, PriorityAttenuationMethod) == 0x00BB);
static_assert(offsetof(FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve) == 0x00D0);
static_assert(offsetof(FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve) == 0x0158);
static_assert(offsetof(FSoundAttenuationSettings, CustomReverbSendCurve) == 0x0238);
static_assert(offsetof(FSoundAttenuationSettings, SubmixSendSettings) == 0x02C0);
static_assert(offsetof(FSoundAttenuationSettings, CustomPriorityAttenuationCurve) == 0x02E8);
static_assert(offsetof(FSoundAttenuationSettings, PluginSettings) == 0x0370);
static_assert(offsetof(FSoundSubmixSendInfo, SendLevelControlMethod) == 0x0000);
static_assert(offsetof(FSoundSubmixSendInfo, SendStage) == 0x0001);
static_assert(offsetof(FSoundSubmixSendInfo, SoundSubmix) == 0x0008);
static_assert(offsetof(FSoundSubmixSendInfo, CustomSendLevelCurve) == 0x0028);
static_assert(offsetof(FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod) == 0x0000);
static_assert(offsetof(FSoundSourceBusSendInfo, SoundSourceBus) == 0x0008);
static_assert(offsetof(FSoundSourceBusSendInfo, AudioBus) == 0x0010);
static_assert(offsetof(FSoundSourceBusSendInfo, CustomSendLevelCurve) == 0x0030);
static_assert(offsetof(USynthComponent, AttenuationSettings) == 0x0268);
static_assert(offsetof(USynthComponent, AttenuationOverrides) == 0x0270);
static_assert(offsetof(USynthComponent, ConcurrencySettings) == 0x0610);
static_assert(offsetof(USynthComponent, SoundClass) == 0x0668);
static_assert(offsetof(USynthComponent, SourceEffectChain) == 0x0670);
static_assert(offsetof(USynthComponent, SoundSubmix) == 0x0678);
static_assert(offsetof(USynthComponent, SoundSubmixSends) == 0x0680);
static_assert(offsetof(USynthComponent, BusSends) == 0x0690);
static_assert(offsetof(USynthComponent, PreEffectBusSends) == 0x06A0);
static_assert(offsetof(USynthComponent, Synth) == 0x06F0);
static_assert(offsetof(USynthComponent, AudioComponent) == 0x06F8);
static_assert(offsetof(UQuartzClockHandle, QuartzSubsystem) == 0x0168);
static_assert(offsetof(UQuartzClockHandle, WorldPtr) == 0x0188);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType) == 0x0000);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, PeakMode) == 0x0001);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, LinkMode) == 0x0002);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, ExternalSubmix) == 0x0020);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, KeyHighshelf) == 0x0034);
static_assert(offsetof(FSubmixEffectDynamicsProcessorSettings, KeyLowshelf) == 0x0040);
static_assert(offsetof(USubmixEffectDynamicsProcessorPreset, Settings) == 0x00E0);
static_assert(offsetof(FSubmixEffectSubmixEQSettings, EQBands) == 0x0000);
static_assert(offsetof(USubmixEffectSubmixEQPreset, Settings) == 0x00A0);
static_assert(offsetof(USubmixEffectReverbPreset, Settings) == 0x00D0);
static_assert(offsetof(FSoundConcurrencySettings, ResolutionRule) == 0x0008);
static_assert(offsetof(FSoundConcurrencySettings, VolumeScaleMode) == 0x0014);
static_assert(offsetof(FSoundModulationDestinationSettings, Modulator) == 0x0008);
static_assert(offsetof(FSoundModulationDefaultSettings, VolumeModulationDestination) == 0x0000);
static_assert(offsetof(FSoundModulationDefaultSettings, PitchModulationDestination) == 0x0010);
static_assert(offsetof(FSoundModulationDefaultSettings, HighpassModulationDestination) == 0x0020);
static_assert(offsetof(FSoundModulationDefaultSettings, LowpassModulationDestination) == 0x0030);
static_assert(offsetof(FSoundModulationDefaultRoutingSettings, VolumeRouting) == 0x0040);
static_assert(offsetof(FSoundModulationDefaultRoutingSettings, PitchRouting) == 0x0041);
static_assert(offsetof(FSoundModulationDefaultRoutingSettings, HighpassRouting) == 0x0042);
static_assert(offsetof(FSoundModulationDefaultRoutingSettings, LowpassRouting) == 0x0043);
static_assert(offsetof(USoundBase, SoundClassObject) == 0x0030);
static_assert(offsetof(USoundBase, VirtualizationMode) == 0x0039);
static_assert(offsetof(USoundBase, ConcurrencyOverrides) == 0x00E0);
static_assert(offsetof(USoundBase, AttenuationSettings) == 0x0118);
static_assert(offsetof(USoundBase, ModulationSettings) == 0x0120);
static_assert(offsetof(USoundBase, SoundSubmixObject) == 0x0168);
static_assert(offsetof(USoundBase, SoundSubmixSends) == 0x0170);
static_assert(offsetof(USoundBase, SourceEffectChain) == 0x0180);
static_assert(offsetof(USoundBase, BusSends) == 0x0188);
static_assert(offsetof(USoundBase, PreEffectBusSends) == 0x0198);
static_assert(offsetof(USoundBase, AssetUserData) == 0x01A8);
static_assert(offsetof(FSoundWaveSpectralTimeData, Data) == 0x0000);
static_assert(offsetof(FSubtitleCue, text) == 0x0000);
static_assert(offsetof(USoundWave, SampleRateQuality) == 0x01C0);
static_assert(offsetof(USoundWave, SoundGroup) == 0x01C2);
static_assert(offsetof(USoundWave, SoundAssetCompressionType) == 0x01C4);
static_assert(offsetof(USoundWave, LoadingBehavior) == 0x01C6);
static_assert(offsetof(USoundWave, FrequenciesToAnalyze) == 0x01D0);
static_assert(offsetof(USoundWave, CookedSpectralTimeData) == 0x01E0);
static_assert(offsetof(USoundWave, CookedEnvelopeTimeData) == 0x01F0);
static_assert(offsetof(USoundWave, SpokenText) == 0x0248);
static_assert(offsetof(USoundWave, Subtitles) == 0x0278);
static_assert(offsetof(USoundWave, Curves) == 0x0288);
static_assert(offsetof(USoundWave, InternalCurves) == 0x0290);
static_assert(offsetof(USynthSound, OwningSynthComponent) == 0x03D0);
static_assert(offsetof(UDataAsset, NativeClass) == 0x0028);
static_assert(offsetof(UGameInstance, LocalPlayers) == 0x0038);
static_assert(offsetof(UGameInstance, OnlineSession) == 0x0048);
static_assert(offsetof(UGameInstance, ReferencedObjects) == 0x0050);
static_assert(offsetof(FCustomPrimitiveData, Data) == 0x0000);
static_assert(offsetof(FCollisionResponseContainer, WorldStatic) == 0x0000);
static_assert(offsetof(FCollisionResponseContainer, WorldDynamic) == 0x0001);
static_assert(offsetof(FCollisionResponseContainer, Pawn) == 0x0002);
static_assert(offsetof(FCollisionResponseContainer, Visibility) == 0x0003);
static_assert(offsetof(FCollisionResponseContainer, Camera) == 0x0004);
static_assert(offsetof(FCollisionResponseContainer, PhysicsBody) == 0x0005);
static_assert(offsetof(FCollisionResponseContainer, Vehicle) == 0x0006);
static_assert(offsetof(FCollisionResponseContainer, Destructible) == 0x0007);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel1) == 0x0008);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel2) == 0x0009);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel3) == 0x000A);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel4) == 0x000B);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel5) == 0x000C);
static_assert(offsetof(FCollisionResponseContainer, EngineTraceChannel6) == 0x000D);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel1) == 0x000E);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel2) == 0x000F);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel3) == 0x0010);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel4) == 0x0011);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel5) == 0x0012);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel6) == 0x0013);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel7) == 0x0014);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel8) == 0x0015);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel9) == 0x0016);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel10) == 0x0017);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel11) == 0x0018);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel12) == 0x0019);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel13) == 0x001A);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel14) == 0x001B);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel15) == 0x001C);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel16) == 0x001D);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel17) == 0x001E);
static_assert(offsetof(FCollisionResponseContainer, GameTraceChannel18) == 0x001F);
static_assert(offsetof(FResponseChannel, Channel) == 0x0000);
static_assert(offsetof(FResponseChannel, Response) == 0x0008);
static_assert(offsetof(FCollisionResponse, ResponseToChannels) == 0x0000);
static_assert(offsetof(FCollisionResponse, ResponseArray) == 0x0020);
static_assert(offsetof(FWalkableSlopeOverride, WalkableSlopeBehavior) == 0x0000);
static_assert(offsetof(FBodyInstance, ObjectType) == 0x001E);
static_assert(offsetof(FBodyInstance, CollisionEnabled) == 0x0020);
static_assert(offsetof(FBodyInstance, SleepFamily) == 0x0059);
static_assert(offsetof(FBodyInstance, DOFMode) == 0x005A);
static_assert(offsetof(FBodyInstance, CollisionProfileName) == 0x006C);
static_assert(offsetof(FBodyInstance, CollisionResponses) == 0x0078);
static_assert(offsetof(FBodyInstance, CustomDOFPlaneNormal) == 0x00C0);
static_assert(offsetof(FBodyInstance, COMNudge) == 0x00CC);
static_assert(offsetof(FBodyInstance, InertiaTensorScale) == 0x00DC);
static_assert(offsetof(FBodyInstance, LimitRotation) == 0x00E8);
static_assert(offsetof(FBodyInstance, LimitRotationOffset) == 0x00F4);
static_assert(offsetof(FBodyInstance, DisableTag) == 0x0100);
static_assert(offsetof(FBodyInstance, WalkableSlopeOverride) == 0x0118);
static_assert(offsetof(FBodyInstance, PhysMaterialOverride) == 0x0128);
static_assert(offsetof(FBodyInstance, CurrentTranslate) == 0x0164);
static_assert(offsetof(UPrimitiveComponent, DepthPriorityGroup) == 0x0288);
static_assert(offsetof(UPrimitiveComponent, ViewOwnerDepthPriorityGroup) == 0x0289);
static_assert(offsetof(UPrimitiveComponent, IndirectLightingCacheQuality) == 0x028A);
static_assert(offsetof(UPrimitiveComponent, LightmapType) == 0x028B);
static_assert(offsetof(UPrimitiveComponent, bHasCustomNavigableGeometry) == 0x0294);
static_assert(offsetof(UPrimitiveComponent, CanCharacterStepUpOn) == 0x029C);
static_assert(offsetof(UPrimitiveComponent, LightingChannels) == 0x029E);
static_assert(offsetof(UPrimitiveComponent, CustomDepthStencilWriteMask) == 0x029F);
static_assert(offsetof(UPrimitiveComponent, CustomPrimitiveData) == 0x02A8);
static_assert(offsetof(UPrimitiveComponent, CustomPrimitiveDataInternal) == 0x02B8);
static_assert(offsetof(UPrimitiveComponent, RuntimeVirtualTextures) == 0x02E0);
static_assert(offsetof(UPrimitiveComponent, VirtualTextureRenderPassType) == 0x02F3);
static_assert(offsetof(UPrimitiveComponent, MoveIgnoreComponents) == 0x0328);
static_assert(offsetof(UPrimitiveComponent, BodyInstance) == 0x0348);
static_assert(offsetof(UPrimitiveComponent, PhysicsMaterialForTouchSimulateMove) == 0x04F8);
static_assert(offsetof(UPrimitiveComponent, LODParentPrimitive) == 0x0528);
static_assert(offsetof(UMeshComponent, OverrideMaterials) == 0x0538);
static_assert(offsetof(FSkelMeshComponentLODInfo, HiddenMaterials) == 0x0000);
static_assert(offsetof(USkinnedMeshComponent, SkeletalMesh) == 0x0568);
static_assert(offsetof(USkinnedMeshComponent, MasterPoseComponent) == 0x0570);
static_assert(offsetof(USkinnedMeshComponent, AdditiveMasterBoneArray) == 0x0578);
static_assert(offsetof(USkinnedMeshComponent, SkinCacheUsage) == 0x0588);
static_assert(offsetof(USkinnedMeshComponent, VertexOffsetUsage) == 0x0598);
static_assert(offsetof(USkinnedMeshComponent, PhysicsAssetOverride) == 0x0770);
static_assert(offsetof(USkinnedMeshComponent, LODInfo) == 0x0798);
static_assert(offsetof(USkinnedMeshComponent, VisibilityBasedAnimTickOption) == 0x07CC);
static_assert(offsetof(USkinnedMeshComponent, CachedWorldSpaceBounds) == 0x07F8);
static_assert(offsetof(USkinnedMeshComponent, CachedWorldToLocalTransform) == 0x0820);
static_assert(offsetof(FSingleAnimationPlayData, AnimToPlay) == 0x0000);
static_assert(offsetof(USkeletalMeshComponent, AnimBlueprintGeneratedClass) == 0x0880);
static_assert(offsetof(USkeletalMeshComponent, AnimClass) == 0x0888);
static_assert(offsetof(USkeletalMeshComponent, AnimScriptInstance) == 0x0890);
static_assert(offsetof(USkeletalMeshComponent, PostProcessAnimInstance) == 0x0898);
static_assert(offsetof(USkeletalMeshComponent, AnimationData) == 0x08A8);
static_assert(offsetof(USkeletalMeshComponent, RootBoneTranslation) == 0x08D0);
static_assert(offsetof(USkeletalMeshComponent, LineCheckBoundsScale) == 0x08DC);
static_assert(offsetof(USkeletalMeshComponent, LinkedInstances) == 0x0918);
static_assert(offsetof(USkeletalMeshComponent, CachedBoneSpaceTransforms) == 0x0928);
static_assert(offsetof(USkeletalMeshComponent, CachedComponentSpaceTransforms) == 0x0938);
static_assert(offsetof(USkeletalMeshComponent, VehicleOnBoardTransformOffset) == 0x0AA0);
static_assert(offsetof(USkeletalMeshComponent, CachedVehicleOnBoardTransformPhysicsOffset) == 0x0AD0);
static_assert(offsetof(USkeletalMeshComponent, ForceClothTeleportTransform) == 0x0B00);
static_assert(offsetof(USkeletalMeshComponent, LockBodyName) == 0x0B34);
static_assert(offsetof(USkeletalMeshComponent, LockupTransform) == 0x0B40);
static_assert(offsetof(USkeletalMeshComponent, ClothAdditiveWindDirection) == 0x0B70);
static_assert(offsetof(USkeletalMeshComponent, SBWindForce) == 0x0B7C);
static_assert(offsetof(USkeletalMeshComponent, SBKawaiiPhysicsForce) == 0x0B88);
static_assert(offsetof(USkeletalMeshComponent, KinematicBonesUpdateType) == 0x0B9C);
static_assert(offsetof(USkeletalMeshComponent, PhysicsTransformUpdateMode) == 0x0B9D);
static_assert(offsetof(USkeletalMeshComponent, AnimationMode) == 0x0BF0);
static_assert(offsetof(USkeletalMeshComponent, MassMode) == 0x0C1C);
static_assert(offsetof(USkeletalMeshComponent, DisallowedAnimCurves) == 0x0C50);
static_assert(offsetof(USkeletalMeshComponent, DisablePhysicsTag) == 0x0C60);
static_assert(offsetof(USkeletalMeshComponent, BodySetup) == 0x0C68);
static_assert(offsetof(USkeletalMeshComponent, ClothingSimulationFactory) == 0x0C88);
static_assert(offsetof(USkeletalMeshComponent, NotifyAnimName) == 0x0D70);
static_assert(offsetof(USkeletalMeshComponent, ClothingInteractor) == 0x0DD0);
static_assert(offsetof(USkeletalMeshComponent, OverrideClothPhysicsAsset) == 0x0DD8);
static_assert(offsetof(USkeletalMeshComponent, AttachParentCollisionsOverrideClothPhysicsAsset) == 0x0DE8);
static_assert(offsetof(FAnimNotifyEventReference, NotifySource) == 0x0008);
static_assert(offsetof(FAnimNotifyArray, Notifies) == 0x0000);
static_assert(offsetof(FAnimNotifyQueue, AnimNotifies) == 0x0010);
static_assert(offsetof(FAnimNotifyQueue, UnfilteredMontageAnimNotifies) == 0x0020);
static_assert(offsetof(FAnimNotifyQueue, ForceAnimNotifies) == 0x0070);
static_assert(offsetof(FAnimLinkableElement, LinkedMontage) == 0x0008);
static_assert(offsetof(FAnimLinkableElement, LinkMethod) == 0x0018);
static_assert(offsetof(FAnimLinkableElement, CachedLinkMethod) == 0x0019);
static_assert(offsetof(FAnimLinkableElement, LinkedSequence) == 0x0028);
static_assert(offsetof(FAnimNotifyEvent, NotifyName) == 0x0040);
static_assert(offsetof(FAnimNotifyEvent, Notify) == 0x0048);
static_assert(offsetof(FAnimNotifyEvent, NotifyStateClass) == 0x0050);
static_assert(offsetof(FAnimNotifyEvent, EndLink) == 0x0060);
static_assert(offsetof(FAnimNotifyEvent, MontageTickType) == 0x0091);
static_assert(offsetof(FAnimNotifyEvent, NotifyFilterType) == 0x0098);
static_assert(offsetof(UAnimInstance, CurrentSkeleton) == 0x0028);
static_assert(offsetof(UAnimInstance, RootMotionMode) == 0x0030);
static_assert(offsetof(UAnimInstance, NotifyQueue) == 0x0100);
static_assert(offsetof(UAnimInstance, ActiveAnimNotifyState) == 0x0180);
static_assert(offsetof(FRepMovement, LinearVelocity) == 0x0000);
static_assert(offsetof(FRepMovement, AngularVelocity) == 0x000C);
static_assert(offsetof(FRepMovement, Location) == 0x0018);
static_assert(offsetof(FRepMovement, Rotation) == 0x0024);
static_assert(offsetof(FRepMovement, LocationQuantizationLevel) == 0x0031);
static_assert(offsetof(FRepMovement, VelocityQuantizationLevel) == 0x0032);
static_assert(offsetof(FRepMovement, RotationQuantizationLevel) == 0x0033);
static_assert(offsetof(FRepAttachment, AttachParent) == 0x0000);
static_assert(offsetof(FRepAttachment, LocationOffset) == 0x0008);
static_assert(offsetof(FRepAttachment, RelativeScale3D) == 0x0014);
static_assert(offsetof(FRepAttachment, RotationOffset) == 0x0020);
static_assert(offsetof(FRepAttachment, AttachSocket) == 0x002C);
static_assert(offsetof(FRepAttachment, AttachComponent) == 0x0038);
static_assert(offsetof(AActor, PrimaryActorTick) == 0x0028);
static_assert(offsetof(AActor, UpdateOverlapsMethodDuringLevelStreaming) == 0x0075);
static_assert(offsetof(AActor, DefaultUpdateOverlapsMethodDuringLevelStreaming) == 0x0076);
static_assert(offsetof(AActor, RemoteRole) == 0x0077);
static_assert(offsetof(AActor, ReplicatedMovement) == 0x0078);
static_assert(offsetof(AActor, AttachmentReplication) == 0x00C8);
static_assert(offsetof(AActor, Owner) == 0x0108);
static_assert(offsetof(AActor, NetDriverName) == 0x0110);
static_assert(offsetof(AActor, Role) == 0x0118);
static_assert(offsetof(AActor, NetDormancy) == 0x0120);
static_assert(offsetof(AActor, IgnoreBlockingHitActor) == 0x0128);
static_assert(offsetof(AActor, SpawnCollisionHandlingMethod) == 0x0138);
static_assert(offsetof(AActor, AutoReceiveInput) == 0x0139);
static_assert(offsetof(AActor, InputComponent) == 0x0140);
static_assert(offsetof(AActor, Instigator) == 0x0160);
static_assert(offsetof(AActor, Children) == 0x0168);
static_assert(offsetof(AActor, RootComponent) == 0x0178);
static_assert(offsetof(AActor, ControllingMatineeActors) == 0x0180);
static_assert(offsetof(AActor, Layers) == 0x0198);
static_assert(offsetof(AActor, ParentComponent) == 0x01A8);
static_assert(offsetof(AActor, Tags) == 0x01B8);
static_assert(offsetof(AActor, VisibilityTags) == 0x01C8);
static_assert(offsetof(AActor, InstanceComponents) == 0x0298);
static_assert(offsetof(AActor, BlueprintCreatedComponents) == 0x02A8);
static_assert(offsetof(UFXSystemComponent, FollowTargetComponent) == 0x0538);
static_assert(offsetof(UFXSystemComponent, FollowTargetSocketName) == 0x0540);
static_assert(offsetof(UFXSystemComponent, FollowVelocity) == 0x0554);
static_assert(offsetof(UFXSystemComponent, FollowingRelativeLocation) == 0x0560);
static_assert(offsetof(UFXSystemComponent, FollowingRelativeRotation) == 0x056C);
static_assert(offsetof(FBPComponentClassOverride, ComponentName) == 0x0000);
static_assert(offsetof(FBPComponentClassOverride, ComponentClass) == 0x0008);
static_assert(offsetof(FBlueprintComponentChangedPropertyInfo, PropertyName) == 0x0000);
static_assert(offsetof(FBlueprintComponentChangedPropertyInfo, PropertyScope) == 0x0010);
static_assert(offsetof(FBlueprintCookedComponentInstancingData, ChangedPropertyList) == 0x0000);
static_assert(offsetof(UBlueprintGeneratedClass, DynamicBindingObjects) == 0x0238);
static_assert(offsetof(UBlueprintGeneratedClass, ComponentTemplates) == 0x0248);
static_assert(offsetof(UBlueprintGeneratedClass, Timelines) == 0x0258);
static_assert(offsetof(UBlueprintGeneratedClass, ComponentClassOverrides) == 0x0268);
static_assert(offsetof(UBlueprintGeneratedClass, SimpleConstructionScript) == 0x0278);
static_assert(offsetof(UBlueprintGeneratedClass, InheritableComponentHandler) == 0x0280);
static_assert(offsetof(UBlueprintGeneratedClass, UberGraphFramePointerProperty) == 0x0288);
static_assert(offsetof(UBlueprintGeneratedClass, UberGraphFunction) == 0x0298);
static_assert(offsetof(UBlueprintGeneratedClass, CookedComponentInstancingData) == 0x02A0);
static_assert(offsetof(FSkeletalMaterial, MaterialInterface) == 0x0000);
static_assert(offsetof(FSkeletalMaterial, MaterialSlotName) == 0x0008);
static_assert(offsetof(FSkeletalMaterial, UVChannelData) == 0x0010);
static_assert(offsetof(FBoneMirrorInfo, BoneFlipAxis) == 0x0004);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, TerminationCriterion) == 0x0000);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, ReductionMethod) == 0x0018);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, SilhouetteImportance) == 0x0019);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, TextureImportance) == 0x001A);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, ShadingImportance) == 0x001B);
static_assert(offsetof(FSkeletalMeshOptimizationSettings, SkinningImportance) == 0x001C);
static_assert(offsetof(FBoneReference, BoneName) == 0x0000);
static_assert(offsetof(FSkeletalMeshLODInfo, ScreenSize) == 0x0000);
static_assert(offsetof(FSkeletalMeshLODInfo, LODMaterialMap) == 0x0008);
static_assert(offsetof(FSkeletalMeshLODInfo, BuildSettings) == 0x0018);
static_assert(offsetof(FSkeletalMeshLODInfo, ReductionSettings) == 0x002C);
static_assert(offsetof(FSkeletalMeshLODInfo, BonesToRemove) == 0x0068);
static_assert(offsetof(FSkeletalMeshLODInfo, BonesToPrioritize) == 0x0078);
static_assert(offsetof(FSkeletalMeshLODInfo, BakePose) == 0x0090);
static_assert(offsetof(FSkeletalMeshLODInfo, BakePoseOverride) == 0x0098);
static_assert(offsetof(FSkeletalMeshLODInfo, SourceImportFilename) == 0x00A0);
static_assert(offsetof(FSkeletalMeshLODInfo, SkinCacheUsage) == 0x00B0);
static_assert(offsetof(FStablePhysicsBoneInfo, LocalBoneTransform) == 0x0010);
static_assert(offsetof(FSkeletalMeshSamplingRegionMaterialFilter, MaterialName) == 0x0000);
static_assert(offsetof(FSkeletalMeshSamplingRegionBoneFilter, BoneName) == 0x0000);
static_assert(offsetof(FSkeletalMeshSamplingRegion, Name) == 0x0000);
static_assert(offsetof(FSkeletalMeshSamplingRegion, MaterialFilters) == 0x0010);
static_assert(offsetof(FSkeletalMeshSamplingRegion, BoneFilters) == 0x0020);
static_assert(offsetof(FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData) == 0x0000);
static_assert(offsetof(FSkeletalMeshSamplingBuiltData, RegionBuiltData) == 0x0010);
static_assert(offsetof(FSkeletalMeshSamplingInfo, Regions) == 0x0000);
static_assert(offsetof(FSkeletalMeshSamplingInfo, BuiltData) == 0x0010);
static_assert(offsetof(FSkinWeightProfileInfo, Name) == 0x0000);
static_assert(offsetof(FSkinWeightProfileInfo, DefaultProfile) == 0x0008);
static_assert(offsetof(FSkinWeightProfileInfo, DefaultProfileFromLODIndex) == 0x000C);
static_assert(offsetof(USkeletalMesh, Skeleton) == 0x0088);
static_assert(offsetof(USkeletalMesh, ImportedBounds) == 0x0090);
static_assert(offsetof(USkeletalMesh, ExtendedBounds) == 0x00AC);
static_assert(offsetof(USkeletalMesh, PositiveBoundsExtension) == 0x00C8);
static_assert(offsetof(USkeletalMesh, NegativeBoundsExtension) == 0x00D4);
static_assert(offsetof(USkeletalMesh, Materials) == 0x00E0);
static_assert(offsetof(USkeletalMesh, SkelMirrorTable) == 0x00F0);
static_assert(offsetof(USkeletalMesh, LODInfo) == 0x0100);
static_assert(offsetof(USkeletalMesh, MinLOD) == 0x0160);
static_assert(offsetof(USkeletalMesh, DisableBelowMinLodStripping) == 0x0164);
static_assert(offsetof(USkeletalMesh, SkelMirrorAxis) == 0x0166);
static_assert(offsetof(USkeletalMesh, SkelMirrorFlipAxis) == 0x0167);
static_assert(offsetof(USkeletalMesh, BodySetup) == 0x0170);
static_assert(offsetof(USkeletalMesh, PhysicsAsset) == 0x0178);
static_assert(offsetof(USkeletalMesh, ShadowPhysicsAsset) == 0x0180);
static_assert(offsetof(USkeletalMesh, NodeMappingData) == 0x0188);
static_assert(offsetof(USkeletalMesh, MorphTargets) == 0x0198);
static_assert(offsetof(USkeletalMesh, CurveRemapData) == 0x01A8);
static_assert(offsetof(USkeletalMesh, StablePhysicsTransforms) == 0x0328);
static_assert(offsetof(USkeletalMesh, PostProcessAnimBlueprint) == 0x0338);
static_assert(offsetof(USkeletalMesh, MeshClothingAssets) == 0x0340);
static_assert(offsetof(USkeletalMesh, SamplingInfo) == 0x0350);
static_assert(offsetof(USkeletalMesh, AssetUserData) == 0x0380);
static_assert(offsetof(USkeletalMesh, Sockets) == 0x0390);
static_assert(offsetof(USkeletalMesh, SkinWeightProfiles) == 0x03B0);
static_assert(offsetof(UTexture, LightingGuid) == 0x0070);
static_assert(offsetof(UTexture, CompressionSettings) == 0x0084);
static_assert(offsetof(UTexture, Filter) == 0x0085);
static_assert(offsetof(UTexture, MipLoadOptions) == 0x0086);
static_assert(offsetof(UTexture, LODGroup) == 0x0087);
static_assert(offsetof(UTexture, Downscale) == 0x0088);
static_assert(offsetof(UTexture, DownscaleOptions) == 0x008C);
static_assert(offsetof(UTexture, AssetUserData) == 0x0090);
static_assert(offsetof(UTexture2DDynamic, Format) == 0x00E8);
static_assert(offsetof(FParticleSysParam, Name) == 0x0000);
static_assert(offsetof(FParticleSysParam, ParamType) == 0x0008);
static_assert(offsetof(FParticleSysParam, Vector) == 0x0014);
static_assert(offsetof(FParticleSysParam, Vector_Low) == 0x0020);
static_assert(offsetof(FParticleSysParam, Color) == 0x002C);
static_assert(offsetof(FParticleSysParam, Actor) == 0x0030);
static_assert(offsetof(FParticleSysParam, Material) == 0x0038);
static_assert(offsetof(UParticleSystemComponent, Template) == 0x0578);
static_assert(offsetof(UParticleSystemComponent, EmitterMaterials) == 0x0580);
static_assert(offsetof(UParticleSystemComponent, SkelMeshComponents) == 0x0590);
static_assert(offsetof(UParticleSystemComponent, LODMethod) == 0x05AD);
static_assert(offsetof(UParticleSystemComponent, RequiredSignificance) == 0x05AE);
static_assert(offsetof(UParticleSystemComponent, InstanceParameters) == 0x05B0);
static_assert(offsetof(UParticleSystemComponent, OldPosition) == 0x0604);
static_assert(offsetof(UParticleSystemComponent, PartSysVelocity) == 0x0610);
static_assert(offsetof(UParticleSystemComponent, ReplayClips) == 0x0650);
static_assert(offsetof(UParticleSystemComponent, AutoAttachParent) == 0x06C0);
static_assert(offsetof(UParticleSystemComponent, AutoAttachSocketName) == 0x06C8);
static_assert(offsetof(UParticleSystemComponent, AutoAttachLocationRule) == 0x06D0);
static_assert(offsetof(UParticleSystemComponent, AutoAttachRotationRule) == 0x06D1);
static_assert(offsetof(UParticleSystemComponent, AutoAttachScaleRule) == 0x06D2);
static_assert(offsetof(UPlayer, PlayerController) == 0x0030);
static_assert(offsetof(FUniqueNetIdRepl, ReplicationBytes) == 0x0018);
static_assert(offsetof(UNetConnection, Children) == 0x0048);
static_assert(offsetof(UNetConnection, Driver) == 0x0058);
static_assert(offsetof(UNetConnection, PackageMapClass) == 0x0060);
static_assert(offsetof(UNetConnection, PackageMap) == 0x0068);
static_assert(offsetof(UNetConnection, OpenChannels) == 0x0070);
static_assert(offsetof(UNetConnection, SentTemporaries) == 0x0080);
static_assert(offsetof(UNetConnection, ViewTarget) == 0x0090);
static_assert(offsetof(UNetConnection, OwningActor) == 0x0098);
static_assert(offsetof(UNetConnection, PlayerId) == 0x0160);
static_assert(offsetof(UNetConnection, ChannelsToTick) == 0x1518);
static_assert(offsetof(FChannelDefinition, ChannelName) == 0x0000);
static_assert(offsetof(FChannelDefinition, ClassName) == 0x0008);
static_assert(offsetof(FChannelDefinition, ChannelClass) == 0x0010);
static_assert(offsetof(UNetDriver, NetConnectionClassName) == 0x0030);
static_assert(offsetof(UNetDriver, ReplicationDriverClassName) == 0x0040);
static_assert(offsetof(UNetDriver, ServerConnection) == 0x0088);
static_assert(offsetof(UNetDriver, ClientConnections) == 0x0090);
static_assert(offsetof(UNetDriver, World) == 0x0140);
static_assert(offsetof(UNetDriver, WorldPackage) == 0x0148);
static_assert(offsetof(UNetDriver, NetConnectionClass) == 0x0170);
static_assert(offsetof(UNetDriver, ReplicationDriverClass) == 0x0178);
static_assert(offsetof(UNetDriver, NetDriverName) == 0x0190);
static_assert(offsetof(UNetDriver, ChannelDefinitions) == 0x0198);
static_assert(offsetof(UNetDriver, ChannelDefinitionMap) == 0x01A8);
static_assert(offsetof(UNetDriver, ActorChannelPool) == 0x01F8);
static_assert(offsetof(UNetDriver, ReplicationDriver) == 0x06E8);
static_assert(offsetof(UMaterialExpression, Material) == 0x0028);
static_assert(offsetof(UMaterialExpression, Function) == 0x0030);
static_assert(offsetof(UAnimBoneCompressionCodec, Description) == 0x0028);
static_assert(offsetof(APawn, AutoPossessPlayer) == 0x02D8);
static_assert(offsetof(APawn, AutoPossessAI) == 0x02D9);
static_assert(offsetof(APawn, AIControllerClass) == 0x02E0);
static_assert(offsetof(APawn, PlayerState) == 0x02E8);
static_assert(offsetof(APawn, LastHitBy) == 0x02F8);
static_assert(offsetof(APawn, Controller) == 0x0300);
static_assert(offsetof(APawn, ControlInputVector) == 0x0310);
static_assert(offsetof(APawn, LastControlInputVector) == 0x031C);
static_assert(offsetof(FBasedMovementInfo, MovementBase) == 0x0000);
static_assert(offsetof(FBasedMovementInfo, BoneName) == 0x0008);
static_assert(offsetof(FBasedMovementInfo, Location) == 0x0010);
static_assert(offsetof(FBasedMovementInfo, Rotation) == 0x001C);
static_assert(offsetof(FRootMotionSourceGroup, LastAccumulatedSettings) == 0x0029);
static_assert(offsetof(FRootMotionSourceGroup, LastPreAdditiveVelocity) == 0x002C);
static_assert(offsetof(FRootMotionMovementParams, RootMotionTransform) == 0x0010);
static_assert(offsetof(FRepRootMotionMontage, AnimMontage) == 0x0008);
static_assert(offsetof(FRepRootMotionMontage, Location) == 0x0014);
static_assert(offsetof(FRepRootMotionMontage, Rotation) == 0x0020);
static_assert(offsetof(FRepRootMotionMontage, MovementBase) == 0x0030);
static_assert(offsetof(FRepRootMotionMontage, MovementBaseBoneName) == 0x0038);
static_assert(offsetof(FRepRootMotionMontage, AuthoritativeRootMotion) == 0x0048);
static_assert(offsetof(FRepRootMotionMontage, Acceleration) == 0x0080);
static_assert(offsetof(FRepRootMotionMontage, LinearVelocity) == 0x008C);
static_assert(offsetof(FSimulatedRootMotionReplicatedMove, RootMotion) == 0x0008);
static_assert(offsetof(ACharacter, Mesh) == 0x0328);
static_assert(offsetof(ACharacter, CharacterMovement) == 0x0330);
static_assert(offsetof(ACharacter, CapsuleComponent) == 0x0338);
static_assert(offsetof(ACharacter, BasedMovement) == 0x0340);
static_assert(offsetof(ACharacter, ReplicatedBasedMovement) == 0x0370);
static_assert(offsetof(ACharacter, BaseTranslationOffset) == 0x03A4);
static_assert(offsetof(ACharacter, BaseRotationOffset) == 0x03B0);
static_assert(offsetof(ACharacter, SavedRootMotion) == 0x0438);
static_assert(offsetof(ACharacter, ClientRootMotionParams) == 0x0470);
static_assert(offsetof(ACharacter, RootMotionRepMoves) == 0x04B0);
static_assert(offsetof(ACharacter, RepRootMotion) == 0x04C0);
static_assert(offsetof(AController, PlayerState) == 0x02D0);
static_assert(offsetof(AController, StateName) == 0x02F0);
static_assert(offsetof(AController, Pawn) == 0x02F8);
static_assert(offsetof(AController, Character) == 0x0308);
static_assert(offsetof(AController, TransformComponent) == 0x0310);
static_assert(offsetof(AController, ControlRotation) == 0x0330);
static_assert(offsetof(FActiveForceFeedbackEffect, ForceFeedbackEffect) == 0x0000);
static_assert(offsetof(APlayerController, Player) == 0x0340);
static_assert(offsetof(APlayerController, AcknowledgedPawn) == 0x0348);
static_assert(offsetof(APlayerController, ControllingDirTrackInst) == 0x0350);
static_assert(offsetof(APlayerController, MyHUD) == 0x0358);
static_assert(offsetof(APlayerController, PlayerCameraManager) == 0x0360);
static_assert(offsetof(APlayerController, PlayerCameraManagerClass) == 0x0368);
static_assert(offsetof(APlayerController, TargetViewRotation) == 0x0374);
static_assert(offsetof(APlayerController, HiddenActors) == 0x0398);
static_assert(offsetof(APlayerController, LastSpectatorSyncLocation) == 0x03C0);
static_assert(offsetof(APlayerController, LastSpectatorSyncRotation) == 0x03CC);
static_assert(offsetof(APlayerController, CheatManager) == 0x03E0);
static_assert(offsetof(APlayerController, CheatClass) == 0x03E8);
static_assert(offsetof(APlayerController, PlayerInput) == 0x03F0);
static_assert(offsetof(APlayerController, ActiveForceFeedbackEffects) == 0x03F8);
static_assert(offsetof(APlayerController, PendingSwapConnection) == 0x04B8);
static_assert(offsetof(APlayerController, NetConnection) == 0x04C0);
static_assert(offsetof(APlayerController, ClickEventKeys) == 0x04E8);
static_assert(offsetof(APlayerController, DefaultMouseCursor) == 0x04F8);
static_assert(offsetof(APlayerController, CurrentMouseCursor) == 0x04F9);
static_assert(offsetof(APlayerController, DefaultClickTraceChannel) == 0x04FA);
static_assert(offsetof(APlayerController, CurrentClickTraceChannel) == 0x04FB);
static_assert(offsetof(APlayerController, InactiveStateInputComponent) == 0x0578);
static_assert(offsetof(APlayerController, CurrentTouchInterface) == 0x05E8);
static_assert(offsetof(APlayerController, SpectatorPawn) == 0x0640);
static_assert(offsetof(APlayerController, SpawnLocation) == 0x0650);
static_assert(offsetof(AGameModeBase, OptionsString) == 0x02C8);
static_assert(offsetof(AGameModeBase, GameSessionClass) == 0x02D8);
static_assert(offsetof(AGameModeBase, GameStateClass) == 0x02E0);
static_assert(offsetof(AGameModeBase, PlayerControllerClass) == 0x02E8);
static_assert(offsetof(AGameModeBase, PlayerStateClass) == 0x02F0);
static_assert(offsetof(AGameModeBase, HUDClass) == 0x02F8);
static_assert(offsetof(AGameModeBase, DefaultPawnClass) == 0x0300);
static_assert(offsetof(AGameModeBase, SpectatorClass) == 0x0308);
static_assert(offsetof(AGameModeBase, ReplaySpectatorPlayerControllerClass) == 0x0310);
static_assert(offsetof(AGameModeBase, ServerStatReplicatorClass) == 0x0318);
static_assert(offsetof(AGameModeBase, GameSession) == 0x0320);
static_assert(offsetof(AGameModeBase, GameState) == 0x0328);
static_assert(offsetof(AGameModeBase, ServerStatReplicator) == 0x0330);
static_assert(offsetof(AGameModeBase, DefaultPlayerName) == 0x0338);
static_assert(offsetof(FDebugTextInfo, SrcActor) == 0x0000);
static_assert(offsetof(FDebugTextInfo, SrcActorOffset) == 0x0008);
static_assert(offsetof(FDebugTextInfo, SrcActorDesiredOffset) == 0x0014);
static_assert(offsetof(FDebugTextInfo, DebugText) == 0x0020);
static_assert(offsetof(FDebugTextInfo, TextColor) == 0x0038);
static_assert(offsetof(FDebugTextInfo, OrigActorLocation) == 0x0040);
static_assert(offsetof(FDebugTextInfo, Font) == 0x0050);
static_assert(offsetof(AHUD, PlayerOwner) == 0x02C8);
static_assert(offsetof(AHUD, PostRenderedActors) == 0x02E0);
static_assert(offsetof(AHUD, DebugDisplay) == 0x02F8);
static_assert(offsetof(AHUD, ToggledDebugCategories) == 0x0308);
static_assert(offsetof(AHUD, Canvas) == 0x0318);
static_assert(offsetof(AHUD, DebugCanvas) == 0x0320);
static_assert(offsetof(AHUD, DebugTextList) == 0x0328);
static_assert(offsetof(AHUD, ShowDebugTargetDesiredClass) == 0x0338);
static_assert(offsetof(AHUD, ShowDebugTargetActor) == 0x0340);
static_assert(offsetof(UMaterialExpressionTextureBase, Texture) == 0x0040);
static_assert(offsetof(FExpressionInput, ExpressionName) == 0x0004);
static_assert(offsetof(UMaterialExpressionTextureSample, Coordinates) == 0x0048);
static_assert(offsetof(UMaterialExpressionTextureSampleParameter, ParameterName) == 0x0060);
static_assert(offsetof(UMaterialExpressionTextureSampleParameter, ExpressionGUID) == 0x0068);
static_assert(offsetof(UMaterialExpressionTextureSampleParameter, Group) == 0x0078);
static_assert(offsetof(FSplineCurves, position) == 0x0000);
static_assert(offsetof(FSplineCurves, Rotation) == 0x0018);
static_assert(offsetof(FSplineCurves, Scale) == 0x0030);
static_assert(offsetof(FSplineCurves, ReparamTable) == 0x0048);
static_assert(offsetof(FSplineCurves, MetaData) == 0x0060);
static_assert(offsetof(USplineComponent, SplineCurves) == 0x0538);
static_assert(offsetof(USplineComponent, SplineInfo) == 0x05A8);
static_assert(offsetof(USplineComponent, SplineRotInfo) == 0x05C0);
static_assert(offsetof(USplineComponent, SplineScaleInfo) == 0x05D8);
static_assert(offsetof(USplineComponent, SplineReparamTable) == 0x05F0);
static_assert(offsetof(USplineComponent, DefaultUpVector) == 0x0620);
static_assert(offsetof(FAudioComponentParam, ParamName) == 0x0000);
static_assert(offsetof(FAudioComponentParam, SoundWaveParam) == 0x0018);
static_assert(offsetof(UAudioComponent, Sound) == 0x0260);
static_assert(offsetof(UAudioComponent, InstanceParameters) == 0x0268);
static_assert(offsetof(UAudioComponent, SoundClassOverride) == 0x0278);
static_assert(offsetof(UAudioComponent, AudioComponentUserID) == 0x028C);
static_assert(offsetof(UAudioComponent, SourceEffectChain) == 0x02B8);
static_assert(offsetof(UAudioComponent, AttenuationSettings) == 0x02D0);
static_assert(offsetof(UAudioComponent, AttenuationOverrides) == 0x02D8);
static_assert(offsetof(UAudioComponent, ConcurrencySettings) == 0x0678);
static_assert(offsetof(UAudioComponent, AutoAttachLocationRule) == 0x06DC);
static_assert(offsetof(UAudioComponent, AutoAttachRotationRule) == 0x06DD);
static_assert(offsetof(UAudioComponent, AutoAttachScaleRule) == 0x06DE);
static_assert(offsetof(UAudioComponent, ModulationRouting) == 0x06E0);
static_assert(offsetof(UAudioComponent, AutoAttachParent) == 0x0840);
static_assert(offsetof(UAudioComponent, AutoAttachSocketName) == 0x0848);
static_assert(offsetof(AGameMode, MatchState) == 0x0368);
static_assert(offsetof(AGameMode, EngineMessageClass) == 0x0388);
static_assert(offsetof(AGameMode, InactivePlayerArray) == 0x0390);
static_assert(offsetof(AGameStateBase, GameModeClass) == 0x02C8);
static_assert(offsetof(AGameStateBase, AuthorityGameMode) == 0x02D0);
static_assert(offsetof(AGameStateBase, SpectatorClass) == 0x02D8);
static_assert(offsetof(AGameStateBase, PlayerArray) == 0x02E0);
static_assert(offsetof(AGameState, MatchState) == 0x0318);
static_assert(offsetof(AGameState, PreviousMatchState) == 0x0320);
static_assert(offsetof(UCameraShakeBase, CameraManager) == 0x0038);
static_assert(offsetof(UMovementComponent, UpdatedComponent) == 0x00C0);
static_assert(offsetof(UMovementComponent, UpdatedPrimitive) == 0x00C8);
static_assert(offsetof(UMovementComponent, Velocity) == 0x00D4);
static_assert(offsetof(UMovementComponent, PlaneConstraintNormal) == 0x00E0);
static_assert(offsetof(UMovementComponent, PlaneConstraintOrigin) == 0x00EC);
static_assert(offsetof(UMovementComponent, PlaneConstraintAxisSetting) == 0x00FB);
static_assert(offsetof(FNavAgentProperties, PreferredNavData) == 0x0018);
static_assert(offsetof(UNavMovementComponent, NavAgentProps) == 0x0100);
static_assert(offsetof(UNavMovementComponent, MovementState) == 0x0144);
static_assert(offsetof(UNavMovementComponent, PathFollowingComp) == 0x0148);
static_assert(offsetof(UPawnMovementComponent, PawnOwner) == 0x0150);
static_assert(offsetof(FHitResult, Location) == 0x0010);
static_assert(offsetof(FHitResult, ImpactPoint) == 0x001C);
static_assert(offsetof(FHitResult, Normal) == 0x0028);
static_assert(offsetof(FHitResult, ImpactNormal) == 0x0034);
static_assert(offsetof(FHitResult, TraceStart) == 0x0040);
static_assert(offsetof(FHitResult, TraceEnd) == 0x004C);
static_assert(offsetof(FHitResult, PhysMaterial) == 0x0064);
static_assert(offsetof(FHitResult, Actor) == 0x006C);
static_assert(offsetof(FHitResult, Component) == 0x0074);
static_assert(offsetof(FHitResult, BoneName) == 0x007C);
static_assert(offsetof(FHitResult, MyBoneName) == 0x0084);
static_assert(offsetof(FFindFloorResult, HitResult) == 0x000C);
static_assert(offsetof(UCharacterMovementComponent, CharacterOwner) == 0x0168);
static_assert(offsetof(UCharacterMovementComponent, MovementMode) == 0x019C);
static_assert(offsetof(UCharacterMovementComponent, NetworkSmoothingMode) == 0x019E);
static_assert(offsetof(UCharacterMovementComponent, RotationRate) == 0x0224);
static_assert(offsetof(UCharacterMovementComponent, DeferredUpdatedMoveComponent) == 0x0238);
static_assert(offsetof(UCharacterMovementComponent, Acceleration) == 0x026C);
static_assert(offsetof(UCharacterMovementComponent, LastUpdateRotation) == 0x0280);
static_assert(offsetof(UCharacterMovementComponent, LastUpdateLocation) == 0x0290);
static_assert(offsetof(UCharacterMovementComponent, LastUpdateVelocity) == 0x029C);
static_assert(offsetof(UCharacterMovementComponent, PendingImpulseToApply) == 0x02B4);
static_assert(offsetof(UCharacterMovementComponent, PendingForceToApply) == 0x02C0);
static_assert(offsetof(UCharacterMovementComponent, CurrentFloor) == 0x0330);
static_assert(offsetof(UCharacterMovementComponent, DefaultLandMovementMode) == 0x03D4);
static_assert(offsetof(UCharacterMovementComponent, DefaultWaterMovementMode) == 0x03D5);
static_assert(offsetof(UCharacterMovementComponent, GroundMovementMode) == 0x03D6);
static_assert(offsetof(UCharacterMovementComponent, RequestedVelocity) == 0x03F0);
static_assert(offsetof(UCharacterMovementComponent, AvoidanceGroup) == 0x0400);
static_assert(offsetof(UCharacterMovementComponent, GroupsToAvoid) == 0x0404);
static_assert(offsetof(UCharacterMovementComponent, GroupsToIgnore) == 0x0408);
static_assert(offsetof(UCharacterMovementComponent, PendingLaunchVelocity) == 0x0410);
static_assert(offsetof(UCharacterMovementComponent, PostPhysicsTickFunction) == 0x04E0);
static_assert(offsetof(UCharacterMovementComponent, CurrentRootMotion) == 0x09D8);
static_assert(offsetof(UCharacterMovementComponent, ServerCorrectionRootMotion) == 0x0A10);
static_assert(offsetof(UCharacterMovementComponent, RootMotionParams) == 0x0AE0);
static_assert(offsetof(UCharacterMovementComponent, AnimRootMotionVelocity) == 0x0B20);
static_assert(offsetof(ABrush, BrushType) == 0x02C8);
static_assert(offsetof(ABrush, BrushColor) == 0x02CC);
static_assert(offsetof(ABrush, Brush) == 0x02D8);
static_assert(offsetof(ABrush, BrushComponent) == 0x02E0);
static_assert(offsetof(ABrush, SavedSelections) == 0x02F0);
static_assert(offsetof(AVolume, Interp_LinearColor1) == 0x0308);
static_assert(offsetof(UShapeComponent, ShapeBodySetup) == 0x0538);
static_assert(offsetof(UShapeComponent, AreaClass) == 0x0540);
static_assert(offsetof(UShapeComponent, ShapeColor) == 0x0548);
static_assert(offsetof(UBoxComponent, BoxExtent) == 0x0550);
static_assert(offsetof(UBoxComponent, SoundOcclusionSetting) == 0x0560);
static_assert(offsetof(FWeightedBlendable, Object) == 0x0008);
static_assert(offsetof(FWeightedBlendables, Array) == 0x0000);
static_assert(offsetof(FPostProcessSettings, FSRUpscaleQuality) == 0x0020);
static_assert(offsetof(FPostProcessSettings, BloomMethod) == 0x0035);
static_assert(offsetof(FPostProcessSettings, AutoExposureMethod) == 0x0036);
static_assert(offsetof(FPostProcessSettings, ColorSaturation) == 0x0040);
static_assert(offsetof(FPostProcessSettings, ColorContrast) == 0x0050);
static_assert(offsetof(FPostProcessSettings, ColorGamma) == 0x0060);
static_assert(offsetof(FPostProcessSettings, ColorGain) == 0x0070);
static_assert(offsetof(FPostProcessSettings, ColorOffset) == 0x0080);
static_assert(offsetof(FPostProcessSettings, ColorSaturationShadows) == 0x0090);
static_assert(offsetof(FPostProcessSettings, ColorContrastShadows) == 0x00A0);
static_assert(offsetof(FPostProcessSettings, ColorGammaShadows) == 0x00B0);
static_assert(offsetof(FPostProcessSettings, ColorGainShadows) == 0x00C0);
static_assert(offsetof(FPostProcessSettings, ColorOffsetShadows) == 0x00D0);
static_assert(offsetof(FPostProcessSettings, ColorSaturationMidtones) == 0x00E0);
static_assert(offsetof(FPostProcessSettings, ColorContrastMidtones) == 0x00F0);
static_assert(offsetof(FPostProcessSettings, ColorGammaMidtones) == 0x0100);
static_assert(offsetof(FPostProcessSettings, ColorGainMidtones) == 0x0110);
static_assert(offsetof(FPostProcessSettings, ColorOffsetMidtones) == 0x0120);
static_assert(offsetof(FPostProcessSettings, ColorSaturationHighlights) == 0x0130);
static_assert(offsetof(FPostProcessSettings, ColorContrastHighlights) == 0x0140);
static_assert(offsetof(FPostProcessSettings, ColorGammaHighlights) == 0x0150);
static_assert(offsetof(FPostProcessSettings, ColorGainHighlights) == 0x0160);
static_assert(offsetof(FPostProcessSettings, ColorOffsetHighlights) == 0x0170);
static_assert(offsetof(FPostProcessSettings, FilmWhitePoint) == 0x01A8);
static_assert(offsetof(FPostProcessSettings, FilmShadowTint) == 0x01B8);
static_assert(offsetof(FPostProcessSettings, FilmChannelMixerRed) == 0x01D4);
static_assert(offsetof(FPostProcessSettings, FilmChannelMixerGreen) == 0x01E4);
static_assert(offsetof(FPostProcessSettings, FilmChannelMixerBlue) == 0x01F4);
static_assert(offsetof(FPostProcessSettings, SceneColorTint) == 0x0214);
static_assert(offsetof(FPostProcessSettings, Bloom1Tint) == 0x0250);
static_assert(offsetof(FPostProcessSettings, Bloom2Tint) == 0x0260);
static_assert(offsetof(FPostProcessSettings, Bloom3Tint) == 0x0270);
static_assert(offsetof(FPostProcessSettings, Bloom4Tint) == 0x0280);
static_assert(offsetof(FPostProcessSettings, Bloom5Tint) == 0x0290);
static_assert(offsetof(FPostProcessSettings, Bloom6Tint) == 0x02A0);
static_assert(offsetof(FPostProcessSettings, BloomConvolutionTexture) == 0x02B8);
static_assert(offsetof(FPostProcessSettings, BloomConvolutionCenterUV) == 0x02C0);
static_assert(offsetof(FPostProcessSettings, BloomDirtMask) == 0x02D8);
static_assert(offsetof(FPostProcessSettings, BloomDirtMaskTint) == 0x02E4);
static_assert(offsetof(FPostProcessSettings, AmbientCubemapTint) == 0x02F4);
static_assert(offsetof(FPostProcessSettings, AmbientCubemapScale) == 0x0304);
static_assert(offsetof(FPostProcessSettings, AmbientCubemap) == 0x0320);
static_assert(offsetof(FPostProcessSettings, AutoExposureBiasCurve) == 0x0350);
static_assert(offsetof(FPostProcessSettings, AutoExposureMeterMask) == 0x0358);
static_assert(offsetof(FPostProcessSettings, LensFlareTint) == 0x0388);
static_assert(offsetof(FPostProcessSettings, LensFlareBokehShape) == 0x03A0);
static_assert(offsetof(FPostProcessSettings, LensFlareTints) == 0x03A8);
static_assert(offsetof(FPostProcessSettings, IndirectLightingColor) == 0x049C);
static_assert(offsetof(FPostProcessSettings, RayTracingGIType) == 0x04B8);
static_assert(offsetof(FPostProcessSettings, ColorGradingLUT) == 0x04C8);
static_assert(offsetof(FPostProcessSettings, ReflectionsType) == 0x0548);
static_assert(offsetof(FPostProcessSettings, RayTracingReflectionsShadows) == 0x0564);
static_assert(offsetof(FPostProcessSettings, TranslucencyType) == 0x0566);
static_assert(offsetof(FPostProcessSettings, RayTracingTranslucencyShadows) == 0x0574);
static_assert(offsetof(FPostProcessSettings, WeightedBlendables) == 0x0590);
static_assert(offsetof(UCameraComponent, ProjectionMode) == 0x027D);
static_assert(offsetof(UCameraComponent, PostProcessSettings) == 0x0320);
static_assert(offsetof(ACameraActor, AutoActivateForPlayer) == 0x02C8);
static_assert(offsetof(ACameraActor, CameraComponent) == 0x02D0);
static_assert(offsetof(ACameraActor, SceneComponent) == 0x02D8);
static_assert(offsetof(ACameraActor, PostProcessSettings) == 0x0300);
static_assert(offsetof(UCheatManager, DebugCameraControllerRef) == 0x0028);
static_assert(offsetof(UCheatManager, DebugCameraControllerClass) == 0x0030);
static_assert(offsetof(UCommandlet, HelpDescription) == 0x0028);
static_assert(offsetof(UCommandlet, HelpUsage) == 0x0038);
static_assert(offsetof(UCommandlet, HelpWebLink) == 0x0048);
static_assert(offsetof(UCommandlet, HelpParamNames) == 0x0058);
static_assert(offsetof(UCommandlet, HelpParamDescriptions) == 0x0068);
static_assert(offsetof(UEdGraphNode, DeprecatedPins) == 0x0038);
static_assert(offsetof(UEdGraphNode, AdvancedPinDisplay) == 0x0058);
static_assert(offsetof(UEdGraphNode, EnabledState) == 0x0059);
static_assert(offsetof(UEdGraphNode, NodeComment) == 0x0060);
static_assert(offsetof(UEdGraphNode, ErrorMsg) == 0x0078);
static_assert(offsetof(UEdGraphNode, NodeGuid) == 0x0088);
static_assert(offsetof(ANavigationObjectBase, CapsuleComponent) == 0x02D0);
static_assert(offsetof(ANavigationObjectBase, GoodSprite) == 0x02D8);
static_assert(offsetof(ANavigationObjectBase, BadSprite) == 0x02E0);
static_assert(offsetof(FForceFeedbackChannelDetails, Curve) == 0x0008);
static_assert(offsetof(UForceFeedbackEffect, ChannelDetails) == 0x0028);
static_assert(offsetof(UForceFeedbackEffect, Attenuation) == 0x0038);
static_assert(offsetof(UGameUserSettings, LastCPUBenchmarkSteps) == 0x00E8);
static_assert(offsetof(UGameUserSettings, LastGPUBenchmarkSteps) == 0x00F8);
static_assert(offsetof(UEdGraph, Schema) == 0x0028);
static_assert(offsetof(UEdGraph, Nodes) == 0x0030);
static_assert(offsetof(APlayerState, EngineMessageClass) == 0x02D8);
static_assert(offsetof(APlayerState, SavedNetworkAddress) == 0x02E8);
static_assert(offsetof(APlayerState, UniqueId) == 0x02F8);
static_assert(offsetof(APlayerState, PawnPrivate) == 0x0328);
static_assert(offsetof(APlayerState, PlayerNamePrivate) == 0x03A8);
static_assert(offsetof(ADefaultPawn, MovementComponent) == 0x0330);
static_assert(offsetof(ADefaultPawn, CollisionComponent) == 0x0338);
static_assert(offsetof(ADefaultPawn, MeshComponent) == 0x0340);
static_assert(offsetof(FKeyBind, Key) == 0x0000);
static_assert(offsetof(FKeyBind, Command) == 0x0018);
static_assert(offsetof(UPlayerInput, DebugExecBindings) == 0x0120);
static_assert(offsetof(UPlayerInput, InvertedAxis) == 0x0160);
static_assert(offsetof(URadialForceComponent, Falloff) == 0x0264);
static_assert(offsetof(FEngineShowFlagsSetting, ShowFlagName) == 0x0000);
static_assert(offsetof(USceneCaptureComponent, PrimitiveRenderMode) == 0x0260);
static_assert(offsetof(USceneCaptureComponent, CaptureSource) == 0x0261);
static_assert(offsetof(USceneCaptureComponent, HiddenActors) == 0x0278);
static_assert(offsetof(USceneCaptureComponent, ShowOnlyActors) == 0x0298);
static_assert(offsetof(USceneCaptureComponent, ShowFlagSettings) == 0x02B8);
static_assert(offsetof(USceneCaptureComponent, ProfilingEventName) == 0x02F8);
static_assert(offsetof(USceneCaptureComponent2D, ProjectionType) == 0x0320);
static_assert(offsetof(USceneCaptureComponent2D, TextureTarget) == 0x0330);
static_assert(offsetof(USceneCaptureComponent2D, CompositeMode) == 0x0338);
static_assert(offsetof(USceneCaptureComponent2D, PostProcessSettings) == 0x0340);
static_assert(offsetof(USceneCaptureComponent2D, CustomProjectionMatrix) == 0x08F0);
static_assert(offsetof(USceneCaptureComponent2D, ClipPlaneBase) == 0x0934);
static_assert(offsetof(USceneCaptureComponent2D, ClipPlaneNormal) == 0x0940);
static_assert(offsetof(AStaticMeshActor, StaticMeshComponent) == 0x02C8);
static_assert(offsetof(AStaticMeshActor, NavigationGeometryGatheringMode) == 0x02D1);
static_assert(offsetof(AAmbientSound, AudioComponent) == 0x02C8);
static_assert(offsetof(USoundNode, ChildNodes) == 0x0028);
static_assert(offsetof(USpringArmComponent, SocketOffset) == 0x0264);
static_assert(offsetof(USpringArmComponent, TargetOffset) == 0x0270);
static_assert(offsetof(USpringArmComponent, ProbeChannel) == 0x0280);
static_assert(offsetof(UStaticMeshComponent, StaticMesh) == 0x0570);
static_assert(offsetof(UStaticMeshComponent, WireframeColorOverride) == 0x0578);
static_assert(offsetof(UStaticMeshComponent, LODData) == 0x05A0);
static_assert(offsetof(UStaticMeshComponent, StreamingTextureData) == 0x05B0);
static_assert(offsetof(UStaticMeshComponent, LightmassSettings) == 0x05C0);
static_assert(offsetof(UStaticMeshComponent, SoundOcclusionSetting) == 0x05D8);
static_assert(offsetof(APhysicsVolume, GravityXRandWeightCurve) == 0x0340);
static_assert(offsetof(APhysicsVolume, GravityYRandWeightCurve) == 0x03C8);
static_assert(offsetof(APhysicsVolume, GravityZRandWeightCurve) == 0x0450);
static_assert(offsetof(ASkyLight, LightComponent) == 0x02C8);
static_assert(offsetof(FInstancedStaticMeshInstanceData, Transform) == 0x0000);
static_assert(offsetof(UInstancedStaticMeshComponent, PerInstanceSMData) == 0x05E0);
static_assert(offsetof(UInstancedStaticMeshComponent, PerInstanceSMCustomData) == 0x05F8);
static_assert(offsetof(UInstancedStaticMeshComponent, InstanceReorderTable) == 0x0618);
static_assert(offsetof(UInstancedStaticMeshComponent, CachedMappings) == 0x0678);
static_assert(offsetof(UHierarchicalInstancedStaticMeshComponent, SortedInstances) == 0x0698);
static_assert(offsetof(UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds) == 0x06B0);
static_assert(offsetof(UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds) == 0x06CC);
static_assert(offsetof(UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList) == 0x06E8);
static_assert(offsetof(UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds) == 0x0704);
static_assert(offsetof(FMaterialTextureInfo, TextureName) == 0x0008);
static_assert(offsetof(UMaterialInterface, SubsurfaceProfile) == 0x0038);
static_assert(offsetof(UMaterialInterface, LightmassSettings) == 0x0050);
static_assert(offsetof(UMaterialInterface, TextureStreamingData) == 0x0060);
static_assert(offsetof(UMaterialInterface, AssetUserData) == 0x0070);
static_assert(offsetof(FMaterialParameterInfo, Name) == 0x0000);
static_assert(offsetof(FMaterialParameterInfo, Association) == 0x0008);
static_assert(offsetof(FScalarParameterValue, ParameterInfo) == 0x0000);
static_assert(offsetof(FScalarParameterValue, ExpressionGUID) == 0x0014);
static_assert(offsetof(FVectorParameterValue, ParameterInfo) == 0x0000);
static_assert(offsetof(FVectorParameterValue, ParameterValue) == 0x0010);
static_assert(offsetof(FVectorParameterValue, ExpressionGUID) == 0x0020);
static_assert(offsetof(FTextureParameterValue, ParameterInfo) == 0x0000);
static_assert(offsetof(FTextureParameterValue, ParameterValue) == 0x0010);
static_assert(offsetof(FTextureParameterValue, ExpressionGUID) == 0x0018);
static_assert(offsetof(FRuntimeVirtualTextureParameterValue, ParameterInfo) == 0x0000);
static_assert(offsetof(FRuntimeVirtualTextureParameterValue, ParameterValue) == 0x0010);
static_assert(offsetof(FRuntimeVirtualTextureParameterValue, ExpressionGUID) == 0x0018);
static_assert(offsetof(FFontParameterValue, ParameterInfo) == 0x0000);
static_assert(offsetof(FFontParameterValue, FontValue) == 0x0010);
static_assert(offsetof(FFontParameterValue, ExpressionGUID) == 0x001C);
static_assert(offsetof(FMaterialInstanceBasePropertyOverrides, BlendMode) == 0x0002);
static_assert(offsetof(FMaterialInstanceBasePropertyOverrides, ShadingModel) == 0x0003);
static_assert(offsetof(FStaticParameterBase, ParameterInfo) == 0x0000);
static_assert(offsetof(FStaticParameterBase, ExpressionGUID) == 0x0014);
static_assert(offsetof(FMaterialLayersFunctions, Layers) == 0x0000);
static_assert(offsetof(FMaterialLayersFunctions, Blends) == 0x0010);
static_assert(offsetof(FMaterialLayersFunctions, LayerStates) == 0x0020);
static_assert(offsetof(FMaterialLayersFunctions, KeyString) == 0x0030);
static_assert(offsetof(FStaticMaterialLayersParameter, Value) == 0x0028);
static_assert(offsetof(FStaticParameterSet, StaticSwitchParameters) == 0x0000);
static_assert(offsetof(FStaticParameterSet, StaticComponentMaskParameters) == 0x0010);
static_assert(offsetof(FStaticParameterSet, TerrainLayerWeightParameters) == 0x0020);
static_assert(offsetof(FStaticParameterSet, MaterialLayersParameters) == 0x0030);
static_assert(offsetof(FMaterialCachedParameterEntry, NameHashes) == 0x0000);
static_assert(offsetof(FMaterialCachedParameterEntry, ParameterInfos) == 0x0010);
static_assert(offsetof(FMaterialCachedParameterEntry, ExpressionGuids) == 0x0020);
static_assert(offsetof(FMaterialCachedParameterEntry, Overrides) == 0x0030);
static_assert(offsetof(FMaterialCachedParameters, RuntimeEntries) == 0x0000);
static_assert(offsetof(FMaterialCachedParameters, ScalarValues) == 0x0140);
static_assert(offsetof(FMaterialCachedParameters, VectorValues) == 0x0150);
static_assert(offsetof(FMaterialCachedParameters, TextureValues) == 0x0160);
static_assert(offsetof(FMaterialCachedParameters, FontValues) == 0x0170);
static_assert(offsetof(FMaterialCachedParameters, FontPageValues) == 0x0180);
static_assert(offsetof(FMaterialCachedParameters, RuntimeVirtualTextureValues) == 0x0190);
static_assert(offsetof(UMaterialInstance, PhysMaterial) == 0x0088);
static_assert(offsetof(UMaterialInstance, PhysicalMaterialMap) == 0x0090);
static_assert(offsetof(UMaterialInstance, Parent) == 0x00D0);
static_assert(offsetof(UMaterialInstance, ScalarParameterValues) == 0x00E0);
static_assert(offsetof(UMaterialInstance, VectorParameterValues) == 0x00F0);
static_assert(offsetof(UMaterialInstance, TextureParameterValues) == 0x0100);
static_assert(offsetof(UMaterialInstance, RuntimeVirtualTextureParameterValues) == 0x0110);
static_assert(offsetof(UMaterialInstance, FontParameterValues) == 0x0120);
static_assert(offsetof(UMaterialInstance, BasePropertyOverrides) == 0x0130);
static_assert(offsetof(UMaterialInstance, StaticParameters) == 0x0148);
static_assert(offsetof(UMaterialInstance, CachedLayerParameters) == 0x0188);
static_assert(offsetof(UMaterialInstance, CachedReferencedTextures) == 0x0328);
static_assert(offsetof(UMaterialInstanceConstant, PhysMaterialMask) == 0x0360);
static_assert(offsetof(UBlueprintCore, SkeletonGeneratedClass) == 0x0028);
static_assert(offsetof(UBlueprintCore, GeneratedClass) == 0x0030);
static_assert(offsetof(UBlueprintCore, BlueprintGuid) == 0x003C);
static_assert(offsetof(UBlueprint, ParentClass) == 0x0050);
static_assert(offsetof(UBlueprint, BlueprintType) == 0x0058);
static_assert(offsetof(UBlueprint, SimpleConstructionScript) == 0x0060);
static_assert(offsetof(UBlueprint, ComponentTemplates) == 0x0068);
static_assert(offsetof(UBlueprint, Timelines) == 0x0078);
static_assert(offsetof(UBlueprint, ComponentClassOverrides) == 0x0088);
static_assert(offsetof(UBlueprint, InheritableComponentHandler) == 0x0098);
static_assert(offsetof(UChannel, Connection) == 0x0028);
static_assert(offsetof(UActorChannel, Actor) == 0x0070);
static_assert(offsetof(UActorChannel, CreateSubObjects) == 0x0160);
static_assert(offsetof(UAnimationAsset, Skeleton) == 0x0038);
static_assert(offsetof(UAnimationAsset, MetaData) == 0x0060);
static_assert(offsetof(UAnimationAsset, AssetUserData) == 0x0070);
static_assert(offsetof(FInterpolationParameter, InterpolationType) == 0x0004);
static_assert(offsetof(FPerBoneInterpolation, BoneReference) == 0x0000);
static_assert(offsetof(FBlendSample, Animation) == 0x0000);
static_assert(offsetof(FBlendSample, SampleValue) == 0x0008);
static_assert(offsetof(FBlendParameter, DisplayName) == 0x0000);
static_assert(offsetof(UBlendSpaceBase, InterpolationParam) == 0x0090);
static_assert(offsetof(UBlendSpaceBase, NotifyTriggerMode) == 0x00AC);
static_assert(offsetof(UBlendSpaceBase, PerBoneBlend) == 0x00B0);
static_assert(offsetof(UBlendSpaceBase, SampleData) == 0x00C8);
static_assert(offsetof(UBlendSpaceBase, GridSamples) == 0x00D8);
static_assert(offsetof(UBlendSpaceBase, BlendParameters) == 0x00E8);
static_assert(offsetof(UBlendSpace, AxisToScaleAnimation) == 0x0148);
static_assert(offsetof(UAISystemBase, AISystemClassName) == 0x0028);
static_assert(offsetof(UAISystemBase, AISystemModuleName) == 0x0040);
static_assert(offsetof(FCustomAttributeSetting, Name) == 0x0000);
static_assert(offsetof(FCustomAttributeSetting, Meaning) == 0x0010);
static_assert(offsetof(UAnimationSettings, KeyEndEffectorsMatchNameArray) == 0x0040);
static_assert(offsetof(UAnimationSettings, BoneCustomAttributesNames) == 0x0058);
static_assert(offsetof(UAnimationSettings, BoneNamesWithCustomAttributes) == 0x0068);
static_assert(offsetof(UAnimationSettings, AttributeBlendModes) == 0x0078);
static_assert(offsetof(UAnimationSettings, DefaultAttributeBlendMode) == 0x00C8);
static_assert(offsetof(FAnimGroupInfo, Name) == 0x0000);
static_assert(offsetof(FAnimGroupInfo, Color) == 0x0008);
static_assert(offsetof(UAnimBlueprint, TargetSkeleton) == 0x00A8);
static_assert(offsetof(UAnimBlueprint, Groups) == 0x00B0);
static_assert(offsetof(FBakedStateExitTransition, PoseEvaluatorLinks) == 0x0010);
static_assert(offsetof(FBakedAnimationState, StateName) == 0x0000);
static_assert(offsetof(FBakedAnimationState, Transitions) == 0x0008);
static_assert(offsetof(FBakedAnimationState, PlayerNodeIndices) == 0x0030);
static_assert(offsetof(FBakedAnimationState, LayerNodeIndices) == 0x0040);
static_assert(offsetof(FAnimationStateBase, StateName) == 0x0000);
static_assert(offsetof(FAnimationTransitionBetweenStates, BlendMode) == 0x0020);
static_assert(offsetof(FAnimationTransitionBetweenStates, CustomCurve) == 0x0028);
static_assert(offsetof(FAnimationTransitionBetweenStates, BlendProfile) == 0x0030);
static_assert(offsetof(FAnimationTransitionBetweenStates, LogicType) == 0x0038);
static_assert(offsetof(FBakedAnimationStateMachine, MachineName) == 0x0000);
static_assert(offsetof(FBakedAnimationStateMachine, States) == 0x0010);
static_assert(offsetof(FBakedAnimationStateMachine, Transitions) == 0x0020);
static_assert(offsetof(FCachedPoseIndices, OrderedSavedPoseNodeIndices) == 0x0000);
static_assert(offsetof(FExposedValueCopyRecord, PostCopyOperation) == 0x0004);
static_assert(offsetof(FExposedValueHandler, BoundFunction) == 0x0000);
static_assert(offsetof(FExposedValueHandler, CopyRecords) == 0x0008);
static_assert(offsetof(FExposedValueHandler, Function) == 0x0018);
static_assert(offsetof(FGraphAssetPlayerInformation, PlayerNodeIndices) == 0x0000);
static_assert(offsetof(UAnimBlueprintGeneratedClass, BakedStateMachines) == 0x0330);
static_assert(offsetof(UAnimBlueprintGeneratedClass, TargetSkeleton) == 0x0340);
static_assert(offsetof(UAnimBlueprintGeneratedClass, AnimNotifies) == 0x0348);
static_assert(offsetof(UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap) == 0x0358);
static_assert(offsetof(UAnimBlueprintGeneratedClass, SyncGroupNames) == 0x0428);
static_assert(offsetof(UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs) == 0x0438);
static_assert(offsetof(UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation) == 0x0448);
static_assert(offsetof(UAnimBlueprintGeneratedClass, GraphBlendOptions) == 0x0498);
static_assert(offsetof(UAnimBlueprintGeneratedClass, PropertyAccessLibrary) == 0x04E8);
static_assert(offsetof(UAnimBoneCompressionSettings, Codecs) == 0x0028);
static_assert(offsetof(FAnimBlueprintFunction, Name) == 0x0000);
static_assert(offsetof(FAnimBlueprintFunction, Group) == 0x0008);
static_assert(offsetof(FAnimBlueprintFunction, InputPoseNames) == 0x0018);
static_assert(offsetof(FAnimBlueprintFunction, InputPoseNodeIndices) == 0x0028);
static_assert(offsetof(UAnimClassData, BakedStateMachines) == 0x0030);
static_assert(offsetof(UAnimClassData, TargetSkeleton) == 0x0040);
static_assert(offsetof(UAnimClassData, AnimNotifies) == 0x0048);
static_assert(offsetof(UAnimClassData, OrderedSavedPoseIndicesMap) == 0x0058);
static_assert(offsetof(UAnimClassData, AnimBlueprintFunctions) == 0x00A8);
static_assert(offsetof(UAnimClassData, AnimBlueprintFunctionData) == 0x00B8);
static_assert(offsetof(UAnimClassData, GraphNameAssetPlayers) == 0x01A8);
static_assert(offsetof(UAnimClassData, SyncGroupNames) == 0x01F8);
static_assert(offsetof(UAnimClassData, EvaluateGraphExposedInputs) == 0x0208);
static_assert(offsetof(UAnimClassData, GraphBlendOptions) == 0x0218);
static_assert(offsetof(UAnimClassData, PropertyAccessLibrary) == 0x0268);
static_assert(offsetof(FSmartName, DisplayName) == 0x0000);
static_assert(offsetof(FAnimCurveBase, LastObservedName) == 0x0000);
static_assert(offsetof(FAnimCurveBase, Name) == 0x0008);
static_assert(offsetof(FFloatCurve, FloatCurve) == 0x0018);
static_assert(offsetof(FRawCurveTracks, FloatCurves) == 0x0000);
static_assert(offsetof(UAnimSequenceBase, Notifies) == 0x0080);
static_assert(offsetof(UAnimSequenceBase, RawCurveData) == 0x0098);
static_assert(offsetof(FAnimSegment, AnimReference) == 0x0000);
static_assert(offsetof(FAnimTrack, AnimSegments) == 0x0000);
static_assert(offsetof(UAnimComposite, AnimationTrack) == 0x00A8);
static_assert(offsetof(UAnimCompress, TranslationCompressionFormat) == 0x003C);
static_assert(offsetof(UAnimCompress, RotationCompressionFormat) == 0x003D);
static_assert(offsetof(UAnimCompress, ScaleCompressionFormat) == 0x003E);
static_assert(offsetof(UAnimCurveCompressionSettings, Codec) == 0x0028);
static_assert(offsetof(FAlphaBlend, CustomCurve) == 0x0000);
static_assert(offsetof(FAlphaBlend, BlendOption) == 0x0024);
static_assert(offsetof(FAnimSyncMarker, MarkerName) == 0x0000);
static_assert(offsetof(FMarkerSyncData, AuthoredSyncMarkers) == 0x0000);
static_assert(offsetof(FCompositeSection, SectionName) == 0x0030);
static_assert(offsetof(FCompositeSection, NextSectionName) == 0x003C);
static_assert(offsetof(FCompositeSection, MetaData) == 0x0048);
static_assert(offsetof(FSlotAnimationTrack, SlotName) == 0x0000);
static_assert(offsetof(FSlotAnimationTrack, AnimTrack) == 0x0008);
static_assert(offsetof(FBranchingPoint, EventName) == 0x0030);
static_assert(offsetof(FBranchingPointMarker, NotifyEventType) == 0x0008);
static_assert(offsetof(FTimeStretchCurve, Markers) == 0x0008);
static_assert(offsetof(UAnimMontage, BlendIn) == 0x00A8);
static_assert(offsetof(UAnimMontage, BlendOut) == 0x00E0);
static_assert(offsetof(UAnimMontage, SyncGroup) == 0x0118);
static_assert(offsetof(UAnimMontage, MarkerData) == 0x0128);
static_assert(offsetof(UAnimMontage, CompositeSections) == 0x0148);
static_assert(offsetof(UAnimMontage, SlotAnimTracks) == 0x0158);
static_assert(offsetof(UAnimMontage, BranchingPoints) == 0x0168);
static_assert(offsetof(UAnimMontage, RootMotionRootLock) == 0x017B);
static_assert(offsetof(UAnimMontage, BranchingPointMarkers) == 0x0180);
static_assert(offsetof(UAnimMontage, BranchingPointStateNotifyIndices) == 0x0190);
static_assert(offsetof(UAnimMontage, TimeStretchCurve) == 0x01A0);
static_assert(offsetof(UAnimMontage, TimeStretchCurveName) == 0x01C8);
static_assert(offsetof(UAnimNotify_PlayParticleEffect, PSTemplate) == 0x0038);
static_assert(offsetof(UAnimNotify_PlayParticleEffect, LocationOffset) == 0x0040);
static_assert(offsetof(UAnimNotify_PlayParticleEffect, RotationOffset) == 0x004C);
static_assert(offsetof(UAnimNotify_PlayParticleEffect, Scale) == 0x0058);
static_assert(offsetof(UAnimNotify_PlayParticleEffect, SocketName) == 0x0084);
static_assert(offsetof(UAnimNotify_PlaySound, Sound) == 0x0038);
static_assert(offsetof(UAnimNotify_PlaySound, AttachName) == 0x004C);
static_assert(offsetof(UAnimNotify_PlaySound, SoundClassOverride) == 0x0058);
static_assert(offsetof(UAnimNotify_PlaySound, AttenuationOverride) == 0x0060);
static_assert(offsetof(UAnimNotifyState_TimedParticleEffect, PSTemplate) == 0x0030);
static_assert(offsetof(UAnimNotifyState_TimedParticleEffect, SocketName) == 0x0038);
static_assert(offsetof(UAnimNotifyState_TimedParticleEffect, LocationOffset) == 0x0040);
static_assert(offsetof(UAnimNotifyState_TimedParticleEffect, RotationOffset) == 0x004C);
static_assert(offsetof(UAnimNotifyState_Trail, PSTemplate) == 0x0030);
static_assert(offsetof(UAnimNotifyState_Trail, FirstSocketName) == 0x0038);
static_assert(offsetof(UAnimNotifyState_Trail, SecondSocketName) == 0x0040);
static_assert(offsetof(UAnimNotifyState_Trail, WidthScaleMode) == 0x0048);
static_assert(offsetof(UAnimNotifyState_Trail, WidthScaleCurve) == 0x004C);
static_assert(offsetof(USBAnimMaskData, IgnoreCurveNames) == 0x0030);
static_assert(offsetof(USBAnimMaskData, IgnoreCurveNamesMap) == 0x0048);
static_assert(offsetof(FSBCurveRemapElements, TargetName) == 0x0000);
static_assert(offsetof(FSBCurveRemapInfos, Elements) == 0x0000);
static_assert(offsetof(USBCurveRemapData, RemappingTable) == 0x0030);
static_assert(offsetof(FStringCurveKey, Value) == 0x0008);
static_assert(offsetof(FStringCurve, DefaultValue) == 0x0068);
static_assert(offsetof(FStringCurve, Keys) == 0x0078);
static_assert(offsetof(FBakedStringCustomAttribute, AttributeName) == 0x0000);
static_assert(offsetof(FBakedStringCustomAttribute, StringCurve) == 0x0008);
static_assert(offsetof(FIntegralCurve, Keys) == 0x0068);
static_assert(offsetof(FBakedIntegerCustomAttribute, AttributeName) == 0x0000);
static_assert(offsetof(FBakedIntegerCustomAttribute, IntCurve) == 0x0008);
static_assert(offsetof(FSimpleCurve, InterpMode) == 0x0070);
static_assert(offsetof(FSimpleCurve, Keys) == 0x0078);
static_assert(offsetof(FBakedFloatCustomAttribute, AttributeName) == 0x0000);
static_assert(offsetof(FBakedFloatCustomAttribute, FloatCurve) == 0x0008);
static_assert(offsetof(FBakedCustomAttributePerBoneData, StringAttributes) == 0x0008);
static_assert(offsetof(FBakedCustomAttributePerBoneData, IntAttributes) == 0x0018);
static_assert(offsetof(FBakedCustomAttributePerBoneData, FloatAttributes) == 0x0028);
static_assert(offsetof(FAnimSequenceTrackCacheData, BoneName) == 0x0000);
static_assert(offsetof(FAnimSequenceTrackCacheData, position) == 0x0010);
static_assert(offsetof(FAnimSequenceTrackCacheData, Velocity) == 0x001C);
static_assert(offsetof(FAnimSequenceTrackCacheDataArray, Container) == 0x0000);
static_assert(offsetof(UAnimSequence, TrackToSkeletonMapTable) == 0x00B0);
static_assert(offsetof(UAnimSequence, BoneCompressionSettings) == 0x00D0);
static_assert(offsetof(UAnimSequence, CurveCompressionSettings) == 0x00D8);
static_assert(offsetof(UAnimSequence, AdditiveAnimType) == 0x0150);
static_assert(offsetof(UAnimSequence, RefPoseType) == 0x0151);
static_assert(offsetof(UAnimSequence, RefPoseSeq) == 0x0158);
static_assert(offsetof(UAnimSequence, RetargetSource) == 0x0164);
static_assert(offsetof(UAnimSequence, Interpolation) == 0x016C);
static_assert(offsetof(UAnimSequence, RootMotionRootLock) == 0x016E);
static_assert(offsetof(UAnimSequence, AnimMaskData) == 0x0178);
static_assert(offsetof(UAnimSequence, AuthoredSyncMarkers) == 0x0180);
static_assert(offsetof(UAnimSequence, BakedPerBoneCustomAttributeData) == 0x01A8);
static_assert(offsetof(UAnimSequence, BakeTrackCacheBoneNames) == 0x01B8);
static_assert(offsetof(UAnimSequence, TrackCacheMap) == 0x01D0);
static_assert(offsetof(FAnimSetMeshLinkup, BoneToTrackTable) == 0x0000);
static_assert(offsetof(UAnimSet, TrackBoneNames) == 0x0030);
static_assert(offsetof(UAnimSet, LinkupCache) == 0x0040);
static_assert(offsetof(UAnimSet, BoneUseAnimTranslation) == 0x0050);
static_assert(offsetof(UAnimSet, ForceUseMeshTranslation) == 0x0060);
static_assert(offsetof(UAnimSet, UseTranslationBoneNames) == 0x0070);
static_assert(offsetof(UAnimSet, ForceMeshTranslationBoneNames) == 0x0080);
static_assert(offsetof(UAnimSet, PreviewSkelMeshName) == 0x0090);
static_assert(offsetof(UAnimSet, BestRatioSkelMeshName) == 0x0098);
static_assert(offsetof(UAnimSingleNodeInstance, CurrentAsset) == 0x02C8);
static_assert(offsetof(UAnimStreamable, Interpolation) == 0x00AC);
static_assert(offsetof(UAnimStreamable, RetargetSource) == 0x00B0);
static_assert(offsetof(UAnimStreamable, BoneCompressionSettings) == 0x00C8);
static_assert(offsetof(UAnimStreamable, CurveCompressionSettings) == 0x00D0);
static_assert(offsetof(UAnimStreamable, RootMotionRootLock) == 0x00D9);
static_assert(offsetof(UArrowComponent, ArrowColor) == 0x0538);
static_assert(offsetof(UAssetExportTask, Object) == 0x0028);
static_assert(offsetof(UAssetExportTask, Exporter) == 0x0030);
static_assert(offsetof(UAssetExportTask, Filename) == 0x0038);
static_assert(offsetof(UAssetExportTask, IgnoreObjectList) == 0x0050);
static_assert(offsetof(UAssetExportTask, OPTIONS) == 0x0060);
static_assert(offsetof(UAssetExportTask, Errors) == 0x0068);
static_assert(offsetof(UAssetManager, ObjectReferenceList) == 0x02C0);
static_assert(offsetof(FDirectoryPath, Path) == 0x0000);
static_assert(offsetof(FPrimaryAssetRules, CookRule) == 0x0009);
static_assert(offsetof(FPrimaryAssetTypeInfo, PrimaryAssetType) == 0x0000);
static_assert(offsetof(FPrimaryAssetTypeInfo, AssetBaseClass) == 0x0008);
static_assert(offsetof(FPrimaryAssetTypeInfo, AssetBaseClassLoaded) == 0x0030);
static_assert(offsetof(FPrimaryAssetTypeInfo, Directories) == 0x0040);
static_assert(offsetof(FPrimaryAssetTypeInfo, SpecificAssets) == 0x0050);
static_assert(offsetof(FPrimaryAssetTypeInfo, Rules) == 0x0060);
static_assert(offsetof(FPrimaryAssetTypeInfo, AssetScanPaths) == 0x0070);
static_assert(offsetof(FPrimaryAssetRulesOverride, PrimaryAssetId) == 0x0000);
static_assert(offsetof(FPrimaryAssetRulesOverride, Rules) == 0x0010);
static_assert(offsetof(FPrimaryAssetRulesCustomOverride, PrimaryAssetType) == 0x0000);
static_assert(offsetof(FPrimaryAssetRulesCustomOverride, FilterDirectory) == 0x0008);
static_assert(offsetof(FPrimaryAssetRulesCustomOverride, FilterString) == 0x0018);
static_assert(offsetof(FPrimaryAssetRulesCustomOverride, Rules) == 0x0028);
static_assert(offsetof(FAssetManagerRedirect, Old) == 0x0000);
static_assert(offsetof(FAssetManagerRedirect, New) == 0x0010);
static_assert(offsetof(UAssetManagerSettings, PrimaryAssetTypesToScan) == 0x0038);
static_assert(offsetof(UAssetManagerSettings, DirectoriesToExclude) == 0x0048);
static_assert(offsetof(UAssetManagerSettings, PrimaryAssetRules) == 0x0058);
static_assert(offsetof(UAssetManagerSettings, CustomPrimaryAssetRules) == 0x0068);
static_assert(offsetof(UAssetManagerSettings, PrimaryAssetIdRedirects) == 0x0080);
static_assert(offsetof(UAssetManagerSettings, PrimaryAssetTypeRedirects) == 0x0090);
static_assert(offsetof(UAssetManagerSettings, AssetPathRedirects) == 0x00A0);
static_assert(offsetof(FAssetMapping, SourceAsset) == 0x0000);
static_assert(offsetof(FAssetMapping, TargetAsset) == 0x0008);
static_assert(offsetof(UAssetMappingTable, MappedAssets) == 0x0028);
static_assert(offsetof(UAsyncActionHandleSaveGame, SaveGameObject) == 0x0060);
static_assert(offsetof(AAtmosphericFog, AtmosphericFogComponent) == 0x02C8);
static_assert(offsetof(UAtmosphericFogComponent, DefaultLightColor) == 0x028C);
static_assert(offsetof(UAtmosphericFogComponent, PrecomputeParams) == 0x0294);
static_assert(offsetof(UAtmosphericFogComponent, TransmittanceTexture) == 0x02C0);
static_assert(offsetof(UAtmosphericFogComponent, IrradianceTexture) == 0x02C8);
static_assert(offsetof(UAudioBus, AudioBusChannels) == 0x0028);
static_assert(offsetof(FAudioQualitySettings, DisplayName) == 0x0000);
static_assert(offsetof(UAudioSettings, DefaultSoundClassName) == 0x0038);
static_assert(offsetof(UAudioSettings, DefaultMediaSoundClassName) == 0x0050);
static_assert(offsetof(UAudioSettings, DefaultSoundConcurrencyName) == 0x0068);
static_assert(offsetof(UAudioSettings, DefaultBaseSoundMix) == 0x0080);
static_assert(offsetof(UAudioSettings, VoiPSoundClass) == 0x0098);
static_assert(offsetof(UAudioSettings, MasterSubmix) == 0x00B0);
static_assert(offsetof(UAudioSettings, ReverbSubmix) == 0x00C8);
static_assert(offsetof(UAudioSettings, EQSubmix) == 0x00E0);
static_assert(offsetof(UAudioSettings, VoiPSampleRate) == 0x00F8);
static_assert(offsetof(UAudioSettings, QualityLevels) == 0x0110);
static_assert(offsetof(UAudioSettings, PanningMethod) == 0x0128);
static_assert(offsetof(UAudioSettings, MonoChannelUpmixMethod) == 0x0129);
static_assert(offsetof(UAudioSettings, DialogueFilenameFormat) == 0x0130);
static_assert(offsetof(FReverbSettings, ReverbEffect) == 0x0008);
static_assert(offsetof(FReverbSettings, ReverbPluginEffect) == 0x0010);
static_assert(offsetof(FAudioVolumeSubmixSendSettings, ListenerLocationState) == 0x0000);
static_assert(offsetof(FAudioVolumeSubmixSendSettings, SourceLocationState) == 0x0001);
static_assert(offsetof(FAudioVolumeSubmixSendSettings, SubmixSends) == 0x0008);
static_assert(offsetof(FAudioVolumeSubmixOverrideSettings, Submix) == 0x0000);
static_assert(offsetof(FAudioVolumeSubmixOverrideSettings, SubmixEffectChain) == 0x0008);
static_assert(offsetof(AAudioVolume, Settings) == 0x0320);
static_assert(offsetof(AAudioVolume, AmbientZoneSettings) == 0x0340);
static_assert(offsetof(AAudioVolume, SubmixSendSettings) == 0x0368);
static_assert(offsetof(AAudioVolume, SubmixOverrideSettings) == 0x0378);
static_assert(offsetof(UAutoDestroySubsystem, ActorsToPoll) == 0x0038);
static_assert(offsetof(FEditorMapPerformanceTestDefinition, PerformanceTestmap) == 0x0000);
static_assert(offsetof(FFilePath, FilePath) == 0x0000);
static_assert(offsetof(FImportFactorySettingValues, SettingName) == 0x0000);
static_assert(offsetof(FImportFactorySettingValues, Value) == 0x0010);
static_assert(offsetof(FEditorImportWorkflowDefinition, ImportFilePath) == 0x0000);
static_assert(offsetof(FEditorImportWorkflowDefinition, FactorySettings) == 0x0010);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, Diffuse) == 0x0000);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, Normal) == 0x0020);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, StaticMesh) == 0x0040);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, ReimportStaticMesh) == 0x0060);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, BlendShapeMesh) == 0x0080);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, MorphMesh) == 0x00A0);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, SkeletalMesh) == 0x00C0);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, Animation) == 0x00E0);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, Sound) == 0x0100);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, SurroundSound) == 0x0120);
static_assert(offsetof(FBuildPromotionImportWorkflowSettings, OtherAssetsToImport) == 0x0140);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, BlueprintAsset) == 0x0000);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, MaterialAsset) == 0x0010);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, ParticleSystemAsset) == 0x0020);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, SkeletalMeshAsset) == 0x0030);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, StaticMeshAsset) == 0x0040);
static_assert(offsetof(FBuildPromotionOpenAssetSettings, TextureAsset) == 0x0050);
static_assert(offsetof(FBuildPromotionNewProjectSettings, NewProjectFolderOverride) == 0x0000);
static_assert(offsetof(FBuildPromotionNewProjectSettings, NewProjectNameOverride) == 0x0010);
static_assert(offsetof(FBuildPromotionTestSettings, DefaultStaticMeshAsset) == 0x0000);
static_assert(offsetof(FBuildPromotionTestSettings, ImportWorkflow) == 0x0010);
static_assert(offsetof(FBuildPromotionTestSettings, OpenAssets) == 0x0160);
static_assert(offsetof(FBuildPromotionTestSettings, NewProjectSettings) == 0x01C0);
static_assert(offsetof(FBuildPromotionTestSettings, SourceControlMaterial) == 0x01E0);
static_assert(offsetof(FMaterialEditorPromotionSettings, DefaultMaterialAsset) == 0x0000);
static_assert(offsetof(FMaterialEditorPromotionSettings, DefaultDiffuseTexture) == 0x0010);
static_assert(offsetof(FMaterialEditorPromotionSettings, DefaultNormalTexture) == 0x0020);
static_assert(offsetof(FParticleEditorPromotionSettings, DefaultParticleAsset) == 0x0000);
static_assert(offsetof(FBlueprintEditorPromotionSettings, FirstMeshPath) == 0x0000);
static_assert(offsetof(FBlueprintEditorPromotionSettings, SecondMeshPath) == 0x0010);
static_assert(offsetof(FBlueprintEditorPromotionSettings, DefaultParticleAsset) == 0x0020);
static_assert(offsetof(FExternalToolDefinition, ToolName) == 0x0000);
static_assert(offsetof(FExternalToolDefinition, ExecutablePath) == 0x0010);
static_assert(offsetof(FExternalToolDefinition, CommandLineOptions) == 0x0020);
static_assert(offsetof(FExternalToolDefinition, WorkingDirectory) == 0x0030);
static_assert(offsetof(FExternalToolDefinition, ScriptExtension) == 0x0040);
static_assert(offsetof(FExternalToolDefinition, ScriptDirectory) == 0x0050);
static_assert(offsetof(FEditorImportExportTestDefinition, ImportFilePath) == 0x0000);
static_assert(offsetof(FEditorImportExportTestDefinition, ExportFileExtension) == 0x0010);
static_assert(offsetof(FEditorImportExportTestDefinition, FactorySettings) == 0x0028);
static_assert(offsetof(FLaunchOnTestSettings, LaunchOnTestmap) == 0x0000);
static_assert(offsetof(FLaunchOnTestSettings, DeviceID) == 0x0010);
static_assert(offsetof(UAutomationTestSettings, EngineTestModules) == 0x0028);
static_assert(offsetof(UAutomationTestSettings, EditorTestModules) == 0x0038);
static_assert(offsetof(UAutomationTestSettings, AutomationTestmap) == 0x0048);
static_assert(offsetof(UAutomationTestSettings, EditorPerformanceTestMaps) == 0x0060);
static_assert(offsetof(UAutomationTestSettings, AssetsToOpen) == 0x0070);
static_assert(offsetof(UAutomationTestSettings, MapsToPIETest) == 0x0080);
static_assert(offsetof(UAutomationTestSettings, BuildPromotionTest) == 0x0090);
static_assert(offsetof(UAutomationTestSettings, MaterialEditorPromotionTest) == 0x0280);
static_assert(offsetof(UAutomationTestSettings, ParticleEditorPromotionTest) == 0x02B0);
static_assert(offsetof(UAutomationTestSettings, BlueprintEditorPromotionTest) == 0x02C0);
static_assert(offsetof(UAutomationTestSettings, TestLevelFolders) == 0x02F0);
static_assert(offsetof(UAutomationTestSettings, ExternalTools) == 0x0300);
static_assert(offsetof(UAutomationTestSettings, ImportExportTestDefinitions) == 0x0310);
static_assert(offsetof(UAutomationTestSettings, LaunchOnSettings) == 0x0320);
static_assert(offsetof(UAutomationTestSettings, DefaultScreenshotResolution) == 0x0330);
static_assert(offsetof(FBandwidthTestItem, Kilobyte) == 0x0000);
static_assert(offsetof(FBandwidthTestGenerator, ReplicatedBuffers) == 0x0000);
static_assert(offsetof(ABandwidthTestActor, BandwidthGenerator) == 0x02C8);
static_assert(offsetof(UBillboardComponent, Sprite) == 0x0538);
static_assert(offsetof(FBoneNode, Name) == 0x0000);
static_assert(offsetof(FBoneNode, TranslationRetargetingMode) == 0x000C);
static_assert(offsetof(FVirtualBone, SourceBoneName) == 0x0000);
static_assert(offsetof(FVirtualBone, TargetBoneName) == 0x0008);
static_assert(offsetof(FVirtualBone, VirtualBoneName) == 0x0010);
static_assert(offsetof(FAnimSlotGroup, GroupName) == 0x0000);
static_assert(offsetof(FAnimSlotGroup, SlotNames) == 0x0008);
static_assert(offsetof(USkeleton, BoneTree) == 0x0038);
static_assert(offsetof(USkeleton, RefLocalPoses) == 0x0048);
static_assert(offsetof(USkeleton, VirtualBoneGuid) == 0x0170);
static_assert(offsetof(USkeleton, VirtualBones) == 0x0180);
static_assert(offsetof(USkeleton, Sockets) == 0x0190);
static_assert(offsetof(USkeleton, SmartNames) == 0x01F0);
static_assert(offsetof(USkeleton, BlendProfiles) == 0x0270);
static_assert(offsetof(USkeleton, SlotGroups) == 0x0280);
static_assert(offsetof(USkeleton, AssetUserData) == 0x0380);
static_assert(offsetof(FBlendProfileBoneEntry, BoneReference) == 0x0000);
static_assert(offsetof(UBlendProfile, OwningSkeleton) == 0x0030);
static_assert(offsetof(UBlendProfile, ProfileEntries) == 0x0038);
static_assert(offsetof(FKShapeElem, Name) == 0x000C);
static_assert(offsetof(FKShapeElem, CollisionEnabled) == 0x0019);
static_assert(offsetof(FKSphereElem, Center) == 0x0030);
static_assert(offsetof(FKBoxElem, Center) == 0x0030);
static_assert(offsetof(FKBoxElem, Rotation) == 0x003C);
static_assert(offsetof(FKSphylElem, Center) == 0x0030);
static_assert(offsetof(FKSphylElem, Rotation) == 0x003C);
static_assert(offsetof(FKConvexElem, VertexData) == 0x0030);
static_assert(offsetof(FKConvexElem, IndexData) == 0x0040);
static_assert(offsetof(FKConvexElem, ElemBox) == 0x0050);
static_assert(offsetof(FKConvexElem, Transform) == 0x0070);
static_assert(offsetof(FKTaperedCapsuleElem, Center) == 0x0030);
static_assert(offsetof(FKTaperedCapsuleElem, Rotation) == 0x003C);
static_assert(offsetof(FKAggregateGeom, SphereElems) == 0x0000);
static_assert(offsetof(FKAggregateGeom, BoxElems) == 0x0010);
static_assert(offsetof(FKAggregateGeom, SphylElems) == 0x0020);
static_assert(offsetof(FKAggregateGeom, ConvexElems) == 0x0030);
static_assert(offsetof(FKAggregateGeom, TaperedCapsuleElems) == 0x0040);
static_assert(offsetof(UBodySetup, AggGeom) == 0x0048);
static_assert(offsetof(UBodySetup, PhysMaterial) == 0x00A8);
static_assert(offsetof(UBodySetup, WalkableSlopeOverride) == 0x00B0);
static_assert(offsetof(UBodySetup, DefaultInstance) == 0x0148);
static_assert(offsetof(UBodySetup, BuildScale3D) == 0x02F8);
static_assert(offsetof(FBranchFilter, BoneName) == 0x0000);
static_assert(offsetof(FInputBlendPose, BranchFilters) == 0x0000);
static_assert(offsetof(UBoneMaskFilter, BlendPoses) == 0x0028);
static_assert(offsetof(UBookMark, Location) == 0x0028);
static_assert(offsetof(UBookMark, Rotation) == 0x0034);
static_assert(offsetof(UBookMark, HiddenLevels) == 0x0040);
static_assert(offsetof(UBookMark2D, Location) == 0x002C);
static_assert(offsetof(UBoundsCopyComponent, BoundsSourceActor) == 0x00C0);
static_assert(offsetof(UBoundsCopyComponent, PostTransform) == 0x00F0);
static_assert(offsetof(AReflectionCapture, CaptureComponent) == 0x02C8);
static_assert(offsetof(UReflectionCaptureComponent, CaptureOffsetComponent) == 0x0260);
static_assert(offsetof(UReflectionCaptureComponent, ReflectionSourceType) == 0x0268);
static_assert(offsetof(UReflectionCaptureComponent, MobileReflectionCompression) == 0x0269);
static_assert(offsetof(UReflectionCaptureComponent, Cubemap) == 0x0270);
static_assert(offsetof(UReflectionCaptureComponent, CaptureOffset) == 0x0288);
static_assert(offsetof(UReflectionCaptureComponent, MapBuildDataId) == 0x0294);
static_assert(offsetof(UReflectionCaptureComponent, CachedEncodedHDRCubemap) == 0x02B8);
static_assert(offsetof(UBoxReflectionCaptureComponent, PreviewInfluenceBox) == 0x02E0);
static_assert(offsetof(UBoxReflectionCaptureComponent, PreviewCaptureBox) == 0x02E8);
static_assert(offsetof(UBreakpoint, Node) == 0x0030);
static_assert(offsetof(FBuilderPoly, VertexIndices) == 0x0000);
static_assert(offsetof(FBuilderPoly, ItemName) == 0x0014);
static_assert(offsetof(UBrushBuilder, BitmapFilename) == 0x0028);
static_assert(offsetof(UBrushBuilder, ToolTip) == 0x0038);
static_assert(offsetof(UBrushBuilder, Vertices) == 0x0050);
static_assert(offsetof(UBrushBuilder, Polys) == 0x0060);
static_assert(offsetof(UBrushBuilder, Layer) == 0x0070);
static_assert(offsetof(UBrushComponent, Brush) == 0x0538);
static_assert(offsetof(UBrushComponent, BrushBodySetup) == 0x0540);
static_assert(offsetof(UButtonStyleAsset, ButtonStyle) == 0x0028);
static_assert(offsetof(UCameraAnim, CameraInterpGroup) == 0x0028);
static_assert(offsetof(UCameraAnim, BoundingBox) == 0x0034);
static_assert(offsetof(UCameraAnim, BasePostProcessSettings) == 0x0060);
static_assert(offsetof(UCameraAnim, AttachCharacter) == 0x0610);
static_assert(offsetof(UCameraAnimInst, CamAnim) == 0x0028);
static_assert(offsetof(UCameraAnimInst, InterpGroupInst) == 0x0030);
static_assert(offsetof(UCameraAnimInst, MoveTrack) == 0x0068);
static_assert(offsetof(UCameraAnimInst, MoveInst) == 0x0070);
static_assert(offsetof(UCameraAnimInst, PlaySpace) == 0x0078);
static_assert(offsetof(UCameraAnimInst, AttachCharacterPtr) == 0x00C8);
static_assert(offsetof(UCameraAnimInst, AttachCharacterFirstRotation) == 0x00E0);
static_assert(offsetof(UCameraAnimInst, AttachCharacterFirstLocation) == 0x00F0);
static_assert(offsetof(UCameraAnimInst, FocalSkeletalMeshBoneName) == 0x0100);
static_assert(offsetof(UCameraModifier, CameraOwner) == 0x0030);
static_assert(offsetof(FActiveCameraShakeInfo, ShakeInstance) == 0x0000);
static_assert(offsetof(FActiveCameraShakeInfo, ShakeSource) == 0x0008);
static_assert(offsetof(FActiveCameraShakeInfo, ShakeGuid) == 0x0014);
static_assert(offsetof(FPooledCameraShakes, PooledShakes) == 0x0000);
static_assert(offsetof(UCameraModifier_CameraShake, ActiveShakes) == 0x0050);
static_assert(offsetof(UCameraModifier_CameraShake, ExpiredPooledShakesMap) == 0x0060);
static_assert(offsetof(FFOscillator, InitialOffset) == 0x0008);
static_assert(offsetof(FFOscillator, Waveform) == 0x0009);
static_assert(offsetof(FROscillator, Pitch) == 0x0000);
static_assert(offsetof(FROscillator, Yaw) == 0x000C);
static_assert(offsetof(FROscillator, Roll) == 0x0018);
static_assert(offsetof(FVOscillator, X) == 0x0000);
static_assert(offsetof(FVOscillator, Y) == 0x000C);
static_assert(offsetof(FVOscillator, Z) == 0x0018);
static_assert(offsetof(UMatineeCameraShake, RotOscillation) == 0x00B4);
static_assert(offsetof(UMatineeCameraShake, LocOscillation) == 0x00D8);
static_assert(offsetof(UMatineeCameraShake, FOVOscillation) == 0x00FC);
static_assert(offsetof(UMatineeCameraShake, Anim) == 0x0120);
static_assert(offsetof(UMatineeCameraShake, AnimInst) == 0x0130);
static_assert(offsetof(ACameraShakeSourceActor, CameraShakeSourceComponent) == 0x02C8);
static_assert(offsetof(UCameraShakeSourceComponent, Attenuation) == 0x0260);
static_assert(offsetof(UCameraShakeSourceComponent, CameraShake) == 0x0270);
static_assert(offsetof(UCanvas, DrawColor) == 0x0038);
static_assert(offsetof(UCanvas, ColorModulate) == 0x0050);
static_assert(offsetof(UCanvas, DefaultTexture) == 0x0060);
static_assert(offsetof(UCanvas, GradientTexture0) == 0x0068);
static_assert(offsetof(UCanvas, ReporterGraph) == 0x0070);
static_assert(offsetof(UTextureRenderTarget2D, ClearColor) == 0x00F0);
static_assert(offsetof(UTextureRenderTarget2D, AddressX) == 0x0100);
static_assert(offsetof(UTextureRenderTarget2D, AddressY) == 0x0101);
static_assert(offsetof(UTextureRenderTarget2D, RenderTargetFormat) == 0x0103);
static_assert(offsetof(UTextureRenderTarget2D, MipsSamplerFilter) == 0x0105);
static_assert(offsetof(UTextureRenderTarget2D, MipsAddressU) == 0x0106);
static_assert(offsetof(UTextureRenderTarget2D, MipsAddressV) == 0x0107);
static_assert(offsetof(UTextureRenderTarget2D, OverrideFormat) == 0x0108);
static_assert(offsetof(UCanvasRenderTarget2D, World) == 0x0120);
static_assert(offsetof(UCheckBoxStyleAsset, CheckBoxStyle) == 0x0028);
static_assert(offsetof(UChildActorComponent, ChildActorClass) == 0x0260);
static_assert(offsetof(UChildActorComponent, ChildActor) == 0x0268);
static_assert(offsetof(UChildActorComponent, ChildActorTemplate) == 0x0270);
static_assert(offsetof(UChildConnection, Parent) == 0x1AF0);
static_assert(offsetof(UPlatformInterfaceBase, AllDelegates) == 0x0028);
static_assert(offsetof(UCloudStorageBase, LocalCloudFiles) == 0x0038);
static_assert(offsetof(FCollisionResponseTemplate, Name) == 0x0000);
static_assert(offsetof(FCollisionResponseTemplate, CollisionEnabled) == 0x0008);
static_assert(offsetof(FCollisionResponseTemplate, ObjectTypeName) == 0x002C);
static_assert(offsetof(FCollisionResponseTemplate, CustomResponses) == 0x0038);
static_assert(offsetof(FCustomChannelSetup, Channel) == 0x0000);
static_assert(offsetof(FCustomChannelSetup, DefaultResponse) == 0x0001);
static_assert(offsetof(FCustomChannelSetup, Name) == 0x0004);
static_assert(offsetof(FCustomProfile, Name) == 0x0000);
static_assert(offsetof(FCustomProfile, CustomResponses) == 0x0008);
static_assert(offsetof(FRedirector, OldName) == 0x0000);
static_assert(offsetof(FRedirector, NewName) == 0x0008);
static_assert(offsetof(UCollisionProfile, Profiles) == 0x0038);
static_assert(offsetof(UCollisionProfile, DefaultChannelResponses) == 0x0048);
static_assert(offsetof(UCollisionProfile, EditProfiles) == 0x0058);
static_assert(offsetof(UCollisionProfile, ProfileRedirects) == 0x0068);
static_assert(offsetof(UCollisionProfile, CollisionChannelRedirects) == 0x0078);
static_assert(offsetof(FBlueprintComponentDelegateBinding, ComponentPropertyName) == 0x0000);
static_assert(offsetof(FBlueprintComponentDelegateBinding, DelegatePropertyName) == 0x0008);
static_assert(offsetof(FBlueprintComponentDelegateBinding, FunctionNameToBind) == 0x0010);
static_assert(offsetof(UComponentDelegateBinding, ComponentDelegateBindings) == 0x0028);
static_assert(offsetof(UCompositeCurveTable, ParentTables) == 0x00A0);
static_assert(offsetof(UCompositeCurveTable, OldParentTables) == 0x00B0);
static_assert(offsetof(UDataTable, RowStruct) == 0x0028);
static_assert(offsetof(UDataTable, ImportKeyField) == 0x02B8);
static_assert(offsetof(UCompositeDataTable, ParentTables) == 0x02E0);
static_assert(offsetof(UCompositeDataTable, OldParentTables) == 0x02F0);
static_assert(offsetof(FStatColorMapEntry, Out) == 0x0004);
static_assert(offsetof(FStatColorMapping, StatName) == 0x0000);
static_assert(offsetof(FStatColorMapping, ColorMap) == 0x0010);
static_assert(offsetof(FGameNameRedirect, OldGameName) == 0x0000);
static_assert(offsetof(FGameNameRedirect, NewGameName) == 0x0008);
static_assert(offsetof(FClassRedirect, ObjectName) == 0x0000);
static_assert(offsetof(FClassRedirect, OldClassName) == 0x0008);
static_assert(offsetof(FClassRedirect, NewClassName) == 0x0010);
static_assert(offsetof(FClassRedirect, OldSubobjName) == 0x0018);
static_assert(offsetof(FClassRedirect, NewSubobjName) == 0x0020);
static_assert(offsetof(FClassRedirect, NewClassClass) == 0x0028);
static_assert(offsetof(FClassRedirect, NewClassPackage) == 0x0030);
static_assert(offsetof(FPluginRedirect, OldPluginName) == 0x0000);
static_assert(offsetof(FPluginRedirect, NewPluginName) == 0x0010);
static_assert(offsetof(FStructRedirect, OldStructName) == 0x0000);
static_assert(offsetof(FStructRedirect, NewStructName) == 0x0008);
static_assert(offsetof(FDropNoteInfo, Location) == 0x0000);
static_assert(offsetof(FDropNoteInfo, Rotation) == 0x000C);
static_assert(offsetof(FDropNoteInfo, comment) == 0x0018);
static_assert(offsetof(FNetDriverDefinition, DefName) == 0x0000);
static_assert(offsetof(FNetDriverDefinition, DriverClassName) == 0x0008);
static_assert(offsetof(FNetDriverDefinition, DriverClassNameFallback) == 0x0010);
static_assert(offsetof(UEngine, TinyFont) == 0x0030);
static_assert(offsetof(UEngine, TinyFontName) == 0x0038);
static_assert(offsetof(UEngine, SmallFont) == 0x0050);
static_assert(offsetof(UEngine, SmallFontName) == 0x0058);
static_assert(offsetof(UEngine, MediumFont) == 0x0070);
static_assert(offsetof(UEngine, MediumFontName) == 0x0078);
static_assert(offsetof(UEngine, LargeFont) == 0x0090);
static_assert(offsetof(UEngine, LargeFontName) == 0x0098);
static_assert(offsetof(UEngine, SubtitleFont) == 0x00B0);
static_assert(offsetof(UEngine, SubtitleFontName) == 0x00B8);
static_assert(offsetof(UEngine, AdditionalFonts) == 0x00D0);
static_assert(offsetof(UEngine, AdditionalFontNames) == 0x00E0);
static_assert(offsetof(UEngine, ConsoleClass) == 0x00F0);
static_assert(offsetof(UEngine, ConsoleClassName) == 0x00F8);
static_assert(offsetof(UEngine, GameViewportClientClass) == 0x0110);
static_assert(offsetof(UEngine, GameViewportClientClassName) == 0x0118);
static_assert(offsetof(UEngine, LocalPlayerClass) == 0x0130);
static_assert(offsetof(UEngine, LocalPlayerClassName) == 0x0138);
static_assert(offsetof(UEngine, WorldSettingsClass) == 0x0150);
static_assert(offsetof(UEngine, WorldSettingsClassName) == 0x0158);
static_assert(offsetof(UEngine, NavigationSystemClassName) == 0x0170);
static_assert(offsetof(UEngine, NavigationSystemClass) == 0x0188);
static_assert(offsetof(UEngine, NavigationSystemConfigClassName) == 0x0190);
static_assert(offsetof(UEngine, NavigationSystemConfigClass) == 0x01A8);
static_assert(offsetof(UEngine, AvoidanceManagerClassName) == 0x01B0);
static_assert(offsetof(UEngine, AvoidanceManagerClass) == 0x01C8);
static_assert(offsetof(UEngine, AIControllerClassName) == 0x01D0);
static_assert(offsetof(UEngine, PhysicsCollisionHandlerClass) == 0x01E8);
static_assert(offsetof(UEngine, PhysicsCollisionHandlerClassName) == 0x01F0);
static_assert(offsetof(UEngine, GameUserSettingsClassName) == 0x0208);
static_assert(offsetof(UEngine, GameUserSettingsClass) == 0x0220);
static_assert(offsetof(UEngine, GameUserSettings) == 0x0228);
static_assert(offsetof(UEngine, LevelScriptActorClass) == 0x0230);
static_assert(offsetof(UEngine, LevelScriptActorClassName) == 0x0238);
static_assert(offsetof(UEngine, DefaultBlueprintBaseClassName) == 0x0250);
static_assert(offsetof(UEngine, GameSingletonClassName) == 0x0268);
static_assert(offsetof(UEngine, GameSingleton) == 0x0280);
static_assert(offsetof(UEngine, AssetManagerClassName) == 0x0288);
static_assert(offsetof(UEngine, AssetManager) == 0x02A0);
static_assert(offsetof(UEngine, DefaultTexture) == 0x02A8);
static_assert(offsetof(UEngine, DefaultTextureName) == 0x02B0);
static_assert(offsetof(UEngine, DefaultDiffuseTexture) == 0x02C8);
static_assert(offsetof(UEngine, DefaultDiffuseTextureName) == 0x02D0);
static_assert(offsetof(UEngine, DefaultBSPVertexTexture) == 0x02E8);
static_assert(offsetof(UEngine, DefaultBSPVertexTextureName) == 0x02F0);
static_assert(offsetof(UEngine, HighFrequencyNoiseTexture) == 0x0308);
static_assert(offsetof(UEngine, HighFrequencyNoiseTextureName) == 0x0310);
static_assert(offsetof(UEngine, DefaultBokehTexture) == 0x0328);
static_assert(offsetof(UEngine, DefaultBokehTextureName) == 0x0330);
static_assert(offsetof(UEngine, DefaultBloomKernelTexture) == 0x0348);
static_assert(offsetof(UEngine, DefaultBloomKernelTextureName) == 0x0350);
static_assert(offsetof(UEngine, WireframeMaterial) == 0x0368);
static_assert(offsetof(UEngine, WireframeMaterialName) == 0x0370);
static_assert(offsetof(UEngine, DebugMeshMaterial) == 0x0380);
static_assert(offsetof(UEngine, DebugMeshMaterialName) == 0x0388);
static_assert(offsetof(UEngine, EmissiveMeshMaterial) == 0x03A0);
static_assert(offsetof(UEngine, EmissiveMeshMaterialName) == 0x03A8);
static_assert(offsetof(UEngine, LevelColorationLitMaterial) == 0x03C0);
static_assert(offsetof(UEngine, LevelColorationLitMaterialName) == 0x03C8);
static_assert(offsetof(UEngine, LevelColorationUnlitMaterial) == 0x03D8);
static_assert(offsetof(UEngine, LevelColorationUnlitMaterialName) == 0x03E0);
static_assert(offsetof(UEngine, LightingTexelDensityMaterial) == 0x03F0);
static_assert(offsetof(UEngine, LightingTexelDensityName) == 0x03F8);
static_assert(offsetof(UEngine, ShadedLevelColorationLitMaterial) == 0x0408);
static_assert(offsetof(UEngine, ShadedLevelColorationLitMaterialName) == 0x0410);
static_assert(offsetof(UEngine, ShadedLevelColorationUnlitMaterial) == 0x0420);
static_assert(offsetof(UEngine, ShadedLevelColorationUnlitMaterialName) == 0x0428);
static_assert(offsetof(UEngine, RemoveSurfaceMaterial) == 0x0438);
static_assert(offsetof(UEngine, RemoveSurfaceMaterialName) == 0x0440);
static_assert(offsetof(UEngine, VertexColorMaterial) == 0x0458);
static_assert(offsetof(UEngine, VertexColorMaterialName) == 0x0460);
static_assert(offsetof(UEngine, VertexColorViewModeMaterial_ColorOnly) == 0x0470);
static_assert(offsetof(UEngine, VertexColorViewModeMaterialName_ColorOnly) == 0x0478);
static_assert(offsetof(UEngine, VertexColorViewModeMaterial_AlphaAsColor) == 0x0488);
static_assert(offsetof(UEngine, VertexColorViewModeMaterialName_AlphaAsColor) == 0x0490);
static_assert(offsetof(UEngine, VertexColorViewModeMaterial_RedOnly) == 0x04A0);
static_assert(offsetof(UEngine, VertexColorViewModeMaterialName_RedOnly) == 0x04A8);
static_assert(offsetof(UEngine, VertexColorViewModeMaterial_GreenOnly) == 0x04B8);
static_assert(offsetof(UEngine, VertexColorViewModeMaterialName_GreenOnly) == 0x04C0);
static_assert(offsetof(UEngine, VertexColorViewModeMaterial_BlueOnly) == 0x04D0);
static_assert(offsetof(UEngine, VertexColorViewModeMaterialName_BlueOnly) == 0x04D8);
static_assert(offsetof(UEngine, DebugEditorMaterialName) == 0x04E8);
static_assert(offsetof(UEngine, ConstraintLimitMaterial) == 0x0500);
static_assert(offsetof(UEngine, ConstraintLimitMaterialX) == 0x0508);
static_assert(offsetof(UEngine, ConstraintLimitMaterialXAxis) == 0x0510);
static_assert(offsetof(UEngine, ConstraintLimitMaterialY) == 0x0518);
static_assert(offsetof(UEngine, ConstraintLimitMaterialYAxis) == 0x0520);
static_assert(offsetof(UEngine, ConstraintLimitMaterialZ) == 0x0528);
static_assert(offsetof(UEngine, ConstraintLimitMaterialZAxis) == 0x0530);
static_assert(offsetof(UEngine, ConstraintLimitMaterialPrismatic) == 0x0538);
static_assert(offsetof(UEngine, InvalidLightmapSettingsMaterial) == 0x0540);
static_assert(offsetof(UEngine, InvalidLightmapSettingsMaterialName) == 0x0548);
static_assert(offsetof(UEngine, PreviewShadowsIndicatorMaterial) == 0x0560);
static_assert(offsetof(UEngine, PreviewShadowsIndicatorMaterialName) == 0x0568);
static_assert(offsetof(UEngine, ArrowMaterial) == 0x0580);
static_assert(offsetof(UEngine, ArrowMaterialYellow) == 0x0588);
static_assert(offsetof(UEngine, ArrowMaterialName) == 0x0590);
static_assert(offsetof(UEngine, LightingOnlyBrightness) == 0x05A8);
static_assert(offsetof(UEngine, ShaderComplexityColors) == 0x05B8);
static_assert(offsetof(UEngine, QuadComplexityColors) == 0x05C8);
static_assert(offsetof(UEngine, LightComplexityColors) == 0x05D8);
static_assert(offsetof(UEngine, StationaryLightOverlapColors) == 0x05E8);
static_assert(offsetof(UEngine, LODColorationColors) == 0x05F8);
static_assert(offsetof(UEngine, HLODColorationColors) == 0x0608);
static_assert(offsetof(UEngine, StreamingAccuracyColors) == 0x0618);
static_assert(offsetof(UEngine, LightMapDensityVertexMappedColor) == 0x0648);
static_assert(offsetof(UEngine, LightMapDensitySelectedColor) == 0x0658);
static_assert(offsetof(UEngine, StatColorMappings) == 0x0668);
static_assert(offsetof(UEngine, DefaultPhysMaterial) == 0x0678);
static_assert(offsetof(UEngine, DefaultPhysMaterialName) == 0x0680);
static_assert(offsetof(UEngine, ActiveGameNameRedirects) == 0x0698);
static_assert(offsetof(UEngine, ActiveClassRedirects) == 0x06A8);
static_assert(offsetof(UEngine, ActivePluginRedirects) == 0x06B8);
static_assert(offsetof(UEngine, ActiveStructRedirects) == 0x06C8);
static_assert(offsetof(UEngine, PreIntegratedSkinBRDFTexture) == 0x06D8);
static_assert(offsetof(UEngine, PreIntegratedSkinBRDFTextureName) == 0x06E0);
static_assert(offsetof(UEngine, BlueNoiseTexture) == 0x06F8);
static_assert(offsetof(UEngine, BlueNoiseTextureName) == 0x0700);
static_assert(offsetof(UEngine, MiniFontTexture) == 0x0718);
static_assert(offsetof(UEngine, MiniFontTextureName) == 0x0720);
static_assert(offsetof(UEngine, WeightMapPlaceholderTexture) == 0x0738);
static_assert(offsetof(UEngine, WeightMapPlaceholderTextureName) == 0x0740);
static_assert(offsetof(UEngine, LightMapDensityTexture) == 0x0758);
static_assert(offsetof(UEngine, LightMapDensityTextureName) == 0x0760);
static_assert(offsetof(UEngine, GameViewport) == 0x0780);
static_assert(offsetof(UEngine, DeferredCommands) == 0x0788);
static_assert(offsetof(UEngine, SmoothedFrameRateRange) == 0x07AC);
static_assert(offsetof(UEngine, CustomTimeStep) == 0x07C0);
static_assert(offsetof(UEngine, CustomTimeStepClassName) == 0x07E8);
static_assert(offsetof(UEngine, TimecodeProvider) == 0x0800);
static_assert(offsetof(UEngine, TimecodeProviderClassName) == 0x0828);
static_assert(offsetof(UEngine, GenerateDefaultTimecodeFrameRate) == 0x0844);
static_assert(offsetof(UEngine, C_WorldBox) == 0x085C);
static_assert(offsetof(UEngine, C_BrushWire) == 0x0860);
static_assert(offsetof(UEngine, C_AddWire) == 0x0864);
static_assert(offsetof(UEngine, C_SubtractWire) == 0x0868);
static_assert(offsetof(UEngine, C_SemiSolidWire) == 0x086C);
static_assert(offsetof(UEngine, C_NonSolidWire) == 0x0870);
static_assert(offsetof(UEngine, C_WireBackground) == 0x0874);
static_assert(offsetof(UEngine, C_ScaleBoxHi) == 0x0878);
static_assert(offsetof(UEngine, C_VolumeCollision) == 0x087C);
static_assert(offsetof(UEngine, C_BSPCollision) == 0x0880);
static_assert(offsetof(UEngine, C_OrthoBackground) == 0x0884);
static_assert(offsetof(UEngine, C_Volume) == 0x0888);
static_assert(offsetof(UEngine, C_BrushShape) == 0x088C);
static_assert(offsetof(UEngine, GameScreenshotSaveDirectory) == 0x0898);
static_assert(offsetof(UEngine, TransitionType) == 0x08A8);
static_assert(offsetof(UEngine, TransitionDescription) == 0x08B0);
static_assert(offsetof(UEngine, TransitionGameMode) == 0x08C0);
static_assert(offsetof(UEngine, PendingDroppedNotes) == 0x08F0);
static_assert(offsetof(UEngine, DefaultSelectedMaterialColor) == 0x090C);
static_assert(offsetof(UEngine, SelectedMaterialColor) == 0x091C);
static_assert(offsetof(UEngine, SelectionOutlineColor) == 0x092C);
static_assert(offsetof(UEngine, SubduedSelectionOutlineColor) == 0x093C);
static_assert(offsetof(UEngine, SelectedMaterialColorOverride) == 0x094C);
static_assert(offsetof(UEngine, ParticleEventManagerClassPath) == 0x0970);
static_assert(offsetof(UEngine, NetDriverDefinitions) == 0x0C10);
static_assert(offsetof(UEngine, ServerActors) == 0x0C20);
static_assert(offsetof(UEngine, RuntimeServerActors) == 0x0C30);
static_assert(offsetof(FDebugDisplayProperty, Obj) == 0x0000);
static_assert(offsetof(FDebugDisplayProperty, WithinClass) == 0x0008);
static_assert(offsetof(UGameViewportClient, ViewportConsole) == 0x0040);
static_assert(offsetof(UGameViewportClient, DebugProperties) == 0x0048);
static_assert(offsetof(UGameViewportClient, World) == 0x0078);
static_assert(offsetof(UGameViewportClient, GameInstance) == 0x0080);
static_assert(offsetof(UGameViewportClient, CopyRenderTarget) == 0x0360);
static_assert(offsetof(UConsole, ConsoleTargetPlayer) == 0x0038);
static_assert(offsetof(UConsole, DefaultTexture_Black) == 0x0040);
static_assert(offsetof(UConsole, DefaultTexture_White) == 0x0048);
static_assert(offsetof(UConsole, HistoryBuffer) == 0x0068);
static_assert(offsetof(ACullDistanceVolume, CullDistances) == 0x0318);
static_assert(offsetof(UCurveFloat, FloatCurve) == 0x0030);
static_assert(offsetof(UCurveLinearColor, FloatCurves) == 0x0030);
static_assert(offsetof(UTexture2D, AddressX) == 0x00E9);
static_assert(offsetof(UTexture2D, AddressY) == 0x00EA);
static_assert(offsetof(UTexture2D, ImportedSize) == 0x00EC);
static_assert(offsetof(UCurveLinearColorAtlas, GradientCurves) == 0x0110);
static_assert(offsetof(UCurveVector, FloatCurves) == 0x0030);
static_assert(offsetof(ADebugCameraController, DrawFrustum) == 0x0670);
static_assert(offsetof(ADebugCameraController, SelectedActor) == 0x0678);
static_assert(offsetof(ADebugCameraController, SelectedComponent) == 0x0680);
static_assert(offsetof(ADebugCameraController, SelectedHitPoint) == 0x0688);
static_assert(offsetof(ADebugCameraController, OriginalControllerRef) == 0x0718);
static_assert(offsetof(ADebugCameraController, OriginalPlayer) == 0x0720);
static_assert(offsetof(FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex) == 0x0008);
static_assert(offsetof(UDebugCameraControllerSettings, CycleViewModes) == 0x0038);
static_assert(offsetof(ADecalActor, Decal) == 0x02C8);
static_assert(offsetof(UDecalComponent, DecalMaterial) == 0x0260);
static_assert(offsetof(UDecalComponent, DecalChannelMaskArray) == 0x0288);
static_assert(offsetof(UDecalComponent, DecalSize) == 0x0298);
static_assert(offsetof(FRollbackNetStartupActorInfo, Archetype) == 0x0008);
static_assert(offsetof(FRollbackNetStartupActorInfo, Level) == 0x0038);
static_assert(offsetof(FRollbackNetStartupActorInfo, ObjReferences) == 0x00A0);
static_assert(offsetof(FMulticastRecordOptions, FuncPathName) == 0x0000);
static_assert(offsetof(UDemoNetDriver, RollbackNetStartupActors) == 0x0840);
static_assert(offsetof(UDemoNetDriver, MulticastRecordOptions) == 0x0A10);
static_assert(offsetof(UDemoNetDriver, SpectatorControllers) == 0x0A28);
static_assert(offsetof(UPendingNetGame, NetDriver) == 0x0030);
static_assert(offsetof(UPendingNetGame, DemoNetDriver) == 0x0038);
static_assert(offsetof(FTextureLODGroup, Group) == 0x0000);
static_assert(offsetof(FTextureLODGroup, MipGenSettings) == 0x0020);
static_assert(offsetof(FTextureLODGroup, MinMagFilter) == 0x0040);
static_assert(offsetof(FTextureLODGroup, MipFilter) == 0x0048);
static_assert(offsetof(FTextureLODGroup, MipLoadOptions) == 0x0050);
static_assert(offsetof(FTextureLODGroup, DownscaleOptions) == 0x0058);
static_assert(offsetof(FTextureLODGroup, LossyCompressionAmount) == 0x0064);
static_assert(offsetof(UTextureLODSettings, TextureLODGroups) == 0x0028);
static_assert(offsetof(UDeviceProfile, DeviceType) == 0x0038);
static_assert(offsetof(UDeviceProfile, BaseProfileName) == 0x0048);
static_assert(offsetof(UDeviceProfile, Parent) == 0x0058);
static_assert(offsetof(UDeviceProfile, CVars) == 0x0088);
static_assert(offsetof(UDeviceProfileManager, Profiles) == 0x0028);
static_assert(offsetof(UDialogueVoice, Gender) == 0x0028);
static_assert(offsetof(UDialogueVoice, Plurality) == 0x0029);
static_assert(offsetof(UDialogueVoice, LocalizationGUID) == 0x002C);
static_assert(offsetof(FDialogueContext, Speaker) == 0x0000);
static_assert(offsetof(FDialogueContext, Targets) == 0x0008);
static_assert(offsetof(FDialogueContextMapping, Context) == 0x0000);
static_assert(offsetof(FDialogueContextMapping, SoundWave) == 0x0018);
static_assert(offsetof(FDialogueContextMapping, LocalizationKeyFormat) == 0x0020);
static_assert(offsetof(FDialogueContextMapping, Proxy) == 0x0030);
static_assert(offsetof(UDialogueWave, SpokenText) == 0x0030);
static_assert(offsetof(UDialogueWave, SubtitleOverride) == 0x0040);
static_assert(offsetof(UDialogueWave, ContextMappings) == 0x0050);
static_assert(offsetof(UDialogueWave, LocalizationGUID) == 0x0060);
static_assert(offsetof(ALight, LightComponent) == 0x02C8);
static_assert(offsetof(ULightComponentBase, LightGuid) == 0x0260);
static_assert(offsetof(ULightComponentBase, LightColor) == 0x0278);
static_assert(offsetof(ULightComponentBase, IntensityControlByViewDirType) == 0x0291);
static_assert(offsetof(ULightComponentBase, ControlIntensityByViewDirCurve) == 0x0298);
static_assert(offsetof(ULightComponentBase, ViewDirToLightDirAdjustRot) == 0x02A4);
static_assert(offsetof(ULightComponentBase, LightDetailMode) == 0x02B9);
static_assert(offsetof(ULightComponent, LightingChannels) == 0x0310);
static_assert(offsetof(ULightComponent, LightFunctionMaterial) == 0x0318);
static_assert(offsetof(ULightComponent, LightFunctionScale) == 0x0320);
static_assert(offsetof(ULightComponent, IESTexture) == 0x0330);
static_assert(offsetof(ULightComponent, BloomTint) == 0x0358);
static_assert(offsetof(UDirectionalLightComponent, LightShaftOverrideDirection) == 0x03E8);
static_assert(offsetof(UDirectionalLightComponent, AtmosphereSunDiskColorScale) == 0x0438);
static_assert(offsetof(UDirectionalLightComponent, CloudScatteredLuminanceScale) == 0x0468);
static_assert(offsetof(UDirectionalLightComponent, LightmassSettings) == 0x0478);
static_assert(offsetof(UDirectionalLightComponent, ModulatedShadowColor) == 0x048C);
static_assert(offsetof(UDistributionFloatConstantCurve, ConstantCurve) == 0x0038);
static_assert(offsetof(UDistributionFloatParameterBase, ParameterName) == 0x0040);
static_assert(offsetof(UDistributionFloatParameterBase, ParamMode) == 0x0058);
static_assert(offsetof(UDistributionFloatUniformCurve, ConstantCurve) == 0x0038);
static_assert(offsetof(UDistributionVectorConstant, Constant) == 0x0038);
static_assert(offsetof(UDistributionVectorConstant, LockedAxes) == 0x0048);
static_assert(offsetof(UDistributionVectorConstantCurve, ConstantCurve) == 0x0038);
static_assert(offsetof(UDistributionVectorConstantCurve, LockedAxes) == 0x0054);
static_assert(offsetof(UDistributionVectorParameterBase, ParameterName) == 0x0050);
static_assert(offsetof(UDistributionVectorParameterBase, MinInput) == 0x0058);
static_assert(offsetof(UDistributionVectorParameterBase, MaxInput) == 0x0064);
static_assert(offsetof(UDistributionVectorParameterBase, MinOutput) == 0x0070);
static_assert(offsetof(UDistributionVectorParameterBase, MaxOutput) == 0x007C);
static_assert(offsetof(UDistributionVectorParameterBase, ParamModes) == 0x0088);
static_assert(offsetof(UDistributionVectorUniform, Max) == 0x0038);
static_assert(offsetof(UDistributionVectorUniform, Min) == 0x0044);
static_assert(offsetof(UDistributionVectorUniform, LockedAxes) == 0x0054);
static_assert(offsetof(UDistributionVectorUniform, MirrorFlags) == 0x0055);
static_assert(offsetof(UDistributionVectorUniformCurve, ConstantCurve) == 0x0038);
static_assert(offsetof(UDistributionVectorUniformCurve, LockedAxes) == 0x0054);
static_assert(offsetof(UDistributionVectorUniformCurve, MirrorFlags) == 0x0056);
static_assert(offsetof(UDrawFrustumComponent, FrustumColor) == 0x0538);
static_assert(offsetof(UDrawFrustumComponent, Texture) == 0x0550);
static_assert(offsetof(UGraphNodeContextMenuContext, Blueprint) == 0x0028);
static_assert(offsetof(UGraphNodeContextMenuContext, graph) == 0x0030);
static_assert(offsetof(UGraphNodeContextMenuContext, Node) == 0x0038);
static_assert(offsetof(UEdGraphNode_Documentation, Link) == 0x0098);
static_assert(offsetof(UEdGraphNode_Documentation, Excerpt) == 0x00A8);
static_assert(offsetof(FEdGraphTerminalType, TerminalCategory) == 0x0000);
static_assert(offsetof(FEdGraphTerminalType, TerminalSubCategory) == 0x0008);
static_assert(offsetof(FEdGraphTerminalType, TerminalSubCategoryObject) == 0x0010);
static_assert(offsetof(FEdGraphPinType, PinCategory) == 0x0000);
static_assert(offsetof(FEdGraphPinType, PinSubCategory) == 0x0008);
static_assert(offsetof(FEdGraphPinType, PinSubCategoryObject) == 0x0010);
static_assert(offsetof(FEdGraphPinType, PinSubCategoryMemberReference) == 0x0018);
static_assert(offsetof(FEdGraphPinType, PinValueType) == 0x0038);
static_assert(offsetof(FEdGraphPinType, ContainerType) == 0x0054);
static_assert(offsetof(UEdGraphPin_Deprecated, PinName) == 0x0028);
static_assert(offsetof(UEdGraphPin_Deprecated, PinToolTip) == 0x0038);
static_assert(offsetof(UEdGraphPin_Deprecated, Direction) == 0x0048);
static_assert(offsetof(UEdGraphPin_Deprecated, PinType) == 0x0050);
static_assert(offsetof(UEdGraphPin_Deprecated, DefaultValue) == 0x00A8);
static_assert(offsetof(UEdGraphPin_Deprecated, AutogeneratedDefaultValue) == 0x00B8);
static_assert(offsetof(UEdGraphPin_Deprecated, DefaultObject) == 0x00C8);
static_assert(offsetof(UEdGraphPin_Deprecated, DefaultTextValue) == 0x00D0);
static_assert(offsetof(UEdGraphPin_Deprecated, LinkedTo) == 0x00E8);
static_assert(offsetof(UEdGraphPin_Deprecated, SubPins) == 0x00F8);
static_assert(offsetof(UEdGraphPin_Deprecated, ParentPin) == 0x0108);
static_assert(offsetof(UEdGraphPin_Deprecated, ReferencePassThroughConnection) == 0x0110);
static_assert(offsetof(AEmitter, ParticleSystemComponent) == 0x02C8);
static_assert(offsetof(AEmitterCameraLensEffectBase, PS_CameraEffect) == 0x0318);
static_assert(offsetof(AEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent) == 0x0320);
static_assert(offsetof(AEmitterCameraLensEffectBase, BaseCamera) == 0x0328);
static_assert(offsetof(AEmitterCameraLensEffectBase, RelativeTransform) == 0x0330);
static_assert(offsetof(AEmitterCameraLensEffectBase, EmittersToTreatAsSame) == 0x0368);
static_assert(offsetof(UEngineMessage, FailedPlaceMessage) == 0x0028);
static_assert(offsetof(UEngineMessage, MaxedOutMessage) == 0x0038);
static_assert(offsetof(UEngineMessage, EnteredMessage) == 0x0048);
static_assert(offsetof(UEngineMessage, LeftMessage) == 0x0058);
static_assert(offsetof(UEngineMessage, GlobalNameChange) == 0x0068);
static_assert(offsetof(UEngineMessage, SpecEnteredMessage) == 0x0078);
static_assert(offsetof(UEngineMessage, NewPlayerMessage) == 0x0088);
static_assert(offsetof(UEngineMessage, NewSpecMessage) == 0x0098);
static_assert(offsetof(AExponentialHeightFog, Component) == 0x02C8);
static_assert(offsetof(UExponentialHeightFogComponent, SecondFogData) == 0x0268);
static_assert(offsetof(UExponentialHeightFogComponent, FogInscatteringColor) == 0x0274);
static_assert(offsetof(UExponentialHeightFogComponent, InscatteringColorCubemap) == 0x0288);
static_assert(offsetof(UExponentialHeightFogComponent, InscatteringTextureTint) == 0x0294);
static_assert(offsetof(UExponentialHeightFogComponent, DirectionalInscatteringColor) == 0x02B4);
static_assert(offsetof(UExponentialHeightFogComponent, VolumetricFogAlbedo) == 0x02D8);
static_assert(offsetof(UExponentialHeightFogComponent, VolumetricFogEmissive) == 0x02DC);
static_assert(offsetof(UExporter, SupportedClass) == 0x0028);
static_assert(offsetof(UExporter, ExportRootScope) == 0x0030);
static_assert(offsetof(UExporter, FormatExtension) == 0x0038);
static_assert(offsetof(UExporter, FormatDescription) == 0x0048);
static_assert(offsetof(UExporter, ExportTask) == 0x0068);
static_assert(offsetof(FFontImportOptionsData, FontName) == 0x0000);
static_assert(offsetof(FFontImportOptionsData, CharacterSet) == 0x0018);
static_assert(offsetof(FFontImportOptionsData, Chars) == 0x0020);
static_assert(offsetof(FFontImportOptionsData, UnicodeRange) == 0x0030);
static_assert(offsetof(FFontImportOptionsData, CharsFilePath) == 0x0040);
static_assert(offsetof(FFontImportOptionsData, CharsFileWildcard) == 0x0050);
static_assert(offsetof(FFontImportOptionsData, ForegroundColor) == 0x0064);
static_assert(offsetof(UFont, FontCacheType) == 0x0030);
static_assert(offsetof(UFont, Characters) == 0x0038);
static_assert(offsetof(UFont, Textures) == 0x0048);
static_assert(offsetof(UFont, ImportOptions) == 0x0070);
static_assert(offsetof(UFont, MaxCharHeight) == 0x0128);
static_assert(offsetof(UFont, LegacyFontName) == 0x0140);
static_assert(offsetof(UFont, CompositeFont) == 0x0148);
static_assert(offsetof(UFontFace, SourceFilename) == 0x0030);
static_assert(offsetof(UFontFace, Hinting) == 0x0040);
static_assert(offsetof(UFontFace, LoadingPolicy) == 0x0041);
static_assert(offsetof(UFontFace, LayoutMethod) == 0x0042);
static_assert(offsetof(UFontImportOptions, Data) == 0x0028);
static_assert(offsetof(UForceFeedbackAttenuation, Attenuation) == 0x0028);
static_assert(offsetof(UForceFeedbackComponent, ForceFeedbackEffect) == 0x0260);
static_assert(offsetof(UForceFeedbackComponent, AttenuationSettings) == 0x0270);
static_assert(offsetof(UForceFeedbackComponent, AttenuationOverrides) == 0x0278);
static_assert(offsetof(UGameEngine, GameInstance) == 0x0E00);
static_assert(offsetof(AGameSession, SessionName) == 0x02D8);
static_assert(offsetof(ASpotLight, SpotLightComponent) == 0x02D8);
static_assert(offsetof(UHapticFeedbackEffect_Buffer, Amplitudes) == 0x0028);
static_assert(offsetof(FHapticFeedbackDetails_Curve, Frequency) == 0x0000);
static_assert(offsetof(FHapticFeedbackDetails_Curve, Amplitude) == 0x0088);
static_assert(offsetof(UHapticFeedbackEffect_Curve, HapticDetails) == 0x0028);
static_assert(offsetof(UHapticFeedbackEffect_SoundWave, SoundWave) == 0x0028);
static_assert(offsetof(FHLODProxyMesh, LODActor) == 0x0000);
static_assert(offsetof(FHLODProxyMesh, StaticMesh) == 0x0020);
static_assert(offsetof(FHLODProxyMesh, Key) == 0x0028);
static_assert(offsetof(UHLODProxy, ProxyMeshes) == 0x0028);
static_assert(offsetof(UHLODProxy, HLODActors) == 0x0038);
static_assert(offsetof(FComponentKey, OwnerClass) == 0x0000);
static_assert(offsetof(FComponentKey, SCSVariableName) == 0x0008);
static_assert(offsetof(FComponentKey, AssociatedGuid) == 0x0010);
static_assert(offsetof(FComponentOverrideRecord, ComponentClass) == 0x0000);
static_assert(offsetof(FComponentOverrideRecord, ComponentTemplate) == 0x0008);
static_assert(offsetof(FComponentOverrideRecord, ComponentKey) == 0x0010);
static_assert(offsetof(FComponentOverrideRecord, CookedComponentInstancingData) == 0x0030);
static_assert(offsetof(UInheritableComponentHandler, Records) == 0x0028);
static_assert(offsetof(UInheritableComponentHandler, UnnecessaryComponents) == 0x0038);
static_assert(offsetof(FBlueprintInputActionDelegateBinding, InputActionName) == 0x0004);
static_assert(offsetof(FBlueprintInputActionDelegateBinding, InputKeyEvent) == 0x000C);
static_assert(offsetof(FBlueprintInputActionDelegateBinding, FunctionNameToBind) == 0x0010);
static_assert(offsetof(UInputActionDelegateBinding, InputActionDelegateBindings) == 0x0028);
static_assert(offsetof(FBlueprintInputAxisDelegateBinding, InputAxisName) == 0x0004);
static_assert(offsetof(FBlueprintInputAxisDelegateBinding, FunctionNameToBind) == 0x000C);
static_assert(offsetof(UInputAxisDelegateBinding, InputAxisDelegateBindings) == 0x0028);
static_assert(offsetof(FBlueprintInputAxisKeyDelegateBinding, AxisKey) == 0x0008);
static_assert(offsetof(FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind) == 0x0020);
static_assert(offsetof(UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings) == 0x0028);
static_assert(offsetof(FCachedKeyToActionInfo, PlayerInput) == 0x0000);
static_assert(offsetof(UInputComponent, CachedKeyToActionInfo) == 0x0130);
static_assert(offsetof(FBlueprintInputKeyDelegateBinding, InputChord) == 0x0008);
static_assert(offsetof(FBlueprintInputKeyDelegateBinding, InputKeyEvent) == 0x0028);
static_assert(offsetof(FBlueprintInputKeyDelegateBinding, FunctionNameToBind) == 0x002C);
static_assert(offsetof(UInputKeyDelegateBinding, InputKeyDelegateBindings) == 0x0028);
static_assert(offsetof(FInputAxisConfigEntry, AxisKeyName) == 0x0000);
static_assert(offsetof(FInputAxisConfigEntry, AxisProperties) == 0x0008);
static_assert(offsetof(FInputActionKeyMapping, ActionName) == 0x0000);
static_assert(offsetof(FInputActionKeyMapping, Key) == 0x0018);
static_assert(offsetof(FInputAxisKeyMapping, AxisName) == 0x0000);
static_assert(offsetof(FInputAxisKeyMapping, Key) == 0x0010);
static_assert(offsetof(FInputActionSpeechMapping, ActionName) == 0x0000);
static_assert(offsetof(FInputActionSpeechMapping, SpeechKeyword) == 0x0008);
static_assert(offsetof(UInputSettings, AxisConfig) == 0x0028);
static_assert(offsetof(UInputSettings, ExcludedAutocorrectOS) == 0x0040);
static_assert(offsetof(UInputSettings, ExcludedAutocorrectCultures) == 0x0050);
static_assert(offsetof(UInputSettings, ExcludedAutocorrectDeviceModels) == 0x0060);
static_assert(offsetof(UInputSettings, DefaultViewportMouseCaptureMode) == 0x0070);
static_assert(offsetof(UInputSettings, DefaultViewportMouseLockMode) == 0x0071);
static_assert(offsetof(UInputSettings, ActionMappings) == 0x0080);
static_assert(offsetof(UInputSettings, AxisMappings) == 0x0090);
static_assert(offsetof(UInputSettings, DefaultActionMappings) == 0x00A0);
static_assert(offsetof(UInputSettings, DefaultAxisMappings) == 0x00B0);
static_assert(offsetof(UInputSettings, SpeechMappings) == 0x00C0);
static_assert(offsetof(UInputSettings, DefaultPlayerInputClass) == 0x00D0);
static_assert(offsetof(UInputSettings, DefaultInputComponentClass) == 0x00F8);
static_assert(offsetof(UInputSettings, DefaultTouchInterface) == 0x0120);
static_assert(offsetof(UInputSettings, ConsoleKey) == 0x0138);
static_assert(offsetof(UInputSettings, ConsoleKeys) == 0x0150);
static_assert(offsetof(FBlueprintInputTouchDelegateBinding, InputKeyEvent) == 0x0004);
static_assert(offsetof(FBlueprintInputTouchDelegateBinding, FunctionNameToBind) == 0x0008);
static_assert(offsetof(UInputTouchDelegateBinding, InputTouchDelegateBindings) == 0x0028);
static_assert(offsetof(FCurveEdEntry, CurveObject) == 0x0000);
static_assert(offsetof(FCurveEdEntry, CurveColor) == 0x0008);
static_assert(offsetof(FCurveEdEntry, CurveName) == 0x0010);
static_assert(offsetof(FCurveEdTab, TabName) == 0x0000);
static_assert(offsetof(FCurveEdTab, Curves) == 0x0010);
static_assert(offsetof(UInterpCurveEdSetup, Tabs) == 0x0028);
static_assert(offsetof(UInterpData, InterpGroups) == 0x0030);
static_assert(offsetof(UInterpData, CurveEdSetup) == 0x0040);
static_assert(offsetof(UInterpData, CachedDirectorGroup) == 0x0058);
static_assert(offsetof(UInterpData, AllEventNames) == 0x0060);
static_assert(offsetof(UInterpFilter, Caption) == 0x0028);
static_assert(offsetof(UInterpGroup, InterpTracks) == 0x0030);
static_assert(offsetof(UInterpGroup, GroupName) == 0x0040);
static_assert(offsetof(UInterpGroup, GroupColor) == 0x0048);
static_assert(offsetof(UInterpGroupCamera, CameraAnimInst) == 0x0050);
static_assert(offsetof(UInterpGroupInst, Group) == 0x0028);
static_assert(offsetof(UInterpGroupInst, GroupActor) == 0x0030);
static_assert(offsetof(UInterpGroupInst, TrackInst) == 0x0038);
static_assert(offsetof(FInterpControlPoint, PositionControlPoint) == 0x0000);
static_assert(offsetof(UInterpToMovementComponent, TeleportType) == 0x0109);
static_assert(offsetof(UInterpToMovementComponent, BehaviourType) == 0x010A);
static_assert(offsetof(UInterpToMovementComponent, ControlPoints) == 0x0168);
static_assert(offsetof(UInterpTrack, SubTracks) == 0x0038);
static_assert(offsetof(UInterpTrack, TrackInstClass) == 0x0048);
static_assert(offsetof(UInterpTrack, ActiveCondition) == 0x0050);
static_assert(offsetof(UInterpTrack, TrackTitle) == 0x0058);
static_assert(offsetof(UInterpTrackFloatBase, FloatTrack) == 0x0070);
static_assert(offsetof(FAnimControlTrackKey, AnimSeq) == 0x0008);
static_assert(offsetof(UInterpTrackAnimControl, SlotName) == 0x0090);
static_assert(offsetof(UInterpTrackAnimControl, AnimSeqs) == 0x0098);
static_assert(offsetof(UInterpTrackVectorBase, VectorTrack) == 0x0070);
static_assert(offsetof(UInterpTrackBoolProp, BoolTrack) == 0x0070);
static_assert(offsetof(UInterpTrackBoolProp, PropertyName) == 0x0080);
static_assert(offsetof(UInterpTrackColorProp, PropertyName) == 0x0090);
static_assert(offsetof(FDirectorTrackCut, TargetCamGroup) == 0x0008);
static_assert(offsetof(UInterpTrackDirector, CutTrack) == 0x0070);
static_assert(offsetof(FEventTrackKey, EventName) == 0x0004);
static_assert(offsetof(UInterpTrackEvent, EventTrack) == 0x0070);
static_assert(offsetof(UInterpTrackFade, FadeColor) == 0x0094);
static_assert(offsetof(UInterpTrackFloatAnimBPParam, AnimBlueprintClass) == 0x0090);
static_assert(offsetof(UInterpTrackFloatAnimBPParam, AnimClass) == 0x0098);
static_assert(offsetof(UInterpTrackFloatAnimBPParam, ParamName) == 0x00A0);
static_assert(offsetof(UInterpTrackFloatMaterialParam, TargetMaterials) == 0x0090);
static_assert(offsetof(UInterpTrackFloatMaterialParam, ParamName) == 0x00A0);
static_assert(offsetof(UInterpTrackFloatParticleParam, ParamName) == 0x0090);
static_assert(offsetof(UInterpTrackFloatProp, PropertyName) == 0x0090);
static_assert(offsetof(UInterpTrackInstProperty, PropertyOuterObjectInst) == 0x0048);
static_assert(offsetof(UInterpTrackInstColorProp, ResetColor) == 0x0058);
static_assert(offsetof(UInterpTrackInstDirector, OldViewTarget) == 0x0028);
static_assert(offsetof(UInterpTrackInstFloatAnimBPParam, AnimScriptInstance) == 0x0028);
static_assert(offsetof(FPrimitiveMaterialRef, Primitive) == 0x0000);
static_assert(offsetof(FPrimitiveMaterialRef, Decal) == 0x0008);
static_assert(offsetof(UInterpTrackInstFloatMaterialParam, MaterialInstances) == 0x0028);
static_assert(offsetof(UInterpTrackInstFloatMaterialParam, ResetFloats) == 0x0038);
static_assert(offsetof(UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs) == 0x0048);
static_assert(offsetof(UInterpTrackInstFloatMaterialParam, InstancedTrack) == 0x0058);
static_assert(offsetof(UInterpTrackInstLinearColorProp, ResetColor) == 0x0058);
static_assert(offsetof(UInterpTrackInstMove, ResetLocation) == 0x0028);
static_assert(offsetof(UInterpTrackInstMove, ResetRotation) == 0x0034);
static_assert(offsetof(UInterpTrackInstSound, PlayAudioComp) == 0x0030);
static_assert(offsetof(UInterpTrackInstToggle, Action) == 0x0028);
static_assert(offsetof(UInterpTrackInstVectorMaterialParam, MaterialInstances) == 0x0028);
static_assert(offsetof(UInterpTrackInstVectorMaterialParam, ResetVectors) == 0x0038);
static_assert(offsetof(UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs) == 0x0048);
static_assert(offsetof(UInterpTrackInstVectorMaterialParam, InstancedTrack) == 0x0058);
static_assert(offsetof(UInterpTrackInstVectorProp, ResetVector) == 0x0058);
static_assert(offsetof(UInterpTrackInstVisibility, Action) == 0x0028);
static_assert(offsetof(UInterpTrackLinearColorBase, LinearColorTrack) == 0x0070);
static_assert(offsetof(UInterpTrackLinearColorProp, PropertyName) == 0x0090);
static_assert(offsetof(FInterpLookupPoint, GroupName) == 0x0000);
static_assert(offsetof(FInterpLookupTrack, Points) == 0x0000);
static_assert(offsetof(UInterpTrackMove, PosTrack) == 0x0070);
static_assert(offsetof(UInterpTrackMove, EulerTrack) == 0x0088);
static_assert(offsetof(UInterpTrackMove, LookupTrack) == 0x00A0);
static_assert(offsetof(UInterpTrackMove, LookAtGroupName) == 0x00B0);
static_assert(offsetof(UInterpTrackMove, RotMode) == 0x00C4);
static_assert(offsetof(UInterpTrackMove, MovementBaseTM) == 0x00D0);
static_assert(offsetof(UInterpTrackMove, AttachCharacter) == 0x0108);
static_assert(offsetof(UInterpTrackMove, AttachCharacterFirstRotation) == 0x0120);
static_assert(offsetof(UInterpTrackMove, AttachCharacterFirstLocation) == 0x0130);
static_assert(offsetof(UInterpTrackMoveAxis, MoveAxis) == 0x0090);
static_assert(offsetof(UInterpTrackMoveAxis, LookupTrack) == 0x0098);
static_assert(offsetof(UInterpTrackParticleReplay, TrackKeys) == 0x0070);
static_assert(offsetof(FSoundTrackKey, Sound) == 0x0010);
static_assert(offsetof(UInterpTrackSound, Sounds) == 0x0090);
static_assert(offsetof(FToggleTrackKey, ToggleAction) == 0x0004);
static_assert(offsetof(UInterpTrackToggle, ToggleTrack) == 0x0070);
static_assert(offsetof(UInterpTrackVectorMaterialParam, TargetMaterials) == 0x0090);
static_assert(offsetof(UInterpTrackVectorMaterialParam, ParamName) == 0x00A0);
static_assert(offsetof(UInterpTrackVectorProp, PropertyName) == 0x0090);
static_assert(offsetof(FVisibilityTrackKey, Action) == 0x0004);
static_assert(offsetof(FVisibilityTrackKey, ActiveCondition) == 0x0005);
static_assert(offsetof(UInterpTrackVisibility, VisibilityTrack) == 0x0070);
static_assert(offsetof(FLayerActorStats, Type) == 0x0000);
static_assert(offsetof(ULayer, LayerName) == 0x0028);
static_assert(offsetof(ULayer, ActorStats) == 0x0038);
static_assert(offsetof(FReplicatedStaticActorDestructionInfo, ObjClass) == 0x0030);
static_assert(offsetof(ULevel, OwningWorld) == 0x00B8);
static_assert(offsetof(ULevel, Model) == 0x00C0);
static_assert(offsetof(ULevel, ModelComponents) == 0x00C8);
static_assert(offsetof(ULevel, ActorCluster) == 0x00D8);
static_assert(offsetof(ULevel, LevelScriptActor) == 0x00E8);
static_assert(offsetof(ULevel, NavListStart) == 0x00F0);
static_assert(offsetof(ULevel, NavListEnd) == 0x00F8);
static_assert(offsetof(ULevel, NavDataChunks) == 0x0100);
static_assert(offsetof(ULevel, StaticNavigableGeometry) == 0x0118);
static_assert(offsetof(ULevel, StreamingTextureGuids) == 0x0128);
static_assert(offsetof(ULevel, LevelBuildDataId) == 0x01D0);
static_assert(offsetof(ULevel, MapBuildData) == 0x01E0);
static_assert(offsetof(ULevel, LightBuildLevelOffset) == 0x01E8);
static_assert(offsetof(ULevel, WorldSettings) == 0x0268);
static_assert(offsetof(ULevel, CookedCachedActorsBounds) == 0x0278);
static_assert(offsetof(ULevel, AssetUserData) == 0x0298);
static_assert(offsetof(ULevel, DestroyedReplicatedStaticActors) == 0x02B8);
static_assert(offsetof(ULevelActorContainer, Actors) == 0x0028);
static_assert(offsetof(ALevelBounds, BoxComponent) == 0x02C8);
static_assert(offsetof(FStreamingLevelsToConsider, StreamingLevels) == 0x0000);
static_assert(offsetof(FLevelCollection, GameState) == 0x0008);
static_assert(offsetof(FLevelCollection, NetDriver) == 0x0010);
static_assert(offsetof(FLevelCollection, DemoNetDriver) == 0x0018);
static_assert(offsetof(FLevelCollection, PersistentLevel) == 0x0020);
static_assert(offsetof(FTaggedActorsContainer, TaggedActors) == 0x0000);
static_assert(offsetof(FPSCPoolElem, PSC) == 0x0000);
static_assert(offsetof(FPSCPool, FreeElements) == 0x0000);
static_assert(offsetof(FPSCPool, InUseComponents_Auto) == 0x0010);
static_assert(offsetof(FPSCPool, InUseComponents_Manual) == 0x0020);
static_assert(offsetof(FWorldPSCPool, WorldParticleSystemPools) == 0x0000);
static_assert(offsetof(UWorld, PersistentLevel) == 0x0030);
static_assert(offsetof(UWorld, NetDriver) == 0x0038);
static_assert(offsetof(UWorld, LineBatcher) == 0x0040);
static_assert(offsetof(UWorld, PersistentLineBatcher) == 0x0048);
static_assert(offsetof(UWorld, ForegroundLineBatcher) == 0x0050);
static_assert(offsetof(UWorld, NetworkManager) == 0x0058);
static_assert(offsetof(UWorld, PhysicsCollisionHandler) == 0x0060);
static_assert(offsetof(UWorld, ExtraReferencedObjects) == 0x0068);
static_assert(offsetof(UWorld, PerModuleDataObjects) == 0x0078);
static_assert(offsetof(UWorld, StreamingLevels) == 0x0088);
static_assert(offsetof(UWorld, StreamingLevelsToConsider) == 0x0098);
static_assert(offsetof(UWorld, StreamingLevelsPrefix) == 0x0160);
static_assert(offsetof(UWorld, CurrentLevelPendingVisibility) == 0x0170);
static_assert(offsetof(UWorld, CurrentLevelPendingInvisibility) == 0x0178);
static_assert(offsetof(UWorld, DemoNetDriver) == 0x0180);
static_assert(offsetof(UWorld, MyParticleEventManager) == 0x0188);
static_assert(offsetof(UWorld, DefaultPhysicsVolume) == 0x0190);
static_assert(offsetof(UWorld, NavigationSystem) == 0x01B8);
static_assert(offsetof(UWorld, AuthorityGameMode) == 0x01C0);
static_assert(offsetof(UWorld, GameState) == 0x01C8);
static_assert(offsetof(UWorld, AISystem) == 0x01D0);
static_assert(offsetof(UWorld, AvoidanceManager) == 0x01D8);
static_assert(offsetof(UWorld, Levels) == 0x01E0);
static_assert(offsetof(UWorld, LevelCollections) == 0x01F0);
static_assert(offsetof(UWorld, OwningGameInstance) == 0x0228);
static_assert(offsetof(UWorld, ParameterCollectionInstances) == 0x0230);
static_assert(offsetof(UWorld, CanvasForRenderingToTarget) == 0x0240);
static_assert(offsetof(UWorld, CanvasForDrawMaterialToRenderTarget) == 0x0248);
static_assert(offsetof(UWorld, ComponentsThatNeedEndOfFrameUpdate) == 0x0310);
static_assert(offsetof(UWorld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread) == 0x0320);
static_assert(offsetof(UWorld, TaggedActorMap) == 0x06B8);
static_assert(offsetof(UWorld, WorldComposition) == 0x0788);
static_assert(offsetof(UWorld, FixedStreamingLocation) == 0x0794);
static_assert(offsetof(UWorld, PSCPool) == 0x08E0);
static_assert(offsetof(ULevelStreaming, WorldAsset) == 0x0028);
static_assert(offsetof(ULevelStreaming, PackageNameToLoad) == 0x0050);
static_assert(offsetof(ULevelStreaming, LODPackageNames) == 0x0058);
static_assert(offsetof(ULevelStreaming, LevelTransform) == 0x0080);
static_assert(offsetof(ULevelStreaming, LevelColor) == 0x00BC);
static_assert(offsetof(ULevelStreaming, EditorStreamingVolumes) == 0x00D0);
static_assert(offsetof(ULevelStreaming, LoadedLevel) == 0x0138);
static_assert(offsetof(ULevelStreaming, PendingUnloadLevel) == 0x0140);
static_assert(offsetof(ULevelStreamingDynamic, KeepLoadOnHDDMode) == 0x015C);
static_assert(offsetof(ALevelStreamingVolume, StreamingLevelNames) == 0x0318);
static_assert(offsetof(ALevelStreamingVolume, StreamingUsage) == 0x032C);
static_assert(offsetof(ALevelStreamingVolume, AdditiveUnloadVolumeExtent) == 0x0330);
static_assert(offsetof(ULightmappedSurfaceCollection, SourceModel) == 0x0028);
static_assert(offsetof(ULightmappedSurfaceCollection, Surfaces) == 0x0030);
static_assert(offsetof(ULightMapVirtualTexture2D, TypeToLayer) == 0x0108);
static_assert(offsetof(ALightmassPortal, PortalComponent) == 0x02C8);
static_assert(offsetof(ULightmassPortalComponent, PreviewBox) == 0x0260);
static_assert(offsetof(ULightmassPrimitiveSettingsObject, LightmassSettings) == 0x0028);
static_assert(offsetof(ULocalLightComponent, IntensityUnits) == 0x03D8);
static_assert(offsetof(ULocalLightComponent, LightmassSettings) == 0x03E4);
static_assert(offsetof(ULocalPlayer, ViewportClient) == 0x0070);
static_assert(offsetof(ULocalPlayer, AspectRatioAxisConstraint) == 0x0094);
static_assert(offsetof(ULocalPlayer, PendingLevelPlayerControllerClass) == 0x0098);
static_assert(offsetof(ALODActor, StaticMeshComponent) == 0x02C8);
static_assert(offsetof(ALODActor, ImpostersStaticMeshComponents) == 0x02D0);
static_assert(offsetof(ALODActor, Proxy) == 0x0320);
static_assert(offsetof(ALODActor, Key) == 0x0328);
static_assert(offsetof(ALODActor, SubActors) == 0x0338);
static_assert(offsetof(FComponentSync, Name) == 0x0000);
static_assert(offsetof(FComponentSync, SyncOption) == 0x0008);
static_assert(offsetof(FLODMappingData, Mapping) == 0x0000);
static_assert(offsetof(FLODMappingData, InverseMapping) == 0x0010);
static_assert(offsetof(ULODSyncComponent, ComponentsToSync) == 0x00C8);
static_assert(offsetof(ULODSyncComponent, CustomLODMapping) == 0x00D8);
static_assert(offsetof(ULODSyncComponent, DriveComponents) == 0x0130);
static_assert(offsetof(ULODSyncComponent, SubComponents) == 0x0140);
static_assert(offsetof(UMapBuildDataRegistry, LevelLightingQuality) == 0x0028);
static_assert(offsetof(FMaterialInput, ExpressionName) == 0x0004);
static_assert(offsetof(FMaterialFunctionInfo, StateId) == 0x0000);
static_assert(offsetof(FMaterialFunctionInfo, Function) == 0x0010);
static_assert(offsetof(FMaterialParameterCollectionInfo, StateId) == 0x0000);
static_assert(offsetof(FMaterialParameterCollectionInfo, ParameterCollection) == 0x0010);
static_assert(offsetof(FMaterialCachedExpressionData, Parameters) == 0x0000);
static_assert(offsetof(FMaterialCachedExpressionData, ReferencedTextures) == 0x01A0);
static_assert(offsetof(FMaterialCachedExpressionData, FunctionInfos) == 0x01B0);
static_assert(offsetof(FMaterialCachedExpressionData, ParameterCollectionInfos) == 0x01C0);
static_assert(offsetof(FMaterialCachedExpressionData, DefaultLayers) == 0x01D0);
static_assert(offsetof(FMaterialCachedExpressionData, DefaultLayerBlends) == 0x01E0);
static_assert(offsetof(FMaterialCachedExpressionData, GrassTypes) == 0x01F0);
static_assert(offsetof(FMaterialCachedExpressionData, DynamicParameterNames) == 0x0200);
static_assert(offsetof(FMaterialCachedExpressionData, QualityLevelsUsed) == 0x0210);
static_assert(offsetof(UMaterial, PhysMaterial) == 0x0088);
static_assert(offsetof(UMaterial, PhysMaterialMask) == 0x0090);
static_assert(offsetof(UMaterial, PhysicalMaterialMap) == 0x0098);
static_assert(offsetof(UMaterial, Metallic) == 0x00D8);
static_assert(offsetof(UMaterial, Specular) == 0x00EC);
static_assert(offsetof(UMaterial, Anisotropy) == 0x0100);
static_assert(offsetof(UMaterial, Normal) == 0x0114);
static_assert(offsetof(UMaterial, Tangent) == 0x0128);
static_assert(offsetof(UMaterial, EmissiveColor) == 0x013C);
static_assert(offsetof(UMaterial, MaterialDomain) == 0x0150);
static_assert(offsetof(UMaterial, BlendMode) == 0x0151);
static_assert(offsetof(UMaterial, DecalBlendMode) == 0x0152);
static_assert(offsetof(UMaterial, MaterialDecalResponse) == 0x0153);
static_assert(offsetof(UMaterial, ShadingModel) == 0x0154);
static_assert(offsetof(UMaterial, ShadingModels) == 0x0156);
static_assert(offsetof(UMaterial, WorldPositionOffset) == 0x015C);
static_assert(offsetof(UMaterial, Refraction) == 0x0170);
static_assert(offsetof(UMaterial, MaterialAttributes) == 0x0184);
static_assert(offsetof(UMaterial, PixelDepthOffset) == 0x019C);
static_assert(offsetof(UMaterial, ShadingModelFromMaterialExpression) == 0x01B0);
static_assert(offsetof(UMaterial, TranslucencyLightingMode) == 0x01C5);
static_assert(offsetof(UMaterial, CustomSkyLightNormal) == 0x01D0);
static_assert(offsetof(UMaterial, TranslucentMultipleScatteringExtinction) == 0x01F8);
static_assert(offsetof(UMaterial, D3D11TessellationMode) == 0x021D);
static_assert(offsetof(UMaterial, ShadingRate) == 0x021F);
static_assert(offsetof(UMaterial, HeightFogScale) == 0x0220);
static_assert(offsetof(UMaterial, BlendableLocation) == 0x0236);
static_assert(offsetof(UMaterial, StencilCompare) == 0x0238);
static_assert(offsetof(UMaterial, RefractionMode) == 0x023A);
static_assert(offsetof(UMaterial, StateId) == 0x0250);
static_assert(offsetof(UMaterial, CachedExpressionData) == 0x0298);
static_assert(offsetof(FMaterialSpriteElement, Material) == 0x0000);
static_assert(offsetof(FMaterialSpriteElement, DistanceToOpacityCurve) == 0x0008);
static_assert(offsetof(FMaterialSpriteElement, DistanceToSizeCurve) == 0x0020);
static_assert(offsetof(UMaterialBillboardComponent, Elements) == 0x0538);
static_assert(offsetof(UMaterialExpressionAbs, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionAdd, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionAdd, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionAntialiasedTextureMask, Channel) == 0x0084);
static_assert(offsetof(UMaterialExpressionAppendVector, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionAppendVector, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionArccosine, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionArccosineFast, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionArcsine, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionArcsineFast, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionArctangent, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionArctangent2, Y) == 0x0040);
static_assert(offsetof(UMaterialExpressionArctangent2, X) == 0x0054);
static_assert(offsetof(UMaterialExpressionArctangent2Fast, Y) == 0x0040);
static_assert(offsetof(UMaterialExpressionArctangent2Fast, X) == 0x0054);
static_assert(offsetof(UMaterialExpressionArctangentFast, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionAtmosphericFogColor, WorldPosition) == 0x0040);
static_assert(offsetof(UMaterialExpressionBentNormalCustomOutput, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionBlackBody, Temp) == 0x0040);
static_assert(offsetof(UMaterialExpressionBlendMaterialAttributes, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionBlendMaterialAttributes, B) == 0x0058);
static_assert(offsetof(UMaterialExpressionBlendMaterialAttributes, Alpha) == 0x0070);
static_assert(offsetof(UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType) == 0x0084);
static_assert(offsetof(UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType) == 0x0085);
static_assert(offsetof(UMaterialExpressionBreakMaterialAttributes, MaterialAttributes) == 0x0040);
static_assert(offsetof(UMaterialExpressionBumpOffset, Coordinate) == 0x0040);
static_assert(offsetof(UMaterialExpressionBumpOffset, Height) == 0x0054);
static_assert(offsetof(UMaterialExpressionBumpOffset, HeightRatioInput) == 0x0068);
static_assert(offsetof(UMaterialExpressionCeil, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionParameter, ParameterName) == 0x0040);
static_assert(offsetof(UMaterialExpressionParameter, ExpressionGUID) == 0x0048);
static_assert(offsetof(UMaterialExpressionVectorParameter, DefaultValue) == 0x0058);
static_assert(offsetof(UMaterialExpressionChannelMaskParameter, MaskChannel) == 0x0070);
static_assert(offsetof(UMaterialExpressionClamp, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionClamp, Min) == 0x0054);
static_assert(offsetof(UMaterialExpressionClamp, Max) == 0x0068);
static_assert(offsetof(UMaterialExpressionClamp, ClampMode) == 0x007C);
static_assert(offsetof(UMaterialExpressionClearCoatNormalCustomOutput, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionCollectionParameter, Collection) == 0x0040);
static_assert(offsetof(UMaterialExpressionCollectionParameter, ParameterName) == 0x0048);
static_assert(offsetof(UMaterialExpressionCollectionParameter, ParameterId) == 0x0050);
static_assert(offsetof(UMaterialExpressionComment, text) == 0x0048);
static_assert(offsetof(UMaterialExpressionComment, CommentColor) == 0x0058);
static_assert(offsetof(UMaterialExpressionComponentMask, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionConstant3Vector, Constant) == 0x0040);
static_assert(offsetof(UMaterialExpressionConstant4Vector, Constant) == 0x0040);
static_assert(offsetof(UMaterialExpressionConstantBiasScale, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionCosine, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionCrossProduct, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionCrossProduct, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionCurveAtlasRowParameter, Curve) == 0x0060);
static_assert(offsetof(UMaterialExpressionCurveAtlasRowParameter, Atlas) == 0x0068);
static_assert(offsetof(UMaterialExpressionCurveAtlasRowParameter, InputTime) == 0x0070);
static_assert(offsetof(FCustomInput, InputName) == 0x0000);
static_assert(offsetof(FCustomInput, Input) == 0x0008);
static_assert(offsetof(FCustomOutput, OutputName) == 0x0000);
static_assert(offsetof(FCustomOutput, OutputType) == 0x0008);
static_assert(offsetof(FCustomDefine, DefineName) == 0x0000);
static_assert(offsetof(FCustomDefine, DefineValue) == 0x0010);
static_assert(offsetof(UMaterialExpressionCustom, Code) == 0x0040);
static_assert(offsetof(UMaterialExpressionCustom, OutputType) == 0x0050);
static_assert(offsetof(UMaterialExpressionCustom, Description) == 0x0058);
static_assert(offsetof(UMaterialExpressionCustom, Inputs) == 0x0068);
static_assert(offsetof(UMaterialExpressionCustom, AdditionalOutputs) == 0x0078);
static_assert(offsetof(UMaterialExpressionCustom, AdditionalDefines) == 0x0088);
static_assert(offsetof(UMaterialExpressionCustom, IncludeFilePaths) == 0x0098);
static_assert(offsetof(UMaterialExpressionDDX, Value) == 0x0040);
static_assert(offsetof(UMaterialExpressionDDY, Value) == 0x0040);
static_assert(offsetof(UMaterialExpressionDecalMipmapLevel, TextureSize) == 0x0040);
static_assert(offsetof(UMaterialExpressionDepthFade, InOpacity) == 0x0040);
static_assert(offsetof(UMaterialExpressionDepthFade, FadeDistance) == 0x0054);
static_assert(offsetof(UMaterialExpressionDepthOfFieldFunction, FunctionValue) == 0x0040);
static_assert(offsetof(UMaterialExpressionDepthOfFieldFunction, Depth) == 0x0044);
static_assert(offsetof(UMaterialExpressionDeriveNormalZ, InXY) == 0x0040);
static_assert(offsetof(UMaterialExpressionDesaturation, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionDesaturation, Fraction) == 0x0054);
static_assert(offsetof(UMaterialExpressionDesaturation, LuminanceFactors) == 0x0068);
static_assert(offsetof(UMaterialExpressionDistance, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionDistance, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionDistanceFieldGradient, position) == 0x0040);
static_assert(offsetof(UMaterialExpressionDistanceToNearestSurface, position) == 0x0040);
static_assert(offsetof(UMaterialExpressionDivide, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionDivide, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionDotProduct, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionDotProduct, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionDynamicParameter, ParamNames) == 0x0040);
static_assert(offsetof(UMaterialExpressionDynamicParameter, DefaultValue) == 0x0050);
static_assert(offsetof(UMaterialExpressionFeatureLevelSwitch, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionFloor, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionFmod, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionFmod, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionFontSample, Font) == 0x0040);
static_assert(offsetof(UMaterialExpressionFontSampleParameter, ParameterName) == 0x0050);
static_assert(offsetof(UMaterialExpressionFontSampleParameter, ExpressionGUID) == 0x0058);
static_assert(offsetof(UMaterialExpressionFontSampleParameter, Group) == 0x0068);
static_assert(offsetof(UMaterialExpressionFrac, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionFresnel, ExponentIn) == 0x0040);
static_assert(offsetof(UMaterialExpressionFresnel, BaseReflectFractionIn) == 0x0058);
static_assert(offsetof(UMaterialExpressionFresnel, Normal) == 0x0070);
static_assert(offsetof(UMaterialExpressionFunctionInput, Preview) == 0x0040);
static_assert(offsetof(UMaterialExpressionFunctionInput, InputName) == 0x0054);
static_assert(offsetof(UMaterialExpressionFunctionInput, Description) == 0x0060);
static_assert(offsetof(UMaterialExpressionFunctionInput, ID) == 0x0070);
static_assert(offsetof(UMaterialExpressionFunctionInput, InputType) == 0x0080);
static_assert(offsetof(UMaterialExpressionFunctionInput, PreviewValue) == 0x0090);
static_assert(offsetof(UMaterialExpressionFunctionOutput, OutputName) == 0x0040);
static_assert(offsetof(UMaterialExpressionFunctionOutput, Description) == 0x0048);
static_assert(offsetof(UMaterialExpressionFunctionOutput, A) == 0x005C);
static_assert(offsetof(UMaterialExpressionFunctionOutput, ID) == 0x0074);
static_assert(offsetof(UMaterialExpressionGetMaterialAttributes, MaterialAttributes) == 0x0040);
static_assert(offsetof(UMaterialExpressionGetMaterialAttributes, AttributeGetTypes) == 0x0058);
static_assert(offsetof(UMaterialExpressionGIReplace, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionGIReplace, StaticIndirect) == 0x0054);
static_assert(offsetof(UMaterialExpressionGIReplace, DynamicIndirect) == 0x0068);
static_assert(offsetof(UMaterialExpressionHairColor, Melanin) == 0x0040);
static_assert(offsetof(UMaterialExpressionHairColor, Redness) == 0x0054);
static_assert(offsetof(UMaterialExpressionHairColor, DyeColor) == 0x0068);
static_assert(offsetof(UMaterialExpressionIf, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionIf, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionIf, AGreaterThanB) == 0x0068);
static_assert(offsetof(UMaterialExpressionIf, AEqualsB) == 0x007C);
static_assert(offsetof(UMaterialExpressionIf, ALessThanB) == 0x0090);
static_assert(offsetof(UMaterialExpressionInverseLinearInterpolate, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionInverseLinearInterpolate, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionInverseLinearInterpolate, Value) == 0x0068);
static_assert(offsetof(UMaterialExpressionLightmassReplace, Realtime) == 0x0040);
static_assert(offsetof(UMaterialExpressionLightmassReplace, Lightmass) == 0x0054);
static_assert(offsetof(UMaterialExpressionLinearInterpolate, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionLinearInterpolate, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionLinearInterpolate, Alpha) == 0x0068);
static_assert(offsetof(UMaterialExpressionLogarithm10, X) == 0x0040);
static_assert(offsetof(UMaterialExpressionLogarithm2, X) == 0x0040);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, BaseColor) == 0x0040);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Metallic) == 0x0054);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Specular) == 0x0068);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Roughness) == 0x007C);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Anisotropy) == 0x0090);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, EmissiveColor) == 0x00A4);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Opacity) == 0x00B8);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, OpacityMask) == 0x00CC);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Normal) == 0x00E0);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Tangent) == 0x00F4);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset) == 0x0108);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, WorldDisplacement) == 0x011C);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier) == 0x0130);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor) == 0x0144);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, ClearCoat) == 0x0158);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness) == 0x016C);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion) == 0x0180);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, Refraction) == 0x0194);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, CustomizedUVs) == 0x01A8);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset) == 0x0248);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, ShadingModel) == 0x025C);
static_assert(offsetof(UMaterialExpressionMakeMaterialAttributes, HeightFogScale) == 0x0270);
static_assert(offsetof(UMaterialExpressionMapARPassthroughCameraUV, Coordinates) == 0x0040);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, ParameterName) == 0x0040);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, ExpressionGUID) == 0x0048);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, Input) == 0x0058);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, DefaultLayers) == 0x0070);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, LayerCallers) == 0x00B0);
static_assert(offsetof(UMaterialExpressionMaterialAttributeLayers, BlendCallers) == 0x00C8);
static_assert(offsetof(UMaterialExpressionMaterialFunctionCall, MaterialFunction) == 0x0040);
static_assert(offsetof(UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo) == 0x0048);
static_assert(offsetof(UMaterialExpressionMaterialProxyReplace, Realtime) == 0x0040);
static_assert(offsetof(UMaterialExpressionMaterialProxyReplace, MaterialProxy) == 0x0054);
static_assert(offsetof(UMaterialExpressionMax, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionMax, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionMin, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionMin, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionMultiply, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionMultiply, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionNoise, position) == 0x0040);
static_assert(offsetof(UMaterialExpressionNoise, FilterWidth) == 0x0054);
static_assert(offsetof(UMaterialExpressionNoise, NoiseFunction) == 0x0070);
static_assert(offsetof(UMaterialExpressionNormalize, VectorInput) == 0x0040);
static_assert(offsetof(UMaterialExpressionOneMinus, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionPanner, Coordinate) == 0x0040);
static_assert(offsetof(UMaterialExpressionPanner, Time) == 0x0054);
static_assert(offsetof(UMaterialExpressionPanner, Speed) == 0x0068);
static_assert(offsetof(UMaterialExpressionPerInstanceCustomData, DefaultValue) == 0x0040);
static_assert(offsetof(UMaterialExpressionPower, Base) == 0x0040);
static_assert(offsetof(UMaterialExpressionPower, Exponent) == 0x0054);
static_assert(offsetof(UMaterialExpressionPreviousFrameSwitch, CurrentFrame) == 0x0040);
static_assert(offsetof(UMaterialExpressionPreviousFrameSwitch, PreviousFrame) == 0x0054);
static_assert(offsetof(UMaterialExpressionQualitySwitch, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionQualitySwitch, Inputs) == 0x0054);
static_assert(offsetof(UMaterialExpressionRayTracingQualitySwitch, Normal) == 0x0040);
static_assert(offsetof(UMaterialExpressionRayTracingQualitySwitch, RayTraced) == 0x0054);
static_assert(offsetof(UMaterialExpressionReflectionCapturePassSwitch, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionReflectionCapturePassSwitch, Reflection) == 0x0054);
static_assert(offsetof(UMaterialExpressionReflectionVectorWS, CustomWorldNormal) == 0x0040);
static_assert(offsetof(UMaterialExpressionReroute, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis) == 0x0040);
static_assert(offsetof(UMaterialExpressionRotateAboutAxis, RotationAngle) == 0x0054);
static_assert(offsetof(UMaterialExpressionRotateAboutAxis, PivotPoint) == 0x0068);
static_assert(offsetof(UMaterialExpressionRotateAboutAxis, position) == 0x007C);
static_assert(offsetof(UMaterialExpressionRotator, Coordinate) == 0x0040);
static_assert(offsetof(UMaterialExpressionRotator, Time) == 0x0054);
static_assert(offsetof(UMaterialExpressionRound, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor) == 0x0040);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, Specular) == 0x0054);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, Roughness) == 0x0068);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, Normal) == 0x007C);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight) == 0x0090);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, Opacity) == 0x00A4);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, Mask) == 0x00B8);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeightSubtract) == 0x00CC);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureReplace, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput) == 0x0054);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, Coordinates) == 0x0040);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition) == 0x0054);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, MipValue) == 0x0068);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture) == 0x0080);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, MaterialType) == 0x0088);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode) == 0x008B);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSample, TextureAddressMode) == 0x008C);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSampleParameter, ParameterName) == 0x0090);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID) == 0x0098);
static_assert(offsetof(UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group) == 0x00A8);
static_assert(offsetof(UMaterialExpressionSaturate, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionSceneColor, InputMode) == 0x0040);
static_assert(offsetof(UMaterialExpressionSceneColor, Input) == 0x0044);
static_assert(offsetof(UMaterialExpressionSceneColor, OffsetFraction) == 0x0058);
static_assert(offsetof(UMaterialExpressionSceneColor, ConstInput) == 0x006C);
static_assert(offsetof(UMaterialExpressionSceneDepth, InputMode) == 0x0040);
static_assert(offsetof(UMaterialExpressionSceneDepth, Input) == 0x0044);
static_assert(offsetof(UMaterialExpressionSceneDepth, Coordinates) == 0x0058);
static_assert(offsetof(UMaterialExpressionSceneDepth, ConstInput) == 0x006C);
static_assert(offsetof(UMaterialExpressionSceneDepthWithoutWater, InputMode) == 0x0040);
static_assert(offsetof(UMaterialExpressionSceneDepthWithoutWater, Input) == 0x0044);
static_assert(offsetof(UMaterialExpressionSceneDepthWithoutWater, ConstInput) == 0x0058);
static_assert(offsetof(UMaterialExpressionSceneTexture, Coordinates) == 0x0040);
static_assert(offsetof(UMaterialExpressionSceneTexture, SceneTextureId) == 0x0054);
static_assert(offsetof(UMaterialExpressionSetMaterialAttributes, Inputs) == 0x0040);
static_assert(offsetof(UMaterialExpressionSetMaterialAttributes, AttributeSetTypes) == 0x0050);
static_assert(offsetof(UMaterialExpressionShaderStageSwitch, PixelShader) == 0x0040);
static_assert(offsetof(UMaterialExpressionShaderStageSwitch, VertexShader) == 0x0054);
static_assert(offsetof(UMaterialExpressionShadingModel, ShadingModel) == 0x0040);
static_assert(offsetof(UMaterialExpressionShadingPathSwitch, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionShadingPathSwitch, Inputs) == 0x0054);
static_assert(offsetof(UMaterialExpressionShadowReplace, Default) == 0x0040);
static_assert(offsetof(UMaterialExpressionShadowReplace, shadow) == 0x0054);
static_assert(offsetof(UMaterialExpressionSign, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionSine, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients) == 0x0040);
static_assert(offsetof(UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients) == 0x0054);
static_assert(offsetof(UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG) == 0x0068);
static_assert(offsetof(UMaterialExpressionSingleLayerWaterMaterialOutput, ColorScaleBehindWater) == 0x007C);
static_assert(offsetof(UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition) == 0x0044);
static_assert(offsetof(UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition) == 0x0040);
static_assert(offsetof(UMaterialExpressionSmoothStep, Min) == 0x0040);
static_assert(offsetof(UMaterialExpressionSmoothStep, Max) == 0x0054);
static_assert(offsetof(UMaterialExpressionSmoothStep, Value) == 0x0068);
static_assert(offsetof(UMaterialExpressionSobol, Cell) == 0x0040);
static_assert(offsetof(UMaterialExpressionSobol, Index) == 0x0054);
static_assert(offsetof(UMaterialExpressionSobol, Seed) == 0x0068);
static_assert(offsetof(UMaterialExpressionSobol, ConstSeed) == 0x0080);
static_assert(offsetof(UMaterialExpressionSpeedTree, GeometryInput) == 0x0040);
static_assert(offsetof(UMaterialExpressionSpeedTree, WindInput) == 0x0054);
static_assert(offsetof(UMaterialExpressionSpeedTree, LODInput) == 0x0068);
static_assert(offsetof(UMaterialExpressionSpeedTree, ExtraBendWS) == 0x007C);
static_assert(offsetof(UMaterialExpressionSpeedTree, GeometryType) == 0x0090);
static_assert(offsetof(UMaterialExpressionSpeedTree, WindType) == 0x0091);
static_assert(offsetof(UMaterialExpressionSpeedTree, LODType) == 0x0092);
static_assert(offsetof(UMaterialExpressionSphereMask, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionSphereMask, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionSphereMask, Radius) == 0x0068);
static_assert(offsetof(UMaterialExpressionSphereMask, Hardness) == 0x007C);
static_assert(offsetof(UMaterialExpressionSphericalParticleOpacity, Density) == 0x0040);
static_assert(offsetof(UMaterialExpressionSquareRoot, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionStaticSwitch, A) == 0x0044);
static_assert(offsetof(UMaterialExpressionStaticSwitch, B) == 0x0058);
static_assert(offsetof(UMaterialExpressionStaticSwitch, Value) == 0x006C);
static_assert(offsetof(UMaterialExpressionStep, Y) == 0x0040);
static_assert(offsetof(UMaterialExpressionStep, X) == 0x0054);
static_assert(offsetof(UMaterialExpressionSubtract, A) == 0x0040);
static_assert(offsetof(UMaterialExpressionSubtract, B) == 0x0054);
static_assert(offsetof(UMaterialExpressionTangent, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionTangentOutput, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionTemporalSobol, Index) == 0x0040);
static_assert(offsetof(UMaterialExpressionTemporalSobol, Seed) == 0x0054);
static_assert(offsetof(UMaterialExpressionTemporalSobol, ConstSeed) == 0x006C);
static_assert(offsetof(UMaterialExpressionTextureProperty, TextureObject) == 0x0040);
static_assert(offsetof(UMaterialExpressionTextureProperty, Property) == 0x0054);
static_assert(offsetof(UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor) == 0x0040);
static_assert(offsetof(UMaterialExpressionTransform, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionTransform, TransformSourceType) == 0x0054);
static_assert(offsetof(UMaterialExpressionTransform, TransformType) == 0x0055);
static_assert(offsetof(UMaterialExpressionTransformPosition, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionTransformPosition, TransformSourceType) == 0x0054);
static_assert(offsetof(UMaterialExpressionTransformPosition, TransformType) == 0x0055);
static_assert(offsetof(UMaterialExpressionTruncate, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionVectorNoise, position) == 0x0040);
static_assert(offsetof(UMaterialExpressionVectorNoise, NoiseFunction) == 0x0054);
static_assert(offsetof(UMaterialExpressionVertexInterpolator, Input) == 0x0040);
static_assert(offsetof(UMaterialExpressionViewProperty, Property) == 0x0040);
static_assert(offsetof(UMaterialExpressionVirtualTextureFeatureSwitch, No) == 0x0040);
static_assert(offsetof(UMaterialExpressionVirtualTextureFeatureSwitch, Yes) == 0x0054);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG) == 0x0040);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseG2) == 0x0054);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, PhaseBlend) == 0x0068);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringContribution) == 0x007C);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringOcclusion) == 0x0090);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, MultiScatteringEccentricity) == 0x00A4);
static_assert(offsetof(UMaterialExpressionVolumetricAdvancedMaterialOutput, ConservativeDensity) == 0x00B8);
static_assert(offsetof(UMaterialExpressionWorldPosition, WorldPositionShaderOffset) == 0x0040);
static_assert(offsetof(UMaterialFunctionInterface, StateId) == 0x0028);
static_assert(offsetof(UMaterialFunctionInterface, MaterialFunctionUsage) == 0x0038);
static_assert(offsetof(UMaterialFunction, Description) == 0x0040);
static_assert(offsetof(UMaterialFunctionInstance, Parent) == 0x0040);
static_assert(offsetof(UMaterialFunctionInstance, Base) == 0x0048);
static_assert(offsetof(UMaterialFunctionInstance, ScalarParameterValues) == 0x0050);
static_assert(offsetof(UMaterialFunctionInstance, VectorParameterValues) == 0x0060);
static_assert(offsetof(UMaterialFunctionInstance, TextureParameterValues) == 0x0070);
static_assert(offsetof(UMaterialFunctionInstance, FontParameterValues) == 0x0080);
static_assert(offsetof(UMaterialFunctionInstance, StaticSwitchParameterValues) == 0x0090);
static_assert(offsetof(UMaterialFunctionInstance, StaticComponentMaskParameterValues) == 0x00A0);
static_assert(offsetof(UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues) == 0x00B0);
static_assert(offsetof(AMaterialInstanceActor, TargetActors) == 0x02C8);
static_assert(offsetof(FCollectionParameterBase, ParameterName) == 0x0000);
static_assert(offsetof(FCollectionParameterBase, ID) == 0x0008);
static_assert(offsetof(FCollectionVectorParameter, DefaultValue) == 0x0018);
static_assert(offsetof(UMaterialParameterCollection, StateId) == 0x0028);
static_assert(offsetof(UMaterialParameterCollection, ScalarParameters) == 0x0038);
static_assert(offsetof(UMaterialParameterCollection, VectorParameters) == 0x0048);
static_assert(offsetof(UMaterialParameterCollectionInstance, Collection) == 0x0030);
static_assert(offsetof(FInterpGroupActorInfo, ObjectName) == 0x0000);
static_assert(offsetof(FInterpGroupActorInfo, Actors) == 0x0008);
static_assert(offsetof(FCameraCutInfo, Location) == 0x0000);
static_assert(offsetof(AMatineeActor, MatineeData) == 0x02C8);
static_assert(offsetof(AMatineeActor, MatineeControllerName) == 0x02D0);
static_assert(offsetof(AMatineeActor, GroupActorInfos) == 0x02F0);
static_assert(offsetof(AMatineeActor, GroupInst) == 0x0308);
static_assert(offsetof(AMatineeActor, CameraCuts) == 0x0318);
static_assert(offsetof(AMatineeActorCameraAnim, CameraAnim) == 0x0370);
static_assert(offsetof(UMeshSimplificationSettings, MeshReductionModuleName) == 0x0038);
static_assert(offsetof(FPurchaseInfo, Identifier) == 0x0000);
static_assert(offsetof(FPurchaseInfo, DisplayName) == 0x0010);
static_assert(offsetof(FPurchaseInfo, DisplayDescription) == 0x0020);
static_assert(offsetof(FPurchaseInfo, DisplayPrice) == 0x0030);
static_assert(offsetof(UMicroTransactionBase, AvailableProducts) == 0x0038);
static_assert(offsetof(UMicroTransactionBase, LastError) == 0x0048);
static_assert(offsetof(UMicroTransactionBase, LastErrorSolution) == 0x0058);
static_assert(offsetof(UModelComponent, ModelBodySetup) == 0x0550);
static_assert(offsetof(FMorphTargetMaterialParam, ParamName) == 0x0000);
static_assert(offsetof(UMorphTarget, BaseSkelMesh) == 0x0028);
static_assert(offsetof(UMorphTarget, TargetMaterialParams) == 0x0040);
static_assert(offsetof(UNavigationDataChunk, NavigationDataName) == 0x0028);
static_assert(offsetof(UNavigationSystemConfig, NavigationSystemClass) == 0x0028);
static_assert(offsetof(UNavigationSystemConfig, SupportedAgentsMask) == 0x0040);
static_assert(offsetof(UNavigationSystemConfig, DefaultAgentName) == 0x0044);
static_assert(offsetof(FNavigationLinkBase, SupportedAgents) == 0x0014);
static_assert(offsetof(FNavigationLinkBase, Direction) == 0x001C);
static_assert(offsetof(FNavigationLinkBase, AreaClass) == 0x0020);
static_assert(offsetof(FNavigationLink, Left) == 0x0030);
static_assert(offsetof(FNavigationLink, Right) == 0x003C);
static_assert(offsetof(FNavigationSegmentLink, LeftStart) == 0x0030);
static_assert(offsetof(FNavigationSegmentLink, LeftEnd) == 0x003C);
static_assert(offsetof(FNavigationSegmentLink, RightStart) == 0x0048);
static_assert(offsetof(FNavigationSegmentLink, RightEnd) == 0x0054);
static_assert(offsetof(UNavLinkDefinition, Links) == 0x0028);
static_assert(offsetof(UNavLinkDefinition, SegmentLinks) == 0x0038);
static_assert(offsetof(FNetworkEmulationProfileDescription, ProfileName) == 0x0000);
static_assert(offsetof(FNetworkEmulationProfileDescription, ToolTip) == 0x0010);
static_assert(offsetof(UNetworkSettings, NetworkEmulationProfiles) == 0x0048);
static_assert(offsetof(FNodeItem, ParentName) == 0x0000);
static_assert(offsetof(FNodeItem, Transform) == 0x0010);
static_assert(offsetof(UNodeMappingContainer, SourceItems) == 0x0028);
static_assert(offsetof(UNodeMappingContainer, TargetItems) == 0x0078);
static_assert(offsetof(UNodeMappingContainer, SourceToTarget) == 0x00C8);
static_assert(offsetof(UNodeMappingContainer, SourceAsset) == 0x0118);
static_assert(offsetof(UNodeMappingContainer, TargetAsset) == 0x0140);
static_assert(offsetof(UObjectLibrary, ObjectBaseClass) == 0x0028);
static_assert(offsetof(UObjectLibrary, Objects) == 0x0038);
static_assert(offsetof(UObjectReferencer, ReferencedObjects) == 0x0028);
static_assert(offsetof(APainCausingVolume, DamageType) == 0x0510);
static_assert(offsetof(APainCausingVolume, DamageInstigator) == 0x0520);
static_assert(offsetof(UParticleEmitter, EmitterName) == 0x0028);
static_assert(offsetof(UParticleEmitter, EmitterRenderMode) == 0x0034);
static_assert(offsetof(UParticleEmitter, SignificanceLevel) == 0x0035);
static_assert(offsetof(UParticleEmitter, LODLevels) == 0x0040);
static_assert(offsetof(UParticleLODLevel, RequiredModule) == 0x0030);
static_assert(offsetof(UParticleLODLevel, Modules) == 0x0038);
static_assert(offsetof(UParticleLODLevel, TypeDataModule) == 0x0048);
static_assert(offsetof(UParticleLODLevel, SpawnModule) == 0x0050);
static_assert(offsetof(UParticleLODLevel, EventGenerator) == 0x0058);
static_assert(offsetof(UParticleLODLevel, SpawningModules) == 0x0060);
static_assert(offsetof(UParticleLODLevel, SpawnModules) == 0x0070);
static_assert(offsetof(UParticleLODLevel, UpdateModules) == 0x0080);
static_assert(offsetof(UParticleLODLevel, OrbitModules) == 0x0090);
static_assert(offsetof(UParticleLODLevel, EventReceiverModules) == 0x00A0);
static_assert(offsetof(FDistributionLookupTable, Values) == 0x0008);
static_assert(offsetof(FRawDistribution, Table) == 0x0000);
static_assert(offsetof(FRawDistributionVector, MinValueVec) == 0x0028);
static_assert(offsetof(FRawDistributionVector, MaxValueVec) == 0x0034);
static_assert(offsetof(FRawDistributionVector, Distribution) == 0x0040);
static_assert(offsetof(UParticleModuleAcceleration, Acceleration) == 0x0038);
static_assert(offsetof(UParticleModuleAccelerationConstant, Acceleration) == 0x0038);
static_assert(offsetof(FRawDistributionFloat, Distribution) == 0x0028);
static_assert(offsetof(UParticleModuleAccelerationDrag, DragCoefficient) == 0x0038);
static_assert(offsetof(UParticleModuleAccelerationDrag, DragCoefficientRaw) == 0x0040);
static_assert(offsetof(UParticleModuleAccelerationDragScaleOverLife, DragScale) == 0x0038);
static_assert(offsetof(UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw) == 0x0040);
static_assert(offsetof(UParticleModuleAccelerationOverLifetime, AccelOverLife) == 0x0038);
static_assert(offsetof(UParticleModuleAttractorLine, EndPoint0) == 0x0030);
static_assert(offsetof(UParticleModuleAttractorLine, EndPoint1) == 0x003C);
static_assert(offsetof(UParticleModuleAttractorLine, Range) == 0x0048);
static_assert(offsetof(UParticleModuleAttractorLine, Strength) == 0x0078);
static_assert(offsetof(UParticleModuleAttractorParticle, EmitterName) == 0x0030);
static_assert(offsetof(UParticleModuleAttractorParticle, Range) == 0x0038);
static_assert(offsetof(UParticleModuleAttractorParticle, Strength) == 0x0070);
static_assert(offsetof(UParticleModuleAttractorParticle, SelectionMethod) == 0x00A4);
static_assert(offsetof(UParticleModuleAttractorPoint, position) == 0x0030);
static_assert(offsetof(UParticleModuleAttractorPoint, Range) == 0x0078);
static_assert(offsetof(UParticleModuleAttractorPoint, Strength) == 0x00A8);
static_assert(offsetof(UParticleModuleAttractorPointGravity, position) == 0x0030);
static_assert(offsetof(UParticleModuleAttractorPointGravity, Strength) == 0x0040);
static_assert(offsetof(UParticleModuleAttractorPointGravity, StrengthRaw) == 0x0048);
static_assert(offsetof(UParticleModuleBeamModifier, ModifierType) == 0x0030);
static_assert(offsetof(UParticleModuleBeamModifier, PositionOptions) == 0x0034);
static_assert(offsetof(UParticleModuleBeamModifier, position) == 0x0038);
static_assert(offsetof(UParticleModuleBeamModifier, TangentOptions) == 0x0080);
static_assert(offsetof(UParticleModuleBeamModifier, Tangent) == 0x0088);
static_assert(offsetof(UParticleModuleBeamModifier, StrengthOptions) == 0x00D4);
static_assert(offsetof(UParticleModuleBeamModifier, Strength) == 0x00D8);
static_assert(offsetof(UParticleModuleBeamNoise, NoiseRange) == 0x0040);
static_assert(offsetof(UParticleModuleBeamNoise, NoiseRangeScale) == 0x0088);
static_assert(offsetof(UParticleModuleBeamNoise, NoiseSpeed) == 0x00C0);
static_assert(offsetof(UParticleModuleBeamNoise, NoiseTangentStrength) == 0x0120);
static_assert(offsetof(UParticleModuleBeamNoise, NoiseScale) == 0x0160);
static_assert(offsetof(UParticleModuleBeamSource, SourceMethod) == 0x0030);
static_assert(offsetof(UParticleModuleBeamSource, SourceName) == 0x0034);
static_assert(offsetof(UParticleModuleBeamSource, Source) == 0x0040);
static_assert(offsetof(UParticleModuleBeamSource, SourceTangentMethod) == 0x008C);
static_assert(offsetof(UParticleModuleBeamSource, SourceTangent) == 0x0090);
static_assert(offsetof(UParticleModuleBeamSource, SourceStrength) == 0x00E0);
static_assert(offsetof(UParticleModuleBeamTarget, TargetMethod) == 0x0030);
static_assert(offsetof(UParticleModuleBeamTarget, TargetName) == 0x0034);
static_assert(offsetof(UParticleModuleBeamTarget, Target) == 0x0040);
static_assert(offsetof(UParticleModuleBeamTarget, TargetTangentMethod) == 0x008C);
static_assert(offsetof(UParticleModuleBeamTarget, TargetTangent) == 0x0090);
static_assert(offsetof(UParticleModuleBeamTarget, TargetStrength) == 0x00E0);
static_assert(offsetof(UParticleModuleCameraOffset, CameraOffset) == 0x0030);
static_assert(offsetof(UParticleModuleCameraOffset, UpdateMethod) == 0x0064);
static_assert(offsetof(UParticleModuleCollision, DampingFactor) == 0x0030);
static_assert(offsetof(UParticleModuleCollision, DampingFactorRotation) == 0x0078);
static_assert(offsetof(UParticleModuleCollision, MaxCollisions) == 0x00C0);
static_assert(offsetof(UParticleModuleCollision, CollisionCompletionOption) == 0x00F0);
static_assert(offsetof(UParticleModuleCollision, ParticleMass) == 0x0118);
static_assert(offsetof(UParticleModuleCollision, DelayAmount) == 0x0158);
static_assert(offsetof(UParticleModuleCollisionGPU, Resilience) == 0x0030);
static_assert(offsetof(UParticleModuleCollisionGPU, ResilienceScaleOverLife) == 0x0060);
static_assert(offsetof(UParticleModuleCollisionGPU, Response) == 0x00A4);
static_assert(offsetof(UParticleModuleCollisionGPU, CollisionMode) == 0x00A5);
static_assert(offsetof(UParticleModuleColor, StartColor) == 0x0030);
static_assert(offsetof(UParticleModuleColor, StartAlpha) == 0x0078);
static_assert(offsetof(FParticleRandomSeedInfo, ParameterName) == 0x0000);
static_assert(offsetof(FParticleRandomSeedInfo, RandomSeeds) == 0x0010);
static_assert(offsetof(UParticleModuleColor_Seeded, RandomSeedInfo) == 0x00B0);
static_assert(offsetof(UParticleModuleColorOverLife, ColorOverLife) == 0x0030);
static_assert(offsetof(UParticleModuleColorOverLife, AlphaOverLife) == 0x0078);
static_assert(offsetof(UParticleModuleColorScaleOverLife, ColorScaleOverLife) == 0x0030);
static_assert(offsetof(UParticleModuleColorScaleOverLife, AlphaScaleOverLife) == 0x0078);
static_assert(offsetof(FParticleEvent_GenerateInfo, Type) == 0x0000);
static_assert(offsetof(FParticleEvent_GenerateInfo, CustomName) == 0x0010);
static_assert(offsetof(FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame) == 0x0018);
static_assert(offsetof(UParticleModuleEventGenerator, Events) == 0x0030);
static_assert(offsetof(UParticleModuleEventReceiverBase, EventGeneratorType) == 0x0030);
static_assert(offsetof(UParticleModuleEventReceiverBase, EventName) == 0x0034);
static_assert(offsetof(UParticleModuleEventReceiverSpawn, SpawnCount) == 0x0040);
static_assert(offsetof(UParticleModuleEventReceiverSpawn, InheritVelocityScale) == 0x0078);
static_assert(offsetof(UParticleModuleEventReceiverSpawn, PhysicalMaterials) == 0x00C0);
static_assert(offsetof(UParticleModuleKillBox, LowerLeftCorner) == 0x0030);
static_assert(offsetof(UParticleModuleKillBox, UpperRightCorner) == 0x0078);
static_assert(offsetof(UParticleModuleKillHeight, Height) == 0x0030);
static_assert(offsetof(UParticleModuleLifetime, LifeTime) == 0x0030);
static_assert(offsetof(UParticleModuleLifetime_Seeded, RandomSeedInfo) == 0x0060);
static_assert(offsetof(UParticleModuleLight, ColorScaleOverLife) == 0x0038);
static_assert(offsetof(UParticleModuleLight, BrightnessOverLife) == 0x0080);
static_assert(offsetof(UParticleModuleLight, RadiusScale) == 0x00B0);
static_assert(offsetof(UParticleModuleLight, LightExponent) == 0x00E0);
static_assert(offsetof(UParticleModuleLight, LightingChannels) == 0x0110);
static_assert(offsetof(UParticleModuleLight_Seeded, RandomSeedInfo) == 0x0120);
static_assert(offsetof(UParticleModuleLocation, StartLocation) == 0x0030);
static_assert(offsetof(UParticleModuleLocation_Seeded, RandomSeedInfo) == 0x0080);
static_assert(offsetof(FLocationBoneSocketInfo, BoneSocketName) == 0x0000);
static_assert(offsetof(FLocationBoneSocketInfo, Offset) == 0x0008);
static_assert(offsetof(UParticleModuleLocationBoneSocket, SourceType) == 0x0030);
static_assert(offsetof(UParticleModuleLocationBoneSocket, UniversalOffset) == 0x0034);
static_assert(offsetof(UParticleModuleLocationBoneSocket, SourceLocations) == 0x0040);
static_assert(offsetof(UParticleModuleLocationBoneSocket, SelectionMethod) == 0x0050);
static_assert(offsetof(UParticleModuleLocationBoneSocket, SkelMeshActorParamName) == 0x005C);
static_assert(offsetof(UParticleModuleLocationDirect, Location) == 0x0030);
static_assert(offsetof(UParticleModuleLocationDirect, LocationOffset) == 0x0078);
static_assert(offsetof(UParticleModuleLocationDirect, ScaleFactor) == 0x00C0);
static_assert(offsetof(UParticleModuleLocationDirect, Direction) == 0x0108);
static_assert(offsetof(UParticleModuleLocationEmitter, EmitterName) == 0x0030);
static_assert(offsetof(UParticleModuleLocationEmitter, SelectionMethod) == 0x0038);
static_assert(offsetof(UParticleModuleLocationEmitterDirect, EmitterName) == 0x0030);
static_assert(offsetof(UParticleModuleLocationPrimitiveBase, VelocityScale) == 0x0038);
static_assert(offsetof(UParticleModuleLocationPrimitiveBase, StartLocation) == 0x0068);
static_assert(offsetof(UParticleModuleLocationPrimitiveCylinder, StartRadius) == 0x00B8);
static_assert(offsetof(UParticleModuleLocationPrimitiveCylinder, StartHeight) == 0x00E8);
static_assert(offsetof(UParticleModuleLocationPrimitiveCylinder, HeightAxis) == 0x0118);
static_assert(offsetof(UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo) == 0x0120);
static_assert(offsetof(UParticleModuleLocationPrimitiveSphere, StartRadius) == 0x00B0);
static_assert(offsetof(UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo) == 0x00E0);
static_assert(offsetof(UParticleModuleLocationPrimitiveTriangle, StartOffset) == 0x0030);
static_assert(offsetof(UParticleModuleLocationPrimitiveTriangle, Height) == 0x0078);
static_assert(offsetof(UParticleModuleLocationPrimitiveTriangle, angle) == 0x00A8);
static_assert(offsetof(UParticleModuleLocationPrimitiveTriangle, Thickness) == 0x00D8);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, SourceType) == 0x0030);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, UniversalOffset) == 0x0034);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName) == 0x0048);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, ValidAssociatedBones) == 0x0050);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, NormalToCompare) == 0x0064);
static_assert(offsetof(UParticleModuleLocationSkelVertSurface, ValidMaterialIndices) == 0x0078);
static_assert(offsetof(UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo) == 0x0080);
static_assert(offsetof(UParticleModuleMeshMaterial, MeshMaterials) == 0x0030);
static_assert(offsetof(UParticleModuleMeshRotation, StartRotation) == 0x0030);
static_assert(offsetof(UParticleModuleMeshRotation_Seeded, RandomSeedInfo) == 0x0080);
static_assert(offsetof(UParticleModuleMeshRotationRate, StartRotationRate) == 0x0030);
static_assert(offsetof(UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo) == 0x0078);
static_assert(offsetof(UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier) == 0x0030);
static_assert(offsetof(UParticleModuleMeshRotationRateOverLife, RotRate) == 0x0030);
static_assert(offsetof(UParticleModuleOrbit, ChainMode) == 0x0038);
static_assert(offsetof(UParticleModuleOrbit, OffsetAmount) == 0x0040);
static_assert(offsetof(UParticleModuleOrbit, OffsetOptions) == 0x0088);
static_assert(offsetof(UParticleModuleOrbit, RotationAmount) == 0x0090);
static_assert(offsetof(UParticleModuleOrbit, RotationOptions) == 0x00D8);
static_assert(offsetof(UParticleModuleOrbit, RotationRateAmount) == 0x00E0);
static_assert(offsetof(UParticleModuleOrbit, RotationRateOptions) == 0x0128);
static_assert(offsetof(UParticleModuleOrientationAxisLock, LockAxisFlags) == 0x0030);
static_assert(offsetof(FEmitterDynamicParameter, ParamName) == 0x0000);
static_assert(offsetof(FEmitterDynamicParameter, ValueMethod) == 0x000C);
static_assert(offsetof(FEmitterDynamicParameter, ParamValue) == 0x0018);
static_assert(offsetof(UParticleModuleParameterDynamic, DynamicParams) == 0x0030);
static_assert(offsetof(UParticleModuleParameterDynamic_Seeded, RandomSeedInfo) == 0x0048);
static_assert(offsetof(UParticleModulePivotOffset, PivotOffset) == 0x0030);
static_assert(offsetof(UParticleModuleRequired, Material) == 0x0030);
static_assert(offsetof(UParticleModuleRequired, EmitterOrigin) == 0x0040);
static_assert(offsetof(UParticleModuleRequired, EmitterRotation) == 0x004C);
static_assert(offsetof(UParticleModuleRequired, ScreenAlignment) == 0x0058);
static_assert(offsetof(UParticleModuleRequired, SortMode) == 0x005A);
static_assert(offsetof(UParticleModuleRequired, SpawnRate) == 0x0060);
static_assert(offsetof(UParticleModuleRequired, BurstList) == 0x0090);
static_assert(offsetof(UParticleModuleRequired, InterpolationMethod) == 0x00A9);
static_assert(offsetof(UParticleModuleRequired, ParticleBurstMethod) == 0x00AB);
static_assert(offsetof(UParticleModuleRequired, OpacitySourceMode) == 0x00AD);
static_assert(offsetof(UParticleModuleRequired, EmitterNormalsMode) == 0x00AE);
static_assert(offsetof(UParticleModuleRequired, MacroUVPosition) == 0x00C0);
static_assert(offsetof(UParticleModuleRequired, UVFlippingMode) == 0x00D0);
static_assert(offsetof(UParticleModuleRequired, BoundingMode) == 0x00D1);
static_assert(offsetof(UParticleModuleRequired, NormalsSphereCenter) == 0x00D4);
static_assert(offsetof(UParticleModuleRequired, CutoutTexture) == 0x00E8);
static_assert(offsetof(UParticleModuleRequired, NormalsCylinderDirection) == 0x00F8);
static_assert(offsetof(UParticleModuleRequired, NamedMaterialOverrides) == 0x0108);
static_assert(offsetof(UParticleModuleRotation, StartRotation) == 0x0030);
static_assert(offsetof(UParticleModuleRotation_Seeded, RandomSeedInfo) == 0x0060);
static_assert(offsetof(UParticleModuleRotationOverLifetime, RotationOverLife) == 0x0030);
static_assert(offsetof(UParticleModuleRotationRate, StartRotationRate) == 0x0030);
static_assert(offsetof(UParticleModuleRotationRate_Seeded, RandomSeedInfo) == 0x0060);
static_assert(offsetof(UParticleModuleRotationRateMultiplyLife, LifeMultiplier) == 0x0030);
static_assert(offsetof(UParticleModuleSize, StartSize) == 0x0030);
static_assert(offsetof(UParticleModuleSize_Seeded, RandomSeedInfo) == 0x0078);
static_assert(offsetof(UParticleModuleSizeMultiplyLife, LifeMultiplier) == 0x0030);
static_assert(offsetof(UParticleModuleSizeScale, SizeScale) == 0x0030);
static_assert(offsetof(UParticleModuleSizeScaleBySpeed, SpeedScale) == 0x0030);
static_assert(offsetof(UParticleModuleSizeScaleBySpeed, MaxScale) == 0x0038);
static_assert(offsetof(UParticleModuleSourceMovement, SourceMovementScale) == 0x0030);
static_assert(offsetof(UParticleModuleSpawn, Rate) == 0x0038);
static_assert(offsetof(UParticleModuleSpawn, RateScale) == 0x0068);
static_assert(offsetof(UParticleModuleSpawn, ParticleBurstMethod) == 0x0098);
static_assert(offsetof(UParticleModuleSpawn, BurstList) == 0x00A0);
static_assert(offsetof(UParticleModuleSpawn, BurstScale) == 0x00B0);
static_assert(offsetof(UParticleModuleSpawnPerUnit, SpawnPerUnit) == 0x0040);
static_assert(offsetof(UParticleModuleSubUV, Animation) == 0x0030);
static_assert(offsetof(UParticleModuleSubUV, SubImageIndex) == 0x0038);
static_assert(offsetof(UParticleModuleSubUVMovie, FrameRate) == 0x0078);
static_assert(offsetof(UParticleModuleTrailSource, SourceMethod) == 0x0030);
static_assert(offsetof(UParticleModuleTrailSource, SourceName) == 0x0034);
static_assert(offsetof(UParticleModuleTrailSource, SourceStrength) == 0x0040);
static_assert(offsetof(UParticleModuleTrailSource, SourceOffsetDefaults) == 0x0078);
static_assert(offsetof(UParticleModuleTrailSource, SelectionMethod) == 0x0088);
static_assert(offsetof(UParticleModuleTypeDataBeam2, BeamMethod) == 0x0030);
static_assert(offsetof(UParticleModuleTypeDataBeam2, BranchParentName) == 0x0054);
static_assert(offsetof(UParticleModuleTypeDataBeam2, Distance) == 0x0060);
static_assert(offsetof(UParticleModuleTypeDataBeam2, TaperMethod) == 0x0090);
static_assert(offsetof(UParticleModuleTypeDataBeam2, TaperFactor) == 0x0098);
static_assert(offsetof(UParticleModuleTypeDataBeam2, TaperScale) == 0x00C8);
static_assert(offsetof(FGPUSpriteLocalVectorFieldInfo, Field) == 0x0000);
static_assert(offsetof(FGPUSpriteLocalVectorFieldInfo, Transform) == 0x0010);
static_assert(offsetof(FGPUSpriteLocalVectorFieldInfo, MinInitialRotation) == 0x0040);
static_assert(offsetof(FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation) == 0x004C);
static_assert(offsetof(FGPUSpriteLocalVectorFieldInfo, RotationRate) == 0x0058);
static_assert(offsetof(FFloatDistribution, Table) == 0x0000);
static_assert(offsetof(FGPUSpriteEmitterInfo, RequiredModule) == 0x0000);
static_assert(offsetof(FGPUSpriteEmitterInfo, SpawnModule) == 0x0008);
static_assert(offsetof(FGPUSpriteEmitterInfo, SpawnPerUnitModule) == 0x0010);
static_assert(offsetof(FGPUSpriteEmitterInfo, SpawnModules) == 0x0018);
static_assert(offsetof(FGPUSpriteEmitterInfo, LocalVectorField) == 0x0030);
static_assert(offsetof(FGPUSpriteEmitterInfo, VectorFieldScale) == 0x00A0);
static_assert(offsetof(FGPUSpriteEmitterInfo, DragCoefficient) == 0x00C0);
static_assert(offsetof(FGPUSpriteEmitterInfo, PointAttractorStrength) == 0x00E0);
static_assert(offsetof(FGPUSpriteEmitterInfo, Resilience) == 0x0100);
static_assert(offsetof(FGPUSpriteEmitterInfo, ConstantAcceleration) == 0x0120);
static_assert(offsetof(FGPUSpriteEmitterInfo, PointAttractorPosition) == 0x012C);
static_assert(offsetof(FGPUSpriteEmitterInfo, OrbitOffsetBase) == 0x013C);
static_assert(offsetof(FGPUSpriteEmitterInfo, OrbitOffsetRange) == 0x0148);
static_assert(offsetof(FGPUSpriteEmitterInfo, InvMaxSize) == 0x0154);
static_assert(offsetof(FGPUSpriteEmitterInfo, ScreenAlignment) == 0x0168);
static_assert(offsetof(FGPUSpriteEmitterInfo, LockAxisFlag) == 0x0169);
static_assert(offsetof(FGPUSpriteEmitterInfo, CollisionMode) == 0x0170);
static_assert(offsetof(FGPUSpriteEmitterInfo, DynamicColor) == 0x0180);
static_assert(offsetof(FGPUSpriteEmitterInfo, DynamicAlpha) == 0x01C8);
static_assert(offsetof(FGPUSpriteEmitterInfo, DynamicColorScale) == 0x01F8);
static_assert(offsetof(FGPUSpriteEmitterInfo, DynamicAlphaScale) == 0x0240);
static_assert(offsetof(FGPUSpriteResourceData, QuantizedColorSamples) == 0x0000);
static_assert(offsetof(FGPUSpriteResourceData, QuantizedMiscSamples) == 0x0010);
static_assert(offsetof(FGPUSpriteResourceData, QuantizedSimulationAttrSamples) == 0x0020);
static_assert(offsetof(FGPUSpriteResourceData, ColorScale) == 0x0030);
static_assert(offsetof(FGPUSpriteResourceData, ColorBias) == 0x0040);
static_assert(offsetof(FGPUSpriteResourceData, MiscScale) == 0x0050);
static_assert(offsetof(FGPUSpriteResourceData, MiscBias) == 0x0060);
static_assert(offsetof(FGPUSpriteResourceData, SimulationAttrCurveScale) == 0x0070);
static_assert(offsetof(FGPUSpriteResourceData, SimulationAttrCurveBias) == 0x0080);
static_assert(offsetof(FGPUSpriteResourceData, SubImageSize) == 0x0090);
static_assert(offsetof(FGPUSpriteResourceData, SizeBySpeed) == 0x00A0);
static_assert(offsetof(FGPUSpriteResourceData, ConstantAcceleration) == 0x00B0);
static_assert(offsetof(FGPUSpriteResourceData, OrbitOffsetBase) == 0x00BC);
static_assert(offsetof(FGPUSpriteResourceData, OrbitOffsetRange) == 0x00C8);
static_assert(offsetof(FGPUSpriteResourceData, OrbitFrequencyBase) == 0x00D4);
static_assert(offsetof(FGPUSpriteResourceData, OrbitFrequencyRange) == 0x00E0);
static_assert(offsetof(FGPUSpriteResourceData, OrbitPhaseBase) == 0x00EC);
static_assert(offsetof(FGPUSpriteResourceData, OrbitPhaseRange) == 0x00F8);
static_assert(offsetof(FGPUSpriteResourceData, ScreenAlignment) == 0x0144);
static_assert(offsetof(FGPUSpriteResourceData, LockAxisFlag) == 0x0145);
static_assert(offsetof(FGPUSpriteResourceData, PivotOffset) == 0x0148);
static_assert(offsetof(UParticleModuleTypeDataGpu, EmitterInfo) == 0x0030);
static_assert(offsetof(UParticleModuleTypeDataGpu, ResourceData) == 0x02B0);
static_assert(offsetof(UParticleModuleTypeDataMesh, Mesh) == 0x0030);
static_assert(offsetof(UParticleModuleTypeDataMesh, MeshAlignment) == 0x0045);
static_assert(offsetof(UParticleModuleTypeDataMesh, RollPitchYawRange) == 0x0048);
static_assert(offsetof(UParticleModuleTypeDataMesh, AxisLockOption) == 0x0090);
static_assert(offsetof(UParticleModuleTypeDataMesh, CameraFacingUpAxisOption) == 0x0092);
static_assert(offsetof(UParticleModuleTypeDataMesh, CameraFacingOption) == 0x0093);
static_assert(offsetof(UParticleModuleTypeDataRibbon, RenderAxis) == 0x0044);
static_assert(offsetof(UParticleModuleVectorFieldLocal, VectorField) == 0x0030);
static_assert(offsetof(UParticleModuleVectorFieldLocal, RelativeTranslation) == 0x0038);
static_assert(offsetof(UParticleModuleVectorFieldLocal, RelativeRotation) == 0x0044);
static_assert(offsetof(UParticleModuleVectorFieldLocal, RelativeScale3D) == 0x0050);
static_assert(offsetof(UParticleModuleVectorFieldRotation, MinInitialRotation) == 0x0030);
static_assert(offsetof(UParticleModuleVectorFieldRotation, MaxInitialRotation) == 0x003C);
static_assert(offsetof(UParticleModuleVectorFieldRotationRate, RotationRate) == 0x0030);
static_assert(offsetof(UParticleModuleVectorFieldScale, VectorFieldScale) == 0x0030);
static_assert(offsetof(UParticleModuleVectorFieldScale, VectorFieldScaleRaw) == 0x0038);
static_assert(offsetof(UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife) == 0x0030);
static_assert(offsetof(UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw) == 0x0038);
static_assert(offsetof(UParticleModuleVelocity, StartVelocity) == 0x0038);
static_assert(offsetof(UParticleModuleVelocity, StartVelocityRadial) == 0x0080);
static_assert(offsetof(UParticleModuleVelocity_Seeded, RandomSeedInfo) == 0x00B0);
static_assert(offsetof(UParticleModuleVelocityCone, angle) == 0x0038);
static_assert(offsetof(UParticleModuleVelocityCone, Velocity) == 0x0068);
static_assert(offsetof(UParticleModuleVelocityCone, Direction) == 0x0098);
static_assert(offsetof(UParticleModuleVelocityInheritParent, Scale) == 0x0038);
static_assert(offsetof(UParticleModuleVelocityOverLifetime, VelOverLife) == 0x0038);
static_assert(offsetof(FLODSoloTrack, SoloEnableSetting) == 0x0000);
static_assert(offsetof(FNamedEmitterMaterial, Name) == 0x0000);
static_assert(offsetof(FNamedEmitterMaterial, Material) == 0x0008);
static_assert(offsetof(UParticleSystem, Emitters) == 0x0040);
static_assert(offsetof(UParticleSystem, PreviewComponent) == 0x0050);
static_assert(offsetof(UParticleSystem, CurveEdSetup) == 0x0058);
static_assert(offsetof(UParticleSystem, LODDistances) == 0x0068);
static_assert(offsetof(UParticleSystem, LODSettings) == 0x0078);
static_assert(offsetof(UParticleSystem, FixedRelativeBoundingBox) == 0x0088);
static_assert(offsetof(UParticleSystem, SystemUpdateMode) == 0x00B2);
static_assert(offsetof(UParticleSystem, LODMethod) == 0x00B3);
static_assert(offsetof(UParticleSystem, InsignificantReaction) == 0x00B4);
static_assert(offsetof(UParticleSystem, OcclusionBoundsMethod) == 0x00B5);
static_assert(offsetof(UParticleSystem, MaxSignificanceLevel) == 0x00B7);
static_assert(offsetof(UParticleSystem, MacroUVPosition) == 0x00C0);
static_assert(offsetof(UParticleSystem, CustomOcclusionBounds) == 0x00CC);
static_assert(offsetof(UParticleSystem, SoloTracking) == 0x00E8);
static_assert(offsetof(UParticleSystem, NamedMaterialSlots) == 0x00F8);
static_assert(offsetof(UPawnNoiseEmitterComponent, LastRemoteNoisePosition) == 0x00C4);
static_assert(offsetof(UPhysicalAnimationComponent, SkeletalMeshComponent) == 0x00C8);
static_assert(offsetof(UPhysicalMaterialMask, AddressX) == 0x002C);
static_assert(offsetof(UPhysicalMaterialMask, AddressY) == 0x002D);
static_assert(offsetof(UPhysicsAsset, BoundsBodies) == 0x0030);
static_assert(offsetof(UPhysicsAsset, SkeletalBodySetups) == 0x0040);
static_assert(offsetof(UPhysicsAsset, ConstraintSetup) == 0x0050);
static_assert(offsetof(UPhysicsAsset, SolverIterations) == 0x0060);
static_assert(offsetof(UPhysicsAsset, ThumbnailInfo) == 0x0120);
static_assert(offsetof(UPhysicsAsset, BodySetup) == 0x0128);
static_assert(offsetof(FPhysicalAnimationData, BodyName) == 0x0000);
static_assert(offsetof(FPhysicalAnimationProfile, ProfileName) == 0x0000);
static_assert(offsetof(FPhysicalAnimationProfile, PhysicalAnimationData) == 0x0008);
static_assert(offsetof(USkeletalBodySetup, PhysicalAnimationData) == 0x0318);
static_assert(offsetof(UPhysicsCollisionHandler, DefaultImpactSound) == 0x0030);
static_assert(offsetof(APhysicsConstraintActor, ConstraintComp) == 0x02C8);
static_assert(offsetof(APhysicsConstraintActor, ConstraintActor1) == 0x02D0);
static_assert(offsetof(APhysicsConstraintActor, ConstraintActor2) == 0x02D8);
static_assert(offsetof(FConstrainComponentPropName, ComponentName) == 0x0000);
static_assert(offsetof(FLinearConstraint, XMotion) == 0x0018);
static_assert(offsetof(FLinearConstraint, YMotion) == 0x0019);
static_assert(offsetof(FLinearConstraint, ZMotion) == 0x001A);
static_assert(offsetof(FConeConstraint, Swing1Motion) == 0x001C);
static_assert(offsetof(FConeConstraint, Swing2Motion) == 0x001D);
static_assert(offsetof(FTwistConstraint, TwistMotion) == 0x0018);
static_assert(offsetof(FLinearDriveConstraint, PositionTarget) == 0x0000);
static_assert(offsetof(FLinearDriveConstraint, VelocityTarget) == 0x000C);
static_assert(offsetof(FLinearDriveConstraint, XDrive) == 0x0018);
static_assert(offsetof(FLinearDriveConstraint, YDrive) == 0x0028);
static_assert(offsetof(FLinearDriveConstraint, ZDrive) == 0x0038);
static_assert(offsetof(FAngularDriveConstraint, TwistDrive) == 0x0000);
static_assert(offsetof(FAngularDriveConstraint, SwingDrive) == 0x0010);
static_assert(offsetof(FAngularDriveConstraint, SlerpDrive) == 0x0020);
static_assert(offsetof(FAngularDriveConstraint, OrientationTarget) == 0x0030);
static_assert(offsetof(FAngularDriveConstraint, AngularVelocityTarget) == 0x003C);
static_assert(offsetof(FAngularDriveConstraint, AngularDriveMode) == 0x0048);
static_assert(offsetof(FConstraintProfileProperties, LinearLimit) == 0x0018);
static_assert(offsetof(FConstraintProfileProperties, ConeLimit) == 0x0034);
static_assert(offsetof(FConstraintProfileProperties, TwistLimit) == 0x0054);
static_assert(offsetof(FConstraintProfileProperties, LinearDrive) == 0x0070);
static_assert(offsetof(FConstraintProfileProperties, AngularDrive) == 0x00BC);
static_assert(offsetof(FConstraintInstance, JointName) == 0x0018);
static_assert(offsetof(FConstraintInstance, ConstraintBone1) == 0x0020);
static_assert(offsetof(FConstraintInstance, ConstraintBone2) == 0x0028);
static_assert(offsetof(FConstraintInstance, Pos1) == 0x0030);
static_assert(offsetof(FConstraintInstance, PriAxis1) == 0x003C);
static_assert(offsetof(FConstraintInstance, SecAxis1) == 0x0048);
static_assert(offsetof(FConstraintInstance, Pos2) == 0x0054);
static_assert(offsetof(FConstraintInstance, PriAxis2) == 0x0060);
static_assert(offsetof(FConstraintInstance, SecAxis2) == 0x006C);
static_assert(offsetof(FConstraintInstance, AngularRotationOffset) == 0x0078);
static_assert(offsetof(FConstraintInstance, ProfileInstance) == 0x008C);
static_assert(offsetof(UPhysicsConstraintComponent, ConstraintActor1) == 0x0260);
static_assert(offsetof(UPhysicsConstraintComponent, ComponentName1) == 0x0268);
static_assert(offsetof(UPhysicsConstraintComponent, ConstraintActor2) == 0x0270);
static_assert(offsetof(UPhysicsConstraintComponent, ComponentName2) == 0x0278);
static_assert(offsetof(UPhysicsConstraintComponent, ConstraintSetup) == 0x0290);
static_assert(offsetof(UPhysicsConstraintComponent, ConstraintInstance) == 0x02A8);
static_assert(offsetof(FPhysicsConstraintProfileHandle, ProfileProperties) == 0x0000);
static_assert(offsetof(FPhysicsConstraintProfileHandle, ProfileName) == 0x010C);
static_assert(offsetof(UPhysicsConstraintTemplate, DefaultInstance) == 0x0028);
static_assert(offsetof(UPhysicsConstraintTemplate, ProfileHandles) == 0x01E8);
static_assert(offsetof(UPhysicsConstraintTemplate, DefaultProfile) == 0x01F8);
static_assert(offsetof(UPhysicsHandleComponent, GrabbedComponent) == 0x00C0);
static_assert(offsetof(FPhysicalSurfaceName, Type) == 0x0000);
static_assert(offsetof(FPhysicalSurfaceName, Name) == 0x0004);
static_assert(offsetof(FBroadphaseSettings, MBPBounds) == 0x0004);
static_assert(offsetof(FBroadphaseSettings, MBPOuterBounds) == 0x0020);
static_assert(offsetof(FChaosPhysicsSettings, DefaultThreadingModel) == 0x0000);
static_assert(offsetof(FChaosPhysicsSettings, DedicatedThreadTickMode) == 0x0001);
static_assert(offsetof(FChaosPhysicsSettings, DedicatedThreadBufferMode) == 0x0002);
static_assert(offsetof(UPhysicsSettings, PhysicErrorCorrection) == 0x00E0);
static_assert(offsetof(UPhysicsSettings, LockedAxis) == 0x0114);
static_assert(offsetof(UPhysicsSettings, DefaultDegreesOfFreedom) == 0x0115);
static_assert(offsetof(UPhysicsSettings, PhysicalSurfaces) == 0x0148);
static_assert(offsetof(UPhysicsSettings, DefaultBroadphaseSettings) == 0x0158);
static_assert(offsetof(UPhysicsSettings, ChaosSettings) == 0x019C);
static_assert(offsetof(UPhysicsSpringComponent, SpringChannel) == 0x0270);
static_assert(offsetof(APhysicsThruster, ThrusterComponent) == 0x02C8);
static_assert(offsetof(ASceneCapture, MeshComp) == 0x02C8);
static_assert(offsetof(ASceneCapture, SceneComponent) == 0x02D0);
static_assert(offsetof(APlanarReflection, PlanarReflectionComponent) == 0x02D8);
static_assert(offsetof(UPlanarReflectionComponent, PreviewBox) == 0x0320);
static_assert(offsetof(UPlaneReflectionCaptureComponent, PreviewInfluenceRadius) == 0x02E0);
static_assert(offsetof(UPlaneReflectionCaptureComponent, PreviewCaptureBox) == 0x02E8);
static_assert(offsetof(UPlatformInterfaceWebResponse, OriginalURL) == 0x0028);
static_assert(offsetof(UPlatformInterfaceWebResponse, StringResponse) == 0x0040);
static_assert(offsetof(UPlatformInterfaceWebResponse, BinaryResponse) == 0x0050);
static_assert(offsetof(FMinimalViewInfo, Location) == 0x0000);
static_assert(offsetof(FMinimalViewInfo, Rotation) == 0x000C);
static_assert(offsetof(FMinimalViewInfo, ProjectionMode) == 0x0040);
static_assert(offsetof(FMinimalViewInfo, PostProcessSettings) == 0x0050);
static_assert(offsetof(FMinimalViewInfo, OffCenterProjectionOffset) == 0x05F0);
static_assert(offsetof(FCameraCacheEntry, POV) == 0x0010);
static_assert(offsetof(FTViewTarget, Target) == 0x0000);
static_assert(offsetof(FTViewTarget, POV) == 0x0010);
static_assert(offsetof(FTViewTarget, PlayerState) == 0x0650);
static_assert(offsetof(APlayerCameraManager, PCOwner) == 0x02C8);
static_assert(offsetof(APlayerCameraManager, TransformComponent) == 0x02D0);
static_assert(offsetof(APlayerCameraManager, CameraCache) == 0x0340);
static_assert(offsetof(APlayerCameraManager, LastFrameCameraCache) == 0x0990);
static_assert(offsetof(APlayerCameraManager, ViewTarget) == 0x0FE0);
static_assert(offsetof(APlayerCameraManager, PendingViewTarget) == 0x1640);
static_assert(offsetof(APlayerCameraManager, CameraCachePrivate) == 0x1CD0);
static_assert(offsetof(APlayerCameraManager, LastFrameCameraCachePrivate) == 0x2320);
static_assert(offsetof(APlayerCameraManager, ModifierList) == 0x2970);
static_assert(offsetof(APlayerCameraManager, DefaultModifiers) == 0x2980);
static_assert(offsetof(APlayerCameraManager, FreeCamOffset) == 0x2994);
static_assert(offsetof(APlayerCameraManager, ViewTargetOffset) == 0x29A0);
static_assert(offsetof(APlayerCameraManager, CameraLensEffects) == 0x29D0);
static_assert(offsetof(APlayerCameraManager, CachedCameraShakeMod) == 0x29E0);
static_assert(offsetof(APlayerCameraManager, AnimInstPool) == 0x29E8);
static_assert(offsetof(APlayerCameraManager, PostProcessBlendCache) == 0x2A28);
static_assert(offsetof(APlayerCameraManager, ActiveAnims) == 0x2A60);
static_assert(offsetof(APlayerCameraManager, FreeAnims) == 0x2A70);
static_assert(offsetof(APlayerCameraManager, AnimCameraActor) == 0x2A80);
static_assert(offsetof(APlayerStart, PlayerStartTag) == 0x02F0);
static_assert(offsetof(APointLight, PointLightComponent) == 0x02D8);
static_assert(offsetof(FPoseData, LocalSpacePose) == 0x0000);
static_assert(offsetof(FPoseData, TrackToBufferIndex) == 0x0010);
static_assert(offsetof(FPoseData, CurveData) == 0x0060);
static_assert(offsetof(FPoseDataContainer, PoseNames) == 0x0000);
static_assert(offsetof(FPoseDataContainer, Tracks) == 0x0010);
static_assert(offsetof(FPoseDataContainer, TrackMap) == 0x0020);
static_assert(offsetof(FPoseDataContainer, Poses) == 0x0070);
static_assert(offsetof(FPoseDataContainer, Curves) == 0x0080);
static_assert(offsetof(UPoseAsset, PoseContainer) == 0x0080);
static_assert(offsetof(UPoseAsset, RetargetSource) == 0x0118);
static_assert(offsetof(UPoseWatch, Node) == 0x0028);
static_assert(offsetof(UPoseWatch, PoseWatchColour) == 0x0030);
static_assert(offsetof(UPostProcessComponent, Settings) == 0x0270);
static_assert(offsetof(APostProcessVolume, Settings) == 0x0320);
static_assert(offsetof(APrecomputedVisibilityOverrideVolume, OverrideVisibleActors) == 0x0318);
static_assert(offsetof(APrecomputedVisibilityOverrideVolume, OverrideInvisibleActors) == 0x0328);
static_assert(offsetof(APrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels) == 0x0338);
static_assert(offsetof(FPreviewMeshCollectionEntry, SkeletalMesh) == 0x0000);
static_assert(offsetof(FPreviewMeshCollectionEntry, AttachSocketName) == 0x0028);
static_assert(offsetof(FPreviewMeshCollectionEntry, RelativeLocation) == 0x0030);
static_assert(offsetof(FPreviewMeshCollectionEntry, RelativeRotation) == 0x003C);
static_assert(offsetof(UPreviewMeshCollection, Skeleton) == 0x0038);
static_assert(offsetof(UPreviewMeshCollection, SkeletalMeshes) == 0x0040);
static_assert(offsetof(FCollectionReference, CollectionName) == 0x0000);
static_assert(offsetof(UPrimaryAssetLabel, Rules) == 0x0030);
static_assert(offsetof(UPrimaryAssetLabel, AssetCollection) == 0x0060);
static_assert(offsetof(UProjectileMovementComponent, PreviousHitNormal) == 0x0110);
static_assert(offsetof(UProjectileMovementComponent, HomingTargetComponent) == 0x015C);
static_assert(offsetof(UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName) == 0x0038);
static_assert(offsetof(ARadialForceActor, ForceComponent) == 0x02C8);
static_assert(offsetof(ARectLight, RectLightComponent) == 0x02D8);
static_assert(offsetof(URectLightComponent, SourceTexture) == 0x0400);
static_assert(offsetof(URendererSettings, MobileMSAASampleCount) == 0x0040);
static_assert(offsetof(URendererSettings, TranslucentSortPolicy) == 0x0078);
static_assert(offsetof(URendererSettings, TranslucentSortAxis) == 0x007C);
static_assert(offsetof(URendererSettings, CustomDepthStencil) == 0x0088);
static_assert(offsetof(URendererSettings, bEnableAlphaChannelInPostProcessing) == 0x0090);
static_assert(offsetof(URendererSettings, DefaultFeatureAutoExposure) == 0x0098);
static_assert(offsetof(URendererSettings, DefaultFeatureAntiAliasing) == 0x00A4);
static_assert(offsetof(URendererSettings, DefaultLightUnits) == 0x00A5);
static_assert(offsetof(URendererSettings, DefaultBackBufferPixelFormat) == 0x00A6);
static_assert(offsetof(URendererSettings, EarlyZPass) == 0x00AC);
static_assert(offsetof(URendererSettings, ClearSceneMethod) == 0x00B4);
static_assert(offsetof(URendererSettings, GBufferFormat) == 0x00C8);
static_assert(offsetof(URendererSettings, DefaultSkinCacheBehavior) == 0x00D8);
static_assert(offsetof(URendererSettings, MobilePlanarReflectionMode) == 0x00F0);
static_assert(offsetof(URendererSettings, bStreamSkeletalMeshLODs) == 0x00F1);
static_assert(offsetof(URendererSettings, bDiscardSkeletalMeshOptionalLODs) == 0x00F2);
static_assert(offsetof(URendererSettings, VisualizeCalibrationColorMaterialPath) == 0x00F8);
static_assert(offsetof(URendererSettings, VisualizeCalibrationCustomMaterialPath) == 0x0110);
static_assert(offsetof(URendererSettings, VisualizeCalibrationGrayscaleMaterialPath) == 0x0128);
static_assert(offsetof(FRigTransformConstraint, TranformType) == 0x0000);
static_assert(offsetof(FRigTransformConstraint, ParentSpace) == 0x0004);
static_assert(offsetof(FTransformBaseConstraint, TransformConstraints) == 0x0000);
static_assert(offsetof(FTransformBase, Node) == 0x0000);
static_assert(offsetof(FTransformBase, Constraints) == 0x0008);
static_assert(offsetof(FNode, Name) == 0x0000);
static_assert(offsetof(FNode, ParentName) == 0x0008);
static_assert(offsetof(FNode, Transform) == 0x0010);
static_assert(offsetof(FNode, DisplayName) == 0x0040);
static_assert(offsetof(URig, TransformBases) == 0x0030);
static_assert(offsetof(URig, Nodes) == 0x0040);
static_assert(offsetof(URotatingMovementComponent, RotationRate) == 0x0100);
static_assert(offsetof(URotatingMovementComponent, PivotTranslation) == 0x010C);
static_assert(offsetof(URuntimeVirtualTexture, MaterialType) == 0x0034);
static_assert(offsetof(URuntimeVirtualTexture, LODGroup) == 0x0040);
static_assert(offsetof(URuntimeVirtualTexture, StreamingTexture) == 0x0048);
static_assert(offsetof(URuntimeVirtualTextureComponent, BoundsAlignActor) == 0x0260);
static_assert(offsetof(URuntimeVirtualTextureComponent, VirtualTexture) == 0x0290);
static_assert(offsetof(URuntimeVirtualTextureComponent, StreamingTexture) == 0x02A8);
static_assert(offsetof(ARuntimeVirtualTextureVolume, VirtualTextureComponent) == 0x02C8);
static_assert(offsetof(ASceneCapture2D, CaptureComponent2D) == 0x02D8);
static_assert(offsetof(USceneCaptureComponentCube, TextureTarget) == 0x0320);
static_assert(offsetof(USceneCaptureComponentCube, TextureTargetLeft) == 0x0330);
static_assert(offsetof(USceneCaptureComponentCube, TextureTargetRight) == 0x0338);
static_assert(offsetof(USceneCaptureComponentCube, TextureTargetODS) == 0x0340);
static_assert(offsetof(ASceneCaptureCube, CaptureComponentCube) == 0x02D8);
static_assert(offsetof(FBPVariableMetaDataEntry, DataKey) == 0x0000);
static_assert(offsetof(FBPVariableMetaDataEntry, DataValue) == 0x0008);
static_assert(offsetof(USCS_Node, ComponentClass) == 0x0028);
static_assert(offsetof(USCS_Node, ComponentTemplate) == 0x0030);
static_assert(offsetof(USCS_Node, CookedComponentInstancingData) == 0x0038);
static_assert(offsetof(USCS_Node, AttachToName) == 0x0080);
static_assert(offsetof(USCS_Node, ParentComponentOrVariableName) == 0x0088);
static_assert(offsetof(USCS_Node, ParentComponentOwnerClassName) == 0x0090);
static_assert(offsetof(USCS_Node, ChildNodes) == 0x00A0);
static_assert(offsetof(USCS_Node, MetaDataArray) == 0x00B0);
static_assert(offsetof(USCS_Node, VariableGuid) == 0x00C0);
static_assert(offsetof(USCS_Node, InternalVariableName) == 0x00D0);
static_assert(offsetof(UShadowMapTexture2D, ShadowmapFlags) == 0x0108);
static_assert(offsetof(USimpleConstructionScript, RootNodes) == 0x0028);
static_assert(offsetof(USimpleConstructionScript, AllNodes) == 0x0038);
static_assert(offsetof(USimpleConstructionScript, DefaultSceneRootNode) == 0x0048);
static_assert(offsetof(ASkeletalMeshActor, SkeletalMeshComponent) == 0x02D8);
static_assert(offsetof(ASkeletalMeshActor, ReplicatedMesh) == 0x02E0);
static_assert(offsetof(ASkeletalMeshActor, ReplicatedPhysAsset) == 0x02E8);
static_assert(offsetof(ASkeletalMeshActor, ReplicatedMaterial0) == 0x02F0);
static_assert(offsetof(ASkeletalMeshActor, ReplicatedMaterial1) == 0x02F8);
static_assert(offsetof(FBoneFilter, BoneName) == 0x0004);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, ScreenSize) == 0x0000);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, BoneFilterActionOption) == 0x0008);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, BoneList) == 0x0010);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, BonesToPrioritize) == 0x0020);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, BakePose) == 0x0038);
static_assert(offsetof(FSkeletalMeshLODGroupSettings, ReductionSettings) == 0x0040);
static_assert(offsetof(USkeletalMeshLODSettings, MinLOD) == 0x0030);
static_assert(offsetof(USkeletalMeshLODSettings, DisableBelowMinLodStripping) == 0x0034);
static_assert(offsetof(USkeletalMeshLODSettings, bSupportLODStreaming) == 0x0036);
static_assert(offsetof(USkeletalMeshLODSettings, MaxNumStreamedLODs) == 0x0038);
static_assert(offsetof(USkeletalMeshLODSettings, MaxNumOptionalLODs) == 0x003C);
static_assert(offsetof(USkeletalMeshLODSettings, LODGroups) == 0x0040);
static_assert(offsetof(USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName) == 0x0038);
static_assert(offsetof(USkeletalMeshSocket, SocketName) == 0x0028);
static_assert(offsetof(USkeletalMeshSocket, BoneName) == 0x0030);
static_assert(offsetof(USkeletalMeshSocket, RelativeLocation) == 0x0038);
static_assert(offsetof(USkeletalMeshSocket, RelativeRotation) == 0x0044);
static_assert(offsetof(USkeletalMeshSocket, RelativeScale) == 0x0050);
static_assert(offsetof(USkyAtmosphereComponent, TransformMode) == 0x0260);
static_assert(offsetof(USkyAtmosphereComponent, GroundAlbedo) == 0x0268);
static_assert(offsetof(USkyAtmosphereComponent, RayleighScattering) == 0x027C);
static_assert(offsetof(USkyAtmosphereComponent, MieScattering) == 0x0294);
static_assert(offsetof(USkyAtmosphereComponent, MieAbsorption) == 0x02A8);
static_assert(offsetof(USkyAtmosphereComponent, OtherAbsorption) == 0x02C4);
static_assert(offsetof(USkyAtmosphereComponent, OtherTentDistribution) == 0x02D4);
static_assert(offsetof(USkyAtmosphereComponent, SkyLuminanceFactor) == 0x02E0);
static_assert(offsetof(USkyAtmosphereComponent, bStaticLightingBuiltGUID) == 0x0324);
static_assert(offsetof(ASkyAtmosphere, SkyAtmosphereComponent) == 0x02C8);
static_assert(offsetof(USkyLightComponent, SourceType) == 0x02C1);
static_assert(offsetof(USkyLightComponent, Cubemap) == 0x02C8);
static_assert(offsetof(USkyLightComponent, DynamicCubemap) == 0x02D0);
static_assert(offsetof(USkyLightComponent, LowerHemisphereColor) == 0x02E8);
static_assert(offsetof(USkyLightComponent, OcclusionTint) == 0x0308);
static_assert(offsetof(USkyLightComponent, OcclusionCombineMode) == 0x0320);
static_assert(offsetof(USkyLightComponent, BlendDestinationCubemap) == 0x03D8);
static_assert(offsetof(USlateBrushAsset, Brush) == 0x0028);
static_assert(offsetof(FSlateBrushResourceInfo, Default) == 0x0000);
static_assert(offsetof(FSlateBrushResourceInfo, StanardKeyboard) == 0x0008);
static_assert(offsetof(FSlateBrushResourceInfo, AZERTYKeyboard) == 0x0010);
static_assert(offsetof(FSlateBrushResourceInfo, StanardGamepad) == 0x0018);
static_assert(offsetof(FSlateBrushResourceInfo, PS4) == 0x0020);
static_assert(offsetof(FSlateBrushResourceInfo, PS5) == 0x0028);
static_assert(offsetof(FSlateBrushResourceInfo, XBox) == 0x0030);
static_assert(offsetof(USlateBrushResourceAsset, actions) == 0x0030);
static_assert(offsetof(USoundAttenuation, Attenuation) == 0x0028);
static_assert(offsetof(FSoundClassProperties, ModulationSettings) == 0x0030);
static_assert(offsetof(FSoundClassProperties, OutputTarget) == 0x0070);
static_assert(offsetof(FSoundClassProperties, LoadingBehavior) == 0x0071);
static_assert(offsetof(FSoundClassProperties, DefaultSubmix) == 0x0078);
static_assert(offsetof(FSoundClassProperties, DefaultSubmixBase) == 0x0080);
static_assert(offsetof(FSoundClassProperties, AttenuationOverride) == 0x0088);
static_assert(offsetof(FPassiveSoundMixModifier, SoundMix) == 0x0000);
static_assert(offsetof(USoundClass, Properties) == 0x0028);
static_assert(offsetof(USoundClass, ChildClasses) == 0x00B8);
static_assert(offsetof(USoundClass, PassiveSoundMixModifiers) == 0x00C8);
static_assert(offsetof(USoundClass, ParentClass) == 0x00D8);
static_assert(offsetof(USoundConcurrency, Concurrency) == 0x0028);
static_assert(offsetof(USoundCue, FirstNode) == 0x01C0);
static_assert(offsetof(USoundCue, AttenuationOverrides) == 0x01D0);
static_assert(offsetof(FSourceEffectChainEntry, Preset) == 0x0000);
static_assert(offsetof(USoundEffectSourcePresetChain, Chain) == 0x0028);
static_assert(offsetof(FSoundGroup, SoundGroup) == 0x0000);
static_assert(offsetof(FSoundGroup, DisplayName) == 0x0008);
static_assert(offsetof(USoundGroups, SoundGroupProfiles) == 0x0028);
static_assert(offsetof(FSoundClassAdjuster, SoundClassObject) == 0x0000);
static_assert(offsetof(USoundMix, EQSettings) == 0x0030);
static_assert(offsetof(USoundMix, SoundClassEffects) == 0x0070);
static_assert(offsetof(USoundNodeAttenuation, AttenuationSettings) == 0x0048);
static_assert(offsetof(USoundNodeAttenuation, AttenuationOverrides) == 0x0050);
static_assert(offsetof(USoundNodeBranch, BoolParameterName) == 0x0048);
static_assert(offsetof(USoundNodeConcatenator, InputVolume) == 0x0048);
static_assert(offsetof(FDialogueWaveParameter, DialogueWave) == 0x0000);
static_assert(offsetof(FDialogueWaveParameter, Context) == 0x0008);
static_assert(offsetof(USoundNodeDialoguePlayer, DialogueWaveParameter) == 0x0048);
static_assert(offsetof(USoundNodeDistanceCrossFade, CrossFadeInput) == 0x0048);
static_assert(offsetof(USoundNodeEnveloper, VolumeInterpCurve) == 0x0060);
static_assert(offsetof(USoundNodeEnveloper, PitchInterpCurve) == 0x0068);
static_assert(offsetof(USoundNodeEnveloper, VolumeCurve) == 0x0070);
static_assert(offsetof(USoundNodeEnveloper, PitchCurve) == 0x00F8);
static_assert(offsetof(USoundNodeGroupControl, GroupSizes) == 0x0048);
static_assert(offsetof(USoundNodeMixer, InputVolume) == 0x0048);
static_assert(offsetof(FModulatorContinuousParams, ParameterName) == 0x0000);
static_assert(offsetof(FModulatorContinuousParams, ParamMode) == 0x001C);
static_assert(offsetof(USoundNodeModulatorContinuous, PitchModulationParams) == 0x0048);
static_assert(offsetof(USoundNodeModulatorContinuous, VolumeModulationParams) == 0x0068);
static_assert(offsetof(USoundNodeParamCrossFade, ParamName) == 0x0058);
static_assert(offsetof(USoundNodeRandom, Weights) == 0x0048);
static_assert(offsetof(USoundNodeRandom, HasBeenUsed) == 0x0058);
static_assert(offsetof(USoundNodeSoundClass, SoundClassOverride) == 0x0048);
static_assert(offsetof(USoundNodeSwitch, IntParameterName) == 0x0048);
static_assert(offsetof(USoundNodeWaveParam, WaveParameterName) == 0x0048);
static_assert(offsetof(USoundNodeWavePlayer, SoundWaveAssetPtr) == 0x0048);
static_assert(offsetof(USoundNodeWavePlayer, SoundWave) == 0x0070);
static_assert(offsetof(USoundSourceBus, SourceBusChannels) == 0x0378);
static_assert(offsetof(USoundSourceBus, AudioBus) == 0x0380);
static_assert(offsetof(USoundSubmixBase, ChildSubmixes) == 0x0030);
static_assert(offsetof(USoundSubmixBase, FallbackSubmix) == 0x0040);
static_assert(offsetof(USoundSubmixWithParentBase, ParentSubmix) == 0x0050);
static_assert(offsetof(USoundSubmix, SubmixEffectChain) == 0x0060);
static_assert(offsetof(USoundSubmix, AmbisonicsPluginSettings) == 0x0070);
static_assert(offsetof(USoundSubmix, GainMode) == 0x0080);
static_assert(offsetof(USoundfieldSubmix, SoundfieldEncodingFormat) == 0x0058);
static_assert(offsetof(USoundfieldSubmix, EncodingSettings) == 0x0060);
static_assert(offsetof(USoundfieldSubmix, SoundfieldEffectChain) == 0x0068);
static_assert(offsetof(USoundfieldSubmix, EncodingSettingsClass) == 0x0078);
static_assert(offsetof(UEndpointSubmix, EndpointType) == 0x0050);
static_assert(offsetof(UEndpointSubmix, EndpointSettingsClass) == 0x0058);
static_assert(offsetof(UEndpointSubmix, EndpointSettings) == 0x0060);
static_assert(offsetof(USoundfieldEndpointSubmix, SoundfieldEndpointType) == 0x0050);
static_assert(offsetof(USoundfieldEndpointSubmix, EndpointSettingsClass) == 0x0058);
static_assert(offsetof(USoundfieldEndpointSubmix, EndpointSettings) == 0x0060);
static_assert(offsetof(USoundfieldEndpointSubmix, EncodingSettingsClass) == 0x0068);
static_assert(offsetof(USoundfieldEndpointSubmix, EncodingSettings) == 0x0070);
static_assert(offsetof(USoundfieldEndpointSubmix, SoundfieldEffectChain) == 0x0078);
static_assert(offsetof(ASphereReflectionCapture, DrawCaptureRadius) == 0x02D0);
static_assert(offsetof(USphereReflectionCaptureComponent, PreviewInfluenceRadius) == 0x02E0);
static_assert(offsetof(ASplineMeshActor, SplineMeshComponent) == 0x02C8);
static_assert(offsetof(FSplineMeshParams, StartPos) == 0x0000);
static_assert(offsetof(FSplineMeshParams, StartTangent) == 0x000C);
static_assert(offsetof(FSplineMeshParams, StartScale) == 0x0018);
static_assert(offsetof(FSplineMeshParams, StartOffset) == 0x0024);
static_assert(offsetof(FSplineMeshParams, EndPos) == 0x002C);
static_assert(offsetof(FSplineMeshParams, EndScale) == 0x0038);
static_assert(offsetof(FSplineMeshParams, EndTangent) == 0x0040);
static_assert(offsetof(FSplineMeshParams, EndOffset) == 0x0050);
static_assert(offsetof(USplineMeshComponent, SplineParams) == 0x05E8);
static_assert(offsetof(USplineMeshComponent, SplineUpDir) == 0x0640);
static_assert(offsetof(USplineMeshComponent, CachedMeshBodySetupGuid) == 0x0650);
static_assert(offsetof(USplineMeshComponent, BodySetup) == 0x0660);
static_assert(offsetof(USplineMeshComponent, ForwardAxis) == 0x066D);
static_assert(offsetof(FStaticMaterial, MaterialInterface) == 0x0000);
static_assert(offsetof(FStaticMaterial, MaterialSlotName) == 0x0008);
static_assert(offsetof(FStaticMaterial, ImportedMaterialSlotName) == 0x0010);
static_assert(offsetof(FStaticMaterial, UVChannelData) == 0x0018);
static_assert(offsetof(UStaticMesh, MinLOD) == 0x0088);
static_assert(offsetof(UStaticMesh, QualityGroup) == 0x008C);
static_assert(offsetof(UStaticMesh, StaticMaterials) == 0x0098);
static_assert(offsetof(UStaticMesh, BodySetup) == 0x00B8);
static_assert(offsetof(UStaticMesh, Sockets) == 0x00E8);
static_assert(offsetof(UStaticMesh, PositiveBoundsExtension) == 0x0108);
static_assert(offsetof(UStaticMesh, NegativeBoundsExtension) == 0x0114);
static_assert(offsetof(UStaticMesh, ExtendedBounds) == 0x0120);
static_assert(offsetof(UStaticMesh, AssetUserData) == 0x0160);
static_assert(offsetof(UStaticMesh, EditableMesh) == 0x0170);
static_assert(offsetof(UStaticMesh, NavCollision) == 0x0178);
static_assert(offsetof(UStaticMeshSocket, SocketName) == 0x0028);
static_assert(offsetof(UStaticMeshSocket, RelativeLocation) == 0x0030);
static_assert(offsetof(UStaticMeshSocket, RelativeRotation) == 0x003C);
static_assert(offsetof(UStaticMeshSocket, RelativeScale) == 0x0048);
static_assert(offsetof(UStaticMeshSocket, Tag) == 0x0058);
static_assert(offsetof(UStereoLayerShapeEquirect, LeftUVRect) == 0x0028);
static_assert(offsetof(UStereoLayerShapeEquirect, RightUVRect) == 0x003C);
static_assert(offsetof(UStereoLayerShapeEquirect, LeftScale) == 0x0050);
static_assert(offsetof(UStereoLayerShapeEquirect, RightScale) == 0x0058);
static_assert(offsetof(UStereoLayerShapeEquirect, LeftBias) == 0x0060);
static_assert(offsetof(UStereoLayerShapeEquirect, RightBias) == 0x0068);
static_assert(offsetof(FEquirectProps, LeftUVRect) == 0x0000);
static_assert(offsetof(FEquirectProps, RightUVRect) == 0x0014);
static_assert(offsetof(FEquirectProps, LeftScale) == 0x0028);
static_assert(offsetof(FEquirectProps, RightScale) == 0x0030);
static_assert(offsetof(FEquirectProps, LeftBias) == 0x0038);
static_assert(offsetof(FEquirectProps, RightBias) == 0x0040);
static_assert(offsetof(UStereoLayerComponent, Texture) == 0x0268);
static_assert(offsetof(UStereoLayerComponent, LeftTexture) == 0x0270);
static_assert(offsetof(UStereoLayerComponent, QuadSize) == 0x027C);
static_assert(offsetof(UStereoLayerComponent, UVRect) == 0x0284);
static_assert(offsetof(UStereoLayerComponent, EquirectProps) == 0x02A4);
static_assert(offsetof(UStereoLayerComponent, StereoLayerType) == 0x02EC);
static_assert(offsetof(UStereoLayerComponent, StereoLayerShape) == 0x02ED);
static_assert(offsetof(UStereoLayerComponent, Shape) == 0x02F0);
static_assert(offsetof(FSubsurfaceProfileStruct, SurfaceAlbedo) == 0x0000);
static_assert(offsetof(FSubsurfaceProfileStruct, MeanFreePathColor) == 0x0010);
static_assert(offsetof(FSubsurfaceProfileStruct, SubsurfaceColor) == 0x0030);
static_assert(offsetof(FSubsurfaceProfileStruct, FalloffColor) == 0x0040);
static_assert(offsetof(FSubsurfaceProfileStruct, BoundaryColorBleed) == 0x0050);
static_assert(offsetof(FSubsurfaceProfileStruct, TransmissionTintColor) == 0x007C);
static_assert(offsetof(USubsurfaceProfile, Settings) == 0x0028);
static_assert(offsetof(USubUVAnimation, SubUVTexture) == 0x0028);
static_assert(offsetof(USubUVAnimation, BoundingMode) == 0x0038);
static_assert(offsetof(USubUVAnimation, OpacitySourceMode) == 0x0039);
static_assert(offsetof(USystemTimeTimecodeProvider, FrameRate) == 0x0030);
static_assert(offsetof(UTextPropertyTestObject, DefaultedText) == 0x0028);
static_assert(offsetof(UTextPropertyTestObject, UndefaultedText) == 0x0040);
static_assert(offsetof(UTextPropertyTestObject, TransientText) == 0x0058);
static_assert(offsetof(ATextRenderActor, TextRender) == 0x02C8);
static_assert(offsetof(UTextRenderComponent, text) == 0x0538);
static_assert(offsetof(UTextRenderComponent, TextMaterial) == 0x0550);
static_assert(offsetof(UTextRenderComponent, Font) == 0x0558);
static_assert(offsetof(UTextRenderComponent, HorizontalAlignment) == 0x0560);
static_assert(offsetof(UTextRenderComponent, VerticalAlignment) == 0x0561);
static_assert(offsetof(UTextRenderComponent, TextRenderColor) == 0x0564);
static_assert(offsetof(UTexture2DArray, AddressX) == 0x0138);
static_assert(offsetof(UTexture2DArray, AddressY) == 0x0139);
static_assert(offsetof(UTexture2DArray, AddressZ) == 0x013A);
static_assert(offsetof(UTextureRenderTarget2DArray, ClearColor) == 0x00F4);
static_assert(offsetof(UTextureRenderTarget2DArray, OverrideFormat) == 0x0104);
static_assert(offsetof(UTextureRenderTargetCube, ClearColor) == 0x00EC);
static_assert(offsetof(UTextureRenderTargetCube, OverrideFormat) == 0x00FC);
static_assert(offsetof(UTextureRenderTargetVolume, ClearColor) == 0x00F4);
static_assert(offsetof(UTextureRenderTargetVolume, OverrideFormat) == 0x0104);
static_assert(offsetof(FTimelineVectorTrack, VectorCurve) == 0x0000);
static_assert(offsetof(FTimelineVectorTrack, TrackName) == 0x0018);
static_assert(offsetof(FTimelineVectorTrack, VectorPropertyName) == 0x0020);
static_assert(offsetof(FTimelineFloatTrack, FloatCurve) == 0x0000);
static_assert(offsetof(FTimelineFloatTrack, TrackName) == 0x0018);
static_assert(offsetof(FTimelineFloatTrack, FloatPropertyName) == 0x0020);
static_assert(offsetof(FTimelineLinearColorTrack, LinearColorCurve) == 0x0000);
static_assert(offsetof(FTimelineLinearColorTrack, TrackName) == 0x0018);
static_assert(offsetof(FTimelineLinearColorTrack, LinearColorPropertyName) == 0x0020);
static_assert(offsetof(FTimeline, LengthMode) == 0x0000);
static_assert(offsetof(FTimeline, Events) == 0x0010);
static_assert(offsetof(FTimeline, InterpVectors) == 0x0020);
static_assert(offsetof(FTimeline, InterpFloats) == 0x0030);
static_assert(offsetof(FTimeline, InterpLinearColors) == 0x0040);
static_assert(offsetof(FTimeline, PropertySetObject) == 0x0070);
static_assert(offsetof(FTimeline, DirectionPropertyName) == 0x0078);
static_assert(offsetof(UTimelineComponent, TheTimeline) == 0x00C0);
static_assert(offsetof(FTTTrackBase, TrackName) == 0x0008);
static_assert(offsetof(FTTEventTrack, FunctionName) == 0x0018);
static_assert(offsetof(FTTEventTrack, CurveKeys) == 0x0020);
static_assert(offsetof(FTTPropertyTrack, PropertyName) == 0x0018);
static_assert(offsetof(FTTFloatTrack, CurveFloat) == 0x0020);
static_assert(offsetof(FTTVectorTrack, CurveVector) == 0x0020);
static_assert(offsetof(FTTLinearColorTrack, CurveLinearColor) == 0x0020);
static_assert(offsetof(UTimelineTemplate, LengthMode) == 0x002C);
static_assert(offsetof(UTimelineTemplate, EventTracks) == 0x0030);
static_assert(offsetof(UTimelineTemplate, FloatTracks) == 0x0040);
static_assert(offsetof(UTimelineTemplate, VectorTracks) == 0x0050);
static_assert(offsetof(UTimelineTemplate, LinearColorTracks) == 0x0060);
static_assert(offsetof(UTimelineTemplate, MetaDataArray) == 0x0070);
static_assert(offsetof(UTimelineTemplate, TimelineGuid) == 0x0080);
static_assert(offsetof(UTimelineTemplate, VariableName) == 0x0090);
static_assert(offsetof(UTimelineTemplate, DirectionPropertyName) == 0x0098);
static_assert(offsetof(UTimelineTemplate, UpdateFunctionName) == 0x00A0);
static_assert(offsetof(UTimelineTemplate, FinishedFunctionName) == 0x00A8);
static_assert(offsetof(FTouchInputControl, image1) == 0x0000);
static_assert(offsetof(FTouchInputControl, Image2) == 0x0008);
static_assert(offsetof(FTouchInputControl, Center) == 0x0010);
static_assert(offsetof(FTouchInputControl, VisualSize) == 0x0018);
static_assert(offsetof(FTouchInputControl, ThumbSize) == 0x0020);
static_assert(offsetof(FTouchInputControl, InteractionSize) == 0x0028);
static_assert(offsetof(FTouchInputControl, InputScale) == 0x0030);
static_assert(offsetof(FTouchInputControl, MainInputKey) == 0x0038);
static_assert(offsetof(FTouchInputControl, AltInputKey) == 0x0050);
static_assert(offsetof(UTouchInterface, Controls) == 0x0028);
static_assert(offsetof(ATriggerBase, CollisionComponent) == 0x02C8);
static_assert(offsetof(UUserDefinedEnum, DisplayNameMap) == 0x0060);
static_assert(offsetof(UUserDefinedStruct, Status) == 0x00C0);
static_assert(offsetof(UUserDefinedStruct, Guid) == 0x00C4);
static_assert(offsetof(FHardwareCursorReference, CursorPath) == 0x0000);
static_assert(offsetof(FHardwareCursorReference, HotSpot) == 0x0008);
static_assert(offsetof(UUserInterfaceSettings, RenderFocusRule) == 0x0038);
static_assert(offsetof(UUserInterfaceSettings, DefaultCursor) == 0x00E0);
static_assert(offsetof(UUserInterfaceSettings, TextEditBeamCursor) == 0x00F8);
static_assert(offsetof(UUserInterfaceSettings, CrosshairsCursor) == 0x0110);
static_assert(offsetof(UUserInterfaceSettings, HandCursor) == 0x0128);
static_assert(offsetof(UUserInterfaceSettings, GrabHandCursor) == 0x0140);
static_assert(offsetof(UUserInterfaceSettings, GrabHandClosedCursor) == 0x0158);
static_assert(offsetof(UUserInterfaceSettings, SlashedCircleCursor) == 0x0170);
static_assert(offsetof(UUserInterfaceSettings, UIScaleRule) == 0x018C);
static_assert(offsetof(UUserInterfaceSettings, CustomScalingRuleClass) == 0x0190);
static_assert(offsetof(UUserInterfaceSettings, UIScaleCurve) == 0x01A8);
static_assert(offsetof(UUserInterfaceSettings, DesignScreenSize) == 0x0234);
static_assert(offsetof(UUserInterfaceSettings, CursorClasses) == 0x0240);
static_assert(offsetof(UUserInterfaceSettings, CustomScalingRuleClassInstance) == 0x0250);
static_assert(offsetof(UUserInterfaceSettings, CustomScalingRule) == 0x0258);
static_assert(offsetof(UVectorField, Bounds) == 0x0028);
static_assert(offsetof(UVectorFieldAnimated, Texture) == 0x0048);
static_assert(offsetof(UVectorFieldAnimated, ConstructionOp) == 0x0050);
static_assert(offsetof(UVectorFieldAnimated, NoiseField) == 0x0078);
static_assert(offsetof(UVectorFieldComponent, VectorField) == 0x0538);
static_assert(offsetof(AVectorFieldVolume, VectorFieldComponent) == 0x02C8);
static_assert(offsetof(UVirtualTexture2D, Settings) == 0x0108);
static_assert(offsetof(UVirtualTextureBuilder, Texture) == 0x0028);
static_assert(offsetof(UVirtualTexturePoolConfig, Pools) == 0x0030);
static_assert(offsetof(FVoiceSettings, ComponentToAttachTo) == 0x0000);
static_assert(offsetof(FVoiceSettings, AttenuationSettings) == 0x0008);
static_assert(offsetof(FVoiceSettings, SourceEffectChain) == 0x0010);
static_assert(offsetof(UVOIPTalker, Settings) == 0x00C0);
static_assert(offsetof(UVolumetricCloudComponent, GroundAlbedo) == 0x0274);
static_assert(offsetof(UVolumetricCloudComponent, Material) == 0x0278);
static_assert(offsetof(AVolumetricCloud, VolumetricCloudComponent) == 0x02C8);
static_assert(offsetof(AVolumetricLightmapDensityVolume, AllowedMipLevelRange) == 0x0318);
static_assert(offsetof(AWindDirectionalSource, Component) == 0x02C8);
static_assert(offsetof(UWorldComposition, TilesStreaming) == 0x0050);
static_assert(offsetof(FMaterialProxySettings, TextureSize) == 0x0000);
static_assert(offsetof(FMaterialProxySettings, TextureSizingType) == 0x0028);
static_assert(offsetof(FMaterialProxySettings, MaterialMergeType) == 0x0029);
static_assert(offsetof(FMaterialProxySettings, BlendMode) == 0x002A);
static_assert(offsetof(FMaterialProxySettings, DiffuseTextureSize) == 0x0030);
static_assert(offsetof(FMaterialProxySettings, NormalTextureSize) == 0x0038);
static_assert(offsetof(FMaterialProxySettings, TangentTextureSize) == 0x0040);
static_assert(offsetof(FMaterialProxySettings, MetallicTextureSize) == 0x0048);
static_assert(offsetof(FMaterialProxySettings, RoughnessTextureSize) == 0x0050);
static_assert(offsetof(FMaterialProxySettings, AnisotropyTextureSize) == 0x0058);
static_assert(offsetof(FMaterialProxySettings, SpecularTextureSize) == 0x0060);
static_assert(offsetof(FMaterialProxySettings, EmissiveTextureSize) == 0x0068);
static_assert(offsetof(FMaterialProxySettings, OpacityTextureSize) == 0x0070);
static_assert(offsetof(FMaterialProxySettings, OpacityMaskTextureSize) == 0x0078);
static_assert(offsetof(FMaterialProxySettings, AmbientOcclusionTextureSize) == 0x0080);
static_assert(offsetof(FMeshProxySettings, MaterialSettings) == 0x0008);
static_assert(offsetof(FMeshProxySettings, UnresolvedGeometryColor) == 0x0094);
static_assert(offsetof(FMeshProxySettings, NormalCalculationMethod) == 0x00A4);
static_assert(offsetof(FMeshProxySettings, LandscapeCullingPrecision) == 0x00A5);
static_assert(offsetof(FMeshMergingSettings, OutputUVs) == 0x0004);
static_assert(offsetof(FMeshMergingSettings, MaterialSettings) == 0x000C);
static_assert(offsetof(FMeshMergingSettings, LODSelectionType) == 0x009C);
static_assert(offsetof(FHierarchicalSimplification, ProxySetting) == 0x000C);
static_assert(offsetof(FHierarchicalSimplification, MergeSetting) == 0x00B4);
static_assert(offsetof(UHierarchicalLODSetup, HierarchicalLODSetup) == 0x0028);
static_assert(offsetof(UHierarchicalLODSetup, OverrideBaseMaterial) == 0x0038);
static_assert(offsetof(FSBEnvControlSettings, Origin) == 0x0004);
static_assert(offsetof(FSBEnvControlSettings, VolumeActor) == 0x0018);
static_assert(offsetof(FSBEnvControlSettings, DataPtr) == 0x0020);
static_assert(offsetof(FSBEnvControlSettings, BlendPPSettings) == 0x0028);
static_assert(offsetof(FSBEnvControlSettings, BlendPPSettingsWeight) == 0x0038);
static_assert(offsetof(FSBEnvControlSettings, Direction_Sun) == 0x004C);
static_assert(offsetof(FSBEnvControlSettings, Color_Sun) == 0x005C);
static_assert(offsetof(FSBEnvControlSettings, LightShaftOverrideDirection) == 0x00A4);
static_assert(offsetof(FSBEnvControlSettings, BloomTint) == 0x0118);
static_assert(offsetof(FSBEnvControlSettings, LightFunctionMaterial) == 0x0138);
static_assert(offsetof(FSBEnvControlSettings, LightFunctionScale) == 0x0140);
static_assert(offsetof(FSBEnvControlSettings, Color_SkyLight) == 0x0158);
static_assert(offsetof(FSBEnvControlSettings, LowerHemisphereColor_SkyLight) == 0x016C);
static_assert(offsetof(FSBEnvControlSettings, OcclusionTint) == 0x01A4);
static_assert(offsetof(FSBEnvControlSettings, OverrideSkyLightCubeMap) == 0x01B8);
static_assert(offsetof(FSBEnvControlSettings, Color_Character) == 0x01C4);
static_assert(offsetof(FSBEnvControlSettings, Color_CharacterSub) == 0x01F8);
static_assert(offsetof(FSBEnvControlSettings, SecondFogData) == 0x0244);
static_assert(offsetof(FSBEnvControlSettings, FogInscatteringColor) == 0x0254);
static_assert(offsetof(FSBEnvControlSettings, OverrideFogInscatteringColorCubemap) == 0x0268);
static_assert(offsetof(FSBEnvControlSettings, OverrideFogInscatteringCubeTextureTint) == 0x0270);
static_assert(offsetof(FSBEnvControlSettings, DirectionalInscatteringColor) == 0x02AC);
static_assert(offsetof(FSBEnvControlSettings, VolumetricFogAlbedo) == 0x02C8);
static_assert(offsetof(FSBEnvControlSettings, VolumetricFogEmissive) == 0x02D0);
static_assert(offsetof(FSBEnvControlSettings, TransformMode) == 0x02F9);
static_assert(offsetof(FSBEnvControlSettings, SkyAtmosphereCenter) == 0x02FC);
static_assert(offsetof(FSBEnvControlSettings, GroundAlbedo) == 0x0314);
static_assert(offsetof(FSBEnvControlSettings, RayleighScattering) == 0x0334);
static_assert(offsetof(FSBEnvControlSettings, MieScattering) == 0x0358);
static_assert(offsetof(FSBEnvControlSettings, MieAbsorption) == 0x0374);
static_assert(offsetof(FSBEnvControlSettings, OtherAbsorption) == 0x03A0);
static_assert(offsetof(FSBEnvControlSettings, OtherTentDistribution) == 0x03B4);
static_assert(offsetof(FSBEnvControlSettings, SkyLuminanceFactor) == 0x03C4);
static_assert(offsetof(FSBEnvControlSettings, Color_Cloud) == 0x03F0);
static_assert(offsetof(FSBEnvControlSettings, Color_VolumeCloudTop) == 0x0404);
static_assert(offsetof(FSBEnvControlSettings, Color_VolumeCloudBottom) == 0x0418);
static_assert(offsetof(FSBEnvControlSettings, PostProcessData) == 0x0430);
static_assert(offsetof(FSBEnvControlSettings, GlobalMaterialScalarParameterMap) == 0x09D8);
static_assert(offsetof(FSBEnvControlSettings, GlobalMaterialVectorParameterMap) == 0x0A30);
static_assert(offsetof(FSBEnvControlSettings, GlobalNiagaraParameterScalarMap) == 0x0A88);
static_assert(offsetof(FSBEnvControlSettings, GlobalNiagaraParameterVectorMap) == 0x0AE0);
static_assert(offsetof(FNetViewer, Connection) == 0x0000);
static_assert(offsetof(FNetViewer, InViewer) == 0x0008);
static_assert(offsetof(FNetViewer, ViewTarget) == 0x0010);
static_assert(offsetof(FNetViewer, ViewLocation) == 0x0018);
static_assert(offsetof(FNetViewer, ViewDir) == 0x0024);
static_assert(offsetof(AWorldSettings, VisibilityAggressiveness) == 0x02D4);
static_assert(offsetof(AWorldSettings, WorldEnvControlSettings) == 0x02E0);
static_assert(offsetof(AWorldSettings, WaterPostProcessSetting) == 0x0320);
static_assert(offsetof(AWorldSettings, BaseEnvPostProcess) == 0x08D0);
static_assert(offsetof(AWorldSettings, HighContrastPostProcessSetting) == 0x0E80);
static_assert(offsetof(AWorldSettings, NavigationSystemConfig) == 0x1F60);
static_assert(offsetof(AWorldSettings, NavigationSystemConfigOverride) == 0x1F68);
static_assert(offsetof(AWorldSettings, KillZDamageType) == 0x1F78);
static_assert(offsetof(AWorldSettings, DefaultPhysicsVolumeClass) == 0x1F88);
static_assert(offsetof(AWorldSettings, PhysicsCollisionHandlerClass) == 0x1F90);
static_assert(offsetof(AWorldSettings, DefaultGameMode) == 0x1F98);
static_assert(offsetof(AWorldSettings, GameNetworkManagerClass) == 0x1FA0);
static_assert(offsetof(AWorldSettings, DefaultColorScale) == 0x1FAC);
static_assert(offsetof(AWorldSettings, DefaultReverbSettings) == 0x1FC8);
static_assert(offsetof(AWorldSettings, DefaultAmbientZoneSettings) == 0x1FE8);
static_assert(offsetof(AWorldSettings, DefaultBaseSoundMix) == 0x2010);
static_assert(offsetof(AWorldSettings, BroadphaseSettings) == 0x2044);
static_assert(offsetof(AWorldSettings, Pauser) == 0x2088);
static_assert(offsetof(AWorldSettings, ReplicationViewers) == 0x2090);
static_assert(offsetof(AWorldSettings, AssetUserData) == 0x20A0);
static_assert(offsetof(AWorldSettings, PauserPlayerState) == 0x20B0);
static_assert(offsetof(AWorldSettings, DefaultBookmarkClass) == 0x20D0);
static_assert(offsetof(AWorldSettings, BookmarkArray) == 0x20D8);
static_assert(offsetof(AWorldSettings, LastBookmarkClass) == 0x20E8);
static_assert(offsetof(FVectorDistribution, Table) == 0x0000);
static_assert(offsetof(FVector4Distribution, Table) == 0x0000);
static_assert(offsetof(FFormatArgumentData, ArgumentName) == 0x0000);
static_assert(offsetof(FFormatArgumentData, ArgumentValueType) == 0x0010);
static_assert(offsetof(FFormatArgumentData, ArgumentValue) == 0x0018);
static_assert(offsetof(FFormatArgumentData, ArgumentValueGender) == 0x0038);
static_assert(offsetof(FExpressionOutput, OutputName) == 0x0000);
static_assert(offsetof(FPlatformInterfaceData, DataName) == 0x0000);
static_assert(offsetof(FPlatformInterfaceData, Type) == 0x0008);
static_assert(offsetof(FPlatformInterfaceData, StringValue) == 0x0018);
static_assert(offsetof(FPlatformInterfaceData, ObjectValue) == 0x0028);
static_assert(offsetof(FPlatformInterfaceDelegateResult, Data) == 0x0008);
static_assert(offsetof(FDebugFloatHistory, Samples) == 0x0000);
static_assert(offsetof(FLatentActionInfo, ExecutionFunction) == 0x0008);
static_assert(offsetof(FLatentActionInfo, CallbackTarget) == 0x0010);
static_assert(offsetof(FCollisionProfileName, Name) == 0x0000);
static_assert(offsetof(FUserActivity, ActionName) == 0x0000);
static_assert(offsetof(FInputScaleBiasClamp, InRange) == 0x0004);
static_assert(offsetof(FInputScaleBiasClamp, OutRange) == 0x000C);
static_assert(offsetof(FInputAlphaBoolBlend, BlendOption) == 0x0008);
static_assert(offsetof(FInputAlphaBoolBlend, CustomCurve) == 0x0010);
static_assert(offsetof(FInputAlphaBoolBlend, AlphaBlend) == 0x0018);
static_assert(offsetof(FAnimNode_AssetPlayerBase, GroupName) == 0x0010);
static_assert(offsetof(FAnimNode_AssetPlayerBase, GroupRole) == 0x0018);
static_assert(offsetof(FAnimNode_AssetPlayerBase, GroupScope) == 0x0019);
static_assert(offsetof(FBlendSampleData, Animation) == 0x0008);
static_assert(offsetof(FAnimNode_SequencePlayer, Sequence) == 0x0040);
static_assert(offsetof(FAnimNode_SequencePlayer, PlayRateScaleBiasClamp) == 0x0050);
static_assert(offsetof(FDataTableRowHandle, DataTable) == 0x0000);
static_assert(offsetof(FDataTableRowHandle, RowName) == 0x0008);
static_assert(offsetof(FAnimNode_CustomProperty, SourcePropertyNames) == 0x0010);
static_assert(offsetof(FAnimNode_CustomProperty, DestPropertyNames) == 0x0020);
static_assert(offsetof(FAnimNode_CustomProperty, TargetInstance) == 0x0030);
static_assert(offsetof(FComponentReference, OtherActor) == 0x0000);
static_assert(offsetof(FComponentReference, ComponentProperty) == 0x0008);
static_assert(offsetof(FComponentReference, PathToComponent) == 0x0010);
static_assert(offsetof(FQuartzPulseOverrideStep, PulseDuration) == 0x0004);
static_assert(offsetof(FQuartzTimeSignature, BeatType) == 0x0004);
static_assert(offsetof(FQuartzTimeSignature, OptionalPulseOverride) == 0x0008);
static_assert(offsetof(FQuartzClockSettings, TimeSignature) == 0x0000);
static_assert(offsetof(FPoseSnapshot, LocalTransforms) == 0x0000);
static_assert(offsetof(FPoseSnapshot, BoneNames) == 0x0010);
static_assert(offsetof(FPoseSnapshot, ActiveMorphTargets) == 0x0020);
static_assert(offsetof(FPoseSnapshot, MorphTargetWeights) == 0x0030);
static_assert(offsetof(FPoseSnapshot, SkeletalMeshName) == 0x0040);
static_assert(offsetof(FPoseSnapshot, SnapshotName) == 0x0048);
static_assert(offsetof(FActorComponentInstanceData, SourceComponentTemplate) == 0x0008);
static_assert(offsetof(FActorComponentInstanceData, SourceComponentCreationMethod) == 0x0010);
static_assert(offsetof(FActorComponentInstanceData, SavedProperties) == 0x0018);
static_assert(offsetof(FActorComponentInstanceData, UniqueTransientPackage) == 0x0028);
static_assert(offsetof(FActorComponentInstanceData, DuplicatedObjects) == 0x0038);
static_assert(offsetof(FActorComponentInstanceData, ReferencedObjects) == 0x0048);
static_assert(offsetof(FActorComponentInstanceData, ReferencedNames) == 0x0058);
static_assert(offsetof(FSceneComponentInstanceData, AttachedInstanceComponents) == 0x0068);
static_assert(offsetof(FAnimNode_Root, Result) == 0x0010);
static_assert(offsetof(FAnimNode_Root, Name) == 0x0020);
static_assert(offsetof(FAnimNode_Root, Group) == 0x0028);
static_assert(offsetof(FAnimCurveParam, Name) == 0x0000);
static_assert(offsetof(FAnimationGroupReference, GroupName) == 0x0000);
static_assert(offsetof(FAnimationGroupReference, GroupRole) == 0x0008);
static_assert(offsetof(FAnimationGroupReference, GroupScope) == 0x0009);
static_assert(offsetof(FAnimTickRecord, SourceAsset) == 0x0000);
static_assert(offsetof(FMarkerSyncAnimPosition, PreviousMarkerName) == 0x0000);
static_assert(offsetof(FMarkerSyncAnimPosition, NextMarkerName) == 0x0008);
static_assert(offsetof(FAnimationRecordingSettings, InterpMode) == 0x000C);
static_assert(offsetof(FAnimationRecordingSettings, TangentMode) == 0x000D);
static_assert(offsetof(FComponentSpacePose, Transforms) == 0x0000);
static_assert(offsetof(FComponentSpacePose, Names) == 0x0010);
static_assert(offsetof(FLocalSpacePose, Transforms) == 0x0000);
static_assert(offsetof(FLocalSpacePose, Names) == 0x0010);
static_assert(offsetof(FNamedTransform, Value) == 0x0000);
static_assert(offsetof(FNamedTransform, Name) == 0x0030);
static_assert(offsetof(FNamedColor, Value) == 0x0000);
static_assert(offsetof(FNamedColor, Name) == 0x0004);
static_assert(offsetof(FNamedVector, Value) == 0x0000);
static_assert(offsetof(FNamedVector, Name) == 0x000C);
static_assert(offsetof(FNamedFloat, Name) == 0x0004);
static_assert(offsetof(FAnimParentNodeAssetOverride, NewAsset) == 0x0000);
static_assert(offsetof(FAnimParentNodeAssetOverride, ParentNodeGuid) == 0x0008);
static_assert(offsetof(FRootMotionExtractionStep, AnimSequence) == 0x0000);
static_assert(offsetof(FVectorCurve, FloatCurves) == 0x0018);
static_assert(offsetof(FTransformCurve, TranslationCurve) == 0x0018);
static_assert(offsetof(FTransformCurve, RotationCurve) == 0x01B0);
static_assert(offsetof(FTransformCurve, ScaleCurve) == 0x0348);
static_assert(offsetof(FSlotEvaluationPose, AdditiveType) == 0x0000);
static_assert(offsetof(FA2Pose, Bones) == 0x0000);
static_assert(offsetof(FA2CSPose, ComponentSpaceFlags) == 0x0018);
static_assert(offsetof(FQueuedDrawDebugItem, ItemType) == 0x0000);
static_assert(offsetof(FQueuedDrawDebugItem, StartLoc) == 0x0004);
static_assert(offsetof(FQueuedDrawDebugItem, EndLoc) == 0x0010);
static_assert(offsetof(FQueuedDrawDebugItem, Center) == 0x001C);
static_assert(offsetof(FQueuedDrawDebugItem, Rotation) == 0x0028);
static_assert(offsetof(FQueuedDrawDebugItem, Color) == 0x0040);
static_assert(offsetof(FQueuedDrawDebugItem, Message) == 0x0050);
static_assert(offsetof(FQueuedDrawDebugItem, TextScale) == 0x0060);
static_assert(offsetof(FAnimMontageInstance, Montage) == 0x0000);
static_assert(offsetof(FAnimMontageInstance, NextSections) == 0x00E8);
static_assert(offsetof(FAnimMontageInstance, PrevSections) == 0x00F8);
static_assert(offsetof(FAnimMontageInstance, ActiveStateBranchingPoints) == 0x0118);
static_assert(offsetof(FAnimMontageInstance, Blend) == 0x0130);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, Base) == 0x0010);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, Additive) == 0x0020);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType) == 0x0030);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend) == 0x0040);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName) == 0x0088);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias) == 0x0090);
static_assert(offsetof(FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp) == 0x0098);
static_assert(offsetof(FAnimNode_Inertialization, Source) == 0x0010);
static_assert(offsetof(FAnimNode_LinkedAnimGraph, InputPoses) == 0x0058);
static_assert(offsetof(FAnimNode_LinkedAnimGraph, InputPoseNames) == 0x0068);
static_assert(offsetof(FAnimNode_LinkedAnimGraph, InstanceClass) == 0x0078);
static_assert(offsetof(FAnimNode_LinkedAnimGraph, Tag) == 0x0080);
static_assert(offsetof(FAnimNode_LinkedAnimLayer, Interface) == 0x00A0);
static_assert(offsetof(FAnimNode_LinkedAnimLayer, Layer) == 0x00A8);
static_assert(offsetof(FAnimNode_LinkedInputPose, Name) == 0x0010);
static_assert(offsetof(FAnimNode_LinkedInputPose, graph) == 0x0018);
static_assert(offsetof(FAnimNode_LinkedInputPose, InputPose) == 0x0020);
static_assert(offsetof(FAnimNode_SaveCachedPose, Pose) == 0x0010);
static_assert(offsetof(FAnimNode_SaveCachedPose, CachePoseName) == 0x0020);
static_assert(offsetof(FAnimationActiveTransitionEntry, BlendProfile) == 0x00B8);
static_assert(offsetof(FAnimNode_TransitionPoseEvaluator, DataSource) == 0x00F0);
static_assert(offsetof(FAnimNode_TransitionPoseEvaluator, EvaluatorMode) == 0x00F1);
static_assert(offsetof(FAnimNode_UseCachedPose, LinkToCachingNode) == 0x0010);
static_assert(offsetof(FAnimNode_UseCachedPose, CachePoseName) == 0x0020);
static_assert(offsetof(FAnimNode_ConvertLocalToComponentSpace, LocalPose) == 0x0010);
static_assert(offsetof(FAnimNode_ConvertComponentToLocalSpace, ComponentPose) == 0x0010);
static_assert(offsetof(FCompressedTrack, ByteStream) == 0x0000);
static_assert(offsetof(FCompressedTrack, Times) == 0x0010);
static_assert(offsetof(FCurveTrack, CurveName) == 0x0000);
static_assert(offsetof(FCurveTrack, CurveWeights) == 0x0008);
static_assert(offsetof(FScaleTrack, ScaleKeys) == 0x0000);
static_assert(offsetof(FScaleTrack, Times) == 0x0010);
static_assert(offsetof(FRotationTrack, RotKeys) == 0x0000);
static_assert(offsetof(FRotationTrack, Times) == 0x0010);
static_assert(offsetof(FTranslationTrack, PosKeys) == 0x0000);
static_assert(offsetof(FTranslationTrack, Times) == 0x0010);
static_assert(offsetof(FRawAnimSequenceTrack, PosKeys) == 0x0000);
static_assert(offsetof(FRawAnimSequenceTrack, RotKeys) == 0x0010);
static_assert(offsetof(FRawAnimSequenceTrack, ScaleKeys) == 0x0020);
static_assert(offsetof(FAnimSequenceTrackContainer, AnimationTracks) == 0x0000);
static_assert(offsetof(FAnimSequenceTrackContainer, TrackNames) == 0x0010);
static_assert(offsetof(FAnimNode_SingleNode, SourcePose) == 0x0010);
static_assert(offsetof(FAnimationTransitionRule, RuleToExecute) == 0x0000);
static_assert(offsetof(FAnimationState, Transitions) == 0x0008);
static_assert(offsetof(FAnimNotifyTrack, TrackName) == 0x0000);
static_assert(offsetof(FAnimNotifyTrack, TrackColor) == 0x0008);
static_assert(offsetof(FPerBoneBlendWeights, BoneBlendWeights) == 0x0000);
static_assert(offsetof(FGridBlendSample, GridElement) == 0x0000);
static_assert(offsetof(FBPEditorBookmarkNode, NodeGuid) == 0x0000);
static_assert(offsetof(FBPEditorBookmarkNode, ParentGuid) == 0x0010);
static_assert(offsetof(FBPEditorBookmarkNode, DisplayName) == 0x0020);
static_assert(offsetof(FEditedDocumentInfo, EditedObjectPath) == 0x0000);
static_assert(offsetof(FEditedDocumentInfo, SavedViewOffset) == 0x0018);
static_assert(offsetof(FEditedDocumentInfo, EditedObject) == 0x0028);
static_assert(offsetof(FBPInterfaceDescription, Interface) == 0x0000);
static_assert(offsetof(FBPInterfaceDescription, Graphs) == 0x0008);
static_assert(offsetof(FBPVariableDescription, VarName) == 0x0000);
static_assert(offsetof(FBPVariableDescription, VarGuid) == 0x0008);
static_assert(offsetof(FBPVariableDescription, VarType) == 0x0018);
static_assert(offsetof(FBPVariableDescription, FriendlyName) == 0x0070);
static_assert(offsetof(FBPVariableDescription, Category) == 0x0080);
static_assert(offsetof(FBPVariableDescription, RepNotifyFunc) == 0x00A0);
static_assert(offsetof(FBPVariableDescription, ReplicationCondition) == 0x00A8);
static_assert(offsetof(FBPVariableDescription, MetaDataArray) == 0x00B0);
static_assert(offsetof(FBPVariableDescription, DefaultValue) == 0x00C0);
static_assert(offsetof(FCompilerNativizationOptions, PlatformName) == 0x0000);
static_assert(offsetof(FCompilerNativizationOptions, ExcludedModules) == 0x0010);
static_assert(offsetof(FCompilerNativizationOptions, ExcludedFolderPaths) == 0x0070);
static_assert(offsetof(FEventGraphFastCallPair, FunctionToPatch) == 0x0000);
static_assert(offsetof(FCachedAnimTransitionData, StateMachineName) == 0x0000);
static_assert(offsetof(FCachedAnimTransitionData, FromStateName) == 0x0008);
static_assert(offsetof(FCachedAnimTransitionData, ToStateName) == 0x0010);
static_assert(offsetof(FCachedAnimRelevancyData, StateMachineName) == 0x0000);
static_assert(offsetof(FCachedAnimRelevancyData, StateName) == 0x0008);
static_assert(offsetof(FCachedAnimAssetPlayerData, StateMachineName) == 0x0000);
static_assert(offsetof(FCachedAnimAssetPlayerData, StateName) == 0x0008);
static_assert(offsetof(FCachedAnimStateData, StateMachineName) == 0x0000);
static_assert(offsetof(FCachedAnimStateData, StateName) == 0x0008);
static_assert(offsetof(FCachedAnimStateArray, States) == 0x0000);
static_assert(offsetof(FCameraShakeDuration, Type) == 0x0004);
static_assert(offsetof(FCameraShakeInfo, Duration) == 0x0000);
static_assert(offsetof(FCanvasIcon, Texture) == 0x0000);
static_assert(offsetof(FWrappedStringElement, Value) == 0x0000);
static_assert(offsetof(FWrappedStringElement, LineExtent) == 0x0010);
static_assert(offsetof(FTextSizingParameters, Scaling) == 0x0010);
static_assert(offsetof(FTextSizingParameters, DrawFont) == 0x0018);
static_assert(offsetof(FTextSizingParameters, SpacingAdjust) == 0x0020);
static_assert(offsetof(FChildActorAttachedActorInfo, Actor) == 0x0000);
static_assert(offsetof(FChildActorAttachedActorInfo, SocketName) == 0x0008);
static_assert(offsetof(FChildActorAttachedActorInfo, RelativeTransform) == 0x0010);
static_assert(offsetof(FChildActorComponentInstanceData, ChildActorClass) == 0x00B8);
static_assert(offsetof(FChildActorComponentInstanceData, ChildActorName) == 0x00C0);
static_assert(offsetof(FChildActorComponentInstanceData, AttachedActors) == 0x00C8);
static_assert(offsetof(FAutoCompleteNode, AutoCompleteListIndices) == 0x0008);
static_assert(offsetof(FRuntimeCurveLinearColor, ColorCurves) == 0x0000);
static_assert(offsetof(FRuntimeCurveLinearColor, ExternalCurve) == 0x0200);
static_assert(offsetof(FNamedCurveValue, Name) == 0x0000);
static_assert(offsetof(FCurveTableRowHandle, CurveTable) == 0x0000);
static_assert(offsetof(FCurveTableRowHandle, RowName) == 0x0008);
static_assert(offsetof(FCustomAttribute, Name) == 0x0000);
static_assert(offsetof(FCustomAttribute, Times) == 0x0010);
static_assert(offsetof(FCustomAttributePerBoneData, Attributes) == 0x0008);
static_assert(offsetof(FDataTableCategoryHandle, DataTable) == 0x0000);
static_assert(offsetof(FDataTableCategoryHandle, ColumnName) == 0x0008);
static_assert(offsetof(FDataTableCategoryHandle, RowContents) == 0x0010);
static_assert(offsetof(FGraphReference, MacroGraph) == 0x0000);
static_assert(offsetof(FGraphReference, GraphBlueprint) == 0x0008);
static_assert(offsetof(FGraphReference, GraphGuid) == 0x0010);
static_assert(offsetof(FEdGraphPinReference, OwningNode) == 0x0000);
static_assert(offsetof(FEdGraphPinReference, PinId) == 0x0008);
static_assert(offsetof(FEdGraphSchemaAction, MenuDescription) == 0x0008);
static_assert(offsetof(FEdGraphSchemaAction, TooltipDescription) == 0x0020);
static_assert(offsetof(FEdGraphSchemaAction, Category) == 0x0038);
static_assert(offsetof(FEdGraphSchemaAction, Keywords) == 0x0050);
static_assert(offsetof(FEdGraphSchemaAction, MenuDescriptionArray) == 0x0070);
static_assert(offsetof(FEdGraphSchemaAction, FullSearchTitlesArray) == 0x0080);
static_assert(offsetof(FEdGraphSchemaAction, FullSearchKeywordsArray) == 0x0090);
static_assert(offsetof(FEdGraphSchemaAction, FullSearchCategoryArray) == 0x00A0);
static_assert(offsetof(FEdGraphSchemaAction, LocalizedMenuDescriptionArray) == 0x00B0);
static_assert(offsetof(FEdGraphSchemaAction, LocalizedFullSearchTitlesArray) == 0x00C0);
static_assert(offsetof(FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray) == 0x00D0);
static_assert(offsetof(FEdGraphSchemaAction, LocalizedFullSearchCategoryArray) == 0x00E0);
static_assert(offsetof(FEdGraphSchemaAction, SearchText) == 0x00F0);
static_assert(offsetof(FEdGraphSchemaAction_NewNode, NodeTemplate) == 0x0100);
static_assert(offsetof(FScreenMessageString, ScreenMessage) == 0x0008);
static_assert(offsetof(FScreenMessageString, DisplayColor) == 0x0018);
static_assert(offsetof(FScreenMessageString, TextScale) == 0x0024);
static_assert(offsetof(FURL, Protocol) == 0x0000);
static_assert(offsetof(FURL, Host) == 0x0010);
static_assert(offsetof(FURL, Map) == 0x0028);
static_assert(offsetof(FURL, RedirectURL) == 0x0038);
static_assert(offsetof(FURL, Op) == 0x0048);
static_assert(offsetof(FURL, Portal) == 0x0058);
static_assert(offsetof(FFullyLoadedPackagesInfo, FullyLoadType) == 0x0000);
static_assert(offsetof(FFullyLoadedPackagesInfo, Tag) == 0x0008);
static_assert(offsetof(FFullyLoadedPackagesInfo, PackagesToLoad) == 0x0018);
static_assert(offsetof(FFullyLoadedPackagesInfo, LoadedObjects) == 0x0028);
static_assert(offsetof(FLevelStreamingStatus, PackageName) == 0x0000);
static_assert(offsetof(FNamedNetDriver, NetDriver) == 0x0000);
static_assert(offsetof(FWorldContext, LastURL) == 0x00D0);
static_assert(offsetof(FWorldContext, LastRemoteURL) == 0x0138);
static_assert(offsetof(FWorldContext, PendingNetGame) == 0x01A0);
static_assert(offsetof(FWorldContext, PackagesToFullyLoad) == 0x01A8);
static_assert(offsetof(FWorldContext, LoadedLevelsForPendingMapChange) == 0x01C8);
static_assert(offsetof(FWorldContext, ObjectReferencers) == 0x01F0);
static_assert(offsetof(FWorldContext, PendingLevelStreamingStatusUpdates) == 0x0200);
static_assert(offsetof(FWorldContext, GameViewport) == 0x0210);
static_assert(offsetof(FWorldContext, OwningGameInstance) == 0x0218);
static_assert(offsetof(FWorldContext, ActiveNetDrivers) == 0x0220);
static_assert(offsetof(FCanvasUVTri, V0_Pos) == 0x0000);
static_assert(offsetof(FCanvasUVTri, V0_UV) == 0x0008);
static_assert(offsetof(FCanvasUVTri, V0_Color) == 0x0010);
static_assert(offsetof(FCanvasUVTri, V1_Pos) == 0x0020);
static_assert(offsetof(FCanvasUVTri, V1_UV) == 0x0028);
static_assert(offsetof(FCanvasUVTri, V1_Color) == 0x0030);
static_assert(offsetof(FCanvasUVTri, V2_Pos) == 0x0040);
static_assert(offsetof(FCanvasUVTri, V2_UV) == 0x0048);
static_assert(offsetof(FCanvasUVTri, V2_Color) == 0x0050);
static_assert(offsetof(FDepthFieldGlowInfo, GlowColor) == 0x0004);
static_assert(offsetof(FDepthFieldGlowInfo, GlowOuterRadius) == 0x0014);
static_assert(offsetof(FDepthFieldGlowInfo, GlowInnerRadius) == 0x001C);
static_assert(offsetof(FFontRenderInfo, GlowInfo) == 0x0004);
static_assert(offsetof(FDamageEvent, DamageTypeClass) == 0x0008);
static_assert(offsetof(FRadialDamageEvent, Params) == 0x0010);
static_assert(offsetof(FRadialDamageEvent, Origin) == 0x0024);
static_assert(offsetof(FRadialDamageEvent, ComponentHits) == 0x0030);
static_assert(offsetof(FPointDamageEvent, ShotDirection) == 0x0014);
static_assert(offsetof(FPointDamageEvent, HitInfo) == 0x0020);
static_assert(offsetof(FMeshBuildSettings, BuildScale3D) == 0x0014);
static_assert(offsetof(FMeshBuildSettings, DistanceFieldReplacementMesh) == 0x0028);
static_assert(offsetof(FPOV, Location) == 0x0000);
static_assert(offsetof(FPOV, Rotation) == 0x000C);
static_assert(offsetof(FAnimUpdateRateParameters, ShiftBucket) == 0x0001);
static_assert(offsetof(FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds) == 0x0020);
static_assert(offsetof(FAnimUpdateRateParameters, LODToFrameSkipMap) == 0x0030);
static_assert(offsetof(FAnimSlotDesc, SlotName) == 0x0000);
static_assert(offsetof(FAnimSlotInfo, SlotName) == 0x0000);
static_assert(offsetof(FAnimSlotInfo, ChannelWeights) == 0x0008);
static_assert(offsetof(FMTDResult, Direction) == 0x0000);
static_assert(offsetof(FOverlapResult, Actor) == 0x0000);
static_assert(offsetof(FOverlapResult, Component) == 0x0008);
static_assert(offsetof(FBasedPosition, Base) == 0x0000);
static_assert(offsetof(FBasedPosition, position) == 0x0008);
static_assert(offsetof(FBasedPosition, CachedBaseLocation) == 0x0014);
static_assert(offsetof(FBasedPosition, CachedBaseRotation) == 0x0020);
static_assert(offsetof(FBasedPosition, CachedTransPosition) == 0x002C);
static_assert(offsetof(FFractureEffect, ParticleSystem) == 0x0000);
static_assert(offsetof(FFractureEffect, Sound) == 0x0008);
static_assert(offsetof(FRigidBodyContactInfo, ContactPosition) == 0x0000);
static_assert(offsetof(FRigidBodyContactInfo, ContactNormal) == 0x000C);
static_assert(offsetof(FRigidBodyContactInfo, PhysMaterial) == 0x0020);
static_assert(offsetof(FCollisionImpactData, ContactInfos) == 0x0000);
static_assert(offsetof(FCollisionImpactData, TotalNormalImpulse) == 0x0010);
static_assert(offsetof(FCollisionImpactData, TotalFrictionImpulse) == 0x001C);
static_assert(offsetof(FRigidBodyState, position) == 0x0000);
static_assert(offsetof(FRigidBodyState, Quaternion) == 0x0010);
static_assert(offsetof(FRigidBodyState, LinVel) == 0x0020);
static_assert(offsetof(FRigidBodyState, AngVel) == 0x002C);
static_assert(offsetof(FForceFeedbackParameters, Tag) == 0x0000);
static_assert(offsetof(FPredictProjectilePathPointData, Location) == 0x0000);
static_assert(offsetof(FPredictProjectilePathPointData, Velocity) == 0x000C);
static_assert(offsetof(FPredictProjectilePathResult, PathData) == 0x0000);
static_assert(offsetof(FPredictProjectilePathResult, LastTraceDestination) == 0x0010);
static_assert(offsetof(FPredictProjectilePathResult, HitResult) == 0x002C);
static_assert(offsetof(FPredictProjectilePathParams, StartLocation) == 0x0000);
static_assert(offsetof(FPredictProjectilePathParams, LaunchVelocity) == 0x000C);
static_assert(offsetof(FPredictProjectilePathParams, TraceChannel) == 0x0025);
static_assert(offsetof(FPredictProjectilePathParams, ActorsToIgnore) == 0x0038);
static_assert(offsetof(FPredictProjectilePathParams, DrawDebugType) == 0x0050);
static_assert(offsetof(FActiveHapticFeedbackEffect, HapticEffect) == 0x0000);
static_assert(offsetof(FClusterNode, BoundMin) == 0x0000);
static_assert(offsetof(FClusterNode, BoundMax) == 0x0010);
static_assert(offsetof(FClusterNode, MinInstanceScale) == 0x0028);
static_assert(offsetof(FClusterNode, MaxInstanceScale) == 0x0034);
static_assert(offsetof(FClusterNode_DEPRECATED, BoundMin) == 0x0000);
static_assert(offsetof(FClusterNode_DEPRECATED, BoundMax) == 0x0010);
static_assert(offsetof(FHLODISMComponentDesc, StaticMesh) == 0x0000);
static_assert(offsetof(FHLODISMComponentDesc, Material) == 0x0008);
static_assert(offsetof(FHLODISMComponentDesc, Instances) == 0x0010);
static_assert(offsetof(FImportanceTexture, Size) == 0x0000);
static_assert(offsetof(FImportanceTexture, MarginalCDF) == 0x0010);
static_assert(offsetof(FImportanceTexture, ConditionalCDF) == 0x0020);
static_assert(offsetof(FImportanceTexture, TextureData) == 0x0030);
static_assert(offsetof(FImportanceTexture, Texture) == 0x0040);
static_assert(offsetof(FImportanceTexture, Weighting) == 0x0048);
static_assert(offsetof(FInstancedStaticMeshLightMapInstanceData, Transform) == 0x0000);
static_assert(offsetof(FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds) == 0x0030);
static_assert(offsetof(FInstancedStaticMeshComponentInstanceData, StaticMesh) == 0x00B8);
static_assert(offsetof(FInstancedStaticMeshComponentInstanceData, CachedStaticLighting) == 0x00C0);
static_assert(offsetof(FInstancedStaticMeshComponentInstanceData, PerInstanceSMData) == 0x0100);
static_assert(offsetof(FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData) == 0x0110);
static_assert(offsetof(FInterpEdSelKey, Group) == 0x0000);
static_assert(offsetof(FInterpEdSelKey, Track) == 0x0008);
static_assert(offsetof(FCameraPreviewInfo, PawnClass) == 0x0000);
static_assert(offsetof(FCameraPreviewInfo, AnimSeq) == 0x0008);
static_assert(offsetof(FCameraPreviewInfo, Location) == 0x0010);
static_assert(offsetof(FCameraPreviewInfo, Rotation) == 0x001C);
static_assert(offsetof(FCameraPreviewInfo, PawnInst) == 0x0028);
static_assert(offsetof(FSubTrackGroup, GroupName) == 0x0000);
static_assert(offsetof(FSubTrackGroup, TrackIndices) == 0x0010);
static_assert(offsetof(FSupportedSubTrackInfo, SupportedClass) == 0x0000);
static_assert(offsetof(FSupportedSubTrackInfo, SubTrackName) == 0x0008);
static_assert(offsetof(FDrawToRenderTargetContext, RenderTarget) == 0x0000);
static_assert(offsetof(FLevelSimplificationDetails, StaticMeshMaterialSettings) == 0x0008);
static_assert(offsetof(FLevelSimplificationDetails, LandscapeMaterialSettings) == 0x0098);
static_assert(offsetof(FDynamicTextureInstance, Texture) == 0x0028);
static_assert(offsetof(FPrecomputedLightInstanceData, Transform) == 0x00C0);
static_assert(offsetof(FPrecomputedLightInstanceData, LightGuid) == 0x00F0);
static_assert(offsetof(FBatchedPoint, position) == 0x0000);
static_assert(offsetof(FBatchedPoint, Color) == 0x000C);
static_assert(offsetof(FBatchedLine, Start) == 0x0000);
static_assert(offsetof(FBatchedLine, End) == 0x000C);
static_assert(offsetof(FBatchedLine, Color) == 0x0018);
static_assert(offsetof(FClientReceiveData, LocalPC) == 0x0000);
static_assert(offsetof(FClientReceiveData, MessageType) == 0x0008);
static_assert(offsetof(FClientReceiveData, MessageString) == 0x0018);
static_assert(offsetof(FClientReceiveData, RelatedPlayerState) == 0x0028);
static_assert(offsetof(FClientReceiveData, RelatedPlayerState0) == 0x0030);
static_assert(offsetof(FClientReceiveData, OptionalObject) == 0x0038);
static_assert(offsetof(FParameterGroupData, GroupName) == 0x0000);
static_assert(offsetof(FParameterChannelNames, R) == 0x0000);
static_assert(offsetof(FParameterChannelNames, G) == 0x0018);
static_assert(offsetof(FParameterChannelNames, B) == 0x0030);
static_assert(offsetof(FParameterChannelNames, A) == 0x0048);
static_assert(offsetof(FFunctionExpressionOutput, ExpressionOutput) == 0x0000);
static_assert(offsetof(FFunctionExpressionOutput, ExpressionOutputId) == 0x0008);
static_assert(offsetof(FFunctionExpressionOutput, Output) == 0x0018);
static_assert(offsetof(FFunctionExpressionInput, ExpressionInput) == 0x0000);
static_assert(offsetof(FFunctionExpressionInput, ExpressionInputId) == 0x0008);
static_assert(offsetof(FFunctionExpressionInput, Input) == 0x0018);
static_assert(offsetof(FScalarParameterAtlasInstanceData, Curve) == 0x0008);
static_assert(offsetof(FScalarParameterAtlasInstanceData, Atlas) == 0x0030);
static_assert(offsetof(FMemberReference, MemberParent) == 0x0000);
static_assert(offsetof(FMemberReference, MemberScope) == 0x0008);
static_assert(offsetof(FMemberReference, MemberName) == 0x0018);
static_assert(offsetof(FMemberReference, MemberGuid) == 0x0020);
static_assert(offsetof(FMeshInstancingSettings, ActorClassToUse) == 0x0000);
static_assert(offsetof(FMeshInstancingSettings, MeshReplacementMethod) == 0x000C);
static_assert(offsetof(FMeshInstancingSettings, ISMComponentToUse) == 0x0010);
static_assert(offsetof(FMeshReductionSettings, SilhouetteImportance) == 0x001C);
static_assert(offsetof(FMeshReductionSettings, TextureImportance) == 0x001D);
static_assert(offsetof(FMeshReductionSettings, ShadingImportance) == 0x001E);
static_assert(offsetof(FMeshReductionSettings, TerminationCriterion) == 0x0020);
static_assert(offsetof(FMeshReductionSettings, VisibilityAggressiveness) == 0x0021);
static_assert(offsetof(FMeshReductionSettings, VertexColorImportance) == 0x0022);
static_assert(offsetof(FNameCurveKey, Value) == 0x0004);
static_assert(offsetof(FNameCurve, Keys) == 0x0068);
static_assert(offsetof(FNavDataConfig, Name) == 0x0030);
static_assert(offsetof(FNavDataConfig, Color) == 0x0038);
static_assert(offsetof(FNavDataConfig, DefaultQueryExtent) == 0x003C);
static_assert(offsetof(FNavDataConfig, NavigationDataClass) == 0x0048);
static_assert(offsetof(FNavDataConfig, NavDataClass) == 0x0050);
static_assert(offsetof(FFastArraySerializer, DeltaFlags) == 0x0100);
static_assert(offsetof(FParticleCurvePair, CurveName) == 0x0000);
static_assert(offsetof(FParticleCurvePair, CurveObject) == 0x0010);
static_assert(offsetof(FBeamTargetData, TargetName) == 0x0000);
static_assert(offsetof(FCameraFadeEntry, Guid) == 0x0000);
static_assert(offsetof(FCameraFadeEntry, FadeColor) == 0x0014);
static_assert(offsetof(FCameraFadeEntry, FadeAlpha) == 0x0028);
static_assert(offsetof(FViewTargetTransitionParams, BlendFunction) == 0x0004);
static_assert(offsetof(FUpdateLevelStreamingLevelStatus, PackageName) == 0x0000);
static_assert(offsetof(FPreviewAttachedObjectPair, AttachedObject) == 0x0000);
static_assert(offsetof(FPreviewAttachedObjectPair, Object) == 0x0028);
static_assert(offsetof(FPreviewAttachedObjectPair, AttachedTo) == 0x0030);
static_assert(offsetof(FPreviewAssetAttachContainer, AttachedObjects) == 0x0000);
static_assert(offsetof(FPrimitiveComponentInstanceData, ComponentTransform) == 0x00C0);
static_assert(offsetof(FPrimitiveComponentInstanceData, LODParent) == 0x00F8);
static_assert(offsetof(FSpriteCategoryInfo, Category) == 0x0000);
static_assert(offsetof(FSpriteCategoryInfo, DisplayName) == 0x0008);
static_assert(offsetof(FSpriteCategoryInfo, Description) == 0x0020);
static_assert(offsetof(FQuartzQuantizationBoundary, Quantization) == 0x0000);
static_assert(offsetof(FQuartzQuantizationBoundary, CountingReferencePoint) == 0x0008);
static_assert(offsetof(FLevelNameAndTime, LevelName) == 0x0000);
static_assert(offsetof(FRootMotionFinishVelocitySettings, Mode) == 0x0000);
static_assert(offsetof(FRootMotionFinishVelocitySettings, SetVelocity) == 0x0004);
static_assert(offsetof(FRootMotionSource, AccumulateMode) == 0x0014);
static_assert(offsetof(FRootMotionSource, InstanceName) == 0x0018);
static_assert(offsetof(FRootMotionSource, Status) == 0x0030);
static_assert(offsetof(FRootMotionSource, Settings) == 0x0031);
static_assert(offsetof(FRootMotionSource, RootMotionParams) == 0x0040);
static_assert(offsetof(FRootMotionSource, FinishVelocityParams) == 0x0080);
static_assert(offsetof(FRootMotionSource_JumpForce, Rotation) == 0x0098);
static_assert(offsetof(FRootMotionSource_JumpForce, PathOffsetCurve) == 0x00B0);
static_assert(offsetof(FRootMotionSource_JumpForce, TimeMappingCurve) == 0x00B8);
static_assert(offsetof(FRootMotionSource_MoveToDynamicForce, StartLocation) == 0x0098);
static_assert(offsetof(FRootMotionSource_MoveToDynamicForce, InitialTargetLocation) == 0x00A4);
static_assert(offsetof(FRootMotionSource_MoveToDynamicForce, TargetLocation) == 0x00B0);
static_assert(offsetof(FRootMotionSource_MoveToDynamicForce, PathOffsetCurve) == 0x00C0);
static_assert(offsetof(FRootMotionSource_MoveToDynamicForce, TimeMappingCurve) == 0x00C8);
static_assert(offsetof(FRootMotionSource_MoveToForce, StartLocation) == 0x0098);
static_assert(offsetof(FRootMotionSource_MoveToForce, TargetLocation) == 0x00A4);
static_assert(offsetof(FRootMotionSource_MoveToForce, PathOffsetCurve) == 0x00B8);
static_assert(offsetof(FRootMotionSource_RadialForce, Location) == 0x0098);
static_assert(offsetof(FRootMotionSource_RadialForce, LocationActor) == 0x00A8);
static_assert(offsetof(FRootMotionSource_RadialForce, StrengthDistanceFalloff) == 0x00C0);
static_assert(offsetof(FRootMotionSource_RadialForce, StrengthOverTime) == 0x00C8);
static_assert(offsetof(FRootMotionSource_RadialForce, FixedWorldDirection) == 0x00D4);
static_assert(offsetof(FRootMotionSource_ConstantForce, Force) == 0x0098);
static_assert(offsetof(FRootMotionSource_ConstantForce, StrengthOverTime) == 0x00A8);
static_assert(offsetof(FSBEnvControlSettingsExtraValue, CharacterLightColor) == 0x0004);
static_assert(offsetof(FCameraExposureSettings, Method) == 0x0000);
static_assert(offsetof(FCameraExposureSettings, BiasCurve) == 0x0020);
static_assert(offsetof(FCameraExposureSettings, MeterMask) == 0x0028);
static_assert(offsetof(FGaussianSumBloomSettings, Filter1Tint) == 0x0024);
static_assert(offsetof(FGaussianSumBloomSettings, Filter2Tint) == 0x0034);
static_assert(offsetof(FGaussianSumBloomSettings, Filter3Tint) == 0x0044);
static_assert(offsetof(FGaussianSumBloomSettings, Filter4Tint) == 0x0054);
static_assert(offsetof(FGaussianSumBloomSettings, Filter5Tint) == 0x0064);
static_assert(offsetof(FGaussianSumBloomSettings, Filter6Tint) == 0x0074);
static_assert(offsetof(FConvolutionBloomSettings, Texture) == 0x0000);
static_assert(offsetof(FConvolutionBloomSettings, CenterUV) == 0x000C);
static_assert(offsetof(FLensBloomSettings, GaussianSum) == 0x0000);
static_assert(offsetof(FLensBloomSettings, Convolution) == 0x0088);
static_assert(offsetof(FLensBloomSettings, Method) == 0x00B0);
static_assert(offsetof(FLensImperfectionSettings, DirtMask) == 0x0000);
static_assert(offsetof(FLensImperfectionSettings, DirtMaskTint) == 0x000C);
static_assert(offsetof(FLensSettings, Bloom) == 0x0000);
static_assert(offsetof(FLensSettings, Imperfections) == 0x00B8);
static_assert(offsetof(FColorGradePerRangeSettings, Saturation) == 0x0000);
static_assert(offsetof(FColorGradePerRangeSettings, Contrast) == 0x0010);
static_assert(offsetof(FColorGradePerRangeSettings, Gamma) == 0x0020);
static_assert(offsetof(FColorGradePerRangeSettings, Gain) == 0x0030);
static_assert(offsetof(FColorGradePerRangeSettings, Offset) == 0x0040);
static_assert(offsetof(FColorGradingSettings, Global) == 0x0000);
static_assert(offsetof(FColorGradingSettings, Shadows) == 0x0050);
static_assert(offsetof(FColorGradingSettings, Midtones) == 0x00A0);
static_assert(offsetof(FColorGradingSettings, Highlights) == 0x00F0);
static_assert(offsetof(FClothingAssetData_Legacy, AssetName) == 0x0000);
static_assert(offsetof(FClothingAssetData_Legacy, ApexFileName) == 0x0008);
static_assert(offsetof(FClothingAssetData_Legacy, PhysicsProperties) == 0x001C);
static_assert(offsetof(FSkeletalMeshClothBuildParams, TargetAsset) == 0x0000);
static_assert(offsetof(FSkeletalMeshClothBuildParams, AssetName) == 0x0010);
static_assert(offsetof(FSkeletalMeshClothBuildParams, PhysicsAsset) == 0x0030);
static_assert(offsetof(FBoneMirrorExport, BoneName) == 0x0000);
static_assert(offsetof(FBoneMirrorExport, SourceBoneName) == 0x0008);
static_assert(offsetof(FBoneMirrorExport, BoneFlipAxis) == 0x0010);
static_assert(offsetof(FNameMapping, NodeName) == 0x0000);
static_assert(offsetof(FNameMapping, BoneName) == 0x0008);
static_assert(offsetof(FRigConfiguration, Rig) == 0x0000);
static_assert(offsetof(FRigConfiguration, BoneMappingTable) == 0x0008);
static_assert(offsetof(FBoneReductionSetting, BonesToRemove) == 0x0000);
static_assert(offsetof(FReferencePose, PoseName) == 0x0000);
static_assert(offsetof(FReferencePose, ReferencePose) == 0x0008);
static_assert(offsetof(FSkeletonToMeshLinkup, SkeletonToMeshTable) == 0x0000);
static_assert(offsetof(FSkeletonToMeshLinkup, MeshToSkeletonTable) == 0x0010);
static_assert(offsetof(FPrecomputedSkyLightInstanceData, LightGuid) == 0x00B8);
static_assert(offsetof(FSoundWaveEnvelopeDataPerSound, SoundWave) == 0x0008);
static_assert(offsetof(FSoundWaveSpectralDataPerSound, SpectralData) == 0x0000);
static_assert(offsetof(FSoundWaveSpectralDataPerSound, SoundWave) == 0x0018);
static_assert(offsetof(FSplineInstanceData, SplineCurves) == 0x00C0);
static_assert(offsetof(FSplineInstanceData, SplineCurvesPreUCS) == 0x0130);
static_assert(offsetof(FSplinePoint, position) == 0x0004);
static_assert(offsetof(FSplinePoint, ArriveTangent) == 0x0010);
static_assert(offsetof(FSplinePoint, LeaveTangent) == 0x001C);
static_assert(offsetof(FSplinePoint, Rotation) == 0x0028);
static_assert(offsetof(FSplinePoint, Scale) == 0x0034);
static_assert(offsetof(FSplinePoint, Type) == 0x0040);
static_assert(offsetof(FSplineMeshInstanceData, StartPos) == 0x00B8);
static_assert(offsetof(FSplineMeshInstanceData, EndPos) == 0x00C4);
static_assert(offsetof(FSplineMeshInstanceData, StartTangent) == 0x00D0);
static_assert(offsetof(FSplineMeshInstanceData, EndTangent) == 0x00DC);
static_assert(offsetof(FMaterialRemapIndex, MaterialRemap) == 0x0008);
static_assert(offsetof(FAssetEditorOrbitCameraPosition, CamOrbitPoint) == 0x0004);
static_assert(offsetof(FAssetEditorOrbitCameraPosition, CamOrbitZoom) == 0x0010);
static_assert(offsetof(FAssetEditorOrbitCameraPosition, CamOrbitRotation) == 0x001C);
static_assert(offsetof(FMeshSectionInfoMap, Map) == 0x0000);
static_assert(offsetof(FStaticMeshSourceModel, BuildSettings) == 0x0000);
static_assert(offsetof(FStaticMeshSourceModel, ReductionSettings) == 0x0030);
static_assert(offsetof(FStaticMeshSourceModel, ScreenSize) == 0x0058);
static_assert(offsetof(FStaticMeshSourceModel, SourceImportFilename) == 0x0060);
static_assert(offsetof(FStaticMeshOptimizationSettings, ReductionMethod) == 0x0000);
static_assert(offsetof(FPaintedVertex, position) == 0x0000);
static_assert(offsetof(FPaintedVertex, Color) == 0x000C);
static_assert(offsetof(FPaintedVertex, Normal) == 0x0010);
static_assert(offsetof(FStaticMeshVertexColorLODData, PaintedVertices) == 0x0000);
static_assert(offsetof(FStaticMeshVertexColorLODData, VertexBufferColors) == 0x0010);
static_assert(offsetof(FStaticMeshComponentInstanceData, StaticMesh) == 0x0100);
static_assert(offsetof(FStaticMeshComponentInstanceData, VertexColorLODs) == 0x0108);
static_assert(offsetof(FStaticMeshComponentInstanceData, CachedStaticLighting) == 0x0118);
static_assert(offsetof(FStaticMeshComponentInstanceData, StreamingTextureData) == 0x0128);
static_assert(offsetof(FTextureFormatSettings, CompressionSettings) == 0x0000);
static_assert(offsetof(FStreamingRenderAssetPrimitiveInfo, RenderAsset) == 0x0000);
static_assert(offsetof(FStreamingRenderAssetPrimitiveInfo, Bounds) == 0x0008);
static_assert(offsetof(FUpdateLevelVisibilityLevelInfo, PackageName) == 0x0000);
static_assert(offsetof(FUpdateLevelVisibilityLevelInfo, Filename) == 0x0008);
static_assert(offsetof(FLevelViewportInfo, CamPosition) == 0x0000);
static_assert(offsetof(FLevelViewportInfo, CamRotation) == 0x000C);
static_assert(offsetof(FLightmassWorldInfoSettings, EnvironmentColor) == 0x0014);
static_assert(offsetof(FLightmassWorldInfoSettings, VolumeLightingMethod) == 0x0024);
static_assert(offsetof(FWidgetTransform, Translation) == 0x0000);
static_assert(offsetof(FWidgetTransform, Scale) == 0x0008);
static_assert(offsetof(FWidgetTransform, Shear) == 0x0010);
static_assert(offsetof(UWidget, Slot) == 0x0028);
static_assert(offsetof(UWidget, ToolTipText) == 0x0040);
static_assert(offsetof(UWidget, ToolTipWidget) == 0x0068);
static_assert(offsetof(UWidget, RenderTransform) == 0x0090);
static_assert(offsetof(UWidget, RenderTransformPivot) == 0x00AC);
static_assert(offsetof(UWidget, AccessibleWidgetData) == 0x00B8);
static_assert(offsetof(UWidget, Cursor) == 0x00C1);
static_assert(offsetof(UWidget, Clipping) == 0x00C2);
static_assert(offsetof(UWidget, Visibility) == 0x00C3);
static_assert(offsetof(UWidget, Navigation) == 0x00C8);
static_assert(offsetof(UWidget, FlowDirectionPreference) == 0x00D0);
static_assert(offsetof(UWidget, NativeBindings) == 0x00F8);
static_assert(offsetof(UPanelWidget, Slots) == 0x0108);
static_assert(offsetof(UPanelSlot, Parent) == 0x0028);
static_assert(offsetof(UPanelSlot, Content) == 0x0030);
static_assert(offsetof(FNamedSlotBinding, Name) == 0x0000);
static_assert(offsetof(FNamedSlotBinding, Content) == 0x0008);
static_assert(offsetof(FAnimationEventBinding, Animation) == 0x0000);
static_assert(offsetof(FAnimationEventBinding, AnimationEvent) == 0x0018);
static_assert(offsetof(FAnimationEventBinding, UserTag) == 0x001C);
static_assert(offsetof(UUserWidget, ViewportStandardSize) == 0x0120);
static_assert(offsetof(UUserWidget, ColorAndOpacity) == 0x0130);
static_assert(offsetof(UUserWidget, ForegroundColor) == 0x0150);
static_assert(offsetof(UUserWidget, Padding) == 0x01B0);
static_assert(offsetof(UUserWidget, ActiveSequencePlayers) == 0x01C0);
static_assert(offsetof(UUserWidget, AnimationTickManager) == 0x01D0);
static_assert(offsetof(UUserWidget, StoppedSequencePlayers) == 0x01D8);
static_assert(offsetof(UUserWidget, NamedSlotBindings) == 0x01E8);
static_assert(offsetof(UUserWidget, WidgetTree) == 0x01F8);
static_assert(offsetof(UUserWidget, TickFrequency) == 0x0210);
static_assert(offsetof(UUserWidget, InputComponent) == 0x0218);
static_assert(offsetof(UUserWidget, AnimationCallbacks) == 0x0220);
static_assert(offsetof(UComboBoxString, DefaultOptions) == 0x0108);
static_assert(offsetof(UComboBoxString, SelectedOption) == 0x0118);
static_assert(offsetof(UComboBoxString, WidgetStyle) == 0x0128);
static_assert(offsetof(UComboBoxString, ItemStyle) == 0x0548);
static_assert(offsetof(UComboBoxString, ContentPadding) == 0x0D80);
static_assert(offsetof(UComboBoxString, Font) == 0x0D98);
static_assert(offsetof(UComboBoxString, ForegroundColor) == 0x0DF8);
static_assert(offsetof(FUserWidgetPool, ActiveWidgets) == 0x0000);
static_assert(offsetof(FUserWidgetPool, InactiveWidgets) == 0x0010);
static_assert(offsetof(UListViewBase, EntryWidgetClass) == 0x0108);
static_assert(offsetof(UListViewBase, EntryWidgetPool) == 0x0140);
static_assert(offsetof(UListView, ScrollBarStyle) == 0x02D8);
static_assert(offsetof(UListView, ScrollbarThickness) == 0x07F4);
static_assert(offsetof(UListView, Orientation) == 0x07FC);
static_assert(offsetof(UListView, SelectionMode) == 0x07FD);
static_assert(offsetof(UListView, ConsumeMouseWheel) == 0x07FE);
static_assert(offsetof(UListView, ListItems) == 0x0810);
static_assert(offsetof(FShapedTextOptions, TextShapingMethod) == 0x0001);
static_assert(offsetof(FShapedTextOptions, TextFlowDirection) == 0x0002);
static_assert(offsetof(UTextLayoutWidget, ShapedTextOptions) == 0x0108);
static_assert(offsetof(UTextLayoutWidget, Justification) == 0x010B);
static_assert(offsetof(UTextLayoutWidget, WrappingPolicy) == 0x010C);
static_assert(offsetof(UTextLayoutWidget, Margin) == 0x0114);
static_assert(offsetof(URichTextBlock, text) == 0x0128);
static_assert(offsetof(URichTextBlock, ActionText) == 0x0140);
static_assert(offsetof(URichTextBlock, TextStyleSet) == 0x0158);
static_assert(offsetof(URichTextBlock, DecoratorClasses) == 0x0160);
static_assert(offsetof(URichTextBlock, DefaultTextStyleOverride) == 0x0178);
static_assert(offsetof(URichTextBlock, TextTransformPolicy) == 0x040C);
static_assert(offsetof(URichTextBlock, DefaultTextStyle) == 0x0410);
static_assert(offsetof(URichTextBlock, InstanceDecorators) == 0x06A0);
static_assert(offsetof(URichTextBlock, VerticalJustification) == 0x06D0);
static_assert(offsetof(URichTextBlock, NotifyCheckText) == 0x06D8);
static_assert(offsetof(UBackgroundBlur, Padding) == 0x0120);
static_assert(offsetof(UBackgroundBlur, HorizontalAlignment) == 0x0130);
static_assert(offsetof(UBackgroundBlur, VerticalAlignment) == 0x0131);
static_assert(offsetof(UBackgroundBlur, LowQualityFallbackBrush) == 0x0140);
static_assert(offsetof(UBackgroundBlurSlot, Padding) == 0x0038);
static_assert(offsetof(UBackgroundBlurSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UBackgroundBlurSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(UPropertyBinding, SourceObject) == 0x0028);
static_assert(offsetof(UPropertyBinding, SourcePath) == 0x0030);
static_assert(offsetof(UPropertyBinding, DestinationProperty) == 0x0058);
static_assert(offsetof(UBorder, HorizontalAlignment) == 0x0120);
static_assert(offsetof(UBorder, VerticalAlignment) == 0x0121);
static_assert(offsetof(UBorder, ContentColorAndOpacity) == 0x0124);
static_assert(offsetof(UBorder, Padding) == 0x0144);
static_assert(offsetof(UBorder, Background) == 0x0158);
static_assert(offsetof(UBorder, BrushColor) == 0x01F8);
static_assert(offsetof(UBorder, DesiredSizeScale) == 0x0218);
static_assert(offsetof(UBorderSlot, Padding) == 0x0038);
static_assert(offsetof(UBorderSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UBorderSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(UButton, Style) == 0x0120);
static_assert(offsetof(UButton, WidgetStyle) == 0x0128);
static_assert(offsetof(UButton, ColorAndOpacity) == 0x03C0);
static_assert(offsetof(UButton, BackgroundColor) == 0x03D0);
static_assert(offsetof(UButton, ClickMethod) == 0x03E0);
static_assert(offsetof(UButton, TouchMethod) == 0x03E1);
static_assert(offsetof(UButton, PressMethod) == 0x03E2);
static_assert(offsetof(UButtonSlot, Padding) == 0x0038);
static_assert(offsetof(UButtonSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UButtonSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(FAnchorData, Offsets) == 0x0000);
static_assert(offsetof(FAnchorData, Anchors) == 0x0010);
static_assert(offsetof(FAnchorData, Alignment) == 0x0020);
static_assert(offsetof(UCanvasPanelSlot, LayoutData) == 0x0038);
static_assert(offsetof(UCheckBox, CheckedState) == 0x0120);
static_assert(offsetof(UCheckBox, WidgetStyle) == 0x0138);
static_assert(offsetof(UCheckBox, Style) == 0x0700);
static_assert(offsetof(UCheckBox, UncheckedImage) == 0x0708);
static_assert(offsetof(UCheckBox, UncheckedHoveredImage) == 0x0710);
static_assert(offsetof(UCheckBox, UncheckedPressedImage) == 0x0718);
static_assert(offsetof(UCheckBox, CheckedImage) == 0x0720);
static_assert(offsetof(UCheckBox, CheckedHoveredImage) == 0x0728);
static_assert(offsetof(UCheckBox, CheckedPressedImage) == 0x0730);
static_assert(offsetof(UCheckBox, UndeterminedImage) == 0x0738);
static_assert(offsetof(UCheckBox, UndeterminedHoveredImage) == 0x0740);
static_assert(offsetof(UCheckBox, UndeterminedPressedImage) == 0x0748);
static_assert(offsetof(UCheckBox, HorizontalAlignment) == 0x0750);
static_assert(offsetof(UCheckBox, Padding) == 0x0754);
static_assert(offsetof(UCheckBox, BorderBackgroundColor) == 0x0768);
static_assert(offsetof(UCheckBox, ClickMethod) == 0x0790);
static_assert(offsetof(UCheckBox, TouchMethod) == 0x0791);
static_assert(offsetof(UCheckBox, PressMethod) == 0x0792);
static_assert(offsetof(UCircularThrobber, PieceImage) == 0x0118);
static_assert(offsetof(UCircularThrobber, Image) == 0x0120);
static_assert(offsetof(UComboBox, Items) == 0x0108);
static_assert(offsetof(UDragDropOperation, Tag) == 0x0028);
static_assert(offsetof(UDragDropOperation, Payload) == 0x0038);
static_assert(offsetof(UDragDropOperation, DefaultDragVisual) == 0x0040);
static_assert(offsetof(UDragDropOperation, Pivot) == 0x0048);
static_assert(offsetof(UDragDropOperation, Offset) == 0x004C);
static_assert(offsetof(FSlateChildSize, SizeRule) == 0x0004);
static_assert(offsetof(UDynamicEntryBoxBase, EntryBoxType) == 0x0108);
static_assert(offsetof(UDynamicEntryBoxBase, EntrySpacing) == 0x010C);
static_assert(offsetof(UDynamicEntryBoxBase, SpacingPattern) == 0x0118);
static_assert(offsetof(UDynamicEntryBoxBase, EntrySizeRule) == 0x0128);
static_assert(offsetof(UDynamicEntryBoxBase, EntryHorizontalAlignment) == 0x0130);
static_assert(offsetof(UDynamicEntryBoxBase, EntryVerticalAlignment) == 0x0131);
static_assert(offsetof(UDynamicEntryBoxBase, RadialBoxSettings) == 0x0138);
static_assert(offsetof(UDynamicEntryBoxBase, EntryWidgetPool) == 0x0158);
static_assert(offsetof(UDynamicEntryBox, EntryWidgetClass) == 0x01D8);
static_assert(offsetof(UEditableText, text) == 0x0108);
static_assert(offsetof(UEditableText, HintText) == 0x0130);
static_assert(offsetof(UEditableText, WidgetStyle) == 0x0158);
static_assert(offsetof(UEditableText, Style) == 0x0398);
static_assert(offsetof(UEditableText, BackgroundImageSelected) == 0x03A0);
static_assert(offsetof(UEditableText, BackgroundImageComposing) == 0x03A8);
static_assert(offsetof(UEditableText, CaretImage) == 0x03B0);
static_assert(offsetof(UEditableText, Font) == 0x03B8);
static_assert(offsetof(UEditableText, ColorAndOpacity) == 0x0418);
static_assert(offsetof(UEditableText, KeyboardType) == 0x044E);
static_assert(offsetof(UEditableText, VirtualKeyboardOptions) == 0x044F);
static_assert(offsetof(UEditableText, VirtualKeyboardTrigger) == 0x0450);
static_assert(offsetof(UEditableText, VirtualKeyboardDismissAction) == 0x0451);
static_assert(offsetof(UEditableText, Justification) == 0x0452);
static_assert(offsetof(UEditableText, ShapedTextOptions) == 0x0453);
static_assert(offsetof(UEditableTextBox, text) == 0x0108);
static_assert(offsetof(UEditableTextBox, WidgetStyle) == 0x0130);
static_assert(offsetof(UEditableTextBox, Style) == 0x0998);
static_assert(offsetof(UEditableTextBox, HintText) == 0x09A0);
static_assert(offsetof(UEditableTextBox, Font) == 0x09C8);
static_assert(offsetof(UEditableTextBox, ForegroundColor) == 0x0A28);
static_assert(offsetof(UEditableTextBox, BackgroundColor) == 0x0A38);
static_assert(offsetof(UEditableTextBox, ReadOnlyForegroundColor) == 0x0A48);
static_assert(offsetof(UEditableTextBox, Padding) == 0x0A60);
static_assert(offsetof(UEditableTextBox, KeyboardType) == 0x0A76);
static_assert(offsetof(UEditableTextBox, VirtualKeyboardOptions) == 0x0A77);
static_assert(offsetof(UEditableTextBox, VirtualKeyboardTrigger) == 0x0A78);
static_assert(offsetof(UEditableTextBox, VirtualKeyboardDismissAction) == 0x0A79);
static_assert(offsetof(UEditableTextBox, Justification) == 0x0A7A);
static_assert(offsetof(UEditableTextBox, ShapedTextOptions) == 0x0A7B);
static_assert(offsetof(UExpandableArea, Style) == 0x0110);
static_assert(offsetof(UExpandableArea, BorderBrush) == 0x0240);
static_assert(offsetof(UExpandableArea, BorderColor) == 0x02D0);
static_assert(offsetof(UExpandableArea, HeaderPadding) == 0x0300);
static_assert(offsetof(UExpandableArea, AreaPadding) == 0x0310);
static_assert(offsetof(UExpandableArea, HeaderContent) == 0x0330);
static_assert(offsetof(UExpandableArea, BodyContent) == 0x0338);
static_assert(offsetof(UGridPanel, ColumnFill) == 0x0120);
static_assert(offsetof(UGridPanel, RowFill) == 0x0130);
static_assert(offsetof(UGridSlot, Padding) == 0x0038);
static_assert(offsetof(UGridSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UGridSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(UGridSlot, Nudge) == 0x0060);
static_assert(offsetof(UHorizontalBoxSlot, Padding) == 0x0040);
static_assert(offsetof(UHorizontalBoxSlot, Size) == 0x0050);
static_assert(offsetof(UHorizontalBoxSlot, HorizontalAlignment) == 0x0058);
static_assert(offsetof(UHorizontalBoxSlot, VerticalAlignment) == 0x0059);
static_assert(offsetof(UImage, Brush) == 0x0108);
static_assert(offsetof(UImage, AsyncResourcePath) == 0x0198);
static_assert(offsetof(UImage, ResourceAsset) == 0x01B0);
static_assert(offsetof(UImage, ResourceAction) == 0x01B8);
static_assert(offsetof(UImage, ColorAndOpacity) == 0x01D0);
static_assert(offsetof(UInputKeySelector, WidgetStyle) == 0x0108);
static_assert(offsetof(UInputKeySelector, TextStyle) == 0x03A0);
static_assert(offsetof(UInputKeySelector, SelectedKey) == 0x0630);
static_assert(offsetof(UInputKeySelector, Font) == 0x0650);
static_assert(offsetof(UInputKeySelector, Margin) == 0x06B0);
static_assert(offsetof(UInputKeySelector, ColorAndOpacity) == 0x06C0);
static_assert(offsetof(UInputKeySelector, KeySelectionText) == 0x06D0);
static_assert(offsetof(UInputKeySelector, NoKeySpecifiedText) == 0x06E8);
static_assert(offsetof(UInputKeySelector, EscapeKeys) == 0x0708);
static_assert(offsetof(UMenuAnchor, MenuClass) == 0x0120);
static_assert(offsetof(UMenuAnchor, Placement) == 0x0148);
static_assert(offsetof(UMovieSceneEntitySystem, Linker) == 0x0028);
static_assert(offsetof(UMovieScenePropertySystem, InstantiatorSystem) == 0x0040);
static_assert(offsetof(UMovieSceneSignedObject, Signature) == 0x0028);
static_assert(offsetof(FMovieSceneSectionEvalOptions, CompletionMode) == 0x0001);
static_assert(offsetof(FOptionalMovieSceneBlendType, BlendType) == 0x0000);
static_assert(offsetof(UMovieSceneSection, EvalOptions) == 0x0050);
static_assert(offsetof(UMovieSceneSection, Easing) == 0x0058);
static_assert(offsetof(UMovieSceneSection, SectionRange) == 0x0090);
static_assert(offsetof(UMovieSceneSection, PreRollFrames) == 0x00A0);
static_assert(offsetof(UMovieSceneSection, PostRollFrames) == 0x00A4);
static_assert(offsetof(UMovieSceneSection, BlendType) == 0x00C9);
static_assert(offsetof(FMovieSceneTangentData, TangentWeightMode) == 0x0010);
static_assert(offsetof(FMovieSceneFloatValue, Tangent) == 0x0004);
static_assert(offsetof(FMovieSceneFloatValue, InterpMode) == 0x0018);
static_assert(offsetof(FMovieSceneFloatValue, TangentMode) == 0x0019);
static_assert(offsetof(FMovieSceneFloatChannel, PreInfinityExtrap) == 0x0008);
static_assert(offsetof(FMovieSceneFloatChannel, PostInfinityExtrap) == 0x0009);
static_assert(offsetof(FMovieSceneFloatChannel, Times) == 0x0010);
static_assert(offsetof(FMovieSceneFloatChannel, Values) == 0x0020);
static_assert(offsetof(FMovieSceneFloatChannel, KeyHandles) == 0x0038);
static_assert(offsetof(FMovieSceneFloatChannel, TickResolution) == 0x0098);
static_assert(offsetof(UMovieScene2DTransformSection, TransformMask) == 0x00F0);
static_assert(offsetof(UMovieScene2DTransformSection, Translation) == 0x00F8);
static_assert(offsetof(UMovieScene2DTransformSection, Rotation) == 0x0238);
static_assert(offsetof(UMovieScene2DTransformSection, Scale) == 0x02D8);
static_assert(offsetof(UMovieScene2DTransformSection, Shear) == 0x0418);
static_assert(offsetof(FMovieSceneTrackEvaluationFieldEntry, Section) == 0x0000);
static_assert(offsetof(FMovieSceneTrackEvaluationFieldEntry, Range) == 0x0008);
static_assert(offsetof(FMovieSceneTrackEvaluationFieldEntry, ForcedTime) == 0x0018);
static_assert(offsetof(FMovieSceneTrackEvaluationFieldEntry, Flags) == 0x001C);
static_assert(offsetof(FMovieSceneTrackEvaluationField, Entries) == 0x0000);
static_assert(offsetof(UMovieSceneTrack, EvalOptions) == 0x0050);
static_assert(offsetof(UMovieSceneTrack, EvaluationFieldGuid) == 0x0058);
static_assert(offsetof(UMovieSceneTrack, EvaluationField) == 0x0068);
static_assert(offsetof(FMovieScenePropertyBinding, PropertyName) == 0x0000);
static_assert(offsetof(FMovieScenePropertyBinding, PropertyPath) == 0x0008);
static_assert(offsetof(UMovieScenePropertyTrack, SectionToKey) == 0x0078);
static_assert(offsetof(UMovieScenePropertyTrack, PropertyBinding) == 0x0080);
static_assert(offsetof(UMovieScenePropertyTrack, Sections) == 0x0098);
static_assert(offsetof(UMovieSceneMarginSection, TopCurve) == 0x00E8);
static_assert(offsetof(UMovieSceneMarginSection, LeftCurve) == 0x0188);
static_assert(offsetof(UMovieSceneMarginSection, RightCurve) == 0x0228);
static_assert(offsetof(UMovieSceneMarginSection, BottomCurve) == 0x02C8);
static_assert(offsetof(UMovieSceneMaterialTrack, Sections) == 0x0078);
static_assert(offsetof(UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath) == 0x0090);
static_assert(offsetof(UMovieSceneWidgetMaterialTrack, TrackName) == 0x00A0);
static_assert(offsetof(UMultiLineEditableText, text) == 0x0128);
static_assert(offsetof(UMultiLineEditableText, HintText) == 0x0140);
static_assert(offsetof(UMultiLineEditableText, WidgetStyle) == 0x0168);
static_assert(offsetof(UMultiLineEditableText, Font) == 0x0400);
static_assert(offsetof(UMultiLineEditableText, VirtualKeyboardOptions) == 0x0465);
static_assert(offsetof(UMultiLineEditableText, VirtualKeyboardDismissAction) == 0x0466);
static_assert(offsetof(UMultiLineEditableTextBox, text) == 0x0128);
static_assert(offsetof(UMultiLineEditableTextBox, HintText) == 0x0140);
static_assert(offsetof(UMultiLineEditableTextBox, WidgetStyle) == 0x0168);
static_assert(offsetof(UMultiLineEditableTextBox, TextStyle) == 0x09D0);
static_assert(offsetof(UMultiLineEditableTextBox, VirtualKeyboardOptions) == 0x0C62);
static_assert(offsetof(UMultiLineEditableTextBox, VirtualKeyboardDismissAction) == 0x0C63);
static_assert(offsetof(UMultiLineEditableTextBox, Style) == 0x0C68);
static_assert(offsetof(UMultiLineEditableTextBox, Font) == 0x0C70);
static_assert(offsetof(UMultiLineEditableTextBox, ForegroundColor) == 0x0CD0);
static_assert(offsetof(UMultiLineEditableTextBox, BackgroundColor) == 0x0CE0);
static_assert(offsetof(UMultiLineEditableTextBox, ReadOnlyForegroundColor) == 0x0CF0);
static_assert(offsetof(UOverlaySlot, Padding) == 0x0040);
static_assert(offsetof(UOverlaySlot, HorizontalAlignment) == 0x0050);
static_assert(offsetof(UOverlaySlot, VerticalAlignment) == 0x0051);
static_assert(offsetof(UProgressBar, WidgetStyle) == 0x0108);
static_assert(offsetof(UProgressBar, Style) == 0x02C0);
static_assert(offsetof(UProgressBar, BackgroundImage) == 0x02C8);
static_assert(offsetof(UProgressBar, FillImage) == 0x02D0);
static_assert(offsetof(UProgressBar, MarqueeImage) == 0x02D8);
static_assert(offsetof(UProgressBar, BarFillType) == 0x02E4);
static_assert(offsetof(UProgressBar, BorderPadding) == 0x02E8);
static_assert(offsetof(UProgressBar, FillColorAndOpacity) == 0x0300);
static_assert(offsetof(URetainerBox, EffectMaterial) == 0x0130);
static_assert(offsetof(URetainerBox, TextureParameter) == 0x013C);
static_assert(offsetof(URichTextBlockImageDecorator, ImageSet) == 0x0028);
static_assert(offsetof(USafeZoneSlot, SafeAreaScale) == 0x003C);
static_assert(offsetof(USafeZoneSlot, hAlign) == 0x004C);
static_assert(offsetof(USafeZoneSlot, vAlign) == 0x004D);
static_assert(offsetof(USafeZoneSlot, Padding) == 0x0050);
static_assert(offsetof(UScaleBox, Stretch) == 0x0120);
static_assert(offsetof(UScaleBox, StretchDirection) == 0x0121);
static_assert(offsetof(UScaleBoxSlot, Padding) == 0x0038);
static_assert(offsetof(UScaleBoxSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UScaleBoxSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(UScrollBar, WidgetStyle) == 0x0108);
static_assert(offsetof(UScrollBar, Style) == 0x0620);
static_assert(offsetof(UScrollBar, Orientation) == 0x062A);
static_assert(offsetof(UScrollBar, Thickness) == 0x062C);
static_assert(offsetof(UScrollBar, Padding) == 0x0634);
static_assert(offsetof(UScrollBox, WidgetStyle) == 0x0120);
static_assert(offsetof(UScrollBox, WidgetBarStyle) == 0x0368);
static_assert(offsetof(UScrollBox, Style) == 0x0880);
static_assert(offsetof(UScrollBox, BarStyle) == 0x0888);
static_assert(offsetof(UScrollBox, Orientation) == 0x0890);
static_assert(offsetof(UScrollBox, ScrollBarVisibility) == 0x0891);
static_assert(offsetof(UScrollBox, ConsumeMouseWheel) == 0x0892);
static_assert(offsetof(UScrollBox, ScrollbarThickness) == 0x0894);
static_assert(offsetof(UScrollBox, ScrollbarPadding) == 0x089C);
static_assert(offsetof(UScrollBox, NavigationDestination) == 0x08B0);
static_assert(offsetof(UScrollBox, ScrollWhenFocusChanges) == 0x08B8);
static_assert(offsetof(UScrollBoxSlot, Padding) == 0x0038);
static_assert(offsetof(UScrollBoxSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UScrollBoxSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(USizeBoxSlot, Padding) == 0x0038);
static_assert(offsetof(USizeBoxSlot, HorizontalAlignment) == 0x0058);
static_assert(offsetof(USizeBoxSlot, VerticalAlignment) == 0x0059);
static_assert(offsetof(FSlateMeshVertex, position) == 0x0000);
static_assert(offsetof(FSlateMeshVertex, Color) == 0x0008);
static_assert(offsetof(FSlateMeshVertex, UV0) == 0x000C);
static_assert(offsetof(FSlateMeshVertex, UV1) == 0x0014);
static_assert(offsetof(FSlateMeshVertex, UV2) == 0x001C);
static_assert(offsetof(FSlateMeshVertex, UV3) == 0x0024);
static_assert(offsetof(FSlateMeshVertex, UV4) == 0x002C);
static_assert(offsetof(FSlateMeshVertex, UV5) == 0x0034);
static_assert(offsetof(USlateVectorArtData, VertexData) == 0x0028);
static_assert(offsetof(USlateVectorArtData, IndexData) == 0x0038);
static_assert(offsetof(USlateVectorArtData, Material) == 0x0048);
static_assert(offsetof(USlateVectorArtData, ExtentMin) == 0x0050);
static_assert(offsetof(USlateVectorArtData, ExtentMax) == 0x0058);
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleBehavior) == 0x0029);
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleSummaryBehavior) == 0x002A);
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleText) == 0x0030);
static_assert(offsetof(USlateAccessibleWidgetData, AccessibleSummaryText) == 0x0058);
static_assert(offsetof(USlider, WidgetStyle) == 0x0128);
static_assert(offsetof(USlider, Orientation) == 0x0498);
static_assert(offsetof(USlider, SliderBarColor) == 0x049C);
static_assert(offsetof(USlider, SliderHandleColor) == 0x04AC);
static_assert(offsetof(USpacer, Size) == 0x0108);
static_assert(offsetof(USpinBox, WidgetStyle) == 0x0120);
static_assert(offsetof(USpinBox, Style) == 0x0430);
static_assert(offsetof(USpinBox, Font) == 0x0450);
static_assert(offsetof(USpinBox, Justification) == 0x04B0);
static_assert(offsetof(USpinBox, ForegroundColor) == 0x04C0);
static_assert(offsetof(UTextBlock, text) == 0x0128);
static_assert(offsetof(UTextBlock, ColorAndOpacity) == 0x0150);
static_assert(offsetof(UTextBlock, Font) == 0x0188);
static_assert(offsetof(UTextBlock, StrikeBrush) == 0x01E8);
static_assert(offsetof(UTextBlock, ShadowOffset) == 0x0278);
static_assert(offsetof(UTextBlock, ShadowColorAndOpacity) == 0x0280);
static_assert(offsetof(UTextBlock, TextTransformPolicy) == 0x02A6);
static_assert(offsetof(UTextBlock, TextFlowDirection) == 0x02A7);
static_assert(offsetof(UTextBlock, NotifyCheckText) == 0x02C0);
static_assert(offsetof(UThrobber, PieceImage) == 0x0110);
static_assert(offsetof(UThrobber, Image) == 0x0118);
static_assert(offsetof(UTileView, TileAlignment) == 0x0898);
static_assert(offsetof(FMovieSceneRootEvaluationTemplateInstance, WeakRootSequence) == 0x0000);
static_assert(offsetof(FMovieSceneRootEvaluationTemplateInstance, CompiledDataManager) == 0x0008);
static_assert(offsetof(FMovieSceneRootEvaluationTemplateInstance, EntitySystemLinker) == 0x0018);
static_assert(offsetof(FMovieSceneRootEvaluationTemplateInstance, DirectorInstances) == 0x0090);
static_assert(offsetof(UUMGSequencePlayer, Animation) == 0x0410);
static_assert(offsetof(UUMGSequencePlayer, RootTemplateInstance) == 0x0420);
static_assert(offsetof(UUMGSequenceTickManager, Linker) == 0x0078);
static_assert(offsetof(UUniformGridPanel, SlotPadding) == 0x0120);
static_assert(offsetof(UUniformGridSlot, HorizontalAlignment) == 0x0038);
static_assert(offsetof(UUniformGridSlot, VerticalAlignment) == 0x0039);
static_assert(offsetof(UVerticalBoxSlot, Size) == 0x0038);
static_assert(offsetof(UVerticalBoxSlot, Padding) == 0x0040);
static_assert(offsetof(UVerticalBoxSlot, HorizontalAlignment) == 0x0058);
static_assert(offsetof(UVerticalBoxSlot, VerticalAlignment) == 0x0059);
static_assert(offsetof(UViewport, BackgroundColor) == 0x0120);
static_assert(offsetof(UMovieSceneSequence, CompiledData) == 0x0050);
static_assert(offsetof(UMovieSceneSequence, DefaultCompletionMode) == 0x0058);
static_assert(offsetof(UMovieSceneSequence, SequenceFlags) == 0x005B);
static_assert(offsetof(FWidgetAnimationBinding, WidgetName) == 0x0000);
static_assert(offsetof(FWidgetAnimationBinding, SlotWidgetName) == 0x0008);
static_assert(offsetof(FWidgetAnimationBinding, AnimationGuid) == 0x0010);
static_assert(offsetof(UWidgetAnimation, MovieScene) == 0x0060);
static_assert(offsetof(UWidgetAnimation, AnimationBindings) == 0x0068);
static_assert(offsetof(UWidgetAnimation, DisplayLabel) == 0x0080);
static_assert(offsetof(FBlueprintWidgetAnimationDelegateBinding, Action) == 0x0000);
static_assert(offsetof(FBlueprintWidgetAnimationDelegateBinding, AnimationToBind) == 0x0004);
static_assert(offsetof(FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind) == 0x000C);
static_assert(offsetof(FBlueprintWidgetAnimationDelegateBinding, UserTag) == 0x0014);
static_assert(offsetof(UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings) == 0x0028);
static_assert(offsetof(FDelegateRuntimeBinding, ObjectName) == 0x0000);
static_assert(offsetof(FDelegateRuntimeBinding, PropertyName) == 0x0010);
static_assert(offsetof(FDelegateRuntimeBinding, FunctionName) == 0x0018);
static_assert(offsetof(FDelegateRuntimeBinding, SourcePath) == 0x0020);
static_assert(offsetof(FDelegateRuntimeBinding, Kind) == 0x0048);
static_assert(offsetof(UWidgetBlueprintGeneratedClass, WidgetTree) == 0x0328);
static_assert(offsetof(UWidgetBlueprintGeneratedClass, Bindings) == 0x0338);
static_assert(offsetof(UWidgetBlueprintGeneratedClass, Animations) == 0x0348);
static_assert(offsetof(UWidgetBlueprintGeneratedClass, NamedSlots) == 0x0358);
static_assert(offsetof(UWidgetComponent, Space) == 0x0560);
static_assert(offsetof(UWidgetComponent, TimingPolicy) == 0x0561);
static_assert(offsetof(UWidgetComponent, WidgetClass) == 0x0568);
static_assert(offsetof(UWidgetComponent, DrawSize) == 0x0570);
static_assert(offsetof(UWidgetComponent, CurrentDrawSize) == 0x0588);
static_assert(offsetof(UWidgetComponent, Pivot) == 0x0594);
static_assert(offsetof(UWidgetComponent, WindowVisibility) == 0x059E);
static_assert(offsetof(UWidgetComponent, OwnerPlayer) == 0x05A0);
static_assert(offsetof(UWidgetComponent, BackgroundColor) == 0x05A8);
static_assert(offsetof(UWidgetComponent, TintColorAndOpacity) == 0x05B8);
static_assert(offsetof(UWidgetComponent, BlendMode) == 0x05CC);
static_assert(offsetof(UWidgetComponent, BodySetup) == 0x05D0);
static_assert(offsetof(UWidgetComponent, TranslucentMaterial) == 0x05D8);
static_assert(offsetof(UWidgetComponent, TranslucentMaterial_OneSided) == 0x05E0);
static_assert(offsetof(UWidgetComponent, OpaqueMaterial) == 0x05E8);
static_assert(offsetof(UWidgetComponent, OpaqueMaterial_OneSided) == 0x05F0);
static_assert(offsetof(UWidgetComponent, MaskedMaterial) == 0x05F8);
static_assert(offsetof(UWidgetComponent, MaskedMaterial_OneSided) == 0x0600);
static_assert(offsetof(UWidgetComponent, RenderTarget) == 0x0608);
static_assert(offsetof(UWidgetComponent, MaterialInstance) == 0x0610);
static_assert(offsetof(UWidgetComponent, SharedLayerName) == 0x061C);
static_assert(offsetof(UWidgetComponent, GeometryMode) == 0x0628);
static_assert(offsetof(UWidgetComponent, TickMode) == 0x0630);
static_assert(offsetof(UWidgetComponent, Widget) == 0x0658);
static_assert(offsetof(UWidgetInteractionComponent, TraceChannel) == 0x0288);
static_assert(offsetof(UWidgetInteractionComponent, InteractionSource) == 0x0290);
static_assert(offsetof(UWidgetInteractionComponent, DebugColor) == 0x029C);
static_assert(offsetof(UWidgetInteractionComponent, CustomHitResult) == 0x0328);
static_assert(offsetof(UWidgetInteractionComponent, LocalHitLocation) == 0x03B4);
static_assert(offsetof(UWidgetInteractionComponent, LastLocalHitLocation) == 0x03BC);
static_assert(offsetof(UWidgetInteractionComponent, HoveredWidgetComponent) == 0x03C8);
static_assert(offsetof(UWidgetInteractionComponent, LastHitResult) == 0x03D0);
static_assert(offsetof(FWidgetNavigationData, Rule) == 0x0000);
static_assert(offsetof(FWidgetNavigationData, WidgetToFocus) == 0x0004);
static_assert(offsetof(FWidgetNavigationData, Widget) == 0x000C);
static_assert(offsetof(UWidgetNavigation, Up) == 0x0028);
static_assert(offsetof(UWidgetNavigation, Down) == 0x004C);
static_assert(offsetof(UWidgetNavigation, Left) == 0x0070);
static_assert(offsetof(UWidgetNavigation, Right) == 0x0094);
static_assert(offsetof(UWidgetNavigation, Next) == 0x00B8);
static_assert(offsetof(UWidgetNavigation, Previous) == 0x00DC);
static_assert(offsetof(UWidgetSwitcher, L10NCodes) == 0x0128);
static_assert(offsetof(UWidgetSwitcherSlot, Padding) == 0x0040);
static_assert(offsetof(UWidgetSwitcherSlot, HorizontalAlignment) == 0x0050);
static_assert(offsetof(UWidgetSwitcherSlot, VerticalAlignment) == 0x0051);
static_assert(offsetof(UWidgetTree, RootWidget) == 0x0028);
static_assert(offsetof(UWindowTitleBarAreaSlot, Padding) == 0x0038);
static_assert(offsetof(UWindowTitleBarAreaSlot, HorizontalAlignment) == 0x0048);
static_assert(offsetof(UWindowTitleBarAreaSlot, VerticalAlignment) == 0x0049);
static_assert(offsetof(UWrapBox, InnerSlotPadding) == 0x0120);
static_assert(offsetof(UWrapBox, Orientation) == 0x0132);
static_assert(offsetof(UWrapBoxSlot, Padding) == 0x0038);
static_assert(offsetof(UWrapBoxSlot, HorizontalAlignment) == 0x0050);
static_assert(offsetof(UWrapBoxSlot, VerticalAlignment) == 0x0051);
static_assert(offsetof(FMovieSceneEvalTemplate, CompletionMode) == 0x0010);
static_assert(offsetof(FMovieSceneEvalTemplate, SourceSectionPtr) == 0x0014);
static_assert(offsetof(FMovieScenePropertySectionData, PropertyName) == 0x0000);
static_assert(offsetof(FMovieScenePropertySectionData, PropertyPath) == 0x0008);
static_assert(offsetof(FMovieScenePropertySectionTemplate, PropertyData) == 0x0020);
static_assert(offsetof(FMovieSceneMarginSectionTemplate, TopCurve) == 0x0038);
static_assert(offsetof(FMovieSceneMarginSectionTemplate, LeftCurve) == 0x00D8);
static_assert(offsetof(FMovieSceneMarginSectionTemplate, RightCurve) == 0x0178);
static_assert(offsetof(FMovieSceneMarginSectionTemplate, BottomCurve) == 0x0218);
static_assert(offsetof(FMovieSceneMarginSectionTemplate, BlendType) == 0x02B8);
static_assert(offsetof(FScalarParameterNameAndCurve, ParameterName) == 0x0000);
static_assert(offsetof(FScalarParameterNameAndCurve, ParameterCurve) == 0x0008);
static_assert(offsetof(FMovieSceneBoolChannel, Times) == 0x0008);
static_assert(offsetof(FMovieSceneBoolChannel, Values) == 0x0020);
static_assert(offsetof(FBoolParameterNameAndCurve, ParameterName) == 0x0000);
static_assert(offsetof(FBoolParameterNameAndCurve, ParameterCurve) == 0x0008);
static_assert(offsetof(FVector2DParameterNameAndCurves, ParameterName) == 0x0000);
static_assert(offsetof(FVector2DParameterNameAndCurves, XCurve) == 0x0008);
static_assert(offsetof(FVector2DParameterNameAndCurves, YCurve) == 0x00A8);
static_assert(offsetof(FVectorParameterNameAndCurves, ParameterName) == 0x0000);
static_assert(offsetof(FVectorParameterNameAndCurves, XCurve) == 0x0008);
static_assert(offsetof(FVectorParameterNameAndCurves, YCurve) == 0x00A8);
static_assert(offsetof(FVectorParameterNameAndCurves, ZCurve) == 0x0148);
static_assert(offsetof(FColorParameterNameAndCurves, ParameterName) == 0x0000);
static_assert(offsetof(FColorParameterNameAndCurves, RedCurve) == 0x0008);
static_assert(offsetof(FColorParameterNameAndCurves, GreenCurve) == 0x00A8);
static_assert(offsetof(FColorParameterNameAndCurves, BlueCurve) == 0x0148);
static_assert(offsetof(FColorParameterNameAndCurves, AlphaCurve) == 0x01E8);
static_assert(offsetof(FTransformParameterNameAndCurves, ParameterName) == 0x0000);
static_assert(offsetof(FTransformParameterNameAndCurves, Translation) == 0x0008);
static_assert(offsetof(FTransformParameterNameAndCurves, Rotation) == 0x01E8);
static_assert(offsetof(FTransformParameterNameAndCurves, Scale) == 0x03C8);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Scalars) == 0x0020);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Bools) == 0x0030);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Vector2Ds) == 0x0040);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Vectors) == 0x0050);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Colors) == 0x0060);
static_assert(offsetof(FMovieSceneParameterSectionTemplate, Transforms) == 0x0070);
static_assert(offsetof(FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath) == 0x0080);
static_assert(offsetof(FRichTextStyleRow, TextStyle) == 0x0008);
static_assert(offsetof(FRichImageRow, Brush) == 0x0008);
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, LoopCount) == 0x0004);
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, PlayActorEffectArray) == 0x0018);
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, FinishActorEffectArray) == 0x0028);
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, ContentType) == 0x0044);
static_assert(offsetof(FMovieSceneSequencePlaybackSettings, OverrideStartMovementNone) == 0x004C);
static_assert(offsetof(FMovieSceneSequenceReplProperties, LastKnownPosition) == 0x0000);
static_assert(offsetof(FMovieSceneSequenceReplProperties, LastKnownStatus) == 0x0008);
static_assert(offsetof(UMovieSceneSequencePlayer, Status) == 0x0460);
static_assert(offsetof(UMovieSceneSequencePlayer, Sequence) == 0x0468);
static_assert(offsetof(UMovieSceneSequencePlayer, StartTime) == 0x0470);
static_assert(offsetof(UMovieSceneSequencePlayer, PlaybackSettings) == 0x0480);
static_assert(offsetof(UMovieSceneSequencePlayer, RootTemplateInstance) == 0x04E8);
static_assert(offsetof(UMovieSceneSequencePlayer, NetSyncProps) == 0x0638);
static_assert(offsetof(UMovieSceneSequencePlayer, TickManager) == 0x0658);
static_assert(offsetof(FMovieSceneSectionParameters, StartFrameOffset) == 0x0000);
static_assert(offsetof(FMovieSceneSectionParameters, EndFrameOffset) == 0x0008);
static_assert(offsetof(FMovieSceneSectionParameters, FirstLoopStartFrameOffset) == 0x000C);
static_assert(offsetof(UMovieSceneSubSection, Parameters) == 0x00E8);
static_assert(offsetof(UMovieSceneSubSection, SubSequence) == 0x0118);
static_assert(offsetof(UMovieSceneSubSection, ActorToRecord) == 0x0120);
static_assert(offsetof(UMovieSceneSubSection, TargetSequenceName) == 0x0140);
static_assert(offsetof(UMovieSceneSubSection, TargetPathToRecordTo) == 0x0150);
static_assert(offsetof(UMovieSceneSubTrack, Sections) == 0x0078);
static_assert(offsetof(FMovieSceneSpawnable, SpawnTransform) == 0x0000);
static_assert(offsetof(FMovieSceneSpawnable, Tags) == 0x0030);
static_assert(offsetof(FMovieSceneSpawnable, Guid) == 0x0044);
static_assert(offsetof(FMovieSceneSpawnable, Name) == 0x0058);
static_assert(offsetof(FMovieSceneSpawnable, ObjectTemplate) == 0x0068);
static_assert(offsetof(FMovieSceneSpawnable, ChildPossessables) == 0x0070);
static_assert(offsetof(FMovieSceneSpawnable, Ownership) == 0x0080);
static_assert(offsetof(FMovieSceneSpawnable, LevelName) == 0x0084);
static_assert(offsetof(FMovieScenePossessable, Tags) == 0x0000);
static_assert(offsetof(FMovieScenePossessable, Guid) == 0x0010);
static_assert(offsetof(FMovieScenePossessable, Name) == 0x0020);
static_assert(offsetof(FMovieScenePossessable, PossessedObjectClass) == 0x0030);
static_assert(offsetof(FMovieScenePossessable, ParentGuid) == 0x0038);
static_assert(offsetof(FMovieSceneBinding, ObjectGuid) == 0x0000);
static_assert(offsetof(FMovieSceneBinding, BindingName) == 0x0010);
static_assert(offsetof(FMovieSceneBinding, Tracks) == 0x0020);
static_assert(offsetof(FMovieSceneObjectBindingID, Space) == 0x0004);
static_assert(offsetof(FMovieSceneObjectBindingID, Guid) == 0x0008);
static_assert(offsetof(FMovieSceneObjectBindingIDs, IDs) == 0x0000);
static_assert(offsetof(FMovieSceneMarkedFrame, FrameNumber) == 0x0000);
static_assert(offsetof(FMovieSceneMarkedFrame, Label) == 0x0008);
static_assert(offsetof(UMovieScene, Spawnables) == 0x0050);
static_assert(offsetof(UMovieScene, Possessables) == 0x0060);
static_assert(offsetof(UMovieScene, ObjectBindings) == 0x0070);
static_assert(offsetof(UMovieScene, BindingGroups) == 0x0080);
static_assert(offsetof(UMovieScene, MasterTracks) == 0x00D0);
static_assert(offsetof(UMovieScene, CameraCutTrack) == 0x00E0);
static_assert(offsetof(UMovieScene, SelectionRange) == 0x00E8);
static_assert(offsetof(UMovieScene, PlaybackRange) == 0x00F8);
static_assert(offsetof(UMovieScene, TickResolution) == 0x0108);
static_assert(offsetof(UMovieScene, DisplayRate) == 0x0110);
static_assert(offsetof(UMovieScene, EvaluationType) == 0x0118);
static_assert(offsetof(UMovieScene, ClockSource) == 0x0119);
static_assert(offsetof(UMovieScene, CustomClockSourcePath) == 0x0120);
static_assert(offsetof(UMovieScene, MarkedFrames) == 0x0138);
static_assert(offsetof(FMovieSceneBindingOverrideData, ObjectBindingID) == 0x0000);
static_assert(offsetof(FMovieSceneBindingOverrideData, Object) == 0x0018);
static_assert(offsetof(UMovieSceneBindingOverrides, BindingData) == 0x0028);
static_assert(offsetof(UMovieSceneBoolSection, BoolCurve) == 0x00F0);
static_assert(offsetof(FMovieSceneEvaluationTrack, ObjectBindingID) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationMethod) == 0x0012);
static_assert(offsetof(FMovieSceneEvaluationTrack, SourceTrack) == 0x0014);
static_assert(offsetof(FMovieSceneEvaluationTrack, ChildTemplates) == 0x0020);
static_assert(offsetof(FMovieSceneEvaluationTrack, TrackTemplate) == 0x0030);
static_assert(offsetof(FMovieSceneEvaluationTrack, EvaluationGroup) == 0x0068);
static_assert(offsetof(FMovieSceneTemplateGenerationLedger, LastTrackIdentifier) == 0x0000);
static_assert(offsetof(FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier) == 0x0008);
static_assert(offsetof(FMovieSceneTemplateGenerationLedger, SubSectionRanges) == 0x0058);
static_assert(offsetof(FMovieSceneEvaluationTemplate, Tracks) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationTemplate, SequenceSignature) == 0x00A0);
static_assert(offsetof(FMovieSceneEvaluationTemplate, TemplateSerialNumber) == 0x00B0);
static_assert(offsetof(FMovieSceneEvaluationTemplate, TemplateLedger) == 0x00B8);
static_assert(offsetof(FMovieSceneSequenceHierarchyNode, ParentID) == 0x0000);
static_assert(offsetof(FMovieSceneSequenceHierarchyNode, Children) == 0x0008);
static_assert(offsetof(FMovieSceneTimeTransform, Offset) == 0x0004);
static_assert(offsetof(FMovieSceneTimeWarping, Start) == 0x0000);
static_assert(offsetof(FMovieSceneTimeWarping, End) == 0x0004);
static_assert(offsetof(FMovieSceneNestedSequenceTransform, LinearTransform) == 0x0000);
static_assert(offsetof(FMovieSceneNestedSequenceTransform, Warping) == 0x000C);
static_assert(offsetof(FMovieSceneSequenceTransform, LinearTransform) == 0x0000);
static_assert(offsetof(FMovieSceneSequenceTransform, NestedTransforms) == 0x0010);
static_assert(offsetof(FMovieSceneSubSequenceData, Sequence) == 0x0000);
static_assert(offsetof(FMovieSceneSubSequenceData, RootToSequenceTransform) == 0x0018);
static_assert(offsetof(FMovieSceneSubSequenceData, TickResolution) == 0x0038);
static_assert(offsetof(FMovieSceneSubSequenceData, DeterministicSequenceID) == 0x0040);
static_assert(offsetof(FMovieSceneSubSequenceData, PlayRange) == 0x0044);
static_assert(offsetof(FMovieSceneSubSequenceData, FullPlayRange) == 0x0054);
static_assert(offsetof(FMovieSceneSubSequenceData, UnwarpedPlayRange) == 0x0064);
static_assert(offsetof(FMovieSceneSubSequenceData, PreRollRange) == 0x0074);
static_assert(offsetof(FMovieSceneSubSequenceData, PostRollRange) == 0x0084);
static_assert(offsetof(FMovieSceneSubSequenceData, InstanceData) == 0x0098);
static_assert(offsetof(FMovieSceneSubSequenceData, SubSectionSignature) == 0x00B8);
static_assert(offsetof(FMovieSceneSubSequenceData, OuterToInnerTransform) == 0x00C8);
static_assert(offsetof(FMovieSceneSequenceHierarchy, RootNode) == 0x0000);
static_assert(offsetof(FMovieSceneSequenceHierarchy, Tree) == 0x0018);
static_assert(offsetof(FMovieSceneSequenceHierarchy, SubSequences) == 0x0078);
static_assert(offsetof(FMovieSceneSequenceHierarchy, Hierarchy) == 0x00C8);
static_assert(offsetof(FMovieSceneEvaluationFieldEntityKey, EntityOwner) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationFieldEntity, Key) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationFieldEntityMetaData, ForcedTime) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationFieldEntityMetaData, Flags) == 0x0008);
static_assert(offsetof(FMovieSceneEvaluationFieldSharedEntityMetaData, ObjectBindingID) == 0x0000);
static_assert(offsetof(FMovieSceneEntityComponentField, PersistentEntityTree) == 0x0000);
static_assert(offsetof(FMovieSceneEntityComponentField, OneShotEntityTree) == 0x0060);
static_assert(offsetof(FMovieSceneEntityComponentField, Entities) == 0x00C0);
static_assert(offsetof(FMovieSceneEntityComponentField, EntityMetaData) == 0x00D0);
static_assert(offsetof(FMovieSceneEntityComponentField, SharedMetaData) == 0x00E0);
static_assert(offsetof(FMovieSceneEvaluationFieldTrackPtr, SequenceID) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier) == 0x0004);
static_assert(offsetof(FMovieSceneFieldEntry_EvaluationTrack, TrackPtr) == 0x0000);
static_assert(offsetof(FMovieSceneFieldEntry_ChildTemplate, Flags) == 0x0002);
static_assert(offsetof(FMovieSceneFieldEntry_ChildTemplate, ForcedTime) == 0x0004);
static_assert(offsetof(FMovieSceneEvaluationGroup, LUTIndices) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationGroup, TrackLUT) == 0x0010);
static_assert(offsetof(FMovieSceneEvaluationGroup, SectionLUT) == 0x0020);
static_assert(offsetof(FMovieSceneEvaluationKey, SequenceID) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationKey, TrackIdentifier) == 0x0004);
static_assert(offsetof(FMovieSceneOrderedEvaluationKey, Key) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationMetaData, ActiveSequences) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationMetaData, ActiveEntities) == 0x0010);
static_assert(offsetof(FMovieSceneEvaluationField, Ranges) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationField, Groups) == 0x0010);
static_assert(offsetof(FMovieSceneEvaluationField, MetaData) == 0x0020);
static_assert(offsetof(UMovieSceneCompiledData, EvaluationTemplate) == 0x0028);
static_assert(offsetof(UMovieSceneCompiledData, Hierarchy) == 0x0188);
static_assert(offsetof(UMovieSceneCompiledData, EntityComponentField) == 0x02A0);
static_assert(offsetof(UMovieSceneCompiledData, TrackTemplateField) == 0x0390);
static_assert(offsetof(UMovieSceneCompiledData, DeterminismFences) == 0x03C0);
static_assert(offsetof(UMovieSceneCompiledData, CompiledSignature) == 0x03D0);
static_assert(offsetof(UMovieSceneCompiledData, CompilerVersion) == 0x03E0);
static_assert(offsetof(UMovieSceneCompiledData, AccumulatedMask) == 0x03F0);
static_assert(offsetof(UMovieSceneCompiledData, AllocatedMask) == 0x03F1);
static_assert(offsetof(UMovieSceneCompiledData, AccumulatedFlags) == 0x03F2);
static_assert(offsetof(UMovieSceneCompiledDataManager, Hierarchies) == 0x00D8);
static_assert(offsetof(UMovieSceneCompiledDataManager, TrackTemplates) == 0x0128);
static_assert(offsetof(UMovieSceneCompiledDataManager, TrackTemplateFields) == 0x0178);
static_assert(offsetof(UMovieSceneCompiledDataManager, EntityComponentFields) == 0x01C8);
static_assert(offsetof(UMovieSceneBuiltInEasingFunction, Type) == 0x0030);
static_assert(offsetof(UMovieSceneEasingExternalCurve, Curve) == 0x0030);
static_assert(offsetof(FMovieSceneEntitySystemGraph, Nodes) == 0x0080);
static_assert(offsetof(UMovieSceneEntitySystemLinker, SystemGraph) == 0x0238);
static_assert(offsetof(UMovieSceneFolder, FolderName) == 0x0028);
static_assert(offsetof(UMovieSceneFolder, ChildFolders) == 0x0030);
static_assert(offsetof(UMovieSceneFolder, ChildMasterTracks) == 0x0040);
static_assert(offsetof(UMovieSceneFolder, ChildObjectBindingStrings) == 0x0050);
static_assert(offsetof(UMovieSceneSequenceTickManager, SequenceActors) == 0x0028);
static_assert(offsetof(UMovieSceneSequenceTickManager, SequencePlayerActorMap) == 0x0038);
static_assert(offsetof(UMovieSceneSequenceTickManager, Linker) == 0x0088);
static_assert(offsetof(UMovieSceneSpawnTrack, Sections) == 0x0078);
static_assert(offsetof(UMovieSceneSpawnTrack, ObjectGuid) == 0x0088);
static_assert(offsetof(UTestMovieSceneTrack, SectionArray) == 0x0088);
static_assert(offsetof(UTestMovieSceneSequence, MovieScene) == 0x0060);
static_assert(offsetof(UTestMovieSceneSubTrack, SectionArray) == 0x0088);
static_assert(offsetof(FMovieSceneTrackInstanceInput, Section) == 0x0000);
static_assert(offsetof(UMovieSceneTrackInstance, AnimatedObject) == 0x0028);
static_assert(offsetof(UMovieSceneTrackInstance, Linker) == 0x0038);
static_assert(offsetof(UMovieSceneTrackInstance, Inputs) == 0x0040);
static_assert(offsetof(UMovieSceneTrackInstanceSystem, Instantiator) == 0x0040);
static_assert(offsetof(FMovieSceneByteChannel, Times) == 0x0008);
static_assert(offsetof(FMovieSceneByteChannel, Values) == 0x0020);
static_assert(offsetof(FMovieSceneByteChannel, Enum) == 0x0030);
static_assert(offsetof(FMovieSceneIntegerChannel, Times) == 0x0008);
static_assert(offsetof(FMovieSceneIntegerChannel, Values) == 0x0020);
static_assert(offsetof(FMovieSceneEvaluationOperand, ObjectBindingID) == 0x0000);
static_assert(offsetof(FMovieSceneEvaluationOperand, SequenceID) == 0x0010);
static_assert(offsetof(FTrackInstanceInputComponent, Section) == 0x0000);
static_assert(offsetof(FMovieSceneTrackInstanceComponent, Owner) == 0x0000);
static_assert(offsetof(FMovieSceneTrackInstanceComponent, TrackInstanceClass) == 0x0008);
static_assert(offsetof(FEasingComponentData, Section) == 0x0000);
static_assert(offsetof(FMovieSceneTrackLabels, Strings) == 0x0000);
static_assert(offsetof(FMovieSceneEditorData, ExpansionStates) == 0x0000);
static_assert(offsetof(FMovieSceneEditorData, PinnedNodes) == 0x0050);
static_assert(offsetof(FMovieSceneEditorData, WorkingRange) == 0x00D0);
static_assert(offsetof(FMovieSceneEditorData, ViewRange) == 0x00E0);
static_assert(offsetof(FMovieSceneTimecodeSource, Timecode) == 0x0000);
static_assert(offsetof(FMovieSceneTimecodeSource, DeltaFrame) == 0x0014);
static_assert(offsetof(FMovieSceneEntitySystemGraphNode, System) == 0x0020);
static_assert(offsetof(FMovieSceneEvaluationFieldSegmentPtr, SegmentID) == 0x0008);
static_assert(offsetof(FMovieSceneSubSectionData, Section) == 0x0000);
static_assert(offsetof(FMovieSceneSubSectionData, ObjectBindingID) == 0x0008);
static_assert(offsetof(FMovieSceneSubSectionData, Flags) == 0x0018);
static_assert(offsetof(FMovieSceneKeyTimeStruct, Time) == 0x0008);
static_assert(offsetof(FMovieSceneObjectPathChannelKeyValue, SoftPtr) == 0x0000);
static_assert(offsetof(FMovieSceneObjectPathChannelKeyValue, HardPtr) == 0x0028);
static_assert(offsetof(FMovieSceneObjectPathChannel, PropertyClass) == 0x0008);
static_assert(offsetof(FMovieSceneObjectPathChannel, Times) == 0x0010);
static_assert(offsetof(FMovieSceneObjectPathChannel, Values) == 0x0020);
static_assert(offsetof(FMovieSceneObjectPathChannel, DefaultValue) == 0x0030);
static_assert(offsetof(FSectionEvaluationData, ForcedTime) == 0x0004);
static_assert(offsetof(FSectionEvaluationData, Flags) == 0x0008);
static_assert(offsetof(FMovieSceneSequencePlaybackParams, Frame) == 0x0000);
static_assert(offsetof(FMovieSceneSequencePlaybackParams, MarkedFrame) == 0x0010);
static_assert(offsetof(FMovieSceneSequencePlaybackParams, PositionType) == 0x0020);
static_assert(offsetof(FMovieSceneSequencePlaybackParams, UpdateMethod) == 0x0021);
static_assert(offsetof(FMovieSceneWarpCounter, WarpCounts) == 0x0000);
static_assert(offsetof(FMovieSceneTrackInstanceEntry, BoundObject) == 0x0000);
static_assert(offsetof(FMovieSceneTrackInstanceEntry, TrackInstance) == 0x0008);
static_assert(offsetof(UMovieSceneParameterSection, BoolParameterNamesAndCurves) == 0x00E8);
static_assert(offsetof(UMovieSceneParameterSection, ScalarParameterNamesAndCurves) == 0x00F8);
static_assert(offsetof(UMovieSceneParameterSection, Vector2DParameterNamesAndCurves) == 0x0108);
static_assert(offsetof(UMovieSceneParameterSection, VectorParameterNamesAndCurves) == 0x0118);
static_assert(offsetof(UMovieSceneParameterSection, ColorParameterNamesAndCurves) == 0x0128);
static_assert(offsetof(UMovieSceneParameterSection, TransformParameterNamesAndCurves) == 0x0138);
static_assert(offsetof(UMovieScene3DConstraintSection, ConstraintId) == 0x00E8);
static_assert(offsetof(UMovieScene3DConstraintSection, ConstraintBindingID) == 0x00F8);
static_assert(offsetof(UMovieScene3DAttachSection, AttachSocketName) == 0x0118);
static_assert(offsetof(UMovieScene3DAttachSection, AttachComponentName) == 0x0120);
static_assert(offsetof(UMovieScene3DAttachSection, AttachmentLocationRule) == 0x0128);
static_assert(offsetof(UMovieScene3DAttachSection, AttachmentRotationRule) == 0x0129);
static_assert(offsetof(UMovieScene3DAttachSection, AttachmentScaleRule) == 0x012A);
static_assert(offsetof(UMovieScene3DAttachSection, DetachmentLocationRule) == 0x012B);
static_assert(offsetof(UMovieScene3DAttachSection, DetachmentRotationRule) == 0x012C);
static_assert(offsetof(UMovieScene3DAttachSection, DetachmentScaleRule) == 0x012D);
static_assert(offsetof(UMovieScene3DConstraintTrack, ConstraintSections) == 0x0078);
static_assert(offsetof(UMovieScene3DPathSection, TimingCurve) == 0x0110);
static_assert(offsetof(UMovieScene3DPathSection, FrontAxisEnum) == 0x01B0);
static_assert(offsetof(UMovieScene3DPathSection, UpAxisEnum) == 0x01B1);
static_assert(offsetof(UMovieScene3DTransformSection, TransformMask) == 0x00F0);
static_assert(offsetof(UMovieScene3DTransformSection, Translation) == 0x00F8);
static_assert(offsetof(UMovieScene3DTransformSection, Rotation) == 0x02D8);
static_assert(offsetof(UMovieScene3DTransformSection, Scale) == 0x04B8);
static_assert(offsetof(UMovieScene3DTransformSection, ManualWeight) == 0x0698);
static_assert(offsetof(FMovieSceneActorReferenceKey, Object) == 0x0000);
static_assert(offsetof(FMovieSceneActorReferenceKey, ComponentName) == 0x0018);
static_assert(offsetof(FMovieSceneActorReferenceKey, SocketName) == 0x0020);
static_assert(offsetof(FMovieSceneActorReferenceData, KeyTimes) == 0x0008);
static_assert(offsetof(FMovieSceneActorReferenceData, KeyValues) == 0x0040);
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorReferenceData) == 0x00E8);
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorGuidIndexCurve) == 0x0198);
static_assert(offsetof(UMovieSceneActorReferenceSection, ActorGuidStrings) == 0x0218);
static_assert(offsetof(UMovieSceneAudioSection, Sound) == 0x00E8);
static_assert(offsetof(UMovieSceneAudioSection, StartFrameOffset) == 0x00F0);
static_assert(offsetof(UMovieSceneAudioSection, SoundVolume) == 0x0108);
static_assert(offsetof(UMovieSceneAudioSection, PitchMultiplier) == 0x01A8);
static_assert(offsetof(UMovieSceneAudioSection, AttachActorData) == 0x0248);
static_assert(offsetof(UMovieSceneAudioSection, AttenuationSettings) == 0x0308);
static_assert(offsetof(UMovieSceneAudioSection, DefaultAttachType) == 0x0343);
static_assert(offsetof(UMovieSceneAudioSection, AspectRatioType) == 0x0344);
static_assert(offsetof(UMovieSceneAudioTrack, AudioSections) == 0x0080);
static_assert(offsetof(UMovieSceneByteSection, ByteCurve) == 0x00E8);
static_assert(offsetof(UMovieSceneByteTrack, Enum) == 0x00B0);
static_assert(offsetof(FMovieSceneCameraAnimSectionData, CameraAnim) == 0x0000);
static_assert(offsetof(UMovieSceneCameraAnimSection, AnimData) == 0x00E8);
static_assert(offsetof(UMovieSceneCameraAnimSection, CameraAnim) == 0x0108);
static_assert(offsetof(UMovieSceneCameraAnimTrack, CameraAnimSections) == 0x0080);
static_assert(offsetof(UMovieSceneCameraCutSection, Weight) == 0x0100);
static_assert(offsetof(UMovieSceneCameraCutSection, UseCinemaDirection) == 0x01A0);
static_assert(offsetof(UMovieSceneCameraCutSection, CameraGuid) == 0x0234);
static_assert(offsetof(UMovieSceneCameraCutSection, CameraBindingID) == 0x0244);
static_assert(offsetof(UMovieSceneCameraCutSection, InitialCameraCutTransform) == 0x0260);
static_assert(offsetof(UMovieSceneCameraCutTrack, Sections) == 0x0080);
static_assert(offsetof(FMovieSceneCameraShakeSectionData, ShakeClass) == 0x0000);
static_assert(offsetof(FMovieSceneCameraShakeSectionData, PlaySpace) == 0x000C);
static_assert(offsetof(FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace) == 0x0010);
static_assert(offsetof(UMovieSceneCameraShakeSection, ShakeData) == 0x00E8);
static_assert(offsetof(UMovieSceneCameraShakeSection, ShakeClass) == 0x0108);
static_assert(offsetof(UMovieSceneCameraShakeSection, PlaySpace) == 0x0114);
static_assert(offsetof(UMovieSceneCameraShakeSection, UserDefinedPlaySpace) == 0x0118);
static_assert(offsetof(UMovieSceneCameraShakeSourceShakeSection, ShakeData) == 0x00E8);
static_assert(offsetof(UMovieSceneCameraShakeSourceShakeTrack, CameraShakeSections) == 0x0080);
static_assert(offsetof(FMovieSceneCameraShakeSourceTrigger, ShakeClass) == 0x0000);
static_assert(offsetof(FMovieSceneCameraShakeSourceTrigger, PlaySpace) == 0x000C);
static_assert(offsetof(FMovieSceneCameraShakeSourceTrigger, UserDefinedPlaySpace) == 0x0010);
static_assert(offsetof(FMovieSceneCameraShakeSourceTriggerChannel, KeyTimes) == 0x0008);
static_assert(offsetof(FMovieSceneCameraShakeSourceTriggerChannel, KeyValues) == 0x0018);
static_assert(offsetof(UMovieSceneCameraShakeSourceTriggerSection, Channel) == 0x00E8);
static_assert(offsetof(UMovieSceneCameraShakeSourceTriggerTrack, Sections) == 0x0080);
static_assert(offsetof(UMovieSceneCameraShakeTrack, CameraShakeSections) == 0x0080);
static_assert(offsetof(UMovieSceneCinematicShotSection, ShotDisplayName) == 0x0160);
static_assert(offsetof(UMovieSceneCinematicShotSection, DisplayName) == 0x0170);
static_assert(offsetof(UMovieSceneColorSection, RedCurve) == 0x00E8);
static_assert(offsetof(UMovieSceneColorSection, GreenCurve) == 0x0188);
static_assert(offsetof(UMovieSceneColorSection, BlueCurve) == 0x0228);
static_assert(offsetof(UMovieSceneColorSection, AlphaCurve) == 0x02C8);
static_assert(offsetof(UMovieSceneEnumSection, EnumCurve) == 0x00E8);
static_assert(offsetof(UMovieSceneEnumTrack, Enum) == 0x00B0);
static_assert(offsetof(FMovieSceneEventPtrs, Function) == 0x0000);
static_assert(offsetof(FMovieSceneEvent, Ptrs) == 0x0000);
static_assert(offsetof(UMovieSceneEventRepeaterSection, Event) == 0x00F8);
static_assert(offsetof(FEventPayload, EventName) == 0x0000);
static_assert(offsetof(FEventPayload, Parameters) == 0x0008);
static_assert(offsetof(FMovieSceneEventSectionData, Times) == 0x0008);
static_assert(offsetof(FMovieSceneEventSectionData, KeyValues) == 0x0018);
static_assert(offsetof(UMovieSceneEventSection, Events) == 0x00E8);
static_assert(offsetof(UMovieSceneEventSection, EventData) == 0x0160);
static_assert(offsetof(UMovieSceneEventTrack, EventPosition) == 0x0084);
static_assert(offsetof(UMovieSceneEventTrack, Sections) == 0x0088);
static_assert(offsetof(FMovieSceneEventChannel, KeyTimes) == 0x0008);
static_assert(offsetof(FMovieSceneEventChannel, KeyValues) == 0x0018);
static_assert(offsetof(UMovieSceneEventTriggerSection, EventChannel) == 0x00F8);
static_assert(offsetof(UMovieSceneFadeSection, FloatCurve) == 0x00E8);
static_assert(offsetof(UMovieSceneFadeSection, FadeColor) == 0x0188);
static_assert(offsetof(UMovieSceneFloatSection, FloatCurve) == 0x00F0);
static_assert(offsetof(UMovieSceneIntegerSection, IntegerCurve) == 0x00E8);
static_assert(offsetof(UMovieSceneLevelVisibilitySection, Visibility) == 0x00F1);
static_assert(offsetof(UMovieSceneLevelVisibilitySection, LevelNames) == 0x00F8);
static_assert(offsetof(UMovieSceneLevelVisibilityTrack, Sections) == 0x0078);
static_assert(offsetof(UMovieSceneMaterialParameterCollectionTrack, MPC) == 0x0090);
static_assert(offsetof(UMovieSceneObjectPropertySection, ObjectChannel) == 0x00E8);
static_assert(offsetof(UMovieSceneObjectPropertyTrack, PropertyClass) == 0x00B0);
static_assert(offsetof(UMovieSceneParticleParameterTrack, Sections) == 0x0080);
static_assert(offsetof(UMovieSceneParticleSection, ParticleKeys) == 0x00E8);
static_assert(offsetof(UMovieSceneParticleTrack, ParticleSections) == 0x0080);
static_assert(offsetof(UMovieScenePrimitiveMaterialSection, MaterialChannel) == 0x00E8);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, Animation) == 0x0000);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset) == 0x0008);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, StartFrameOffset) == 0x000C);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, EndFrameOffset) == 0x0010);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, SlotName) == 0x001C);
static_assert(offsetof(FMovieSceneSkeletalAnimationParams, Weight) == 0x0028);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, Params) == 0x00E8);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, AnimSequence) == 0x01C0);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, Animation) == 0x01C8);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, SlotName) == 0x01E0);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, StartLocationOffset) == 0x01E8);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, StartRotationOffset) == 0x01F4);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, MatchedBoneName) == 0x0204);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, MatchedLocationOffset) == 0x020C);
static_assert(offsetof(UMovieSceneSkeletalAnimationSection, MatchedRotationOffset) == 0x0218);
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, AnimationSections) == 0x0080);
static_assert(offsetof(UMovieSceneSkeletalAnimationTrack, RootMotionParams) == 0x0098);
static_assert(offsetof(UMovieSceneSlomoSection, FloatCurve) == 0x00E8);
static_assert(offsetof(FMovieSceneStringChannel, Times) == 0x0008);
static_assert(offsetof(FMovieSceneStringChannel, Values) == 0x0018);
static_assert(offsetof(FMovieSceneStringChannel, DefaultValue) == 0x0028);
static_assert(offsetof(UMovieSceneStringSection, StringCurve) == 0x00E8);
static_assert(offsetof(UMovieSceneVectorSection, Curves) == 0x00E8);
static_assert(offsetof(FMovieScene3DPathSectionTemplate, PathBindingID) == 0x0020);
static_assert(offsetof(FMovieScene3DPathSectionTemplate, TimingCurve) == 0x0038);
static_assert(offsetof(FMovieScene3DPathSectionTemplate, FrontAxisEnum) == 0x00D8);
static_assert(offsetof(FMovieScene3DPathSectionTemplate, UpAxisEnum) == 0x00D9);
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Location) == 0x0008);
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Rotation) == 0x0014);
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Scale) == 0x0020);
static_assert(offsetof(FMovieScene3DTransformKeyStruct, Time) == 0x002C);
static_assert(offsetof(FMovieScene3DScaleKeyStruct, Scale) == 0x0008);
static_assert(offsetof(FMovieScene3DScaleKeyStruct, Time) == 0x0014);
static_assert(offsetof(FMovieScene3DRotationKeyStruct, Rotation) == 0x0008);
static_assert(offsetof(FMovieScene3DRotationKeyStruct, Time) == 0x0014);
static_assert(offsetof(FMovieScene3DLocationKeyStruct, Location) == 0x0008);
static_assert(offsetof(FMovieScene3DLocationKeyStruct, Time) == 0x0014);
static_assert(offsetof(FMovieScene3DTransformTemplateData, TranslationCurve) == 0x0000);
static_assert(offsetof(FMovieScene3DTransformTemplateData, RotationCurve) == 0x01E0);
static_assert(offsetof(FMovieScene3DTransformTemplateData, ScaleCurve) == 0x03C0);
static_assert(offsetof(FMovieScene3DTransformTemplateData, ManualWeight) == 0x05A0);
static_assert(offsetof(FMovieScene3DTransformTemplateData, BlendType) == 0x0640);
static_assert(offsetof(FMovieScene3DTransformTemplateData, Mask) == 0x0644);
static_assert(offsetof(FMovieSceneActorReferenceSectionTemplate, PropertyData) == 0x0020);
static_assert(offsetof(FMovieSceneActorReferenceSectionTemplate, ActorReferenceData) == 0x0038);
static_assert(offsetof(FMovieSceneAudioSectionTemplate, AudioSection) == 0x0020);
static_assert(offsetof(FMovieSceneCameraShakeSectionTemplate, SourceData) == 0x0020);
static_assert(offsetof(FMovieSceneCameraShakeSectionTemplate, SectionStartTime) == 0x0040);
static_assert(offsetof(FMovieSceneCameraAnimSectionTemplate, SourceData) == 0x0020);
static_assert(offsetof(FMovieSceneCameraAnimSectionTemplate, SectionStartTime) == 0x0040);
static_assert(offsetof(FMovieSceneCameraShakeSourceShakeSectionTemplate, SourceData) == 0x0020);
static_assert(offsetof(FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionStartTime) == 0x0040);
static_assert(offsetof(FMovieSceneCameraShakeSourceShakeSectionTemplate, SectionEndTime) == 0x0044);
static_assert(offsetof(FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerTimes) == 0x0020);
static_assert(offsetof(FMovieSceneCameraShakeSourceTriggerSectionTemplate, TriggerValues) == 0x0030);
static_assert(offsetof(FMovieSceneColorKeyStruct, Color) == 0x0008);
static_assert(offsetof(FMovieSceneColorKeyStruct, Time) == 0x0018);
static_assert(offsetof(FMovieSceneColorSectionTemplate, Curves) == 0x0038);
static_assert(offsetof(FMovieSceneColorSectionTemplate, BlendType) == 0x02B8);
static_assert(offsetof(FMovieSceneEventPayloadVariable, Value) == 0x0000);
static_assert(offsetof(FMovieSceneEventTriggerData, Ptrs) == 0x0000);
static_assert(offsetof(FMovieSceneEventTriggerData, ObjectBindingID) == 0x0028);
static_assert(offsetof(FMovieSceneEventSectionTemplate, EventData) == 0x0020);
static_assert(offsetof(FMovieSceneFadeSectionTemplate, FadeCurve) == 0x0020);
static_assert(offsetof(FMovieSceneFadeSectionTemplate, FadeColor) == 0x00C0);
static_assert(offsetof(FMovieSceneMaterialParameterCollectionTemplate, MPC) == 0x0080);
static_assert(offsetof(FMovieSceneObjectPropertyTemplate, ObjectChannel) == 0x0038);
static_assert(offsetof(FMovieSceneParticleSectionTemplate, ParticleKeys) == 0x0020);
static_assert(offsetof(FMovieScenePrimitiveMaterialTemplate, MaterialChannel) == 0x0028);
static_assert(offsetof(FMovieSceneVectorPropertySectionTemplate, ComponentCurves) == 0x0038);
static_assert(offsetof(FMovieSceneVectorPropertySectionTemplate, BlendType) == 0x02BC);
static_assert(offsetof(FMovieSceneStringPropertySectionTemplate, StringCurve) == 0x0038);
static_assert(offsetof(FMovieSceneIntegerPropertySectionTemplate, IntegerCurve) == 0x0038);
static_assert(offsetof(FMovieSceneIntegerPropertySectionTemplate, BlendType) == 0x00C8);
static_assert(offsetof(FMovieSceneEnumPropertySectionTemplate, EnumCurve) == 0x0038);
static_assert(offsetof(FMovieSceneBytePropertySectionTemplate, ByteCurve) == 0x0038);
static_assert(offsetof(FMovieSceneBoolPropertySectionTemplate, BoolCurve) == 0x0038);
static_assert(offsetof(FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime) == 0x00D8);
static_assert(offsetof(FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime) == 0x00DC);
static_assert(offsetof(FMovieSceneSkeletalAnimationSectionTemplate, Params) == 0x0020);
static_assert(offsetof(FMovieSceneSlomoSectionTemplate, SlomoCurve) == 0x0020);
static_assert(offsetof(FLevelVisibilityComponentData, Section) == 0x0000);
static_assert(offsetof(FMovieSceneVectorKeyStructBase, Time) == 0x0008);
static_assert(offsetof(FMovieSceneVector4KeyStruct, Vector) == 0x0030);
static_assert(offsetof(FMovieSceneVectorKeyStruct, Vector) == 0x0028);
static_assert(offsetof(FMovieSceneVector2DKeyStruct, Vector) == 0x0028);
